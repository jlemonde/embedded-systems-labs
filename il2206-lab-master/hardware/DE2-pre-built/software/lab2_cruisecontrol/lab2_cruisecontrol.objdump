
lab2_cruisecontrol.elf:     file format elf32-littlenios2
lab2_cruisecontrol.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00019774 memsz 0x00019774 flags r-x
    LOAD off    0x0001a794 vaddr 0x01019794 paddr 0x0101b2e4 align 2**12
         filesz 0x00001b50 memsz 0x00001b50 flags rw-
    LOAD off    0x0001ce34 vaddr 0x0101ce34 paddr 0x0101ce34 align 2**12
         filesz 0x00000000 memsz 0x00012140 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018fdc  010001bc  010001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005fc  01019198  01019198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b50  01019794  0101b2e4  0001a794  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00012140  0101ce34  0101ce34  0001ce34  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001c2e4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000ef8  00000000  00000000  0001c310  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000027eb  00000000  00000000  0001d208  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00033c64  00000000  00000000  0001f9f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009eea  00000000  00000000  00053657  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001ddd3  00000000  00000000  0005d541  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002bdc  00000000  00000000  0007b314  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000261d  00000000  00000000  0007def0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000dba8  00000000  00000000  0008050d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0008e0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a10  00000000  00000000  0008e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00093f6c  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00093f72  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00093f77  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00093f78  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00093f79  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00093f84  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00093f8f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  00093f9a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000051  00000000  00000000  00093fa9  2**0
                  CONTENTS, READONLY
 26 .jdi          0000509f  00000000  00000000  00093ffa  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007119e  00000000  00000000  00099099  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001bc l    d  .text	00000000 .text
01019198 l    d  .rodata	00000000 .rodata
01019794 l    d  .rwdata	00000000 .rwdata
0101ce34 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cruise_skeleton.c
01019794 l     O .rwdata	0000002c b2sLUT
0101cf30 l     O .bss	00000018 alarm.3370
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
01001578 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01001edc l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
010028f4 l     F .text	00000058 __sprint_r
0101946a l     O .rodata	00000010 blanks.3452
0101945a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01004970 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01006398 l     F .text	00000058 std
010064a4 l     F .text	00000008 __fp_lock
010064ac l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
010197c0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0101b234 l     O .rwdata	00000004 charset
010194a0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010195e8 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0100b498 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100b4f8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100b5fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100b720 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100b800 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100b960 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0100bbac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0101b258 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0100c00c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0101b264 l     O .rwdata	00000004 lockid
0101ceb0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0101b268 l     O .rwdata	00000004 lockid
0101ceb8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0100da48 l     F .text	00000044 OS_InitMisc
0100da8c l     F .text	0000006c OS_InitRdyList
0100dbf0 l     F .text	000000e0 OS_InitTCBList
0100d96c l     F .text	000000dc OS_InitEventList
0100daf8 l     F .text	0000007c OS_InitTaskIdle
0100db74 l     F .text	0000007c OS_InitTaskStat
0100de64 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0100fde4 l     F .text	00000110 OS_FlagTaskRdy
0100fb3c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
010165a0 l     F .text	0000003c OSTmr_Lock
01015f98 l     F .text	000000bc OSTmr_Alloc
010165dc l     F .text	00000034 OSTmr_Unlock
010164a4 l     F .text	000000fc OSTmr_Unlink
01016054 l     F .text	000000d0 OSTmr_Free
01016340 l     F .text	00000164 OSTmr_Link
010162c4 l     F .text	0000007c OSTmr_InitTask
01016610 l     F .text	00000130 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
0101a17c l     O .rwdata	0000106c jtag_uart_0
0101b1e8 l     O .rwdata	0000002c DE2_LCD
010167f0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01016aa8 l     F .text	000002c4 altera_avalon_jtag_uart_irq
01016d6c l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01017584 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01017c84 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01018128 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01018278 l     F .text	000000f8 alt_file_locked
010184fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
0101cf2c l     O .bss	00000002 OSTmrCtr
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01018ed0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
01019128 l     F .text	00000040 alt_sim_halt
0101ce44 g     O .bss	00000004 SemSwitches
01008188 g     F .text	00000094 _mprec_log10
0101b2b6 g     O .rwdata	00000002 OSTaskNameSize
01008274 g     F .text	00000088 __any_on
01009a2c g     F .text	00000070 _isatty_r
010195c0 g     O .rodata	00000028 __mprec_tinytens
0100b9c0 g     F .text	000000c8 alt_main
010027cc g     F .text	000000a0 _puts_r
0101cec0 g     O .bss	00000004 OSTmrFreeList
0102ece4 g     O .bss	00000100 alt_irq
01009a9c g     F .text	00000078 _lseek_r
0101cf70 g     O .bss	00002000 SwitchIO_Stack
01011364 g     F .text	000000d4 OS_MemInit
01001054 g     F .text	0000002c Watchdog
0101ce48 g     O .bss	00000001 task_prio
0101b2e4 g       *ABS*	00000000 __flash_rwdata_start
0101538c g     F .text	00000064 OSTimeSet
01017700 g     F .text	00000034 alt_up_character_lcd_send_cmd
0100ac1c g     F .text	00000088 __eqdf2
0102af70 g     O .bss	00000010 OSTmrWheelTbl
0101b220 g     O .rwdata	00000004 engine
0101ce4c g     O .bss	00000004 Mbox_Throttle
0100c5c0 g     F .text	000006b4 OSEventPendMulti
0102ef74 g       *ABS*	00000000 __alt_heap_start
0101895c g     F .text	00000020 OSTaskCreateHook
01002754 g     F .text	00000044 printf
0101b28e g     O .rwdata	00000002 OSMboxEn
0100cccc g     F .text	0000007c OSIntEnter
00100000 g       *ABS*	00000000 __alt_mem_sram
010094e4 g     F .text	00000068 __sseek
01006400 g     F .text	000000a4 __sinit
0101b29e g     O .rwdata	00000002 OSQEn
0100710c g     F .text	00000084 _setlocale_r
01006500 g     F .text	0000009c __sfmoreglue
0100c27c g     F .text	000000d0 __malloc_unlock
010189b8 g     F .text	0000001c OSTaskStatHook
0101ce3d g     O .bss	00000001 TOP_GEAR
0101cec4 g     O .bss	00000001 OSLockNesting
0101cec8 g     O .bss	00000004 OSTmrSemSignal
0101b2dc g     O .rwdata	00000002 OSDataSize
0101cecc g     O .bss	00000001 OSRunning
01007c04 g     F .text	000000e0 memmove
01018a40 g     F .text	00000020 OSInitHookBegin
0101b2d4 g     O .rwdata	00000002 OSTmrSize
010064f0 g     F .text	00000010 _cleanup
010082fc g     F .text	000000bc _Balloc
0101ced0 g     O .bss	00000004 OSIdleCtr
0100ad2c g     F .text	00000088 __gtdf2
01018628 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
01017684 g     F .text	0000007c get_DDRAM_addr
0100e198 g     F .text	000002e0 OS_TCBInit
01000000 g     F .entry	0000000c __reset
0101ced4 g     O .bss	00000002 OSTmrUsed
0100082c g     F .text	000002bc VehicleTask
0101b2da g     O .rwdata	00000002 OSTmrWheelTblSize
01000020 g       *ABS*	00000000 __flash_exceptions_start
0101b27a g     O .rwdata	00000002 OSEventSize
0101ced6 g     O .bss	00000001 OSPrioHighRdy
010099b8 g     F .text	00000074 _fstat_r
0101897c g     F .text	00000020 OSTaskDelHook
010005e0 g     F .text	0000010c adjust_position
0101ce94 g     O .bss	00000004 errno
01001ea4 g     F .text	00000038 __make_dp
01018608 g       .text	00000000 OSStartHighRdy
01013a7c g     F .text	00000200 OSTaskCreateExt
0100f658 g     F .text	00000068 OSFlagPendGetFlagsRdy
0101b2ba g     O .rwdata	00000002 OSTaskStatStkSize
0100e664 g     F .text	00000334 OSFlagAccept
01011aa0 g     F .text	000000c8 OSQFlush
01011438 g     F .text	00000154 OSQAccept
0101cea0 g     O .bss	00000004 alt_argv
01023214 g       *ABS*	00000000 _gp
0101ce41 g     O .bss	00000001 reset
010138a8 g     F .text	000001d4 OSTaskCreate
01000eb8 g     F .text	000000bc SwitchIO
01013334 g     F .text	00000574 OSTaskChangePrio
0101cebc g     O .bss	00000004 alt_heapsem
0100e478 g     F .text	000001ec OSDebugInit
01013c7c g     F .text	0000040c OSTaskDel
01019ffc g     O .rwdata	00000180 alt_fd_list
0102af80 g     O .bss	00000370 OSFlagTbl
0101ce3e g     O .bss	00000001 GAS_PEDAL
0100d748 g     F .text	000000b8 OS_EventTaskRemove
01017dac g     F .text	00000094 alt_find_dev
01007b64 g     F .text	000000a0 memcpy
0101ce50 g     O .bss	00000004 Mbox_Velocity
0101b2a4 g     O .rwdata	00000002 OSRdyTblSize
01017898 g     F .text	0000004c alt_up_character_lcd_write_fd
0102b2f0 g     O .bss	00000340 OSTmrTbl
010064e4 g     F .text	0000000c _cleanup_r
01001cd4 g     F .text	000000f8 __floatsidf
01018200 g     F .text	00000078 alt_io_redirect
0100ae3c g     F .text	00000088 __ltdf2
01019198 g       *ABS*	00000000 __DTOR_END__
0101ce3f g     O .bss	00000001 BRAKE_PEDAL
0101ef70 g     O .bss	00002000 ControlTask_Stack
0100286c g     F .text	00000014 puts
0100c34c g     F .text	00000130 OSEventNameGet
0101b288 g     O .rwdata	00000002 OSFlagMax
010080d8 g     F .text	000000b0 __ratio
0100cd48 g     F .text	00000100 OSIntExit
0101ce54 g     O .bss	00000004 TimerVehicle
0101ce58 g     O .bss	00000004 SemControl
0101b2c2 g     O .rwdata	00000002 OSTCBSize
0101ced7 g     O .bss	00000001 OSPrioCur
01016fe8 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01002798 g     F .text	00000034 _printf_r
01002018 g     F .text	00000008 __udivsi3
0100b65c g     F .text	000000c4 isatty
0101b2a8 g     O .rwdata	00000002 OSStkWidth
010194d0 g     O .rodata	000000c8 __mprec_tens
0101b29c g     O .rwdata	00000002 OSPtrSize
0101ce5c g     O .bss	00000004 TimerWatchdog
010070e8 g     F .text	00000008 __locale_charset
01000310 g     F .text	00000034 CallbackSwitches
0101b27c g     O .rwdata	00000002 OSEventTblSize
0101b214 g     O .rwdata	00000004 gas_pedal
01019084 g     F .text	000000a4 __fixunsdfsi
0101857c g       .text	00000000 OSCtxSw
0101ce88 g     O .bss	00000004 __malloc_top_pad
0101ced8 g     O .bss	00000004 OSTCBList
01015f5c g     F .text	0000003c OSTmrSignal
0101ce98 g     O .bss	00000004 alt_fd_list_lock
0101b230 g     O .rwdata	00000004 __mb_cur_max
010070f0 g     F .text	0000000c _localeconv_r
010002a8 g     F .text	00000034 CallbackControl
01008a60 g     F .text	0000003c __i2b
01006acc g     F .text	0000049c __sfvwrite_r
0102b630 g     O .bss	00000c30 OSMemTbl
0101cedc g     O .bss	00000001 OSTickStepState
0100946c g     F .text	00000070 _sbrk_r
0101b2a0 g     O .rwdata	00000002 OSQMax
0102c260 g     O .bss	00000800 OSTaskStatStk
010006ec g     F .text	00000140 adjust_velocity
01010f4c g     F .text	0000010c OSMemNameGet
0101b280 g     O .rwdata	00000002 OSFlagEn
01009b14 g     F .text	00000078 _read_r
0101b2c6 g     O .rwdata	00000002 OSTimeTickHookEn
01012004 g     F .text	00000180 OSQPost
0100fef4 g     F .text	000000ac OS_FlagUnlink
01019bc0 g     O .rwdata	0000000c __lc_ctype
010002dc g     F .text	00000034 CallbackButtons
0101b250 g     O .rwdata	00000004 alt_max_fd
0100dd24 g     F .text	0000006c OS_MemCopy
0100dd90 g     F .text	000000d4 OS_Sched
0100261c g     F .text	00000138 __unpack_d
01009894 g     F .text	00000110 _fclose_r
01010e48 g     F .text	00000104 OSMemGet
01010afc g     F .text	00000130 OSMboxQuery
010143b0 g     F .text	000001c4 OSTaskNameSet
01006364 g     F .text	00000034 fflush
0101ce8c g     O .bss	00000004 __malloc_max_sbrked_mem
0101cee0 g     O .bss	00000004 OSCtxSwCtr
010189d4 g     F .text	0000006c OSTimeTickHook
0101ce38 g     O .bss	00000004 led_red
0101ce3c g     O .bss	00000001 ENGINE
0101b28a g     O .rwdata	00000002 OSFlagNameSize
01001524 g     F .text	00000054 __extendsfdf2
0100d800 g     F .text	00000104 OS_EventTaskRemoveMulti
01001a08 g     F .text	00000074 __adddf3
0100d5f4 g     F .text	00000154 OS_EventTaskWaitMulti
01007fb8 g     F .text	00000120 __b2d
0101b2a2 g     O .rwdata	00000002 OSQSize
0100a1f8 g     F .text	00000660 __umoddi3
0100b86c g     F .text	000000f4 lseek
01012be0 g     F .text	0000027c OSSemPend
0101b22c g     O .rwdata	00000004 _global_impure_ptr
01020f70 g     O .bss	00002000 OverloadDetection_Stack
01008e08 g     F .text	000005f4 _realloc_r
010001f8 g     F .text	00000028 buttons_pressed
0101b28c g     O .rwdata	00000002 OSLowestPrio
0102ef74 g       *ABS*	00000000 __bss_end
01018030 g     F .text	000000f8 alt_iic_isr_register
01018a98 g     F .text	00000020 OSTCBInitHook
0101b2d2 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0100bdd8 g     F .text	00000110 alt_tick
0101083c g     F .text	00000134 OSMboxPost
01009b8c g     F .text	0000066c __udivdi3
0101b274 g     O .rwdata	00000002 OSEventEn
01019598 g     O .rodata	00000028 __mprec_bigtens
01008ce8 g     F .text	00000120 __s2b
0101b2ce g     O .rwdata	00000002 OSTmrCfgNameSize
0100aec4 g     F .text	00000194 __floatunsidf
01007ed8 g     F .text	00000060 __mcmp
010064cc g     F .text	00000018 __fp_lock_all
01017fe8 g     F .text	00000048 alt_ic_irq_enabled
0101cee4 g     O .bss	00000002 OSTmrFree
0100fd00 g     F .text	000000e4 OS_FlagInit
0100bd40 g     F .text	00000098 alt_alarm_stop
010155d4 g     F .text	00000178 OSTmrDel
0101b2b0 g     O .rwdata	00000002 OSTaskIdleStkSize
0101cf28 g     O .bss	00000004 alt_irq_active
0101276c g     F .text	000000c0 OSSemAccept
0101ce34 g     O .bss	00000002 led_green
01011178 g     F .text	000000f0 OSMemPut
01010c2c g     F .text	0000021c OSMemCreate
0101cee8 g     O .bss	00000004 OSIdleCtrMax
010000ec g     F .exceptions	000000d0 alt_irq_handler
01019fd4 g     O .rwdata	00000028 alt_dev_null
0101b2c4 g     O .rwdata	00000002 OSTicksPerSec
01002240 g     F .text	000000c8 __unpack_f
01017b80 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0101857c g       .text	00000000 OSIntCtxSw
01017bb4 g     F .text	0000001c alt_dcache_flush_all
01007da4 g     F .text	00000070 __hi0bits
01001dcc g     F .text	000000d8 __fixdfsi
0101b224 g     O .rwdata	00000004 cruise_control
0101ceec g     O .bss	00000004 OSTCBFreeList
0101b2e4 g       *ABS*	00000000 __ram_rwdata_end
01012e5c g     F .text	0000017c OSSemPendAbort
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
01022f70 g     O .bss	00002000 VehicleTask_Stack
0101b248 g     O .rwdata	00000008 alt_dev_list
0100bee8 g     F .text	00000124 write
0101b2c8 g     O .rwdata	00000002 OSVersionNbr
01024f70 g     O .bss	00002000 ButtonsIO_Stack
01019794 g       *ABS*	00000000 __ram_rodata_end
0100b524 g     F .text	000000d8 fstat
010158b8 g     F .text	000001fc OSTmrRemainGet
0101b270 g     O .rwdata	00000004 OSEndiannessTest
01008bc8 g     F .text	00000120 __pow5mult
0101ce7c g     O .bss	00000004 __nlocale_changed
01002020 g     F .text	00000008 __umodsi3
0101b282 g     O .rwdata	00000002 OSFlagGrpSize
01015ab4 g     F .text	000000fc OSTmrStateGet
0102ef74 g       *ABS*	00000000 end
010020e0 g     F .text	00000160 __pack_f
01016970 g     F .text	00000138 altera_avalon_jtag_uart_init
0100e008 g     F .text	000000c8 OS_TaskStat
01019194 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010175f4 g     F .text	00000090 alt_avalon_timer_sc_init
01002060 g     F .text	00000080 __clzsi2
010172a8 g     F .text	000002dc altera_avalon_jtag_uart_write
01016124 g     F .text	000001a0 OSTmr_Init
010063f0 g     F .text	00000004 __sfp_lock_acquire
01007a80 g     F .text	000000e4 memchr
0100dcd0 g     F .text	00000054 OS_MemClr
010177a8 g     F .text	00000078 alt_up_character_lcd_write
0100294c g     F .text	00001ec4 ___vfprintf_internal_r
0101864c g     F .text	00000310 OSTaskStkInit
010067b8 g     F .text	00000314 _free_r
0100d350 g     F .text	00000194 OS_EventTaskRdy
01018ed4 g     F .text	000001b0 __call_exitprocs
010004b4 g     F .text	000000ac show_target_velocity
0101cef0 g     O .bss	00000001 OSCPUUsage
0101ce80 g     O .bss	00000004 __mlocale_changed
0101b23c g     O .rwdata	00000004 __malloc_sbrk_base
010001bc g     F .text	0000003c _start
0101cea8 g     O .bss	00000004 _alt_tick_rate
01011b68 g     F .text	00000320 OSQPend
01014d74 g     F .text	0000014c OSTimeDly
010003c4 g     F .text	000000f0 show_velocity_on_sevenseg
010086c0 g     F .text	0000014c __lshift
0101ceac g     O .bss	00000004 _alt_nticks
0100ba88 g     F .text	00000124 read
01016774 g     F .text	0000007c alt_sys_init
01017a0c g     F .text	000000b0 alt_up_character_lcd_shift_display
0100148c g     F .text	00000098 __floatsisf
01018d9c g     F .text	00000134 __register_exitproc
0101cef1 g     O .bss	00000001 OSTaskCtr
01014ec0 g     F .text	00000258 OSTimeDlyHMSM
0100880c g     F .text	00000254 __multiply
01017abc g     F .text	00000090 alt_up_character_lcd_erase_pos
01016e80 g     F .text	00000074 altera_avalon_jtag_uart_close
01002028 g     F .text	00000038 __mulsi3
01019794 g       *ABS*	00000000 __ram_rwdata_start
01019198 g       *ABS*	00000000 __ram_rodata_start
0101cf48 g     O .bss	00000028 __malloc_current_mallinfo
0101b276 g     O .rwdata	00000002 OSEventMax
010083b8 g     F .text	0000017c __d2b
01012fd8 g     F .text	00000128 OSSemPost
0100ced4 g     F .text	000000e4 OSSchedUnlock
01016828 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01018bd8 g     F .text	00000104 alt_get_fd
0101cef4 g     O .bss	00000004 OSMemFreeList
0100d028 g     F .text	000000ac OSStatInit
0100fa68 g     F .text	000000d4 OSFlagQuery
0100b17c g     F .text	000000c8 __fpcmp_parts_d
0101b2ac g     O .rwdata	00000002 OSTaskCreateExtEn
01009824 g     F .text	00000070 _close_r
01018d28 g     F .text	00000074 memcmp
0100d334 g     F .text	0000001c OS_Dummy
010168d8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0102ef74 g       *ABS*	00000000 __alt_stack_base
01016920 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01004834 g     F .text	0000013c __swsetup_r
0102ca60 g     O .bss	000001e0 OSQTbl
0101ce60 g     O .bss	00000004 SemVehicle
01001a7c g     F .text	00000258 __divdf3
0100659c g     F .text	000000f0 __sfp
0100821c g     F .text	00000058 __copybits
0101b218 g     O .rwdata	00000004 brake_pedal
01019bcc g     O .rwdata	00000408 __malloc_av_
010063fc g     F .text	00000004 __sinit_lock_release
0101cef8 g     O .bss	00000004 OSTCBHighRdy
0100a858 g     F .text	000003c4 __muldf3
010095c8 g     F .text	00000060 __sread
0101cefc g     O .bss	00000004 OSQFreeList
01018ab8 g     F .text	00000120 alt_find_file
01000274 g     F .text	00000034 CallbackVehicle
01017bd0 g     F .text	000000b4 alt_dev_llist_insert
0100c174 g     F .text	00000108 __malloc_lock
0100bc84 g     F .text	000000bc sbrk
0100c47c g     F .text	00000144 OSEventNameSet
01006168 g     F .text	000001fc _fflush_r
01000388 g     F .text	0000003c int2seven
0101ce64 g     O .bss	00000004 SemButtons
0100975c g     F .text	000000c8 _calloc_r
0101cf00 g     O .bss	00000001 OSRdyGrp
01015bb0 g     F .text	00000180 OSTmrStart
0101ce34 g       *ABS*	00000000 __bss_start
01007ce4 g     F .text	00000098 memset
01001410 g     F .text	0000007c main
0101cea4 g     O .bss	00000004 alt_envp
0101ce90 g     O .bss	00000004 __malloc_max_total_mem
01016880 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01019614 g     O .rodata	00000100 OSUnMapTbl
0101b2a6 g     O .rwdata	00000002 OSSemEn
0101795c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100f6c0 g     F .text	000003a8 OSFlagPost
010094dc g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010099a4 g     F .text	00000014 fclose
0100d4e4 g     F .text	00000110 OS_EventTaskWait
0100e0d0 g     F .text	000000c8 OS_TaskStatStkChk
01000220 g     F .text	00000024 switches_pressed
0102ede4 g     O .bss	00000190 _atexit0
01014088 g     F .text	00000170 OSTaskDelReq
01004bb4 g     F .text	000015b4 _dtoa_r
01007340 g     F .text	00000740 _malloc_r
0101b254 g     O .rwdata	00000004 alt_errno
0100cfb8 g     F .text	00000070 OSStart
0100c118 g     F .text	0000005c __env_unlock
01007030 g     F .text	000000b8 _fwalk
01026f70 g     O .bss	00002000 StartTask_Stack
01014574 g     F .text	00000218 OSTaskResume
01011268 g     F .text	000000fc OSMemQuery
0101b2b8 g     O .rwdata	00000002 OSTaskStatEn
0101b292 g     O .rwdata	00000002 OSMemMax
01012184 g     F .text	00000188 OSQPostFront
01001f58 g     F .text	00000060 __divsi3
0101cf01 g     O .bss	00000003 OSRdyTbl
0101b26c g     O .rwdata	00000002 OSDebugEn
010192e4 g     O .rodata	00000014 __thenan_df
01017768 g     F .text	00000040 alt_up_character_lcd_open_dev
0100668c g     F .text	0000012c _malloc_trim_r
01019198 g       *ABS*	00000000 __CTOR_END__
0101b284 g     O .rwdata	00000002 OSFlagNodeSize
0101b2cc g     O .rwdata	00000002 OSTmrCfgMax
01017734 g     F .text	00000034 alt_up_character_lcd_init
01009628 g     F .text	000000bc strcmp
0101158c g     F .text	00000214 OSQCreate
010141f8 g     F .text	000001b8 OSTaskNameGet
01019198 g       *ABS*	00000000 __flash_rodata_start
0101230c g     F .text	00000234 OSQPostOpt
0100d0d4 g     F .text	00000240 OSTimeTick
0101b2b4 g     O .rwdata	00000002 OSTaskMax
01019198 g       *ABS*	00000000 __DTOR_LIST__
0101282c g     F .text	00000114 OSSemCreate
0101b2d8 g     O .rwdata	00000002 OSTmrWheelSize
0101ce68 g     O .bss	00000004 Sem_Watchdog
01000560 g     F .text	00000080 show_position
01028f70 g     O .bss	00002000 Watchdog_Stack
0101ce6c g     O .bss	00000004 delay
0100aca4 g     F .text	00000088 __nedf2
0101b21c g     O .rwdata	00000004 top_gear
0101b2ae g     O .rwdata	00000002 OSTaskDelEn
01013100 g     F .text	00000130 OSSemQuery
010117a0 g     F .text	00000300 OSQDel
01011e88 g     F .text	0000017c OSQPendAbort
01016740 g     F .text	00000034 alt_irq_init
0100bc0c g     F .text	00000078 alt_release_fd
01017b4c g     F .text	00000034 alt_up_character_lcd_cursor_off
010192f8 g     O .rodata	00000100 __clz_tab
0101ce84 g     O .bss	00000004 _PathLocale
01015d30 g     F .text	0000022c OSTmrStop
01018cdc g     F .text	00000014 atexit
010096e4 g     F .text	00000078 _write_r
0100ce48 g     F .text	0000008c OSSchedLock
01007190 g     F .text	0000001c setlocale
0102cc40 g     O .bss	00000800 OSTmrTaskStk
0100e998 g     F .text	0000013c OSFlagCreate
0101b228 g     O .rwdata	00000004 _impure_ptr
0101ce70 g     O .bss	00000004 TimerButtons
0101ce9c g     O .bss	00000004 alt_argc
01017d48 g     F .text	00000064 _do_dtors
0101b27e g     O .rwdata	00000002 OSEventMultiEn
010153f0 g     F .text	000001e4 OSTmrCreate
0100ead4 g     F .text	000002a8 OSFlagDel
0101cf04 g     O .bss	00000004 OSEventFreeList
01000020 g       .exceptions	00000000 alt_irq_entry
010106c0 g     F .text	0000017c OSMboxPendAbort
01000f74 g     F .text	000000e0 ButtonsIO
01007f38 g     F .text	00000080 __ulp
010093fc g     F .text	00000040 __isinfd
0100f014 g     F .text	00000644 OSFlagPend
0101b2ca g     O .rwdata	00000002 OSTmrEn
010064b4 g     F .text	00000018 __fp_unlock_all
0101b240 g     O .rwdata	00000008 alt_fs_list
0101574c g     F .text	0000016c OSTmrNameGet
0100ded4 g     F .text	00000080 OS_StrCopy
0101ce74 g     O .bss	00000004 TimerControl
0101b294 g     O .rwdata	00000002 OSMemNameSize
01018a60 g     F .text	0000001c OSInitHookEnd
01000020 g       *ABS*	00000000 __ram_exceptions_start
0101b2c0 g     O .rwdata	00000002 OSTCBPrioTblMax
010070fc g     F .text	00000010 localeconv
0101b2bc g     O .rwdata	00000002 OSTaskStatStkChkEn
01000244 g     F .text	00000030 alarm_handler
01010044 g     F .text	00000114 OSMboxCreate
01017e5c g     F .text	00000050 alt_ic_isr_register
0101b290 g     O .rwdata	00000002 OSMemEn
0101b29a g     O .rwdata	00000002 OSMutexEn
0101b2e4 g       *ABS*	00000000 _edata
0102ef74 g       *ABS*	00000000 _end
01000ae8 g     F .text	000003d0 ControlTask
0101cf08 g     O .bss	00000001 OSIntNesting
010001bc g       *ABS*	00000000 __ram_exceptions_end
01016ef4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01015118 g     F .text	00000210 OSTimeDlyResume
0100eec0 g     F .text	00000154 OSFlagNameSet
010103f8 g     F .text	000002c8 OSMboxPend
0101ce78 g     O .bss	00000004 TimerSwitches
01001080 g     F .text	0000002c OverloadDetection
0101478c g     F .text	000001fc OSTaskStkChk
01017f48 g     F .text	000000a0 alt_ic_irq_disable
0101b296 g     O .rwdata	00000002 OSMemSize
0100954c g     F .text	0000007c __swrite
0101b238 g     O .rwdata	00000004 __malloc_trim_threshold
0101855c g     F .text	00000020 altera_nios2_qsys_irq_init
0101cf0c g     O .bss	00000004 OSTCBCur
01018cf0 g     F .text	00000038 exit
0101b298 g     O .rwdata	00000002 OSMemTblSize
01006f68 g     F .text	000000c8 _fwalk_reent
01008534 g     F .text	0000018c __mdiff
01001fb8 g     F .text	00000060 __modsi3
0100ffa0 g     F .text	000000a4 OSMboxAccept
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
010063f4 g     F .text	00000004 __sfp_lock_release
0100cc74 g     F .text	00000058 OSInit
0101cf10 g     O .bss	00000004 OSTmrTime
01000000 g       *ABS*	00000000 __alt_mem_sdram
01014bb4 g     F .text	00000144 OSTaskQuery
01017820 g     F .text	00000078 alt_up_character_lcd_string
010126c0 g     F .text	000000ac OS_QInit
0100df54 g     F .text	00000058 OS_StrLen
01011058 g     F .text	00000120 OSMemNameSet
0101b2b2 g     O .rwdata	00000002 OSTaskProfileEn
0101cf14 g     O .bss	00000004 OSTime
0101cf18 g     O .bss	00000004 OSTmrSem
0102d440 g     O .bss	00000800 OSTaskIdleStk
01019168 g     F .text	0000002c _exit
0100943c g     F .text	00000030 __isnand
01010970 g     F .text	0000018c OSMboxPostOpt
0100ed7c g     F .text	00000144 OSFlagNameGet
0100b244 g     F .text	00000154 alt_alarm_start
01015328 g     F .text	00000064 OSTimeGet
0100b058 g     F .text	00000124 __muldi3
010071ac g     F .text	00000194 __smakebuf_r
01002880 g     F .text	00000074 strlen
0101899c g     F .text	0000001c OSTaskSwHook
01018370 g     F .text	0000018c open
0102dc40 g     O .bss	00000b40 OSEventTbl
0100adb4 g     F .text	00000088 __gedf2
0102e780 g     O .bss	00000510 OSTCBTbl
01013230 g     F .text	00000104 OSSemSet
010010ac g     F .text	00000364 StartTask
01017e40 g     F .text	0000001c alt_icache_flush_all
010178e4 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0101b2e0 g     O .rwdata	00000004 alt_priority_mask
01012940 g     F .text	000002a0 OSSemDel
0101cf1c g     O .bss	00000004 OSFlagFreeList
01017eac g     F .text	0000009c alt_ic_irq_enable
0101b278 g     O .rwdata	00000002 OSEventNameSize
01010158 g     F .text	000002a0 OSMboxDel
01004810 g     F .text	00000024 __vfprintf_internal
0101cf20 g     O .bss	00000001 OSStatRdy
0102ec90 g     O .bss	00000054 OSTCBPrioTbl
0100c06c g     F .text	000000ac __env_lock
0101b2be g     O .rwdata	00000002 OSTaskSwHookEn
01001988 g     F .text	00000080 __subdf3
01007e14 g     F .text	000000c4 __lo0bits
0101b25c g     O .rwdata	00000008 alt_alarm_list
0101b286 g     O .rwdata	00000002 OSFlagWidth
01017ce4 g     F .text	00000064 _do_ctors
0100b398 g     F .text	00000100 close
0101ceb4 g     O .bss	00000004 alt_envsem
0101cf24 g     O .bss	00000004 OSIdleCtrRun
01000344 g     F .text	00000044 WatchdogCallback
0100d314 g     F .text	00000020 OSVersion
0101b2d0 g     O .rwdata	00000002 OSTmrCfgWheelSize
0100b780 g     F .text	00000080 alt_load
01014cf8 g     F .text	0000007c OS_TaskStkClr
01002308 g     F .text	00000314 __pack_d
0101b2aa g     O .rwdata	00000002 OSTaskCreateEn
0101ce40 g     O .bss	00000001 CRUISE_CONTROL
0100d904 g     F .text	00000068 OS_EventWaitListInit
01018a7c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
010063f8 g     F .text	00000004 __sinit_lock_acquire
01008a9c g     F .text	0000012c __multadd
01007d7c g     F .text	00000028 _Bfree
01014988 g     F .text	0000022c OSTaskSuspend
0100dfac g     F .text	0000005c OS_TaskIdle
0101b2d6 g     O .rwdata	00000002 OSTmrTblSize
01012540 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406f14 	ori	at,at,444
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	100cccc0 	call	100cccc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0ffff17 	ldw	r3,-4(fp)
 1000120:	e0bffe17 	ldw	r2,-8(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	1005003a 	cmpeq	r2,r2,zero
 100012c:	1000161e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000130:	e0bffd17 	ldw	r2,-12(fp)
 1000134:	00c040f4 	movhi	r3,259
 1000138:	18fb3904 	addi	r3,r3,-4892
 100013c:	100490fa 	slli	r2,r2,3
 1000140:	10c5883a 	add	r2,r2,r3
 1000144:	11400017 	ldw	r5,0(r2)
 1000148:	e0bffd17 	ldw	r2,-12(fp)
 100014c:	00c040f4 	movhi	r3,259
 1000150:	18fb3904 	addi	r3,r3,-4892
 1000154:	100490fa 	slli	r2,r2,3
 1000158:	10c5883a 	add	r2,r2,r3
 100015c:	10800104 	addi	r2,r2,4
 1000160:	11000017 	ldw	r4,0(r2)
 1000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe31e 	bne	r2,zero,1000110 <alt_irq_handler+0x24>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fde06 	br	100011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a4:	100cd480 	call	100cd48 <OSIntExit>
}
 10001a8:	e037883a 	mov	sp,fp
 10001ac:	dfc00117 	ldw	ra,4(sp)
 10001b0:	df000017 	ldw	fp,0(sp)
 10001b4:	dec00204 	addi	sp,sp,8
 10001b8:	f800283a 	ret

Disassembly of section .text:

010001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001bc:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001c4:	068040b4 	movhi	gp,258
    ori gp, gp, %lo(_gp)
 10001c8:	d68c8514 	ori	gp,gp,12820
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001cc:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001d0:	10b38d14 	ori	r2,r2,52788

    movhi r3, %hi(__bss_end)
 10001d4:	00c040b4 	movhi	r3,258
    ori r3, r3, %lo(__bss_end)
 10001d8:	18fbdd14 	ori	r3,r3,61300

    beq r2, r3, 1f
 10001dc:	10c00326 	beq	r2,r3,10001ec <_start+0x30>

0:
    stw zero, (r2)
 10001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e8:	10fffd36 	bltu	r2,r3,10001e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001ec:	100b7800 	call	100b780 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001f0:	100b9c00 	call	100b9c0 <alt_main>

010001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001f4:	003fff06 	br	10001f4 <alt_after_alt_main>

010001f8 <buttons_pressed>:
INT8U BRAKE_PEDAL = 0;
INT8U CRUISE_CONTROL = 0;
INT8U task_prio;
INT8U reset = 0;

int buttons_pressed(void) {
 10001f8:	deffff04 	addi	sp,sp,-4
 10001fc:	df000015 	stw	fp,0(sp)
 1000200:	d839883a 	mov	fp,sp
	return ~IORD_ALTERA_AVALON_PIO_DATA(D2_PIO_KEYS4_BASE);
 1000204:	00a45014 	movui	r2,37184
 1000208:	10800037 	ldwio	r2,0(r2)
 100020c:	0084303a 	nor	r2,zero,r2
}
 1000210:	e037883a 	mov	sp,fp
 1000214:	df000017 	ldw	fp,0(sp)
 1000218:	dec00104 	addi	sp,sp,4
 100021c:	f800283a 	ret

01000220 <switches_pressed>:

int switches_pressed(void) {
 1000220:	deffff04 	addi	sp,sp,-4
 1000224:	df000015 	stw	fp,0(sp)
 1000228:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_TOGGLES18_BASE);
 100022c:	00a45414 	movui	r2,37200
 1000230:	10800037 	ldwio	r2,0(r2)
}
 1000234:	e037883a 	mov	sp,fp
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00104 	addi	sp,sp,4
 1000240:	f800283a 	ret

01000244 <alarm_handler>:

/*
 * ISR for HW Timer
 */
alt_u32 alarm_handler(void* context) {
 1000244:	defffd04 	addi	sp,sp,-12
 1000248:	dfc00215 	stw	ra,8(sp)
 100024c:	df000115 	stw	fp,4(sp)
 1000250:	df000104 	addi	fp,sp,4
 1000254:	e13fff15 	stw	r4,-4(fp)
	OSTmrSignal(); /* Signals a 'tick' to the SW timers */
 1000258:	1015f5c0 	call	1015f5c <OSTmrSignal>

	return delay;
 100025c:	d0a71617 	ldw	r2,-25512(gp)
}
 1000260:	e037883a 	mov	sp,fp
 1000264:	dfc00117 	ldw	ra,4(sp)
 1000268:	df000017 	ldw	fp,0(sp)
 100026c:	dec00204 	addi	sp,sp,8
 1000270:	f800283a 	ret

01000274 <CallbackVehicle>:

/*
 * Callbacks resumes the suspended task
 */
void CallbackVehicle(void *ptmr,void *callback_arg) {
 1000274:	defffc04 	addi	sp,sp,-16
 1000278:	dfc00315 	stw	ra,12(sp)
 100027c:	df000215 	stw	fp,8(sp)
 1000280:	df000204 	addi	fp,sp,8
 1000284:	e13ffe15 	stw	r4,-8(fp)
 1000288:	e17fff15 	stw	r5,-4(fp)
//	printf("TmrCallback\n");
	OSSemPost(SemVehicle);
 100028c:	d1271317 	ldw	r4,-25524(gp)
 1000290:	1012fd80 	call	1012fd8 <OSSemPost>
	return;
}
 1000294:	e037883a 	mov	sp,fp
 1000298:	dfc00117 	ldw	ra,4(sp)
 100029c:	df000017 	ldw	fp,0(sp)
 10002a0:	dec00204 	addi	sp,sp,8
 10002a4:	f800283a 	ret

010002a8 <CallbackControl>:
void CallbackControl(void *ptmr,void *callback_arg) {
 10002a8:	defffc04 	addi	sp,sp,-16
 10002ac:	dfc00315 	stw	ra,12(sp)
 10002b0:	df000215 	stw	fp,8(sp)
 10002b4:	df000204 	addi	fp,sp,8
 10002b8:	e13ffe15 	stw	r4,-8(fp)
 10002bc:	e17fff15 	stw	r5,-4(fp)
//	printf("TmrCallback\n");
	OSSemPost(SemControl);
 10002c0:	d1271117 	ldw	r4,-25532(gp)
 10002c4:	1012fd80 	call	1012fd8 <OSSemPost>
	return;
}
 10002c8:	e037883a 	mov	sp,fp
 10002cc:	dfc00117 	ldw	ra,4(sp)
 10002d0:	df000017 	ldw	fp,0(sp)
 10002d4:	dec00204 	addi	sp,sp,8
 10002d8:	f800283a 	ret

010002dc <CallbackButtons>:
void CallbackButtons(void *ptmr,void *callback_arg) {
 10002dc:	defffc04 	addi	sp,sp,-16
 10002e0:	dfc00315 	stw	ra,12(sp)
 10002e4:	df000215 	stw	fp,8(sp)
 10002e8:	df000204 	addi	fp,sp,8
 10002ec:	e13ffe15 	stw	r4,-8(fp)
 10002f0:	e17fff15 	stw	r5,-4(fp)
//	printf("TmrCallback\n");
	OSSemPost(SemButtons);
 10002f4:	d1271417 	ldw	r4,-25520(gp)
 10002f8:	1012fd80 	call	1012fd8 <OSSemPost>
	return;
}
 10002fc:	e037883a 	mov	sp,fp
 1000300:	dfc00117 	ldw	ra,4(sp)
 1000304:	df000017 	ldw	fp,0(sp)
 1000308:	dec00204 	addi	sp,sp,8
 100030c:	f800283a 	ret

01000310 <CallbackSwitches>:
void CallbackSwitches(void *ptmr,void *callback_arg) {
 1000310:	defffc04 	addi	sp,sp,-16
 1000314:	dfc00315 	stw	ra,12(sp)
 1000318:	df000215 	stw	fp,8(sp)
 100031c:	df000204 	addi	fp,sp,8
 1000320:	e13ffe15 	stw	r4,-8(fp)
 1000324:	e17fff15 	stw	r5,-4(fp)
//	printf("TmrCallback\n");
	OSSemPost(SemSwitches);
 1000328:	d1270c17 	ldw	r4,-25552(gp)
 100032c:	1012fd80 	call	1012fd8 <OSSemPost>
	return;
}
 1000330:	e037883a 	mov	sp,fp
 1000334:	dfc00117 	ldw	ra,4(sp)
 1000338:	df000017 	ldw	fp,0(sp)
 100033c:	dec00204 	addi	sp,sp,8
 1000340:	f800283a 	ret

01000344 <WatchdogCallback>:

/*
 * tmr_callback resumes the suspended task
 */
void WatchdogCallback(void *ptmr, void *callback_arg) {
 1000344:	defffb04 	addi	sp,sp,-20
 1000348:	dfc00415 	stw	ra,16(sp)
 100034c:	df000315 	stw	fp,12(sp)
 1000350:	df000304 	addi	fp,sp,12
 1000354:	e13ffe15 	stw	r4,-8(fp)
 1000358:	e17fff15 	stw	r5,-4(fp)
	INT8U err;
	printf("CPU is at 100 percent usage!\n");
 100035c:	010040b4 	movhi	r4,258
 1000360:	21246604 	addi	r4,r4,-28264
 1000364:	100286c0 	call	100286c <puts>
	OSTmrStart(TimerWatchdog,&err);
 1000368:	d1271217 	ldw	r4,-25528(gp)
 100036c:	e17ffd04 	addi	r5,fp,-12
 1000370:	1015bb00 	call	1015bb0 <OSTmrStart>
//	OSTaskResume(WATCHDOG_PRIO);
	return;
}
 1000374:	e037883a 	mov	sp,fp
 1000378:	dfc00117 	ldw	ra,4(sp)
 100037c:	df000017 	ldw	fp,0(sp)
 1000380:	dec00204 	addi	sp,sp,8
 1000384:	f800283a 	ret

01000388 <int2seven>:
		};

/*
 * convert int to seven segment display format
 */
int int2seven(int inval) {
 1000388:	defffe04 	addi	sp,sp,-8
 100038c:	df000115 	stw	fp,4(sp)
 1000390:	df000104 	addi	fp,sp,4
 1000394:	e13fff15 	stw	r4,-4(fp)
	return b2sLUT[inval];
 1000398:	e0bfff17 	ldw	r2,-4(fp)
 100039c:	00c040b4 	movhi	r3,258
 10003a0:	18e5e504 	addi	r3,r3,-26732
 10003a4:	1085883a 	add	r2,r2,r2
 10003a8:	1085883a 	add	r2,r2,r2
 10003ac:	10c5883a 	add	r2,r2,r3
 10003b0:	10800017 	ldw	r2,0(r2)
}
 10003b4:	e037883a 	mov	sp,fp
 10003b8:	df000017 	ldw	fp,0(sp)
 10003bc:	dec00104 	addi	sp,sp,4
 10003c0:	f800283a 	ret

010003c4 <show_velocity_on_sevenseg>:

/*
 * output current velocity on the seven segement display
 */
void show_velocity_on_sevenseg(INT8S velocity) {
 10003c4:	defffa04 	addi	sp,sp,-24
 10003c8:	dfc00515 	stw	ra,20(sp)
 10003cc:	df000415 	stw	fp,16(sp)
 10003d0:	df000404 	addi	fp,sp,16
 10003d4:	e13fff05 	stb	r4,-4(fp)
	int tmp = velocity;
 10003d8:	e0bfff07 	ldb	r2,-4(fp)
 10003dc:	e0bffe15 	stw	r2,-8(fp)
	int out;
	INT8U out_high = 0;
 10003e0:	e03ffc85 	stb	zero,-14(fp)
	INT8U out_low = 0;
 10003e4:	e03ffc45 	stb	zero,-15(fp)
	INT8U out_sign = 0;
 10003e8:	e03ffc05 	stb	zero,-16(fp)

	if (velocity < 0) {
 10003ec:	e0bfff07 	ldb	r2,-4(fp)
 10003f0:	1004403a 	cmpge	r2,r2,zero
 10003f4:	1000071e 	bne	r2,zero,1000414 <show_velocity_on_sevenseg+0x50>
		out_sign = int2seven(10);
 10003f8:	01000284 	movi	r4,10
 10003fc:	10003880 	call	1000388 <int2seven>
 1000400:	e0bffc05 	stb	r2,-16(fp)
		tmp *= -1;
 1000404:	e0bffe17 	ldw	r2,-8(fp)
 1000408:	0085c83a 	sub	r2,zero,r2
 100040c:	e0bffe15 	stw	r2,-8(fp)
 1000410:	00000306 	br	1000420 <show_velocity_on_sevenseg+0x5c>
	} else {
		out_sign = int2seven(0);
 1000414:	0009883a 	mov	r4,zero
 1000418:	10003880 	call	1000388 <int2seven>
 100041c:	e0bffc05 	stb	r2,-16(fp)
	}

	out_high = int2seven(tmp / 10);
 1000420:	e13ffe17 	ldw	r4,-8(fp)
 1000424:	01400284 	movi	r5,10
 1000428:	1001f580 	call	1001f58 <__divsi3>
 100042c:	1009883a 	mov	r4,r2
 1000430:	10003880 	call	1000388 <int2seven>
 1000434:	e0bffc85 	stb	r2,-14(fp)
	out_low = int2seven(tmp - (tmp / 10) * 10);
 1000438:	e13ffe17 	ldw	r4,-8(fp)
 100043c:	01400284 	movi	r5,10
 1000440:	1001f580 	call	1001f58 <__divsi3>
 1000444:	1009883a 	mov	r4,r2
 1000448:	01400284 	movi	r5,10
 100044c:	10020280 	call	1002028 <__mulsi3>
 1000450:	1007883a 	mov	r3,r2
 1000454:	e0bffe17 	ldw	r2,-8(fp)
 1000458:	10c9c83a 	sub	r4,r2,r3
 100045c:	10003880 	call	1000388 <int2seven>
 1000460:	e0bffc45 	stb	r2,-15(fp)

	out = int2seven(0) << 21 | out_sign << 14 | out_high << 7 | out_low;
 1000464:	0009883a 	mov	r4,zero
 1000468:	10003880 	call	1000388 <int2seven>
 100046c:	1006957a 	slli	r3,r2,21
 1000470:	e0bffc03 	ldbu	r2,-16(fp)
 1000474:	100493ba 	slli	r2,r2,14
 1000478:	1886b03a 	or	r3,r3,r2
 100047c:	e0bffc83 	ldbu	r2,-14(fp)
 1000480:	100491fa 	slli	r2,r2,7
 1000484:	1886b03a 	or	r3,r3,r2
 1000488:	e0bffc43 	ldbu	r2,-15(fp)
 100048c:	1884b03a 	or	r2,r3,r2
 1000490:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_LOW28_BASE, out);
 1000494:	00e43014 	movui	r3,37056
 1000498:	e0bffd17 	ldw	r2,-12(fp)
 100049c:	18800035 	stwio	r2,0(r3)
}
 10004a0:	e037883a 	mov	sp,fp
 10004a4:	dfc00117 	ldw	ra,4(sp)
 10004a8:	df000017 	ldw	fp,0(sp)
 10004ac:	dec00204 	addi	sp,sp,8
 10004b0:	f800283a 	ret

010004b4 <show_target_velocity>:

/*
 * shows the target velocity on the seven segment display (HEX5, HEX4)
 * when the cruise control is activated (0 otherwise)
 */
void show_target_velocity(INT8U target_vel) {
 10004b4:	defff904 	addi	sp,sp,-28
 10004b8:	dfc00615 	stw	ra,24(sp)
 10004bc:	df000515 	stw	fp,20(sp)
 10004c0:	dc000415 	stw	r16,16(sp)
 10004c4:	df000404 	addi	fp,sp,16
 10004c8:	e13fff05 	stb	r4,-4(fp)
	int targetVelocityHex = (int2seven(0) << 7) + (int2seven(0)),
 10004cc:	0009883a 	mov	r4,zero
 10004d0:	10003880 	call	1000388 <int2seven>
 10004d4:	102091fa 	slli	r16,r2,7
 10004d8:	0009883a 	mov	r4,zero
 10004dc:	10003880 	call	1000388 <int2seven>
 10004e0:	8085883a 	add	r2,r16,r2
 10004e4:	e0bffe15 	stw	r2,-8(fp)
        targetDecimalHigh, targetDecimalLow;

	if (cruise_control == on) {
 10004e8:	d0a00417 	ldw	r2,-32752(gp)
 10004ec:	1004c03a 	cmpne	r2,r2,zero
 10004f0:	1000121e 	bne	r2,zero,100053c <show_target_velocity+0x88>
		targetDecimalHigh = target_vel / 10;
 10004f4:	e13fff03 	ldbu	r4,-4(fp)
 10004f8:	01400284 	movi	r5,10
 10004fc:	10020180 	call	1002018 <__udivsi3>
 1000500:	10803fcc 	andi	r2,r2,255
 1000504:	e0bffd15 	stw	r2,-12(fp)
		targetDecimalLow = target_vel - 10 * targetDecimalHigh;
 1000508:	e43fff03 	ldbu	r16,-4(fp)
 100050c:	e13ffd17 	ldw	r4,-12(fp)
 1000510:	01400284 	movi	r5,10
 1000514:	10020280 	call	1002028 <__mulsi3>
 1000518:	8085c83a 	sub	r2,r16,r2
 100051c:	e0bffc15 	stw	r2,-16(fp)
		targetVelocityHex = (int2seven(targetDecimalHigh) << 7)
 1000520:	e13ffd17 	ldw	r4,-12(fp)
 1000524:	10003880 	call	1000388 <int2seven>
 1000528:	102091fa 	slli	r16,r2,7
 100052c:	e13ffc17 	ldw	r4,-16(fp)
 1000530:	10003880 	call	1000388 <int2seven>
 1000534:	8085883a 	add	r2,r16,r2
 1000538:	e0bffe15 	stw	r2,-8(fp)
				+ (int2seven(targetDecimalLow));
	}

	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_HIGH28_BASE, targetVelocityHex);
 100053c:	00e42814 	movui	r3,37024
 1000540:	e0bffe17 	ldw	r2,-8(fp)
 1000544:	18800035 	stwio	r2,0(r3)
}
 1000548:	e037883a 	mov	sp,fp
 100054c:	dfc00217 	ldw	ra,8(sp)
 1000550:	df000117 	ldw	fp,4(sp)
 1000554:	dc000017 	ldw	r16,0(sp)
 1000558:	dec00304 	addi	sp,sp,12
 100055c:	f800283a 	ret

01000560 <show_position>:
 * LEDR15: [800m, 1200m)
 * LEDR14: [1200m, 1600m)
 * LEDR13: [1600m, 2000m)
 * LEDR12: [2000m, 2400m]
 */
void show_position(INT16U position) {
 1000560:	defffb04 	addi	sp,sp,-20
 1000564:	dfc00415 	stw	ra,16(sp)
 1000568:	df000315 	stw	fp,12(sp)
 100056c:	df000304 	addi	fp,sp,12
 1000570:	e13fff0d 	sth	r4,-4(fp)
	int positionLEDs = 1 << (17 - (position / 4000));
 1000574:	e13fff0b 	ldhu	r4,-4(fp)
 1000578:	0143e804 	movi	r5,4000
 100057c:	10020180 	call	1002018 <__udivsi3>
 1000580:	10ffffcc 	andi	r3,r2,65535
 1000584:	00800444 	movi	r2,17
 1000588:	10c7c83a 	sub	r3,r2,r3
 100058c:	00800044 	movi	r2,1
 1000590:	10c4983a 	sll	r2,r2,r3
 1000594:	e0bffe15 	stw	r2,-8(fp)
	int currentLEDs = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
 1000598:	00a44814 	movui	r2,37152
 100059c:	10800037 	ldwio	r2,0(r2)
 10005a0:	e0bffd15 	stw	r2,-12(fp)
	currentLEDs = currentLEDs & ~(0x3F << 12); 					//do not overwrite the other switches' LEDs
 10005a4:	e0fffd17 	ldw	r3,-12(fp)
 10005a8:	00bfff34 	movhi	r2,65532
 10005ac:	1083ffc4 	addi	r2,r2,4095
 10005b0:	1884703a 	and	r2,r3,r2
 10005b4:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA( DE2_PIO_REDLED18_BASE,
 10005b8:	e0fffd17 	ldw	r3,-12(fp)
 10005bc:	e0bffe17 	ldw	r2,-8(fp)
 10005c0:	1886b03a 	or	r3,r3,r2
 10005c4:	00a44814 	movui	r2,37152
 10005c8:	10c00035 	stwio	r3,0(r2)
			currentLEDs | positionLEDs);
}
 10005cc:	e037883a 	mov	sp,fp
 10005d0:	dfc00117 	ldw	ra,4(sp)
 10005d4:	df000017 	ldw	fp,0(sp)
 10005d8:	dec00204 	addi	sp,sp,8
 10005dc:	f800283a 	ret

010005e0 <adjust_position>:
/*
 * The function 'adjust_position()' adjusts the position depending on the
 * acceleration and velocity.
 */
INT16U adjust_position(INT16U position, INT16S velocity, INT8S acceleration,
		INT16U time_interval) {
 10005e0:	defff704 	addi	sp,sp,-36
 10005e4:	dfc00815 	stw	ra,32(sp)
 10005e8:	df000715 	stw	fp,28(sp)
 10005ec:	dc400615 	stw	r17,24(sp)
 10005f0:	dc000515 	stw	r16,20(sp)
 10005f4:	df000504 	addi	fp,sp,20
 10005f8:	e13ffc0d 	sth	r4,-16(fp)
 10005fc:	e17ffd0d 	sth	r5,-12(fp)
 1000600:	e1bffe05 	stb	r6,-8(fp)
 1000604:	e1ffff0d 	sth	r7,-4(fp)
	INT16S new_position = position + velocity * time_interval / 1000
			+ acceleration / 2 * (time_interval / 1000)
					* (time_interval / 1000);
 1000608:	e13ffd0f 	ldh	r4,-12(fp)
 100060c:	e17fff0b 	ldhu	r5,-4(fp)
 1000610:	10020280 	call	1002028 <__mulsi3>
 1000614:	1009883a 	mov	r4,r2
 1000618:	0140fa04 	movi	r5,1000
 100061c:	1001f580 	call	1001f58 <__divsi3>
 1000620:	1007883a 	mov	r3,r2
 1000624:	e0bffc0b 	ldhu	r2,-16(fp)
 1000628:	1885883a 	add	r2,r3,r2
 100062c:	1023883a 	mov	r17,r2
 1000630:	e0fffe07 	ldb	r3,-8(fp)
 1000634:	1804d7fa 	srli	r2,r3,31
 1000638:	10c5883a 	add	r2,r2,r3
 100063c:	1005d07a 	srai	r2,r2,1
 1000640:	14003fcc 	andi	r16,r2,255
 1000644:	8400201c 	xori	r16,r16,128
 1000648:	843fe004 	addi	r16,r16,-128
 100064c:	e13fff0b 	ldhu	r4,-4(fp)
 1000650:	0140fa04 	movi	r5,1000
 1000654:	10020180 	call	1002018 <__udivsi3>
 1000658:	117fffcc 	andi	r5,r2,65535
 100065c:	8009883a 	mov	r4,r16
 1000660:	10020280 	call	1002028 <__mulsi3>
 1000664:	1021883a 	mov	r16,r2
 1000668:	e13fff0b 	ldhu	r4,-4(fp)
 100066c:	0140fa04 	movi	r5,1000
 1000670:	10020180 	call	1002018 <__udivsi3>
 1000674:	117fffcc 	andi	r5,r2,65535
 1000678:	8009883a 	mov	r4,r16
 100067c:	10020280 	call	1002028 <__mulsi3>
 1000680:	8885883a 	add	r2,r17,r2
 1000684:	e0bffb0d 	sth	r2,-20(fp)

	if (new_position > 24000) {
 1000688:	e0bffb0f 	ldh	r2,-20(fp)
 100068c:	10977050 	cmplti	r2,r2,24001
 1000690:	1000041e 	bne	r2,zero,10006a4 <adjust_position+0xc4>
		new_position -= 24000;
 1000694:	e0bffb0b 	ldhu	r2,-20(fp)
 1000698:	10a89004 	addi	r2,r2,-24000
 100069c:	e0bffb0d 	sth	r2,-20(fp)
 10006a0:	00000606 	br	10006bc <adjust_position+0xdc>
	} else if (new_position < 0) {
 10006a4:	e0bffb0f 	ldh	r2,-20(fp)
 10006a8:	1004403a 	cmpge	r2,r2,zero
 10006ac:	1000031e 	bne	r2,zero,10006bc <adjust_position+0xdc>
		new_position += 24000;
 10006b0:	e0bffb0b 	ldhu	r2,-20(fp)
 10006b4:	10977004 	addi	r2,r2,24000
 10006b8:	e0bffb0d 	sth	r2,-20(fp)
	}

	show_position(new_position);
 10006bc:	e0bffb0b 	ldhu	r2,-20(fp)
 10006c0:	113fffcc 	andi	r4,r2,65535
 10006c4:	10005600 	call	1000560 <show_position>
	return new_position;
 10006c8:	e0bffb0b 	ldhu	r2,-20(fp)
 10006cc:	10bfffcc 	andi	r2,r2,65535
}
 10006d0:	e037883a 	mov	sp,fp
 10006d4:	dfc00317 	ldw	ra,12(sp)
 10006d8:	df000217 	ldw	fp,8(sp)
 10006dc:	dc400117 	ldw	r17,4(sp)
 10006e0:	dc000017 	ldw	r16,0(sp)
 10006e4:	dec00404 	addi	sp,sp,16
 10006e8:	f800283a 	ret

010006ec <adjust_velocity>:
/*
 * The function 'adjust_velocity()' adjusts the velocity depending on the
 * acceleration.
 */
INT16S adjust_velocity(INT16S velocity, INT8S acceleration,
		enum active brake_pedal, INT16U time_interval) {
 10006ec:	defff704 	addi	sp,sp,-36
 10006f0:	dfc00815 	stw	ra,32(sp)
 10006f4:	df000715 	stw	fp,28(sp)
 10006f8:	dc400615 	stw	r17,24(sp)
 10006fc:	dc000515 	stw	r16,20(sp)
 1000700:	df000504 	addi	fp,sp,20
 1000704:	e1bffe15 	stw	r6,-8(fp)
 1000708:	e13ffc0d 	sth	r4,-16(fp)
 100070c:	e17ffd05 	stb	r5,-12(fp)
 1000710:	e1ffff0d 	sth	r7,-4(fp)
	INT16S new_velocity;
	INT8U brake_retardation = 200;
 1000714:	00bff204 	movi	r2,-56
 1000718:	e0bffb05 	stb	r2,-20(fp)

	if (brake_pedal == off)
 100071c:	e0bffe17 	ldw	r2,-8(fp)
 1000720:	10800058 	cmpnei	r2,r2,1
 1000724:	1000251e 	bne	r2,zero,10007bc <adjust_velocity+0xd0>
		new_velocity = velocity
 1000728:	e13ffc0f 	ldh	r4,-16(fp)
 100072c:	1001cd40 	call	1001cd4 <__floatsidf>
 1000730:	1021883a 	mov	r16,r2
 1000734:	1823883a 	mov	r17,r3
 1000738:	e13ffd07 	ldb	r4,-12(fp)
 100073c:	e17fff0b 	ldhu	r5,-4(fp)
 1000740:	10020280 	call	1002028 <__mulsi3>
 1000744:	1009883a 	mov	r4,r2
 1000748:	100148c0 	call	100148c <__floatsisf>
 100074c:	1009883a 	mov	r4,r2
 1000750:	10015240 	call	1001524 <__extendsfdf2>
 1000754:	100b883a 	mov	r5,r2
 1000758:	180d883a 	mov	r6,r3
 100075c:	2809883a 	mov	r4,r5
 1000760:	300b883a 	mov	r5,r6
 1000764:	000d883a 	mov	r6,zero
 1000768:	01d023f4 	movhi	r7,16527
 100076c:	39d00004 	addi	r7,r7,16384
 1000770:	1001a7c0 	call	1001a7c <__divdf3>
 1000774:	1009883a 	mov	r4,r2
 1000778:	180b883a 	mov	r5,r3
 100077c:	2005883a 	mov	r2,r4
 1000780:	2807883a 	mov	r3,r5
 1000784:	8009883a 	mov	r4,r16
 1000788:	880b883a 	mov	r5,r17
 100078c:	100d883a 	mov	r6,r2
 1000790:	180f883a 	mov	r7,r3
 1000794:	1001a080 	call	1001a08 <__adddf3>
 1000798:	1009883a 	mov	r4,r2
 100079c:	180b883a 	mov	r5,r3
 10007a0:	2005883a 	mov	r2,r4
 10007a4:	2807883a 	mov	r3,r5
 10007a8:	1009883a 	mov	r4,r2
 10007ac:	180b883a 	mov	r5,r3
 10007b0:	1001dcc0 	call	1001dcc <__fixdfsi>
 10007b4:	e0bffb8d 	sth	r2,-18(fp)
 10007b8:	00001406 	br	100080c <adjust_velocity+0x120>
				+ (float) (acceleration * time_interval) / 1000.0;
	else {
		if (brake_retardation * time_interval / 1000 > velocity)
 10007bc:	e13ffb03 	ldbu	r4,-20(fp)
 10007c0:	e17fff0b 	ldhu	r5,-4(fp)
 10007c4:	10020280 	call	1002028 <__mulsi3>
 10007c8:	1009883a 	mov	r4,r2
 10007cc:	0140fa04 	movi	r5,1000
 10007d0:	1001f580 	call	1001f58 <__divsi3>
 10007d4:	1007883a 	mov	r3,r2
 10007d8:	e0bffc0f 	ldh	r2,-16(fp)
 10007dc:	10c0020e 	bge	r2,r3,10007e8 <adjust_velocity+0xfc>
			new_velocity = 0;
 10007e0:	e03ffb8d 	sth	zero,-18(fp)
 10007e4:	00000906 	br	100080c <adjust_velocity+0x120>
		else
			new_velocity = velocity - brake_retardation * time_interval / 1000;
 10007e8:	e43ffc0b 	ldhu	r16,-16(fp)
 10007ec:	e13ffb03 	ldbu	r4,-20(fp)
 10007f0:	e17fff0b 	ldhu	r5,-4(fp)
 10007f4:	10020280 	call	1002028 <__mulsi3>
 10007f8:	1009883a 	mov	r4,r2
 10007fc:	0140fa04 	movi	r5,1000
 1000800:	1001f580 	call	1001f58 <__divsi3>
 1000804:	8085c83a 	sub	r2,r16,r2
 1000808:	e0bffb8d 	sth	r2,-18(fp)
	}

	return new_velocity;
 100080c:	e0bffb8f 	ldh	r2,-18(fp)
}
 1000810:	e037883a 	mov	sp,fp
 1000814:	dfc00317 	ldw	ra,12(sp)
 1000818:	df000217 	ldw	fp,8(sp)
 100081c:	dc400117 	ldw	r17,4(sp)
 1000820:	dc000017 	ldw	r16,0(sp)
 1000824:	dec00404 	addi	sp,sp,16
 1000828:	f800283a 	ret

0100082c <VehicleTask>:

/*
 * The task 'VehicleTask' updates the current velocity of the vehicle
 */
void VehicleTask(void* pdata) {
 100082c:	defff804 	addi	sp,sp,-32
 1000830:	dfc00715 	stw	ra,28(sp)
 1000834:	df000615 	stw	fp,24(sp)
 1000838:	df000604 	addi	fp,sp,24
 100083c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	void* msg;
	INT8U* throttle;
	INT8S acceleration; /* Value between 40 and -20 (4.0 m/s^2 and -2.0 m/s^2) */
	INT8S retardation; /* Value between 20 and -10 (2.0 m/s^2 and -1.0 m/s^2) */
	INT16U position = 0; /* Value between 0 and 20000 (0.0 m and 2000.0 m)  */
 1000840:	e03ffa8d 	sth	zero,-22(fp)
	INT16S velocity = 0; /* Value between -200 and 700 (-20.0 m/s amd 70.0 m/s) */
 1000844:	e03ffe8d 	sth	zero,-6(fp)
	INT16S wind_factor; /* Value between -10 and 20 (2.0 m/s^2 and -1.0 m/s^2) */

	printf("Vehicle task created!\n");
 1000848:	010040b4 	movhi	r4,258
 100084c:	21246e04 	addi	r4,r4,-28232
 1000850:	100286c0 	call	100286c <puts>

	while (1) {
		err = OSMboxPost(Mbox_Velocity, (void *) &velocity);
 1000854:	d1270f17 	ldw	r4,-25540(gp)
 1000858:	e17ffe84 	addi	r5,fp,-6
 100085c:	101083c0 	call	101083c <OSMboxPost>
 1000860:	e0bffe05 	stb	r2,-8(fp)

		OSSemPend(SemVehicle,0,&err);
 1000864:	d1271317 	ldw	r4,-25524(gp)
 1000868:	e1bffe04 	addi	r6,fp,-8
 100086c:	000b883a 	mov	r5,zero
 1000870:	1012be00 	call	1012be0 <OSSemPend>

		/* Non-blocking read of mailbox:
		 - message in mailbox: update throttle
		 - no message:         use old throttle
		 */
		msg = OSMboxPend(Mbox_Throttle, 1, &err);
 1000874:	d1270e17 	ldw	r4,-25544(gp)
 1000878:	e1bffe04 	addi	r6,fp,-8
 100087c:	01400044 	movi	r5,1
 1000880:	10103f80 	call	10103f8 <OSMboxPend>
 1000884:	e0bffd15 	stw	r2,-12(fp)
		if (err == OS_NO_ERR)
 1000888:	e0bffe03 	ldbu	r2,-8(fp)
 100088c:	10803fcc 	andi	r2,r2,255
 1000890:	1004c03a 	cmpne	r2,r2,zero
 1000894:	1000021e 	bne	r2,zero,10008a0 <VehicleTask+0x74>
			throttle = (INT8U*) msg;
 1000898:	e0bffd17 	ldw	r2,-12(fp)
 100089c:	e0bffc15 	stw	r2,-16(fp)

		/* Retardation : Factor of Terrain and Wind Resistance */
		if (velocity > 0)
 10008a0:	e0bffe8b 	ldhu	r2,-6(fp)
 10008a4:	10bfffcc 	andi	r2,r2,65535
 10008a8:	10a0001c 	xori	r2,r2,32768
 10008ac:	10a00004 	addi	r2,r2,-32768
 10008b0:	10800050 	cmplti	r2,r2,1
 10008b4:	10000f1e 	bne	r2,zero,10008f4 <VehicleTask+0xc8>
			wind_factor = velocity * velocity / 10000 + 1;
 10008b8:	e0bffe8b 	ldhu	r2,-6(fp)
 10008bc:	113fffcc 	andi	r4,r2,65535
 10008c0:	2120001c 	xori	r4,r4,32768
 10008c4:	21200004 	addi	r4,r4,-32768
 10008c8:	e0bffe8b 	ldhu	r2,-6(fp)
 10008cc:	117fffcc 	andi	r5,r2,65535
 10008d0:	2960001c 	xori	r5,r5,32768
 10008d4:	29600004 	addi	r5,r5,-32768
 10008d8:	10020280 	call	1002028 <__mulsi3>
 10008dc:	1009883a 	mov	r4,r2
 10008e0:	0149c404 	movi	r5,10000
 10008e4:	1001f580 	call	1001f58 <__divsi3>
 10008e8:	10800044 	addi	r2,r2,1
 10008ec:	e0bffa0d 	sth	r2,-24(fp)
 10008f0:	00000f06 	br	1000930 <VehicleTask+0x104>
		else
			wind_factor = (-1) * velocity * velocity / 10000 + 1;
 10008f4:	e0bffe8b 	ldhu	r2,-6(fp)
 10008f8:	10bfffcc 	andi	r2,r2,65535
 10008fc:	10a0001c 	xori	r2,r2,32768
 1000900:	10a00004 	addi	r2,r2,-32768
 1000904:	0089c83a 	sub	r4,zero,r2
 1000908:	e0bffe8b 	ldhu	r2,-6(fp)
 100090c:	117fffcc 	andi	r5,r2,65535
 1000910:	2960001c 	xori	r5,r5,32768
 1000914:	29600004 	addi	r5,r5,-32768
 1000918:	10020280 	call	1002028 <__mulsi3>
 100091c:	1009883a 	mov	r4,r2
 1000920:	0149c404 	movi	r5,10000
 1000924:	1001f580 	call	1001f58 <__divsi3>
 1000928:	10800044 	addi	r2,r2,1
 100092c:	e0bffa0d 	sth	r2,-24(fp)

		if (position < 4000)
 1000930:	e0bffa8b 	ldhu	r2,-22(fp)
 1000934:	1083e828 	cmpgeui	r2,r2,4000
 1000938:	1000031e 	bne	r2,zero,1000948 <VehicleTask+0x11c>
			retardation = wind_factor; // even ground
 100093c:	e0bffa0b 	ldhu	r2,-24(fp)
 1000940:	e0bffb05 	stb	r2,-20(fp)
 1000944:	00001e06 	br	10009c0 <VehicleTask+0x194>
		else if (position < 8000)
 1000948:	e0bffa8b 	ldhu	r2,-22(fp)
 100094c:	1087d028 	cmpgeui	r2,r2,8000
 1000950:	1000041e 	bne	r2,zero,1000964 <VehicleTask+0x138>
			retardation = wind_factor + 15; // traveling uphill
 1000954:	e0bffa0b 	ldhu	r2,-24(fp)
 1000958:	108003c4 	addi	r2,r2,15
 100095c:	e0bffb05 	stb	r2,-20(fp)
 1000960:	00001706 	br	10009c0 <VehicleTask+0x194>
		else if (position < 12000)
 1000964:	e0bffa8b 	ldhu	r2,-22(fp)
 1000968:	108bb828 	cmpgeui	r2,r2,12000
 100096c:	1000041e 	bne	r2,zero,1000980 <VehicleTask+0x154>
			retardation = wind_factor + 25; // traveling steep uphill
 1000970:	e0bffa0b 	ldhu	r2,-24(fp)
 1000974:	10800644 	addi	r2,r2,25
 1000978:	e0bffb05 	stb	r2,-20(fp)
 100097c:	00001006 	br	10009c0 <VehicleTask+0x194>
		else if (position < 16000)
 1000980:	e0bffa8b 	ldhu	r2,-22(fp)
 1000984:	108fa028 	cmpgeui	r2,r2,16000
 1000988:	1000031e 	bne	r2,zero,1000998 <VehicleTask+0x16c>
			retardation = wind_factor; // even ground
 100098c:	e0bffa0b 	ldhu	r2,-24(fp)
 1000990:	e0bffb05 	stb	r2,-20(fp)
 1000994:	00000a06 	br	10009c0 <VehicleTask+0x194>
		else if (position < 20000)
 1000998:	e0bffa8b 	ldhu	r2,-22(fp)
 100099c:	10938828 	cmpgeui	r2,r2,20000
 10009a0:	1000041e 	bne	r2,zero,10009b4 <VehicleTask+0x188>
			retardation = wind_factor - 10; //traveling steep downhill
 10009a4:	e0bffa0b 	ldhu	r2,-24(fp)
 10009a8:	10bffd84 	addi	r2,r2,-10
 10009ac:	e0bffb05 	stb	r2,-20(fp)
 10009b0:	00000306 	br	10009c0 <VehicleTask+0x194>
		else
			retardation = wind_factor - 5; // traveling downhill
 10009b4:	e0bffa0b 	ldhu	r2,-24(fp)
 10009b8:	10bffec4 	addi	r2,r2,-5
 10009bc:	e0bffb05 	stb	r2,-20(fp)

		acceleration = *throttle / 2 - retardation;
 10009c0:	e0bffc17 	ldw	r2,-16(fp)
 10009c4:	10800003 	ldbu	r2,0(r2)
 10009c8:	10803fcc 	andi	r2,r2,255
 10009cc:	1004d07a 	srli	r2,r2,1
 10009d0:	1007883a 	mov	r3,r2
 10009d4:	e0bffb03 	ldbu	r2,-20(fp)
 10009d8:	1885c83a 	sub	r2,r3,r2
 10009dc:	e0bffb45 	stb	r2,-19(fp)
		position = adjust_position(position, velocity, acceleration, 300);
 10009e0:	e13ffa8b 	ldhu	r4,-22(fp)
 10009e4:	e0bffe8b 	ldhu	r2,-6(fp)
 10009e8:	117fffcc 	andi	r5,r2,65535
 10009ec:	2960001c 	xori	r5,r5,32768
 10009f0:	29600004 	addi	r5,r5,-32768
 10009f4:	e1bffb47 	ldb	r6,-19(fp)
 10009f8:	01c04b04 	movi	r7,300
 10009fc:	10005e00 	call	10005e0 <adjust_position>
 1000a00:	e0bffa8d 	sth	r2,-22(fp)
		velocity = adjust_velocity(velocity, acceleration, brake_pedal, 300);
 1000a04:	e0bffe8b 	ldhu	r2,-6(fp)
 1000a08:	113fffcc 	andi	r4,r2,65535
 1000a0c:	2120001c 	xori	r4,r4,32768
 1000a10:	21200004 	addi	r4,r4,-32768
 1000a14:	e17ffb47 	ldb	r5,-19(fp)
 1000a18:	d1a00117 	ldw	r6,-32764(gp)
 1000a1c:	01c04b04 	movi	r7,300
 1000a20:	10006ec0 	call	10006ec <adjust_velocity>
 1000a24:	e0bffe8d 	sth	r2,-6(fp)
		printf("Position: %dm\n", position / 10);
 1000a28:	e13ffa8b 	ldhu	r4,-22(fp)
 1000a2c:	01400284 	movi	r5,10
 1000a30:	10020180 	call	1002018 <__udivsi3>
 1000a34:	117fffcc 	andi	r5,r2,65535
 1000a38:	010040b4 	movhi	r4,258
 1000a3c:	21247404 	addi	r4,r4,-28208
 1000a40:	10027540 	call	1002754 <printf>
		printf("Velocity: %4.1fm/s\n", velocity / 10.0);
 1000a44:	e0bffe8b 	ldhu	r2,-6(fp)
 1000a48:	113fffcc 	andi	r4,r2,65535
 1000a4c:	2120001c 	xori	r4,r4,32768
 1000a50:	21200004 	addi	r4,r4,-32768
 1000a54:	1001cd40 	call	1001cd4 <__floatsidf>
 1000a58:	100b883a 	mov	r5,r2
 1000a5c:	180d883a 	mov	r6,r3
 1000a60:	2809883a 	mov	r4,r5
 1000a64:	300b883a 	mov	r5,r6
 1000a68:	000d883a 	mov	r6,zero
 1000a6c:	01d00934 	movhi	r7,16420
 1000a70:	1001a7c0 	call	1001a7c <__divdf3>
 1000a74:	1009883a 	mov	r4,r2
 1000a78:	180b883a 	mov	r5,r3
 1000a7c:	2005883a 	mov	r2,r4
 1000a80:	2807883a 	mov	r3,r5
 1000a84:	010040b4 	movhi	r4,258
 1000a88:	21247804 	addi	r4,r4,-28192
 1000a8c:	100b883a 	mov	r5,r2
 1000a90:	180d883a 	mov	r6,r3
 1000a94:	10027540 	call	1002754 <printf>
		printf("Throttle: %dV\n", *throttle / 10);
 1000a98:	e0bffc17 	ldw	r2,-16(fp)
 1000a9c:	10800003 	ldbu	r2,0(r2)
 1000aa0:	11003fcc 	andi	r4,r2,255
 1000aa4:	01400284 	movi	r5,10
 1000aa8:	10020180 	call	1002018 <__udivsi3>
 1000aac:	11403fcc 	andi	r5,r2,255
 1000ab0:	010040b4 	movhi	r4,258
 1000ab4:	21247d04 	addi	r4,r4,-28172
 1000ab8:	10027540 	call	1002754 <printf>
		show_velocity_on_sevenseg((INT8S) (velocity / 10));
 1000abc:	e0bffe8b 	ldhu	r2,-6(fp)
 1000ac0:	113fffcc 	andi	r4,r2,65535
 1000ac4:	2120001c 	xori	r4,r4,32768
 1000ac8:	21200004 	addi	r4,r4,-32768
 1000acc:	01400284 	movi	r5,10
 1000ad0:	1001f580 	call	1001f58 <__divsi3>
 1000ad4:	11003fcc 	andi	r4,r2,255
 1000ad8:	2100201c 	xori	r4,r4,128
 1000adc:	213fe004 	addi	r4,r4,-128
 1000ae0:	10003c40 	call	10003c4 <show_velocity_on_sevenseg>
	}
 1000ae4:	003f5b06 	br	1000854 <VehicleTask+0x28>

01000ae8 <ControlTask>:
/*
 * The task 'ControlTask' is the main task of the application. It reacts
 * on sensors and generates responses.
 */

void ControlTask(void* pdata) {
 1000ae8:	defff804 	addi	sp,sp,-32
 1000aec:	dfc00715 	stw	ra,28(sp)
 1000af0:	df000615 	stw	fp,24(sp)
 1000af4:	df000604 	addi	fp,sp,24
 1000af8:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U throttle = 0; /* Value between 0 and 80, which is interpreted as between 0.0V and 8.0V */
 1000afc:	e03ffe45 	stb	zero,-7(fp)
	void* msg;
	INT16S* current_velocity;
	INT16S target_velocity;
	INT16U tempo;

	printf("Control Task created!\n");
 1000b00:	010040b4 	movhi	r4,258
 1000b04:	21248104 	addi	r4,r4,-28156
 1000b08:	100286c0 	call	100286c <puts>

	while (1) {
		msg = OSMboxPend(Mbox_Velocity, 0, &err);
 1000b0c:	d1270f17 	ldw	r4,-25540(gp)
 1000b10:	e1bffe04 	addi	r6,fp,-8
 1000b14:	000b883a 	mov	r5,zero
 1000b18:	10103f80 	call	10103f8 <OSMboxPend>
 1000b1c:	e0bffd15 	stw	r2,-12(fp)
		current_velocity = (INT16S*) msg;
 1000b20:	e0bffd17 	ldw	r2,-12(fp)
 1000b24:	e0bffc15 	stw	r2,-16(fp)

		if(!ENGINE && !(*current_velocity)) engine = off;
 1000b28:	d0a70a03 	ldbu	r2,-25560(gp)
 1000b2c:	10803fcc 	andi	r2,r2,255
 1000b30:	1004c03a 	cmpne	r2,r2,zero
 1000b34:	10000a1e 	bne	r2,zero,1000b60 <ControlTask+0x78>
 1000b38:	e0bffc17 	ldw	r2,-16(fp)
 1000b3c:	1080000b 	ldhu	r2,0(r2)
 1000b40:	10bfffcc 	andi	r2,r2,65535
 1000b44:	10a0001c 	xori	r2,r2,32768
 1000b48:	10a00004 	addi	r2,r2,-32768
 1000b4c:	1004c03a 	cmpne	r2,r2,zero
 1000b50:	1000031e 	bne	r2,zero,1000b60 <ControlTask+0x78>
 1000b54:	00800044 	movi	r2,1
 1000b58:	d0a00315 	stw	r2,-32756(gp)
 1000b5c:	00000106 	br	1000b64 <ControlTask+0x7c>
		else engine = on;
 1000b60:	d0200315 	stw	zero,-32756(gp)
		if(engine == on) {
 1000b64:	d0a00317 	ldw	r2,-32756(gp)
 1000b68:	1004c03a 	cmpne	r2,r2,zero
 1000b6c:	1000c91e 	bne	r2,zero,1000e94 <ControlTask+0x3ac>
			if(TOP_GEAR) top_gear = on;
 1000b70:	d0a70a43 	ldbu	r2,-25559(gp)
 1000b74:	10803fcc 	andi	r2,r2,255
 1000b78:	1005003a 	cmpeq	r2,r2,zero
 1000b7c:	1000021e 	bne	r2,zero,1000b88 <ControlTask+0xa0>
 1000b80:	d0200215 	stw	zero,-32760(gp)
 1000b84:	00000206 	br	1000b90 <ControlTask+0xa8>
			else top_gear = off;
 1000b88:	00800044 	movi	r2,1
 1000b8c:	d0a00215 	stw	r2,-32760(gp)

			if(BRAKE_PEDAL) brake_pedal = on;
 1000b90:	d0a70ac3 	ldbu	r2,-25557(gp)
 1000b94:	10803fcc 	andi	r2,r2,255
 1000b98:	1005003a 	cmpeq	r2,r2,zero
 1000b9c:	1000021e 	bne	r2,zero,1000ba8 <ControlTask+0xc0>
 1000ba0:	d0200115 	stw	zero,-32764(gp)
 1000ba4:	00000206 	br	1000bb0 <ControlTask+0xc8>
			else brake_pedal = off;
 1000ba8:	00800044 	movi	r2,1
 1000bac:	d0a00115 	stw	r2,-32764(gp)

			if(GAS_PEDAL) gas_pedal = on;
 1000bb0:	d0a70a83 	ldbu	r2,-25558(gp)
 1000bb4:	10803fcc 	andi	r2,r2,255
 1000bb8:	1005003a 	cmpeq	r2,r2,zero
 1000bbc:	1000021e 	bne	r2,zero,1000bc8 <ControlTask+0xe0>
 1000bc0:	d0200015 	stw	zero,-32768(gp)
 1000bc4:	00000206 	br	1000bd0 <ControlTask+0xe8>
			else gas_pedal = off;
 1000bc8:	00800044 	movi	r2,1
 1000bcc:	d0a00015 	stw	r2,-32768(gp)

			if(gas_pedal == on) {
 1000bd0:	d0a00017 	ldw	r2,-32768(gp)
 1000bd4:	1004c03a 	cmpne	r2,r2,zero
 1000bd8:	10000a1e 	bne	r2,zero,1000c04 <ControlTask+0x11c>
				if(throttle >= 76) throttle = 80;
 1000bdc:	e0bffe43 	ldbu	r2,-7(fp)
 1000be0:	10803fcc 	andi	r2,r2,255
 1000be4:	10801330 	cmpltui	r2,r2,76
 1000be8:	1000031e 	bne	r2,zero,1000bf8 <ControlTask+0x110>
 1000bec:	00801404 	movi	r2,80
 1000bf0:	e0bffe45 	stb	r2,-7(fp)
 1000bf4:	00000306 	br	1000c04 <ControlTask+0x11c>
				else throttle += 4;
 1000bf8:	e0bffe43 	ldbu	r2,-7(fp)
 1000bfc:	10800104 	addi	r2,r2,4
 1000c00:	e0bffe45 	stb	r2,-7(fp)
			}
			if(brake_pedal == on) {
 1000c04:	d0a00117 	ldw	r2,-32764(gp)
 1000c08:	1004c03a 	cmpne	r2,r2,zero
 1000c0c:	1000011e 	bne	r2,zero,1000c14 <ControlTask+0x12c>
				throttle = 0;
 1000c10:	e03ffe45 	stb	zero,-7(fp)
			}

			if((*current_velocity) >= 200 && CRUISE_CONTROL) {
 1000c14:	e0bffc17 	ldw	r2,-16(fp)
 1000c18:	1080000b 	ldhu	r2,0(r2)
 1000c1c:	10bfffcc 	andi	r2,r2,65535
 1000c20:	10a0001c 	xori	r2,r2,32768
 1000c24:	10a00004 	addi	r2,r2,-32768
 1000c28:	10803210 	cmplti	r2,r2,200
 1000c2c:	10000b1e 	bne	r2,zero,1000c5c <ControlTask+0x174>
 1000c30:	d0a70b03 	ldbu	r2,-25556(gp)
 1000c34:	10803fcc 	andi	r2,r2,255
 1000c38:	1005003a 	cmpeq	r2,r2,zero
 1000c3c:	1000071e 	bne	r2,zero,1000c5c <ControlTask+0x174>
				if(cruise_control == off) target_velocity = *current_velocity;
 1000c40:	d0a00417 	ldw	r2,-32752(gp)
 1000c44:	10800058 	cmpnei	r2,r2,1
 1000c48:	1000031e 	bne	r2,zero,1000c58 <ControlTask+0x170>
 1000c4c:	e0bffc17 	ldw	r2,-16(fp)
 1000c50:	1080000b 	ldhu	r2,0(r2)
 1000c54:	e0bffb8d 	sth	r2,-18(fp)
				cruise_control = on;
 1000c58:	d0200415 	stw	zero,-32752(gp)
			}

			if(gas_pedal == on || brake_pedal == on || top_gear == off) {
 1000c5c:	d0a00017 	ldw	r2,-32768(gp)
 1000c60:	1005003a 	cmpeq	r2,r2,zero
 1000c64:	1000061e 	bne	r2,zero,1000c80 <ControlTask+0x198>
 1000c68:	d0a00117 	ldw	r2,-32764(gp)
 1000c6c:	1005003a 	cmpeq	r2,r2,zero
 1000c70:	1000031e 	bne	r2,zero,1000c80 <ControlTask+0x198>
 1000c74:	d0a00217 	ldw	r2,-32760(gp)
 1000c78:	10800058 	cmpnei	r2,r2,1
 1000c7c:	10000b1e 	bne	r2,zero,1000cac <ControlTask+0x1c4>
				cruise_control = off;
 1000c80:	00800044 	movi	r2,1
 1000c84:	d0a00415 	stw	r2,-32752(gp)
				tempo = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
 1000c88:	00a43814 	movui	r2,37088
 1000c8c:	10800037 	ldwio	r2,0(r2)
 1000c90:	e0bffb0d 	sth	r2,-20(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,tempo & ~1);
 1000c94:	e0fffb0b 	ldhu	r3,-20(fp)
 1000c98:	00bfff84 	movi	r2,-2
 1000c9c:	1886703a 	and	r3,r3,r2
 1000ca0:	00a43814 	movui	r2,37088
 1000ca4:	10c00035 	stwio	r3,0(r2)
				target_velocity = 0;
 1000ca8:	e03ffb8d 	sth	zero,-18(fp)
			}

			if(cruise_control == on) {
 1000cac:	d0a00417 	ldw	r2,-32752(gp)
 1000cb0:	1004c03a 	cmpne	r2,r2,zero
 1000cb4:	1000771e 	bne	r2,zero,1000e94 <ControlTask+0x3ac>

				printf("Target Velocity: %4.1f\n", target_velocity / 10.0);
 1000cb8:	e13ffb8f 	ldh	r4,-18(fp)
 1000cbc:	1001cd40 	call	1001cd4 <__floatsidf>
 1000cc0:	100b883a 	mov	r5,r2
 1000cc4:	180d883a 	mov	r6,r3
 1000cc8:	2809883a 	mov	r4,r5
 1000ccc:	300b883a 	mov	r5,r6
 1000cd0:	000d883a 	mov	r6,zero
 1000cd4:	01d00934 	movhi	r7,16420
 1000cd8:	1001a7c0 	call	1001a7c <__divdf3>
 1000cdc:	1009883a 	mov	r4,r2
 1000ce0:	180b883a 	mov	r5,r3
 1000ce4:	2005883a 	mov	r2,r4
 1000ce8:	2807883a 	mov	r3,r5
 1000cec:	010040b4 	movhi	r4,258
 1000cf0:	21248704 	addi	r4,r4,-28132
 1000cf4:	100b883a 	mov	r5,r2
 1000cf8:	180d883a 	mov	r6,r3
 1000cfc:	10027540 	call	1002754 <printf>
				show_target_velocity((INT8U)target_velocity/10);
 1000d00:	e0bffb8b 	ldhu	r2,-18(fp)
 1000d04:	11003fcc 	andi	r4,r2,255
 1000d08:	01400284 	movi	r5,10
 1000d0c:	10020180 	call	1002018 <__udivsi3>
 1000d10:	11003fcc 	andi	r4,r2,255
 1000d14:	10004b40 	call	10004b4 <show_target_velocity>
				tempo = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
 1000d18:	00a43814 	movui	r2,37088
 1000d1c:	10800037 	ldwio	r2,0(r2)
 1000d20:	e0bffb0d 	sth	r2,-20(fp)
				tempo = tempo & ~(0x1fd);
 1000d24:	e0fffb0b 	ldhu	r3,-20(fp)
 1000d28:	00bf8084 	movi	r2,-510
 1000d2c:	1884703a 	and	r2,r3,r2
 1000d30:	e0bffb0d 	sth	r2,-20(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,tempo | 1);	// writes 1 to the "cruise control" led w/o overwriting the others
 1000d34:	e0bffb0b 	ldhu	r2,-20(fp)
 1000d38:	10800054 	ori	r2,r2,1
 1000d3c:	10ffffcc 	andi	r3,r2,65535
 1000d40:	00a43814 	movui	r2,37088
 1000d44:	10c00035 	stwio	r3,0(r2)

				int delta = (*current_velocity)-target_velocity;
 1000d48:	e0bffc17 	ldw	r2,-16(fp)
 1000d4c:	1080000b 	ldhu	r2,0(r2)
 1000d50:	10ffffcc 	andi	r3,r2,65535
 1000d54:	18e0001c 	xori	r3,r3,32768
 1000d58:	18e00004 	addi	r3,r3,-32768
 1000d5c:	e0bffb8f 	ldh	r2,-18(fp)
 1000d60:	1885c83a 	sub	r2,r3,r2
 1000d64:	e0bffa15 	stw	r2,-24(fp)
				if(delta >= 20){
 1000d68:	e0bffa17 	ldw	r2,-24(fp)
 1000d6c:	10800510 	cmplti	r2,r2,20
 1000d70:	10000a1e 	bne	r2,zero,1000d9c <ControlTask+0x2b4>
					if(throttle <= 10) throttle = 0;
 1000d74:	e0bffe43 	ldbu	r2,-7(fp)
 1000d78:	10803fcc 	andi	r2,r2,255
 1000d7c:	108002e8 	cmpgeui	r2,r2,11
 1000d80:	1000021e 	bne	r2,zero,1000d8c <ControlTask+0x2a4>
 1000d84:	e03ffe45 	stb	zero,-7(fp)
 1000d88:	00004206 	br	1000e94 <ControlTask+0x3ac>
					else throttle -= 10;
 1000d8c:	e0bffe43 	ldbu	r2,-7(fp)
 1000d90:	10bffd84 	addi	r2,r2,-10
 1000d94:	e0bffe45 	stb	r2,-7(fp)
 1000d98:	00003e06 	br	1000e94 <ControlTask+0x3ac>
				}
				else if(delta >= 10){
 1000d9c:	e0bffa17 	ldw	r2,-24(fp)
 1000da0:	10800290 	cmplti	r2,r2,10
 1000da4:	10000a1e 	bne	r2,zero,1000dd0 <ControlTask+0x2e8>
					if(throttle <= 5) throttle = 0;
 1000da8:	e0bffe43 	ldbu	r2,-7(fp)
 1000dac:	10803fcc 	andi	r2,r2,255
 1000db0:	108001a8 	cmpgeui	r2,r2,6
 1000db4:	1000021e 	bne	r2,zero,1000dc0 <ControlTask+0x2d8>
 1000db8:	e03ffe45 	stb	zero,-7(fp)
 1000dbc:	00003506 	br	1000e94 <ControlTask+0x3ac>
					else throttle -= 5;
 1000dc0:	e0bffe43 	ldbu	r2,-7(fp)
 1000dc4:	10bffec4 	addi	r2,r2,-5
 1000dc8:	e0bffe45 	stb	r2,-7(fp)
 1000dcc:	00003106 	br	1000e94 <ControlTask+0x3ac>
				}
				else if(delta >= 4){
 1000dd0:	e0bffa17 	ldw	r2,-24(fp)
 1000dd4:	10800110 	cmplti	r2,r2,4
 1000dd8:	1000081e 	bne	r2,zero,1000dfc <ControlTask+0x314>
					if(throttle != 0) throttle--;
 1000ddc:	e0bffe43 	ldbu	r2,-7(fp)
 1000de0:	10803fcc 	andi	r2,r2,255
 1000de4:	1005003a 	cmpeq	r2,r2,zero
 1000de8:	10002a1e 	bne	r2,zero,1000e94 <ControlTask+0x3ac>
 1000dec:	e0bffe43 	ldbu	r2,-7(fp)
 1000df0:	10bfffc4 	addi	r2,r2,-1
 1000df4:	e0bffe45 	stb	r2,-7(fp)
 1000df8:	00002606 	br	1000e94 <ControlTask+0x3ac>
				}
				else if(delta <= -20){
 1000dfc:	e0bffa17 	ldw	r2,-24(fp)
 1000e00:	10bffb48 	cmpgei	r2,r2,-19
 1000e04:	10000b1e 	bne	r2,zero,1000e34 <ControlTask+0x34c>
					if(throttle >= 70) throttle = 80;
 1000e08:	e0bffe43 	ldbu	r2,-7(fp)
 1000e0c:	10803fcc 	andi	r2,r2,255
 1000e10:	108011b0 	cmpltui	r2,r2,70
 1000e14:	1000031e 	bne	r2,zero,1000e24 <ControlTask+0x33c>
 1000e18:	00801404 	movi	r2,80
 1000e1c:	e0bffe45 	stb	r2,-7(fp)
 1000e20:	00001c06 	br	1000e94 <ControlTask+0x3ac>
					else throttle += 10;
 1000e24:	e0bffe43 	ldbu	r2,-7(fp)
 1000e28:	10800284 	addi	r2,r2,10
 1000e2c:	e0bffe45 	stb	r2,-7(fp)
 1000e30:	00001806 	br	1000e94 <ControlTask+0x3ac>
				}
				else if(delta <= -10){
 1000e34:	e0bffa17 	ldw	r2,-24(fp)
 1000e38:	10bffdc8 	cmpgei	r2,r2,-9
 1000e3c:	10000b1e 	bne	r2,zero,1000e6c <ControlTask+0x384>
					if(throttle >= 75) throttle = 80;
 1000e40:	e0bffe43 	ldbu	r2,-7(fp)
 1000e44:	10803fcc 	andi	r2,r2,255
 1000e48:	108012f0 	cmpltui	r2,r2,75
 1000e4c:	1000031e 	bne	r2,zero,1000e5c <ControlTask+0x374>
 1000e50:	00801404 	movi	r2,80
 1000e54:	e0bffe45 	stb	r2,-7(fp)
 1000e58:	00000e06 	br	1000e94 <ControlTask+0x3ac>
					else throttle += 5;
 1000e5c:	e0bffe43 	ldbu	r2,-7(fp)
 1000e60:	10800144 	addi	r2,r2,5
 1000e64:	e0bffe45 	stb	r2,-7(fp)
 1000e68:	00000a06 	br	1000e94 <ControlTask+0x3ac>
				}
				else if(delta <= -4){
 1000e6c:	e0bffa17 	ldw	r2,-24(fp)
 1000e70:	10bfff48 	cmpgei	r2,r2,-3
 1000e74:	1000071e 	bne	r2,zero,1000e94 <ControlTask+0x3ac>
					if(throttle != 80) throttle ++;
 1000e78:	e0bffe43 	ldbu	r2,-7(fp)
 1000e7c:	10803fcc 	andi	r2,r2,255
 1000e80:	10801420 	cmpeqi	r2,r2,80
 1000e84:	1000031e 	bne	r2,zero,1000e94 <ControlTask+0x3ac>
 1000e88:	e0bffe43 	ldbu	r2,-7(fp)
 1000e8c:	10800044 	addi	r2,r2,1
 1000e90:	e0bffe45 	stb	r2,-7(fp)
				}
			}
		}

		err = OSMboxPost(Mbox_Throttle, (void *) &throttle);
 1000e94:	d1270e17 	ldw	r4,-25544(gp)
 1000e98:	e17ffe44 	addi	r5,fp,-7
 1000e9c:	101083c0 	call	101083c <OSMboxPost>
 1000ea0:	e0bffe05 	stb	r2,-8(fp)

		OSSemPend(SemControl,0,&err);
 1000ea4:	d1271117 	ldw	r4,-25532(gp)
 1000ea8:	e1bffe04 	addi	r6,fp,-8
 1000eac:	000b883a 	mov	r5,zero
 1000eb0:	1012be00 	call	1012be0 <OSSemPend>
	}
 1000eb4:	003f1506 	br	1000b0c <ControlTask+0x24>

01000eb8 <SwitchIO>:

/*
 * The task 'SwitchIO' read the switches periodically and lights up the red leds
 */

void SwitchIO(void* pdata) {
 1000eb8:	defffb04 	addi	sp,sp,-20
 1000ebc:	dfc00415 	stw	ra,16(sp)
 1000ec0:	df000315 	stw	fp,12(sp)
 1000ec4:	df000304 	addi	fp,sp,12
 1000ec8:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT32U current_led;
	while(1) {
		led_red = 0;
 1000ecc:	d0270915 	stw	zero,-25564(gp)
		if(switches_pressed() & TOP_GEAR_FLAG) {
 1000ed0:	10002200 	call	1000220 <switches_pressed>
 1000ed4:	1080008c 	andi	r2,r2,2
 1000ed8:	1005003a 	cmpeq	r2,r2,zero
 1000edc:	1000061e 	bne	r2,zero,1000ef8 <SwitchIO+0x40>
			TOP_GEAR = 1;
 1000ee0:	00800044 	movi	r2,1
 1000ee4:	d0a70a45 	stb	r2,-25559(gp)
			led_red += LED_RED_1;
 1000ee8:	d0a70917 	ldw	r2,-25564(gp)
 1000eec:	10800084 	addi	r2,r2,2
 1000ef0:	d0a70915 	stw	r2,-25564(gp)
 1000ef4:	00000106 	br	1000efc <SwitchIO+0x44>
		}
		else {
			TOP_GEAR = 0;
 1000ef8:	d0270a45 	stb	zero,-25559(gp)
		}
		if(switches_pressed() & ENGINE_FLAG) {
 1000efc:	10002200 	call	1000220 <switches_pressed>
 1000f00:	1080004c 	andi	r2,r2,1
 1000f04:	10803fcc 	andi	r2,r2,255
 1000f08:	1005003a 	cmpeq	r2,r2,zero
 1000f0c:	1000061e 	bne	r2,zero,1000f28 <SwitchIO+0x70>
			ENGINE = 1;
 1000f10:	00800044 	movi	r2,1
 1000f14:	d0a70a05 	stb	r2,-25560(gp)
			led_red += LED_RED_0;
 1000f18:	d0a70917 	ldw	r2,-25564(gp)
 1000f1c:	10800044 	addi	r2,r2,1
 1000f20:	d0a70915 	stw	r2,-25564(gp)
 1000f24:	00000106 	br	1000f2c <SwitchIO+0x74>
		}
		else {
			ENGINE = 0;
 1000f28:	d0270a05 	stb	zero,-25560(gp)
		}
		current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
 1000f2c:	00a44814 	movui	r2,37152
 1000f30:	10800037 	ldwio	r2,0(r2)
 1000f34:	e0bffd15 	stw	r2,-12(fp)
		current_led = current_led & ~(0xfff);
 1000f38:	e0fffd17 	ldw	r3,-12(fp)
 1000f3c:	00bc0004 	movi	r2,-4096
 1000f40:	1884703a 	and	r2,r3,r2
 1000f44:	e0bffd15 	stw	r2,-12(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,led_red | current_led);
 1000f48:	d0e70917 	ldw	r3,-25564(gp)
 1000f4c:	e0bffd17 	ldw	r2,-12(fp)
 1000f50:	1884b03a 	or	r2,r3,r2
 1000f54:	1007883a 	mov	r3,r2
 1000f58:	00a44814 	movui	r2,37152
 1000f5c:	10c00035 	stwio	r3,0(r2)

		OSSemPend(SemSwitches,0,&err);
 1000f60:	d1270c17 	ldw	r4,-25552(gp)
 1000f64:	e1bffe04 	addi	r6,fp,-8
 1000f68:	000b883a 	mov	r5,zero
 1000f6c:	1012be00 	call	1012be0 <OSSemPend>
	}
 1000f70:	003fd606 	br	1000ecc <SwitchIO+0x14>

01000f74 <ButtonsIO>:

/*
 * The task 'ButtonsIO' read the buttons periodically and lights up the green leds
 */

void ButtonsIO(void* pdata) {
 1000f74:	defffc04 	addi	sp,sp,-16
 1000f78:	dfc00315 	stw	ra,12(sp)
 1000f7c:	df000215 	stw	fp,8(sp)
 1000f80:	df000204 	addi	fp,sp,8
 1000f84:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT16U current_led;
	while(1) {
		led_green = 0;
 1000f88:	d027080d 	sth	zero,-25568(gp)
		if(buttons_pressed() & GAS_PEDAL_FLAG) {
 1000f8c:	10001f80 	call	10001f8 <buttons_pressed>
 1000f90:	1080020c 	andi	r2,r2,8
 1000f94:	1005003a 	cmpeq	r2,r2,zero
 1000f98:	1000061e 	bne	r2,zero,1000fb4 <ButtonsIO+0x40>
			GAS_PEDAL = 1;
 1000f9c:	00800044 	movi	r2,1
 1000fa0:	d0a70a85 	stb	r2,-25558(gp)
			led_green += LED_GREEN_6;
 1000fa4:	d0a7080b 	ldhu	r2,-25568(gp)
 1000fa8:	10801004 	addi	r2,r2,64
 1000fac:	d0a7080d 	sth	r2,-25568(gp)
 1000fb0:	00000106 	br	1000fb8 <ButtonsIO+0x44>
		}
		else {
			GAS_PEDAL = 0;
 1000fb4:	d0270a85 	stb	zero,-25558(gp)
		}
		if(buttons_pressed() & BRAKE_PEDAL_FLAG) {
 1000fb8:	10001f80 	call	10001f8 <buttons_pressed>
 1000fbc:	1080010c 	andi	r2,r2,4
 1000fc0:	1005003a 	cmpeq	r2,r2,zero
 1000fc4:	1000061e 	bne	r2,zero,1000fe0 <ButtonsIO+0x6c>
			BRAKE_PEDAL = 1;
 1000fc8:	00800044 	movi	r2,1
 1000fcc:	d0a70ac5 	stb	r2,-25557(gp)
			led_green += LED_GREEN_4;
 1000fd0:	d0a7080b 	ldhu	r2,-25568(gp)
 1000fd4:	10800404 	addi	r2,r2,16
 1000fd8:	d0a7080d 	sth	r2,-25568(gp)
 1000fdc:	00000106 	br	1000fe4 <ButtonsIO+0x70>
		}
		else {
			BRAKE_PEDAL = 0;
 1000fe0:	d0270ac5 	stb	zero,-25557(gp)
		}
		if(buttons_pressed() & CRUISE_CONTROL_FLAG) {
 1000fe4:	10001f80 	call	10001f8 <buttons_pressed>
 1000fe8:	1080008c 	andi	r2,r2,2
 1000fec:	1005003a 	cmpeq	r2,r2,zero
 1000ff0:	1000061e 	bne	r2,zero,100100c <ButtonsIO+0x98>
			CRUISE_CONTROL = 1;
 1000ff4:	00800044 	movi	r2,1
 1000ff8:	d0a70b05 	stb	r2,-25556(gp)
			led_green += LED_GREEN_2;
 1000ffc:	d0a7080b 	ldhu	r2,-25568(gp)
 1001000:	10800104 	addi	r2,r2,4
 1001004:	d0a7080d 	sth	r2,-25568(gp)
 1001008:	00000106 	br	1001010 <ButtonsIO+0x9c>
		}
		else {
			CRUISE_CONTROL = 0;
 100100c:	d0270b05 	stb	zero,-25556(gp)
		}
		current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
 1001010:	00a43814 	movui	r2,37088
 1001014:	10800037 	ldwio	r2,0(r2)
 1001018:	e0bffe0d 	sth	r2,-8(fp)
		current_led = current_led & 0x01;
 100101c:	e0bffe0b 	ldhu	r2,-8(fp)
 1001020:	1080004c 	andi	r2,r2,1
 1001024:	e0bffe0d 	sth	r2,-8(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,led_green | current_led);
 1001028:	d0e7080b 	ldhu	r3,-25568(gp)
 100102c:	e0bffe0b 	ldhu	r2,-8(fp)
 1001030:	1884b03a 	or	r2,r3,r2
 1001034:	10ffffcc 	andi	r3,r2,65535
 1001038:	00a43814 	movui	r2,37088
 100103c:	10c00035 	stwio	r3,0(r2)

		OSSemPend(SemButtons,0,&err);
 1001040:	d1271417 	ldw	r4,-25520(gp)
 1001044:	e1bffe84 	addi	r6,fp,-6
 1001048:	000b883a 	mov	r5,zero
 100104c:	1012be00 	call	1012be0 <OSSemPend>
	}
 1001050:	003fcd06 	br	1000f88 <ButtonsIO+0x14>

01001054 <Watchdog>:
}

/*
 * Watchdog print an error message if the timer doesn't get reset by the signal modified by OverloadDetection
 */
void Watchdog(void* pdata) {
 1001054:	defffc04 	addi	sp,sp,-16
 1001058:	dfc00315 	stw	ra,12(sp)
 100105c:	df000215 	stw	fp,8(sp)
 1001060:	df000204 	addi	fp,sp,8
 1001064:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	while(1) {
		OSTmrStart(TimerWatchdog,&err);
 1001068:	d1271217 	ldw	r4,-25528(gp)
 100106c:	e17ffe04 	addi	r5,fp,-8
 1001070:	1015bb00 	call	1015bb0 <OSTmrStart>
		OSTaskSuspend(WATCHDOG_PRIO);
 1001074:	01000184 	movi	r4,6
 1001078:	10149880 	call	1014988 <OSTaskSuspend>
	}
 100107c:	003ffa06 	br	1001068 <Watchdog+0x14>

01001080 <OverloadDetection>:
}

/*
 * Reset = 1 if CPU works at 100%
 */
void OverloadDetection(void* pdata) {
 1001080:	defffd04 	addi	sp,sp,-12
 1001084:	dfc00215 	stw	ra,8(sp)
 1001088:	df000115 	stw	fp,4(sp)
 100108c:	df000104 	addi	fp,sp,4
 1001090:	e13fff15 	stw	r4,-4(fp)
	while(1) {
		printf("Hello OverloadDetection\n");
 1001094:	010040b4 	movhi	r4,258
 1001098:	21248d04 	addi	r4,r4,-28108
 100109c:	100286c0 	call	100286c <puts>
		OSTaskResume(WATCHDOG_PRIO);
 10010a0:	01000184 	movi	r4,6
 10010a4:	10145740 	call	1014574 <OSTaskResume>
	}
 10010a8:	003ffa06 	br	1001094 <OverloadDetection+0x14>

010010ac <StartTask>:
/* 
 * The task 'StartTask' creates all other tasks kernel objects and
 * deletes itself afterwards.
 */

void StartTask(void* pdata) {
 10010ac:	defff604 	addi	sp,sp,-40
 10010b0:	dfc00915 	stw	ra,36(sp)
 10010b4:	df000815 	stw	fp,32(sp)
 10010b8:	df000804 	addi	fp,sp,32
 10010bc:	e13fff15 	stw	r4,-4(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10010c0:	008040b4 	movhi	r2,258
 10010c4:	10b3aa04 	addi	r2,r2,-12632
 10010c8:	10800017 	ldw	r2,0(r2)
 10010cc:	1009883a 	mov	r4,r2
	void* context;

	static alt_alarm alarm; /* Is needed for timer ISR function */

	/* Base resolution for SW timer : HW_TIMER_PERIOD ms */
	delay = alt_ticks_per_second() * HW_TIMER_PERIOD / 1000;
 10010d0:	01401904 	movi	r5,100
 10010d4:	10020280 	call	1002028 <__mulsi3>
 10010d8:	1009883a 	mov	r4,r2
 10010dc:	0140fa04 	movi	r5,1000
 10010e0:	10020180 	call	1002018 <__udivsi3>
 10010e4:	d0a71615 	stw	r2,-25512(gp)
	printf("delay in ticks %d\n", delay);
 10010e8:	d1671617 	ldw	r5,-25512(gp)
 10010ec:	010040b4 	movhi	r4,258
 10010f0:	21249304 	addi	r4,r4,-28084
 10010f4:	10027540 	call	1002754 <printf>

	/*
	 * Create Hardware Timer with a period of 'delay'
	 */
	if (alt_alarm_start(&alarm, delay, alarm_handler, context) < 0) {
 10010f8:	d0a71617 	ldw	r2,-25512(gp)
 10010fc:	100b883a 	mov	r5,r2
 1001100:	010040b4 	movhi	r4,258
 1001104:	2133cc04 	addi	r4,r4,-12496
 1001108:	01804034 	movhi	r6,256
 100110c:	31809104 	addi	r6,r6,580
 1001110:	e1fffd17 	ldw	r7,-12(fp)
 1001114:	100b2440 	call	100b244 <alt_alarm_start>
 1001118:	1004403a 	cmpge	r2,r2,zero
 100111c:	1000031e 	bne	r2,zero,100112c <StartTask+0x80>
		printf("No system clock available!n");
 1001120:	010040b4 	movhi	r4,258
 1001124:	21249804 	addi	r4,r4,-28064
 1001128:	10027540 	call	1002754 <printf>
	}

	/*
	 * Create and start Software Timer
	 */
	TimerVehicle = OSTmrCreate(0,VEHICLE_PERIOD/HW_TIMER_PERIOD,
 100112c:	d8000015 	stw	zero,0(sp)
 1001130:	d8000115 	stw	zero,4(sp)
 1001134:	e0bffe04 	addi	r2,fp,-8
 1001138:	d8800215 	stw	r2,8(sp)
 100113c:	0009883a 	mov	r4,zero
 1001140:	014000c4 	movi	r5,3
 1001144:	01800084 	movi	r6,2
 1001148:	01c04034 	movhi	r7,256
 100114c:	39c09d04 	addi	r7,r7,628
 1001150:	10153f00 	call	10153f0 <OSTmrCreate>
 1001154:	d0a71015 	stw	r2,-25536(gp)
			OS_TMR_OPT_PERIODIC,CallbackVehicle,NULL,NULL,&err);
	if(err) {
 1001158:	e0bffe03 	ldbu	r2,-8(fp)
 100115c:	10803fcc 	andi	r2,r2,255
 1001160:	1005003a 	cmpeq	r2,r2,zero
 1001164:	1000031e 	bne	r2,zero,1001174 <StartTask+0xc8>
		printf("Error occurred while creating soft timer!\n");
 1001168:	010040b4 	movhi	r4,258
 100116c:	21249f04 	addi	r4,r4,-28036
 1001170:	100286c0 	call	100286c <puts>
	}
	OSTmrStart(TimerVehicle,&err);
 1001174:	d1271017 	ldw	r4,-25536(gp)
 1001178:	e17ffe04 	addi	r5,fp,-8
 100117c:	1015bb00 	call	1015bb0 <OSTmrStart>

	TimerControl = OSTmrCreate(0,CONTROL_PERIOD/HW_TIMER_PERIOD,
 1001180:	d8000015 	stw	zero,0(sp)
 1001184:	d8000115 	stw	zero,4(sp)
 1001188:	e0bffe04 	addi	r2,fp,-8
 100118c:	d8800215 	stw	r2,8(sp)
 1001190:	0009883a 	mov	r4,zero
 1001194:	014000c4 	movi	r5,3
 1001198:	01800084 	movi	r6,2
 100119c:	01c04034 	movhi	r7,256
 10011a0:	39c0aa04 	addi	r7,r7,680
 10011a4:	10153f00 	call	10153f0 <OSTmrCreate>
 10011a8:	d0a71815 	stw	r2,-25504(gp)
			OS_TMR_OPT_PERIODIC,CallbackControl,NULL,NULL,&err);
	if(err) {
 10011ac:	e0bffe03 	ldbu	r2,-8(fp)
 10011b0:	10803fcc 	andi	r2,r2,255
 10011b4:	1005003a 	cmpeq	r2,r2,zero
 10011b8:	1000031e 	bne	r2,zero,10011c8 <StartTask+0x11c>
		printf("Error occurred while creating soft timer!\n");
 10011bc:	010040b4 	movhi	r4,258
 10011c0:	21249f04 	addi	r4,r4,-28036
 10011c4:	100286c0 	call	100286c <puts>
	}
	OSTmrStart(TimerControl,&err);
 10011c8:	d1271817 	ldw	r4,-25504(gp)
 10011cc:	e17ffe04 	addi	r5,fp,-8
 10011d0:	1015bb00 	call	1015bb0 <OSTmrStart>

	TimerSwitches = OSTmrCreate(0,BS_PERIOD/HW_TIMER_PERIOD,
 10011d4:	d8000015 	stw	zero,0(sp)
 10011d8:	d8000115 	stw	zero,4(sp)
 10011dc:	e0bffe04 	addi	r2,fp,-8
 10011e0:	d8800215 	stw	r2,8(sp)
 10011e4:	0009883a 	mov	r4,zero
 10011e8:	01400044 	movi	r5,1
 10011ec:	01800084 	movi	r6,2
 10011f0:	01c04034 	movhi	r7,256
 10011f4:	39c0c404 	addi	r7,r7,784
 10011f8:	10153f00 	call	10153f0 <OSTmrCreate>
 10011fc:	d0a71915 	stw	r2,-25500(gp)
			OS_TMR_OPT_PERIODIC,CallbackSwitches,NULL,NULL,&err);
	if(err) {
 1001200:	e0bffe03 	ldbu	r2,-8(fp)
 1001204:	10803fcc 	andi	r2,r2,255
 1001208:	1005003a 	cmpeq	r2,r2,zero
 100120c:	1000031e 	bne	r2,zero,100121c <StartTask+0x170>
		printf("Error occurred while creating soft timer!\n");
 1001210:	010040b4 	movhi	r4,258
 1001214:	21249f04 	addi	r4,r4,-28036
 1001218:	100286c0 	call	100286c <puts>
	}
	OSTmrStart(TimerSwitches,&err);
 100121c:	d1271917 	ldw	r4,-25500(gp)
 1001220:	e17ffe04 	addi	r5,fp,-8
 1001224:	1015bb00 	call	1015bb0 <OSTmrStart>

	TimerButtons = OSTmrCreate(0,BS_PERIOD/HW_TIMER_PERIOD,
 1001228:	d8000015 	stw	zero,0(sp)
 100122c:	d8000115 	stw	zero,4(sp)
 1001230:	e0bffe04 	addi	r2,fp,-8
 1001234:	d8800215 	stw	r2,8(sp)
 1001238:	0009883a 	mov	r4,zero
 100123c:	01400044 	movi	r5,1
 1001240:	01800084 	movi	r6,2
 1001244:	01c04034 	movhi	r7,256
 1001248:	39c0b704 	addi	r7,r7,732
 100124c:	10153f00 	call	10153f0 <OSTmrCreate>
 1001250:	d0a71715 	stw	r2,-25508(gp)
			OS_TMR_OPT_PERIODIC,CallbackButtons,NULL,NULL,&err);
	if(err) {
 1001254:	e0bffe03 	ldbu	r2,-8(fp)
 1001258:	10803fcc 	andi	r2,r2,255
 100125c:	1005003a 	cmpeq	r2,r2,zero
 1001260:	1000031e 	bne	r2,zero,1001270 <StartTask+0x1c4>
		printf("Error occurred while creating soft timer!\n");
 1001264:	010040b4 	movhi	r4,258
 1001268:	21249f04 	addi	r4,r4,-28036
 100126c:	100286c0 	call	100286c <puts>
	}
	OSTmrStart(TimerButtons,&err);
 1001270:	d1271717 	ldw	r4,-25508(gp)
 1001274:	e17ffe04 	addi	r5,fp,-8
 1001278:	1015bb00 	call	1015bb0 <OSTmrStart>
	/*
	 * Creation of Kernel Objects
	 */

	// Mailboxes
	Mbox_Throttle = OSMboxCreate((void*) 0); /* Empty Mailbox - Throttle */
 100127c:	0009883a 	mov	r4,zero
 1001280:	10100440 	call	1010044 <OSMboxCreate>
 1001284:	d0a70e15 	stw	r2,-25544(gp)
	Mbox_Velocity = OSMboxCreate((void*) 0); /* Empty Mailbox - Velocity */
 1001288:	0009883a 	mov	r4,zero
 100128c:	10100440 	call	1010044 <OSMboxCreate>
 1001290:	d0a70f15 	stw	r2,-25540(gp)

	// Semaphores
	SemVehicle = OSSemCreate(1);
 1001294:	01000044 	movi	r4,1
 1001298:	101282c0 	call	101282c <OSSemCreate>
 100129c:	d0a71315 	stw	r2,-25524(gp)
	SemControl = OSSemCreate(1);
 10012a0:	01000044 	movi	r4,1
 10012a4:	101282c0 	call	101282c <OSSemCreate>
 10012a8:	d0a71115 	stw	r2,-25532(gp)
	SemButtons = OSSemCreate(1);
 10012ac:	01000044 	movi	r4,1
 10012b0:	101282c0 	call	101282c <OSSemCreate>
 10012b4:	d0a71415 	stw	r2,-25520(gp)
	SemSwitches = OSSemCreate(1);
 10012b8:	01000044 	movi	r4,1
 10012bc:	101282c0 	call	101282c <OSSemCreate>
 10012c0:	d0a70c15 	stw	r2,-25552(gp)

	/*
	 * Create statistics task
	 */

	OSStatInit();
 10012c4:	100d0280 	call	100d028 <OSStatInit>

	/*
	 * Creating Tasks in the system
	 */

	err = OSTaskCreateExt(
 10012c8:	018040b4 	movhi	r6,258
 10012cc:	3183db04 	addi	r6,r6,3948
 10012d0:	00800304 	movi	r2,12
 10012d4:	d8800015 	stw	r2,0(sp)
 10012d8:	008040b4 	movhi	r2,258
 10012dc:	10bbdc04 	addi	r2,r2,-4240
 10012e0:	d8800115 	stw	r2,4(sp)
 10012e4:	00820004 	movi	r2,2048
 10012e8:	d8800215 	stw	r2,8(sp)
 10012ec:	d8000315 	stw	zero,12(sp)
 10012f0:	00800044 	movi	r2,1
 10012f4:	d8800415 	stw	r2,16(sp)
 10012f8:	01004034 	movhi	r4,256
 10012fc:	2102ba04 	addi	r4,r4,2792
 1001300:	000b883a 	mov	r5,zero
 1001304:	01c00304 	movi	r7,12
 1001308:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
 100130c:	e0bffe05 	stb	r2,-8(fp)
			&ControlTask_Stack[TASK_STACKSIZE - 1], // Pointer to top
			// of task stack
			CONTROLTASK_PRIO, CONTROLTASK_PRIO, (void *) &ControlTask_Stack[0],
			TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);

	err = OSTaskCreateExt(
 1001310:	018040b4 	movhi	r6,258
 1001314:	3193db04 	addi	r6,r6,20332
 1001318:	00800284 	movi	r2,10
 100131c:	d8800015 	stw	r2,0(sp)
 1001320:	008040b4 	movhi	r2,258
 1001324:	108bdc04 	addi	r2,r2,12144
 1001328:	d8800115 	stw	r2,4(sp)
 100132c:	00820004 	movi	r2,2048
 1001330:	d8800215 	stw	r2,8(sp)
 1001334:	d8000315 	stw	zero,12(sp)
 1001338:	00800044 	movi	r2,1
 100133c:	d8800415 	stw	r2,16(sp)
 1001340:	01004034 	movhi	r4,256
 1001344:	21020b04 	addi	r4,r4,2092
 1001348:	000b883a 	mov	r5,zero
 100134c:	01c00284 	movi	r7,10
 1001350:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
 1001354:	e0bffe05 	stb	r2,-8(fp)
			&VehicleTask_Stack[TASK_STACKSIZE - 1], // Pointer to top
			// of task stack
			VEHICLETASK_PRIO, VEHICLETASK_PRIO, (void *) &VehicleTask_Stack[0],
			TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);

	err = OSTaskCreateExt(
 1001358:	018040b4 	movhi	r6,258
 100135c:	319bdb04 	addi	r6,r6,28524
 1001360:	008003c4 	movi	r2,15
 1001364:	d8800015 	stw	r2,0(sp)
 1001368:	008040b4 	movhi	r2,258
 100136c:	1093dc04 	addi	r2,r2,20336
 1001370:	d8800115 	stw	r2,4(sp)
 1001374:	00820004 	movi	r2,2048
 1001378:	d8800215 	stw	r2,8(sp)
 100137c:	d8000315 	stw	zero,12(sp)
 1001380:	00800044 	movi	r2,1
 1001384:	d8800415 	stw	r2,16(sp)
 1001388:	01004034 	movhi	r4,256
 100138c:	2103dd04 	addi	r4,r4,3956
 1001390:	000b883a 	mov	r5,zero
 1001394:	01c003c4 	movi	r7,15
 1001398:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
 100139c:	e0bffe05 	stb	r2,-8(fp)
				&ButtonsIO_Stack[TASK_STACKSIZE - 1], // Pointer to top
				// of task stack
				BUTTONSIO_PRIO, BUTTONSIO_PRIO, (void *) &ButtonsIO_Stack[0],
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);

	err = OSTaskCreateExt(
 10013a0:	018040b4 	movhi	r6,258
 10013a4:	31bbdb04 	addi	r6,r6,-4244
 10013a8:	00800444 	movi	r2,17
 10013ac:	d8800015 	stw	r2,0(sp)
 10013b0:	008040b4 	movhi	r2,258
 10013b4:	10b3dc04 	addi	r2,r2,-12432
 10013b8:	d8800115 	stw	r2,4(sp)
 10013bc:	00820004 	movi	r2,2048
 10013c0:	d8800215 	stw	r2,8(sp)
 10013c4:	d8000315 	stw	zero,12(sp)
 10013c8:	00800044 	movi	r2,1
 10013cc:	d8800415 	stw	r2,16(sp)
 10013d0:	01004034 	movhi	r4,256
 10013d4:	2103ae04 	addi	r4,r4,3768
 10013d8:	000b883a 	mov	r5,zero
 10013dc:	01c00444 	movi	r7,17
 10013e0:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
 10013e4:	e0bffe05 	stb	r2,-8(fp)
//				&OverloadDetection_Stack[TASK_STACKSIZE - 1], // Pointer to top
//				// of task stack
//				OVERLOADDETECTION_PRIO, OVERLOADDETECTION_PRIO, (void *) &OverloadDetection_Stack[0],
//				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);

	printf("All Tasks and Kernel Objects generated!\n");
 10013e8:	010040b4 	movhi	r4,258
 10013ec:	2124aa04 	addi	r4,r4,-27992
 10013f0:	100286c0 	call	100286c <puts>

	/* Task deletes itself */

	OSTaskDel(OS_PRIO_SELF);
 10013f4:	01003fc4 	movi	r4,255
 10013f8:	1013c7c0 	call	1013c7c <OSTaskDel>
}
 10013fc:	e037883a 	mov	sp,fp
 1001400:	dfc00117 	ldw	ra,4(sp)
 1001404:	df000017 	ldw	fp,0(sp)
 1001408:	dec00204 	addi	sp,sp,8
 100140c:	f800283a 	ret

01001410 <main>:
 * The function 'main' creates only a single task 'StartTask' and starts
 * the OS. All other tasks are started from the task 'StartTask'.
 *
 */

int main(void) {
 1001410:	defff904 	addi	sp,sp,-28
 1001414:	dfc00615 	stw	ra,24(sp)
 1001418:	df000515 	stw	fp,20(sp)
 100141c:	df000504 	addi	fp,sp,20

	printf("Lab: Cruise Control\n");
 1001420:	010040b4 	movhi	r4,258
 1001424:	2124b404 	addi	r4,r4,-27952
 1001428:	100286c0 	call	100286c <puts>

	OSTaskCreateExt(
 100142c:	018040f4 	movhi	r6,259
 1001430:	31a3db04 	addi	r6,r6,-28820
 1001434:	00800144 	movi	r2,5
 1001438:	d8800015 	stw	r2,0(sp)
 100143c:	008040b4 	movhi	r2,258
 1001440:	109bdc04 	addi	r2,r2,28528
 1001444:	d8800115 	stw	r2,4(sp)
 1001448:	00820004 	movi	r2,2048
 100144c:	d8800215 	stw	r2,8(sp)
 1001450:	d8000315 	stw	zero,12(sp)
 1001454:	008000c4 	movi	r2,3
 1001458:	d8800415 	stw	r2,16(sp)
 100145c:	01004034 	movhi	r4,256
 1001460:	21042b04 	addi	r4,r4,4268
 1001464:	000b883a 	mov	r5,zero
 1001468:	01c00144 	movi	r7,5
 100146c:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
			// of task stack
			STARTTASK_PRIO, STARTTASK_PRIO, (void *) &StartTask_Stack[0],
			TASK_STACKSIZE, (void *) 0,
			OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

	OSStart();
 1001470:	100cfb80 	call	100cfb8 <OSStart>

	return 0;
 1001474:	0005883a 	mov	r2,zero
}
 1001478:	e037883a 	mov	sp,fp
 100147c:	dfc00117 	ldw	ra,4(sp)
 1001480:	df000017 	ldw	fp,0(sp)
 1001484:	dec00204 	addi	sp,sp,8
 1001488:	f800283a 	ret

0100148c <__floatsisf>:
 100148c:	2006d7fa 	srli	r3,r4,31
 1001490:	defffa04 	addi	sp,sp,-24
 1001494:	008000c4 	movi	r2,3
 1001498:	dfc00515 	stw	ra,20(sp)
 100149c:	dc000415 	stw	r16,16(sp)
 10014a0:	d8800015 	stw	r2,0(sp)
 10014a4:	d8c00115 	stw	r3,4(sp)
 10014a8:	2000081e 	bne	r4,zero,10014cc <__floatsisf+0x40>
 10014ac:	00800084 	movi	r2,2
 10014b0:	d8800015 	stw	r2,0(sp)
 10014b4:	d809883a 	mov	r4,sp
 10014b8:	10020e00 	call	10020e0 <__pack_f>
 10014bc:	dfc00517 	ldw	ra,20(sp)
 10014c0:	dc000417 	ldw	r16,16(sp)
 10014c4:	dec00604 	addi	sp,sp,24
 10014c8:	f800283a 	ret
 10014cc:	00800784 	movi	r2,30
 10014d0:	1807003a 	cmpeq	r3,r3,zero
 10014d4:	d8800215 	stw	r2,8(sp)
 10014d8:	18000e1e 	bne	r3,zero,1001514 <__floatsisf+0x88>
 10014dc:	00a00034 	movhi	r2,32768
 10014e0:	20800e26 	beq	r4,r2,100151c <__floatsisf+0x90>
 10014e4:	0121c83a 	sub	r16,zero,r4
 10014e8:	8009883a 	mov	r4,r16
 10014ec:	dc000315 	stw	r16,12(sp)
 10014f0:	10020600 	call	1002060 <__clzsi2>
 10014f4:	117fffc4 	addi	r5,r2,-1
 10014f8:	017fee0e 	bge	zero,r5,10014b4 <__floatsisf+0x28>
 10014fc:	d8800217 	ldw	r2,8(sp)
 1001500:	8146983a 	sll	r3,r16,r5
 1001504:	1145c83a 	sub	r2,r2,r5
 1001508:	d8c00315 	stw	r3,12(sp)
 100150c:	d8800215 	stw	r2,8(sp)
 1001510:	003fe806 	br	10014b4 <__floatsisf+0x28>
 1001514:	2021883a 	mov	r16,r4
 1001518:	003ff306 	br	10014e8 <__floatsisf+0x5c>
 100151c:	00b3c034 	movhi	r2,52992
 1001520:	003fe606 	br	10014bc <__floatsisf+0x30>

01001524 <__extendsfdf2>:
 1001524:	defff904 	addi	sp,sp,-28
 1001528:	d9000115 	stw	r4,4(sp)
 100152c:	d9400204 	addi	r5,sp,8
 1001530:	d9000104 	addi	r4,sp,4
 1001534:	dfc00615 	stw	ra,24(sp)
 1001538:	10022400 	call	1002240 <__unpack_f>
 100153c:	d9c00517 	ldw	r7,20(sp)
 1001540:	0011883a 	mov	r8,zero
 1001544:	400697ba 	slli	r3,r8,30
 1001548:	3812d0ba 	srli	r9,r7,2
 100154c:	380497ba 	slli	r2,r7,30
 1001550:	d9000217 	ldw	r4,8(sp)
 1001554:	d9400317 	ldw	r5,12(sp)
 1001558:	d9800417 	ldw	r6,16(sp)
 100155c:	48c6b03a 	or	r3,r9,r3
 1001560:	100f883a 	mov	r7,r2
 1001564:	d8c00015 	stw	r3,0(sp)
 1001568:	1001ea40 	call	1001ea4 <__make_dp>
 100156c:	dfc00617 	ldw	ra,24(sp)
 1001570:	dec00704 	addi	sp,sp,28
 1001574:	f800283a 	ret

01001578 <_fpadd_parts>:
 1001578:	defff804 	addi	sp,sp,-32
 100157c:	dcc00315 	stw	r19,12(sp)
 1001580:	2027883a 	mov	r19,r4
 1001584:	21000017 	ldw	r4,0(r4)
 1001588:	00c00044 	movi	r3,1
 100158c:	dd400515 	stw	r21,20(sp)
 1001590:	dd000415 	stw	r20,16(sp)
 1001594:	ddc00715 	stw	r23,28(sp)
 1001598:	dd800615 	stw	r22,24(sp)
 100159c:	dc800215 	stw	r18,8(sp)
 10015a0:	dc400115 	stw	r17,4(sp)
 10015a4:	dc000015 	stw	r16,0(sp)
 10015a8:	282b883a 	mov	r21,r5
 10015ac:	3029883a 	mov	r20,r6
 10015b0:	1900632e 	bgeu	r3,r4,1001740 <_fpadd_parts+0x1c8>
 10015b4:	28800017 	ldw	r2,0(r5)
 10015b8:	1880812e 	bgeu	r3,r2,10017c0 <_fpadd_parts+0x248>
 10015bc:	00c00104 	movi	r3,4
 10015c0:	20c0dc26 	beq	r4,r3,1001934 <_fpadd_parts+0x3bc>
 10015c4:	10c07e26 	beq	r2,r3,10017c0 <_fpadd_parts+0x248>
 10015c8:	00c00084 	movi	r3,2
 10015cc:	10c06726 	beq	r2,r3,100176c <_fpadd_parts+0x1f4>
 10015d0:	20c07b26 	beq	r4,r3,10017c0 <_fpadd_parts+0x248>
 10015d4:	9dc00217 	ldw	r23,8(r19)
 10015d8:	28c00217 	ldw	r3,8(r5)
 10015dc:	9c400317 	ldw	r17,12(r19)
 10015e0:	2bc00317 	ldw	r15,12(r5)
 10015e4:	b8cdc83a 	sub	r6,r23,r3
 10015e8:	9c800417 	ldw	r18,16(r19)
 10015ec:	2c000417 	ldw	r16,16(r5)
 10015f0:	3009883a 	mov	r4,r6
 10015f4:	30009716 	blt	r6,zero,1001854 <_fpadd_parts+0x2dc>
 10015f8:	00800fc4 	movi	r2,63
 10015fc:	11806b16 	blt	r2,r6,10017ac <_fpadd_parts+0x234>
 1001600:	0100a40e 	bge	zero,r4,1001894 <_fpadd_parts+0x31c>
 1001604:	35bff804 	addi	r22,r6,-32
 1001608:	b000bc16 	blt	r22,zero,10018fc <_fpadd_parts+0x384>
 100160c:	8596d83a 	srl	r11,r16,r22
 1001610:	0019883a 	mov	r12,zero
 1001614:	0013883a 	mov	r9,zero
 1001618:	01000044 	movi	r4,1
 100161c:	0015883a 	mov	r10,zero
 1001620:	b000be16 	blt	r22,zero,100191c <_fpadd_parts+0x3a4>
 1001624:	2590983a 	sll	r8,r4,r22
 1001628:	000f883a 	mov	r7,zero
 100162c:	00bfffc4 	movi	r2,-1
 1001630:	3889883a 	add	r4,r7,r2
 1001634:	408b883a 	add	r5,r8,r2
 1001638:	21cd803a 	cmpltu	r6,r4,r7
 100163c:	314b883a 	add	r5,r6,r5
 1001640:	7904703a 	and	r2,r15,r4
 1001644:	8146703a 	and	r3,r16,r5
 1001648:	10c4b03a 	or	r2,r2,r3
 100164c:	10000226 	beq	r2,zero,1001658 <_fpadd_parts+0xe0>
 1001650:	02400044 	movi	r9,1
 1001654:	0015883a 	mov	r10,zero
 1001658:	5a5eb03a 	or	r15,r11,r9
 100165c:	62a0b03a 	or	r16,r12,r10
 1001660:	99400117 	ldw	r5,4(r19)
 1001664:	a8800117 	ldw	r2,4(r21)
 1001668:	28806e26 	beq	r5,r2,1001824 <_fpadd_parts+0x2ac>
 100166c:	28006626 	beq	r5,zero,1001808 <_fpadd_parts+0x290>
 1001670:	7c45c83a 	sub	r2,r15,r17
 1001674:	7889803a 	cmpltu	r4,r15,r2
 1001678:	8487c83a 	sub	r3,r16,r18
 100167c:	1909c83a 	sub	r4,r3,r4
 1001680:	100d883a 	mov	r6,r2
 1001684:	200f883a 	mov	r7,r4
 1001688:	38007716 	blt	r7,zero,1001868 <_fpadd_parts+0x2f0>
 100168c:	a5c00215 	stw	r23,8(r20)
 1001690:	a1c00415 	stw	r7,16(r20)
 1001694:	a0000115 	stw	zero,4(r20)
 1001698:	a1800315 	stw	r6,12(r20)
 100169c:	a2000317 	ldw	r8,12(r20)
 10016a0:	a2400417 	ldw	r9,16(r20)
 10016a4:	00bfffc4 	movi	r2,-1
 10016a8:	408b883a 	add	r5,r8,r2
 10016ac:	2a09803a 	cmpltu	r4,r5,r8
 10016b0:	488d883a 	add	r6,r9,r2
 10016b4:	01c40034 	movhi	r7,4096
 10016b8:	39ffffc4 	addi	r7,r7,-1
 10016bc:	218d883a 	add	r6,r4,r6
 10016c0:	39801736 	bltu	r7,r6,1001720 <_fpadd_parts+0x1a8>
 10016c4:	31c06526 	beq	r6,r7,100185c <_fpadd_parts+0x2e4>
 10016c8:	a3000217 	ldw	r12,8(r20)
 10016cc:	4209883a 	add	r4,r8,r8
 10016d0:	00bfffc4 	movi	r2,-1
 10016d4:	220f803a 	cmpltu	r7,r4,r8
 10016d8:	4a4b883a 	add	r5,r9,r9
 10016dc:	394f883a 	add	r7,r7,r5
 10016e0:	2095883a 	add	r10,r4,r2
 10016e4:	3897883a 	add	r11,r7,r2
 10016e8:	510d803a 	cmpltu	r6,r10,r4
 10016ec:	6099883a 	add	r12,r12,r2
 10016f0:	32d7883a 	add	r11,r6,r11
 10016f4:	00840034 	movhi	r2,4096
 10016f8:	10bfffc4 	addi	r2,r2,-1
 10016fc:	2011883a 	mov	r8,r4
 1001700:	3813883a 	mov	r9,r7
 1001704:	a1000315 	stw	r4,12(r20)
 1001708:	a1c00415 	stw	r7,16(r20)
 100170c:	a3000215 	stw	r12,8(r20)
 1001710:	12c00336 	bltu	r2,r11,1001720 <_fpadd_parts+0x1a8>
 1001714:	58bfed1e 	bne	r11,r2,10016cc <_fpadd_parts+0x154>
 1001718:	00bfff84 	movi	r2,-2
 100171c:	12bfeb2e 	bgeu	r2,r10,10016cc <_fpadd_parts+0x154>
 1001720:	a2800417 	ldw	r10,16(r20)
 1001724:	008000c4 	movi	r2,3
 1001728:	00c80034 	movhi	r3,8192
 100172c:	18ffffc4 	addi	r3,r3,-1
 1001730:	a2400317 	ldw	r9,12(r20)
 1001734:	a0800015 	stw	r2,0(r20)
 1001738:	1a802336 	bltu	r3,r10,10017c8 <_fpadd_parts+0x250>
 100173c:	a027883a 	mov	r19,r20
 1001740:	9805883a 	mov	r2,r19
 1001744:	ddc00717 	ldw	r23,28(sp)
 1001748:	dd800617 	ldw	r22,24(sp)
 100174c:	dd400517 	ldw	r21,20(sp)
 1001750:	dd000417 	ldw	r20,16(sp)
 1001754:	dcc00317 	ldw	r19,12(sp)
 1001758:	dc800217 	ldw	r18,8(sp)
 100175c:	dc400117 	ldw	r17,4(sp)
 1001760:	dc000017 	ldw	r16,0(sp)
 1001764:	dec00804 	addi	sp,sp,32
 1001768:	f800283a 	ret
 100176c:	20fff41e 	bne	r4,r3,1001740 <_fpadd_parts+0x1c8>
 1001770:	31000015 	stw	r4,0(r6)
 1001774:	98800117 	ldw	r2,4(r19)
 1001778:	30800115 	stw	r2,4(r6)
 100177c:	98c00217 	ldw	r3,8(r19)
 1001780:	30c00215 	stw	r3,8(r6)
 1001784:	98800317 	ldw	r2,12(r19)
 1001788:	30800315 	stw	r2,12(r6)
 100178c:	98c00417 	ldw	r3,16(r19)
 1001790:	30c00415 	stw	r3,16(r6)
 1001794:	98800117 	ldw	r2,4(r19)
 1001798:	28c00117 	ldw	r3,4(r5)
 100179c:	3027883a 	mov	r19,r6
 10017a0:	10c4703a 	and	r2,r2,r3
 10017a4:	30800115 	stw	r2,4(r6)
 10017a8:	003fe506 	br	1001740 <_fpadd_parts+0x1c8>
 10017ac:	1dc02616 	blt	r3,r23,1001848 <_fpadd_parts+0x2d0>
 10017b0:	0023883a 	mov	r17,zero
 10017b4:	182f883a 	mov	r23,r3
 10017b8:	0025883a 	mov	r18,zero
 10017bc:	003fa806 	br	1001660 <_fpadd_parts+0xe8>
 10017c0:	a827883a 	mov	r19,r21
 10017c4:	003fde06 	br	1001740 <_fpadd_parts+0x1c8>
 10017c8:	01800044 	movi	r6,1
 10017cc:	500497fa 	slli	r2,r10,31
 10017d0:	4808d07a 	srli	r4,r9,1
 10017d4:	518ad83a 	srl	r5,r10,r6
 10017d8:	a2000217 	ldw	r8,8(r20)
 10017dc:	1108b03a 	or	r4,r2,r4
 10017e0:	0007883a 	mov	r3,zero
 10017e4:	4984703a 	and	r2,r9,r6
 10017e8:	208cb03a 	or	r6,r4,r2
 10017ec:	28ceb03a 	or	r7,r5,r3
 10017f0:	42000044 	addi	r8,r8,1
 10017f4:	a027883a 	mov	r19,r20
 10017f8:	a1c00415 	stw	r7,16(r20)
 10017fc:	a2000215 	stw	r8,8(r20)
 1001800:	a1800315 	stw	r6,12(r20)
 1001804:	003fce06 	br	1001740 <_fpadd_parts+0x1c8>
 1001808:	8bc5c83a 	sub	r2,r17,r15
 100180c:	8889803a 	cmpltu	r4,r17,r2
 1001810:	9407c83a 	sub	r3,r18,r16
 1001814:	1909c83a 	sub	r4,r3,r4
 1001818:	100d883a 	mov	r6,r2
 100181c:	200f883a 	mov	r7,r4
 1001820:	003f9906 	br	1001688 <_fpadd_parts+0x110>
 1001824:	7c45883a 	add	r2,r15,r17
 1001828:	13c9803a 	cmpltu	r4,r2,r15
 100182c:	8487883a 	add	r3,r16,r18
 1001830:	20c9883a 	add	r4,r4,r3
 1001834:	a1400115 	stw	r5,4(r20)
 1001838:	a5c00215 	stw	r23,8(r20)
 100183c:	a0800315 	stw	r2,12(r20)
 1001840:	a1000415 	stw	r4,16(r20)
 1001844:	003fb606 	br	1001720 <_fpadd_parts+0x1a8>
 1001848:	001f883a 	mov	r15,zero
 100184c:	0021883a 	mov	r16,zero
 1001850:	003f8306 	br	1001660 <_fpadd_parts+0xe8>
 1001854:	018dc83a 	sub	r6,zero,r6
 1001858:	003f6706 	br	10015f8 <_fpadd_parts+0x80>
 100185c:	00bfff84 	movi	r2,-2
 1001860:	117faf36 	bltu	r2,r5,1001720 <_fpadd_parts+0x1a8>
 1001864:	003f9806 	br	10016c8 <_fpadd_parts+0x150>
 1001868:	0005883a 	mov	r2,zero
 100186c:	1189c83a 	sub	r4,r2,r6
 1001870:	1105803a 	cmpltu	r2,r2,r4
 1001874:	01cbc83a 	sub	r5,zero,r7
 1001878:	2885c83a 	sub	r2,r5,r2
 100187c:	01800044 	movi	r6,1
 1001880:	a1800115 	stw	r6,4(r20)
 1001884:	a5c00215 	stw	r23,8(r20)
 1001888:	a1000315 	stw	r4,12(r20)
 100188c:	a0800415 	stw	r2,16(r20)
 1001890:	003f8206 	br	100169c <_fpadd_parts+0x124>
 1001894:	203f7226 	beq	r4,zero,1001660 <_fpadd_parts+0xe8>
 1001898:	35bff804 	addi	r22,r6,-32
 100189c:	b9af883a 	add	r23,r23,r6
 10018a0:	b0003116 	blt	r22,zero,1001968 <_fpadd_parts+0x3f0>
 10018a4:	959ad83a 	srl	r13,r18,r22
 10018a8:	001d883a 	mov	r14,zero
 10018ac:	000f883a 	mov	r7,zero
 10018b0:	01000044 	movi	r4,1
 10018b4:	0011883a 	mov	r8,zero
 10018b8:	b0002516 	blt	r22,zero,1001950 <_fpadd_parts+0x3d8>
 10018bc:	2594983a 	sll	r10,r4,r22
 10018c0:	0013883a 	mov	r9,zero
 10018c4:	00bfffc4 	movi	r2,-1
 10018c8:	4889883a 	add	r4,r9,r2
 10018cc:	508b883a 	add	r5,r10,r2
 10018d0:	224d803a 	cmpltu	r6,r4,r9
 10018d4:	314b883a 	add	r5,r6,r5
 10018d8:	8904703a 	and	r2,r17,r4
 10018dc:	9146703a 	and	r3,r18,r5
 10018e0:	10c4b03a 	or	r2,r2,r3
 10018e4:	10000226 	beq	r2,zero,10018f0 <_fpadd_parts+0x378>
 10018e8:	01c00044 	movi	r7,1
 10018ec:	0011883a 	mov	r8,zero
 10018f0:	69e2b03a 	or	r17,r13,r7
 10018f4:	7224b03a 	or	r18,r14,r8
 10018f8:	003f5906 	br	1001660 <_fpadd_parts+0xe8>
 10018fc:	8407883a 	add	r3,r16,r16
 1001900:	008007c4 	movi	r2,31
 1001904:	1185c83a 	sub	r2,r2,r6
 1001908:	1886983a 	sll	r3,r3,r2
 100190c:	7996d83a 	srl	r11,r15,r6
 1001910:	8198d83a 	srl	r12,r16,r6
 1001914:	1ad6b03a 	or	r11,r3,r11
 1001918:	003f3e06 	br	1001614 <_fpadd_parts+0x9c>
 100191c:	2006d07a 	srli	r3,r4,1
 1001920:	008007c4 	movi	r2,31
 1001924:	1185c83a 	sub	r2,r2,r6
 1001928:	1890d83a 	srl	r8,r3,r2
 100192c:	218e983a 	sll	r7,r4,r6
 1001930:	003f3e06 	br	100162c <_fpadd_parts+0xb4>
 1001934:	113f821e 	bne	r2,r4,1001740 <_fpadd_parts+0x1c8>
 1001938:	28c00117 	ldw	r3,4(r5)
 100193c:	98800117 	ldw	r2,4(r19)
 1001940:	10ff7f26 	beq	r2,r3,1001740 <_fpadd_parts+0x1c8>
 1001944:	04c040b4 	movhi	r19,258
 1001948:	9ce4b904 	addi	r19,r19,-27932
 100194c:	003f7c06 	br	1001740 <_fpadd_parts+0x1c8>
 1001950:	2006d07a 	srli	r3,r4,1
 1001954:	008007c4 	movi	r2,31
 1001958:	1185c83a 	sub	r2,r2,r6
 100195c:	1894d83a 	srl	r10,r3,r2
 1001960:	2192983a 	sll	r9,r4,r6
 1001964:	003fd706 	br	10018c4 <_fpadd_parts+0x34c>
 1001968:	9487883a 	add	r3,r18,r18
 100196c:	008007c4 	movi	r2,31
 1001970:	1185c83a 	sub	r2,r2,r6
 1001974:	1886983a 	sll	r3,r3,r2
 1001978:	899ad83a 	srl	r13,r17,r6
 100197c:	919cd83a 	srl	r14,r18,r6
 1001980:	1b5ab03a 	or	r13,r3,r13
 1001984:	003fc906 	br	10018ac <_fpadd_parts+0x334>

01001988 <__subdf3>:
 1001988:	deffea04 	addi	sp,sp,-88
 100198c:	dcc01415 	stw	r19,80(sp)
 1001990:	dcc00404 	addi	r19,sp,16
 1001994:	2011883a 	mov	r8,r4
 1001998:	2813883a 	mov	r9,r5
 100199c:	dc401315 	stw	r17,76(sp)
 10019a0:	d809883a 	mov	r4,sp
 10019a4:	980b883a 	mov	r5,r19
 10019a8:	dc400904 	addi	r17,sp,36
 10019ac:	dfc01515 	stw	ra,84(sp)
 10019b0:	da400115 	stw	r9,4(sp)
 10019b4:	d9c00315 	stw	r7,12(sp)
 10019b8:	da000015 	stw	r8,0(sp)
 10019bc:	d9800215 	stw	r6,8(sp)
 10019c0:	100261c0 	call	100261c <__unpack_d>
 10019c4:	d9000204 	addi	r4,sp,8
 10019c8:	880b883a 	mov	r5,r17
 10019cc:	100261c0 	call	100261c <__unpack_d>
 10019d0:	d8800a17 	ldw	r2,40(sp)
 10019d4:	880b883a 	mov	r5,r17
 10019d8:	9809883a 	mov	r4,r19
 10019dc:	d9800e04 	addi	r6,sp,56
 10019e0:	1080005c 	xori	r2,r2,1
 10019e4:	d8800a15 	stw	r2,40(sp)
 10019e8:	10015780 	call	1001578 <_fpadd_parts>
 10019ec:	1009883a 	mov	r4,r2
 10019f0:	10023080 	call	1002308 <__pack_d>
 10019f4:	dfc01517 	ldw	ra,84(sp)
 10019f8:	dcc01417 	ldw	r19,80(sp)
 10019fc:	dc401317 	ldw	r17,76(sp)
 1001a00:	dec01604 	addi	sp,sp,88
 1001a04:	f800283a 	ret

01001a08 <__adddf3>:
 1001a08:	deffea04 	addi	sp,sp,-88
 1001a0c:	dcc01415 	stw	r19,80(sp)
 1001a10:	dcc00404 	addi	r19,sp,16
 1001a14:	2011883a 	mov	r8,r4
 1001a18:	2813883a 	mov	r9,r5
 1001a1c:	dc401315 	stw	r17,76(sp)
 1001a20:	d809883a 	mov	r4,sp
 1001a24:	980b883a 	mov	r5,r19
 1001a28:	dc400904 	addi	r17,sp,36
 1001a2c:	dfc01515 	stw	ra,84(sp)
 1001a30:	da400115 	stw	r9,4(sp)
 1001a34:	d9c00315 	stw	r7,12(sp)
 1001a38:	da000015 	stw	r8,0(sp)
 1001a3c:	d9800215 	stw	r6,8(sp)
 1001a40:	100261c0 	call	100261c <__unpack_d>
 1001a44:	d9000204 	addi	r4,sp,8
 1001a48:	880b883a 	mov	r5,r17
 1001a4c:	100261c0 	call	100261c <__unpack_d>
 1001a50:	d9800e04 	addi	r6,sp,56
 1001a54:	9809883a 	mov	r4,r19
 1001a58:	880b883a 	mov	r5,r17
 1001a5c:	10015780 	call	1001578 <_fpadd_parts>
 1001a60:	1009883a 	mov	r4,r2
 1001a64:	10023080 	call	1002308 <__pack_d>
 1001a68:	dfc01517 	ldw	ra,84(sp)
 1001a6c:	dcc01417 	ldw	r19,80(sp)
 1001a70:	dc401317 	ldw	r17,76(sp)
 1001a74:	dec01604 	addi	sp,sp,88
 1001a78:	f800283a 	ret

01001a7c <__divdf3>:
 1001a7c:	deffed04 	addi	sp,sp,-76
 1001a80:	dcc01115 	stw	r19,68(sp)
 1001a84:	dcc00404 	addi	r19,sp,16
 1001a88:	2011883a 	mov	r8,r4
 1001a8c:	2813883a 	mov	r9,r5
 1001a90:	dc000e15 	stw	r16,56(sp)
 1001a94:	d809883a 	mov	r4,sp
 1001a98:	980b883a 	mov	r5,r19
 1001a9c:	dc000904 	addi	r16,sp,36
 1001aa0:	dfc01215 	stw	ra,72(sp)
 1001aa4:	da400115 	stw	r9,4(sp)
 1001aa8:	d9c00315 	stw	r7,12(sp)
 1001aac:	da000015 	stw	r8,0(sp)
 1001ab0:	d9800215 	stw	r6,8(sp)
 1001ab4:	dc801015 	stw	r18,64(sp)
 1001ab8:	dc400f15 	stw	r17,60(sp)
 1001abc:	100261c0 	call	100261c <__unpack_d>
 1001ac0:	d9000204 	addi	r4,sp,8
 1001ac4:	800b883a 	mov	r5,r16
 1001ac8:	100261c0 	call	100261c <__unpack_d>
 1001acc:	d9000417 	ldw	r4,16(sp)
 1001ad0:	00800044 	movi	r2,1
 1001ad4:	11000b2e 	bgeu	r2,r4,1001b04 <__divdf3+0x88>
 1001ad8:	d9400917 	ldw	r5,36(sp)
 1001adc:	1140762e 	bgeu	r2,r5,1001cb8 <__divdf3+0x23c>
 1001ae0:	d8800517 	ldw	r2,20(sp)
 1001ae4:	d8c00a17 	ldw	r3,40(sp)
 1001ae8:	01800104 	movi	r6,4
 1001aec:	10c4f03a 	xor	r2,r2,r3
 1001af0:	d8800515 	stw	r2,20(sp)
 1001af4:	21800226 	beq	r4,r6,1001b00 <__divdf3+0x84>
 1001af8:	00800084 	movi	r2,2
 1001afc:	2080141e 	bne	r4,r2,1001b50 <__divdf3+0xd4>
 1001b00:	29000926 	beq	r5,r4,1001b28 <__divdf3+0xac>
 1001b04:	9809883a 	mov	r4,r19
 1001b08:	10023080 	call	1002308 <__pack_d>
 1001b0c:	dfc01217 	ldw	ra,72(sp)
 1001b10:	dcc01117 	ldw	r19,68(sp)
 1001b14:	dc801017 	ldw	r18,64(sp)
 1001b18:	dc400f17 	ldw	r17,60(sp)
 1001b1c:	dc000e17 	ldw	r16,56(sp)
 1001b20:	dec01304 	addi	sp,sp,76
 1001b24:	f800283a 	ret
 1001b28:	010040b4 	movhi	r4,258
 1001b2c:	2124b904 	addi	r4,r4,-27932
 1001b30:	10023080 	call	1002308 <__pack_d>
 1001b34:	dfc01217 	ldw	ra,72(sp)
 1001b38:	dcc01117 	ldw	r19,68(sp)
 1001b3c:	dc801017 	ldw	r18,64(sp)
 1001b40:	dc400f17 	ldw	r17,60(sp)
 1001b44:	dc000e17 	ldw	r16,56(sp)
 1001b48:	dec01304 	addi	sp,sp,76
 1001b4c:	f800283a 	ret
 1001b50:	29805b26 	beq	r5,r6,1001cc0 <__divdf3+0x244>
 1001b54:	28802d26 	beq	r5,r2,1001c0c <__divdf3+0x190>
 1001b58:	d8c00617 	ldw	r3,24(sp)
 1001b5c:	d8800b17 	ldw	r2,44(sp)
 1001b60:	d9c00817 	ldw	r7,32(sp)
 1001b64:	dc400d17 	ldw	r17,52(sp)
 1001b68:	188bc83a 	sub	r5,r3,r2
 1001b6c:	d9800717 	ldw	r6,28(sp)
 1001b70:	dc000c17 	ldw	r16,48(sp)
 1001b74:	d9400615 	stw	r5,24(sp)
 1001b78:	3c403836 	bltu	r7,r17,1001c5c <__divdf3+0x1e0>
 1001b7c:	89c03626 	beq	r17,r7,1001c58 <__divdf3+0x1dc>
 1001b80:	0015883a 	mov	r10,zero
 1001b84:	001d883a 	mov	r14,zero
 1001b88:	02c40034 	movhi	r11,4096
 1001b8c:	001f883a 	mov	r15,zero
 1001b90:	003f883a 	mov	ra,zero
 1001b94:	04800f44 	movi	r18,61
 1001b98:	00000f06 	br	1001bd8 <__divdf3+0x15c>
 1001b9c:	601d883a 	mov	r14,r12
 1001ba0:	681f883a 	mov	r15,r13
 1001ba4:	400d883a 	mov	r6,r8
 1001ba8:	100f883a 	mov	r7,r2
 1001bac:	3191883a 	add	r8,r6,r6
 1001bb0:	5808d07a 	srli	r4,r11,1
 1001bb4:	4185803a 	cmpltu	r2,r8,r6
 1001bb8:	39d3883a 	add	r9,r7,r7
 1001bbc:	28c6b03a 	or	r3,r5,r3
 1001bc0:	1245883a 	add	r2,r2,r9
 1001bc4:	1815883a 	mov	r10,r3
 1001bc8:	2017883a 	mov	r11,r4
 1001bcc:	400d883a 	mov	r6,r8
 1001bd0:	100f883a 	mov	r7,r2
 1001bd4:	fc801726 	beq	ra,r18,1001c34 <__divdf3+0x1b8>
 1001bd8:	580a97fa 	slli	r5,r11,31
 1001bdc:	5006d07a 	srli	r3,r10,1
 1001be0:	ffc00044 	addi	ra,ra,1
 1001be4:	3c7ff136 	bltu	r7,r17,1001bac <__divdf3+0x130>
 1001be8:	3411c83a 	sub	r8,r6,r16
 1001bec:	3205803a 	cmpltu	r2,r6,r8
 1001bf0:	3c53c83a 	sub	r9,r7,r17
 1001bf4:	7298b03a 	or	r12,r14,r10
 1001bf8:	7adab03a 	or	r13,r15,r11
 1001bfc:	4885c83a 	sub	r2,r9,r2
 1001c00:	89ffe61e 	bne	r17,r7,1001b9c <__divdf3+0x120>
 1001c04:	343fe936 	bltu	r6,r16,1001bac <__divdf3+0x130>
 1001c08:	003fe406 	br	1001b9c <__divdf3+0x120>
 1001c0c:	9809883a 	mov	r4,r19
 1001c10:	d9800415 	stw	r6,16(sp)
 1001c14:	10023080 	call	1002308 <__pack_d>
 1001c18:	dfc01217 	ldw	ra,72(sp)
 1001c1c:	dcc01117 	ldw	r19,68(sp)
 1001c20:	dc801017 	ldw	r18,64(sp)
 1001c24:	dc400f17 	ldw	r17,60(sp)
 1001c28:	dc000e17 	ldw	r16,56(sp)
 1001c2c:	dec01304 	addi	sp,sp,76
 1001c30:	f800283a 	ret
 1001c34:	00803fc4 	movi	r2,255
 1001c38:	7090703a 	and	r8,r14,r2
 1001c3c:	00802004 	movi	r2,128
 1001c40:	0007883a 	mov	r3,zero
 1001c44:	0013883a 	mov	r9,zero
 1001c48:	40800d26 	beq	r8,r2,1001c80 <__divdf3+0x204>
 1001c4c:	dbc00815 	stw	r15,32(sp)
 1001c50:	db800715 	stw	r14,28(sp)
 1001c54:	003fab06 	br	1001b04 <__divdf3+0x88>
 1001c58:	343fc92e 	bgeu	r6,r16,1001b80 <__divdf3+0x104>
 1001c5c:	3185883a 	add	r2,r6,r6
 1001c60:	1189803a 	cmpltu	r4,r2,r6
 1001c64:	39c7883a 	add	r3,r7,r7
 1001c68:	20c9883a 	add	r4,r4,r3
 1001c6c:	297fffc4 	addi	r5,r5,-1
 1001c70:	100d883a 	mov	r6,r2
 1001c74:	200f883a 	mov	r7,r4
 1001c78:	d9400615 	stw	r5,24(sp)
 1001c7c:	003fc006 	br	1001b80 <__divdf3+0x104>
 1001c80:	483ff21e 	bne	r9,zero,1001c4c <__divdf3+0x1d0>
 1001c84:	01004004 	movi	r4,256
 1001c88:	7104703a 	and	r2,r14,r4
 1001c8c:	10c4b03a 	or	r2,r2,r3
 1001c90:	103fee1e 	bne	r2,zero,1001c4c <__divdf3+0x1d0>
 1001c94:	31c4b03a 	or	r2,r6,r7
 1001c98:	103fec26 	beq	r2,zero,1001c4c <__divdf3+0x1d0>
 1001c9c:	7205883a 	add	r2,r14,r8
 1001ca0:	1391803a 	cmpltu	r8,r2,r14
 1001ca4:	43d1883a 	add	r8,r8,r15
 1001ca8:	013fc004 	movi	r4,-256
 1001cac:	111c703a 	and	r14,r2,r4
 1001cb0:	401f883a 	mov	r15,r8
 1001cb4:	003fe506 	br	1001c4c <__divdf3+0x1d0>
 1001cb8:	8009883a 	mov	r4,r16
 1001cbc:	003f9206 	br	1001b08 <__divdf3+0x8c>
 1001cc0:	9809883a 	mov	r4,r19
 1001cc4:	d8000715 	stw	zero,28(sp)
 1001cc8:	d8000815 	stw	zero,32(sp)
 1001ccc:	d8000615 	stw	zero,24(sp)
 1001cd0:	003f8d06 	br	1001b08 <__divdf3+0x8c>

01001cd4 <__floatsidf>:
 1001cd4:	2006d7fa 	srli	r3,r4,31
 1001cd8:	defff604 	addi	sp,sp,-40
 1001cdc:	008000c4 	movi	r2,3
 1001ce0:	dfc00915 	stw	ra,36(sp)
 1001ce4:	dcc00815 	stw	r19,32(sp)
 1001ce8:	dc800715 	stw	r18,28(sp)
 1001cec:	dc400615 	stw	r17,24(sp)
 1001cf0:	dc000515 	stw	r16,20(sp)
 1001cf4:	d8800015 	stw	r2,0(sp)
 1001cf8:	d8c00115 	stw	r3,4(sp)
 1001cfc:	20000f1e 	bne	r4,zero,1001d3c <__floatsidf+0x68>
 1001d00:	00800084 	movi	r2,2
 1001d04:	d8800015 	stw	r2,0(sp)
 1001d08:	d809883a 	mov	r4,sp
 1001d0c:	10023080 	call	1002308 <__pack_d>
 1001d10:	1009883a 	mov	r4,r2
 1001d14:	180b883a 	mov	r5,r3
 1001d18:	2005883a 	mov	r2,r4
 1001d1c:	2807883a 	mov	r3,r5
 1001d20:	dfc00917 	ldw	ra,36(sp)
 1001d24:	dcc00817 	ldw	r19,32(sp)
 1001d28:	dc800717 	ldw	r18,28(sp)
 1001d2c:	dc400617 	ldw	r17,24(sp)
 1001d30:	dc000517 	ldw	r16,20(sp)
 1001d34:	dec00a04 	addi	sp,sp,40
 1001d38:	f800283a 	ret
 1001d3c:	00800f04 	movi	r2,60
 1001d40:	1807003a 	cmpeq	r3,r3,zero
 1001d44:	d8800215 	stw	r2,8(sp)
 1001d48:	18001126 	beq	r3,zero,1001d90 <__floatsidf+0xbc>
 1001d4c:	0027883a 	mov	r19,zero
 1001d50:	2025883a 	mov	r18,r4
 1001d54:	d9000315 	stw	r4,12(sp)
 1001d58:	dcc00415 	stw	r19,16(sp)
 1001d5c:	10020600 	call	1002060 <__clzsi2>
 1001d60:	11000744 	addi	r4,r2,29
 1001d64:	013fe80e 	bge	zero,r4,1001d08 <__floatsidf+0x34>
 1001d68:	10bfff44 	addi	r2,r2,-3
 1001d6c:	10000c16 	blt	r2,zero,1001da0 <__floatsidf+0xcc>
 1001d70:	90a2983a 	sll	r17,r18,r2
 1001d74:	0021883a 	mov	r16,zero
 1001d78:	d8800217 	ldw	r2,8(sp)
 1001d7c:	dc400415 	stw	r17,16(sp)
 1001d80:	dc000315 	stw	r16,12(sp)
 1001d84:	1105c83a 	sub	r2,r2,r4
 1001d88:	d8800215 	stw	r2,8(sp)
 1001d8c:	003fde06 	br	1001d08 <__floatsidf+0x34>
 1001d90:	00a00034 	movhi	r2,32768
 1001d94:	20800a26 	beq	r4,r2,1001dc0 <__floatsidf+0xec>
 1001d98:	0109c83a 	sub	r4,zero,r4
 1001d9c:	003feb06 	br	1001d4c <__floatsidf+0x78>
 1001da0:	9006d07a 	srli	r3,r18,1
 1001da4:	008007c4 	movi	r2,31
 1001da8:	1105c83a 	sub	r2,r2,r4
 1001dac:	1886d83a 	srl	r3,r3,r2
 1001db0:	9922983a 	sll	r17,r19,r4
 1001db4:	9120983a 	sll	r16,r18,r4
 1001db8:	1c62b03a 	or	r17,r3,r17
 1001dbc:	003fee06 	br	1001d78 <__floatsidf+0xa4>
 1001dc0:	0009883a 	mov	r4,zero
 1001dc4:	01707834 	movhi	r5,49632
 1001dc8:	003fd306 	br	1001d18 <__floatsidf+0x44>

01001dcc <__fixdfsi>:
 1001dcc:	defff804 	addi	sp,sp,-32
 1001dd0:	2005883a 	mov	r2,r4
 1001dd4:	2807883a 	mov	r3,r5
 1001dd8:	d809883a 	mov	r4,sp
 1001ddc:	d9400204 	addi	r5,sp,8
 1001de0:	d8c00115 	stw	r3,4(sp)
 1001de4:	d8800015 	stw	r2,0(sp)
 1001de8:	dfc00715 	stw	ra,28(sp)
 1001dec:	100261c0 	call	100261c <__unpack_d>
 1001df0:	d8c00217 	ldw	r3,8(sp)
 1001df4:	00800084 	movi	r2,2
 1001df8:	1880051e 	bne	r3,r2,1001e10 <__fixdfsi+0x44>
 1001dfc:	0007883a 	mov	r3,zero
 1001e00:	1805883a 	mov	r2,r3
 1001e04:	dfc00717 	ldw	ra,28(sp)
 1001e08:	dec00804 	addi	sp,sp,32
 1001e0c:	f800283a 	ret
 1001e10:	00800044 	movi	r2,1
 1001e14:	10fff92e 	bgeu	r2,r3,1001dfc <__fixdfsi+0x30>
 1001e18:	00800104 	movi	r2,4
 1001e1c:	18800426 	beq	r3,r2,1001e30 <__fixdfsi+0x64>
 1001e20:	d8c00417 	ldw	r3,16(sp)
 1001e24:	183ff516 	blt	r3,zero,1001dfc <__fixdfsi+0x30>
 1001e28:	00800784 	movi	r2,30
 1001e2c:	10c0080e 	bge	r2,r3,1001e50 <__fixdfsi+0x84>
 1001e30:	d8800317 	ldw	r2,12(sp)
 1001e34:	1000121e 	bne	r2,zero,1001e80 <__fixdfsi+0xb4>
 1001e38:	00e00034 	movhi	r3,32768
 1001e3c:	18ffffc4 	addi	r3,r3,-1
 1001e40:	1805883a 	mov	r2,r3
 1001e44:	dfc00717 	ldw	ra,28(sp)
 1001e48:	dec00804 	addi	sp,sp,32
 1001e4c:	f800283a 	ret
 1001e50:	00800f04 	movi	r2,60
 1001e54:	10d1c83a 	sub	r8,r2,r3
 1001e58:	40bff804 	addi	r2,r8,-32
 1001e5c:	d9800517 	ldw	r6,20(sp)
 1001e60:	d9c00617 	ldw	r7,24(sp)
 1001e64:	10000816 	blt	r2,zero,1001e88 <__fixdfsi+0xbc>
 1001e68:	3888d83a 	srl	r4,r7,r2
 1001e6c:	d8800317 	ldw	r2,12(sp)
 1001e70:	2007883a 	mov	r3,r4
 1001e74:	103fe226 	beq	r2,zero,1001e00 <__fixdfsi+0x34>
 1001e78:	0107c83a 	sub	r3,zero,r4
 1001e7c:	003fe006 	br	1001e00 <__fixdfsi+0x34>
 1001e80:	00e00034 	movhi	r3,32768
 1001e84:	003fde06 	br	1001e00 <__fixdfsi+0x34>
 1001e88:	39c7883a 	add	r3,r7,r7
 1001e8c:	008007c4 	movi	r2,31
 1001e90:	1205c83a 	sub	r2,r2,r8
 1001e94:	1886983a 	sll	r3,r3,r2
 1001e98:	3208d83a 	srl	r4,r6,r8
 1001e9c:	1908b03a 	or	r4,r3,r4
 1001ea0:	003ff206 	br	1001e6c <__fixdfsi+0xa0>

01001ea4 <__make_dp>:
 1001ea4:	defff904 	addi	sp,sp,-28
 1001ea8:	d8c00717 	ldw	r3,28(sp)
 1001eac:	d9000015 	stw	r4,0(sp)
 1001eb0:	d809883a 	mov	r4,sp
 1001eb4:	dfc00515 	stw	ra,20(sp)
 1001eb8:	d9c00615 	stw	r7,24(sp)
 1001ebc:	d9400115 	stw	r5,4(sp)
 1001ec0:	d9800215 	stw	r6,8(sp)
 1001ec4:	d8c00415 	stw	r3,16(sp)
 1001ec8:	d9c00315 	stw	r7,12(sp)
 1001ecc:	10023080 	call	1002308 <__pack_d>
 1001ed0:	dfc00517 	ldw	ra,20(sp)
 1001ed4:	dec00704 	addi	sp,sp,28
 1001ed8:	f800283a 	ret

01001edc <udivmodsi4>:
 1001edc:	29001b2e 	bgeu	r5,r4,1001f4c <udivmodsi4+0x70>
 1001ee0:	28001a16 	blt	r5,zero,1001f4c <udivmodsi4+0x70>
 1001ee4:	00800044 	movi	r2,1
 1001ee8:	0007883a 	mov	r3,zero
 1001eec:	01c007c4 	movi	r7,31
 1001ef0:	00000306 	br	1001f00 <udivmodsi4+0x24>
 1001ef4:	19c01326 	beq	r3,r7,1001f44 <udivmodsi4+0x68>
 1001ef8:	18c00044 	addi	r3,r3,1
 1001efc:	28000416 	blt	r5,zero,1001f10 <udivmodsi4+0x34>
 1001f00:	294b883a 	add	r5,r5,r5
 1001f04:	1085883a 	add	r2,r2,r2
 1001f08:	293ffa36 	bltu	r5,r4,1001ef4 <udivmodsi4+0x18>
 1001f0c:	10000d26 	beq	r2,zero,1001f44 <udivmodsi4+0x68>
 1001f10:	0007883a 	mov	r3,zero
 1001f14:	21400236 	bltu	r4,r5,1001f20 <udivmodsi4+0x44>
 1001f18:	2149c83a 	sub	r4,r4,r5
 1001f1c:	1886b03a 	or	r3,r3,r2
 1001f20:	1004d07a 	srli	r2,r2,1
 1001f24:	280ad07a 	srli	r5,r5,1
 1001f28:	103ffa1e 	bne	r2,zero,1001f14 <udivmodsi4+0x38>
 1001f2c:	30000226 	beq	r6,zero,1001f38 <udivmodsi4+0x5c>
 1001f30:	2005883a 	mov	r2,r4
 1001f34:	f800283a 	ret
 1001f38:	1809883a 	mov	r4,r3
 1001f3c:	2005883a 	mov	r2,r4
 1001f40:	f800283a 	ret
 1001f44:	0007883a 	mov	r3,zero
 1001f48:	003ff806 	br	1001f2c <udivmodsi4+0x50>
 1001f4c:	00800044 	movi	r2,1
 1001f50:	0007883a 	mov	r3,zero
 1001f54:	003fef06 	br	1001f14 <udivmodsi4+0x38>

01001f58 <__divsi3>:
 1001f58:	defffe04 	addi	sp,sp,-8
 1001f5c:	dc000015 	stw	r16,0(sp)
 1001f60:	dfc00115 	stw	ra,4(sp)
 1001f64:	0021883a 	mov	r16,zero
 1001f68:	20000c16 	blt	r4,zero,1001f9c <__divsi3+0x44>
 1001f6c:	000d883a 	mov	r6,zero
 1001f70:	28000e16 	blt	r5,zero,1001fac <__divsi3+0x54>
 1001f74:	1001edc0 	call	1001edc <udivmodsi4>
 1001f78:	1007883a 	mov	r3,r2
 1001f7c:	8005003a 	cmpeq	r2,r16,zero
 1001f80:	1000011e 	bne	r2,zero,1001f88 <__divsi3+0x30>
 1001f84:	00c7c83a 	sub	r3,zero,r3
 1001f88:	1805883a 	mov	r2,r3
 1001f8c:	dfc00117 	ldw	ra,4(sp)
 1001f90:	dc000017 	ldw	r16,0(sp)
 1001f94:	dec00204 	addi	sp,sp,8
 1001f98:	f800283a 	ret
 1001f9c:	0109c83a 	sub	r4,zero,r4
 1001fa0:	04000044 	movi	r16,1
 1001fa4:	000d883a 	mov	r6,zero
 1001fa8:	283ff20e 	bge	r5,zero,1001f74 <__divsi3+0x1c>
 1001fac:	014bc83a 	sub	r5,zero,r5
 1001fb0:	8021003a 	cmpeq	r16,r16,zero
 1001fb4:	003fef06 	br	1001f74 <__divsi3+0x1c>

01001fb8 <__modsi3>:
 1001fb8:	deffff04 	addi	sp,sp,-4
 1001fbc:	dfc00015 	stw	ra,0(sp)
 1001fc0:	01800044 	movi	r6,1
 1001fc4:	2807883a 	mov	r3,r5
 1001fc8:	20000416 	blt	r4,zero,1001fdc <__modsi3+0x24>
 1001fcc:	28000c16 	blt	r5,zero,1002000 <__modsi3+0x48>
 1001fd0:	dfc00017 	ldw	ra,0(sp)
 1001fd4:	dec00104 	addi	sp,sp,4
 1001fd8:	1001edc1 	jmpi	1001edc <udivmodsi4>
 1001fdc:	0109c83a 	sub	r4,zero,r4
 1001fe0:	28000b16 	blt	r5,zero,1002010 <__modsi3+0x58>
 1001fe4:	180b883a 	mov	r5,r3
 1001fe8:	01800044 	movi	r6,1
 1001fec:	1001edc0 	call	1001edc <udivmodsi4>
 1001ff0:	0085c83a 	sub	r2,zero,r2
 1001ff4:	dfc00017 	ldw	ra,0(sp)
 1001ff8:	dec00104 	addi	sp,sp,4
 1001ffc:	f800283a 	ret
 1002000:	014bc83a 	sub	r5,zero,r5
 1002004:	dfc00017 	ldw	ra,0(sp)
 1002008:	dec00104 	addi	sp,sp,4
 100200c:	1001edc1 	jmpi	1001edc <udivmodsi4>
 1002010:	0147c83a 	sub	r3,zero,r5
 1002014:	003ff306 	br	1001fe4 <__modsi3+0x2c>

01002018 <__udivsi3>:
 1002018:	000d883a 	mov	r6,zero
 100201c:	1001edc1 	jmpi	1001edc <udivmodsi4>

01002020 <__umodsi3>:
 1002020:	01800044 	movi	r6,1
 1002024:	1001edc1 	jmpi	1001edc <udivmodsi4>

01002028 <__mulsi3>:
 1002028:	20000a26 	beq	r4,zero,1002054 <__mulsi3+0x2c>
 100202c:	0007883a 	mov	r3,zero
 1002030:	2080004c 	andi	r2,r4,1
 1002034:	1005003a 	cmpeq	r2,r2,zero
 1002038:	2008d07a 	srli	r4,r4,1
 100203c:	1000011e 	bne	r2,zero,1002044 <__mulsi3+0x1c>
 1002040:	1947883a 	add	r3,r3,r5
 1002044:	294b883a 	add	r5,r5,r5
 1002048:	203ff91e 	bne	r4,zero,1002030 <__mulsi3+0x8>
 100204c:	1805883a 	mov	r2,r3
 1002050:	f800283a 	ret
 1002054:	0007883a 	mov	r3,zero
 1002058:	1805883a 	mov	r2,r3
 100205c:	f800283a 	ret

01002060 <__clzsi2>:
 1002060:	00bfffd4 	movui	r2,65535
 1002064:	11000e36 	bltu	r2,r4,10020a0 <__clzsi2+0x40>
 1002068:	00803fc4 	movi	r2,255
 100206c:	01400204 	movi	r5,8
 1002070:	0007883a 	mov	r3,zero
 1002074:	11001036 	bltu	r2,r4,10020b8 <__clzsi2+0x58>
 1002078:	000b883a 	mov	r5,zero
 100207c:	20c6d83a 	srl	r3,r4,r3
 1002080:	008040b4 	movhi	r2,258
 1002084:	10a4be04 	addi	r2,r2,-27912
 1002088:	1887883a 	add	r3,r3,r2
 100208c:	18800003 	ldbu	r2,0(r3)
 1002090:	00c00804 	movi	r3,32
 1002094:	2885883a 	add	r2,r5,r2
 1002098:	1885c83a 	sub	r2,r3,r2
 100209c:	f800283a 	ret
 10020a0:	01400404 	movi	r5,16
 10020a4:	00804034 	movhi	r2,256
 10020a8:	10bfffc4 	addi	r2,r2,-1
 10020ac:	2807883a 	mov	r3,r5
 10020b0:	113ff22e 	bgeu	r2,r4,100207c <__clzsi2+0x1c>
 10020b4:	01400604 	movi	r5,24
 10020b8:	2807883a 	mov	r3,r5
 10020bc:	20c6d83a 	srl	r3,r4,r3
 10020c0:	008040b4 	movhi	r2,258
 10020c4:	10a4be04 	addi	r2,r2,-27912
 10020c8:	1887883a 	add	r3,r3,r2
 10020cc:	18800003 	ldbu	r2,0(r3)
 10020d0:	00c00804 	movi	r3,32
 10020d4:	2885883a 	add	r2,r5,r2
 10020d8:	1885c83a 	sub	r2,r3,r2
 10020dc:	f800283a 	ret

010020e0 <__pack_f>:
 10020e0:	20c00017 	ldw	r3,0(r4)
 10020e4:	01c00044 	movi	r7,1
 10020e8:	21800317 	ldw	r6,12(r4)
 10020ec:	21400117 	ldw	r5,4(r4)
 10020f0:	38c02d2e 	bgeu	r7,r3,10021a8 <__pack_f+0xc8>
 10020f4:	00800104 	movi	r2,4
 10020f8:	18802826 	beq	r3,r2,100219c <__pack_f+0xbc>
 10020fc:	00800084 	movi	r2,2
 1002100:	18800126 	beq	r3,r2,1002108 <__pack_f+0x28>
 1002104:	3000101e 	bne	r6,zero,1002148 <__pack_f+0x68>
 1002108:	000d883a 	mov	r6,zero
 100210c:	0007883a 	mov	r3,zero
 1002110:	19003fcc 	andi	r4,r3,255
 1002114:	200895fa 	slli	r4,r4,23
 1002118:	00c02034 	movhi	r3,128
 100211c:	18ffffc4 	addi	r3,r3,-1
 1002120:	30c6703a 	and	r3,r6,r3
 1002124:	10a0002c 	andhi	r2,r2,32768
 1002128:	10c4b03a 	or	r2,r2,r3
 100212c:	280a97fa 	slli	r5,r5,31
 1002130:	1104b03a 	or	r2,r2,r4
 1002134:	00e00034 	movhi	r3,32768
 1002138:	18ffffc4 	addi	r3,r3,-1
 100213c:	10c4703a 	and	r2,r2,r3
 1002140:	1144b03a 	or	r2,r2,r5
 1002144:	f800283a 	ret
 1002148:	21000217 	ldw	r4,8(r4)
 100214c:	00bfe084 	movi	r2,-126
 1002150:	20801b16 	blt	r4,r2,10021c0 <__pack_f+0xe0>
 1002154:	00801fc4 	movi	r2,127
 1002158:	11001016 	blt	r2,r4,100219c <__pack_f+0xbc>
 100215c:	308e703a 	and	r7,r6,r2
 1002160:	2087883a 	add	r3,r4,r2
 1002164:	00801004 	movi	r2,64
 1002168:	38800526 	beq	r7,r2,1002180 <__pack_f+0xa0>
 100216c:	31800fc4 	addi	r6,r6,63
 1002170:	30000716 	blt	r6,zero,1002190 <__pack_f+0xb0>
 1002174:	300490ba 	slli	r2,r6,2
 1002178:	100cd27a 	srli	r6,r2,9
 100217c:	003fe406 	br	1002110 <__pack_f+0x30>
 1002180:	3080200c 	andi	r2,r6,128
 1002184:	103ffa26 	beq	r2,zero,1002170 <__pack_f+0x90>
 1002188:	31cd883a 	add	r6,r6,r7
 100218c:	003ff806 	br	1002170 <__pack_f+0x90>
 1002190:	300cd07a 	srli	r6,r6,1
 1002194:	18c00044 	addi	r3,r3,1
 1002198:	003ff606 	br	1002174 <__pack_f+0x94>
 100219c:	000d883a 	mov	r6,zero
 10021a0:	00ffffc4 	movi	r3,-1
 10021a4:	003fda06 	br	1002110 <__pack_f+0x30>
 10021a8:	31800434 	orhi	r6,r6,16
 10021ac:	00802034 	movhi	r2,128
 10021b0:	10bfffc4 	addi	r2,r2,-1
 10021b4:	308c703a 	and	r6,r6,r2
 10021b8:	00ffffc4 	movi	r3,-1
 10021bc:	003fd406 	br	1002110 <__pack_f+0x30>
 10021c0:	1109c83a 	sub	r4,r2,r4
 10021c4:	00800644 	movi	r2,25
 10021c8:	11001216 	blt	r2,r4,1002214 <__pack_f+0x134>
 10021cc:	3904983a 	sll	r2,r7,r4
 10021d0:	3106d83a 	srl	r3,r6,r4
 10021d4:	10bfffc4 	addi	r2,r2,-1
 10021d8:	3084703a 	and	r2,r6,r2
 10021dc:	1004c03a 	cmpne	r2,r2,zero
 10021e0:	1886b03a 	or	r3,r3,r2
 10021e4:	19001fcc 	andi	r4,r3,127
 10021e8:	00801004 	movi	r2,64
 10021ec:	20800c26 	beq	r4,r2,1002220 <__pack_f+0x140>
 10021f0:	18c00fc4 	addi	r3,r3,63
 10021f4:	00900034 	movhi	r2,16384
 10021f8:	10bfffc4 	addi	r2,r2,-1
 10021fc:	180cd1fa 	srli	r6,r3,7
 1002200:	10c7803a 	cmpltu	r3,r2,r3
 1002204:	00802034 	movhi	r2,128
 1002208:	10bfffc4 	addi	r2,r2,-1
 100220c:	308c703a 	and	r6,r6,r2
 1002210:	003fbf06 	br	1002110 <__pack_f+0x30>
 1002214:	0007883a 	mov	r3,zero
 1002218:	000d883a 	mov	r6,zero
 100221c:	003ff906 	br	1002204 <__pack_f+0x124>
 1002220:	1880200c 	andi	r2,r3,128
 1002224:	10000126 	beq	r2,zero,100222c <__pack_f+0x14c>
 1002228:	1907883a 	add	r3,r3,r4
 100222c:	180cd1fa 	srli	r6,r3,7
 1002230:	00900034 	movhi	r2,16384
 1002234:	10bfffc4 	addi	r2,r2,-1
 1002238:	10c7803a 	cmpltu	r3,r2,r3
 100223c:	003ff106 	br	1002204 <__pack_f+0x124>

01002240 <__unpack_f>:
 1002240:	21800017 	ldw	r6,0(r4)
 1002244:	00c02034 	movhi	r3,128
 1002248:	18ffffc4 	addi	r3,r3,-1
 100224c:	3004d5fa 	srli	r2,r6,23
 1002250:	3008d7fa 	srli	r4,r6,31
 1002254:	30ce703a 	and	r7,r6,r3
 1002258:	10c03fcc 	andi	r3,r2,255
 100225c:	29000115 	stw	r4,4(r5)
 1002260:	1800131e 	bne	r3,zero,10022b0 <__unpack_f+0x70>
 1002264:	38000f26 	beq	r7,zero,10022a4 <__unpack_f+0x64>
 1002268:	380691fa 	slli	r3,r7,7
 100226c:	01bfe084 	movi	r6,-126
 1002270:	008000c4 	movi	r2,3
 1002274:	01100034 	movhi	r4,16384
 1002278:	213fffc4 	addi	r4,r4,-1
 100227c:	28800015 	stw	r2,0(r5)
 1002280:	29800215 	stw	r6,8(r5)
 1002284:	20c00536 	bltu	r4,r3,100229c <__unpack_f+0x5c>
 1002288:	3005883a 	mov	r2,r6
 100228c:	18c7883a 	add	r3,r3,r3
 1002290:	10bfffc4 	addi	r2,r2,-1
 1002294:	20fffd2e 	bgeu	r4,r3,100228c <__unpack_f+0x4c>
 1002298:	28800215 	stw	r2,8(r5)
 100229c:	28c00315 	stw	r3,12(r5)
 10022a0:	f800283a 	ret
 10022a4:	00800084 	movi	r2,2
 10022a8:	28800015 	stw	r2,0(r5)
 10022ac:	f800283a 	ret
 10022b0:	00803fc4 	movi	r2,255
 10022b4:	18800826 	beq	r3,r2,10022d8 <__unpack_f+0x98>
 10022b8:	380491fa 	slli	r2,r7,7
 10022bc:	18ffe044 	addi	r3,r3,-127
 10022c0:	28c00215 	stw	r3,8(r5)
 10022c4:	10900034 	orhi	r2,r2,16384
 10022c8:	28800315 	stw	r2,12(r5)
 10022cc:	008000c4 	movi	r2,3
 10022d0:	28800015 	stw	r2,0(r5)
 10022d4:	f800283a 	ret
 10022d8:	3800031e 	bne	r7,zero,10022e8 <__unpack_f+0xa8>
 10022dc:	00800104 	movi	r2,4
 10022e0:	28800015 	stw	r2,0(r5)
 10022e4:	f800283a 	ret
 10022e8:	3080042c 	andhi	r2,r6,16
 10022ec:	10000426 	beq	r2,zero,1002300 <__unpack_f+0xc0>
 10022f0:	00800044 	movi	r2,1
 10022f4:	28800015 	stw	r2,0(r5)
 10022f8:	29c00315 	stw	r7,12(r5)
 10022fc:	f800283a 	ret
 1002300:	28000015 	stw	zero,0(r5)
 1002304:	003ffc06 	br	10022f8 <__unpack_f+0xb8>

01002308 <__pack_d>:
 1002308:	20c00017 	ldw	r3,0(r4)
 100230c:	defffd04 	addi	sp,sp,-12
 1002310:	dc000015 	stw	r16,0(sp)
 1002314:	dc800215 	stw	r18,8(sp)
 1002318:	dc400115 	stw	r17,4(sp)
 100231c:	00800044 	movi	r2,1
 1002320:	22000317 	ldw	r8,12(r4)
 1002324:	001f883a 	mov	r15,zero
 1002328:	22400417 	ldw	r9,16(r4)
 100232c:	24000117 	ldw	r16,4(r4)
 1002330:	10c0552e 	bgeu	r2,r3,1002488 <__pack_d+0x180>
 1002334:	00800104 	movi	r2,4
 1002338:	18804f26 	beq	r3,r2,1002478 <__pack_d+0x170>
 100233c:	00800084 	movi	r2,2
 1002340:	18800226 	beq	r3,r2,100234c <__pack_d+0x44>
 1002344:	4244b03a 	or	r2,r8,r9
 1002348:	10001a1e 	bne	r2,zero,10023b4 <__pack_d+0xac>
 100234c:	000d883a 	mov	r6,zero
 1002350:	000f883a 	mov	r7,zero
 1002354:	0011883a 	mov	r8,zero
 1002358:	00800434 	movhi	r2,16
 100235c:	10bfffc4 	addi	r2,r2,-1
 1002360:	301d883a 	mov	r14,r6
 1002364:	3884703a 	and	r2,r7,r2
 1002368:	400a953a 	slli	r5,r8,20
 100236c:	79bffc2c 	andhi	r6,r15,65520
 1002370:	308cb03a 	or	r6,r6,r2
 1002374:	00e00434 	movhi	r3,32784
 1002378:	18ffffc4 	addi	r3,r3,-1
 100237c:	800497fa 	slli	r2,r16,31
 1002380:	30c6703a 	and	r3,r6,r3
 1002384:	1946b03a 	or	r3,r3,r5
 1002388:	01600034 	movhi	r5,32768
 100238c:	297fffc4 	addi	r5,r5,-1
 1002390:	194a703a 	and	r5,r3,r5
 1002394:	288ab03a 	or	r5,r5,r2
 1002398:	2807883a 	mov	r3,r5
 100239c:	7005883a 	mov	r2,r14
 10023a0:	dc800217 	ldw	r18,8(sp)
 10023a4:	dc400117 	ldw	r17,4(sp)
 10023a8:	dc000017 	ldw	r16,0(sp)
 10023ac:	dec00304 	addi	sp,sp,12
 10023b0:	f800283a 	ret
 10023b4:	21000217 	ldw	r4,8(r4)
 10023b8:	00bf0084 	movi	r2,-1022
 10023bc:	20803f16 	blt	r4,r2,10024bc <__pack_d+0x1b4>
 10023c0:	0080ffc4 	movi	r2,1023
 10023c4:	11002c16 	blt	r2,r4,1002478 <__pack_d+0x170>
 10023c8:	00803fc4 	movi	r2,255
 10023cc:	408c703a 	and	r6,r8,r2
 10023d0:	00802004 	movi	r2,128
 10023d4:	0007883a 	mov	r3,zero
 10023d8:	000f883a 	mov	r7,zero
 10023dc:	2280ffc4 	addi	r10,r4,1023
 10023e0:	30801e26 	beq	r6,r2,100245c <__pack_d+0x154>
 10023e4:	00801fc4 	movi	r2,127
 10023e8:	4089883a 	add	r4,r8,r2
 10023ec:	220d803a 	cmpltu	r6,r4,r8
 10023f0:	324d883a 	add	r6,r6,r9
 10023f4:	2011883a 	mov	r8,r4
 10023f8:	3013883a 	mov	r9,r6
 10023fc:	00880034 	movhi	r2,8192
 1002400:	10bfffc4 	addi	r2,r2,-1
 1002404:	12400d36 	bltu	r2,r9,100243c <__pack_d+0x134>
 1002408:	4804963a 	slli	r2,r9,24
 100240c:	400cd23a 	srli	r6,r8,8
 1002410:	480ed23a 	srli	r7,r9,8
 1002414:	013fffc4 	movi	r4,-1
 1002418:	118cb03a 	or	r6,r2,r6
 100241c:	01400434 	movhi	r5,16
 1002420:	297fffc4 	addi	r5,r5,-1
 1002424:	3104703a 	and	r2,r6,r4
 1002428:	3946703a 	and	r3,r7,r5
 100242c:	5201ffcc 	andi	r8,r10,2047
 1002430:	100d883a 	mov	r6,r2
 1002434:	180f883a 	mov	r7,r3
 1002438:	003fc706 	br	1002358 <__pack_d+0x50>
 100243c:	480897fa 	slli	r4,r9,31
 1002440:	4004d07a 	srli	r2,r8,1
 1002444:	4806d07a 	srli	r3,r9,1
 1002448:	52800044 	addi	r10,r10,1
 100244c:	2084b03a 	or	r2,r4,r2
 1002450:	1011883a 	mov	r8,r2
 1002454:	1813883a 	mov	r9,r3
 1002458:	003feb06 	br	1002408 <__pack_d+0x100>
 100245c:	383fe11e 	bne	r7,zero,10023e4 <__pack_d+0xdc>
 1002460:	01004004 	movi	r4,256
 1002464:	4104703a 	and	r2,r8,r4
 1002468:	10c4b03a 	or	r2,r2,r3
 100246c:	103fe326 	beq	r2,zero,10023fc <__pack_d+0xf4>
 1002470:	3005883a 	mov	r2,r6
 1002474:	003fdc06 	br	10023e8 <__pack_d+0xe0>
 1002478:	000d883a 	mov	r6,zero
 100247c:	000f883a 	mov	r7,zero
 1002480:	0201ffc4 	movi	r8,2047
 1002484:	003fb406 	br	1002358 <__pack_d+0x50>
 1002488:	0005883a 	mov	r2,zero
 100248c:	00c00234 	movhi	r3,8
 1002490:	408cb03a 	or	r6,r8,r2
 1002494:	48ceb03a 	or	r7,r9,r3
 1002498:	013fffc4 	movi	r4,-1
 100249c:	01400434 	movhi	r5,16
 10024a0:	297fffc4 	addi	r5,r5,-1
 10024a4:	3104703a 	and	r2,r6,r4
 10024a8:	3946703a 	and	r3,r7,r5
 10024ac:	100d883a 	mov	r6,r2
 10024b0:	180f883a 	mov	r7,r3
 10024b4:	0201ffc4 	movi	r8,2047
 10024b8:	003fa706 	br	1002358 <__pack_d+0x50>
 10024bc:	1109c83a 	sub	r4,r2,r4
 10024c0:	00800e04 	movi	r2,56
 10024c4:	11004316 	blt	r2,r4,10025d4 <__pack_d+0x2cc>
 10024c8:	21fff804 	addi	r7,r4,-32
 10024cc:	38004516 	blt	r7,zero,10025e4 <__pack_d+0x2dc>
 10024d0:	49d8d83a 	srl	r12,r9,r7
 10024d4:	001b883a 	mov	r13,zero
 10024d8:	0023883a 	mov	r17,zero
 10024dc:	01400044 	movi	r5,1
 10024e0:	0025883a 	mov	r18,zero
 10024e4:	38004716 	blt	r7,zero,1002604 <__pack_d+0x2fc>
 10024e8:	29d6983a 	sll	r11,r5,r7
 10024ec:	0015883a 	mov	r10,zero
 10024f0:	00bfffc4 	movi	r2,-1
 10024f4:	5089883a 	add	r4,r10,r2
 10024f8:	588b883a 	add	r5,r11,r2
 10024fc:	228d803a 	cmpltu	r6,r4,r10
 1002500:	314b883a 	add	r5,r6,r5
 1002504:	4104703a 	and	r2,r8,r4
 1002508:	4946703a 	and	r3,r9,r5
 100250c:	10c4b03a 	or	r2,r2,r3
 1002510:	10000226 	beq	r2,zero,100251c <__pack_d+0x214>
 1002514:	04400044 	movi	r17,1
 1002518:	0025883a 	mov	r18,zero
 100251c:	00803fc4 	movi	r2,255
 1002520:	644eb03a 	or	r7,r12,r17
 1002524:	3892703a 	and	r9,r7,r2
 1002528:	00802004 	movi	r2,128
 100252c:	6c90b03a 	or	r8,r13,r18
 1002530:	0015883a 	mov	r10,zero
 1002534:	48801626 	beq	r9,r2,1002590 <__pack_d+0x288>
 1002538:	01001fc4 	movi	r4,127
 100253c:	3905883a 	add	r2,r7,r4
 1002540:	11cd803a 	cmpltu	r6,r2,r7
 1002544:	320d883a 	add	r6,r6,r8
 1002548:	100f883a 	mov	r7,r2
 100254c:	00840034 	movhi	r2,4096
 1002550:	10bfffc4 	addi	r2,r2,-1
 1002554:	3011883a 	mov	r8,r6
 1002558:	0007883a 	mov	r3,zero
 100255c:	11801b36 	bltu	r2,r6,10025cc <__pack_d+0x2c4>
 1002560:	4004963a 	slli	r2,r8,24
 1002564:	3808d23a 	srli	r4,r7,8
 1002568:	400ad23a 	srli	r5,r8,8
 100256c:	1813883a 	mov	r9,r3
 1002570:	1108b03a 	or	r4,r2,r4
 1002574:	00bfffc4 	movi	r2,-1
 1002578:	00c00434 	movhi	r3,16
 100257c:	18ffffc4 	addi	r3,r3,-1
 1002580:	208c703a 	and	r6,r4,r2
 1002584:	28ce703a 	and	r7,r5,r3
 1002588:	4a01ffcc 	andi	r8,r9,2047
 100258c:	003f7206 	br	1002358 <__pack_d+0x50>
 1002590:	503fe91e 	bne	r10,zero,1002538 <__pack_d+0x230>
 1002594:	01004004 	movi	r4,256
 1002598:	3904703a 	and	r2,r7,r4
 100259c:	0007883a 	mov	r3,zero
 10025a0:	10c4b03a 	or	r2,r2,r3
 10025a4:	10000626 	beq	r2,zero,10025c0 <__pack_d+0x2b8>
 10025a8:	3a45883a 	add	r2,r7,r9
 10025ac:	11cd803a 	cmpltu	r6,r2,r7
 10025b0:	320d883a 	add	r6,r6,r8
 10025b4:	100f883a 	mov	r7,r2
 10025b8:	3011883a 	mov	r8,r6
 10025bc:	0007883a 	mov	r3,zero
 10025c0:	00840034 	movhi	r2,4096
 10025c4:	10bfffc4 	addi	r2,r2,-1
 10025c8:	123fe52e 	bgeu	r2,r8,1002560 <__pack_d+0x258>
 10025cc:	00c00044 	movi	r3,1
 10025d0:	003fe306 	br	1002560 <__pack_d+0x258>
 10025d4:	0009883a 	mov	r4,zero
 10025d8:	0013883a 	mov	r9,zero
 10025dc:	000b883a 	mov	r5,zero
 10025e0:	003fe406 	br	1002574 <__pack_d+0x26c>
 10025e4:	4a47883a 	add	r3,r9,r9
 10025e8:	008007c4 	movi	r2,31
 10025ec:	1105c83a 	sub	r2,r2,r4
 10025f0:	1886983a 	sll	r3,r3,r2
 10025f4:	4118d83a 	srl	r12,r8,r4
 10025f8:	491ad83a 	srl	r13,r9,r4
 10025fc:	1b18b03a 	or	r12,r3,r12
 1002600:	003fb506 	br	10024d8 <__pack_d+0x1d0>
 1002604:	2806d07a 	srli	r3,r5,1
 1002608:	008007c4 	movi	r2,31
 100260c:	1105c83a 	sub	r2,r2,r4
 1002610:	1896d83a 	srl	r11,r3,r2
 1002614:	2914983a 	sll	r10,r5,r4
 1002618:	003fb506 	br	10024f0 <__pack_d+0x1e8>

0100261c <__unpack_d>:
 100261c:	20c00117 	ldw	r3,4(r4)
 1002620:	22400017 	ldw	r9,0(r4)
 1002624:	00800434 	movhi	r2,16
 1002628:	10bfffc4 	addi	r2,r2,-1
 100262c:	1808d53a 	srli	r4,r3,20
 1002630:	180cd7fa 	srli	r6,r3,31
 1002634:	1894703a 	and	r10,r3,r2
 1002638:	2201ffcc 	andi	r8,r4,2047
 100263c:	281b883a 	mov	r13,r5
 1002640:	4817883a 	mov	r11,r9
 1002644:	29800115 	stw	r6,4(r5)
 1002648:	5019883a 	mov	r12,r10
 100264c:	40001e1e 	bne	r8,zero,10026c8 <__unpack_d+0xac>
 1002650:	4a84b03a 	or	r2,r9,r10
 1002654:	10001926 	beq	r2,zero,10026bc <__unpack_d+0xa0>
 1002658:	4804d63a 	srli	r2,r9,24
 100265c:	500c923a 	slli	r6,r10,8
 1002660:	013f0084 	movi	r4,-1022
 1002664:	00c40034 	movhi	r3,4096
 1002668:	18ffffc4 	addi	r3,r3,-1
 100266c:	118cb03a 	or	r6,r2,r6
 1002670:	008000c4 	movi	r2,3
 1002674:	480a923a 	slli	r5,r9,8
 1002678:	68800015 	stw	r2,0(r13)
 100267c:	69000215 	stw	r4,8(r13)
 1002680:	19800b36 	bltu	r3,r6,10026b0 <__unpack_d+0x94>
 1002684:	200f883a 	mov	r7,r4
 1002688:	1811883a 	mov	r8,r3
 100268c:	2945883a 	add	r2,r5,r5
 1002690:	1149803a 	cmpltu	r4,r2,r5
 1002694:	3187883a 	add	r3,r6,r6
 1002698:	20c9883a 	add	r4,r4,r3
 100269c:	100b883a 	mov	r5,r2
 10026a0:	200d883a 	mov	r6,r4
 10026a4:	39ffffc4 	addi	r7,r7,-1
 10026a8:	413ff82e 	bgeu	r8,r4,100268c <__unpack_d+0x70>
 10026ac:	69c00215 	stw	r7,8(r13)
 10026b0:	69800415 	stw	r6,16(r13)
 10026b4:	69400315 	stw	r5,12(r13)
 10026b8:	f800283a 	ret
 10026bc:	00800084 	movi	r2,2
 10026c0:	28800015 	stw	r2,0(r5)
 10026c4:	f800283a 	ret
 10026c8:	0081ffc4 	movi	r2,2047
 10026cc:	40800f26 	beq	r8,r2,100270c <__unpack_d+0xf0>
 10026d0:	480cd63a 	srli	r6,r9,24
 10026d4:	5006923a 	slli	r3,r10,8
 10026d8:	4804923a 	slli	r2,r9,8
 10026dc:	0009883a 	mov	r4,zero
 10026e0:	30c6b03a 	or	r3,r6,r3
 10026e4:	01440034 	movhi	r5,4096
 10026e8:	110cb03a 	or	r6,r2,r4
 10026ec:	423f0044 	addi	r8,r8,-1023
 10026f0:	194eb03a 	or	r7,r3,r5
 10026f4:	008000c4 	movi	r2,3
 10026f8:	69c00415 	stw	r7,16(r13)
 10026fc:	6a000215 	stw	r8,8(r13)
 1002700:	68800015 	stw	r2,0(r13)
 1002704:	69800315 	stw	r6,12(r13)
 1002708:	f800283a 	ret
 100270c:	4a84b03a 	or	r2,r9,r10
 1002710:	1000031e 	bne	r2,zero,1002720 <__unpack_d+0x104>
 1002714:	00800104 	movi	r2,4
 1002718:	28800015 	stw	r2,0(r5)
 100271c:	f800283a 	ret
 1002720:	0009883a 	mov	r4,zero
 1002724:	01400234 	movhi	r5,8
 1002728:	4904703a 	and	r2,r9,r4
 100272c:	5146703a 	and	r3,r10,r5
 1002730:	10c4b03a 	or	r2,r2,r3
 1002734:	10000526 	beq	r2,zero,100274c <__unpack_d+0x130>
 1002738:	00800044 	movi	r2,1
 100273c:	68800015 	stw	r2,0(r13)
 1002740:	6b000415 	stw	r12,16(r13)
 1002744:	6ac00315 	stw	r11,12(r13)
 1002748:	f800283a 	ret
 100274c:	68000015 	stw	zero,0(r13)
 1002750:	003ffb06 	br	1002740 <__unpack_d+0x124>

01002754 <printf>:
 1002754:	defffb04 	addi	sp,sp,-20
 1002758:	dfc00115 	stw	ra,4(sp)
 100275c:	d9400215 	stw	r5,8(sp)
 1002760:	d9800315 	stw	r6,12(sp)
 1002764:	d9c00415 	stw	r7,16(sp)
 1002768:	008040b4 	movhi	r2,258
 100276c:	10ac8a04 	addi	r2,r2,-19928
 1002770:	10c00017 	ldw	r3,0(r2)
 1002774:	200b883a 	mov	r5,r4
 1002778:	d8800204 	addi	r2,sp,8
 100277c:	19000217 	ldw	r4,8(r3)
 1002780:	100d883a 	mov	r6,r2
 1002784:	d8800015 	stw	r2,0(sp)
 1002788:	10048100 	call	1004810 <__vfprintf_internal>
 100278c:	dfc00117 	ldw	ra,4(sp)
 1002790:	dec00504 	addi	sp,sp,20
 1002794:	f800283a 	ret

01002798 <_printf_r>:
 1002798:	defffc04 	addi	sp,sp,-16
 100279c:	dfc00115 	stw	ra,4(sp)
 10027a0:	d9800215 	stw	r6,8(sp)
 10027a4:	d9c00315 	stw	r7,12(sp)
 10027a8:	280d883a 	mov	r6,r5
 10027ac:	21400217 	ldw	r5,8(r4)
 10027b0:	d8c00204 	addi	r3,sp,8
 10027b4:	180f883a 	mov	r7,r3
 10027b8:	d8c00015 	stw	r3,0(sp)
 10027bc:	100294c0 	call	100294c <___vfprintf_internal_r>
 10027c0:	dfc00117 	ldw	ra,4(sp)
 10027c4:	dec00404 	addi	sp,sp,16
 10027c8:	f800283a 	ret

010027cc <_puts_r>:
 10027cc:	defff604 	addi	sp,sp,-40
 10027d0:	dc400715 	stw	r17,28(sp)
 10027d4:	2023883a 	mov	r17,r4
 10027d8:	2809883a 	mov	r4,r5
 10027dc:	dfc00915 	stw	ra,36(sp)
 10027e0:	dcc00815 	stw	r19,32(sp)
 10027e4:	2827883a 	mov	r19,r5
 10027e8:	10028800 	call	1002880 <strlen>
 10027ec:	89400217 	ldw	r5,8(r17)
 10027f0:	00c040b4 	movhi	r3,258
 10027f4:	18e4fe04 	addi	r3,r3,-27656
 10027f8:	01c00044 	movi	r7,1
 10027fc:	12000044 	addi	r8,r2,1
 1002800:	d8c00515 	stw	r3,20(sp)
 1002804:	d9c00615 	stw	r7,24(sp)
 1002808:	d8c00304 	addi	r3,sp,12
 100280c:	01c00084 	movi	r7,2
 1002810:	8809883a 	mov	r4,r17
 1002814:	d80d883a 	mov	r6,sp
 1002818:	d8c00015 	stw	r3,0(sp)
 100281c:	dcc00315 	stw	r19,12(sp)
 1002820:	da000215 	stw	r8,8(sp)
 1002824:	d9c00115 	stw	r7,4(sp)
 1002828:	d8800415 	stw	r2,16(sp)
 100282c:	1006acc0 	call	1006acc <__sfvwrite_r>
 1002830:	00ffffc4 	movi	r3,-1
 1002834:	10000626 	beq	r2,zero,1002850 <_puts_r+0x84>
 1002838:	1805883a 	mov	r2,r3
 100283c:	dfc00917 	ldw	ra,36(sp)
 1002840:	dcc00817 	ldw	r19,32(sp)
 1002844:	dc400717 	ldw	r17,28(sp)
 1002848:	dec00a04 	addi	sp,sp,40
 100284c:	f800283a 	ret
 1002850:	00c00284 	movi	r3,10
 1002854:	1805883a 	mov	r2,r3
 1002858:	dfc00917 	ldw	ra,36(sp)
 100285c:	dcc00817 	ldw	r19,32(sp)
 1002860:	dc400717 	ldw	r17,28(sp)
 1002864:	dec00a04 	addi	sp,sp,40
 1002868:	f800283a 	ret

0100286c <puts>:
 100286c:	008040b4 	movhi	r2,258
 1002870:	10ac8a04 	addi	r2,r2,-19928
 1002874:	200b883a 	mov	r5,r4
 1002878:	11000017 	ldw	r4,0(r2)
 100287c:	10027cc1 	jmpi	10027cc <_puts_r>

01002880 <strlen>:
 1002880:	208000cc 	andi	r2,r4,3
 1002884:	2011883a 	mov	r8,r4
 1002888:	1000161e 	bne	r2,zero,10028e4 <strlen+0x64>
 100288c:	20c00017 	ldw	r3,0(r4)
 1002890:	017fbff4 	movhi	r5,65279
 1002894:	297fbfc4 	addi	r5,r5,-257
 1002898:	01e02074 	movhi	r7,32897
 100289c:	39e02004 	addi	r7,r7,-32640
 10028a0:	1945883a 	add	r2,r3,r5
 10028a4:	11c4703a 	and	r2,r2,r7
 10028a8:	00c6303a 	nor	r3,zero,r3
 10028ac:	1886703a 	and	r3,r3,r2
 10028b0:	18000c1e 	bne	r3,zero,10028e4 <strlen+0x64>
 10028b4:	280d883a 	mov	r6,r5
 10028b8:	380b883a 	mov	r5,r7
 10028bc:	21000104 	addi	r4,r4,4
 10028c0:	20800017 	ldw	r2,0(r4)
 10028c4:	1187883a 	add	r3,r2,r6
 10028c8:	1946703a 	and	r3,r3,r5
 10028cc:	0084303a 	nor	r2,zero,r2
 10028d0:	10c4703a 	and	r2,r2,r3
 10028d4:	103ff926 	beq	r2,zero,10028bc <strlen+0x3c>
 10028d8:	20800007 	ldb	r2,0(r4)
 10028dc:	10000326 	beq	r2,zero,10028ec <strlen+0x6c>
 10028e0:	21000044 	addi	r4,r4,1
 10028e4:	20800007 	ldb	r2,0(r4)
 10028e8:	103ffd1e 	bne	r2,zero,10028e0 <strlen+0x60>
 10028ec:	2205c83a 	sub	r2,r4,r8
 10028f0:	f800283a 	ret

010028f4 <__sprint_r>:
 10028f4:	30800217 	ldw	r2,8(r6)
 10028f8:	defffe04 	addi	sp,sp,-8
 10028fc:	dc000015 	stw	r16,0(sp)
 1002900:	dfc00115 	stw	ra,4(sp)
 1002904:	3021883a 	mov	r16,r6
 1002908:	0007883a 	mov	r3,zero
 100290c:	1000061e 	bne	r2,zero,1002928 <__sprint_r+0x34>
 1002910:	1805883a 	mov	r2,r3
 1002914:	30000115 	stw	zero,4(r6)
 1002918:	dfc00117 	ldw	ra,4(sp)
 100291c:	dc000017 	ldw	r16,0(sp)
 1002920:	dec00204 	addi	sp,sp,8
 1002924:	f800283a 	ret
 1002928:	1006acc0 	call	1006acc <__sfvwrite_r>
 100292c:	1007883a 	mov	r3,r2
 1002930:	1805883a 	mov	r2,r3
 1002934:	80000115 	stw	zero,4(r16)
 1002938:	80000215 	stw	zero,8(r16)
 100293c:	dfc00117 	ldw	ra,4(sp)
 1002940:	dc000017 	ldw	r16,0(sp)
 1002944:	dec00204 	addi	sp,sp,8
 1002948:	f800283a 	ret

0100294c <___vfprintf_internal_r>:
 100294c:	defea404 	addi	sp,sp,-1392
 1002950:	dd815815 	stw	r22,1376(sp)
 1002954:	dc015215 	stw	r16,1352(sp)
 1002958:	d9c15115 	stw	r7,1348(sp)
 100295c:	dfc15b15 	stw	ra,1388(sp)
 1002960:	df015a15 	stw	fp,1384(sp)
 1002964:	ddc15915 	stw	r23,1380(sp)
 1002968:	dd415715 	stw	r21,1372(sp)
 100296c:	dd015615 	stw	r20,1368(sp)
 1002970:	dcc15515 	stw	r19,1364(sp)
 1002974:	dc815415 	stw	r18,1360(sp)
 1002978:	dc415315 	stw	r17,1356(sp)
 100297c:	282d883a 	mov	r22,r5
 1002980:	3021883a 	mov	r16,r6
 1002984:	d9014f15 	stw	r4,1340(sp)
 1002988:	10070f00 	call	10070f0 <_localeconv_r>
 100298c:	10800017 	ldw	r2,0(r2)
 1002990:	d9c15117 	ldw	r7,1348(sp)
 1002994:	d8814915 	stw	r2,1316(sp)
 1002998:	d8814f17 	ldw	r2,1340(sp)
 100299c:	10000226 	beq	r2,zero,10029a8 <___vfprintf_internal_r+0x5c>
 10029a0:	10800e17 	ldw	r2,56(r2)
 10029a4:	10020d26 	beq	r2,zero,10031dc <___vfprintf_internal_r+0x890>
 10029a8:	b080030b 	ldhu	r2,12(r22)
 10029ac:	1080020c 	andi	r2,r2,8
 10029b0:	10020e26 	beq	r2,zero,10031ec <___vfprintf_internal_r+0x8a0>
 10029b4:	b0800417 	ldw	r2,16(r22)
 10029b8:	10020c26 	beq	r2,zero,10031ec <___vfprintf_internal_r+0x8a0>
 10029bc:	b200030b 	ldhu	r8,12(r22)
 10029c0:	00800284 	movi	r2,10
 10029c4:	40c0068c 	andi	r3,r8,26
 10029c8:	18802f1e 	bne	r3,r2,1002a88 <___vfprintf_internal_r+0x13c>
 10029cc:	b080038f 	ldh	r2,14(r22)
 10029d0:	10002d16 	blt	r2,zero,1002a88 <___vfprintf_internal_r+0x13c>
 10029d4:	b240038b 	ldhu	r9,14(r22)
 10029d8:	b2800717 	ldw	r10,28(r22)
 10029dc:	b2c00917 	ldw	r11,36(r22)
 10029e0:	d9014f17 	ldw	r4,1340(sp)
 10029e4:	dc402904 	addi	r17,sp,164
 10029e8:	d8804004 	addi	r2,sp,256
 10029ec:	00c10004 	movi	r3,1024
 10029f0:	423fff4c 	andi	r8,r8,65533
 10029f4:	800d883a 	mov	r6,r16
 10029f8:	880b883a 	mov	r5,r17
 10029fc:	da002c0d 	sth	r8,176(sp)
 1002a00:	da402c8d 	sth	r9,178(sp)
 1002a04:	da803015 	stw	r10,192(sp)
 1002a08:	dac03215 	stw	r11,200(sp)
 1002a0c:	d8802d15 	stw	r2,180(sp)
 1002a10:	d8c02e15 	stw	r3,184(sp)
 1002a14:	d8802915 	stw	r2,164(sp)
 1002a18:	d8c02b15 	stw	r3,172(sp)
 1002a1c:	d8002f15 	stw	zero,188(sp)
 1002a20:	100294c0 	call	100294c <___vfprintf_internal_r>
 1002a24:	d8814b15 	stw	r2,1324(sp)
 1002a28:	10000416 	blt	r2,zero,1002a3c <___vfprintf_internal_r+0xf0>
 1002a2c:	d9014f17 	ldw	r4,1340(sp)
 1002a30:	880b883a 	mov	r5,r17
 1002a34:	10061680 	call	1006168 <_fflush_r>
 1002a38:	1002321e 	bne	r2,zero,1003304 <___vfprintf_internal_r+0x9b8>
 1002a3c:	d8802c0b 	ldhu	r2,176(sp)
 1002a40:	1080100c 	andi	r2,r2,64
 1002a44:	10000326 	beq	r2,zero,1002a54 <___vfprintf_internal_r+0x108>
 1002a48:	b080030b 	ldhu	r2,12(r22)
 1002a4c:	10801014 	ori	r2,r2,64
 1002a50:	b080030d 	sth	r2,12(r22)
 1002a54:	d8814b17 	ldw	r2,1324(sp)
 1002a58:	dfc15b17 	ldw	ra,1388(sp)
 1002a5c:	df015a17 	ldw	fp,1384(sp)
 1002a60:	ddc15917 	ldw	r23,1380(sp)
 1002a64:	dd815817 	ldw	r22,1376(sp)
 1002a68:	dd415717 	ldw	r21,1372(sp)
 1002a6c:	dd015617 	ldw	r20,1368(sp)
 1002a70:	dcc15517 	ldw	r19,1364(sp)
 1002a74:	dc815417 	ldw	r18,1360(sp)
 1002a78:	dc415317 	ldw	r17,1356(sp)
 1002a7c:	dc015217 	ldw	r16,1352(sp)
 1002a80:	dec15c04 	addi	sp,sp,1392
 1002a84:	f800283a 	ret
 1002a88:	0005883a 	mov	r2,zero
 1002a8c:	0007883a 	mov	r3,zero
 1002a90:	dd401904 	addi	r21,sp,100
 1002a94:	d8814215 	stw	r2,1288(sp)
 1002a98:	802f883a 	mov	r23,r16
 1002a9c:	d8c14315 	stw	r3,1292(sp)
 1002aa0:	d8014b15 	stw	zero,1324(sp)
 1002aa4:	d8014815 	stw	zero,1312(sp)
 1002aa8:	d8014415 	stw	zero,1296(sp)
 1002aac:	d8014715 	stw	zero,1308(sp)
 1002ab0:	dd400c15 	stw	r21,48(sp)
 1002ab4:	d8000e15 	stw	zero,56(sp)
 1002ab8:	d8000d15 	stw	zero,52(sp)
 1002abc:	b8800007 	ldb	r2,0(r23)
 1002ac0:	10001926 	beq	r2,zero,1002b28 <___vfprintf_internal_r+0x1dc>
 1002ac4:	00c00944 	movi	r3,37
 1002ac8:	10c01726 	beq	r2,r3,1002b28 <___vfprintf_internal_r+0x1dc>
 1002acc:	b821883a 	mov	r16,r23
 1002ad0:	00000106 	br	1002ad8 <___vfprintf_internal_r+0x18c>
 1002ad4:	10c00326 	beq	r2,r3,1002ae4 <___vfprintf_internal_r+0x198>
 1002ad8:	84000044 	addi	r16,r16,1
 1002adc:	80800007 	ldb	r2,0(r16)
 1002ae0:	103ffc1e 	bne	r2,zero,1002ad4 <___vfprintf_internal_r+0x188>
 1002ae4:	85e7c83a 	sub	r19,r16,r23
 1002ae8:	98000e26 	beq	r19,zero,1002b24 <___vfprintf_internal_r+0x1d8>
 1002aec:	dc800e17 	ldw	r18,56(sp)
 1002af0:	dc400d17 	ldw	r17,52(sp)
 1002af4:	008001c4 	movi	r2,7
 1002af8:	94e5883a 	add	r18,r18,r19
 1002afc:	8c400044 	addi	r17,r17,1
 1002b00:	adc00015 	stw	r23,0(r21)
 1002b04:	dc800e15 	stw	r18,56(sp)
 1002b08:	acc00115 	stw	r19,4(r21)
 1002b0c:	dc400d15 	stw	r17,52(sp)
 1002b10:	14428b16 	blt	r2,r17,1003540 <___vfprintf_internal_r+0xbf4>
 1002b14:	ad400204 	addi	r21,r21,8
 1002b18:	d9014b17 	ldw	r4,1324(sp)
 1002b1c:	24c9883a 	add	r4,r4,r19
 1002b20:	d9014b15 	stw	r4,1324(sp)
 1002b24:	802f883a 	mov	r23,r16
 1002b28:	b8800007 	ldb	r2,0(r23)
 1002b2c:	10013c26 	beq	r2,zero,1003020 <___vfprintf_internal_r+0x6d4>
 1002b30:	bdc00044 	addi	r23,r23,1
 1002b34:	d8000405 	stb	zero,16(sp)
 1002b38:	b8c00007 	ldb	r3,0(r23)
 1002b3c:	04ffffc4 	movi	r19,-1
 1002b40:	d8014c15 	stw	zero,1328(sp)
 1002b44:	d8014a15 	stw	zero,1320(sp)
 1002b48:	d8c14d15 	stw	r3,1332(sp)
 1002b4c:	bdc00044 	addi	r23,r23,1
 1002b50:	d9414d17 	ldw	r5,1332(sp)
 1002b54:	00801604 	movi	r2,88
 1002b58:	28fff804 	addi	r3,r5,-32
 1002b5c:	10c06036 	bltu	r2,r3,1002ce0 <___vfprintf_internal_r+0x394>
 1002b60:	18c5883a 	add	r2,r3,r3
 1002b64:	1085883a 	add	r2,r2,r2
 1002b68:	00c04034 	movhi	r3,256
 1002b6c:	18cadf04 	addi	r3,r3,11132
 1002b70:	10c5883a 	add	r2,r2,r3
 1002b74:	11000017 	ldw	r4,0(r2)
 1002b78:	2000683a 	jmp	r4
 1002b7c:	01003af0 	cmpltui	r4,zero,235
 1002b80:	01002ce0 	cmpeqi	r4,zero,179
 1002b84:	01002ce0 	cmpeqi	r4,zero,179
 1002b88:	01003adc 	xori	r4,zero,235
 1002b8c:	01002ce0 	cmpeqi	r4,zero,179
 1002b90:	01002ce0 	cmpeqi	r4,zero,179
 1002b94:	01002ce0 	cmpeqi	r4,zero,179
 1002b98:	01002ce0 	cmpeqi	r4,zero,179
 1002b9c:	01002ce0 	cmpeqi	r4,zero,179
 1002ba0:	01002ce0 	cmpeqi	r4,zero,179
 1002ba4:	010038bc 	xorhi	r4,zero,226
 1002ba8:	01003acc 	andi	r4,zero,235
 1002bac:	01002ce0 	cmpeqi	r4,zero,179
 1002bb0:	010038d4 	movui	r4,227
 1002bb4:	01003b74 	movhi	r4,237
 1002bb8:	01002ce0 	cmpeqi	r4,zero,179
 1002bbc:	01003b60 	cmpeqi	r4,zero,237
 1002bc0:	01003b1c 	xori	r4,zero,236
 1002bc4:	01003b1c 	xori	r4,zero,236
 1002bc8:	01003b1c 	xori	r4,zero,236
 1002bcc:	01003b1c 	xori	r4,zero,236
 1002bd0:	01003b1c 	xori	r4,zero,236
 1002bd4:	01003b1c 	xori	r4,zero,236
 1002bd8:	01003b1c 	xori	r4,zero,236
 1002bdc:	01003b1c 	xori	r4,zero,236
 1002be0:	01003b1c 	xori	r4,zero,236
 1002be4:	01002ce0 	cmpeqi	r4,zero,179
 1002be8:	01002ce0 	cmpeqi	r4,zero,179
 1002bec:	01002ce0 	cmpeqi	r4,zero,179
 1002bf0:	01002ce0 	cmpeqi	r4,zero,179
 1002bf4:	01002ce0 	cmpeqi	r4,zero,179
 1002bf8:	01002ce0 	cmpeqi	r4,zero,179
 1002bfc:	01002ce0 	cmpeqi	r4,zero,179
 1002c00:	01002ce0 	cmpeqi	r4,zero,179
 1002c04:	01002ce0 	cmpeqi	r4,zero,179
 1002c08:	01002ce0 	cmpeqi	r4,zero,179
 1002c0c:	01003338 	rdprs	r4,zero,204
 1002c10:	010039a4 	muli	r4,zero,230
 1002c14:	01002ce0 	cmpeqi	r4,zero,179
 1002c18:	010039a4 	muli	r4,zero,230
 1002c1c:	01002ce0 	cmpeqi	r4,zero,179
 1002c20:	01002ce0 	cmpeqi	r4,zero,179
 1002c24:	01002ce0 	cmpeqi	r4,zero,179
 1002c28:	01002ce0 	cmpeqi	r4,zero,179
 1002c2c:	01003b08 	cmpgei	r4,zero,236
 1002c30:	01002ce0 	cmpeqi	r4,zero,179
 1002c34:	01002ce0 	cmpeqi	r4,zero,179
 1002c38:	010033ec 	andhi	r4,zero,207
 1002c3c:	01002ce0 	cmpeqi	r4,zero,179
 1002c40:	01002ce0 	cmpeqi	r4,zero,179
 1002c44:	01002ce0 	cmpeqi	r4,zero,179
 1002c48:	01002ce0 	cmpeqi	r4,zero,179
 1002c4c:	01002ce0 	cmpeqi	r4,zero,179
 1002c50:	01003438 	rdprs	r4,zero,208
 1002c54:	01002ce0 	cmpeqi	r4,zero,179
 1002c58:	01002ce0 	cmpeqi	r4,zero,179
 1002c5c:	01003a58 	cmpnei	r4,zero,233
 1002c60:	01002ce0 	cmpeqi	r4,zero,179
 1002c64:	01002ce0 	cmpeqi	r4,zero,179
 1002c68:	01002ce0 	cmpeqi	r4,zero,179
 1002c6c:	01002ce0 	cmpeqi	r4,zero,179
 1002c70:	01002ce0 	cmpeqi	r4,zero,179
 1002c74:	01002ce0 	cmpeqi	r4,zero,179
 1002c78:	01002ce0 	cmpeqi	r4,zero,179
 1002c7c:	01002ce0 	cmpeqi	r4,zero,179
 1002c80:	01002ce0 	cmpeqi	r4,zero,179
 1002c84:	01002ce0 	cmpeqi	r4,zero,179
 1002c88:	01003a2c 	andhi	r4,zero,232
 1002c8c:	01003344 	movi	r4,205
 1002c90:	010039a4 	muli	r4,zero,230
 1002c94:	010039a4 	muli	r4,zero,230
 1002c98:	010039a4 	muli	r4,zero,230
 1002c9c:	01003990 	cmplti	r4,zero,230
 1002ca0:	01003344 	movi	r4,205
 1002ca4:	01002ce0 	cmpeqi	r4,zero,179
 1002ca8:	01002ce0 	cmpeqi	r4,zero,179
 1002cac:	01003918 	cmpnei	r4,zero,228
 1002cb0:	01002ce0 	cmpeqi	r4,zero,179
 1002cb4:	010038e8 	cmpgeui	r4,zero,227
 1002cb8:	010033f8 	rdprs	r4,zero,207
 1002cbc:	01003948 	cmpgei	r4,zero,229
 1002cc0:	01003934 	movhi	r4,228
 1002cc4:	01002ce0 	cmpeqi	r4,zero,179
 1002cc8:	01003bdc 	xori	r4,zero,239
 1002ccc:	01002ce0 	cmpeqi	r4,zero,179
 1002cd0:	01003444 	movi	r4,209
 1002cd4:	01002ce0 	cmpeqi	r4,zero,179
 1002cd8:	01002ce0 	cmpeqi	r4,zero,179
 1002cdc:	01003abc 	xorhi	r4,zero,234
 1002ce0:	d9014d17 	ldw	r4,1332(sp)
 1002ce4:	2000ce26 	beq	r4,zero,1003020 <___vfprintf_internal_r+0x6d4>
 1002ce8:	01400044 	movi	r5,1
 1002cec:	d9800f04 	addi	r6,sp,60
 1002cf0:	d9c14015 	stw	r7,1280(sp)
 1002cf4:	d9414515 	stw	r5,1300(sp)
 1002cf8:	d9814115 	stw	r6,1284(sp)
 1002cfc:	280f883a 	mov	r7,r5
 1002d00:	d9000f05 	stb	r4,60(sp)
 1002d04:	d8000405 	stb	zero,16(sp)
 1002d08:	d8014615 	stw	zero,1304(sp)
 1002d0c:	d8c14c17 	ldw	r3,1328(sp)
 1002d10:	1880008c 	andi	r2,r3,2
 1002d14:	1005003a 	cmpeq	r2,r2,zero
 1002d18:	d8815015 	stw	r2,1344(sp)
 1002d1c:	1000031e 	bne	r2,zero,1002d2c <___vfprintf_internal_r+0x3e0>
 1002d20:	d9014517 	ldw	r4,1300(sp)
 1002d24:	21000084 	addi	r4,r4,2
 1002d28:	d9014515 	stw	r4,1300(sp)
 1002d2c:	d9414c17 	ldw	r5,1328(sp)
 1002d30:	2940210c 	andi	r5,r5,132
 1002d34:	d9414e15 	stw	r5,1336(sp)
 1002d38:	28002d1e 	bne	r5,zero,1002df0 <___vfprintf_internal_r+0x4a4>
 1002d3c:	d9814a17 	ldw	r6,1320(sp)
 1002d40:	d8814517 	ldw	r2,1300(sp)
 1002d44:	30a1c83a 	sub	r16,r6,r2
 1002d48:	0400290e 	bge	zero,r16,1002df0 <___vfprintf_internal_r+0x4a4>
 1002d4c:	00800404 	movi	r2,16
 1002d50:	14045e0e 	bge	r2,r16,1003ecc <___vfprintf_internal_r+0x1580>
 1002d54:	dc800e17 	ldw	r18,56(sp)
 1002d58:	dc400d17 	ldw	r17,52(sp)
 1002d5c:	1027883a 	mov	r19,r2
 1002d60:	070040b4 	movhi	fp,258
 1002d64:	e7251a84 	addi	fp,fp,-27542
 1002d68:	050001c4 	movi	r20,7
 1002d6c:	00000306 	br	1002d7c <___vfprintf_internal_r+0x430>
 1002d70:	843ffc04 	addi	r16,r16,-16
 1002d74:	ad400204 	addi	r21,r21,8
 1002d78:	9c00130e 	bge	r19,r16,1002dc8 <___vfprintf_internal_r+0x47c>
 1002d7c:	94800404 	addi	r18,r18,16
 1002d80:	8c400044 	addi	r17,r17,1
 1002d84:	af000015 	stw	fp,0(r21)
 1002d88:	acc00115 	stw	r19,4(r21)
 1002d8c:	dc800e15 	stw	r18,56(sp)
 1002d90:	dc400d15 	stw	r17,52(sp)
 1002d94:	a47ff60e 	bge	r20,r17,1002d70 <___vfprintf_internal_r+0x424>
 1002d98:	d9014f17 	ldw	r4,1340(sp)
 1002d9c:	b00b883a 	mov	r5,r22
 1002da0:	d9800c04 	addi	r6,sp,48
 1002da4:	d9c15115 	stw	r7,1348(sp)
 1002da8:	10028f40 	call	10028f4 <__sprint_r>
 1002dac:	d9c15117 	ldw	r7,1348(sp)
 1002db0:	10009e1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1002db4:	843ffc04 	addi	r16,r16,-16
 1002db8:	dc800e17 	ldw	r18,56(sp)
 1002dbc:	dc400d17 	ldw	r17,52(sp)
 1002dc0:	dd401904 	addi	r21,sp,100
 1002dc4:	9c3fed16 	blt	r19,r16,1002d7c <___vfprintf_internal_r+0x430>
 1002dc8:	9425883a 	add	r18,r18,r16
 1002dcc:	8c400044 	addi	r17,r17,1
 1002dd0:	008001c4 	movi	r2,7
 1002dd4:	af000015 	stw	fp,0(r21)
 1002dd8:	ac000115 	stw	r16,4(r21)
 1002ddc:	dc800e15 	stw	r18,56(sp)
 1002de0:	dc400d15 	stw	r17,52(sp)
 1002de4:	1441f516 	blt	r2,r17,10035bc <___vfprintf_internal_r+0xc70>
 1002de8:	ad400204 	addi	r21,r21,8
 1002dec:	00000206 	br	1002df8 <___vfprintf_internal_r+0x4ac>
 1002df0:	dc800e17 	ldw	r18,56(sp)
 1002df4:	dc400d17 	ldw	r17,52(sp)
 1002df8:	d8800407 	ldb	r2,16(sp)
 1002dfc:	10000b26 	beq	r2,zero,1002e2c <___vfprintf_internal_r+0x4e0>
 1002e00:	00800044 	movi	r2,1
 1002e04:	94800044 	addi	r18,r18,1
 1002e08:	8c400044 	addi	r17,r17,1
 1002e0c:	a8800115 	stw	r2,4(r21)
 1002e10:	d8c00404 	addi	r3,sp,16
 1002e14:	008001c4 	movi	r2,7
 1002e18:	a8c00015 	stw	r3,0(r21)
 1002e1c:	dc800e15 	stw	r18,56(sp)
 1002e20:	dc400d15 	stw	r17,52(sp)
 1002e24:	1441da16 	blt	r2,r17,1003590 <___vfprintf_internal_r+0xc44>
 1002e28:	ad400204 	addi	r21,r21,8
 1002e2c:	d9015017 	ldw	r4,1344(sp)
 1002e30:	20000b1e 	bne	r4,zero,1002e60 <___vfprintf_internal_r+0x514>
 1002e34:	d8800444 	addi	r2,sp,17
 1002e38:	94800084 	addi	r18,r18,2
 1002e3c:	8c400044 	addi	r17,r17,1
 1002e40:	a8800015 	stw	r2,0(r21)
 1002e44:	00c00084 	movi	r3,2
 1002e48:	008001c4 	movi	r2,7
 1002e4c:	a8c00115 	stw	r3,4(r21)
 1002e50:	dc800e15 	stw	r18,56(sp)
 1002e54:	dc400d15 	stw	r17,52(sp)
 1002e58:	1441c216 	blt	r2,r17,1003564 <___vfprintf_internal_r+0xc18>
 1002e5c:	ad400204 	addi	r21,r21,8
 1002e60:	d9414e17 	ldw	r5,1336(sp)
 1002e64:	00802004 	movi	r2,128
 1002e68:	2880b126 	beq	r5,r2,1003130 <___vfprintf_internal_r+0x7e4>
 1002e6c:	d8c14617 	ldw	r3,1304(sp)
 1002e70:	19e1c83a 	sub	r16,r3,r7
 1002e74:	0400260e 	bge	zero,r16,1002f10 <___vfprintf_internal_r+0x5c4>
 1002e78:	00800404 	movi	r2,16
 1002e7c:	1403cf0e 	bge	r2,r16,1003dbc <___vfprintf_internal_r+0x1470>
 1002e80:	1027883a 	mov	r19,r2
 1002e84:	070040b4 	movhi	fp,258
 1002e88:	e7251684 	addi	fp,fp,-27558
 1002e8c:	050001c4 	movi	r20,7
 1002e90:	00000306 	br	1002ea0 <___vfprintf_internal_r+0x554>
 1002e94:	843ffc04 	addi	r16,r16,-16
 1002e98:	ad400204 	addi	r21,r21,8
 1002e9c:	9c00130e 	bge	r19,r16,1002eec <___vfprintf_internal_r+0x5a0>
 1002ea0:	94800404 	addi	r18,r18,16
 1002ea4:	8c400044 	addi	r17,r17,1
 1002ea8:	af000015 	stw	fp,0(r21)
 1002eac:	acc00115 	stw	r19,4(r21)
 1002eb0:	dc800e15 	stw	r18,56(sp)
 1002eb4:	dc400d15 	stw	r17,52(sp)
 1002eb8:	a47ff60e 	bge	r20,r17,1002e94 <___vfprintf_internal_r+0x548>
 1002ebc:	d9014f17 	ldw	r4,1340(sp)
 1002ec0:	b00b883a 	mov	r5,r22
 1002ec4:	d9800c04 	addi	r6,sp,48
 1002ec8:	d9c15115 	stw	r7,1348(sp)
 1002ecc:	10028f40 	call	10028f4 <__sprint_r>
 1002ed0:	d9c15117 	ldw	r7,1348(sp)
 1002ed4:	1000551e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1002ed8:	843ffc04 	addi	r16,r16,-16
 1002edc:	dc800e17 	ldw	r18,56(sp)
 1002ee0:	dc400d17 	ldw	r17,52(sp)
 1002ee4:	dd401904 	addi	r21,sp,100
 1002ee8:	9c3fed16 	blt	r19,r16,1002ea0 <___vfprintf_internal_r+0x554>
 1002eec:	9425883a 	add	r18,r18,r16
 1002ef0:	8c400044 	addi	r17,r17,1
 1002ef4:	008001c4 	movi	r2,7
 1002ef8:	af000015 	stw	fp,0(r21)
 1002efc:	ac000115 	stw	r16,4(r21)
 1002f00:	dc800e15 	stw	r18,56(sp)
 1002f04:	dc400d15 	stw	r17,52(sp)
 1002f08:	14418216 	blt	r2,r17,1003514 <___vfprintf_internal_r+0xbc8>
 1002f0c:	ad400204 	addi	r21,r21,8
 1002f10:	d9014c17 	ldw	r4,1328(sp)
 1002f14:	2080400c 	andi	r2,r4,256
 1002f18:	10004a1e 	bne	r2,zero,1003044 <___vfprintf_internal_r+0x6f8>
 1002f1c:	d9414117 	ldw	r5,1284(sp)
 1002f20:	91e5883a 	add	r18,r18,r7
 1002f24:	8c400044 	addi	r17,r17,1
 1002f28:	008001c4 	movi	r2,7
 1002f2c:	a9400015 	stw	r5,0(r21)
 1002f30:	a9c00115 	stw	r7,4(r21)
 1002f34:	dc800e15 	stw	r18,56(sp)
 1002f38:	dc400d15 	stw	r17,52(sp)
 1002f3c:	14416716 	blt	r2,r17,10034dc <___vfprintf_internal_r+0xb90>
 1002f40:	a8c00204 	addi	r3,r21,8
 1002f44:	d9814c17 	ldw	r6,1328(sp)
 1002f48:	3080010c 	andi	r2,r6,4
 1002f4c:	10002826 	beq	r2,zero,1002ff0 <___vfprintf_internal_r+0x6a4>
 1002f50:	d8814a17 	ldw	r2,1320(sp)
 1002f54:	d9014517 	ldw	r4,1300(sp)
 1002f58:	1121c83a 	sub	r16,r2,r4
 1002f5c:	0400240e 	bge	zero,r16,1002ff0 <___vfprintf_internal_r+0x6a4>
 1002f60:	00800404 	movi	r2,16
 1002f64:	1404550e 	bge	r2,r16,10040bc <___vfprintf_internal_r+0x1770>
 1002f68:	dc400d17 	ldw	r17,52(sp)
 1002f6c:	1027883a 	mov	r19,r2
 1002f70:	070040b4 	movhi	fp,258
 1002f74:	e7251a84 	addi	fp,fp,-27542
 1002f78:	050001c4 	movi	r20,7
 1002f7c:	00000306 	br	1002f8c <___vfprintf_internal_r+0x640>
 1002f80:	843ffc04 	addi	r16,r16,-16
 1002f84:	18c00204 	addi	r3,r3,8
 1002f88:	9c00110e 	bge	r19,r16,1002fd0 <___vfprintf_internal_r+0x684>
 1002f8c:	94800404 	addi	r18,r18,16
 1002f90:	8c400044 	addi	r17,r17,1
 1002f94:	1f000015 	stw	fp,0(r3)
 1002f98:	1cc00115 	stw	r19,4(r3)
 1002f9c:	dc800e15 	stw	r18,56(sp)
 1002fa0:	dc400d15 	stw	r17,52(sp)
 1002fa4:	a47ff60e 	bge	r20,r17,1002f80 <___vfprintf_internal_r+0x634>
 1002fa8:	d9014f17 	ldw	r4,1340(sp)
 1002fac:	b00b883a 	mov	r5,r22
 1002fb0:	d9800c04 	addi	r6,sp,48
 1002fb4:	10028f40 	call	10028f4 <__sprint_r>
 1002fb8:	10001c1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1002fbc:	843ffc04 	addi	r16,r16,-16
 1002fc0:	dc800e17 	ldw	r18,56(sp)
 1002fc4:	dc400d17 	ldw	r17,52(sp)
 1002fc8:	d8c01904 	addi	r3,sp,100
 1002fcc:	9c3fef16 	blt	r19,r16,1002f8c <___vfprintf_internal_r+0x640>
 1002fd0:	9425883a 	add	r18,r18,r16
 1002fd4:	8c400044 	addi	r17,r17,1
 1002fd8:	008001c4 	movi	r2,7
 1002fdc:	1f000015 	stw	fp,0(r3)
 1002fe0:	1c000115 	stw	r16,4(r3)
 1002fe4:	dc800e15 	stw	r18,56(sp)
 1002fe8:	dc400d15 	stw	r17,52(sp)
 1002fec:	1440cb16 	blt	r2,r17,100331c <___vfprintf_internal_r+0x9d0>
 1002ff0:	d8814a17 	ldw	r2,1320(sp)
 1002ff4:	d9414517 	ldw	r5,1300(sp)
 1002ff8:	1140010e 	bge	r2,r5,1003000 <___vfprintf_internal_r+0x6b4>
 1002ffc:	2805883a 	mov	r2,r5
 1003000:	d9814b17 	ldw	r6,1324(sp)
 1003004:	308d883a 	add	r6,r6,r2
 1003008:	d9814b15 	stw	r6,1324(sp)
 100300c:	90013b1e 	bne	r18,zero,10034fc <___vfprintf_internal_r+0xbb0>
 1003010:	d9c14017 	ldw	r7,1280(sp)
 1003014:	dd401904 	addi	r21,sp,100
 1003018:	d8000d15 	stw	zero,52(sp)
 100301c:	003ea706 	br	1002abc <___vfprintf_internal_r+0x170>
 1003020:	d8800e17 	ldw	r2,56(sp)
 1003024:	1005451e 	bne	r2,zero,100453c <___vfprintf_internal_r+0x1bf0>
 1003028:	d8000d15 	stw	zero,52(sp)
 100302c:	b080030b 	ldhu	r2,12(r22)
 1003030:	1080100c 	andi	r2,r2,64
 1003034:	103e8726 	beq	r2,zero,1002a54 <___vfprintf_internal_r+0x108>
 1003038:	00bfffc4 	movi	r2,-1
 100303c:	d8814b15 	stw	r2,1324(sp)
 1003040:	003e8406 	br	1002a54 <___vfprintf_internal_r+0x108>
 1003044:	d9814d17 	ldw	r6,1332(sp)
 1003048:	00801944 	movi	r2,101
 100304c:	11806e16 	blt	r2,r6,1003208 <___vfprintf_internal_r+0x8bc>
 1003050:	d9414717 	ldw	r5,1308(sp)
 1003054:	00c00044 	movi	r3,1
 1003058:	1943490e 	bge	r3,r5,1003d80 <___vfprintf_internal_r+0x1434>
 100305c:	d8814117 	ldw	r2,1284(sp)
 1003060:	94800044 	addi	r18,r18,1
 1003064:	8c400044 	addi	r17,r17,1
 1003068:	a8800015 	stw	r2,0(r21)
 100306c:	008001c4 	movi	r2,7
 1003070:	a8c00115 	stw	r3,4(r21)
 1003074:	dc800e15 	stw	r18,56(sp)
 1003078:	dc400d15 	stw	r17,52(sp)
 100307c:	1441ca16 	blt	r2,r17,10037a8 <___vfprintf_internal_r+0xe5c>
 1003080:	a8c00204 	addi	r3,r21,8
 1003084:	d9014917 	ldw	r4,1316(sp)
 1003088:	00800044 	movi	r2,1
 100308c:	94800044 	addi	r18,r18,1
 1003090:	8c400044 	addi	r17,r17,1
 1003094:	18800115 	stw	r2,4(r3)
 1003098:	008001c4 	movi	r2,7
 100309c:	19000015 	stw	r4,0(r3)
 10030a0:	dc800e15 	stw	r18,56(sp)
 10030a4:	dc400d15 	stw	r17,52(sp)
 10030a8:	1441b616 	blt	r2,r17,1003784 <___vfprintf_internal_r+0xe38>
 10030ac:	1cc00204 	addi	r19,r3,8
 10030b0:	d9014217 	ldw	r4,1288(sp)
 10030b4:	d9414317 	ldw	r5,1292(sp)
 10030b8:	000d883a 	mov	r6,zero
 10030bc:	000f883a 	mov	r7,zero
 10030c0:	100aca40 	call	100aca4 <__nedf2>
 10030c4:	10017426 	beq	r2,zero,1003698 <___vfprintf_internal_r+0xd4c>
 10030c8:	d9414717 	ldw	r5,1308(sp)
 10030cc:	d9814117 	ldw	r6,1284(sp)
 10030d0:	8c400044 	addi	r17,r17,1
 10030d4:	2c85883a 	add	r2,r5,r18
 10030d8:	14bfffc4 	addi	r18,r2,-1
 10030dc:	28bfffc4 	addi	r2,r5,-1
 10030e0:	30c00044 	addi	r3,r6,1
 10030e4:	98800115 	stw	r2,4(r19)
 10030e8:	008001c4 	movi	r2,7
 10030ec:	98c00015 	stw	r3,0(r19)
 10030f0:	dc800e15 	stw	r18,56(sp)
 10030f4:	dc400d15 	stw	r17,52(sp)
 10030f8:	14418e16 	blt	r2,r17,1003734 <___vfprintf_internal_r+0xde8>
 10030fc:	9cc00204 	addi	r19,r19,8
 1003100:	d9414817 	ldw	r5,1312(sp)
 1003104:	d8800804 	addi	r2,sp,32
 1003108:	8c400044 	addi	r17,r17,1
 100310c:	9165883a 	add	r18,r18,r5
 1003110:	98800015 	stw	r2,0(r19)
 1003114:	008001c4 	movi	r2,7
 1003118:	99400115 	stw	r5,4(r19)
 100311c:	dc800e15 	stw	r18,56(sp)
 1003120:	dc400d15 	stw	r17,52(sp)
 1003124:	1440ed16 	blt	r2,r17,10034dc <___vfprintf_internal_r+0xb90>
 1003128:	98c00204 	addi	r3,r19,8
 100312c:	003f8506 	br	1002f44 <___vfprintf_internal_r+0x5f8>
 1003130:	d9814a17 	ldw	r6,1320(sp)
 1003134:	d8814517 	ldw	r2,1300(sp)
 1003138:	30a1c83a 	sub	r16,r6,r2
 100313c:	043f4b0e 	bge	zero,r16,1002e6c <___vfprintf_internal_r+0x520>
 1003140:	00800404 	movi	r2,16
 1003144:	14043a0e 	bge	r2,r16,1004230 <___vfprintf_internal_r+0x18e4>
 1003148:	1027883a 	mov	r19,r2
 100314c:	070040b4 	movhi	fp,258
 1003150:	e7251684 	addi	fp,fp,-27558
 1003154:	050001c4 	movi	r20,7
 1003158:	00000306 	br	1003168 <___vfprintf_internal_r+0x81c>
 100315c:	843ffc04 	addi	r16,r16,-16
 1003160:	ad400204 	addi	r21,r21,8
 1003164:	9c00130e 	bge	r19,r16,10031b4 <___vfprintf_internal_r+0x868>
 1003168:	94800404 	addi	r18,r18,16
 100316c:	8c400044 	addi	r17,r17,1
 1003170:	af000015 	stw	fp,0(r21)
 1003174:	acc00115 	stw	r19,4(r21)
 1003178:	dc800e15 	stw	r18,56(sp)
 100317c:	dc400d15 	stw	r17,52(sp)
 1003180:	a47ff60e 	bge	r20,r17,100315c <___vfprintf_internal_r+0x810>
 1003184:	d9014f17 	ldw	r4,1340(sp)
 1003188:	b00b883a 	mov	r5,r22
 100318c:	d9800c04 	addi	r6,sp,48
 1003190:	d9c15115 	stw	r7,1348(sp)
 1003194:	10028f40 	call	10028f4 <__sprint_r>
 1003198:	d9c15117 	ldw	r7,1348(sp)
 100319c:	103fa31e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10031a0:	843ffc04 	addi	r16,r16,-16
 10031a4:	dc800e17 	ldw	r18,56(sp)
 10031a8:	dc400d17 	ldw	r17,52(sp)
 10031ac:	dd401904 	addi	r21,sp,100
 10031b0:	9c3fed16 	blt	r19,r16,1003168 <___vfprintf_internal_r+0x81c>
 10031b4:	9425883a 	add	r18,r18,r16
 10031b8:	8c400044 	addi	r17,r17,1
 10031bc:	008001c4 	movi	r2,7
 10031c0:	af000015 	stw	fp,0(r21)
 10031c4:	ac000115 	stw	r16,4(r21)
 10031c8:	dc800e15 	stw	r18,56(sp)
 10031cc:	dc400d15 	stw	r17,52(sp)
 10031d0:	14416116 	blt	r2,r17,1003758 <___vfprintf_internal_r+0xe0c>
 10031d4:	ad400204 	addi	r21,r21,8
 10031d8:	003f2406 	br	1002e6c <___vfprintf_internal_r+0x520>
 10031dc:	d9014f17 	ldw	r4,1340(sp)
 10031e0:	10064000 	call	1006400 <__sinit>
 10031e4:	d9c15117 	ldw	r7,1348(sp)
 10031e8:	003def06 	br	10029a8 <___vfprintf_internal_r+0x5c>
 10031ec:	d9014f17 	ldw	r4,1340(sp)
 10031f0:	b00b883a 	mov	r5,r22
 10031f4:	d9c15115 	stw	r7,1348(sp)
 10031f8:	10048340 	call	1004834 <__swsetup_r>
 10031fc:	d9c15117 	ldw	r7,1348(sp)
 1003200:	103dee26 	beq	r2,zero,10029bc <___vfprintf_internal_r+0x70>
 1003204:	003f8c06 	br	1003038 <___vfprintf_internal_r+0x6ec>
 1003208:	d9014217 	ldw	r4,1288(sp)
 100320c:	d9414317 	ldw	r5,1292(sp)
 1003210:	000d883a 	mov	r6,zero
 1003214:	000f883a 	mov	r7,zero
 1003218:	100ac1c0 	call	100ac1c <__eqdf2>
 100321c:	1000f21e 	bne	r2,zero,10035e8 <___vfprintf_internal_r+0xc9c>
 1003220:	008040b4 	movhi	r2,258
 1003224:	10a51604 	addi	r2,r2,-27560
 1003228:	94800044 	addi	r18,r18,1
 100322c:	8c400044 	addi	r17,r17,1
 1003230:	a8800015 	stw	r2,0(r21)
 1003234:	00c00044 	movi	r3,1
 1003238:	008001c4 	movi	r2,7
 100323c:	a8c00115 	stw	r3,4(r21)
 1003240:	dc800e15 	stw	r18,56(sp)
 1003244:	dc400d15 	stw	r17,52(sp)
 1003248:	14430016 	blt	r2,r17,1003e4c <___vfprintf_internal_r+0x1500>
 100324c:	a8c00204 	addi	r3,r21,8
 1003250:	d8800517 	ldw	r2,20(sp)
 1003254:	d9014717 	ldw	r4,1308(sp)
 1003258:	11015c0e 	bge	r2,r4,10037cc <___vfprintf_internal_r+0xe80>
 100325c:	dc400d17 	ldw	r17,52(sp)
 1003260:	d9814917 	ldw	r6,1316(sp)
 1003264:	00800044 	movi	r2,1
 1003268:	94800044 	addi	r18,r18,1
 100326c:	8c400044 	addi	r17,r17,1
 1003270:	18800115 	stw	r2,4(r3)
 1003274:	008001c4 	movi	r2,7
 1003278:	19800015 	stw	r6,0(r3)
 100327c:	dc800e15 	stw	r18,56(sp)
 1003280:	dc400d15 	stw	r17,52(sp)
 1003284:	14431616 	blt	r2,r17,1003ee0 <___vfprintf_internal_r+0x1594>
 1003288:	18c00204 	addi	r3,r3,8
 100328c:	d8814717 	ldw	r2,1308(sp)
 1003290:	143fffc4 	addi	r16,r2,-1
 1003294:	043f2b0e 	bge	zero,r16,1002f44 <___vfprintf_internal_r+0x5f8>
 1003298:	00800404 	movi	r2,16
 100329c:	1402a80e 	bge	r2,r16,1003d40 <___vfprintf_internal_r+0x13f4>
 10032a0:	dc400d17 	ldw	r17,52(sp)
 10032a4:	1027883a 	mov	r19,r2
 10032a8:	070040b4 	movhi	fp,258
 10032ac:	e7251684 	addi	fp,fp,-27558
 10032b0:	050001c4 	movi	r20,7
 10032b4:	00000306 	br	10032c4 <___vfprintf_internal_r+0x978>
 10032b8:	18c00204 	addi	r3,r3,8
 10032bc:	843ffc04 	addi	r16,r16,-16
 10032c0:	9c02a20e 	bge	r19,r16,1003d4c <___vfprintf_internal_r+0x1400>
 10032c4:	94800404 	addi	r18,r18,16
 10032c8:	8c400044 	addi	r17,r17,1
 10032cc:	1f000015 	stw	fp,0(r3)
 10032d0:	1cc00115 	stw	r19,4(r3)
 10032d4:	dc800e15 	stw	r18,56(sp)
 10032d8:	dc400d15 	stw	r17,52(sp)
 10032dc:	a47ff60e 	bge	r20,r17,10032b8 <___vfprintf_internal_r+0x96c>
 10032e0:	d9014f17 	ldw	r4,1340(sp)
 10032e4:	b00b883a 	mov	r5,r22
 10032e8:	d9800c04 	addi	r6,sp,48
 10032ec:	10028f40 	call	10028f4 <__sprint_r>
 10032f0:	103f4e1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10032f4:	dc800e17 	ldw	r18,56(sp)
 10032f8:	dc400d17 	ldw	r17,52(sp)
 10032fc:	d8c01904 	addi	r3,sp,100
 1003300:	003fee06 	br	10032bc <___vfprintf_internal_r+0x970>
 1003304:	d8802c0b 	ldhu	r2,176(sp)
 1003308:	00ffffc4 	movi	r3,-1
 100330c:	d8c14b15 	stw	r3,1324(sp)
 1003310:	1080100c 	andi	r2,r2,64
 1003314:	103dcc1e 	bne	r2,zero,1002a48 <___vfprintf_internal_r+0xfc>
 1003318:	003dce06 	br	1002a54 <___vfprintf_internal_r+0x108>
 100331c:	d9014f17 	ldw	r4,1340(sp)
 1003320:	b00b883a 	mov	r5,r22
 1003324:	d9800c04 	addi	r6,sp,48
 1003328:	10028f40 	call	10028f4 <__sprint_r>
 100332c:	103f3f1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003330:	dc800e17 	ldw	r18,56(sp)
 1003334:	003f2e06 	br	1002ff0 <___vfprintf_internal_r+0x6a4>
 1003338:	d9414c17 	ldw	r5,1328(sp)
 100333c:	29400414 	ori	r5,r5,16
 1003340:	d9414c15 	stw	r5,1328(sp)
 1003344:	d9814c17 	ldw	r6,1328(sp)
 1003348:	3080080c 	andi	r2,r6,32
 100334c:	10014f1e 	bne	r2,zero,100388c <___vfprintf_internal_r+0xf40>
 1003350:	d8c14c17 	ldw	r3,1328(sp)
 1003354:	1880040c 	andi	r2,r3,16
 1003358:	1002f01e 	bne	r2,zero,1003f1c <___vfprintf_internal_r+0x15d0>
 100335c:	d9014c17 	ldw	r4,1328(sp)
 1003360:	2080100c 	andi	r2,r4,64
 1003364:	1002ed26 	beq	r2,zero,1003f1c <___vfprintf_internal_r+0x15d0>
 1003368:	3880000f 	ldh	r2,0(r7)
 100336c:	39c00104 	addi	r7,r7,4
 1003370:	d9c14015 	stw	r7,1280(sp)
 1003374:	1023d7fa 	srai	r17,r2,31
 1003378:	1021883a 	mov	r16,r2
 100337c:	88037816 	blt	r17,zero,1004160 <___vfprintf_internal_r+0x1814>
 1003380:	01000044 	movi	r4,1
 1003384:	98000416 	blt	r19,zero,1003398 <___vfprintf_internal_r+0xa4c>
 1003388:	d8c14c17 	ldw	r3,1328(sp)
 100338c:	00bfdfc4 	movi	r2,-129
 1003390:	1886703a 	and	r3,r3,r2
 1003394:	d8c14c15 	stw	r3,1328(sp)
 1003398:	8444b03a 	or	r2,r16,r17
 100339c:	10022c1e 	bne	r2,zero,1003c50 <___vfprintf_internal_r+0x1304>
 10033a0:	98022b1e 	bne	r19,zero,1003c50 <___vfprintf_internal_r+0x1304>
 10033a4:	20803fcc 	andi	r2,r4,255
 10033a8:	1002a126 	beq	r2,zero,1003e30 <___vfprintf_internal_r+0x14e4>
 10033ac:	d8c01904 	addi	r3,sp,100
 10033b0:	dd000f04 	addi	r20,sp,60
 10033b4:	d8c14115 	stw	r3,1284(sp)
 10033b8:	d8c14117 	ldw	r3,1284(sp)
 10033bc:	dcc14515 	stw	r19,1300(sp)
 10033c0:	a0c5c83a 	sub	r2,r20,r3
 10033c4:	11c00a04 	addi	r7,r2,40
 10033c8:	99c0010e 	bge	r19,r7,10033d0 <___vfprintf_internal_r+0xa84>
 10033cc:	d9c14515 	stw	r7,1300(sp)
 10033d0:	dcc14615 	stw	r19,1304(sp)
 10033d4:	d8800407 	ldb	r2,16(sp)
 10033d8:	103e4c26 	beq	r2,zero,1002d0c <___vfprintf_internal_r+0x3c0>
 10033dc:	d8814517 	ldw	r2,1300(sp)
 10033e0:	10800044 	addi	r2,r2,1
 10033e4:	d8814515 	stw	r2,1300(sp)
 10033e8:	003e4806 	br	1002d0c <___vfprintf_internal_r+0x3c0>
 10033ec:	d9814c17 	ldw	r6,1328(sp)
 10033f0:	31800414 	ori	r6,r6,16
 10033f4:	d9814c15 	stw	r6,1328(sp)
 10033f8:	d8c14c17 	ldw	r3,1328(sp)
 10033fc:	1880080c 	andi	r2,r3,32
 1003400:	1001271e 	bne	r2,zero,10038a0 <___vfprintf_internal_r+0xf54>
 1003404:	d9414c17 	ldw	r5,1328(sp)
 1003408:	2880040c 	andi	r2,r5,16
 100340c:	1002bc1e 	bne	r2,zero,1003f00 <___vfprintf_internal_r+0x15b4>
 1003410:	d9814c17 	ldw	r6,1328(sp)
 1003414:	3080100c 	andi	r2,r6,64
 1003418:	1002b926 	beq	r2,zero,1003f00 <___vfprintf_internal_r+0x15b4>
 100341c:	3c00000b 	ldhu	r16,0(r7)
 1003420:	0009883a 	mov	r4,zero
 1003424:	39c00104 	addi	r7,r7,4
 1003428:	0023883a 	mov	r17,zero
 100342c:	d9c14015 	stw	r7,1280(sp)
 1003430:	d8000405 	stb	zero,16(sp)
 1003434:	003fd306 	br	1003384 <___vfprintf_internal_r+0xa38>
 1003438:	d9014c17 	ldw	r4,1328(sp)
 100343c:	21000414 	ori	r4,r4,16
 1003440:	d9014c15 	stw	r4,1328(sp)
 1003444:	d9414c17 	ldw	r5,1328(sp)
 1003448:	2880080c 	andi	r2,r5,32
 100344c:	1001081e 	bne	r2,zero,1003870 <___vfprintf_internal_r+0xf24>
 1003450:	d8c14c17 	ldw	r3,1328(sp)
 1003454:	1880040c 	andi	r2,r3,16
 1003458:	1002b61e 	bne	r2,zero,1003f34 <___vfprintf_internal_r+0x15e8>
 100345c:	d9014c17 	ldw	r4,1328(sp)
 1003460:	2080100c 	andi	r2,r4,64
 1003464:	1002b326 	beq	r2,zero,1003f34 <___vfprintf_internal_r+0x15e8>
 1003468:	3c00000b 	ldhu	r16,0(r7)
 100346c:	01000044 	movi	r4,1
 1003470:	39c00104 	addi	r7,r7,4
 1003474:	0023883a 	mov	r17,zero
 1003478:	d9c14015 	stw	r7,1280(sp)
 100347c:	d8000405 	stb	zero,16(sp)
 1003480:	003fc006 	br	1003384 <___vfprintf_internal_r+0xa38>
 1003484:	d9014f17 	ldw	r4,1340(sp)
 1003488:	b00b883a 	mov	r5,r22
 100348c:	d9800c04 	addi	r6,sp,48
 1003490:	10028f40 	call	10028f4 <__sprint_r>
 1003494:	103ee51e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003498:	dc800e17 	ldw	r18,56(sp)
 100349c:	d8c01904 	addi	r3,sp,100
 10034a0:	d9814c17 	ldw	r6,1328(sp)
 10034a4:	3080004c 	andi	r2,r6,1
 10034a8:	1005003a 	cmpeq	r2,r2,zero
 10034ac:	103ea51e 	bne	r2,zero,1002f44 <___vfprintf_internal_r+0x5f8>
 10034b0:	00800044 	movi	r2,1
 10034b4:	dc400d17 	ldw	r17,52(sp)
 10034b8:	18800115 	stw	r2,4(r3)
 10034bc:	d8814917 	ldw	r2,1316(sp)
 10034c0:	94800044 	addi	r18,r18,1
 10034c4:	8c400044 	addi	r17,r17,1
 10034c8:	18800015 	stw	r2,0(r3)
 10034cc:	008001c4 	movi	r2,7
 10034d0:	dc800e15 	stw	r18,56(sp)
 10034d4:	dc400d15 	stw	r17,52(sp)
 10034d8:	1442240e 	bge	r2,r17,1003d6c <___vfprintf_internal_r+0x1420>
 10034dc:	d9014f17 	ldw	r4,1340(sp)
 10034e0:	b00b883a 	mov	r5,r22
 10034e4:	d9800c04 	addi	r6,sp,48
 10034e8:	10028f40 	call	10028f4 <__sprint_r>
 10034ec:	103ecf1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10034f0:	dc800e17 	ldw	r18,56(sp)
 10034f4:	d8c01904 	addi	r3,sp,100
 10034f8:	003e9206 	br	1002f44 <___vfprintf_internal_r+0x5f8>
 10034fc:	d9014f17 	ldw	r4,1340(sp)
 1003500:	b00b883a 	mov	r5,r22
 1003504:	d9800c04 	addi	r6,sp,48
 1003508:	10028f40 	call	10028f4 <__sprint_r>
 100350c:	103ec026 	beq	r2,zero,1003010 <___vfprintf_internal_r+0x6c4>
 1003510:	003ec606 	br	100302c <___vfprintf_internal_r+0x6e0>
 1003514:	d9014f17 	ldw	r4,1340(sp)
 1003518:	b00b883a 	mov	r5,r22
 100351c:	d9800c04 	addi	r6,sp,48
 1003520:	d9c15115 	stw	r7,1348(sp)
 1003524:	10028f40 	call	10028f4 <__sprint_r>
 1003528:	d9c15117 	ldw	r7,1348(sp)
 100352c:	103ebf1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003530:	dc800e17 	ldw	r18,56(sp)
 1003534:	dc400d17 	ldw	r17,52(sp)
 1003538:	dd401904 	addi	r21,sp,100
 100353c:	003e7406 	br	1002f10 <___vfprintf_internal_r+0x5c4>
 1003540:	d9014f17 	ldw	r4,1340(sp)
 1003544:	b00b883a 	mov	r5,r22
 1003548:	d9800c04 	addi	r6,sp,48
 100354c:	d9c15115 	stw	r7,1348(sp)
 1003550:	10028f40 	call	10028f4 <__sprint_r>
 1003554:	d9c15117 	ldw	r7,1348(sp)
 1003558:	103eb41e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 100355c:	dd401904 	addi	r21,sp,100
 1003560:	003d6d06 	br	1002b18 <___vfprintf_internal_r+0x1cc>
 1003564:	d9014f17 	ldw	r4,1340(sp)
 1003568:	b00b883a 	mov	r5,r22
 100356c:	d9800c04 	addi	r6,sp,48
 1003570:	d9c15115 	stw	r7,1348(sp)
 1003574:	10028f40 	call	10028f4 <__sprint_r>
 1003578:	d9c15117 	ldw	r7,1348(sp)
 100357c:	103eab1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003580:	dc800e17 	ldw	r18,56(sp)
 1003584:	dc400d17 	ldw	r17,52(sp)
 1003588:	dd401904 	addi	r21,sp,100
 100358c:	003e3406 	br	1002e60 <___vfprintf_internal_r+0x514>
 1003590:	d9014f17 	ldw	r4,1340(sp)
 1003594:	b00b883a 	mov	r5,r22
 1003598:	d9800c04 	addi	r6,sp,48
 100359c:	d9c15115 	stw	r7,1348(sp)
 10035a0:	10028f40 	call	10028f4 <__sprint_r>
 10035a4:	d9c15117 	ldw	r7,1348(sp)
 10035a8:	103ea01e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10035ac:	dc800e17 	ldw	r18,56(sp)
 10035b0:	dc400d17 	ldw	r17,52(sp)
 10035b4:	dd401904 	addi	r21,sp,100
 10035b8:	003e1c06 	br	1002e2c <___vfprintf_internal_r+0x4e0>
 10035bc:	d9014f17 	ldw	r4,1340(sp)
 10035c0:	b00b883a 	mov	r5,r22
 10035c4:	d9800c04 	addi	r6,sp,48
 10035c8:	d9c15115 	stw	r7,1348(sp)
 10035cc:	10028f40 	call	10028f4 <__sprint_r>
 10035d0:	d9c15117 	ldw	r7,1348(sp)
 10035d4:	103e951e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10035d8:	dc800e17 	ldw	r18,56(sp)
 10035dc:	dc400d17 	ldw	r17,52(sp)
 10035e0:	dd401904 	addi	r21,sp,100
 10035e4:	003e0406 	br	1002df8 <___vfprintf_internal_r+0x4ac>
 10035e8:	d9000517 	ldw	r4,20(sp)
 10035ec:	0102580e 	bge	zero,r4,1003f50 <___vfprintf_internal_r+0x1604>
 10035f0:	d9814717 	ldw	r6,1308(sp)
 10035f4:	21807a16 	blt	r4,r6,10037e0 <___vfprintf_internal_r+0xe94>
 10035f8:	d8814117 	ldw	r2,1284(sp)
 10035fc:	91a5883a 	add	r18,r18,r6
 1003600:	8c400044 	addi	r17,r17,1
 1003604:	a8800015 	stw	r2,0(r21)
 1003608:	008001c4 	movi	r2,7
 100360c:	a9800115 	stw	r6,4(r21)
 1003610:	dc800e15 	stw	r18,56(sp)
 1003614:	dc400d15 	stw	r17,52(sp)
 1003618:	1442fc16 	blt	r2,r17,100420c <___vfprintf_internal_r+0x18c0>
 100361c:	a8c00204 	addi	r3,r21,8
 1003620:	d9414717 	ldw	r5,1308(sp)
 1003624:	2161c83a 	sub	r16,r4,r5
 1003628:	043f9d0e 	bge	zero,r16,10034a0 <___vfprintf_internal_r+0xb54>
 100362c:	00800404 	movi	r2,16
 1003630:	1402190e 	bge	r2,r16,1003e98 <___vfprintf_internal_r+0x154c>
 1003634:	dc400d17 	ldw	r17,52(sp)
 1003638:	1027883a 	mov	r19,r2
 100363c:	070040b4 	movhi	fp,258
 1003640:	e7251684 	addi	fp,fp,-27558
 1003644:	050001c4 	movi	r20,7
 1003648:	00000306 	br	1003658 <___vfprintf_internal_r+0xd0c>
 100364c:	18c00204 	addi	r3,r3,8
 1003650:	843ffc04 	addi	r16,r16,-16
 1003654:	9c02130e 	bge	r19,r16,1003ea4 <___vfprintf_internal_r+0x1558>
 1003658:	94800404 	addi	r18,r18,16
 100365c:	8c400044 	addi	r17,r17,1
 1003660:	1f000015 	stw	fp,0(r3)
 1003664:	1cc00115 	stw	r19,4(r3)
 1003668:	dc800e15 	stw	r18,56(sp)
 100366c:	dc400d15 	stw	r17,52(sp)
 1003670:	a47ff60e 	bge	r20,r17,100364c <___vfprintf_internal_r+0xd00>
 1003674:	d9014f17 	ldw	r4,1340(sp)
 1003678:	b00b883a 	mov	r5,r22
 100367c:	d9800c04 	addi	r6,sp,48
 1003680:	10028f40 	call	10028f4 <__sprint_r>
 1003684:	103e691e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003688:	dc800e17 	ldw	r18,56(sp)
 100368c:	dc400d17 	ldw	r17,52(sp)
 1003690:	d8c01904 	addi	r3,sp,100
 1003694:	003fee06 	br	1003650 <___vfprintf_internal_r+0xd04>
 1003698:	d8814717 	ldw	r2,1308(sp)
 100369c:	143fffc4 	addi	r16,r2,-1
 10036a0:	043e970e 	bge	zero,r16,1003100 <___vfprintf_internal_r+0x7b4>
 10036a4:	00800404 	movi	r2,16
 10036a8:	1400180e 	bge	r2,r16,100370c <___vfprintf_internal_r+0xdc0>
 10036ac:	1029883a 	mov	r20,r2
 10036b0:	070040b4 	movhi	fp,258
 10036b4:	e7251684 	addi	fp,fp,-27558
 10036b8:	054001c4 	movi	r21,7
 10036bc:	00000306 	br	10036cc <___vfprintf_internal_r+0xd80>
 10036c0:	9cc00204 	addi	r19,r19,8
 10036c4:	843ffc04 	addi	r16,r16,-16
 10036c8:	a400120e 	bge	r20,r16,1003714 <___vfprintf_internal_r+0xdc8>
 10036cc:	94800404 	addi	r18,r18,16
 10036d0:	8c400044 	addi	r17,r17,1
 10036d4:	9f000015 	stw	fp,0(r19)
 10036d8:	9d000115 	stw	r20,4(r19)
 10036dc:	dc800e15 	stw	r18,56(sp)
 10036e0:	dc400d15 	stw	r17,52(sp)
 10036e4:	ac7ff60e 	bge	r21,r17,10036c0 <___vfprintf_internal_r+0xd74>
 10036e8:	d9014f17 	ldw	r4,1340(sp)
 10036ec:	b00b883a 	mov	r5,r22
 10036f0:	d9800c04 	addi	r6,sp,48
 10036f4:	10028f40 	call	10028f4 <__sprint_r>
 10036f8:	103e4c1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10036fc:	dc800e17 	ldw	r18,56(sp)
 1003700:	dc400d17 	ldw	r17,52(sp)
 1003704:	dcc01904 	addi	r19,sp,100
 1003708:	003fee06 	br	10036c4 <___vfprintf_internal_r+0xd78>
 100370c:	070040b4 	movhi	fp,258
 1003710:	e7251684 	addi	fp,fp,-27558
 1003714:	9425883a 	add	r18,r18,r16
 1003718:	8c400044 	addi	r17,r17,1
 100371c:	008001c4 	movi	r2,7
 1003720:	9f000015 	stw	fp,0(r19)
 1003724:	9c000115 	stw	r16,4(r19)
 1003728:	dc800e15 	stw	r18,56(sp)
 100372c:	dc400d15 	stw	r17,52(sp)
 1003730:	147e720e 	bge	r2,r17,10030fc <___vfprintf_internal_r+0x7b0>
 1003734:	d9014f17 	ldw	r4,1340(sp)
 1003738:	b00b883a 	mov	r5,r22
 100373c:	d9800c04 	addi	r6,sp,48
 1003740:	10028f40 	call	10028f4 <__sprint_r>
 1003744:	103e391e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003748:	dc800e17 	ldw	r18,56(sp)
 100374c:	dc400d17 	ldw	r17,52(sp)
 1003750:	dcc01904 	addi	r19,sp,100
 1003754:	003e6a06 	br	1003100 <___vfprintf_internal_r+0x7b4>
 1003758:	d9014f17 	ldw	r4,1340(sp)
 100375c:	b00b883a 	mov	r5,r22
 1003760:	d9800c04 	addi	r6,sp,48
 1003764:	d9c15115 	stw	r7,1348(sp)
 1003768:	10028f40 	call	10028f4 <__sprint_r>
 100376c:	d9c15117 	ldw	r7,1348(sp)
 1003770:	103e2e1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003774:	dc800e17 	ldw	r18,56(sp)
 1003778:	dc400d17 	ldw	r17,52(sp)
 100377c:	dd401904 	addi	r21,sp,100
 1003780:	003dba06 	br	1002e6c <___vfprintf_internal_r+0x520>
 1003784:	d9014f17 	ldw	r4,1340(sp)
 1003788:	b00b883a 	mov	r5,r22
 100378c:	d9800c04 	addi	r6,sp,48
 1003790:	10028f40 	call	10028f4 <__sprint_r>
 1003794:	103e251e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003798:	dc800e17 	ldw	r18,56(sp)
 100379c:	dc400d17 	ldw	r17,52(sp)
 10037a0:	dcc01904 	addi	r19,sp,100
 10037a4:	003e4206 	br	10030b0 <___vfprintf_internal_r+0x764>
 10037a8:	d9014f17 	ldw	r4,1340(sp)
 10037ac:	b00b883a 	mov	r5,r22
 10037b0:	d9800c04 	addi	r6,sp,48
 10037b4:	10028f40 	call	10028f4 <__sprint_r>
 10037b8:	103e1c1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10037bc:	dc800e17 	ldw	r18,56(sp)
 10037c0:	dc400d17 	ldw	r17,52(sp)
 10037c4:	d8c01904 	addi	r3,sp,100
 10037c8:	003e2e06 	br	1003084 <___vfprintf_internal_r+0x738>
 10037cc:	d9414c17 	ldw	r5,1328(sp)
 10037d0:	2880004c 	andi	r2,r5,1
 10037d4:	1005003a 	cmpeq	r2,r2,zero
 10037d8:	103dda1e 	bne	r2,zero,1002f44 <___vfprintf_internal_r+0x5f8>
 10037dc:	003e9f06 	br	100325c <___vfprintf_internal_r+0x910>
 10037e0:	d8c14117 	ldw	r3,1284(sp)
 10037e4:	9125883a 	add	r18,r18,r4
 10037e8:	8c400044 	addi	r17,r17,1
 10037ec:	008001c4 	movi	r2,7
 10037f0:	a8c00015 	stw	r3,0(r21)
 10037f4:	a9000115 	stw	r4,4(r21)
 10037f8:	dc800e15 	stw	r18,56(sp)
 10037fc:	dc400d15 	stw	r17,52(sp)
 1003800:	14426c16 	blt	r2,r17,10041b4 <___vfprintf_internal_r+0x1868>
 1003804:	a8c00204 	addi	r3,r21,8
 1003808:	d9414917 	ldw	r5,1316(sp)
 100380c:	00800044 	movi	r2,1
 1003810:	94800044 	addi	r18,r18,1
 1003814:	8c400044 	addi	r17,r17,1
 1003818:	18800115 	stw	r2,4(r3)
 100381c:	008001c4 	movi	r2,7
 1003820:	19400015 	stw	r5,0(r3)
 1003824:	dc800e15 	stw	r18,56(sp)
 1003828:	dc400d15 	stw	r17,52(sp)
 100382c:	2021883a 	mov	r16,r4
 1003830:	14425616 	blt	r2,r17,100418c <___vfprintf_internal_r+0x1840>
 1003834:	19400204 	addi	r5,r3,8
 1003838:	d9814717 	ldw	r6,1308(sp)
 100383c:	8c400044 	addi	r17,r17,1
 1003840:	dc400d15 	stw	r17,52(sp)
 1003844:	3107c83a 	sub	r3,r6,r4
 1003848:	d9014117 	ldw	r4,1284(sp)
 100384c:	90e5883a 	add	r18,r18,r3
 1003850:	28c00115 	stw	r3,4(r5)
 1003854:	8105883a 	add	r2,r16,r4
 1003858:	28800015 	stw	r2,0(r5)
 100385c:	008001c4 	movi	r2,7
 1003860:	dc800e15 	stw	r18,56(sp)
 1003864:	147f1d16 	blt	r2,r17,10034dc <___vfprintf_internal_r+0xb90>
 1003868:	28c00204 	addi	r3,r5,8
 100386c:	003db506 	br	1002f44 <___vfprintf_internal_r+0x5f8>
 1003870:	3c000017 	ldw	r16,0(r7)
 1003874:	3c400117 	ldw	r17,4(r7)
 1003878:	39800204 	addi	r6,r7,8
 100387c:	01000044 	movi	r4,1
 1003880:	d9814015 	stw	r6,1280(sp)
 1003884:	d8000405 	stb	zero,16(sp)
 1003888:	003ebe06 	br	1003384 <___vfprintf_internal_r+0xa38>
 100388c:	3c000017 	ldw	r16,0(r7)
 1003890:	3c400117 	ldw	r17,4(r7)
 1003894:	38800204 	addi	r2,r7,8
 1003898:	d8814015 	stw	r2,1280(sp)
 100389c:	003eb706 	br	100337c <___vfprintf_internal_r+0xa30>
 10038a0:	3c000017 	ldw	r16,0(r7)
 10038a4:	3c400117 	ldw	r17,4(r7)
 10038a8:	39000204 	addi	r4,r7,8
 10038ac:	d9014015 	stw	r4,1280(sp)
 10038b0:	0009883a 	mov	r4,zero
 10038b4:	d8000405 	stb	zero,16(sp)
 10038b8:	003eb206 	br	1003384 <___vfprintf_internal_r+0xa38>
 10038bc:	38c00017 	ldw	r3,0(r7)
 10038c0:	39c00104 	addi	r7,r7,4
 10038c4:	d8c14a15 	stw	r3,1320(sp)
 10038c8:	1800d70e 	bge	r3,zero,1003c28 <___vfprintf_internal_r+0x12dc>
 10038cc:	00c7c83a 	sub	r3,zero,r3
 10038d0:	d8c14a15 	stw	r3,1320(sp)
 10038d4:	d9014c17 	ldw	r4,1328(sp)
 10038d8:	b8c00007 	ldb	r3,0(r23)
 10038dc:	21000114 	ori	r4,r4,4
 10038e0:	d9014c15 	stw	r4,1328(sp)
 10038e4:	003c9806 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 10038e8:	d9814c17 	ldw	r6,1328(sp)
 10038ec:	3080080c 	andi	r2,r6,32
 10038f0:	1001f626 	beq	r2,zero,10040cc <___vfprintf_internal_r+0x1780>
 10038f4:	d9014b17 	ldw	r4,1324(sp)
 10038f8:	38800017 	ldw	r2,0(r7)
 10038fc:	39c00104 	addi	r7,r7,4
 1003900:	d9c14015 	stw	r7,1280(sp)
 1003904:	2007d7fa 	srai	r3,r4,31
 1003908:	d9c14017 	ldw	r7,1280(sp)
 100390c:	11000015 	stw	r4,0(r2)
 1003910:	10c00115 	stw	r3,4(r2)
 1003914:	003c6906 	br	1002abc <___vfprintf_internal_r+0x170>
 1003918:	b8c00007 	ldb	r3,0(r23)
 100391c:	00801b04 	movi	r2,108
 1003920:	18825526 	beq	r3,r2,1004278 <___vfprintf_internal_r+0x192c>
 1003924:	d9414c17 	ldw	r5,1328(sp)
 1003928:	29400414 	ori	r5,r5,16
 100392c:	d9414c15 	stw	r5,1328(sp)
 1003930:	003c8506 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003934:	d9814c17 	ldw	r6,1328(sp)
 1003938:	b8c00007 	ldb	r3,0(r23)
 100393c:	31800814 	ori	r6,r6,32
 1003940:	d9814c15 	stw	r6,1328(sp)
 1003944:	003c8006 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003948:	d8814c17 	ldw	r2,1328(sp)
 100394c:	3c000017 	ldw	r16,0(r7)
 1003950:	00c01e04 	movi	r3,120
 1003954:	10800094 	ori	r2,r2,2
 1003958:	d8814c15 	stw	r2,1328(sp)
 100395c:	39c00104 	addi	r7,r7,4
 1003960:	014040b4 	movhi	r5,258
 1003964:	2964ff04 	addi	r5,r5,-27652
 1003968:	00800c04 	movi	r2,48
 100396c:	0023883a 	mov	r17,zero
 1003970:	01000084 	movi	r4,2
 1003974:	d9c14015 	stw	r7,1280(sp)
 1003978:	d8c14d15 	stw	r3,1332(sp)
 100397c:	d9414415 	stw	r5,1296(sp)
 1003980:	d8800445 	stb	r2,17(sp)
 1003984:	d8c00485 	stb	r3,18(sp)
 1003988:	d8000405 	stb	zero,16(sp)
 100398c:	003e7d06 	br	1003384 <___vfprintf_internal_r+0xa38>
 1003990:	d8814c17 	ldw	r2,1328(sp)
 1003994:	b8c00007 	ldb	r3,0(r23)
 1003998:	10801014 	ori	r2,r2,64
 100399c:	d8814c15 	stw	r2,1328(sp)
 10039a0:	003c6906 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 10039a4:	d9414c17 	ldw	r5,1328(sp)
 10039a8:	2880020c 	andi	r2,r5,8
 10039ac:	1001e526 	beq	r2,zero,1004144 <___vfprintf_internal_r+0x17f8>
 10039b0:	39800017 	ldw	r6,0(r7)
 10039b4:	38800204 	addi	r2,r7,8
 10039b8:	d8814015 	stw	r2,1280(sp)
 10039bc:	d9814215 	stw	r6,1288(sp)
 10039c0:	39c00117 	ldw	r7,4(r7)
 10039c4:	d9c14315 	stw	r7,1292(sp)
 10039c8:	d9014217 	ldw	r4,1288(sp)
 10039cc:	d9414317 	ldw	r5,1292(sp)
 10039d0:	10093fc0 	call	10093fc <__isinfd>
 10039d4:	10021d26 	beq	r2,zero,100424c <___vfprintf_internal_r+0x1900>
 10039d8:	d9014217 	ldw	r4,1288(sp)
 10039dc:	d9414317 	ldw	r5,1292(sp)
 10039e0:	000d883a 	mov	r6,zero
 10039e4:	000f883a 	mov	r7,zero
 10039e8:	100ae3c0 	call	100ae3c <__ltdf2>
 10039ec:	1002d016 	blt	r2,zero,1004530 <___vfprintf_internal_r+0x1be4>
 10039f0:	d9414d17 	ldw	r5,1332(sp)
 10039f4:	008011c4 	movi	r2,71
 10039f8:	11421016 	blt	r2,r5,100423c <___vfprintf_internal_r+0x18f0>
 10039fc:	018040b4 	movhi	r6,258
 1003a00:	31a50404 	addi	r6,r6,-27632
 1003a04:	d9814115 	stw	r6,1284(sp)
 1003a08:	d9014c17 	ldw	r4,1328(sp)
 1003a0c:	00c000c4 	movi	r3,3
 1003a10:	00bfdfc4 	movi	r2,-129
 1003a14:	2088703a 	and	r4,r4,r2
 1003a18:	180f883a 	mov	r7,r3
 1003a1c:	d8c14515 	stw	r3,1300(sp)
 1003a20:	d9014c15 	stw	r4,1328(sp)
 1003a24:	d8014615 	stw	zero,1304(sp)
 1003a28:	003e6a06 	br	10033d4 <___vfprintf_internal_r+0xa88>
 1003a2c:	38800017 	ldw	r2,0(r7)
 1003a30:	00c00044 	movi	r3,1
 1003a34:	39c00104 	addi	r7,r7,4
 1003a38:	d9c14015 	stw	r7,1280(sp)
 1003a3c:	d9000f04 	addi	r4,sp,60
 1003a40:	180f883a 	mov	r7,r3
 1003a44:	d8c14515 	stw	r3,1300(sp)
 1003a48:	d9014115 	stw	r4,1284(sp)
 1003a4c:	d8800f05 	stb	r2,60(sp)
 1003a50:	d8000405 	stb	zero,16(sp)
 1003a54:	003cac06 	br	1002d08 <___vfprintf_internal_r+0x3bc>
 1003a58:	014040b4 	movhi	r5,258
 1003a5c:	29650a04 	addi	r5,r5,-27608
 1003a60:	d9414415 	stw	r5,1296(sp)
 1003a64:	d9814c17 	ldw	r6,1328(sp)
 1003a68:	3080080c 	andi	r2,r6,32
 1003a6c:	1000ff26 	beq	r2,zero,1003e6c <___vfprintf_internal_r+0x1520>
 1003a70:	3c000017 	ldw	r16,0(r7)
 1003a74:	3c400117 	ldw	r17,4(r7)
 1003a78:	38800204 	addi	r2,r7,8
 1003a7c:	d8814015 	stw	r2,1280(sp)
 1003a80:	d9414c17 	ldw	r5,1328(sp)
 1003a84:	2880004c 	andi	r2,r5,1
 1003a88:	1005003a 	cmpeq	r2,r2,zero
 1003a8c:	1000b91e 	bne	r2,zero,1003d74 <___vfprintf_internal_r+0x1428>
 1003a90:	8444b03a 	or	r2,r16,r17
 1003a94:	1000b726 	beq	r2,zero,1003d74 <___vfprintf_internal_r+0x1428>
 1003a98:	d9814d17 	ldw	r6,1332(sp)
 1003a9c:	29400094 	ori	r5,r5,2
 1003aa0:	00800c04 	movi	r2,48
 1003aa4:	01000084 	movi	r4,2
 1003aa8:	d9414c15 	stw	r5,1328(sp)
 1003aac:	d8800445 	stb	r2,17(sp)
 1003ab0:	d9800485 	stb	r6,18(sp)
 1003ab4:	d8000405 	stb	zero,16(sp)
 1003ab8:	003e3206 	br	1003384 <___vfprintf_internal_r+0xa38>
 1003abc:	018040b4 	movhi	r6,258
 1003ac0:	31a4ff04 	addi	r6,r6,-27652
 1003ac4:	d9814415 	stw	r6,1296(sp)
 1003ac8:	003fe606 	br	1003a64 <___vfprintf_internal_r+0x1118>
 1003acc:	00800ac4 	movi	r2,43
 1003ad0:	d8800405 	stb	r2,16(sp)
 1003ad4:	b8c00007 	ldb	r3,0(r23)
 1003ad8:	003c1b06 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003adc:	d8814c17 	ldw	r2,1328(sp)
 1003ae0:	b8c00007 	ldb	r3,0(r23)
 1003ae4:	10800054 	ori	r2,r2,1
 1003ae8:	d8814c15 	stw	r2,1328(sp)
 1003aec:	003c1606 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003af0:	d8800407 	ldb	r2,16(sp)
 1003af4:	10004c1e 	bne	r2,zero,1003c28 <___vfprintf_internal_r+0x12dc>
 1003af8:	00800804 	movi	r2,32
 1003afc:	d8800405 	stb	r2,16(sp)
 1003b00:	b8c00007 	ldb	r3,0(r23)
 1003b04:	003c1006 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003b08:	d9814c17 	ldw	r6,1328(sp)
 1003b0c:	b8c00007 	ldb	r3,0(r23)
 1003b10:	31800214 	ori	r6,r6,8
 1003b14:	d9814c15 	stw	r6,1328(sp)
 1003b18:	003c0b06 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003b1c:	0009883a 	mov	r4,zero
 1003b20:	04000244 	movi	r16,9
 1003b24:	01400284 	movi	r5,10
 1003b28:	d9c15115 	stw	r7,1348(sp)
 1003b2c:	10020280 	call	1002028 <__mulsi3>
 1003b30:	b9000007 	ldb	r4,0(r23)
 1003b34:	d8c14d17 	ldw	r3,1332(sp)
 1003b38:	bdc00044 	addi	r23,r23,1
 1003b3c:	d9014d15 	stw	r4,1332(sp)
 1003b40:	d9414d17 	ldw	r5,1332(sp)
 1003b44:	1885883a 	add	r2,r3,r2
 1003b48:	113ff404 	addi	r4,r2,-48
 1003b4c:	28bff404 	addi	r2,r5,-48
 1003b50:	d9c15117 	ldw	r7,1348(sp)
 1003b54:	80bff32e 	bgeu	r16,r2,1003b24 <___vfprintf_internal_r+0x11d8>
 1003b58:	d9014a15 	stw	r4,1320(sp)
 1003b5c:	003bfc06 	br	1002b50 <___vfprintf_internal_r+0x204>
 1003b60:	d8814c17 	ldw	r2,1328(sp)
 1003b64:	b8c00007 	ldb	r3,0(r23)
 1003b68:	10802014 	ori	r2,r2,128
 1003b6c:	d8814c15 	stw	r2,1328(sp)
 1003b70:	003bf506 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003b74:	b8c00007 	ldb	r3,0(r23)
 1003b78:	00800a84 	movi	r2,42
 1003b7c:	bdc00044 	addi	r23,r23,1
 1003b80:	18831826 	beq	r3,r2,10047e4 <___vfprintf_internal_r+0x1e98>
 1003b84:	d8c14d15 	stw	r3,1332(sp)
 1003b88:	18bff404 	addi	r2,r3,-48
 1003b8c:	00c00244 	movi	r3,9
 1003b90:	18827b36 	bltu	r3,r2,1004580 <___vfprintf_internal_r+0x1c34>
 1003b94:	1821883a 	mov	r16,r3
 1003b98:	0009883a 	mov	r4,zero
 1003b9c:	01400284 	movi	r5,10
 1003ba0:	d9c15115 	stw	r7,1348(sp)
 1003ba4:	10020280 	call	1002028 <__mulsi3>
 1003ba8:	d9414d17 	ldw	r5,1332(sp)
 1003bac:	b9800007 	ldb	r6,0(r23)
 1003bb0:	d9c15117 	ldw	r7,1348(sp)
 1003bb4:	1145883a 	add	r2,r2,r5
 1003bb8:	113ff404 	addi	r4,r2,-48
 1003bbc:	30bff404 	addi	r2,r6,-48
 1003bc0:	d9814d15 	stw	r6,1332(sp)
 1003bc4:	bdc00044 	addi	r23,r23,1
 1003bc8:	80bff42e 	bgeu	r16,r2,1003b9c <___vfprintf_internal_r+0x1250>
 1003bcc:	2027883a 	mov	r19,r4
 1003bd0:	203bdf0e 	bge	r4,zero,1002b50 <___vfprintf_internal_r+0x204>
 1003bd4:	04ffffc4 	movi	r19,-1
 1003bd8:	003bdd06 	br	1002b50 <___vfprintf_internal_r+0x204>
 1003bdc:	d8000405 	stb	zero,16(sp)
 1003be0:	39800017 	ldw	r6,0(r7)
 1003be4:	39c00104 	addi	r7,r7,4
 1003be8:	d9c14015 	stw	r7,1280(sp)
 1003bec:	d9814115 	stw	r6,1284(sp)
 1003bf0:	3001c926 	beq	r6,zero,1004318 <___vfprintf_internal_r+0x19cc>
 1003bf4:	98000e16 	blt	r19,zero,1003c30 <___vfprintf_internal_r+0x12e4>
 1003bf8:	d9014117 	ldw	r4,1284(sp)
 1003bfc:	000b883a 	mov	r5,zero
 1003c00:	980d883a 	mov	r6,r19
 1003c04:	1007a800 	call	1007a80 <memchr>
 1003c08:	10025926 	beq	r2,zero,1004570 <___vfprintf_internal_r+0x1c24>
 1003c0c:	d8c14117 	ldw	r3,1284(sp)
 1003c10:	10cfc83a 	sub	r7,r2,r3
 1003c14:	99c19e16 	blt	r19,r7,1004290 <___vfprintf_internal_r+0x1944>
 1003c18:	d9c14515 	stw	r7,1300(sp)
 1003c1c:	38000916 	blt	r7,zero,1003c44 <___vfprintf_internal_r+0x12f8>
 1003c20:	d8014615 	stw	zero,1304(sp)
 1003c24:	003deb06 	br	10033d4 <___vfprintf_internal_r+0xa88>
 1003c28:	b8c00007 	ldb	r3,0(r23)
 1003c2c:	003bc606 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1003c30:	d9014117 	ldw	r4,1284(sp)
 1003c34:	10028800 	call	1002880 <strlen>
 1003c38:	d8814515 	stw	r2,1300(sp)
 1003c3c:	100f883a 	mov	r7,r2
 1003c40:	103ff70e 	bge	r2,zero,1003c20 <___vfprintf_internal_r+0x12d4>
 1003c44:	d8014515 	stw	zero,1300(sp)
 1003c48:	d8014615 	stw	zero,1304(sp)
 1003c4c:	003de106 	br	10033d4 <___vfprintf_internal_r+0xa88>
 1003c50:	20c03fcc 	andi	r3,r4,255
 1003c54:	00800044 	movi	r2,1
 1003c58:	18802d26 	beq	r3,r2,1003d10 <___vfprintf_internal_r+0x13c4>
 1003c5c:	18800e36 	bltu	r3,r2,1003c98 <___vfprintf_internal_r+0x134c>
 1003c60:	00800084 	movi	r2,2
 1003c64:	1880fa26 	beq	r3,r2,1004050 <___vfprintf_internal_r+0x1704>
 1003c68:	010040b4 	movhi	r4,258
 1003c6c:	21250f04 	addi	r4,r4,-27588
 1003c70:	10028800 	call	1002880 <strlen>
 1003c74:	100f883a 	mov	r7,r2
 1003c78:	dcc14515 	stw	r19,1300(sp)
 1003c7c:	9880010e 	bge	r19,r2,1003c84 <___vfprintf_internal_r+0x1338>
 1003c80:	d8814515 	stw	r2,1300(sp)
 1003c84:	008040b4 	movhi	r2,258
 1003c88:	10a50f04 	addi	r2,r2,-27588
 1003c8c:	dcc14615 	stw	r19,1304(sp)
 1003c90:	d8814115 	stw	r2,1284(sp)
 1003c94:	003dcf06 	br	10033d4 <___vfprintf_internal_r+0xa88>
 1003c98:	d9401904 	addi	r5,sp,100
 1003c9c:	dd000f04 	addi	r20,sp,60
 1003ca0:	d9414115 	stw	r5,1284(sp)
 1003ca4:	880a977a 	slli	r5,r17,29
 1003ca8:	d9814117 	ldw	r6,1284(sp)
 1003cac:	8004d0fa 	srli	r2,r16,3
 1003cb0:	8806d0fa 	srli	r3,r17,3
 1003cb4:	810001cc 	andi	r4,r16,7
 1003cb8:	2884b03a 	or	r2,r5,r2
 1003cbc:	31bfffc4 	addi	r6,r6,-1
 1003cc0:	21000c04 	addi	r4,r4,48
 1003cc4:	d9814115 	stw	r6,1284(sp)
 1003cc8:	10cab03a 	or	r5,r2,r3
 1003ccc:	31000005 	stb	r4,0(r6)
 1003cd0:	1021883a 	mov	r16,r2
 1003cd4:	1823883a 	mov	r17,r3
 1003cd8:	283ff21e 	bne	r5,zero,1003ca4 <___vfprintf_internal_r+0x1358>
 1003cdc:	d8c14c17 	ldw	r3,1328(sp)
 1003ce0:	1880004c 	andi	r2,r3,1
 1003ce4:	1005003a 	cmpeq	r2,r2,zero
 1003ce8:	103db31e 	bne	r2,zero,10033b8 <___vfprintf_internal_r+0xa6c>
 1003cec:	20803fcc 	andi	r2,r4,255
 1003cf0:	1080201c 	xori	r2,r2,128
 1003cf4:	10bfe004 	addi	r2,r2,-128
 1003cf8:	00c00c04 	movi	r3,48
 1003cfc:	10fdae26 	beq	r2,r3,10033b8 <___vfprintf_internal_r+0xa6c>
 1003d00:	31bfffc4 	addi	r6,r6,-1
 1003d04:	d9814115 	stw	r6,1284(sp)
 1003d08:	30c00005 	stb	r3,0(r6)
 1003d0c:	003daa06 	br	10033b8 <___vfprintf_internal_r+0xa6c>
 1003d10:	88800068 	cmpgeui	r2,r17,1
 1003d14:	10002c1e 	bne	r2,zero,1003dc8 <___vfprintf_internal_r+0x147c>
 1003d18:	8800021e 	bne	r17,zero,1003d24 <___vfprintf_internal_r+0x13d8>
 1003d1c:	00800244 	movi	r2,9
 1003d20:	14002936 	bltu	r2,r16,1003dc8 <___vfprintf_internal_r+0x147c>
 1003d24:	d90018c4 	addi	r4,sp,99
 1003d28:	dd000f04 	addi	r20,sp,60
 1003d2c:	d9014115 	stw	r4,1284(sp)
 1003d30:	d9014117 	ldw	r4,1284(sp)
 1003d34:	80800c04 	addi	r2,r16,48
 1003d38:	20800005 	stb	r2,0(r4)
 1003d3c:	003d9e06 	br	10033b8 <___vfprintf_internal_r+0xa6c>
 1003d40:	dc400d17 	ldw	r17,52(sp)
 1003d44:	070040b4 	movhi	fp,258
 1003d48:	e7251684 	addi	fp,fp,-27558
 1003d4c:	9425883a 	add	r18,r18,r16
 1003d50:	8c400044 	addi	r17,r17,1
 1003d54:	008001c4 	movi	r2,7
 1003d58:	1f000015 	stw	fp,0(r3)
 1003d5c:	1c000115 	stw	r16,4(r3)
 1003d60:	dc800e15 	stw	r18,56(sp)
 1003d64:	dc400d15 	stw	r17,52(sp)
 1003d68:	147ddc16 	blt	r2,r17,10034dc <___vfprintf_internal_r+0xb90>
 1003d6c:	18c00204 	addi	r3,r3,8
 1003d70:	003c7406 	br	1002f44 <___vfprintf_internal_r+0x5f8>
 1003d74:	01000084 	movi	r4,2
 1003d78:	d8000405 	stb	zero,16(sp)
 1003d7c:	003d8106 	br	1003384 <___vfprintf_internal_r+0xa38>
 1003d80:	d9814c17 	ldw	r6,1328(sp)
 1003d84:	30c4703a 	and	r2,r6,r3
 1003d88:	1005003a 	cmpeq	r2,r2,zero
 1003d8c:	103cb326 	beq	r2,zero,100305c <___vfprintf_internal_r+0x710>
 1003d90:	d9014117 	ldw	r4,1284(sp)
 1003d94:	94800044 	addi	r18,r18,1
 1003d98:	8c400044 	addi	r17,r17,1
 1003d9c:	008001c4 	movi	r2,7
 1003da0:	a9000015 	stw	r4,0(r21)
 1003da4:	a8c00115 	stw	r3,4(r21)
 1003da8:	dc800e15 	stw	r18,56(sp)
 1003dac:	dc400d15 	stw	r17,52(sp)
 1003db0:	147e6016 	blt	r2,r17,1003734 <___vfprintf_internal_r+0xde8>
 1003db4:	acc00204 	addi	r19,r21,8
 1003db8:	003cd106 	br	1003100 <___vfprintf_internal_r+0x7b4>
 1003dbc:	070040b4 	movhi	fp,258
 1003dc0:	e7251684 	addi	fp,fp,-27558
 1003dc4:	003c4906 	br	1002eec <___vfprintf_internal_r+0x5a0>
 1003dc8:	dd000f04 	addi	r20,sp,60
 1003dcc:	dc801904 	addi	r18,sp,100
 1003dd0:	8009883a 	mov	r4,r16
 1003dd4:	880b883a 	mov	r5,r17
 1003dd8:	01800284 	movi	r6,10
 1003ddc:	000f883a 	mov	r7,zero
 1003de0:	100a1f80 	call	100a1f8 <__umoddi3>
 1003de4:	12000c04 	addi	r8,r2,48
 1003de8:	94bfffc4 	addi	r18,r18,-1
 1003dec:	8009883a 	mov	r4,r16
 1003df0:	880b883a 	mov	r5,r17
 1003df4:	01800284 	movi	r6,10
 1003df8:	000f883a 	mov	r7,zero
 1003dfc:	92000005 	stb	r8,0(r18)
 1003e00:	1009b8c0 	call	1009b8c <__udivdi3>
 1003e04:	1009883a 	mov	r4,r2
 1003e08:	1021883a 	mov	r16,r2
 1003e0c:	18800068 	cmpgeui	r2,r3,1
 1003e10:	1823883a 	mov	r17,r3
 1003e14:	103fee1e 	bne	r2,zero,1003dd0 <___vfprintf_internal_r+0x1484>
 1003e18:	1800021e 	bne	r3,zero,1003e24 <___vfprintf_internal_r+0x14d8>
 1003e1c:	00800244 	movi	r2,9
 1003e20:	113feb36 	bltu	r2,r4,1003dd0 <___vfprintf_internal_r+0x1484>
 1003e24:	94bfffc4 	addi	r18,r18,-1
 1003e28:	dc814115 	stw	r18,1284(sp)
 1003e2c:	003fc006 	br	1003d30 <___vfprintf_internal_r+0x13e4>
 1003e30:	d9014c17 	ldw	r4,1328(sp)
 1003e34:	2080004c 	andi	r2,r4,1
 1003e38:	10009a1e 	bne	r2,zero,10040a4 <___vfprintf_internal_r+0x1758>
 1003e3c:	d9401904 	addi	r5,sp,100
 1003e40:	dd000f04 	addi	r20,sp,60
 1003e44:	d9414115 	stw	r5,1284(sp)
 1003e48:	003d5b06 	br	10033b8 <___vfprintf_internal_r+0xa6c>
 1003e4c:	d9014f17 	ldw	r4,1340(sp)
 1003e50:	b00b883a 	mov	r5,r22
 1003e54:	d9800c04 	addi	r6,sp,48
 1003e58:	10028f40 	call	10028f4 <__sprint_r>
 1003e5c:	103c731e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003e60:	dc800e17 	ldw	r18,56(sp)
 1003e64:	d8c01904 	addi	r3,sp,100
 1003e68:	003cf906 	br	1003250 <___vfprintf_internal_r+0x904>
 1003e6c:	d8c14c17 	ldw	r3,1328(sp)
 1003e70:	1880040c 	andi	r2,r3,16
 1003e74:	1000711e 	bne	r2,zero,100403c <___vfprintf_internal_r+0x16f0>
 1003e78:	d9014c17 	ldw	r4,1328(sp)
 1003e7c:	2080100c 	andi	r2,r4,64
 1003e80:	10006e26 	beq	r2,zero,100403c <___vfprintf_internal_r+0x16f0>
 1003e84:	3c00000b 	ldhu	r16,0(r7)
 1003e88:	0023883a 	mov	r17,zero
 1003e8c:	39c00104 	addi	r7,r7,4
 1003e90:	d9c14015 	stw	r7,1280(sp)
 1003e94:	003efa06 	br	1003a80 <___vfprintf_internal_r+0x1134>
 1003e98:	dc400d17 	ldw	r17,52(sp)
 1003e9c:	070040b4 	movhi	fp,258
 1003ea0:	e7251684 	addi	fp,fp,-27558
 1003ea4:	9425883a 	add	r18,r18,r16
 1003ea8:	8c400044 	addi	r17,r17,1
 1003eac:	008001c4 	movi	r2,7
 1003eb0:	1f000015 	stw	fp,0(r3)
 1003eb4:	1c000115 	stw	r16,4(r3)
 1003eb8:	dc800e15 	stw	r18,56(sp)
 1003ebc:	dc400d15 	stw	r17,52(sp)
 1003ec0:	147d7016 	blt	r2,r17,1003484 <___vfprintf_internal_r+0xb38>
 1003ec4:	18c00204 	addi	r3,r3,8
 1003ec8:	003d7506 	br	10034a0 <___vfprintf_internal_r+0xb54>
 1003ecc:	dc800e17 	ldw	r18,56(sp)
 1003ed0:	dc400d17 	ldw	r17,52(sp)
 1003ed4:	070040b4 	movhi	fp,258
 1003ed8:	e7251a84 	addi	fp,fp,-27542
 1003edc:	003bba06 	br	1002dc8 <___vfprintf_internal_r+0x47c>
 1003ee0:	d9014f17 	ldw	r4,1340(sp)
 1003ee4:	b00b883a 	mov	r5,r22
 1003ee8:	d9800c04 	addi	r6,sp,48
 1003eec:	10028f40 	call	10028f4 <__sprint_r>
 1003ef0:	103c4e1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1003ef4:	dc800e17 	ldw	r18,56(sp)
 1003ef8:	d8c01904 	addi	r3,sp,100
 1003efc:	003ce306 	br	100328c <___vfprintf_internal_r+0x940>
 1003f00:	3c000017 	ldw	r16,0(r7)
 1003f04:	0009883a 	mov	r4,zero
 1003f08:	39c00104 	addi	r7,r7,4
 1003f0c:	0023883a 	mov	r17,zero
 1003f10:	d9c14015 	stw	r7,1280(sp)
 1003f14:	d8000405 	stb	zero,16(sp)
 1003f18:	003d1a06 	br	1003384 <___vfprintf_internal_r+0xa38>
 1003f1c:	38800017 	ldw	r2,0(r7)
 1003f20:	39c00104 	addi	r7,r7,4
 1003f24:	d9c14015 	stw	r7,1280(sp)
 1003f28:	1023d7fa 	srai	r17,r2,31
 1003f2c:	1021883a 	mov	r16,r2
 1003f30:	003d1206 	br	100337c <___vfprintf_internal_r+0xa30>
 1003f34:	3c000017 	ldw	r16,0(r7)
 1003f38:	01000044 	movi	r4,1
 1003f3c:	39c00104 	addi	r7,r7,4
 1003f40:	0023883a 	mov	r17,zero
 1003f44:	d9c14015 	stw	r7,1280(sp)
 1003f48:	d8000405 	stb	zero,16(sp)
 1003f4c:	003d0d06 	br	1003384 <___vfprintf_internal_r+0xa38>
 1003f50:	008040b4 	movhi	r2,258
 1003f54:	10a51604 	addi	r2,r2,-27560
 1003f58:	94800044 	addi	r18,r18,1
 1003f5c:	8c400044 	addi	r17,r17,1
 1003f60:	a8800015 	stw	r2,0(r21)
 1003f64:	00c00044 	movi	r3,1
 1003f68:	008001c4 	movi	r2,7
 1003f6c:	a8c00115 	stw	r3,4(r21)
 1003f70:	dc800e15 	stw	r18,56(sp)
 1003f74:	dc400d15 	stw	r17,52(sp)
 1003f78:	1440ca16 	blt	r2,r17,10042a4 <___vfprintf_internal_r+0x1958>
 1003f7c:	a8c00204 	addi	r3,r21,8
 1003f80:	2000061e 	bne	r4,zero,1003f9c <___vfprintf_internal_r+0x1650>
 1003f84:	d9414717 	ldw	r5,1308(sp)
 1003f88:	2800041e 	bne	r5,zero,1003f9c <___vfprintf_internal_r+0x1650>
 1003f8c:	d9814c17 	ldw	r6,1328(sp)
 1003f90:	3080004c 	andi	r2,r6,1
 1003f94:	1005003a 	cmpeq	r2,r2,zero
 1003f98:	103bea1e 	bne	r2,zero,1002f44 <___vfprintf_internal_r+0x5f8>
 1003f9c:	00800044 	movi	r2,1
 1003fa0:	dc400d17 	ldw	r17,52(sp)
 1003fa4:	18800115 	stw	r2,4(r3)
 1003fa8:	d8814917 	ldw	r2,1316(sp)
 1003fac:	94800044 	addi	r18,r18,1
 1003fb0:	8c400044 	addi	r17,r17,1
 1003fb4:	18800015 	stw	r2,0(r3)
 1003fb8:	008001c4 	movi	r2,7
 1003fbc:	dc800e15 	stw	r18,56(sp)
 1003fc0:	dc400d15 	stw	r17,52(sp)
 1003fc4:	1440ca16 	blt	r2,r17,10042f0 <___vfprintf_internal_r+0x19a4>
 1003fc8:	18c00204 	addi	r3,r3,8
 1003fcc:	0121c83a 	sub	r16,zero,r4
 1003fd0:	0400500e 	bge	zero,r16,1004114 <___vfprintf_internal_r+0x17c8>
 1003fd4:	00800404 	movi	r2,16
 1003fd8:	1400800e 	bge	r2,r16,10041dc <___vfprintf_internal_r+0x1890>
 1003fdc:	1027883a 	mov	r19,r2
 1003fe0:	070040b4 	movhi	fp,258
 1003fe4:	e7251684 	addi	fp,fp,-27558
 1003fe8:	050001c4 	movi	r20,7
 1003fec:	00000306 	br	1003ffc <___vfprintf_internal_r+0x16b0>
 1003ff0:	18c00204 	addi	r3,r3,8
 1003ff4:	843ffc04 	addi	r16,r16,-16
 1003ff8:	9c007a0e 	bge	r19,r16,10041e4 <___vfprintf_internal_r+0x1898>
 1003ffc:	94800404 	addi	r18,r18,16
 1004000:	8c400044 	addi	r17,r17,1
 1004004:	1f000015 	stw	fp,0(r3)
 1004008:	1cc00115 	stw	r19,4(r3)
 100400c:	dc800e15 	stw	r18,56(sp)
 1004010:	dc400d15 	stw	r17,52(sp)
 1004014:	a47ff60e 	bge	r20,r17,1003ff0 <___vfprintf_internal_r+0x16a4>
 1004018:	d9014f17 	ldw	r4,1340(sp)
 100401c:	b00b883a 	mov	r5,r22
 1004020:	d9800c04 	addi	r6,sp,48
 1004024:	10028f40 	call	10028f4 <__sprint_r>
 1004028:	103c001e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 100402c:	dc800e17 	ldw	r18,56(sp)
 1004030:	dc400d17 	ldw	r17,52(sp)
 1004034:	d8c01904 	addi	r3,sp,100
 1004038:	003fee06 	br	1003ff4 <___vfprintf_internal_r+0x16a8>
 100403c:	3c000017 	ldw	r16,0(r7)
 1004040:	0023883a 	mov	r17,zero
 1004044:	39c00104 	addi	r7,r7,4
 1004048:	d9c14015 	stw	r7,1280(sp)
 100404c:	003e8c06 	br	1003a80 <___vfprintf_internal_r+0x1134>
 1004050:	d9401904 	addi	r5,sp,100
 1004054:	dd000f04 	addi	r20,sp,60
 1004058:	d9414115 	stw	r5,1284(sp)
 100405c:	d9814417 	ldw	r6,1296(sp)
 1004060:	880a973a 	slli	r5,r17,28
 1004064:	8004d13a 	srli	r2,r16,4
 1004068:	810003cc 	andi	r4,r16,15
 100406c:	3109883a 	add	r4,r6,r4
 1004070:	2884b03a 	or	r2,r5,r2
 1004074:	21400003 	ldbu	r5,0(r4)
 1004078:	d9014117 	ldw	r4,1284(sp)
 100407c:	8806d13a 	srli	r3,r17,4
 1004080:	1021883a 	mov	r16,r2
 1004084:	213fffc4 	addi	r4,r4,-1
 1004088:	d9014115 	stw	r4,1284(sp)
 100408c:	d9814117 	ldw	r6,1284(sp)
 1004090:	10c8b03a 	or	r4,r2,r3
 1004094:	1823883a 	mov	r17,r3
 1004098:	31400005 	stb	r5,0(r6)
 100409c:	203fef1e 	bne	r4,zero,100405c <___vfprintf_internal_r+0x1710>
 10040a0:	003cc506 	br	10033b8 <___vfprintf_internal_r+0xa6c>
 10040a4:	00800c04 	movi	r2,48
 10040a8:	d98018c4 	addi	r6,sp,99
 10040ac:	dd000f04 	addi	r20,sp,60
 10040b0:	d88018c5 	stb	r2,99(sp)
 10040b4:	d9814115 	stw	r6,1284(sp)
 10040b8:	003cbf06 	br	10033b8 <___vfprintf_internal_r+0xa6c>
 10040bc:	dc400d17 	ldw	r17,52(sp)
 10040c0:	070040b4 	movhi	fp,258
 10040c4:	e7251a84 	addi	fp,fp,-27542
 10040c8:	003bc106 	br	1002fd0 <___vfprintf_internal_r+0x684>
 10040cc:	d9414c17 	ldw	r5,1328(sp)
 10040d0:	2880040c 	andi	r2,r5,16
 10040d4:	10007c26 	beq	r2,zero,10042c8 <___vfprintf_internal_r+0x197c>
 10040d8:	38800017 	ldw	r2,0(r7)
 10040dc:	39c00104 	addi	r7,r7,4
 10040e0:	d9c14015 	stw	r7,1280(sp)
 10040e4:	d9814b17 	ldw	r6,1324(sp)
 10040e8:	d9c14017 	ldw	r7,1280(sp)
 10040ec:	11800015 	stw	r6,0(r2)
 10040f0:	003a7206 	br	1002abc <___vfprintf_internal_r+0x170>
 10040f4:	d9014f17 	ldw	r4,1340(sp)
 10040f8:	b00b883a 	mov	r5,r22
 10040fc:	d9800c04 	addi	r6,sp,48
 1004100:	10028f40 	call	10028f4 <__sprint_r>
 1004104:	103bc91e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1004108:	dc800e17 	ldw	r18,56(sp)
 100410c:	dc400d17 	ldw	r17,52(sp)
 1004110:	d8c01904 	addi	r3,sp,100
 1004114:	d9014717 	ldw	r4,1308(sp)
 1004118:	d9414117 	ldw	r5,1284(sp)
 100411c:	8c400044 	addi	r17,r17,1
 1004120:	9125883a 	add	r18,r18,r4
 1004124:	008001c4 	movi	r2,7
 1004128:	19400015 	stw	r5,0(r3)
 100412c:	19000115 	stw	r4,4(r3)
 1004130:	dc800e15 	stw	r18,56(sp)
 1004134:	dc400d15 	stw	r17,52(sp)
 1004138:	147ce816 	blt	r2,r17,10034dc <___vfprintf_internal_r+0xb90>
 100413c:	18c00204 	addi	r3,r3,8
 1004140:	003b8006 	br	1002f44 <___vfprintf_internal_r+0x5f8>
 1004144:	38c00017 	ldw	r3,0(r7)
 1004148:	39000204 	addi	r4,r7,8
 100414c:	d9014015 	stw	r4,1280(sp)
 1004150:	d8c14215 	stw	r3,1288(sp)
 1004154:	39c00117 	ldw	r7,4(r7)
 1004158:	d9c14315 	stw	r7,1292(sp)
 100415c:	003e1a06 	br	10039c8 <___vfprintf_internal_r+0x107c>
 1004160:	0005883a 	mov	r2,zero
 1004164:	1409c83a 	sub	r4,r2,r16
 1004168:	1105803a 	cmpltu	r2,r2,r4
 100416c:	044bc83a 	sub	r5,zero,r17
 1004170:	2885c83a 	sub	r2,r5,r2
 1004174:	2021883a 	mov	r16,r4
 1004178:	1023883a 	mov	r17,r2
 100417c:	01000044 	movi	r4,1
 1004180:	00800b44 	movi	r2,45
 1004184:	d8800405 	stb	r2,16(sp)
 1004188:	003c7e06 	br	1003384 <___vfprintf_internal_r+0xa38>
 100418c:	d9014f17 	ldw	r4,1340(sp)
 1004190:	b00b883a 	mov	r5,r22
 1004194:	d9800c04 	addi	r6,sp,48
 1004198:	10028f40 	call	10028f4 <__sprint_r>
 100419c:	103ba31e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10041a0:	dc800e17 	ldw	r18,56(sp)
 10041a4:	dc400d17 	ldw	r17,52(sp)
 10041a8:	d9000517 	ldw	r4,20(sp)
 10041ac:	d9401904 	addi	r5,sp,100
 10041b0:	003da106 	br	1003838 <___vfprintf_internal_r+0xeec>
 10041b4:	d9014f17 	ldw	r4,1340(sp)
 10041b8:	b00b883a 	mov	r5,r22
 10041bc:	d9800c04 	addi	r6,sp,48
 10041c0:	10028f40 	call	10028f4 <__sprint_r>
 10041c4:	103b991e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10041c8:	dc800e17 	ldw	r18,56(sp)
 10041cc:	dc400d17 	ldw	r17,52(sp)
 10041d0:	d9000517 	ldw	r4,20(sp)
 10041d4:	d8c01904 	addi	r3,sp,100
 10041d8:	003d8b06 	br	1003808 <___vfprintf_internal_r+0xebc>
 10041dc:	070040b4 	movhi	fp,258
 10041e0:	e7251684 	addi	fp,fp,-27558
 10041e4:	9425883a 	add	r18,r18,r16
 10041e8:	8c400044 	addi	r17,r17,1
 10041ec:	008001c4 	movi	r2,7
 10041f0:	1f000015 	stw	fp,0(r3)
 10041f4:	1c000115 	stw	r16,4(r3)
 10041f8:	dc800e15 	stw	r18,56(sp)
 10041fc:	dc400d15 	stw	r17,52(sp)
 1004200:	147fbc16 	blt	r2,r17,10040f4 <___vfprintf_internal_r+0x17a8>
 1004204:	18c00204 	addi	r3,r3,8
 1004208:	003fc206 	br	1004114 <___vfprintf_internal_r+0x17c8>
 100420c:	d9014f17 	ldw	r4,1340(sp)
 1004210:	b00b883a 	mov	r5,r22
 1004214:	d9800c04 	addi	r6,sp,48
 1004218:	10028f40 	call	10028f4 <__sprint_r>
 100421c:	103b831e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1004220:	dc800e17 	ldw	r18,56(sp)
 1004224:	d9000517 	ldw	r4,20(sp)
 1004228:	d8c01904 	addi	r3,sp,100
 100422c:	003cfc06 	br	1003620 <___vfprintf_internal_r+0xcd4>
 1004230:	070040b4 	movhi	fp,258
 1004234:	e7251684 	addi	fp,fp,-27558
 1004238:	003bde06 	br	10031b4 <___vfprintf_internal_r+0x868>
 100423c:	008040b4 	movhi	r2,258
 1004240:	10a50504 	addi	r2,r2,-27628
 1004244:	d8814115 	stw	r2,1284(sp)
 1004248:	003def06 	br	1003a08 <___vfprintf_internal_r+0x10bc>
 100424c:	d9014217 	ldw	r4,1288(sp)
 1004250:	d9414317 	ldw	r5,1292(sp)
 1004254:	100943c0 	call	100943c <__isnand>
 1004258:	10003926 	beq	r2,zero,1004340 <___vfprintf_internal_r+0x19f4>
 100425c:	d9414d17 	ldw	r5,1332(sp)
 1004260:	008011c4 	movi	r2,71
 1004264:	1140ce16 	blt	r2,r5,10045a0 <___vfprintf_internal_r+0x1c54>
 1004268:	018040b4 	movhi	r6,258
 100426c:	31a50604 	addi	r6,r6,-27624
 1004270:	d9814115 	stw	r6,1284(sp)
 1004274:	003de406 	br	1003a08 <___vfprintf_internal_r+0x10bc>
 1004278:	d9014c17 	ldw	r4,1328(sp)
 100427c:	bdc00044 	addi	r23,r23,1
 1004280:	b8c00007 	ldb	r3,0(r23)
 1004284:	21000814 	ori	r4,r4,32
 1004288:	d9014c15 	stw	r4,1328(sp)
 100428c:	003a2e06 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 1004290:	dcc14515 	stw	r19,1300(sp)
 1004294:	98011016 	blt	r19,zero,10046d8 <___vfprintf_internal_r+0x1d8c>
 1004298:	980f883a 	mov	r7,r19
 100429c:	d8014615 	stw	zero,1304(sp)
 10042a0:	003c4c06 	br	10033d4 <___vfprintf_internal_r+0xa88>
 10042a4:	d9014f17 	ldw	r4,1340(sp)
 10042a8:	b00b883a 	mov	r5,r22
 10042ac:	d9800c04 	addi	r6,sp,48
 10042b0:	10028f40 	call	10028f4 <__sprint_r>
 10042b4:	103b5d1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 10042b8:	dc800e17 	ldw	r18,56(sp)
 10042bc:	d9000517 	ldw	r4,20(sp)
 10042c0:	d8c01904 	addi	r3,sp,100
 10042c4:	003f2e06 	br	1003f80 <___vfprintf_internal_r+0x1634>
 10042c8:	d8c14c17 	ldw	r3,1328(sp)
 10042cc:	1880100c 	andi	r2,r3,64
 10042d0:	1000a026 	beq	r2,zero,1004554 <___vfprintf_internal_r+0x1c08>
 10042d4:	38800017 	ldw	r2,0(r7)
 10042d8:	39c00104 	addi	r7,r7,4
 10042dc:	d9c14015 	stw	r7,1280(sp)
 10042e0:	d9014b17 	ldw	r4,1324(sp)
 10042e4:	d9c14017 	ldw	r7,1280(sp)
 10042e8:	1100000d 	sth	r4,0(r2)
 10042ec:	0039f306 	br	1002abc <___vfprintf_internal_r+0x170>
 10042f0:	d9014f17 	ldw	r4,1340(sp)
 10042f4:	b00b883a 	mov	r5,r22
 10042f8:	d9800c04 	addi	r6,sp,48
 10042fc:	10028f40 	call	10028f4 <__sprint_r>
 1004300:	103b4a1e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1004304:	dc800e17 	ldw	r18,56(sp)
 1004308:	dc400d17 	ldw	r17,52(sp)
 100430c:	d9000517 	ldw	r4,20(sp)
 1004310:	d8c01904 	addi	r3,sp,100
 1004314:	003f2d06 	br	1003fcc <___vfprintf_internal_r+0x1680>
 1004318:	00800184 	movi	r2,6
 100431c:	14c09a36 	bltu	r2,r19,1004588 <___vfprintf_internal_r+0x1c3c>
 1004320:	dcc14515 	stw	r19,1300(sp)
 1004324:	9800010e 	bge	r19,zero,100432c <___vfprintf_internal_r+0x19e0>
 1004328:	d8014515 	stw	zero,1300(sp)
 100432c:	008040b4 	movhi	r2,258
 1004330:	10a50804 	addi	r2,r2,-27616
 1004334:	980f883a 	mov	r7,r19
 1004338:	d8814115 	stw	r2,1284(sp)
 100433c:	003a7206 	br	1002d08 <___vfprintf_internal_r+0x3bc>
 1004340:	00bfffc4 	movi	r2,-1
 1004344:	9880e226 	beq	r19,r2,10046d0 <___vfprintf_internal_r+0x1d84>
 1004348:	d9414d17 	ldw	r5,1332(sp)
 100434c:	008019c4 	movi	r2,103
 1004350:	2880dc26 	beq	r5,r2,10046c4 <___vfprintf_internal_r+0x1d78>
 1004354:	008011c4 	movi	r2,71
 1004358:	2880da26 	beq	r5,r2,10046c4 <___vfprintf_internal_r+0x1d78>
 100435c:	d9414c17 	ldw	r5,1328(sp)
 1004360:	d9014317 	ldw	r4,1292(sp)
 1004364:	d9814217 	ldw	r6,1288(sp)
 1004368:	29404014 	ori	r5,r5,256
 100436c:	d9414c15 	stw	r5,1328(sp)
 1004370:	2000cc16 	blt	r4,zero,10046a4 <___vfprintf_internal_r+0x1d58>
 1004374:	3021883a 	mov	r16,r6
 1004378:	2023883a 	mov	r17,r4
 100437c:	0039883a 	mov	fp,zero
 1004380:	d9414d17 	ldw	r5,1332(sp)
 1004384:	00801984 	movi	r2,102
 1004388:	2880b726 	beq	r5,r2,1004668 <___vfprintf_internal_r+0x1d1c>
 100438c:	00801184 	movi	r2,70
 1004390:	2880b526 	beq	r5,r2,1004668 <___vfprintf_internal_r+0x1d1c>
 1004394:	00801944 	movi	r2,101
 1004398:	2880c826 	beq	r5,r2,10046bc <___vfprintf_internal_r+0x1d70>
 100439c:	00801144 	movi	r2,69
 10043a0:	2880c626 	beq	r5,r2,10046bc <___vfprintf_internal_r+0x1d70>
 10043a4:	9829883a 	mov	r20,r19
 10043a8:	d9014f17 	ldw	r4,1340(sp)
 10043ac:	d8800504 	addi	r2,sp,20
 10043b0:	880d883a 	mov	r6,r17
 10043b4:	d8800115 	stw	r2,4(sp)
 10043b8:	d8c00604 	addi	r3,sp,24
 10043bc:	d8800704 	addi	r2,sp,28
 10043c0:	800b883a 	mov	r5,r16
 10043c4:	01c00084 	movi	r7,2
 10043c8:	d8c00215 	stw	r3,8(sp)
 10043cc:	d8800315 	stw	r2,12(sp)
 10043d0:	dd000015 	stw	r20,0(sp)
 10043d4:	1004bb40 	call	1004bb4 <_dtoa_r>
 10043d8:	d9814d17 	ldw	r6,1332(sp)
 10043dc:	d8814115 	stw	r2,1284(sp)
 10043e0:	008019c4 	movi	r2,103
 10043e4:	30809526 	beq	r6,r2,100463c <___vfprintf_internal_r+0x1cf0>
 10043e8:	d8c14d17 	ldw	r3,1332(sp)
 10043ec:	008011c4 	movi	r2,71
 10043f0:	18809226 	beq	r3,r2,100463c <___vfprintf_internal_r+0x1cf0>
 10043f4:	d9414117 	ldw	r5,1284(sp)
 10043f8:	d9814d17 	ldw	r6,1332(sp)
 10043fc:	00801984 	movi	r2,102
 1004400:	2d25883a 	add	r18,r5,r20
 1004404:	30808626 	beq	r6,r2,1004620 <___vfprintf_internal_r+0x1cd4>
 1004408:	00801184 	movi	r2,70
 100440c:	30808426 	beq	r6,r2,1004620 <___vfprintf_internal_r+0x1cd4>
 1004410:	000d883a 	mov	r6,zero
 1004414:	000f883a 	mov	r7,zero
 1004418:	880b883a 	mov	r5,r17
 100441c:	8009883a 	mov	r4,r16
 1004420:	100ac1c0 	call	100ac1c <__eqdf2>
 1004424:	1000751e 	bne	r2,zero,10045fc <___vfprintf_internal_r+0x1cb0>
 1004428:	9005883a 	mov	r2,r18
 100442c:	dc800715 	stw	r18,28(sp)
 1004430:	d9014117 	ldw	r4,1284(sp)
 1004434:	d9414d17 	ldw	r5,1332(sp)
 1004438:	00c019c4 	movi	r3,103
 100443c:	1125c83a 	sub	r18,r2,r4
 1004440:	28c06826 	beq	r5,r3,10045e4 <___vfprintf_internal_r+0x1c98>
 1004444:	008011c4 	movi	r2,71
 1004448:	28806626 	beq	r5,r2,10045e4 <___vfprintf_internal_r+0x1c98>
 100444c:	d9000517 	ldw	r4,20(sp)
 1004450:	d8c14d17 	ldw	r3,1332(sp)
 1004454:	00801944 	movi	r2,101
 1004458:	10c05516 	blt	r2,r3,10045b0 <___vfprintf_internal_r+0x1c64>
 100445c:	213fffc4 	addi	r4,r4,-1
 1004460:	d9000515 	stw	r4,20(sp)
 1004464:	d8c00805 	stb	r3,32(sp)
 1004468:	2021883a 	mov	r16,r4
 100446c:	2000c116 	blt	r4,zero,1004774 <___vfprintf_internal_r+0x1e28>
 1004470:	00800ac4 	movi	r2,43
 1004474:	d8800845 	stb	r2,33(sp)
 1004478:	00800244 	movi	r2,9
 100447c:	1400af0e 	bge	r2,r16,100473c <___vfprintf_internal_r+0x1df0>
 1004480:	1027883a 	mov	r19,r2
 1004484:	dc400b84 	addi	r17,sp,46
 1004488:	8009883a 	mov	r4,r16
 100448c:	01400284 	movi	r5,10
 1004490:	1001fb80 	call	1001fb8 <__modsi3>
 1004494:	10800c04 	addi	r2,r2,48
 1004498:	8c7fffc4 	addi	r17,r17,-1
 100449c:	8009883a 	mov	r4,r16
 10044a0:	01400284 	movi	r5,10
 10044a4:	88800005 	stb	r2,0(r17)
 10044a8:	1001f580 	call	1001f58 <__divsi3>
 10044ac:	1021883a 	mov	r16,r2
 10044b0:	98bff516 	blt	r19,r2,1004488 <___vfprintf_internal_r+0x1b3c>
 10044b4:	10c00c04 	addi	r3,r2,48
 10044b8:	d88009c4 	addi	r2,sp,39
 10044bc:	108001c4 	addi	r2,r2,7
 10044c0:	897fffc4 	addi	r5,r17,-1
 10044c4:	88ffffc5 	stb	r3,-1(r17)
 10044c8:	2880a72e 	bgeu	r5,r2,1004768 <___vfprintf_internal_r+0x1e1c>
 10044cc:	1009883a 	mov	r4,r2
 10044d0:	d9800804 	addi	r6,sp,32
 10044d4:	d8c00884 	addi	r3,sp,34
 10044d8:	28800003 	ldbu	r2,0(r5)
 10044dc:	29400044 	addi	r5,r5,1
 10044e0:	18800005 	stb	r2,0(r3)
 10044e4:	18c00044 	addi	r3,r3,1
 10044e8:	293ffb36 	bltu	r5,r4,10044d8 <___vfprintf_internal_r+0x1b8c>
 10044ec:	1987c83a 	sub	r3,r3,r6
 10044f0:	00800044 	movi	r2,1
 10044f4:	d8c14815 	stw	r3,1312(sp)
 10044f8:	90cf883a 	add	r7,r18,r3
 10044fc:	1480960e 	bge	r2,r18,1004758 <___vfprintf_internal_r+0x1e0c>
 1004500:	39c00044 	addi	r7,r7,1
 1004504:	d9c14515 	stw	r7,1300(sp)
 1004508:	38003416 	blt	r7,zero,10045dc <___vfprintf_internal_r+0x1c90>
 100450c:	e0803fcc 	andi	r2,fp,255
 1004510:	1080201c 	xori	r2,r2,128
 1004514:	10bfe004 	addi	r2,r2,-128
 1004518:	10004e26 	beq	r2,zero,1004654 <___vfprintf_internal_r+0x1d08>
 100451c:	00800b44 	movi	r2,45
 1004520:	dc814715 	stw	r18,1308(sp)
 1004524:	d8014615 	stw	zero,1304(sp)
 1004528:	d8800405 	stb	r2,16(sp)
 100452c:	003bab06 	br	10033dc <___vfprintf_internal_r+0xa90>
 1004530:	00800b44 	movi	r2,45
 1004534:	d8800405 	stb	r2,16(sp)
 1004538:	003d2d06 	br	10039f0 <___vfprintf_internal_r+0x10a4>
 100453c:	d9014f17 	ldw	r4,1340(sp)
 1004540:	b00b883a 	mov	r5,r22
 1004544:	d9800c04 	addi	r6,sp,48
 1004548:	10028f40 	call	10028f4 <__sprint_r>
 100454c:	103ab71e 	bne	r2,zero,100302c <___vfprintf_internal_r+0x6e0>
 1004550:	003ab506 	br	1003028 <___vfprintf_internal_r+0x6dc>
 1004554:	38800017 	ldw	r2,0(r7)
 1004558:	39c00104 	addi	r7,r7,4
 100455c:	d9c14015 	stw	r7,1280(sp)
 1004560:	d9414b17 	ldw	r5,1324(sp)
 1004564:	d9c14017 	ldw	r7,1280(sp)
 1004568:	11400015 	stw	r5,0(r2)
 100456c:	00395306 	br	1002abc <___vfprintf_internal_r+0x170>
 1004570:	980f883a 	mov	r7,r19
 1004574:	dcc14515 	stw	r19,1300(sp)
 1004578:	d8014615 	stw	zero,1304(sp)
 100457c:	003b9506 	br	10033d4 <___vfprintf_internal_r+0xa88>
 1004580:	0027883a 	mov	r19,zero
 1004584:	00397206 	br	1002b50 <___vfprintf_internal_r+0x204>
 1004588:	00c040b4 	movhi	r3,258
 100458c:	18e50804 	addi	r3,r3,-27616
 1004590:	100f883a 	mov	r7,r2
 1004594:	d8814515 	stw	r2,1300(sp)
 1004598:	d8c14115 	stw	r3,1284(sp)
 100459c:	0039da06 	br	1002d08 <___vfprintf_internal_r+0x3bc>
 10045a0:	008040b4 	movhi	r2,258
 10045a4:	10a50704 	addi	r2,r2,-27620
 10045a8:	d8814115 	stw	r2,1284(sp)
 10045ac:	003d1606 	br	1003a08 <___vfprintf_internal_r+0x10bc>
 10045b0:	d9414d17 	ldw	r5,1332(sp)
 10045b4:	00801984 	movi	r2,102
 10045b8:	28804926 	beq	r5,r2,10046e0 <___vfprintf_internal_r+0x1d94>
 10045bc:	200f883a 	mov	r7,r4
 10045c0:	24805716 	blt	r4,r18,1004720 <___vfprintf_internal_r+0x1dd4>
 10045c4:	d9414c17 	ldw	r5,1328(sp)
 10045c8:	2880004c 	andi	r2,r5,1
 10045cc:	10000126 	beq	r2,zero,10045d4 <___vfprintf_internal_r+0x1c88>
 10045d0:	21c00044 	addi	r7,r4,1
 10045d4:	d9c14515 	stw	r7,1300(sp)
 10045d8:	383fcc0e 	bge	r7,zero,100450c <___vfprintf_internal_r+0x1bc0>
 10045dc:	d8014515 	stw	zero,1300(sp)
 10045e0:	003fca06 	br	100450c <___vfprintf_internal_r+0x1bc0>
 10045e4:	d9000517 	ldw	r4,20(sp)
 10045e8:	00bfff04 	movi	r2,-4
 10045ec:	1100480e 	bge	r2,r4,1004710 <___vfprintf_internal_r+0x1dc4>
 10045f0:	99004716 	blt	r19,r4,1004710 <___vfprintf_internal_r+0x1dc4>
 10045f4:	d8c14d15 	stw	r3,1332(sp)
 10045f8:	003ff006 	br	10045bc <___vfprintf_internal_r+0x1c70>
 10045fc:	d8800717 	ldw	r2,28(sp)
 1004600:	14bf8b2e 	bgeu	r2,r18,1004430 <___vfprintf_internal_r+0x1ae4>
 1004604:	9007883a 	mov	r3,r18
 1004608:	01000c04 	movi	r4,48
 100460c:	11000005 	stb	r4,0(r2)
 1004610:	10800044 	addi	r2,r2,1
 1004614:	d8800715 	stw	r2,28(sp)
 1004618:	18bffc1e 	bne	r3,r2,100460c <___vfprintf_internal_r+0x1cc0>
 100461c:	003f8406 	br	1004430 <___vfprintf_internal_r+0x1ae4>
 1004620:	d8814117 	ldw	r2,1284(sp)
 1004624:	10c00007 	ldb	r3,0(r2)
 1004628:	00800c04 	movi	r2,48
 100462c:	18805b26 	beq	r3,r2,100479c <___vfprintf_internal_r+0x1e50>
 1004630:	d9000517 	ldw	r4,20(sp)
 1004634:	9125883a 	add	r18,r18,r4
 1004638:	003f7506 	br	1004410 <___vfprintf_internal_r+0x1ac4>
 100463c:	d9014c17 	ldw	r4,1328(sp)
 1004640:	2080004c 	andi	r2,r4,1
 1004644:	1005003a 	cmpeq	r2,r2,zero
 1004648:	103f6a26 	beq	r2,zero,10043f4 <___vfprintf_internal_r+0x1aa8>
 100464c:	d8800717 	ldw	r2,28(sp)
 1004650:	003f7706 	br	1004430 <___vfprintf_internal_r+0x1ae4>
 1004654:	d9c14515 	stw	r7,1300(sp)
 1004658:	38004d16 	blt	r7,zero,1004790 <___vfprintf_internal_r+0x1e44>
 100465c:	dc814715 	stw	r18,1308(sp)
 1004660:	d8014615 	stw	zero,1304(sp)
 1004664:	003b5b06 	br	10033d4 <___vfprintf_internal_r+0xa88>
 1004668:	d9014f17 	ldw	r4,1340(sp)
 100466c:	d8800504 	addi	r2,sp,20
 1004670:	d8800115 	stw	r2,4(sp)
 1004674:	d8c00604 	addi	r3,sp,24
 1004678:	d8800704 	addi	r2,sp,28
 100467c:	800b883a 	mov	r5,r16
 1004680:	880d883a 	mov	r6,r17
 1004684:	01c000c4 	movi	r7,3
 1004688:	d8c00215 	stw	r3,8(sp)
 100468c:	d8800315 	stw	r2,12(sp)
 1004690:	dcc00015 	stw	r19,0(sp)
 1004694:	9829883a 	mov	r20,r19
 1004698:	1004bb40 	call	1004bb4 <_dtoa_r>
 100469c:	d8814115 	stw	r2,1284(sp)
 10046a0:	003f5106 	br	10043e8 <___vfprintf_internal_r+0x1a9c>
 10046a4:	d8c14217 	ldw	r3,1288(sp)
 10046a8:	d9014317 	ldw	r4,1292(sp)
 10046ac:	07000b44 	movi	fp,45
 10046b0:	1821883a 	mov	r16,r3
 10046b4:	2460003c 	xorhi	r17,r4,32768
 10046b8:	003f3106 	br	1004380 <___vfprintf_internal_r+0x1a34>
 10046bc:	9d000044 	addi	r20,r19,1
 10046c0:	003f3906 	br	10043a8 <___vfprintf_internal_r+0x1a5c>
 10046c4:	983f251e 	bne	r19,zero,100435c <___vfprintf_internal_r+0x1a10>
 10046c8:	04c00044 	movi	r19,1
 10046cc:	003f2306 	br	100435c <___vfprintf_internal_r+0x1a10>
 10046d0:	04c00184 	movi	r19,6
 10046d4:	003f2106 	br	100435c <___vfprintf_internal_r+0x1a10>
 10046d8:	d8014515 	stw	zero,1300(sp)
 10046dc:	003eee06 	br	1004298 <___vfprintf_internal_r+0x194c>
 10046e0:	200f883a 	mov	r7,r4
 10046e4:	0100370e 	bge	zero,r4,10047c4 <___vfprintf_internal_r+0x1e78>
 10046e8:	9800031e 	bne	r19,zero,10046f8 <___vfprintf_internal_r+0x1dac>
 10046ec:	d9814c17 	ldw	r6,1328(sp)
 10046f0:	3080004c 	andi	r2,r6,1
 10046f4:	103fb726 	beq	r2,zero,10045d4 <___vfprintf_internal_r+0x1c88>
 10046f8:	20800044 	addi	r2,r4,1
 10046fc:	98a7883a 	add	r19,r19,r2
 1004700:	dcc14515 	stw	r19,1300(sp)
 1004704:	980f883a 	mov	r7,r19
 1004708:	983f800e 	bge	r19,zero,100450c <___vfprintf_internal_r+0x1bc0>
 100470c:	003fb306 	br	10045dc <___vfprintf_internal_r+0x1c90>
 1004710:	d9814d17 	ldw	r6,1332(sp)
 1004714:	31bfff84 	addi	r6,r6,-2
 1004718:	d9814d15 	stw	r6,1332(sp)
 100471c:	003f4c06 	br	1004450 <___vfprintf_internal_r+0x1b04>
 1004720:	0100180e 	bge	zero,r4,1004784 <___vfprintf_internal_r+0x1e38>
 1004724:	00800044 	movi	r2,1
 1004728:	1485883a 	add	r2,r2,r18
 100472c:	d8814515 	stw	r2,1300(sp)
 1004730:	100f883a 	mov	r7,r2
 1004734:	103f750e 	bge	r2,zero,100450c <___vfprintf_internal_r+0x1bc0>
 1004738:	003fa806 	br	10045dc <___vfprintf_internal_r+0x1c90>
 100473c:	80c00c04 	addi	r3,r16,48
 1004740:	00800c04 	movi	r2,48
 1004744:	d8c008c5 	stb	r3,35(sp)
 1004748:	d9800804 	addi	r6,sp,32
 100474c:	d8c00904 	addi	r3,sp,36
 1004750:	d8800885 	stb	r2,34(sp)
 1004754:	003f6506 	br	10044ec <___vfprintf_internal_r+0x1ba0>
 1004758:	d9014c17 	ldw	r4,1328(sp)
 100475c:	2084703a 	and	r2,r4,r2
 1004760:	103f9c26 	beq	r2,zero,10045d4 <___vfprintf_internal_r+0x1c88>
 1004764:	003f6606 	br	1004500 <___vfprintf_internal_r+0x1bb4>
 1004768:	d9800804 	addi	r6,sp,32
 100476c:	d8c00884 	addi	r3,sp,34
 1004770:	003f5e06 	br	10044ec <___vfprintf_internal_r+0x1ba0>
 1004774:	00800b44 	movi	r2,45
 1004778:	0121c83a 	sub	r16,zero,r4
 100477c:	d8800845 	stb	r2,33(sp)
 1004780:	003f3d06 	br	1004478 <___vfprintf_internal_r+0x1b2c>
 1004784:	00800084 	movi	r2,2
 1004788:	1105c83a 	sub	r2,r2,r4
 100478c:	003fe606 	br	1004728 <___vfprintf_internal_r+0x1ddc>
 1004790:	d8014515 	stw	zero,1300(sp)
 1004794:	dc814715 	stw	r18,1308(sp)
 1004798:	003fb106 	br	1004660 <___vfprintf_internal_r+0x1d14>
 100479c:	000d883a 	mov	r6,zero
 10047a0:	000f883a 	mov	r7,zero
 10047a4:	8009883a 	mov	r4,r16
 10047a8:	880b883a 	mov	r5,r17
 10047ac:	100aca40 	call	100aca4 <__nedf2>
 10047b0:	103f9f26 	beq	r2,zero,1004630 <___vfprintf_internal_r+0x1ce4>
 10047b4:	00800044 	movi	r2,1
 10047b8:	1509c83a 	sub	r4,r2,r20
 10047bc:	d9000515 	stw	r4,20(sp)
 10047c0:	003f9b06 	br	1004630 <___vfprintf_internal_r+0x1ce4>
 10047c4:	98000d1e 	bne	r19,zero,10047fc <___vfprintf_internal_r+0x1eb0>
 10047c8:	d8c14c17 	ldw	r3,1328(sp)
 10047cc:	1880004c 	andi	r2,r3,1
 10047d0:	10000a1e 	bne	r2,zero,10047fc <___vfprintf_internal_r+0x1eb0>
 10047d4:	01000044 	movi	r4,1
 10047d8:	200f883a 	mov	r7,r4
 10047dc:	d9014515 	stw	r4,1300(sp)
 10047e0:	003f4a06 	br	100450c <___vfprintf_internal_r+0x1bc0>
 10047e4:	3cc00017 	ldw	r19,0(r7)
 10047e8:	39c00104 	addi	r7,r7,4
 10047ec:	983d0e0e 	bge	r19,zero,1003c28 <___vfprintf_internal_r+0x12dc>
 10047f0:	b8c00007 	ldb	r3,0(r23)
 10047f4:	04ffffc4 	movi	r19,-1
 10047f8:	0038d306 	br	1002b48 <___vfprintf_internal_r+0x1fc>
 10047fc:	9cc00084 	addi	r19,r19,2
 1004800:	dcc14515 	stw	r19,1300(sp)
 1004804:	980f883a 	mov	r7,r19
 1004808:	983f400e 	bge	r19,zero,100450c <___vfprintf_internal_r+0x1bc0>
 100480c:	003f7306 	br	10045dc <___vfprintf_internal_r+0x1c90>

01004810 <__vfprintf_internal>:
 1004810:	008040b4 	movhi	r2,258
 1004814:	10ac8a04 	addi	r2,r2,-19928
 1004818:	2013883a 	mov	r9,r4
 100481c:	11000017 	ldw	r4,0(r2)
 1004820:	2805883a 	mov	r2,r5
 1004824:	300f883a 	mov	r7,r6
 1004828:	480b883a 	mov	r5,r9
 100482c:	100d883a 	mov	r6,r2
 1004830:	100294c1 	jmpi	100294c <___vfprintf_internal_r>

01004834 <__swsetup_r>:
 1004834:	008040b4 	movhi	r2,258
 1004838:	10ac8a04 	addi	r2,r2,-19928
 100483c:	10c00017 	ldw	r3,0(r2)
 1004840:	defffd04 	addi	sp,sp,-12
 1004844:	dc400115 	stw	r17,4(sp)
 1004848:	dc000015 	stw	r16,0(sp)
 100484c:	dfc00215 	stw	ra,8(sp)
 1004850:	2023883a 	mov	r17,r4
 1004854:	2821883a 	mov	r16,r5
 1004858:	18000226 	beq	r3,zero,1004864 <__swsetup_r+0x30>
 100485c:	18800e17 	ldw	r2,56(r3)
 1004860:	10001f26 	beq	r2,zero,10048e0 <__swsetup_r+0xac>
 1004864:	8100030b 	ldhu	r4,12(r16)
 1004868:	2080020c 	andi	r2,r4,8
 100486c:	10002826 	beq	r2,zero,1004910 <__swsetup_r+0xdc>
 1004870:	81400417 	ldw	r5,16(r16)
 1004874:	28001d26 	beq	r5,zero,10048ec <__swsetup_r+0xb8>
 1004878:	2080004c 	andi	r2,r4,1
 100487c:	1005003a 	cmpeq	r2,r2,zero
 1004880:	10000b26 	beq	r2,zero,10048b0 <__swsetup_r+0x7c>
 1004884:	2080008c 	andi	r2,r4,2
 1004888:	10001226 	beq	r2,zero,10048d4 <__swsetup_r+0xa0>
 100488c:	0005883a 	mov	r2,zero
 1004890:	80800215 	stw	r2,8(r16)
 1004894:	28000b26 	beq	r5,zero,10048c4 <__swsetup_r+0x90>
 1004898:	0005883a 	mov	r2,zero
 100489c:	dfc00217 	ldw	ra,8(sp)
 10048a0:	dc400117 	ldw	r17,4(sp)
 10048a4:	dc000017 	ldw	r16,0(sp)
 10048a8:	dec00304 	addi	sp,sp,12
 10048ac:	f800283a 	ret
 10048b0:	80800517 	ldw	r2,20(r16)
 10048b4:	80000215 	stw	zero,8(r16)
 10048b8:	0085c83a 	sub	r2,zero,r2
 10048bc:	80800615 	stw	r2,24(r16)
 10048c0:	283ff51e 	bne	r5,zero,1004898 <__swsetup_r+0x64>
 10048c4:	2080200c 	andi	r2,r4,128
 10048c8:	103ff326 	beq	r2,zero,1004898 <__swsetup_r+0x64>
 10048cc:	00bfffc4 	movi	r2,-1
 10048d0:	003ff206 	br	100489c <__swsetup_r+0x68>
 10048d4:	80800517 	ldw	r2,20(r16)
 10048d8:	80800215 	stw	r2,8(r16)
 10048dc:	003fed06 	br	1004894 <__swsetup_r+0x60>
 10048e0:	1809883a 	mov	r4,r3
 10048e4:	10064000 	call	1006400 <__sinit>
 10048e8:	003fde06 	br	1004864 <__swsetup_r+0x30>
 10048ec:	20c0a00c 	andi	r3,r4,640
 10048f0:	00808004 	movi	r2,512
 10048f4:	18bfe026 	beq	r3,r2,1004878 <__swsetup_r+0x44>
 10048f8:	8809883a 	mov	r4,r17
 10048fc:	800b883a 	mov	r5,r16
 1004900:	10071ac0 	call	10071ac <__smakebuf_r>
 1004904:	8100030b 	ldhu	r4,12(r16)
 1004908:	81400417 	ldw	r5,16(r16)
 100490c:	003fda06 	br	1004878 <__swsetup_r+0x44>
 1004910:	2080040c 	andi	r2,r4,16
 1004914:	103fed26 	beq	r2,zero,10048cc <__swsetup_r+0x98>
 1004918:	2080010c 	andi	r2,r4,4
 100491c:	10001226 	beq	r2,zero,1004968 <__swsetup_r+0x134>
 1004920:	81400c17 	ldw	r5,48(r16)
 1004924:	28000526 	beq	r5,zero,100493c <__swsetup_r+0x108>
 1004928:	80801004 	addi	r2,r16,64
 100492c:	28800226 	beq	r5,r2,1004938 <__swsetup_r+0x104>
 1004930:	8809883a 	mov	r4,r17
 1004934:	10067b80 	call	10067b8 <_free_r>
 1004938:	80000c15 	stw	zero,48(r16)
 100493c:	8080030b 	ldhu	r2,12(r16)
 1004940:	81400417 	ldw	r5,16(r16)
 1004944:	80000115 	stw	zero,4(r16)
 1004948:	10bff6cc 	andi	r2,r2,65499
 100494c:	8080030d 	sth	r2,12(r16)
 1004950:	81400015 	stw	r5,0(r16)
 1004954:	8080030b 	ldhu	r2,12(r16)
 1004958:	10800214 	ori	r2,r2,8
 100495c:	113fffcc 	andi	r4,r2,65535
 1004960:	8080030d 	sth	r2,12(r16)
 1004964:	003fc306 	br	1004874 <__swsetup_r+0x40>
 1004968:	81400417 	ldw	r5,16(r16)
 100496c:	003ff906 	br	1004954 <__swsetup_r+0x120>

01004970 <quorem>:
 1004970:	28c00417 	ldw	r3,16(r5)
 1004974:	20800417 	ldw	r2,16(r4)
 1004978:	defff104 	addi	sp,sp,-60
 100497c:	dfc00e15 	stw	ra,56(sp)
 1004980:	df000d15 	stw	fp,52(sp)
 1004984:	ddc00c15 	stw	r23,48(sp)
 1004988:	dd800b15 	stw	r22,44(sp)
 100498c:	dd400a15 	stw	r21,40(sp)
 1004990:	dd000915 	stw	r20,36(sp)
 1004994:	dcc00815 	stw	r19,32(sp)
 1004998:	dc800715 	stw	r18,28(sp)
 100499c:	dc400615 	stw	r17,24(sp)
 10049a0:	dc000515 	stw	r16,20(sp)
 10049a4:	d9000315 	stw	r4,12(sp)
 10049a8:	d9400415 	stw	r5,16(sp)
 10049ac:	10c07f16 	blt	r2,r3,1004bac <quorem+0x23c>
 10049b0:	1d3fffc4 	addi	r20,r3,-1
 10049b4:	d8c00417 	ldw	r3,16(sp)
 10049b8:	d9000317 	ldw	r4,12(sp)
 10049bc:	a505883a 	add	r2,r20,r20
 10049c0:	1085883a 	add	r2,r2,r2
 10049c4:	1cc00504 	addi	r19,r3,20
 10049c8:	25c00504 	addi	r23,r4,20
 10049cc:	98ad883a 	add	r22,r19,r2
 10049d0:	15c7883a 	add	r3,r2,r23
 10049d4:	b1400017 	ldw	r5,0(r22)
 10049d8:	19000017 	ldw	r4,0(r3)
 10049dc:	d8c00015 	stw	r3,0(sp)
 10049e0:	29400044 	addi	r5,r5,1
 10049e4:	d9000215 	stw	r4,8(sp)
 10049e8:	10020180 	call	1002018 <__udivsi3>
 10049ec:	1039883a 	mov	fp,r2
 10049f0:	10003d1e 	bne	r2,zero,1004ae8 <quorem+0x178>
 10049f4:	d9400417 	ldw	r5,16(sp)
 10049f8:	d9000317 	ldw	r4,12(sp)
 10049fc:	1007ed80 	call	1007ed8 <__mcmp>
 1004a00:	10002c16 	blt	r2,zero,1004ab4 <quorem+0x144>
 1004a04:	e7000044 	addi	fp,fp,1
 1004a08:	b80f883a 	mov	r7,r23
 1004a0c:	0011883a 	mov	r8,zero
 1004a10:	0009883a 	mov	r4,zero
 1004a14:	99400017 	ldw	r5,0(r19)
 1004a18:	38c00017 	ldw	r3,0(r7)
 1004a1c:	9cc00104 	addi	r19,r19,4
 1004a20:	28bfffcc 	andi	r2,r5,65535
 1004a24:	2085883a 	add	r2,r4,r2
 1004a28:	11bfffcc 	andi	r6,r2,65535
 1004a2c:	193fffcc 	andi	r4,r3,65535
 1004a30:	1004d43a 	srli	r2,r2,16
 1004a34:	280ad43a 	srli	r5,r5,16
 1004a38:	2189c83a 	sub	r4,r4,r6
 1004a3c:	2209883a 	add	r4,r4,r8
 1004a40:	1806d43a 	srli	r3,r3,16
 1004a44:	288b883a 	add	r5,r5,r2
 1004a48:	200dd43a 	srai	r6,r4,16
 1004a4c:	28bfffcc 	andi	r2,r5,65535
 1004a50:	1887c83a 	sub	r3,r3,r2
 1004a54:	1987883a 	add	r3,r3,r6
 1004a58:	3900000d 	sth	r4,0(r7)
 1004a5c:	38c0008d 	sth	r3,2(r7)
 1004a60:	2808d43a 	srli	r4,r5,16
 1004a64:	39c00104 	addi	r7,r7,4
 1004a68:	1811d43a 	srai	r8,r3,16
 1004a6c:	b4ffe92e 	bgeu	r22,r19,1004a14 <quorem+0xa4>
 1004a70:	a505883a 	add	r2,r20,r20
 1004a74:	1085883a 	add	r2,r2,r2
 1004a78:	b885883a 	add	r2,r23,r2
 1004a7c:	10c00017 	ldw	r3,0(r2)
 1004a80:	18000c1e 	bne	r3,zero,1004ab4 <quorem+0x144>
 1004a84:	113fff04 	addi	r4,r2,-4
 1004a88:	b900082e 	bgeu	r23,r4,1004aac <quorem+0x13c>
 1004a8c:	10bfff17 	ldw	r2,-4(r2)
 1004a90:	10000326 	beq	r2,zero,1004aa0 <quorem+0x130>
 1004a94:	00000506 	br	1004aac <quorem+0x13c>
 1004a98:	20800017 	ldw	r2,0(r4)
 1004a9c:	1000031e 	bne	r2,zero,1004aac <quorem+0x13c>
 1004aa0:	213fff04 	addi	r4,r4,-4
 1004aa4:	a53fffc4 	addi	r20,r20,-1
 1004aa8:	b93ffb36 	bltu	r23,r4,1004a98 <quorem+0x128>
 1004aac:	d9000317 	ldw	r4,12(sp)
 1004ab0:	25000415 	stw	r20,16(r4)
 1004ab4:	e005883a 	mov	r2,fp
 1004ab8:	dfc00e17 	ldw	ra,56(sp)
 1004abc:	df000d17 	ldw	fp,52(sp)
 1004ac0:	ddc00c17 	ldw	r23,48(sp)
 1004ac4:	dd800b17 	ldw	r22,44(sp)
 1004ac8:	dd400a17 	ldw	r21,40(sp)
 1004acc:	dd000917 	ldw	r20,36(sp)
 1004ad0:	dcc00817 	ldw	r19,32(sp)
 1004ad4:	dc800717 	ldw	r18,28(sp)
 1004ad8:	dc400617 	ldw	r17,24(sp)
 1004adc:	dc000517 	ldw	r16,20(sp)
 1004ae0:	dec00f04 	addi	sp,sp,60
 1004ae4:	f800283a 	ret
 1004ae8:	b823883a 	mov	r17,r23
 1004aec:	9825883a 	mov	r18,r19
 1004af0:	d8000115 	stw	zero,4(sp)
 1004af4:	002b883a 	mov	r21,zero
 1004af8:	94000017 	ldw	r16,0(r18)
 1004afc:	e009883a 	mov	r4,fp
 1004b00:	94800104 	addi	r18,r18,4
 1004b04:	817fffcc 	andi	r5,r16,65535
 1004b08:	10020280 	call	1002028 <__mulsi3>
 1004b0c:	800ad43a 	srli	r5,r16,16
 1004b10:	e009883a 	mov	r4,fp
 1004b14:	a8a1883a 	add	r16,r21,r2
 1004b18:	10020280 	call	1002028 <__mulsi3>
 1004b1c:	89000017 	ldw	r4,0(r17)
 1004b20:	80ffffcc 	andi	r3,r16,65535
 1004b24:	8020d43a 	srli	r16,r16,16
 1004b28:	217fffcc 	andi	r5,r4,65535
 1004b2c:	28cbc83a 	sub	r5,r5,r3
 1004b30:	d8c00117 	ldw	r3,4(sp)
 1004b34:	2008d43a 	srli	r4,r4,16
 1004b38:	1405883a 	add	r2,r2,r16
 1004b3c:	28cb883a 	add	r5,r5,r3
 1004b40:	280dd43a 	srai	r6,r5,16
 1004b44:	10ffffcc 	andi	r3,r2,65535
 1004b48:	20c9c83a 	sub	r4,r4,r3
 1004b4c:	2189883a 	add	r4,r4,r6
 1004b50:	8900008d 	sth	r4,2(r17)
 1004b54:	2009d43a 	srai	r4,r4,16
 1004b58:	8940000d 	sth	r5,0(r17)
 1004b5c:	102ad43a 	srli	r21,r2,16
 1004b60:	8c400104 	addi	r17,r17,4
 1004b64:	d9000115 	stw	r4,4(sp)
 1004b68:	b4bfe32e 	bgeu	r22,r18,1004af8 <quorem+0x188>
 1004b6c:	d9000217 	ldw	r4,8(sp)
 1004b70:	203fa01e 	bne	r4,zero,10049f4 <quorem+0x84>
 1004b74:	d8800017 	ldw	r2,0(sp)
 1004b78:	10ffff04 	addi	r3,r2,-4
 1004b7c:	b8c0082e 	bgeu	r23,r3,1004ba0 <quorem+0x230>
 1004b80:	10bfff17 	ldw	r2,-4(r2)
 1004b84:	10000326 	beq	r2,zero,1004b94 <quorem+0x224>
 1004b88:	00000506 	br	1004ba0 <quorem+0x230>
 1004b8c:	18800017 	ldw	r2,0(r3)
 1004b90:	1000031e 	bne	r2,zero,1004ba0 <quorem+0x230>
 1004b94:	18ffff04 	addi	r3,r3,-4
 1004b98:	a53fffc4 	addi	r20,r20,-1
 1004b9c:	b8fffb36 	bltu	r23,r3,1004b8c <quorem+0x21c>
 1004ba0:	d8c00317 	ldw	r3,12(sp)
 1004ba4:	1d000415 	stw	r20,16(r3)
 1004ba8:	003f9206 	br	10049f4 <quorem+0x84>
 1004bac:	0005883a 	mov	r2,zero
 1004bb0:	003fc106 	br	1004ab8 <quorem+0x148>

01004bb4 <_dtoa_r>:
 1004bb4:	22001017 	ldw	r8,64(r4)
 1004bb8:	deffda04 	addi	sp,sp,-152
 1004bbc:	dd402115 	stw	r21,132(sp)
 1004bc0:	dd002015 	stw	r20,128(sp)
 1004bc4:	dc801e15 	stw	r18,120(sp)
 1004bc8:	dc401d15 	stw	r17,116(sp)
 1004bcc:	dfc02515 	stw	ra,148(sp)
 1004bd0:	df002415 	stw	fp,144(sp)
 1004bd4:	ddc02315 	stw	r23,140(sp)
 1004bd8:	dd802215 	stw	r22,136(sp)
 1004bdc:	dcc01f15 	stw	r19,124(sp)
 1004be0:	dc001c15 	stw	r16,112(sp)
 1004be4:	d9001615 	stw	r4,88(sp)
 1004be8:	3023883a 	mov	r17,r6
 1004bec:	2829883a 	mov	r20,r5
 1004bf0:	d9c01715 	stw	r7,92(sp)
 1004bf4:	dc802817 	ldw	r18,160(sp)
 1004bf8:	302b883a 	mov	r21,r6
 1004bfc:	40000a26 	beq	r8,zero,1004c28 <_dtoa_r+0x74>
 1004c00:	20801117 	ldw	r2,68(r4)
 1004c04:	400b883a 	mov	r5,r8
 1004c08:	40800115 	stw	r2,4(r8)
 1004c0c:	20c01117 	ldw	r3,68(r4)
 1004c10:	00800044 	movi	r2,1
 1004c14:	10c4983a 	sll	r2,r2,r3
 1004c18:	40800215 	stw	r2,8(r8)
 1004c1c:	1007d7c0 	call	1007d7c <_Bfree>
 1004c20:	d8c01617 	ldw	r3,88(sp)
 1004c24:	18001015 	stw	zero,64(r3)
 1004c28:	8800a316 	blt	r17,zero,1004eb8 <_dtoa_r+0x304>
 1004c2c:	90000015 	stw	zero,0(r18)
 1004c30:	a8dffc2c 	andhi	r3,r21,32752
 1004c34:	009ffc34 	movhi	r2,32752
 1004c38:	18809126 	beq	r3,r2,1004e80 <_dtoa_r+0x2cc>
 1004c3c:	000d883a 	mov	r6,zero
 1004c40:	000f883a 	mov	r7,zero
 1004c44:	a009883a 	mov	r4,r20
 1004c48:	a80b883a 	mov	r5,r21
 1004c4c:	dd001215 	stw	r20,72(sp)
 1004c50:	dd401315 	stw	r21,76(sp)
 1004c54:	100aca40 	call	100aca4 <__nedf2>
 1004c58:	1000171e 	bne	r2,zero,1004cb8 <_dtoa_r+0x104>
 1004c5c:	d9802717 	ldw	r6,156(sp)
 1004c60:	00800044 	movi	r2,1
 1004c64:	30800015 	stw	r2,0(r6)
 1004c68:	d8802917 	ldw	r2,164(sp)
 1004c6c:	10029b26 	beq	r2,zero,10056dc <_dtoa_r+0xb28>
 1004c70:	d9002917 	ldw	r4,164(sp)
 1004c74:	008040b4 	movhi	r2,258
 1004c78:	10a51644 	addi	r2,r2,-27559
 1004c7c:	10ffffc4 	addi	r3,r2,-1
 1004c80:	20800015 	stw	r2,0(r4)
 1004c84:	1805883a 	mov	r2,r3
 1004c88:	dfc02517 	ldw	ra,148(sp)
 1004c8c:	df002417 	ldw	fp,144(sp)
 1004c90:	ddc02317 	ldw	r23,140(sp)
 1004c94:	dd802217 	ldw	r22,136(sp)
 1004c98:	dd402117 	ldw	r21,132(sp)
 1004c9c:	dd002017 	ldw	r20,128(sp)
 1004ca0:	dcc01f17 	ldw	r19,124(sp)
 1004ca4:	dc801e17 	ldw	r18,120(sp)
 1004ca8:	dc401d17 	ldw	r17,116(sp)
 1004cac:	dc001c17 	ldw	r16,112(sp)
 1004cb0:	dec02604 	addi	sp,sp,152
 1004cb4:	f800283a 	ret
 1004cb8:	d9001617 	ldw	r4,88(sp)
 1004cbc:	d9401217 	ldw	r5,72(sp)
 1004cc0:	d8800104 	addi	r2,sp,4
 1004cc4:	a80d883a 	mov	r6,r21
 1004cc8:	d9c00204 	addi	r7,sp,8
 1004ccc:	d8800015 	stw	r2,0(sp)
 1004cd0:	10083b80 	call	10083b8 <__d2b>
 1004cd4:	d8800715 	stw	r2,28(sp)
 1004cd8:	a804d53a 	srli	r2,r21,20
 1004cdc:	1101ffcc 	andi	r4,r2,2047
 1004ce0:	20008626 	beq	r4,zero,1004efc <_dtoa_r+0x348>
 1004ce4:	d8c01217 	ldw	r3,72(sp)
 1004ce8:	00800434 	movhi	r2,16
 1004cec:	10bfffc4 	addi	r2,r2,-1
 1004cf0:	ddc00117 	ldw	r23,4(sp)
 1004cf4:	a884703a 	and	r2,r21,r2
 1004cf8:	1811883a 	mov	r8,r3
 1004cfc:	124ffc34 	orhi	r9,r2,16368
 1004d00:	25bf0044 	addi	r22,r4,-1023
 1004d04:	d8000815 	stw	zero,32(sp)
 1004d08:	0005883a 	mov	r2,zero
 1004d0c:	00cffe34 	movhi	r3,16376
 1004d10:	480b883a 	mov	r5,r9
 1004d14:	4009883a 	mov	r4,r8
 1004d18:	180f883a 	mov	r7,r3
 1004d1c:	100d883a 	mov	r6,r2
 1004d20:	10019880 	call	1001988 <__subdf3>
 1004d24:	0218dbf4 	movhi	r8,25455
 1004d28:	4210d844 	addi	r8,r8,17249
 1004d2c:	024ff4f4 	movhi	r9,16339
 1004d30:	4a61e9c4 	addi	r9,r9,-30809
 1004d34:	480f883a 	mov	r7,r9
 1004d38:	400d883a 	mov	r6,r8
 1004d3c:	180b883a 	mov	r5,r3
 1004d40:	1009883a 	mov	r4,r2
 1004d44:	100a8580 	call	100a858 <__muldf3>
 1004d48:	0222d874 	movhi	r8,35681
 1004d4c:	42322cc4 	addi	r8,r8,-14157
 1004d50:	024ff1f4 	movhi	r9,16327
 1004d54:	4a628a04 	addi	r9,r9,-30168
 1004d58:	480f883a 	mov	r7,r9
 1004d5c:	400d883a 	mov	r6,r8
 1004d60:	180b883a 	mov	r5,r3
 1004d64:	1009883a 	mov	r4,r2
 1004d68:	1001a080 	call	1001a08 <__adddf3>
 1004d6c:	b009883a 	mov	r4,r22
 1004d70:	1021883a 	mov	r16,r2
 1004d74:	1823883a 	mov	r17,r3
 1004d78:	1001cd40 	call	1001cd4 <__floatsidf>
 1004d7c:	021427f4 	movhi	r8,20639
 1004d80:	421e7ec4 	addi	r8,r8,31227
 1004d84:	024ff4f4 	movhi	r9,16339
 1004d88:	4a5104c4 	addi	r9,r9,17427
 1004d8c:	480f883a 	mov	r7,r9
 1004d90:	400d883a 	mov	r6,r8
 1004d94:	180b883a 	mov	r5,r3
 1004d98:	1009883a 	mov	r4,r2
 1004d9c:	100a8580 	call	100a858 <__muldf3>
 1004da0:	180f883a 	mov	r7,r3
 1004da4:	880b883a 	mov	r5,r17
 1004da8:	100d883a 	mov	r6,r2
 1004dac:	8009883a 	mov	r4,r16
 1004db0:	1001a080 	call	1001a08 <__adddf3>
 1004db4:	1009883a 	mov	r4,r2
 1004db8:	180b883a 	mov	r5,r3
 1004dbc:	1021883a 	mov	r16,r2
 1004dc0:	1823883a 	mov	r17,r3
 1004dc4:	1001dcc0 	call	1001dcc <__fixdfsi>
 1004dc8:	000d883a 	mov	r6,zero
 1004dcc:	000f883a 	mov	r7,zero
 1004dd0:	8009883a 	mov	r4,r16
 1004dd4:	880b883a 	mov	r5,r17
 1004dd8:	d8800d15 	stw	r2,52(sp)
 1004ddc:	100ae3c0 	call	100ae3c <__ltdf2>
 1004de0:	10031716 	blt	r2,zero,1005a40 <_dtoa_r+0xe8c>
 1004de4:	d8c00d17 	ldw	r3,52(sp)
 1004de8:	00800584 	movi	r2,22
 1004dec:	10c1482e 	bgeu	r2,r3,1005310 <_dtoa_r+0x75c>
 1004df0:	01000044 	movi	r4,1
 1004df4:	d9000c15 	stw	r4,48(sp)
 1004df8:	bd85c83a 	sub	r2,r23,r22
 1004dfc:	11bfffc4 	addi	r6,r2,-1
 1004e00:	30030b16 	blt	r6,zero,1005a30 <_dtoa_r+0xe7c>
 1004e04:	d9800a15 	stw	r6,40(sp)
 1004e08:	d8001115 	stw	zero,68(sp)
 1004e0c:	d8c00d17 	ldw	r3,52(sp)
 1004e10:	1802ff16 	blt	r3,zero,1005a10 <_dtoa_r+0xe5c>
 1004e14:	d9000a17 	ldw	r4,40(sp)
 1004e18:	d8c00915 	stw	r3,36(sp)
 1004e1c:	d8001015 	stw	zero,64(sp)
 1004e20:	20c9883a 	add	r4,r4,r3
 1004e24:	d9000a15 	stw	r4,40(sp)
 1004e28:	d9001717 	ldw	r4,92(sp)
 1004e2c:	00800244 	movi	r2,9
 1004e30:	11004636 	bltu	r2,r4,1004f4c <_dtoa_r+0x398>
 1004e34:	00800144 	movi	r2,5
 1004e38:	11020416 	blt	r2,r4,100564c <_dtoa_r+0xa98>
 1004e3c:	04400044 	movi	r17,1
 1004e40:	d8c01717 	ldw	r3,92(sp)
 1004e44:	00800144 	movi	r2,5
 1004e48:	10c1ed36 	bltu	r2,r3,1005600 <_dtoa_r+0xa4c>
 1004e4c:	18c5883a 	add	r2,r3,r3
 1004e50:	1085883a 	add	r2,r2,r2
 1004e54:	00c04034 	movhi	r3,256
 1004e58:	18d39a04 	addi	r3,r3,20072
 1004e5c:	10c5883a 	add	r2,r2,r3
 1004e60:	11000017 	ldw	r4,0(r2)
 1004e64:	2000683a 	jmp	r4
 1004e68:	01004f54 	movui	r4,317
 1004e6c:	01004f54 	movui	r4,317
 1004e70:	01005954 	movui	r4,357
 1004e74:	0100592c 	andhi	r4,zero,356
 1004e78:	01005970 	cmpltui	r4,zero,357
 1004e7c:	0100597c 	xorhi	r4,zero,357
 1004e80:	d9002717 	ldw	r4,156(sp)
 1004e84:	0089c3c4 	movi	r2,9999
 1004e88:	20800015 	stw	r2,0(r4)
 1004e8c:	a0001026 	beq	r20,zero,1004ed0 <_dtoa_r+0x31c>
 1004e90:	00c040b4 	movhi	r3,258
 1004e94:	18e52204 	addi	r3,r3,-27512
 1004e98:	d9802917 	ldw	r6,164(sp)
 1004e9c:	303f7926 	beq	r6,zero,1004c84 <_dtoa_r+0xd0>
 1004ea0:	188000c7 	ldb	r2,3(r3)
 1004ea4:	190000c4 	addi	r4,r3,3
 1004ea8:	1000101e 	bne	r2,zero,1004eec <_dtoa_r+0x338>
 1004eac:	d8802917 	ldw	r2,164(sp)
 1004eb0:	11000015 	stw	r4,0(r2)
 1004eb4:	003f7306 	br	1004c84 <_dtoa_r+0xd0>
 1004eb8:	00a00034 	movhi	r2,32768
 1004ebc:	10bfffc4 	addi	r2,r2,-1
 1004ec0:	00c00044 	movi	r3,1
 1004ec4:	88aa703a 	and	r21,r17,r2
 1004ec8:	90c00015 	stw	r3,0(r18)
 1004ecc:	003f5806 	br	1004c30 <_dtoa_r+0x7c>
 1004ed0:	00800434 	movhi	r2,16
 1004ed4:	10bfffc4 	addi	r2,r2,-1
 1004ed8:	a884703a 	and	r2,r21,r2
 1004edc:	103fec1e 	bne	r2,zero,1004e90 <_dtoa_r+0x2dc>
 1004ee0:	00c040b4 	movhi	r3,258
 1004ee4:	18e51f04 	addi	r3,r3,-27524
 1004ee8:	003feb06 	br	1004e98 <_dtoa_r+0x2e4>
 1004eec:	d8802917 	ldw	r2,164(sp)
 1004ef0:	19000204 	addi	r4,r3,8
 1004ef4:	11000015 	stw	r4,0(r2)
 1004ef8:	003f6206 	br	1004c84 <_dtoa_r+0xd0>
 1004efc:	ddc00117 	ldw	r23,4(sp)
 1004f00:	d8800217 	ldw	r2,8(sp)
 1004f04:	01000804 	movi	r4,32
 1004f08:	b8c10c84 	addi	r3,r23,1074
 1004f0c:	18a3883a 	add	r17,r3,r2
 1004f10:	2441b80e 	bge	r4,r17,10055f4 <_dtoa_r+0xa40>
 1004f14:	00c01004 	movi	r3,64
 1004f18:	1c47c83a 	sub	r3,r3,r17
 1004f1c:	88bff804 	addi	r2,r17,-32
 1004f20:	a8c6983a 	sll	r3,r21,r3
 1004f24:	a084d83a 	srl	r2,r20,r2
 1004f28:	1888b03a 	or	r4,r3,r2
 1004f2c:	100aec40 	call	100aec4 <__floatunsidf>
 1004f30:	1011883a 	mov	r8,r2
 1004f34:	00bf8434 	movhi	r2,65040
 1004f38:	01000044 	movi	r4,1
 1004f3c:	10d3883a 	add	r9,r2,r3
 1004f40:	8dbef344 	addi	r22,r17,-1075
 1004f44:	d9000815 	stw	r4,32(sp)
 1004f48:	003f6f06 	br	1004d08 <_dtoa_r+0x154>
 1004f4c:	d8001715 	stw	zero,92(sp)
 1004f50:	04400044 	movi	r17,1
 1004f54:	00bfffc4 	movi	r2,-1
 1004f58:	00c00044 	movi	r3,1
 1004f5c:	d8800e15 	stw	r2,56(sp)
 1004f60:	d8002615 	stw	zero,152(sp)
 1004f64:	d8800f15 	stw	r2,60(sp)
 1004f68:	d8c00b15 	stw	r3,44(sp)
 1004f6c:	1021883a 	mov	r16,r2
 1004f70:	d8801617 	ldw	r2,88(sp)
 1004f74:	10001115 	stw	zero,68(r2)
 1004f78:	d8801617 	ldw	r2,88(sp)
 1004f7c:	11401117 	ldw	r5,68(r2)
 1004f80:	1009883a 	mov	r4,r2
 1004f84:	10082fc0 	call	10082fc <_Balloc>
 1004f88:	d8c01617 	ldw	r3,88(sp)
 1004f8c:	d8800515 	stw	r2,20(sp)
 1004f90:	18801015 	stw	r2,64(r3)
 1004f94:	00800384 	movi	r2,14
 1004f98:	14006836 	bltu	r2,r16,100513c <_dtoa_r+0x588>
 1004f9c:	8805003a 	cmpeq	r2,r17,zero
 1004fa0:	1000661e 	bne	r2,zero,100513c <_dtoa_r+0x588>
 1004fa4:	d9000d17 	ldw	r4,52(sp)
 1004fa8:	0102300e 	bge	zero,r4,100586c <_dtoa_r+0xcb8>
 1004fac:	208003cc 	andi	r2,r4,15
 1004fb0:	100490fa 	slli	r2,r2,3
 1004fb4:	2025d13a 	srai	r18,r4,4
 1004fb8:	00c040b4 	movhi	r3,258
 1004fbc:	18e53404 	addi	r3,r3,-27440
 1004fc0:	10c5883a 	add	r2,r2,r3
 1004fc4:	90c0040c 	andi	r3,r18,16
 1004fc8:	14000017 	ldw	r16,0(r2)
 1004fcc:	14400117 	ldw	r17,4(r2)
 1004fd0:	18036a1e 	bne	r3,zero,1005d7c <_dtoa_r+0x11c8>
 1004fd4:	05800084 	movi	r22,2
 1004fd8:	90001026 	beq	r18,zero,100501c <_dtoa_r+0x468>
 1004fdc:	04c040b4 	movhi	r19,258
 1004fe0:	9ce56604 	addi	r19,r19,-27240
 1004fe4:	9080004c 	andi	r2,r18,1
 1004fe8:	1005003a 	cmpeq	r2,r2,zero
 1004fec:	1000081e 	bne	r2,zero,1005010 <_dtoa_r+0x45c>
 1004ff0:	99800017 	ldw	r6,0(r19)
 1004ff4:	99c00117 	ldw	r7,4(r19)
 1004ff8:	880b883a 	mov	r5,r17
 1004ffc:	8009883a 	mov	r4,r16
 1005000:	100a8580 	call	100a858 <__muldf3>
 1005004:	1021883a 	mov	r16,r2
 1005008:	b5800044 	addi	r22,r22,1
 100500c:	1823883a 	mov	r17,r3
 1005010:	9025d07a 	srai	r18,r18,1
 1005014:	9cc00204 	addi	r19,r19,8
 1005018:	903ff21e 	bne	r18,zero,1004fe4 <_dtoa_r+0x430>
 100501c:	a80b883a 	mov	r5,r21
 1005020:	a009883a 	mov	r4,r20
 1005024:	880f883a 	mov	r7,r17
 1005028:	800d883a 	mov	r6,r16
 100502c:	1001a7c0 	call	1001a7c <__divdf3>
 1005030:	1029883a 	mov	r20,r2
 1005034:	182b883a 	mov	r21,r3
 1005038:	d8c00c17 	ldw	r3,48(sp)
 100503c:	1805003a 	cmpeq	r2,r3,zero
 1005040:	1000081e 	bne	r2,zero,1005064 <_dtoa_r+0x4b0>
 1005044:	0005883a 	mov	r2,zero
 1005048:	00cffc34 	movhi	r3,16368
 100504c:	180f883a 	mov	r7,r3
 1005050:	a009883a 	mov	r4,r20
 1005054:	a80b883a 	mov	r5,r21
 1005058:	100d883a 	mov	r6,r2
 100505c:	100ae3c0 	call	100ae3c <__ltdf2>
 1005060:	1003fe16 	blt	r2,zero,100605c <_dtoa_r+0x14a8>
 1005064:	b009883a 	mov	r4,r22
 1005068:	1001cd40 	call	1001cd4 <__floatsidf>
 100506c:	180b883a 	mov	r5,r3
 1005070:	1009883a 	mov	r4,r2
 1005074:	a00d883a 	mov	r6,r20
 1005078:	a80f883a 	mov	r7,r21
 100507c:	100a8580 	call	100a858 <__muldf3>
 1005080:	0011883a 	mov	r8,zero
 1005084:	02500734 	movhi	r9,16412
 1005088:	1009883a 	mov	r4,r2
 100508c:	180b883a 	mov	r5,r3
 1005090:	480f883a 	mov	r7,r9
 1005094:	400d883a 	mov	r6,r8
 1005098:	1001a080 	call	1001a08 <__adddf3>
 100509c:	d9000f17 	ldw	r4,60(sp)
 10050a0:	102d883a 	mov	r22,r2
 10050a4:	00bf3034 	movhi	r2,64704
 10050a8:	18b9883a 	add	fp,r3,r2
 10050ac:	e02f883a 	mov	r23,fp
 10050b0:	20028f1e 	bne	r4,zero,1005af0 <_dtoa_r+0xf3c>
 10050b4:	0005883a 	mov	r2,zero
 10050b8:	00d00534 	movhi	r3,16404
 10050bc:	a009883a 	mov	r4,r20
 10050c0:	a80b883a 	mov	r5,r21
 10050c4:	180f883a 	mov	r7,r3
 10050c8:	100d883a 	mov	r6,r2
 10050cc:	10019880 	call	1001988 <__subdf3>
 10050d0:	1009883a 	mov	r4,r2
 10050d4:	e00f883a 	mov	r7,fp
 10050d8:	180b883a 	mov	r5,r3
 10050dc:	b00d883a 	mov	r6,r22
 10050e0:	1025883a 	mov	r18,r2
 10050e4:	1827883a 	mov	r19,r3
 10050e8:	100ad2c0 	call	100ad2c <__gtdf2>
 10050ec:	00834f16 	blt	zero,r2,1005e2c <_dtoa_r+0x1278>
 10050f0:	e0e0003c 	xorhi	r3,fp,32768
 10050f4:	9009883a 	mov	r4,r18
 10050f8:	980b883a 	mov	r5,r19
 10050fc:	180f883a 	mov	r7,r3
 1005100:	b00d883a 	mov	r6,r22
 1005104:	100ae3c0 	call	100ae3c <__ltdf2>
 1005108:	1000080e 	bge	r2,zero,100512c <_dtoa_r+0x578>
 100510c:	0027883a 	mov	r19,zero
 1005110:	0025883a 	mov	r18,zero
 1005114:	d8802617 	ldw	r2,152(sp)
 1005118:	df000517 	ldw	fp,20(sp)
 100511c:	d8000615 	stw	zero,24(sp)
 1005120:	0084303a 	nor	r2,zero,r2
 1005124:	d8800d15 	stw	r2,52(sp)
 1005128:	00019b06 	br	1005798 <_dtoa_r+0xbe4>
 100512c:	d9801217 	ldw	r6,72(sp)
 1005130:	d8801317 	ldw	r2,76(sp)
 1005134:	3029883a 	mov	r20,r6
 1005138:	102b883a 	mov	r21,r2
 100513c:	d8c00217 	ldw	r3,8(sp)
 1005140:	18008516 	blt	r3,zero,1005358 <_dtoa_r+0x7a4>
 1005144:	d9000d17 	ldw	r4,52(sp)
 1005148:	00800384 	movi	r2,14
 100514c:	11008216 	blt	r2,r4,1005358 <_dtoa_r+0x7a4>
 1005150:	200490fa 	slli	r2,r4,3
 1005154:	d9802617 	ldw	r6,152(sp)
 1005158:	00c040b4 	movhi	r3,258
 100515c:	18e53404 	addi	r3,r3,-27440
 1005160:	10c5883a 	add	r2,r2,r3
 1005164:	14800017 	ldw	r18,0(r2)
 1005168:	14c00117 	ldw	r19,4(r2)
 100516c:	30031e16 	blt	r6,zero,1005de8 <_dtoa_r+0x1234>
 1005170:	d9000517 	ldw	r4,20(sp)
 1005174:	d8c00f17 	ldw	r3,60(sp)
 1005178:	a823883a 	mov	r17,r21
 100517c:	a021883a 	mov	r16,r20
 1005180:	192b883a 	add	r21,r3,r4
 1005184:	2039883a 	mov	fp,r4
 1005188:	00000f06 	br	10051c8 <_dtoa_r+0x614>
 100518c:	0005883a 	mov	r2,zero
 1005190:	00d00934 	movhi	r3,16420
 1005194:	5009883a 	mov	r4,r10
 1005198:	580b883a 	mov	r5,r11
 100519c:	180f883a 	mov	r7,r3
 10051a0:	100d883a 	mov	r6,r2
 10051a4:	100a8580 	call	100a858 <__muldf3>
 10051a8:	180b883a 	mov	r5,r3
 10051ac:	000d883a 	mov	r6,zero
 10051b0:	000f883a 	mov	r7,zero
 10051b4:	1009883a 	mov	r4,r2
 10051b8:	1021883a 	mov	r16,r2
 10051bc:	1823883a 	mov	r17,r3
 10051c0:	100aca40 	call	100aca4 <__nedf2>
 10051c4:	10004526 	beq	r2,zero,10052dc <_dtoa_r+0x728>
 10051c8:	900d883a 	mov	r6,r18
 10051cc:	980f883a 	mov	r7,r19
 10051d0:	8009883a 	mov	r4,r16
 10051d4:	880b883a 	mov	r5,r17
 10051d8:	1001a7c0 	call	1001a7c <__divdf3>
 10051dc:	180b883a 	mov	r5,r3
 10051e0:	1009883a 	mov	r4,r2
 10051e4:	1001dcc0 	call	1001dcc <__fixdfsi>
 10051e8:	1009883a 	mov	r4,r2
 10051ec:	1029883a 	mov	r20,r2
 10051f0:	1001cd40 	call	1001cd4 <__floatsidf>
 10051f4:	180f883a 	mov	r7,r3
 10051f8:	9009883a 	mov	r4,r18
 10051fc:	980b883a 	mov	r5,r19
 1005200:	100d883a 	mov	r6,r2
 1005204:	100a8580 	call	100a858 <__muldf3>
 1005208:	180f883a 	mov	r7,r3
 100520c:	880b883a 	mov	r5,r17
 1005210:	8009883a 	mov	r4,r16
 1005214:	100d883a 	mov	r6,r2
 1005218:	10019880 	call	1001988 <__subdf3>
 100521c:	1015883a 	mov	r10,r2
 1005220:	a0800c04 	addi	r2,r20,48
 1005224:	e0800005 	stb	r2,0(fp)
 1005228:	e7000044 	addi	fp,fp,1
 100522c:	1817883a 	mov	r11,r3
 1005230:	e57fd61e 	bne	fp,r21,100518c <_dtoa_r+0x5d8>
 1005234:	500d883a 	mov	r6,r10
 1005238:	180f883a 	mov	r7,r3
 100523c:	5009883a 	mov	r4,r10
 1005240:	180b883a 	mov	r5,r3
 1005244:	1001a080 	call	1001a08 <__adddf3>
 1005248:	100d883a 	mov	r6,r2
 100524c:	9009883a 	mov	r4,r18
 1005250:	980b883a 	mov	r5,r19
 1005254:	180f883a 	mov	r7,r3
 1005258:	1021883a 	mov	r16,r2
 100525c:	1823883a 	mov	r17,r3
 1005260:	100ae3c0 	call	100ae3c <__ltdf2>
 1005264:	10000816 	blt	r2,zero,1005288 <_dtoa_r+0x6d4>
 1005268:	980b883a 	mov	r5,r19
 100526c:	800d883a 	mov	r6,r16
 1005270:	880f883a 	mov	r7,r17
 1005274:	9009883a 	mov	r4,r18
 1005278:	100ac1c0 	call	100ac1c <__eqdf2>
 100527c:	1000171e 	bne	r2,zero,10052dc <_dtoa_r+0x728>
 1005280:	a080004c 	andi	r2,r20,1
 1005284:	10001526 	beq	r2,zero,10052dc <_dtoa_r+0x728>
 1005288:	d8800d17 	ldw	r2,52(sp)
 100528c:	d8800415 	stw	r2,16(sp)
 1005290:	e009883a 	mov	r4,fp
 1005294:	213fffc4 	addi	r4,r4,-1
 1005298:	20c00007 	ldb	r3,0(r4)
 100529c:	00800e44 	movi	r2,57
 10052a0:	1880081e 	bne	r3,r2,10052c4 <_dtoa_r+0x710>
 10052a4:	d8800517 	ldw	r2,20(sp)
 10052a8:	113ffa1e 	bne	r2,r4,1005294 <_dtoa_r+0x6e0>
 10052ac:	d8c00417 	ldw	r3,16(sp)
 10052b0:	d9800517 	ldw	r6,20(sp)
 10052b4:	00800c04 	movi	r2,48
 10052b8:	18c00044 	addi	r3,r3,1
 10052bc:	d8c00415 	stw	r3,16(sp)
 10052c0:	30800005 	stb	r2,0(r6)
 10052c4:	20800003 	ldbu	r2,0(r4)
 10052c8:	d8c00417 	ldw	r3,16(sp)
 10052cc:	27000044 	addi	fp,r4,1
 10052d0:	10800044 	addi	r2,r2,1
 10052d4:	d8c00d15 	stw	r3,52(sp)
 10052d8:	20800005 	stb	r2,0(r4)
 10052dc:	d9001617 	ldw	r4,88(sp)
 10052e0:	d9400717 	ldw	r5,28(sp)
 10052e4:	1007d7c0 	call	1007d7c <_Bfree>
 10052e8:	e0000005 	stb	zero,0(fp)
 10052ec:	d9800d17 	ldw	r6,52(sp)
 10052f0:	d8c02717 	ldw	r3,156(sp)
 10052f4:	d9002917 	ldw	r4,164(sp)
 10052f8:	30800044 	addi	r2,r6,1
 10052fc:	18800015 	stw	r2,0(r3)
 1005300:	20029c26 	beq	r4,zero,1005d74 <_dtoa_r+0x11c0>
 1005304:	d8c00517 	ldw	r3,20(sp)
 1005308:	27000015 	stw	fp,0(r4)
 100530c:	003e5d06 	br	1004c84 <_dtoa_r+0xd0>
 1005310:	d9800d17 	ldw	r6,52(sp)
 1005314:	00c040b4 	movhi	r3,258
 1005318:	18e53404 	addi	r3,r3,-27440
 100531c:	d9001217 	ldw	r4,72(sp)
 1005320:	300490fa 	slli	r2,r6,3
 1005324:	d9401317 	ldw	r5,76(sp)
 1005328:	10c5883a 	add	r2,r2,r3
 100532c:	12000017 	ldw	r8,0(r2)
 1005330:	12400117 	ldw	r9,4(r2)
 1005334:	400d883a 	mov	r6,r8
 1005338:	480f883a 	mov	r7,r9
 100533c:	100ae3c0 	call	100ae3c <__ltdf2>
 1005340:	1000030e 	bge	r2,zero,1005350 <_dtoa_r+0x79c>
 1005344:	d8800d17 	ldw	r2,52(sp)
 1005348:	10bfffc4 	addi	r2,r2,-1
 100534c:	d8800d15 	stw	r2,52(sp)
 1005350:	d8000c15 	stw	zero,48(sp)
 1005354:	003ea806 	br	1004df8 <_dtoa_r+0x244>
 1005358:	d9000b17 	ldw	r4,44(sp)
 100535c:	202cc03a 	cmpne	r22,r4,zero
 1005360:	b000c71e 	bne	r22,zero,1005680 <_dtoa_r+0xacc>
 1005364:	dc001117 	ldw	r16,68(sp)
 1005368:	dc801017 	ldw	r18,64(sp)
 100536c:	0027883a 	mov	r19,zero
 1005370:	04000b0e 	bge	zero,r16,10053a0 <_dtoa_r+0x7ec>
 1005374:	d8c00a17 	ldw	r3,40(sp)
 1005378:	00c0090e 	bge	zero,r3,10053a0 <_dtoa_r+0x7ec>
 100537c:	8005883a 	mov	r2,r16
 1005380:	1c011316 	blt	r3,r16,10057d0 <_dtoa_r+0xc1c>
 1005384:	d9000a17 	ldw	r4,40(sp)
 1005388:	d9801117 	ldw	r6,68(sp)
 100538c:	80a1c83a 	sub	r16,r16,r2
 1005390:	2089c83a 	sub	r4,r4,r2
 1005394:	308dc83a 	sub	r6,r6,r2
 1005398:	d9000a15 	stw	r4,40(sp)
 100539c:	d9801115 	stw	r6,68(sp)
 10053a0:	d8801017 	ldw	r2,64(sp)
 10053a4:	0080150e 	bge	zero,r2,10053fc <_dtoa_r+0x848>
 10053a8:	d8c00b17 	ldw	r3,44(sp)
 10053ac:	1805003a 	cmpeq	r2,r3,zero
 10053b0:	1001c91e 	bne	r2,zero,1005ad8 <_dtoa_r+0xf24>
 10053b4:	04800e0e 	bge	zero,r18,10053f0 <_dtoa_r+0x83c>
 10053b8:	d9001617 	ldw	r4,88(sp)
 10053bc:	980b883a 	mov	r5,r19
 10053c0:	900d883a 	mov	r6,r18
 10053c4:	1008bc80 	call	1008bc8 <__pow5mult>
 10053c8:	d9001617 	ldw	r4,88(sp)
 10053cc:	d9800717 	ldw	r6,28(sp)
 10053d0:	100b883a 	mov	r5,r2
 10053d4:	1027883a 	mov	r19,r2
 10053d8:	100880c0 	call	100880c <__multiply>
 10053dc:	d9001617 	ldw	r4,88(sp)
 10053e0:	d9400717 	ldw	r5,28(sp)
 10053e4:	1023883a 	mov	r17,r2
 10053e8:	1007d7c0 	call	1007d7c <_Bfree>
 10053ec:	dc400715 	stw	r17,28(sp)
 10053f0:	d9001017 	ldw	r4,64(sp)
 10053f4:	248dc83a 	sub	r6,r4,r18
 10053f8:	30010e1e 	bne	r6,zero,1005834 <_dtoa_r+0xc80>
 10053fc:	d9001617 	ldw	r4,88(sp)
 1005400:	04400044 	movi	r17,1
 1005404:	880b883a 	mov	r5,r17
 1005408:	1008a600 	call	1008a60 <__i2b>
 100540c:	d9800917 	ldw	r6,36(sp)
 1005410:	1025883a 	mov	r18,r2
 1005414:	0180040e 	bge	zero,r6,1005428 <_dtoa_r+0x874>
 1005418:	d9001617 	ldw	r4,88(sp)
 100541c:	100b883a 	mov	r5,r2
 1005420:	1008bc80 	call	1008bc8 <__pow5mult>
 1005424:	1025883a 	mov	r18,r2
 1005428:	d8801717 	ldw	r2,92(sp)
 100542c:	8880f30e 	bge	r17,r2,10057fc <_dtoa_r+0xc48>
 1005430:	0023883a 	mov	r17,zero
 1005434:	d9800917 	ldw	r6,36(sp)
 1005438:	30019e1e 	bne	r6,zero,1005ab4 <_dtoa_r+0xf00>
 100543c:	00c00044 	movi	r3,1
 1005440:	d9000a17 	ldw	r4,40(sp)
 1005444:	20c5883a 	add	r2,r4,r3
 1005448:	10c007cc 	andi	r3,r2,31
 100544c:	1800841e 	bne	r3,zero,1005660 <_dtoa_r+0xaac>
 1005450:	00800704 	movi	r2,28
 1005454:	d9000a17 	ldw	r4,40(sp)
 1005458:	d9801117 	ldw	r6,68(sp)
 100545c:	80a1883a 	add	r16,r16,r2
 1005460:	2089883a 	add	r4,r4,r2
 1005464:	308d883a 	add	r6,r6,r2
 1005468:	d9000a15 	stw	r4,40(sp)
 100546c:	d9801115 	stw	r6,68(sp)
 1005470:	d8801117 	ldw	r2,68(sp)
 1005474:	0080050e 	bge	zero,r2,100548c <_dtoa_r+0x8d8>
 1005478:	d9400717 	ldw	r5,28(sp)
 100547c:	d9001617 	ldw	r4,88(sp)
 1005480:	100d883a 	mov	r6,r2
 1005484:	10086c00 	call	10086c0 <__lshift>
 1005488:	d8800715 	stw	r2,28(sp)
 100548c:	d8c00a17 	ldw	r3,40(sp)
 1005490:	00c0050e 	bge	zero,r3,10054a8 <_dtoa_r+0x8f4>
 1005494:	d9001617 	ldw	r4,88(sp)
 1005498:	900b883a 	mov	r5,r18
 100549c:	180d883a 	mov	r6,r3
 10054a0:	10086c00 	call	10086c0 <__lshift>
 10054a4:	1025883a 	mov	r18,r2
 10054a8:	d9000c17 	ldw	r4,48(sp)
 10054ac:	2005003a 	cmpeq	r2,r4,zero
 10054b0:	10016f26 	beq	r2,zero,1005a70 <_dtoa_r+0xebc>
 10054b4:	d9000f17 	ldw	r4,60(sp)
 10054b8:	0102170e 	bge	zero,r4,1005d18 <_dtoa_r+0x1164>
 10054bc:	d9800b17 	ldw	r6,44(sp)
 10054c0:	3005003a 	cmpeq	r2,r6,zero
 10054c4:	1000881e 	bne	r2,zero,10056e8 <_dtoa_r+0xb34>
 10054c8:	0400050e 	bge	zero,r16,10054e0 <_dtoa_r+0x92c>
 10054cc:	d9001617 	ldw	r4,88(sp)
 10054d0:	980b883a 	mov	r5,r19
 10054d4:	800d883a 	mov	r6,r16
 10054d8:	10086c00 	call	10086c0 <__lshift>
 10054dc:	1027883a 	mov	r19,r2
 10054e0:	8804c03a 	cmpne	r2,r17,zero
 10054e4:	1002541e 	bne	r2,zero,1005e38 <_dtoa_r+0x1284>
 10054e8:	980b883a 	mov	r5,r19
 10054ec:	dd800517 	ldw	r22,20(sp)
 10054f0:	dcc00615 	stw	r19,24(sp)
 10054f4:	a700004c 	andi	fp,r20,1
 10054f8:	2827883a 	mov	r19,r5
 10054fc:	d9000717 	ldw	r4,28(sp)
 1005500:	900b883a 	mov	r5,r18
 1005504:	10049700 	call	1004970 <quorem>
 1005508:	d9000717 	ldw	r4,28(sp)
 100550c:	d9400617 	ldw	r5,24(sp)
 1005510:	1023883a 	mov	r17,r2
 1005514:	8dc00c04 	addi	r23,r17,48
 1005518:	1007ed80 	call	1007ed8 <__mcmp>
 100551c:	d9001617 	ldw	r4,88(sp)
 1005520:	900b883a 	mov	r5,r18
 1005524:	980d883a 	mov	r6,r19
 1005528:	1029883a 	mov	r20,r2
 100552c:	10085340 	call	1008534 <__mdiff>
 1005530:	102b883a 	mov	r21,r2
 1005534:	10800317 	ldw	r2,12(r2)
 1005538:	1001281e 	bne	r2,zero,10059dc <_dtoa_r+0xe28>
 100553c:	d9000717 	ldw	r4,28(sp)
 1005540:	a80b883a 	mov	r5,r21
 1005544:	1007ed80 	call	1007ed8 <__mcmp>
 1005548:	d9001617 	ldw	r4,88(sp)
 100554c:	1021883a 	mov	r16,r2
 1005550:	a80b883a 	mov	r5,r21
 1005554:	1007d7c0 	call	1007d7c <_Bfree>
 1005558:	8000041e 	bne	r16,zero,100556c <_dtoa_r+0x9b8>
 100555c:	d8801717 	ldw	r2,92(sp)
 1005560:	1000021e 	bne	r2,zero,100556c <_dtoa_r+0x9b8>
 1005564:	e004c03a 	cmpne	r2,fp,zero
 1005568:	10011726 	beq	r2,zero,10059c8 <_dtoa_r+0xe14>
 100556c:	a0010616 	blt	r20,zero,1005988 <_dtoa_r+0xdd4>
 1005570:	a000041e 	bne	r20,zero,1005584 <_dtoa_r+0x9d0>
 1005574:	d8c01717 	ldw	r3,92(sp)
 1005578:	1800021e 	bne	r3,zero,1005584 <_dtoa_r+0x9d0>
 100557c:	e004c03a 	cmpne	r2,fp,zero
 1005580:	10010126 	beq	r2,zero,1005988 <_dtoa_r+0xdd4>
 1005584:	04023d16 	blt	zero,r16,1005e7c <_dtoa_r+0x12c8>
 1005588:	b5c00005 	stb	r23,0(r22)
 100558c:	d9800517 	ldw	r6,20(sp)
 1005590:	d9000f17 	ldw	r4,60(sp)
 1005594:	b5800044 	addi	r22,r22,1
 1005598:	3105883a 	add	r2,r6,r4
 100559c:	b0806526 	beq	r22,r2,1005734 <_dtoa_r+0xb80>
 10055a0:	d9400717 	ldw	r5,28(sp)
 10055a4:	d9001617 	ldw	r4,88(sp)
 10055a8:	01800284 	movi	r6,10
 10055ac:	000f883a 	mov	r7,zero
 10055b0:	1008a9c0 	call	1008a9c <__multadd>
 10055b4:	d8800715 	stw	r2,28(sp)
 10055b8:	d8800617 	ldw	r2,24(sp)
 10055bc:	14c10c26 	beq	r2,r19,10059f0 <_dtoa_r+0xe3c>
 10055c0:	d9400617 	ldw	r5,24(sp)
 10055c4:	d9001617 	ldw	r4,88(sp)
 10055c8:	01800284 	movi	r6,10
 10055cc:	000f883a 	mov	r7,zero
 10055d0:	1008a9c0 	call	1008a9c <__multadd>
 10055d4:	d9001617 	ldw	r4,88(sp)
 10055d8:	980b883a 	mov	r5,r19
 10055dc:	01800284 	movi	r6,10
 10055e0:	000f883a 	mov	r7,zero
 10055e4:	d8800615 	stw	r2,24(sp)
 10055e8:	1008a9c0 	call	1008a9c <__multadd>
 10055ec:	1027883a 	mov	r19,r2
 10055f0:	003fc206 	br	10054fc <_dtoa_r+0x948>
 10055f4:	2445c83a 	sub	r2,r4,r17
 10055f8:	a088983a 	sll	r4,r20,r2
 10055fc:	003e4b06 	br	1004f2c <_dtoa_r+0x378>
 1005600:	01bfffc4 	movi	r6,-1
 1005604:	00800044 	movi	r2,1
 1005608:	d9800e15 	stw	r6,56(sp)
 100560c:	d9800f15 	stw	r6,60(sp)
 1005610:	d8800b15 	stw	r2,44(sp)
 1005614:	d8c01617 	ldw	r3,88(sp)
 1005618:	008005c4 	movi	r2,23
 100561c:	18001115 	stw	zero,68(r3)
 1005620:	1580082e 	bgeu	r2,r22,1005644 <_dtoa_r+0xa90>
 1005624:	00c00104 	movi	r3,4
 1005628:	0009883a 	mov	r4,zero
 100562c:	18c7883a 	add	r3,r3,r3
 1005630:	18800504 	addi	r2,r3,20
 1005634:	21000044 	addi	r4,r4,1
 1005638:	b0bffc2e 	bgeu	r22,r2,100562c <_dtoa_r+0xa78>
 100563c:	d9801617 	ldw	r6,88(sp)
 1005640:	31001115 	stw	r4,68(r6)
 1005644:	dc000f17 	ldw	r16,60(sp)
 1005648:	003e4b06 	br	1004f78 <_dtoa_r+0x3c4>
 100564c:	d9801717 	ldw	r6,92(sp)
 1005650:	0023883a 	mov	r17,zero
 1005654:	31bfff04 	addi	r6,r6,-4
 1005658:	d9801715 	stw	r6,92(sp)
 100565c:	003df806 	br	1004e40 <_dtoa_r+0x28c>
 1005660:	00800804 	movi	r2,32
 1005664:	10c9c83a 	sub	r4,r2,r3
 1005668:	00c00104 	movi	r3,4
 100566c:	19005a16 	blt	r3,r4,10057d8 <_dtoa_r+0xc24>
 1005670:	008000c4 	movi	r2,3
 1005674:	113f7e16 	blt	r2,r4,1005470 <_dtoa_r+0x8bc>
 1005678:	20800704 	addi	r2,r4,28
 100567c:	003f7506 	br	1005454 <_dtoa_r+0x8a0>
 1005680:	d9801717 	ldw	r6,92(sp)
 1005684:	00800044 	movi	r2,1
 1005688:	1180a10e 	bge	r2,r6,1005910 <_dtoa_r+0xd5c>
 100568c:	d9800f17 	ldw	r6,60(sp)
 1005690:	d8c01017 	ldw	r3,64(sp)
 1005694:	30bfffc4 	addi	r2,r6,-1
 1005698:	1881c616 	blt	r3,r2,1005db4 <_dtoa_r+0x1200>
 100569c:	18a5c83a 	sub	r18,r3,r2
 10056a0:	d8800f17 	ldw	r2,60(sp)
 10056a4:	10026216 	blt	r2,zero,1006030 <_dtoa_r+0x147c>
 10056a8:	dc001117 	ldw	r16,68(sp)
 10056ac:	1007883a 	mov	r3,r2
 10056b0:	d9800a17 	ldw	r6,40(sp)
 10056b4:	d8801117 	ldw	r2,68(sp)
 10056b8:	d9001617 	ldw	r4,88(sp)
 10056bc:	30cd883a 	add	r6,r6,r3
 10056c0:	10c5883a 	add	r2,r2,r3
 10056c4:	01400044 	movi	r5,1
 10056c8:	d9800a15 	stw	r6,40(sp)
 10056cc:	d8801115 	stw	r2,68(sp)
 10056d0:	1008a600 	call	1008a60 <__i2b>
 10056d4:	1027883a 	mov	r19,r2
 10056d8:	003f2506 	br	1005370 <_dtoa_r+0x7bc>
 10056dc:	00c040b4 	movhi	r3,258
 10056e0:	18e51604 	addi	r3,r3,-27560
 10056e4:	003d6706 	br	1004c84 <_dtoa_r+0xd0>
 10056e8:	dd800517 	ldw	r22,20(sp)
 10056ec:	04000044 	movi	r16,1
 10056f0:	00000706 	br	1005710 <_dtoa_r+0xb5c>
 10056f4:	d9400717 	ldw	r5,28(sp)
 10056f8:	d9001617 	ldw	r4,88(sp)
 10056fc:	01800284 	movi	r6,10
 1005700:	000f883a 	mov	r7,zero
 1005704:	1008a9c0 	call	1008a9c <__multadd>
 1005708:	d8800715 	stw	r2,28(sp)
 100570c:	84000044 	addi	r16,r16,1
 1005710:	d9000717 	ldw	r4,28(sp)
 1005714:	900b883a 	mov	r5,r18
 1005718:	10049700 	call	1004970 <quorem>
 100571c:	15c00c04 	addi	r23,r2,48
 1005720:	b5c00005 	stb	r23,0(r22)
 1005724:	d8c00f17 	ldw	r3,60(sp)
 1005728:	b5800044 	addi	r22,r22,1
 100572c:	80fff116 	blt	r16,r3,10056f4 <_dtoa_r+0xb40>
 1005730:	d8000615 	stw	zero,24(sp)
 1005734:	d9400717 	ldw	r5,28(sp)
 1005738:	d9001617 	ldw	r4,88(sp)
 100573c:	01800044 	movi	r6,1
 1005740:	10086c00 	call	10086c0 <__lshift>
 1005744:	1009883a 	mov	r4,r2
 1005748:	900b883a 	mov	r5,r18
 100574c:	d8800715 	stw	r2,28(sp)
 1005750:	1007ed80 	call	1007ed8 <__mcmp>
 1005754:	00803c0e 	bge	zero,r2,1005848 <_dtoa_r+0xc94>
 1005758:	b009883a 	mov	r4,r22
 100575c:	213fffc4 	addi	r4,r4,-1
 1005760:	21400003 	ldbu	r5,0(r4)
 1005764:	00800e44 	movi	r2,57
 1005768:	28c03fcc 	andi	r3,r5,255
 100576c:	18c0201c 	xori	r3,r3,128
 1005770:	18ffe004 	addi	r3,r3,-128
 1005774:	1881981e 	bne	r3,r2,1005dd8 <_dtoa_r+0x1224>
 1005778:	d9800517 	ldw	r6,20(sp)
 100577c:	21bff71e 	bne	r4,r6,100575c <_dtoa_r+0xba8>
 1005780:	d8800d17 	ldw	r2,52(sp)
 1005784:	37000044 	addi	fp,r6,1
 1005788:	10800044 	addi	r2,r2,1
 100578c:	d8800d15 	stw	r2,52(sp)
 1005790:	00800c44 	movi	r2,49
 1005794:	30800005 	stb	r2,0(r6)
 1005798:	d9001617 	ldw	r4,88(sp)
 100579c:	900b883a 	mov	r5,r18
 10057a0:	1007d7c0 	call	1007d7c <_Bfree>
 10057a4:	983ecd26 	beq	r19,zero,10052dc <_dtoa_r+0x728>
 10057a8:	d8c00617 	ldw	r3,24(sp)
 10057ac:	18000426 	beq	r3,zero,10057c0 <_dtoa_r+0xc0c>
 10057b0:	1cc00326 	beq	r3,r19,10057c0 <_dtoa_r+0xc0c>
 10057b4:	d9001617 	ldw	r4,88(sp)
 10057b8:	180b883a 	mov	r5,r3
 10057bc:	1007d7c0 	call	1007d7c <_Bfree>
 10057c0:	d9001617 	ldw	r4,88(sp)
 10057c4:	980b883a 	mov	r5,r19
 10057c8:	1007d7c0 	call	1007d7c <_Bfree>
 10057cc:	003ec306 	br	10052dc <_dtoa_r+0x728>
 10057d0:	1805883a 	mov	r2,r3
 10057d4:	003eeb06 	br	1005384 <_dtoa_r+0x7d0>
 10057d8:	d9800a17 	ldw	r6,40(sp)
 10057dc:	d8c01117 	ldw	r3,68(sp)
 10057e0:	20bfff04 	addi	r2,r4,-4
 10057e4:	308d883a 	add	r6,r6,r2
 10057e8:	1887883a 	add	r3,r3,r2
 10057ec:	80a1883a 	add	r16,r16,r2
 10057f0:	d9800a15 	stw	r6,40(sp)
 10057f4:	d8c01115 	stw	r3,68(sp)
 10057f8:	003f1d06 	br	1005470 <_dtoa_r+0x8bc>
 10057fc:	a03f0c1e 	bne	r20,zero,1005430 <_dtoa_r+0x87c>
 1005800:	00800434 	movhi	r2,16
 1005804:	10bfffc4 	addi	r2,r2,-1
 1005808:	a884703a 	and	r2,r21,r2
 100580c:	103f081e 	bne	r2,zero,1005430 <_dtoa_r+0x87c>
 1005810:	a89ffc2c 	andhi	r2,r21,32752
 1005814:	103f0626 	beq	r2,zero,1005430 <_dtoa_r+0x87c>
 1005818:	d8c01117 	ldw	r3,68(sp)
 100581c:	d9000a17 	ldw	r4,40(sp)
 1005820:	18c00044 	addi	r3,r3,1
 1005824:	21000044 	addi	r4,r4,1
 1005828:	d8c01115 	stw	r3,68(sp)
 100582c:	d9000a15 	stw	r4,40(sp)
 1005830:	003f0006 	br	1005434 <_dtoa_r+0x880>
 1005834:	d9400717 	ldw	r5,28(sp)
 1005838:	d9001617 	ldw	r4,88(sp)
 100583c:	1008bc80 	call	1008bc8 <__pow5mult>
 1005840:	d8800715 	stw	r2,28(sp)
 1005844:	003eed06 	br	10053fc <_dtoa_r+0x848>
 1005848:	1000021e 	bne	r2,zero,1005854 <_dtoa_r+0xca0>
 100584c:	b880004c 	andi	r2,r23,1
 1005850:	103fc11e 	bne	r2,zero,1005758 <_dtoa_r+0xba4>
 1005854:	b5bfffc4 	addi	r22,r22,-1
 1005858:	b0c00007 	ldb	r3,0(r22)
 100585c:	00800c04 	movi	r2,48
 1005860:	18bffc26 	beq	r3,r2,1005854 <_dtoa_r+0xca0>
 1005864:	b7000044 	addi	fp,r22,1
 1005868:	003fcb06 	br	1005798 <_dtoa_r+0xbe4>
 100586c:	d9800d17 	ldw	r6,52(sp)
 1005870:	018fc83a 	sub	r7,zero,r6
 1005874:	3801f726 	beq	r7,zero,1006054 <_dtoa_r+0x14a0>
 1005878:	398003cc 	andi	r6,r7,15
 100587c:	300c90fa 	slli	r6,r6,3
 1005880:	014040b4 	movhi	r5,258
 1005884:	29653404 	addi	r5,r5,-27440
 1005888:	d9001217 	ldw	r4,72(sp)
 100588c:	314d883a 	add	r6,r6,r5
 1005890:	30c00117 	ldw	r3,4(r6)
 1005894:	30800017 	ldw	r2,0(r6)
 1005898:	d9401317 	ldw	r5,76(sp)
 100589c:	3821d13a 	srai	r16,r7,4
 10058a0:	100d883a 	mov	r6,r2
 10058a4:	180f883a 	mov	r7,r3
 10058a8:	100a8580 	call	100a858 <__muldf3>
 10058ac:	1011883a 	mov	r8,r2
 10058b0:	1813883a 	mov	r9,r3
 10058b4:	1029883a 	mov	r20,r2
 10058b8:	182b883a 	mov	r21,r3
 10058bc:	8001e526 	beq	r16,zero,1006054 <_dtoa_r+0x14a0>
 10058c0:	05800084 	movi	r22,2
 10058c4:	044040b4 	movhi	r17,258
 10058c8:	8c656604 	addi	r17,r17,-27240
 10058cc:	8080004c 	andi	r2,r16,1
 10058d0:	1005003a 	cmpeq	r2,r2,zero
 10058d4:	1000081e 	bne	r2,zero,10058f8 <_dtoa_r+0xd44>
 10058d8:	89800017 	ldw	r6,0(r17)
 10058dc:	89c00117 	ldw	r7,4(r17)
 10058e0:	480b883a 	mov	r5,r9
 10058e4:	4009883a 	mov	r4,r8
 10058e8:	100a8580 	call	100a858 <__muldf3>
 10058ec:	1011883a 	mov	r8,r2
 10058f0:	b5800044 	addi	r22,r22,1
 10058f4:	1813883a 	mov	r9,r3
 10058f8:	8021d07a 	srai	r16,r16,1
 10058fc:	8c400204 	addi	r17,r17,8
 1005900:	803ff21e 	bne	r16,zero,10058cc <_dtoa_r+0xd18>
 1005904:	4029883a 	mov	r20,r8
 1005908:	482b883a 	mov	r21,r9
 100590c:	003dca06 	br	1005038 <_dtoa_r+0x484>
 1005910:	d9000817 	ldw	r4,32(sp)
 1005914:	2005003a 	cmpeq	r2,r4,zero
 1005918:	1001f61e 	bne	r2,zero,10060f4 <_dtoa_r+0x1540>
 100591c:	dc001117 	ldw	r16,68(sp)
 1005920:	dc801017 	ldw	r18,64(sp)
 1005924:	18c10cc4 	addi	r3,r3,1075
 1005928:	003f6106 	br	10056b0 <_dtoa_r+0xafc>
 100592c:	d8000b15 	stw	zero,44(sp)
 1005930:	d9802617 	ldw	r6,152(sp)
 1005934:	d8c00d17 	ldw	r3,52(sp)
 1005938:	30800044 	addi	r2,r6,1
 100593c:	18ad883a 	add	r22,r3,r2
 1005940:	b13fffc4 	addi	r4,r22,-1
 1005944:	d9000e15 	stw	r4,56(sp)
 1005948:	0581f60e 	bge	zero,r22,1006124 <_dtoa_r+0x1570>
 100594c:	dd800f15 	stw	r22,60(sp)
 1005950:	003f3006 	br	1005614 <_dtoa_r+0xa60>
 1005954:	d8000b15 	stw	zero,44(sp)
 1005958:	d9002617 	ldw	r4,152(sp)
 100595c:	0101eb0e 	bge	zero,r4,100610c <_dtoa_r+0x1558>
 1005960:	202d883a 	mov	r22,r4
 1005964:	d9000e15 	stw	r4,56(sp)
 1005968:	d9000f15 	stw	r4,60(sp)
 100596c:	003f2906 	br	1005614 <_dtoa_r+0xa60>
 1005970:	01800044 	movi	r6,1
 1005974:	d9800b15 	stw	r6,44(sp)
 1005978:	003ff706 	br	1005958 <_dtoa_r+0xda4>
 100597c:	01000044 	movi	r4,1
 1005980:	d9000b15 	stw	r4,44(sp)
 1005984:	003fea06 	br	1005930 <_dtoa_r+0xd7c>
 1005988:	04000c0e 	bge	zero,r16,10059bc <_dtoa_r+0xe08>
 100598c:	d9400717 	ldw	r5,28(sp)
 1005990:	d9001617 	ldw	r4,88(sp)
 1005994:	01800044 	movi	r6,1
 1005998:	10086c00 	call	10086c0 <__lshift>
 100599c:	1009883a 	mov	r4,r2
 10059a0:	900b883a 	mov	r5,r18
 10059a4:	d8800715 	stw	r2,28(sp)
 10059a8:	1007ed80 	call	1007ed8 <__mcmp>
 10059ac:	0081e00e 	bge	zero,r2,1006130 <_dtoa_r+0x157c>
 10059b0:	bdc00044 	addi	r23,r23,1
 10059b4:	00800e84 	movi	r2,58
 10059b8:	b881a226 	beq	r23,r2,1006044 <_dtoa_r+0x1490>
 10059bc:	b7000044 	addi	fp,r22,1
 10059c0:	b5c00005 	stb	r23,0(r22)
 10059c4:	003f7406 	br	1005798 <_dtoa_r+0xbe4>
 10059c8:	00800e44 	movi	r2,57
 10059cc:	b8819d26 	beq	r23,r2,1006044 <_dtoa_r+0x1490>
 10059d0:	053ffa0e 	bge	zero,r20,10059bc <_dtoa_r+0xe08>
 10059d4:	8dc00c44 	addi	r23,r17,49
 10059d8:	003ff806 	br	10059bc <_dtoa_r+0xe08>
 10059dc:	d9001617 	ldw	r4,88(sp)
 10059e0:	a80b883a 	mov	r5,r21
 10059e4:	04000044 	movi	r16,1
 10059e8:	1007d7c0 	call	1007d7c <_Bfree>
 10059ec:	003edf06 	br	100556c <_dtoa_r+0x9b8>
 10059f0:	d9001617 	ldw	r4,88(sp)
 10059f4:	980b883a 	mov	r5,r19
 10059f8:	01800284 	movi	r6,10
 10059fc:	000f883a 	mov	r7,zero
 1005a00:	1008a9c0 	call	1008a9c <__multadd>
 1005a04:	1027883a 	mov	r19,r2
 1005a08:	d8800615 	stw	r2,24(sp)
 1005a0c:	003ebb06 	br	10054fc <_dtoa_r+0x948>
 1005a10:	d9801117 	ldw	r6,68(sp)
 1005a14:	d8800d17 	ldw	r2,52(sp)
 1005a18:	d8000915 	stw	zero,36(sp)
 1005a1c:	308dc83a 	sub	r6,r6,r2
 1005a20:	0087c83a 	sub	r3,zero,r2
 1005a24:	d9801115 	stw	r6,68(sp)
 1005a28:	d8c01015 	stw	r3,64(sp)
 1005a2c:	003cfe06 	br	1004e28 <_dtoa_r+0x274>
 1005a30:	018dc83a 	sub	r6,zero,r6
 1005a34:	d9801115 	stw	r6,68(sp)
 1005a38:	d8000a15 	stw	zero,40(sp)
 1005a3c:	003cf306 	br	1004e0c <_dtoa_r+0x258>
 1005a40:	d9000d17 	ldw	r4,52(sp)
 1005a44:	1001cd40 	call	1001cd4 <__floatsidf>
 1005a48:	880b883a 	mov	r5,r17
 1005a4c:	8009883a 	mov	r4,r16
 1005a50:	180f883a 	mov	r7,r3
 1005a54:	100d883a 	mov	r6,r2
 1005a58:	100aca40 	call	100aca4 <__nedf2>
 1005a5c:	103ce126 	beq	r2,zero,1004de4 <_dtoa_r+0x230>
 1005a60:	d9800d17 	ldw	r6,52(sp)
 1005a64:	31bfffc4 	addi	r6,r6,-1
 1005a68:	d9800d15 	stw	r6,52(sp)
 1005a6c:	003cdd06 	br	1004de4 <_dtoa_r+0x230>
 1005a70:	d9000717 	ldw	r4,28(sp)
 1005a74:	900b883a 	mov	r5,r18
 1005a78:	1007ed80 	call	1007ed8 <__mcmp>
 1005a7c:	103e8d0e 	bge	r2,zero,10054b4 <_dtoa_r+0x900>
 1005a80:	d9400717 	ldw	r5,28(sp)
 1005a84:	d9001617 	ldw	r4,88(sp)
 1005a88:	01800284 	movi	r6,10
 1005a8c:	000f883a 	mov	r7,zero
 1005a90:	1008a9c0 	call	1008a9c <__multadd>
 1005a94:	d9800d17 	ldw	r6,52(sp)
 1005a98:	d8800715 	stw	r2,28(sp)
 1005a9c:	31bfffc4 	addi	r6,r6,-1
 1005aa0:	d9800d15 	stw	r6,52(sp)
 1005aa4:	b001a71e 	bne	r22,zero,1006144 <_dtoa_r+0x1590>
 1005aa8:	d8800e17 	ldw	r2,56(sp)
 1005aac:	d8800f15 	stw	r2,60(sp)
 1005ab0:	003e8006 	br	10054b4 <_dtoa_r+0x900>
 1005ab4:	90800417 	ldw	r2,16(r18)
 1005ab8:	1085883a 	add	r2,r2,r2
 1005abc:	1085883a 	add	r2,r2,r2
 1005ac0:	1485883a 	add	r2,r2,r18
 1005ac4:	11000417 	ldw	r4,16(r2)
 1005ac8:	1007da40 	call	1007da4 <__hi0bits>
 1005acc:	00c00804 	movi	r3,32
 1005ad0:	1887c83a 	sub	r3,r3,r2
 1005ad4:	003e5a06 	br	1005440 <_dtoa_r+0x88c>
 1005ad8:	d9400717 	ldw	r5,28(sp)
 1005adc:	d9801017 	ldw	r6,64(sp)
 1005ae0:	d9001617 	ldw	r4,88(sp)
 1005ae4:	1008bc80 	call	1008bc8 <__pow5mult>
 1005ae8:	d8800715 	stw	r2,28(sp)
 1005aec:	003e4306 	br	10053fc <_dtoa_r+0x848>
 1005af0:	d9800f17 	ldw	r6,60(sp)
 1005af4:	d8800d17 	ldw	r2,52(sp)
 1005af8:	d9800315 	stw	r6,12(sp)
 1005afc:	d8800415 	stw	r2,16(sp)
 1005b00:	d8c00b17 	ldw	r3,44(sp)
 1005b04:	1805003a 	cmpeq	r2,r3,zero
 1005b08:	1000e21e 	bne	r2,zero,1005e94 <_dtoa_r+0x12e0>
 1005b0c:	d9000317 	ldw	r4,12(sp)
 1005b10:	0005883a 	mov	r2,zero
 1005b14:	00cff834 	movhi	r3,16352
 1005b18:	200c90fa 	slli	r6,r4,3
 1005b1c:	010040b4 	movhi	r4,258
 1005b20:	21253404 	addi	r4,r4,-27440
 1005b24:	180b883a 	mov	r5,r3
 1005b28:	310d883a 	add	r6,r6,r4
 1005b2c:	327fff17 	ldw	r9,-4(r6)
 1005b30:	323ffe17 	ldw	r8,-8(r6)
 1005b34:	1009883a 	mov	r4,r2
 1005b38:	480f883a 	mov	r7,r9
 1005b3c:	400d883a 	mov	r6,r8
 1005b40:	1001a7c0 	call	1001a7c <__divdf3>
 1005b44:	180b883a 	mov	r5,r3
 1005b48:	b00d883a 	mov	r6,r22
 1005b4c:	b80f883a 	mov	r7,r23
 1005b50:	1009883a 	mov	r4,r2
 1005b54:	10019880 	call	1001988 <__subdf3>
 1005b58:	a80b883a 	mov	r5,r21
 1005b5c:	a009883a 	mov	r4,r20
 1005b60:	d8c01915 	stw	r3,100(sp)
 1005b64:	d8801815 	stw	r2,96(sp)
 1005b68:	1001dcc0 	call	1001dcc <__fixdfsi>
 1005b6c:	1009883a 	mov	r4,r2
 1005b70:	1027883a 	mov	r19,r2
 1005b74:	1001cd40 	call	1001cd4 <__floatsidf>
 1005b78:	a80b883a 	mov	r5,r21
 1005b7c:	a009883a 	mov	r4,r20
 1005b80:	180f883a 	mov	r7,r3
 1005b84:	100d883a 	mov	r6,r2
 1005b88:	10019880 	call	1001988 <__subdf3>
 1005b8c:	d9801817 	ldw	r6,96(sp)
 1005b90:	1823883a 	mov	r17,r3
 1005b94:	d8801415 	stw	r2,80(sp)
 1005b98:	302d883a 	mov	r22,r6
 1005b9c:	d9800517 	ldw	r6,20(sp)
 1005ba0:	9cc00c04 	addi	r19,r19,48
 1005ba4:	dc401515 	stw	r17,84(sp)
 1005ba8:	d8c01917 	ldw	r3,100(sp)
 1005bac:	34c00005 	stb	r19,0(r6)
 1005bb0:	d8800517 	ldw	r2,20(sp)
 1005bb4:	d9401917 	ldw	r5,100(sp)
 1005bb8:	d9801417 	ldw	r6,80(sp)
 1005bbc:	b009883a 	mov	r4,r22
 1005bc0:	880f883a 	mov	r7,r17
 1005bc4:	182f883a 	mov	r23,r3
 1005bc8:	17000044 	addi	fp,r2,1
 1005bcc:	100ad2c0 	call	100ad2c <__gtdf2>
 1005bd0:	00804e16 	blt	zero,r2,1005d0c <_dtoa_r+0x1158>
 1005bd4:	d9801417 	ldw	r6,80(sp)
 1005bd8:	0005883a 	mov	r2,zero
 1005bdc:	00cffc34 	movhi	r3,16368
 1005be0:	180b883a 	mov	r5,r3
 1005be4:	880f883a 	mov	r7,r17
 1005be8:	1009883a 	mov	r4,r2
 1005bec:	10019880 	call	1001988 <__subdf3>
 1005bf0:	d9401917 	ldw	r5,100(sp)
 1005bf4:	180f883a 	mov	r7,r3
 1005bf8:	b009883a 	mov	r4,r22
 1005bfc:	100d883a 	mov	r6,r2
 1005c00:	100ad2c0 	call	100ad2c <__gtdf2>
 1005c04:	00bda216 	blt	zero,r2,1005290 <_dtoa_r+0x6dc>
 1005c08:	d8c00317 	ldw	r3,12(sp)
 1005c0c:	00800044 	movi	r2,1
 1005c10:	10c01216 	blt	r2,r3,1005c5c <_dtoa_r+0x10a8>
 1005c14:	003d4506 	br	100512c <_dtoa_r+0x578>
 1005c18:	d9801417 	ldw	r6,80(sp)
 1005c1c:	0005883a 	mov	r2,zero
 1005c20:	00cffc34 	movhi	r3,16368
 1005c24:	180b883a 	mov	r5,r3
 1005c28:	880f883a 	mov	r7,r17
 1005c2c:	1009883a 	mov	r4,r2
 1005c30:	10019880 	call	1001988 <__subdf3>
 1005c34:	d9c01b17 	ldw	r7,108(sp)
 1005c38:	180b883a 	mov	r5,r3
 1005c3c:	1009883a 	mov	r4,r2
 1005c40:	b00d883a 	mov	r6,r22
 1005c44:	100ae3c0 	call	100ae3c <__ltdf2>
 1005c48:	103d9116 	blt	r2,zero,1005290 <_dtoa_r+0x6dc>
 1005c4c:	d9800517 	ldw	r6,20(sp)
 1005c50:	d9000317 	ldw	r4,12(sp)
 1005c54:	3105883a 	add	r2,r6,r4
 1005c58:	e0bd3426 	beq	fp,r2,100512c <_dtoa_r+0x578>
 1005c5c:	04500934 	movhi	r17,16420
 1005c60:	0021883a 	mov	r16,zero
 1005c64:	b80b883a 	mov	r5,r23
 1005c68:	b009883a 	mov	r4,r22
 1005c6c:	800d883a 	mov	r6,r16
 1005c70:	880f883a 	mov	r7,r17
 1005c74:	100a8580 	call	100a858 <__muldf3>
 1005c78:	d9401517 	ldw	r5,84(sp)
 1005c7c:	d9001417 	ldw	r4,80(sp)
 1005c80:	880f883a 	mov	r7,r17
 1005c84:	000d883a 	mov	r6,zero
 1005c88:	d8801a15 	stw	r2,104(sp)
 1005c8c:	d8c01b15 	stw	r3,108(sp)
 1005c90:	100a8580 	call	100a858 <__muldf3>
 1005c94:	180b883a 	mov	r5,r3
 1005c98:	1009883a 	mov	r4,r2
 1005c9c:	1823883a 	mov	r17,r3
 1005ca0:	1021883a 	mov	r16,r2
 1005ca4:	1001dcc0 	call	1001dcc <__fixdfsi>
 1005ca8:	1009883a 	mov	r4,r2
 1005cac:	102b883a 	mov	r21,r2
 1005cb0:	1001cd40 	call	1001cd4 <__floatsidf>
 1005cb4:	880b883a 	mov	r5,r17
 1005cb8:	8009883a 	mov	r4,r16
 1005cbc:	180f883a 	mov	r7,r3
 1005cc0:	100d883a 	mov	r6,r2
 1005cc4:	10019880 	call	1001988 <__subdf3>
 1005cc8:	1021883a 	mov	r16,r2
 1005ccc:	d9001b17 	ldw	r4,108(sp)
 1005cd0:	1823883a 	mov	r17,r3
 1005cd4:	dc001415 	stw	r16,80(sp)
 1005cd8:	ad400c04 	addi	r21,r21,48
 1005cdc:	dc401515 	stw	r17,84(sp)
 1005ce0:	d8801a17 	ldw	r2,104(sp)
 1005ce4:	e5400005 	stb	r21,0(fp)
 1005ce8:	202f883a 	mov	r23,r4
 1005cec:	d9c01b17 	ldw	r7,108(sp)
 1005cf0:	d9001417 	ldw	r4,80(sp)
 1005cf4:	880b883a 	mov	r5,r17
 1005cf8:	100d883a 	mov	r6,r2
 1005cfc:	102d883a 	mov	r22,r2
 1005d00:	e7000044 	addi	fp,fp,1
 1005d04:	100ae3c0 	call	100ae3c <__ltdf2>
 1005d08:	103fc30e 	bge	r2,zero,1005c18 <_dtoa_r+0x1064>
 1005d0c:	d9000417 	ldw	r4,16(sp)
 1005d10:	d9000d15 	stw	r4,52(sp)
 1005d14:	003d7106 	br	10052dc <_dtoa_r+0x728>
 1005d18:	d9801717 	ldw	r6,92(sp)
 1005d1c:	00800084 	movi	r2,2
 1005d20:	11bde60e 	bge	r2,r6,10054bc <_dtoa_r+0x908>
 1005d24:	203cfb1e 	bne	r4,zero,1005114 <_dtoa_r+0x560>
 1005d28:	d9001617 	ldw	r4,88(sp)
 1005d2c:	900b883a 	mov	r5,r18
 1005d30:	01800144 	movi	r6,5
 1005d34:	000f883a 	mov	r7,zero
 1005d38:	1008a9c0 	call	1008a9c <__multadd>
 1005d3c:	d9000717 	ldw	r4,28(sp)
 1005d40:	100b883a 	mov	r5,r2
 1005d44:	1025883a 	mov	r18,r2
 1005d48:	1007ed80 	call	1007ed8 <__mcmp>
 1005d4c:	00bcf10e 	bge	zero,r2,1005114 <_dtoa_r+0x560>
 1005d50:	d8c00d17 	ldw	r3,52(sp)
 1005d54:	d9000517 	ldw	r4,20(sp)
 1005d58:	d8000615 	stw	zero,24(sp)
 1005d5c:	18c00044 	addi	r3,r3,1
 1005d60:	d8c00d15 	stw	r3,52(sp)
 1005d64:	00800c44 	movi	r2,49
 1005d68:	27000044 	addi	fp,r4,1
 1005d6c:	20800005 	stb	r2,0(r4)
 1005d70:	003e8906 	br	1005798 <_dtoa_r+0xbe4>
 1005d74:	d8c00517 	ldw	r3,20(sp)
 1005d78:	003bc206 	br	1004c84 <_dtoa_r+0xd0>
 1005d7c:	018040b4 	movhi	r6,258
 1005d80:	31a56604 	addi	r6,r6,-27240
 1005d84:	30c00917 	ldw	r3,36(r6)
 1005d88:	30800817 	ldw	r2,32(r6)
 1005d8c:	d9001217 	ldw	r4,72(sp)
 1005d90:	d9401317 	ldw	r5,76(sp)
 1005d94:	180f883a 	mov	r7,r3
 1005d98:	100d883a 	mov	r6,r2
 1005d9c:	1001a7c0 	call	1001a7c <__divdf3>
 1005da0:	948003cc 	andi	r18,r18,15
 1005da4:	058000c4 	movi	r22,3
 1005da8:	1029883a 	mov	r20,r2
 1005dac:	182b883a 	mov	r21,r3
 1005db0:	003c8906 	br	1004fd8 <_dtoa_r+0x424>
 1005db4:	d9001017 	ldw	r4,64(sp)
 1005db8:	d9800917 	ldw	r6,36(sp)
 1005dbc:	0025883a 	mov	r18,zero
 1005dc0:	1105c83a 	sub	r2,r2,r4
 1005dc4:	2089883a 	add	r4,r4,r2
 1005dc8:	308d883a 	add	r6,r6,r2
 1005dcc:	d9001015 	stw	r4,64(sp)
 1005dd0:	d9800915 	stw	r6,36(sp)
 1005dd4:	003e3206 	br	10056a0 <_dtoa_r+0xaec>
 1005dd8:	28800044 	addi	r2,r5,1
 1005ddc:	27000044 	addi	fp,r4,1
 1005de0:	20800005 	stb	r2,0(r4)
 1005de4:	003e6c06 	br	1005798 <_dtoa_r+0xbe4>
 1005de8:	d8800f17 	ldw	r2,60(sp)
 1005dec:	00bce016 	blt	zero,r2,1005170 <_dtoa_r+0x5bc>
 1005df0:	d9800f17 	ldw	r6,60(sp)
 1005df4:	303cc51e 	bne	r6,zero,100510c <_dtoa_r+0x558>
 1005df8:	0005883a 	mov	r2,zero
 1005dfc:	00d00534 	movhi	r3,16404
 1005e00:	980b883a 	mov	r5,r19
 1005e04:	180f883a 	mov	r7,r3
 1005e08:	9009883a 	mov	r4,r18
 1005e0c:	100d883a 	mov	r6,r2
 1005e10:	100a8580 	call	100a858 <__muldf3>
 1005e14:	180b883a 	mov	r5,r3
 1005e18:	a80f883a 	mov	r7,r21
 1005e1c:	1009883a 	mov	r4,r2
 1005e20:	a00d883a 	mov	r6,r20
 1005e24:	100adb40 	call	100adb4 <__gedf2>
 1005e28:	103cb80e 	bge	r2,zero,100510c <_dtoa_r+0x558>
 1005e2c:	0027883a 	mov	r19,zero
 1005e30:	0025883a 	mov	r18,zero
 1005e34:	003fc606 	br	1005d50 <_dtoa_r+0x119c>
 1005e38:	99400117 	ldw	r5,4(r19)
 1005e3c:	d9001617 	ldw	r4,88(sp)
 1005e40:	10082fc0 	call	10082fc <_Balloc>
 1005e44:	99800417 	ldw	r6,16(r19)
 1005e48:	11000304 	addi	r4,r2,12
 1005e4c:	99400304 	addi	r5,r19,12
 1005e50:	318d883a 	add	r6,r6,r6
 1005e54:	318d883a 	add	r6,r6,r6
 1005e58:	31800204 	addi	r6,r6,8
 1005e5c:	1023883a 	mov	r17,r2
 1005e60:	1007b640 	call	1007b64 <memcpy>
 1005e64:	d9001617 	ldw	r4,88(sp)
 1005e68:	880b883a 	mov	r5,r17
 1005e6c:	01800044 	movi	r6,1
 1005e70:	10086c00 	call	10086c0 <__lshift>
 1005e74:	100b883a 	mov	r5,r2
 1005e78:	003d9c06 	br	10054ec <_dtoa_r+0x938>
 1005e7c:	00800e44 	movi	r2,57
 1005e80:	b8807026 	beq	r23,r2,1006044 <_dtoa_r+0x1490>
 1005e84:	b8800044 	addi	r2,r23,1
 1005e88:	b7000044 	addi	fp,r22,1
 1005e8c:	b0800005 	stb	r2,0(r22)
 1005e90:	003e4106 	br	1005798 <_dtoa_r+0xbe4>
 1005e94:	d8800317 	ldw	r2,12(sp)
 1005e98:	018040b4 	movhi	r6,258
 1005e9c:	31a53404 	addi	r6,r6,-27440
 1005ea0:	b009883a 	mov	r4,r22
 1005ea4:	100e90fa 	slli	r7,r2,3
 1005ea8:	b80b883a 	mov	r5,r23
 1005eac:	398f883a 	add	r7,r7,r6
 1005eb0:	38bffe17 	ldw	r2,-8(r7)
 1005eb4:	d9800517 	ldw	r6,20(sp)
 1005eb8:	38ffff17 	ldw	r3,-4(r7)
 1005ebc:	37000044 	addi	fp,r6,1
 1005ec0:	180f883a 	mov	r7,r3
 1005ec4:	100d883a 	mov	r6,r2
 1005ec8:	100a8580 	call	100a858 <__muldf3>
 1005ecc:	a80b883a 	mov	r5,r21
 1005ed0:	a009883a 	mov	r4,r20
 1005ed4:	182f883a 	mov	r23,r3
 1005ed8:	102d883a 	mov	r22,r2
 1005edc:	1001dcc0 	call	1001dcc <__fixdfsi>
 1005ee0:	1009883a 	mov	r4,r2
 1005ee4:	1027883a 	mov	r19,r2
 1005ee8:	1001cd40 	call	1001cd4 <__floatsidf>
 1005eec:	a80b883a 	mov	r5,r21
 1005ef0:	a009883a 	mov	r4,r20
 1005ef4:	180f883a 	mov	r7,r3
 1005ef8:	100d883a 	mov	r6,r2
 1005efc:	10019880 	call	1001988 <__subdf3>
 1005f00:	180b883a 	mov	r5,r3
 1005f04:	d8c00517 	ldw	r3,20(sp)
 1005f08:	9cc00c04 	addi	r19,r19,48
 1005f0c:	1009883a 	mov	r4,r2
 1005f10:	1cc00005 	stb	r19,0(r3)
 1005f14:	2021883a 	mov	r16,r4
 1005f18:	d9000317 	ldw	r4,12(sp)
 1005f1c:	00800044 	movi	r2,1
 1005f20:	2823883a 	mov	r17,r5
 1005f24:	20802226 	beq	r4,r2,1005fb0 <_dtoa_r+0x13fc>
 1005f28:	1029883a 	mov	r20,r2
 1005f2c:	0005883a 	mov	r2,zero
 1005f30:	00d00934 	movhi	r3,16420
 1005f34:	180f883a 	mov	r7,r3
 1005f38:	100d883a 	mov	r6,r2
 1005f3c:	880b883a 	mov	r5,r17
 1005f40:	8009883a 	mov	r4,r16
 1005f44:	100a8580 	call	100a858 <__muldf3>
 1005f48:	180b883a 	mov	r5,r3
 1005f4c:	1009883a 	mov	r4,r2
 1005f50:	1823883a 	mov	r17,r3
 1005f54:	1021883a 	mov	r16,r2
 1005f58:	1001dcc0 	call	1001dcc <__fixdfsi>
 1005f5c:	1009883a 	mov	r4,r2
 1005f60:	102b883a 	mov	r21,r2
 1005f64:	1001cd40 	call	1001cd4 <__floatsidf>
 1005f68:	880b883a 	mov	r5,r17
 1005f6c:	8009883a 	mov	r4,r16
 1005f70:	180f883a 	mov	r7,r3
 1005f74:	100d883a 	mov	r6,r2
 1005f78:	10019880 	call	1001988 <__subdf3>
 1005f7c:	180b883a 	mov	r5,r3
 1005f80:	d8c00517 	ldw	r3,20(sp)
 1005f84:	1009883a 	mov	r4,r2
 1005f88:	ad400c04 	addi	r21,r21,48
 1005f8c:	1d05883a 	add	r2,r3,r20
 1005f90:	15400005 	stb	r21,0(r2)
 1005f94:	2021883a 	mov	r16,r4
 1005f98:	d9000317 	ldw	r4,12(sp)
 1005f9c:	a5000044 	addi	r20,r20,1
 1005fa0:	2823883a 	mov	r17,r5
 1005fa4:	a13fe11e 	bne	r20,r4,1005f2c <_dtoa_r+0x1378>
 1005fa8:	e505883a 	add	r2,fp,r20
 1005fac:	173fffc4 	addi	fp,r2,-1
 1005fb0:	0025883a 	mov	r18,zero
 1005fb4:	04cff834 	movhi	r19,16352
 1005fb8:	b009883a 	mov	r4,r22
 1005fbc:	b80b883a 	mov	r5,r23
 1005fc0:	900d883a 	mov	r6,r18
 1005fc4:	980f883a 	mov	r7,r19
 1005fc8:	1001a080 	call	1001a08 <__adddf3>
 1005fcc:	180b883a 	mov	r5,r3
 1005fd0:	1009883a 	mov	r4,r2
 1005fd4:	800d883a 	mov	r6,r16
 1005fd8:	880f883a 	mov	r7,r17
 1005fdc:	100ae3c0 	call	100ae3c <__ltdf2>
 1005fe0:	103cab16 	blt	r2,zero,1005290 <_dtoa_r+0x6dc>
 1005fe4:	0009883a 	mov	r4,zero
 1005fe8:	980b883a 	mov	r5,r19
 1005fec:	b80f883a 	mov	r7,r23
 1005ff0:	b00d883a 	mov	r6,r22
 1005ff4:	10019880 	call	1001988 <__subdf3>
 1005ff8:	180b883a 	mov	r5,r3
 1005ffc:	880f883a 	mov	r7,r17
 1006000:	1009883a 	mov	r4,r2
 1006004:	800d883a 	mov	r6,r16
 1006008:	100ad2c0 	call	100ad2c <__gtdf2>
 100600c:	00bc470e 	bge	zero,r2,100512c <_dtoa_r+0x578>
 1006010:	00c00c04 	movi	r3,48
 1006014:	e73fffc4 	addi	fp,fp,-1
 1006018:	e0800007 	ldb	r2,0(fp)
 100601c:	10fffd26 	beq	r2,r3,1006014 <_dtoa_r+0x1460>
 1006020:	d9800417 	ldw	r6,16(sp)
 1006024:	e7000044 	addi	fp,fp,1
 1006028:	d9800d15 	stw	r6,52(sp)
 100602c:	003cab06 	br	10052dc <_dtoa_r+0x728>
 1006030:	d8c00f17 	ldw	r3,60(sp)
 1006034:	d9001117 	ldw	r4,68(sp)
 1006038:	20e1c83a 	sub	r16,r4,r3
 100603c:	0007883a 	mov	r3,zero
 1006040:	003d9b06 	br	10056b0 <_dtoa_r+0xafc>
 1006044:	00800e44 	movi	r2,57
 1006048:	b0800005 	stb	r2,0(r22)
 100604c:	b5800044 	addi	r22,r22,1
 1006050:	003dc106 	br	1005758 <_dtoa_r+0xba4>
 1006054:	05800084 	movi	r22,2
 1006058:	003bf706 	br	1005038 <_dtoa_r+0x484>
 100605c:	d9000f17 	ldw	r4,60(sp)
 1006060:	013c000e 	bge	zero,r4,1005064 <_dtoa_r+0x4b0>
 1006064:	d9800e17 	ldw	r6,56(sp)
 1006068:	01bc300e 	bge	zero,r6,100512c <_dtoa_r+0x578>
 100606c:	0005883a 	mov	r2,zero
 1006070:	00d00934 	movhi	r3,16420
 1006074:	a80b883a 	mov	r5,r21
 1006078:	180f883a 	mov	r7,r3
 100607c:	a009883a 	mov	r4,r20
 1006080:	100d883a 	mov	r6,r2
 1006084:	100a8580 	call	100a858 <__muldf3>
 1006088:	b1000044 	addi	r4,r22,1
 100608c:	1021883a 	mov	r16,r2
 1006090:	1823883a 	mov	r17,r3
 1006094:	1001cd40 	call	1001cd4 <__floatsidf>
 1006098:	880b883a 	mov	r5,r17
 100609c:	8009883a 	mov	r4,r16
 10060a0:	180f883a 	mov	r7,r3
 10060a4:	100d883a 	mov	r6,r2
 10060a8:	100a8580 	call	100a858 <__muldf3>
 10060ac:	0011883a 	mov	r8,zero
 10060b0:	02500734 	movhi	r9,16412
 10060b4:	180b883a 	mov	r5,r3
 10060b8:	480f883a 	mov	r7,r9
 10060bc:	1009883a 	mov	r4,r2
 10060c0:	400d883a 	mov	r6,r8
 10060c4:	1001a080 	call	1001a08 <__adddf3>
 10060c8:	102d883a 	mov	r22,r2
 10060cc:	00bf3034 	movhi	r2,64704
 10060d0:	10ef883a 	add	r23,r2,r3
 10060d4:	d8800d17 	ldw	r2,52(sp)
 10060d8:	d8c00e17 	ldw	r3,56(sp)
 10060dc:	8029883a 	mov	r20,r16
 10060e0:	10bfffc4 	addi	r2,r2,-1
 10060e4:	882b883a 	mov	r21,r17
 10060e8:	d8800415 	stw	r2,16(sp)
 10060ec:	d8c00315 	stw	r3,12(sp)
 10060f0:	003e8306 	br	1005b00 <_dtoa_r+0xf4c>
 10060f4:	d8800117 	ldw	r2,4(sp)
 10060f8:	dc001117 	ldw	r16,68(sp)
 10060fc:	dc801017 	ldw	r18,64(sp)
 1006100:	00c00d84 	movi	r3,54
 1006104:	1887c83a 	sub	r3,r3,r2
 1006108:	003d6906 	br	10056b0 <_dtoa_r+0xafc>
 100610c:	01800044 	movi	r6,1
 1006110:	3021883a 	mov	r16,r6
 1006114:	d9800f15 	stw	r6,60(sp)
 1006118:	d9802615 	stw	r6,152(sp)
 100611c:	d9800e15 	stw	r6,56(sp)
 1006120:	003b9306 	br	1004f70 <_dtoa_r+0x3bc>
 1006124:	b021883a 	mov	r16,r22
 1006128:	dd800f15 	stw	r22,60(sp)
 100612c:	003b9006 	br	1004f70 <_dtoa_r+0x3bc>
 1006130:	103e221e 	bne	r2,zero,10059bc <_dtoa_r+0xe08>
 1006134:	b880004c 	andi	r2,r23,1
 1006138:	1005003a 	cmpeq	r2,r2,zero
 100613c:	103e1f1e 	bne	r2,zero,10059bc <_dtoa_r+0xe08>
 1006140:	003e1b06 	br	10059b0 <_dtoa_r+0xdfc>
 1006144:	d9001617 	ldw	r4,88(sp)
 1006148:	980b883a 	mov	r5,r19
 100614c:	01800284 	movi	r6,10
 1006150:	000f883a 	mov	r7,zero
 1006154:	1008a9c0 	call	1008a9c <__multadd>
 1006158:	d8c00e17 	ldw	r3,56(sp)
 100615c:	1027883a 	mov	r19,r2
 1006160:	d8c00f15 	stw	r3,60(sp)
 1006164:	003cd306 	br	10054b4 <_dtoa_r+0x900>

01006168 <_fflush_r>:
 1006168:	defffb04 	addi	sp,sp,-20
 100616c:	dcc00315 	stw	r19,12(sp)
 1006170:	dc800215 	stw	r18,8(sp)
 1006174:	dfc00415 	stw	ra,16(sp)
 1006178:	dc400115 	stw	r17,4(sp)
 100617c:	dc000015 	stw	r16,0(sp)
 1006180:	2027883a 	mov	r19,r4
 1006184:	2825883a 	mov	r18,r5
 1006188:	20000226 	beq	r4,zero,1006194 <_fflush_r+0x2c>
 100618c:	20800e17 	ldw	r2,56(r4)
 1006190:	10005626 	beq	r2,zero,10062ec <_fflush_r+0x184>
 1006194:	9100030b 	ldhu	r4,12(r18)
 1006198:	20ffffcc 	andi	r3,r4,65535
 100619c:	18e0001c 	xori	r3,r3,32768
 10061a0:	18e00004 	addi	r3,r3,-32768
 10061a4:	1880020c 	andi	r2,r3,8
 10061a8:	1000261e 	bne	r2,zero,1006244 <_fflush_r+0xdc>
 10061ac:	90c00117 	ldw	r3,4(r18)
 10061b0:	20820014 	ori	r2,r4,2048
 10061b4:	9080030d 	sth	r2,12(r18)
 10061b8:	1009883a 	mov	r4,r2
 10061bc:	00c0400e 	bge	zero,r3,10062c0 <_fflush_r+0x158>
 10061c0:	92000a17 	ldw	r8,40(r18)
 10061c4:	40004026 	beq	r8,zero,10062c8 <_fflush_r+0x160>
 10061c8:	2084000c 	andi	r2,r4,4096
 10061cc:	10005326 	beq	r2,zero,100631c <_fflush_r+0x1b4>
 10061d0:	94001417 	ldw	r16,80(r18)
 10061d4:	9080030b 	ldhu	r2,12(r18)
 10061d8:	1080010c 	andi	r2,r2,4
 10061dc:	1000481e 	bne	r2,zero,1006300 <_fflush_r+0x198>
 10061e0:	91400717 	ldw	r5,28(r18)
 10061e4:	9809883a 	mov	r4,r19
 10061e8:	800d883a 	mov	r6,r16
 10061ec:	000f883a 	mov	r7,zero
 10061f0:	403ee83a 	callr	r8
 10061f4:	8080261e 	bne	r16,r2,1006290 <_fflush_r+0x128>
 10061f8:	9080030b 	ldhu	r2,12(r18)
 10061fc:	91000417 	ldw	r4,16(r18)
 1006200:	90000115 	stw	zero,4(r18)
 1006204:	10bdffcc 	andi	r2,r2,63487
 1006208:	10ffffcc 	andi	r3,r2,65535
 100620c:	18c4000c 	andi	r3,r3,4096
 1006210:	9080030d 	sth	r2,12(r18)
 1006214:	91000015 	stw	r4,0(r18)
 1006218:	18002b26 	beq	r3,zero,10062c8 <_fflush_r+0x160>
 100621c:	0007883a 	mov	r3,zero
 1006220:	1805883a 	mov	r2,r3
 1006224:	94001415 	stw	r16,80(r18)
 1006228:	dfc00417 	ldw	ra,16(sp)
 100622c:	dcc00317 	ldw	r19,12(sp)
 1006230:	dc800217 	ldw	r18,8(sp)
 1006234:	dc400117 	ldw	r17,4(sp)
 1006238:	dc000017 	ldw	r16,0(sp)
 100623c:	dec00504 	addi	sp,sp,20
 1006240:	f800283a 	ret
 1006244:	94400417 	ldw	r17,16(r18)
 1006248:	88001f26 	beq	r17,zero,10062c8 <_fflush_r+0x160>
 100624c:	90800017 	ldw	r2,0(r18)
 1006250:	18c000cc 	andi	r3,r3,3
 1006254:	94400015 	stw	r17,0(r18)
 1006258:	1461c83a 	sub	r16,r2,r17
 100625c:	18002526 	beq	r3,zero,10062f4 <_fflush_r+0x18c>
 1006260:	0005883a 	mov	r2,zero
 1006264:	90800215 	stw	r2,8(r18)
 1006268:	0400170e 	bge	zero,r16,10062c8 <_fflush_r+0x160>
 100626c:	90c00917 	ldw	r3,36(r18)
 1006270:	91400717 	ldw	r5,28(r18)
 1006274:	880d883a 	mov	r6,r17
 1006278:	800f883a 	mov	r7,r16
 100627c:	9809883a 	mov	r4,r19
 1006280:	183ee83a 	callr	r3
 1006284:	88a3883a 	add	r17,r17,r2
 1006288:	80a1c83a 	sub	r16,r16,r2
 100628c:	00bff616 	blt	zero,r2,1006268 <_fflush_r+0x100>
 1006290:	9080030b 	ldhu	r2,12(r18)
 1006294:	00ffffc4 	movi	r3,-1
 1006298:	10801014 	ori	r2,r2,64
 100629c:	9080030d 	sth	r2,12(r18)
 10062a0:	1805883a 	mov	r2,r3
 10062a4:	dfc00417 	ldw	ra,16(sp)
 10062a8:	dcc00317 	ldw	r19,12(sp)
 10062ac:	dc800217 	ldw	r18,8(sp)
 10062b0:	dc400117 	ldw	r17,4(sp)
 10062b4:	dc000017 	ldw	r16,0(sp)
 10062b8:	dec00504 	addi	sp,sp,20
 10062bc:	f800283a 	ret
 10062c0:	90800f17 	ldw	r2,60(r18)
 10062c4:	00bfbe16 	blt	zero,r2,10061c0 <_fflush_r+0x58>
 10062c8:	0007883a 	mov	r3,zero
 10062cc:	1805883a 	mov	r2,r3
 10062d0:	dfc00417 	ldw	ra,16(sp)
 10062d4:	dcc00317 	ldw	r19,12(sp)
 10062d8:	dc800217 	ldw	r18,8(sp)
 10062dc:	dc400117 	ldw	r17,4(sp)
 10062e0:	dc000017 	ldw	r16,0(sp)
 10062e4:	dec00504 	addi	sp,sp,20
 10062e8:	f800283a 	ret
 10062ec:	10064000 	call	1006400 <__sinit>
 10062f0:	003fa806 	br	1006194 <_fflush_r+0x2c>
 10062f4:	90800517 	ldw	r2,20(r18)
 10062f8:	90800215 	stw	r2,8(r18)
 10062fc:	003fda06 	br	1006268 <_fflush_r+0x100>
 1006300:	90800117 	ldw	r2,4(r18)
 1006304:	90c00c17 	ldw	r3,48(r18)
 1006308:	80a1c83a 	sub	r16,r16,r2
 100630c:	183fb426 	beq	r3,zero,10061e0 <_fflush_r+0x78>
 1006310:	90800f17 	ldw	r2,60(r18)
 1006314:	80a1c83a 	sub	r16,r16,r2
 1006318:	003fb106 	br	10061e0 <_fflush_r+0x78>
 100631c:	91400717 	ldw	r5,28(r18)
 1006320:	9809883a 	mov	r4,r19
 1006324:	000d883a 	mov	r6,zero
 1006328:	01c00044 	movi	r7,1
 100632c:	403ee83a 	callr	r8
 1006330:	1021883a 	mov	r16,r2
 1006334:	00bfffc4 	movi	r2,-1
 1006338:	80800226 	beq	r16,r2,1006344 <_fflush_r+0x1dc>
 100633c:	92000a17 	ldw	r8,40(r18)
 1006340:	003fa406 	br	10061d4 <_fflush_r+0x6c>
 1006344:	98c00017 	ldw	r3,0(r19)
 1006348:	00800744 	movi	r2,29
 100634c:	18bfde26 	beq	r3,r2,10062c8 <_fflush_r+0x160>
 1006350:	9080030b 	ldhu	r2,12(r18)
 1006354:	8007883a 	mov	r3,r16
 1006358:	10801014 	ori	r2,r2,64
 100635c:	9080030d 	sth	r2,12(r18)
 1006360:	003fcf06 	br	10062a0 <_fflush_r+0x138>

01006364 <fflush>:
 1006364:	01404034 	movhi	r5,256
 1006368:	29585a04 	addi	r5,r5,24936
 100636c:	2007883a 	mov	r3,r4
 1006370:	20000526 	beq	r4,zero,1006388 <fflush+0x24>
 1006374:	008040b4 	movhi	r2,258
 1006378:	10ac8a04 	addi	r2,r2,-19928
 100637c:	11000017 	ldw	r4,0(r2)
 1006380:	180b883a 	mov	r5,r3
 1006384:	10061681 	jmpi	1006168 <_fflush_r>
 1006388:	008040b4 	movhi	r2,258
 100638c:	10ac8b04 	addi	r2,r2,-19924
 1006390:	11000017 	ldw	r4,0(r2)
 1006394:	1006f681 	jmpi	1006f68 <_fwalk_reent>

01006398 <std>:
 1006398:	00804074 	movhi	r2,257
 100639c:	10a53704 	addi	r2,r2,-27428
 10063a0:	20800b15 	stw	r2,44(r4)
 10063a4:	00804074 	movhi	r2,257
 10063a8:	10a57204 	addi	r2,r2,-27192
 10063ac:	20800815 	stw	r2,32(r4)
 10063b0:	00c04074 	movhi	r3,257
 10063b4:	18e55304 	addi	r3,r3,-27316
 10063b8:	00804074 	movhi	r2,257
 10063bc:	10a53904 	addi	r2,r2,-27420
 10063c0:	2140030d 	sth	r5,12(r4)
 10063c4:	2180038d 	sth	r6,14(r4)
 10063c8:	20c00915 	stw	r3,36(r4)
 10063cc:	20800a15 	stw	r2,40(r4)
 10063d0:	20000015 	stw	zero,0(r4)
 10063d4:	20000115 	stw	zero,4(r4)
 10063d8:	20000215 	stw	zero,8(r4)
 10063dc:	20000415 	stw	zero,16(r4)
 10063e0:	20000515 	stw	zero,20(r4)
 10063e4:	20000615 	stw	zero,24(r4)
 10063e8:	21000715 	stw	r4,28(r4)
 10063ec:	f800283a 	ret

010063f0 <__sfp_lock_acquire>:
 10063f0:	f800283a 	ret

010063f4 <__sfp_lock_release>:
 10063f4:	f800283a 	ret

010063f8 <__sinit_lock_acquire>:
 10063f8:	f800283a 	ret

010063fc <__sinit_lock_release>:
 10063fc:	f800283a 	ret

01006400 <__sinit>:
 1006400:	20800e17 	ldw	r2,56(r4)
 1006404:	defffd04 	addi	sp,sp,-12
 1006408:	dc400115 	stw	r17,4(sp)
 100640c:	dc000015 	stw	r16,0(sp)
 1006410:	dfc00215 	stw	ra,8(sp)
 1006414:	04400044 	movi	r17,1
 1006418:	01400104 	movi	r5,4
 100641c:	000d883a 	mov	r6,zero
 1006420:	2021883a 	mov	r16,r4
 1006424:	2200bb04 	addi	r8,r4,748
 1006428:	200f883a 	mov	r7,r4
 100642c:	10000526 	beq	r2,zero,1006444 <__sinit+0x44>
 1006430:	dfc00217 	ldw	ra,8(sp)
 1006434:	dc400117 	ldw	r17,4(sp)
 1006438:	dc000017 	ldw	r16,0(sp)
 100643c:	dec00304 	addi	sp,sp,12
 1006440:	f800283a 	ret
 1006444:	21000117 	ldw	r4,4(r4)
 1006448:	00804034 	movhi	r2,256
 100644c:	10993904 	addi	r2,r2,25828
 1006450:	00c000c4 	movi	r3,3
 1006454:	80800f15 	stw	r2,60(r16)
 1006458:	80c0b915 	stw	r3,740(r16)
 100645c:	8200ba15 	stw	r8,744(r16)
 1006460:	84400e15 	stw	r17,56(r16)
 1006464:	8000b815 	stw	zero,736(r16)
 1006468:	10063980 	call	1006398 <std>
 100646c:	81000217 	ldw	r4,8(r16)
 1006470:	880d883a 	mov	r6,r17
 1006474:	800f883a 	mov	r7,r16
 1006478:	01400284 	movi	r5,10
 100647c:	10063980 	call	1006398 <std>
 1006480:	81000317 	ldw	r4,12(r16)
 1006484:	800f883a 	mov	r7,r16
 1006488:	01400484 	movi	r5,18
 100648c:	01800084 	movi	r6,2
 1006490:	dfc00217 	ldw	ra,8(sp)
 1006494:	dc400117 	ldw	r17,4(sp)
 1006498:	dc000017 	ldw	r16,0(sp)
 100649c:	dec00304 	addi	sp,sp,12
 10064a0:	10063981 	jmpi	1006398 <std>

010064a4 <__fp_lock>:
 10064a4:	0005883a 	mov	r2,zero
 10064a8:	f800283a 	ret

010064ac <__fp_unlock>:
 10064ac:	0005883a 	mov	r2,zero
 10064b0:	f800283a 	ret

010064b4 <__fp_unlock_all>:
 10064b4:	008040b4 	movhi	r2,258
 10064b8:	10ac8a04 	addi	r2,r2,-19928
 10064bc:	11000017 	ldw	r4,0(r2)
 10064c0:	01404034 	movhi	r5,256
 10064c4:	29592b04 	addi	r5,r5,25772
 10064c8:	10070301 	jmpi	1007030 <_fwalk>

010064cc <__fp_lock_all>:
 10064cc:	008040b4 	movhi	r2,258
 10064d0:	10ac8a04 	addi	r2,r2,-19928
 10064d4:	11000017 	ldw	r4,0(r2)
 10064d8:	01404034 	movhi	r5,256
 10064dc:	29592904 	addi	r5,r5,25764
 10064e0:	10070301 	jmpi	1007030 <_fwalk>

010064e4 <_cleanup_r>:
 10064e4:	01404074 	movhi	r5,257
 10064e8:	29666904 	addi	r5,r5,-26204
 10064ec:	10070301 	jmpi	1007030 <_fwalk>

010064f0 <_cleanup>:
 10064f0:	008040b4 	movhi	r2,258
 10064f4:	10ac8b04 	addi	r2,r2,-19924
 10064f8:	11000017 	ldw	r4,0(r2)
 10064fc:	10064e41 	jmpi	10064e4 <_cleanup_r>

01006500 <__sfmoreglue>:
 1006500:	defffc04 	addi	sp,sp,-16
 1006504:	dc000015 	stw	r16,0(sp)
 1006508:	2821883a 	mov	r16,r5
 100650c:	dc400115 	stw	r17,4(sp)
 1006510:	01401704 	movi	r5,92
 1006514:	2023883a 	mov	r17,r4
 1006518:	8009883a 	mov	r4,r16
 100651c:	dfc00315 	stw	ra,12(sp)
 1006520:	dcc00215 	stw	r19,8(sp)
 1006524:	10020280 	call	1002028 <__mulsi3>
 1006528:	11400304 	addi	r5,r2,12
 100652c:	8809883a 	mov	r4,r17
 1006530:	1027883a 	mov	r19,r2
 1006534:	10073400 	call	1007340 <_malloc_r>
 1006538:	10c00304 	addi	r3,r2,12
 100653c:	1023883a 	mov	r17,r2
 1006540:	1809883a 	mov	r4,r3
 1006544:	980d883a 	mov	r6,r19
 1006548:	000b883a 	mov	r5,zero
 100654c:	10000b26 	beq	r2,zero,100657c <__sfmoreglue+0x7c>
 1006550:	14000115 	stw	r16,4(r2)
 1006554:	10c00215 	stw	r3,8(r2)
 1006558:	10000015 	stw	zero,0(r2)
 100655c:	1007ce40 	call	1007ce4 <memset>
 1006560:	8805883a 	mov	r2,r17
 1006564:	dfc00317 	ldw	ra,12(sp)
 1006568:	dcc00217 	ldw	r19,8(sp)
 100656c:	dc400117 	ldw	r17,4(sp)
 1006570:	dc000017 	ldw	r16,0(sp)
 1006574:	dec00404 	addi	sp,sp,16
 1006578:	f800283a 	ret
 100657c:	0023883a 	mov	r17,zero
 1006580:	8805883a 	mov	r2,r17
 1006584:	dfc00317 	ldw	ra,12(sp)
 1006588:	dcc00217 	ldw	r19,8(sp)
 100658c:	dc400117 	ldw	r17,4(sp)
 1006590:	dc000017 	ldw	r16,0(sp)
 1006594:	dec00404 	addi	sp,sp,16
 1006598:	f800283a 	ret

0100659c <__sfp>:
 100659c:	defffd04 	addi	sp,sp,-12
 10065a0:	008040b4 	movhi	r2,258
 10065a4:	10ac8b04 	addi	r2,r2,-19924
 10065a8:	dc000015 	stw	r16,0(sp)
 10065ac:	14000017 	ldw	r16,0(r2)
 10065b0:	dc400115 	stw	r17,4(sp)
 10065b4:	dfc00215 	stw	ra,8(sp)
 10065b8:	80800e17 	ldw	r2,56(r16)
 10065bc:	2023883a 	mov	r17,r4
 10065c0:	10002626 	beq	r2,zero,100665c <__sfp+0xc0>
 10065c4:	8400b804 	addi	r16,r16,736
 10065c8:	80800117 	ldw	r2,4(r16)
 10065cc:	81000217 	ldw	r4,8(r16)
 10065d0:	10ffffc4 	addi	r3,r2,-1
 10065d4:	18000916 	blt	r3,zero,10065fc <__sfp+0x60>
 10065d8:	2080030f 	ldh	r2,12(r4)
 10065dc:	10000b26 	beq	r2,zero,100660c <__sfp+0x70>
 10065e0:	017fffc4 	movi	r5,-1
 10065e4:	00000206 	br	10065f0 <__sfp+0x54>
 10065e8:	2080030f 	ldh	r2,12(r4)
 10065ec:	10000726 	beq	r2,zero,100660c <__sfp+0x70>
 10065f0:	18ffffc4 	addi	r3,r3,-1
 10065f4:	21001704 	addi	r4,r4,92
 10065f8:	197ffb1e 	bne	r3,r5,10065e8 <__sfp+0x4c>
 10065fc:	80800017 	ldw	r2,0(r16)
 1006600:	10001926 	beq	r2,zero,1006668 <__sfp+0xcc>
 1006604:	1021883a 	mov	r16,r2
 1006608:	003fef06 	br	10065c8 <__sfp+0x2c>
 100660c:	00bfffc4 	movi	r2,-1
 1006610:	00c00044 	movi	r3,1
 1006614:	2080038d 	sth	r2,14(r4)
 1006618:	20c0030d 	sth	r3,12(r4)
 100661c:	20000015 	stw	zero,0(r4)
 1006620:	20000215 	stw	zero,8(r4)
 1006624:	20000115 	stw	zero,4(r4)
 1006628:	20000415 	stw	zero,16(r4)
 100662c:	20000515 	stw	zero,20(r4)
 1006630:	20000615 	stw	zero,24(r4)
 1006634:	20000c15 	stw	zero,48(r4)
 1006638:	20000d15 	stw	zero,52(r4)
 100663c:	20001115 	stw	zero,68(r4)
 1006640:	20001215 	stw	zero,72(r4)
 1006644:	2005883a 	mov	r2,r4
 1006648:	dfc00217 	ldw	ra,8(sp)
 100664c:	dc400117 	ldw	r17,4(sp)
 1006650:	dc000017 	ldw	r16,0(sp)
 1006654:	dec00304 	addi	sp,sp,12
 1006658:	f800283a 	ret
 100665c:	8009883a 	mov	r4,r16
 1006660:	10064000 	call	1006400 <__sinit>
 1006664:	003fd706 	br	10065c4 <__sfp+0x28>
 1006668:	8809883a 	mov	r4,r17
 100666c:	01400104 	movi	r5,4
 1006670:	10065000 	call	1006500 <__sfmoreglue>
 1006674:	80800015 	stw	r2,0(r16)
 1006678:	103fe21e 	bne	r2,zero,1006604 <__sfp+0x68>
 100667c:	00800304 	movi	r2,12
 1006680:	0009883a 	mov	r4,zero
 1006684:	88800015 	stw	r2,0(r17)
 1006688:	003fee06 	br	1006644 <__sfp+0xa8>

0100668c <_malloc_trim_r>:
 100668c:	defffb04 	addi	sp,sp,-20
 1006690:	dcc00315 	stw	r19,12(sp)
 1006694:	04c040b4 	movhi	r19,258
 1006698:	9ce6f304 	addi	r19,r19,-25652
 100669c:	dc800215 	stw	r18,8(sp)
 10066a0:	dc400115 	stw	r17,4(sp)
 10066a4:	dc000015 	stw	r16,0(sp)
 10066a8:	2823883a 	mov	r17,r5
 10066ac:	2025883a 	mov	r18,r4
 10066b0:	dfc00415 	stw	ra,16(sp)
 10066b4:	100c1740 	call	100c174 <__malloc_lock>
 10066b8:	98800217 	ldw	r2,8(r19)
 10066bc:	9009883a 	mov	r4,r18
 10066c0:	000b883a 	mov	r5,zero
 10066c4:	10c00117 	ldw	r3,4(r2)
 10066c8:	00bfff04 	movi	r2,-4
 10066cc:	18a0703a 	and	r16,r3,r2
 10066d0:	8463c83a 	sub	r17,r16,r17
 10066d4:	8c43fbc4 	addi	r17,r17,4079
 10066d8:	8822d33a 	srli	r17,r17,12
 10066dc:	0083ffc4 	movi	r2,4095
 10066e0:	8c7fffc4 	addi	r17,r17,-1
 10066e4:	8822933a 	slli	r17,r17,12
 10066e8:	1440060e 	bge	r2,r17,1006704 <_malloc_trim_r+0x78>
 10066ec:	100946c0 	call	100946c <_sbrk_r>
 10066f0:	98c00217 	ldw	r3,8(r19)
 10066f4:	9009883a 	mov	r4,r18
 10066f8:	044bc83a 	sub	r5,zero,r17
 10066fc:	80c7883a 	add	r3,r16,r3
 1006700:	10c00926 	beq	r2,r3,1006728 <_malloc_trim_r+0x9c>
 1006704:	100c27c0 	call	100c27c <__malloc_unlock>
 1006708:	0005883a 	mov	r2,zero
 100670c:	dfc00417 	ldw	ra,16(sp)
 1006710:	dcc00317 	ldw	r19,12(sp)
 1006714:	dc800217 	ldw	r18,8(sp)
 1006718:	dc400117 	ldw	r17,4(sp)
 100671c:	dc000017 	ldw	r16,0(sp)
 1006720:	dec00504 	addi	sp,sp,20
 1006724:	f800283a 	ret
 1006728:	9009883a 	mov	r4,r18
 100672c:	100946c0 	call	100946c <_sbrk_r>
 1006730:	844dc83a 	sub	r6,r16,r17
 1006734:	00ffffc4 	movi	r3,-1
 1006738:	9009883a 	mov	r4,r18
 100673c:	000b883a 	mov	r5,zero
 1006740:	01c040b4 	movhi	r7,258
 1006744:	39f3d204 	addi	r7,r7,-12472
 1006748:	31800054 	ori	r6,r6,1
 100674c:	10c00926 	beq	r2,r3,1006774 <_malloc_trim_r+0xe8>
 1006750:	38800017 	ldw	r2,0(r7)
 1006754:	98c00217 	ldw	r3,8(r19)
 1006758:	9009883a 	mov	r4,r18
 100675c:	1445c83a 	sub	r2,r2,r17
 1006760:	38800015 	stw	r2,0(r7)
 1006764:	19800115 	stw	r6,4(r3)
 1006768:	100c27c0 	call	100c27c <__malloc_unlock>
 100676c:	00800044 	movi	r2,1
 1006770:	003fe606 	br	100670c <_malloc_trim_r+0x80>
 1006774:	100946c0 	call	100946c <_sbrk_r>
 1006778:	99800217 	ldw	r6,8(r19)
 100677c:	100f883a 	mov	r7,r2
 1006780:	9009883a 	mov	r4,r18
 1006784:	1187c83a 	sub	r3,r2,r6
 1006788:	008003c4 	movi	r2,15
 100678c:	19400054 	ori	r5,r3,1
 1006790:	10ffdc0e 	bge	r2,r3,1006704 <_malloc_trim_r+0x78>
 1006794:	008040b4 	movhi	r2,258
 1006798:	10ac8f04 	addi	r2,r2,-19908
 100679c:	10c00017 	ldw	r3,0(r2)
 10067a0:	008040b4 	movhi	r2,258
 10067a4:	10b3d204 	addi	r2,r2,-12472
 10067a8:	31400115 	stw	r5,4(r6)
 10067ac:	38c7c83a 	sub	r3,r7,r3
 10067b0:	10c00015 	stw	r3,0(r2)
 10067b4:	003fd306 	br	1006704 <_malloc_trim_r+0x78>

010067b8 <_free_r>:
 10067b8:	defffd04 	addi	sp,sp,-12
 10067bc:	dc400115 	stw	r17,4(sp)
 10067c0:	dc000015 	stw	r16,0(sp)
 10067c4:	dfc00215 	stw	ra,8(sp)
 10067c8:	2821883a 	mov	r16,r5
 10067cc:	2023883a 	mov	r17,r4
 10067d0:	28005a26 	beq	r5,zero,100693c <_free_r+0x184>
 10067d4:	100c1740 	call	100c174 <__malloc_lock>
 10067d8:	823ffe04 	addi	r8,r16,-8
 10067dc:	41400117 	ldw	r5,4(r8)
 10067e0:	00bfff84 	movi	r2,-2
 10067e4:	028040b4 	movhi	r10,258
 10067e8:	52a6f304 	addi	r10,r10,-25652
 10067ec:	288e703a 	and	r7,r5,r2
 10067f0:	41cd883a 	add	r6,r8,r7
 10067f4:	30c00117 	ldw	r3,4(r6)
 10067f8:	51000217 	ldw	r4,8(r10)
 10067fc:	00bfff04 	movi	r2,-4
 1006800:	1892703a 	and	r9,r3,r2
 1006804:	5017883a 	mov	r11,r10
 1006808:	31006726 	beq	r6,r4,10069a8 <_free_r+0x1f0>
 100680c:	2880004c 	andi	r2,r5,1
 1006810:	1005003a 	cmpeq	r2,r2,zero
 1006814:	32400115 	stw	r9,4(r6)
 1006818:	10001a1e 	bne	r2,zero,1006884 <_free_r+0xcc>
 100681c:	000b883a 	mov	r5,zero
 1006820:	3247883a 	add	r3,r6,r9
 1006824:	18800117 	ldw	r2,4(r3)
 1006828:	1080004c 	andi	r2,r2,1
 100682c:	1000231e 	bne	r2,zero,10068bc <_free_r+0x104>
 1006830:	280ac03a 	cmpne	r5,r5,zero
 1006834:	3a4f883a 	add	r7,r7,r9
 1006838:	2800451e 	bne	r5,zero,1006950 <_free_r+0x198>
 100683c:	31000217 	ldw	r4,8(r6)
 1006840:	008040b4 	movhi	r2,258
 1006844:	10a6f504 	addi	r2,r2,-25644
 1006848:	20807b26 	beq	r4,r2,1006a38 <_free_r+0x280>
 100684c:	30800317 	ldw	r2,12(r6)
 1006850:	3a07883a 	add	r3,r7,r8
 1006854:	19c00015 	stw	r7,0(r3)
 1006858:	11000215 	stw	r4,8(r2)
 100685c:	20800315 	stw	r2,12(r4)
 1006860:	38800054 	ori	r2,r7,1
 1006864:	40800115 	stw	r2,4(r8)
 1006868:	28001a26 	beq	r5,zero,10068d4 <_free_r+0x11c>
 100686c:	8809883a 	mov	r4,r17
 1006870:	dfc00217 	ldw	ra,8(sp)
 1006874:	dc400117 	ldw	r17,4(sp)
 1006878:	dc000017 	ldw	r16,0(sp)
 100687c:	dec00304 	addi	sp,sp,12
 1006880:	100c27c1 	jmpi	100c27c <__malloc_unlock>
 1006884:	80bffe17 	ldw	r2,-8(r16)
 1006888:	50c00204 	addi	r3,r10,8
 100688c:	4091c83a 	sub	r8,r8,r2
 1006890:	41000217 	ldw	r4,8(r8)
 1006894:	388f883a 	add	r7,r7,r2
 1006898:	20c06126 	beq	r4,r3,1006a20 <_free_r+0x268>
 100689c:	40800317 	ldw	r2,12(r8)
 10068a0:	3247883a 	add	r3,r6,r9
 10068a4:	000b883a 	mov	r5,zero
 10068a8:	11000215 	stw	r4,8(r2)
 10068ac:	20800315 	stw	r2,12(r4)
 10068b0:	18800117 	ldw	r2,4(r3)
 10068b4:	1080004c 	andi	r2,r2,1
 10068b8:	103fdd26 	beq	r2,zero,1006830 <_free_r+0x78>
 10068bc:	38800054 	ori	r2,r7,1
 10068c0:	3a07883a 	add	r3,r7,r8
 10068c4:	280ac03a 	cmpne	r5,r5,zero
 10068c8:	40800115 	stw	r2,4(r8)
 10068cc:	19c00015 	stw	r7,0(r3)
 10068d0:	283fe61e 	bne	r5,zero,100686c <_free_r+0xb4>
 10068d4:	00807fc4 	movi	r2,511
 10068d8:	11c01f2e 	bgeu	r2,r7,1006958 <_free_r+0x1a0>
 10068dc:	3806d27a 	srli	r3,r7,9
 10068e0:	1800481e 	bne	r3,zero,1006a04 <_free_r+0x24c>
 10068e4:	3804d0fa 	srli	r2,r7,3
 10068e8:	100690fa 	slli	r3,r2,3
 10068ec:	1acd883a 	add	r6,r3,r11
 10068f0:	31400217 	ldw	r5,8(r6)
 10068f4:	31405926 	beq	r6,r5,1006a5c <_free_r+0x2a4>
 10068f8:	28800117 	ldw	r2,4(r5)
 10068fc:	00ffff04 	movi	r3,-4
 1006900:	10c4703a 	and	r2,r2,r3
 1006904:	3880022e 	bgeu	r7,r2,1006910 <_free_r+0x158>
 1006908:	29400217 	ldw	r5,8(r5)
 100690c:	317ffa1e 	bne	r6,r5,10068f8 <_free_r+0x140>
 1006910:	29800317 	ldw	r6,12(r5)
 1006914:	41800315 	stw	r6,12(r8)
 1006918:	41400215 	stw	r5,8(r8)
 100691c:	8809883a 	mov	r4,r17
 1006920:	2a000315 	stw	r8,12(r5)
 1006924:	32000215 	stw	r8,8(r6)
 1006928:	dfc00217 	ldw	ra,8(sp)
 100692c:	dc400117 	ldw	r17,4(sp)
 1006930:	dc000017 	ldw	r16,0(sp)
 1006934:	dec00304 	addi	sp,sp,12
 1006938:	100c27c1 	jmpi	100c27c <__malloc_unlock>
 100693c:	dfc00217 	ldw	ra,8(sp)
 1006940:	dc400117 	ldw	r17,4(sp)
 1006944:	dc000017 	ldw	r16,0(sp)
 1006948:	dec00304 	addi	sp,sp,12
 100694c:	f800283a 	ret
 1006950:	31000217 	ldw	r4,8(r6)
 1006954:	003fbd06 	br	100684c <_free_r+0x94>
 1006958:	3806d0fa 	srli	r3,r7,3
 100695c:	00800044 	movi	r2,1
 1006960:	51400117 	ldw	r5,4(r10)
 1006964:	180890fa 	slli	r4,r3,3
 1006968:	1807d0ba 	srai	r3,r3,2
 100696c:	22c9883a 	add	r4,r4,r11
 1006970:	21800217 	ldw	r6,8(r4)
 1006974:	10c4983a 	sll	r2,r2,r3
 1006978:	41000315 	stw	r4,12(r8)
 100697c:	41800215 	stw	r6,8(r8)
 1006980:	288ab03a 	or	r5,r5,r2
 1006984:	22000215 	stw	r8,8(r4)
 1006988:	8809883a 	mov	r4,r17
 100698c:	51400115 	stw	r5,4(r10)
 1006990:	32000315 	stw	r8,12(r6)
 1006994:	dfc00217 	ldw	ra,8(sp)
 1006998:	dc400117 	ldw	r17,4(sp)
 100699c:	dc000017 	ldw	r16,0(sp)
 10069a0:	dec00304 	addi	sp,sp,12
 10069a4:	100c27c1 	jmpi	100c27c <__malloc_unlock>
 10069a8:	2880004c 	andi	r2,r5,1
 10069ac:	3a4d883a 	add	r6,r7,r9
 10069b0:	1000071e 	bne	r2,zero,10069d0 <_free_r+0x218>
 10069b4:	80bffe17 	ldw	r2,-8(r16)
 10069b8:	4091c83a 	sub	r8,r8,r2
 10069bc:	41000317 	ldw	r4,12(r8)
 10069c0:	40c00217 	ldw	r3,8(r8)
 10069c4:	308d883a 	add	r6,r6,r2
 10069c8:	20c00215 	stw	r3,8(r4)
 10069cc:	19000315 	stw	r4,12(r3)
 10069d0:	008040b4 	movhi	r2,258
 10069d4:	10ac8e04 	addi	r2,r2,-19912
 10069d8:	11000017 	ldw	r4,0(r2)
 10069dc:	30c00054 	ori	r3,r6,1
 10069e0:	52000215 	stw	r8,8(r10)
 10069e4:	40c00115 	stw	r3,4(r8)
 10069e8:	313fa036 	bltu	r6,r4,100686c <_free_r+0xb4>
 10069ec:	008040b4 	movhi	r2,258
 10069f0:	10b3a204 	addi	r2,r2,-12664
 10069f4:	11400017 	ldw	r5,0(r2)
 10069f8:	8809883a 	mov	r4,r17
 10069fc:	100668c0 	call	100668c <_malloc_trim_r>
 1006a00:	003f9a06 	br	100686c <_free_r+0xb4>
 1006a04:	00800104 	movi	r2,4
 1006a08:	10c0072e 	bgeu	r2,r3,1006a28 <_free_r+0x270>
 1006a0c:	00800504 	movi	r2,20
 1006a10:	10c01936 	bltu	r2,r3,1006a78 <_free_r+0x2c0>
 1006a14:	188016c4 	addi	r2,r3,91
 1006a18:	100690fa 	slli	r3,r2,3
 1006a1c:	003fb306 	br	10068ec <_free_r+0x134>
 1006a20:	01400044 	movi	r5,1
 1006a24:	003f7e06 	br	1006820 <_free_r+0x68>
 1006a28:	3804d1ba 	srli	r2,r7,6
 1006a2c:	10800e04 	addi	r2,r2,56
 1006a30:	100690fa 	slli	r3,r2,3
 1006a34:	003fad06 	br	10068ec <_free_r+0x134>
 1006a38:	22000315 	stw	r8,12(r4)
 1006a3c:	22000215 	stw	r8,8(r4)
 1006a40:	3a05883a 	add	r2,r7,r8
 1006a44:	38c00054 	ori	r3,r7,1
 1006a48:	11c00015 	stw	r7,0(r2)
 1006a4c:	41000215 	stw	r4,8(r8)
 1006a50:	40c00115 	stw	r3,4(r8)
 1006a54:	41000315 	stw	r4,12(r8)
 1006a58:	003f8406 	br	100686c <_free_r+0xb4>
 1006a5c:	1005d0ba 	srai	r2,r2,2
 1006a60:	00c00044 	movi	r3,1
 1006a64:	51000117 	ldw	r4,4(r10)
 1006a68:	1886983a 	sll	r3,r3,r2
 1006a6c:	20c8b03a 	or	r4,r4,r3
 1006a70:	51000115 	stw	r4,4(r10)
 1006a74:	003fa706 	br	1006914 <_free_r+0x15c>
 1006a78:	00801504 	movi	r2,84
 1006a7c:	10c00436 	bltu	r2,r3,1006a90 <_free_r+0x2d8>
 1006a80:	3804d33a 	srli	r2,r7,12
 1006a84:	10801b84 	addi	r2,r2,110
 1006a88:	100690fa 	slli	r3,r2,3
 1006a8c:	003f9706 	br	10068ec <_free_r+0x134>
 1006a90:	00805504 	movi	r2,340
 1006a94:	10c00436 	bltu	r2,r3,1006aa8 <_free_r+0x2f0>
 1006a98:	3804d3fa 	srli	r2,r7,15
 1006a9c:	10801dc4 	addi	r2,r2,119
 1006aa0:	100690fa 	slli	r3,r2,3
 1006aa4:	003f9106 	br	10068ec <_free_r+0x134>
 1006aa8:	00815504 	movi	r2,1364
 1006aac:	10c0032e 	bgeu	r2,r3,1006abc <_free_r+0x304>
 1006ab0:	00801f84 	movi	r2,126
 1006ab4:	00c0fc04 	movi	r3,1008
 1006ab8:	003f8c06 	br	10068ec <_free_r+0x134>
 1006abc:	3804d4ba 	srli	r2,r7,18
 1006ac0:	10801f04 	addi	r2,r2,124
 1006ac4:	100690fa 	slli	r3,r2,3
 1006ac8:	003f8806 	br	10068ec <_free_r+0x134>

01006acc <__sfvwrite_r>:
 1006acc:	30800217 	ldw	r2,8(r6)
 1006ad0:	defff504 	addi	sp,sp,-44
 1006ad4:	df000915 	stw	fp,36(sp)
 1006ad8:	dd800715 	stw	r22,28(sp)
 1006adc:	dc800315 	stw	r18,12(sp)
 1006ae0:	dfc00a15 	stw	ra,40(sp)
 1006ae4:	ddc00815 	stw	r23,32(sp)
 1006ae8:	dd400615 	stw	r21,24(sp)
 1006aec:	dd000515 	stw	r20,20(sp)
 1006af0:	dcc00415 	stw	r19,16(sp)
 1006af4:	dc400215 	stw	r17,8(sp)
 1006af8:	dc000115 	stw	r16,4(sp)
 1006afc:	302d883a 	mov	r22,r6
 1006b00:	2039883a 	mov	fp,r4
 1006b04:	2825883a 	mov	r18,r5
 1006b08:	10001c26 	beq	r2,zero,1006b7c <__sfvwrite_r+0xb0>
 1006b0c:	29c0030b 	ldhu	r7,12(r5)
 1006b10:	3880020c 	andi	r2,r7,8
 1006b14:	10002726 	beq	r2,zero,1006bb4 <__sfvwrite_r+0xe8>
 1006b18:	28800417 	ldw	r2,16(r5)
 1006b1c:	10002526 	beq	r2,zero,1006bb4 <__sfvwrite_r+0xe8>
 1006b20:	3880008c 	andi	r2,r7,2
 1006b24:	b5400017 	ldw	r21,0(r22)
 1006b28:	10002826 	beq	r2,zero,1006bcc <__sfvwrite_r+0x100>
 1006b2c:	0021883a 	mov	r16,zero
 1006b30:	0023883a 	mov	r17,zero
 1006b34:	880d883a 	mov	r6,r17
 1006b38:	e009883a 	mov	r4,fp
 1006b3c:	00810004 	movi	r2,1024
 1006b40:	80006e26 	beq	r16,zero,1006cfc <__sfvwrite_r+0x230>
 1006b44:	800f883a 	mov	r7,r16
 1006b48:	91400717 	ldw	r5,28(r18)
 1006b4c:	1400012e 	bgeu	r2,r16,1006b54 <__sfvwrite_r+0x88>
 1006b50:	100f883a 	mov	r7,r2
 1006b54:	90c00917 	ldw	r3,36(r18)
 1006b58:	183ee83a 	callr	r3
 1006b5c:	1007883a 	mov	r3,r2
 1006b60:	80a1c83a 	sub	r16,r16,r2
 1006b64:	88a3883a 	add	r17,r17,r2
 1006b68:	00806d0e 	bge	zero,r2,1006d20 <__sfvwrite_r+0x254>
 1006b6c:	b0800217 	ldw	r2,8(r22)
 1006b70:	10c5c83a 	sub	r2,r2,r3
 1006b74:	b0800215 	stw	r2,8(r22)
 1006b78:	103fee1e 	bne	r2,zero,1006b34 <__sfvwrite_r+0x68>
 1006b7c:	0009883a 	mov	r4,zero
 1006b80:	2005883a 	mov	r2,r4
 1006b84:	dfc00a17 	ldw	ra,40(sp)
 1006b88:	df000917 	ldw	fp,36(sp)
 1006b8c:	ddc00817 	ldw	r23,32(sp)
 1006b90:	dd800717 	ldw	r22,28(sp)
 1006b94:	dd400617 	ldw	r21,24(sp)
 1006b98:	dd000517 	ldw	r20,20(sp)
 1006b9c:	dcc00417 	ldw	r19,16(sp)
 1006ba0:	dc800317 	ldw	r18,12(sp)
 1006ba4:	dc400217 	ldw	r17,8(sp)
 1006ba8:	dc000117 	ldw	r16,4(sp)
 1006bac:	dec00b04 	addi	sp,sp,44
 1006bb0:	f800283a 	ret
 1006bb4:	10048340 	call	1004834 <__swsetup_r>
 1006bb8:	1000e41e 	bne	r2,zero,1006f4c <__sfvwrite_r+0x480>
 1006bbc:	91c0030b 	ldhu	r7,12(r18)
 1006bc0:	b5400017 	ldw	r21,0(r22)
 1006bc4:	3880008c 	andi	r2,r7,2
 1006bc8:	103fd81e 	bne	r2,zero,1006b2c <__sfvwrite_r+0x60>
 1006bcc:	3880004c 	andi	r2,r7,1
 1006bd0:	1005003a 	cmpeq	r2,r2,zero
 1006bd4:	10005726 	beq	r2,zero,1006d34 <__sfvwrite_r+0x268>
 1006bd8:	0029883a 	mov	r20,zero
 1006bdc:	002f883a 	mov	r23,zero
 1006be0:	a0004226 	beq	r20,zero,1006cec <__sfvwrite_r+0x220>
 1006be4:	3880800c 	andi	r2,r7,512
 1006be8:	94000217 	ldw	r16,8(r18)
 1006bec:	10008b26 	beq	r2,zero,1006e1c <__sfvwrite_r+0x350>
 1006bf0:	800d883a 	mov	r6,r16
 1006bf4:	a400a536 	bltu	r20,r16,1006e8c <__sfvwrite_r+0x3c0>
 1006bf8:	3881200c 	andi	r2,r7,1152
 1006bfc:	10002726 	beq	r2,zero,1006c9c <__sfvwrite_r+0x1d0>
 1006c00:	90800517 	ldw	r2,20(r18)
 1006c04:	92000417 	ldw	r8,16(r18)
 1006c08:	91400017 	ldw	r5,0(r18)
 1006c0c:	1087883a 	add	r3,r2,r2
 1006c10:	1887883a 	add	r3,r3,r2
 1006c14:	1808d7fa 	srli	r4,r3,31
 1006c18:	2a21c83a 	sub	r16,r5,r8
 1006c1c:	80800044 	addi	r2,r16,1
 1006c20:	20c9883a 	add	r4,r4,r3
 1006c24:	2027d07a 	srai	r19,r4,1
 1006c28:	a085883a 	add	r2,r20,r2
 1006c2c:	980d883a 	mov	r6,r19
 1006c30:	9880022e 	bgeu	r19,r2,1006c3c <__sfvwrite_r+0x170>
 1006c34:	1027883a 	mov	r19,r2
 1006c38:	100d883a 	mov	r6,r2
 1006c3c:	3881000c 	andi	r2,r7,1024
 1006c40:	1000b826 	beq	r2,zero,1006f24 <__sfvwrite_r+0x458>
 1006c44:	300b883a 	mov	r5,r6
 1006c48:	e009883a 	mov	r4,fp
 1006c4c:	10073400 	call	1007340 <_malloc_r>
 1006c50:	10003126 	beq	r2,zero,1006d18 <__sfvwrite_r+0x24c>
 1006c54:	91400417 	ldw	r5,16(r18)
 1006c58:	1009883a 	mov	r4,r2
 1006c5c:	800d883a 	mov	r6,r16
 1006c60:	1023883a 	mov	r17,r2
 1006c64:	1007b640 	call	1007b64 <memcpy>
 1006c68:	90c0030b 	ldhu	r3,12(r18)
 1006c6c:	00beffc4 	movi	r2,-1025
 1006c70:	1886703a 	and	r3,r3,r2
 1006c74:	18c02014 	ori	r3,r3,128
 1006c78:	90c0030d 	sth	r3,12(r18)
 1006c7c:	9c07c83a 	sub	r3,r19,r16
 1006c80:	8c05883a 	add	r2,r17,r16
 1006c84:	a00d883a 	mov	r6,r20
 1006c88:	a021883a 	mov	r16,r20
 1006c8c:	90800015 	stw	r2,0(r18)
 1006c90:	90c00215 	stw	r3,8(r18)
 1006c94:	94400415 	stw	r17,16(r18)
 1006c98:	94c00515 	stw	r19,20(r18)
 1006c9c:	91000017 	ldw	r4,0(r18)
 1006ca0:	b80b883a 	mov	r5,r23
 1006ca4:	a023883a 	mov	r17,r20
 1006ca8:	1007c040 	call	1007c04 <memmove>
 1006cac:	90c00217 	ldw	r3,8(r18)
 1006cb0:	90800017 	ldw	r2,0(r18)
 1006cb4:	a027883a 	mov	r19,r20
 1006cb8:	1c07c83a 	sub	r3,r3,r16
 1006cbc:	1405883a 	add	r2,r2,r16
 1006cc0:	90c00215 	stw	r3,8(r18)
 1006cc4:	a021883a 	mov	r16,r20
 1006cc8:	90800015 	stw	r2,0(r18)
 1006ccc:	b0800217 	ldw	r2,8(r22)
 1006cd0:	1405c83a 	sub	r2,r2,r16
 1006cd4:	b0800215 	stw	r2,8(r22)
 1006cd8:	103fa826 	beq	r2,zero,1006b7c <__sfvwrite_r+0xb0>
 1006cdc:	a469c83a 	sub	r20,r20,r17
 1006ce0:	91c0030b 	ldhu	r7,12(r18)
 1006ce4:	bcef883a 	add	r23,r23,r19
 1006ce8:	a03fbe1e 	bne	r20,zero,1006be4 <__sfvwrite_r+0x118>
 1006cec:	adc00017 	ldw	r23,0(r21)
 1006cf0:	ad000117 	ldw	r20,4(r21)
 1006cf4:	ad400204 	addi	r21,r21,8
 1006cf8:	003fb906 	br	1006be0 <__sfvwrite_r+0x114>
 1006cfc:	ac400017 	ldw	r17,0(r21)
 1006d00:	ac000117 	ldw	r16,4(r21)
 1006d04:	ad400204 	addi	r21,r21,8
 1006d08:	003f8a06 	br	1006b34 <__sfvwrite_r+0x68>
 1006d0c:	91400417 	ldw	r5,16(r18)
 1006d10:	e009883a 	mov	r4,fp
 1006d14:	10067b80 	call	10067b8 <_free_r>
 1006d18:	00800304 	movi	r2,12
 1006d1c:	e0800015 	stw	r2,0(fp)
 1006d20:	9080030b 	ldhu	r2,12(r18)
 1006d24:	013fffc4 	movi	r4,-1
 1006d28:	10801014 	ori	r2,r2,64
 1006d2c:	9080030d 	sth	r2,12(r18)
 1006d30:	003f9306 	br	1006b80 <__sfvwrite_r+0xb4>
 1006d34:	0027883a 	mov	r19,zero
 1006d38:	002f883a 	mov	r23,zero
 1006d3c:	d8000015 	stw	zero,0(sp)
 1006d40:	0029883a 	mov	r20,zero
 1006d44:	98001e26 	beq	r19,zero,1006dc0 <__sfvwrite_r+0x2f4>
 1006d48:	d8c00017 	ldw	r3,0(sp)
 1006d4c:	1804c03a 	cmpne	r2,r3,zero
 1006d50:	10005e26 	beq	r2,zero,1006ecc <__sfvwrite_r+0x400>
 1006d54:	9821883a 	mov	r16,r19
 1006d58:	a4c0012e 	bgeu	r20,r19,1006d60 <__sfvwrite_r+0x294>
 1006d5c:	a021883a 	mov	r16,r20
 1006d60:	91000017 	ldw	r4,0(r18)
 1006d64:	90800417 	ldw	r2,16(r18)
 1006d68:	91800217 	ldw	r6,8(r18)
 1006d6c:	91c00517 	ldw	r7,20(r18)
 1006d70:	1100022e 	bgeu	r2,r4,1006d7c <__sfvwrite_r+0x2b0>
 1006d74:	31e3883a 	add	r17,r6,r7
 1006d78:	8c001616 	blt	r17,r16,1006dd4 <__sfvwrite_r+0x308>
 1006d7c:	81c03816 	blt	r16,r7,1006e60 <__sfvwrite_r+0x394>
 1006d80:	90c00917 	ldw	r3,36(r18)
 1006d84:	91400717 	ldw	r5,28(r18)
 1006d88:	e009883a 	mov	r4,fp
 1006d8c:	b80d883a 	mov	r6,r23
 1006d90:	183ee83a 	callr	r3
 1006d94:	1023883a 	mov	r17,r2
 1006d98:	00bfe10e 	bge	zero,r2,1006d20 <__sfvwrite_r+0x254>
 1006d9c:	a469c83a 	sub	r20,r20,r17
 1006da0:	a0001826 	beq	r20,zero,1006e04 <__sfvwrite_r+0x338>
 1006da4:	b0800217 	ldw	r2,8(r22)
 1006da8:	1445c83a 	sub	r2,r2,r17
 1006dac:	b0800215 	stw	r2,8(r22)
 1006db0:	103f7226 	beq	r2,zero,1006b7c <__sfvwrite_r+0xb0>
 1006db4:	9c67c83a 	sub	r19,r19,r17
 1006db8:	bc6f883a 	add	r23,r23,r17
 1006dbc:	983fe21e 	bne	r19,zero,1006d48 <__sfvwrite_r+0x27c>
 1006dc0:	adc00017 	ldw	r23,0(r21)
 1006dc4:	acc00117 	ldw	r19,4(r21)
 1006dc8:	ad400204 	addi	r21,r21,8
 1006dcc:	d8000015 	stw	zero,0(sp)
 1006dd0:	003fdc06 	br	1006d44 <__sfvwrite_r+0x278>
 1006dd4:	b80b883a 	mov	r5,r23
 1006dd8:	880d883a 	mov	r6,r17
 1006ddc:	1007c040 	call	1007c04 <memmove>
 1006de0:	90c00017 	ldw	r3,0(r18)
 1006de4:	e009883a 	mov	r4,fp
 1006de8:	900b883a 	mov	r5,r18
 1006dec:	1c47883a 	add	r3,r3,r17
 1006df0:	90c00015 	stw	r3,0(r18)
 1006df4:	10061680 	call	1006168 <_fflush_r>
 1006df8:	103fc91e 	bne	r2,zero,1006d20 <__sfvwrite_r+0x254>
 1006dfc:	a469c83a 	sub	r20,r20,r17
 1006e00:	a03fe81e 	bne	r20,zero,1006da4 <__sfvwrite_r+0x2d8>
 1006e04:	e009883a 	mov	r4,fp
 1006e08:	900b883a 	mov	r5,r18
 1006e0c:	10061680 	call	1006168 <_fflush_r>
 1006e10:	103fc31e 	bne	r2,zero,1006d20 <__sfvwrite_r+0x254>
 1006e14:	d8000015 	stw	zero,0(sp)
 1006e18:	003fe206 	br	1006da4 <__sfvwrite_r+0x2d8>
 1006e1c:	91000017 	ldw	r4,0(r18)
 1006e20:	90800417 	ldw	r2,16(r18)
 1006e24:	1100022e 	bgeu	r2,r4,1006e30 <__sfvwrite_r+0x364>
 1006e28:	8023883a 	mov	r17,r16
 1006e2c:	85003136 	bltu	r16,r20,1006ef4 <__sfvwrite_r+0x428>
 1006e30:	91c00517 	ldw	r7,20(r18)
 1006e34:	a1c01836 	bltu	r20,r7,1006e98 <__sfvwrite_r+0x3cc>
 1006e38:	90c00917 	ldw	r3,36(r18)
 1006e3c:	91400717 	ldw	r5,28(r18)
 1006e40:	e009883a 	mov	r4,fp
 1006e44:	b80d883a 	mov	r6,r23
 1006e48:	183ee83a 	callr	r3
 1006e4c:	1021883a 	mov	r16,r2
 1006e50:	00bfb30e 	bge	zero,r2,1006d20 <__sfvwrite_r+0x254>
 1006e54:	1023883a 	mov	r17,r2
 1006e58:	1027883a 	mov	r19,r2
 1006e5c:	003f9b06 	br	1006ccc <__sfvwrite_r+0x200>
 1006e60:	b80b883a 	mov	r5,r23
 1006e64:	800d883a 	mov	r6,r16
 1006e68:	1007c040 	call	1007c04 <memmove>
 1006e6c:	90c00217 	ldw	r3,8(r18)
 1006e70:	90800017 	ldw	r2,0(r18)
 1006e74:	8023883a 	mov	r17,r16
 1006e78:	1c07c83a 	sub	r3,r3,r16
 1006e7c:	1405883a 	add	r2,r2,r16
 1006e80:	90c00215 	stw	r3,8(r18)
 1006e84:	90800015 	stw	r2,0(r18)
 1006e88:	003fc406 	br	1006d9c <__sfvwrite_r+0x2d0>
 1006e8c:	a00d883a 	mov	r6,r20
 1006e90:	a021883a 	mov	r16,r20
 1006e94:	003f8106 	br	1006c9c <__sfvwrite_r+0x1d0>
 1006e98:	b80b883a 	mov	r5,r23
 1006e9c:	a00d883a 	mov	r6,r20
 1006ea0:	1007c040 	call	1007c04 <memmove>
 1006ea4:	90c00217 	ldw	r3,8(r18)
 1006ea8:	90800017 	ldw	r2,0(r18)
 1006eac:	a021883a 	mov	r16,r20
 1006eb0:	1d07c83a 	sub	r3,r3,r20
 1006eb4:	1505883a 	add	r2,r2,r20
 1006eb8:	a023883a 	mov	r17,r20
 1006ebc:	a027883a 	mov	r19,r20
 1006ec0:	90c00215 	stw	r3,8(r18)
 1006ec4:	90800015 	stw	r2,0(r18)
 1006ec8:	003f8006 	br	1006ccc <__sfvwrite_r+0x200>
 1006ecc:	b809883a 	mov	r4,r23
 1006ed0:	01400284 	movi	r5,10
 1006ed4:	980d883a 	mov	r6,r19
 1006ed8:	1007a800 	call	1007a80 <memchr>
 1006edc:	10001726 	beq	r2,zero,1006f3c <__sfvwrite_r+0x470>
 1006ee0:	15c5c83a 	sub	r2,r2,r23
 1006ee4:	15000044 	addi	r20,r2,1
 1006ee8:	00800044 	movi	r2,1
 1006eec:	d8800015 	stw	r2,0(sp)
 1006ef0:	003f9806 	br	1006d54 <__sfvwrite_r+0x288>
 1006ef4:	b80b883a 	mov	r5,r23
 1006ef8:	800d883a 	mov	r6,r16
 1006efc:	1007c040 	call	1007c04 <memmove>
 1006f00:	90c00017 	ldw	r3,0(r18)
 1006f04:	e009883a 	mov	r4,fp
 1006f08:	900b883a 	mov	r5,r18
 1006f0c:	1c07883a 	add	r3,r3,r16
 1006f10:	90c00015 	stw	r3,0(r18)
 1006f14:	8027883a 	mov	r19,r16
 1006f18:	10061680 	call	1006168 <_fflush_r>
 1006f1c:	103f6b26 	beq	r2,zero,1006ccc <__sfvwrite_r+0x200>
 1006f20:	003f7f06 	br	1006d20 <__sfvwrite_r+0x254>
 1006f24:	400b883a 	mov	r5,r8
 1006f28:	e009883a 	mov	r4,fp
 1006f2c:	1008e080 	call	1008e08 <_realloc_r>
 1006f30:	103f7626 	beq	r2,zero,1006d0c <__sfvwrite_r+0x240>
 1006f34:	1023883a 	mov	r17,r2
 1006f38:	003f5006 	br	1006c7c <__sfvwrite_r+0x1b0>
 1006f3c:	00c00044 	movi	r3,1
 1006f40:	9d000044 	addi	r20,r19,1
 1006f44:	d8c00015 	stw	r3,0(sp)
 1006f48:	003f8206 	br	1006d54 <__sfvwrite_r+0x288>
 1006f4c:	9080030b 	ldhu	r2,12(r18)
 1006f50:	00c00244 	movi	r3,9
 1006f54:	013fffc4 	movi	r4,-1
 1006f58:	10801014 	ori	r2,r2,64
 1006f5c:	9080030d 	sth	r2,12(r18)
 1006f60:	e0c00015 	stw	r3,0(fp)
 1006f64:	003f0606 	br	1006b80 <__sfvwrite_r+0xb4>

01006f68 <_fwalk_reent>:
 1006f68:	defff704 	addi	sp,sp,-36
 1006f6c:	dcc00315 	stw	r19,12(sp)
 1006f70:	24c0b804 	addi	r19,r4,736
 1006f74:	dd800615 	stw	r22,24(sp)
 1006f78:	dd400515 	stw	r21,20(sp)
 1006f7c:	dfc00815 	stw	ra,32(sp)
 1006f80:	ddc00715 	stw	r23,28(sp)
 1006f84:	dd000415 	stw	r20,16(sp)
 1006f88:	dc800215 	stw	r18,8(sp)
 1006f8c:	dc400115 	stw	r17,4(sp)
 1006f90:	dc000015 	stw	r16,0(sp)
 1006f94:	202b883a 	mov	r21,r4
 1006f98:	282d883a 	mov	r22,r5
 1006f9c:	10063f00 	call	10063f0 <__sfp_lock_acquire>
 1006fa0:	98002126 	beq	r19,zero,1007028 <_fwalk_reent+0xc0>
 1006fa4:	002f883a 	mov	r23,zero
 1006fa8:	9c800117 	ldw	r18,4(r19)
 1006fac:	9c000217 	ldw	r16,8(r19)
 1006fb0:	90bfffc4 	addi	r2,r18,-1
 1006fb4:	10000d16 	blt	r2,zero,1006fec <_fwalk_reent+0x84>
 1006fb8:	0023883a 	mov	r17,zero
 1006fbc:	053fffc4 	movi	r20,-1
 1006fc0:	8080030f 	ldh	r2,12(r16)
 1006fc4:	8c400044 	addi	r17,r17,1
 1006fc8:	10000626 	beq	r2,zero,1006fe4 <_fwalk_reent+0x7c>
 1006fcc:	8080038f 	ldh	r2,14(r16)
 1006fd0:	800b883a 	mov	r5,r16
 1006fd4:	a809883a 	mov	r4,r21
 1006fd8:	15000226 	beq	r2,r20,1006fe4 <_fwalk_reent+0x7c>
 1006fdc:	b03ee83a 	callr	r22
 1006fe0:	b8aeb03a 	or	r23,r23,r2
 1006fe4:	84001704 	addi	r16,r16,92
 1006fe8:	947ff51e 	bne	r18,r17,1006fc0 <_fwalk_reent+0x58>
 1006fec:	9cc00017 	ldw	r19,0(r19)
 1006ff0:	983fed1e 	bne	r19,zero,1006fa8 <_fwalk_reent+0x40>
 1006ff4:	10063f40 	call	10063f4 <__sfp_lock_release>
 1006ff8:	b805883a 	mov	r2,r23
 1006ffc:	dfc00817 	ldw	ra,32(sp)
 1007000:	ddc00717 	ldw	r23,28(sp)
 1007004:	dd800617 	ldw	r22,24(sp)
 1007008:	dd400517 	ldw	r21,20(sp)
 100700c:	dd000417 	ldw	r20,16(sp)
 1007010:	dcc00317 	ldw	r19,12(sp)
 1007014:	dc800217 	ldw	r18,8(sp)
 1007018:	dc400117 	ldw	r17,4(sp)
 100701c:	dc000017 	ldw	r16,0(sp)
 1007020:	dec00904 	addi	sp,sp,36
 1007024:	f800283a 	ret
 1007028:	002f883a 	mov	r23,zero
 100702c:	003ff106 	br	1006ff4 <_fwalk_reent+0x8c>

01007030 <_fwalk>:
 1007030:	defff804 	addi	sp,sp,-32
 1007034:	dcc00315 	stw	r19,12(sp)
 1007038:	24c0b804 	addi	r19,r4,736
 100703c:	dd400515 	stw	r21,20(sp)
 1007040:	dfc00715 	stw	ra,28(sp)
 1007044:	dd800615 	stw	r22,24(sp)
 1007048:	dd000415 	stw	r20,16(sp)
 100704c:	dc800215 	stw	r18,8(sp)
 1007050:	dc400115 	stw	r17,4(sp)
 1007054:	dc000015 	stw	r16,0(sp)
 1007058:	282b883a 	mov	r21,r5
 100705c:	10063f00 	call	10063f0 <__sfp_lock_acquire>
 1007060:	98001f26 	beq	r19,zero,10070e0 <_fwalk+0xb0>
 1007064:	002d883a 	mov	r22,zero
 1007068:	9c800117 	ldw	r18,4(r19)
 100706c:	9c000217 	ldw	r16,8(r19)
 1007070:	90bfffc4 	addi	r2,r18,-1
 1007074:	10000c16 	blt	r2,zero,10070a8 <_fwalk+0x78>
 1007078:	0023883a 	mov	r17,zero
 100707c:	053fffc4 	movi	r20,-1
 1007080:	8080030f 	ldh	r2,12(r16)
 1007084:	8c400044 	addi	r17,r17,1
 1007088:	10000526 	beq	r2,zero,10070a0 <_fwalk+0x70>
 100708c:	8080038f 	ldh	r2,14(r16)
 1007090:	8009883a 	mov	r4,r16
 1007094:	15000226 	beq	r2,r20,10070a0 <_fwalk+0x70>
 1007098:	a83ee83a 	callr	r21
 100709c:	b0acb03a 	or	r22,r22,r2
 10070a0:	84001704 	addi	r16,r16,92
 10070a4:	947ff61e 	bne	r18,r17,1007080 <_fwalk+0x50>
 10070a8:	9cc00017 	ldw	r19,0(r19)
 10070ac:	983fee1e 	bne	r19,zero,1007068 <_fwalk+0x38>
 10070b0:	10063f40 	call	10063f4 <__sfp_lock_release>
 10070b4:	b005883a 	mov	r2,r22
 10070b8:	dfc00717 	ldw	ra,28(sp)
 10070bc:	dd800617 	ldw	r22,24(sp)
 10070c0:	dd400517 	ldw	r21,20(sp)
 10070c4:	dd000417 	ldw	r20,16(sp)
 10070c8:	dcc00317 	ldw	r19,12(sp)
 10070cc:	dc800217 	ldw	r18,8(sp)
 10070d0:	dc400117 	ldw	r17,4(sp)
 10070d4:	dc000017 	ldw	r16,0(sp)
 10070d8:	dec00804 	addi	sp,sp,32
 10070dc:	f800283a 	ret
 10070e0:	002d883a 	mov	r22,zero
 10070e4:	003ff206 	br	10070b0 <_fwalk+0x80>

010070e8 <__locale_charset>:
 10070e8:	d0a00817 	ldw	r2,-32736(gp)
 10070ec:	f800283a 	ret

010070f0 <_localeconv_r>:
 10070f0:	008040b4 	movhi	r2,258
 10070f4:	10a52804 	addi	r2,r2,-27488
 10070f8:	f800283a 	ret

010070fc <localeconv>:
 10070fc:	008040b4 	movhi	r2,258
 1007100:	10ac8a04 	addi	r2,r2,-19928
 1007104:	11000017 	ldw	r4,0(r2)
 1007108:	10070f01 	jmpi	10070f0 <_localeconv_r>

0100710c <_setlocale_r>:
 100710c:	defffc04 	addi	sp,sp,-16
 1007110:	00c040b4 	movhi	r3,258
 1007114:	18e52304 	addi	r3,r3,-27508
 1007118:	dc800215 	stw	r18,8(sp)
 100711c:	dc400115 	stw	r17,4(sp)
 1007120:	dc000015 	stw	r16,0(sp)
 1007124:	2023883a 	mov	r17,r4
 1007128:	2825883a 	mov	r18,r5
 100712c:	dfc00315 	stw	ra,12(sp)
 1007130:	3021883a 	mov	r16,r6
 1007134:	3009883a 	mov	r4,r6
 1007138:	180b883a 	mov	r5,r3
 100713c:	30000926 	beq	r6,zero,1007164 <_setlocale_r+0x58>
 1007140:	10096280 	call	1009628 <strcmp>
 1007144:	8009883a 	mov	r4,r16
 1007148:	014040b4 	movhi	r5,258
 100714c:	29650e04 	addi	r5,r5,-27592
 1007150:	10000b1e 	bne	r2,zero,1007180 <_setlocale_r+0x74>
 1007154:	8c000d15 	stw	r16,52(r17)
 1007158:	8c800c15 	stw	r18,48(r17)
 100715c:	00c040b4 	movhi	r3,258
 1007160:	18e52304 	addi	r3,r3,-27508
 1007164:	1805883a 	mov	r2,r3
 1007168:	dfc00317 	ldw	ra,12(sp)
 100716c:	dc800217 	ldw	r18,8(sp)
 1007170:	dc400117 	ldw	r17,4(sp)
 1007174:	dc000017 	ldw	r16,0(sp)
 1007178:	dec00404 	addi	sp,sp,16
 100717c:	f800283a 	ret
 1007180:	10096280 	call	1009628 <strcmp>
 1007184:	0007883a 	mov	r3,zero
 1007188:	103ff226 	beq	r2,zero,1007154 <_setlocale_r+0x48>
 100718c:	003ff506 	br	1007164 <_setlocale_r+0x58>

01007190 <setlocale>:
 1007190:	018040b4 	movhi	r6,258
 1007194:	31ac8a04 	addi	r6,r6,-19928
 1007198:	2007883a 	mov	r3,r4
 100719c:	31000017 	ldw	r4,0(r6)
 10071a0:	280d883a 	mov	r6,r5
 10071a4:	180b883a 	mov	r5,r3
 10071a8:	100710c1 	jmpi	100710c <_setlocale_r>

010071ac <__smakebuf_r>:
 10071ac:	2880030b 	ldhu	r2,12(r5)
 10071b0:	deffed04 	addi	sp,sp,-76
 10071b4:	dc401015 	stw	r17,64(sp)
 10071b8:	1080008c 	andi	r2,r2,2
 10071bc:	dc000f15 	stw	r16,60(sp)
 10071c0:	dfc01215 	stw	ra,72(sp)
 10071c4:	dc801115 	stw	r18,68(sp)
 10071c8:	2821883a 	mov	r16,r5
 10071cc:	2023883a 	mov	r17,r4
 10071d0:	10000b26 	beq	r2,zero,1007200 <__smakebuf_r+0x54>
 10071d4:	28c010c4 	addi	r3,r5,67
 10071d8:	00800044 	movi	r2,1
 10071dc:	28800515 	stw	r2,20(r5)
 10071e0:	28c00415 	stw	r3,16(r5)
 10071e4:	28c00015 	stw	r3,0(r5)
 10071e8:	dfc01217 	ldw	ra,72(sp)
 10071ec:	dc801117 	ldw	r18,68(sp)
 10071f0:	dc401017 	ldw	r17,64(sp)
 10071f4:	dc000f17 	ldw	r16,60(sp)
 10071f8:	dec01304 	addi	sp,sp,76
 10071fc:	f800283a 	ret
 1007200:	2940038f 	ldh	r5,14(r5)
 1007204:	28002116 	blt	r5,zero,100728c <__smakebuf_r+0xe0>
 1007208:	d80d883a 	mov	r6,sp
 100720c:	10099b80 	call	10099b8 <_fstat_r>
 1007210:	10001e16 	blt	r2,zero,100728c <__smakebuf_r+0xe0>
 1007214:	d8800117 	ldw	r2,4(sp)
 1007218:	00e00014 	movui	r3,32768
 100721c:	113c000c 	andi	r4,r2,61440
 1007220:	20c03126 	beq	r4,r3,10072e8 <__smakebuf_r+0x13c>
 1007224:	8080030b 	ldhu	r2,12(r16)
 1007228:	00c80004 	movi	r3,8192
 100722c:	10820014 	ori	r2,r2,2048
 1007230:	8080030d 	sth	r2,12(r16)
 1007234:	20c01e26 	beq	r4,r3,10072b0 <__smakebuf_r+0x104>
 1007238:	04810004 	movi	r18,1024
 100723c:	8809883a 	mov	r4,r17
 1007240:	900b883a 	mov	r5,r18
 1007244:	10073400 	call	1007340 <_malloc_r>
 1007248:	1009883a 	mov	r4,r2
 100724c:	10003126 	beq	r2,zero,1007314 <__smakebuf_r+0x168>
 1007250:	80c0030b 	ldhu	r3,12(r16)
 1007254:	00804034 	movhi	r2,256
 1007258:	10993904 	addi	r2,r2,25828
 100725c:	88800f15 	stw	r2,60(r17)
 1007260:	18c02014 	ori	r3,r3,128
 1007264:	84800515 	stw	r18,20(r16)
 1007268:	80c0030d 	sth	r3,12(r16)
 100726c:	81000415 	stw	r4,16(r16)
 1007270:	81000015 	stw	r4,0(r16)
 1007274:	dfc01217 	ldw	ra,72(sp)
 1007278:	dc801117 	ldw	r18,68(sp)
 100727c:	dc401017 	ldw	r17,64(sp)
 1007280:	dc000f17 	ldw	r16,60(sp)
 1007284:	dec01304 	addi	sp,sp,76
 1007288:	f800283a 	ret
 100728c:	80c0030b 	ldhu	r3,12(r16)
 1007290:	1880200c 	andi	r2,r3,128
 1007294:	10000426 	beq	r2,zero,10072a8 <__smakebuf_r+0xfc>
 1007298:	04801004 	movi	r18,64
 100729c:	18820014 	ori	r2,r3,2048
 10072a0:	8080030d 	sth	r2,12(r16)
 10072a4:	003fe506 	br	100723c <__smakebuf_r+0x90>
 10072a8:	04810004 	movi	r18,1024
 10072ac:	003ffb06 	br	100729c <__smakebuf_r+0xf0>
 10072b0:	8140038f 	ldh	r5,14(r16)
 10072b4:	8809883a 	mov	r4,r17
 10072b8:	1009a2c0 	call	1009a2c <_isatty_r>
 10072bc:	103fde26 	beq	r2,zero,1007238 <__smakebuf_r+0x8c>
 10072c0:	8080030b 	ldhu	r2,12(r16)
 10072c4:	80c010c4 	addi	r3,r16,67
 10072c8:	04810004 	movi	r18,1024
 10072cc:	10800054 	ori	r2,r2,1
 10072d0:	8080030d 	sth	r2,12(r16)
 10072d4:	00800044 	movi	r2,1
 10072d8:	80c00415 	stw	r3,16(r16)
 10072dc:	80800515 	stw	r2,20(r16)
 10072e0:	80c00015 	stw	r3,0(r16)
 10072e4:	003fd506 	br	100723c <__smakebuf_r+0x90>
 10072e8:	80c00a17 	ldw	r3,40(r16)
 10072ec:	00804074 	movhi	r2,257
 10072f0:	10a53904 	addi	r2,r2,-27420
 10072f4:	18bfcb1e 	bne	r3,r2,1007224 <__smakebuf_r+0x78>
 10072f8:	8080030b 	ldhu	r2,12(r16)
 10072fc:	00c10004 	movi	r3,1024
 1007300:	1825883a 	mov	r18,r3
 1007304:	10c4b03a 	or	r2,r2,r3
 1007308:	8080030d 	sth	r2,12(r16)
 100730c:	80c01315 	stw	r3,76(r16)
 1007310:	003fca06 	br	100723c <__smakebuf_r+0x90>
 1007314:	8100030b 	ldhu	r4,12(r16)
 1007318:	2080800c 	andi	r2,r4,512
 100731c:	103fb21e 	bne	r2,zero,10071e8 <__smakebuf_r+0x3c>
 1007320:	80c010c4 	addi	r3,r16,67
 1007324:	21000094 	ori	r4,r4,2
 1007328:	00800044 	movi	r2,1
 100732c:	80800515 	stw	r2,20(r16)
 1007330:	8100030d 	sth	r4,12(r16)
 1007334:	80c00415 	stw	r3,16(r16)
 1007338:	80c00015 	stw	r3,0(r16)
 100733c:	003faa06 	br	10071e8 <__smakebuf_r+0x3c>

01007340 <_malloc_r>:
 1007340:	defff604 	addi	sp,sp,-40
 1007344:	28c002c4 	addi	r3,r5,11
 1007348:	00800584 	movi	r2,22
 100734c:	dc800215 	stw	r18,8(sp)
 1007350:	dfc00915 	stw	ra,36(sp)
 1007354:	df000815 	stw	fp,32(sp)
 1007358:	ddc00715 	stw	r23,28(sp)
 100735c:	dd800615 	stw	r22,24(sp)
 1007360:	dd400515 	stw	r21,20(sp)
 1007364:	dd000415 	stw	r20,16(sp)
 1007368:	dcc00315 	stw	r19,12(sp)
 100736c:	dc400115 	stw	r17,4(sp)
 1007370:	dc000015 	stw	r16,0(sp)
 1007374:	2025883a 	mov	r18,r4
 1007378:	10c01236 	bltu	r2,r3,10073c4 <_malloc_r+0x84>
 100737c:	04400404 	movi	r17,16
 1007380:	8940142e 	bgeu	r17,r5,10073d4 <_malloc_r+0x94>
 1007384:	00800304 	movi	r2,12
 1007388:	0007883a 	mov	r3,zero
 100738c:	90800015 	stw	r2,0(r18)
 1007390:	1805883a 	mov	r2,r3
 1007394:	dfc00917 	ldw	ra,36(sp)
 1007398:	df000817 	ldw	fp,32(sp)
 100739c:	ddc00717 	ldw	r23,28(sp)
 10073a0:	dd800617 	ldw	r22,24(sp)
 10073a4:	dd400517 	ldw	r21,20(sp)
 10073a8:	dd000417 	ldw	r20,16(sp)
 10073ac:	dcc00317 	ldw	r19,12(sp)
 10073b0:	dc800217 	ldw	r18,8(sp)
 10073b4:	dc400117 	ldw	r17,4(sp)
 10073b8:	dc000017 	ldw	r16,0(sp)
 10073bc:	dec00a04 	addi	sp,sp,40
 10073c0:	f800283a 	ret
 10073c4:	00bffe04 	movi	r2,-8
 10073c8:	18a2703a 	and	r17,r3,r2
 10073cc:	883fed16 	blt	r17,zero,1007384 <_malloc_r+0x44>
 10073d0:	897fec36 	bltu	r17,r5,1007384 <_malloc_r+0x44>
 10073d4:	9009883a 	mov	r4,r18
 10073d8:	100c1740 	call	100c174 <__malloc_lock>
 10073dc:	00807dc4 	movi	r2,503
 10073e0:	14402b2e 	bgeu	r2,r17,1007490 <_malloc_r+0x150>
 10073e4:	8806d27a 	srli	r3,r17,9
 10073e8:	18003f1e 	bne	r3,zero,10074e8 <_malloc_r+0x1a8>
 10073ec:	880cd0fa 	srli	r6,r17,3
 10073f0:	300490fa 	slli	r2,r6,3
 10073f4:	02c040b4 	movhi	r11,258
 10073f8:	5ae6f304 	addi	r11,r11,-25652
 10073fc:	12cb883a 	add	r5,r2,r11
 1007400:	2c000317 	ldw	r16,12(r5)
 1007404:	580f883a 	mov	r7,r11
 1007408:	2c00041e 	bne	r5,r16,100741c <_malloc_r+0xdc>
 100740c:	00000a06 	br	1007438 <_malloc_r+0xf8>
 1007410:	1800860e 	bge	r3,zero,100762c <_malloc_r+0x2ec>
 1007414:	84000317 	ldw	r16,12(r16)
 1007418:	2c000726 	beq	r5,r16,1007438 <_malloc_r+0xf8>
 100741c:	80800117 	ldw	r2,4(r16)
 1007420:	00ffff04 	movi	r3,-4
 1007424:	10c8703a 	and	r4,r2,r3
 1007428:	2447c83a 	sub	r3,r4,r17
 100742c:	008003c4 	movi	r2,15
 1007430:	10fff70e 	bge	r2,r3,1007410 <_malloc_r+0xd0>
 1007434:	31bfffc4 	addi	r6,r6,-1
 1007438:	32400044 	addi	r9,r6,1
 100743c:	028040b4 	movhi	r10,258
 1007440:	52a6f504 	addi	r10,r10,-25644
 1007444:	54000217 	ldw	r16,8(r10)
 1007448:	8280a026 	beq	r16,r10,10076cc <_malloc_r+0x38c>
 100744c:	80800117 	ldw	r2,4(r16)
 1007450:	00ffff04 	movi	r3,-4
 1007454:	10ca703a 	and	r5,r2,r3
 1007458:	2c4dc83a 	sub	r6,r5,r17
 100745c:	008003c4 	movi	r2,15
 1007460:	11808316 	blt	r2,r6,1007670 <_malloc_r+0x330>
 1007464:	52800315 	stw	r10,12(r10)
 1007468:	52800215 	stw	r10,8(r10)
 100746c:	30002916 	blt	r6,zero,1007514 <_malloc_r+0x1d4>
 1007470:	8147883a 	add	r3,r16,r5
 1007474:	18800117 	ldw	r2,4(r3)
 1007478:	9009883a 	mov	r4,r18
 100747c:	10800054 	ori	r2,r2,1
 1007480:	18800115 	stw	r2,4(r3)
 1007484:	100c27c0 	call	100c27c <__malloc_unlock>
 1007488:	80c00204 	addi	r3,r16,8
 100748c:	003fc006 	br	1007390 <_malloc_r+0x50>
 1007490:	02c040b4 	movhi	r11,258
 1007494:	5ae6f304 	addi	r11,r11,-25652
 1007498:	8ac5883a 	add	r2,r17,r11
 100749c:	14000317 	ldw	r16,12(r2)
 10074a0:	580f883a 	mov	r7,r11
 10074a4:	8806d0fa 	srli	r3,r17,3
 10074a8:	14006c26 	beq	r2,r16,100765c <_malloc_r+0x31c>
 10074ac:	80c00117 	ldw	r3,4(r16)
 10074b0:	00bfff04 	movi	r2,-4
 10074b4:	81800317 	ldw	r6,12(r16)
 10074b8:	1886703a 	and	r3,r3,r2
 10074bc:	80c7883a 	add	r3,r16,r3
 10074c0:	18800117 	ldw	r2,4(r3)
 10074c4:	81400217 	ldw	r5,8(r16)
 10074c8:	9009883a 	mov	r4,r18
 10074cc:	10800054 	ori	r2,r2,1
 10074d0:	18800115 	stw	r2,4(r3)
 10074d4:	31400215 	stw	r5,8(r6)
 10074d8:	29800315 	stw	r6,12(r5)
 10074dc:	100c27c0 	call	100c27c <__malloc_unlock>
 10074e0:	80c00204 	addi	r3,r16,8
 10074e4:	003faa06 	br	1007390 <_malloc_r+0x50>
 10074e8:	00800104 	movi	r2,4
 10074ec:	10c0052e 	bgeu	r2,r3,1007504 <_malloc_r+0x1c4>
 10074f0:	00800504 	movi	r2,20
 10074f4:	10c07836 	bltu	r2,r3,10076d8 <_malloc_r+0x398>
 10074f8:	198016c4 	addi	r6,r3,91
 10074fc:	300490fa 	slli	r2,r6,3
 1007500:	003fbc06 	br	10073f4 <_malloc_r+0xb4>
 1007504:	8804d1ba 	srli	r2,r17,6
 1007508:	11800e04 	addi	r6,r2,56
 100750c:	300490fa 	slli	r2,r6,3
 1007510:	003fb806 	br	10073f4 <_malloc_r+0xb4>
 1007514:	00807fc4 	movi	r2,511
 1007518:	1140bb36 	bltu	r2,r5,1007808 <_malloc_r+0x4c8>
 100751c:	2806d0fa 	srli	r3,r5,3
 1007520:	573ffe04 	addi	fp,r10,-8
 1007524:	00800044 	movi	r2,1
 1007528:	180890fa 	slli	r4,r3,3
 100752c:	1807d0ba 	srai	r3,r3,2
 1007530:	e1c00117 	ldw	r7,4(fp)
 1007534:	5909883a 	add	r4,r11,r4
 1007538:	21400217 	ldw	r5,8(r4)
 100753c:	10c4983a 	sll	r2,r2,r3
 1007540:	81000315 	stw	r4,12(r16)
 1007544:	81400215 	stw	r5,8(r16)
 1007548:	388eb03a 	or	r7,r7,r2
 100754c:	2c000315 	stw	r16,12(r5)
 1007550:	24000215 	stw	r16,8(r4)
 1007554:	e1c00115 	stw	r7,4(fp)
 1007558:	4807883a 	mov	r3,r9
 100755c:	4800cd16 	blt	r9,zero,1007894 <_malloc_r+0x554>
 1007560:	1807d0ba 	srai	r3,r3,2
 1007564:	00800044 	movi	r2,1
 1007568:	10c8983a 	sll	r4,r2,r3
 100756c:	39004436 	bltu	r7,r4,1007680 <_malloc_r+0x340>
 1007570:	21c4703a 	and	r2,r4,r7
 1007574:	10000a1e 	bne	r2,zero,10075a0 <_malloc_r+0x260>
 1007578:	2109883a 	add	r4,r4,r4
 100757c:	00bfff04 	movi	r2,-4
 1007580:	4884703a 	and	r2,r9,r2
 1007584:	3906703a 	and	r3,r7,r4
 1007588:	12400104 	addi	r9,r2,4
 100758c:	1800041e 	bne	r3,zero,10075a0 <_malloc_r+0x260>
 1007590:	2109883a 	add	r4,r4,r4
 1007594:	3904703a 	and	r2,r7,r4
 1007598:	4a400104 	addi	r9,r9,4
 100759c:	103ffc26 	beq	r2,zero,1007590 <_malloc_r+0x250>
 10075a0:	480490fa 	slli	r2,r9,3
 10075a4:	4819883a 	mov	r12,r9
 10075a8:	023fff04 	movi	r8,-4
 10075ac:	589b883a 	add	r13,r11,r2
 10075b0:	6807883a 	mov	r3,r13
 10075b4:	014003c4 	movi	r5,15
 10075b8:	1c000317 	ldw	r16,12(r3)
 10075bc:	1c00041e 	bne	r3,r16,10075d0 <_malloc_r+0x290>
 10075c0:	0000a706 	br	1007860 <_malloc_r+0x520>
 10075c4:	3000ab0e 	bge	r6,zero,1007874 <_malloc_r+0x534>
 10075c8:	84000317 	ldw	r16,12(r16)
 10075cc:	1c00a426 	beq	r3,r16,1007860 <_malloc_r+0x520>
 10075d0:	80800117 	ldw	r2,4(r16)
 10075d4:	1204703a 	and	r2,r2,r8
 10075d8:	144dc83a 	sub	r6,r2,r17
 10075dc:	29bff90e 	bge	r5,r6,10075c4 <_malloc_r+0x284>
 10075e0:	81000317 	ldw	r4,12(r16)
 10075e4:	80c00217 	ldw	r3,8(r16)
 10075e8:	89400054 	ori	r5,r17,1
 10075ec:	8445883a 	add	r2,r16,r17
 10075f0:	20c00215 	stw	r3,8(r4)
 10075f4:	19000315 	stw	r4,12(r3)
 10075f8:	81400115 	stw	r5,4(r16)
 10075fc:	1187883a 	add	r3,r2,r6
 1007600:	31000054 	ori	r4,r6,1
 1007604:	50800315 	stw	r2,12(r10)
 1007608:	50800215 	stw	r2,8(r10)
 100760c:	19800015 	stw	r6,0(r3)
 1007610:	11000115 	stw	r4,4(r2)
 1007614:	12800215 	stw	r10,8(r2)
 1007618:	12800315 	stw	r10,12(r2)
 100761c:	9009883a 	mov	r4,r18
 1007620:	100c27c0 	call	100c27c <__malloc_unlock>
 1007624:	80c00204 	addi	r3,r16,8
 1007628:	003f5906 	br	1007390 <_malloc_r+0x50>
 100762c:	8109883a 	add	r4,r16,r4
 1007630:	20800117 	ldw	r2,4(r4)
 1007634:	80c00217 	ldw	r3,8(r16)
 1007638:	81400317 	ldw	r5,12(r16)
 100763c:	10800054 	ori	r2,r2,1
 1007640:	20800115 	stw	r2,4(r4)
 1007644:	28c00215 	stw	r3,8(r5)
 1007648:	19400315 	stw	r5,12(r3)
 100764c:	9009883a 	mov	r4,r18
 1007650:	100c27c0 	call	100c27c <__malloc_unlock>
 1007654:	80c00204 	addi	r3,r16,8
 1007658:	003f4d06 	br	1007390 <_malloc_r+0x50>
 100765c:	80800204 	addi	r2,r16,8
 1007660:	14000317 	ldw	r16,12(r2)
 1007664:	143f911e 	bne	r2,r16,10074ac <_malloc_r+0x16c>
 1007668:	1a400084 	addi	r9,r3,2
 100766c:	003f7306 	br	100743c <_malloc_r+0xfc>
 1007670:	88c00054 	ori	r3,r17,1
 1007674:	8445883a 	add	r2,r16,r17
 1007678:	80c00115 	stw	r3,4(r16)
 100767c:	003fdf06 	br	10075fc <_malloc_r+0x2bc>
 1007680:	e4000217 	ldw	r16,8(fp)
 1007684:	00bfff04 	movi	r2,-4
 1007688:	80c00117 	ldw	r3,4(r16)
 100768c:	802d883a 	mov	r22,r16
 1007690:	18aa703a 	and	r21,r3,r2
 1007694:	ac401636 	bltu	r21,r17,10076f0 <_malloc_r+0x3b0>
 1007698:	ac49c83a 	sub	r4,r21,r17
 100769c:	008003c4 	movi	r2,15
 10076a0:	1100130e 	bge	r2,r4,10076f0 <_malloc_r+0x3b0>
 10076a4:	88800054 	ori	r2,r17,1
 10076a8:	8447883a 	add	r3,r16,r17
 10076ac:	80800115 	stw	r2,4(r16)
 10076b0:	20800054 	ori	r2,r4,1
 10076b4:	18800115 	stw	r2,4(r3)
 10076b8:	e0c00215 	stw	r3,8(fp)
 10076bc:	9009883a 	mov	r4,r18
 10076c0:	100c27c0 	call	100c27c <__malloc_unlock>
 10076c4:	80c00204 	addi	r3,r16,8
 10076c8:	003f3106 	br	1007390 <_malloc_r+0x50>
 10076cc:	39c00117 	ldw	r7,4(r7)
 10076d0:	573ffe04 	addi	fp,r10,-8
 10076d4:	003fa006 	br	1007558 <_malloc_r+0x218>
 10076d8:	00801504 	movi	r2,84
 10076dc:	10c06736 	bltu	r2,r3,100787c <_malloc_r+0x53c>
 10076e0:	8804d33a 	srli	r2,r17,12
 10076e4:	11801b84 	addi	r6,r2,110
 10076e8:	300490fa 	slli	r2,r6,3
 10076ec:	003f4106 	br	10073f4 <_malloc_r+0xb4>
 10076f0:	d0a71d17 	ldw	r2,-25484(gp)
 10076f4:	d0e00a17 	ldw	r3,-32728(gp)
 10076f8:	053fffc4 	movi	r20,-1
 10076fc:	10800404 	addi	r2,r2,16
 1007700:	88a7883a 	add	r19,r17,r2
 1007704:	1d000326 	beq	r3,r20,1007714 <_malloc_r+0x3d4>
 1007708:	98c3ffc4 	addi	r3,r19,4095
 100770c:	00bc0004 	movi	r2,-4096
 1007710:	18a6703a 	and	r19,r3,r2
 1007714:	9009883a 	mov	r4,r18
 1007718:	980b883a 	mov	r5,r19
 100771c:	100946c0 	call	100946c <_sbrk_r>
 1007720:	1009883a 	mov	r4,r2
 1007724:	15000426 	beq	r2,r20,1007738 <_malloc_r+0x3f8>
 1007728:	854b883a 	add	r5,r16,r21
 100772c:	1029883a 	mov	r20,r2
 1007730:	11405a2e 	bgeu	r2,r5,100789c <_malloc_r+0x55c>
 1007734:	87000c26 	beq	r16,fp,1007768 <_malloc_r+0x428>
 1007738:	e4000217 	ldw	r16,8(fp)
 100773c:	80c00117 	ldw	r3,4(r16)
 1007740:	00bfff04 	movi	r2,-4
 1007744:	1884703a 	and	r2,r3,r2
 1007748:	14400336 	bltu	r2,r17,1007758 <_malloc_r+0x418>
 100774c:	1449c83a 	sub	r4,r2,r17
 1007750:	008003c4 	movi	r2,15
 1007754:	113fd316 	blt	r2,r4,10076a4 <_malloc_r+0x364>
 1007758:	9009883a 	mov	r4,r18
 100775c:	100c27c0 	call	100c27c <__malloc_unlock>
 1007760:	0007883a 	mov	r3,zero
 1007764:	003f0a06 	br	1007390 <_malloc_r+0x50>
 1007768:	05c040b4 	movhi	r23,258
 100776c:	bdf3d204 	addi	r23,r23,-12472
 1007770:	b8800017 	ldw	r2,0(r23)
 1007774:	988d883a 	add	r6,r19,r2
 1007778:	b9800015 	stw	r6,0(r23)
 100777c:	d0e00a17 	ldw	r3,-32728(gp)
 1007780:	00bfffc4 	movi	r2,-1
 1007784:	18808e26 	beq	r3,r2,10079c0 <_malloc_r+0x680>
 1007788:	2145c83a 	sub	r2,r4,r5
 100778c:	3085883a 	add	r2,r6,r2
 1007790:	b8800015 	stw	r2,0(r23)
 1007794:	20c001cc 	andi	r3,r4,7
 1007798:	18005f1e 	bne	r3,zero,1007918 <_malloc_r+0x5d8>
 100779c:	000b883a 	mov	r5,zero
 10077a0:	a4c5883a 	add	r2,r20,r19
 10077a4:	1083ffcc 	andi	r2,r2,4095
 10077a8:	00c40004 	movi	r3,4096
 10077ac:	1887c83a 	sub	r3,r3,r2
 10077b0:	28e7883a 	add	r19,r5,r3
 10077b4:	9009883a 	mov	r4,r18
 10077b8:	980b883a 	mov	r5,r19
 10077bc:	100946c0 	call	100946c <_sbrk_r>
 10077c0:	1007883a 	mov	r3,r2
 10077c4:	00bfffc4 	movi	r2,-1
 10077c8:	18807a26 	beq	r3,r2,10079b4 <_malloc_r+0x674>
 10077cc:	1d05c83a 	sub	r2,r3,r20
 10077d0:	9885883a 	add	r2,r19,r2
 10077d4:	10c00054 	ori	r3,r2,1
 10077d8:	b8800017 	ldw	r2,0(r23)
 10077dc:	a021883a 	mov	r16,r20
 10077e0:	a0c00115 	stw	r3,4(r20)
 10077e4:	9885883a 	add	r2,r19,r2
 10077e8:	b8800015 	stw	r2,0(r23)
 10077ec:	e5000215 	stw	r20,8(fp)
 10077f0:	b7003626 	beq	r22,fp,10078cc <_malloc_r+0x58c>
 10077f4:	018003c4 	movi	r6,15
 10077f8:	35404b36 	bltu	r6,r21,1007928 <_malloc_r+0x5e8>
 10077fc:	00800044 	movi	r2,1
 1007800:	a0800115 	stw	r2,4(r20)
 1007804:	003fcd06 	br	100773c <_malloc_r+0x3fc>
 1007808:	2808d27a 	srli	r4,r5,9
 100780c:	2000371e 	bne	r4,zero,10078ec <_malloc_r+0x5ac>
 1007810:	2808d0fa 	srli	r4,r5,3
 1007814:	200690fa 	slli	r3,r4,3
 1007818:	1ad1883a 	add	r8,r3,r11
 100781c:	41800217 	ldw	r6,8(r8)
 1007820:	41805b26 	beq	r8,r6,1007990 <_malloc_r+0x650>
 1007824:	30800117 	ldw	r2,4(r6)
 1007828:	00ffff04 	movi	r3,-4
 100782c:	10c4703a 	and	r2,r2,r3
 1007830:	2880022e 	bgeu	r5,r2,100783c <_malloc_r+0x4fc>
 1007834:	31800217 	ldw	r6,8(r6)
 1007838:	41bffa1e 	bne	r8,r6,1007824 <_malloc_r+0x4e4>
 100783c:	32000317 	ldw	r8,12(r6)
 1007840:	39c00117 	ldw	r7,4(r7)
 1007844:	82000315 	stw	r8,12(r16)
 1007848:	81800215 	stw	r6,8(r16)
 100784c:	070040b4 	movhi	fp,258
 1007850:	e726f304 	addi	fp,fp,-25652
 1007854:	34000315 	stw	r16,12(r6)
 1007858:	44000215 	stw	r16,8(r8)
 100785c:	003f3e06 	br	1007558 <_malloc_r+0x218>
 1007860:	63000044 	addi	r12,r12,1
 1007864:	608000cc 	andi	r2,r12,3
 1007868:	10005d26 	beq	r2,zero,10079e0 <_malloc_r+0x6a0>
 100786c:	18c00204 	addi	r3,r3,8
 1007870:	003f5106 	br	10075b8 <_malloc_r+0x278>
 1007874:	8089883a 	add	r4,r16,r2
 1007878:	003f6d06 	br	1007630 <_malloc_r+0x2f0>
 100787c:	00805504 	movi	r2,340
 1007880:	10c02036 	bltu	r2,r3,1007904 <_malloc_r+0x5c4>
 1007884:	8804d3fa 	srli	r2,r17,15
 1007888:	11801dc4 	addi	r6,r2,119
 100788c:	300490fa 	slli	r2,r6,3
 1007890:	003ed806 	br	10073f4 <_malloc_r+0xb4>
 1007894:	48c000c4 	addi	r3,r9,3
 1007898:	003f3106 	br	1007560 <_malloc_r+0x220>
 100789c:	05c040b4 	movhi	r23,258
 10078a0:	bdf3d204 	addi	r23,r23,-12472
 10078a4:	b8800017 	ldw	r2,0(r23)
 10078a8:	988d883a 	add	r6,r19,r2
 10078ac:	b9800015 	stw	r6,0(r23)
 10078b0:	293fb21e 	bne	r5,r4,100777c <_malloc_r+0x43c>
 10078b4:	2083ffcc 	andi	r2,r4,4095
 10078b8:	103fb01e 	bne	r2,zero,100777c <_malloc_r+0x43c>
 10078bc:	e4000217 	ldw	r16,8(fp)
 10078c0:	9d45883a 	add	r2,r19,r21
 10078c4:	10800054 	ori	r2,r2,1
 10078c8:	80800115 	stw	r2,4(r16)
 10078cc:	b8c00017 	ldw	r3,0(r23)
 10078d0:	d0a71e17 	ldw	r2,-25480(gp)
 10078d4:	10c0012e 	bgeu	r2,r3,10078dc <_malloc_r+0x59c>
 10078d8:	d0e71e15 	stw	r3,-25480(gp)
 10078dc:	d0a71f17 	ldw	r2,-25476(gp)
 10078e0:	10ff962e 	bgeu	r2,r3,100773c <_malloc_r+0x3fc>
 10078e4:	d0e71f15 	stw	r3,-25476(gp)
 10078e8:	003f9406 	br	100773c <_malloc_r+0x3fc>
 10078ec:	00800104 	movi	r2,4
 10078f0:	11001e36 	bltu	r2,r4,100796c <_malloc_r+0x62c>
 10078f4:	2804d1ba 	srli	r2,r5,6
 10078f8:	11000e04 	addi	r4,r2,56
 10078fc:	200690fa 	slli	r3,r4,3
 1007900:	003fc506 	br	1007818 <_malloc_r+0x4d8>
 1007904:	00815504 	movi	r2,1364
 1007908:	10c01d2e 	bgeu	r2,r3,1007980 <_malloc_r+0x640>
 100790c:	01801f84 	movi	r6,126
 1007910:	0080fc04 	movi	r2,1008
 1007914:	003eb706 	br	10073f4 <_malloc_r+0xb4>
 1007918:	00800204 	movi	r2,8
 100791c:	10cbc83a 	sub	r5,r2,r3
 1007920:	2169883a 	add	r20,r4,r5
 1007924:	003f9e06 	br	10077a0 <_malloc_r+0x460>
 1007928:	00bffe04 	movi	r2,-8
 100792c:	a93ffd04 	addi	r4,r21,-12
 1007930:	2088703a 	and	r4,r4,r2
 1007934:	b10b883a 	add	r5,r22,r4
 1007938:	00c00144 	movi	r3,5
 100793c:	28c00215 	stw	r3,8(r5)
 1007940:	28c00115 	stw	r3,4(r5)
 1007944:	b0800117 	ldw	r2,4(r22)
 1007948:	1080004c 	andi	r2,r2,1
 100794c:	2084b03a 	or	r2,r4,r2
 1007950:	b0800115 	stw	r2,4(r22)
 1007954:	313fdd2e 	bgeu	r6,r4,10078cc <_malloc_r+0x58c>
 1007958:	b1400204 	addi	r5,r22,8
 100795c:	9009883a 	mov	r4,r18
 1007960:	10067b80 	call	10067b8 <_free_r>
 1007964:	e4000217 	ldw	r16,8(fp)
 1007968:	003fd806 	br	10078cc <_malloc_r+0x58c>
 100796c:	00800504 	movi	r2,20
 1007970:	11001536 	bltu	r2,r4,10079c8 <_malloc_r+0x688>
 1007974:	210016c4 	addi	r4,r4,91
 1007978:	200690fa 	slli	r3,r4,3
 100797c:	003fa606 	br	1007818 <_malloc_r+0x4d8>
 1007980:	8804d4ba 	srli	r2,r17,18
 1007984:	11801f04 	addi	r6,r2,124
 1007988:	300490fa 	slli	r2,r6,3
 100798c:	003e9906 	br	10073f4 <_malloc_r+0xb4>
 1007990:	2009d0ba 	srai	r4,r4,2
 1007994:	014040b4 	movhi	r5,258
 1007998:	2966f304 	addi	r5,r5,-25652
 100799c:	00c00044 	movi	r3,1
 10079a0:	28800117 	ldw	r2,4(r5)
 10079a4:	1906983a 	sll	r3,r3,r4
 10079a8:	10c4b03a 	or	r2,r2,r3
 10079ac:	28800115 	stw	r2,4(r5)
 10079b0:	003fa306 	br	1007840 <_malloc_r+0x500>
 10079b4:	0027883a 	mov	r19,zero
 10079b8:	00c00044 	movi	r3,1
 10079bc:	003f8606 	br	10077d8 <_malloc_r+0x498>
 10079c0:	d1200a15 	stw	r4,-32728(gp)
 10079c4:	003f7306 	br	1007794 <_malloc_r+0x454>
 10079c8:	00801504 	movi	r2,84
 10079cc:	11001936 	bltu	r2,r4,1007a34 <_malloc_r+0x6f4>
 10079d0:	2804d33a 	srli	r2,r5,12
 10079d4:	11001b84 	addi	r4,r2,110
 10079d8:	200690fa 	slli	r3,r4,3
 10079dc:	003f8e06 	br	1007818 <_malloc_r+0x4d8>
 10079e0:	480b883a 	mov	r5,r9
 10079e4:	6807883a 	mov	r3,r13
 10079e8:	288000cc 	andi	r2,r5,3
 10079ec:	18fffe04 	addi	r3,r3,-8
 10079f0:	297fffc4 	addi	r5,r5,-1
 10079f4:	10001526 	beq	r2,zero,1007a4c <_malloc_r+0x70c>
 10079f8:	18800217 	ldw	r2,8(r3)
 10079fc:	10fffa26 	beq	r2,r3,10079e8 <_malloc_r+0x6a8>
 1007a00:	2109883a 	add	r4,r4,r4
 1007a04:	393f1e36 	bltu	r7,r4,1007680 <_malloc_r+0x340>
 1007a08:	203f1d26 	beq	r4,zero,1007680 <_malloc_r+0x340>
 1007a0c:	21c4703a 	and	r2,r4,r7
 1007a10:	10000226 	beq	r2,zero,1007a1c <_malloc_r+0x6dc>
 1007a14:	6013883a 	mov	r9,r12
 1007a18:	003ee106 	br	10075a0 <_malloc_r+0x260>
 1007a1c:	2109883a 	add	r4,r4,r4
 1007a20:	3904703a 	and	r2,r7,r4
 1007a24:	63000104 	addi	r12,r12,4
 1007a28:	103ffc26 	beq	r2,zero,1007a1c <_malloc_r+0x6dc>
 1007a2c:	6013883a 	mov	r9,r12
 1007a30:	003edb06 	br	10075a0 <_malloc_r+0x260>
 1007a34:	00805504 	movi	r2,340
 1007a38:	11000836 	bltu	r2,r4,1007a5c <_malloc_r+0x71c>
 1007a3c:	2804d3fa 	srli	r2,r5,15
 1007a40:	11001dc4 	addi	r4,r2,119
 1007a44:	200690fa 	slli	r3,r4,3
 1007a48:	003f7306 	br	1007818 <_malloc_r+0x4d8>
 1007a4c:	0104303a 	nor	r2,zero,r4
 1007a50:	388e703a 	and	r7,r7,r2
 1007a54:	e1c00115 	stw	r7,4(fp)
 1007a58:	003fe906 	br	1007a00 <_malloc_r+0x6c0>
 1007a5c:	00815504 	movi	r2,1364
 1007a60:	1100032e 	bgeu	r2,r4,1007a70 <_malloc_r+0x730>
 1007a64:	01001f84 	movi	r4,126
 1007a68:	00c0fc04 	movi	r3,1008
 1007a6c:	003f6a06 	br	1007818 <_malloc_r+0x4d8>
 1007a70:	2804d4ba 	srli	r2,r5,18
 1007a74:	11001f04 	addi	r4,r2,124
 1007a78:	200690fa 	slli	r3,r4,3
 1007a7c:	003f6606 	br	1007818 <_malloc_r+0x4d8>

01007a80 <memchr>:
 1007a80:	008000c4 	movi	r2,3
 1007a84:	29403fcc 	andi	r5,r5,255
 1007a88:	2007883a 	mov	r3,r4
 1007a8c:	1180022e 	bgeu	r2,r6,1007a98 <memchr+0x18>
 1007a90:	2084703a 	and	r2,r4,r2
 1007a94:	10000b26 	beq	r2,zero,1007ac4 <memchr+0x44>
 1007a98:	313fffc4 	addi	r4,r6,-1
 1007a9c:	3000051e 	bne	r6,zero,1007ab4 <memchr+0x34>
 1007aa0:	00002c06 	br	1007b54 <memchr+0xd4>
 1007aa4:	213fffc4 	addi	r4,r4,-1
 1007aa8:	00bfffc4 	movi	r2,-1
 1007aac:	18c00044 	addi	r3,r3,1
 1007ab0:	20802826 	beq	r4,r2,1007b54 <memchr+0xd4>
 1007ab4:	18800003 	ldbu	r2,0(r3)
 1007ab8:	28bffa1e 	bne	r5,r2,1007aa4 <memchr+0x24>
 1007abc:	1805883a 	mov	r2,r3
 1007ac0:	f800283a 	ret
 1007ac4:	0011883a 	mov	r8,zero
 1007ac8:	0007883a 	mov	r3,zero
 1007acc:	01c00104 	movi	r7,4
 1007ad0:	4004923a 	slli	r2,r8,8
 1007ad4:	18c00044 	addi	r3,r3,1
 1007ad8:	1151883a 	add	r8,r2,r5
 1007adc:	19fffc1e 	bne	r3,r7,1007ad0 <memchr+0x50>
 1007ae0:	02bfbff4 	movhi	r10,65279
 1007ae4:	52bfbfc4 	addi	r10,r10,-257
 1007ae8:	02602074 	movhi	r9,32897
 1007aec:	4a602004 	addi	r9,r9,-32640
 1007af0:	02c000c4 	movi	r11,3
 1007af4:	20800017 	ldw	r2,0(r4)
 1007af8:	31bfff04 	addi	r6,r6,-4
 1007afc:	200f883a 	mov	r7,r4
 1007b00:	1204f03a 	xor	r2,r2,r8
 1007b04:	1287883a 	add	r3,r2,r10
 1007b08:	1a46703a 	and	r3,r3,r9
 1007b0c:	0084303a 	nor	r2,zero,r2
 1007b10:	10c4703a 	and	r2,r2,r3
 1007b14:	10000b26 	beq	r2,zero,1007b44 <memchr+0xc4>
 1007b18:	20800003 	ldbu	r2,0(r4)
 1007b1c:	28800f26 	beq	r5,r2,1007b5c <memchr+0xdc>
 1007b20:	20800043 	ldbu	r2,1(r4)
 1007b24:	21c00044 	addi	r7,r4,1
 1007b28:	28800c26 	beq	r5,r2,1007b5c <memchr+0xdc>
 1007b2c:	20800083 	ldbu	r2,2(r4)
 1007b30:	21c00084 	addi	r7,r4,2
 1007b34:	28800926 	beq	r5,r2,1007b5c <memchr+0xdc>
 1007b38:	208000c3 	ldbu	r2,3(r4)
 1007b3c:	21c000c4 	addi	r7,r4,3
 1007b40:	28800626 	beq	r5,r2,1007b5c <memchr+0xdc>
 1007b44:	21000104 	addi	r4,r4,4
 1007b48:	59bfea36 	bltu	r11,r6,1007af4 <memchr+0x74>
 1007b4c:	2007883a 	mov	r3,r4
 1007b50:	003fd106 	br	1007a98 <memchr+0x18>
 1007b54:	0005883a 	mov	r2,zero
 1007b58:	f800283a 	ret
 1007b5c:	3805883a 	mov	r2,r7
 1007b60:	f800283a 	ret

01007b64 <memcpy>:
 1007b64:	01c003c4 	movi	r7,15
 1007b68:	2007883a 	mov	r3,r4
 1007b6c:	3980032e 	bgeu	r7,r6,1007b7c <memcpy+0x18>
 1007b70:	2904b03a 	or	r2,r5,r4
 1007b74:	108000cc 	andi	r2,r2,3
 1007b78:	10000926 	beq	r2,zero,1007ba0 <memcpy+0x3c>
 1007b7c:	30000626 	beq	r6,zero,1007b98 <memcpy+0x34>
 1007b80:	30cd883a 	add	r6,r6,r3
 1007b84:	28800003 	ldbu	r2,0(r5)
 1007b88:	29400044 	addi	r5,r5,1
 1007b8c:	18800005 	stb	r2,0(r3)
 1007b90:	18c00044 	addi	r3,r3,1
 1007b94:	30fffb1e 	bne	r6,r3,1007b84 <memcpy+0x20>
 1007b98:	2005883a 	mov	r2,r4
 1007b9c:	f800283a 	ret
 1007ba0:	3811883a 	mov	r8,r7
 1007ba4:	200f883a 	mov	r7,r4
 1007ba8:	28c00017 	ldw	r3,0(r5)
 1007bac:	31bffc04 	addi	r6,r6,-16
 1007bb0:	38c00015 	stw	r3,0(r7)
 1007bb4:	28800117 	ldw	r2,4(r5)
 1007bb8:	38800115 	stw	r2,4(r7)
 1007bbc:	28c00217 	ldw	r3,8(r5)
 1007bc0:	38c00215 	stw	r3,8(r7)
 1007bc4:	28800317 	ldw	r2,12(r5)
 1007bc8:	29400404 	addi	r5,r5,16
 1007bcc:	38800315 	stw	r2,12(r7)
 1007bd0:	39c00404 	addi	r7,r7,16
 1007bd4:	41bff436 	bltu	r8,r6,1007ba8 <memcpy+0x44>
 1007bd8:	008000c4 	movi	r2,3
 1007bdc:	1180072e 	bgeu	r2,r6,1007bfc <memcpy+0x98>
 1007be0:	1007883a 	mov	r3,r2
 1007be4:	28800017 	ldw	r2,0(r5)
 1007be8:	31bfff04 	addi	r6,r6,-4
 1007bec:	29400104 	addi	r5,r5,4
 1007bf0:	38800015 	stw	r2,0(r7)
 1007bf4:	39c00104 	addi	r7,r7,4
 1007bf8:	19bffa36 	bltu	r3,r6,1007be4 <memcpy+0x80>
 1007bfc:	3807883a 	mov	r3,r7
 1007c00:	003fde06 	br	1007b7c <memcpy+0x18>

01007c04 <memmove>:
 1007c04:	2807883a 	mov	r3,r5
 1007c08:	2011883a 	mov	r8,r4
 1007c0c:	29000c2e 	bgeu	r5,r4,1007c40 <memmove+0x3c>
 1007c10:	298f883a 	add	r7,r5,r6
 1007c14:	21c00a2e 	bgeu	r4,r7,1007c40 <memmove+0x3c>
 1007c18:	30000726 	beq	r6,zero,1007c38 <memmove+0x34>
 1007c1c:	2187883a 	add	r3,r4,r6
 1007c20:	198dc83a 	sub	r6,r3,r6
 1007c24:	39ffffc4 	addi	r7,r7,-1
 1007c28:	38800003 	ldbu	r2,0(r7)
 1007c2c:	18ffffc4 	addi	r3,r3,-1
 1007c30:	18800005 	stb	r2,0(r3)
 1007c34:	19bffb1e 	bne	r3,r6,1007c24 <memmove+0x20>
 1007c38:	2005883a 	mov	r2,r4
 1007c3c:	f800283a 	ret
 1007c40:	01c003c4 	movi	r7,15
 1007c44:	39800a36 	bltu	r7,r6,1007c70 <memmove+0x6c>
 1007c48:	303ffb26 	beq	r6,zero,1007c38 <memmove+0x34>
 1007c4c:	400f883a 	mov	r7,r8
 1007c50:	320d883a 	add	r6,r6,r8
 1007c54:	28800003 	ldbu	r2,0(r5)
 1007c58:	29400044 	addi	r5,r5,1
 1007c5c:	38800005 	stb	r2,0(r7)
 1007c60:	39c00044 	addi	r7,r7,1
 1007c64:	39bffb1e 	bne	r7,r6,1007c54 <memmove+0x50>
 1007c68:	2005883a 	mov	r2,r4
 1007c6c:	f800283a 	ret
 1007c70:	1904b03a 	or	r2,r3,r4
 1007c74:	108000cc 	andi	r2,r2,3
 1007c78:	103ff31e 	bne	r2,zero,1007c48 <memmove+0x44>
 1007c7c:	3811883a 	mov	r8,r7
 1007c80:	180b883a 	mov	r5,r3
 1007c84:	200f883a 	mov	r7,r4
 1007c88:	28c00017 	ldw	r3,0(r5)
 1007c8c:	31bffc04 	addi	r6,r6,-16
 1007c90:	38c00015 	stw	r3,0(r7)
 1007c94:	28800117 	ldw	r2,4(r5)
 1007c98:	38800115 	stw	r2,4(r7)
 1007c9c:	28c00217 	ldw	r3,8(r5)
 1007ca0:	38c00215 	stw	r3,8(r7)
 1007ca4:	28800317 	ldw	r2,12(r5)
 1007ca8:	29400404 	addi	r5,r5,16
 1007cac:	38800315 	stw	r2,12(r7)
 1007cb0:	39c00404 	addi	r7,r7,16
 1007cb4:	41bff436 	bltu	r8,r6,1007c88 <memmove+0x84>
 1007cb8:	008000c4 	movi	r2,3
 1007cbc:	1180072e 	bgeu	r2,r6,1007cdc <memmove+0xd8>
 1007cc0:	1007883a 	mov	r3,r2
 1007cc4:	28800017 	ldw	r2,0(r5)
 1007cc8:	31bfff04 	addi	r6,r6,-4
 1007ccc:	29400104 	addi	r5,r5,4
 1007cd0:	38800015 	stw	r2,0(r7)
 1007cd4:	39c00104 	addi	r7,r7,4
 1007cd8:	19bffa36 	bltu	r3,r6,1007cc4 <memmove+0xc0>
 1007cdc:	3811883a 	mov	r8,r7
 1007ce0:	003fd906 	br	1007c48 <memmove+0x44>

01007ce4 <memset>:
 1007ce4:	008000c4 	movi	r2,3
 1007ce8:	29403fcc 	andi	r5,r5,255
 1007cec:	2007883a 	mov	r3,r4
 1007cf0:	1180022e 	bgeu	r2,r6,1007cfc <memset+0x18>
 1007cf4:	2084703a 	and	r2,r4,r2
 1007cf8:	10000826 	beq	r2,zero,1007d1c <memset+0x38>
 1007cfc:	30000526 	beq	r6,zero,1007d14 <memset+0x30>
 1007d00:	2805883a 	mov	r2,r5
 1007d04:	30cd883a 	add	r6,r6,r3
 1007d08:	18800005 	stb	r2,0(r3)
 1007d0c:	18c00044 	addi	r3,r3,1
 1007d10:	19bffd1e 	bne	r3,r6,1007d08 <memset+0x24>
 1007d14:	2005883a 	mov	r2,r4
 1007d18:	f800283a 	ret
 1007d1c:	2804923a 	slli	r2,r5,8
 1007d20:	020003c4 	movi	r8,15
 1007d24:	200f883a 	mov	r7,r4
 1007d28:	2884b03a 	or	r2,r5,r2
 1007d2c:	1006943a 	slli	r3,r2,16
 1007d30:	10c6b03a 	or	r3,r2,r3
 1007d34:	41800a2e 	bgeu	r8,r6,1007d60 <memset+0x7c>
 1007d38:	4005883a 	mov	r2,r8
 1007d3c:	31bffc04 	addi	r6,r6,-16
 1007d40:	38c00015 	stw	r3,0(r7)
 1007d44:	38c00115 	stw	r3,4(r7)
 1007d48:	38c00215 	stw	r3,8(r7)
 1007d4c:	38c00315 	stw	r3,12(r7)
 1007d50:	39c00404 	addi	r7,r7,16
 1007d54:	11bff936 	bltu	r2,r6,1007d3c <memset+0x58>
 1007d58:	008000c4 	movi	r2,3
 1007d5c:	1180052e 	bgeu	r2,r6,1007d74 <memset+0x90>
 1007d60:	31bfff04 	addi	r6,r6,-4
 1007d64:	008000c4 	movi	r2,3
 1007d68:	38c00015 	stw	r3,0(r7)
 1007d6c:	39c00104 	addi	r7,r7,4
 1007d70:	11bffb36 	bltu	r2,r6,1007d60 <memset+0x7c>
 1007d74:	3807883a 	mov	r3,r7
 1007d78:	003fe006 	br	1007cfc <memset+0x18>

01007d7c <_Bfree>:
 1007d7c:	28000826 	beq	r5,zero,1007da0 <_Bfree+0x24>
 1007d80:	28800117 	ldw	r2,4(r5)
 1007d84:	21001317 	ldw	r4,76(r4)
 1007d88:	1085883a 	add	r2,r2,r2
 1007d8c:	1085883a 	add	r2,r2,r2
 1007d90:	1105883a 	add	r2,r2,r4
 1007d94:	10c00017 	ldw	r3,0(r2)
 1007d98:	28c00015 	stw	r3,0(r5)
 1007d9c:	11400015 	stw	r5,0(r2)
 1007da0:	f800283a 	ret

01007da4 <__hi0bits>:
 1007da4:	20bfffec 	andhi	r2,r4,65535
 1007da8:	10001426 	beq	r2,zero,1007dfc <__hi0bits+0x58>
 1007dac:	0007883a 	mov	r3,zero
 1007db0:	20bfc02c 	andhi	r2,r4,65280
 1007db4:	1000021e 	bne	r2,zero,1007dc0 <__hi0bits+0x1c>
 1007db8:	2008923a 	slli	r4,r4,8
 1007dbc:	18c00204 	addi	r3,r3,8
 1007dc0:	20bc002c 	andhi	r2,r4,61440
 1007dc4:	1000021e 	bne	r2,zero,1007dd0 <__hi0bits+0x2c>
 1007dc8:	2008913a 	slli	r4,r4,4
 1007dcc:	18c00104 	addi	r3,r3,4
 1007dd0:	20b0002c 	andhi	r2,r4,49152
 1007dd4:	1000031e 	bne	r2,zero,1007de4 <__hi0bits+0x40>
 1007dd8:	2105883a 	add	r2,r4,r4
 1007ddc:	18c00084 	addi	r3,r3,2
 1007de0:	1089883a 	add	r4,r2,r2
 1007de4:	20000316 	blt	r4,zero,1007df4 <__hi0bits+0x50>
 1007de8:	2090002c 	andhi	r2,r4,16384
 1007dec:	10000626 	beq	r2,zero,1007e08 <__hi0bits+0x64>
 1007df0:	18c00044 	addi	r3,r3,1
 1007df4:	1805883a 	mov	r2,r3
 1007df8:	f800283a 	ret
 1007dfc:	2008943a 	slli	r4,r4,16
 1007e00:	00c00404 	movi	r3,16
 1007e04:	003fea06 	br	1007db0 <__hi0bits+0xc>
 1007e08:	00c00804 	movi	r3,32
 1007e0c:	1805883a 	mov	r2,r3
 1007e10:	f800283a 	ret

01007e14 <__lo0bits>:
 1007e14:	20c00017 	ldw	r3,0(r4)
 1007e18:	188001cc 	andi	r2,r3,7
 1007e1c:	10000a26 	beq	r2,zero,1007e48 <__lo0bits+0x34>
 1007e20:	1880004c 	andi	r2,r3,1
 1007e24:	1005003a 	cmpeq	r2,r2,zero
 1007e28:	10002126 	beq	r2,zero,1007eb0 <__lo0bits+0x9c>
 1007e2c:	1880008c 	andi	r2,r3,2
 1007e30:	1000251e 	bne	r2,zero,1007ec8 <__lo0bits+0xb4>
 1007e34:	1804d0ba 	srli	r2,r3,2
 1007e38:	01400084 	movi	r5,2
 1007e3c:	20800015 	stw	r2,0(r4)
 1007e40:	2805883a 	mov	r2,r5
 1007e44:	f800283a 	ret
 1007e48:	18bfffcc 	andi	r2,r3,65535
 1007e4c:	10001526 	beq	r2,zero,1007ea4 <__lo0bits+0x90>
 1007e50:	000b883a 	mov	r5,zero
 1007e54:	18803fcc 	andi	r2,r3,255
 1007e58:	1000021e 	bne	r2,zero,1007e64 <__lo0bits+0x50>
 1007e5c:	1806d23a 	srli	r3,r3,8
 1007e60:	29400204 	addi	r5,r5,8
 1007e64:	188003cc 	andi	r2,r3,15
 1007e68:	1000021e 	bne	r2,zero,1007e74 <__lo0bits+0x60>
 1007e6c:	1806d13a 	srli	r3,r3,4
 1007e70:	29400104 	addi	r5,r5,4
 1007e74:	188000cc 	andi	r2,r3,3
 1007e78:	1000021e 	bne	r2,zero,1007e84 <__lo0bits+0x70>
 1007e7c:	1806d0ba 	srli	r3,r3,2
 1007e80:	29400084 	addi	r5,r5,2
 1007e84:	1880004c 	andi	r2,r3,1
 1007e88:	1000031e 	bne	r2,zero,1007e98 <__lo0bits+0x84>
 1007e8c:	1806d07a 	srli	r3,r3,1
 1007e90:	18000a26 	beq	r3,zero,1007ebc <__lo0bits+0xa8>
 1007e94:	29400044 	addi	r5,r5,1
 1007e98:	2805883a 	mov	r2,r5
 1007e9c:	20c00015 	stw	r3,0(r4)
 1007ea0:	f800283a 	ret
 1007ea4:	1806d43a 	srli	r3,r3,16
 1007ea8:	01400404 	movi	r5,16
 1007eac:	003fe906 	br	1007e54 <__lo0bits+0x40>
 1007eb0:	000b883a 	mov	r5,zero
 1007eb4:	2805883a 	mov	r2,r5
 1007eb8:	f800283a 	ret
 1007ebc:	01400804 	movi	r5,32
 1007ec0:	2805883a 	mov	r2,r5
 1007ec4:	f800283a 	ret
 1007ec8:	1804d07a 	srli	r2,r3,1
 1007ecc:	01400044 	movi	r5,1
 1007ed0:	20800015 	stw	r2,0(r4)
 1007ed4:	003fda06 	br	1007e40 <__lo0bits+0x2c>

01007ed8 <__mcmp>:
 1007ed8:	20800417 	ldw	r2,16(r4)
 1007edc:	28c00417 	ldw	r3,16(r5)
 1007ee0:	10cfc83a 	sub	r7,r2,r3
 1007ee4:	38000c1e 	bne	r7,zero,1007f18 <__mcmp+0x40>
 1007ee8:	18c5883a 	add	r2,r3,r3
 1007eec:	1085883a 	add	r2,r2,r2
 1007ef0:	10c00504 	addi	r3,r2,20
 1007ef4:	21000504 	addi	r4,r4,20
 1007ef8:	28cb883a 	add	r5,r5,r3
 1007efc:	2085883a 	add	r2,r4,r2
 1007f00:	10bfff04 	addi	r2,r2,-4
 1007f04:	297fff04 	addi	r5,r5,-4
 1007f08:	11800017 	ldw	r6,0(r2)
 1007f0c:	28c00017 	ldw	r3,0(r5)
 1007f10:	30c0031e 	bne	r6,r3,1007f20 <__mcmp+0x48>
 1007f14:	20bffa36 	bltu	r4,r2,1007f00 <__mcmp+0x28>
 1007f18:	3805883a 	mov	r2,r7
 1007f1c:	f800283a 	ret
 1007f20:	30c00336 	bltu	r6,r3,1007f30 <__mcmp+0x58>
 1007f24:	01c00044 	movi	r7,1
 1007f28:	3805883a 	mov	r2,r7
 1007f2c:	f800283a 	ret
 1007f30:	01ffffc4 	movi	r7,-1
 1007f34:	003ff806 	br	1007f18 <__mcmp+0x40>

01007f38 <__ulp>:
 1007f38:	295ffc2c 	andhi	r5,r5,32752
 1007f3c:	013f3034 	movhi	r4,64704
 1007f40:	290b883a 	add	r5,r5,r4
 1007f44:	0145c83a 	sub	r2,zero,r5
 1007f48:	1007d53a 	srai	r3,r2,20
 1007f4c:	000d883a 	mov	r6,zero
 1007f50:	0140040e 	bge	zero,r5,1007f64 <__ulp+0x2c>
 1007f54:	280f883a 	mov	r7,r5
 1007f58:	3807883a 	mov	r3,r7
 1007f5c:	3005883a 	mov	r2,r6
 1007f60:	f800283a 	ret
 1007f64:	008004c4 	movi	r2,19
 1007f68:	193ffb04 	addi	r4,r3,-20
 1007f6c:	10c00c0e 	bge	r2,r3,1007fa0 <__ulp+0x68>
 1007f70:	008007c4 	movi	r2,31
 1007f74:	1107c83a 	sub	r3,r2,r4
 1007f78:	00800784 	movi	r2,30
 1007f7c:	01400044 	movi	r5,1
 1007f80:	11000216 	blt	r2,r4,1007f8c <__ulp+0x54>
 1007f84:	00800044 	movi	r2,1
 1007f88:	10ca983a 	sll	r5,r2,r3
 1007f8c:	000f883a 	mov	r7,zero
 1007f90:	280d883a 	mov	r6,r5
 1007f94:	3807883a 	mov	r3,r7
 1007f98:	3005883a 	mov	r2,r6
 1007f9c:	f800283a 	ret
 1007fa0:	00800234 	movhi	r2,8
 1007fa4:	10cfd83a 	sra	r7,r2,r3
 1007fa8:	000d883a 	mov	r6,zero
 1007fac:	3005883a 	mov	r2,r6
 1007fb0:	3807883a 	mov	r3,r7
 1007fb4:	f800283a 	ret

01007fb8 <__b2d>:
 1007fb8:	20800417 	ldw	r2,16(r4)
 1007fbc:	defff904 	addi	sp,sp,-28
 1007fc0:	dd000415 	stw	r20,16(sp)
 1007fc4:	1085883a 	add	r2,r2,r2
 1007fc8:	25000504 	addi	r20,r4,20
 1007fcc:	1085883a 	add	r2,r2,r2
 1007fd0:	dc000015 	stw	r16,0(sp)
 1007fd4:	a0a1883a 	add	r16,r20,r2
 1007fd8:	dd400515 	stw	r21,20(sp)
 1007fdc:	857fff17 	ldw	r21,-4(r16)
 1007fe0:	dc400115 	stw	r17,4(sp)
 1007fe4:	dfc00615 	stw	ra,24(sp)
 1007fe8:	a809883a 	mov	r4,r21
 1007fec:	2823883a 	mov	r17,r5
 1007ff0:	dcc00315 	stw	r19,12(sp)
 1007ff4:	dc800215 	stw	r18,8(sp)
 1007ff8:	1007da40 	call	1007da4 <__hi0bits>
 1007ffc:	100b883a 	mov	r5,r2
 1008000:	00800804 	movi	r2,32
 1008004:	1145c83a 	sub	r2,r2,r5
 1008008:	88800015 	stw	r2,0(r17)
 100800c:	00800284 	movi	r2,10
 1008010:	80ffff04 	addi	r3,r16,-4
 1008014:	11401416 	blt	r2,r5,1008068 <__b2d+0xb0>
 1008018:	008002c4 	movi	r2,11
 100801c:	1149c83a 	sub	r4,r2,r5
 1008020:	a0c02736 	bltu	r20,r3,10080c0 <__b2d+0x108>
 1008024:	000d883a 	mov	r6,zero
 1008028:	28800544 	addi	r2,r5,21
 100802c:	a906d83a 	srl	r3,r21,r4
 1008030:	a884983a 	sll	r2,r21,r2
 1008034:	1ccffc34 	orhi	r19,r3,16368
 1008038:	11a4b03a 	or	r18,r2,r6
 100803c:	9005883a 	mov	r2,r18
 1008040:	9807883a 	mov	r3,r19
 1008044:	dfc00617 	ldw	ra,24(sp)
 1008048:	dd400517 	ldw	r21,20(sp)
 100804c:	dd000417 	ldw	r20,16(sp)
 1008050:	dcc00317 	ldw	r19,12(sp)
 1008054:	dc800217 	ldw	r18,8(sp)
 1008058:	dc400117 	ldw	r17,4(sp)
 100805c:	dc000017 	ldw	r16,0(sp)
 1008060:	dec00704 	addi	sp,sp,28
 1008064:	f800283a 	ret
 1008068:	a0c00e36 	bltu	r20,r3,10080a4 <__b2d+0xec>
 100806c:	293ffd44 	addi	r4,r5,-11
 1008070:	000d883a 	mov	r6,zero
 1008074:	20000f26 	beq	r4,zero,10080b4 <__b2d+0xfc>
 1008078:	00800804 	movi	r2,32
 100807c:	110bc83a 	sub	r5,r2,r4
 1008080:	a0c01236 	bltu	r20,r3,10080cc <__b2d+0x114>
 1008084:	000f883a 	mov	r7,zero
 1008088:	a904983a 	sll	r2,r21,r4
 100808c:	3146d83a 	srl	r3,r6,r5
 1008090:	3108983a 	sll	r4,r6,r4
 1008094:	108ffc34 	orhi	r2,r2,16368
 1008098:	18a6b03a 	or	r19,r3,r2
 100809c:	3924b03a 	or	r18,r7,r4
 10080a0:	003fe606 	br	100803c <__b2d+0x84>
 10080a4:	293ffd44 	addi	r4,r5,-11
 10080a8:	81bffe17 	ldw	r6,-8(r16)
 10080ac:	80fffe04 	addi	r3,r16,-8
 10080b0:	203ff11e 	bne	r4,zero,1008078 <__b2d+0xc0>
 10080b4:	accffc34 	orhi	r19,r21,16368
 10080b8:	3025883a 	mov	r18,r6
 10080bc:	003fdf06 	br	100803c <__b2d+0x84>
 10080c0:	18bfff17 	ldw	r2,-4(r3)
 10080c4:	110cd83a 	srl	r6,r2,r4
 10080c8:	003fd706 	br	1008028 <__b2d+0x70>
 10080cc:	18bfff17 	ldw	r2,-4(r3)
 10080d0:	114ed83a 	srl	r7,r2,r5
 10080d4:	003fec06 	br	1008088 <__b2d+0xd0>

010080d8 <__ratio>:
 10080d8:	defff904 	addi	sp,sp,-28
 10080dc:	dc400215 	stw	r17,8(sp)
 10080e0:	2823883a 	mov	r17,r5
 10080e4:	d80b883a 	mov	r5,sp
 10080e8:	dfc00615 	stw	ra,24(sp)
 10080ec:	dd000515 	stw	r20,20(sp)
 10080f0:	dcc00415 	stw	r19,16(sp)
 10080f4:	dc800315 	stw	r18,12(sp)
 10080f8:	2025883a 	mov	r18,r4
 10080fc:	1007fb80 	call	1007fb8 <__b2d>
 1008100:	8809883a 	mov	r4,r17
 1008104:	d9400104 	addi	r5,sp,4
 1008108:	1027883a 	mov	r19,r2
 100810c:	1829883a 	mov	r20,r3
 1008110:	1007fb80 	call	1007fb8 <__b2d>
 1008114:	89000417 	ldw	r4,16(r17)
 1008118:	91c00417 	ldw	r7,16(r18)
 100811c:	d9800117 	ldw	r6,4(sp)
 1008120:	180b883a 	mov	r5,r3
 1008124:	390fc83a 	sub	r7,r7,r4
 1008128:	1009883a 	mov	r4,r2
 100812c:	d8800017 	ldw	r2,0(sp)
 1008130:	380e917a 	slli	r7,r7,5
 1008134:	2011883a 	mov	r8,r4
 1008138:	1185c83a 	sub	r2,r2,r6
 100813c:	11c5883a 	add	r2,r2,r7
 1008140:	1006953a 	slli	r3,r2,20
 1008144:	2813883a 	mov	r9,r5
 1008148:	00800d0e 	bge	zero,r2,1008180 <__ratio+0xa8>
 100814c:	1d29883a 	add	r20,r3,r20
 1008150:	a00b883a 	mov	r5,r20
 1008154:	480f883a 	mov	r7,r9
 1008158:	9809883a 	mov	r4,r19
 100815c:	400d883a 	mov	r6,r8
 1008160:	1001a7c0 	call	1001a7c <__divdf3>
 1008164:	dfc00617 	ldw	ra,24(sp)
 1008168:	dd000517 	ldw	r20,20(sp)
 100816c:	dcc00417 	ldw	r19,16(sp)
 1008170:	dc800317 	ldw	r18,12(sp)
 1008174:	dc400217 	ldw	r17,8(sp)
 1008178:	dec00704 	addi	sp,sp,28
 100817c:	f800283a 	ret
 1008180:	28d3c83a 	sub	r9,r5,r3
 1008184:	003ff206 	br	1008150 <__ratio+0x78>

01008188 <_mprec_log10>:
 1008188:	defffe04 	addi	sp,sp,-8
 100818c:	008005c4 	movi	r2,23
 1008190:	dc000015 	stw	r16,0(sp)
 1008194:	dfc00115 	stw	ra,4(sp)
 1008198:	2021883a 	mov	r16,r4
 100819c:	11000c16 	blt	r2,r4,10081d0 <_mprec_log10+0x48>
 10081a0:	200490fa 	slli	r2,r4,3
 10081a4:	00c040b4 	movhi	r3,258
 10081a8:	18e53404 	addi	r3,r3,-27440
 10081ac:	10c5883a 	add	r2,r2,r3
 10081b0:	12400117 	ldw	r9,4(r2)
 10081b4:	12000017 	ldw	r8,0(r2)
 10081b8:	4807883a 	mov	r3,r9
 10081bc:	4005883a 	mov	r2,r8
 10081c0:	dfc00117 	ldw	ra,4(sp)
 10081c4:	dc000017 	ldw	r16,0(sp)
 10081c8:	dec00204 	addi	sp,sp,8
 10081cc:	f800283a 	ret
 10081d0:	0011883a 	mov	r8,zero
 10081d4:	024ffc34 	movhi	r9,16368
 10081d8:	0005883a 	mov	r2,zero
 10081dc:	00d00934 	movhi	r3,16420
 10081e0:	480b883a 	mov	r5,r9
 10081e4:	4009883a 	mov	r4,r8
 10081e8:	180f883a 	mov	r7,r3
 10081ec:	100d883a 	mov	r6,r2
 10081f0:	100a8580 	call	100a858 <__muldf3>
 10081f4:	843fffc4 	addi	r16,r16,-1
 10081f8:	1011883a 	mov	r8,r2
 10081fc:	1813883a 	mov	r9,r3
 1008200:	803ff51e 	bne	r16,zero,10081d8 <_mprec_log10+0x50>
 1008204:	4005883a 	mov	r2,r8
 1008208:	4807883a 	mov	r3,r9
 100820c:	dfc00117 	ldw	ra,4(sp)
 1008210:	dc000017 	ldw	r16,0(sp)
 1008214:	dec00204 	addi	sp,sp,8
 1008218:	f800283a 	ret

0100821c <__copybits>:
 100821c:	297fffc4 	addi	r5,r5,-1
 1008220:	30800417 	ldw	r2,16(r6)
 1008224:	280bd17a 	srai	r5,r5,5
 1008228:	31800504 	addi	r6,r6,20
 100822c:	1085883a 	add	r2,r2,r2
 1008230:	294b883a 	add	r5,r5,r5
 1008234:	294b883a 	add	r5,r5,r5
 1008238:	1085883a 	add	r2,r2,r2
 100823c:	290b883a 	add	r5,r5,r4
 1008240:	3087883a 	add	r3,r6,r2
 1008244:	29400104 	addi	r5,r5,4
 1008248:	30c0052e 	bgeu	r6,r3,1008260 <__copybits+0x44>
 100824c:	30800017 	ldw	r2,0(r6)
 1008250:	31800104 	addi	r6,r6,4
 1008254:	20800015 	stw	r2,0(r4)
 1008258:	21000104 	addi	r4,r4,4
 100825c:	30fffb36 	bltu	r6,r3,100824c <__copybits+0x30>
 1008260:	2140032e 	bgeu	r4,r5,1008270 <__copybits+0x54>
 1008264:	20000015 	stw	zero,0(r4)
 1008268:	21000104 	addi	r4,r4,4
 100826c:	217ffd36 	bltu	r4,r5,1008264 <__copybits+0x48>
 1008270:	f800283a 	ret

01008274 <__any_on>:
 1008274:	20800417 	ldw	r2,16(r4)
 1008278:	2807d17a 	srai	r3,r5,5
 100827c:	21000504 	addi	r4,r4,20
 1008280:	10c00d0e 	bge	r2,r3,10082b8 <__any_on+0x44>
 1008284:	1085883a 	add	r2,r2,r2
 1008288:	1085883a 	add	r2,r2,r2
 100828c:	208d883a 	add	r6,r4,r2
 1008290:	2180182e 	bgeu	r4,r6,10082f4 <__any_on+0x80>
 1008294:	30bfff17 	ldw	r2,-4(r6)
 1008298:	30ffff04 	addi	r3,r6,-4
 100829c:	1000041e 	bne	r2,zero,10082b0 <__any_on+0x3c>
 10082a0:	20c0142e 	bgeu	r4,r3,10082f4 <__any_on+0x80>
 10082a4:	18ffff04 	addi	r3,r3,-4
 10082a8:	18800017 	ldw	r2,0(r3)
 10082ac:	103ffc26 	beq	r2,zero,10082a0 <__any_on+0x2c>
 10082b0:	00800044 	movi	r2,1
 10082b4:	f800283a 	ret
 10082b8:	18800a0e 	bge	r3,r2,10082e4 <__any_on+0x70>
 10082bc:	294007cc 	andi	r5,r5,31
 10082c0:	28000826 	beq	r5,zero,10082e4 <__any_on+0x70>
 10082c4:	18c5883a 	add	r2,r3,r3
 10082c8:	1085883a 	add	r2,r2,r2
 10082cc:	208d883a 	add	r6,r4,r2
 10082d0:	30c00017 	ldw	r3,0(r6)
 10082d4:	1944d83a 	srl	r2,r3,r5
 10082d8:	1144983a 	sll	r2,r2,r5
 10082dc:	18bff41e 	bne	r3,r2,10082b0 <__any_on+0x3c>
 10082e0:	003feb06 	br	1008290 <__any_on+0x1c>
 10082e4:	18c5883a 	add	r2,r3,r3
 10082e8:	1085883a 	add	r2,r2,r2
 10082ec:	208d883a 	add	r6,r4,r2
 10082f0:	003fe706 	br	1008290 <__any_on+0x1c>
 10082f4:	0005883a 	mov	r2,zero
 10082f8:	f800283a 	ret

010082fc <_Balloc>:
 10082fc:	20c01317 	ldw	r3,76(r4)
 1008300:	defffb04 	addi	sp,sp,-20
 1008304:	dcc00315 	stw	r19,12(sp)
 1008308:	dc800215 	stw	r18,8(sp)
 100830c:	dfc00415 	stw	ra,16(sp)
 1008310:	2825883a 	mov	r18,r5
 1008314:	dc400115 	stw	r17,4(sp)
 1008318:	dc000015 	stw	r16,0(sp)
 100831c:	2027883a 	mov	r19,r4
 1008320:	01800404 	movi	r6,16
 1008324:	01400104 	movi	r5,4
 1008328:	18001726 	beq	r3,zero,1008388 <_Balloc+0x8c>
 100832c:	01400044 	movi	r5,1
 1008330:	9485883a 	add	r2,r18,r18
 1008334:	2ca2983a 	sll	r17,r5,r18
 1008338:	1085883a 	add	r2,r2,r2
 100833c:	10c7883a 	add	r3,r2,r3
 1008340:	1c000017 	ldw	r16,0(r3)
 1008344:	8c4d883a 	add	r6,r17,r17
 1008348:	318d883a 	add	r6,r6,r6
 100834c:	9809883a 	mov	r4,r19
 1008350:	31800504 	addi	r6,r6,20
 1008354:	80001226 	beq	r16,zero,10083a0 <_Balloc+0xa4>
 1008358:	80800017 	ldw	r2,0(r16)
 100835c:	18800015 	stw	r2,0(r3)
 1008360:	80000415 	stw	zero,16(r16)
 1008364:	80000315 	stw	zero,12(r16)
 1008368:	8005883a 	mov	r2,r16
 100836c:	dfc00417 	ldw	ra,16(sp)
 1008370:	dcc00317 	ldw	r19,12(sp)
 1008374:	dc800217 	ldw	r18,8(sp)
 1008378:	dc400117 	ldw	r17,4(sp)
 100837c:	dc000017 	ldw	r16,0(sp)
 1008380:	dec00504 	addi	sp,sp,20
 1008384:	f800283a 	ret
 1008388:	100975c0 	call	100975c <_calloc_r>
 100838c:	1007883a 	mov	r3,r2
 1008390:	0021883a 	mov	r16,zero
 1008394:	98801315 	stw	r2,76(r19)
 1008398:	103fe41e 	bne	r2,zero,100832c <_Balloc+0x30>
 100839c:	003ff206 	br	1008368 <_Balloc+0x6c>
 10083a0:	100975c0 	call	100975c <_calloc_r>
 10083a4:	103ff026 	beq	r2,zero,1008368 <_Balloc+0x6c>
 10083a8:	1021883a 	mov	r16,r2
 10083ac:	14800115 	stw	r18,4(r2)
 10083b0:	14400215 	stw	r17,8(r2)
 10083b4:	003fea06 	br	1008360 <_Balloc+0x64>

010083b8 <__d2b>:
 10083b8:	defff504 	addi	sp,sp,-44
 10083bc:	dcc00515 	stw	r19,20(sp)
 10083c0:	04c00044 	movi	r19,1
 10083c4:	dc000215 	stw	r16,8(sp)
 10083c8:	2821883a 	mov	r16,r5
 10083cc:	980b883a 	mov	r5,r19
 10083d0:	ddc00915 	stw	r23,36(sp)
 10083d4:	dd800815 	stw	r22,32(sp)
 10083d8:	dd400715 	stw	r21,28(sp)
 10083dc:	dd000615 	stw	r20,24(sp)
 10083e0:	dc800415 	stw	r18,16(sp)
 10083e4:	dc400315 	stw	r17,12(sp)
 10083e8:	dfc00a15 	stw	ra,40(sp)
 10083ec:	3023883a 	mov	r17,r6
 10083f0:	382d883a 	mov	r22,r7
 10083f4:	ddc00b17 	ldw	r23,44(sp)
 10083f8:	10082fc0 	call	10082fc <_Balloc>
 10083fc:	1025883a 	mov	r18,r2
 1008400:	00a00034 	movhi	r2,32768
 1008404:	10bfffc4 	addi	r2,r2,-1
 1008408:	8888703a 	and	r4,r17,r2
 100840c:	202ad53a 	srli	r21,r4,20
 1008410:	00800434 	movhi	r2,16
 1008414:	10bfffc4 	addi	r2,r2,-1
 1008418:	8886703a 	and	r3,r17,r2
 100841c:	a829003a 	cmpeq	r20,r21,zero
 1008420:	800b883a 	mov	r5,r16
 1008424:	d8c00115 	stw	r3,4(sp)
 1008428:	94000504 	addi	r16,r18,20
 100842c:	a000021e 	bne	r20,zero,1008438 <__d2b+0x80>
 1008430:	18c00434 	orhi	r3,r3,16
 1008434:	d8c00115 	stw	r3,4(sp)
 1008438:	28002726 	beq	r5,zero,10084d8 <__d2b+0x120>
 100843c:	d809883a 	mov	r4,sp
 1008440:	d9400015 	stw	r5,0(sp)
 1008444:	1007e140 	call	1007e14 <__lo0bits>
 1008448:	100d883a 	mov	r6,r2
 100844c:	10003526 	beq	r2,zero,1008524 <__d2b+0x16c>
 1008450:	d8c00117 	ldw	r3,4(sp)
 1008454:	00800804 	movi	r2,32
 1008458:	1185c83a 	sub	r2,r2,r6
 100845c:	d9000017 	ldw	r4,0(sp)
 1008460:	1886983a 	sll	r3,r3,r2
 1008464:	1906b03a 	or	r3,r3,r4
 1008468:	90c00515 	stw	r3,20(r18)
 100846c:	d8c00117 	ldw	r3,4(sp)
 1008470:	1986d83a 	srl	r3,r3,r6
 1008474:	d8c00115 	stw	r3,4(sp)
 1008478:	180b003a 	cmpeq	r5,r3,zero
 100847c:	00800084 	movi	r2,2
 1008480:	114bc83a 	sub	r5,r2,r5
 1008484:	80c00115 	stw	r3,4(r16)
 1008488:	91400415 	stw	r5,16(r18)
 100848c:	a0001a1e 	bne	r20,zero,10084f8 <__d2b+0x140>
 1008490:	3545883a 	add	r2,r6,r21
 1008494:	10bef344 	addi	r2,r2,-1075
 1008498:	00c00d44 	movi	r3,53
 100849c:	b0800015 	stw	r2,0(r22)
 10084a0:	1987c83a 	sub	r3,r3,r6
 10084a4:	b8c00015 	stw	r3,0(r23)
 10084a8:	9005883a 	mov	r2,r18
 10084ac:	dfc00a17 	ldw	ra,40(sp)
 10084b0:	ddc00917 	ldw	r23,36(sp)
 10084b4:	dd800817 	ldw	r22,32(sp)
 10084b8:	dd400717 	ldw	r21,28(sp)
 10084bc:	dd000617 	ldw	r20,24(sp)
 10084c0:	dcc00517 	ldw	r19,20(sp)
 10084c4:	dc800417 	ldw	r18,16(sp)
 10084c8:	dc400317 	ldw	r17,12(sp)
 10084cc:	dc000217 	ldw	r16,8(sp)
 10084d0:	dec00b04 	addi	sp,sp,44
 10084d4:	f800283a 	ret
 10084d8:	d9000104 	addi	r4,sp,4
 10084dc:	1007e140 	call	1007e14 <__lo0bits>
 10084e0:	11800804 	addi	r6,r2,32
 10084e4:	d8800117 	ldw	r2,4(sp)
 10084e8:	94c00415 	stw	r19,16(r18)
 10084ec:	980b883a 	mov	r5,r19
 10084f0:	90800515 	stw	r2,20(r18)
 10084f4:	a03fe626 	beq	r20,zero,1008490 <__d2b+0xd8>
 10084f8:	2945883a 	add	r2,r5,r5
 10084fc:	1085883a 	add	r2,r2,r2
 1008500:	1405883a 	add	r2,r2,r16
 1008504:	113fff17 	ldw	r4,-4(r2)
 1008508:	30fef384 	addi	r3,r6,-1074
 100850c:	2820917a 	slli	r16,r5,5
 1008510:	b0c00015 	stw	r3,0(r22)
 1008514:	1007da40 	call	1007da4 <__hi0bits>
 1008518:	80a1c83a 	sub	r16,r16,r2
 100851c:	bc000015 	stw	r16,0(r23)
 1008520:	003fe106 	br	10084a8 <__d2b+0xf0>
 1008524:	d8800017 	ldw	r2,0(sp)
 1008528:	90800515 	stw	r2,20(r18)
 100852c:	d8c00117 	ldw	r3,4(sp)
 1008530:	003fd106 	br	1008478 <__d2b+0xc0>

01008534 <__mdiff>:
 1008534:	defffb04 	addi	sp,sp,-20
 1008538:	dc000015 	stw	r16,0(sp)
 100853c:	2821883a 	mov	r16,r5
 1008540:	dc800215 	stw	r18,8(sp)
 1008544:	300b883a 	mov	r5,r6
 1008548:	2025883a 	mov	r18,r4
 100854c:	8009883a 	mov	r4,r16
 1008550:	dc400115 	stw	r17,4(sp)
 1008554:	dfc00415 	stw	ra,16(sp)
 1008558:	dcc00315 	stw	r19,12(sp)
 100855c:	3023883a 	mov	r17,r6
 1008560:	1007ed80 	call	1007ed8 <__mcmp>
 1008564:	10004226 	beq	r2,zero,1008670 <__mdiff+0x13c>
 1008568:	10005016 	blt	r2,zero,10086ac <__mdiff+0x178>
 100856c:	0027883a 	mov	r19,zero
 1008570:	81400117 	ldw	r5,4(r16)
 1008574:	9009883a 	mov	r4,r18
 1008578:	10082fc0 	call	10082fc <_Balloc>
 100857c:	1019883a 	mov	r12,r2
 1008580:	82800417 	ldw	r10,16(r16)
 1008584:	88800417 	ldw	r2,16(r17)
 1008588:	81800504 	addi	r6,r16,20
 100858c:	5287883a 	add	r3,r10,r10
 1008590:	1085883a 	add	r2,r2,r2
 1008594:	18c7883a 	add	r3,r3,r3
 1008598:	1085883a 	add	r2,r2,r2
 100859c:	8a000504 	addi	r8,r17,20
 10085a0:	64c00315 	stw	r19,12(r12)
 10085a4:	30db883a 	add	r13,r6,r3
 10085a8:	4097883a 	add	r11,r8,r2
 10085ac:	61c00504 	addi	r7,r12,20
 10085b0:	0013883a 	mov	r9,zero
 10085b4:	31000017 	ldw	r4,0(r6)
 10085b8:	41400017 	ldw	r5,0(r8)
 10085bc:	42000104 	addi	r8,r8,4
 10085c0:	20bfffcc 	andi	r2,r4,65535
 10085c4:	28ffffcc 	andi	r3,r5,65535
 10085c8:	10c5c83a 	sub	r2,r2,r3
 10085cc:	1245883a 	add	r2,r2,r9
 10085d0:	2008d43a 	srli	r4,r4,16
 10085d4:	280ad43a 	srli	r5,r5,16
 10085d8:	1007d43a 	srai	r3,r2,16
 10085dc:	3880000d 	sth	r2,0(r7)
 10085e0:	2149c83a 	sub	r4,r4,r5
 10085e4:	20c9883a 	add	r4,r4,r3
 10085e8:	3900008d 	sth	r4,2(r7)
 10085ec:	31800104 	addi	r6,r6,4
 10085f0:	39c00104 	addi	r7,r7,4
 10085f4:	2013d43a 	srai	r9,r4,16
 10085f8:	42ffee36 	bltu	r8,r11,10085b4 <__mdiff+0x80>
 10085fc:	33400c2e 	bgeu	r6,r13,1008630 <__mdiff+0xfc>
 1008600:	30800017 	ldw	r2,0(r6)
 1008604:	31800104 	addi	r6,r6,4
 1008608:	10ffffcc 	andi	r3,r2,65535
 100860c:	1a47883a 	add	r3,r3,r9
 1008610:	1004d43a 	srli	r2,r2,16
 1008614:	1809d43a 	srai	r4,r3,16
 1008618:	38c0000d 	sth	r3,0(r7)
 100861c:	1105883a 	add	r2,r2,r4
 1008620:	3880008d 	sth	r2,2(r7)
 1008624:	1013d43a 	srai	r9,r2,16
 1008628:	39c00104 	addi	r7,r7,4
 100862c:	337ff436 	bltu	r6,r13,1008600 <__mdiff+0xcc>
 1008630:	38bfff17 	ldw	r2,-4(r7)
 1008634:	38ffff04 	addi	r3,r7,-4
 1008638:	1000041e 	bne	r2,zero,100864c <__mdiff+0x118>
 100863c:	18ffff04 	addi	r3,r3,-4
 1008640:	18800017 	ldw	r2,0(r3)
 1008644:	52bfffc4 	addi	r10,r10,-1
 1008648:	103ffc26 	beq	r2,zero,100863c <__mdiff+0x108>
 100864c:	6005883a 	mov	r2,r12
 1008650:	62800415 	stw	r10,16(r12)
 1008654:	dfc00417 	ldw	ra,16(sp)
 1008658:	dcc00317 	ldw	r19,12(sp)
 100865c:	dc800217 	ldw	r18,8(sp)
 1008660:	dc400117 	ldw	r17,4(sp)
 1008664:	dc000017 	ldw	r16,0(sp)
 1008668:	dec00504 	addi	sp,sp,20
 100866c:	f800283a 	ret
 1008670:	9009883a 	mov	r4,r18
 1008674:	000b883a 	mov	r5,zero
 1008678:	10082fc0 	call	10082fc <_Balloc>
 100867c:	1019883a 	mov	r12,r2
 1008680:	00800044 	movi	r2,1
 1008684:	60800415 	stw	r2,16(r12)
 1008688:	6005883a 	mov	r2,r12
 100868c:	60000515 	stw	zero,20(r12)
 1008690:	dfc00417 	ldw	ra,16(sp)
 1008694:	dcc00317 	ldw	r19,12(sp)
 1008698:	dc800217 	ldw	r18,8(sp)
 100869c:	dc400117 	ldw	r17,4(sp)
 10086a0:	dc000017 	ldw	r16,0(sp)
 10086a4:	dec00504 	addi	sp,sp,20
 10086a8:	f800283a 	ret
 10086ac:	880d883a 	mov	r6,r17
 10086b0:	04c00044 	movi	r19,1
 10086b4:	8023883a 	mov	r17,r16
 10086b8:	3021883a 	mov	r16,r6
 10086bc:	003fac06 	br	1008570 <__mdiff+0x3c>

010086c0 <__lshift>:
 10086c0:	defff904 	addi	sp,sp,-28
 10086c4:	28800417 	ldw	r2,16(r5)
 10086c8:	dc000015 	stw	r16,0(sp)
 10086cc:	3021d17a 	srai	r16,r6,5
 10086d0:	28c00217 	ldw	r3,8(r5)
 10086d4:	10800044 	addi	r2,r2,1
 10086d8:	dc400115 	stw	r17,4(sp)
 10086dc:	80a3883a 	add	r17,r16,r2
 10086e0:	dd400515 	stw	r21,20(sp)
 10086e4:	dd000415 	stw	r20,16(sp)
 10086e8:	dc800215 	stw	r18,8(sp)
 10086ec:	dfc00615 	stw	ra,24(sp)
 10086f0:	2825883a 	mov	r18,r5
 10086f4:	dcc00315 	stw	r19,12(sp)
 10086f8:	3029883a 	mov	r20,r6
 10086fc:	202b883a 	mov	r21,r4
 1008700:	29400117 	ldw	r5,4(r5)
 1008704:	1c40030e 	bge	r3,r17,1008714 <__lshift+0x54>
 1008708:	18c7883a 	add	r3,r3,r3
 100870c:	29400044 	addi	r5,r5,1
 1008710:	1c7ffd16 	blt	r3,r17,1008708 <__lshift+0x48>
 1008714:	a809883a 	mov	r4,r21
 1008718:	10082fc0 	call	10082fc <_Balloc>
 100871c:	1027883a 	mov	r19,r2
 1008720:	11400504 	addi	r5,r2,20
 1008724:	0400090e 	bge	zero,r16,100874c <__lshift+0x8c>
 1008728:	2805883a 	mov	r2,r5
 100872c:	0007883a 	mov	r3,zero
 1008730:	18c00044 	addi	r3,r3,1
 1008734:	10000015 	stw	zero,0(r2)
 1008738:	10800104 	addi	r2,r2,4
 100873c:	80fffc1e 	bne	r16,r3,1008730 <__lshift+0x70>
 1008740:	8405883a 	add	r2,r16,r16
 1008744:	1085883a 	add	r2,r2,r2
 1008748:	288b883a 	add	r5,r5,r2
 100874c:	90800417 	ldw	r2,16(r18)
 1008750:	91000504 	addi	r4,r18,20
 1008754:	a18007cc 	andi	r6,r20,31
 1008758:	1085883a 	add	r2,r2,r2
 100875c:	1085883a 	add	r2,r2,r2
 1008760:	208f883a 	add	r7,r4,r2
 1008764:	30001e26 	beq	r6,zero,10087e0 <__lshift+0x120>
 1008768:	00800804 	movi	r2,32
 100876c:	1191c83a 	sub	r8,r2,r6
 1008770:	0007883a 	mov	r3,zero
 1008774:	20800017 	ldw	r2,0(r4)
 1008778:	1184983a 	sll	r2,r2,r6
 100877c:	1884b03a 	or	r2,r3,r2
 1008780:	28800015 	stw	r2,0(r5)
 1008784:	20c00017 	ldw	r3,0(r4)
 1008788:	21000104 	addi	r4,r4,4
 100878c:	29400104 	addi	r5,r5,4
 1008790:	1a06d83a 	srl	r3,r3,r8
 1008794:	21fff736 	bltu	r4,r7,1008774 <__lshift+0xb4>
 1008798:	28c00015 	stw	r3,0(r5)
 100879c:	18000126 	beq	r3,zero,10087a4 <__lshift+0xe4>
 10087a0:	8c400044 	addi	r17,r17,1
 10087a4:	88bfffc4 	addi	r2,r17,-1
 10087a8:	98800415 	stw	r2,16(r19)
 10087ac:	a809883a 	mov	r4,r21
 10087b0:	900b883a 	mov	r5,r18
 10087b4:	1007d7c0 	call	1007d7c <_Bfree>
 10087b8:	9805883a 	mov	r2,r19
 10087bc:	dfc00617 	ldw	ra,24(sp)
 10087c0:	dd400517 	ldw	r21,20(sp)
 10087c4:	dd000417 	ldw	r20,16(sp)
 10087c8:	dcc00317 	ldw	r19,12(sp)
 10087cc:	dc800217 	ldw	r18,8(sp)
 10087d0:	dc400117 	ldw	r17,4(sp)
 10087d4:	dc000017 	ldw	r16,0(sp)
 10087d8:	dec00704 	addi	sp,sp,28
 10087dc:	f800283a 	ret
 10087e0:	20800017 	ldw	r2,0(r4)
 10087e4:	21000104 	addi	r4,r4,4
 10087e8:	28800015 	stw	r2,0(r5)
 10087ec:	29400104 	addi	r5,r5,4
 10087f0:	21ffec2e 	bgeu	r4,r7,10087a4 <__lshift+0xe4>
 10087f4:	20800017 	ldw	r2,0(r4)
 10087f8:	21000104 	addi	r4,r4,4
 10087fc:	28800015 	stw	r2,0(r5)
 1008800:	29400104 	addi	r5,r5,4
 1008804:	21fff636 	bltu	r4,r7,10087e0 <__lshift+0x120>
 1008808:	003fe606 	br	10087a4 <__lshift+0xe4>

0100880c <__multiply>:
 100880c:	defff004 	addi	sp,sp,-64
 1008810:	dc800815 	stw	r18,32(sp)
 1008814:	dc400715 	stw	r17,28(sp)
 1008818:	2c800417 	ldw	r18,16(r5)
 100881c:	34400417 	ldw	r17,16(r6)
 1008820:	dcc00915 	stw	r19,36(sp)
 1008824:	dc000615 	stw	r16,24(sp)
 1008828:	dfc00f15 	stw	ra,60(sp)
 100882c:	df000e15 	stw	fp,56(sp)
 1008830:	ddc00d15 	stw	r23,52(sp)
 1008834:	dd800c15 	stw	r22,48(sp)
 1008838:	dd400b15 	stw	r21,44(sp)
 100883c:	dd000a15 	stw	r20,40(sp)
 1008840:	2821883a 	mov	r16,r5
 1008844:	3027883a 	mov	r19,r6
 1008848:	9440040e 	bge	r18,r17,100885c <__multiply+0x50>
 100884c:	8825883a 	mov	r18,r17
 1008850:	2c400417 	ldw	r17,16(r5)
 1008854:	2827883a 	mov	r19,r5
 1008858:	3021883a 	mov	r16,r6
 100885c:	80800217 	ldw	r2,8(r16)
 1008860:	9447883a 	add	r3,r18,r17
 1008864:	d8c00415 	stw	r3,16(sp)
 1008868:	81400117 	ldw	r5,4(r16)
 100886c:	10c0010e 	bge	r2,r3,1008874 <__multiply+0x68>
 1008870:	29400044 	addi	r5,r5,1
 1008874:	10082fc0 	call	10082fc <_Balloc>
 1008878:	d8800515 	stw	r2,20(sp)
 100887c:	d9000417 	ldw	r4,16(sp)
 1008880:	d8c00517 	ldw	r3,20(sp)
 1008884:	2105883a 	add	r2,r4,r4
 1008888:	1085883a 	add	r2,r2,r2
 100888c:	19000504 	addi	r4,r3,20
 1008890:	2085883a 	add	r2,r4,r2
 1008894:	d8800315 	stw	r2,12(sp)
 1008898:	2080052e 	bgeu	r4,r2,10088b0 <__multiply+0xa4>
 100889c:	2005883a 	mov	r2,r4
 10088a0:	d8c00317 	ldw	r3,12(sp)
 10088a4:	10000015 	stw	zero,0(r2)
 10088a8:	10800104 	addi	r2,r2,4
 10088ac:	10fffc36 	bltu	r2,r3,10088a0 <__multiply+0x94>
 10088b0:	8c45883a 	add	r2,r17,r17
 10088b4:	9487883a 	add	r3,r18,r18
 10088b8:	9dc00504 	addi	r23,r19,20
 10088bc:	1085883a 	add	r2,r2,r2
 10088c0:	84000504 	addi	r16,r16,20
 10088c4:	18c7883a 	add	r3,r3,r3
 10088c8:	b885883a 	add	r2,r23,r2
 10088cc:	dc000015 	stw	r16,0(sp)
 10088d0:	d8800215 	stw	r2,8(sp)
 10088d4:	80f9883a 	add	fp,r16,r3
 10088d8:	b880432e 	bgeu	r23,r2,10089e8 <__multiply+0x1dc>
 10088dc:	d9000115 	stw	r4,4(sp)
 10088e0:	b9000017 	ldw	r4,0(r23)
 10088e4:	253fffcc 	andi	r20,r4,65535
 10088e8:	a0001a26 	beq	r20,zero,1008954 <__multiply+0x148>
 10088ec:	dcc00017 	ldw	r19,0(sp)
 10088f0:	dc800117 	ldw	r18,4(sp)
 10088f4:	002b883a 	mov	r21,zero
 10088f8:	9c400017 	ldw	r17,0(r19)
 10088fc:	94000017 	ldw	r16,0(r18)
 1008900:	a009883a 	mov	r4,r20
 1008904:	897fffcc 	andi	r5,r17,65535
 1008908:	10020280 	call	1002028 <__mulsi3>
 100890c:	880ad43a 	srli	r5,r17,16
 1008910:	80ffffcc 	andi	r3,r16,65535
 1008914:	a8c7883a 	add	r3,r21,r3
 1008918:	a009883a 	mov	r4,r20
 100891c:	10e3883a 	add	r17,r2,r3
 1008920:	8020d43a 	srli	r16,r16,16
 1008924:	10020280 	call	1002028 <__mulsi3>
 1008928:	8806d43a 	srli	r3,r17,16
 100892c:	1405883a 	add	r2,r2,r16
 1008930:	9cc00104 	addi	r19,r19,4
 1008934:	1887883a 	add	r3,r3,r2
 1008938:	90c0008d 	sth	r3,2(r18)
 100893c:	9440000d 	sth	r17,0(r18)
 1008940:	182ad43a 	srli	r21,r3,16
 1008944:	94800104 	addi	r18,r18,4
 1008948:	9f3feb36 	bltu	r19,fp,10088f8 <__multiply+0xec>
 100894c:	95400015 	stw	r21,0(r18)
 1008950:	b9000017 	ldw	r4,0(r23)
 1008954:	202ad43a 	srli	r21,r4,16
 1008958:	a8001c26 	beq	r21,zero,10089cc <__multiply+0x1c0>
 100895c:	d9000117 	ldw	r4,4(sp)
 1008960:	dd000017 	ldw	r20,0(sp)
 1008964:	002d883a 	mov	r22,zero
 1008968:	24c00017 	ldw	r19,0(r4)
 100896c:	2025883a 	mov	r18,r4
 1008970:	9823883a 	mov	r17,r19
 1008974:	a4000017 	ldw	r16,0(r20)
 1008978:	a809883a 	mov	r4,r21
 100897c:	a5000104 	addi	r20,r20,4
 1008980:	817fffcc 	andi	r5,r16,65535
 1008984:	10020280 	call	1002028 <__mulsi3>
 1008988:	8806d43a 	srli	r3,r17,16
 100898c:	800ad43a 	srli	r5,r16,16
 1008990:	94c0000d 	sth	r19,0(r18)
 1008994:	b0c7883a 	add	r3,r22,r3
 1008998:	10e1883a 	add	r16,r2,r3
 100899c:	9400008d 	sth	r16,2(r18)
 10089a0:	a809883a 	mov	r4,r21
 10089a4:	94800104 	addi	r18,r18,4
 10089a8:	10020280 	call	1002028 <__mulsi3>
 10089ac:	94400017 	ldw	r17,0(r18)
 10089b0:	8020d43a 	srli	r16,r16,16
 10089b4:	88ffffcc 	andi	r3,r17,65535
 10089b8:	10c5883a 	add	r2,r2,r3
 10089bc:	80a7883a 	add	r19,r16,r2
 10089c0:	982cd43a 	srli	r22,r19,16
 10089c4:	a73feb36 	bltu	r20,fp,1008974 <__multiply+0x168>
 10089c8:	94c00015 	stw	r19,0(r18)
 10089cc:	d8800217 	ldw	r2,8(sp)
 10089d0:	bdc00104 	addi	r23,r23,4
 10089d4:	b880042e 	bgeu	r23,r2,10089e8 <__multiply+0x1dc>
 10089d8:	d8c00117 	ldw	r3,4(sp)
 10089dc:	18c00104 	addi	r3,r3,4
 10089e0:	d8c00115 	stw	r3,4(sp)
 10089e4:	003fbe06 	br	10088e0 <__multiply+0xd4>
 10089e8:	d9000417 	ldw	r4,16(sp)
 10089ec:	01000c0e 	bge	zero,r4,1008a20 <__multiply+0x214>
 10089f0:	d8c00317 	ldw	r3,12(sp)
 10089f4:	18bfff17 	ldw	r2,-4(r3)
 10089f8:	18ffff04 	addi	r3,r3,-4
 10089fc:	10000326 	beq	r2,zero,1008a0c <__multiply+0x200>
 1008a00:	00000706 	br	1008a20 <__multiply+0x214>
 1008a04:	18800017 	ldw	r2,0(r3)
 1008a08:	1000051e 	bne	r2,zero,1008a20 <__multiply+0x214>
 1008a0c:	d9000417 	ldw	r4,16(sp)
 1008a10:	18ffff04 	addi	r3,r3,-4
 1008a14:	213fffc4 	addi	r4,r4,-1
 1008a18:	d9000415 	stw	r4,16(sp)
 1008a1c:	203ff91e 	bne	r4,zero,1008a04 <__multiply+0x1f8>
 1008a20:	d8800417 	ldw	r2,16(sp)
 1008a24:	d8c00517 	ldw	r3,20(sp)
 1008a28:	18800415 	stw	r2,16(r3)
 1008a2c:	1805883a 	mov	r2,r3
 1008a30:	dfc00f17 	ldw	ra,60(sp)
 1008a34:	df000e17 	ldw	fp,56(sp)
 1008a38:	ddc00d17 	ldw	r23,52(sp)
 1008a3c:	dd800c17 	ldw	r22,48(sp)
 1008a40:	dd400b17 	ldw	r21,44(sp)
 1008a44:	dd000a17 	ldw	r20,40(sp)
 1008a48:	dcc00917 	ldw	r19,36(sp)
 1008a4c:	dc800817 	ldw	r18,32(sp)
 1008a50:	dc400717 	ldw	r17,28(sp)
 1008a54:	dc000617 	ldw	r16,24(sp)
 1008a58:	dec01004 	addi	sp,sp,64
 1008a5c:	f800283a 	ret

01008a60 <__i2b>:
 1008a60:	defffd04 	addi	sp,sp,-12
 1008a64:	dc000015 	stw	r16,0(sp)
 1008a68:	04000044 	movi	r16,1
 1008a6c:	dc800115 	stw	r18,4(sp)
 1008a70:	2825883a 	mov	r18,r5
 1008a74:	800b883a 	mov	r5,r16
 1008a78:	dfc00215 	stw	ra,8(sp)
 1008a7c:	10082fc0 	call	10082fc <_Balloc>
 1008a80:	14000415 	stw	r16,16(r2)
 1008a84:	14800515 	stw	r18,20(r2)
 1008a88:	dfc00217 	ldw	ra,8(sp)
 1008a8c:	dc800117 	ldw	r18,4(sp)
 1008a90:	dc000017 	ldw	r16,0(sp)
 1008a94:	dec00304 	addi	sp,sp,12
 1008a98:	f800283a 	ret

01008a9c <__multadd>:
 1008a9c:	defff604 	addi	sp,sp,-40
 1008aa0:	dd800615 	stw	r22,24(sp)
 1008aa4:	2d800417 	ldw	r22,16(r5)
 1008aa8:	df000815 	stw	fp,32(sp)
 1008aac:	ddc00715 	stw	r23,28(sp)
 1008ab0:	dd400515 	stw	r21,20(sp)
 1008ab4:	dd000415 	stw	r20,16(sp)
 1008ab8:	dcc00315 	stw	r19,12(sp)
 1008abc:	dc800215 	stw	r18,8(sp)
 1008ac0:	dfc00915 	stw	ra,36(sp)
 1008ac4:	dc400115 	stw	r17,4(sp)
 1008ac8:	dc000015 	stw	r16,0(sp)
 1008acc:	282f883a 	mov	r23,r5
 1008ad0:	2039883a 	mov	fp,r4
 1008ad4:	302b883a 	mov	r21,r6
 1008ad8:	3829883a 	mov	r20,r7
 1008adc:	2c800504 	addi	r18,r5,20
 1008ae0:	0027883a 	mov	r19,zero
 1008ae4:	94400017 	ldw	r17,0(r18)
 1008ae8:	a80b883a 	mov	r5,r21
 1008aec:	9cc00044 	addi	r19,r19,1
 1008af0:	893fffcc 	andi	r4,r17,65535
 1008af4:	10020280 	call	1002028 <__mulsi3>
 1008af8:	8808d43a 	srli	r4,r17,16
 1008afc:	1521883a 	add	r16,r2,r20
 1008b00:	a80b883a 	mov	r5,r21
 1008b04:	10020280 	call	1002028 <__mulsi3>
 1008b08:	8008d43a 	srli	r4,r16,16
 1008b0c:	843fffcc 	andi	r16,r16,65535
 1008b10:	1105883a 	add	r2,r2,r4
 1008b14:	1006943a 	slli	r3,r2,16
 1008b18:	1028d43a 	srli	r20,r2,16
 1008b1c:	1c07883a 	add	r3,r3,r16
 1008b20:	90c00015 	stw	r3,0(r18)
 1008b24:	94800104 	addi	r18,r18,4
 1008b28:	9dbfee16 	blt	r19,r22,1008ae4 <__multadd+0x48>
 1008b2c:	a0000826 	beq	r20,zero,1008b50 <__multadd+0xb4>
 1008b30:	b8800217 	ldw	r2,8(r23)
 1008b34:	b080130e 	bge	r22,r2,1008b84 <__multadd+0xe8>
 1008b38:	b585883a 	add	r2,r22,r22
 1008b3c:	1085883a 	add	r2,r2,r2
 1008b40:	15c5883a 	add	r2,r2,r23
 1008b44:	b0c00044 	addi	r3,r22,1
 1008b48:	15000515 	stw	r20,20(r2)
 1008b4c:	b8c00415 	stw	r3,16(r23)
 1008b50:	b805883a 	mov	r2,r23
 1008b54:	dfc00917 	ldw	ra,36(sp)
 1008b58:	df000817 	ldw	fp,32(sp)
 1008b5c:	ddc00717 	ldw	r23,28(sp)
 1008b60:	dd800617 	ldw	r22,24(sp)
 1008b64:	dd400517 	ldw	r21,20(sp)
 1008b68:	dd000417 	ldw	r20,16(sp)
 1008b6c:	dcc00317 	ldw	r19,12(sp)
 1008b70:	dc800217 	ldw	r18,8(sp)
 1008b74:	dc400117 	ldw	r17,4(sp)
 1008b78:	dc000017 	ldw	r16,0(sp)
 1008b7c:	dec00a04 	addi	sp,sp,40
 1008b80:	f800283a 	ret
 1008b84:	b9400117 	ldw	r5,4(r23)
 1008b88:	e009883a 	mov	r4,fp
 1008b8c:	29400044 	addi	r5,r5,1
 1008b90:	10082fc0 	call	10082fc <_Balloc>
 1008b94:	b9800417 	ldw	r6,16(r23)
 1008b98:	b9400304 	addi	r5,r23,12
 1008b9c:	11000304 	addi	r4,r2,12
 1008ba0:	318d883a 	add	r6,r6,r6
 1008ba4:	318d883a 	add	r6,r6,r6
 1008ba8:	31800204 	addi	r6,r6,8
 1008bac:	1023883a 	mov	r17,r2
 1008bb0:	1007b640 	call	1007b64 <memcpy>
 1008bb4:	b80b883a 	mov	r5,r23
 1008bb8:	e009883a 	mov	r4,fp
 1008bbc:	1007d7c0 	call	1007d7c <_Bfree>
 1008bc0:	882f883a 	mov	r23,r17
 1008bc4:	003fdc06 	br	1008b38 <__multadd+0x9c>

01008bc8 <__pow5mult>:
 1008bc8:	defffa04 	addi	sp,sp,-24
 1008bcc:	308000cc 	andi	r2,r6,3
 1008bd0:	dd000415 	stw	r20,16(sp)
 1008bd4:	dcc00315 	stw	r19,12(sp)
 1008bd8:	dc000015 	stw	r16,0(sp)
 1008bdc:	dfc00515 	stw	ra,20(sp)
 1008be0:	dc800215 	stw	r18,8(sp)
 1008be4:	dc400115 	stw	r17,4(sp)
 1008be8:	3021883a 	mov	r16,r6
 1008bec:	2027883a 	mov	r19,r4
 1008bf0:	2829883a 	mov	r20,r5
 1008bf4:	10002b1e 	bne	r2,zero,1008ca4 <__pow5mult+0xdc>
 1008bf8:	8025d0ba 	srai	r18,r16,2
 1008bfc:	90001b26 	beq	r18,zero,1008c6c <__pow5mult+0xa4>
 1008c00:	9c001217 	ldw	r16,72(r19)
 1008c04:	8000081e 	bne	r16,zero,1008c28 <__pow5mult+0x60>
 1008c08:	00003006 	br	1008ccc <__pow5mult+0x104>
 1008c0c:	800b883a 	mov	r5,r16
 1008c10:	800d883a 	mov	r6,r16
 1008c14:	9809883a 	mov	r4,r19
 1008c18:	90001426 	beq	r18,zero,1008c6c <__pow5mult+0xa4>
 1008c1c:	80800017 	ldw	r2,0(r16)
 1008c20:	10001b26 	beq	r2,zero,1008c90 <__pow5mult+0xc8>
 1008c24:	1021883a 	mov	r16,r2
 1008c28:	9080004c 	andi	r2,r18,1
 1008c2c:	1005003a 	cmpeq	r2,r2,zero
 1008c30:	9025d07a 	srai	r18,r18,1
 1008c34:	800d883a 	mov	r6,r16
 1008c38:	9809883a 	mov	r4,r19
 1008c3c:	a00b883a 	mov	r5,r20
 1008c40:	103ff21e 	bne	r2,zero,1008c0c <__pow5mult+0x44>
 1008c44:	100880c0 	call	100880c <__multiply>
 1008c48:	a00b883a 	mov	r5,r20
 1008c4c:	9809883a 	mov	r4,r19
 1008c50:	1023883a 	mov	r17,r2
 1008c54:	1007d7c0 	call	1007d7c <_Bfree>
 1008c58:	8829883a 	mov	r20,r17
 1008c5c:	800b883a 	mov	r5,r16
 1008c60:	800d883a 	mov	r6,r16
 1008c64:	9809883a 	mov	r4,r19
 1008c68:	903fec1e 	bne	r18,zero,1008c1c <__pow5mult+0x54>
 1008c6c:	a005883a 	mov	r2,r20
 1008c70:	dfc00517 	ldw	ra,20(sp)
 1008c74:	dd000417 	ldw	r20,16(sp)
 1008c78:	dcc00317 	ldw	r19,12(sp)
 1008c7c:	dc800217 	ldw	r18,8(sp)
 1008c80:	dc400117 	ldw	r17,4(sp)
 1008c84:	dc000017 	ldw	r16,0(sp)
 1008c88:	dec00604 	addi	sp,sp,24
 1008c8c:	f800283a 	ret
 1008c90:	100880c0 	call	100880c <__multiply>
 1008c94:	80800015 	stw	r2,0(r16)
 1008c98:	1021883a 	mov	r16,r2
 1008c9c:	10000015 	stw	zero,0(r2)
 1008ca0:	003fe106 	br	1008c28 <__pow5mult+0x60>
 1008ca4:	1085883a 	add	r2,r2,r2
 1008ca8:	00c040b4 	movhi	r3,258
 1008cac:	18e57a04 	addi	r3,r3,-27160
 1008cb0:	1085883a 	add	r2,r2,r2
 1008cb4:	10c5883a 	add	r2,r2,r3
 1008cb8:	11bfff17 	ldw	r6,-4(r2)
 1008cbc:	000f883a 	mov	r7,zero
 1008cc0:	1008a9c0 	call	1008a9c <__multadd>
 1008cc4:	1029883a 	mov	r20,r2
 1008cc8:	003fcb06 	br	1008bf8 <__pow5mult+0x30>
 1008ccc:	9809883a 	mov	r4,r19
 1008cd0:	01409c44 	movi	r5,625
 1008cd4:	1008a600 	call	1008a60 <__i2b>
 1008cd8:	98801215 	stw	r2,72(r19)
 1008cdc:	1021883a 	mov	r16,r2
 1008ce0:	10000015 	stw	zero,0(r2)
 1008ce4:	003fd006 	br	1008c28 <__pow5mult+0x60>

01008ce8 <__s2b>:
 1008ce8:	defff904 	addi	sp,sp,-28
 1008cec:	dcc00315 	stw	r19,12(sp)
 1008cf0:	dc800215 	stw	r18,8(sp)
 1008cf4:	2827883a 	mov	r19,r5
 1008cf8:	2025883a 	mov	r18,r4
 1008cfc:	01400244 	movi	r5,9
 1008d00:	39000204 	addi	r4,r7,8
 1008d04:	dd000415 	stw	r20,16(sp)
 1008d08:	dc400115 	stw	r17,4(sp)
 1008d0c:	dfc00615 	stw	ra,24(sp)
 1008d10:	dd400515 	stw	r21,20(sp)
 1008d14:	dc000015 	stw	r16,0(sp)
 1008d18:	3829883a 	mov	r20,r7
 1008d1c:	3023883a 	mov	r17,r6
 1008d20:	1001f580 	call	1001f58 <__divsi3>
 1008d24:	00c00044 	movi	r3,1
 1008d28:	1880350e 	bge	r3,r2,1008e00 <__s2b+0x118>
 1008d2c:	000b883a 	mov	r5,zero
 1008d30:	18c7883a 	add	r3,r3,r3
 1008d34:	29400044 	addi	r5,r5,1
 1008d38:	18bffd16 	blt	r3,r2,1008d30 <__s2b+0x48>
 1008d3c:	9009883a 	mov	r4,r18
 1008d40:	10082fc0 	call	10082fc <_Balloc>
 1008d44:	1011883a 	mov	r8,r2
 1008d48:	d8800717 	ldw	r2,28(sp)
 1008d4c:	00c00044 	movi	r3,1
 1008d50:	01800244 	movi	r6,9
 1008d54:	40800515 	stw	r2,20(r8)
 1008d58:	40c00415 	stw	r3,16(r8)
 1008d5c:	3440260e 	bge	r6,r17,1008df8 <__s2b+0x110>
 1008d60:	3021883a 	mov	r16,r6
 1008d64:	99ab883a 	add	r21,r19,r6
 1008d68:	9c05883a 	add	r2,r19,r16
 1008d6c:	11c00007 	ldb	r7,0(r2)
 1008d70:	400b883a 	mov	r5,r8
 1008d74:	9009883a 	mov	r4,r18
 1008d78:	39fff404 	addi	r7,r7,-48
 1008d7c:	01800284 	movi	r6,10
 1008d80:	1008a9c0 	call	1008a9c <__multadd>
 1008d84:	84000044 	addi	r16,r16,1
 1008d88:	1011883a 	mov	r8,r2
 1008d8c:	8c3ff61e 	bne	r17,r16,1008d68 <__s2b+0x80>
 1008d90:	ac45883a 	add	r2,r21,r17
 1008d94:	117ffe04 	addi	r5,r2,-8
 1008d98:	880d883a 	mov	r6,r17
 1008d9c:	35000c0e 	bge	r6,r20,1008dd0 <__s2b+0xe8>
 1008da0:	a185c83a 	sub	r2,r20,r6
 1008da4:	2821883a 	mov	r16,r5
 1008da8:	28a3883a 	add	r17,r5,r2
 1008dac:	81c00007 	ldb	r7,0(r16)
 1008db0:	400b883a 	mov	r5,r8
 1008db4:	9009883a 	mov	r4,r18
 1008db8:	39fff404 	addi	r7,r7,-48
 1008dbc:	01800284 	movi	r6,10
 1008dc0:	1008a9c0 	call	1008a9c <__multadd>
 1008dc4:	84000044 	addi	r16,r16,1
 1008dc8:	1011883a 	mov	r8,r2
 1008dcc:	847ff71e 	bne	r16,r17,1008dac <__s2b+0xc4>
 1008dd0:	4005883a 	mov	r2,r8
 1008dd4:	dfc00617 	ldw	ra,24(sp)
 1008dd8:	dd400517 	ldw	r21,20(sp)
 1008ddc:	dd000417 	ldw	r20,16(sp)
 1008de0:	dcc00317 	ldw	r19,12(sp)
 1008de4:	dc800217 	ldw	r18,8(sp)
 1008de8:	dc400117 	ldw	r17,4(sp)
 1008dec:	dc000017 	ldw	r16,0(sp)
 1008df0:	dec00704 	addi	sp,sp,28
 1008df4:	f800283a 	ret
 1008df8:	99400284 	addi	r5,r19,10
 1008dfc:	003fe706 	br	1008d9c <__s2b+0xb4>
 1008e00:	000b883a 	mov	r5,zero
 1008e04:	003fcd06 	br	1008d3c <__s2b+0x54>

01008e08 <_realloc_r>:
 1008e08:	defff404 	addi	sp,sp,-48
 1008e0c:	dd800815 	stw	r22,32(sp)
 1008e10:	dc800415 	stw	r18,16(sp)
 1008e14:	dc400315 	stw	r17,12(sp)
 1008e18:	dfc00b15 	stw	ra,44(sp)
 1008e1c:	df000a15 	stw	fp,40(sp)
 1008e20:	ddc00915 	stw	r23,36(sp)
 1008e24:	dd400715 	stw	r21,28(sp)
 1008e28:	dd000615 	stw	r20,24(sp)
 1008e2c:	dcc00515 	stw	r19,20(sp)
 1008e30:	dc000215 	stw	r16,8(sp)
 1008e34:	2825883a 	mov	r18,r5
 1008e38:	3023883a 	mov	r17,r6
 1008e3c:	202d883a 	mov	r22,r4
 1008e40:	2800c926 	beq	r5,zero,1009168 <_realloc_r+0x360>
 1008e44:	100c1740 	call	100c174 <__malloc_lock>
 1008e48:	943ffe04 	addi	r16,r18,-8
 1008e4c:	88c002c4 	addi	r3,r17,11
 1008e50:	00800584 	movi	r2,22
 1008e54:	82000117 	ldw	r8,4(r16)
 1008e58:	10c01b2e 	bgeu	r2,r3,1008ec8 <_realloc_r+0xc0>
 1008e5c:	00bffe04 	movi	r2,-8
 1008e60:	188e703a 	and	r7,r3,r2
 1008e64:	3839883a 	mov	fp,r7
 1008e68:	38001a16 	blt	r7,zero,1008ed4 <_realloc_r+0xcc>
 1008e6c:	e4401936 	bltu	fp,r17,1008ed4 <_realloc_r+0xcc>
 1008e70:	013fff04 	movi	r4,-4
 1008e74:	4126703a 	and	r19,r8,r4
 1008e78:	99c02616 	blt	r19,r7,1008f14 <_realloc_r+0x10c>
 1008e7c:	802b883a 	mov	r21,r16
 1008e80:	9829883a 	mov	r20,r19
 1008e84:	84000204 	addi	r16,r16,8
 1008e88:	a80f883a 	mov	r7,r21
 1008e8c:	a70dc83a 	sub	r6,r20,fp
 1008e90:	008003c4 	movi	r2,15
 1008e94:	1180c136 	bltu	r2,r6,100919c <_realloc_r+0x394>
 1008e98:	38800117 	ldw	r2,4(r7)
 1008e9c:	a549883a 	add	r4,r20,r21
 1008ea0:	1080004c 	andi	r2,r2,1
 1008ea4:	a084b03a 	or	r2,r20,r2
 1008ea8:	38800115 	stw	r2,4(r7)
 1008eac:	20c00117 	ldw	r3,4(r4)
 1008eb0:	18c00054 	ori	r3,r3,1
 1008eb4:	20c00115 	stw	r3,4(r4)
 1008eb8:	b009883a 	mov	r4,r22
 1008ebc:	100c27c0 	call	100c27c <__malloc_unlock>
 1008ec0:	8023883a 	mov	r17,r16
 1008ec4:	00000606 	br	1008ee0 <_realloc_r+0xd8>
 1008ec8:	01c00404 	movi	r7,16
 1008ecc:	3839883a 	mov	fp,r7
 1008ed0:	e47fe72e 	bgeu	fp,r17,1008e70 <_realloc_r+0x68>
 1008ed4:	00800304 	movi	r2,12
 1008ed8:	0023883a 	mov	r17,zero
 1008edc:	b0800015 	stw	r2,0(r22)
 1008ee0:	8805883a 	mov	r2,r17
 1008ee4:	dfc00b17 	ldw	ra,44(sp)
 1008ee8:	df000a17 	ldw	fp,40(sp)
 1008eec:	ddc00917 	ldw	r23,36(sp)
 1008ef0:	dd800817 	ldw	r22,32(sp)
 1008ef4:	dd400717 	ldw	r21,28(sp)
 1008ef8:	dd000617 	ldw	r20,24(sp)
 1008efc:	dcc00517 	ldw	r19,20(sp)
 1008f00:	dc800417 	ldw	r18,16(sp)
 1008f04:	dc400317 	ldw	r17,12(sp)
 1008f08:	dc000217 	ldw	r16,8(sp)
 1008f0c:	dec00c04 	addi	sp,sp,48
 1008f10:	f800283a 	ret
 1008f14:	008040b4 	movhi	r2,258
 1008f18:	10a6f304 	addi	r2,r2,-25652
 1008f1c:	12400217 	ldw	r9,8(r2)
 1008f20:	84cd883a 	add	r6,r16,r19
 1008f24:	802b883a 	mov	r21,r16
 1008f28:	3240b926 	beq	r6,r9,1009210 <_realloc_r+0x408>
 1008f2c:	31400117 	ldw	r5,4(r6)
 1008f30:	00bfff84 	movi	r2,-2
 1008f34:	2884703a 	and	r2,r5,r2
 1008f38:	1185883a 	add	r2,r2,r6
 1008f3c:	10c00117 	ldw	r3,4(r2)
 1008f40:	18c0004c 	andi	r3,r3,1
 1008f44:	1807003a 	cmpeq	r3,r3,zero
 1008f48:	1800a326 	beq	r3,zero,10091d8 <_realloc_r+0x3d0>
 1008f4c:	2908703a 	and	r4,r5,r4
 1008f50:	9929883a 	add	r20,r19,r4
 1008f54:	a1c0a30e 	bge	r20,r7,10091e4 <_realloc_r+0x3dc>
 1008f58:	4080004c 	andi	r2,r8,1
 1008f5c:	1000551e 	bne	r2,zero,10090b4 <_realloc_r+0x2ac>
 1008f60:	80800017 	ldw	r2,0(r16)
 1008f64:	80afc83a 	sub	r23,r16,r2
 1008f68:	b8c00117 	ldw	r3,4(r23)
 1008f6c:	00bfff04 	movi	r2,-4
 1008f70:	1884703a 	and	r2,r3,r2
 1008f74:	30002e26 	beq	r6,zero,1009030 <_realloc_r+0x228>
 1008f78:	3240b926 	beq	r6,r9,1009260 <_realloc_r+0x458>
 1008f7c:	98a9883a 	add	r20,r19,r2
 1008f80:	2509883a 	add	r4,r4,r20
 1008f84:	d9000015 	stw	r4,0(sp)
 1008f88:	21c02a16 	blt	r4,r7,1009034 <_realloc_r+0x22c>
 1008f8c:	30800317 	ldw	r2,12(r6)
 1008f90:	30c00217 	ldw	r3,8(r6)
 1008f94:	01400904 	movi	r5,36
 1008f98:	99bfff04 	addi	r6,r19,-4
 1008f9c:	18800315 	stw	r2,12(r3)
 1008fa0:	10c00215 	stw	r3,8(r2)
 1008fa4:	b9000317 	ldw	r4,12(r23)
 1008fa8:	b8800217 	ldw	r2,8(r23)
 1008fac:	b82b883a 	mov	r21,r23
 1008fb0:	bc000204 	addi	r16,r23,8
 1008fb4:	20800215 	stw	r2,8(r4)
 1008fb8:	11000315 	stw	r4,12(r2)
 1008fbc:	2980e436 	bltu	r5,r6,1009350 <_realloc_r+0x548>
 1008fc0:	008004c4 	movi	r2,19
 1008fc4:	9009883a 	mov	r4,r18
 1008fc8:	8011883a 	mov	r8,r16
 1008fcc:	11800f2e 	bgeu	r2,r6,100900c <_realloc_r+0x204>
 1008fd0:	90800017 	ldw	r2,0(r18)
 1008fd4:	ba000404 	addi	r8,r23,16
 1008fd8:	91000204 	addi	r4,r18,8
 1008fdc:	b8800215 	stw	r2,8(r23)
 1008fe0:	90c00117 	ldw	r3,4(r18)
 1008fe4:	008006c4 	movi	r2,27
 1008fe8:	b8c00315 	stw	r3,12(r23)
 1008fec:	1180072e 	bgeu	r2,r6,100900c <_realloc_r+0x204>
 1008ff0:	90c00217 	ldw	r3,8(r18)
 1008ff4:	ba000604 	addi	r8,r23,24
 1008ff8:	91000404 	addi	r4,r18,16
 1008ffc:	b8c00415 	stw	r3,16(r23)
 1009000:	90800317 	ldw	r2,12(r18)
 1009004:	b8800515 	stw	r2,20(r23)
 1009008:	3140e726 	beq	r6,r5,10093a8 <_realloc_r+0x5a0>
 100900c:	20800017 	ldw	r2,0(r4)
 1009010:	dd000017 	ldw	r20,0(sp)
 1009014:	b80f883a 	mov	r7,r23
 1009018:	40800015 	stw	r2,0(r8)
 100901c:	20c00117 	ldw	r3,4(r4)
 1009020:	40c00115 	stw	r3,4(r8)
 1009024:	20800217 	ldw	r2,8(r4)
 1009028:	40800215 	stw	r2,8(r8)
 100902c:	003f9706 	br	1008e8c <_realloc_r+0x84>
 1009030:	98a9883a 	add	r20,r19,r2
 1009034:	a1c01f16 	blt	r20,r7,10090b4 <_realloc_r+0x2ac>
 1009038:	b8c00317 	ldw	r3,12(r23)
 100903c:	b8800217 	ldw	r2,8(r23)
 1009040:	99bfff04 	addi	r6,r19,-4
 1009044:	01400904 	movi	r5,36
 1009048:	b82b883a 	mov	r21,r23
 100904c:	18800215 	stw	r2,8(r3)
 1009050:	10c00315 	stw	r3,12(r2)
 1009054:	bc000204 	addi	r16,r23,8
 1009058:	2980c336 	bltu	r5,r6,1009368 <_realloc_r+0x560>
 100905c:	008004c4 	movi	r2,19
 1009060:	9009883a 	mov	r4,r18
 1009064:	8011883a 	mov	r8,r16
 1009068:	11800f2e 	bgeu	r2,r6,10090a8 <_realloc_r+0x2a0>
 100906c:	90800017 	ldw	r2,0(r18)
 1009070:	ba000404 	addi	r8,r23,16
 1009074:	91000204 	addi	r4,r18,8
 1009078:	b8800215 	stw	r2,8(r23)
 100907c:	90c00117 	ldw	r3,4(r18)
 1009080:	008006c4 	movi	r2,27
 1009084:	b8c00315 	stw	r3,12(r23)
 1009088:	1180072e 	bgeu	r2,r6,10090a8 <_realloc_r+0x2a0>
 100908c:	90c00217 	ldw	r3,8(r18)
 1009090:	ba000604 	addi	r8,r23,24
 1009094:	91000404 	addi	r4,r18,16
 1009098:	b8c00415 	stw	r3,16(r23)
 100909c:	90800317 	ldw	r2,12(r18)
 10090a0:	b8800515 	stw	r2,20(r23)
 10090a4:	3140c726 	beq	r6,r5,10093c4 <_realloc_r+0x5bc>
 10090a8:	20800017 	ldw	r2,0(r4)
 10090ac:	b80f883a 	mov	r7,r23
 10090b0:	003fd906 	br	1009018 <_realloc_r+0x210>
 10090b4:	880b883a 	mov	r5,r17
 10090b8:	b009883a 	mov	r4,r22
 10090bc:	10073400 	call	1007340 <_malloc_r>
 10090c0:	1023883a 	mov	r17,r2
 10090c4:	10002526 	beq	r2,zero,100915c <_realloc_r+0x354>
 10090c8:	80800117 	ldw	r2,4(r16)
 10090cc:	00ffff84 	movi	r3,-2
 10090d0:	893ffe04 	addi	r4,r17,-8
 10090d4:	10c4703a 	and	r2,r2,r3
 10090d8:	8085883a 	add	r2,r16,r2
 10090dc:	20809526 	beq	r4,r2,1009334 <_realloc_r+0x52c>
 10090e0:	99bfff04 	addi	r6,r19,-4
 10090e4:	01c00904 	movi	r7,36
 10090e8:	39804536 	bltu	r7,r6,1009200 <_realloc_r+0x3f8>
 10090ec:	008004c4 	movi	r2,19
 10090f0:	9009883a 	mov	r4,r18
 10090f4:	880b883a 	mov	r5,r17
 10090f8:	11800f2e 	bgeu	r2,r6,1009138 <_realloc_r+0x330>
 10090fc:	90800017 	ldw	r2,0(r18)
 1009100:	89400204 	addi	r5,r17,8
 1009104:	91000204 	addi	r4,r18,8
 1009108:	88800015 	stw	r2,0(r17)
 100910c:	90c00117 	ldw	r3,4(r18)
 1009110:	008006c4 	movi	r2,27
 1009114:	88c00115 	stw	r3,4(r17)
 1009118:	1180072e 	bgeu	r2,r6,1009138 <_realloc_r+0x330>
 100911c:	90c00217 	ldw	r3,8(r18)
 1009120:	89400404 	addi	r5,r17,16
 1009124:	91000404 	addi	r4,r18,16
 1009128:	88c00215 	stw	r3,8(r17)
 100912c:	90800317 	ldw	r2,12(r18)
 1009130:	88800315 	stw	r2,12(r17)
 1009134:	31c09126 	beq	r6,r7,100937c <_realloc_r+0x574>
 1009138:	20800017 	ldw	r2,0(r4)
 100913c:	28800015 	stw	r2,0(r5)
 1009140:	20c00117 	ldw	r3,4(r4)
 1009144:	28c00115 	stw	r3,4(r5)
 1009148:	20800217 	ldw	r2,8(r4)
 100914c:	28800215 	stw	r2,8(r5)
 1009150:	900b883a 	mov	r5,r18
 1009154:	b009883a 	mov	r4,r22
 1009158:	10067b80 	call	10067b8 <_free_r>
 100915c:	b009883a 	mov	r4,r22
 1009160:	100c27c0 	call	100c27c <__malloc_unlock>
 1009164:	003f5e06 	br	1008ee0 <_realloc_r+0xd8>
 1009168:	300b883a 	mov	r5,r6
 100916c:	dfc00b17 	ldw	ra,44(sp)
 1009170:	df000a17 	ldw	fp,40(sp)
 1009174:	ddc00917 	ldw	r23,36(sp)
 1009178:	dd800817 	ldw	r22,32(sp)
 100917c:	dd400717 	ldw	r21,28(sp)
 1009180:	dd000617 	ldw	r20,24(sp)
 1009184:	dcc00517 	ldw	r19,20(sp)
 1009188:	dc800417 	ldw	r18,16(sp)
 100918c:	dc400317 	ldw	r17,12(sp)
 1009190:	dc000217 	ldw	r16,8(sp)
 1009194:	dec00c04 	addi	sp,sp,48
 1009198:	10073401 	jmpi	1007340 <_malloc_r>
 100919c:	38800117 	ldw	r2,4(r7)
 10091a0:	e54b883a 	add	r5,fp,r21
 10091a4:	31000054 	ori	r4,r6,1
 10091a8:	1080004c 	andi	r2,r2,1
 10091ac:	1704b03a 	or	r2,r2,fp
 10091b0:	38800115 	stw	r2,4(r7)
 10091b4:	29000115 	stw	r4,4(r5)
 10091b8:	2987883a 	add	r3,r5,r6
 10091bc:	18800117 	ldw	r2,4(r3)
 10091c0:	29400204 	addi	r5,r5,8
 10091c4:	b009883a 	mov	r4,r22
 10091c8:	10800054 	ori	r2,r2,1
 10091cc:	18800115 	stw	r2,4(r3)
 10091d0:	10067b80 	call	10067b8 <_free_r>
 10091d4:	003f3806 	br	1008eb8 <_realloc_r+0xb0>
 10091d8:	000d883a 	mov	r6,zero
 10091dc:	0009883a 	mov	r4,zero
 10091e0:	003f5d06 	br	1008f58 <_realloc_r+0x150>
 10091e4:	30c00217 	ldw	r3,8(r6)
 10091e8:	30800317 	ldw	r2,12(r6)
 10091ec:	800f883a 	mov	r7,r16
 10091f0:	84000204 	addi	r16,r16,8
 10091f4:	10c00215 	stw	r3,8(r2)
 10091f8:	18800315 	stw	r2,12(r3)
 10091fc:	003f2306 	br	1008e8c <_realloc_r+0x84>
 1009200:	8809883a 	mov	r4,r17
 1009204:	900b883a 	mov	r5,r18
 1009208:	1007c040 	call	1007c04 <memmove>
 100920c:	003fd006 	br	1009150 <_realloc_r+0x348>
 1009210:	30800117 	ldw	r2,4(r6)
 1009214:	e0c00404 	addi	r3,fp,16
 1009218:	1108703a 	and	r4,r2,r4
 100921c:	9905883a 	add	r2,r19,r4
 1009220:	10ff4d16 	blt	r2,r3,1008f58 <_realloc_r+0x150>
 1009224:	1705c83a 	sub	r2,r2,fp
 1009228:	870b883a 	add	r5,r16,fp
 100922c:	10800054 	ori	r2,r2,1
 1009230:	28800115 	stw	r2,4(r5)
 1009234:	80c00117 	ldw	r3,4(r16)
 1009238:	008040b4 	movhi	r2,258
 100923c:	10a6f304 	addi	r2,r2,-25652
 1009240:	b009883a 	mov	r4,r22
 1009244:	18c0004c 	andi	r3,r3,1
 1009248:	e0c6b03a 	or	r3,fp,r3
 100924c:	11400215 	stw	r5,8(r2)
 1009250:	80c00115 	stw	r3,4(r16)
 1009254:	100c27c0 	call	100c27c <__malloc_unlock>
 1009258:	84400204 	addi	r17,r16,8
 100925c:	003f2006 	br	1008ee0 <_realloc_r+0xd8>
 1009260:	98a9883a 	add	r20,r19,r2
 1009264:	2509883a 	add	r4,r4,r20
 1009268:	e0800404 	addi	r2,fp,16
 100926c:	d9000115 	stw	r4,4(sp)
 1009270:	20bf7016 	blt	r4,r2,1009034 <_realloc_r+0x22c>
 1009274:	b8c00317 	ldw	r3,12(r23)
 1009278:	b8800217 	ldw	r2,8(r23)
 100927c:	99bfff04 	addi	r6,r19,-4
 1009280:	01400904 	movi	r5,36
 1009284:	18800215 	stw	r2,8(r3)
 1009288:	10c00315 	stw	r3,12(r2)
 100928c:	bc400204 	addi	r17,r23,8
 1009290:	29804136 	bltu	r5,r6,1009398 <_realloc_r+0x590>
 1009294:	008004c4 	movi	r2,19
 1009298:	9009883a 	mov	r4,r18
 100929c:	880f883a 	mov	r7,r17
 10092a0:	11800f2e 	bgeu	r2,r6,10092e0 <_realloc_r+0x4d8>
 10092a4:	90800017 	ldw	r2,0(r18)
 10092a8:	b9c00404 	addi	r7,r23,16
 10092ac:	91000204 	addi	r4,r18,8
 10092b0:	b8800215 	stw	r2,8(r23)
 10092b4:	90c00117 	ldw	r3,4(r18)
 10092b8:	008006c4 	movi	r2,27
 10092bc:	b8c00315 	stw	r3,12(r23)
 10092c0:	1180072e 	bgeu	r2,r6,10092e0 <_realloc_r+0x4d8>
 10092c4:	90c00217 	ldw	r3,8(r18)
 10092c8:	b9c00604 	addi	r7,r23,24
 10092cc:	91000404 	addi	r4,r18,16
 10092d0:	b8c00415 	stw	r3,16(r23)
 10092d4:	90800317 	ldw	r2,12(r18)
 10092d8:	b8800515 	stw	r2,20(r23)
 10092dc:	31404026 	beq	r6,r5,10093e0 <_realloc_r+0x5d8>
 10092e0:	20800017 	ldw	r2,0(r4)
 10092e4:	38800015 	stw	r2,0(r7)
 10092e8:	20c00117 	ldw	r3,4(r4)
 10092ec:	38c00115 	stw	r3,4(r7)
 10092f0:	20800217 	ldw	r2,8(r4)
 10092f4:	38800215 	stw	r2,8(r7)
 10092f8:	d8c00117 	ldw	r3,4(sp)
 10092fc:	bf0b883a 	add	r5,r23,fp
 1009300:	b009883a 	mov	r4,r22
 1009304:	1f05c83a 	sub	r2,r3,fp
 1009308:	10800054 	ori	r2,r2,1
 100930c:	28800115 	stw	r2,4(r5)
 1009310:	b8c00117 	ldw	r3,4(r23)
 1009314:	008040b4 	movhi	r2,258
 1009318:	10a6f304 	addi	r2,r2,-25652
 100931c:	11400215 	stw	r5,8(r2)
 1009320:	18c0004c 	andi	r3,r3,1
 1009324:	e0c6b03a 	or	r3,fp,r3
 1009328:	b8c00115 	stw	r3,4(r23)
 100932c:	100c27c0 	call	100c27c <__malloc_unlock>
 1009330:	003eeb06 	br	1008ee0 <_realloc_r+0xd8>
 1009334:	20800117 	ldw	r2,4(r4)
 1009338:	00ffff04 	movi	r3,-4
 100933c:	800f883a 	mov	r7,r16
 1009340:	10c4703a 	and	r2,r2,r3
 1009344:	98a9883a 	add	r20,r19,r2
 1009348:	84000204 	addi	r16,r16,8
 100934c:	003ecf06 	br	1008e8c <_realloc_r+0x84>
 1009350:	900b883a 	mov	r5,r18
 1009354:	8009883a 	mov	r4,r16
 1009358:	1007c040 	call	1007c04 <memmove>
 100935c:	dd000017 	ldw	r20,0(sp)
 1009360:	b80f883a 	mov	r7,r23
 1009364:	003ec906 	br	1008e8c <_realloc_r+0x84>
 1009368:	900b883a 	mov	r5,r18
 100936c:	8009883a 	mov	r4,r16
 1009370:	1007c040 	call	1007c04 <memmove>
 1009374:	b80f883a 	mov	r7,r23
 1009378:	003ec406 	br	1008e8c <_realloc_r+0x84>
 100937c:	90c00417 	ldw	r3,16(r18)
 1009380:	89400604 	addi	r5,r17,24
 1009384:	91000604 	addi	r4,r18,24
 1009388:	88c00415 	stw	r3,16(r17)
 100938c:	90800517 	ldw	r2,20(r18)
 1009390:	88800515 	stw	r2,20(r17)
 1009394:	003f6806 	br	1009138 <_realloc_r+0x330>
 1009398:	900b883a 	mov	r5,r18
 100939c:	8809883a 	mov	r4,r17
 10093a0:	1007c040 	call	1007c04 <memmove>
 10093a4:	003fd406 	br	10092f8 <_realloc_r+0x4f0>
 10093a8:	90c00417 	ldw	r3,16(r18)
 10093ac:	91000604 	addi	r4,r18,24
 10093b0:	ba000804 	addi	r8,r23,32
 10093b4:	b8c00615 	stw	r3,24(r23)
 10093b8:	90800517 	ldw	r2,20(r18)
 10093bc:	b8800715 	stw	r2,28(r23)
 10093c0:	003f1206 	br	100900c <_realloc_r+0x204>
 10093c4:	90c00417 	ldw	r3,16(r18)
 10093c8:	91000604 	addi	r4,r18,24
 10093cc:	ba000804 	addi	r8,r23,32
 10093d0:	b8c00615 	stw	r3,24(r23)
 10093d4:	90800517 	ldw	r2,20(r18)
 10093d8:	b8800715 	stw	r2,28(r23)
 10093dc:	003f3206 	br	10090a8 <_realloc_r+0x2a0>
 10093e0:	90c00417 	ldw	r3,16(r18)
 10093e4:	91000604 	addi	r4,r18,24
 10093e8:	b9c00804 	addi	r7,r23,32
 10093ec:	b8c00615 	stw	r3,24(r23)
 10093f0:	90800517 	ldw	r2,20(r18)
 10093f4:	b8800715 	stw	r2,28(r23)
 10093f8:	003fb906 	br	10092e0 <_realloc_r+0x4d8>

010093fc <__isinfd>:
 10093fc:	200d883a 	mov	r6,r4
 1009400:	0109c83a 	sub	r4,zero,r4
 1009404:	2188b03a 	or	r4,r4,r6
 1009408:	2008d7fa 	srli	r4,r4,31
 100940c:	00a00034 	movhi	r2,32768
 1009410:	10bfffc4 	addi	r2,r2,-1
 1009414:	1144703a 	and	r2,r2,r5
 1009418:	2088b03a 	or	r4,r4,r2
 100941c:	009ffc34 	movhi	r2,32752
 1009420:	1105c83a 	sub	r2,r2,r4
 1009424:	0087c83a 	sub	r3,zero,r2
 1009428:	10c4b03a 	or	r2,r2,r3
 100942c:	1004d7fa 	srli	r2,r2,31
 1009430:	00c00044 	movi	r3,1
 1009434:	1885c83a 	sub	r2,r3,r2
 1009438:	f800283a 	ret

0100943c <__isnand>:
 100943c:	200d883a 	mov	r6,r4
 1009440:	0109c83a 	sub	r4,zero,r4
 1009444:	2188b03a 	or	r4,r4,r6
 1009448:	2008d7fa 	srli	r4,r4,31
 100944c:	00a00034 	movhi	r2,32768
 1009450:	10bfffc4 	addi	r2,r2,-1
 1009454:	1144703a 	and	r2,r2,r5
 1009458:	2088b03a 	or	r4,r4,r2
 100945c:	009ffc34 	movhi	r2,32752
 1009460:	1105c83a 	sub	r2,r2,r4
 1009464:	1004d7fa 	srli	r2,r2,31
 1009468:	f800283a 	ret

0100946c <_sbrk_r>:
 100946c:	defffd04 	addi	sp,sp,-12
 1009470:	dc000015 	stw	r16,0(sp)
 1009474:	040040b4 	movhi	r16,258
 1009478:	8433a504 	addi	r16,r16,-12652
 100947c:	dc400115 	stw	r17,4(sp)
 1009480:	80000015 	stw	zero,0(r16)
 1009484:	2023883a 	mov	r17,r4
 1009488:	2809883a 	mov	r4,r5
 100948c:	dfc00215 	stw	ra,8(sp)
 1009490:	100bc840 	call	100bc84 <sbrk>
 1009494:	1007883a 	mov	r3,r2
 1009498:	00bfffc4 	movi	r2,-1
 100949c:	18800626 	beq	r3,r2,10094b8 <_sbrk_r+0x4c>
 10094a0:	1805883a 	mov	r2,r3
 10094a4:	dfc00217 	ldw	ra,8(sp)
 10094a8:	dc400117 	ldw	r17,4(sp)
 10094ac:	dc000017 	ldw	r16,0(sp)
 10094b0:	dec00304 	addi	sp,sp,12
 10094b4:	f800283a 	ret
 10094b8:	80800017 	ldw	r2,0(r16)
 10094bc:	103ff826 	beq	r2,zero,10094a0 <_sbrk_r+0x34>
 10094c0:	88800015 	stw	r2,0(r17)
 10094c4:	1805883a 	mov	r2,r3
 10094c8:	dfc00217 	ldw	ra,8(sp)
 10094cc:	dc400117 	ldw	r17,4(sp)
 10094d0:	dc000017 	ldw	r16,0(sp)
 10094d4:	dec00304 	addi	sp,sp,12
 10094d8:	f800283a 	ret

010094dc <__sclose>:
 10094dc:	2940038f 	ldh	r5,14(r5)
 10094e0:	10098241 	jmpi	1009824 <_close_r>

010094e4 <__sseek>:
 10094e4:	defffe04 	addi	sp,sp,-8
 10094e8:	dc000015 	stw	r16,0(sp)
 10094ec:	2821883a 	mov	r16,r5
 10094f0:	2940038f 	ldh	r5,14(r5)
 10094f4:	dfc00115 	stw	ra,4(sp)
 10094f8:	1009a9c0 	call	1009a9c <_lseek_r>
 10094fc:	1007883a 	mov	r3,r2
 1009500:	00bfffc4 	movi	r2,-1
 1009504:	18800926 	beq	r3,r2,100952c <__sseek+0x48>
 1009508:	8080030b 	ldhu	r2,12(r16)
 100950c:	80c01415 	stw	r3,80(r16)
 1009510:	10840014 	ori	r2,r2,4096
 1009514:	8080030d 	sth	r2,12(r16)
 1009518:	1805883a 	mov	r2,r3
 100951c:	dfc00117 	ldw	ra,4(sp)
 1009520:	dc000017 	ldw	r16,0(sp)
 1009524:	dec00204 	addi	sp,sp,8
 1009528:	f800283a 	ret
 100952c:	8080030b 	ldhu	r2,12(r16)
 1009530:	10bbffcc 	andi	r2,r2,61439
 1009534:	8080030d 	sth	r2,12(r16)
 1009538:	1805883a 	mov	r2,r3
 100953c:	dfc00117 	ldw	ra,4(sp)
 1009540:	dc000017 	ldw	r16,0(sp)
 1009544:	dec00204 	addi	sp,sp,8
 1009548:	f800283a 	ret

0100954c <__swrite>:
 100954c:	2880030b 	ldhu	r2,12(r5)
 1009550:	defffb04 	addi	sp,sp,-20
 1009554:	dcc00315 	stw	r19,12(sp)
 1009558:	1080400c 	andi	r2,r2,256
 100955c:	dc800215 	stw	r18,8(sp)
 1009560:	dc400115 	stw	r17,4(sp)
 1009564:	dc000015 	stw	r16,0(sp)
 1009568:	3027883a 	mov	r19,r6
 100956c:	3825883a 	mov	r18,r7
 1009570:	dfc00415 	stw	ra,16(sp)
 1009574:	2821883a 	mov	r16,r5
 1009578:	000d883a 	mov	r6,zero
 100957c:	01c00084 	movi	r7,2
 1009580:	2023883a 	mov	r17,r4
 1009584:	10000226 	beq	r2,zero,1009590 <__swrite+0x44>
 1009588:	2940038f 	ldh	r5,14(r5)
 100958c:	1009a9c0 	call	1009a9c <_lseek_r>
 1009590:	8080030b 	ldhu	r2,12(r16)
 1009594:	8140038f 	ldh	r5,14(r16)
 1009598:	8809883a 	mov	r4,r17
 100959c:	10bbffcc 	andi	r2,r2,61439
 10095a0:	980d883a 	mov	r6,r19
 10095a4:	900f883a 	mov	r7,r18
 10095a8:	8080030d 	sth	r2,12(r16)
 10095ac:	dfc00417 	ldw	ra,16(sp)
 10095b0:	dcc00317 	ldw	r19,12(sp)
 10095b4:	dc800217 	ldw	r18,8(sp)
 10095b8:	dc400117 	ldw	r17,4(sp)
 10095bc:	dc000017 	ldw	r16,0(sp)
 10095c0:	dec00504 	addi	sp,sp,20
 10095c4:	10096e41 	jmpi	10096e4 <_write_r>

010095c8 <__sread>:
 10095c8:	defffe04 	addi	sp,sp,-8
 10095cc:	dc000015 	stw	r16,0(sp)
 10095d0:	2821883a 	mov	r16,r5
 10095d4:	2940038f 	ldh	r5,14(r5)
 10095d8:	dfc00115 	stw	ra,4(sp)
 10095dc:	1009b140 	call	1009b14 <_read_r>
 10095e0:	1007883a 	mov	r3,r2
 10095e4:	10000816 	blt	r2,zero,1009608 <__sread+0x40>
 10095e8:	80801417 	ldw	r2,80(r16)
 10095ec:	10c5883a 	add	r2,r2,r3
 10095f0:	80801415 	stw	r2,80(r16)
 10095f4:	1805883a 	mov	r2,r3
 10095f8:	dfc00117 	ldw	ra,4(sp)
 10095fc:	dc000017 	ldw	r16,0(sp)
 1009600:	dec00204 	addi	sp,sp,8
 1009604:	f800283a 	ret
 1009608:	8080030b 	ldhu	r2,12(r16)
 100960c:	10bbffcc 	andi	r2,r2,61439
 1009610:	8080030d 	sth	r2,12(r16)
 1009614:	1805883a 	mov	r2,r3
 1009618:	dfc00117 	ldw	ra,4(sp)
 100961c:	dc000017 	ldw	r16,0(sp)
 1009620:	dec00204 	addi	sp,sp,8
 1009624:	f800283a 	ret

01009628 <strcmp>:
 1009628:	2144b03a 	or	r2,r4,r5
 100962c:	108000cc 	andi	r2,r2,3
 1009630:	10001d1e 	bne	r2,zero,10096a8 <strcmp+0x80>
 1009634:	200f883a 	mov	r7,r4
 1009638:	28800017 	ldw	r2,0(r5)
 100963c:	21000017 	ldw	r4,0(r4)
 1009640:	280d883a 	mov	r6,r5
 1009644:	2080161e 	bne	r4,r2,10096a0 <strcmp+0x78>
 1009648:	023fbff4 	movhi	r8,65279
 100964c:	423fbfc4 	addi	r8,r8,-257
 1009650:	2207883a 	add	r3,r4,r8
 1009654:	01602074 	movhi	r5,32897
 1009658:	29602004 	addi	r5,r5,-32640
 100965c:	1946703a 	and	r3,r3,r5
 1009660:	0104303a 	nor	r2,zero,r4
 1009664:	10c4703a 	and	r2,r2,r3
 1009668:	10001c1e 	bne	r2,zero,10096dc <strcmp+0xb4>
 100966c:	4013883a 	mov	r9,r8
 1009670:	2811883a 	mov	r8,r5
 1009674:	00000106 	br	100967c <strcmp+0x54>
 1009678:	1800181e 	bne	r3,zero,10096dc <strcmp+0xb4>
 100967c:	39c00104 	addi	r7,r7,4
 1009680:	39000017 	ldw	r4,0(r7)
 1009684:	31800104 	addi	r6,r6,4
 1009688:	31400017 	ldw	r5,0(r6)
 100968c:	2245883a 	add	r2,r4,r9
 1009690:	1204703a 	and	r2,r2,r8
 1009694:	0106303a 	nor	r3,zero,r4
 1009698:	1886703a 	and	r3,r3,r2
 100969c:	217ff626 	beq	r4,r5,1009678 <strcmp+0x50>
 10096a0:	3809883a 	mov	r4,r7
 10096a4:	300b883a 	mov	r5,r6
 10096a8:	20c00007 	ldb	r3,0(r4)
 10096ac:	1800051e 	bne	r3,zero,10096c4 <strcmp+0x9c>
 10096b0:	00000606 	br	10096cc <strcmp+0xa4>
 10096b4:	21000044 	addi	r4,r4,1
 10096b8:	20c00007 	ldb	r3,0(r4)
 10096bc:	29400044 	addi	r5,r5,1
 10096c0:	18000226 	beq	r3,zero,10096cc <strcmp+0xa4>
 10096c4:	28800007 	ldb	r2,0(r5)
 10096c8:	18bffa26 	beq	r3,r2,10096b4 <strcmp+0x8c>
 10096cc:	20c00003 	ldbu	r3,0(r4)
 10096d0:	28800003 	ldbu	r2,0(r5)
 10096d4:	1885c83a 	sub	r2,r3,r2
 10096d8:	f800283a 	ret
 10096dc:	0005883a 	mov	r2,zero
 10096e0:	f800283a 	ret

010096e4 <_write_r>:
 10096e4:	defffd04 	addi	sp,sp,-12
 10096e8:	dc000015 	stw	r16,0(sp)
 10096ec:	040040b4 	movhi	r16,258
 10096f0:	8433a504 	addi	r16,r16,-12652
 10096f4:	dc400115 	stw	r17,4(sp)
 10096f8:	80000015 	stw	zero,0(r16)
 10096fc:	2023883a 	mov	r17,r4
 1009700:	2809883a 	mov	r4,r5
 1009704:	300b883a 	mov	r5,r6
 1009708:	380d883a 	mov	r6,r7
 100970c:	dfc00215 	stw	ra,8(sp)
 1009710:	100bee80 	call	100bee8 <write>
 1009714:	1007883a 	mov	r3,r2
 1009718:	00bfffc4 	movi	r2,-1
 100971c:	18800626 	beq	r3,r2,1009738 <_write_r+0x54>
 1009720:	1805883a 	mov	r2,r3
 1009724:	dfc00217 	ldw	ra,8(sp)
 1009728:	dc400117 	ldw	r17,4(sp)
 100972c:	dc000017 	ldw	r16,0(sp)
 1009730:	dec00304 	addi	sp,sp,12
 1009734:	f800283a 	ret
 1009738:	80800017 	ldw	r2,0(r16)
 100973c:	103ff826 	beq	r2,zero,1009720 <_write_r+0x3c>
 1009740:	88800015 	stw	r2,0(r17)
 1009744:	1805883a 	mov	r2,r3
 1009748:	dfc00217 	ldw	ra,8(sp)
 100974c:	dc400117 	ldw	r17,4(sp)
 1009750:	dc000017 	ldw	r16,0(sp)
 1009754:	dec00304 	addi	sp,sp,12
 1009758:	f800283a 	ret

0100975c <_calloc_r>:
 100975c:	defffe04 	addi	sp,sp,-8
 1009760:	dc400015 	stw	r17,0(sp)
 1009764:	2023883a 	mov	r17,r4
 1009768:	2809883a 	mov	r4,r5
 100976c:	300b883a 	mov	r5,r6
 1009770:	dfc00115 	stw	ra,4(sp)
 1009774:	10020280 	call	1002028 <__mulsi3>
 1009778:	100b883a 	mov	r5,r2
 100977c:	8809883a 	mov	r4,r17
 1009780:	10073400 	call	1007340 <_malloc_r>
 1009784:	1023883a 	mov	r17,r2
 1009788:	01c00904 	movi	r7,36
 100978c:	10000d26 	beq	r2,zero,10097c4 <_calloc_r+0x68>
 1009790:	10ffff17 	ldw	r3,-4(r2)
 1009794:	1009883a 	mov	r4,r2
 1009798:	00bfff04 	movi	r2,-4
 100979c:	1886703a 	and	r3,r3,r2
 10097a0:	1887883a 	add	r3,r3,r2
 10097a4:	180d883a 	mov	r6,r3
 10097a8:	000b883a 	mov	r5,zero
 10097ac:	38c01736 	bltu	r7,r3,100980c <_calloc_r+0xb0>
 10097b0:	008004c4 	movi	r2,19
 10097b4:	10c00836 	bltu	r2,r3,10097d8 <_calloc_r+0x7c>
 10097b8:	20000215 	stw	zero,8(r4)
 10097bc:	20000015 	stw	zero,0(r4)
 10097c0:	20000115 	stw	zero,4(r4)
 10097c4:	8805883a 	mov	r2,r17
 10097c8:	dfc00117 	ldw	ra,4(sp)
 10097cc:	dc400017 	ldw	r17,0(sp)
 10097d0:	dec00204 	addi	sp,sp,8
 10097d4:	f800283a 	ret
 10097d8:	008006c4 	movi	r2,27
 10097dc:	88000015 	stw	zero,0(r17)
 10097e0:	88000115 	stw	zero,4(r17)
 10097e4:	89000204 	addi	r4,r17,8
 10097e8:	10fff32e 	bgeu	r2,r3,10097b8 <_calloc_r+0x5c>
 10097ec:	88000215 	stw	zero,8(r17)
 10097f0:	88000315 	stw	zero,12(r17)
 10097f4:	89000404 	addi	r4,r17,16
 10097f8:	19ffef1e 	bne	r3,r7,10097b8 <_calloc_r+0x5c>
 10097fc:	89000604 	addi	r4,r17,24
 1009800:	88000415 	stw	zero,16(r17)
 1009804:	88000515 	stw	zero,20(r17)
 1009808:	003feb06 	br	10097b8 <_calloc_r+0x5c>
 100980c:	1007ce40 	call	1007ce4 <memset>
 1009810:	8805883a 	mov	r2,r17
 1009814:	dfc00117 	ldw	ra,4(sp)
 1009818:	dc400017 	ldw	r17,0(sp)
 100981c:	dec00204 	addi	sp,sp,8
 1009820:	f800283a 	ret

01009824 <_close_r>:
 1009824:	defffd04 	addi	sp,sp,-12
 1009828:	dc000015 	stw	r16,0(sp)
 100982c:	040040b4 	movhi	r16,258
 1009830:	8433a504 	addi	r16,r16,-12652
 1009834:	dc400115 	stw	r17,4(sp)
 1009838:	80000015 	stw	zero,0(r16)
 100983c:	2023883a 	mov	r17,r4
 1009840:	2809883a 	mov	r4,r5
 1009844:	dfc00215 	stw	ra,8(sp)
 1009848:	100b3980 	call	100b398 <close>
 100984c:	1007883a 	mov	r3,r2
 1009850:	00bfffc4 	movi	r2,-1
 1009854:	18800626 	beq	r3,r2,1009870 <_close_r+0x4c>
 1009858:	1805883a 	mov	r2,r3
 100985c:	dfc00217 	ldw	ra,8(sp)
 1009860:	dc400117 	ldw	r17,4(sp)
 1009864:	dc000017 	ldw	r16,0(sp)
 1009868:	dec00304 	addi	sp,sp,12
 100986c:	f800283a 	ret
 1009870:	80800017 	ldw	r2,0(r16)
 1009874:	103ff826 	beq	r2,zero,1009858 <_close_r+0x34>
 1009878:	88800015 	stw	r2,0(r17)
 100987c:	1805883a 	mov	r2,r3
 1009880:	dfc00217 	ldw	ra,8(sp)
 1009884:	dc400117 	ldw	r17,4(sp)
 1009888:	dc000017 	ldw	r16,0(sp)
 100988c:	dec00304 	addi	sp,sp,12
 1009890:	f800283a 	ret

01009894 <_fclose_r>:
 1009894:	defffc04 	addi	sp,sp,-16
 1009898:	dc400115 	stw	r17,4(sp)
 100989c:	dc000015 	stw	r16,0(sp)
 10098a0:	dfc00315 	stw	ra,12(sp)
 10098a4:	dc800215 	stw	r18,8(sp)
 10098a8:	2821883a 	mov	r16,r5
 10098ac:	2023883a 	mov	r17,r4
 10098b0:	28002926 	beq	r5,zero,1009958 <_fclose_r+0xc4>
 10098b4:	10063f00 	call	10063f0 <__sfp_lock_acquire>
 10098b8:	88000226 	beq	r17,zero,10098c4 <_fclose_r+0x30>
 10098bc:	88800e17 	ldw	r2,56(r17)
 10098c0:	10002d26 	beq	r2,zero,1009978 <_fclose_r+0xe4>
 10098c4:	8080030f 	ldh	r2,12(r16)
 10098c8:	10002226 	beq	r2,zero,1009954 <_fclose_r+0xc0>
 10098cc:	8809883a 	mov	r4,r17
 10098d0:	800b883a 	mov	r5,r16
 10098d4:	10061680 	call	1006168 <_fflush_r>
 10098d8:	1025883a 	mov	r18,r2
 10098dc:	80800b17 	ldw	r2,44(r16)
 10098e0:	10000426 	beq	r2,zero,10098f4 <_fclose_r+0x60>
 10098e4:	81400717 	ldw	r5,28(r16)
 10098e8:	8809883a 	mov	r4,r17
 10098ec:	103ee83a 	callr	r2
 10098f0:	10002a16 	blt	r2,zero,100999c <_fclose_r+0x108>
 10098f4:	8080030b 	ldhu	r2,12(r16)
 10098f8:	1080200c 	andi	r2,r2,128
 10098fc:	1000231e 	bne	r2,zero,100998c <_fclose_r+0xf8>
 1009900:	81400c17 	ldw	r5,48(r16)
 1009904:	28000526 	beq	r5,zero,100991c <_fclose_r+0x88>
 1009908:	80801004 	addi	r2,r16,64
 100990c:	28800226 	beq	r5,r2,1009918 <_fclose_r+0x84>
 1009910:	8809883a 	mov	r4,r17
 1009914:	10067b80 	call	10067b8 <_free_r>
 1009918:	80000c15 	stw	zero,48(r16)
 100991c:	81401117 	ldw	r5,68(r16)
 1009920:	28000326 	beq	r5,zero,1009930 <_fclose_r+0x9c>
 1009924:	8809883a 	mov	r4,r17
 1009928:	10067b80 	call	10067b8 <_free_r>
 100992c:	80001115 	stw	zero,68(r16)
 1009930:	8000030d 	sth	zero,12(r16)
 1009934:	10063f40 	call	10063f4 <__sfp_lock_release>
 1009938:	9005883a 	mov	r2,r18
 100993c:	dfc00317 	ldw	ra,12(sp)
 1009940:	dc800217 	ldw	r18,8(sp)
 1009944:	dc400117 	ldw	r17,4(sp)
 1009948:	dc000017 	ldw	r16,0(sp)
 100994c:	dec00404 	addi	sp,sp,16
 1009950:	f800283a 	ret
 1009954:	10063f40 	call	10063f4 <__sfp_lock_release>
 1009958:	0025883a 	mov	r18,zero
 100995c:	9005883a 	mov	r2,r18
 1009960:	dfc00317 	ldw	ra,12(sp)
 1009964:	dc800217 	ldw	r18,8(sp)
 1009968:	dc400117 	ldw	r17,4(sp)
 100996c:	dc000017 	ldw	r16,0(sp)
 1009970:	dec00404 	addi	sp,sp,16
 1009974:	f800283a 	ret
 1009978:	8809883a 	mov	r4,r17
 100997c:	10064000 	call	1006400 <__sinit>
 1009980:	8080030f 	ldh	r2,12(r16)
 1009984:	103fd11e 	bne	r2,zero,10098cc <_fclose_r+0x38>
 1009988:	003ff206 	br	1009954 <_fclose_r+0xc0>
 100998c:	81400417 	ldw	r5,16(r16)
 1009990:	8809883a 	mov	r4,r17
 1009994:	10067b80 	call	10067b8 <_free_r>
 1009998:	003fd906 	br	1009900 <_fclose_r+0x6c>
 100999c:	04bfffc4 	movi	r18,-1
 10099a0:	003fd406 	br	10098f4 <_fclose_r+0x60>

010099a4 <fclose>:
 10099a4:	008040b4 	movhi	r2,258
 10099a8:	10ac8a04 	addi	r2,r2,-19928
 10099ac:	200b883a 	mov	r5,r4
 10099b0:	11000017 	ldw	r4,0(r2)
 10099b4:	10098941 	jmpi	1009894 <_fclose_r>

010099b8 <_fstat_r>:
 10099b8:	defffd04 	addi	sp,sp,-12
 10099bc:	dc000015 	stw	r16,0(sp)
 10099c0:	040040b4 	movhi	r16,258
 10099c4:	8433a504 	addi	r16,r16,-12652
 10099c8:	dc400115 	stw	r17,4(sp)
 10099cc:	80000015 	stw	zero,0(r16)
 10099d0:	2023883a 	mov	r17,r4
 10099d4:	2809883a 	mov	r4,r5
 10099d8:	300b883a 	mov	r5,r6
 10099dc:	dfc00215 	stw	ra,8(sp)
 10099e0:	100b5240 	call	100b524 <fstat>
 10099e4:	1007883a 	mov	r3,r2
 10099e8:	00bfffc4 	movi	r2,-1
 10099ec:	18800626 	beq	r3,r2,1009a08 <_fstat_r+0x50>
 10099f0:	1805883a 	mov	r2,r3
 10099f4:	dfc00217 	ldw	ra,8(sp)
 10099f8:	dc400117 	ldw	r17,4(sp)
 10099fc:	dc000017 	ldw	r16,0(sp)
 1009a00:	dec00304 	addi	sp,sp,12
 1009a04:	f800283a 	ret
 1009a08:	80800017 	ldw	r2,0(r16)
 1009a0c:	103ff826 	beq	r2,zero,10099f0 <_fstat_r+0x38>
 1009a10:	88800015 	stw	r2,0(r17)
 1009a14:	1805883a 	mov	r2,r3
 1009a18:	dfc00217 	ldw	ra,8(sp)
 1009a1c:	dc400117 	ldw	r17,4(sp)
 1009a20:	dc000017 	ldw	r16,0(sp)
 1009a24:	dec00304 	addi	sp,sp,12
 1009a28:	f800283a 	ret

01009a2c <_isatty_r>:
 1009a2c:	defffd04 	addi	sp,sp,-12
 1009a30:	dc000015 	stw	r16,0(sp)
 1009a34:	040040b4 	movhi	r16,258
 1009a38:	8433a504 	addi	r16,r16,-12652
 1009a3c:	dc400115 	stw	r17,4(sp)
 1009a40:	80000015 	stw	zero,0(r16)
 1009a44:	2023883a 	mov	r17,r4
 1009a48:	2809883a 	mov	r4,r5
 1009a4c:	dfc00215 	stw	ra,8(sp)
 1009a50:	100b65c0 	call	100b65c <isatty>
 1009a54:	1007883a 	mov	r3,r2
 1009a58:	00bfffc4 	movi	r2,-1
 1009a5c:	18800626 	beq	r3,r2,1009a78 <_isatty_r+0x4c>
 1009a60:	1805883a 	mov	r2,r3
 1009a64:	dfc00217 	ldw	ra,8(sp)
 1009a68:	dc400117 	ldw	r17,4(sp)
 1009a6c:	dc000017 	ldw	r16,0(sp)
 1009a70:	dec00304 	addi	sp,sp,12
 1009a74:	f800283a 	ret
 1009a78:	80800017 	ldw	r2,0(r16)
 1009a7c:	103ff826 	beq	r2,zero,1009a60 <_isatty_r+0x34>
 1009a80:	88800015 	stw	r2,0(r17)
 1009a84:	1805883a 	mov	r2,r3
 1009a88:	dfc00217 	ldw	ra,8(sp)
 1009a8c:	dc400117 	ldw	r17,4(sp)
 1009a90:	dc000017 	ldw	r16,0(sp)
 1009a94:	dec00304 	addi	sp,sp,12
 1009a98:	f800283a 	ret

01009a9c <_lseek_r>:
 1009a9c:	defffd04 	addi	sp,sp,-12
 1009aa0:	dc000015 	stw	r16,0(sp)
 1009aa4:	040040b4 	movhi	r16,258
 1009aa8:	8433a504 	addi	r16,r16,-12652
 1009aac:	dc400115 	stw	r17,4(sp)
 1009ab0:	80000015 	stw	zero,0(r16)
 1009ab4:	2023883a 	mov	r17,r4
 1009ab8:	2809883a 	mov	r4,r5
 1009abc:	300b883a 	mov	r5,r6
 1009ac0:	380d883a 	mov	r6,r7
 1009ac4:	dfc00215 	stw	ra,8(sp)
 1009ac8:	100b86c0 	call	100b86c <lseek>
 1009acc:	1007883a 	mov	r3,r2
 1009ad0:	00bfffc4 	movi	r2,-1
 1009ad4:	18800626 	beq	r3,r2,1009af0 <_lseek_r+0x54>
 1009ad8:	1805883a 	mov	r2,r3
 1009adc:	dfc00217 	ldw	ra,8(sp)
 1009ae0:	dc400117 	ldw	r17,4(sp)
 1009ae4:	dc000017 	ldw	r16,0(sp)
 1009ae8:	dec00304 	addi	sp,sp,12
 1009aec:	f800283a 	ret
 1009af0:	80800017 	ldw	r2,0(r16)
 1009af4:	103ff826 	beq	r2,zero,1009ad8 <_lseek_r+0x3c>
 1009af8:	88800015 	stw	r2,0(r17)
 1009afc:	1805883a 	mov	r2,r3
 1009b00:	dfc00217 	ldw	ra,8(sp)
 1009b04:	dc400117 	ldw	r17,4(sp)
 1009b08:	dc000017 	ldw	r16,0(sp)
 1009b0c:	dec00304 	addi	sp,sp,12
 1009b10:	f800283a 	ret

01009b14 <_read_r>:
 1009b14:	defffd04 	addi	sp,sp,-12
 1009b18:	dc000015 	stw	r16,0(sp)
 1009b1c:	040040b4 	movhi	r16,258
 1009b20:	8433a504 	addi	r16,r16,-12652
 1009b24:	dc400115 	stw	r17,4(sp)
 1009b28:	80000015 	stw	zero,0(r16)
 1009b2c:	2023883a 	mov	r17,r4
 1009b30:	2809883a 	mov	r4,r5
 1009b34:	300b883a 	mov	r5,r6
 1009b38:	380d883a 	mov	r6,r7
 1009b3c:	dfc00215 	stw	ra,8(sp)
 1009b40:	100ba880 	call	100ba88 <read>
 1009b44:	1007883a 	mov	r3,r2
 1009b48:	00bfffc4 	movi	r2,-1
 1009b4c:	18800626 	beq	r3,r2,1009b68 <_read_r+0x54>
 1009b50:	1805883a 	mov	r2,r3
 1009b54:	dfc00217 	ldw	ra,8(sp)
 1009b58:	dc400117 	ldw	r17,4(sp)
 1009b5c:	dc000017 	ldw	r16,0(sp)
 1009b60:	dec00304 	addi	sp,sp,12
 1009b64:	f800283a 	ret
 1009b68:	80800017 	ldw	r2,0(r16)
 1009b6c:	103ff826 	beq	r2,zero,1009b50 <_read_r+0x3c>
 1009b70:	88800015 	stw	r2,0(r17)
 1009b74:	1805883a 	mov	r2,r3
 1009b78:	dfc00217 	ldw	ra,8(sp)
 1009b7c:	dc400117 	ldw	r17,4(sp)
 1009b80:	dc000017 	ldw	r16,0(sp)
 1009b84:	dec00304 	addi	sp,sp,12
 1009b88:	f800283a 	ret

01009b8c <__udivdi3>:
 1009b8c:	defff104 	addi	sp,sp,-60
 1009b90:	0015883a 	mov	r10,zero
 1009b94:	2005883a 	mov	r2,r4
 1009b98:	3011883a 	mov	r8,r6
 1009b9c:	df000d15 	stw	fp,52(sp)
 1009ba0:	dd400a15 	stw	r21,40(sp)
 1009ba4:	dcc00815 	stw	r19,32(sp)
 1009ba8:	dfc00e15 	stw	ra,56(sp)
 1009bac:	ddc00c15 	stw	r23,48(sp)
 1009bb0:	dd800b15 	stw	r22,44(sp)
 1009bb4:	dd000915 	stw	r20,36(sp)
 1009bb8:	dc800715 	stw	r18,28(sp)
 1009bbc:	dc400615 	stw	r17,24(sp)
 1009bc0:	dc000515 	stw	r16,20(sp)
 1009bc4:	da800315 	stw	r10,12(sp)
 1009bc8:	4027883a 	mov	r19,r8
 1009bcc:	1039883a 	mov	fp,r2
 1009bd0:	282b883a 	mov	r21,r5
 1009bd4:	da800415 	stw	r10,16(sp)
 1009bd8:	3800401e 	bne	r7,zero,1009cdc <__udivdi3+0x150>
 1009bdc:	2a006536 	bltu	r5,r8,1009d74 <__udivdi3+0x1e8>
 1009be0:	4000b526 	beq	r8,zero,1009eb8 <__udivdi3+0x32c>
 1009be4:	00bfffd4 	movui	r2,65535
 1009be8:	14c0ad36 	bltu	r2,r19,1009ea0 <__udivdi3+0x314>
 1009bec:	00803fc4 	movi	r2,255
 1009bf0:	14c15e36 	bltu	r2,r19,100a16c <__udivdi3+0x5e0>
 1009bf4:	000b883a 	mov	r5,zero
 1009bf8:	0005883a 	mov	r2,zero
 1009bfc:	9884d83a 	srl	r2,r19,r2
 1009c00:	010040b4 	movhi	r4,258
 1009c04:	2124be04 	addi	r4,r4,-27912
 1009c08:	01800804 	movi	r6,32
 1009c0c:	1105883a 	add	r2,r2,r4
 1009c10:	10c00003 	ldbu	r3,0(r2)
 1009c14:	28c7883a 	add	r3,r5,r3
 1009c18:	30e9c83a 	sub	r20,r6,r3
 1009c1c:	a0010a1e 	bne	r20,zero,100a048 <__udivdi3+0x4bc>
 1009c20:	982ed43a 	srli	r23,r19,16
 1009c24:	acebc83a 	sub	r21,r21,r19
 1009c28:	9dbfffcc 	andi	r22,r19,65535
 1009c2c:	05000044 	movi	r20,1
 1009c30:	a809883a 	mov	r4,r21
 1009c34:	b80b883a 	mov	r5,r23
 1009c38:	10020180 	call	1002018 <__udivsi3>
 1009c3c:	100b883a 	mov	r5,r2
 1009c40:	b009883a 	mov	r4,r22
 1009c44:	1021883a 	mov	r16,r2
 1009c48:	10020280 	call	1002028 <__mulsi3>
 1009c4c:	a809883a 	mov	r4,r21
 1009c50:	b80b883a 	mov	r5,r23
 1009c54:	1023883a 	mov	r17,r2
 1009c58:	10020200 	call	1002020 <__umodsi3>
 1009c5c:	1004943a 	slli	r2,r2,16
 1009c60:	e006d43a 	srli	r3,fp,16
 1009c64:	10c4b03a 	or	r2,r2,r3
 1009c68:	1440042e 	bgeu	r2,r17,1009c7c <__udivdi3+0xf0>
 1009c6c:	14c5883a 	add	r2,r2,r19
 1009c70:	843fffc4 	addi	r16,r16,-1
 1009c74:	14c00136 	bltu	r2,r19,1009c7c <__udivdi3+0xf0>
 1009c78:	14415c36 	bltu	r2,r17,100a1ec <__udivdi3+0x660>
 1009c7c:	1463c83a 	sub	r17,r2,r17
 1009c80:	8809883a 	mov	r4,r17
 1009c84:	b80b883a 	mov	r5,r23
 1009c88:	10020180 	call	1002018 <__udivsi3>
 1009c8c:	100b883a 	mov	r5,r2
 1009c90:	b009883a 	mov	r4,r22
 1009c94:	102b883a 	mov	r21,r2
 1009c98:	10020280 	call	1002028 <__mulsi3>
 1009c9c:	8809883a 	mov	r4,r17
 1009ca0:	b80b883a 	mov	r5,r23
 1009ca4:	1025883a 	mov	r18,r2
 1009ca8:	10020200 	call	1002020 <__umodsi3>
 1009cac:	1004943a 	slli	r2,r2,16
 1009cb0:	e0ffffcc 	andi	r3,fp,65535
 1009cb4:	10c4b03a 	or	r2,r2,r3
 1009cb8:	1480042e 	bgeu	r2,r18,1009ccc <__udivdi3+0x140>
 1009cbc:	9885883a 	add	r2,r19,r2
 1009cc0:	ad7fffc4 	addi	r21,r21,-1
 1009cc4:	14c00136 	bltu	r2,r19,1009ccc <__udivdi3+0x140>
 1009cc8:	14813c36 	bltu	r2,r18,100a1bc <__udivdi3+0x630>
 1009ccc:	8004943a 	slli	r2,r16,16
 1009cd0:	a009883a 	mov	r4,r20
 1009cd4:	a884b03a 	or	r2,r21,r2
 1009cd8:	00001506 	br	1009d30 <__udivdi3+0x1a4>
 1009cdc:	380d883a 	mov	r6,r7
 1009ce0:	29c06c36 	bltu	r5,r7,1009e94 <__udivdi3+0x308>
 1009ce4:	00bfffd4 	movui	r2,65535
 1009ce8:	11c06436 	bltu	r2,r7,1009e7c <__udivdi3+0x2f0>
 1009cec:	00803fc4 	movi	r2,255
 1009cf0:	11c11836 	bltu	r2,r7,100a154 <__udivdi3+0x5c8>
 1009cf4:	000b883a 	mov	r5,zero
 1009cf8:	0005883a 	mov	r2,zero
 1009cfc:	3084d83a 	srl	r2,r6,r2
 1009d00:	010040b4 	movhi	r4,258
 1009d04:	2124be04 	addi	r4,r4,-27912
 1009d08:	01c00804 	movi	r7,32
 1009d0c:	1105883a 	add	r2,r2,r4
 1009d10:	10c00003 	ldbu	r3,0(r2)
 1009d14:	28c7883a 	add	r3,r5,r3
 1009d18:	38edc83a 	sub	r22,r7,r3
 1009d1c:	b000731e 	bne	r22,zero,1009eec <__udivdi3+0x360>
 1009d20:	35400136 	bltu	r6,r21,1009d28 <__udivdi3+0x19c>
 1009d24:	e4c05b36 	bltu	fp,r19,1009e94 <__udivdi3+0x308>
 1009d28:	00800044 	movi	r2,1
 1009d2c:	0009883a 	mov	r4,zero
 1009d30:	d8800315 	stw	r2,12(sp)
 1009d34:	d9400317 	ldw	r5,12(sp)
 1009d38:	2007883a 	mov	r3,r4
 1009d3c:	d9000415 	stw	r4,16(sp)
 1009d40:	2805883a 	mov	r2,r5
 1009d44:	dfc00e17 	ldw	ra,56(sp)
 1009d48:	df000d17 	ldw	fp,52(sp)
 1009d4c:	ddc00c17 	ldw	r23,48(sp)
 1009d50:	dd800b17 	ldw	r22,44(sp)
 1009d54:	dd400a17 	ldw	r21,40(sp)
 1009d58:	dd000917 	ldw	r20,36(sp)
 1009d5c:	dcc00817 	ldw	r19,32(sp)
 1009d60:	dc800717 	ldw	r18,28(sp)
 1009d64:	dc400617 	ldw	r17,24(sp)
 1009d68:	dc000517 	ldw	r16,20(sp)
 1009d6c:	dec00f04 	addi	sp,sp,60
 1009d70:	f800283a 	ret
 1009d74:	00bfffd4 	movui	r2,65535
 1009d78:	12005636 	bltu	r2,r8,1009ed4 <__udivdi3+0x348>
 1009d7c:	00803fc4 	movi	r2,255
 1009d80:	12010036 	bltu	r2,r8,100a184 <__udivdi3+0x5f8>
 1009d84:	000b883a 	mov	r5,zero
 1009d88:	0005883a 	mov	r2,zero
 1009d8c:	9884d83a 	srl	r2,r19,r2
 1009d90:	010040b4 	movhi	r4,258
 1009d94:	2124be04 	addi	r4,r4,-27912
 1009d98:	01800804 	movi	r6,32
 1009d9c:	1105883a 	add	r2,r2,r4
 1009da0:	10c00003 	ldbu	r3,0(r2)
 1009da4:	28c7883a 	add	r3,r5,r3
 1009da8:	30cbc83a 	sub	r5,r6,r3
 1009dac:	28000626 	beq	r5,zero,1009dc8 <__udivdi3+0x23c>
 1009db0:	3145c83a 	sub	r2,r6,r5
 1009db4:	e084d83a 	srl	r2,fp,r2
 1009db8:	a946983a 	sll	r3,r21,r5
 1009dbc:	e178983a 	sll	fp,fp,r5
 1009dc0:	9966983a 	sll	r19,r19,r5
 1009dc4:	18aab03a 	or	r21,r3,r2
 1009dc8:	982ed43a 	srli	r23,r19,16
 1009dcc:	a809883a 	mov	r4,r21
 1009dd0:	9cbfffcc 	andi	r18,r19,65535
 1009dd4:	b80b883a 	mov	r5,r23
 1009dd8:	10020180 	call	1002018 <__udivsi3>
 1009ddc:	100b883a 	mov	r5,r2
 1009de0:	9009883a 	mov	r4,r18
 1009de4:	1021883a 	mov	r16,r2
 1009de8:	10020280 	call	1002028 <__mulsi3>
 1009dec:	a809883a 	mov	r4,r21
 1009df0:	b80b883a 	mov	r5,r23
 1009df4:	1023883a 	mov	r17,r2
 1009df8:	10020200 	call	1002020 <__umodsi3>
 1009dfc:	1004943a 	slli	r2,r2,16
 1009e00:	e006d43a 	srli	r3,fp,16
 1009e04:	10c4b03a 	or	r2,r2,r3
 1009e08:	1440042e 	bgeu	r2,r17,1009e1c <__udivdi3+0x290>
 1009e0c:	14c5883a 	add	r2,r2,r19
 1009e10:	843fffc4 	addi	r16,r16,-1
 1009e14:	14c00136 	bltu	r2,r19,1009e1c <__udivdi3+0x290>
 1009e18:	1440ea36 	bltu	r2,r17,100a1c4 <__udivdi3+0x638>
 1009e1c:	1463c83a 	sub	r17,r2,r17
 1009e20:	8809883a 	mov	r4,r17
 1009e24:	b80b883a 	mov	r5,r23
 1009e28:	10020180 	call	1002018 <__udivsi3>
 1009e2c:	100b883a 	mov	r5,r2
 1009e30:	9009883a 	mov	r4,r18
 1009e34:	102b883a 	mov	r21,r2
 1009e38:	10020280 	call	1002028 <__mulsi3>
 1009e3c:	8809883a 	mov	r4,r17
 1009e40:	b80b883a 	mov	r5,r23
 1009e44:	1025883a 	mov	r18,r2
 1009e48:	10020200 	call	1002020 <__umodsi3>
 1009e4c:	1004943a 	slli	r2,r2,16
 1009e50:	e0ffffcc 	andi	r3,fp,65535
 1009e54:	10c4b03a 	or	r2,r2,r3
 1009e58:	1480042e 	bgeu	r2,r18,1009e6c <__udivdi3+0x2e0>
 1009e5c:	9885883a 	add	r2,r19,r2
 1009e60:	ad7fffc4 	addi	r21,r21,-1
 1009e64:	14c00136 	bltu	r2,r19,1009e6c <__udivdi3+0x2e0>
 1009e68:	1480d936 	bltu	r2,r18,100a1d0 <__udivdi3+0x644>
 1009e6c:	8004943a 	slli	r2,r16,16
 1009e70:	0009883a 	mov	r4,zero
 1009e74:	a884b03a 	or	r2,r21,r2
 1009e78:	003fad06 	br	1009d30 <__udivdi3+0x1a4>
 1009e7c:	00804034 	movhi	r2,256
 1009e80:	10bfffc4 	addi	r2,r2,-1
 1009e84:	11c0b636 	bltu	r2,r7,100a160 <__udivdi3+0x5d4>
 1009e88:	01400404 	movi	r5,16
 1009e8c:	2805883a 	mov	r2,r5
 1009e90:	003f9a06 	br	1009cfc <__udivdi3+0x170>
 1009e94:	0005883a 	mov	r2,zero
 1009e98:	0009883a 	mov	r4,zero
 1009e9c:	003fa406 	br	1009d30 <__udivdi3+0x1a4>
 1009ea0:	00804034 	movhi	r2,256
 1009ea4:	10bfffc4 	addi	r2,r2,-1
 1009ea8:	14c0b336 	bltu	r2,r19,100a178 <__udivdi3+0x5ec>
 1009eac:	01400404 	movi	r5,16
 1009eb0:	2805883a 	mov	r2,r5
 1009eb4:	003f5106 	br	1009bfc <__udivdi3+0x70>
 1009eb8:	01000044 	movi	r4,1
 1009ebc:	000b883a 	mov	r5,zero
 1009ec0:	10020180 	call	1002018 <__udivsi3>
 1009ec4:	1027883a 	mov	r19,r2
 1009ec8:	00bfffd4 	movui	r2,65535
 1009ecc:	14fff436 	bltu	r2,r19,1009ea0 <__udivdi3+0x314>
 1009ed0:	003f4606 	br	1009bec <__udivdi3+0x60>
 1009ed4:	00804034 	movhi	r2,256
 1009ed8:	10bfffc4 	addi	r2,r2,-1
 1009edc:	1200ac36 	bltu	r2,r8,100a190 <__udivdi3+0x604>
 1009ee0:	01400404 	movi	r5,16
 1009ee4:	2805883a 	mov	r2,r5
 1009ee8:	003fa806 	br	1009d8c <__udivdi3+0x200>
 1009eec:	3d85c83a 	sub	r2,r7,r22
 1009ef0:	3588983a 	sll	r4,r6,r22
 1009ef4:	9886d83a 	srl	r3,r19,r2
 1009ef8:	a8a2d83a 	srl	r17,r21,r2
 1009efc:	e084d83a 	srl	r2,fp,r2
 1009f00:	20eeb03a 	or	r23,r4,r3
 1009f04:	b824d43a 	srli	r18,r23,16
 1009f08:	ad86983a 	sll	r3,r21,r22
 1009f0c:	8809883a 	mov	r4,r17
 1009f10:	900b883a 	mov	r5,r18
 1009f14:	1886b03a 	or	r3,r3,r2
 1009f18:	d8c00115 	stw	r3,4(sp)
 1009f1c:	bc3fffcc 	andi	r16,r23,65535
 1009f20:	10020180 	call	1002018 <__udivsi3>
 1009f24:	100b883a 	mov	r5,r2
 1009f28:	8009883a 	mov	r4,r16
 1009f2c:	1029883a 	mov	r20,r2
 1009f30:	10020280 	call	1002028 <__mulsi3>
 1009f34:	900b883a 	mov	r5,r18
 1009f38:	8809883a 	mov	r4,r17
 1009f3c:	102b883a 	mov	r21,r2
 1009f40:	10020200 	call	1002020 <__umodsi3>
 1009f44:	d9400117 	ldw	r5,4(sp)
 1009f48:	1004943a 	slli	r2,r2,16
 1009f4c:	9da6983a 	sll	r19,r19,r22
 1009f50:	2806d43a 	srli	r3,r5,16
 1009f54:	10c4b03a 	or	r2,r2,r3
 1009f58:	1540032e 	bgeu	r2,r21,1009f68 <__udivdi3+0x3dc>
 1009f5c:	15c5883a 	add	r2,r2,r23
 1009f60:	a53fffc4 	addi	r20,r20,-1
 1009f64:	15c0912e 	bgeu	r2,r23,100a1ac <__udivdi3+0x620>
 1009f68:	1563c83a 	sub	r17,r2,r21
 1009f6c:	8809883a 	mov	r4,r17
 1009f70:	900b883a 	mov	r5,r18
 1009f74:	10020180 	call	1002018 <__udivsi3>
 1009f78:	100b883a 	mov	r5,r2
 1009f7c:	8009883a 	mov	r4,r16
 1009f80:	102b883a 	mov	r21,r2
 1009f84:	10020280 	call	1002028 <__mulsi3>
 1009f88:	8809883a 	mov	r4,r17
 1009f8c:	900b883a 	mov	r5,r18
 1009f90:	1021883a 	mov	r16,r2
 1009f94:	10020200 	call	1002020 <__umodsi3>
 1009f98:	da800117 	ldw	r10,4(sp)
 1009f9c:	1004943a 	slli	r2,r2,16
 1009fa0:	50ffffcc 	andi	r3,r10,65535
 1009fa4:	10c6b03a 	or	r3,r2,r3
 1009fa8:	1c00032e 	bgeu	r3,r16,1009fb8 <__udivdi3+0x42c>
 1009fac:	1dc7883a 	add	r3,r3,r23
 1009fb0:	ad7fffc4 	addi	r21,r21,-1
 1009fb4:	1dc0792e 	bgeu	r3,r23,100a19c <__udivdi3+0x610>
 1009fb8:	a004943a 	slli	r2,r20,16
 1009fbc:	982ed43a 	srli	r23,r19,16
 1009fc0:	9cffffcc 	andi	r19,r19,65535
 1009fc4:	a8a4b03a 	or	r18,r21,r2
 1009fc8:	947fffcc 	andi	r17,r18,65535
 1009fcc:	902ad43a 	srli	r21,r18,16
 1009fd0:	8809883a 	mov	r4,r17
 1009fd4:	980b883a 	mov	r5,r19
 1009fd8:	1c21c83a 	sub	r16,r3,r16
 1009fdc:	10020280 	call	1002028 <__mulsi3>
 1009fe0:	8809883a 	mov	r4,r17
 1009fe4:	b80b883a 	mov	r5,r23
 1009fe8:	1029883a 	mov	r20,r2
 1009fec:	10020280 	call	1002028 <__mulsi3>
 1009ff0:	980b883a 	mov	r5,r19
 1009ff4:	a809883a 	mov	r4,r21
 1009ff8:	1023883a 	mov	r17,r2
 1009ffc:	10020280 	call	1002028 <__mulsi3>
 100a000:	a809883a 	mov	r4,r21
 100a004:	b80b883a 	mov	r5,r23
 100a008:	1027883a 	mov	r19,r2
 100a00c:	10020280 	call	1002028 <__mulsi3>
 100a010:	1009883a 	mov	r4,r2
 100a014:	a004d43a 	srli	r2,r20,16
 100a018:	8ce3883a 	add	r17,r17,r19
 100a01c:	1447883a 	add	r3,r2,r17
 100a020:	1cc0022e 	bgeu	r3,r19,100a02c <__udivdi3+0x4a0>
 100a024:	00800074 	movhi	r2,1
 100a028:	2089883a 	add	r4,r4,r2
 100a02c:	1804d43a 	srli	r2,r3,16
 100a030:	2085883a 	add	r2,r4,r2
 100a034:	80804436 	bltu	r16,r2,100a148 <__udivdi3+0x5bc>
 100a038:	80803e26 	beq	r16,r2,100a134 <__udivdi3+0x5a8>
 100a03c:	9005883a 	mov	r2,r18
 100a040:	0009883a 	mov	r4,zero
 100a044:	003f3a06 	br	1009d30 <__udivdi3+0x1a4>
 100a048:	9d26983a 	sll	r19,r19,r20
 100a04c:	3505c83a 	sub	r2,r6,r20
 100a050:	a8a2d83a 	srl	r17,r21,r2
 100a054:	982ed43a 	srli	r23,r19,16
 100a058:	e084d83a 	srl	r2,fp,r2
 100a05c:	ad06983a 	sll	r3,r21,r20
 100a060:	8809883a 	mov	r4,r17
 100a064:	b80b883a 	mov	r5,r23
 100a068:	1886b03a 	or	r3,r3,r2
 100a06c:	d8c00015 	stw	r3,0(sp)
 100a070:	9dbfffcc 	andi	r22,r19,65535
 100a074:	10020180 	call	1002018 <__udivsi3>
 100a078:	100b883a 	mov	r5,r2
 100a07c:	b009883a 	mov	r4,r22
 100a080:	d8800215 	stw	r2,8(sp)
 100a084:	10020280 	call	1002028 <__mulsi3>
 100a088:	8809883a 	mov	r4,r17
 100a08c:	b80b883a 	mov	r5,r23
 100a090:	102b883a 	mov	r21,r2
 100a094:	10020200 	call	1002020 <__umodsi3>
 100a098:	d9000017 	ldw	r4,0(sp)
 100a09c:	1004943a 	slli	r2,r2,16
 100a0a0:	2006d43a 	srli	r3,r4,16
 100a0a4:	10c4b03a 	or	r2,r2,r3
 100a0a8:	1540052e 	bgeu	r2,r21,100a0c0 <__udivdi3+0x534>
 100a0ac:	d9400217 	ldw	r5,8(sp)
 100a0b0:	14c5883a 	add	r2,r2,r19
 100a0b4:	297fffc4 	addi	r5,r5,-1
 100a0b8:	d9400215 	stw	r5,8(sp)
 100a0bc:	14c0462e 	bgeu	r2,r19,100a1d8 <__udivdi3+0x64c>
 100a0c0:	1563c83a 	sub	r17,r2,r21
 100a0c4:	8809883a 	mov	r4,r17
 100a0c8:	b80b883a 	mov	r5,r23
 100a0cc:	10020180 	call	1002018 <__udivsi3>
 100a0d0:	100b883a 	mov	r5,r2
 100a0d4:	b009883a 	mov	r4,r22
 100a0d8:	1025883a 	mov	r18,r2
 100a0dc:	10020280 	call	1002028 <__mulsi3>
 100a0e0:	8809883a 	mov	r4,r17
 100a0e4:	b80b883a 	mov	r5,r23
 100a0e8:	1021883a 	mov	r16,r2
 100a0ec:	10020200 	call	1002020 <__umodsi3>
 100a0f0:	da800017 	ldw	r10,0(sp)
 100a0f4:	1004943a 	slli	r2,r2,16
 100a0f8:	50ffffcc 	andi	r3,r10,65535
 100a0fc:	10c6b03a 	or	r3,r2,r3
 100a100:	1c00062e 	bgeu	r3,r16,100a11c <__udivdi3+0x590>
 100a104:	1cc7883a 	add	r3,r3,r19
 100a108:	94bfffc4 	addi	r18,r18,-1
 100a10c:	1cc00336 	bltu	r3,r19,100a11c <__udivdi3+0x590>
 100a110:	1c00022e 	bgeu	r3,r16,100a11c <__udivdi3+0x590>
 100a114:	94bfffc4 	addi	r18,r18,-1
 100a118:	1cc7883a 	add	r3,r3,r19
 100a11c:	d9000217 	ldw	r4,8(sp)
 100a120:	e538983a 	sll	fp,fp,r20
 100a124:	1c2bc83a 	sub	r21,r3,r16
 100a128:	2004943a 	slli	r2,r4,16
 100a12c:	90a8b03a 	or	r20,r18,r2
 100a130:	003ebf06 	br	1009c30 <__udivdi3+0xa4>
 100a134:	1804943a 	slli	r2,r3,16
 100a138:	e588983a 	sll	r4,fp,r22
 100a13c:	a0ffffcc 	andi	r3,r20,65535
 100a140:	10c5883a 	add	r2,r2,r3
 100a144:	20bfbd2e 	bgeu	r4,r2,100a03c <__udivdi3+0x4b0>
 100a148:	90bfffc4 	addi	r2,r18,-1
 100a14c:	0009883a 	mov	r4,zero
 100a150:	003ef706 	br	1009d30 <__udivdi3+0x1a4>
 100a154:	01400204 	movi	r5,8
 100a158:	2805883a 	mov	r2,r5
 100a15c:	003ee706 	br	1009cfc <__udivdi3+0x170>
 100a160:	01400604 	movi	r5,24
 100a164:	2805883a 	mov	r2,r5
 100a168:	003ee406 	br	1009cfc <__udivdi3+0x170>
 100a16c:	01400204 	movi	r5,8
 100a170:	2805883a 	mov	r2,r5
 100a174:	003ea106 	br	1009bfc <__udivdi3+0x70>
 100a178:	01400604 	movi	r5,24
 100a17c:	2805883a 	mov	r2,r5
 100a180:	003e9e06 	br	1009bfc <__udivdi3+0x70>
 100a184:	01400204 	movi	r5,8
 100a188:	2805883a 	mov	r2,r5
 100a18c:	003eff06 	br	1009d8c <__udivdi3+0x200>
 100a190:	01400604 	movi	r5,24
 100a194:	2805883a 	mov	r2,r5
 100a198:	003efc06 	br	1009d8c <__udivdi3+0x200>
 100a19c:	1c3f862e 	bgeu	r3,r16,1009fb8 <__udivdi3+0x42c>
 100a1a0:	1dc7883a 	add	r3,r3,r23
 100a1a4:	ad7fffc4 	addi	r21,r21,-1
 100a1a8:	003f8306 	br	1009fb8 <__udivdi3+0x42c>
 100a1ac:	157f6e2e 	bgeu	r2,r21,1009f68 <__udivdi3+0x3dc>
 100a1b0:	a53fffc4 	addi	r20,r20,-1
 100a1b4:	15c5883a 	add	r2,r2,r23
 100a1b8:	003f6b06 	br	1009f68 <__udivdi3+0x3dc>
 100a1bc:	ad7fffc4 	addi	r21,r21,-1
 100a1c0:	003ec206 	br	1009ccc <__udivdi3+0x140>
 100a1c4:	843fffc4 	addi	r16,r16,-1
 100a1c8:	14c5883a 	add	r2,r2,r19
 100a1cc:	003f1306 	br	1009e1c <__udivdi3+0x290>
 100a1d0:	ad7fffc4 	addi	r21,r21,-1
 100a1d4:	003f2506 	br	1009e6c <__udivdi3+0x2e0>
 100a1d8:	157fb92e 	bgeu	r2,r21,100a0c0 <__udivdi3+0x534>
 100a1dc:	297fffc4 	addi	r5,r5,-1
 100a1e0:	14c5883a 	add	r2,r2,r19
 100a1e4:	d9400215 	stw	r5,8(sp)
 100a1e8:	003fb506 	br	100a0c0 <__udivdi3+0x534>
 100a1ec:	843fffc4 	addi	r16,r16,-1
 100a1f0:	14c5883a 	add	r2,r2,r19
 100a1f4:	003ea106 	br	1009c7c <__udivdi3+0xf0>

0100a1f8 <__umoddi3>:
 100a1f8:	defff004 	addi	sp,sp,-64
 100a1fc:	3011883a 	mov	r8,r6
 100a200:	000d883a 	mov	r6,zero
 100a204:	dd400b15 	stw	r21,44(sp)
 100a208:	dcc00915 	stw	r19,36(sp)
 100a20c:	dc000615 	stw	r16,24(sp)
 100a210:	dfc00f15 	stw	ra,60(sp)
 100a214:	df000e15 	stw	fp,56(sp)
 100a218:	ddc00d15 	stw	r23,52(sp)
 100a21c:	dd800c15 	stw	r22,48(sp)
 100a220:	dd000a15 	stw	r20,40(sp)
 100a224:	dc800815 	stw	r18,32(sp)
 100a228:	dc400715 	stw	r17,28(sp)
 100a22c:	2817883a 	mov	r11,r5
 100a230:	d9800415 	stw	r6,16(sp)
 100a234:	4027883a 	mov	r19,r8
 100a238:	d9800515 	stw	r6,20(sp)
 100a23c:	2021883a 	mov	r16,r4
 100a240:	282b883a 	mov	r21,r5
 100a244:	38002c1e 	bne	r7,zero,100a2f8 <__umoddi3+0x100>
 100a248:	2a005636 	bltu	r5,r8,100a3a4 <__umoddi3+0x1ac>
 100a24c:	40009a26 	beq	r8,zero,100a4b8 <__umoddi3+0x2c0>
 100a250:	00bfffd4 	movui	r2,65535
 100a254:	14c09236 	bltu	r2,r19,100a4a0 <__umoddi3+0x2a8>
 100a258:	00803fc4 	movi	r2,255
 100a25c:	14c15c36 	bltu	r2,r19,100a7d0 <__umoddi3+0x5d8>
 100a260:	000b883a 	mov	r5,zero
 100a264:	0005883a 	mov	r2,zero
 100a268:	9884d83a 	srl	r2,r19,r2
 100a26c:	010040b4 	movhi	r4,258
 100a270:	2124be04 	addi	r4,r4,-27912
 100a274:	01800804 	movi	r6,32
 100a278:	1105883a 	add	r2,r2,r4
 100a27c:	10c00003 	ldbu	r3,0(r2)
 100a280:	28c7883a 	add	r3,r5,r3
 100a284:	30e5c83a 	sub	r18,r6,r3
 100a288:	9000a41e 	bne	r18,zero,100a51c <__umoddi3+0x324>
 100a28c:	982ed43a 	srli	r23,r19,16
 100a290:	acebc83a 	sub	r21,r21,r19
 100a294:	9d3fffcc 	andi	r20,r19,65535
 100a298:	002d883a 	mov	r22,zero
 100a29c:	a809883a 	mov	r4,r21
 100a2a0:	b80b883a 	mov	r5,r23
 100a2a4:	10020180 	call	1002018 <__udivsi3>
 100a2a8:	100b883a 	mov	r5,r2
 100a2ac:	a009883a 	mov	r4,r20
 100a2b0:	10020280 	call	1002028 <__mulsi3>
 100a2b4:	a809883a 	mov	r4,r21
 100a2b8:	b80b883a 	mov	r5,r23
 100a2bc:	1023883a 	mov	r17,r2
 100a2c0:	10020200 	call	1002020 <__umodsi3>
 100a2c4:	1004943a 	slli	r2,r2,16
 100a2c8:	8006d43a 	srli	r3,r16,16
 100a2cc:	10c4b03a 	or	r2,r2,r3
 100a2d0:	1440032e 	bgeu	r2,r17,100a2e0 <__umoddi3+0xe8>
 100a2d4:	14c5883a 	add	r2,r2,r19
 100a2d8:	14c00136 	bltu	r2,r19,100a2e0 <__umoddi3+0xe8>
 100a2dc:	14415836 	bltu	r2,r17,100a840 <__umoddi3+0x648>
 100a2e0:	1463c83a 	sub	r17,r2,r17
 100a2e4:	8809883a 	mov	r4,r17
 100a2e8:	b80b883a 	mov	r5,r23
 100a2ec:	10020180 	call	1002018 <__udivsi3>
 100a2f0:	a009883a 	mov	r4,r20
 100a2f4:	00005306 	br	100a444 <__umoddi3+0x24c>
 100a2f8:	380d883a 	mov	r6,r7
 100a2fc:	29c0132e 	bgeu	r5,r7,100a34c <__umoddi3+0x154>
 100a300:	d9000415 	stw	r4,16(sp)
 100a304:	d9400515 	stw	r5,20(sp)
 100a308:	d9400417 	ldw	r5,16(sp)
 100a30c:	5813883a 	mov	r9,r11
 100a310:	2811883a 	mov	r8,r5
 100a314:	4005883a 	mov	r2,r8
 100a318:	4807883a 	mov	r3,r9
 100a31c:	dfc00f17 	ldw	ra,60(sp)
 100a320:	df000e17 	ldw	fp,56(sp)
 100a324:	ddc00d17 	ldw	r23,52(sp)
 100a328:	dd800c17 	ldw	r22,48(sp)
 100a32c:	dd400b17 	ldw	r21,44(sp)
 100a330:	dd000a17 	ldw	r20,40(sp)
 100a334:	dcc00917 	ldw	r19,36(sp)
 100a338:	dc800817 	ldw	r18,32(sp)
 100a33c:	dc400717 	ldw	r17,28(sp)
 100a340:	dc000617 	ldw	r16,24(sp)
 100a344:	dec01004 	addi	sp,sp,64
 100a348:	f800283a 	ret
 100a34c:	00bfffd4 	movui	r2,65535
 100a350:	11c06636 	bltu	r2,r7,100a4ec <__umoddi3+0x2f4>
 100a354:	00803fc4 	movi	r2,255
 100a358:	11c12036 	bltu	r2,r7,100a7dc <__umoddi3+0x5e4>
 100a35c:	000b883a 	mov	r5,zero
 100a360:	0005883a 	mov	r2,zero
 100a364:	3084d83a 	srl	r2,r6,r2
 100a368:	010040b4 	movhi	r4,258
 100a36c:	2124be04 	addi	r4,r4,-27912
 100a370:	01c00804 	movi	r7,32
 100a374:	1105883a 	add	r2,r2,r4
 100a378:	10c00003 	ldbu	r3,0(r2)
 100a37c:	28c7883a 	add	r3,r5,r3
 100a380:	38e5c83a 	sub	r18,r7,r3
 100a384:	9000941e 	bne	r18,zero,100a5d8 <__umoddi3+0x3e0>
 100a388:	35405e36 	bltu	r6,r21,100a504 <__umoddi3+0x30c>
 100a38c:	84c05d2e 	bgeu	r16,r19,100a504 <__umoddi3+0x30c>
 100a390:	8011883a 	mov	r8,r16
 100a394:	a813883a 	mov	r9,r21
 100a398:	dc000415 	stw	r16,16(sp)
 100a39c:	dd400515 	stw	r21,20(sp)
 100a3a0:	003fdc06 	br	100a314 <__umoddi3+0x11c>
 100a3a4:	00bfffd4 	movui	r2,65535
 100a3a8:	12004a36 	bltu	r2,r8,100a4d4 <__umoddi3+0x2dc>
 100a3ac:	00803fc4 	movi	r2,255
 100a3b0:	12010d36 	bltu	r2,r8,100a7e8 <__umoddi3+0x5f0>
 100a3b4:	000b883a 	mov	r5,zero
 100a3b8:	0005883a 	mov	r2,zero
 100a3bc:	9884d83a 	srl	r2,r19,r2
 100a3c0:	010040b4 	movhi	r4,258
 100a3c4:	2124be04 	addi	r4,r4,-27912
 100a3c8:	01800804 	movi	r6,32
 100a3cc:	1105883a 	add	r2,r2,r4
 100a3d0:	10c00003 	ldbu	r3,0(r2)
 100a3d4:	28c7883a 	add	r3,r5,r3
 100a3d8:	30c7c83a 	sub	r3,r6,r3
 100a3dc:	1800dc1e 	bne	r3,zero,100a750 <__umoddi3+0x558>
 100a3e0:	002d883a 	mov	r22,zero
 100a3e4:	982ed43a 	srli	r23,r19,16
 100a3e8:	a809883a 	mov	r4,r21
 100a3ec:	9cbfffcc 	andi	r18,r19,65535
 100a3f0:	b80b883a 	mov	r5,r23
 100a3f4:	10020180 	call	1002018 <__udivsi3>
 100a3f8:	100b883a 	mov	r5,r2
 100a3fc:	9009883a 	mov	r4,r18
 100a400:	10020280 	call	1002028 <__mulsi3>
 100a404:	a809883a 	mov	r4,r21
 100a408:	b80b883a 	mov	r5,r23
 100a40c:	1023883a 	mov	r17,r2
 100a410:	10020200 	call	1002020 <__umodsi3>
 100a414:	1004943a 	slli	r2,r2,16
 100a418:	8006d43a 	srli	r3,r16,16
 100a41c:	10c4b03a 	or	r2,r2,r3
 100a420:	1440032e 	bgeu	r2,r17,100a430 <__umoddi3+0x238>
 100a424:	14c5883a 	add	r2,r2,r19
 100a428:	14c00136 	bltu	r2,r19,100a430 <__umoddi3+0x238>
 100a42c:	14410236 	bltu	r2,r17,100a838 <__umoddi3+0x640>
 100a430:	1463c83a 	sub	r17,r2,r17
 100a434:	8809883a 	mov	r4,r17
 100a438:	b80b883a 	mov	r5,r23
 100a43c:	10020180 	call	1002018 <__udivsi3>
 100a440:	9009883a 	mov	r4,r18
 100a444:	100b883a 	mov	r5,r2
 100a448:	10020280 	call	1002028 <__mulsi3>
 100a44c:	8809883a 	mov	r4,r17
 100a450:	b80b883a 	mov	r5,r23
 100a454:	102b883a 	mov	r21,r2
 100a458:	10020200 	call	1002020 <__umodsi3>
 100a45c:	1004943a 	slli	r2,r2,16
 100a460:	80ffffcc 	andi	r3,r16,65535
 100a464:	10c4b03a 	or	r2,r2,r3
 100a468:	1540042e 	bgeu	r2,r21,100a47c <__umoddi3+0x284>
 100a46c:	14c5883a 	add	r2,r2,r19
 100a470:	14c00236 	bltu	r2,r19,100a47c <__umoddi3+0x284>
 100a474:	1540012e 	bgeu	r2,r21,100a47c <__umoddi3+0x284>
 100a478:	14c5883a 	add	r2,r2,r19
 100a47c:	1545c83a 	sub	r2,r2,r21
 100a480:	1584d83a 	srl	r2,r2,r22
 100a484:	0013883a 	mov	r9,zero
 100a488:	d8800415 	stw	r2,16(sp)
 100a48c:	d8c00417 	ldw	r3,16(sp)
 100a490:	0005883a 	mov	r2,zero
 100a494:	d8800515 	stw	r2,20(sp)
 100a498:	1811883a 	mov	r8,r3
 100a49c:	003f9d06 	br	100a314 <__umoddi3+0x11c>
 100a4a0:	00804034 	movhi	r2,256
 100a4a4:	10bfffc4 	addi	r2,r2,-1
 100a4a8:	14c0c636 	bltu	r2,r19,100a7c4 <__umoddi3+0x5cc>
 100a4ac:	01400404 	movi	r5,16
 100a4b0:	2805883a 	mov	r2,r5
 100a4b4:	003f6c06 	br	100a268 <__umoddi3+0x70>
 100a4b8:	01000044 	movi	r4,1
 100a4bc:	000b883a 	mov	r5,zero
 100a4c0:	10020180 	call	1002018 <__udivsi3>
 100a4c4:	1027883a 	mov	r19,r2
 100a4c8:	00bfffd4 	movui	r2,65535
 100a4cc:	14fff436 	bltu	r2,r19,100a4a0 <__umoddi3+0x2a8>
 100a4d0:	003f6106 	br	100a258 <__umoddi3+0x60>
 100a4d4:	00804034 	movhi	r2,256
 100a4d8:	10bfffc4 	addi	r2,r2,-1
 100a4dc:	1200c536 	bltu	r2,r8,100a7f4 <__umoddi3+0x5fc>
 100a4e0:	01400404 	movi	r5,16
 100a4e4:	2805883a 	mov	r2,r5
 100a4e8:	003fb406 	br	100a3bc <__umoddi3+0x1c4>
 100a4ec:	00804034 	movhi	r2,256
 100a4f0:	10bfffc4 	addi	r2,r2,-1
 100a4f4:	11c0c236 	bltu	r2,r7,100a800 <__umoddi3+0x608>
 100a4f8:	01400404 	movi	r5,16
 100a4fc:	2805883a 	mov	r2,r5
 100a500:	003f9806 	br	100a364 <__umoddi3+0x16c>
 100a504:	84c9c83a 	sub	r4,r16,r19
 100a508:	8105803a 	cmpltu	r2,r16,r4
 100a50c:	a987c83a 	sub	r3,r21,r6
 100a510:	18abc83a 	sub	r21,r3,r2
 100a514:	2021883a 	mov	r16,r4
 100a518:	003f9d06 	br	100a390 <__umoddi3+0x198>
 100a51c:	9ca6983a 	sll	r19,r19,r18
 100a520:	3485c83a 	sub	r2,r6,r18
 100a524:	a8a2d83a 	srl	r17,r21,r2
 100a528:	982ed43a 	srli	r23,r19,16
 100a52c:	ac86983a 	sll	r3,r21,r18
 100a530:	8084d83a 	srl	r2,r16,r2
 100a534:	8809883a 	mov	r4,r17
 100a538:	b80b883a 	mov	r5,r23
 100a53c:	18b8b03a 	or	fp,r3,r2
 100a540:	9d3fffcc 	andi	r20,r19,65535
 100a544:	10020180 	call	1002018 <__udivsi3>
 100a548:	100b883a 	mov	r5,r2
 100a54c:	a009883a 	mov	r4,r20
 100a550:	10020280 	call	1002028 <__mulsi3>
 100a554:	8809883a 	mov	r4,r17
 100a558:	b80b883a 	mov	r5,r23
 100a55c:	102b883a 	mov	r21,r2
 100a560:	10020200 	call	1002020 <__umodsi3>
 100a564:	1004943a 	slli	r2,r2,16
 100a568:	e006d43a 	srli	r3,fp,16
 100a56c:	902d883a 	mov	r22,r18
 100a570:	10c4b03a 	or	r2,r2,r3
 100a574:	1540022e 	bgeu	r2,r21,100a580 <__umoddi3+0x388>
 100a578:	14c5883a 	add	r2,r2,r19
 100a57c:	14c0ab2e 	bgeu	r2,r19,100a82c <__umoddi3+0x634>
 100a580:	1563c83a 	sub	r17,r2,r21
 100a584:	8809883a 	mov	r4,r17
 100a588:	b80b883a 	mov	r5,r23
 100a58c:	10020180 	call	1002018 <__udivsi3>
 100a590:	100b883a 	mov	r5,r2
 100a594:	a009883a 	mov	r4,r20
 100a598:	10020280 	call	1002028 <__mulsi3>
 100a59c:	8809883a 	mov	r4,r17
 100a5a0:	b80b883a 	mov	r5,r23
 100a5a4:	102b883a 	mov	r21,r2
 100a5a8:	10020200 	call	1002020 <__umodsi3>
 100a5ac:	1004943a 	slli	r2,r2,16
 100a5b0:	e0ffffcc 	andi	r3,fp,65535
 100a5b4:	10c4b03a 	or	r2,r2,r3
 100a5b8:	1540042e 	bgeu	r2,r21,100a5cc <__umoddi3+0x3d4>
 100a5bc:	14c5883a 	add	r2,r2,r19
 100a5c0:	14c00236 	bltu	r2,r19,100a5cc <__umoddi3+0x3d4>
 100a5c4:	1540012e 	bgeu	r2,r21,100a5cc <__umoddi3+0x3d4>
 100a5c8:	14c5883a 	add	r2,r2,r19
 100a5cc:	84a0983a 	sll	r16,r16,r18
 100a5d0:	156bc83a 	sub	r21,r2,r21
 100a5d4:	003f3106 	br	100a29c <__umoddi3+0xa4>
 100a5d8:	3c8fc83a 	sub	r7,r7,r18
 100a5dc:	3486983a 	sll	r3,r6,r18
 100a5e0:	99c4d83a 	srl	r2,r19,r7
 100a5e4:	a9e2d83a 	srl	r17,r21,r7
 100a5e8:	ac8c983a 	sll	r6,r21,r18
 100a5ec:	18acb03a 	or	r22,r3,r2
 100a5f0:	b02ed43a 	srli	r23,r22,16
 100a5f4:	81c4d83a 	srl	r2,r16,r7
 100a5f8:	8809883a 	mov	r4,r17
 100a5fc:	b80b883a 	mov	r5,r23
 100a600:	308cb03a 	or	r6,r6,r2
 100a604:	d9c00315 	stw	r7,12(sp)
 100a608:	d9800215 	stw	r6,8(sp)
 100a60c:	b53fffcc 	andi	r20,r22,65535
 100a610:	10020180 	call	1002018 <__udivsi3>
 100a614:	100b883a 	mov	r5,r2
 100a618:	a009883a 	mov	r4,r20
 100a61c:	1039883a 	mov	fp,r2
 100a620:	10020280 	call	1002028 <__mulsi3>
 100a624:	8809883a 	mov	r4,r17
 100a628:	b80b883a 	mov	r5,r23
 100a62c:	102b883a 	mov	r21,r2
 100a630:	10020200 	call	1002020 <__umodsi3>
 100a634:	d9000217 	ldw	r4,8(sp)
 100a638:	1004943a 	slli	r2,r2,16
 100a63c:	9ca6983a 	sll	r19,r19,r18
 100a640:	2006d43a 	srli	r3,r4,16
 100a644:	84a0983a 	sll	r16,r16,r18
 100a648:	dcc00015 	stw	r19,0(sp)
 100a64c:	10c4b03a 	or	r2,r2,r3
 100a650:	dc000115 	stw	r16,4(sp)
 100a654:	1540032e 	bgeu	r2,r21,100a664 <__umoddi3+0x46c>
 100a658:	1585883a 	add	r2,r2,r22
 100a65c:	e73fffc4 	addi	fp,fp,-1
 100a660:	15806e2e 	bgeu	r2,r22,100a81c <__umoddi3+0x624>
 100a664:	1563c83a 	sub	r17,r2,r21
 100a668:	8809883a 	mov	r4,r17
 100a66c:	b80b883a 	mov	r5,r23
 100a670:	10020180 	call	1002018 <__udivsi3>
 100a674:	100b883a 	mov	r5,r2
 100a678:	a009883a 	mov	r4,r20
 100a67c:	1021883a 	mov	r16,r2
 100a680:	10020280 	call	1002028 <__mulsi3>
 100a684:	b80b883a 	mov	r5,r23
 100a688:	8809883a 	mov	r4,r17
 100a68c:	1029883a 	mov	r20,r2
 100a690:	10020200 	call	1002020 <__umodsi3>
 100a694:	d9400217 	ldw	r5,8(sp)
 100a698:	1004943a 	slli	r2,r2,16
 100a69c:	28ffffcc 	andi	r3,r5,65535
 100a6a0:	10c4b03a 	or	r2,r2,r3
 100a6a4:	1500032e 	bgeu	r2,r20,100a6b4 <__umoddi3+0x4bc>
 100a6a8:	1585883a 	add	r2,r2,r22
 100a6ac:	843fffc4 	addi	r16,r16,-1
 100a6b0:	1580562e 	bgeu	r2,r22,100a80c <__umoddi3+0x614>
 100a6b4:	d9800017 	ldw	r6,0(sp)
 100a6b8:	e022943a 	slli	r17,fp,16
 100a6bc:	302ed43a 	srli	r23,r6,16
 100a6c0:	8462b03a 	or	r17,r16,r17
 100a6c4:	34ffffcc 	andi	r19,r6,65535
 100a6c8:	882ad43a 	srli	r21,r17,16
 100a6cc:	8c7fffcc 	andi	r17,r17,65535
 100a6d0:	8809883a 	mov	r4,r17
 100a6d4:	980b883a 	mov	r5,r19
 100a6d8:	1521c83a 	sub	r16,r2,r20
 100a6dc:	10020280 	call	1002028 <__mulsi3>
 100a6e0:	8809883a 	mov	r4,r17
 100a6e4:	b80b883a 	mov	r5,r23
 100a6e8:	1029883a 	mov	r20,r2
 100a6ec:	10020280 	call	1002028 <__mulsi3>
 100a6f0:	980b883a 	mov	r5,r19
 100a6f4:	a809883a 	mov	r4,r21
 100a6f8:	1023883a 	mov	r17,r2
 100a6fc:	10020280 	call	1002028 <__mulsi3>
 100a700:	a809883a 	mov	r4,r21
 100a704:	b80b883a 	mov	r5,r23
 100a708:	1027883a 	mov	r19,r2
 100a70c:	10020280 	call	1002028 <__mulsi3>
 100a710:	100b883a 	mov	r5,r2
 100a714:	a004d43a 	srli	r2,r20,16
 100a718:	8ce3883a 	add	r17,r17,r19
 100a71c:	1449883a 	add	r4,r2,r17
 100a720:	24c0022e 	bgeu	r4,r19,100a72c <__umoddi3+0x534>
 100a724:	00800074 	movhi	r2,1
 100a728:	288b883a 	add	r5,r5,r2
 100a72c:	2004d43a 	srli	r2,r4,16
 100a730:	2008943a 	slli	r4,r4,16
 100a734:	a0ffffcc 	andi	r3,r20,65535
 100a738:	288d883a 	add	r6,r5,r2
 100a73c:	20c9883a 	add	r4,r4,r3
 100a740:	81800b36 	bltu	r16,r6,100a770 <__umoddi3+0x578>
 100a744:	81804026 	beq	r16,r6,100a848 <__umoddi3+0x650>
 100a748:	818dc83a 	sub	r6,r16,r6
 100a74c:	00000f06 	br	100a78c <__umoddi3+0x594>
 100a750:	30c5c83a 	sub	r2,r6,r3
 100a754:	182d883a 	mov	r22,r3
 100a758:	8084d83a 	srl	r2,r16,r2
 100a75c:	a8c6983a 	sll	r3,r21,r3
 100a760:	9da6983a 	sll	r19,r19,r22
 100a764:	85a0983a 	sll	r16,r16,r22
 100a768:	18aab03a 	or	r21,r3,r2
 100a76c:	003f1d06 	br	100a3e4 <__umoddi3+0x1ec>
 100a770:	d8c00017 	ldw	r3,0(sp)
 100a774:	20c5c83a 	sub	r2,r4,r3
 100a778:	2089803a 	cmpltu	r4,r4,r2
 100a77c:	3587c83a 	sub	r3,r6,r22
 100a780:	1907c83a 	sub	r3,r3,r4
 100a784:	80cdc83a 	sub	r6,r16,r3
 100a788:	1009883a 	mov	r4,r2
 100a78c:	d9400117 	ldw	r5,4(sp)
 100a790:	2905c83a 	sub	r2,r5,r4
 100a794:	2887803a 	cmpltu	r3,r5,r2
 100a798:	30c7c83a 	sub	r3,r6,r3
 100a79c:	d9800317 	ldw	r6,12(sp)
 100a7a0:	1484d83a 	srl	r2,r2,r18
 100a7a4:	1988983a 	sll	r4,r3,r6
 100a7a8:	1c86d83a 	srl	r3,r3,r18
 100a7ac:	2088b03a 	or	r4,r4,r2
 100a7b0:	2011883a 	mov	r8,r4
 100a7b4:	1813883a 	mov	r9,r3
 100a7b8:	d9000415 	stw	r4,16(sp)
 100a7bc:	d8c00515 	stw	r3,20(sp)
 100a7c0:	003ed406 	br	100a314 <__umoddi3+0x11c>
 100a7c4:	01400604 	movi	r5,24
 100a7c8:	2805883a 	mov	r2,r5
 100a7cc:	003ea606 	br	100a268 <__umoddi3+0x70>
 100a7d0:	01400204 	movi	r5,8
 100a7d4:	2805883a 	mov	r2,r5
 100a7d8:	003ea306 	br	100a268 <__umoddi3+0x70>
 100a7dc:	01400204 	movi	r5,8
 100a7e0:	2805883a 	mov	r2,r5
 100a7e4:	003edf06 	br	100a364 <__umoddi3+0x16c>
 100a7e8:	01400204 	movi	r5,8
 100a7ec:	2805883a 	mov	r2,r5
 100a7f0:	003ef206 	br	100a3bc <__umoddi3+0x1c4>
 100a7f4:	01400604 	movi	r5,24
 100a7f8:	2805883a 	mov	r2,r5
 100a7fc:	003eef06 	br	100a3bc <__umoddi3+0x1c4>
 100a800:	01400604 	movi	r5,24
 100a804:	2805883a 	mov	r2,r5
 100a808:	003ed606 	br	100a364 <__umoddi3+0x16c>
 100a80c:	153fa92e 	bgeu	r2,r20,100a6b4 <__umoddi3+0x4bc>
 100a810:	843fffc4 	addi	r16,r16,-1
 100a814:	1585883a 	add	r2,r2,r22
 100a818:	003fa606 	br	100a6b4 <__umoddi3+0x4bc>
 100a81c:	157f912e 	bgeu	r2,r21,100a664 <__umoddi3+0x46c>
 100a820:	e73fffc4 	addi	fp,fp,-1
 100a824:	1585883a 	add	r2,r2,r22
 100a828:	003f8e06 	br	100a664 <__umoddi3+0x46c>
 100a82c:	157f542e 	bgeu	r2,r21,100a580 <__umoddi3+0x388>
 100a830:	14c5883a 	add	r2,r2,r19
 100a834:	003f5206 	br	100a580 <__umoddi3+0x388>
 100a838:	14c5883a 	add	r2,r2,r19
 100a83c:	003efc06 	br	100a430 <__umoddi3+0x238>
 100a840:	14c5883a 	add	r2,r2,r19
 100a844:	003ea606 	br	100a2e0 <__umoddi3+0xe8>
 100a848:	d8800117 	ldw	r2,4(sp)
 100a84c:	113fc836 	bltu	r2,r4,100a770 <__umoddi3+0x578>
 100a850:	000d883a 	mov	r6,zero
 100a854:	003fcd06 	br	100a78c <__umoddi3+0x594>

0100a858 <__muldf3>:
 100a858:	deffe004 	addi	sp,sp,-128
 100a85c:	dc401815 	stw	r17,96(sp)
 100a860:	dc400404 	addi	r17,sp,16
 100a864:	2011883a 	mov	r8,r4
 100a868:	2813883a 	mov	r9,r5
 100a86c:	dc001715 	stw	r16,92(sp)
 100a870:	d809883a 	mov	r4,sp
 100a874:	880b883a 	mov	r5,r17
 100a878:	dc000904 	addi	r16,sp,36
 100a87c:	dfc01f15 	stw	ra,124(sp)
 100a880:	da400115 	stw	r9,4(sp)
 100a884:	d9c00315 	stw	r7,12(sp)
 100a888:	da000015 	stw	r8,0(sp)
 100a88c:	d9800215 	stw	r6,8(sp)
 100a890:	ddc01e15 	stw	r23,120(sp)
 100a894:	dd801d15 	stw	r22,116(sp)
 100a898:	dd401c15 	stw	r21,112(sp)
 100a89c:	dd001b15 	stw	r20,108(sp)
 100a8a0:	dcc01a15 	stw	r19,104(sp)
 100a8a4:	dc801915 	stw	r18,100(sp)
 100a8a8:	100261c0 	call	100261c <__unpack_d>
 100a8ac:	d9000204 	addi	r4,sp,8
 100a8b0:	800b883a 	mov	r5,r16
 100a8b4:	100261c0 	call	100261c <__unpack_d>
 100a8b8:	d9000417 	ldw	r4,16(sp)
 100a8bc:	00800044 	movi	r2,1
 100a8c0:	1100102e 	bgeu	r2,r4,100a904 <__muldf3+0xac>
 100a8c4:	d8c00917 	ldw	r3,36(sp)
 100a8c8:	10c0062e 	bgeu	r2,r3,100a8e4 <__muldf3+0x8c>
 100a8cc:	00800104 	movi	r2,4
 100a8d0:	20800a26 	beq	r4,r2,100a8fc <__muldf3+0xa4>
 100a8d4:	1880cc26 	beq	r3,r2,100ac08 <__muldf3+0x3b0>
 100a8d8:	00800084 	movi	r2,2
 100a8dc:	20800926 	beq	r4,r2,100a904 <__muldf3+0xac>
 100a8e0:	1880191e 	bne	r3,r2,100a948 <__muldf3+0xf0>
 100a8e4:	d8c00a17 	ldw	r3,40(sp)
 100a8e8:	d8800517 	ldw	r2,20(sp)
 100a8ec:	8009883a 	mov	r4,r16
 100a8f0:	10c4c03a 	cmpne	r2,r2,r3
 100a8f4:	d8800a15 	stw	r2,40(sp)
 100a8f8:	00000706 	br	100a918 <__muldf3+0xc0>
 100a8fc:	00800084 	movi	r2,2
 100a900:	1880c326 	beq	r3,r2,100ac10 <__muldf3+0x3b8>
 100a904:	d8800517 	ldw	r2,20(sp)
 100a908:	d8c00a17 	ldw	r3,40(sp)
 100a90c:	8809883a 	mov	r4,r17
 100a910:	10c4c03a 	cmpne	r2,r2,r3
 100a914:	d8800515 	stw	r2,20(sp)
 100a918:	10023080 	call	1002308 <__pack_d>
 100a91c:	dfc01f17 	ldw	ra,124(sp)
 100a920:	ddc01e17 	ldw	r23,120(sp)
 100a924:	dd801d17 	ldw	r22,116(sp)
 100a928:	dd401c17 	ldw	r21,112(sp)
 100a92c:	dd001b17 	ldw	r20,108(sp)
 100a930:	dcc01a17 	ldw	r19,104(sp)
 100a934:	dc801917 	ldw	r18,100(sp)
 100a938:	dc401817 	ldw	r17,96(sp)
 100a93c:	dc001717 	ldw	r16,92(sp)
 100a940:	dec02004 	addi	sp,sp,128
 100a944:	f800283a 	ret
 100a948:	dd800717 	ldw	r22,28(sp)
 100a94c:	dc800c17 	ldw	r18,48(sp)
 100a950:	002b883a 	mov	r21,zero
 100a954:	0023883a 	mov	r17,zero
 100a958:	a80b883a 	mov	r5,r21
 100a95c:	b00d883a 	mov	r6,r22
 100a960:	880f883a 	mov	r7,r17
 100a964:	ddc00817 	ldw	r23,32(sp)
 100a968:	dcc00d17 	ldw	r19,52(sp)
 100a96c:	9009883a 	mov	r4,r18
 100a970:	100b0580 	call	100b058 <__muldi3>
 100a974:	001b883a 	mov	r13,zero
 100a978:	680f883a 	mov	r7,r13
 100a97c:	b009883a 	mov	r4,r22
 100a980:	000b883a 	mov	r5,zero
 100a984:	980d883a 	mov	r6,r19
 100a988:	b82d883a 	mov	r22,r23
 100a98c:	002f883a 	mov	r23,zero
 100a990:	db401615 	stw	r13,88(sp)
 100a994:	d8801315 	stw	r2,76(sp)
 100a998:	d8c01415 	stw	r3,80(sp)
 100a99c:	dcc01515 	stw	r19,84(sp)
 100a9a0:	100b0580 	call	100b058 <__muldi3>
 100a9a4:	b00d883a 	mov	r6,r22
 100a9a8:	000b883a 	mov	r5,zero
 100a9ac:	9009883a 	mov	r4,r18
 100a9b0:	b80f883a 	mov	r7,r23
 100a9b4:	1021883a 	mov	r16,r2
 100a9b8:	1823883a 	mov	r17,r3
 100a9bc:	100b0580 	call	100b058 <__muldi3>
 100a9c0:	8085883a 	add	r2,r16,r2
 100a9c4:	140d803a 	cmpltu	r6,r2,r16
 100a9c8:	88c7883a 	add	r3,r17,r3
 100a9cc:	30cd883a 	add	r6,r6,r3
 100a9d0:	1029883a 	mov	r20,r2
 100a9d4:	302b883a 	mov	r21,r6
 100a9d8:	da801317 	ldw	r10,76(sp)
 100a9dc:	dac01417 	ldw	r11,80(sp)
 100a9e0:	db001517 	ldw	r12,84(sp)
 100a9e4:	db401617 	ldw	r13,88(sp)
 100a9e8:	3440612e 	bgeu	r6,r17,100ab70 <__muldf3+0x318>
 100a9ec:	0009883a 	mov	r4,zero
 100a9f0:	5105883a 	add	r2,r10,r4
 100a9f4:	128d803a 	cmpltu	r6,r2,r10
 100a9f8:	5d07883a 	add	r3,r11,r20
 100a9fc:	30cd883a 	add	r6,r6,r3
 100aa00:	0021883a 	mov	r16,zero
 100aa04:	04400044 	movi	r17,1
 100aa08:	1025883a 	mov	r18,r2
 100aa0c:	3027883a 	mov	r19,r6
 100aa10:	32c06236 	bltu	r6,r11,100ab9c <__muldf3+0x344>
 100aa14:	59807a26 	beq	r11,r6,100ac00 <__muldf3+0x3a8>
 100aa18:	680b883a 	mov	r5,r13
 100aa1c:	b80f883a 	mov	r7,r23
 100aa20:	6009883a 	mov	r4,r12
 100aa24:	b00d883a 	mov	r6,r22
 100aa28:	100b0580 	call	100b058 <__muldi3>
 100aa2c:	1009883a 	mov	r4,r2
 100aa30:	000f883a 	mov	r7,zero
 100aa34:	1545883a 	add	r2,r2,r21
 100aa38:	1111803a 	cmpltu	r8,r2,r4
 100aa3c:	19c7883a 	add	r3,r3,r7
 100aa40:	40c7883a 	add	r3,r8,r3
 100aa44:	88cb883a 	add	r5,r17,r3
 100aa48:	d8c00617 	ldw	r3,24(sp)
 100aa4c:	8089883a 	add	r4,r16,r2
 100aa50:	d8800b17 	ldw	r2,44(sp)
 100aa54:	18c00104 	addi	r3,r3,4
 100aa58:	240d803a 	cmpltu	r6,r4,r16
 100aa5c:	10c7883a 	add	r3,r2,r3
 100aa60:	2013883a 	mov	r9,r4
 100aa64:	d8800a17 	ldw	r2,40(sp)
 100aa68:	d9000517 	ldw	r4,20(sp)
 100aa6c:	314d883a 	add	r6,r6,r5
 100aa70:	3015883a 	mov	r10,r6
 100aa74:	2088c03a 	cmpne	r4,r4,r2
 100aa78:	00880034 	movhi	r2,8192
 100aa7c:	10bfffc4 	addi	r2,r2,-1
 100aa80:	d9000f15 	stw	r4,60(sp)
 100aa84:	d8c01015 	stw	r3,64(sp)
 100aa88:	1180162e 	bgeu	r2,r6,100aae4 <__muldf3+0x28c>
 100aa8c:	1811883a 	mov	r8,r3
 100aa90:	101f883a 	mov	r15,r2
 100aa94:	980497fa 	slli	r2,r19,31
 100aa98:	9016d07a 	srli	r11,r18,1
 100aa9c:	500697fa 	slli	r3,r10,31
 100aaa0:	480cd07a 	srli	r6,r9,1
 100aaa4:	500ed07a 	srli	r7,r10,1
 100aaa8:	12d6b03a 	or	r11,r2,r11
 100aaac:	00800044 	movi	r2,1
 100aab0:	198cb03a 	or	r6,r3,r6
 100aab4:	4888703a 	and	r4,r9,r2
 100aab8:	9818d07a 	srli	r12,r19,1
 100aabc:	001b883a 	mov	r13,zero
 100aac0:	03a00034 	movhi	r14,32768
 100aac4:	3013883a 	mov	r9,r6
 100aac8:	3815883a 	mov	r10,r7
 100aacc:	4091883a 	add	r8,r8,r2
 100aad0:	20000226 	beq	r4,zero,100aadc <__muldf3+0x284>
 100aad4:	5b64b03a 	or	r18,r11,r13
 100aad8:	63a6b03a 	or	r19,r12,r14
 100aadc:	7abfed36 	bltu	r15,r10,100aa94 <__muldf3+0x23c>
 100aae0:	da001015 	stw	r8,64(sp)
 100aae4:	00840034 	movhi	r2,4096
 100aae8:	10bfffc4 	addi	r2,r2,-1
 100aaec:	12801436 	bltu	r2,r10,100ab40 <__muldf3+0x2e8>
 100aaf0:	da001017 	ldw	r8,64(sp)
 100aaf4:	101f883a 	mov	r15,r2
 100aaf8:	4a45883a 	add	r2,r9,r9
 100aafc:	124d803a 	cmpltu	r6,r2,r9
 100ab00:	5287883a 	add	r3,r10,r10
 100ab04:	9497883a 	add	r11,r18,r18
 100ab08:	5c8f803a 	cmpltu	r7,r11,r18
 100ab0c:	9cd9883a 	add	r12,r19,r19
 100ab10:	01000044 	movi	r4,1
 100ab14:	30cd883a 	add	r6,r6,r3
 100ab18:	3b0f883a 	add	r7,r7,r12
 100ab1c:	423fffc4 	addi	r8,r8,-1
 100ab20:	1013883a 	mov	r9,r2
 100ab24:	3015883a 	mov	r10,r6
 100ab28:	111ab03a 	or	r13,r2,r4
 100ab2c:	98003016 	blt	r19,zero,100abf0 <__muldf3+0x398>
 100ab30:	5825883a 	mov	r18,r11
 100ab34:	3827883a 	mov	r19,r7
 100ab38:	7abfef2e 	bgeu	r15,r10,100aaf8 <__muldf3+0x2a0>
 100ab3c:	da001015 	stw	r8,64(sp)
 100ab40:	00803fc4 	movi	r2,255
 100ab44:	488e703a 	and	r7,r9,r2
 100ab48:	00802004 	movi	r2,128
 100ab4c:	0007883a 	mov	r3,zero
 100ab50:	0011883a 	mov	r8,zero
 100ab54:	38801826 	beq	r7,r2,100abb8 <__muldf3+0x360>
 100ab58:	008000c4 	movi	r2,3
 100ab5c:	d9000e04 	addi	r4,sp,56
 100ab60:	da801215 	stw	r10,72(sp)
 100ab64:	d8800e15 	stw	r2,56(sp)
 100ab68:	da401115 	stw	r9,68(sp)
 100ab6c:	003f6a06 	br	100a918 <__muldf3+0xc0>
 100ab70:	89802126 	beq	r17,r6,100abf8 <__muldf3+0x3a0>
 100ab74:	0009883a 	mov	r4,zero
 100ab78:	5105883a 	add	r2,r10,r4
 100ab7c:	128d803a 	cmpltu	r6,r2,r10
 100ab80:	5d07883a 	add	r3,r11,r20
 100ab84:	30cd883a 	add	r6,r6,r3
 100ab88:	0021883a 	mov	r16,zero
 100ab8c:	0023883a 	mov	r17,zero
 100ab90:	1025883a 	mov	r18,r2
 100ab94:	3027883a 	mov	r19,r6
 100ab98:	32ff9e2e 	bgeu	r6,r11,100aa14 <__muldf3+0x1bc>
 100ab9c:	00800044 	movi	r2,1
 100aba0:	8089883a 	add	r4,r16,r2
 100aba4:	240d803a 	cmpltu	r6,r4,r16
 100aba8:	344d883a 	add	r6,r6,r17
 100abac:	2021883a 	mov	r16,r4
 100abb0:	3023883a 	mov	r17,r6
 100abb4:	003f9806 	br	100aa18 <__muldf3+0x1c0>
 100abb8:	403fe71e 	bne	r8,zero,100ab58 <__muldf3+0x300>
 100abbc:	01004004 	movi	r4,256
 100abc0:	4904703a 	and	r2,r9,r4
 100abc4:	10c4b03a 	or	r2,r2,r3
 100abc8:	103fe31e 	bne	r2,zero,100ab58 <__muldf3+0x300>
 100abcc:	94c4b03a 	or	r2,r18,r19
 100abd0:	103fe126 	beq	r2,zero,100ab58 <__muldf3+0x300>
 100abd4:	49c5883a 	add	r2,r9,r7
 100abd8:	1251803a 	cmpltu	r8,r2,r9
 100abdc:	4291883a 	add	r8,r8,r10
 100abe0:	013fc004 	movi	r4,-256
 100abe4:	1112703a 	and	r9,r2,r4
 100abe8:	4015883a 	mov	r10,r8
 100abec:	003fda06 	br	100ab58 <__muldf3+0x300>
 100abf0:	6813883a 	mov	r9,r13
 100abf4:	003fce06 	br	100ab30 <__muldf3+0x2d8>
 100abf8:	143f7c36 	bltu	r2,r16,100a9ec <__muldf3+0x194>
 100abfc:	003fdd06 	br	100ab74 <__muldf3+0x31c>
 100ac00:	12bf852e 	bgeu	r2,r10,100aa18 <__muldf3+0x1c0>
 100ac04:	003fe506 	br	100ab9c <__muldf3+0x344>
 100ac08:	00800084 	movi	r2,2
 100ac0c:	20bf351e 	bne	r4,r2,100a8e4 <__muldf3+0x8c>
 100ac10:	010040b4 	movhi	r4,258
 100ac14:	2124b904 	addi	r4,r4,-27932
 100ac18:	003f3f06 	br	100a918 <__muldf3+0xc0>

0100ac1c <__eqdf2>:
 100ac1c:	deffef04 	addi	sp,sp,-68
 100ac20:	dc400f15 	stw	r17,60(sp)
 100ac24:	dc400404 	addi	r17,sp,16
 100ac28:	2005883a 	mov	r2,r4
 100ac2c:	2807883a 	mov	r3,r5
 100ac30:	dc000e15 	stw	r16,56(sp)
 100ac34:	d809883a 	mov	r4,sp
 100ac38:	880b883a 	mov	r5,r17
 100ac3c:	dc000904 	addi	r16,sp,36
 100ac40:	d8c00115 	stw	r3,4(sp)
 100ac44:	d8800015 	stw	r2,0(sp)
 100ac48:	d9800215 	stw	r6,8(sp)
 100ac4c:	dfc01015 	stw	ra,64(sp)
 100ac50:	d9c00315 	stw	r7,12(sp)
 100ac54:	100261c0 	call	100261c <__unpack_d>
 100ac58:	d9000204 	addi	r4,sp,8
 100ac5c:	800b883a 	mov	r5,r16
 100ac60:	100261c0 	call	100261c <__unpack_d>
 100ac64:	d8800417 	ldw	r2,16(sp)
 100ac68:	00c00044 	movi	r3,1
 100ac6c:	180d883a 	mov	r6,r3
 100ac70:	1880062e 	bgeu	r3,r2,100ac8c <__eqdf2+0x70>
 100ac74:	d8800917 	ldw	r2,36(sp)
 100ac78:	8809883a 	mov	r4,r17
 100ac7c:	800b883a 	mov	r5,r16
 100ac80:	1880022e 	bgeu	r3,r2,100ac8c <__eqdf2+0x70>
 100ac84:	100b17c0 	call	100b17c <__fpcmp_parts_d>
 100ac88:	100d883a 	mov	r6,r2
 100ac8c:	3005883a 	mov	r2,r6
 100ac90:	dfc01017 	ldw	ra,64(sp)
 100ac94:	dc400f17 	ldw	r17,60(sp)
 100ac98:	dc000e17 	ldw	r16,56(sp)
 100ac9c:	dec01104 	addi	sp,sp,68
 100aca0:	f800283a 	ret

0100aca4 <__nedf2>:
 100aca4:	deffef04 	addi	sp,sp,-68
 100aca8:	dc400f15 	stw	r17,60(sp)
 100acac:	dc400404 	addi	r17,sp,16
 100acb0:	2005883a 	mov	r2,r4
 100acb4:	2807883a 	mov	r3,r5
 100acb8:	dc000e15 	stw	r16,56(sp)
 100acbc:	d809883a 	mov	r4,sp
 100acc0:	880b883a 	mov	r5,r17
 100acc4:	dc000904 	addi	r16,sp,36
 100acc8:	d8c00115 	stw	r3,4(sp)
 100accc:	d8800015 	stw	r2,0(sp)
 100acd0:	d9800215 	stw	r6,8(sp)
 100acd4:	dfc01015 	stw	ra,64(sp)
 100acd8:	d9c00315 	stw	r7,12(sp)
 100acdc:	100261c0 	call	100261c <__unpack_d>
 100ace0:	d9000204 	addi	r4,sp,8
 100ace4:	800b883a 	mov	r5,r16
 100ace8:	100261c0 	call	100261c <__unpack_d>
 100acec:	d8800417 	ldw	r2,16(sp)
 100acf0:	00c00044 	movi	r3,1
 100acf4:	180d883a 	mov	r6,r3
 100acf8:	1880062e 	bgeu	r3,r2,100ad14 <__nedf2+0x70>
 100acfc:	d8800917 	ldw	r2,36(sp)
 100ad00:	8809883a 	mov	r4,r17
 100ad04:	800b883a 	mov	r5,r16
 100ad08:	1880022e 	bgeu	r3,r2,100ad14 <__nedf2+0x70>
 100ad0c:	100b17c0 	call	100b17c <__fpcmp_parts_d>
 100ad10:	100d883a 	mov	r6,r2
 100ad14:	3005883a 	mov	r2,r6
 100ad18:	dfc01017 	ldw	ra,64(sp)
 100ad1c:	dc400f17 	ldw	r17,60(sp)
 100ad20:	dc000e17 	ldw	r16,56(sp)
 100ad24:	dec01104 	addi	sp,sp,68
 100ad28:	f800283a 	ret

0100ad2c <__gtdf2>:
 100ad2c:	deffef04 	addi	sp,sp,-68
 100ad30:	dc400f15 	stw	r17,60(sp)
 100ad34:	dc400404 	addi	r17,sp,16
 100ad38:	2005883a 	mov	r2,r4
 100ad3c:	2807883a 	mov	r3,r5
 100ad40:	dc000e15 	stw	r16,56(sp)
 100ad44:	d809883a 	mov	r4,sp
 100ad48:	880b883a 	mov	r5,r17
 100ad4c:	dc000904 	addi	r16,sp,36
 100ad50:	d8c00115 	stw	r3,4(sp)
 100ad54:	d8800015 	stw	r2,0(sp)
 100ad58:	d9800215 	stw	r6,8(sp)
 100ad5c:	dfc01015 	stw	ra,64(sp)
 100ad60:	d9c00315 	stw	r7,12(sp)
 100ad64:	100261c0 	call	100261c <__unpack_d>
 100ad68:	d9000204 	addi	r4,sp,8
 100ad6c:	800b883a 	mov	r5,r16
 100ad70:	100261c0 	call	100261c <__unpack_d>
 100ad74:	d8800417 	ldw	r2,16(sp)
 100ad78:	00c00044 	movi	r3,1
 100ad7c:	01bfffc4 	movi	r6,-1
 100ad80:	1880062e 	bgeu	r3,r2,100ad9c <__gtdf2+0x70>
 100ad84:	d8800917 	ldw	r2,36(sp)
 100ad88:	8809883a 	mov	r4,r17
 100ad8c:	800b883a 	mov	r5,r16
 100ad90:	1880022e 	bgeu	r3,r2,100ad9c <__gtdf2+0x70>
 100ad94:	100b17c0 	call	100b17c <__fpcmp_parts_d>
 100ad98:	100d883a 	mov	r6,r2
 100ad9c:	3005883a 	mov	r2,r6
 100ada0:	dfc01017 	ldw	ra,64(sp)
 100ada4:	dc400f17 	ldw	r17,60(sp)
 100ada8:	dc000e17 	ldw	r16,56(sp)
 100adac:	dec01104 	addi	sp,sp,68
 100adb0:	f800283a 	ret

0100adb4 <__gedf2>:
 100adb4:	deffef04 	addi	sp,sp,-68
 100adb8:	dc400f15 	stw	r17,60(sp)
 100adbc:	dc400404 	addi	r17,sp,16
 100adc0:	2005883a 	mov	r2,r4
 100adc4:	2807883a 	mov	r3,r5
 100adc8:	dc000e15 	stw	r16,56(sp)
 100adcc:	d809883a 	mov	r4,sp
 100add0:	880b883a 	mov	r5,r17
 100add4:	dc000904 	addi	r16,sp,36
 100add8:	d8c00115 	stw	r3,4(sp)
 100addc:	d8800015 	stw	r2,0(sp)
 100ade0:	d9800215 	stw	r6,8(sp)
 100ade4:	dfc01015 	stw	ra,64(sp)
 100ade8:	d9c00315 	stw	r7,12(sp)
 100adec:	100261c0 	call	100261c <__unpack_d>
 100adf0:	d9000204 	addi	r4,sp,8
 100adf4:	800b883a 	mov	r5,r16
 100adf8:	100261c0 	call	100261c <__unpack_d>
 100adfc:	d8800417 	ldw	r2,16(sp)
 100ae00:	00c00044 	movi	r3,1
 100ae04:	01bfffc4 	movi	r6,-1
 100ae08:	1880062e 	bgeu	r3,r2,100ae24 <__gedf2+0x70>
 100ae0c:	d8800917 	ldw	r2,36(sp)
 100ae10:	8809883a 	mov	r4,r17
 100ae14:	800b883a 	mov	r5,r16
 100ae18:	1880022e 	bgeu	r3,r2,100ae24 <__gedf2+0x70>
 100ae1c:	100b17c0 	call	100b17c <__fpcmp_parts_d>
 100ae20:	100d883a 	mov	r6,r2
 100ae24:	3005883a 	mov	r2,r6
 100ae28:	dfc01017 	ldw	ra,64(sp)
 100ae2c:	dc400f17 	ldw	r17,60(sp)
 100ae30:	dc000e17 	ldw	r16,56(sp)
 100ae34:	dec01104 	addi	sp,sp,68
 100ae38:	f800283a 	ret

0100ae3c <__ltdf2>:
 100ae3c:	deffef04 	addi	sp,sp,-68
 100ae40:	dc400f15 	stw	r17,60(sp)
 100ae44:	dc400404 	addi	r17,sp,16
 100ae48:	2005883a 	mov	r2,r4
 100ae4c:	2807883a 	mov	r3,r5
 100ae50:	dc000e15 	stw	r16,56(sp)
 100ae54:	d809883a 	mov	r4,sp
 100ae58:	880b883a 	mov	r5,r17
 100ae5c:	dc000904 	addi	r16,sp,36
 100ae60:	d8c00115 	stw	r3,4(sp)
 100ae64:	d8800015 	stw	r2,0(sp)
 100ae68:	d9800215 	stw	r6,8(sp)
 100ae6c:	dfc01015 	stw	ra,64(sp)
 100ae70:	d9c00315 	stw	r7,12(sp)
 100ae74:	100261c0 	call	100261c <__unpack_d>
 100ae78:	d9000204 	addi	r4,sp,8
 100ae7c:	800b883a 	mov	r5,r16
 100ae80:	100261c0 	call	100261c <__unpack_d>
 100ae84:	d8800417 	ldw	r2,16(sp)
 100ae88:	00c00044 	movi	r3,1
 100ae8c:	180d883a 	mov	r6,r3
 100ae90:	1880062e 	bgeu	r3,r2,100aeac <__ltdf2+0x70>
 100ae94:	d8800917 	ldw	r2,36(sp)
 100ae98:	8809883a 	mov	r4,r17
 100ae9c:	800b883a 	mov	r5,r16
 100aea0:	1880022e 	bgeu	r3,r2,100aeac <__ltdf2+0x70>
 100aea4:	100b17c0 	call	100b17c <__fpcmp_parts_d>
 100aea8:	100d883a 	mov	r6,r2
 100aeac:	3005883a 	mov	r2,r6
 100aeb0:	dfc01017 	ldw	ra,64(sp)
 100aeb4:	dc400f17 	ldw	r17,60(sp)
 100aeb8:	dc000e17 	ldw	r16,56(sp)
 100aebc:	dec01104 	addi	sp,sp,68
 100aec0:	f800283a 	ret

0100aec4 <__floatunsidf>:
 100aec4:	defff204 	addi	sp,sp,-56
 100aec8:	dfc00d15 	stw	ra,52(sp)
 100aecc:	ddc00c15 	stw	r23,48(sp)
 100aed0:	dd800b15 	stw	r22,44(sp)
 100aed4:	dd400a15 	stw	r21,40(sp)
 100aed8:	dd000915 	stw	r20,36(sp)
 100aedc:	dcc00815 	stw	r19,32(sp)
 100aee0:	dc800715 	stw	r18,28(sp)
 100aee4:	dc400615 	stw	r17,24(sp)
 100aee8:	dc000515 	stw	r16,20(sp)
 100aeec:	d8000115 	stw	zero,4(sp)
 100aef0:	20000f1e 	bne	r4,zero,100af30 <__floatunsidf+0x6c>
 100aef4:	00800084 	movi	r2,2
 100aef8:	d8800015 	stw	r2,0(sp)
 100aefc:	d809883a 	mov	r4,sp
 100af00:	10023080 	call	1002308 <__pack_d>
 100af04:	dfc00d17 	ldw	ra,52(sp)
 100af08:	ddc00c17 	ldw	r23,48(sp)
 100af0c:	dd800b17 	ldw	r22,44(sp)
 100af10:	dd400a17 	ldw	r21,40(sp)
 100af14:	dd000917 	ldw	r20,36(sp)
 100af18:	dcc00817 	ldw	r19,32(sp)
 100af1c:	dc800717 	ldw	r18,28(sp)
 100af20:	dc400617 	ldw	r17,24(sp)
 100af24:	dc000517 	ldw	r16,20(sp)
 100af28:	dec00e04 	addi	sp,sp,56
 100af2c:	f800283a 	ret
 100af30:	008000c4 	movi	r2,3
 100af34:	00c00f04 	movi	r3,60
 100af38:	002f883a 	mov	r23,zero
 100af3c:	202d883a 	mov	r22,r4
 100af40:	d8800015 	stw	r2,0(sp)
 100af44:	d8c00215 	stw	r3,8(sp)
 100af48:	d9000315 	stw	r4,12(sp)
 100af4c:	ddc00415 	stw	r23,16(sp)
 100af50:	10020600 	call	1002060 <__clzsi2>
 100af54:	12400744 	addi	r9,r2,29
 100af58:	48000b16 	blt	r9,zero,100af88 <__floatunsidf+0xc4>
 100af5c:	483fe726 	beq	r9,zero,100aefc <__floatunsidf+0x38>
 100af60:	10bfff44 	addi	r2,r2,-3
 100af64:	10002e16 	blt	r2,zero,100b020 <__floatunsidf+0x15c>
 100af68:	b0a2983a 	sll	r17,r22,r2
 100af6c:	0021883a 	mov	r16,zero
 100af70:	d8800217 	ldw	r2,8(sp)
 100af74:	dc400415 	stw	r17,16(sp)
 100af78:	dc000315 	stw	r16,12(sp)
 100af7c:	1245c83a 	sub	r2,r2,r9
 100af80:	d8800215 	stw	r2,8(sp)
 100af84:	003fdd06 	br	100aefc <__floatunsidf+0x38>
 100af88:	0255c83a 	sub	r10,zero,r9
 100af8c:	51bff804 	addi	r6,r10,-32
 100af90:	30001b16 	blt	r6,zero,100b000 <__floatunsidf+0x13c>
 100af94:	b9a8d83a 	srl	r20,r23,r6
 100af98:	002b883a 	mov	r21,zero
 100af9c:	000f883a 	mov	r7,zero
 100afa0:	01000044 	movi	r4,1
 100afa4:	0011883a 	mov	r8,zero
 100afa8:	30002516 	blt	r6,zero,100b040 <__floatunsidf+0x17c>
 100afac:	21a6983a 	sll	r19,r4,r6
 100afb0:	0025883a 	mov	r18,zero
 100afb4:	00bfffc4 	movi	r2,-1
 100afb8:	9089883a 	add	r4,r18,r2
 100afbc:	988b883a 	add	r5,r19,r2
 100afc0:	248d803a 	cmpltu	r6,r4,r18
 100afc4:	314b883a 	add	r5,r6,r5
 100afc8:	b104703a 	and	r2,r22,r4
 100afcc:	b946703a 	and	r3,r23,r5
 100afd0:	10c4b03a 	or	r2,r2,r3
 100afd4:	10000226 	beq	r2,zero,100afe0 <__floatunsidf+0x11c>
 100afd8:	01c00044 	movi	r7,1
 100afdc:	0011883a 	mov	r8,zero
 100afe0:	d9000217 	ldw	r4,8(sp)
 100afe4:	a1c4b03a 	or	r2,r20,r7
 100afe8:	aa06b03a 	or	r3,r21,r8
 100afec:	2249c83a 	sub	r4,r4,r9
 100aff0:	d8c00415 	stw	r3,16(sp)
 100aff4:	d9000215 	stw	r4,8(sp)
 100aff8:	d8800315 	stw	r2,12(sp)
 100affc:	003fbf06 	br	100aefc <__floatunsidf+0x38>
 100b000:	bdc7883a 	add	r3,r23,r23
 100b004:	008007c4 	movi	r2,31
 100b008:	1285c83a 	sub	r2,r2,r10
 100b00c:	1886983a 	sll	r3,r3,r2
 100b010:	b2a8d83a 	srl	r20,r22,r10
 100b014:	baaad83a 	srl	r21,r23,r10
 100b018:	1d28b03a 	or	r20,r3,r20
 100b01c:	003fdf06 	br	100af9c <__floatunsidf+0xd8>
 100b020:	b006d07a 	srli	r3,r22,1
 100b024:	008007c4 	movi	r2,31
 100b028:	1245c83a 	sub	r2,r2,r9
 100b02c:	1886d83a 	srl	r3,r3,r2
 100b030:	ba62983a 	sll	r17,r23,r9
 100b034:	b260983a 	sll	r16,r22,r9
 100b038:	1c62b03a 	or	r17,r3,r17
 100b03c:	003fcc06 	br	100af70 <__floatunsidf+0xac>
 100b040:	2006d07a 	srli	r3,r4,1
 100b044:	008007c4 	movi	r2,31
 100b048:	1285c83a 	sub	r2,r2,r10
 100b04c:	18a6d83a 	srl	r19,r3,r2
 100b050:	22a4983a 	sll	r18,r4,r10
 100b054:	003fd706 	br	100afb4 <__floatunsidf+0xf0>

0100b058 <__muldi3>:
 100b058:	defff204 	addi	sp,sp,-56
 100b05c:	df000c15 	stw	fp,48(sp)
 100b060:	3038d43a 	srli	fp,r6,16
 100b064:	dd000815 	stw	r20,32(sp)
 100b068:	dc400515 	stw	r17,20(sp)
 100b06c:	2028d43a 	srli	r20,r4,16
 100b070:	247fffcc 	andi	r17,r4,65535
 100b074:	dc000415 	stw	r16,16(sp)
 100b078:	343fffcc 	andi	r16,r6,65535
 100b07c:	dcc00715 	stw	r19,28(sp)
 100b080:	d9000015 	stw	r4,0(sp)
 100b084:	2827883a 	mov	r19,r5
 100b088:	8809883a 	mov	r4,r17
 100b08c:	d9400115 	stw	r5,4(sp)
 100b090:	800b883a 	mov	r5,r16
 100b094:	d9800215 	stw	r6,8(sp)
 100b098:	dfc00d15 	stw	ra,52(sp)
 100b09c:	d9c00315 	stw	r7,12(sp)
 100b0a0:	dd800a15 	stw	r22,40(sp)
 100b0a4:	dd400915 	stw	r21,36(sp)
 100b0a8:	302d883a 	mov	r22,r6
 100b0ac:	ddc00b15 	stw	r23,44(sp)
 100b0b0:	dc800615 	stw	r18,24(sp)
 100b0b4:	10020280 	call	1002028 <__mulsi3>
 100b0b8:	8809883a 	mov	r4,r17
 100b0bc:	e00b883a 	mov	r5,fp
 100b0c0:	102b883a 	mov	r21,r2
 100b0c4:	10020280 	call	1002028 <__mulsi3>
 100b0c8:	800b883a 	mov	r5,r16
 100b0cc:	a009883a 	mov	r4,r20
 100b0d0:	1023883a 	mov	r17,r2
 100b0d4:	10020280 	call	1002028 <__mulsi3>
 100b0d8:	a009883a 	mov	r4,r20
 100b0dc:	e00b883a 	mov	r5,fp
 100b0e0:	1021883a 	mov	r16,r2
 100b0e4:	10020280 	call	1002028 <__mulsi3>
 100b0e8:	a8ffffcc 	andi	r3,r21,65535
 100b0ec:	a82ad43a 	srli	r21,r21,16
 100b0f0:	8c23883a 	add	r17,r17,r16
 100b0f4:	1011883a 	mov	r8,r2
 100b0f8:	ac6b883a 	add	r21,r21,r17
 100b0fc:	a804943a 	slli	r2,r21,16
 100b100:	b009883a 	mov	r4,r22
 100b104:	980b883a 	mov	r5,r19
 100b108:	10c7883a 	add	r3,r2,r3
 100b10c:	a812d43a 	srli	r9,r21,16
 100b110:	180d883a 	mov	r6,r3
 100b114:	ac00022e 	bgeu	r21,r16,100b120 <__muldi3+0xc8>
 100b118:	00800074 	movhi	r2,1
 100b11c:	4091883a 	add	r8,r8,r2
 100b120:	4267883a 	add	r19,r8,r9
 100b124:	302d883a 	mov	r22,r6
 100b128:	10020280 	call	1002028 <__mulsi3>
 100b12c:	d9400317 	ldw	r5,12(sp)
 100b130:	d9000017 	ldw	r4,0(sp)
 100b134:	1023883a 	mov	r17,r2
 100b138:	10020280 	call	1002028 <__mulsi3>
 100b13c:	14cb883a 	add	r5,r2,r19
 100b140:	894b883a 	add	r5,r17,r5
 100b144:	b005883a 	mov	r2,r22
 100b148:	2807883a 	mov	r3,r5
 100b14c:	dfc00d17 	ldw	ra,52(sp)
 100b150:	df000c17 	ldw	fp,48(sp)
 100b154:	ddc00b17 	ldw	r23,44(sp)
 100b158:	dd800a17 	ldw	r22,40(sp)
 100b15c:	dd400917 	ldw	r21,36(sp)
 100b160:	dd000817 	ldw	r20,32(sp)
 100b164:	dcc00717 	ldw	r19,28(sp)
 100b168:	dc800617 	ldw	r18,24(sp)
 100b16c:	dc400517 	ldw	r17,20(sp)
 100b170:	dc000417 	ldw	r16,16(sp)
 100b174:	dec00e04 	addi	sp,sp,56
 100b178:	f800283a 	ret

0100b17c <__fpcmp_parts_d>:
 100b17c:	21800017 	ldw	r6,0(r4)
 100b180:	00c00044 	movi	r3,1
 100b184:	19800a2e 	bgeu	r3,r6,100b1b0 <__fpcmp_parts_d+0x34>
 100b188:	28800017 	ldw	r2,0(r5)
 100b18c:	1880082e 	bgeu	r3,r2,100b1b0 <__fpcmp_parts_d+0x34>
 100b190:	00c00104 	movi	r3,4
 100b194:	30c02626 	beq	r6,r3,100b230 <__fpcmp_parts_d+0xb4>
 100b198:	10c02226 	beq	r2,r3,100b224 <__fpcmp_parts_d+0xa8>
 100b19c:	00c00084 	movi	r3,2
 100b1a0:	30c00526 	beq	r6,r3,100b1b8 <__fpcmp_parts_d+0x3c>
 100b1a4:	10c0071e 	bne	r2,r3,100b1c4 <__fpcmp_parts_d+0x48>
 100b1a8:	20800117 	ldw	r2,4(r4)
 100b1ac:	1000091e 	bne	r2,zero,100b1d4 <__fpcmp_parts_d+0x58>
 100b1b0:	00800044 	movi	r2,1
 100b1b4:	f800283a 	ret
 100b1b8:	10c01a1e 	bne	r2,r3,100b224 <__fpcmp_parts_d+0xa8>
 100b1bc:	0005883a 	mov	r2,zero
 100b1c0:	f800283a 	ret
 100b1c4:	22000117 	ldw	r8,4(r4)
 100b1c8:	28800117 	ldw	r2,4(r5)
 100b1cc:	40800326 	beq	r8,r2,100b1dc <__fpcmp_parts_d+0x60>
 100b1d0:	403ff726 	beq	r8,zero,100b1b0 <__fpcmp_parts_d+0x34>
 100b1d4:	00bfffc4 	movi	r2,-1
 100b1d8:	f800283a 	ret
 100b1dc:	20c00217 	ldw	r3,8(r4)
 100b1e0:	28800217 	ldw	r2,8(r5)
 100b1e4:	10fffa16 	blt	r2,r3,100b1d0 <__fpcmp_parts_d+0x54>
 100b1e8:	18800916 	blt	r3,r2,100b210 <__fpcmp_parts_d+0x94>
 100b1ec:	21c00417 	ldw	r7,16(r4)
 100b1f0:	28c00417 	ldw	r3,16(r5)
 100b1f4:	21800317 	ldw	r6,12(r4)
 100b1f8:	28800317 	ldw	r2,12(r5)
 100b1fc:	19fff436 	bltu	r3,r7,100b1d0 <__fpcmp_parts_d+0x54>
 100b200:	38c00526 	beq	r7,r3,100b218 <__fpcmp_parts_d+0x9c>
 100b204:	38c00236 	bltu	r7,r3,100b210 <__fpcmp_parts_d+0x94>
 100b208:	19ffec1e 	bne	r3,r7,100b1bc <__fpcmp_parts_d+0x40>
 100b20c:	30bfeb2e 	bgeu	r6,r2,100b1bc <__fpcmp_parts_d+0x40>
 100b210:	403fe71e 	bne	r8,zero,100b1b0 <__fpcmp_parts_d+0x34>
 100b214:	003fef06 	br	100b1d4 <__fpcmp_parts_d+0x58>
 100b218:	11bffa2e 	bgeu	r2,r6,100b204 <__fpcmp_parts_d+0x88>
 100b21c:	403fe426 	beq	r8,zero,100b1b0 <__fpcmp_parts_d+0x34>
 100b220:	003fec06 	br	100b1d4 <__fpcmp_parts_d+0x58>
 100b224:	28800117 	ldw	r2,4(r5)
 100b228:	103fe11e 	bne	r2,zero,100b1b0 <__fpcmp_parts_d+0x34>
 100b22c:	003fe906 	br	100b1d4 <__fpcmp_parts_d+0x58>
 100b230:	11bfdd1e 	bne	r2,r6,100b1a8 <__fpcmp_parts_d+0x2c>
 100b234:	28c00117 	ldw	r3,4(r5)
 100b238:	20800117 	ldw	r2,4(r4)
 100b23c:	1885c83a 	sub	r2,r3,r2
 100b240:	f800283a 	ret

0100b244 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100b244:	defff404 	addi	sp,sp,-48
 100b248:	df000b15 	stw	fp,44(sp)
 100b24c:	df000b04 	addi	fp,sp,44
 100b250:	e13ffb15 	stw	r4,-20(fp)
 100b254:	e17ffc15 	stw	r5,-16(fp)
 100b258:	e1bffd15 	stw	r6,-12(fp)
 100b25c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100b260:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100b264:	008040b4 	movhi	r2,258
 100b268:	10b3aa04 	addi	r2,r2,-12632
 100b26c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100b270:	1005003a 	cmpeq	r2,r2,zero
 100b274:	1000411e 	bne	r2,zero,100b37c <alt_alarm_start+0x138>
  {
    if (alarm)
 100b278:	e0bffb17 	ldw	r2,-20(fp)
 100b27c:	1005003a 	cmpeq	r2,r2,zero
 100b280:	10003b1e 	bne	r2,zero,100b370 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100b284:	e0fffb17 	ldw	r3,-20(fp)
 100b288:	e0bffd17 	ldw	r2,-12(fp)
 100b28c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100b290:	e0fffb17 	ldw	r3,-20(fp)
 100b294:	e0bffe17 	ldw	r2,-8(fp)
 100b298:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b29c:	0005303a 	rdctl	r2,status
 100b2a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b2a4:	e0fff817 	ldw	r3,-32(fp)
 100b2a8:	00bfff84 	movi	r2,-2
 100b2ac:	1884703a 	and	r2,r3,r2
 100b2b0:	1001703a 	wrctl	status,r2
  
  return context;
 100b2b4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100b2b8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100b2bc:	008040b4 	movhi	r2,258
 100b2c0:	10b3ab04 	addi	r2,r2,-12628
 100b2c4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100b2c8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100b2cc:	e0fffc17 	ldw	r3,-16(fp)
 100b2d0:	e0bff917 	ldw	r2,-28(fp)
 100b2d4:	1885883a 	add	r2,r3,r2
 100b2d8:	10c00044 	addi	r3,r2,1
 100b2dc:	e0bffb17 	ldw	r2,-20(fp)
 100b2e0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100b2e4:	e0bffb17 	ldw	r2,-20(fp)
 100b2e8:	10c00217 	ldw	r3,8(r2)
 100b2ec:	e0bff917 	ldw	r2,-28(fp)
 100b2f0:	1880042e 	bgeu	r3,r2,100b304 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100b2f4:	e0fffb17 	ldw	r3,-20(fp)
 100b2f8:	00800044 	movi	r2,1
 100b2fc:	18800405 	stb	r2,16(r3)
 100b300:	00000206 	br	100b30c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100b304:	e0bffb17 	ldw	r2,-20(fp)
 100b308:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100b30c:	e0fffb17 	ldw	r3,-20(fp)
 100b310:	008040b4 	movhi	r2,258
 100b314:	10ac9704 	addi	r2,r2,-19876
 100b318:	e0bff615 	stw	r2,-40(fp)
 100b31c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100b320:	e0fff717 	ldw	r3,-36(fp)
 100b324:	e0bff617 	ldw	r2,-40(fp)
 100b328:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100b32c:	e0bff617 	ldw	r2,-40(fp)
 100b330:	10c00017 	ldw	r3,0(r2)
 100b334:	e0bff717 	ldw	r2,-36(fp)
 100b338:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100b33c:	e0bff617 	ldw	r2,-40(fp)
 100b340:	10c00017 	ldw	r3,0(r2)
 100b344:	e0bff717 	ldw	r2,-36(fp)
 100b348:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100b34c:	e0fff617 	ldw	r3,-40(fp)
 100b350:	e0bff717 	ldw	r2,-36(fp)
 100b354:	18800015 	stw	r2,0(r3)
 100b358:	e0bffa17 	ldw	r2,-24(fp)
 100b35c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b360:	e0bff517 	ldw	r2,-44(fp)
 100b364:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100b368:	e03fff15 	stw	zero,-4(fp)
 100b36c:	00000506 	br	100b384 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100b370:	00bffa84 	movi	r2,-22
 100b374:	e0bfff15 	stw	r2,-4(fp)
 100b378:	00000206 	br	100b384 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100b37c:	00bfde84 	movi	r2,-134
 100b380:	e0bfff15 	stw	r2,-4(fp)
 100b384:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100b388:	e037883a 	mov	sp,fp
 100b38c:	df000017 	ldw	fp,0(sp)
 100b390:	dec00104 	addi	sp,sp,4
 100b394:	f800283a 	ret

0100b398 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100b398:	defff804 	addi	sp,sp,-32
 100b39c:	dfc00715 	stw	ra,28(sp)
 100b3a0:	df000615 	stw	fp,24(sp)
 100b3a4:	df000604 	addi	fp,sp,24
 100b3a8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100b3ac:	e0bffc17 	ldw	r2,-16(fp)
 100b3b0:	1004803a 	cmplt	r2,r2,zero
 100b3b4:	1000091e 	bne	r2,zero,100b3dc <close+0x44>
 100b3b8:	e13ffc17 	ldw	r4,-16(fp)
 100b3bc:	01400304 	movi	r5,12
 100b3c0:	10020280 	call	1002028 <__mulsi3>
 100b3c4:	1007883a 	mov	r3,r2
 100b3c8:	008040b4 	movhi	r2,258
 100b3cc:	10a7ff04 	addi	r2,r2,-24580
 100b3d0:	1887883a 	add	r3,r3,r2
 100b3d4:	e0ffff15 	stw	r3,-4(fp)
 100b3d8:	00000106 	br	100b3e0 <close+0x48>
 100b3dc:	e03fff15 	stw	zero,-4(fp)
 100b3e0:	e0bfff17 	ldw	r2,-4(fp)
 100b3e4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100b3e8:	e0bffb17 	ldw	r2,-20(fp)
 100b3ec:	1005003a 	cmpeq	r2,r2,zero
 100b3f0:	10001d1e 	bne	r2,zero,100b468 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100b3f4:	e0bffb17 	ldw	r2,-20(fp)
 100b3f8:	10800017 	ldw	r2,0(r2)
 100b3fc:	10800417 	ldw	r2,16(r2)
 100b400:	1005003a 	cmpeq	r2,r2,zero
 100b404:	1000071e 	bne	r2,zero,100b424 <close+0x8c>
 100b408:	e0bffb17 	ldw	r2,-20(fp)
 100b40c:	10800017 	ldw	r2,0(r2)
 100b410:	10800417 	ldw	r2,16(r2)
 100b414:	e13ffb17 	ldw	r4,-20(fp)
 100b418:	103ee83a 	callr	r2
 100b41c:	e0bffe15 	stw	r2,-8(fp)
 100b420:	00000106 	br	100b428 <close+0x90>
 100b424:	e03ffe15 	stw	zero,-8(fp)
 100b428:	e0bffe17 	ldw	r2,-8(fp)
 100b42c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100b430:	e13ffc17 	ldw	r4,-16(fp)
 100b434:	100bc0c0 	call	100bc0c <alt_release_fd>
    if (rval < 0)
 100b438:	e0bffa17 	ldw	r2,-24(fp)
 100b43c:	1004403a 	cmpge	r2,r2,zero
 100b440:	1000071e 	bne	r2,zero,100b460 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 100b444:	100b4980 	call	100b498 <alt_get_errno>
 100b448:	e0fffa17 	ldw	r3,-24(fp)
 100b44c:	00c7c83a 	sub	r3,zero,r3
 100b450:	10c00015 	stw	r3,0(r2)
      return -1;
 100b454:	00bfffc4 	movi	r2,-1
 100b458:	e0bffd15 	stw	r2,-12(fp)
 100b45c:	00000806 	br	100b480 <close+0xe8>
    }
    return 0;
 100b460:	e03ffd15 	stw	zero,-12(fp)
 100b464:	00000606 	br	100b480 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100b468:	100b4980 	call	100b498 <alt_get_errno>
 100b46c:	1007883a 	mov	r3,r2
 100b470:	00801444 	movi	r2,81
 100b474:	18800015 	stw	r2,0(r3)
    return -1;
 100b478:	00bfffc4 	movi	r2,-1
 100b47c:	e0bffd15 	stw	r2,-12(fp)
 100b480:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100b484:	e037883a 	mov	sp,fp
 100b488:	dfc00117 	ldw	ra,4(sp)
 100b48c:	df000017 	ldw	fp,0(sp)
 100b490:	dec00204 	addi	sp,sp,8
 100b494:	f800283a 	ret

0100b498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b498:	defffd04 	addi	sp,sp,-12
 100b49c:	dfc00215 	stw	ra,8(sp)
 100b4a0:	df000115 	stw	fp,4(sp)
 100b4a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b4a8:	008040b4 	movhi	r2,258
 100b4ac:	10ac9504 	addi	r2,r2,-19884
 100b4b0:	10800017 	ldw	r2,0(r2)
 100b4b4:	1005003a 	cmpeq	r2,r2,zero
 100b4b8:	1000061e 	bne	r2,zero,100b4d4 <alt_get_errno+0x3c>
 100b4bc:	008040b4 	movhi	r2,258
 100b4c0:	10ac9504 	addi	r2,r2,-19884
 100b4c4:	10800017 	ldw	r2,0(r2)
 100b4c8:	103ee83a 	callr	r2
 100b4cc:	e0bfff15 	stw	r2,-4(fp)
 100b4d0:	00000306 	br	100b4e0 <alt_get_errno+0x48>
 100b4d4:	008040b4 	movhi	r2,258
 100b4d8:	10b3a504 	addi	r2,r2,-12652
 100b4dc:	e0bfff15 	stw	r2,-4(fp)
 100b4e0:	e0bfff17 	ldw	r2,-4(fp)
}
 100b4e4:	e037883a 	mov	sp,fp
 100b4e8:	dfc00117 	ldw	ra,4(sp)
 100b4ec:	df000017 	ldw	fp,0(sp)
 100b4f0:	dec00204 	addi	sp,sp,8
 100b4f4:	f800283a 	ret

0100b4f8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100b4f8:	defffc04 	addi	sp,sp,-16
 100b4fc:	df000315 	stw	fp,12(sp)
 100b500:	df000304 	addi	fp,sp,12
 100b504:	e13ffd15 	stw	r4,-12(fp)
 100b508:	e17ffe15 	stw	r5,-8(fp)
 100b50c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100b510:	e0bfff17 	ldw	r2,-4(fp)
}
 100b514:	e037883a 	mov	sp,fp
 100b518:	df000017 	ldw	fp,0(sp)
 100b51c:	dec00104 	addi	sp,sp,4
 100b520:	f800283a 	ret

0100b524 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100b524:	defff904 	addi	sp,sp,-28
 100b528:	dfc00615 	stw	ra,24(sp)
 100b52c:	df000515 	stw	fp,20(sp)
 100b530:	df000504 	addi	fp,sp,20
 100b534:	e13ffc15 	stw	r4,-16(fp)
 100b538:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b53c:	e0bffc17 	ldw	r2,-16(fp)
 100b540:	1004803a 	cmplt	r2,r2,zero
 100b544:	1000091e 	bne	r2,zero,100b56c <fstat+0x48>
 100b548:	e13ffc17 	ldw	r4,-16(fp)
 100b54c:	01400304 	movi	r5,12
 100b550:	10020280 	call	1002028 <__mulsi3>
 100b554:	1007883a 	mov	r3,r2
 100b558:	008040b4 	movhi	r2,258
 100b55c:	10a7ff04 	addi	r2,r2,-24580
 100b560:	1887883a 	add	r3,r3,r2
 100b564:	e0ffff15 	stw	r3,-4(fp)
 100b568:	00000106 	br	100b570 <fstat+0x4c>
 100b56c:	e03fff15 	stw	zero,-4(fp)
 100b570:	e0bfff17 	ldw	r2,-4(fp)
 100b574:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100b578:	e0bffb17 	ldw	r2,-20(fp)
 100b57c:	1005003a 	cmpeq	r2,r2,zero
 100b580:	1000121e 	bne	r2,zero,100b5cc <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100b584:	e0bffb17 	ldw	r2,-20(fp)
 100b588:	10800017 	ldw	r2,0(r2)
 100b58c:	10800817 	ldw	r2,32(r2)
 100b590:	1005003a 	cmpeq	r2,r2,zero
 100b594:	1000081e 	bne	r2,zero,100b5b8 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100b598:	e0bffb17 	ldw	r2,-20(fp)
 100b59c:	10800017 	ldw	r2,0(r2)
 100b5a0:	10800817 	ldw	r2,32(r2)
 100b5a4:	e13ffb17 	ldw	r4,-20(fp)
 100b5a8:	e17ffd17 	ldw	r5,-12(fp)
 100b5ac:	103ee83a 	callr	r2
 100b5b0:	e0bffe15 	stw	r2,-8(fp)
 100b5b4:	00000b06 	br	100b5e4 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100b5b8:	e0fffd17 	ldw	r3,-12(fp)
 100b5bc:	00880004 	movi	r2,8192
 100b5c0:	18800115 	stw	r2,4(r3)
      return 0;
 100b5c4:	e03ffe15 	stw	zero,-8(fp)
 100b5c8:	00000606 	br	100b5e4 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100b5cc:	100b5fc0 	call	100b5fc <alt_get_errno>
 100b5d0:	1007883a 	mov	r3,r2
 100b5d4:	00801444 	movi	r2,81
 100b5d8:	18800015 	stw	r2,0(r3)
    return -1;
 100b5dc:	00bfffc4 	movi	r2,-1
 100b5e0:	e0bffe15 	stw	r2,-8(fp)
 100b5e4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100b5e8:	e037883a 	mov	sp,fp
 100b5ec:	dfc00117 	ldw	ra,4(sp)
 100b5f0:	df000017 	ldw	fp,0(sp)
 100b5f4:	dec00204 	addi	sp,sp,8
 100b5f8:	f800283a 	ret

0100b5fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b5fc:	defffd04 	addi	sp,sp,-12
 100b600:	dfc00215 	stw	ra,8(sp)
 100b604:	df000115 	stw	fp,4(sp)
 100b608:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b60c:	008040b4 	movhi	r2,258
 100b610:	10ac9504 	addi	r2,r2,-19884
 100b614:	10800017 	ldw	r2,0(r2)
 100b618:	1005003a 	cmpeq	r2,r2,zero
 100b61c:	1000061e 	bne	r2,zero,100b638 <alt_get_errno+0x3c>
 100b620:	008040b4 	movhi	r2,258
 100b624:	10ac9504 	addi	r2,r2,-19884
 100b628:	10800017 	ldw	r2,0(r2)
 100b62c:	103ee83a 	callr	r2
 100b630:	e0bfff15 	stw	r2,-4(fp)
 100b634:	00000306 	br	100b644 <alt_get_errno+0x48>
 100b638:	008040b4 	movhi	r2,258
 100b63c:	10b3a504 	addi	r2,r2,-12652
 100b640:	e0bfff15 	stw	r2,-4(fp)
 100b644:	e0bfff17 	ldw	r2,-4(fp)
}
 100b648:	e037883a 	mov	sp,fp
 100b64c:	dfc00117 	ldw	ra,4(sp)
 100b650:	df000017 	ldw	fp,0(sp)
 100b654:	dec00204 	addi	sp,sp,8
 100b658:	f800283a 	ret

0100b65c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100b65c:	deffeb04 	addi	sp,sp,-84
 100b660:	dfc01415 	stw	ra,80(sp)
 100b664:	df001315 	stw	fp,76(sp)
 100b668:	df001304 	addi	fp,sp,76
 100b66c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b670:	e0bffd17 	ldw	r2,-12(fp)
 100b674:	1004803a 	cmplt	r2,r2,zero
 100b678:	1000091e 	bne	r2,zero,100b6a0 <isatty+0x44>
 100b67c:	e13ffd17 	ldw	r4,-12(fp)
 100b680:	01400304 	movi	r5,12
 100b684:	10020280 	call	1002028 <__mulsi3>
 100b688:	1007883a 	mov	r3,r2
 100b68c:	008040b4 	movhi	r2,258
 100b690:	10a7ff04 	addi	r2,r2,-24580
 100b694:	1887883a 	add	r3,r3,r2
 100b698:	e0ffff15 	stw	r3,-4(fp)
 100b69c:	00000106 	br	100b6a4 <isatty+0x48>
 100b6a0:	e03fff15 	stw	zero,-4(fp)
 100b6a4:	e0bfff17 	ldw	r2,-4(fp)
 100b6a8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100b6ac:	e0bfed17 	ldw	r2,-76(fp)
 100b6b0:	1005003a 	cmpeq	r2,r2,zero
 100b6b4:	10000f1e 	bne	r2,zero,100b6f4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100b6b8:	e0bfed17 	ldw	r2,-76(fp)
 100b6bc:	10800017 	ldw	r2,0(r2)
 100b6c0:	10800817 	ldw	r2,32(r2)
 100b6c4:	1004c03a 	cmpne	r2,r2,zero
 100b6c8:	1000031e 	bne	r2,zero,100b6d8 <isatty+0x7c>
    {
      return 1;
 100b6cc:	00800044 	movi	r2,1
 100b6d0:	e0bffe15 	stw	r2,-8(fp)
 100b6d4:	00000c06 	br	100b708 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100b6d8:	e17fee04 	addi	r5,fp,-72
 100b6dc:	e13ffd17 	ldw	r4,-12(fp)
 100b6e0:	100b5240 	call	100b524 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100b6e4:	e0bfef17 	ldw	r2,-68(fp)
 100b6e8:	10880020 	cmpeqi	r2,r2,8192
 100b6ec:	e0bffe15 	stw	r2,-8(fp)
 100b6f0:	00000506 	br	100b708 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100b6f4:	100b7200 	call	100b720 <alt_get_errno>
 100b6f8:	1007883a 	mov	r3,r2
 100b6fc:	00801444 	movi	r2,81
 100b700:	18800015 	stw	r2,0(r3)
    return 0;
 100b704:	e03ffe15 	stw	zero,-8(fp)
 100b708:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100b70c:	e037883a 	mov	sp,fp
 100b710:	dfc00117 	ldw	ra,4(sp)
 100b714:	df000017 	ldw	fp,0(sp)
 100b718:	dec00204 	addi	sp,sp,8
 100b71c:	f800283a 	ret

0100b720 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b720:	defffd04 	addi	sp,sp,-12
 100b724:	dfc00215 	stw	ra,8(sp)
 100b728:	df000115 	stw	fp,4(sp)
 100b72c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b730:	008040b4 	movhi	r2,258
 100b734:	10ac9504 	addi	r2,r2,-19884
 100b738:	10800017 	ldw	r2,0(r2)
 100b73c:	1005003a 	cmpeq	r2,r2,zero
 100b740:	1000061e 	bne	r2,zero,100b75c <alt_get_errno+0x3c>
 100b744:	008040b4 	movhi	r2,258
 100b748:	10ac9504 	addi	r2,r2,-19884
 100b74c:	10800017 	ldw	r2,0(r2)
 100b750:	103ee83a 	callr	r2
 100b754:	e0bfff15 	stw	r2,-4(fp)
 100b758:	00000306 	br	100b768 <alt_get_errno+0x48>
 100b75c:	008040b4 	movhi	r2,258
 100b760:	10b3a504 	addi	r2,r2,-12652
 100b764:	e0bfff15 	stw	r2,-4(fp)
 100b768:	e0bfff17 	ldw	r2,-4(fp)
}
 100b76c:	e037883a 	mov	sp,fp
 100b770:	dfc00117 	ldw	ra,4(sp)
 100b774:	df000017 	ldw	fp,0(sp)
 100b778:	dec00204 	addi	sp,sp,8
 100b77c:	f800283a 	ret

0100b780 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100b780:	defffe04 	addi	sp,sp,-8
 100b784:	dfc00115 	stw	ra,4(sp)
 100b788:	df000015 	stw	fp,0(sp)
 100b78c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100b790:	010040b4 	movhi	r4,258
 100b794:	212cb904 	addi	r4,r4,-19740
 100b798:	014040b4 	movhi	r5,258
 100b79c:	2965e504 	addi	r5,r5,-26732
 100b7a0:	018040b4 	movhi	r6,258
 100b7a4:	31acb904 	addi	r6,r6,-19740
 100b7a8:	100b8000 	call	100b800 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100b7ac:	01004034 	movhi	r4,256
 100b7b0:	21000804 	addi	r4,r4,32
 100b7b4:	01404034 	movhi	r5,256
 100b7b8:	29400804 	addi	r5,r5,32
 100b7bc:	01804034 	movhi	r6,256
 100b7c0:	31806f04 	addi	r6,r6,444
 100b7c4:	100b8000 	call	100b800 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100b7c8:	010040b4 	movhi	r4,258
 100b7cc:	21246604 	addi	r4,r4,-28264
 100b7d0:	014040b4 	movhi	r5,258
 100b7d4:	29646604 	addi	r5,r5,-28264
 100b7d8:	018040b4 	movhi	r6,258
 100b7dc:	31a5e504 	addi	r6,r6,-26732
 100b7e0:	100b8000 	call	100b800 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100b7e4:	1017bb40 	call	1017bb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100b7e8:	1017e400 	call	1017e40 <alt_icache_flush_all>
}
 100b7ec:	e037883a 	mov	sp,fp
 100b7f0:	dfc00117 	ldw	ra,4(sp)
 100b7f4:	df000017 	ldw	fp,0(sp)
 100b7f8:	dec00204 	addi	sp,sp,8
 100b7fc:	f800283a 	ret

0100b800 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100b800:	defffc04 	addi	sp,sp,-16
 100b804:	df000315 	stw	fp,12(sp)
 100b808:	df000304 	addi	fp,sp,12
 100b80c:	e13ffd15 	stw	r4,-12(fp)
 100b810:	e17ffe15 	stw	r5,-8(fp)
 100b814:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100b818:	e0fffe17 	ldw	r3,-8(fp)
 100b81c:	e0bffd17 	ldw	r2,-12(fp)
 100b820:	18800e26 	beq	r3,r2,100b85c <alt_load_section+0x5c>
  {
    while( to != end )
 100b824:	00000a06 	br	100b850 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100b828:	e0bffd17 	ldw	r2,-12(fp)
 100b82c:	10c00017 	ldw	r3,0(r2)
 100b830:	e0bffe17 	ldw	r2,-8(fp)
 100b834:	10c00015 	stw	r3,0(r2)
 100b838:	e0bffe17 	ldw	r2,-8(fp)
 100b83c:	10800104 	addi	r2,r2,4
 100b840:	e0bffe15 	stw	r2,-8(fp)
 100b844:	e0bffd17 	ldw	r2,-12(fp)
 100b848:	10800104 	addi	r2,r2,4
 100b84c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100b850:	e0fffe17 	ldw	r3,-8(fp)
 100b854:	e0bfff17 	ldw	r2,-4(fp)
 100b858:	18bff31e 	bne	r3,r2,100b828 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100b85c:	e037883a 	mov	sp,fp
 100b860:	df000017 	ldw	fp,0(sp)
 100b864:	dec00104 	addi	sp,sp,4
 100b868:	f800283a 	ret

0100b86c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100b86c:	defff804 	addi	sp,sp,-32
 100b870:	dfc00715 	stw	ra,28(sp)
 100b874:	df000615 	stw	fp,24(sp)
 100b878:	df000604 	addi	fp,sp,24
 100b87c:	e13ffc15 	stw	r4,-16(fp)
 100b880:	e17ffd15 	stw	r5,-12(fp)
 100b884:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100b888:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100b88c:	e0bffc17 	ldw	r2,-16(fp)
 100b890:	1004803a 	cmplt	r2,r2,zero
 100b894:	1000091e 	bne	r2,zero,100b8bc <lseek+0x50>
 100b898:	e13ffc17 	ldw	r4,-16(fp)
 100b89c:	01400304 	movi	r5,12
 100b8a0:	10020280 	call	1002028 <__mulsi3>
 100b8a4:	1007883a 	mov	r3,r2
 100b8a8:	008040b4 	movhi	r2,258
 100b8ac:	10a7ff04 	addi	r2,r2,-24580
 100b8b0:	1887883a 	add	r3,r3,r2
 100b8b4:	e0ffff15 	stw	r3,-4(fp)
 100b8b8:	00000106 	br	100b8c0 <lseek+0x54>
 100b8bc:	e03fff15 	stw	zero,-4(fp)
 100b8c0:	e0bfff17 	ldw	r2,-4(fp)
 100b8c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100b8c8:	e0bffb17 	ldw	r2,-20(fp)
 100b8cc:	1005003a 	cmpeq	r2,r2,zero
 100b8d0:	1000111e 	bne	r2,zero,100b918 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100b8d4:	e0bffb17 	ldw	r2,-20(fp)
 100b8d8:	10800017 	ldw	r2,0(r2)
 100b8dc:	10800717 	ldw	r2,28(r2)
 100b8e0:	1005003a 	cmpeq	r2,r2,zero
 100b8e4:	1000091e 	bne	r2,zero,100b90c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100b8e8:	e0bffb17 	ldw	r2,-20(fp)
 100b8ec:	10800017 	ldw	r2,0(r2)
 100b8f0:	10800717 	ldw	r2,28(r2)
 100b8f4:	e13ffb17 	ldw	r4,-20(fp)
 100b8f8:	e17ffd17 	ldw	r5,-12(fp)
 100b8fc:	e1bffe17 	ldw	r6,-8(fp)
 100b900:	103ee83a 	callr	r2
 100b904:	e0bffa15 	stw	r2,-24(fp)
 100b908:	00000506 	br	100b920 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100b90c:	00bfde84 	movi	r2,-134
 100b910:	e0bffa15 	stw	r2,-24(fp)
 100b914:	00000206 	br	100b920 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100b918:	00bfebc4 	movi	r2,-81
 100b91c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100b920:	e0bffa17 	ldw	r2,-24(fp)
 100b924:	1004403a 	cmpge	r2,r2,zero
 100b928:	1000071e 	bne	r2,zero,100b948 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100b92c:	100b9600 	call	100b960 <alt_get_errno>
 100b930:	1007883a 	mov	r3,r2
 100b934:	e0bffa17 	ldw	r2,-24(fp)
 100b938:	0085c83a 	sub	r2,zero,r2
 100b93c:	18800015 	stw	r2,0(r3)
    rc = -1;
 100b940:	00bfffc4 	movi	r2,-1
 100b944:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100b948:	e0bffa17 	ldw	r2,-24(fp)
}
 100b94c:	e037883a 	mov	sp,fp
 100b950:	dfc00117 	ldw	ra,4(sp)
 100b954:	df000017 	ldw	fp,0(sp)
 100b958:	dec00204 	addi	sp,sp,8
 100b95c:	f800283a 	ret

0100b960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100b960:	defffd04 	addi	sp,sp,-12
 100b964:	dfc00215 	stw	ra,8(sp)
 100b968:	df000115 	stw	fp,4(sp)
 100b96c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100b970:	008040b4 	movhi	r2,258
 100b974:	10ac9504 	addi	r2,r2,-19884
 100b978:	10800017 	ldw	r2,0(r2)
 100b97c:	1005003a 	cmpeq	r2,r2,zero
 100b980:	1000061e 	bne	r2,zero,100b99c <alt_get_errno+0x3c>
 100b984:	008040b4 	movhi	r2,258
 100b988:	10ac9504 	addi	r2,r2,-19884
 100b98c:	10800017 	ldw	r2,0(r2)
 100b990:	103ee83a 	callr	r2
 100b994:	e0bfff15 	stw	r2,-4(fp)
 100b998:	00000306 	br	100b9a8 <alt_get_errno+0x48>
 100b99c:	008040b4 	movhi	r2,258
 100b9a0:	10b3a504 	addi	r2,r2,-12652
 100b9a4:	e0bfff15 	stw	r2,-4(fp)
 100b9a8:	e0bfff17 	ldw	r2,-4(fp)
}
 100b9ac:	e037883a 	mov	sp,fp
 100b9b0:	dfc00117 	ldw	ra,4(sp)
 100b9b4:	df000017 	ldw	fp,0(sp)
 100b9b8:	dec00204 	addi	sp,sp,8
 100b9bc:	f800283a 	ret

0100b9c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100b9c0:	defffb04 	addi	sp,sp,-20
 100b9c4:	dfc00415 	stw	ra,16(sp)
 100b9c8:	df000315 	stw	fp,12(sp)
 100b9cc:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100b9d0:	0009883a 	mov	r4,zero
 100b9d4:	10167400 	call	1016740 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100b9d8:	100cc740 	call	100cc74 <OSInit>
 100b9dc:	01000044 	movi	r4,1
 100b9e0:	101282c0 	call	101282c <OSSemCreate>
 100b9e4:	1007883a 	mov	r3,r2
 100b9e8:	008040b4 	movhi	r2,258
 100b9ec:	10b3ad04 	addi	r2,r2,-12620
 100b9f0:	10c00015 	stw	r3,0(r2)
 100b9f4:	01000044 	movi	r4,1
 100b9f8:	101282c0 	call	101282c <OSSemCreate>
 100b9fc:	1007883a 	mov	r3,r2
 100ba00:	008040b4 	movhi	r2,258
 100ba04:	10b3af04 	addi	r2,r2,-12612
 100ba08:	10c00015 	stw	r3,0(r2)
 100ba0c:	008040b4 	movhi	r2,258
 100ba10:	10b3a604 	addi	r2,r2,-12648
 100ba14:	e0bffd15 	stw	r2,-12(fp)
 100ba18:	00800044 	movi	r2,1
 100ba1c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 100ba20:	e13ffe0b 	ldhu	r4,-8(fp)
 100ba24:	101282c0 	call	101282c <OSSemCreate>
 100ba28:	1007883a 	mov	r3,r2
 100ba2c:	e0bffd17 	ldw	r2,-12(fp)
 100ba30:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100ba34:	10167740 	call	1016774 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100ba38:	010040b4 	movhi	r4,258
 100ba3c:	21258004 	addi	r4,r4,-27136
 100ba40:	014040b4 	movhi	r5,258
 100ba44:	29658004 	addi	r5,r5,-27136
 100ba48:	018040b4 	movhi	r6,258
 100ba4c:	31a58004 	addi	r6,r6,-27136
 100ba50:	10182000 	call	1018200 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100ba54:	1017ce40 	call	1017ce4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100ba58:	01004074 	movhi	r4,257
 100ba5c:	211f5204 	addi	r4,r4,32072
 100ba60:	1018cdc0 	call	1018cdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100ba64:	d1272217 	ldw	r4,-25464(gp)
 100ba68:	d1672317 	ldw	r5,-25460(gp)
 100ba6c:	d1a72417 	ldw	r6,-25456(gp)
 100ba70:	10014100 	call	1001410 <main>
 100ba74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100ba78:	01000044 	movi	r4,1
 100ba7c:	100b3980 	call	100b398 <close>
  exit (result);
 100ba80:	e13fff17 	ldw	r4,-4(fp)
 100ba84:	1018cf00 	call	1018cf0 <exit>

0100ba88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100ba88:	defff704 	addi	sp,sp,-36
 100ba8c:	dfc00815 	stw	ra,32(sp)
 100ba90:	df000715 	stw	fp,28(sp)
 100ba94:	df000704 	addi	fp,sp,28
 100ba98:	e13ffb15 	stw	r4,-20(fp)
 100ba9c:	e17ffc15 	stw	r5,-16(fp)
 100baa0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100baa4:	e0bffb17 	ldw	r2,-20(fp)
 100baa8:	1004803a 	cmplt	r2,r2,zero
 100baac:	1000091e 	bne	r2,zero,100bad4 <read+0x4c>
 100bab0:	e13ffb17 	ldw	r4,-20(fp)
 100bab4:	01400304 	movi	r5,12
 100bab8:	10020280 	call	1002028 <__mulsi3>
 100babc:	1007883a 	mov	r3,r2
 100bac0:	008040b4 	movhi	r2,258
 100bac4:	10a7ff04 	addi	r2,r2,-24580
 100bac8:	1887883a 	add	r3,r3,r2
 100bacc:	e0ffff15 	stw	r3,-4(fp)
 100bad0:	00000106 	br	100bad8 <read+0x50>
 100bad4:	e03fff15 	stw	zero,-4(fp)
 100bad8:	e0bfff17 	ldw	r2,-4(fp)
 100badc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100bae0:	e0bffa17 	ldw	r2,-24(fp)
 100bae4:	1005003a 	cmpeq	r2,r2,zero
 100bae8:	1000241e 	bne	r2,zero,100bb7c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100baec:	e0bffa17 	ldw	r2,-24(fp)
 100baf0:	10800217 	ldw	r2,8(r2)
 100baf4:	108000cc 	andi	r2,r2,3
 100baf8:	10800060 	cmpeqi	r2,r2,1
 100bafc:	10001a1e 	bne	r2,zero,100bb68 <read+0xe0>
 100bb00:	e0bffa17 	ldw	r2,-24(fp)
 100bb04:	10800017 	ldw	r2,0(r2)
 100bb08:	10800517 	ldw	r2,20(r2)
 100bb0c:	1005003a 	cmpeq	r2,r2,zero
 100bb10:	1000151e 	bne	r2,zero,100bb68 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100bb14:	e0bffa17 	ldw	r2,-24(fp)
 100bb18:	10800017 	ldw	r2,0(r2)
 100bb1c:	10800517 	ldw	r2,20(r2)
 100bb20:	e17ffc17 	ldw	r5,-16(fp)
 100bb24:	e1bffd17 	ldw	r6,-12(fp)
 100bb28:	e13ffa17 	ldw	r4,-24(fp)
 100bb2c:	103ee83a 	callr	r2
 100bb30:	e0bff915 	stw	r2,-28(fp)
 100bb34:	e0bff917 	ldw	r2,-28(fp)
 100bb38:	1004403a 	cmpge	r2,r2,zero
 100bb3c:	1000071e 	bne	r2,zero,100bb5c <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100bb40:	100bbac0 	call	100bbac <alt_get_errno>
 100bb44:	e0fff917 	ldw	r3,-28(fp)
 100bb48:	00c7c83a 	sub	r3,zero,r3
 100bb4c:	10c00015 	stw	r3,0(r2)
          return -1;
 100bb50:	00bfffc4 	movi	r2,-1
 100bb54:	e0bffe15 	stw	r2,-8(fp)
 100bb58:	00000e06 	br	100bb94 <read+0x10c>
        }
        return rval;
 100bb5c:	e0bff917 	ldw	r2,-28(fp)
 100bb60:	e0bffe15 	stw	r2,-8(fp)
 100bb64:	00000b06 	br	100bb94 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100bb68:	100bbac0 	call	100bbac <alt_get_errno>
 100bb6c:	1007883a 	mov	r3,r2
 100bb70:	00800344 	movi	r2,13
 100bb74:	18800015 	stw	r2,0(r3)
 100bb78:	00000406 	br	100bb8c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100bb7c:	100bbac0 	call	100bbac <alt_get_errno>
 100bb80:	1007883a 	mov	r3,r2
 100bb84:	00801444 	movi	r2,81
 100bb88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100bb8c:	00bfffc4 	movi	r2,-1
 100bb90:	e0bffe15 	stw	r2,-8(fp)
 100bb94:	e0bffe17 	ldw	r2,-8(fp)
}
 100bb98:	e037883a 	mov	sp,fp
 100bb9c:	dfc00117 	ldw	ra,4(sp)
 100bba0:	df000017 	ldw	fp,0(sp)
 100bba4:	dec00204 	addi	sp,sp,8
 100bba8:	f800283a 	ret

0100bbac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bbac:	defffd04 	addi	sp,sp,-12
 100bbb0:	dfc00215 	stw	ra,8(sp)
 100bbb4:	df000115 	stw	fp,4(sp)
 100bbb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bbbc:	008040b4 	movhi	r2,258
 100bbc0:	10ac9504 	addi	r2,r2,-19884
 100bbc4:	10800017 	ldw	r2,0(r2)
 100bbc8:	1005003a 	cmpeq	r2,r2,zero
 100bbcc:	1000061e 	bne	r2,zero,100bbe8 <alt_get_errno+0x3c>
 100bbd0:	008040b4 	movhi	r2,258
 100bbd4:	10ac9504 	addi	r2,r2,-19884
 100bbd8:	10800017 	ldw	r2,0(r2)
 100bbdc:	103ee83a 	callr	r2
 100bbe0:	e0bfff15 	stw	r2,-4(fp)
 100bbe4:	00000306 	br	100bbf4 <alt_get_errno+0x48>
 100bbe8:	008040b4 	movhi	r2,258
 100bbec:	10b3a504 	addi	r2,r2,-12652
 100bbf0:	e0bfff15 	stw	r2,-4(fp)
 100bbf4:	e0bfff17 	ldw	r2,-4(fp)
}
 100bbf8:	e037883a 	mov	sp,fp
 100bbfc:	dfc00117 	ldw	ra,4(sp)
 100bc00:	df000017 	ldw	fp,0(sp)
 100bc04:	dec00204 	addi	sp,sp,8
 100bc08:	f800283a 	ret

0100bc0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100bc0c:	defffc04 	addi	sp,sp,-16
 100bc10:	dfc00315 	stw	ra,12(sp)
 100bc14:	df000215 	stw	fp,8(sp)
 100bc18:	dc000115 	stw	r16,4(sp)
 100bc1c:	df000104 	addi	fp,sp,4
 100bc20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100bc24:	e0bfff17 	ldw	r2,-4(fp)
 100bc28:	108000d0 	cmplti	r2,r2,3
 100bc2c:	10000f1e 	bne	r2,zero,100bc6c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100bc30:	e13fff17 	ldw	r4,-4(fp)
 100bc34:	040040b4 	movhi	r16,258
 100bc38:	8427ff04 	addi	r16,r16,-24580
 100bc3c:	01400304 	movi	r5,12
 100bc40:	10020280 	call	1002028 <__mulsi3>
 100bc44:	1405883a 	add	r2,r2,r16
 100bc48:	10800204 	addi	r2,r2,8
 100bc4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100bc50:	e13fff17 	ldw	r4,-4(fp)
 100bc54:	040040b4 	movhi	r16,258
 100bc58:	8427ff04 	addi	r16,r16,-24580
 100bc5c:	01400304 	movi	r5,12
 100bc60:	10020280 	call	1002028 <__mulsi3>
 100bc64:	1405883a 	add	r2,r2,r16
 100bc68:	10000015 	stw	zero,0(r2)
  }
}
 100bc6c:	e037883a 	mov	sp,fp
 100bc70:	dfc00217 	ldw	ra,8(sp)
 100bc74:	df000117 	ldw	fp,4(sp)
 100bc78:	dc000017 	ldw	r16,0(sp)
 100bc7c:	dec00304 	addi	sp,sp,12
 100bc80:	f800283a 	ret

0100bc84 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100bc84:	defff804 	addi	sp,sp,-32
 100bc88:	df000715 	stw	fp,28(sp)
 100bc8c:	df000704 	addi	fp,sp,28
 100bc90:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bc94:	0005303a 	rdctl	r2,status
 100bc98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bc9c:	e0fffb17 	ldw	r3,-20(fp)
 100bca0:	00bfff84 	movi	r2,-2
 100bca4:	1884703a 	and	r2,r3,r2
 100bca8:	1001703a 	wrctl	status,r2
  
  return context;
 100bcac:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100bcb0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100bcb4:	d0a01117 	ldw	r2,-32700(gp)
 100bcb8:	10c000c4 	addi	r3,r2,3
 100bcbc:	00bfff04 	movi	r2,-4
 100bcc0:	1884703a 	and	r2,r3,r2
 100bcc4:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100bcc8:	d0e01117 	ldw	r3,-32700(gp)
 100bccc:	e0bffe17 	ldw	r2,-8(fp)
 100bcd0:	1887883a 	add	r3,r3,r2
 100bcd4:	00806034 	movhi	r2,384
 100bcd8:	10800004 	addi	r2,r2,0
 100bcdc:	10c0072e 	bgeu	r2,r3,100bcfc <sbrk+0x78>
 100bce0:	e0bffd17 	ldw	r2,-12(fp)
 100bce4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bce8:	e0bffa17 	ldw	r2,-24(fp)
 100bcec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100bcf0:	00bfffc4 	movi	r2,-1
 100bcf4:	e0bfff15 	stw	r2,-4(fp)
 100bcf8:	00000c06 	br	100bd2c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100bcfc:	d0a01117 	ldw	r2,-32700(gp)
 100bd00:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100bd04:	d0e01117 	ldw	r3,-32700(gp)
 100bd08:	e0bffe17 	ldw	r2,-8(fp)
 100bd0c:	1885883a 	add	r2,r3,r2
 100bd10:	d0a01115 	stw	r2,-32700(gp)
 100bd14:	e0bffd17 	ldw	r2,-12(fp)
 100bd18:	e0bff915 	stw	r2,-28(fp)
 100bd1c:	e0bff917 	ldw	r2,-28(fp)
 100bd20:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100bd24:	e0bffc17 	ldw	r2,-16(fp)
 100bd28:	e0bfff15 	stw	r2,-4(fp)
 100bd2c:	e0bfff17 	ldw	r2,-4(fp)
} 
 100bd30:	e037883a 	mov	sp,fp
 100bd34:	df000017 	ldw	fp,0(sp)
 100bd38:	dec00104 	addi	sp,sp,4
 100bd3c:	f800283a 	ret

0100bd40 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100bd40:	defffa04 	addi	sp,sp,-24
 100bd44:	df000515 	stw	fp,20(sp)
 100bd48:	df000504 	addi	fp,sp,20
 100bd4c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bd50:	0005303a 	rdctl	r2,status
 100bd54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bd58:	e0fffd17 	ldw	r3,-12(fp)
 100bd5c:	00bfff84 	movi	r2,-2
 100bd60:	1884703a 	and	r2,r3,r2
 100bd64:	1001703a 	wrctl	status,r2
  
  return context;
 100bd68:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100bd6c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100bd70:	e0bfff17 	ldw	r2,-4(fp)
 100bd74:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100bd78:	e0bffc17 	ldw	r2,-16(fp)
 100bd7c:	10c00017 	ldw	r3,0(r2)
 100bd80:	e0bffc17 	ldw	r2,-16(fp)
 100bd84:	10800117 	ldw	r2,4(r2)
 100bd88:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100bd8c:	e0bffc17 	ldw	r2,-16(fp)
 100bd90:	10c00117 	ldw	r3,4(r2)
 100bd94:	e0bffc17 	ldw	r2,-16(fp)
 100bd98:	10800017 	ldw	r2,0(r2)
 100bd9c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100bda0:	e0fffc17 	ldw	r3,-16(fp)
 100bda4:	e0bffc17 	ldw	r2,-16(fp)
 100bda8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100bdac:	e0fffc17 	ldw	r3,-16(fp)
 100bdb0:	e0bffc17 	ldw	r2,-16(fp)
 100bdb4:	18800015 	stw	r2,0(r3)
 100bdb8:	e0bffe17 	ldw	r2,-8(fp)
 100bdbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bdc0:	e0bffb17 	ldw	r2,-20(fp)
 100bdc4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100bdc8:	e037883a 	mov	sp,fp
 100bdcc:	df000017 	ldw	fp,0(sp)
 100bdd0:	dec00104 	addi	sp,sp,4
 100bdd4:	f800283a 	ret

0100bdd8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100bdd8:	defffb04 	addi	sp,sp,-20
 100bddc:	dfc00415 	stw	ra,16(sp)
 100bde0:	df000315 	stw	fp,12(sp)
 100bde4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100bde8:	d0a01217 	ldw	r2,-32696(gp)
 100bdec:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100bdf0:	d0a72617 	ldw	r2,-25448(gp)
 100bdf4:	10800044 	addi	r2,r2,1
 100bdf8:	d0a72615 	stw	r2,-25448(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100bdfc:	00003106 	br	100bec4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100be00:	e0bffe17 	ldw	r2,-8(fp)
 100be04:	10800017 	ldw	r2,0(r2)
 100be08:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100be0c:	e0bffe17 	ldw	r2,-8(fp)
 100be10:	10800403 	ldbu	r2,16(r2)
 100be14:	10803fcc 	andi	r2,r2,255
 100be18:	1005003a 	cmpeq	r2,r2,zero
 100be1c:	1000051e 	bne	r2,zero,100be34 <alt_tick+0x5c>
 100be20:	d0a72617 	ldw	r2,-25448(gp)
 100be24:	1004c03a 	cmpne	r2,r2,zero
 100be28:	1000021e 	bne	r2,zero,100be34 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100be2c:	e0bffe17 	ldw	r2,-8(fp)
 100be30:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100be34:	e0bffe17 	ldw	r2,-8(fp)
 100be38:	10c00217 	ldw	r3,8(r2)
 100be3c:	d0a72617 	ldw	r2,-25448(gp)
 100be40:	10c01e36 	bltu	r2,r3,100bebc <alt_tick+0xe4>
 100be44:	e0bffe17 	ldw	r2,-8(fp)
 100be48:	10800403 	ldbu	r2,16(r2)
 100be4c:	10803fcc 	andi	r2,r2,255
 100be50:	1004c03a 	cmpne	r2,r2,zero
 100be54:	1000191e 	bne	r2,zero,100bebc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100be58:	e0bffe17 	ldw	r2,-8(fp)
 100be5c:	10c00317 	ldw	r3,12(r2)
 100be60:	e0bffe17 	ldw	r2,-8(fp)
 100be64:	11000517 	ldw	r4,20(r2)
 100be68:	183ee83a 	callr	r3
 100be6c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100be70:	e0bffd17 	ldw	r2,-12(fp)
 100be74:	1004c03a 	cmpne	r2,r2,zero
 100be78:	1000031e 	bne	r2,zero,100be88 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100be7c:	e13ffe17 	ldw	r4,-8(fp)
 100be80:	100bd400 	call	100bd40 <alt_alarm_stop>
 100be84:	00000d06 	br	100bebc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100be88:	e0bffe17 	ldw	r2,-8(fp)
 100be8c:	10c00217 	ldw	r3,8(r2)
 100be90:	e0bffd17 	ldw	r2,-12(fp)
 100be94:	1887883a 	add	r3,r3,r2
 100be98:	e0bffe17 	ldw	r2,-8(fp)
 100be9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100bea0:	e0bffe17 	ldw	r2,-8(fp)
 100bea4:	10c00217 	ldw	r3,8(r2)
 100bea8:	d0a72617 	ldw	r2,-25448(gp)
 100beac:	1880032e 	bgeu	r3,r2,100bebc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100beb0:	e0fffe17 	ldw	r3,-8(fp)
 100beb4:	00800044 	movi	r2,1
 100beb8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100bebc:	e0bfff17 	ldw	r2,-4(fp)
 100bec0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100bec4:	d0e01204 	addi	r3,gp,-32696
 100bec8:	e0bffe17 	ldw	r2,-8(fp)
 100becc:	10ffcc1e 	bne	r2,r3,100be00 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100bed0:	100d0d40 	call	100d0d4 <OSTimeTick>
}
 100bed4:	e037883a 	mov	sp,fp
 100bed8:	dfc00117 	ldw	ra,4(sp)
 100bedc:	df000017 	ldw	fp,0(sp)
 100bee0:	dec00204 	addi	sp,sp,8
 100bee4:	f800283a 	ret

0100bee8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100bee8:	defff704 	addi	sp,sp,-36
 100beec:	dfc00815 	stw	ra,32(sp)
 100bef0:	df000715 	stw	fp,28(sp)
 100bef4:	df000704 	addi	fp,sp,28
 100bef8:	e13ffb15 	stw	r4,-20(fp)
 100befc:	e17ffc15 	stw	r5,-16(fp)
 100bf00:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100bf04:	e0bffb17 	ldw	r2,-20(fp)
 100bf08:	1004803a 	cmplt	r2,r2,zero
 100bf0c:	1000091e 	bne	r2,zero,100bf34 <write+0x4c>
 100bf10:	e13ffb17 	ldw	r4,-20(fp)
 100bf14:	01400304 	movi	r5,12
 100bf18:	10020280 	call	1002028 <__mulsi3>
 100bf1c:	1007883a 	mov	r3,r2
 100bf20:	008040b4 	movhi	r2,258
 100bf24:	10a7ff04 	addi	r2,r2,-24580
 100bf28:	1887883a 	add	r3,r3,r2
 100bf2c:	e0ffff15 	stw	r3,-4(fp)
 100bf30:	00000106 	br	100bf38 <write+0x50>
 100bf34:	e03fff15 	stw	zero,-4(fp)
 100bf38:	e0bfff17 	ldw	r2,-4(fp)
 100bf3c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100bf40:	e0bffa17 	ldw	r2,-24(fp)
 100bf44:	1005003a 	cmpeq	r2,r2,zero
 100bf48:	1000241e 	bne	r2,zero,100bfdc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100bf4c:	e0bffa17 	ldw	r2,-24(fp)
 100bf50:	10800217 	ldw	r2,8(r2)
 100bf54:	108000cc 	andi	r2,r2,3
 100bf58:	1005003a 	cmpeq	r2,r2,zero
 100bf5c:	10001a1e 	bne	r2,zero,100bfc8 <write+0xe0>
 100bf60:	e0bffa17 	ldw	r2,-24(fp)
 100bf64:	10800017 	ldw	r2,0(r2)
 100bf68:	10800617 	ldw	r2,24(r2)
 100bf6c:	1005003a 	cmpeq	r2,r2,zero
 100bf70:	1000151e 	bne	r2,zero,100bfc8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100bf74:	e0bffa17 	ldw	r2,-24(fp)
 100bf78:	10800017 	ldw	r2,0(r2)
 100bf7c:	10800617 	ldw	r2,24(r2)
 100bf80:	e17ffc17 	ldw	r5,-16(fp)
 100bf84:	e1bffd17 	ldw	r6,-12(fp)
 100bf88:	e13ffa17 	ldw	r4,-24(fp)
 100bf8c:	103ee83a 	callr	r2
 100bf90:	e0bff915 	stw	r2,-28(fp)
 100bf94:	e0bff917 	ldw	r2,-28(fp)
 100bf98:	1004403a 	cmpge	r2,r2,zero
 100bf9c:	1000071e 	bne	r2,zero,100bfbc <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100bfa0:	100c00c0 	call	100c00c <alt_get_errno>
 100bfa4:	e0fff917 	ldw	r3,-28(fp)
 100bfa8:	00c7c83a 	sub	r3,zero,r3
 100bfac:	10c00015 	stw	r3,0(r2)
        return -1;
 100bfb0:	00bfffc4 	movi	r2,-1
 100bfb4:	e0bffe15 	stw	r2,-8(fp)
 100bfb8:	00000e06 	br	100bff4 <write+0x10c>
      }
      return rval;
 100bfbc:	e0bff917 	ldw	r2,-28(fp)
 100bfc0:	e0bffe15 	stw	r2,-8(fp)
 100bfc4:	00000b06 	br	100bff4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100bfc8:	100c00c0 	call	100c00c <alt_get_errno>
 100bfcc:	1007883a 	mov	r3,r2
 100bfd0:	00800344 	movi	r2,13
 100bfd4:	18800015 	stw	r2,0(r3)
 100bfd8:	00000406 	br	100bfec <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100bfdc:	100c00c0 	call	100c00c <alt_get_errno>
 100bfe0:	1007883a 	mov	r3,r2
 100bfe4:	00801444 	movi	r2,81
 100bfe8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100bfec:	00bfffc4 	movi	r2,-1
 100bff0:	e0bffe15 	stw	r2,-8(fp)
 100bff4:	e0bffe17 	ldw	r2,-8(fp)
}
 100bff8:	e037883a 	mov	sp,fp
 100bffc:	dfc00117 	ldw	ra,4(sp)
 100c000:	df000017 	ldw	fp,0(sp)
 100c004:	dec00204 	addi	sp,sp,8
 100c008:	f800283a 	ret

0100c00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c00c:	defffd04 	addi	sp,sp,-12
 100c010:	dfc00215 	stw	ra,8(sp)
 100c014:	df000115 	stw	fp,4(sp)
 100c018:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c01c:	008040b4 	movhi	r2,258
 100c020:	10ac9504 	addi	r2,r2,-19884
 100c024:	10800017 	ldw	r2,0(r2)
 100c028:	1005003a 	cmpeq	r2,r2,zero
 100c02c:	1000061e 	bne	r2,zero,100c048 <alt_get_errno+0x3c>
 100c030:	008040b4 	movhi	r2,258
 100c034:	10ac9504 	addi	r2,r2,-19884
 100c038:	10800017 	ldw	r2,0(r2)
 100c03c:	103ee83a 	callr	r2
 100c040:	e0bfff15 	stw	r2,-4(fp)
 100c044:	00000306 	br	100c054 <alt_get_errno+0x48>
 100c048:	008040b4 	movhi	r2,258
 100c04c:	10b3a504 	addi	r2,r2,-12652
 100c050:	e0bfff15 	stw	r2,-4(fp)
 100c054:	e0bfff17 	ldw	r2,-4(fp)
}
 100c058:	e037883a 	mov	sp,fp
 100c05c:	dfc00117 	ldw	ra,4(sp)
 100c060:	df000017 	ldw	fp,0(sp)
 100c064:	dec00204 	addi	sp,sp,8
 100c068:	f800283a 	ret

0100c06c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 100c06c:	deffdf04 	addi	sp,sp,-132
 100c070:	dfc02015 	stw	ra,128(sp)
 100c074:	df001f15 	stw	fp,124(sp)
 100c078:	df001f04 	addi	fp,sp,124
 100c07c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100c080:	e17fe204 	addi	r5,fp,-120
 100c084:	01003fc4 	movi	r4,255
 100c088:	1014bb40 	call	1014bb4 <OSTaskQuery>
 100c08c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100c090:	e0bffe83 	ldbu	r2,-6(fp)
 100c094:	10803fcc 	andi	r2,r2,255
 100c098:	1004c03a 	cmpne	r2,r2,zero
 100c09c:	1000191e 	bne	r2,zero,100c104 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 100c0a0:	e0bfee83 	ldbu	r2,-70(fp)
 100c0a4:	10803fcc 	andi	r2,r2,255
 100c0a8:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 100c0ac:	d1272817 	ldw	r4,-25440(gp)
 100c0b0:	e17ffd04 	addi	r5,fp,-12
 100c0b4:	10131000 	call	1013100 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 100c0b8:	e0bffe43 	ldbu	r2,-7(fp)
 100c0bc:	10803fcc 	andi	r2,r2,255
 100c0c0:	1005003a 	cmpeq	r2,r2,zero
 100c0c4:	1000071e 	bne	r2,zero,100c0e4 <__env_lock+0x78>
 100c0c8:	d0e01417 	ldw	r3,-32688(gp)
 100c0cc:	e0bfe117 	ldw	r2,-124(fp)
 100c0d0:	10c0041e 	bne	r2,r3,100c0e4 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 100c0d4:	d0a72717 	ldw	r2,-25444(gp)
 100c0d8:	10800044 	addi	r2,r2,1
 100c0dc:	d0a72715 	stw	r2,-25444(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 100c0e0:	00000806 	br	100c104 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 100c0e4:	d1272817 	ldw	r4,-25440(gp)
 100c0e8:	e1bffe84 	addi	r6,fp,-6
 100c0ec:	000b883a 	mov	r5,zero
 100c0f0:	1012be00 	call	1012be0 <OSSemPend>
    locks  = 1;
 100c0f4:	00800044 	movi	r2,1
 100c0f8:	d0a72715 	stw	r2,-25444(gp)
    lockid = id;
 100c0fc:	e0bfe117 	ldw	r2,-124(fp)
 100c100:	d0a01415 	stw	r2,-32688(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100c104:	e037883a 	mov	sp,fp
 100c108:	dfc00117 	ldw	ra,4(sp)
 100c10c:	df000017 	ldw	fp,0(sp)
 100c110:	dec00204 	addi	sp,sp,8
 100c114:	f800283a 	ret

0100c118 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 100c118:	defffd04 	addi	sp,sp,-12
 100c11c:	dfc00215 	stw	ra,8(sp)
 100c120:	df000115 	stw	fp,4(sp)
 100c124:	df000104 	addi	fp,sp,4
 100c128:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 100c12c:	d0a72717 	ldw	r2,-25444(gp)
 100c130:	1005003a 	cmpeq	r2,r2,zero
 100c134:	10000a1e 	bne	r2,zero,100c160 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 100c138:	d0a72717 	ldw	r2,-25444(gp)
 100c13c:	10bfffc4 	addi	r2,r2,-1
 100c140:	d0a72715 	stw	r2,-25444(gp)
 100c144:	d0a72717 	ldw	r2,-25444(gp)
 100c148:	1004c03a 	cmpne	r2,r2,zero
 100c14c:	1000041e 	bne	r2,zero,100c160 <__env_unlock+0x48>
  {
    lockid = -1;
 100c150:	00bfffc4 	movi	r2,-1
 100c154:	d0a01415 	stw	r2,-32688(gp)
    OSSemPost( alt_envsem );
 100c158:	d1272817 	ldw	r4,-25440(gp)
 100c15c:	1012fd80 	call	1012fd8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100c160:	e037883a 	mov	sp,fp
 100c164:	dfc00117 	ldw	ra,4(sp)
 100c168:	df000017 	ldw	fp,0(sp)
 100c16c:	dec00204 	addi	sp,sp,8
 100c170:	f800283a 	ret

0100c174 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 100c174:	deffdb04 	addi	sp,sp,-148
 100c178:	dfc02415 	stw	ra,144(sp)
 100c17c:	df002315 	stw	fp,140(sp)
 100c180:	df002304 	addi	fp,sp,140
 100c184:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100c188:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 100c18c:	008040b4 	movhi	r2,258
 100c190:	10b3b304 	addi	r2,r2,-12596
 100c194:	10800003 	ldbu	r2,0(r2)
 100c198:	10803fcc 	andi	r2,r2,255
 100c19c:	10800058 	cmpnei	r2,r2,1
 100c1a0:	1000311e 	bne	r2,zero,100c268 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100c1a4:	e17fe204 	addi	r5,fp,-120
 100c1a8:	01003fc4 	movi	r4,255
 100c1ac:	1014bb40 	call	1014bb4 <OSTaskQuery>
 100c1b0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100c1b4:	e0bffe83 	ldbu	r2,-6(fp)
 100c1b8:	10803fcc 	andi	r2,r2,255
 100c1bc:	1004c03a 	cmpne	r2,r2,zero
 100c1c0:	1000291e 	bne	r2,zero,100c268 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 100c1c4:	e0bfee83 	ldbu	r2,-70(fp)
 100c1c8:	10803fcc 	andi	r2,r2,255
 100c1cc:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 100c1d0:	d1272a17 	ldw	r4,-25432(gp)
 100c1d4:	e17ffd04 	addi	r5,fp,-12
 100c1d8:	10131000 	call	1013100 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c1dc:	0005303a 	rdctl	r2,status
 100c1e0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c1e4:	e0ffdf17 	ldw	r3,-132(fp)
 100c1e8:	00bfff84 	movi	r2,-2
 100c1ec:	1884703a 	and	r2,r3,r2
 100c1f0:	1001703a 	wrctl	status,r2
  
  return context;
 100c1f4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 100c1f8:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 100c1fc:	e0bffd0b 	ldhu	r2,-12(fp)
 100c200:	10bfffcc 	andi	r2,r2,65535
 100c204:	1004c03a 	cmpne	r2,r2,zero
 100c208:	10000b1e 	bne	r2,zero,100c238 <__malloc_lock+0xc4>
 100c20c:	d0e01517 	ldw	r3,-32684(gp)
 100c210:	e0bfe117 	ldw	r2,-124(fp)
 100c214:	10c0081e 	bne	r2,r3,100c238 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 100c218:	d0a72917 	ldw	r2,-25436(gp)
 100c21c:	10800044 	addi	r2,r2,1
 100c220:	d0a72915 	stw	r2,-25436(gp)
 100c224:	e0bfe017 	ldw	r2,-128(fp)
 100c228:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c22c:	e0bfde17 	ldw	r2,-136(fp)
 100c230:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 100c234:	00000c06 	br	100c268 <__malloc_lock+0xf4>
 100c238:	e0bfe017 	ldw	r2,-128(fp)
 100c23c:	e0bfdd15 	stw	r2,-140(fp)
 100c240:	e0bfdd17 	ldw	r2,-140(fp)
 100c244:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 100c248:	d1272a17 	ldw	r4,-25432(gp)
 100c24c:	e1bffe84 	addi	r6,fp,-6
 100c250:	000b883a 	mov	r5,zero
 100c254:	1012be00 	call	1012be0 <OSSemPend>
    locks  = 1;
 100c258:	00800044 	movi	r2,1
 100c25c:	d0a72915 	stw	r2,-25436(gp)
    lockid = id;
 100c260:	e0bfe117 	ldw	r2,-124(fp)
 100c264:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100c268:	e037883a 	mov	sp,fp
 100c26c:	dfc00117 	ldw	ra,4(sp)
 100c270:	df000017 	ldw	fp,0(sp)
 100c274:	dec00204 	addi	sp,sp,8
 100c278:	f800283a 	ret

0100c27c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100c27c:	defff804 	addi	sp,sp,-32
 100c280:	dfc00715 	stw	ra,28(sp)
 100c284:	df000615 	stw	fp,24(sp)
 100c288:	df000604 	addi	fp,sp,24
 100c28c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100c290:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 100c294:	008040b4 	movhi	r2,258
 100c298:	10b3b304 	addi	r2,r2,-12596
 100c29c:	10800003 	ldbu	r2,0(r2)
 100c2a0:	10803fcc 	andi	r2,r2,255
 100c2a4:	10800058 	cmpnei	r2,r2,1
 100c2a8:	1000231e 	bne	r2,zero,100c338 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c2ac:	0005303a 	rdctl	r2,status
 100c2b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c2b4:	e0fffd17 	ldw	r3,-12(fp)
 100c2b8:	00bfff84 	movi	r2,-2
 100c2bc:	1884703a 	and	r2,r3,r2
 100c2c0:	1001703a 	wrctl	status,r2
  
  return context;
 100c2c4:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 100c2c8:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 100c2cc:	d0a72917 	ldw	r2,-25436(gp)
 100c2d0:	1004c03a 	cmpne	r2,r2,zero
 100c2d4:	1000051e 	bne	r2,zero,100c2ec <__malloc_unlock+0x70>
 100c2d8:	e0bffe17 	ldw	r2,-8(fp)
 100c2dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c2e0:	e0bffc17 	ldw	r2,-16(fp)
 100c2e4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 100c2e8:	00001306 	br	100c338 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 100c2ec:	d0a72917 	ldw	r2,-25436(gp)
 100c2f0:	10bfffc4 	addi	r2,r2,-1
 100c2f4:	d0a72915 	stw	r2,-25436(gp)
 100c2f8:	d0a72917 	ldw	r2,-25436(gp)
 100c2fc:	1004c03a 	cmpne	r2,r2,zero
 100c300:	1000091e 	bne	r2,zero,100c328 <__malloc_unlock+0xac>
  {
    lockid = -1;
 100c304:	00bfffc4 	movi	r2,-1
 100c308:	d0a01515 	stw	r2,-32684(gp)
 100c30c:	e0bffe17 	ldw	r2,-8(fp)
 100c310:	e0bffb15 	stw	r2,-20(fp)
 100c314:	e0bffb17 	ldw	r2,-20(fp)
 100c318:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 100c31c:	d1272a17 	ldw	r4,-25432(gp)
 100c320:	1012fd80 	call	1012fd8 <OSSemPost>
 100c324:	00000406 	br	100c338 <__malloc_unlock+0xbc>
 100c328:	e0bffe17 	ldw	r2,-8(fp)
 100c32c:	e0bffa15 	stw	r2,-24(fp)
 100c330:	e0bffa17 	ldw	r2,-24(fp)
 100c334:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100c338:	e037883a 	mov	sp,fp
 100c33c:	dfc00117 	ldw	ra,4(sp)
 100c340:	df000017 	ldw	fp,0(sp)
 100c344:	dec00204 	addi	sp,sp,8
 100c348:	f800283a 	ret

0100c34c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100c34c:	defff604 	addi	sp,sp,-40
 100c350:	dfc00915 	stw	ra,36(sp)
 100c354:	df000815 	stw	fp,32(sp)
 100c358:	df000804 	addi	fp,sp,32
 100c35c:	e13ffc15 	stw	r4,-16(fp)
 100c360:	e17ffd15 	stw	r5,-12(fp)
 100c364:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100c368:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100c36c:	e0bffe17 	ldw	r2,-8(fp)
 100c370:	1004c03a 	cmpne	r2,r2,zero
 100c374:	1000021e 	bne	r2,zero,100c380 <OSEventNameGet+0x34>
        return (0);
 100c378:	e03fff15 	stw	zero,-4(fp)
 100c37c:	00003906 	br	100c464 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100c380:	e0bffc17 	ldw	r2,-16(fp)
 100c384:	1004c03a 	cmpne	r2,r2,zero
 100c388:	1000051e 	bne	r2,zero,100c3a0 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 100c38c:	e0fffe17 	ldw	r3,-8(fp)
 100c390:	00800104 	movi	r2,4
 100c394:	18800005 	stb	r2,0(r3)
        return (0);
 100c398:	e03fff15 	stw	zero,-4(fp)
 100c39c:	00003106 	br	100c464 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100c3a0:	e0bffd17 	ldw	r2,-12(fp)
 100c3a4:	1004c03a 	cmpne	r2,r2,zero
 100c3a8:	1000051e 	bne	r2,zero,100c3c0 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 100c3ac:	e0fffe17 	ldw	r3,-8(fp)
 100c3b0:	00800304 	movi	r2,12
 100c3b4:	18800005 	stb	r2,0(r3)
        return (0);
 100c3b8:	e03fff15 	stw	zero,-4(fp)
 100c3bc:	00002906 	br	100c464 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100c3c0:	d0a73d03 	ldbu	r2,-25356(gp)
 100c3c4:	10803fcc 	andi	r2,r2,255
 100c3c8:	1005003a 	cmpeq	r2,r2,zero
 100c3cc:	1000051e 	bne	r2,zero,100c3e4 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 100c3d0:	e0fffe17 	ldw	r3,-8(fp)
 100c3d4:	00800444 	movi	r2,17
 100c3d8:	18800005 	stb	r2,0(r3)
        return (0);
 100c3dc:	e03fff15 	stw	zero,-4(fp)
 100c3e0:	00002006 	br	100c464 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 100c3e4:	e0bffc17 	ldw	r2,-16(fp)
 100c3e8:	10800003 	ldbu	r2,0(r2)
 100c3ec:	10803fcc 	andi	r2,r2,255
 100c3f0:	10bfffc4 	addi	r2,r2,-1
 100c3f4:	10800128 	cmpgeui	r2,r2,4
 100c3f8:	1000161e 	bne	r2,zero,100c454 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c3fc:	0005303a 	rdctl	r2,status
 100c400:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c404:	e0fff917 	ldw	r3,-28(fp)
 100c408:	00bfff84 	movi	r2,-2
 100c40c:	1884703a 	and	r2,r3,r2
 100c410:	1001703a 	wrctl	status,r2
  
  return context;
 100c414:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 100c418:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 100c41c:	e0bffc17 	ldw	r2,-16(fp)
 100c420:	11400384 	addi	r5,r2,14
 100c424:	e13ffd17 	ldw	r4,-12(fp)
 100c428:	100ded40 	call	100ded4 <OS_StrCopy>
 100c42c:	e0bffb05 	stb	r2,-20(fp)
 100c430:	e0bffa17 	ldw	r2,-24(fp)
 100c434:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c438:	e0bff817 	ldw	r2,-32(fp)
 100c43c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100c440:	e0bffe17 	ldw	r2,-8(fp)
 100c444:	10000005 	stb	zero,0(r2)
    return (len);
 100c448:	e0bffb03 	ldbu	r2,-20(fp)
 100c44c:	e0bfff15 	stw	r2,-4(fp)
 100c450:	00000406 	br	100c464 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100c454:	e0fffe17 	ldw	r3,-8(fp)
 100c458:	00800044 	movi	r2,1
 100c45c:	18800005 	stb	r2,0(r3)
             return (0);
 100c460:	e03fff15 	stw	zero,-4(fp)
 100c464:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 100c468:	e037883a 	mov	sp,fp
 100c46c:	dfc00117 	ldw	ra,4(sp)
 100c470:	df000017 	ldw	fp,0(sp)
 100c474:	dec00204 	addi	sp,sp,8
 100c478:	f800283a 	ret

0100c47c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100c47c:	defff604 	addi	sp,sp,-40
 100c480:	dfc00915 	stw	ra,36(sp)
 100c484:	df000815 	stw	fp,32(sp)
 100c488:	df000804 	addi	fp,sp,32
 100c48c:	e13ffd15 	stw	r4,-12(fp)
 100c490:	e17ffe15 	stw	r5,-8(fp)
 100c494:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100c498:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100c49c:	e0bfff17 	ldw	r2,-4(fp)
 100c4a0:	1005003a 	cmpeq	r2,r2,zero
 100c4a4:	1000411e 	bne	r2,zero,100c5ac <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100c4a8:	e0bffd17 	ldw	r2,-12(fp)
 100c4ac:	1004c03a 	cmpne	r2,r2,zero
 100c4b0:	1000041e 	bne	r2,zero,100c4c4 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 100c4b4:	e0ffff17 	ldw	r3,-4(fp)
 100c4b8:	00800104 	movi	r2,4
 100c4bc:	18800005 	stb	r2,0(r3)
        return;
 100c4c0:	00003a06 	br	100c5ac <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100c4c4:	e0bffe17 	ldw	r2,-8(fp)
 100c4c8:	1004c03a 	cmpne	r2,r2,zero
 100c4cc:	1000041e 	bne	r2,zero,100c4e0 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 100c4d0:	e0ffff17 	ldw	r3,-4(fp)
 100c4d4:	00800304 	movi	r2,12
 100c4d8:	18800005 	stb	r2,0(r3)
        return;
 100c4dc:	00003306 	br	100c5ac <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100c4e0:	d0a73d03 	ldbu	r2,-25356(gp)
 100c4e4:	10803fcc 	andi	r2,r2,255
 100c4e8:	1005003a 	cmpeq	r2,r2,zero
 100c4ec:	1000041e 	bne	r2,zero,100c500 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 100c4f0:	e0ffff17 	ldw	r3,-4(fp)
 100c4f4:	00800484 	movi	r2,18
 100c4f8:	18800005 	stb	r2,0(r3)
        return;
 100c4fc:	00002b06 	br	100c5ac <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 100c500:	e0bffd17 	ldw	r2,-12(fp)
 100c504:	10800003 	ldbu	r2,0(r2)
 100c508:	10803fcc 	andi	r2,r2,255
 100c50c:	10bfffc4 	addi	r2,r2,-1
 100c510:	10800128 	cmpgeui	r2,r2,4
 100c514:	10000f1e 	bne	r2,zero,100c554 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c518:	0005303a 	rdctl	r2,status
 100c51c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c520:	e0fffa17 	ldw	r3,-24(fp)
 100c524:	00bfff84 	movi	r2,-2
 100c528:	1884703a 	and	r2,r3,r2
 100c52c:	1001703a 	wrctl	status,r2
  
  return context;
 100c530:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 100c534:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 100c538:	e13ffe17 	ldw	r4,-8(fp)
 100c53c:	100df540 	call	100df54 <OS_StrLen>
 100c540:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 100c544:	e0bffc03 	ldbu	r2,-16(fp)
 100c548:	10800828 	cmpgeui	r2,r2,32
 100c54c:	1000051e 	bne	r2,zero,100c564 <OSEventNameSet+0xe8>
 100c550:	00000c06 	br	100c584 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100c554:	e0ffff17 	ldw	r3,-4(fp)
 100c558:	00800044 	movi	r2,1
 100c55c:	18800005 	stb	r2,0(r3)
             return;
 100c560:	00001206 	br	100c5ac <OSEventNameSet+0x130>
 100c564:	e0bffb17 	ldw	r2,-20(fp)
 100c568:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c56c:	e0bff917 	ldw	r2,-28(fp)
 100c570:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 100c574:	e0ffff17 	ldw	r3,-4(fp)
 100c578:	008002c4 	movi	r2,11
 100c57c:	18800005 	stb	r2,0(r3)
        return;
 100c580:	00000a06 	br	100c5ac <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 100c584:	e0bffd17 	ldw	r2,-12(fp)
 100c588:	11000384 	addi	r4,r2,14
 100c58c:	e17ffe17 	ldw	r5,-8(fp)
 100c590:	100ded40 	call	100ded4 <OS_StrCopy>
 100c594:	e0bffb17 	ldw	r2,-20(fp)
 100c598:	e0bff815 	stw	r2,-32(fp)
 100c59c:	e0bff817 	ldw	r2,-32(fp)
 100c5a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100c5a4:	e0bfff17 	ldw	r2,-4(fp)
 100c5a8:	10000005 	stb	zero,0(r2)
}
 100c5ac:	e037883a 	mov	sp,fp
 100c5b0:	dfc00117 	ldw	ra,4(sp)
 100c5b4:	df000017 	ldw	fp,0(sp)
 100c5b8:	dec00204 	addi	sp,sp,8
 100c5bc:	f800283a 	ret

0100c5c0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100c5c0:	deffe704 	addi	sp,sp,-100
 100c5c4:	dfc01815 	stw	ra,96(sp)
 100c5c8:	df001715 	stw	fp,92(sp)
 100c5cc:	df001704 	addi	fp,sp,92
 100c5d0:	e13ff615 	stw	r4,-40(fp)
 100c5d4:	e17ff715 	stw	r5,-36(fp)
 100c5d8:	e1bff815 	stw	r6,-32(fp)
 100c5dc:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 100c5e0:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 100c5e4:	e0800217 	ldw	r2,8(fp)
 100c5e8:	1004c03a 	cmpne	r2,r2,zero
 100c5ec:	1000021e 	bne	r2,zero,100c5f8 <OSEventPendMulti+0x38>
        return (0);
 100c5f0:	e03fff15 	stw	zero,-4(fp)
 100c5f4:	00019906 	br	100cc5c <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 100c5f8:	e0bff617 	ldw	r2,-40(fp)
 100c5fc:	1004c03a 	cmpne	r2,r2,zero
 100c600:	1000051e 	bne	r2,zero,100c618 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 100c604:	e0c00217 	ldw	r3,8(fp)
 100c608:	00800104 	movi	r2,4
 100c60c:	18800005 	stb	r2,0(r3)
        return (0);
 100c610:	e03fff15 	stw	zero,-4(fp)
 100c614:	00019106 	br	100cc5c <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 100c618:	e0bff717 	ldw	r2,-36(fp)
 100c61c:	1004c03a 	cmpne	r2,r2,zero
 100c620:	1000051e 	bne	r2,zero,100c638 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 100c624:	e0c00217 	ldw	r3,8(fp)
 100c628:	00800104 	movi	r2,4
 100c62c:	18800005 	stb	r2,0(r3)
        return (0);
 100c630:	e03fff15 	stw	zero,-4(fp)
 100c634:	00018906 	br	100cc5c <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 100c638:	e0bff817 	ldw	r2,-32(fp)
 100c63c:	1004c03a 	cmpne	r2,r2,zero
 100c640:	1000051e 	bne	r2,zero,100c658 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 100c644:	e0c00217 	ldw	r3,8(fp)
 100c648:	00800104 	movi	r2,4
 100c64c:	18800005 	stb	r2,0(r3)
        return (0);
 100c650:	e03fff15 	stw	zero,-4(fp)
 100c654:	00018106 	br	100cc5c <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 100c658:	e0bff717 	ldw	r2,-36(fp)
 100c65c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 100c660:	e0bff617 	ldw	r2,-40(fp)
 100c664:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 100c668:	e0bff517 	ldw	r2,-44(fp)
 100c66c:	10800017 	ldw	r2,0(r2)
 100c670:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 100c674:	00001806 	br	100c6d8 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 100c678:	e0bff417 	ldw	r2,-48(fp)
 100c67c:	10800003 	ldbu	r2,0(r2)
 100c680:	10803fcc 	andi	r2,r2,255
 100c684:	e0bffe15 	stw	r2,-8(fp)
 100c688:	e0fffe17 	ldw	r3,-8(fp)
 100c68c:	188000a0 	cmpeqi	r2,r3,2
 100c690:	10000b1e 	bne	r2,zero,100c6c0 <OSEventPendMulti+0x100>
 100c694:	e0fffe17 	ldw	r3,-8(fp)
 100c698:	188000e0 	cmpeqi	r2,r3,3
 100c69c:	1000081e 	bne	r2,zero,100c6c0 <OSEventPendMulti+0x100>
 100c6a0:	e0fffe17 	ldw	r3,-8(fp)
 100c6a4:	18800060 	cmpeqi	r2,r3,1
 100c6a8:	1000051e 	bne	r2,zero,100c6c0 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 100c6ac:	e0c00217 	ldw	r3,8(fp)
 100c6b0:	00800044 	movi	r2,1
 100c6b4:	18800005 	stb	r2,0(r3)
                 return (0);
 100c6b8:	e03fff15 	stw	zero,-4(fp)
 100c6bc:	00016706 	br	100cc5c <OSEventPendMulti+0x69c>
        }
        pevents++;
 100c6c0:	e0bff517 	ldw	r2,-44(fp)
 100c6c4:	10800104 	addi	r2,r2,4
 100c6c8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100c6cc:	e0bff517 	ldw	r2,-44(fp)
 100c6d0:	10800017 	ldw	r2,0(r2)
 100c6d4:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 100c6d8:	e0bff417 	ldw	r2,-48(fp)
 100c6dc:	1004c03a 	cmpne	r2,r2,zero
 100c6e0:	103fe51e 	bne	r2,zero,100c678 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 100c6e4:	d0a73d03 	ldbu	r2,-25356(gp)
 100c6e8:	10803fcc 	andi	r2,r2,255
 100c6ec:	1005003a 	cmpeq	r2,r2,zero
 100c6f0:	1000051e 	bne	r2,zero,100c708 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 100c6f4:	e0c00217 	ldw	r3,8(fp)
 100c6f8:	00800084 	movi	r2,2
 100c6fc:	18800005 	stb	r2,0(r3)
        return (0);
 100c700:	e03fff15 	stw	zero,-4(fp)
 100c704:	00015506 	br	100cc5c <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 100c708:	d0a72c03 	ldbu	r2,-25424(gp)
 100c70c:	10803fcc 	andi	r2,r2,255
 100c710:	1005003a 	cmpeq	r2,r2,zero
 100c714:	1000051e 	bne	r2,zero,100c72c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 100c718:	e0c00217 	ldw	r3,8(fp)
 100c71c:	00800344 	movi	r2,13
 100c720:	18800005 	stb	r2,0(r3)
        return (0);
 100c724:	e03fff15 	stw	zero,-4(fp)
 100c728:	00014c06 	br	100cc5c <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c72c:	0005303a 	rdctl	r2,status
 100c730:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c734:	e0ffef17 	ldw	r3,-68(fp)
 100c738:	00bfff84 	movi	r2,-2
 100c73c:	1884703a 	and	r2,r3,r2
 100c740:	1001703a 	wrctl	status,r2
  
  return context;
 100c744:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 100c748:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 100c74c:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 100c750:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 100c754:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 100c758:	e0bff617 	ldw	r2,-40(fp)
 100c75c:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 100c760:	e0bff517 	ldw	r2,-44(fp)
 100c764:	10800017 	ldw	r2,0(r2)
 100c768:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100c76c:	00008f06 	br	100c9ac <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 100c770:	e0bff417 	ldw	r2,-48(fp)
 100c774:	10800003 	ldbu	r2,0(r2)
 100c778:	10803fcc 	andi	r2,r2,255
 100c77c:	e0bffd15 	stw	r2,-12(fp)
 100c780:	e0fffd17 	ldw	r3,-12(fp)
 100c784:	188000a0 	cmpeqi	r2,r3,2
 100c788:	1000441e 	bne	r2,zero,100c89c <OSEventPendMulti+0x2dc>
 100c78c:	e0fffd17 	ldw	r3,-12(fp)
 100c790:	188000e0 	cmpeqi	r2,r3,3
 100c794:	1000041e 	bne	r2,zero,100c7a8 <OSEventPendMulti+0x1e8>
 100c798:	e0fffd17 	ldw	r3,-12(fp)
 100c79c:	18800060 	cmpeqi	r2,r3,1
 100c7a0:	1000211e 	bne	r2,zero,100c828 <OSEventPendMulti+0x268>
 100c7a4:	00006f06 	br	100c964 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 100c7a8:	e0bff417 	ldw	r2,-48(fp)
 100c7ac:	1080020b 	ldhu	r2,8(r2)
 100c7b0:	10bfffcc 	andi	r2,r2,65535
 100c7b4:	1005003a 	cmpeq	r2,r2,zero
 100c7b8:	1000171e 	bne	r2,zero,100c818 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 100c7bc:	e0bff417 	ldw	r2,-48(fp)
 100c7c0:	1080020b 	ldhu	r2,8(r2)
 100c7c4:	10bfffc4 	addi	r2,r2,-1
 100c7c8:	1007883a 	mov	r3,r2
 100c7cc:	e0bff417 	ldw	r2,-48(fp)
 100c7d0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 100c7d4:	e0fff717 	ldw	r3,-36(fp)
 100c7d8:	e0bff417 	ldw	r2,-48(fp)
 100c7dc:	18800015 	stw	r2,0(r3)
 100c7e0:	e0bff717 	ldw	r2,-36(fp)
 100c7e4:	10800104 	addi	r2,r2,4
 100c7e8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 100c7ec:	00800044 	movi	r2,1
 100c7f0:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 100c7f4:	e0bff817 	ldw	r2,-32(fp)
 100c7f8:	10000015 	stw	zero,0(r2)
 100c7fc:	e0bff817 	ldw	r2,-32(fp)
 100c800:	10800104 	addi	r2,r2,4
 100c804:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 100c808:	e0bff18b 	ldhu	r2,-58(fp)
 100c80c:	10800044 	addi	r2,r2,1
 100c810:	e0bff18d 	sth	r2,-58(fp)
 100c814:	00005f06 	br	100c994 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 100c818:	e0bff103 	ldbu	r2,-60(fp)
 100c81c:	10800054 	ori	r2,r2,1
 100c820:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100c824:	00005b06 	br	100c994 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 100c828:	e0bff417 	ldw	r2,-48(fp)
 100c82c:	10800117 	ldw	r2,4(r2)
 100c830:	1005003a 	cmpeq	r2,r2,zero
 100c834:	1000151e 	bne	r2,zero,100c88c <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 100c838:	e0bff417 	ldw	r2,-48(fp)
 100c83c:	10c00117 	ldw	r3,4(r2)
 100c840:	e0bff817 	ldw	r2,-32(fp)
 100c844:	10c00015 	stw	r3,0(r2)
 100c848:	e0bff817 	ldw	r2,-32(fp)
 100c84c:	10800104 	addi	r2,r2,4
 100c850:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 100c854:	e0bff417 	ldw	r2,-48(fp)
 100c858:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 100c85c:	e0fff717 	ldw	r3,-36(fp)
 100c860:	e0bff417 	ldw	r2,-48(fp)
 100c864:	18800015 	stw	r2,0(r3)
 100c868:	e0bff717 	ldw	r2,-36(fp)
 100c86c:	10800104 	addi	r2,r2,4
 100c870:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 100c874:	00800044 	movi	r2,1
 100c878:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100c87c:	e0bff18b 	ldhu	r2,-58(fp)
 100c880:	10800044 	addi	r2,r2,1
 100c884:	e0bff18d 	sth	r2,-58(fp)
 100c888:	00004206 	br	100c994 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 100c88c:	e0bff103 	ldbu	r2,-60(fp)
 100c890:	10800094 	ori	r2,r2,2
 100c894:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100c898:	00003e06 	br	100c994 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 100c89c:	e0bff417 	ldw	r2,-48(fp)
 100c8a0:	10800117 	ldw	r2,4(r2)
 100c8a4:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 100c8a8:	e0bff317 	ldw	r2,-52(fp)
 100c8ac:	1080058b 	ldhu	r2,22(r2)
 100c8b0:	10bfffcc 	andi	r2,r2,65535
 100c8b4:	1005003a 	cmpeq	r2,r2,zero
 100c8b8:	1000261e 	bne	r2,zero,100c954 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 100c8bc:	e0bff317 	ldw	r2,-52(fp)
 100c8c0:	11000417 	ldw	r4,16(r2)
 100c8c4:	20c00017 	ldw	r3,0(r4)
 100c8c8:	e0bff817 	ldw	r2,-32(fp)
 100c8cc:	10c00015 	stw	r3,0(r2)
 100c8d0:	e0bff817 	ldw	r2,-32(fp)
 100c8d4:	10800104 	addi	r2,r2,4
 100c8d8:	e0bff815 	stw	r2,-32(fp)
 100c8dc:	20c00104 	addi	r3,r4,4
 100c8e0:	e0bff317 	ldw	r2,-52(fp)
 100c8e4:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 100c8e8:	e0bff317 	ldw	r2,-52(fp)
 100c8ec:	10c00417 	ldw	r3,16(r2)
 100c8f0:	e0bff317 	ldw	r2,-52(fp)
 100c8f4:	10800217 	ldw	r2,8(r2)
 100c8f8:	1880041e 	bne	r3,r2,100c90c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 100c8fc:	e0bff317 	ldw	r2,-52(fp)
 100c900:	10c00117 	ldw	r3,4(r2)
 100c904:	e0bff317 	ldw	r2,-52(fp)
 100c908:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 100c90c:	e0bff317 	ldw	r2,-52(fp)
 100c910:	1080058b 	ldhu	r2,22(r2)
 100c914:	10bfffc4 	addi	r2,r2,-1
 100c918:	1007883a 	mov	r3,r2
 100c91c:	e0bff317 	ldw	r2,-52(fp)
 100c920:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 100c924:	e0fff717 	ldw	r3,-36(fp)
 100c928:	e0bff417 	ldw	r2,-48(fp)
 100c92c:	18800015 	stw	r2,0(r3)
 100c930:	e0bff717 	ldw	r2,-36(fp)
 100c934:	10800104 	addi	r2,r2,4
 100c938:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 100c93c:	00800044 	movi	r2,1
 100c940:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100c944:	e0bff18b 	ldhu	r2,-58(fp)
 100c948:	10800044 	addi	r2,r2,1
 100c94c:	e0bff18d 	sth	r2,-58(fp)
 100c950:	00001006 	br	100c994 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 100c954:	e0bff103 	ldbu	r2,-60(fp)
 100c958:	10800114 	ori	r2,r2,4
 100c95c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100c960:	00000c06 	br	100c994 <OSEventPendMulti+0x3d4>
 100c964:	e0bff017 	ldw	r2,-64(fp)
 100c968:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c96c:	e0bfee17 	ldw	r2,-72(fp)
 100c970:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 100c974:	e0bff717 	ldw	r2,-36(fp)
 100c978:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 100c97c:	e0c00217 	ldw	r3,8(fp)
 100c980:	00800044 	movi	r2,1
 100c984:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 100c988:	e0bff18b 	ldhu	r2,-58(fp)
 100c98c:	e0bfff15 	stw	r2,-4(fp)
 100c990:	0000b206 	br	100cc5c <OSEventPendMulti+0x69c>
        }
        pevents++;
 100c994:	e0bff517 	ldw	r2,-44(fp)
 100c998:	10800104 	addi	r2,r2,4
 100c99c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100c9a0:	e0bff517 	ldw	r2,-44(fp)
 100c9a4:	10800017 	ldw	r2,0(r2)
 100c9a8:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100c9ac:	e0bff417 	ldw	r2,-48(fp)
 100c9b0:	1004c03a 	cmpne	r2,r2,zero
 100c9b4:	103f6e1e 	bne	r2,zero,100c770 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 100c9b8:	e0bff203 	ldbu	r2,-56(fp)
 100c9bc:	10800058 	cmpnei	r2,r2,1
 100c9c0:	10000b1e 	bne	r2,zero,100c9f0 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 100c9c4:	e0bff717 	ldw	r2,-36(fp)
 100c9c8:	10000015 	stw	zero,0(r2)
 100c9cc:	e0bff017 	ldw	r2,-64(fp)
 100c9d0:	e0bfed15 	stw	r2,-76(fp)
 100c9d4:	e0bfed17 	ldw	r2,-76(fp)
 100c9d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 100c9dc:	e0800217 	ldw	r2,8(fp)
 100c9e0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 100c9e4:	e0fff18b 	ldhu	r3,-58(fp)
 100c9e8:	e0ffff15 	stw	r3,-4(fp)
 100c9ec:	00009b06 	br	100cc5c <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 100c9f0:	d1273e17 	ldw	r4,-25352(gp)
 100c9f4:	d0a73e17 	ldw	r2,-25352(gp)
 100c9f8:	10c00c03 	ldbu	r3,48(r2)
 100c9fc:	e0bff103 	ldbu	r2,-60(fp)
 100ca00:	1884b03a 	or	r2,r3,r2
 100ca04:	1007883a 	mov	r3,r2
 100ca08:	00bfe004 	movi	r2,-128
 100ca0c:	1884b03a 	or	r2,r3,r2
 100ca10:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100ca14:	d0a73e17 	ldw	r2,-25352(gp)
 100ca18:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 100ca1c:	d0e73e17 	ldw	r3,-25352(gp)
 100ca20:	e0bff90b 	ldhu	r2,-28(fp)
 100ca24:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 100ca28:	e13ff617 	ldw	r4,-40(fp)
 100ca2c:	100d5f40 	call	100d5f4 <OS_EventTaskWaitMulti>
 100ca30:	e0bff017 	ldw	r2,-64(fp)
 100ca34:	e0bfec15 	stw	r2,-80(fp)
 100ca38:	e0bfec17 	ldw	r2,-80(fp)
 100ca3c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 100ca40:	100dd900 	call	100dd90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ca44:	0005303a 	rdctl	r2,status
 100ca48:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ca4c:	e0ffeb17 	ldw	r3,-84(fp)
 100ca50:	00bfff84 	movi	r2,-2
 100ca54:	1884703a 	and	r2,r3,r2
 100ca58:	1001703a 	wrctl	status,r2
  
  return context;
 100ca5c:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 100ca60:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 100ca64:	d0a73e17 	ldw	r2,-25352(gp)
 100ca68:	10800c43 	ldbu	r2,49(r2)
 100ca6c:	10803fcc 	andi	r2,r2,255
 100ca70:	e0bffc15 	stw	r2,-16(fp)
 100ca74:	e0fffc17 	ldw	r3,-16(fp)
 100ca78:	1805003a 	cmpeq	r2,r3,zero
 100ca7c:	1000041e 	bne	r2,zero,100ca90 <OSEventPendMulti+0x4d0>
 100ca80:	e0fffc17 	ldw	r3,-16(fp)
 100ca84:	188000a0 	cmpeqi	r2,r3,2
 100ca88:	1000011e 	bne	r2,zero,100ca90 <OSEventPendMulti+0x4d0>
 100ca8c:	00001906 	br	100caf4 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 100ca90:	d0a73e17 	ldw	r2,-25352(gp)
 100ca94:	10800717 	ldw	r2,28(r2)
 100ca98:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 100ca9c:	e0bff417 	ldw	r2,-48(fp)
 100caa0:	1005003a 	cmpeq	r2,r2,zero
 100caa4:	10000c1e 	bne	r2,zero,100cad8 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 100caa8:	e0fff717 	ldw	r3,-36(fp)
 100caac:	e0bff417 	ldw	r2,-48(fp)
 100cab0:	18800015 	stw	r2,0(r3)
 100cab4:	e0bff717 	ldw	r2,-36(fp)
 100cab8:	10800104 	addi	r2,r2,4
 100cabc:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 100cac0:	e0bff717 	ldw	r2,-36(fp)
 100cac4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 100cac8:	e0bff18b 	ldhu	r2,-58(fp)
 100cacc:	10800044 	addi	r2,r2,1
 100cad0:	e0bff18d 	sth	r2,-58(fp)
 100cad4:	00000a06 	br	100cb00 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 100cad8:	d0a73e17 	ldw	r2,-25352(gp)
 100cadc:	00c00044 	movi	r3,1
 100cae0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100cae4:	d1273e17 	ldw	r4,-25352(gp)
 100cae8:	e17ff617 	ldw	r5,-40(fp)
 100caec:	100d8000 	call	100d800 <OS_EventTaskRemoveMulti>
             }
			 break;
 100caf0:	00000306 	br	100cb00 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100caf4:	d1273e17 	ldw	r4,-25352(gp)
 100caf8:	e17ff617 	ldw	r5,-40(fp)
 100cafc:	100d8000 	call	100d800 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 100cb00:	d0a73e17 	ldw	r2,-25352(gp)
 100cb04:	10800c43 	ldbu	r2,49(r2)
 100cb08:	10803fcc 	andi	r2,r2,255
 100cb0c:	e0bffb15 	stw	r2,-20(fp)
 100cb10:	e0fffb17 	ldw	r3,-20(fp)
 100cb14:	1805003a 	cmpeq	r2,r3,zero
 100cb18:	1000041e 	bne	r2,zero,100cb2c <OSEventPendMulti+0x56c>
 100cb1c:	e0fffb17 	ldw	r3,-20(fp)
 100cb20:	188000a0 	cmpeqi	r2,r3,2
 100cb24:	10002c1e 	bne	r2,zero,100cbd8 <OSEventPendMulti+0x618>
 100cb28:	00003406 	br	100cbfc <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 100cb2c:	e0bff417 	ldw	r2,-48(fp)
 100cb30:	10800003 	ldbu	r2,0(r2)
 100cb34:	10803fcc 	andi	r2,r2,255
 100cb38:	e0bffa15 	stw	r2,-24(fp)
 100cb3c:	e0fffa17 	ldw	r3,-24(fp)
 100cb40:	18800050 	cmplti	r2,r3,1
 100cb44:	1000151e 	bne	r2,zero,100cb9c <OSEventPendMulti+0x5dc>
 100cb48:	e0fffa17 	ldw	r3,-24(fp)
 100cb4c:	188000d0 	cmplti	r2,r3,3
 100cb50:	10000a1e 	bne	r2,zero,100cb7c <OSEventPendMulti+0x5bc>
 100cb54:	e0fffa17 	ldw	r3,-24(fp)
 100cb58:	188000e0 	cmpeqi	r2,r3,3
 100cb5c:	1000011e 	bne	r2,zero,100cb64 <OSEventPendMulti+0x5a4>
 100cb60:	00000e06 	br	100cb9c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 100cb64:	e0bff817 	ldw	r2,-32(fp)
 100cb68:	10000015 	stw	zero,0(r2)
 100cb6c:	e0bff817 	ldw	r2,-32(fp)
 100cb70:	10800104 	addi	r2,r2,4
 100cb74:	e0bff815 	stw	r2,-32(fp)
                      break;
 100cb78:	00001406 	br	100cbcc <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 100cb7c:	d0a73e17 	ldw	r2,-25352(gp)
 100cb80:	10c00917 	ldw	r3,36(r2)
 100cb84:	e0bff817 	ldw	r2,-32(fp)
 100cb88:	10c00015 	stw	r3,0(r2)
 100cb8c:	e0bff817 	ldw	r2,-32(fp)
 100cb90:	10800104 	addi	r2,r2,4
 100cb94:	e0bff815 	stw	r2,-32(fp)
                      break;
 100cb98:	00000c06 	br	100cbcc <OSEventPendMulti+0x60c>
 100cb9c:	e0bff017 	ldw	r2,-64(fp)
 100cba0:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cba4:	e0bfea17 	ldw	r2,-88(fp)
 100cba8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 100cbac:	e0bff717 	ldw	r2,-36(fp)
 100cbb0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 100cbb4:	e0c00217 	ldw	r3,8(fp)
 100cbb8:	00800044 	movi	r2,1
 100cbbc:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 100cbc0:	e0bff18b 	ldhu	r2,-58(fp)
 100cbc4:	e0bfff15 	stw	r2,-4(fp)
 100cbc8:	00002406 	br	100cc5c <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 100cbcc:	e0800217 	ldw	r2,8(fp)
 100cbd0:	10000005 	stb	zero,0(r2)
             break;
 100cbd4:	00001106 	br	100cc1c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 100cbd8:	e0bff817 	ldw	r2,-32(fp)
 100cbdc:	10000015 	stw	zero,0(r2)
 100cbe0:	e0bff817 	ldw	r2,-32(fp)
 100cbe4:	10800104 	addi	r2,r2,4
 100cbe8:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 100cbec:	e0c00217 	ldw	r3,8(fp)
 100cbf0:	00800384 	movi	r2,14
 100cbf4:	18800005 	stb	r2,0(r3)
             break;
 100cbf8:	00000806 	br	100cc1c <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 100cbfc:	e0bff817 	ldw	r2,-32(fp)
 100cc00:	10000015 	stw	zero,0(r2)
 100cc04:	e0bff817 	ldw	r2,-32(fp)
 100cc08:	10800104 	addi	r2,r2,4
 100cc0c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 100cc10:	e0c00217 	ldw	r3,8(fp)
 100cc14:	00800284 	movi	r2,10
 100cc18:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 100cc1c:	d0a73e17 	ldw	r2,-25352(gp)
 100cc20:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 100cc24:	d0a73e17 	ldw	r2,-25352(gp)
 100cc28:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 100cc2c:	d0a73e17 	ldw	r2,-25352(gp)
 100cc30:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100cc34:	d0a73e17 	ldw	r2,-25352(gp)
 100cc38:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 100cc3c:	d0a73e17 	ldw	r2,-25352(gp)
 100cc40:	10000915 	stw	zero,36(r2)
 100cc44:	e0bff017 	ldw	r2,-64(fp)
 100cc48:	e0bfe915 	stw	r2,-92(fp)
 100cc4c:	e0bfe917 	ldw	r2,-92(fp)
 100cc50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 100cc54:	e0fff18b 	ldhu	r3,-58(fp)
 100cc58:	e0ffff15 	stw	r3,-4(fp)
 100cc5c:	e0bfff17 	ldw	r2,-4(fp)
}
 100cc60:	e037883a 	mov	sp,fp
 100cc64:	dfc00117 	ldw	ra,4(sp)
 100cc68:	df000017 	ldw	fp,0(sp)
 100cc6c:	dec00204 	addi	sp,sp,8
 100cc70:	f800283a 	ret

0100cc74 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 100cc74:	defffe04 	addi	sp,sp,-8
 100cc78:	dfc00115 	stw	ra,4(sp)
 100cc7c:	df000015 	stw	fp,0(sp)
 100cc80:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 100cc84:	1018a400 	call	1018a40 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 100cc88:	100da480 	call	100da48 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 100cc8c:	100da8c0 	call	100da8c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 100cc90:	100dbf00 	call	100dbf0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 100cc94:	100d96c0 	call	100d96c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 100cc98:	100fd000 	call	100fd00 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 100cc9c:	10113640 	call	1011364 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 100cca0:	10126c00 	call	10126c0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 100cca4:	100daf80 	call	100daf8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 100cca8:	100db740 	call	100db74 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 100ccac:	10161240 	call	1016124 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 100ccb0:	1018a600 	call	1018a60 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 100ccb4:	100e4780 	call	100e478 <OSDebugInit>
#endif
}
 100ccb8:	e037883a 	mov	sp,fp
 100ccbc:	dfc00117 	ldw	ra,4(sp)
 100ccc0:	df000017 	ldw	fp,0(sp)
 100ccc4:	dec00204 	addi	sp,sp,8
 100ccc8:	f800283a 	ret

0100cccc <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 100cccc:	defffc04 	addi	sp,sp,-16
 100ccd0:	df000315 	stw	fp,12(sp)
 100ccd4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100ccd8:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 100ccdc:	d0a72e03 	ldbu	r2,-25416(gp)
 100cce0:	10803fcc 	andi	r2,r2,255
 100cce4:	10800058 	cmpnei	r2,r2,1
 100cce8:	1000131e 	bne	r2,zero,100cd38 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ccec:	0005303a 	rdctl	r2,status
 100ccf0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ccf4:	e0fffe17 	ldw	r3,-8(fp)
 100ccf8:	00bfff84 	movi	r2,-2
 100ccfc:	1884703a 	and	r2,r3,r2
 100cd00:	1001703a 	wrctl	status,r2
  
  return context;
 100cd04:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100cd08:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 100cd0c:	d0a73d03 	ldbu	r2,-25356(gp)
 100cd10:	10803fcc 	andi	r2,r2,255
 100cd14:	10803fe0 	cmpeqi	r2,r2,255
 100cd18:	1000031e 	bne	r2,zero,100cd28 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 100cd1c:	d0a73d03 	ldbu	r2,-25356(gp)
 100cd20:	10800044 	addi	r2,r2,1
 100cd24:	d0a73d05 	stb	r2,-25356(gp)
 100cd28:	e0bfff17 	ldw	r2,-4(fp)
 100cd2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cd30:	e0bffd17 	ldw	r2,-12(fp)
 100cd34:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 100cd38:	e037883a 	mov	sp,fp
 100cd3c:	df000017 	ldw	fp,0(sp)
 100cd40:	dec00104 	addi	sp,sp,4
 100cd44:	f800283a 	ret

0100cd48 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 100cd48:	defffb04 	addi	sp,sp,-20
 100cd4c:	dfc00415 	stw	ra,16(sp)
 100cd50:	df000315 	stw	fp,12(sp)
 100cd54:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100cd58:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 100cd5c:	d0a72e03 	ldbu	r2,-25416(gp)
 100cd60:	10803fcc 	andi	r2,r2,255
 100cd64:	10800058 	cmpnei	r2,r2,1
 100cd68:	1000321e 	bne	r2,zero,100ce34 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cd6c:	0005303a 	rdctl	r2,status
 100cd70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cd74:	e0fffe17 	ldw	r3,-8(fp)
 100cd78:	00bfff84 	movi	r2,-2
 100cd7c:	1884703a 	and	r2,r3,r2
 100cd80:	1001703a 	wrctl	status,r2
  
  return context;
 100cd84:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100cd88:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 100cd8c:	d0a73d03 	ldbu	r2,-25356(gp)
 100cd90:	10803fcc 	andi	r2,r2,255
 100cd94:	1005003a 	cmpeq	r2,r2,zero
 100cd98:	1000031e 	bne	r2,zero,100cda8 <OSIntExit+0x60>
            OSIntNesting--;
 100cd9c:	d0a73d03 	ldbu	r2,-25356(gp)
 100cda0:	10bfffc4 	addi	r2,r2,-1
 100cda4:	d0a73d05 	stb	r2,-25356(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 100cda8:	d0a73d03 	ldbu	r2,-25356(gp)
 100cdac:	10803fcc 	andi	r2,r2,255
 100cdb0:	1004c03a 	cmpne	r2,r2,zero
 100cdb4:	10001b1e 	bne	r2,zero,100ce24 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 100cdb8:	d0a72c03 	ldbu	r2,-25424(gp)
 100cdbc:	10803fcc 	andi	r2,r2,255
 100cdc0:	1004c03a 	cmpne	r2,r2,zero
 100cdc4:	1000171e 	bne	r2,zero,100ce24 <OSIntExit+0xdc>
                OS_SchedNew();
 100cdc8:	100de640 	call	100de64 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 100cdcc:	d0a73083 	ldbu	r2,-25406(gp)
 100cdd0:	d0e730c3 	ldbu	r3,-25405(gp)
 100cdd4:	11003fcc 	andi	r4,r2,255
 100cdd8:	18803fcc 	andi	r2,r3,255
 100cddc:	20801126 	beq	r4,r2,100ce24 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100cde0:	d0a73083 	ldbu	r2,-25406(gp)
 100cde4:	10803fcc 	andi	r2,r2,255
 100cde8:	00c040f4 	movhi	r3,259
 100cdec:	18fb2404 	addi	r3,r3,-4976
 100cdf0:	1085883a 	add	r2,r2,r2
 100cdf4:	1085883a 	add	r2,r2,r2
 100cdf8:	10c5883a 	add	r2,r2,r3
 100cdfc:	10800017 	ldw	r2,0(r2)
 100ce00:	d0a73915 	stw	r2,-25372(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 100ce04:	d0e73917 	ldw	r3,-25372(gp)
 100ce08:	18800e17 	ldw	r2,56(r3)
 100ce0c:	10800044 	addi	r2,r2,1
 100ce10:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 100ce14:	d0a73317 	ldw	r2,-25396(gp)
 100ce18:	10800044 	addi	r2,r2,1
 100ce1c:	d0a73315 	stw	r2,-25396(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 100ce20:	101857c0 	call	101857c <OSCtxSw>
 100ce24:	e0bfff17 	ldw	r2,-4(fp)
 100ce28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ce2c:	e0bffd17 	ldw	r2,-12(fp)
 100ce30:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100ce34:	e037883a 	mov	sp,fp
 100ce38:	dfc00117 	ldw	ra,4(sp)
 100ce3c:	df000017 	ldw	fp,0(sp)
 100ce40:	dec00204 	addi	sp,sp,8
 100ce44:	f800283a 	ret

0100ce48 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 100ce48:	defffc04 	addi	sp,sp,-16
 100ce4c:	df000315 	stw	fp,12(sp)
 100ce50:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ce54:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 100ce58:	d0a72e03 	ldbu	r2,-25416(gp)
 100ce5c:	10803fcc 	andi	r2,r2,255
 100ce60:	10800058 	cmpnei	r2,r2,1
 100ce64:	1000171e 	bne	r2,zero,100cec4 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ce68:	0005303a 	rdctl	r2,status
 100ce6c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ce70:	e0fffe17 	ldw	r3,-8(fp)
 100ce74:	00bfff84 	movi	r2,-2
 100ce78:	1884703a 	and	r2,r3,r2
 100ce7c:	1001703a 	wrctl	status,r2
  
  return context;
 100ce80:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100ce84:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 100ce88:	d0a73d03 	ldbu	r2,-25356(gp)
 100ce8c:	10803fcc 	andi	r2,r2,255
 100ce90:	1004c03a 	cmpne	r2,r2,zero
 100ce94:	1000071e 	bne	r2,zero,100ceb4 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 100ce98:	d0a72c03 	ldbu	r2,-25424(gp)
 100ce9c:	10803fcc 	andi	r2,r2,255
 100cea0:	10803fe0 	cmpeqi	r2,r2,255
 100cea4:	1000031e 	bne	r2,zero,100ceb4 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 100cea8:	d0a72c03 	ldbu	r2,-25424(gp)
 100ceac:	10800044 	addi	r2,r2,1
 100ceb0:	d0a72c05 	stb	r2,-25424(gp)
 100ceb4:	e0bfff17 	ldw	r2,-4(fp)
 100ceb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cebc:	e0bffd17 	ldw	r2,-12(fp)
 100cec0:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100cec4:	e037883a 	mov	sp,fp
 100cec8:	df000017 	ldw	fp,0(sp)
 100cecc:	dec00104 	addi	sp,sp,4
 100ced0:	f800283a 	ret

0100ced4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 100ced4:	defff804 	addi	sp,sp,-32
 100ced8:	dfc00715 	stw	ra,28(sp)
 100cedc:	df000615 	stw	fp,24(sp)
 100cee0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100cee4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 100cee8:	d0a72e03 	ldbu	r2,-25416(gp)
 100ceec:	10803fcc 	andi	r2,r2,255
 100cef0:	10800058 	cmpnei	r2,r2,1
 100cef4:	10002b1e 	bne	r2,zero,100cfa4 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cef8:	0005303a 	rdctl	r2,status
 100cefc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cf00:	e0fffe17 	ldw	r3,-8(fp)
 100cf04:	00bfff84 	movi	r2,-2
 100cf08:	1884703a 	and	r2,r3,r2
 100cf0c:	1001703a 	wrctl	status,r2
  
  return context;
 100cf10:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100cf14:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 100cf18:	d0a72c03 	ldbu	r2,-25424(gp)
 100cf1c:	10803fcc 	andi	r2,r2,255
 100cf20:	1005003a 	cmpeq	r2,r2,zero
 100cf24:	10001b1e 	bne	r2,zero,100cf94 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 100cf28:	d0a72c03 	ldbu	r2,-25424(gp)
 100cf2c:	10bfffc4 	addi	r2,r2,-1
 100cf30:	d0a72c05 	stb	r2,-25424(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 100cf34:	d0a72c03 	ldbu	r2,-25424(gp)
 100cf38:	10803fcc 	andi	r2,r2,255
 100cf3c:	1004c03a 	cmpne	r2,r2,zero
 100cf40:	10000f1e 	bne	r2,zero,100cf80 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 100cf44:	d0a73d03 	ldbu	r2,-25356(gp)
 100cf48:	10803fcc 	andi	r2,r2,255
 100cf4c:	1004c03a 	cmpne	r2,r2,zero
 100cf50:	1000061e 	bne	r2,zero,100cf6c <OSSchedUnlock+0x98>
 100cf54:	e0bfff17 	ldw	r2,-4(fp)
 100cf58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cf5c:	e0bffd17 	ldw	r2,-12(fp)
 100cf60:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 100cf64:	100dd900 	call	100dd90 <OS_Sched>
 100cf68:	00000e06 	br	100cfa4 <OSSchedUnlock+0xd0>
 100cf6c:	e0bfff17 	ldw	r2,-4(fp)
 100cf70:	e0bffc15 	stw	r2,-16(fp)
 100cf74:	e0bffc17 	ldw	r2,-16(fp)
 100cf78:	1001703a 	wrctl	status,r2
 100cf7c:	00000906 	br	100cfa4 <OSSchedUnlock+0xd0>
 100cf80:	e0bfff17 	ldw	r2,-4(fp)
 100cf84:	e0bffb15 	stw	r2,-20(fp)
 100cf88:	e0bffb17 	ldw	r2,-20(fp)
 100cf8c:	1001703a 	wrctl	status,r2
 100cf90:	00000406 	br	100cfa4 <OSSchedUnlock+0xd0>
 100cf94:	e0bfff17 	ldw	r2,-4(fp)
 100cf98:	e0bffa15 	stw	r2,-24(fp)
 100cf9c:	e0bffa17 	ldw	r2,-24(fp)
 100cfa0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 100cfa4:	e037883a 	mov	sp,fp
 100cfa8:	dfc00117 	ldw	ra,4(sp)
 100cfac:	df000017 	ldw	fp,0(sp)
 100cfb0:	dec00204 	addi	sp,sp,8
 100cfb4:	f800283a 	ret

0100cfb8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 100cfb8:	defffe04 	addi	sp,sp,-8
 100cfbc:	dfc00115 	stw	ra,4(sp)
 100cfc0:	df000015 	stw	fp,0(sp)
 100cfc4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 100cfc8:	d0a72e03 	ldbu	r2,-25416(gp)
 100cfcc:	10803fcc 	andi	r2,r2,255
 100cfd0:	1004c03a 	cmpne	r2,r2,zero
 100cfd4:	10000f1e 	bne	r2,zero,100d014 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 100cfd8:	100de640 	call	100de64 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 100cfdc:	d0a73083 	ldbu	r2,-25406(gp)
 100cfe0:	d0a730c5 	stb	r2,-25405(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100cfe4:	d0a73083 	ldbu	r2,-25406(gp)
 100cfe8:	10803fcc 	andi	r2,r2,255
 100cfec:	00c040f4 	movhi	r3,259
 100cff0:	18fb2404 	addi	r3,r3,-4976
 100cff4:	1085883a 	add	r2,r2,r2
 100cff8:	1085883a 	add	r2,r2,r2
 100cffc:	10c5883a 	add	r2,r2,r3
 100d000:	10800017 	ldw	r2,0(r2)
 100d004:	d0a73915 	stw	r2,-25372(gp)
        OSTCBCur      = OSTCBHighRdy;
 100d008:	d0a73917 	ldw	r2,-25372(gp)
 100d00c:	d0a73e15 	stw	r2,-25352(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 100d010:	10186080 	call	1018608 <OSStartHighRdy>
    }
}
 100d014:	e037883a 	mov	sp,fp
 100d018:	dfc00117 	ldw	ra,4(sp)
 100d01c:	df000017 	ldw	fp,0(sp)
 100d020:	dec00204 	addi	sp,sp,8
 100d024:	f800283a 	ret

0100d028 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 100d028:	defff904 	addi	sp,sp,-28
 100d02c:	dfc00615 	stw	ra,24(sp)
 100d030:	df000515 	stw	fp,20(sp)
 100d034:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100d038:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 100d03c:	01000084 	movi	r4,2
 100d040:	1014d740 	call	1014d74 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d044:	0005303a 	rdctl	r2,status
 100d048:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d04c:	e0fffe17 	ldw	r3,-8(fp)
 100d050:	00bfff84 	movi	r2,-2
 100d054:	1884703a 	and	r2,r3,r2
 100d058:	1001703a 	wrctl	status,r2
  
  return context;
 100d05c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 100d060:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 100d064:	d0272f15 	stw	zero,-25412(gp)
 100d068:	e0bfff17 	ldw	r2,-4(fp)
 100d06c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d070:	e0bffd17 	ldw	r2,-12(fp)
 100d074:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 100d078:	01001904 	movi	r4,100
 100d07c:	1014d740 	call	1014d74 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d080:	0005303a 	rdctl	r2,status
 100d084:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d088:	e0fffc17 	ldw	r3,-16(fp)
 100d08c:	00bfff84 	movi	r2,-2
 100d090:	1884703a 	and	r2,r3,r2
 100d094:	1001703a 	wrctl	status,r2
  
  return context;
 100d098:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 100d09c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 100d0a0:	d0a72f17 	ldw	r2,-25412(gp)
 100d0a4:	d0a73515 	stw	r2,-25388(gp)
    OSStatRdy    = OS_TRUE;
 100d0a8:	00800044 	movi	r2,1
 100d0ac:	d0a74305 	stb	r2,-25332(gp)
 100d0b0:	e0bfff17 	ldw	r2,-4(fp)
 100d0b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d0b8:	e0bffb17 	ldw	r2,-20(fp)
 100d0bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 100d0c0:	e037883a 	mov	sp,fp
 100d0c4:	dfc00117 	ldw	ra,4(sp)
 100d0c8:	df000017 	ldw	fp,0(sp)
 100d0cc:	dec00204 	addi	sp,sp,8
 100d0d0:	f800283a 	ret

0100d0d4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 100d0d4:	defff604 	addi	sp,sp,-40
 100d0d8:	dfc00915 	stw	ra,36(sp)
 100d0dc:	df000815 	stw	fp,32(sp)
 100d0e0:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100d0e4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 100d0e8:	10189d40 	call	10189d4 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d0ec:	0005303a 	rdctl	r2,status
 100d0f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d0f4:	e0fffb17 	ldw	r3,-20(fp)
 100d0f8:	00bfff84 	movi	r2,-2
 100d0fc:	1884703a 	and	r2,r3,r2
 100d100:	1001703a 	wrctl	status,r2
  
  return context;
 100d104:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 100d108:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 100d10c:	d0a74017 	ldw	r2,-25344(gp)
 100d110:	10800044 	addi	r2,r2,1
 100d114:	d0a74015 	stw	r2,-25344(gp)
 100d118:	e0bffc17 	ldw	r2,-16(fp)
 100d11c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d120:	e0bffa17 	ldw	r2,-24(fp)
 100d124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 100d128:	d0a72e03 	ldbu	r2,-25416(gp)
 100d12c:	10803fcc 	andi	r2,r2,255
 100d130:	10800058 	cmpnei	r2,r2,1
 100d134:	1000721e 	bne	r2,zero,100d300 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 100d138:	d0a73203 	ldbu	r2,-25400(gp)
 100d13c:	10803fcc 	andi	r2,r2,255
 100d140:	e0bfff15 	stw	r2,-4(fp)
 100d144:	e0ffff17 	ldw	r3,-4(fp)
 100d148:	18800060 	cmpeqi	r2,r3,1
 100d14c:	10000a1e 	bne	r2,zero,100d178 <OSTimeTick+0xa4>
 100d150:	e0ffff17 	ldw	r3,-4(fp)
 100d154:	188000a0 	cmpeqi	r2,r3,2
 100d158:	1000091e 	bne	r2,zero,100d180 <OSTimeTick+0xac>
 100d15c:	e0ffff17 	ldw	r3,-4(fp)
 100d160:	1805003a 	cmpeq	r2,r3,zero
 100d164:	1000011e 	bne	r2,zero,100d16c <OSTimeTick+0x98>
 100d168:	00000a06 	br	100d194 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 100d16c:	00800044 	movi	r2,1
 100d170:	e0bffd05 	stb	r2,-12(fp)
                 break;
 100d174:	00000a06 	br	100d1a0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 100d178:	e03ffd05 	stb	zero,-12(fp)
                 break;
 100d17c:	00000806 	br	100d1a0 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 100d180:	00800044 	movi	r2,1
 100d184:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 100d188:	00800044 	movi	r2,1
 100d18c:	d0a73205 	stb	r2,-25400(gp)
                 break;
 100d190:	00000306 	br	100d1a0 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 100d194:	00800044 	movi	r2,1
 100d198:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 100d19c:	d0273205 	stb	zero,-25400(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 100d1a0:	e0bffd03 	ldbu	r2,-12(fp)
 100d1a4:	1005003a 	cmpeq	r2,r2,zero
 100d1a8:	1000551e 	bne	r2,zero,100d300 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 100d1ac:	d0a73117 	ldw	r2,-25404(gp)
 100d1b0:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100d1b4:	00004d06 	br	100d2ec <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d1b8:	0005303a 	rdctl	r2,status
 100d1bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d1c0:	e0fff917 	ldw	r3,-28(fp)
 100d1c4:	00bfff84 	movi	r2,-2
 100d1c8:	1884703a 	and	r2,r3,r2
 100d1cc:	1001703a 	wrctl	status,r2
  
  return context;
 100d1d0:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 100d1d4:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 100d1d8:	e0bffe17 	ldw	r2,-8(fp)
 100d1dc:	10800b8b 	ldhu	r2,46(r2)
 100d1e0:	10bfffcc 	andi	r2,r2,65535
 100d1e4:	1005003a 	cmpeq	r2,r2,zero
 100d1e8:	1000391e 	bne	r2,zero,100d2d0 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 100d1ec:	e0bffe17 	ldw	r2,-8(fp)
 100d1f0:	10800b8b 	ldhu	r2,46(r2)
 100d1f4:	10bfffc4 	addi	r2,r2,-1
 100d1f8:	1007883a 	mov	r3,r2
 100d1fc:	e0bffe17 	ldw	r2,-8(fp)
 100d200:	10c00b8d 	sth	r3,46(r2)
 100d204:	e0bffe17 	ldw	r2,-8(fp)
 100d208:	10800b8b 	ldhu	r2,46(r2)
 100d20c:	10bfffcc 	andi	r2,r2,65535
 100d210:	1004c03a 	cmpne	r2,r2,zero
 100d214:	10002e1e 	bne	r2,zero,100d2d0 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 100d218:	e0bffe17 	ldw	r2,-8(fp)
 100d21c:	10800c03 	ldbu	r2,48(r2)
 100d220:	10803fcc 	andi	r2,r2,255
 100d224:	10800dcc 	andi	r2,r2,55
 100d228:	1005003a 	cmpeq	r2,r2,zero
 100d22c:	10000b1e 	bne	r2,zero,100d25c <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 100d230:	e0bffe17 	ldw	r2,-8(fp)
 100d234:	10c00c03 	ldbu	r3,48(r2)
 100d238:	00bff204 	movi	r2,-56
 100d23c:	1884703a 	and	r2,r3,r2
 100d240:	1007883a 	mov	r3,r2
 100d244:	e0bffe17 	ldw	r2,-8(fp)
 100d248:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 100d24c:	e0fffe17 	ldw	r3,-8(fp)
 100d250:	00800044 	movi	r2,1
 100d254:	18800c45 	stb	r2,49(r3)
 100d258:	00000206 	br	100d264 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100d25c:	e0bffe17 	ldw	r2,-8(fp)
 100d260:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 100d264:	e0bffe17 	ldw	r2,-8(fp)
 100d268:	10800c03 	ldbu	r2,48(r2)
 100d26c:	10803fcc 	andi	r2,r2,255
 100d270:	1080020c 	andi	r2,r2,8
 100d274:	1004c03a 	cmpne	r2,r2,zero
 100d278:	1000151e 	bne	r2,zero,100d2d0 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 100d27c:	e0bffe17 	ldw	r2,-8(fp)
 100d280:	10c00d83 	ldbu	r3,54(r2)
 100d284:	d0a73b03 	ldbu	r2,-25364(gp)
 100d288:	1884b03a 	or	r2,r3,r2
 100d28c:	d0a73b05 	stb	r2,-25364(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100d290:	e0bffe17 	ldw	r2,-8(fp)
 100d294:	10800d03 	ldbu	r2,52(r2)
 100d298:	11003fcc 	andi	r4,r2,255
 100d29c:	e0bffe17 	ldw	r2,-8(fp)
 100d2a0:	10800d03 	ldbu	r2,52(r2)
 100d2a4:	10c03fcc 	andi	r3,r2,255
 100d2a8:	d0a73b44 	addi	r2,gp,-25363
 100d2ac:	1885883a 	add	r2,r3,r2
 100d2b0:	10c00003 	ldbu	r3,0(r2)
 100d2b4:	e0bffe17 	ldw	r2,-8(fp)
 100d2b8:	10800d43 	ldbu	r2,53(r2)
 100d2bc:	1884b03a 	or	r2,r3,r2
 100d2c0:	1007883a 	mov	r3,r2
 100d2c4:	d0a73b44 	addi	r2,gp,-25363
 100d2c8:	2085883a 	add	r2,r4,r2
 100d2cc:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 100d2d0:	e0bffe17 	ldw	r2,-8(fp)
 100d2d4:	10800517 	ldw	r2,20(r2)
 100d2d8:	e0bffe15 	stw	r2,-8(fp)
 100d2dc:	e0bffc17 	ldw	r2,-16(fp)
 100d2e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d2e4:	e0bff817 	ldw	r2,-32(fp)
 100d2e8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100d2ec:	e0bffe17 	ldw	r2,-8(fp)
 100d2f0:	10800c83 	ldbu	r2,50(r2)
 100d2f4:	10803fcc 	andi	r2,r2,255
 100d2f8:	10800518 	cmpnei	r2,r2,20
 100d2fc:	103fae1e 	bne	r2,zero,100d1b8 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 100d300:	e037883a 	mov	sp,fp
 100d304:	dfc00117 	ldw	ra,4(sp)
 100d308:	df000017 	ldw	fp,0(sp)
 100d30c:	dec00204 	addi	sp,sp,8
 100d310:	f800283a 	ret

0100d314 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 100d314:	deffff04 	addi	sp,sp,-4
 100d318:	df000015 	stw	fp,0(sp)
 100d31c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 100d320:	00804784 	movi	r2,286
}
 100d324:	e037883a 	mov	sp,fp
 100d328:	df000017 	ldw	fp,0(sp)
 100d32c:	dec00104 	addi	sp,sp,4
 100d330:	f800283a 	ret

0100d334 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 100d334:	deffff04 	addi	sp,sp,-4
 100d338:	df000015 	stw	fp,0(sp)
 100d33c:	d839883a 	mov	fp,sp
}
 100d340:	e037883a 	mov	sp,fp
 100d344:	df000017 	ldw	fp,0(sp)
 100d348:	dec00104 	addi	sp,sp,4
 100d34c:	f800283a 	ret

0100d350 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 100d350:	defff804 	addi	sp,sp,-32
 100d354:	dfc00715 	stw	ra,28(sp)
 100d358:	df000615 	stw	fp,24(sp)
 100d35c:	df000604 	addi	fp,sp,24
 100d360:	e13ffc15 	stw	r4,-16(fp)
 100d364:	e17ffd15 	stw	r5,-12(fp)
 100d368:	e1bffe05 	stb	r6,-8(fp)
 100d36c:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 100d370:	e0bffc17 	ldw	r2,-16(fp)
 100d374:	10800283 	ldbu	r2,10(r2)
 100d378:	10c03fcc 	andi	r3,r2,255
 100d37c:	008040b4 	movhi	r2,258
 100d380:	10a58504 	addi	r2,r2,-27116
 100d384:	10c5883a 	add	r2,r2,r3
 100d388:	10800003 	ldbu	r2,0(r2)
 100d38c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 100d390:	e0fffa83 	ldbu	r3,-22(fp)
 100d394:	e0bffc17 	ldw	r2,-16(fp)
 100d398:	1885883a 	add	r2,r3,r2
 100d39c:	10800204 	addi	r2,r2,8
 100d3a0:	108000c3 	ldbu	r2,3(r2)
 100d3a4:	10c03fcc 	andi	r3,r2,255
 100d3a8:	008040b4 	movhi	r2,258
 100d3ac:	10a58504 	addi	r2,r2,-27116
 100d3b0:	10c5883a 	add	r2,r2,r3
 100d3b4:	10800003 	ldbu	r2,0(r2)
 100d3b8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 100d3bc:	e0bffa83 	ldbu	r2,-22(fp)
 100d3c0:	100490fa 	slli	r2,r2,3
 100d3c4:	1007883a 	mov	r3,r2
 100d3c8:	e0bffa43 	ldbu	r2,-23(fp)
 100d3cc:	1885883a 	add	r2,r3,r2
 100d3d0:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 100d3d4:	e0bffa03 	ldbu	r2,-24(fp)
 100d3d8:	00c040f4 	movhi	r3,259
 100d3dc:	18fb2404 	addi	r3,r3,-4976
 100d3e0:	1085883a 	add	r2,r2,r2
 100d3e4:	1085883a 	add	r2,r2,r2
 100d3e8:	10c5883a 	add	r2,r2,r3
 100d3ec:	10800017 	ldw	r2,0(r2)
 100d3f0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 100d3f4:	e0bffb17 	ldw	r2,-20(fp)
 100d3f8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 100d3fc:	e0fffb17 	ldw	r3,-20(fp)
 100d400:	e0bffd17 	ldw	r2,-12(fp)
 100d404:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100d408:	e0bffb17 	ldw	r2,-20(fp)
 100d40c:	10800c03 	ldbu	r2,48(r2)
 100d410:	1007883a 	mov	r3,r2
 100d414:	e0bffe03 	ldbu	r2,-8(fp)
 100d418:	0084303a 	nor	r2,zero,r2
 100d41c:	1884703a 	and	r2,r3,r2
 100d420:	1007883a 	mov	r3,r2
 100d424:	e0bffb17 	ldw	r2,-20(fp)
 100d428:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 100d42c:	e0fffb17 	ldw	r3,-20(fp)
 100d430:	e0bfff03 	ldbu	r2,-4(fp)
 100d434:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 100d438:	e0bffb17 	ldw	r2,-20(fp)
 100d43c:	10800c03 	ldbu	r2,48(r2)
 100d440:	10803fcc 	andi	r2,r2,255
 100d444:	1080020c 	andi	r2,r2,8
 100d448:	1004c03a 	cmpne	r2,r2,zero
 100d44c:	1000111e 	bne	r2,zero,100d494 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 100d450:	e0bffb17 	ldw	r2,-20(fp)
 100d454:	10c00d83 	ldbu	r3,54(r2)
 100d458:	d0a73b03 	ldbu	r2,-25364(gp)
 100d45c:	1884b03a 	or	r2,r3,r2
 100d460:	d0a73b05 	stb	r2,-25364(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100d464:	e13ffa83 	ldbu	r4,-22(fp)
 100d468:	e0fffa83 	ldbu	r3,-22(fp)
 100d46c:	d0a73b44 	addi	r2,gp,-25363
 100d470:	1885883a 	add	r2,r3,r2
 100d474:	10c00003 	ldbu	r3,0(r2)
 100d478:	e0bffb17 	ldw	r2,-20(fp)
 100d47c:	10800d43 	ldbu	r2,53(r2)
 100d480:	1884b03a 	or	r2,r3,r2
 100d484:	1007883a 	mov	r3,r2
 100d488:	d0a73b44 	addi	r2,gp,-25363
 100d48c:	2085883a 	add	r2,r4,r2
 100d490:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 100d494:	e13ffb17 	ldw	r4,-20(fp)
 100d498:	e17ffc17 	ldw	r5,-16(fp)
 100d49c:	100d7480 	call	100d748 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 100d4a0:	e0bffb17 	ldw	r2,-20(fp)
 100d4a4:	10800817 	ldw	r2,32(r2)
 100d4a8:	1005003a 	cmpeq	r2,r2,zero
 100d4ac:	1000071e 	bne	r2,zero,100d4cc <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100d4b0:	e0bffb17 	ldw	r2,-20(fp)
 100d4b4:	11400817 	ldw	r5,32(r2)
 100d4b8:	e13ffb17 	ldw	r4,-20(fp)
 100d4bc:	100d8000 	call	100d800 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 100d4c0:	e0fffb17 	ldw	r3,-20(fp)
 100d4c4:	e0bffc17 	ldw	r2,-16(fp)
 100d4c8:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 100d4cc:	e0bffa03 	ldbu	r2,-24(fp)
}
 100d4d0:	e037883a 	mov	sp,fp
 100d4d4:	dfc00117 	ldw	ra,4(sp)
 100d4d8:	df000017 	ldw	fp,0(sp)
 100d4dc:	dec00204 	addi	sp,sp,8
 100d4e0:	f800283a 	ret

0100d4e4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 100d4e4:	defffd04 	addi	sp,sp,-12
 100d4e8:	df000215 	stw	fp,8(sp)
 100d4ec:	df000204 	addi	fp,sp,8
 100d4f0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 100d4f4:	d0e73e17 	ldw	r3,-25352(gp)
 100d4f8:	e0bfff17 	ldw	r2,-4(fp)
 100d4fc:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 100d500:	d0a73e17 	ldw	r2,-25352(gp)
 100d504:	10800d03 	ldbu	r2,52(r2)
 100d508:	11003fcc 	andi	r4,r2,255
 100d50c:	d0a73e17 	ldw	r2,-25352(gp)
 100d510:	10800d03 	ldbu	r2,52(r2)
 100d514:	10c03fcc 	andi	r3,r2,255
 100d518:	e0bfff17 	ldw	r2,-4(fp)
 100d51c:	1885883a 	add	r2,r3,r2
 100d520:	10800204 	addi	r2,r2,8
 100d524:	10c000c3 	ldbu	r3,3(r2)
 100d528:	d0a73e17 	ldw	r2,-25352(gp)
 100d52c:	10800d43 	ldbu	r2,53(r2)
 100d530:	1884b03a 	or	r2,r3,r2
 100d534:	1007883a 	mov	r3,r2
 100d538:	e0bfff17 	ldw	r2,-4(fp)
 100d53c:	2085883a 	add	r2,r4,r2
 100d540:	10800204 	addi	r2,r2,8
 100d544:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100d548:	e0bfff17 	ldw	r2,-4(fp)
 100d54c:	10c00283 	ldbu	r3,10(r2)
 100d550:	d0a73e17 	ldw	r2,-25352(gp)
 100d554:	10800d83 	ldbu	r2,54(r2)
 100d558:	1884b03a 	or	r2,r3,r2
 100d55c:	1007883a 	mov	r3,r2
 100d560:	e0bfff17 	ldw	r2,-4(fp)
 100d564:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100d568:	d0a73e17 	ldw	r2,-25352(gp)
 100d56c:	10800d03 	ldbu	r2,52(r2)
 100d570:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100d574:	e13ffe03 	ldbu	r4,-8(fp)
 100d578:	e0fffe03 	ldbu	r3,-8(fp)
 100d57c:	d0a73b44 	addi	r2,gp,-25363
 100d580:	1885883a 	add	r2,r3,r2
 100d584:	10800003 	ldbu	r2,0(r2)
 100d588:	1007883a 	mov	r3,r2
 100d58c:	d0a73e17 	ldw	r2,-25352(gp)
 100d590:	10800d43 	ldbu	r2,53(r2)
 100d594:	0084303a 	nor	r2,zero,r2
 100d598:	1884703a 	and	r2,r3,r2
 100d59c:	1007883a 	mov	r3,r2
 100d5a0:	d0a73b44 	addi	r2,gp,-25363
 100d5a4:	2085883a 	add	r2,r4,r2
 100d5a8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100d5ac:	e0fffe03 	ldbu	r3,-8(fp)
 100d5b0:	d0a73b44 	addi	r2,gp,-25363
 100d5b4:	1885883a 	add	r2,r3,r2
 100d5b8:	10800003 	ldbu	r2,0(r2)
 100d5bc:	10803fcc 	andi	r2,r2,255
 100d5c0:	1004c03a 	cmpne	r2,r2,zero
 100d5c4:	1000071e 	bne	r2,zero,100d5e4 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100d5c8:	d0a73e17 	ldw	r2,-25352(gp)
 100d5cc:	10800d83 	ldbu	r2,54(r2)
 100d5d0:	0084303a 	nor	r2,zero,r2
 100d5d4:	1007883a 	mov	r3,r2
 100d5d8:	d0a73b03 	ldbu	r2,-25364(gp)
 100d5dc:	1884703a 	and	r2,r3,r2
 100d5e0:	d0a73b05 	stb	r2,-25364(gp)
    }
}
 100d5e4:	e037883a 	mov	sp,fp
 100d5e8:	df000017 	ldw	fp,0(sp)
 100d5ec:	dec00104 	addi	sp,sp,4
 100d5f0:	f800283a 	ret

0100d5f4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 100d5f4:	defffb04 	addi	sp,sp,-20
 100d5f8:	df000415 	stw	fp,16(sp)
 100d5fc:	df000404 	addi	fp,sp,16
 100d600:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 100d604:	d0a73e17 	ldw	r2,-25352(gp)
 100d608:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 100d60c:	d0e73e17 	ldw	r3,-25352(gp)
 100d610:	e0bfff17 	ldw	r2,-4(fp)
 100d614:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 100d618:	e0bfff17 	ldw	r2,-4(fp)
 100d61c:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 100d620:	e0bffe17 	ldw	r2,-8(fp)
 100d624:	10800017 	ldw	r2,0(r2)
 100d628:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100d62c:	00002006 	br	100d6b0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 100d630:	d0a73e17 	ldw	r2,-25352(gp)
 100d634:	10800d03 	ldbu	r2,52(r2)
 100d638:	11003fcc 	andi	r4,r2,255
 100d63c:	d0a73e17 	ldw	r2,-25352(gp)
 100d640:	10800d03 	ldbu	r2,52(r2)
 100d644:	10c03fcc 	andi	r3,r2,255
 100d648:	e0bffd17 	ldw	r2,-12(fp)
 100d64c:	1885883a 	add	r2,r3,r2
 100d650:	10800204 	addi	r2,r2,8
 100d654:	10c000c3 	ldbu	r3,3(r2)
 100d658:	d0a73e17 	ldw	r2,-25352(gp)
 100d65c:	10800d43 	ldbu	r2,53(r2)
 100d660:	1884b03a 	or	r2,r3,r2
 100d664:	1007883a 	mov	r3,r2
 100d668:	e0bffd17 	ldw	r2,-12(fp)
 100d66c:	2085883a 	add	r2,r4,r2
 100d670:	10800204 	addi	r2,r2,8
 100d674:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100d678:	e0bffd17 	ldw	r2,-12(fp)
 100d67c:	10c00283 	ldbu	r3,10(r2)
 100d680:	d0a73e17 	ldw	r2,-25352(gp)
 100d684:	10800d83 	ldbu	r2,54(r2)
 100d688:	1884b03a 	or	r2,r3,r2
 100d68c:	1007883a 	mov	r3,r2
 100d690:	e0bffd17 	ldw	r2,-12(fp)
 100d694:	10c00285 	stb	r3,10(r2)
        pevents++;
 100d698:	e0bffe17 	ldw	r2,-8(fp)
 100d69c:	10800104 	addi	r2,r2,4
 100d6a0:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 100d6a4:	e0bffe17 	ldw	r2,-8(fp)
 100d6a8:	10800017 	ldw	r2,0(r2)
 100d6ac:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100d6b0:	e0bffd17 	ldw	r2,-12(fp)
 100d6b4:	1004c03a 	cmpne	r2,r2,zero
 100d6b8:	103fdd1e 	bne	r2,zero,100d630 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100d6bc:	d0a73e17 	ldw	r2,-25352(gp)
 100d6c0:	10800d03 	ldbu	r2,52(r2)
 100d6c4:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100d6c8:	e13ffc03 	ldbu	r4,-16(fp)
 100d6cc:	e0fffc03 	ldbu	r3,-16(fp)
 100d6d0:	d0a73b44 	addi	r2,gp,-25363
 100d6d4:	1885883a 	add	r2,r3,r2
 100d6d8:	10800003 	ldbu	r2,0(r2)
 100d6dc:	1007883a 	mov	r3,r2
 100d6e0:	d0a73e17 	ldw	r2,-25352(gp)
 100d6e4:	10800d43 	ldbu	r2,53(r2)
 100d6e8:	0084303a 	nor	r2,zero,r2
 100d6ec:	1884703a 	and	r2,r3,r2
 100d6f0:	1007883a 	mov	r3,r2
 100d6f4:	d0a73b44 	addi	r2,gp,-25363
 100d6f8:	2085883a 	add	r2,r4,r2
 100d6fc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100d700:	e0fffc03 	ldbu	r3,-16(fp)
 100d704:	d0a73b44 	addi	r2,gp,-25363
 100d708:	1885883a 	add	r2,r3,r2
 100d70c:	10800003 	ldbu	r2,0(r2)
 100d710:	10803fcc 	andi	r2,r2,255
 100d714:	1004c03a 	cmpne	r2,r2,zero
 100d718:	1000071e 	bne	r2,zero,100d738 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100d71c:	d0a73e17 	ldw	r2,-25352(gp)
 100d720:	10800d83 	ldbu	r2,54(r2)
 100d724:	0084303a 	nor	r2,zero,r2
 100d728:	1007883a 	mov	r3,r2
 100d72c:	d0a73b03 	ldbu	r2,-25364(gp)
 100d730:	1884703a 	and	r2,r3,r2
 100d734:	d0a73b05 	stb	r2,-25364(gp)
    }
}
 100d738:	e037883a 	mov	sp,fp
 100d73c:	df000017 	ldw	fp,0(sp)
 100d740:	dec00104 	addi	sp,sp,4
 100d744:	f800283a 	ret

0100d748 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 100d748:	defffc04 	addi	sp,sp,-16
 100d74c:	df000315 	stw	fp,12(sp)
 100d750:	df000304 	addi	fp,sp,12
 100d754:	e13ffe15 	stw	r4,-8(fp)
 100d758:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 100d75c:	e0bffe17 	ldw	r2,-8(fp)
 100d760:	10800d03 	ldbu	r2,52(r2)
 100d764:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 100d768:	e13ffd03 	ldbu	r4,-12(fp)
 100d76c:	e0fffd03 	ldbu	r3,-12(fp)
 100d770:	e0bfff17 	ldw	r2,-4(fp)
 100d774:	1885883a 	add	r2,r3,r2
 100d778:	10800204 	addi	r2,r2,8
 100d77c:	108000c3 	ldbu	r2,3(r2)
 100d780:	1007883a 	mov	r3,r2
 100d784:	e0bffe17 	ldw	r2,-8(fp)
 100d788:	10800d43 	ldbu	r2,53(r2)
 100d78c:	0084303a 	nor	r2,zero,r2
 100d790:	1884703a 	and	r2,r3,r2
 100d794:	1007883a 	mov	r3,r2
 100d798:	e0bfff17 	ldw	r2,-4(fp)
 100d79c:	2085883a 	add	r2,r4,r2
 100d7a0:	10800204 	addi	r2,r2,8
 100d7a4:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 100d7a8:	e0fffd03 	ldbu	r3,-12(fp)
 100d7ac:	e0bfff17 	ldw	r2,-4(fp)
 100d7b0:	1885883a 	add	r2,r3,r2
 100d7b4:	10800204 	addi	r2,r2,8
 100d7b8:	108000c3 	ldbu	r2,3(r2)
 100d7bc:	10803fcc 	andi	r2,r2,255
 100d7c0:	1004c03a 	cmpne	r2,r2,zero
 100d7c4:	10000a1e 	bne	r2,zero,100d7f0 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 100d7c8:	e0bfff17 	ldw	r2,-4(fp)
 100d7cc:	10800283 	ldbu	r2,10(r2)
 100d7d0:	1007883a 	mov	r3,r2
 100d7d4:	e0bffe17 	ldw	r2,-8(fp)
 100d7d8:	10800d83 	ldbu	r2,54(r2)
 100d7dc:	0084303a 	nor	r2,zero,r2
 100d7e0:	1884703a 	and	r2,r3,r2
 100d7e4:	1007883a 	mov	r3,r2
 100d7e8:	e0bfff17 	ldw	r2,-4(fp)
 100d7ec:	10c00285 	stb	r3,10(r2)
    }
}
 100d7f0:	e037883a 	mov	sp,fp
 100d7f4:	df000017 	ldw	fp,0(sp)
 100d7f8:	dec00104 	addi	sp,sp,4
 100d7fc:	f800283a 	ret

0100d800 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 100d800:	defffa04 	addi	sp,sp,-24
 100d804:	df000515 	stw	fp,20(sp)
 100d808:	df000504 	addi	fp,sp,20
 100d80c:	e13ffe15 	stw	r4,-8(fp)
 100d810:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 100d814:	e0bffe17 	ldw	r2,-8(fp)
 100d818:	10800d03 	ldbu	r2,52(r2)
 100d81c:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 100d820:	e0bffe17 	ldw	r2,-8(fp)
 100d824:	10800d83 	ldbu	r2,54(r2)
 100d828:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 100d82c:	e0bffe17 	ldw	r2,-8(fp)
 100d830:	10800d43 	ldbu	r2,53(r2)
 100d834:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 100d838:	e0bfff17 	ldw	r2,-4(fp)
 100d83c:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 100d840:	e0bffd17 	ldw	r2,-12(fp)
 100d844:	10800017 	ldw	r2,0(r2)
 100d848:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100d84c:	00002606 	br	100d8e8 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 100d850:	e13ffb83 	ldbu	r4,-18(fp)
 100d854:	e0fffb83 	ldbu	r3,-18(fp)
 100d858:	e0bffc17 	ldw	r2,-16(fp)
 100d85c:	1885883a 	add	r2,r3,r2
 100d860:	10800204 	addi	r2,r2,8
 100d864:	108000c3 	ldbu	r2,3(r2)
 100d868:	1007883a 	mov	r3,r2
 100d86c:	e0bffb03 	ldbu	r2,-20(fp)
 100d870:	0084303a 	nor	r2,zero,r2
 100d874:	1884703a 	and	r2,r3,r2
 100d878:	1007883a 	mov	r3,r2
 100d87c:	e0bffc17 	ldw	r2,-16(fp)
 100d880:	2085883a 	add	r2,r4,r2
 100d884:	10800204 	addi	r2,r2,8
 100d888:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 100d88c:	e0fffb83 	ldbu	r3,-18(fp)
 100d890:	e0bffc17 	ldw	r2,-16(fp)
 100d894:	1885883a 	add	r2,r3,r2
 100d898:	10800204 	addi	r2,r2,8
 100d89c:	108000c3 	ldbu	r2,3(r2)
 100d8a0:	10803fcc 	andi	r2,r2,255
 100d8a4:	1004c03a 	cmpne	r2,r2,zero
 100d8a8:	1000091e 	bne	r2,zero,100d8d0 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 100d8ac:	e0bffc17 	ldw	r2,-16(fp)
 100d8b0:	10800283 	ldbu	r2,10(r2)
 100d8b4:	1007883a 	mov	r3,r2
 100d8b8:	e0bffb43 	ldbu	r2,-19(fp)
 100d8bc:	0084303a 	nor	r2,zero,r2
 100d8c0:	1884703a 	and	r2,r3,r2
 100d8c4:	1007883a 	mov	r3,r2
 100d8c8:	e0bffc17 	ldw	r2,-16(fp)
 100d8cc:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 100d8d0:	e0bffd17 	ldw	r2,-12(fp)
 100d8d4:	10800104 	addi	r2,r2,4
 100d8d8:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 100d8dc:	e0bffd17 	ldw	r2,-12(fp)
 100d8e0:	10800017 	ldw	r2,0(r2)
 100d8e4:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100d8e8:	e0bffc17 	ldw	r2,-16(fp)
 100d8ec:	1004c03a 	cmpne	r2,r2,zero
 100d8f0:	103fd71e 	bne	r2,zero,100d850 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 100d8f4:	e037883a 	mov	sp,fp
 100d8f8:	df000017 	ldw	fp,0(sp)
 100d8fc:	dec00104 	addi	sp,sp,4
 100d900:	f800283a 	ret

0100d904 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 100d904:	defffc04 	addi	sp,sp,-16
 100d908:	df000315 	stw	fp,12(sp)
 100d90c:	df000304 	addi	fp,sp,12
 100d910:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 100d914:	e0bfff17 	ldw	r2,-4(fp)
 100d918:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 100d91c:	e0bfff17 	ldw	r2,-4(fp)
 100d920:	108002c4 	addi	r2,r2,11
 100d924:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100d928:	e03ffd05 	stb	zero,-12(fp)
 100d92c:	00000806 	br	100d950 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 100d930:	e0bffe17 	ldw	r2,-8(fp)
 100d934:	10000005 	stb	zero,0(r2)
 100d938:	e0bffe17 	ldw	r2,-8(fp)
 100d93c:	10800044 	addi	r2,r2,1
 100d940:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100d944:	e0bffd03 	ldbu	r2,-12(fp)
 100d948:	10800044 	addi	r2,r2,1
 100d94c:	e0bffd05 	stb	r2,-12(fp)
 100d950:	e0bffd03 	ldbu	r2,-12(fp)
 100d954:	108000f0 	cmpltui	r2,r2,3
 100d958:	103ff51e 	bne	r2,zero,100d930 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 100d95c:	e037883a 	mov	sp,fp
 100d960:	df000017 	ldw	fp,0(sp)
 100d964:	dec00104 	addi	sp,sp,4
 100d968:	f800283a 	ret

0100d96c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 100d96c:	defffb04 	addi	sp,sp,-20
 100d970:	dfc00415 	stw	ra,16(sp)
 100d974:	df000315 	stw	fp,12(sp)
 100d978:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 100d97c:	010040f4 	movhi	r4,259
 100d980:	21371004 	addi	r4,r4,-9152
 100d984:	0142d004 	movi	r5,2880
 100d988:	100dcd00 	call	100dcd0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 100d98c:	008040f4 	movhi	r2,259
 100d990:	10b71004 	addi	r2,r2,-9152
 100d994:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 100d998:	008040f4 	movhi	r2,259
 100d99c:	10b71c04 	addi	r2,r2,-9104
 100d9a0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100d9a4:	e03fff0d 	sth	zero,-4(fp)
 100d9a8:	00001306 	br	100d9f8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100d9ac:	e0bffe17 	ldw	r2,-8(fp)
 100d9b0:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 100d9b4:	e0fffe17 	ldw	r3,-8(fp)
 100d9b8:	e0bffd17 	ldw	r2,-12(fp)
 100d9bc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 100d9c0:	e0fffe17 	ldw	r3,-8(fp)
 100d9c4:	00800fc4 	movi	r2,63
 100d9c8:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 100d9cc:	e0bffe17 	ldw	r2,-8(fp)
 100d9d0:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 100d9d4:	e0bffe17 	ldw	r2,-8(fp)
 100d9d8:	10800c04 	addi	r2,r2,48
 100d9dc:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 100d9e0:	e0bffd17 	ldw	r2,-12(fp)
 100d9e4:	10800c04 	addi	r2,r2,48
 100d9e8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100d9ec:	e0bfff0b 	ldhu	r2,-4(fp)
 100d9f0:	10800044 	addi	r2,r2,1
 100d9f4:	e0bfff0d 	sth	r2,-4(fp)
 100d9f8:	e0bfff0b 	ldhu	r2,-4(fp)
 100d9fc:	10800ef0 	cmpltui	r2,r2,59
 100da00:	103fea1e 	bne	r2,zero,100d9ac <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 100da04:	e0bffe17 	ldw	r2,-8(fp)
 100da08:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 100da0c:	e0bffe17 	ldw	r2,-8(fp)
 100da10:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 100da14:	e0fffe17 	ldw	r3,-8(fp)
 100da18:	00800fc4 	movi	r2,63
 100da1c:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 100da20:	e0bffe17 	ldw	r2,-8(fp)
 100da24:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 100da28:	008040f4 	movhi	r2,259
 100da2c:	10b71004 	addi	r2,r2,-9152
 100da30:	d0a73c15 	stw	r2,-25360(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 100da34:	e037883a 	mov	sp,fp
 100da38:	dfc00117 	ldw	ra,4(sp)
 100da3c:	df000017 	ldw	fp,0(sp)
 100da40:	dec00204 	addi	sp,sp,8
 100da44:	f800283a 	ret

0100da48 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 100da48:	deffff04 	addi	sp,sp,-4
 100da4c:	df000015 	stw	fp,0(sp)
 100da50:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 100da54:	d0274015 	stw	zero,-25344(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 100da58:	d0273d05 	stb	zero,-25356(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 100da5c:	d0272c05 	stb	zero,-25424(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 100da60:	d0273745 	stb	zero,-25379(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 100da64:	d0272e05 	stb	zero,-25416(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 100da68:	d0273315 	stw	zero,-25396(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 100da6c:	d0272f15 	stw	zero,-25412(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 100da70:	d0274415 	stw	zero,-25328(gp)
    OSIdleCtrMax  = 0L;
 100da74:	d0273515 	stw	zero,-25388(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 100da78:	d0274305 	stb	zero,-25332(gp)
#endif
}
 100da7c:	e037883a 	mov	sp,fp
 100da80:	df000017 	ldw	fp,0(sp)
 100da84:	dec00104 	addi	sp,sp,4
 100da88:	f800283a 	ret

0100da8c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 100da8c:	defffd04 	addi	sp,sp,-12
 100da90:	df000215 	stw	fp,8(sp)
 100da94:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 100da98:	d0273b05 	stb	zero,-25364(gp)
    prdytbl       = &OSRdyTbl[0];
 100da9c:	d0a73b44 	addi	r2,gp,-25363
 100daa0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100daa4:	e03fff05 	stb	zero,-4(fp)
 100daa8:	00000806 	br	100dacc <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 100daac:	e0bffe17 	ldw	r2,-8(fp)
 100dab0:	10000005 	stb	zero,0(r2)
 100dab4:	e0bffe17 	ldw	r2,-8(fp)
 100dab8:	10800044 	addi	r2,r2,1
 100dabc:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100dac0:	e0bfff03 	ldbu	r2,-4(fp)
 100dac4:	10800044 	addi	r2,r2,1
 100dac8:	e0bfff05 	stb	r2,-4(fp)
 100dacc:	e0bfff03 	ldbu	r2,-4(fp)
 100dad0:	108000f0 	cmpltui	r2,r2,3
 100dad4:	103ff51e 	bne	r2,zero,100daac <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 100dad8:	d02730c5 	stb	zero,-25405(gp)
    OSPrioHighRdy = 0;
 100dadc:	d0273085 	stb	zero,-25406(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 100dae0:	d0273915 	stw	zero,-25372(gp)
    OSTCBCur      = (OS_TCB *)0;
 100dae4:	d0273e15 	stw	zero,-25352(gp)
}
 100dae8:	e037883a 	mov	sp,fp
 100daec:	df000017 	ldw	fp,0(sp)
 100daf0:	dec00104 	addi	sp,sp,4
 100daf4:	f800283a 	ret

0100daf8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 100daf8:	defff804 	addi	sp,sp,-32
 100dafc:	dfc00715 	stw	ra,28(sp)
 100db00:	df000615 	stw	fp,24(sp)
 100db04:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 100db08:	018040f4 	movhi	r6,259
 100db0c:	31b70f04 	addi	r6,r6,-9156
 100db10:	00bfffd4 	movui	r2,65535
 100db14:	d8800015 	stw	r2,0(sp)
 100db18:	008040f4 	movhi	r2,259
 100db1c:	10b51004 	addi	r2,r2,-11200
 100db20:	d8800115 	stw	r2,4(sp)
 100db24:	00808004 	movi	r2,512
 100db28:	d8800215 	stw	r2,8(sp)
 100db2c:	d8000315 	stw	zero,12(sp)
 100db30:	008000c4 	movi	r2,3
 100db34:	d8800415 	stw	r2,16(sp)
 100db38:	01004074 	movhi	r4,257
 100db3c:	2137eb04 	addi	r4,r4,-8276
 100db40:	000b883a 	mov	r5,zero
 100db44:	01c00504 	movi	r7,20
 100db48:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 100db4c:	014040b4 	movhi	r5,258
 100db50:	2965c504 	addi	r5,r5,-26860
 100db54:	01000504 	movi	r4,20
 100db58:	e1bfff04 	addi	r6,fp,-4
 100db5c:	10143b00 	call	10143b0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 100db60:	e037883a 	mov	sp,fp
 100db64:	dfc00117 	ldw	ra,4(sp)
 100db68:	df000017 	ldw	fp,0(sp)
 100db6c:	dec00204 	addi	sp,sp,8
 100db70:	f800283a 	ret

0100db74 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 100db74:	defff804 	addi	sp,sp,-32
 100db78:	dfc00715 	stw	ra,28(sp)
 100db7c:	df000615 	stw	fp,24(sp)
 100db80:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 100db84:	018040f4 	movhi	r6,259
 100db88:	31b29704 	addi	r6,r6,-13732
 100db8c:	00bfff94 	movui	r2,65534
 100db90:	d8800015 	stw	r2,0(sp)
 100db94:	008040f4 	movhi	r2,259
 100db98:	10b09804 	addi	r2,r2,-15776
 100db9c:	d8800115 	stw	r2,4(sp)
 100dba0:	00808004 	movi	r2,512
 100dba4:	d8800215 	stw	r2,8(sp)
 100dba8:	d8000315 	stw	zero,12(sp)
 100dbac:	008000c4 	movi	r2,3
 100dbb0:	d8800415 	stw	r2,16(sp)
 100dbb4:	01004074 	movhi	r4,257
 100dbb8:	21380204 	addi	r4,r4,-8184
 100dbbc:	000b883a 	mov	r5,zero
 100dbc0:	01c004c4 	movi	r7,19
 100dbc4:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 100dbc8:	014040b4 	movhi	r5,258
 100dbcc:	2965c904 	addi	r5,r5,-26844
 100dbd0:	010004c4 	movi	r4,19
 100dbd4:	e1bfff04 	addi	r6,fp,-4
 100dbd8:	10143b00 	call	10143b0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 100dbdc:	e037883a 	mov	sp,fp
 100dbe0:	dfc00117 	ldw	ra,4(sp)
 100dbe4:	df000017 	ldw	fp,0(sp)
 100dbe8:	dec00204 	addi	sp,sp,8
 100dbec:	f800283a 	ret

0100dbf0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 100dbf0:	defffb04 	addi	sp,sp,-20
 100dbf4:	dfc00415 	stw	ra,16(sp)
 100dbf8:	df000315 	stw	fp,12(sp)
 100dbfc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 100dc00:	010040f4 	movhi	r4,259
 100dc04:	2139e004 	addi	r4,r4,-6272
 100dc08:	01414404 	movi	r5,1296
 100dc0c:	100dcd00 	call	100dcd0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 100dc10:	010040f4 	movhi	r4,259
 100dc14:	213b2404 	addi	r4,r4,-4976
 100dc18:	01401504 	movi	r5,84
 100dc1c:	100dcd00 	call	100dcd0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 100dc20:	008040f4 	movhi	r2,259
 100dc24:	10b9e004 	addi	r2,r2,-6272
 100dc28:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 100dc2c:	008040f4 	movhi	r2,259
 100dc30:	10b9fb04 	addi	r2,r2,-6164
 100dc34:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100dc38:	e03fff05 	stb	zero,-4(fp)
 100dc3c:	00001106 	br	100dc84 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 100dc40:	e0fffe17 	ldw	r3,-8(fp)
 100dc44:	e0bffd17 	ldw	r2,-12(fp)
 100dc48:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 100dc4c:	e0fffe17 	ldw	r3,-8(fp)
 100dc50:	00800fc4 	movi	r2,63
 100dc54:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100dc58:	e0bffe17 	ldw	r2,-8(fp)
 100dc5c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 100dc60:	e0bffe17 	ldw	r2,-8(fp)
 100dc64:	10801b04 	addi	r2,r2,108
 100dc68:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 100dc6c:	e0bffd17 	ldw	r2,-12(fp)
 100dc70:	10801b04 	addi	r2,r2,108
 100dc74:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100dc78:	e0bfff03 	ldbu	r2,-4(fp)
 100dc7c:	10800044 	addi	r2,r2,1
 100dc80:	e0bfff05 	stb	r2,-4(fp)
 100dc84:	e0bfff03 	ldbu	r2,-4(fp)
 100dc88:	108002f0 	cmpltui	r2,r2,11
 100dc8c:	103fec1e 	bne	r2,zero,100dc40 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 100dc90:	e0bffe17 	ldw	r2,-8(fp)
 100dc94:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 100dc98:	e0fffe17 	ldw	r3,-8(fp)
 100dc9c:	00800fc4 	movi	r2,63
 100dca0:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100dca4:	e0bffe17 	ldw	r2,-8(fp)
 100dca8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 100dcac:	d0273115 	stw	zero,-25404(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 100dcb0:	008040f4 	movhi	r2,259
 100dcb4:	10b9e004 	addi	r2,r2,-6272
 100dcb8:	d0a73615 	stw	r2,-25384(gp)
}
 100dcbc:	e037883a 	mov	sp,fp
 100dcc0:	dfc00117 	ldw	ra,4(sp)
 100dcc4:	df000017 	ldw	fp,0(sp)
 100dcc8:	dec00204 	addi	sp,sp,8
 100dccc:	f800283a 	ret

0100dcd0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 100dcd0:	defffd04 	addi	sp,sp,-12
 100dcd4:	df000215 	stw	fp,8(sp)
 100dcd8:	df000204 	addi	fp,sp,8
 100dcdc:	e13ffe15 	stw	r4,-8(fp)
 100dce0:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 100dce4:	00000806 	br	100dd08 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 100dce8:	e0bffe17 	ldw	r2,-8(fp)
 100dcec:	10000005 	stb	zero,0(r2)
 100dcf0:	e0bffe17 	ldw	r2,-8(fp)
 100dcf4:	10800044 	addi	r2,r2,1
 100dcf8:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100dcfc:	e0bfff0b 	ldhu	r2,-4(fp)
 100dd00:	10bfffc4 	addi	r2,r2,-1
 100dd04:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 100dd08:	e0bfff0b 	ldhu	r2,-4(fp)
 100dd0c:	1004c03a 	cmpne	r2,r2,zero
 100dd10:	103ff51e 	bne	r2,zero,100dce8 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 100dd14:	e037883a 	mov	sp,fp
 100dd18:	df000017 	ldw	fp,0(sp)
 100dd1c:	dec00104 	addi	sp,sp,4
 100dd20:	f800283a 	ret

0100dd24 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 100dd24:	defffc04 	addi	sp,sp,-16
 100dd28:	df000315 	stw	fp,12(sp)
 100dd2c:	df000304 	addi	fp,sp,12
 100dd30:	e13ffd15 	stw	r4,-12(fp)
 100dd34:	e17ffe15 	stw	r5,-8(fp)
 100dd38:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 100dd3c:	00000d06 	br	100dd74 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 100dd40:	e0bffe17 	ldw	r2,-8(fp)
 100dd44:	10c00003 	ldbu	r3,0(r2)
 100dd48:	e0bffd17 	ldw	r2,-12(fp)
 100dd4c:	10c00005 	stb	r3,0(r2)
 100dd50:	e0bffd17 	ldw	r2,-12(fp)
 100dd54:	10800044 	addi	r2,r2,1
 100dd58:	e0bffd15 	stw	r2,-12(fp)
 100dd5c:	e0bffe17 	ldw	r2,-8(fp)
 100dd60:	10800044 	addi	r2,r2,1
 100dd64:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100dd68:	e0bfff0b 	ldhu	r2,-4(fp)
 100dd6c:	10bfffc4 	addi	r2,r2,-1
 100dd70:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 100dd74:	e0bfff0b 	ldhu	r2,-4(fp)
 100dd78:	1004c03a 	cmpne	r2,r2,zero
 100dd7c:	103ff01e 	bne	r2,zero,100dd40 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 100dd80:	e037883a 	mov	sp,fp
 100dd84:	df000017 	ldw	fp,0(sp)
 100dd88:	dec00104 	addi	sp,sp,4
 100dd8c:	f800283a 	ret

0100dd90 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 100dd90:	defffb04 	addi	sp,sp,-20
 100dd94:	dfc00415 	stw	ra,16(sp)
 100dd98:	df000315 	stw	fp,12(sp)
 100dd9c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100dda0:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dda4:	0005303a 	rdctl	r2,status
 100dda8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ddac:	e0fffe17 	ldw	r3,-8(fp)
 100ddb0:	00bfff84 	movi	r2,-2
 100ddb4:	1884703a 	and	r2,r3,r2
 100ddb8:	1001703a 	wrctl	status,r2
  
  return context;
 100ddbc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 100ddc0:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 100ddc4:	d0a73d03 	ldbu	r2,-25356(gp)
 100ddc8:	10803fcc 	andi	r2,r2,255
 100ddcc:	1004c03a 	cmpne	r2,r2,zero
 100ddd0:	10001b1e 	bne	r2,zero,100de40 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 100ddd4:	d0a72c03 	ldbu	r2,-25424(gp)
 100ddd8:	10803fcc 	andi	r2,r2,255
 100dddc:	1004c03a 	cmpne	r2,r2,zero
 100dde0:	1000171e 	bne	r2,zero,100de40 <OS_Sched+0xb0>
            OS_SchedNew();
 100dde4:	100de640 	call	100de64 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 100dde8:	d0a73083 	ldbu	r2,-25406(gp)
 100ddec:	d0e730c3 	ldbu	r3,-25405(gp)
 100ddf0:	11003fcc 	andi	r4,r2,255
 100ddf4:	18803fcc 	andi	r2,r3,255
 100ddf8:	20801126 	beq	r4,r2,100de40 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100ddfc:	d0a73083 	ldbu	r2,-25406(gp)
 100de00:	10803fcc 	andi	r2,r2,255
 100de04:	00c040f4 	movhi	r3,259
 100de08:	18fb2404 	addi	r3,r3,-4976
 100de0c:	1085883a 	add	r2,r2,r2
 100de10:	1085883a 	add	r2,r2,r2
 100de14:	10c5883a 	add	r2,r2,r3
 100de18:	10800017 	ldw	r2,0(r2)
 100de1c:	d0a73915 	stw	r2,-25372(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 100de20:	d0e73917 	ldw	r3,-25372(gp)
 100de24:	18800e17 	ldw	r2,56(r3)
 100de28:	10800044 	addi	r2,r2,1
 100de2c:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 100de30:	d0a73317 	ldw	r2,-25396(gp)
 100de34:	10800044 	addi	r2,r2,1
 100de38:	d0a73315 	stw	r2,-25396(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 100de3c:	101857c0 	call	101857c <OSCtxSw>
 100de40:	e0bfff17 	ldw	r2,-4(fp)
 100de44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100de48:	e0bffd17 	ldw	r2,-12(fp)
 100de4c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 100de50:	e037883a 	mov	sp,fp
 100de54:	dfc00117 	ldw	ra,4(sp)
 100de58:	df000017 	ldw	fp,0(sp)
 100de5c:	dec00204 	addi	sp,sp,8
 100de60:	f800283a 	ret

0100de64 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 100de64:	defffe04 	addi	sp,sp,-8
 100de68:	df000115 	stw	fp,4(sp)
 100de6c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100de70:	d0a73b03 	ldbu	r2,-25364(gp)
 100de74:	10c03fcc 	andi	r3,r2,255
 100de78:	008040b4 	movhi	r2,258
 100de7c:	10a58504 	addi	r2,r2,-27116
 100de80:	10c5883a 	add	r2,r2,r3
 100de84:	10800003 	ldbu	r2,0(r2)
 100de88:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100de8c:	e0bfff03 	ldbu	r2,-4(fp)
 100de90:	100490fa 	slli	r2,r2,3
 100de94:	1009883a 	mov	r4,r2
 100de98:	e0ffff03 	ldbu	r3,-4(fp)
 100de9c:	d0a73b44 	addi	r2,gp,-25363
 100dea0:	1885883a 	add	r2,r3,r2
 100dea4:	10800003 	ldbu	r2,0(r2)
 100dea8:	10c03fcc 	andi	r3,r2,255
 100deac:	008040b4 	movhi	r2,258
 100deb0:	10a58504 	addi	r2,r2,-27116
 100deb4:	10c5883a 	add	r2,r2,r3
 100deb8:	10800003 	ldbu	r2,0(r2)
 100debc:	2085883a 	add	r2,r4,r2
 100dec0:	d0a73085 	stb	r2,-25406(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 100dec4:	e037883a 	mov	sp,fp
 100dec8:	df000017 	ldw	fp,0(sp)
 100decc:	dec00104 	addi	sp,sp,4
 100ded0:	f800283a 	ret

0100ded4 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 100ded4:	defffc04 	addi	sp,sp,-16
 100ded8:	df000315 	stw	fp,12(sp)
 100dedc:	df000304 	addi	fp,sp,12
 100dee0:	e13ffe15 	stw	r4,-8(fp)
 100dee4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 100dee8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 100deec:	00000d06 	br	100df24 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 100def0:	e0bfff17 	ldw	r2,-4(fp)
 100def4:	10c00003 	ldbu	r3,0(r2)
 100def8:	e0bffe17 	ldw	r2,-8(fp)
 100defc:	10c00005 	stb	r3,0(r2)
 100df00:	e0bffe17 	ldw	r2,-8(fp)
 100df04:	10800044 	addi	r2,r2,1
 100df08:	e0bffe15 	stw	r2,-8(fp)
 100df0c:	e0bfff17 	ldw	r2,-4(fp)
 100df10:	10800044 	addi	r2,r2,1
 100df14:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100df18:	e0bffd03 	ldbu	r2,-12(fp)
 100df1c:	10800044 	addi	r2,r2,1
 100df20:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100df24:	e0bfff17 	ldw	r2,-4(fp)
 100df28:	10800003 	ldbu	r2,0(r2)
 100df2c:	10803fcc 	andi	r2,r2,255
 100df30:	1004c03a 	cmpne	r2,r2,zero
 100df34:	103fee1e 	bne	r2,zero,100def0 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 100df38:	e0bffe17 	ldw	r2,-8(fp)
 100df3c:	10000005 	stb	zero,0(r2)
    return (len);
 100df40:	e0bffd03 	ldbu	r2,-12(fp)
}
 100df44:	e037883a 	mov	sp,fp
 100df48:	df000017 	ldw	fp,0(sp)
 100df4c:	dec00104 	addi	sp,sp,4
 100df50:	f800283a 	ret

0100df54 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 100df54:	defffd04 	addi	sp,sp,-12
 100df58:	df000215 	stw	fp,8(sp)
 100df5c:	df000204 	addi	fp,sp,8
 100df60:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 100df64:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 100df68:	00000606 	br	100df84 <OS_StrLen+0x30>
        psrc++;
 100df6c:	e0bfff17 	ldw	r2,-4(fp)
 100df70:	10800044 	addi	r2,r2,1
 100df74:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100df78:	e0bffe03 	ldbu	r2,-8(fp)
 100df7c:	10800044 	addi	r2,r2,1
 100df80:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100df84:	e0bfff17 	ldw	r2,-4(fp)
 100df88:	10800003 	ldbu	r2,0(r2)
 100df8c:	10803fcc 	andi	r2,r2,255
 100df90:	1004c03a 	cmpne	r2,r2,zero
 100df94:	103ff51e 	bne	r2,zero,100df6c <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 100df98:	e0bffe03 	ldbu	r2,-8(fp)
}
 100df9c:	e037883a 	mov	sp,fp
 100dfa0:	df000017 	ldw	fp,0(sp)
 100dfa4:	dec00104 	addi	sp,sp,4
 100dfa8:	f800283a 	ret

0100dfac <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 100dfac:	defffa04 	addi	sp,sp,-24
 100dfb0:	dfc00515 	stw	ra,20(sp)
 100dfb4:	df000415 	stw	fp,16(sp)
 100dfb8:	df000404 	addi	fp,sp,16
 100dfbc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100dfc0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100dfc4:	0005303a 	rdctl	r2,status
 100dfc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dfcc:	e0fffd17 	ldw	r3,-12(fp)
 100dfd0:	00bfff84 	movi	r2,-2
 100dfd4:	1884703a 	and	r2,r3,r2
 100dfd8:	1001703a 	wrctl	status,r2
  
  return context;
 100dfdc:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 100dfe0:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 100dfe4:	d0a72f17 	ldw	r2,-25412(gp)
 100dfe8:	10800044 	addi	r2,r2,1
 100dfec:	d0a72f15 	stw	r2,-25412(gp)
 100dff0:	e0bffe17 	ldw	r2,-8(fp)
 100dff4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dff8:	e0bffc17 	ldw	r2,-16(fp)
 100dffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 100e000:	1018a7c0 	call	1018a7c <OSTaskIdleHook>
    }
 100e004:	003fef06 	br	100dfc4 <OS_TaskIdle+0x18>

0100e008 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 100e008:	defffa04 	addi	sp,sp,-24
 100e00c:	dfc00515 	stw	ra,20(sp)
 100e010:	df000415 	stw	fp,16(sp)
 100e014:	df000404 	addi	fp,sp,16
 100e018:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100e01c:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100e020:	00000206 	br	100e02c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 100e024:	01003204 	movi	r4,200
 100e028:	1014d740 	call	1014d74 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100e02c:	d0a74303 	ldbu	r2,-25332(gp)
 100e030:	10803fcc 	andi	r2,r2,255
 100e034:	1005003a 	cmpeq	r2,r2,zero
 100e038:	103ffa1e 	bne	r2,zero,100e024 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 100e03c:	d1273517 	ldw	r4,-25388(gp)
 100e040:	01401904 	movi	r5,100
 100e044:	10020180 	call	1002018 <__udivsi3>
 100e048:	d0a73515 	stw	r2,-25388(gp)
    if (OSIdleCtrMax == 0L) {
 100e04c:	d0a73517 	ldw	r2,-25388(gp)
 100e050:	1004c03a 	cmpne	r2,r2,zero
 100e054:	1000031e 	bne	r2,zero,100e064 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 100e058:	d0273705 	stb	zero,-25380(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 100e05c:	01003fc4 	movi	r4,255
 100e060:	10149880 	call	1014988 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e064:	0005303a 	rdctl	r2,status
 100e068:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e06c:	e0fffd17 	ldw	r3,-12(fp)
 100e070:	00bfff84 	movi	r2,-2
 100e074:	1884703a 	and	r2,r3,r2
 100e078:	1001703a 	wrctl	status,r2
  
  return context;
 100e07c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 100e080:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 100e084:	d0a72f17 	ldw	r2,-25412(gp)
 100e088:	d0a74415 	stw	r2,-25328(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 100e08c:	d0272f15 	stw	zero,-25412(gp)
 100e090:	e0bffe17 	ldw	r2,-8(fp)
 100e094:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e098:	e0bffc17 	ldw	r2,-16(fp)
 100e09c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 100e0a0:	d1274417 	ldw	r4,-25328(gp)
 100e0a4:	d1673517 	ldw	r5,-25388(gp)
 100e0a8:	10020180 	call	1002018 <__udivsi3>
 100e0ac:	1007883a 	mov	r3,r2
 100e0b0:	00801904 	movi	r2,100
 100e0b4:	10c5c83a 	sub	r2,r2,r3
 100e0b8:	d0a73705 	stb	r2,-25380(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 100e0bc:	10189b80 	call	10189b8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 100e0c0:	100e0d00 	call	100e0d0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 100e0c4:	01001904 	movi	r4,100
 100e0c8:	1014d740 	call	1014d74 <OSTimeDly>
    }
 100e0cc:	003fe506 	br	100e064 <OS_TaskStat+0x5c>

0100e0d0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 100e0d0:	defffa04 	addi	sp,sp,-24
 100e0d4:	dfc00515 	stw	ra,20(sp)
 100e0d8:	df000415 	stw	fp,16(sp)
 100e0dc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100e0e0:	e03ffc05 	stb	zero,-16(fp)
 100e0e4:	00002406 	br	100e178 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 100e0e8:	e13ffc03 	ldbu	r4,-16(fp)
 100e0ec:	e17ffe04 	addi	r5,fp,-8
 100e0f0:	101478c0 	call	101478c <OSTaskStkChk>
 100e0f4:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 100e0f8:	e0bffc43 	ldbu	r2,-15(fp)
 100e0fc:	1004c03a 	cmpne	r2,r2,zero
 100e100:	10001a1e 	bne	r2,zero,100e16c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 100e104:	e0bffc03 	ldbu	r2,-16(fp)
 100e108:	00c040f4 	movhi	r3,259
 100e10c:	18fb2404 	addi	r3,r3,-4976
 100e110:	1085883a 	add	r2,r2,r2
 100e114:	1085883a 	add	r2,r2,r2
 100e118:	10c5883a 	add	r2,r2,r3
 100e11c:	10800017 	ldw	r2,0(r2)
 100e120:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 100e124:	e0bffd17 	ldw	r2,-12(fp)
 100e128:	1005003a 	cmpeq	r2,r2,zero
 100e12c:	10000f1e 	bne	r2,zero,100e16c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 100e130:	e0bffd17 	ldw	r2,-12(fp)
 100e134:	10800060 	cmpeqi	r2,r2,1
 100e138:	10000c1e 	bne	r2,zero,100e16c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 100e13c:	e0bffd17 	ldw	r2,-12(fp)
 100e140:	10c00217 	ldw	r3,8(r2)
 100e144:	e0bffd17 	ldw	r2,-12(fp)
 100e148:	10800317 	ldw	r2,12(r2)
 100e14c:	1085883a 	add	r2,r2,r2
 100e150:	1085883a 	add	r2,r2,r2
 100e154:	1887883a 	add	r3,r3,r2
 100e158:	e0bffd17 	ldw	r2,-12(fp)
 100e15c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 100e160:	e0ffff17 	ldw	r3,-4(fp)
 100e164:	e0bffd17 	ldw	r2,-12(fp)
 100e168:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100e16c:	e0bffc03 	ldbu	r2,-16(fp)
 100e170:	10800044 	addi	r2,r2,1
 100e174:	e0bffc05 	stb	r2,-16(fp)
 100e178:	e0bffc03 	ldbu	r2,-16(fp)
 100e17c:	10800570 	cmpltui	r2,r2,21
 100e180:	103fd91e 	bne	r2,zero,100e0e8 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 100e184:	e037883a 	mov	sp,fp
 100e188:	dfc00117 	ldw	ra,4(sp)
 100e18c:	df000017 	ldw	fp,0(sp)
 100e190:	dec00204 	addi	sp,sp,8
 100e194:	f800283a 	ret

0100e198 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 100e198:	defff104 	addi	sp,sp,-60
 100e19c:	dfc00e15 	stw	ra,56(sp)
 100e1a0:	df000d15 	stw	fp,52(sp)
 100e1a4:	df000d04 	addi	fp,sp,52
 100e1a8:	e17ffb15 	stw	r5,-20(fp)
 100e1ac:	e1bffc15 	stw	r6,-16(fp)
 100e1b0:	e0800417 	ldw	r2,16(fp)
 100e1b4:	e13ffa05 	stb	r4,-24(fp)
 100e1b8:	e1fffd0d 	sth	r7,-12(fp)
 100e1bc:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100e1c0:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e1c4:	0005303a 	rdctl	r2,status
 100e1c8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e1cc:	e0fff717 	ldw	r3,-36(fp)
 100e1d0:	00bfff84 	movi	r2,-2
 100e1d4:	1884703a 	and	r2,r3,r2
 100e1d8:	1001703a 	wrctl	status,r2
  
  return context;
 100e1dc:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 100e1e0:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 100e1e4:	d0a73617 	ldw	r2,-25384(gp)
 100e1e8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 100e1ec:	e0bff917 	ldw	r2,-28(fp)
 100e1f0:	1005003a 	cmpeq	r2,r2,zero
 100e1f4:	1000941e 	bne	r2,zero,100e448 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 100e1f8:	e0bff917 	ldw	r2,-28(fp)
 100e1fc:	10800517 	ldw	r2,20(r2)
 100e200:	d0a73615 	stw	r2,-25384(gp)
 100e204:	e0bff817 	ldw	r2,-32(fp)
 100e208:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e20c:	e0bff617 	ldw	r2,-40(fp)
 100e210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 100e214:	e0fff917 	ldw	r3,-28(fp)
 100e218:	e0bffb17 	ldw	r2,-20(fp)
 100e21c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 100e220:	e0fff917 	ldw	r3,-28(fp)
 100e224:	e0bffa03 	ldbu	r2,-24(fp)
 100e228:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 100e22c:	e0bff917 	ldw	r2,-28(fp)
 100e230:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 100e234:	e0bff917 	ldw	r2,-28(fp)
 100e238:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 100e23c:	e0bff917 	ldw	r2,-28(fp)
 100e240:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 100e244:	e0fff917 	ldw	r3,-28(fp)
 100e248:	e0800317 	ldw	r2,12(fp)
 100e24c:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 100e250:	e0fff917 	ldw	r3,-28(fp)
 100e254:	e0800217 	ldw	r2,8(fp)
 100e258:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 100e25c:	e0fff917 	ldw	r3,-28(fp)
 100e260:	e0bffc17 	ldw	r2,-16(fp)
 100e264:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 100e268:	e0fff917 	ldw	r3,-28(fp)
 100e26c:	e0bffe0b 	ldhu	r2,-8(fp)
 100e270:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 100e274:	e0fff917 	ldw	r3,-28(fp)
 100e278:	e0bffd0b 	ldhu	r2,-12(fp)
 100e27c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 100e280:	e0bff917 	ldw	r2,-28(fp)
 100e284:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 100e288:	e0bffa03 	ldbu	r2,-24(fp)
 100e28c:	1004d0fa 	srli	r2,r2,3
 100e290:	1007883a 	mov	r3,r2
 100e294:	e0bff917 	ldw	r2,-28(fp)
 100e298:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 100e29c:	e0bffa03 	ldbu	r2,-24(fp)
 100e2a0:	108001cc 	andi	r2,r2,7
 100e2a4:	1007883a 	mov	r3,r2
 100e2a8:	e0bff917 	ldw	r2,-28(fp)
 100e2ac:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 100e2b0:	e0bff917 	ldw	r2,-28(fp)
 100e2b4:	10800d03 	ldbu	r2,52(r2)
 100e2b8:	10c03fcc 	andi	r3,r2,255
 100e2bc:	00800044 	movi	r2,1
 100e2c0:	10c4983a 	sll	r2,r2,r3
 100e2c4:	1007883a 	mov	r3,r2
 100e2c8:	e0bff917 	ldw	r2,-28(fp)
 100e2cc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 100e2d0:	e0bff917 	ldw	r2,-28(fp)
 100e2d4:	10800cc3 	ldbu	r2,51(r2)
 100e2d8:	10c03fcc 	andi	r3,r2,255
 100e2dc:	00800044 	movi	r2,1
 100e2e0:	10c4983a 	sll	r2,r2,r3
 100e2e4:	1007883a 	mov	r3,r2
 100e2e8:	e0bff917 	ldw	r2,-28(fp)
 100e2ec:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 100e2f0:	e0bff917 	ldw	r2,-28(fp)
 100e2f4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 100e2f8:	e0bff917 	ldw	r2,-28(fp)
 100e2fc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 100e300:	e0bff917 	ldw	r2,-28(fp)
 100e304:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 100e308:	e0bff917 	ldw	r2,-28(fp)
 100e30c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 100e310:	e0bff917 	ldw	r2,-28(fp)
 100e314:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 100e318:	e0bff917 	ldw	r2,-28(fp)
 100e31c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 100e320:	e0bff917 	ldw	r2,-28(fp)
 100e324:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 100e328:	e0bff917 	ldw	r2,-28(fp)
 100e32c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 100e330:	e0bff917 	ldw	r2,-28(fp)
 100e334:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 100e338:	e0fff917 	ldw	r3,-28(fp)
 100e33c:	00800fc4 	movi	r2,63
 100e340:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 100e344:	e0bff917 	ldw	r2,-28(fp)
 100e348:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 100e34c:	e13ff917 	ldw	r4,-28(fp)
 100e350:	1018a980 	call	1018a98 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 100e354:	e13ff917 	ldw	r4,-28(fp)
 100e358:	101895c0 	call	101895c <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e35c:	0005303a 	rdctl	r2,status
 100e360:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e364:	e0fff517 	ldw	r3,-44(fp)
 100e368:	00bfff84 	movi	r2,-2
 100e36c:	1884703a 	and	r2,r3,r2
 100e370:	1001703a 	wrctl	status,r2
  
  return context;
 100e374:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 100e378:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 100e37c:	e0bffa03 	ldbu	r2,-24(fp)
 100e380:	00c040f4 	movhi	r3,259
 100e384:	18fb2404 	addi	r3,r3,-4976
 100e388:	1085883a 	add	r2,r2,r2
 100e38c:	1085883a 	add	r2,r2,r2
 100e390:	10c7883a 	add	r3,r2,r3
 100e394:	e0bff917 	ldw	r2,-28(fp)
 100e398:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 100e39c:	d0e73117 	ldw	r3,-25404(gp)
 100e3a0:	e0bff917 	ldw	r2,-28(fp)
 100e3a4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 100e3a8:	e0bff917 	ldw	r2,-28(fp)
 100e3ac:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 100e3b0:	d0a73117 	ldw	r2,-25404(gp)
 100e3b4:	1005003a 	cmpeq	r2,r2,zero
 100e3b8:	1000031e 	bne	r2,zero,100e3c8 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 100e3bc:	d0e73117 	ldw	r3,-25404(gp)
 100e3c0:	e0bff917 	ldw	r2,-28(fp)
 100e3c4:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 100e3c8:	e0bff917 	ldw	r2,-28(fp)
 100e3cc:	d0a73115 	stw	r2,-25404(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 100e3d0:	e0bff917 	ldw	r2,-28(fp)
 100e3d4:	10c00d83 	ldbu	r3,54(r2)
 100e3d8:	d0a73b03 	ldbu	r2,-25364(gp)
 100e3dc:	1884b03a 	or	r2,r3,r2
 100e3e0:	d0a73b05 	stb	r2,-25364(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100e3e4:	e0bff917 	ldw	r2,-28(fp)
 100e3e8:	10800d03 	ldbu	r2,52(r2)
 100e3ec:	11003fcc 	andi	r4,r2,255
 100e3f0:	e0bff917 	ldw	r2,-28(fp)
 100e3f4:	10800d03 	ldbu	r2,52(r2)
 100e3f8:	10c03fcc 	andi	r3,r2,255
 100e3fc:	d0a73b44 	addi	r2,gp,-25363
 100e400:	1885883a 	add	r2,r3,r2
 100e404:	10c00003 	ldbu	r3,0(r2)
 100e408:	e0bff917 	ldw	r2,-28(fp)
 100e40c:	10800d43 	ldbu	r2,53(r2)
 100e410:	1884b03a 	or	r2,r3,r2
 100e414:	1007883a 	mov	r3,r2
 100e418:	d0a73b44 	addi	r2,gp,-25363
 100e41c:	2085883a 	add	r2,r4,r2
 100e420:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 100e424:	d0a73743 	ldbu	r2,-25379(gp)
 100e428:	10800044 	addi	r2,r2,1
 100e42c:	d0a73745 	stb	r2,-25379(gp)
 100e430:	e0bff817 	ldw	r2,-32(fp)
 100e434:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e438:	e0bff417 	ldw	r2,-48(fp)
 100e43c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 100e440:	e03fff15 	stw	zero,-4(fp)
 100e444:	00000606 	br	100e460 <OS_TCBInit+0x2c8>
 100e448:	e0bff817 	ldw	r2,-32(fp)
 100e44c:	e0bff315 	stw	r2,-52(fp)
 100e450:	e0bff317 	ldw	r2,-52(fp)
 100e454:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 100e458:	00801084 	movi	r2,66
 100e45c:	e0bfff15 	stw	r2,-4(fp)
 100e460:	e0bfff17 	ldw	r2,-4(fp)
}
 100e464:	e037883a 	mov	sp,fp
 100e468:	dfc00117 	ldw	ra,4(sp)
 100e46c:	df000017 	ldw	fp,0(sp)
 100e470:	dec00204 	addi	sp,sp,8
 100e474:	f800283a 	ret

0100e478 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 100e478:	defffe04 	addi	sp,sp,-8
 100e47c:	df000115 	stw	fp,4(sp)
 100e480:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 100e484:	d0a01604 	addi	r2,gp,-32680
 100e488:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 100e48c:	d0a01704 	addi	r2,gp,-32676
 100e490:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 100e494:	d0a01884 	addi	r2,gp,-32670
 100e498:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 100e49c:	d0a01904 	addi	r2,gp,-32668
 100e4a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 100e4a4:	d0a01804 	addi	r2,gp,-32672
 100e4a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 100e4ac:	d0a01984 	addi	r2,gp,-32666
 100e4b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 100e4b4:	d0a01a04 	addi	r2,gp,-32664
 100e4b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 100e4bc:	d0a01a84 	addi	r2,gp,-32662
 100e4c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 100e4c4:	d0a01b04 	addi	r2,gp,-32660
 100e4c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 100e4cc:	d0a01b84 	addi	r2,gp,-32658
 100e4d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 100e4d4:	d0a01c04 	addi	r2,gp,-32656
 100e4d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 100e4dc:	d0a01c84 	addi	r2,gp,-32654
 100e4e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 100e4e4:	d0a01d04 	addi	r2,gp,-32652
 100e4e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 100e4ec:	d0a01d84 	addi	r2,gp,-32650
 100e4f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 100e4f4:	d0a01e04 	addi	r2,gp,-32648
 100e4f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 100e4fc:	d0a01e84 	addi	r2,gp,-32646
 100e500:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 100e504:	d0a01f04 	addi	r2,gp,-32644
 100e508:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 100e50c:	d0a01f84 	addi	r2,gp,-32642
 100e510:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 100e514:	d0a02004 	addi	r2,gp,-32640
 100e518:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 100e51c:	d0a02084 	addi	r2,gp,-32638
 100e520:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 100e524:	d0a02104 	addi	r2,gp,-32636
 100e528:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 100e52c:	d0a02184 	addi	r2,gp,-32634
 100e530:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 100e534:	d0a02204 	addi	r2,gp,-32632
 100e538:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 100e53c:	d0a02284 	addi	r2,gp,-32630
 100e540:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 100e544:	d0a02304 	addi	r2,gp,-32628
 100e548:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 100e54c:	d0a02384 	addi	r2,gp,-32626
 100e550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 100e554:	d0a02404 	addi	r2,gp,-32624
 100e558:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 100e55c:	d0a02484 	addi	r2,gp,-32622
 100e560:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 100e564:	d0a02504 	addi	r2,gp,-32620
 100e568:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 100e56c:	d0a02584 	addi	r2,gp,-32618
 100e570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 100e574:	d0a02604 	addi	r2,gp,-32616
 100e578:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 100e57c:	d0a02684 	addi	r2,gp,-32614
 100e580:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 100e584:	d0a02704 	addi	r2,gp,-32612
 100e588:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 100e58c:	d0a02784 	addi	r2,gp,-32610
 100e590:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 100e594:	d0a02804 	addi	r2,gp,-32608
 100e598:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 100e59c:	d0a02884 	addi	r2,gp,-32606
 100e5a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 100e5a4:	d0a02904 	addi	r2,gp,-32604
 100e5a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 100e5ac:	d0a02984 	addi	r2,gp,-32602
 100e5b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 100e5b4:	d0a02a04 	addi	r2,gp,-32600
 100e5b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 100e5bc:	d0a02a84 	addi	r2,gp,-32598
 100e5c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 100e5c4:	d0a02b04 	addi	r2,gp,-32596
 100e5c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 100e5cc:	d0a02b84 	addi	r2,gp,-32594
 100e5d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 100e5d4:	d0a02c04 	addi	r2,gp,-32592
 100e5d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 100e5dc:	d0a02c84 	addi	r2,gp,-32590
 100e5e0:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
 100e5e4:	008040f4 	movhi	r2,259
 100e5e8:	10acbc04 	addi	r2,r2,-19728
 100e5ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
 100e5f0:	008040f4 	movhi	r2,259
 100e5f4:	10abdc04 	addi	r2,r2,-20624
 100e5f8:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
 100e5fc:	d0a02d84 	addi	r2,gp,-32586
 100e600:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
 100e604:	d0a02e04 	addi	r2,gp,-32584
 100e608:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
 100e60c:	d0a02e84 	addi	r2,gp,-32582
 100e610:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
 100e614:	d0a02f04 	addi	r2,gp,-32580
 100e618:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 100e61c:	d0a02f84 	addi	r2,gp,-32578
 100e620:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
 100e624:	d0a03004 	addi	r2,gp,-32576
 100e628:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
 100e62c:	d0a03084 	addi	r2,gp,-32574
 100e630:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
 100e634:	d0a03104 	addi	r2,gp,-32572
 100e638:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
 100e63c:	d0a03184 	addi	r2,gp,-32570
 100e640:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
 100e644:	d0a02d04 	addi	r2,gp,-32588
 100e648:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 100e64c:	d0a03204 	addi	r2,gp,-32568
 100e650:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 100e654:	e037883a 	mov	sp,fp
 100e658:	df000017 	ldw	fp,0(sp)
 100e65c:	dec00104 	addi	sp,sp,4
 100e660:	f800283a 	ret

0100e664 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 100e664:	defff104 	addi	sp,sp,-60
 100e668:	df000e15 	stw	fp,56(sp)
 100e66c:	df000e04 	addi	fp,sp,56
 100e670:	e13ffa15 	stw	r4,-24(fp)
 100e674:	e1fffd15 	stw	r7,-12(fp)
 100e678:	e17ffb0d 	sth	r5,-20(fp)
 100e67c:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100e680:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100e684:	e0bffd17 	ldw	r2,-12(fp)
 100e688:	1004c03a 	cmpne	r2,r2,zero
 100e68c:	1000021e 	bne	r2,zero,100e698 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 100e690:	e03fff15 	stw	zero,-4(fp)
 100e694:	0000bb06 	br	100e984 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100e698:	e0bffa17 	ldw	r2,-24(fp)
 100e69c:	1004c03a 	cmpne	r2,r2,zero
 100e6a0:	1000051e 	bne	r2,zero,100e6b8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100e6a4:	e0fffd17 	ldw	r3,-12(fp)
 100e6a8:	00801b84 	movi	r2,110
 100e6ac:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100e6b0:	e03fff15 	stw	zero,-4(fp)
 100e6b4:	0000b306 	br	100e984 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100e6b8:	e0bffa17 	ldw	r2,-24(fp)
 100e6bc:	10800003 	ldbu	r2,0(r2)
 100e6c0:	10803fcc 	andi	r2,r2,255
 100e6c4:	10800160 	cmpeqi	r2,r2,5
 100e6c8:	1000051e 	bne	r2,zero,100e6e0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 100e6cc:	e0fffd17 	ldw	r3,-12(fp)
 100e6d0:	00800044 	movi	r2,1
 100e6d4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100e6d8:	e03fff15 	stw	zero,-4(fp)
 100e6dc:	0000a906 	br	100e984 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100e6e0:	e0fffc03 	ldbu	r3,-16(fp)
 100e6e4:	00bfe004 	movi	r2,-128
 100e6e8:	1884703a 	and	r2,r3,r2
 100e6ec:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 100e6f0:	e0bff943 	ldbu	r2,-27(fp)
 100e6f4:	1005003a 	cmpeq	r2,r2,zero
 100e6f8:	1000061e 	bne	r2,zero,100e714 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 100e6fc:	e0bffc03 	ldbu	r2,-16(fp)
 100e700:	10801fcc 	andi	r2,r2,127
 100e704:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 100e708:	00800044 	movi	r2,1
 100e70c:	e0bff905 	stb	r2,-28(fp)
 100e710:	00000106 	br	100e718 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 100e714:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 100e718:	e0bffd17 	ldw	r2,-12(fp)
 100e71c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e720:	0005303a 	rdctl	r2,status
 100e724:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e728:	e0fff717 	ldw	r3,-36(fp)
 100e72c:	00bfff84 	movi	r2,-2
 100e730:	1884703a 	and	r2,r3,r2
 100e734:	1001703a 	wrctl	status,r2
  
  return context;
 100e738:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 100e73c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 100e740:	e0bffc03 	ldbu	r2,-16(fp)
 100e744:	e0bffe15 	stw	r2,-8(fp)
 100e748:	e0fffe17 	ldw	r3,-8(fp)
 100e74c:	18800060 	cmpeqi	r2,r3,1
 100e750:	1000651e 	bne	r2,zero,100e8e8 <OSFlagAccept+0x284>
 100e754:	e0fffe17 	ldw	r3,-8(fp)
 100e758:	18800088 	cmpgei	r2,r3,2
 100e75c:	1000041e 	bne	r2,zero,100e770 <OSFlagAccept+0x10c>
 100e760:	e0fffe17 	ldw	r3,-8(fp)
 100e764:	1805003a 	cmpeq	r2,r3,zero
 100e768:	1000421e 	bne	r2,zero,100e874 <OSFlagAccept+0x210>
 100e76c:	00007b06 	br	100e95c <OSFlagAccept+0x2f8>
 100e770:	e0fffe17 	ldw	r3,-8(fp)
 100e774:	188000a0 	cmpeqi	r2,r3,2
 100e778:	1000041e 	bne	r2,zero,100e78c <OSFlagAccept+0x128>
 100e77c:	e0fffe17 	ldw	r3,-8(fp)
 100e780:	188000e0 	cmpeqi	r2,r3,3
 100e784:	10001e1e 	bne	r2,zero,100e800 <OSFlagAccept+0x19c>
 100e788:	00007406 	br	100e95c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100e78c:	e0bffa17 	ldw	r2,-24(fp)
 100e790:	10c0020b 	ldhu	r3,8(r2)
 100e794:	e0bffb0b 	ldhu	r2,-20(fp)
 100e798:	1884703a 	and	r2,r3,r2
 100e79c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100e7a0:	e0fff98b 	ldhu	r3,-26(fp)
 100e7a4:	e0bffb0b 	ldhu	r2,-20(fp)
 100e7a8:	18800d1e 	bne	r3,r2,100e7e0 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100e7ac:	e0bff903 	ldbu	r2,-28(fp)
 100e7b0:	10800058 	cmpnei	r2,r2,1
 100e7b4:	10000d1e 	bne	r2,zero,100e7ec <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100e7b8:	e0bffa17 	ldw	r2,-24(fp)
 100e7bc:	1080020b 	ldhu	r2,8(r2)
 100e7c0:	1007883a 	mov	r3,r2
 100e7c4:	e0bff98b 	ldhu	r2,-26(fp)
 100e7c8:	0084303a 	nor	r2,zero,r2
 100e7cc:	1884703a 	and	r2,r3,r2
 100e7d0:	1007883a 	mov	r3,r2
 100e7d4:	e0bffa17 	ldw	r2,-24(fp)
 100e7d8:	10c0020d 	sth	r3,8(r2)
 100e7dc:	00000306 	br	100e7ec <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100e7e0:	e0fffd17 	ldw	r3,-12(fp)
 100e7e4:	00801c04 	movi	r2,112
 100e7e8:	18800005 	stb	r2,0(r3)
 100e7ec:	e0bff817 	ldw	r2,-32(fp)
 100e7f0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e7f4:	e0bff617 	ldw	r2,-40(fp)
 100e7f8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100e7fc:	00005f06 	br	100e97c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100e800:	e0bffa17 	ldw	r2,-24(fp)
 100e804:	10c0020b 	ldhu	r3,8(r2)
 100e808:	e0bffb0b 	ldhu	r2,-20(fp)
 100e80c:	1884703a 	and	r2,r3,r2
 100e810:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100e814:	e0bff98b 	ldhu	r2,-26(fp)
 100e818:	1005003a 	cmpeq	r2,r2,zero
 100e81c:	10000d1e 	bne	r2,zero,100e854 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100e820:	e0bff903 	ldbu	r2,-28(fp)
 100e824:	10800058 	cmpnei	r2,r2,1
 100e828:	10000d1e 	bne	r2,zero,100e860 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100e82c:	e0bffa17 	ldw	r2,-24(fp)
 100e830:	1080020b 	ldhu	r2,8(r2)
 100e834:	1007883a 	mov	r3,r2
 100e838:	e0bff98b 	ldhu	r2,-26(fp)
 100e83c:	0084303a 	nor	r2,zero,r2
 100e840:	1884703a 	and	r2,r3,r2
 100e844:	1007883a 	mov	r3,r2
 100e848:	e0bffa17 	ldw	r2,-24(fp)
 100e84c:	10c0020d 	sth	r3,8(r2)
 100e850:	00000306 	br	100e860 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100e854:	e0fffd17 	ldw	r3,-12(fp)
 100e858:	00801c04 	movi	r2,112
 100e85c:	18800005 	stb	r2,0(r3)
 100e860:	e0bff817 	ldw	r2,-32(fp)
 100e864:	e0bff515 	stw	r2,-44(fp)
 100e868:	e0bff517 	ldw	r2,-44(fp)
 100e86c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100e870:	00004206 	br	100e97c <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100e874:	e0bffa17 	ldw	r2,-24(fp)
 100e878:	1080020b 	ldhu	r2,8(r2)
 100e87c:	0084303a 	nor	r2,zero,r2
 100e880:	1007883a 	mov	r3,r2
 100e884:	e0bffb0b 	ldhu	r2,-20(fp)
 100e888:	1884703a 	and	r2,r3,r2
 100e88c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100e890:	e0fff98b 	ldhu	r3,-26(fp)
 100e894:	e0bffb0b 	ldhu	r2,-20(fp)
 100e898:	18800b1e 	bne	r3,r2,100e8c8 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100e89c:	e0bff903 	ldbu	r2,-28(fp)
 100e8a0:	10800058 	cmpnei	r2,r2,1
 100e8a4:	10000b1e 	bne	r2,zero,100e8d4 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100e8a8:	e0bffa17 	ldw	r2,-24(fp)
 100e8ac:	10c0020b 	ldhu	r3,8(r2)
 100e8b0:	e0bff98b 	ldhu	r2,-26(fp)
 100e8b4:	1884b03a 	or	r2,r3,r2
 100e8b8:	1007883a 	mov	r3,r2
 100e8bc:	e0bffa17 	ldw	r2,-24(fp)
 100e8c0:	10c0020d 	sth	r3,8(r2)
 100e8c4:	00000306 	br	100e8d4 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100e8c8:	e0fffd17 	ldw	r3,-12(fp)
 100e8cc:	00801c04 	movi	r2,112
 100e8d0:	18800005 	stb	r2,0(r3)
 100e8d4:	e0bff817 	ldw	r2,-32(fp)
 100e8d8:	e0bff415 	stw	r2,-48(fp)
 100e8dc:	e0bff417 	ldw	r2,-48(fp)
 100e8e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100e8e4:	00002506 	br	100e97c <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100e8e8:	e0bffa17 	ldw	r2,-24(fp)
 100e8ec:	1080020b 	ldhu	r2,8(r2)
 100e8f0:	0084303a 	nor	r2,zero,r2
 100e8f4:	1007883a 	mov	r3,r2
 100e8f8:	e0bffb0b 	ldhu	r2,-20(fp)
 100e8fc:	1884703a 	and	r2,r3,r2
 100e900:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100e904:	e0bff98b 	ldhu	r2,-26(fp)
 100e908:	1005003a 	cmpeq	r2,r2,zero
 100e90c:	10000b1e 	bne	r2,zero,100e93c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100e910:	e0bff903 	ldbu	r2,-28(fp)
 100e914:	10800058 	cmpnei	r2,r2,1
 100e918:	10000b1e 	bne	r2,zero,100e948 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100e91c:	e0bffa17 	ldw	r2,-24(fp)
 100e920:	10c0020b 	ldhu	r3,8(r2)
 100e924:	e0bff98b 	ldhu	r2,-26(fp)
 100e928:	1884b03a 	or	r2,r3,r2
 100e92c:	1007883a 	mov	r3,r2
 100e930:	e0bffa17 	ldw	r2,-24(fp)
 100e934:	10c0020d 	sth	r3,8(r2)
 100e938:	00000306 	br	100e948 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100e93c:	e0fffd17 	ldw	r3,-12(fp)
 100e940:	00801c04 	movi	r2,112
 100e944:	18800005 	stb	r2,0(r3)
 100e948:	e0bff817 	ldw	r2,-32(fp)
 100e94c:	e0bff315 	stw	r2,-52(fp)
 100e950:	e0bff317 	ldw	r2,-52(fp)
 100e954:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100e958:	00000806 	br	100e97c <OSFlagAccept+0x318>
 100e95c:	e0bff817 	ldw	r2,-32(fp)
 100e960:	e0bff215 	stw	r2,-56(fp)
 100e964:	e0bff217 	ldw	r2,-56(fp)
 100e968:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100e96c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 100e970:	e0fffd17 	ldw	r3,-12(fp)
 100e974:	00801bc4 	movi	r2,111
 100e978:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 100e97c:	e0bff98b 	ldhu	r2,-26(fp)
 100e980:	e0bfff15 	stw	r2,-4(fp)
 100e984:	e0bfff17 	ldw	r2,-4(fp)
}
 100e988:	e037883a 	mov	sp,fp
 100e98c:	df000017 	ldw	fp,0(sp)
 100e990:	dec00104 	addi	sp,sp,4
 100e994:	f800283a 	ret

0100e998 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 100e998:	defff704 	addi	sp,sp,-36
 100e99c:	df000815 	stw	fp,32(sp)
 100e9a0:	df000804 	addi	fp,sp,32
 100e9a4:	e17ffe15 	stw	r5,-8(fp)
 100e9a8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 100e9ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 100e9b0:	e0bffe17 	ldw	r2,-8(fp)
 100e9b4:	1004c03a 	cmpne	r2,r2,zero
 100e9b8:	1000021e 	bne	r2,zero,100e9c4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 100e9bc:	e03fff15 	stw	zero,-4(fp)
 100e9c0:	00003f06 	br	100eac0 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 100e9c4:	008040b4 	movhi	r2,258
 100e9c8:	10b3c204 	addi	r2,r2,-12536
 100e9cc:	10800003 	ldbu	r2,0(r2)
 100e9d0:	10803fcc 	andi	r2,r2,255
 100e9d4:	1005003a 	cmpeq	r2,r2,zero
 100e9d8:	1000051e 	bne	r2,zero,100e9f0 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 100e9dc:	e0fffe17 	ldw	r3,-8(fp)
 100e9e0:	00800404 	movi	r2,16
 100e9e4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 100e9e8:	e03fff15 	stw	zero,-4(fp)
 100e9ec:	00003406 	br	100eac0 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e9f0:	0005303a 	rdctl	r2,status
 100e9f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e9f8:	e0fffa17 	ldw	r3,-24(fp)
 100e9fc:	00bfff84 	movi	r2,-2
 100ea00:	1884703a 	and	r2,r3,r2
 100ea04:	1001703a 	wrctl	status,r2
  
  return context;
 100ea08:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100ea0c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 100ea10:	008040b4 	movhi	r2,258
 100ea14:	10b3c704 	addi	r2,r2,-12516
 100ea18:	10800017 	ldw	r2,0(r2)
 100ea1c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 100ea20:	e0bffc17 	ldw	r2,-16(fp)
 100ea24:	1005003a 	cmpeq	r2,r2,zero
 100ea28:	10001c1e 	bne	r2,zero,100ea9c <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 100ea2c:	008040b4 	movhi	r2,258
 100ea30:	10b3c704 	addi	r2,r2,-12516
 100ea34:	10800017 	ldw	r2,0(r2)
 100ea38:	10800117 	ldw	r2,4(r2)
 100ea3c:	1007883a 	mov	r3,r2
 100ea40:	008040b4 	movhi	r2,258
 100ea44:	10b3c704 	addi	r2,r2,-12516
 100ea48:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 100ea4c:	e0fffc17 	ldw	r3,-16(fp)
 100ea50:	00800144 	movi	r2,5
 100ea54:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 100ea58:	e0fffc17 	ldw	r3,-16(fp)
 100ea5c:	e0bffd0b 	ldhu	r2,-12(fp)
 100ea60:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 100ea64:	e0bffc17 	ldw	r2,-16(fp)
 100ea68:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 100ea6c:	e0fffc17 	ldw	r3,-16(fp)
 100ea70:	00800fc4 	movi	r2,63
 100ea74:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100ea78:	e0bffc17 	ldw	r2,-16(fp)
 100ea7c:	100002c5 	stb	zero,11(r2)
 100ea80:	e0bffb17 	ldw	r2,-20(fp)
 100ea84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ea88:	e0bff917 	ldw	r2,-28(fp)
 100ea8c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 100ea90:	e0bffe17 	ldw	r2,-8(fp)
 100ea94:	10000005 	stb	zero,0(r2)
 100ea98:	00000706 	br	100eab8 <OSFlagCreate+0x120>
 100ea9c:	e0bffb17 	ldw	r2,-20(fp)
 100eaa0:	e0bff815 	stw	r2,-32(fp)
 100eaa4:	e0bff817 	ldw	r2,-32(fp)
 100eaa8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 100eaac:	e0fffe17 	ldw	r3,-8(fp)
 100eab0:	00801c84 	movi	r2,114
 100eab4:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 100eab8:	e0bffc17 	ldw	r2,-16(fp)
 100eabc:	e0bfff15 	stw	r2,-4(fp)
 100eac0:	e0bfff17 	ldw	r2,-4(fp)
}
 100eac4:	e037883a 	mov	sp,fp
 100eac8:	df000017 	ldw	fp,0(sp)
 100eacc:	dec00104 	addi	sp,sp,4
 100ead0:	f800283a 	ret

0100ead4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 100ead4:	defff004 	addi	sp,sp,-64
 100ead8:	dfc00f15 	stw	ra,60(sp)
 100eadc:	df000e15 	stw	fp,56(sp)
 100eae0:	df000e04 	addi	fp,sp,56
 100eae4:	e13ffb15 	stw	r4,-20(fp)
 100eae8:	e1bffd15 	stw	r6,-12(fp)
 100eaec:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100eaf0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100eaf4:	e0bffd17 	ldw	r2,-12(fp)
 100eaf8:	1004c03a 	cmpne	r2,r2,zero
 100eafc:	1000031e 	bne	r2,zero,100eb0c <OSFlagDel+0x38>
        return (pgrp);
 100eb00:	e0bffb17 	ldw	r2,-20(fp)
 100eb04:	e0bfff15 	stw	r2,-4(fp)
 100eb08:	00009606 	br	100ed64 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100eb0c:	e0bffb17 	ldw	r2,-20(fp)
 100eb10:	1004c03a 	cmpne	r2,r2,zero
 100eb14:	1000061e 	bne	r2,zero,100eb30 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100eb18:	e0fffd17 	ldw	r3,-12(fp)
 100eb1c:	00801b84 	movi	r2,110
 100eb20:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100eb24:	e0fffb17 	ldw	r3,-20(fp)
 100eb28:	e0ffff15 	stw	r3,-4(fp)
 100eb2c:	00008d06 	br	100ed64 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100eb30:	008040b4 	movhi	r2,258
 100eb34:	10b3c204 	addi	r2,r2,-12536
 100eb38:	10800003 	ldbu	r2,0(r2)
 100eb3c:	10803fcc 	andi	r2,r2,255
 100eb40:	1005003a 	cmpeq	r2,r2,zero
 100eb44:	1000061e 	bne	r2,zero,100eb60 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 100eb48:	e0fffd17 	ldw	r3,-12(fp)
 100eb4c:	008003c4 	movi	r2,15
 100eb50:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100eb54:	e0bffb17 	ldw	r2,-20(fp)
 100eb58:	e0bfff15 	stw	r2,-4(fp)
 100eb5c:	00008106 	br	100ed64 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 100eb60:	e0bffb17 	ldw	r2,-20(fp)
 100eb64:	10800003 	ldbu	r2,0(r2)
 100eb68:	10803fcc 	andi	r2,r2,255
 100eb6c:	10800160 	cmpeqi	r2,r2,5
 100eb70:	1000061e 	bne	r2,zero,100eb8c <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 100eb74:	e0fffd17 	ldw	r3,-12(fp)
 100eb78:	00800044 	movi	r2,1
 100eb7c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100eb80:	e0fffb17 	ldw	r3,-20(fp)
 100eb84:	e0ffff15 	stw	r3,-4(fp)
 100eb88:	00007606 	br	100ed64 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100eb8c:	0005303a 	rdctl	r2,status
 100eb90:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100eb94:	e0fff617 	ldw	r3,-40(fp)
 100eb98:	00bfff84 	movi	r2,-2
 100eb9c:	1884703a 	and	r2,r3,r2
 100eba0:	1001703a 	wrctl	status,r2
  
  return context;
 100eba4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 100eba8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 100ebac:	e0bffb17 	ldw	r2,-20(fp)
 100ebb0:	10800117 	ldw	r2,4(r2)
 100ebb4:	1005003a 	cmpeq	r2,r2,zero
 100ebb8:	1000031e 	bne	r2,zero,100ebc8 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 100ebbc:	00800044 	movi	r2,1
 100ebc0:	e0bffa05 	stb	r2,-24(fp)
 100ebc4:	00000106 	br	100ebcc <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 100ebc8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 100ebcc:	e0bffc03 	ldbu	r2,-16(fp)
 100ebd0:	e0bffe15 	stw	r2,-8(fp)
 100ebd4:	e0fffe17 	ldw	r3,-8(fp)
 100ebd8:	1805003a 	cmpeq	r2,r3,zero
 100ebdc:	1000041e 	bne	r2,zero,100ebf0 <OSFlagDel+0x11c>
 100ebe0:	e0fffe17 	ldw	r3,-8(fp)
 100ebe4:	18800060 	cmpeqi	r2,r3,1
 100ebe8:	1000281e 	bne	r2,zero,100ec8c <OSFlagDel+0x1b8>
 100ebec:	00005206 	br	100ed38 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 100ebf0:	e0bffa03 	ldbu	r2,-24(fp)
 100ebf4:	1004c03a 	cmpne	r2,r2,zero
 100ebf8:	10001a1e 	bne	r2,zero,100ec64 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 100ebfc:	e0fffb17 	ldw	r3,-20(fp)
 100ec00:	00800fc4 	movi	r2,63
 100ec04:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100ec08:	e0bffb17 	ldw	r2,-20(fp)
 100ec0c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100ec10:	e0bffb17 	ldw	r2,-20(fp)
 100ec14:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 100ec18:	008040b4 	movhi	r2,258
 100ec1c:	10b3c704 	addi	r2,r2,-12516
 100ec20:	10c00017 	ldw	r3,0(r2)
 100ec24:	e0bffb17 	ldw	r2,-20(fp)
 100ec28:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100ec2c:	e0bffb17 	ldw	r2,-20(fp)
 100ec30:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 100ec34:	00c040b4 	movhi	r3,258
 100ec38:	18f3c704 	addi	r3,r3,-12516
 100ec3c:	e0bffb17 	ldw	r2,-20(fp)
 100ec40:	18800015 	stw	r2,0(r3)
 100ec44:	e0bff717 	ldw	r2,-36(fp)
 100ec48:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ec4c:	e0bff517 	ldw	r2,-44(fp)
 100ec50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 100ec54:	e0bffd17 	ldw	r2,-12(fp)
 100ec58:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 100ec5c:	e03ff815 	stw	zero,-32(fp)
 100ec60:	00003e06 	br	100ed5c <OSFlagDel+0x288>
 100ec64:	e0bff717 	ldw	r2,-36(fp)
 100ec68:	e0bff415 	stw	r2,-48(fp)
 100ec6c:	e0bff417 	ldw	r2,-48(fp)
 100ec70:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 100ec74:	e0fffd17 	ldw	r3,-12(fp)
 100ec78:	00801244 	movi	r2,73
 100ec7c:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 100ec80:	e0bffb17 	ldw	r2,-20(fp)
 100ec84:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 100ec88:	00003406 	br	100ed5c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100ec8c:	e0bffb17 	ldw	r2,-20(fp)
 100ec90:	10800117 	ldw	r2,4(r2)
 100ec94:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100ec98:	00000606 	br	100ecb4 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 100ec9c:	e13ff917 	ldw	r4,-28(fp)
 100eca0:	000b883a 	mov	r5,zero
 100eca4:	100fde40 	call	100fde4 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100eca8:	e0bff917 	ldw	r2,-28(fp)
 100ecac:	10800017 	ldw	r2,0(r2)
 100ecb0:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100ecb4:	e0bff917 	ldw	r2,-28(fp)
 100ecb8:	1004c03a 	cmpne	r2,r2,zero
 100ecbc:	103ff71e 	bne	r2,zero,100ec9c <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 100ecc0:	e0fffb17 	ldw	r3,-20(fp)
 100ecc4:	00800fc4 	movi	r2,63
 100ecc8:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100eccc:	e0bffb17 	ldw	r2,-20(fp)
 100ecd0:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100ecd4:	e0bffb17 	ldw	r2,-20(fp)
 100ecd8:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 100ecdc:	008040b4 	movhi	r2,258
 100ece0:	10b3c704 	addi	r2,r2,-12516
 100ece4:	10c00017 	ldw	r3,0(r2)
 100ece8:	e0bffb17 	ldw	r2,-20(fp)
 100ecec:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100ecf0:	e0bffb17 	ldw	r2,-20(fp)
 100ecf4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 100ecf8:	00c040b4 	movhi	r3,258
 100ecfc:	18f3c704 	addi	r3,r3,-12516
 100ed00:	e0bffb17 	ldw	r2,-20(fp)
 100ed04:	18800015 	stw	r2,0(r3)
 100ed08:	e0bff717 	ldw	r2,-36(fp)
 100ed0c:	e0bff315 	stw	r2,-52(fp)
 100ed10:	e0bff317 	ldw	r2,-52(fp)
 100ed14:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 100ed18:	e0bffa03 	ldbu	r2,-24(fp)
 100ed1c:	10800058 	cmpnei	r2,r2,1
 100ed20:	1000011e 	bne	r2,zero,100ed28 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 100ed24:	100dd900 	call	100dd90 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 100ed28:	e0bffd17 	ldw	r2,-12(fp)
 100ed2c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 100ed30:	e03ff815 	stw	zero,-32(fp)
             break;
 100ed34:	00000906 	br	100ed5c <OSFlagDel+0x288>
 100ed38:	e0bff717 	ldw	r2,-36(fp)
 100ed3c:	e0bff215 	stw	r2,-56(fp)
 100ed40:	e0bff217 	ldw	r2,-56(fp)
 100ed44:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 100ed48:	e0fffd17 	ldw	r3,-12(fp)
 100ed4c:	008001c4 	movi	r2,7
 100ed50:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 100ed54:	e0bffb17 	ldw	r2,-20(fp)
 100ed58:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 100ed5c:	e0bff817 	ldw	r2,-32(fp)
 100ed60:	e0bfff15 	stw	r2,-4(fp)
 100ed64:	e0bfff17 	ldw	r2,-4(fp)
}
 100ed68:	e037883a 	mov	sp,fp
 100ed6c:	dfc00117 	ldw	ra,4(sp)
 100ed70:	df000017 	ldw	fp,0(sp)
 100ed74:	dec00204 	addi	sp,sp,8
 100ed78:	f800283a 	ret

0100ed7c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100ed7c:	defff504 	addi	sp,sp,-44
 100ed80:	dfc00a15 	stw	ra,40(sp)
 100ed84:	df000915 	stw	fp,36(sp)
 100ed88:	df000904 	addi	fp,sp,36
 100ed8c:	e13ffc15 	stw	r4,-16(fp)
 100ed90:	e17ffd15 	stw	r5,-12(fp)
 100ed94:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ed98:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100ed9c:	e0bffe17 	ldw	r2,-8(fp)
 100eda0:	1004c03a 	cmpne	r2,r2,zero
 100eda4:	1000021e 	bne	r2,zero,100edb0 <OSFlagNameGet+0x34>
        return (0);
 100eda8:	e03fff15 	stw	zero,-4(fp)
 100edac:	00003e06 	br	100eea8 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100edb0:	e0bffc17 	ldw	r2,-16(fp)
 100edb4:	1004c03a 	cmpne	r2,r2,zero
 100edb8:	1000051e 	bne	r2,zero,100edd0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100edbc:	e0fffe17 	ldw	r3,-8(fp)
 100edc0:	00801b84 	movi	r2,110
 100edc4:	18800005 	stb	r2,0(r3)
        return (0);
 100edc8:	e03fff15 	stw	zero,-4(fp)
 100edcc:	00003606 	br	100eea8 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100edd0:	e0bffd17 	ldw	r2,-12(fp)
 100edd4:	1004c03a 	cmpne	r2,r2,zero
 100edd8:	1000051e 	bne	r2,zero,100edf0 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 100eddc:	e0fffe17 	ldw	r3,-8(fp)
 100ede0:	00800304 	movi	r2,12
 100ede4:	18800005 	stb	r2,0(r3)
        return (0);
 100ede8:	e03fff15 	stw	zero,-4(fp)
 100edec:	00002e06 	br	100eea8 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100edf0:	008040b4 	movhi	r2,258
 100edf4:	10b3c204 	addi	r2,r2,-12536
 100edf8:	10800003 	ldbu	r2,0(r2)
 100edfc:	10803fcc 	andi	r2,r2,255
 100ee00:	1005003a 	cmpeq	r2,r2,zero
 100ee04:	1000051e 	bne	r2,zero,100ee1c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 100ee08:	e0fffe17 	ldw	r3,-8(fp)
 100ee0c:	00800444 	movi	r2,17
 100ee10:	18800005 	stb	r2,0(r3)
        return (0);
 100ee14:	e03fff15 	stw	zero,-4(fp)
 100ee18:	00002306 	br	100eea8 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ee1c:	0005303a 	rdctl	r2,status
 100ee20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ee24:	e0fff917 	ldw	r3,-28(fp)
 100ee28:	00bfff84 	movi	r2,-2
 100ee2c:	1884703a 	and	r2,r3,r2
 100ee30:	1001703a 	wrctl	status,r2
  
  return context;
 100ee34:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100ee38:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100ee3c:	e0bffc17 	ldw	r2,-16(fp)
 100ee40:	10800003 	ldbu	r2,0(r2)
 100ee44:	10803fcc 	andi	r2,r2,255
 100ee48:	10800160 	cmpeqi	r2,r2,5
 100ee4c:	1000091e 	bne	r2,zero,100ee74 <OSFlagNameGet+0xf8>
 100ee50:	e0bffa17 	ldw	r2,-24(fp)
 100ee54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ee58:	e0bff817 	ldw	r2,-32(fp)
 100ee5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100ee60:	e0fffe17 	ldw	r3,-8(fp)
 100ee64:	00800044 	movi	r2,1
 100ee68:	18800005 	stb	r2,0(r3)
        return (0);
 100ee6c:	e03fff15 	stw	zero,-4(fp)
 100ee70:	00000d06 	br	100eea8 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 100ee74:	e0bffc17 	ldw	r2,-16(fp)
 100ee78:	11400284 	addi	r5,r2,10
 100ee7c:	e13ffd17 	ldw	r4,-12(fp)
 100ee80:	100ded40 	call	100ded4 <OS_StrCopy>
 100ee84:	e0bffb05 	stb	r2,-20(fp)
 100ee88:	e0bffa17 	ldw	r2,-24(fp)
 100ee8c:	e0bff715 	stw	r2,-36(fp)
 100ee90:	e0bff717 	ldw	r2,-36(fp)
 100ee94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100ee98:	e0bffe17 	ldw	r2,-8(fp)
 100ee9c:	10000005 	stb	zero,0(r2)
    return (len);
 100eea0:	e0bffb03 	ldbu	r2,-20(fp)
 100eea4:	e0bfff15 	stw	r2,-4(fp)
 100eea8:	e0bfff17 	ldw	r2,-4(fp)
}
 100eeac:	e037883a 	mov	sp,fp
 100eeb0:	dfc00117 	ldw	ra,4(sp)
 100eeb4:	df000017 	ldw	fp,0(sp)
 100eeb8:	dec00204 	addi	sp,sp,8
 100eebc:	f800283a 	ret

0100eec0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100eec0:	defff504 	addi	sp,sp,-44
 100eec4:	dfc00a15 	stw	ra,40(sp)
 100eec8:	df000915 	stw	fp,36(sp)
 100eecc:	df000904 	addi	fp,sp,36
 100eed0:	e13ffd15 	stw	r4,-12(fp)
 100eed4:	e17ffe15 	stw	r5,-8(fp)
 100eed8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100eedc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100eee0:	e0bfff17 	ldw	r2,-4(fp)
 100eee4:	1005003a 	cmpeq	r2,r2,zero
 100eee8:	1000451e 	bne	r2,zero,100f000 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100eeec:	e0bffd17 	ldw	r2,-12(fp)
 100eef0:	1004c03a 	cmpne	r2,r2,zero
 100eef4:	1000041e 	bne	r2,zero,100ef08 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100eef8:	e0ffff17 	ldw	r3,-4(fp)
 100eefc:	00801b84 	movi	r2,110
 100ef00:	18800005 	stb	r2,0(r3)
        return;
 100ef04:	00003e06 	br	100f000 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100ef08:	e0bffe17 	ldw	r2,-8(fp)
 100ef0c:	1004c03a 	cmpne	r2,r2,zero
 100ef10:	1000041e 	bne	r2,zero,100ef24 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 100ef14:	e0ffff17 	ldw	r3,-4(fp)
 100ef18:	00800304 	movi	r2,12
 100ef1c:	18800005 	stb	r2,0(r3)
        return;
 100ef20:	00003706 	br	100f000 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100ef24:	008040b4 	movhi	r2,258
 100ef28:	10b3c204 	addi	r2,r2,-12536
 100ef2c:	10800003 	ldbu	r2,0(r2)
 100ef30:	10803fcc 	andi	r2,r2,255
 100ef34:	1005003a 	cmpeq	r2,r2,zero
 100ef38:	1000041e 	bne	r2,zero,100ef4c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 100ef3c:	e0ffff17 	ldw	r3,-4(fp)
 100ef40:	00800484 	movi	r2,18
 100ef44:	18800005 	stb	r2,0(r3)
        return;
 100ef48:	00002d06 	br	100f000 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ef4c:	0005303a 	rdctl	r2,status
 100ef50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ef54:	e0fffa17 	ldw	r3,-24(fp)
 100ef58:	00bfff84 	movi	r2,-2
 100ef5c:	1884703a 	and	r2,r3,r2
 100ef60:	1001703a 	wrctl	status,r2
  
  return context;
 100ef64:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100ef68:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100ef6c:	e0bffd17 	ldw	r2,-12(fp)
 100ef70:	10800003 	ldbu	r2,0(r2)
 100ef74:	10803fcc 	andi	r2,r2,255
 100ef78:	10800160 	cmpeqi	r2,r2,5
 100ef7c:	1000081e 	bne	r2,zero,100efa0 <OSFlagNameSet+0xe0>
 100ef80:	e0bffb17 	ldw	r2,-20(fp)
 100ef84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ef88:	e0bff917 	ldw	r2,-28(fp)
 100ef8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100ef90:	e0ffff17 	ldw	r3,-4(fp)
 100ef94:	00800044 	movi	r2,1
 100ef98:	18800005 	stb	r2,0(r3)
        return;
 100ef9c:	00001806 	br	100f000 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 100efa0:	e13ffe17 	ldw	r4,-8(fp)
 100efa4:	100df540 	call	100df54 <OS_StrLen>
 100efa8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 100efac:	e0bffc03 	ldbu	r2,-16(fp)
 100efb0:	10800830 	cmpltui	r2,r2,32
 100efb4:	1000081e 	bne	r2,zero,100efd8 <OSFlagNameSet+0x118>
 100efb8:	e0bffb17 	ldw	r2,-20(fp)
 100efbc:	e0bff815 	stw	r2,-32(fp)
 100efc0:	e0bff817 	ldw	r2,-32(fp)
 100efc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 100efc8:	e0ffff17 	ldw	r3,-4(fp)
 100efcc:	00801cc4 	movi	r2,115
 100efd0:	18800005 	stb	r2,0(r3)
        return;
 100efd4:	00000a06 	br	100f000 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 100efd8:	e0bffd17 	ldw	r2,-12(fp)
 100efdc:	11000284 	addi	r4,r2,10
 100efe0:	e17ffe17 	ldw	r5,-8(fp)
 100efe4:	100ded40 	call	100ded4 <OS_StrCopy>
 100efe8:	e0bffb17 	ldw	r2,-20(fp)
 100efec:	e0bff715 	stw	r2,-36(fp)
 100eff0:	e0bff717 	ldw	r2,-36(fp)
 100eff4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100eff8:	e0bfff17 	ldw	r2,-4(fp)
 100effc:	10000005 	stb	zero,0(r2)
    return;
}
 100f000:	e037883a 	mov	sp,fp
 100f004:	dfc00117 	ldw	ra,4(sp)
 100f008:	df000017 	ldw	fp,0(sp)
 100f00c:	dec00204 	addi	sp,sp,8
 100f010:	f800283a 	ret

0100f014 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 100f014:	deffe004 	addi	sp,sp,-128
 100f018:	dfc01f15 	stw	ra,124(sp)
 100f01c:	df001e15 	stw	fp,120(sp)
 100f020:	df001e04 	addi	fp,sp,120
 100f024:	e13ff915 	stw	r4,-28(fp)
 100f028:	e17ffa0d 	sth	r5,-24(fp)
 100f02c:	e1bffb05 	stb	r6,-20(fp)
 100f030:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100f034:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100f038:	e0800217 	ldw	r2,8(fp)
 100f03c:	1004c03a 	cmpne	r2,r2,zero
 100f040:	1000021e 	bne	r2,zero,100f04c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 100f044:	e03fff15 	stw	zero,-4(fp)
 100f048:	00017d06 	br	100f640 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100f04c:	e0bff917 	ldw	r2,-28(fp)
 100f050:	1004c03a 	cmpne	r2,r2,zero
 100f054:	1000051e 	bne	r2,zero,100f06c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f058:	e0c00217 	ldw	r3,8(fp)
 100f05c:	00801b84 	movi	r2,110
 100f060:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f064:	e03fff15 	stw	zero,-4(fp)
 100f068:	00017506 	br	100f640 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100f06c:	008040b4 	movhi	r2,258
 100f070:	10b3c204 	addi	r2,r2,-12536
 100f074:	10800003 	ldbu	r2,0(r2)
 100f078:	10803fcc 	andi	r2,r2,255
 100f07c:	1005003a 	cmpeq	r2,r2,zero
 100f080:	1000051e 	bne	r2,zero,100f098 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 100f084:	e0c00217 	ldw	r3,8(fp)
 100f088:	00800084 	movi	r2,2
 100f08c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f090:	e03fff15 	stw	zero,-4(fp)
 100f094:	00016a06 	br	100f640 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 100f098:	008040b4 	movhi	r2,258
 100f09c:	10b3b104 	addi	r2,r2,-12604
 100f0a0:	10800003 	ldbu	r2,0(r2)
 100f0a4:	10803fcc 	andi	r2,r2,255
 100f0a8:	1005003a 	cmpeq	r2,r2,zero
 100f0ac:	1000051e 	bne	r2,zero,100f0c4 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 100f0b0:	e0c00217 	ldw	r3,8(fp)
 100f0b4:	00800344 	movi	r2,13
 100f0b8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f0bc:	e03fff15 	stw	zero,-4(fp)
 100f0c0:	00015f06 	br	100f640 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100f0c4:	e0bff917 	ldw	r2,-28(fp)
 100f0c8:	10800003 	ldbu	r2,0(r2)
 100f0cc:	10803fcc 	andi	r2,r2,255
 100f0d0:	10800160 	cmpeqi	r2,r2,5
 100f0d4:	1000051e 	bne	r2,zero,100f0ec <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 100f0d8:	e0c00217 	ldw	r3,8(fp)
 100f0dc:	00800044 	movi	r2,1
 100f0e0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f0e4:	e03fff15 	stw	zero,-4(fp)
 100f0e8:	00015506 	br	100f640 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100f0ec:	e0fffb03 	ldbu	r3,-20(fp)
 100f0f0:	00bfe004 	movi	r2,-128
 100f0f4:	1884703a 	and	r2,r3,r2
 100f0f8:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 100f0fc:	e0bff283 	ldbu	r2,-54(fp)
 100f100:	1005003a 	cmpeq	r2,r2,zero
 100f104:	1000071e 	bne	r2,zero,100f124 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 100f108:	00c01fc4 	movi	r3,127
 100f10c:	e0bffb03 	ldbu	r2,-20(fp)
 100f110:	10c4703a 	and	r2,r2,r3
 100f114:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 100f118:	00800044 	movi	r2,1
 100f11c:	e0bff205 	stb	r2,-56(fp)
 100f120:	00000106 	br	100f128 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 100f124:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f128:	0005303a 	rdctl	r2,status
 100f12c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f130:	e0fff017 	ldw	r3,-64(fp)
 100f134:	00bfff84 	movi	r2,-2
 100f138:	1884703a 	and	r2,r3,r2
 100f13c:	1001703a 	wrctl	status,r2
  
  return context;
 100f140:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 100f144:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 100f148:	e0bffb03 	ldbu	r2,-20(fp)
 100f14c:	e0bffe15 	stw	r2,-8(fp)
 100f150:	e0fffe17 	ldw	r3,-8(fp)
 100f154:	18800060 	cmpeqi	r2,r3,1
 100f158:	1000981e 	bne	r2,zero,100f3bc <OSFlagPend+0x3a8>
 100f15c:	e0fffe17 	ldw	r3,-8(fp)
 100f160:	18800088 	cmpgei	r2,r3,2
 100f164:	1000041e 	bne	r2,zero,100f178 <OSFlagPend+0x164>
 100f168:	e0fffe17 	ldw	r3,-8(fp)
 100f16c:	1805003a 	cmpeq	r2,r3,zero
 100f170:	1000641e 	bne	r2,zero,100f304 <OSFlagPend+0x2f0>
 100f174:	0000bf06 	br	100f474 <OSFlagPend+0x460>
 100f178:	e0fffe17 	ldw	r3,-8(fp)
 100f17c:	188000a0 	cmpeqi	r2,r3,2
 100f180:	1000041e 	bne	r2,zero,100f194 <OSFlagPend+0x180>
 100f184:	e0fffe17 	ldw	r3,-8(fp)
 100f188:	188000e0 	cmpeqi	r2,r3,3
 100f18c:	10002f1e 	bne	r2,zero,100f24c <OSFlagPend+0x238>
 100f190:	0000b806 	br	100f474 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 100f194:	e0bff917 	ldw	r2,-28(fp)
 100f198:	10c0020b 	ldhu	r3,8(r2)
 100f19c:	e0bffa0b 	ldhu	r2,-24(fp)
 100f1a0:	1884703a 	and	r2,r3,r2
 100f1a4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100f1a8:	e0fff30b 	ldhu	r3,-52(fp)
 100f1ac:	e0bffa0b 	ldhu	r2,-24(fp)
 100f1b0:	18801a1e 	bne	r3,r2,100f21c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f1b4:	e0bff203 	ldbu	r2,-56(fp)
 100f1b8:	10800058 	cmpnei	r2,r2,1
 100f1bc:	1000091e 	bne	r2,zero,100f1e4 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100f1c0:	e0bff917 	ldw	r2,-28(fp)
 100f1c4:	1080020b 	ldhu	r2,8(r2)
 100f1c8:	1007883a 	mov	r3,r2
 100f1cc:	e0bff30b 	ldhu	r2,-52(fp)
 100f1d0:	0084303a 	nor	r2,zero,r2
 100f1d4:	1884703a 	and	r2,r3,r2
 100f1d8:	1007883a 	mov	r3,r2
 100f1dc:	e0bff917 	ldw	r2,-28(fp)
 100f1e0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100f1e4:	008040b4 	movhi	r2,258
 100f1e8:	10b3c304 	addi	r2,r2,-12532
 100f1ec:	10c00017 	ldw	r3,0(r2)
 100f1f0:	e0bff30b 	ldhu	r2,-52(fp)
 100f1f4:	18800b0d 	sth	r2,44(r3)
 100f1f8:	e0bff117 	ldw	r2,-60(fp)
 100f1fc:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f200:	e0bfef17 	ldw	r2,-68(fp)
 100f204:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100f208:	e0800217 	ldw	r2,8(fp)
 100f20c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100f210:	e0bff30b 	ldhu	r2,-52(fp)
 100f214:	e0bfff15 	stw	r2,-4(fp)
 100f218:	00010906 	br	100f640 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100f21c:	e1bffa0b 	ldhu	r6,-24(fp)
 100f220:	e1fffb03 	ldbu	r7,-20(fp)
 100f224:	e0bffc0b 	ldhu	r2,-16(fp)
 100f228:	e17ff404 	addi	r5,fp,-48
 100f22c:	d8800015 	stw	r2,0(sp)
 100f230:	e13ff917 	ldw	r4,-28(fp)
 100f234:	100fb3c0 	call	100fb3c <OS_FlagBlock>
 100f238:	e0bff117 	ldw	r2,-60(fp)
 100f23c:	e0bfee15 	stw	r2,-72(fp)
 100f240:	e0bfee17 	ldw	r2,-72(fp)
 100f244:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100f248:	00009506 	br	100f4a0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 100f24c:	e0bff917 	ldw	r2,-28(fp)
 100f250:	10c0020b 	ldhu	r3,8(r2)
 100f254:	e0bffa0b 	ldhu	r2,-24(fp)
 100f258:	1884703a 	and	r2,r3,r2
 100f25c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100f260:	e0bff30b 	ldhu	r2,-52(fp)
 100f264:	1005003a 	cmpeq	r2,r2,zero
 100f268:	10001a1e 	bne	r2,zero,100f2d4 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f26c:	e0bff203 	ldbu	r2,-56(fp)
 100f270:	10800058 	cmpnei	r2,r2,1
 100f274:	1000091e 	bne	r2,zero,100f29c <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100f278:	e0bff917 	ldw	r2,-28(fp)
 100f27c:	1080020b 	ldhu	r2,8(r2)
 100f280:	1007883a 	mov	r3,r2
 100f284:	e0bff30b 	ldhu	r2,-52(fp)
 100f288:	0084303a 	nor	r2,zero,r2
 100f28c:	1884703a 	and	r2,r3,r2
 100f290:	1007883a 	mov	r3,r2
 100f294:	e0bff917 	ldw	r2,-28(fp)
 100f298:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100f29c:	008040b4 	movhi	r2,258
 100f2a0:	10b3c304 	addi	r2,r2,-12532
 100f2a4:	10c00017 	ldw	r3,0(r2)
 100f2a8:	e0bff30b 	ldhu	r2,-52(fp)
 100f2ac:	18800b0d 	sth	r2,44(r3)
 100f2b0:	e0bff117 	ldw	r2,-60(fp)
 100f2b4:	e0bfed15 	stw	r2,-76(fp)
 100f2b8:	e0bfed17 	ldw	r2,-76(fp)
 100f2bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100f2c0:	e0800217 	ldw	r2,8(fp)
 100f2c4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100f2c8:	e0fff30b 	ldhu	r3,-52(fp)
 100f2cc:	e0ffff15 	stw	r3,-4(fp)
 100f2d0:	0000db06 	br	100f640 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100f2d4:	e1bffa0b 	ldhu	r6,-24(fp)
 100f2d8:	e1fffb03 	ldbu	r7,-20(fp)
 100f2dc:	e0bffc0b 	ldhu	r2,-16(fp)
 100f2e0:	e17ff404 	addi	r5,fp,-48
 100f2e4:	d8800015 	stw	r2,0(sp)
 100f2e8:	e13ff917 	ldw	r4,-28(fp)
 100f2ec:	100fb3c0 	call	100fb3c <OS_FlagBlock>
 100f2f0:	e0bff117 	ldw	r2,-60(fp)
 100f2f4:	e0bfec15 	stw	r2,-80(fp)
 100f2f8:	e0bfec17 	ldw	r2,-80(fp)
 100f2fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100f300:	00006706 	br	100f4a0 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100f304:	e0bff917 	ldw	r2,-28(fp)
 100f308:	1080020b 	ldhu	r2,8(r2)
 100f30c:	0084303a 	nor	r2,zero,r2
 100f310:	1007883a 	mov	r3,r2
 100f314:	e0bffa0b 	ldhu	r2,-24(fp)
 100f318:	1884703a 	and	r2,r3,r2
 100f31c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100f320:	e0fff30b 	ldhu	r3,-52(fp)
 100f324:	e0bffa0b 	ldhu	r2,-24(fp)
 100f328:	1880181e 	bne	r3,r2,100f38c <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f32c:	e0bff203 	ldbu	r2,-56(fp)
 100f330:	10800058 	cmpnei	r2,r2,1
 100f334:	1000071e 	bne	r2,zero,100f354 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100f338:	e0bff917 	ldw	r2,-28(fp)
 100f33c:	10c0020b 	ldhu	r3,8(r2)
 100f340:	e0bff30b 	ldhu	r2,-52(fp)
 100f344:	1884b03a 	or	r2,r3,r2
 100f348:	1007883a 	mov	r3,r2
 100f34c:	e0bff917 	ldw	r2,-28(fp)
 100f350:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100f354:	008040b4 	movhi	r2,258
 100f358:	10b3c304 	addi	r2,r2,-12532
 100f35c:	10c00017 	ldw	r3,0(r2)
 100f360:	e0bff30b 	ldhu	r2,-52(fp)
 100f364:	18800b0d 	sth	r2,44(r3)
 100f368:	e0bff117 	ldw	r2,-60(fp)
 100f36c:	e0bfeb15 	stw	r2,-84(fp)
 100f370:	e0bfeb17 	ldw	r2,-84(fp)
 100f374:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100f378:	e0800217 	ldw	r2,8(fp)
 100f37c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100f380:	e0bff30b 	ldhu	r2,-52(fp)
 100f384:	e0bfff15 	stw	r2,-4(fp)
 100f388:	0000ad06 	br	100f640 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100f38c:	e1bffa0b 	ldhu	r6,-24(fp)
 100f390:	e1fffb03 	ldbu	r7,-20(fp)
 100f394:	e0bffc0b 	ldhu	r2,-16(fp)
 100f398:	e17ff404 	addi	r5,fp,-48
 100f39c:	d8800015 	stw	r2,0(sp)
 100f3a0:	e13ff917 	ldw	r4,-28(fp)
 100f3a4:	100fb3c0 	call	100fb3c <OS_FlagBlock>
 100f3a8:	e0bff117 	ldw	r2,-60(fp)
 100f3ac:	e0bfea15 	stw	r2,-88(fp)
 100f3b0:	e0bfea17 	ldw	r2,-88(fp)
 100f3b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100f3b8:	00003906 	br	100f4a0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100f3bc:	e0bff917 	ldw	r2,-28(fp)
 100f3c0:	1080020b 	ldhu	r2,8(r2)
 100f3c4:	0084303a 	nor	r2,zero,r2
 100f3c8:	1007883a 	mov	r3,r2
 100f3cc:	e0bffa0b 	ldhu	r2,-24(fp)
 100f3d0:	1884703a 	and	r2,r3,r2
 100f3d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100f3d8:	e0bff30b 	ldhu	r2,-52(fp)
 100f3dc:	1005003a 	cmpeq	r2,r2,zero
 100f3e0:	1000181e 	bne	r2,zero,100f444 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100f3e4:	e0bff203 	ldbu	r2,-56(fp)
 100f3e8:	10800058 	cmpnei	r2,r2,1
 100f3ec:	1000071e 	bne	r2,zero,100f40c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100f3f0:	e0bff917 	ldw	r2,-28(fp)
 100f3f4:	10c0020b 	ldhu	r3,8(r2)
 100f3f8:	e0bff30b 	ldhu	r2,-52(fp)
 100f3fc:	1884b03a 	or	r2,r3,r2
 100f400:	1007883a 	mov	r3,r2
 100f404:	e0bff917 	ldw	r2,-28(fp)
 100f408:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100f40c:	008040b4 	movhi	r2,258
 100f410:	10b3c304 	addi	r2,r2,-12532
 100f414:	10c00017 	ldw	r3,0(r2)
 100f418:	e0bff30b 	ldhu	r2,-52(fp)
 100f41c:	18800b0d 	sth	r2,44(r3)
 100f420:	e0bff117 	ldw	r2,-60(fp)
 100f424:	e0bfe915 	stw	r2,-92(fp)
 100f428:	e0bfe917 	ldw	r2,-92(fp)
 100f42c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100f430:	e0800217 	ldw	r2,8(fp)
 100f434:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100f438:	e0fff30b 	ldhu	r3,-52(fp)
 100f43c:	e0ffff15 	stw	r3,-4(fp)
 100f440:	00007f06 	br	100f640 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100f444:	e1bffa0b 	ldhu	r6,-24(fp)
 100f448:	e1fffb03 	ldbu	r7,-20(fp)
 100f44c:	e0bffc0b 	ldhu	r2,-16(fp)
 100f450:	e17ff404 	addi	r5,fp,-48
 100f454:	d8800015 	stw	r2,0(sp)
 100f458:	e13ff917 	ldw	r4,-28(fp)
 100f45c:	100fb3c0 	call	100fb3c <OS_FlagBlock>
 100f460:	e0bff117 	ldw	r2,-60(fp)
 100f464:	e0bfe815 	stw	r2,-96(fp)
 100f468:	e0bfe817 	ldw	r2,-96(fp)
 100f46c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100f470:	00000b06 	br	100f4a0 <OSFlagPend+0x48c>
 100f474:	e0bff117 	ldw	r2,-60(fp)
 100f478:	e0bfe715 	stw	r2,-100(fp)
 100f47c:	e0bfe717 	ldw	r2,-100(fp)
 100f480:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100f484:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 100f488:	e0c00217 	ldw	r3,8(fp)
 100f48c:	00801bc4 	movi	r2,111
 100f490:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 100f494:	e0bff30b 	ldhu	r2,-52(fp)
 100f498:	e0bfff15 	stw	r2,-4(fp)
 100f49c:	00006806 	br	100f640 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 100f4a0:	100dd900 	call	100dd90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f4a4:	0005303a 	rdctl	r2,status
 100f4a8:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f4ac:	e0ffe617 	ldw	r3,-104(fp)
 100f4b0:	00bfff84 	movi	r2,-2
 100f4b4:	1884703a 	and	r2,r3,r2
 100f4b8:	1001703a 	wrctl	status,r2
  
  return context;
 100f4bc:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 100f4c0:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 100f4c4:	008040b4 	movhi	r2,258
 100f4c8:	10b3c304 	addi	r2,r2,-12532
 100f4cc:	10800017 	ldw	r2,0(r2)
 100f4d0:	10800c43 	ldbu	r2,49(r2)
 100f4d4:	10803fcc 	andi	r2,r2,255
 100f4d8:	1005003a 	cmpeq	r2,r2,zero
 100f4dc:	1000221e 	bne	r2,zero,100f568 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 100f4e0:	008040b4 	movhi	r2,258
 100f4e4:	10b3c304 	addi	r2,r2,-12532
 100f4e8:	10800017 	ldw	r2,0(r2)
 100f4ec:	10800c43 	ldbu	r2,49(r2)
 100f4f0:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100f4f4:	008040b4 	movhi	r2,258
 100f4f8:	10b3c304 	addi	r2,r2,-12532
 100f4fc:	10800017 	ldw	r2,0(r2)
 100f500:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 100f504:	e13ff404 	addi	r4,fp,-48
 100f508:	100fef40 	call	100fef4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 100f50c:	008040b4 	movhi	r2,258
 100f510:	10b3c304 	addi	r2,r2,-12532
 100f514:	10800017 	ldw	r2,0(r2)
 100f518:	10000c05 	stb	zero,48(r2)
 100f51c:	e0bff117 	ldw	r2,-60(fp)
 100f520:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f524:	e0bfe517 	ldw	r2,-108(fp)
 100f528:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 100f52c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 100f530:	e0bff243 	ldbu	r2,-55(fp)
 100f534:	108000a0 	cmpeqi	r2,r2,2
 100f538:	1000011e 	bne	r2,zero,100f540 <OSFlagPend+0x52c>
 100f53c:	00000406 	br	100f550 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 100f540:	e0c00217 	ldw	r3,8(fp)
 100f544:	00800384 	movi	r2,14
 100f548:	18800005 	stb	r2,0(r3)
                 break;
 100f54c:	00000306 	br	100f55c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 100f550:	e0c00217 	ldw	r3,8(fp)
 100f554:	00800284 	movi	r2,10
 100f558:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 100f55c:	e0fff30b 	ldhu	r3,-52(fp)
 100f560:	e0ffff15 	stw	r3,-4(fp)
 100f564:	00003606 	br	100f640 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 100f568:	008040b4 	movhi	r2,258
 100f56c:	10b3c304 	addi	r2,r2,-12532
 100f570:	10800017 	ldw	r2,0(r2)
 100f574:	10800b0b 	ldhu	r2,44(r2)
 100f578:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 100f57c:	e0bff203 	ldbu	r2,-56(fp)
 100f580:	10800058 	cmpnei	r2,r2,1
 100f584:	1000261e 	bne	r2,zero,100f620 <OSFlagPend+0x60c>
        switch (wait_type) {
 100f588:	e0bffb03 	ldbu	r2,-20(fp)
 100f58c:	e0bffd15 	stw	r2,-12(fp)
 100f590:	e0fffd17 	ldw	r3,-12(fp)
 100f594:	1804803a 	cmplt	r2,r3,zero
 100f598:	1000181e 	bne	r2,zero,100f5fc <OSFlagPend+0x5e8>
 100f59c:	e0fffd17 	ldw	r3,-12(fp)
 100f5a0:	18800090 	cmplti	r2,r3,2
 100f5a4:	10000d1e 	bne	r2,zero,100f5dc <OSFlagPend+0x5c8>
 100f5a8:	e0fffd17 	ldw	r3,-12(fp)
 100f5ac:	18800108 	cmpgei	r2,r3,4
 100f5b0:	1000121e 	bne	r2,zero,100f5fc <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 100f5b4:	e0bff917 	ldw	r2,-28(fp)
 100f5b8:	1080020b 	ldhu	r2,8(r2)
 100f5bc:	1007883a 	mov	r3,r2
 100f5c0:	e0bff30b 	ldhu	r2,-52(fp)
 100f5c4:	0084303a 	nor	r2,zero,r2
 100f5c8:	1884703a 	and	r2,r3,r2
 100f5cc:	1007883a 	mov	r3,r2
 100f5d0:	e0bff917 	ldw	r2,-28(fp)
 100f5d4:	10c0020d 	sth	r3,8(r2)
                 break;
 100f5d8:	00001106 	br	100f620 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 100f5dc:	e0bff917 	ldw	r2,-28(fp)
 100f5e0:	10c0020b 	ldhu	r3,8(r2)
 100f5e4:	e0bff30b 	ldhu	r2,-52(fp)
 100f5e8:	1884b03a 	or	r2,r3,r2
 100f5ec:	1007883a 	mov	r3,r2
 100f5f0:	e0bff917 	ldw	r2,-28(fp)
 100f5f4:	10c0020d 	sth	r3,8(r2)
                 break;
 100f5f8:	00000906 	br	100f620 <OSFlagPend+0x60c>
 100f5fc:	e0bff117 	ldw	r2,-60(fp)
 100f600:	e0bfe415 	stw	r2,-112(fp)
 100f604:	e0bfe417 	ldw	r2,-112(fp)
 100f608:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 100f60c:	e0c00217 	ldw	r3,8(fp)
 100f610:	00801bc4 	movi	r2,111
 100f614:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 100f618:	e03fff15 	stw	zero,-4(fp)
 100f61c:	00000806 	br	100f640 <OSFlagPend+0x62c>
 100f620:	e0bff117 	ldw	r2,-60(fp)
 100f624:	e0bfe315 	stw	r2,-116(fp)
 100f628:	e0bfe317 	ldw	r2,-116(fp)
 100f62c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 100f630:	e0800217 	ldw	r2,8(fp)
 100f634:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 100f638:	e0bff30b 	ldhu	r2,-52(fp)
 100f63c:	e0bfff15 	stw	r2,-4(fp)
 100f640:	e0bfff17 	ldw	r2,-4(fp)
}
 100f644:	e037883a 	mov	sp,fp
 100f648:	dfc00117 	ldw	ra,4(sp)
 100f64c:	df000017 	ldw	fp,0(sp)
 100f650:	dec00204 	addi	sp,sp,8
 100f654:	f800283a 	ret

0100f658 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 100f658:	defffb04 	addi	sp,sp,-20
 100f65c:	df000415 	stw	fp,16(sp)
 100f660:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100f664:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f668:	0005303a 	rdctl	r2,status
 100f66c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f670:	e0fffd17 	ldw	r3,-12(fp)
 100f674:	00bfff84 	movi	r2,-2
 100f678:	1884703a 	and	r2,r3,r2
 100f67c:	1001703a 	wrctl	status,r2
  
  return context;
 100f680:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 100f684:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 100f688:	008040b4 	movhi	r2,258
 100f68c:	10b3c304 	addi	r2,r2,-12532
 100f690:	10800017 	ldw	r2,0(r2)
 100f694:	10800b0b 	ldhu	r2,44(r2)
 100f698:	e0bfff0d 	sth	r2,-4(fp)
 100f69c:	e0bffe17 	ldw	r2,-8(fp)
 100f6a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f6a4:	e0bffc17 	ldw	r2,-16(fp)
 100f6a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 100f6ac:	e0bfff0b 	ldhu	r2,-4(fp)
}
 100f6b0:	e037883a 	mov	sp,fp
 100f6b4:	df000017 	ldw	fp,0(sp)
 100f6b8:	dec00104 	addi	sp,sp,4
 100f6bc:	f800283a 	ret

0100f6c0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 100f6c0:	deffed04 	addi	sp,sp,-76
 100f6c4:	dfc01215 	stw	ra,72(sp)
 100f6c8:	df001115 	stw	fp,68(sp)
 100f6cc:	df001104 	addi	fp,sp,68
 100f6d0:	e13ff915 	stw	r4,-28(fp)
 100f6d4:	e1fffc15 	stw	r7,-16(fp)
 100f6d8:	e17ffa0d 	sth	r5,-24(fp)
 100f6dc:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 100f6e0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 100f6e4:	e0bffc17 	ldw	r2,-16(fp)
 100f6e8:	1004c03a 	cmpne	r2,r2,zero
 100f6ec:	1000021e 	bne	r2,zero,100f6f8 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 100f6f0:	e03fff15 	stw	zero,-4(fp)
 100f6f4:	0000d606 	br	100fa50 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 100f6f8:	e0bff917 	ldw	r2,-28(fp)
 100f6fc:	1004c03a 	cmpne	r2,r2,zero
 100f700:	1000051e 	bne	r2,zero,100f718 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100f704:	e0fffc17 	ldw	r3,-16(fp)
 100f708:	00801b84 	movi	r2,110
 100f70c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f710:	e03fff15 	stw	zero,-4(fp)
 100f714:	0000ce06 	br	100fa50 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 100f718:	e0bff917 	ldw	r2,-28(fp)
 100f71c:	10800003 	ldbu	r2,0(r2)
 100f720:	10803fcc 	andi	r2,r2,255
 100f724:	10800160 	cmpeqi	r2,r2,5
 100f728:	1000051e 	bne	r2,zero,100f740 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 100f72c:	e0fffc17 	ldw	r3,-16(fp)
 100f730:	00800044 	movi	r2,1
 100f734:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100f738:	e03fff15 	stw	zero,-4(fp)
 100f73c:	0000c406 	br	100fa50 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f740:	0005303a 	rdctl	r2,status
 100f744:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f748:	e0fff417 	ldw	r3,-48(fp)
 100f74c:	00bfff84 	movi	r2,-2
 100f750:	1884703a 	and	r2,r3,r2
 100f754:	1001703a 	wrctl	status,r2
  
  return context;
 100f758:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 100f75c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 100f760:	e0bffb03 	ldbu	r2,-20(fp)
 100f764:	e0bffe15 	stw	r2,-8(fp)
 100f768:	e0fffe17 	ldw	r3,-8(fp)
 100f76c:	1805003a 	cmpeq	r2,r3,zero
 100f770:	1000041e 	bne	r2,zero,100f784 <OSFlagPost+0xc4>
 100f774:	e0fffe17 	ldw	r3,-8(fp)
 100f778:	18800060 	cmpeqi	r2,r3,1
 100f77c:	10000b1e 	bne	r2,zero,100f7ac <OSFlagPost+0xec>
 100f780:	00001206 	br	100f7cc <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 100f784:	e0bff917 	ldw	r2,-28(fp)
 100f788:	1080020b 	ldhu	r2,8(r2)
 100f78c:	1007883a 	mov	r3,r2
 100f790:	e0bffa0b 	ldhu	r2,-24(fp)
 100f794:	0084303a 	nor	r2,zero,r2
 100f798:	1884703a 	and	r2,r3,r2
 100f79c:	1007883a 	mov	r3,r2
 100f7a0:	e0bff917 	ldw	r2,-28(fp)
 100f7a4:	10c0020d 	sth	r3,8(r2)
             break;
 100f7a8:	00001106 	br	100f7f0 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 100f7ac:	e0bff917 	ldw	r2,-28(fp)
 100f7b0:	10c0020b 	ldhu	r3,8(r2)
 100f7b4:	e0bffa0b 	ldhu	r2,-24(fp)
 100f7b8:	1884b03a 	or	r2,r3,r2
 100f7bc:	1007883a 	mov	r3,r2
 100f7c0:	e0bff917 	ldw	r2,-28(fp)
 100f7c4:	10c0020d 	sth	r3,8(r2)
             break;
 100f7c8:	00000906 	br	100f7f0 <OSFlagPost+0x130>
 100f7cc:	e0bff517 	ldw	r2,-44(fp)
 100f7d0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f7d4:	e0bff317 	ldw	r2,-52(fp)
 100f7d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 100f7dc:	e0fffc17 	ldw	r3,-16(fp)
 100f7e0:	00801c44 	movi	r2,113
 100f7e4:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 100f7e8:	e03fff15 	stw	zero,-4(fp)
 100f7ec:	00009806 	br	100fa50 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 100f7f0:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100f7f4:	e0bff917 	ldw	r2,-28(fp)
 100f7f8:	10800117 	ldw	r2,4(r2)
 100f7fc:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 100f800:	00007506 	br	100f9d8 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 100f804:	e0bff817 	ldw	r2,-32(fp)
 100f808:	10800483 	ldbu	r2,18(r2)
 100f80c:	10803fcc 	andi	r2,r2,255
 100f810:	e0bffd15 	stw	r2,-12(fp)
 100f814:	e0fffd17 	ldw	r3,-12(fp)
 100f818:	18800060 	cmpeqi	r2,r3,1
 100f81c:	10004d1e 	bne	r2,zero,100f954 <OSFlagPost+0x294>
 100f820:	e0fffd17 	ldw	r3,-12(fp)
 100f824:	18800088 	cmpgei	r2,r3,2
 100f828:	1000041e 	bne	r2,zero,100f83c <OSFlagPost+0x17c>
 100f82c:	e0fffd17 	ldw	r3,-12(fp)
 100f830:	1805003a 	cmpeq	r2,r3,zero
 100f834:	1000301e 	bne	r2,zero,100f8f8 <OSFlagPost+0x238>
 100f838:	00005b06 	br	100f9a8 <OSFlagPost+0x2e8>
 100f83c:	e0fffd17 	ldw	r3,-12(fp)
 100f840:	188000a0 	cmpeqi	r2,r3,2
 100f844:	1000041e 	bne	r2,zero,100f858 <OSFlagPost+0x198>
 100f848:	e0fffd17 	ldw	r3,-12(fp)
 100f84c:	188000e0 	cmpeqi	r2,r3,3
 100f850:	1000161e 	bne	r2,zero,100f8ac <OSFlagPost+0x1ec>
 100f854:	00005406 	br	100f9a8 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100f858:	e0bff917 	ldw	r2,-28(fp)
 100f85c:	10c0020b 	ldhu	r3,8(r2)
 100f860:	e0bff817 	ldw	r2,-32(fp)
 100f864:	1080040b 	ldhu	r2,16(r2)
 100f868:	1884703a 	and	r2,r3,r2
 100f86c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 100f870:	e0bff817 	ldw	r2,-32(fp)
 100f874:	1080040b 	ldhu	r2,16(r2)
 100f878:	10ffffcc 	andi	r3,r2,65535
 100f87c:	e0bff68b 	ldhu	r2,-38(fp)
 100f880:	1880521e 	bne	r3,r2,100f9cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100f884:	e17ff68b 	ldhu	r5,-38(fp)
 100f888:	e13ff817 	ldw	r4,-32(fp)
 100f88c:	100fde40 	call	100fde4 <OS_FlagTaskRdy>
 100f890:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100f894:	e0bff603 	ldbu	r2,-40(fp)
 100f898:	10800058 	cmpnei	r2,r2,1
 100f89c:	10004b1e 	bne	r2,zero,100f9cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100f8a0:	00800044 	movi	r2,1
 100f8a4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100f8a8:	00004806 	br	100f9cc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100f8ac:	e0bff917 	ldw	r2,-28(fp)
 100f8b0:	10c0020b 	ldhu	r3,8(r2)
 100f8b4:	e0bff817 	ldw	r2,-32(fp)
 100f8b8:	1080040b 	ldhu	r2,16(r2)
 100f8bc:	1884703a 	and	r2,r3,r2
 100f8c0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 100f8c4:	e0bff68b 	ldhu	r2,-38(fp)
 100f8c8:	1005003a 	cmpeq	r2,r2,zero
 100f8cc:	10003f1e 	bne	r2,zero,100f9cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100f8d0:	e17ff68b 	ldhu	r5,-38(fp)
 100f8d4:	e13ff817 	ldw	r4,-32(fp)
 100f8d8:	100fde40 	call	100fde4 <OS_FlagTaskRdy>
 100f8dc:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100f8e0:	e0bff603 	ldbu	r2,-40(fp)
 100f8e4:	10800058 	cmpnei	r2,r2,1
 100f8e8:	1000381e 	bne	r2,zero,100f9cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100f8ec:	00800044 	movi	r2,1
 100f8f0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100f8f4:	00003506 	br	100f9cc <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100f8f8:	e0bff917 	ldw	r2,-28(fp)
 100f8fc:	1080020b 	ldhu	r2,8(r2)
 100f900:	0084303a 	nor	r2,zero,r2
 100f904:	1007883a 	mov	r3,r2
 100f908:	e0bff817 	ldw	r2,-32(fp)
 100f90c:	1080040b 	ldhu	r2,16(r2)
 100f910:	1884703a 	and	r2,r3,r2
 100f914:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 100f918:	e0bff817 	ldw	r2,-32(fp)
 100f91c:	1080040b 	ldhu	r2,16(r2)
 100f920:	10ffffcc 	andi	r3,r2,65535
 100f924:	e0bff68b 	ldhu	r2,-38(fp)
 100f928:	1880281e 	bne	r3,r2,100f9cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100f92c:	e17ff68b 	ldhu	r5,-38(fp)
 100f930:	e13ff817 	ldw	r4,-32(fp)
 100f934:	100fde40 	call	100fde4 <OS_FlagTaskRdy>
 100f938:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100f93c:	e0bff603 	ldbu	r2,-40(fp)
 100f940:	10800058 	cmpnei	r2,r2,1
 100f944:	1000211e 	bne	r2,zero,100f9cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100f948:	00800044 	movi	r2,1
 100f94c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100f950:	00001e06 	br	100f9cc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100f954:	e0bff917 	ldw	r2,-28(fp)
 100f958:	1080020b 	ldhu	r2,8(r2)
 100f95c:	0084303a 	nor	r2,zero,r2
 100f960:	1007883a 	mov	r3,r2
 100f964:	e0bff817 	ldw	r2,-32(fp)
 100f968:	1080040b 	ldhu	r2,16(r2)
 100f96c:	1884703a 	and	r2,r3,r2
 100f970:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 100f974:	e0bff68b 	ldhu	r2,-38(fp)
 100f978:	1005003a 	cmpeq	r2,r2,zero
 100f97c:	1000131e 	bne	r2,zero,100f9cc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100f980:	e17ff68b 	ldhu	r5,-38(fp)
 100f984:	e13ff817 	ldw	r4,-32(fp)
 100f988:	100fde40 	call	100fde4 <OS_FlagTaskRdy>
 100f98c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100f990:	e0bff603 	ldbu	r2,-40(fp)
 100f994:	10800058 	cmpnei	r2,r2,1
 100f998:	10000c1e 	bne	r2,zero,100f9cc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100f99c:	00800044 	movi	r2,1
 100f9a0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100f9a4:	00000906 	br	100f9cc <OSFlagPost+0x30c>
 100f9a8:	e0bff517 	ldw	r2,-44(fp)
 100f9ac:	e0bff215 	stw	r2,-56(fp)
 100f9b0:	e0bff217 	ldw	r2,-56(fp)
 100f9b4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 100f9b8:	e0fffc17 	ldw	r3,-16(fp)
 100f9bc:	00801bc4 	movi	r2,111
 100f9c0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 100f9c4:	e03fff15 	stw	zero,-4(fp)
 100f9c8:	00002106 	br	100fa50 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 100f9cc:	e0bff817 	ldw	r2,-32(fp)
 100f9d0:	10800017 	ldw	r2,0(r2)
 100f9d4:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 100f9d8:	e0bff817 	ldw	r2,-32(fp)
 100f9dc:	1004c03a 	cmpne	r2,r2,zero
 100f9e0:	103f881e 	bne	r2,zero,100f804 <OSFlagPost+0x144>
 100f9e4:	e0bff517 	ldw	r2,-44(fp)
 100f9e8:	e0bff115 	stw	r2,-60(fp)
 100f9ec:	e0bff117 	ldw	r2,-60(fp)
 100f9f0:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 100f9f4:	e0bff783 	ldbu	r2,-34(fp)
 100f9f8:	10800058 	cmpnei	r2,r2,1
 100f9fc:	1000011e 	bne	r2,zero,100fa04 <OSFlagPost+0x344>
        OS_Sched();
 100fa00:	100dd900 	call	100dd90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fa04:	0005303a 	rdctl	r2,status
 100fa08:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fa0c:	e0fff017 	ldw	r3,-64(fp)
 100fa10:	00bfff84 	movi	r2,-2
 100fa14:	1884703a 	and	r2,r3,r2
 100fa18:	1001703a 	wrctl	status,r2
  
  return context;
 100fa1c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 100fa20:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 100fa24:	e0bff917 	ldw	r2,-28(fp)
 100fa28:	1080020b 	ldhu	r2,8(r2)
 100fa2c:	e0bff70d 	sth	r2,-36(fp)
 100fa30:	e0bff517 	ldw	r2,-44(fp)
 100fa34:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fa38:	e0bfef17 	ldw	r2,-68(fp)
 100fa3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 100fa40:	e0bffc17 	ldw	r2,-16(fp)
 100fa44:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 100fa48:	e0bff70b 	ldhu	r2,-36(fp)
 100fa4c:	e0bfff15 	stw	r2,-4(fp)
 100fa50:	e0bfff17 	ldw	r2,-4(fp)
}
 100fa54:	e037883a 	mov	sp,fp
 100fa58:	dfc00117 	ldw	ra,4(sp)
 100fa5c:	df000017 	ldw	fp,0(sp)
 100fa60:	dec00204 	addi	sp,sp,8
 100fa64:	f800283a 	ret

0100fa68 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 100fa68:	defff804 	addi	sp,sp,-32
 100fa6c:	df000715 	stw	fp,28(sp)
 100fa70:	df000704 	addi	fp,sp,28
 100fa74:	e13ffd15 	stw	r4,-12(fp)
 100fa78:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 100fa7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 100fa80:	e0bffe17 	ldw	r2,-8(fp)
 100fa84:	1004c03a 	cmpne	r2,r2,zero
 100fa88:	1000021e 	bne	r2,zero,100fa94 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 100fa8c:	e03fff15 	stw	zero,-4(fp)
 100fa90:	00002506 	br	100fb28 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 100fa94:	e0bffd17 	ldw	r2,-12(fp)
 100fa98:	1004c03a 	cmpne	r2,r2,zero
 100fa9c:	1000051e 	bne	r2,zero,100fab4 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100faa0:	e0fffe17 	ldw	r3,-8(fp)
 100faa4:	00801b84 	movi	r2,110
 100faa8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100faac:	e03fff15 	stw	zero,-4(fp)
 100fab0:	00001d06 	br	100fb28 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 100fab4:	e0bffd17 	ldw	r2,-12(fp)
 100fab8:	10800003 	ldbu	r2,0(r2)
 100fabc:	10803fcc 	andi	r2,r2,255
 100fac0:	10800160 	cmpeqi	r2,r2,5
 100fac4:	1000051e 	bne	r2,zero,100fadc <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 100fac8:	e0fffe17 	ldw	r3,-8(fp)
 100facc:	00800044 	movi	r2,1
 100fad0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100fad4:	e03fff15 	stw	zero,-4(fp)
 100fad8:	00001306 	br	100fb28 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fadc:	0005303a 	rdctl	r2,status
 100fae0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fae4:	e0fffa17 	ldw	r3,-24(fp)
 100fae8:	00bfff84 	movi	r2,-2
 100faec:	1884703a 	and	r2,r3,r2
 100faf0:	1001703a 	wrctl	status,r2
  
  return context;
 100faf4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100faf8:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 100fafc:	e0bffd17 	ldw	r2,-12(fp)
 100fb00:	1080020b 	ldhu	r2,8(r2)
 100fb04:	e0bffc0d 	sth	r2,-16(fp)
 100fb08:	e0bffb17 	ldw	r2,-20(fp)
 100fb0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fb10:	e0bff917 	ldw	r2,-28(fp)
 100fb14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100fb18:	e0bffe17 	ldw	r2,-8(fp)
 100fb1c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 100fb20:	e0bffc0b 	ldhu	r2,-16(fp)
 100fb24:	e0bfff15 	stw	r2,-4(fp)
 100fb28:	e0bfff17 	ldw	r2,-4(fp)
}
 100fb2c:	e037883a 	mov	sp,fp
 100fb30:	df000017 	ldw	fp,0(sp)
 100fb34:	dec00104 	addi	sp,sp,4
 100fb38:	f800283a 	ret

0100fb3c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 100fb3c:	defff804 	addi	sp,sp,-32
 100fb40:	df000715 	stw	fp,28(sp)
 100fb44:	df000704 	addi	fp,sp,28
 100fb48:	e13ffb15 	stw	r4,-20(fp)
 100fb4c:	e17ffc15 	stw	r5,-16(fp)
 100fb50:	e0800117 	ldw	r2,4(fp)
 100fb54:	e1bffd0d 	sth	r6,-12(fp)
 100fb58:	e1fffe05 	stb	r7,-8(fp)
 100fb5c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 100fb60:	008040b4 	movhi	r2,258
 100fb64:	10b3c304 	addi	r2,r2,-12532
 100fb68:	10c00017 	ldw	r3,0(r2)
 100fb6c:	008040b4 	movhi	r2,258
 100fb70:	10b3c304 	addi	r2,r2,-12532
 100fb74:	10800017 	ldw	r2,0(r2)
 100fb78:	10800c03 	ldbu	r2,48(r2)
 100fb7c:	10800814 	ori	r2,r2,32
 100fb80:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 100fb84:	008040b4 	movhi	r2,258
 100fb88:	10b3c304 	addi	r2,r2,-12532
 100fb8c:	10800017 	ldw	r2,0(r2)
 100fb90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 100fb94:	008040b4 	movhi	r2,258
 100fb98:	10b3c304 	addi	r2,r2,-12532
 100fb9c:	10c00017 	ldw	r3,0(r2)
 100fba0:	e0bfff0b 	ldhu	r2,-4(fp)
 100fba4:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 100fba8:	008040b4 	movhi	r2,258
 100fbac:	10b3c304 	addi	r2,r2,-12532
 100fbb0:	10c00017 	ldw	r3,0(r2)
 100fbb4:	e0bffc17 	ldw	r2,-16(fp)
 100fbb8:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 100fbbc:	e0fffc17 	ldw	r3,-16(fp)
 100fbc0:	e0bffd0b 	ldhu	r2,-12(fp)
 100fbc4:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 100fbc8:	e0fffc17 	ldw	r3,-16(fp)
 100fbcc:	e0bffe03 	ldbu	r2,-8(fp)
 100fbd0:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 100fbd4:	008040b4 	movhi	r2,258
 100fbd8:	10b3c304 	addi	r2,r2,-12532
 100fbdc:	10c00017 	ldw	r3,0(r2)
 100fbe0:	e0bffc17 	ldw	r2,-16(fp)
 100fbe4:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 100fbe8:	e0bffb17 	ldw	r2,-20(fp)
 100fbec:	10c00117 	ldw	r3,4(r2)
 100fbf0:	e0bffc17 	ldw	r2,-16(fp)
 100fbf4:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 100fbf8:	e0bffc17 	ldw	r2,-16(fp)
 100fbfc:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 100fc00:	e0fffc17 	ldw	r3,-16(fp)
 100fc04:	e0bffb17 	ldw	r2,-20(fp)
 100fc08:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100fc0c:	e0bffb17 	ldw	r2,-20(fp)
 100fc10:	10800117 	ldw	r2,4(r2)
 100fc14:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 100fc18:	e0bffa17 	ldw	r2,-24(fp)
 100fc1c:	1005003a 	cmpeq	r2,r2,zero
 100fc20:	1000031e 	bne	r2,zero,100fc30 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 100fc24:	e0fffa17 	ldw	r3,-24(fp)
 100fc28:	e0bffc17 	ldw	r2,-16(fp)
 100fc2c:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 100fc30:	e0fffb17 	ldw	r3,-20(fp)
 100fc34:	e0bffc17 	ldw	r2,-16(fp)
 100fc38:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 100fc3c:	008040b4 	movhi	r2,258
 100fc40:	10b3c304 	addi	r2,r2,-12532
 100fc44:	10800017 	ldw	r2,0(r2)
 100fc48:	10800d03 	ldbu	r2,52(r2)
 100fc4c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100fc50:	e13ff903 	ldbu	r4,-28(fp)
 100fc54:	e0fff903 	ldbu	r3,-28(fp)
 100fc58:	008040b4 	movhi	r2,258
 100fc5c:	10b3c044 	addi	r2,r2,-12543
 100fc60:	10c5883a 	add	r2,r2,r3
 100fc64:	10800003 	ldbu	r2,0(r2)
 100fc68:	1007883a 	mov	r3,r2
 100fc6c:	008040b4 	movhi	r2,258
 100fc70:	10b3c304 	addi	r2,r2,-12532
 100fc74:	10800017 	ldw	r2,0(r2)
 100fc78:	10800d43 	ldbu	r2,53(r2)
 100fc7c:	0084303a 	nor	r2,zero,r2
 100fc80:	1884703a 	and	r2,r3,r2
 100fc84:	1007883a 	mov	r3,r2
 100fc88:	008040b4 	movhi	r2,258
 100fc8c:	10b3c044 	addi	r2,r2,-12543
 100fc90:	1105883a 	add	r2,r2,r4
 100fc94:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 100fc98:	e0fff903 	ldbu	r3,-28(fp)
 100fc9c:	008040b4 	movhi	r2,258
 100fca0:	10b3c044 	addi	r2,r2,-12543
 100fca4:	10c5883a 	add	r2,r2,r3
 100fca8:	10800003 	ldbu	r2,0(r2)
 100fcac:	10803fcc 	andi	r2,r2,255
 100fcb0:	1004c03a 	cmpne	r2,r2,zero
 100fcb4:	10000e1e 	bne	r2,zero,100fcf0 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 100fcb8:	008040b4 	movhi	r2,258
 100fcbc:	10b3c304 	addi	r2,r2,-12532
 100fcc0:	10800017 	ldw	r2,0(r2)
 100fcc4:	10800d83 	ldbu	r2,54(r2)
 100fcc8:	0084303a 	nor	r2,zero,r2
 100fccc:	1007883a 	mov	r3,r2
 100fcd0:	008040b4 	movhi	r2,258
 100fcd4:	10b3c004 	addi	r2,r2,-12544
 100fcd8:	10800003 	ldbu	r2,0(r2)
 100fcdc:	1884703a 	and	r2,r3,r2
 100fce0:	1007883a 	mov	r3,r2
 100fce4:	008040b4 	movhi	r2,258
 100fce8:	10b3c004 	addi	r2,r2,-12544
 100fcec:	10c00005 	stb	r3,0(r2)
    }
}
 100fcf0:	e037883a 	mov	sp,fp
 100fcf4:	df000017 	ldw	fp,0(sp)
 100fcf8:	dec00104 	addi	sp,sp,4
 100fcfc:	f800283a 	ret

0100fd00 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 100fd00:	defffb04 	addi	sp,sp,-20
 100fd04:	dfc00415 	stw	ra,16(sp)
 100fd08:	df000315 	stw	fp,12(sp)
 100fd0c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 100fd10:	010040f4 	movhi	r4,259
 100fd14:	212be004 	addi	r4,r4,-20608
 100fd18:	0140dc04 	movi	r5,880
 100fd1c:	100dcd00 	call	100dcd0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 100fd20:	008040f4 	movhi	r2,259
 100fd24:	10abe004 	addi	r2,r2,-20608
 100fd28:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 100fd2c:	008040f4 	movhi	r2,259
 100fd30:	10abeb04 	addi	r2,r2,-20564
 100fd34:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 100fd38:	e03fff0d 	sth	zero,-4(fp)
 100fd3c:	00001306 	br	100fd8c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100fd40:	e0bffe17 	ldw	r2,-8(fp)
 100fd44:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 100fd48:	e0fffe17 	ldw	r3,-8(fp)
 100fd4c:	e0bffd17 	ldw	r2,-12(fp)
 100fd50:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 100fd54:	e0fffe17 	ldw	r3,-8(fp)
 100fd58:	00800fc4 	movi	r2,63
 100fd5c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 100fd60:	e0bffe17 	ldw	r2,-8(fp)
 100fd64:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 100fd68:	e0bffe17 	ldw	r2,-8(fp)
 100fd6c:	10800b04 	addi	r2,r2,44
 100fd70:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 100fd74:	e0bffd17 	ldw	r2,-12(fp)
 100fd78:	10800b04 	addi	r2,r2,44
 100fd7c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 100fd80:	e0bfff0b 	ldhu	r2,-4(fp)
 100fd84:	10800044 	addi	r2,r2,1
 100fd88:	e0bfff0d 	sth	r2,-4(fp)
 100fd8c:	e0bfff0b 	ldhu	r2,-4(fp)
 100fd90:	108004f0 	cmpltui	r2,r2,19
 100fd94:	103fea1e 	bne	r2,zero,100fd40 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100fd98:	e0bffe17 	ldw	r2,-8(fp)
 100fd9c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 100fda0:	e0bffe17 	ldw	r2,-8(fp)
 100fda4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 100fda8:	e0fffe17 	ldw	r3,-8(fp)
 100fdac:	00800fc4 	movi	r2,63
 100fdb0:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 100fdb4:	e0bffe17 	ldw	r2,-8(fp)
 100fdb8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 100fdbc:	00c040b4 	movhi	r3,258
 100fdc0:	18f3c704 	addi	r3,r3,-12516
 100fdc4:	008040f4 	movhi	r2,259
 100fdc8:	10abe004 	addi	r2,r2,-20608
 100fdcc:	18800015 	stw	r2,0(r3)
#endif
}
 100fdd0:	e037883a 	mov	sp,fp
 100fdd4:	dfc00117 	ldw	ra,4(sp)
 100fdd8:	df000017 	ldw	fp,0(sp)
 100fddc:	dec00204 	addi	sp,sp,8
 100fde0:	f800283a 	ret

0100fde4 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 100fde4:	defffa04 	addi	sp,sp,-24
 100fde8:	dfc00515 	stw	ra,20(sp)
 100fdec:	df000415 	stw	fp,16(sp)
 100fdf0:	df000404 	addi	fp,sp,16
 100fdf4:	e13ffe15 	stw	r4,-8(fp)
 100fdf8:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 100fdfc:	e0bffe17 	ldw	r2,-8(fp)
 100fe00:	10800217 	ldw	r2,8(r2)
 100fe04:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 100fe08:	e0bffd17 	ldw	r2,-12(fp)
 100fe0c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 100fe10:	e0fffd17 	ldw	r3,-12(fp)
 100fe14:	e0bfff0b 	ldhu	r2,-4(fp)
 100fe18:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 100fe1c:	e0bffd17 	ldw	r2,-12(fp)
 100fe20:	10c00c03 	ldbu	r3,48(r2)
 100fe24:	00bff7c4 	movi	r2,-33
 100fe28:	1884703a 	and	r2,r3,r2
 100fe2c:	1007883a 	mov	r3,r2
 100fe30:	e0bffd17 	ldw	r2,-12(fp)
 100fe34:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 100fe38:	e0bffd17 	ldw	r2,-12(fp)
 100fe3c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 100fe40:	e0bffd17 	ldw	r2,-12(fp)
 100fe44:	10800c03 	ldbu	r2,48(r2)
 100fe48:	10803fcc 	andi	r2,r2,255
 100fe4c:	1004c03a 	cmpne	r2,r2,zero
 100fe50:	10001f1e 	bne	r2,zero,100fed0 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 100fe54:	e0bffd17 	ldw	r2,-12(fp)
 100fe58:	10c00d83 	ldbu	r3,54(r2)
 100fe5c:	008040b4 	movhi	r2,258
 100fe60:	10b3c004 	addi	r2,r2,-12544
 100fe64:	10800003 	ldbu	r2,0(r2)
 100fe68:	1884b03a 	or	r2,r3,r2
 100fe6c:	1007883a 	mov	r3,r2
 100fe70:	008040b4 	movhi	r2,258
 100fe74:	10b3c004 	addi	r2,r2,-12544
 100fe78:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100fe7c:	e0bffd17 	ldw	r2,-12(fp)
 100fe80:	10800d03 	ldbu	r2,52(r2)
 100fe84:	11003fcc 	andi	r4,r2,255
 100fe88:	e0bffd17 	ldw	r2,-12(fp)
 100fe8c:	10800d03 	ldbu	r2,52(r2)
 100fe90:	10c03fcc 	andi	r3,r2,255
 100fe94:	008040b4 	movhi	r2,258
 100fe98:	10b3c044 	addi	r2,r2,-12543
 100fe9c:	10c5883a 	add	r2,r2,r3
 100fea0:	10c00003 	ldbu	r3,0(r2)
 100fea4:	e0bffd17 	ldw	r2,-12(fp)
 100fea8:	10800d43 	ldbu	r2,53(r2)
 100feac:	1884b03a 	or	r2,r3,r2
 100feb0:	1007883a 	mov	r3,r2
 100feb4:	008040b4 	movhi	r2,258
 100feb8:	10b3c044 	addi	r2,r2,-12543
 100febc:	1105883a 	add	r2,r2,r4
 100fec0:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 100fec4:	00800044 	movi	r2,1
 100fec8:	e0bffc05 	stb	r2,-16(fp)
 100fecc:	00000106 	br	100fed4 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 100fed0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 100fed4:	e13ffe17 	ldw	r4,-8(fp)
 100fed8:	100fef40 	call	100fef4 <OS_FlagUnlink>
    return (sched);
 100fedc:	e0bffc03 	ldbu	r2,-16(fp)
}
 100fee0:	e037883a 	mov	sp,fp
 100fee4:	dfc00117 	ldw	ra,4(sp)
 100fee8:	df000017 	ldw	fp,0(sp)
 100feec:	dec00204 	addi	sp,sp,8
 100fef0:	f800283a 	ret

0100fef4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 100fef4:	defffa04 	addi	sp,sp,-24
 100fef8:	df000515 	stw	fp,20(sp)
 100fefc:	df000504 	addi	fp,sp,20
 100ff00:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 100ff04:	e0bfff17 	ldw	r2,-4(fp)
 100ff08:	10800117 	ldw	r2,4(r2)
 100ff0c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100ff10:	e0bfff17 	ldw	r2,-4(fp)
 100ff14:	10800017 	ldw	r2,0(r2)
 100ff18:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 100ff1c:	e0bffc17 	ldw	r2,-16(fp)
 100ff20:	1004c03a 	cmpne	r2,r2,zero
 100ff24:	10000c1e 	bne	r2,zero,100ff58 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 100ff28:	e0bfff17 	ldw	r2,-4(fp)
 100ff2c:	10800317 	ldw	r2,12(r2)
 100ff30:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 100ff34:	e0fffd17 	ldw	r3,-12(fp)
 100ff38:	e0bffb17 	ldw	r2,-20(fp)
 100ff3c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 100ff40:	e0bffb17 	ldw	r2,-20(fp)
 100ff44:	1005003a 	cmpeq	r2,r2,zero
 100ff48:	10000c1e 	bne	r2,zero,100ff7c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 100ff4c:	e0bffb17 	ldw	r2,-20(fp)
 100ff50:	10000115 	stw	zero,4(r2)
 100ff54:	00000906 	br	100ff7c <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 100ff58:	e0fffc17 	ldw	r3,-16(fp)
 100ff5c:	e0bffb17 	ldw	r2,-20(fp)
 100ff60:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 100ff64:	e0bffb17 	ldw	r2,-20(fp)
 100ff68:	1005003a 	cmpeq	r2,r2,zero
 100ff6c:	1000031e 	bne	r2,zero,100ff7c <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 100ff70:	e0fffb17 	ldw	r3,-20(fp)
 100ff74:	e0bffc17 	ldw	r2,-16(fp)
 100ff78:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 100ff7c:	e0bfff17 	ldw	r2,-4(fp)
 100ff80:	10800217 	ldw	r2,8(r2)
 100ff84:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 100ff88:	e0bffe17 	ldw	r2,-8(fp)
 100ff8c:	10000a15 	stw	zero,40(r2)
#endif
}
 100ff90:	e037883a 	mov	sp,fp
 100ff94:	df000017 	ldw	fp,0(sp)
 100ff98:	dec00104 	addi	sp,sp,4
 100ff9c:	f800283a 	ret

0100ffa0 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 100ffa0:	defff904 	addi	sp,sp,-28
 100ffa4:	df000615 	stw	fp,24(sp)
 100ffa8:	df000604 	addi	fp,sp,24
 100ffac:	e13ffe15 	stw	r4,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 100ffb0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 100ffb4:	e0bffe17 	ldw	r2,-8(fp)
 100ffb8:	1004c03a 	cmpne	r2,r2,zero
 100ffbc:	1000021e 	bne	r2,zero,100ffc8 <OSMboxAccept+0x28>
        return ((void *)0);
 100ffc0:	e03fff15 	stw	zero,-4(fp)
 100ffc4:	00001a06 	br	1010030 <OSMboxAccept+0x90>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 100ffc8:	e0bffe17 	ldw	r2,-8(fp)
 100ffcc:	10800003 	ldbu	r2,0(r2)
 100ffd0:	10803fcc 	andi	r2,r2,255
 100ffd4:	10800060 	cmpeqi	r2,r2,1
 100ffd8:	1000021e 	bne	r2,zero,100ffe4 <OSMboxAccept+0x44>
        return ((void *)0);
 100ffdc:	e03fff15 	stw	zero,-4(fp)
 100ffe0:	00001306 	br	1010030 <OSMboxAccept+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ffe4:	0005303a 	rdctl	r2,status
 100ffe8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ffec:	e0fffb17 	ldw	r3,-20(fp)
 100fff0:	00bfff84 	movi	r2,-2
 100fff4:	1884703a 	and	r2,r3,r2
 100fff8:	1001703a 	wrctl	status,r2
  
  return context;
 100fffc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1010000:	e0bffc15 	stw	r2,-16(fp)
    pmsg               = pevent->OSEventPtr;
 1010004:	e0bffe17 	ldw	r2,-8(fp)
 1010008:	10800117 	ldw	r2,4(r2)
 101000c:	e0bffd15 	stw	r2,-12(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 1010010:	e0bffe17 	ldw	r2,-8(fp)
 1010014:	10000115 	stw	zero,4(r2)
 1010018:	e0bffc17 	ldw	r2,-16(fp)
 101001c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010020:	e0bffa17 	ldw	r2,-24(fp)
 1010024:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 1010028:	e0bffd17 	ldw	r2,-12(fp)
 101002c:	e0bfff15 	stw	r2,-4(fp)
 1010030:	e0bfff17 	ldw	r2,-4(fp)
}
 1010034:	e037883a 	mov	sp,fp
 1010038:	df000017 	ldw	fp,0(sp)
 101003c:	dec00104 	addi	sp,sp,4
 1010040:	f800283a 	ret

01010044 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 1010044:	defff804 	addi	sp,sp,-32
 1010048:	dfc00715 	stw	ra,28(sp)
 101004c:	df000615 	stw	fp,24(sp)
 1010050:	df000604 	addi	fp,sp,24
 1010054:	e13ffe15 	stw	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1010058:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 101005c:	008040b4 	movhi	r2,258
 1010060:	10b3c204 	addi	r2,r2,-12536
 1010064:	10800003 	ldbu	r2,0(r2)
 1010068:	10803fcc 	andi	r2,r2,255
 101006c:	1005003a 	cmpeq	r2,r2,zero
 1010070:	1000021e 	bne	r2,zero,101007c <OSMboxCreate+0x38>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 1010074:	e03fff15 	stw	zero,-4(fp)
 1010078:	00003106 	br	1010140 <OSMboxCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101007c:	0005303a 	rdctl	r2,status
 1010080:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010084:	e0fffb17 	ldw	r3,-20(fp)
 1010088:	00bfff84 	movi	r2,-2
 101008c:	1884703a 	and	r2,r3,r2
 1010090:	1001703a 	wrctl	status,r2
  
  return context;
 1010094:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1010098:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 101009c:	008040b4 	movhi	r2,258
 10100a0:	10b3c104 	addi	r2,r2,-12540
 10100a4:	10800017 	ldw	r2,0(r2)
 10100a8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 10100ac:	008040b4 	movhi	r2,258
 10100b0:	10b3c104 	addi	r2,r2,-12540
 10100b4:	10800017 	ldw	r2,0(r2)
 10100b8:	1005003a 	cmpeq	r2,r2,zero
 10100bc:	1000081e 	bne	r2,zero,10100e0 <OSMboxCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10100c0:	008040b4 	movhi	r2,258
 10100c4:	10b3c104 	addi	r2,r2,-12540
 10100c8:	10800017 	ldw	r2,0(r2)
 10100cc:	10800117 	ldw	r2,4(r2)
 10100d0:	1007883a 	mov	r3,r2
 10100d4:	008040b4 	movhi	r2,258
 10100d8:	10b3c104 	addi	r2,r2,-12540
 10100dc:	10c00015 	stw	r3,0(r2)
 10100e0:	e0bffc17 	ldw	r2,-16(fp)
 10100e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10100e8:	e0bffa17 	ldw	r2,-24(fp)
 10100ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 10100f0:	e0bffd17 	ldw	r2,-12(fp)
 10100f4:	1005003a 	cmpeq	r2,r2,zero
 10100f8:	10000f1e 	bne	r2,zero,1010138 <OSMboxCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 10100fc:	e0fffd17 	ldw	r3,-12(fp)
 1010100:	00800044 	movi	r2,1
 1010104:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = 0;
 1010108:	e0bffd17 	ldw	r2,-12(fp)
 101010c:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 1010110:	e0fffd17 	ldw	r3,-12(fp)
 1010114:	e0bffe17 	ldw	r2,-8(fp)
 1010118:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 101011c:	e0fffd17 	ldw	r3,-12(fp)
 1010120:	00800fc4 	movi	r2,63
 1010124:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 1010128:	e0bffd17 	ldw	r2,-12(fp)
 101012c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 1010130:	e13ffd17 	ldw	r4,-12(fp)
 1010134:	100d9040 	call	100d904 <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 1010138:	e0bffd17 	ldw	r2,-12(fp)
 101013c:	e0bfff15 	stw	r2,-4(fp)
 1010140:	e0bfff17 	ldw	r2,-4(fp)
}
 1010144:	e037883a 	mov	sp,fp
 1010148:	dfc00117 	ldw	ra,4(sp)
 101014c:	df000017 	ldw	fp,0(sp)
 1010150:	dec00204 	addi	sp,sp,8
 1010154:	f800283a 	ret

01010158 <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1010158:	defff104 	addi	sp,sp,-60
 101015c:	dfc00e15 	stw	ra,56(sp)
 1010160:	df000d15 	stw	fp,52(sp)
 1010164:	df000d04 	addi	fp,sp,52
 1010168:	e13ffb15 	stw	r4,-20(fp)
 101016c:	e1bffd15 	stw	r6,-12(fp)
 1010170:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1010174:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1010178:	e0bffd17 	ldw	r2,-12(fp)
 101017c:	1004c03a 	cmpne	r2,r2,zero
 1010180:	1000031e 	bne	r2,zero,1010190 <OSMboxDel+0x38>
        return (pevent);
 1010184:	e0bffb17 	ldw	r2,-20(fp)
 1010188:	e0bfff15 	stw	r2,-4(fp)
 101018c:	00009406 	br	10103e0 <OSMboxDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1010190:	e0bffb17 	ldw	r2,-20(fp)
 1010194:	1004c03a 	cmpne	r2,r2,zero
 1010198:	1000061e 	bne	r2,zero,10101b4 <OSMboxDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 101019c:	e0fffd17 	ldw	r3,-12(fp)
 10101a0:	00800104 	movi	r2,4
 10101a4:	18800005 	stb	r2,0(r3)
        return (pevent);
 10101a8:	e0fffb17 	ldw	r3,-20(fp)
 10101ac:	e0ffff15 	stw	r3,-4(fp)
 10101b0:	00008b06 	br	10103e0 <OSMboxDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 10101b4:	e0bffb17 	ldw	r2,-20(fp)
 10101b8:	10800003 	ldbu	r2,0(r2)
 10101bc:	10803fcc 	andi	r2,r2,255
 10101c0:	10800060 	cmpeqi	r2,r2,1
 10101c4:	1000061e 	bne	r2,zero,10101e0 <OSMboxDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 10101c8:	e0fffd17 	ldw	r3,-12(fp)
 10101cc:	00800044 	movi	r2,1
 10101d0:	18800005 	stb	r2,0(r3)
        return (pevent);
 10101d4:	e0bffb17 	ldw	r2,-20(fp)
 10101d8:	e0bfff15 	stw	r2,-4(fp)
 10101dc:	00008006 	br	10103e0 <OSMboxDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10101e0:	008040b4 	movhi	r2,258
 10101e4:	10b3c204 	addi	r2,r2,-12536
 10101e8:	10800003 	ldbu	r2,0(r2)
 10101ec:	10803fcc 	andi	r2,r2,255
 10101f0:	1005003a 	cmpeq	r2,r2,zero
 10101f4:	1000061e 	bne	r2,zero,1010210 <OSMboxDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 10101f8:	e0fffd17 	ldw	r3,-12(fp)
 10101fc:	008003c4 	movi	r2,15
 1010200:	18800005 	stb	r2,0(r3)
        return (pevent);
 1010204:	e0fffb17 	ldw	r3,-20(fp)
 1010208:	e0ffff15 	stw	r3,-4(fp)
 101020c:	00007406 	br	10103e0 <OSMboxDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010210:	0005303a 	rdctl	r2,status
 1010214:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010218:	e0fff717 	ldw	r3,-36(fp)
 101021c:	00bfff84 	movi	r2,-2
 1010220:	1884703a 	and	r2,r3,r2
 1010224:	1001703a 	wrctl	status,r2
  
  return context;
 1010228:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 101022c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 1010230:	e0bffb17 	ldw	r2,-20(fp)
 1010234:	10800283 	ldbu	r2,10(r2)
 1010238:	10803fcc 	andi	r2,r2,255
 101023c:	1005003a 	cmpeq	r2,r2,zero
 1010240:	1000031e 	bne	r2,zero,1010250 <OSMboxDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1010244:	00800044 	movi	r2,1
 1010248:	e0bffa05 	stb	r2,-24(fp)
 101024c:	00000106 	br	1010254 <OSMboxDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1010250:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1010254:	e0bffc03 	ldbu	r2,-16(fp)
 1010258:	e0bffe15 	stw	r2,-8(fp)
 101025c:	e0fffe17 	ldw	r3,-8(fp)
 1010260:	1805003a 	cmpeq	r2,r3,zero
 1010264:	1000041e 	bne	r2,zero,1010278 <OSMboxDel+0x120>
 1010268:	e0fffe17 	ldw	r3,-8(fp)
 101026c:	18800060 	cmpeqi	r2,r3,1
 1010270:	10002d1e 	bne	r2,zero,1010328 <OSMboxDel+0x1d0>
 1010274:	00004f06 	br	10103b4 <OSMboxDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 1010278:	e0bffa03 	ldbu	r2,-24(fp)
 101027c:	1004c03a 	cmpne	r2,r2,zero
 1010280:	10001a1e 	bne	r2,zero,10102ec <OSMboxDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1010284:	e0fffb17 	ldw	r3,-20(fp)
 1010288:	00800fc4 	movi	r2,63
 101028c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1010290:	e0bffb17 	ldw	r2,-20(fp)
 1010294:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 1010298:	e0bffb17 	ldw	r2,-20(fp)
 101029c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 10102a0:	008040b4 	movhi	r2,258
 10102a4:	10b3c104 	addi	r2,r2,-12540
 10102a8:	10c00017 	ldw	r3,0(r2)
 10102ac:	e0bffb17 	ldw	r2,-20(fp)
 10102b0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 10102b4:	e0bffb17 	ldw	r2,-20(fp)
 10102b8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 10102bc:	00c040b4 	movhi	r3,258
 10102c0:	18f3c104 	addi	r3,r3,-12540
 10102c4:	e0bffb17 	ldw	r2,-20(fp)
 10102c8:	18800015 	stw	r2,0(r3)
 10102cc:	e0bff817 	ldw	r2,-32(fp)
 10102d0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10102d4:	e0bff617 	ldw	r2,-40(fp)
 10102d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 10102dc:	e0bffd17 	ldw	r2,-12(fp)
 10102e0:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 10102e4:	e03ff915 	stw	zero,-28(fp)
 10102e8:	00003b06 	br	10103d8 <OSMboxDel+0x280>
 10102ec:	e0bff817 	ldw	r2,-32(fp)
 10102f0:	e0bff515 	stw	r2,-44(fp)
 10102f4:	e0bff517 	ldw	r2,-44(fp)
 10102f8:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 10102fc:	e0fffd17 	ldw	r3,-12(fp)
 1010300:	00801244 	movi	r2,73
 1010304:	18800005 	stb	r2,0(r3)
                 pevent_return       = pevent;
 1010308:	e0bffb17 	ldw	r2,-20(fp)
 101030c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1010310:	00003106 	br	10103d8 <OSMboxDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 1010314:	e13ffb17 	ldw	r4,-20(fp)
 1010318:	000b883a 	mov	r5,zero
 101031c:	01800084 	movi	r6,2
 1010320:	000f883a 	mov	r7,zero
 1010324:	100d3500 	call	100d350 <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 1010328:	e0bffb17 	ldw	r2,-20(fp)
 101032c:	10800283 	ldbu	r2,10(r2)
 1010330:	10803fcc 	andi	r2,r2,255
 1010334:	1004c03a 	cmpne	r2,r2,zero
 1010338:	103ff61e 	bne	r2,zero,1010314 <OSMboxDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 101033c:	e0fffb17 	ldw	r3,-20(fp)
 1010340:	00800fc4 	movi	r2,63
 1010344:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1010348:	e0bffb17 	ldw	r2,-20(fp)
 101034c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1010350:	e0bffb17 	ldw	r2,-20(fp)
 1010354:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1010358:	008040b4 	movhi	r2,258
 101035c:	10b3c104 	addi	r2,r2,-12540
 1010360:	10c00017 	ldw	r3,0(r2)
 1010364:	e0bffb17 	ldw	r2,-20(fp)
 1010368:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 101036c:	e0bffb17 	ldw	r2,-20(fp)
 1010370:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1010374:	00c040b4 	movhi	r3,258
 1010378:	18f3c104 	addi	r3,r3,-12540
 101037c:	e0bffb17 	ldw	r2,-20(fp)
 1010380:	18800015 	stw	r2,0(r3)
 1010384:	e0bff817 	ldw	r2,-32(fp)
 1010388:	e0bff415 	stw	r2,-48(fp)
 101038c:	e0bff417 	ldw	r2,-48(fp)
 1010390:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1010394:	e0bffa03 	ldbu	r2,-24(fp)
 1010398:	10800058 	cmpnei	r2,r2,1
 101039c:	1000011e 	bne	r2,zero,10103a4 <OSMboxDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 10103a0:	100dd900 	call	100dd90 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 10103a4:	e0bffd17 	ldw	r2,-12(fp)
 10103a8:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 10103ac:	e03ff915 	stw	zero,-28(fp)
             break;
 10103b0:	00000906 	br	10103d8 <OSMboxDel+0x280>
 10103b4:	e0bff817 	ldw	r2,-32(fp)
 10103b8:	e0bff315 	stw	r2,-52(fp)
 10103bc:	e0bff317 	ldw	r2,-52(fp)
 10103c0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 10103c4:	e0fffd17 	ldw	r3,-12(fp)
 10103c8:	008001c4 	movi	r2,7
 10103cc:	18800005 	stb	r2,0(r3)
             pevent_return = pevent;
 10103d0:	e0bffb17 	ldw	r2,-20(fp)
 10103d4:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 10103d8:	e0bff917 	ldw	r2,-28(fp)
 10103dc:	e0bfff15 	stw	r2,-4(fp)
 10103e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10103e4:	e037883a 	mov	sp,fp
 10103e8:	dfc00117 	ldw	ra,4(sp)
 10103ec:	df000017 	ldw	fp,0(sp)
 10103f0:	dec00204 	addi	sp,sp,8
 10103f4:	f800283a 	ret

010103f8 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 10103f8:	defff204 	addi	sp,sp,-56
 10103fc:	dfc00d15 	stw	ra,52(sp)
 1010400:	df000c15 	stw	fp,48(sp)
 1010404:	df000c04 	addi	fp,sp,48
 1010408:	e13ffb15 	stw	r4,-20(fp)
 101040c:	e1bffd15 	stw	r6,-12(fp)
 1010410:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010414:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010418:	e0bffd17 	ldw	r2,-12(fp)
 101041c:	1004c03a 	cmpne	r2,r2,zero
 1010420:	1000021e 	bne	r2,zero,101042c <OSMboxPend+0x34>
        return ((void *)0);
 1010424:	e03fff15 	stw	zero,-4(fp)
 1010428:	00009f06 	br	10106a8 <OSMboxPend+0x2b0>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101042c:	e0bffb17 	ldw	r2,-20(fp)
 1010430:	1004c03a 	cmpne	r2,r2,zero
 1010434:	1000051e 	bne	r2,zero,101044c <OSMboxPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1010438:	e0fffd17 	ldw	r3,-12(fp)
 101043c:	00800104 	movi	r2,4
 1010440:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1010444:	e03fff15 	stw	zero,-4(fp)
 1010448:	00009706 	br	10106a8 <OSMboxPend+0x2b0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 101044c:	e0bffb17 	ldw	r2,-20(fp)
 1010450:	10800003 	ldbu	r2,0(r2)
 1010454:	10803fcc 	andi	r2,r2,255
 1010458:	10800060 	cmpeqi	r2,r2,1
 101045c:	1000051e 	bne	r2,zero,1010474 <OSMboxPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1010460:	e0fffd17 	ldw	r3,-12(fp)
 1010464:	00800044 	movi	r2,1
 1010468:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101046c:	e03fff15 	stw	zero,-4(fp)
 1010470:	00008d06 	br	10106a8 <OSMboxPend+0x2b0>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 1010474:	008040b4 	movhi	r2,258
 1010478:	10b3c204 	addi	r2,r2,-12536
 101047c:	10800003 	ldbu	r2,0(r2)
 1010480:	10803fcc 	andi	r2,r2,255
 1010484:	1005003a 	cmpeq	r2,r2,zero
 1010488:	1000051e 	bne	r2,zero,10104a0 <OSMboxPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 101048c:	e0fffd17 	ldw	r3,-12(fp)
 1010490:	00800084 	movi	r2,2
 1010494:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1010498:	e03fff15 	stw	zero,-4(fp)
 101049c:	00008206 	br	10106a8 <OSMboxPend+0x2b0>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 10104a0:	008040b4 	movhi	r2,258
 10104a4:	10b3b104 	addi	r2,r2,-12604
 10104a8:	10800003 	ldbu	r2,0(r2)
 10104ac:	10803fcc 	andi	r2,r2,255
 10104b0:	1005003a 	cmpeq	r2,r2,zero
 10104b4:	1000051e 	bne	r2,zero,10104cc <OSMboxPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 10104b8:	e0fffd17 	ldw	r3,-12(fp)
 10104bc:	00800344 	movi	r2,13
 10104c0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 10104c4:	e03fff15 	stw	zero,-4(fp)
 10104c8:	00007706 	br	10106a8 <OSMboxPend+0x2b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10104cc:	0005303a 	rdctl	r2,status
 10104d0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10104d4:	e0fff817 	ldw	r3,-32(fp)
 10104d8:	00bfff84 	movi	r2,-2
 10104dc:	1884703a 	and	r2,r3,r2
 10104e0:	1001703a 	wrctl	status,r2
  
  return context;
 10104e4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 10104e8:	e0bff915 	stw	r2,-28(fp)
    pmsg = pevent->OSEventPtr;
 10104ec:	e0bffb17 	ldw	r2,-20(fp)
 10104f0:	10800117 	ldw	r2,4(r2)
 10104f4:	e0bffa15 	stw	r2,-24(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 10104f8:	e0bffa17 	ldw	r2,-24(fp)
 10104fc:	1005003a 	cmpeq	r2,r2,zero
 1010500:	10000b1e 	bne	r2,zero,1010530 <OSMboxPend+0x138>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 1010504:	e0bffb17 	ldw	r2,-20(fp)
 1010508:	10000115 	stw	zero,4(r2)
 101050c:	e0bff917 	ldw	r2,-28(fp)
 1010510:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010514:	e0bff717 	ldw	r2,-36(fp)
 1010518:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 101051c:	e0bffd17 	ldw	r2,-12(fp)
 1010520:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 1010524:	e0bffa17 	ldw	r2,-24(fp)
 1010528:	e0bfff15 	stw	r2,-4(fp)
 101052c:	00005e06 	br	10106a8 <OSMboxPend+0x2b0>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 1010530:	008040b4 	movhi	r2,258
 1010534:	10b3c304 	addi	r2,r2,-12532
 1010538:	10c00017 	ldw	r3,0(r2)
 101053c:	008040b4 	movhi	r2,258
 1010540:	10b3c304 	addi	r2,r2,-12532
 1010544:	10800017 	ldw	r2,0(r2)
 1010548:	10800c03 	ldbu	r2,48(r2)
 101054c:	10800094 	ori	r2,r2,2
 1010550:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1010554:	008040b4 	movhi	r2,258
 1010558:	10b3c304 	addi	r2,r2,-12532
 101055c:	10800017 	ldw	r2,0(r2)
 1010560:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 1010564:	008040b4 	movhi	r2,258
 1010568:	10b3c304 	addi	r2,r2,-12532
 101056c:	10c00017 	ldw	r3,0(r2)
 1010570:	e0bffc0b 	ldhu	r2,-16(fp)
 1010574:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1010578:	e13ffb17 	ldw	r4,-20(fp)
 101057c:	100d4e40 	call	100d4e4 <OS_EventTaskWait>
 1010580:	e0bff917 	ldw	r2,-28(fp)
 1010584:	e0bff615 	stw	r2,-40(fp)
 1010588:	e0bff617 	ldw	r2,-40(fp)
 101058c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 1010590:	100dd900 	call	100dd90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010594:	0005303a 	rdctl	r2,status
 1010598:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101059c:	e0fff517 	ldw	r3,-44(fp)
 10105a0:	00bfff84 	movi	r2,-2
 10105a4:	1884703a 	and	r2,r3,r2
 10105a8:	1001703a 	wrctl	status,r2
  
  return context;
 10105ac:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
 10105b0:	e0bff915 	stw	r2,-28(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 10105b4:	008040b4 	movhi	r2,258
 10105b8:	10b3c304 	addi	r2,r2,-12532
 10105bc:	10800017 	ldw	r2,0(r2)
 10105c0:	10800c43 	ldbu	r2,49(r2)
 10105c4:	10803fcc 	andi	r2,r2,255
 10105c8:	e0bffe15 	stw	r2,-8(fp)
 10105cc:	e0fffe17 	ldw	r3,-8(fp)
 10105d0:	1805003a 	cmpeq	r2,r3,zero
 10105d4:	1000041e 	bne	r2,zero,10105e8 <OSMboxPend+0x1f0>
 10105d8:	e0fffe17 	ldw	r3,-8(fp)
 10105dc:	188000a0 	cmpeqi	r2,r3,2
 10105e0:	1000091e 	bne	r2,zero,1010608 <OSMboxPend+0x210>
 10105e4:	00000d06 	br	101061c <OSMboxPend+0x224>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 10105e8:	008040b4 	movhi	r2,258
 10105ec:	10b3c304 	addi	r2,r2,-12532
 10105f0:	10800017 	ldw	r2,0(r2)
 10105f4:	10800917 	ldw	r2,36(r2)
 10105f8:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 10105fc:	e0bffd17 	ldw	r2,-12(fp)
 1010600:	10000005 	stb	zero,0(r2)
             break;
 1010604:	00000e06 	br	1010640 <OSMboxPend+0x248>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 1010608:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 101060c:	e0fffd17 	ldw	r3,-12(fp)
 1010610:	00800384 	movi	r2,14
 1010614:	18800005 	stb	r2,0(r3)
             break;
 1010618:	00000906 	br	1010640 <OSMboxPend+0x248>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 101061c:	008040b4 	movhi	r2,258
 1010620:	10b3c304 	addi	r2,r2,-12532
 1010624:	11000017 	ldw	r4,0(r2)
 1010628:	e17ffb17 	ldw	r5,-20(fp)
 101062c:	100d7480 	call	100d748 <OS_EventTaskRemove>
             pmsg = (void *)0;
 1010630:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1010634:	e0fffd17 	ldw	r3,-12(fp)
 1010638:	00800284 	movi	r2,10
 101063c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1010640:	008040b4 	movhi	r2,258
 1010644:	10b3c304 	addi	r2,r2,-12532
 1010648:	10800017 	ldw	r2,0(r2)
 101064c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1010650:	008040b4 	movhi	r2,258
 1010654:	10b3c304 	addi	r2,r2,-12532
 1010658:	10800017 	ldw	r2,0(r2)
 101065c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1010660:	008040b4 	movhi	r2,258
 1010664:	10b3c304 	addi	r2,r2,-12532
 1010668:	10800017 	ldw	r2,0(r2)
 101066c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1010670:	008040b4 	movhi	r2,258
 1010674:	10b3c304 	addi	r2,r2,-12532
 1010678:	10800017 	ldw	r2,0(r2)
 101067c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 1010680:	008040b4 	movhi	r2,258
 1010684:	10b3c304 	addi	r2,r2,-12532
 1010688:	10800017 	ldw	r2,0(r2)
 101068c:	10000915 	stw	zero,36(r2)
 1010690:	e0bff917 	ldw	r2,-28(fp)
 1010694:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010698:	e0bff417 	ldw	r2,-48(fp)
 101069c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 10106a0:	e0bffa17 	ldw	r2,-24(fp)
 10106a4:	e0bfff15 	stw	r2,-4(fp)
 10106a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10106ac:	e037883a 	mov	sp,fp
 10106b0:	dfc00117 	ldw	ra,4(sp)
 10106b4:	df000017 	ldw	fp,0(sp)
 10106b8:	dec00204 	addi	sp,sp,8
 10106bc:	f800283a 	ret

010106c0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10106c0:	defff504 	addi	sp,sp,-44
 10106c4:	dfc00a15 	stw	ra,40(sp)
 10106c8:	df000915 	stw	fp,36(sp)
 10106cc:	df000904 	addi	fp,sp,36
 10106d0:	e13ffc15 	stw	r4,-16(fp)
 10106d4:	e1bffe15 	stw	r6,-8(fp)
 10106d8:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10106dc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10106e0:	e0bffe17 	ldw	r2,-8(fp)
 10106e4:	1004c03a 	cmpne	r2,r2,zero
 10106e8:	1000021e 	bne	r2,zero,10106f4 <OSMboxPendAbort+0x34>
        return (0);
 10106ec:	e03fff15 	stw	zero,-4(fp)
 10106f0:	00004c06 	br	1010824 <OSMboxPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 10106f4:	e0bffc17 	ldw	r2,-16(fp)
 10106f8:	1004c03a 	cmpne	r2,r2,zero
 10106fc:	1000051e 	bne	r2,zero,1010714 <OSMboxPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1010700:	e0fffe17 	ldw	r3,-8(fp)
 1010704:	00800104 	movi	r2,4
 1010708:	18800005 	stb	r2,0(r3)
        return (0);
 101070c:	e03fff15 	stw	zero,-4(fp)
 1010710:	00004406 	br	1010824 <OSMboxPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 1010714:	e0bffc17 	ldw	r2,-16(fp)
 1010718:	10800003 	ldbu	r2,0(r2)
 101071c:	10803fcc 	andi	r2,r2,255
 1010720:	10800060 	cmpeqi	r2,r2,1
 1010724:	1000051e 	bne	r2,zero,101073c <OSMboxPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1010728:	e0fffe17 	ldw	r3,-8(fp)
 101072c:	00800044 	movi	r2,1
 1010730:	18800005 	stb	r2,0(r3)
        return (0);
 1010734:	e03fff15 	stw	zero,-4(fp)
 1010738:	00003a06 	br	1010824 <OSMboxPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101073c:	0005303a 	rdctl	r2,status
 1010740:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010744:	e0fff917 	ldw	r3,-28(fp)
 1010748:	00bfff84 	movi	r2,-2
 101074c:	1884703a 	and	r2,r3,r2
 1010750:	1001703a 	wrctl	status,r2
  
  return context;
 1010754:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1010758:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 101075c:	e0bffc17 	ldw	r2,-16(fp)
 1010760:	10800283 	ldbu	r2,10(r2)
 1010764:	10803fcc 	andi	r2,r2,255
 1010768:	1005003a 	cmpeq	r2,r2,zero
 101076c:	1000261e 	bne	r2,zero,1010808 <OSMboxPendAbort+0x148>
        nbr_tasks = 0;
 1010770:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1010774:	e0bffd03 	ldbu	r2,-12(fp)
 1010778:	10800060 	cmpeqi	r2,r2,1
 101077c:	1000091e 	bne	r2,zero,10107a4 <OSMboxPendAbort+0xe4>
 1010780:	00000e06 	br	10107bc <OSMboxPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 1010784:	e13ffc17 	ldw	r4,-16(fp)
 1010788:	000b883a 	mov	r5,zero
 101078c:	01800084 	movi	r6,2
 1010790:	01c00084 	movi	r7,2
 1010794:	100d3500 	call	100d350 <OS_EventTaskRdy>
                     nbr_tasks++;
 1010798:	e0bffb03 	ldbu	r2,-20(fp)
 101079c:	10800044 	addi	r2,r2,1
 10107a0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 10107a4:	e0bffc17 	ldw	r2,-16(fp)
 10107a8:	10800283 	ldbu	r2,10(r2)
 10107ac:	10803fcc 	andi	r2,r2,255
 10107b0:	1004c03a 	cmpne	r2,r2,zero
 10107b4:	103ff31e 	bne	r2,zero,1010784 <OSMboxPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 10107b8:	00000806 	br	10107dc <OSMboxPendAbort+0x11c>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 10107bc:	e13ffc17 	ldw	r4,-16(fp)
 10107c0:	000b883a 	mov	r5,zero
 10107c4:	01800084 	movi	r6,2
 10107c8:	01c00084 	movi	r7,2
 10107cc:	100d3500 	call	100d350 <OS_EventTaskRdy>
                 nbr_tasks++;
 10107d0:	e0bffb03 	ldbu	r2,-20(fp)
 10107d4:	10800044 	addi	r2,r2,1
 10107d8:	e0bffb05 	stb	r2,-20(fp)
 10107dc:	e0bffa17 	ldw	r2,-24(fp)
 10107e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10107e4:	e0bff817 	ldw	r2,-32(fp)
 10107e8:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 10107ec:	100dd900 	call	100dd90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 10107f0:	e0fffe17 	ldw	r3,-8(fp)
 10107f4:	00800384 	movi	r2,14
 10107f8:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 10107fc:	e0bffb03 	ldbu	r2,-20(fp)
 1010800:	e0bfff15 	stw	r2,-4(fp)
 1010804:	00000706 	br	1010824 <OSMboxPendAbort+0x164>
 1010808:	e0bffa17 	ldw	r2,-24(fp)
 101080c:	e0bff715 	stw	r2,-36(fp)
 1010810:	e0bff717 	ldw	r2,-36(fp)
 1010814:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1010818:	e0bffe17 	ldw	r2,-8(fp)
 101081c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 1010820:	e03fff15 	stw	zero,-4(fp)
 1010824:	e0bfff17 	ldw	r2,-4(fp)
}
 1010828:	e037883a 	mov	sp,fp
 101082c:	dfc00117 	ldw	ra,4(sp)
 1010830:	df000017 	ldw	fp,0(sp)
 1010834:	dec00204 	addi	sp,sp,8
 1010838:	f800283a 	ret

0101083c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 101083c:	defff604 	addi	sp,sp,-40
 1010840:	dfc00915 	stw	ra,36(sp)
 1010844:	df000815 	stw	fp,32(sp)
 1010848:	df000804 	addi	fp,sp,32
 101084c:	e13ffd15 	stw	r4,-12(fp)
 1010850:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010854:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1010858:	e0bffd17 	ldw	r2,-12(fp)
 101085c:	1004c03a 	cmpne	r2,r2,zero
 1010860:	1000031e 	bne	r2,zero,1010870 <OSMboxPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 1010864:	00800104 	movi	r2,4
 1010868:	e0bfff15 	stw	r2,-4(fp)
 101086c:	00003a06 	br	1010958 <OSMboxPost+0x11c>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 1010870:	e0bffe17 	ldw	r2,-8(fp)
 1010874:	1004c03a 	cmpne	r2,r2,zero
 1010878:	1000031e 	bne	r2,zero,1010888 <OSMboxPost+0x4c>
        return (OS_ERR_POST_NULL_PTR);
 101087c:	008000c4 	movi	r2,3
 1010880:	e0bfff15 	stw	r2,-4(fp)
 1010884:	00003406 	br	1010958 <OSMboxPost+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 1010888:	e0bffd17 	ldw	r2,-12(fp)
 101088c:	10800003 	ldbu	r2,0(r2)
 1010890:	10803fcc 	andi	r2,r2,255
 1010894:	10800060 	cmpeqi	r2,r2,1
 1010898:	1000031e 	bne	r2,zero,10108a8 <OSMboxPost+0x6c>
        return (OS_ERR_EVENT_TYPE);
 101089c:	00800044 	movi	r2,1
 10108a0:	e0bfff15 	stw	r2,-4(fp)
 10108a4:	00002c06 	br	1010958 <OSMboxPost+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10108a8:	0005303a 	rdctl	r2,status
 10108ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10108b0:	e0fffb17 	ldw	r3,-20(fp)
 10108b4:	00bfff84 	movi	r2,-2
 10108b8:	1884703a 	and	r2,r3,r2
 10108bc:	1001703a 	wrctl	status,r2
  
  return context;
 10108c0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10108c4:	e0bffc15 	stw	r2,-16(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 10108c8:	e0bffd17 	ldw	r2,-12(fp)
 10108cc:	10800283 	ldbu	r2,10(r2)
 10108d0:	10803fcc 	andi	r2,r2,255
 10108d4:	1005003a 	cmpeq	r2,r2,zero
 10108d8:	10000c1e 	bne	r2,zero,101090c <OSMboxPost+0xd0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 10108dc:	e13ffd17 	ldw	r4,-12(fp)
 10108e0:	e17ffe17 	ldw	r5,-8(fp)
 10108e4:	01800084 	movi	r6,2
 10108e8:	000f883a 	mov	r7,zero
 10108ec:	100d3500 	call	100d350 <OS_EventTaskRdy>
 10108f0:	e0bffc17 	ldw	r2,-16(fp)
 10108f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10108f8:	e0bffa17 	ldw	r2,-24(fp)
 10108fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 1010900:	100dd900 	call	100dd90 <OS_Sched>
        return (OS_ERR_NONE);
 1010904:	e03fff15 	stw	zero,-4(fp)
 1010908:	00001306 	br	1010958 <OSMboxPost+0x11c>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 101090c:	e0bffd17 	ldw	r2,-12(fp)
 1010910:	10800117 	ldw	r2,4(r2)
 1010914:	1005003a 	cmpeq	r2,r2,zero
 1010918:	1000071e 	bne	r2,zero,1010938 <OSMboxPost+0xfc>
 101091c:	e0bffc17 	ldw	r2,-16(fp)
 1010920:	e0bff915 	stw	r2,-28(fp)
 1010924:	e0bff917 	ldw	r2,-28(fp)
 1010928:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 101092c:	00800504 	movi	r2,20
 1010930:	e0bfff15 	stw	r2,-4(fp)
 1010934:	00000806 	br	1010958 <OSMboxPost+0x11c>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 1010938:	e0fffd17 	ldw	r3,-12(fp)
 101093c:	e0bffe17 	ldw	r2,-8(fp)
 1010940:	18800115 	stw	r2,4(r3)
 1010944:	e0bffc17 	ldw	r2,-16(fp)
 1010948:	e0bff815 	stw	r2,-32(fp)
 101094c:	e0bff817 	ldw	r2,-32(fp)
 1010950:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1010954:	e03fff15 	stw	zero,-4(fp)
 1010958:	e0bfff17 	ldw	r2,-4(fp)
}
 101095c:	e037883a 	mov	sp,fp
 1010960:	dfc00117 	ldw	ra,4(sp)
 1010964:	df000017 	ldw	fp,0(sp)
 1010968:	dec00204 	addi	sp,sp,8
 101096c:	f800283a 	ret

01010970 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 1010970:	defff504 	addi	sp,sp,-44
 1010974:	dfc00a15 	stw	ra,40(sp)
 1010978:	df000915 	stw	fp,36(sp)
 101097c:	df000904 	addi	fp,sp,36
 1010980:	e13ffc15 	stw	r4,-16(fp)
 1010984:	e17ffd15 	stw	r5,-12(fp)
 1010988:	e1bffe05 	stb	r6,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101098c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1010990:	e0bffc17 	ldw	r2,-16(fp)
 1010994:	1004c03a 	cmpne	r2,r2,zero
 1010998:	1000031e 	bne	r2,zero,10109a8 <OSMboxPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 101099c:	00800104 	movi	r2,4
 10109a0:	e0bfff15 	stw	r2,-4(fp)
 10109a4:	00004f06 	br	1010ae4 <OSMboxPostOpt+0x174>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 10109a8:	e0bffd17 	ldw	r2,-12(fp)
 10109ac:	1004c03a 	cmpne	r2,r2,zero
 10109b0:	1000031e 	bne	r2,zero,10109c0 <OSMboxPostOpt+0x50>
        return (OS_ERR_POST_NULL_PTR);
 10109b4:	008000c4 	movi	r2,3
 10109b8:	e0bfff15 	stw	r2,-4(fp)
 10109bc:	00004906 	br	1010ae4 <OSMboxPostOpt+0x174>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 10109c0:	e0bffc17 	ldw	r2,-16(fp)
 10109c4:	10800003 	ldbu	r2,0(r2)
 10109c8:	10803fcc 	andi	r2,r2,255
 10109cc:	10800060 	cmpeqi	r2,r2,1
 10109d0:	1000031e 	bne	r2,zero,10109e0 <OSMboxPostOpt+0x70>
        return (OS_ERR_EVENT_TYPE);
 10109d4:	00800044 	movi	r2,1
 10109d8:	e0bfff15 	stw	r2,-4(fp)
 10109dc:	00004106 	br	1010ae4 <OSMboxPostOpt+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10109e0:	0005303a 	rdctl	r2,status
 10109e4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10109e8:	e0fffa17 	ldw	r3,-24(fp)
 10109ec:	00bfff84 	movi	r2,-2
 10109f0:	1884703a 	and	r2,r3,r2
 10109f4:	1001703a 	wrctl	status,r2
  
  return context;
 10109f8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10109fc:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 1010a00:	e0bffc17 	ldw	r2,-16(fp)
 1010a04:	10800283 	ldbu	r2,10(r2)
 1010a08:	10803fcc 	andi	r2,r2,255
 1010a0c:	1005003a 	cmpeq	r2,r2,zero
 1010a10:	1000211e 	bne	r2,zero,1010a98 <OSMboxPostOpt+0x128>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 1010a14:	e0bffe03 	ldbu	r2,-8(fp)
 1010a18:	1080004c 	andi	r2,r2,1
 1010a1c:	10803fcc 	andi	r2,r2,255
 1010a20:	1005003a 	cmpeq	r2,r2,zero
 1010a24:	10000c1e 	bne	r2,zero,1010a58 <OSMboxPostOpt+0xe8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 1010a28:	00000506 	br	1010a40 <OSMboxPostOpt+0xd0>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 1010a2c:	e13ffc17 	ldw	r4,-16(fp)
 1010a30:	e17ffd17 	ldw	r5,-12(fp)
 1010a34:	01800084 	movi	r6,2
 1010a38:	000f883a 	mov	r7,zero
 1010a3c:	100d3500 	call	100d350 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 1010a40:	e0bffc17 	ldw	r2,-16(fp)
 1010a44:	10800283 	ldbu	r2,10(r2)
 1010a48:	10803fcc 	andi	r2,r2,255
 1010a4c:	1004c03a 	cmpne	r2,r2,zero
 1010a50:	103ff61e 	bne	r2,zero,1010a2c <OSMboxPostOpt+0xbc>
 1010a54:	00000506 	br	1010a6c <OSMboxPostOpt+0xfc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 1010a58:	e13ffc17 	ldw	r4,-16(fp)
 1010a5c:	e17ffd17 	ldw	r5,-12(fp)
 1010a60:	01800084 	movi	r6,2
 1010a64:	000f883a 	mov	r7,zero
 1010a68:	100d3500 	call	100d350 <OS_EventTaskRdy>
 1010a6c:	e0bffb17 	ldw	r2,-20(fp)
 1010a70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010a74:	e0bff917 	ldw	r2,-28(fp)
 1010a78:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 1010a7c:	e0bffe03 	ldbu	r2,-8(fp)
 1010a80:	1080010c 	andi	r2,r2,4
 1010a84:	1004c03a 	cmpne	r2,r2,zero
 1010a88:	1000011e 	bne	r2,zero,1010a90 <OSMboxPostOpt+0x120>
            OS_Sched();                               /* Find HPT ready to run                         */
 1010a8c:	100dd900 	call	100dd90 <OS_Sched>
        }
        return (OS_ERR_NONE);
 1010a90:	e03fff15 	stw	zero,-4(fp)
 1010a94:	00001306 	br	1010ae4 <OSMboxPostOpt+0x174>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 1010a98:	e0bffc17 	ldw	r2,-16(fp)
 1010a9c:	10800117 	ldw	r2,4(r2)
 1010aa0:	1005003a 	cmpeq	r2,r2,zero
 1010aa4:	1000071e 	bne	r2,zero,1010ac4 <OSMboxPostOpt+0x154>
 1010aa8:	e0bffb17 	ldw	r2,-20(fp)
 1010aac:	e0bff815 	stw	r2,-32(fp)
 1010ab0:	e0bff817 	ldw	r2,-32(fp)
 1010ab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 1010ab8:	00800504 	movi	r2,20
 1010abc:	e0bfff15 	stw	r2,-4(fp)
 1010ac0:	00000806 	br	1010ae4 <OSMboxPostOpt+0x174>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 1010ac4:	e0fffc17 	ldw	r3,-16(fp)
 1010ac8:	e0bffd17 	ldw	r2,-12(fp)
 1010acc:	18800115 	stw	r2,4(r3)
 1010ad0:	e0bffb17 	ldw	r2,-20(fp)
 1010ad4:	e0bff715 	stw	r2,-36(fp)
 1010ad8:	e0bff717 	ldw	r2,-36(fp)
 1010adc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1010ae0:	e03fff15 	stw	zero,-4(fp)
 1010ae4:	e0bfff17 	ldw	r2,-4(fp)
}
 1010ae8:	e037883a 	mov	sp,fp
 1010aec:	dfc00117 	ldw	ra,4(sp)
 1010af0:	df000017 	ldw	fp,0(sp)
 1010af4:	dec00204 	addi	sp,sp,8
 1010af8:	f800283a 	ret

01010afc <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 1010afc:	defff604 	addi	sp,sp,-40
 1010b00:	df000915 	stw	fp,36(sp)
 1010b04:	df000904 	addi	fp,sp,36
 1010b08:	e13ffd15 	stw	r4,-12(fp)
 1010b0c:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1010b10:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1010b14:	e0bffd17 	ldw	r2,-12(fp)
 1010b18:	1004c03a 	cmpne	r2,r2,zero
 1010b1c:	1000031e 	bne	r2,zero,1010b2c <OSMboxQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1010b20:	00800104 	movi	r2,4
 1010b24:	e0bfff15 	stw	r2,-4(fp)
 1010b28:	00003b06 	br	1010c18 <OSMboxQuery+0x11c>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 1010b2c:	e0bffe17 	ldw	r2,-8(fp)
 1010b30:	1004c03a 	cmpne	r2,r2,zero
 1010b34:	1000031e 	bne	r2,zero,1010b44 <OSMboxQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 1010b38:	00800244 	movi	r2,9
 1010b3c:	e0bfff15 	stw	r2,-4(fp)
 1010b40:	00003506 	br	1010c18 <OSMboxQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 1010b44:	e0bffd17 	ldw	r2,-12(fp)
 1010b48:	10800003 	ldbu	r2,0(r2)
 1010b4c:	10803fcc 	andi	r2,r2,255
 1010b50:	10800060 	cmpeqi	r2,r2,1
 1010b54:	1000031e 	bne	r2,zero,1010b64 <OSMboxQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 1010b58:	00800044 	movi	r2,1
 1010b5c:	e0bfff15 	stw	r2,-4(fp)
 1010b60:	00002d06 	br	1010c18 <OSMboxQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010b64:	0005303a 	rdctl	r2,status
 1010b68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010b6c:	e0fff817 	ldw	r3,-32(fp)
 1010b70:	00bfff84 	movi	r2,-2
 1010b74:	1884703a 	and	r2,r3,r2
 1010b78:	1001703a 	wrctl	status,r2
  
  return context;
 1010b7c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1010b80:	e0bff915 	stw	r2,-28(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 1010b84:	e0bffd17 	ldw	r2,-12(fp)
 1010b88:	10c00283 	ldbu	r3,10(r2)
 1010b8c:	e0bffe17 	ldw	r2,-8(fp)
 1010b90:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 1010b94:	e0bffd17 	ldw	r2,-12(fp)
 1010b98:	108002c4 	addi	r2,r2,11
 1010b9c:	e0bffb15 	stw	r2,-20(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 1010ba0:	e0bffe17 	ldw	r2,-8(fp)
 1010ba4:	10800104 	addi	r2,r2,4
 1010ba8:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1010bac:	e03ffc05 	stb	zero,-16(fp)
 1010bb0:	00000d06 	br	1010be8 <OSMboxQuery+0xec>
        *pdest++ = *psrc++;
 1010bb4:	e0bffb17 	ldw	r2,-20(fp)
 1010bb8:	10c00003 	ldbu	r3,0(r2)
 1010bbc:	e0bffa17 	ldw	r2,-24(fp)
 1010bc0:	10c00005 	stb	r3,0(r2)
 1010bc4:	e0bffa17 	ldw	r2,-24(fp)
 1010bc8:	10800044 	addi	r2,r2,1
 1010bcc:	e0bffa15 	stw	r2,-24(fp)
 1010bd0:	e0bffb17 	ldw	r2,-20(fp)
 1010bd4:	10800044 	addi	r2,r2,1
 1010bd8:	e0bffb15 	stw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1010bdc:	e0bffc03 	ldbu	r2,-16(fp)
 1010be0:	10800044 	addi	r2,r2,1
 1010be4:	e0bffc05 	stb	r2,-16(fp)
 1010be8:	e0bffc03 	ldbu	r2,-16(fp)
 1010bec:	108000f0 	cmpltui	r2,r2,3
 1010bf0:	103ff01e 	bne	r2,zero,1010bb4 <OSMboxQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 1010bf4:	e0bffd17 	ldw	r2,-12(fp)
 1010bf8:	10c00117 	ldw	r3,4(r2)
 1010bfc:	e0bffe17 	ldw	r2,-8(fp)
 1010c00:	10c00015 	stw	r3,0(r2)
 1010c04:	e0bff917 	ldw	r2,-28(fp)
 1010c08:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010c0c:	e0bff717 	ldw	r2,-36(fp)
 1010c10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1010c14:	e03fff15 	stw	zero,-4(fp)
 1010c18:	e0bfff17 	ldw	r2,-4(fp)
}
 1010c1c:	e037883a 	mov	sp,fp
 1010c20:	df000017 	ldw	fp,0(sp)
 1010c24:	dec00104 	addi	sp,sp,4
 1010c28:	f800283a 	ret

01010c2c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 1010c2c:	defff304 	addi	sp,sp,-52
 1010c30:	df000c15 	stw	fp,48(sp)
 1010c34:	df000c04 	addi	fp,sp,48
 1010c38:	e13ffb15 	stw	r4,-20(fp)
 1010c3c:	e17ffc15 	stw	r5,-16(fp)
 1010c40:	e1bffd15 	stw	r6,-12(fp)
 1010c44:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010c48:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010c4c:	e0bffe17 	ldw	r2,-8(fp)
 1010c50:	1004c03a 	cmpne	r2,r2,zero
 1010c54:	1000021e 	bne	r2,zero,1010c60 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 1010c58:	e03fff15 	stw	zero,-4(fp)
 1010c5c:	00007506 	br	1010e34 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 1010c60:	e0bffb17 	ldw	r2,-20(fp)
 1010c64:	1004c03a 	cmpne	r2,r2,zero
 1010c68:	1000051e 	bne	r2,zero,1010c80 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1010c6c:	e0fffe17 	ldw	r3,-8(fp)
 1010c70:	00801884 	movi	r2,98
 1010c74:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010c78:	e03fff15 	stw	zero,-4(fp)
 1010c7c:	00006d06 	br	1010e34 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 1010c80:	e0bffb17 	ldw	r2,-20(fp)
 1010c84:	108000cc 	andi	r2,r2,3
 1010c88:	1005003a 	cmpeq	r2,r2,zero
 1010c8c:	1000051e 	bne	r2,zero,1010ca4 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 1010c90:	e0fffe17 	ldw	r3,-8(fp)
 1010c94:	00801884 	movi	r2,98
 1010c98:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010c9c:	e03fff15 	stw	zero,-4(fp)
 1010ca0:	00006406 	br	1010e34 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 1010ca4:	e0bffc17 	ldw	r2,-16(fp)
 1010ca8:	108000a8 	cmpgeui	r2,r2,2
 1010cac:	1000051e 	bne	r2,zero,1010cc4 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 1010cb0:	e0fffe17 	ldw	r3,-8(fp)
 1010cb4:	008016c4 	movi	r2,91
 1010cb8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010cbc:	e03fff15 	stw	zero,-4(fp)
 1010cc0:	00005c06 	br	1010e34 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 1010cc4:	e0bffd17 	ldw	r2,-12(fp)
 1010cc8:	10800128 	cmpgeui	r2,r2,4
 1010ccc:	1000051e 	bne	r2,zero,1010ce4 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 1010cd0:	e0fffe17 	ldw	r3,-8(fp)
 1010cd4:	00801704 	movi	r2,92
 1010cd8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010cdc:	e03fff15 	stw	zero,-4(fp)
 1010ce0:	00005406 	br	1010e34 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010ce4:	0005303a 	rdctl	r2,status
 1010ce8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010cec:	e0fff517 	ldw	r3,-44(fp)
 1010cf0:	00bfff84 	movi	r2,-2
 1010cf4:	1884703a 	and	r2,r3,r2
 1010cf8:	1001703a 	wrctl	status,r2
  
  return context;
 1010cfc:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1010d00:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 1010d04:	008040b4 	movhi	r2,258
 1010d08:	10b3bd04 	addi	r2,r2,-12556
 1010d0c:	10800017 	ldw	r2,0(r2)
 1010d10:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 1010d14:	008040b4 	movhi	r2,258
 1010d18:	10b3bd04 	addi	r2,r2,-12556
 1010d1c:	10800017 	ldw	r2,0(r2)
 1010d20:	1005003a 	cmpeq	r2,r2,zero
 1010d24:	1000081e 	bne	r2,zero,1010d48 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 1010d28:	008040b4 	movhi	r2,258
 1010d2c:	10b3bd04 	addi	r2,r2,-12556
 1010d30:	10800017 	ldw	r2,0(r2)
 1010d34:	10800117 	ldw	r2,4(r2)
 1010d38:	1007883a 	mov	r3,r2
 1010d3c:	008040b4 	movhi	r2,258
 1010d40:	10b3bd04 	addi	r2,r2,-12556
 1010d44:	10c00015 	stw	r3,0(r2)
 1010d48:	e0bff617 	ldw	r2,-40(fp)
 1010d4c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d50:	e0bff417 	ldw	r2,-48(fp)
 1010d54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 1010d58:	e0bffa17 	ldw	r2,-24(fp)
 1010d5c:	1004c03a 	cmpne	r2,r2,zero
 1010d60:	1000051e 	bne	r2,zero,1010d78 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 1010d64:	e0fffe17 	ldw	r3,-8(fp)
 1010d68:	00801684 	movi	r2,90
 1010d6c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 1010d70:	e03fff15 	stw	zero,-4(fp)
 1010d74:	00002f06 	br	1010e34 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 1010d78:	e0bffb17 	ldw	r2,-20(fp)
 1010d7c:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 1010d80:	e0bffb17 	ldw	r2,-20(fp)
 1010d84:	1007883a 	mov	r3,r2
 1010d88:	e0bffd17 	ldw	r2,-12(fp)
 1010d8c:	1885883a 	add	r2,r3,r2
 1010d90:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 1010d94:	e03ff715 	stw	zero,-36(fp)
 1010d98:	00000d06 	br	1010dd0 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 1010d9c:	e0fff817 	ldw	r3,-32(fp)
 1010da0:	e0bff917 	ldw	r2,-28(fp)
 1010da4:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 1010da8:	e0bff917 	ldw	r2,-28(fp)
 1010dac:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 1010db0:	e0bff917 	ldw	r2,-28(fp)
 1010db4:	1007883a 	mov	r3,r2
 1010db8:	e0bffd17 	ldw	r2,-12(fp)
 1010dbc:	1885883a 	add	r2,r3,r2
 1010dc0:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 1010dc4:	e0bff717 	ldw	r2,-36(fp)
 1010dc8:	10800044 	addi	r2,r2,1
 1010dcc:	e0bff715 	stw	r2,-36(fp)
 1010dd0:	e0bffc17 	ldw	r2,-16(fp)
 1010dd4:	10ffffc4 	addi	r3,r2,-1
 1010dd8:	e0bff717 	ldw	r2,-36(fp)
 1010ddc:	10ffef36 	bltu	r2,r3,1010d9c <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 1010de0:	e0bff817 	ldw	r2,-32(fp)
 1010de4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 1010de8:	e0fffa17 	ldw	r3,-24(fp)
 1010dec:	e0bffb17 	ldw	r2,-20(fp)
 1010df0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 1010df4:	e0fffa17 	ldw	r3,-24(fp)
 1010df8:	e0bffb17 	ldw	r2,-20(fp)
 1010dfc:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 1010e00:	e0fffa17 	ldw	r3,-24(fp)
 1010e04:	e0bffc17 	ldw	r2,-16(fp)
 1010e08:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 1010e0c:	e0fffa17 	ldw	r3,-24(fp)
 1010e10:	e0bffc17 	ldw	r2,-16(fp)
 1010e14:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 1010e18:	e0fffa17 	ldw	r3,-24(fp)
 1010e1c:	e0bffd17 	ldw	r2,-12(fp)
 1010e20:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 1010e24:	e0bffe17 	ldw	r2,-8(fp)
 1010e28:	10000005 	stb	zero,0(r2)
    return (pmem);
 1010e2c:	e0bffa17 	ldw	r2,-24(fp)
 1010e30:	e0bfff15 	stw	r2,-4(fp)
 1010e34:	e0bfff17 	ldw	r2,-4(fp)
}
 1010e38:	e037883a 	mov	sp,fp
 1010e3c:	df000017 	ldw	fp,0(sp)
 1010e40:	dec00104 	addi	sp,sp,4
 1010e44:	f800283a 	ret

01010e48 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 1010e48:	defff704 	addi	sp,sp,-36
 1010e4c:	df000815 	stw	fp,32(sp)
 1010e50:	df000804 	addi	fp,sp,32
 1010e54:	e13ffd15 	stw	r4,-12(fp)
 1010e58:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010e5c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010e60:	e0bffe17 	ldw	r2,-8(fp)
 1010e64:	1004c03a 	cmpne	r2,r2,zero
 1010e68:	1000021e 	bne	r2,zero,1010e74 <OSMemGet+0x2c>
        return ((void *)0);
 1010e6c:	e03fff15 	stw	zero,-4(fp)
 1010e70:	00003106 	br	1010f38 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 1010e74:	e0bffd17 	ldw	r2,-12(fp)
 1010e78:	1004c03a 	cmpne	r2,r2,zero
 1010e7c:	1000051e 	bne	r2,zero,1010e94 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1010e80:	e0fffe17 	ldw	r3,-8(fp)
 1010e84:	00801804 	movi	r2,96
 1010e88:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1010e8c:	e03fff15 	stw	zero,-4(fp)
 1010e90:	00002906 	br	1010f38 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010e94:	0005303a 	rdctl	r2,status
 1010e98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010e9c:	e0fffa17 	ldw	r3,-24(fp)
 1010ea0:	00bfff84 	movi	r2,-2
 1010ea4:	1884703a 	and	r2,r3,r2
 1010ea8:	1001703a 	wrctl	status,r2
  
  return context;
 1010eac:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1010eb0:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 1010eb4:	e0bffd17 	ldw	r2,-12(fp)
 1010eb8:	10800417 	ldw	r2,16(r2)
 1010ebc:	1005003a 	cmpeq	r2,r2,zero
 1010ec0:	1000151e 	bne	r2,zero,1010f18 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 1010ec4:	e0bffd17 	ldw	r2,-12(fp)
 1010ec8:	10800117 	ldw	r2,4(r2)
 1010ecc:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 1010ed0:	e0bffc17 	ldw	r2,-16(fp)
 1010ed4:	10c00017 	ldw	r3,0(r2)
 1010ed8:	e0bffd17 	ldw	r2,-12(fp)
 1010edc:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 1010ee0:	e0bffd17 	ldw	r2,-12(fp)
 1010ee4:	10800417 	ldw	r2,16(r2)
 1010ee8:	10ffffc4 	addi	r3,r2,-1
 1010eec:	e0bffd17 	ldw	r2,-12(fp)
 1010ef0:	10c00415 	stw	r3,16(r2)
 1010ef4:	e0bffb17 	ldw	r2,-20(fp)
 1010ef8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010efc:	e0bff917 	ldw	r2,-28(fp)
 1010f00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 1010f04:	e0bffe17 	ldw	r2,-8(fp)
 1010f08:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 1010f0c:	e0bffc17 	ldw	r2,-16(fp)
 1010f10:	e0bfff15 	stw	r2,-4(fp)
 1010f14:	00000806 	br	1010f38 <OSMemGet+0xf0>
 1010f18:	e0bffb17 	ldw	r2,-20(fp)
 1010f1c:	e0bff815 	stw	r2,-32(fp)
 1010f20:	e0bff817 	ldw	r2,-32(fp)
 1010f24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 1010f28:	e0fffe17 	ldw	r3,-8(fp)
 1010f2c:	00801744 	movi	r2,93
 1010f30:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 1010f34:	e03fff15 	stw	zero,-4(fp)
 1010f38:	e0bfff17 	ldw	r2,-4(fp)
}
 1010f3c:	e037883a 	mov	sp,fp
 1010f40:	df000017 	ldw	fp,0(sp)
 1010f44:	dec00104 	addi	sp,sp,4
 1010f48:	f800283a 	ret

01010f4c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1010f4c:	defff604 	addi	sp,sp,-40
 1010f50:	dfc00915 	stw	ra,36(sp)
 1010f54:	df000815 	stw	fp,32(sp)
 1010f58:	df000804 	addi	fp,sp,32
 1010f5c:	e13ffc15 	stw	r4,-16(fp)
 1010f60:	e17ffd15 	stw	r5,-12(fp)
 1010f64:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1010f68:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1010f6c:	e0bffe17 	ldw	r2,-8(fp)
 1010f70:	1004c03a 	cmpne	r2,r2,zero
 1010f74:	1000021e 	bne	r2,zero,1010f80 <OSMemNameGet+0x34>
        return (0);
 1010f78:	e03fff15 	stw	zero,-4(fp)
 1010f7c:	00003006 	br	1011040 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1010f80:	e0bffc17 	ldw	r2,-16(fp)
 1010f84:	1004c03a 	cmpne	r2,r2,zero
 1010f88:	1000051e 	bne	r2,zero,1010fa0 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1010f8c:	e0fffe17 	ldw	r3,-8(fp)
 1010f90:	00801804 	movi	r2,96
 1010f94:	18800005 	stb	r2,0(r3)
        return (0);
 1010f98:	e03fff15 	stw	zero,-4(fp)
 1010f9c:	00002806 	br	1011040 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 1010fa0:	e0bffd17 	ldw	r2,-12(fp)
 1010fa4:	1004c03a 	cmpne	r2,r2,zero
 1010fa8:	1000051e 	bne	r2,zero,1010fc0 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 1010fac:	e0fffe17 	ldw	r3,-8(fp)
 1010fb0:	00800304 	movi	r2,12
 1010fb4:	18800005 	stb	r2,0(r3)
        return (0);
 1010fb8:	e03fff15 	stw	zero,-4(fp)
 1010fbc:	00002006 	br	1011040 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1010fc0:	008040b4 	movhi	r2,258
 1010fc4:	10b3c204 	addi	r2,r2,-12536
 1010fc8:	10800003 	ldbu	r2,0(r2)
 1010fcc:	10803fcc 	andi	r2,r2,255
 1010fd0:	1005003a 	cmpeq	r2,r2,zero
 1010fd4:	1000051e 	bne	r2,zero,1010fec <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 1010fd8:	e0fffe17 	ldw	r3,-8(fp)
 1010fdc:	00800444 	movi	r2,17
 1010fe0:	18800005 	stb	r2,0(r3)
        return (0);
 1010fe4:	e03fff15 	stw	zero,-4(fp)
 1010fe8:	00001506 	br	1011040 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010fec:	0005303a 	rdctl	r2,status
 1010ff0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010ff4:	e0fff917 	ldw	r3,-28(fp)
 1010ff8:	00bfff84 	movi	r2,-2
 1010ffc:	1884703a 	and	r2,r3,r2
 1011000:	1001703a 	wrctl	status,r2
  
  return context;
 1011004:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011008:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 101100c:	e0bffc17 	ldw	r2,-16(fp)
 1011010:	11400504 	addi	r5,r2,20
 1011014:	e13ffd17 	ldw	r4,-12(fp)
 1011018:	100ded40 	call	100ded4 <OS_StrCopy>
 101101c:	e0bffb05 	stb	r2,-20(fp)
 1011020:	e0bffa17 	ldw	r2,-24(fp)
 1011024:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011028:	e0bff817 	ldw	r2,-32(fp)
 101102c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1011030:	e0bffe17 	ldw	r2,-8(fp)
 1011034:	10000005 	stb	zero,0(r2)
    return (len);
 1011038:	e0bffb03 	ldbu	r2,-20(fp)
 101103c:	e0bfff15 	stw	r2,-4(fp)
 1011040:	e0bfff17 	ldw	r2,-4(fp)
}
 1011044:	e037883a 	mov	sp,fp
 1011048:	dfc00117 	ldw	ra,4(sp)
 101104c:	df000017 	ldw	fp,0(sp)
 1011050:	dec00204 	addi	sp,sp,8
 1011054:	f800283a 	ret

01011058 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 1011058:	defff604 	addi	sp,sp,-40
 101105c:	dfc00915 	stw	ra,36(sp)
 1011060:	df000815 	stw	fp,32(sp)
 1011064:	df000804 	addi	fp,sp,32
 1011068:	e13ffd15 	stw	r4,-12(fp)
 101106c:	e17ffe15 	stw	r5,-8(fp)
 1011070:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1011074:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1011078:	e0bfff17 	ldw	r2,-4(fp)
 101107c:	1005003a 	cmpeq	r2,r2,zero
 1011080:	1000381e 	bne	r2,zero,1011164 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 1011084:	e0bffd17 	ldw	r2,-12(fp)
 1011088:	1004c03a 	cmpne	r2,r2,zero
 101108c:	1000041e 	bne	r2,zero,10110a0 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 1011090:	e0ffff17 	ldw	r3,-4(fp)
 1011094:	00801804 	movi	r2,96
 1011098:	18800005 	stb	r2,0(r3)
        return;
 101109c:	00003106 	br	1011164 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 10110a0:	e0bffe17 	ldw	r2,-8(fp)
 10110a4:	1004c03a 	cmpne	r2,r2,zero
 10110a8:	1000041e 	bne	r2,zero,10110bc <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 10110ac:	e0ffff17 	ldw	r3,-4(fp)
 10110b0:	00800304 	movi	r2,12
 10110b4:	18800005 	stb	r2,0(r3)
        return;
 10110b8:	00002a06 	br	1011164 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 10110bc:	008040b4 	movhi	r2,258
 10110c0:	10b3c204 	addi	r2,r2,-12536
 10110c4:	10800003 	ldbu	r2,0(r2)
 10110c8:	10803fcc 	andi	r2,r2,255
 10110cc:	1005003a 	cmpeq	r2,r2,zero
 10110d0:	1000041e 	bne	r2,zero,10110e4 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 10110d4:	e0ffff17 	ldw	r3,-4(fp)
 10110d8:	00800484 	movi	r2,18
 10110dc:	18800005 	stb	r2,0(r3)
        return;
 10110e0:	00002006 	br	1011164 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10110e4:	0005303a 	rdctl	r2,status
 10110e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10110ec:	e0fffa17 	ldw	r3,-24(fp)
 10110f0:	00bfff84 	movi	r2,-2
 10110f4:	1884703a 	and	r2,r3,r2
 10110f8:	1001703a 	wrctl	status,r2
  
  return context;
 10110fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1011100:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 1011104:	e13ffe17 	ldw	r4,-8(fp)
 1011108:	100df540 	call	100df54 <OS_StrLen>
 101110c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 1011110:	e0bffc03 	ldbu	r2,-16(fp)
 1011114:	10800830 	cmpltui	r2,r2,32
 1011118:	1000081e 	bne	r2,zero,101113c <OSMemNameSet+0xe4>
 101111c:	e0bffb17 	ldw	r2,-20(fp)
 1011120:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011124:	e0bff917 	ldw	r2,-28(fp)
 1011128:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 101112c:	e0ffff17 	ldw	r3,-4(fp)
 1011130:	008018c4 	movi	r2,99
 1011134:	18800005 	stb	r2,0(r3)
        return;
 1011138:	00000a06 	br	1011164 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 101113c:	e0bffd17 	ldw	r2,-12(fp)
 1011140:	11000504 	addi	r4,r2,20
 1011144:	e17ffe17 	ldw	r5,-8(fp)
 1011148:	100ded40 	call	100ded4 <OS_StrCopy>
 101114c:	e0bffb17 	ldw	r2,-20(fp)
 1011150:	e0bff815 	stw	r2,-32(fp)
 1011154:	e0bff817 	ldw	r2,-32(fp)
 1011158:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101115c:	e0bfff17 	ldw	r2,-4(fp)
 1011160:	10000005 	stb	zero,0(r2)
}
 1011164:	e037883a 	mov	sp,fp
 1011168:	dfc00117 	ldw	ra,4(sp)
 101116c:	df000017 	ldw	fp,0(sp)
 1011170:	dec00204 	addi	sp,sp,8
 1011174:	f800283a 	ret

01011178 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 1011178:	defff804 	addi	sp,sp,-32
 101117c:	df000715 	stw	fp,28(sp)
 1011180:	df000704 	addi	fp,sp,28
 1011184:	e13ffd15 	stw	r4,-12(fp)
 1011188:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101118c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 1011190:	e0bffd17 	ldw	r2,-12(fp)
 1011194:	1004c03a 	cmpne	r2,r2,zero
 1011198:	1000031e 	bne	r2,zero,10111a8 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 101119c:	00801804 	movi	r2,96
 10111a0:	e0bfff15 	stw	r2,-4(fp)
 10111a4:	00002b06 	br	1011254 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 10111a8:	e0bffe17 	ldw	r2,-8(fp)
 10111ac:	1004c03a 	cmpne	r2,r2,zero
 10111b0:	1000031e 	bne	r2,zero,10111c0 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 10111b4:	008017c4 	movi	r2,95
 10111b8:	e0bfff15 	stw	r2,-4(fp)
 10111bc:	00002506 	br	1011254 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10111c0:	0005303a 	rdctl	r2,status
 10111c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10111c8:	e0fffb17 	ldw	r3,-20(fp)
 10111cc:	00bfff84 	movi	r2,-2
 10111d0:	1884703a 	and	r2,r3,r2
 10111d4:	1001703a 	wrctl	status,r2
  
  return context;
 10111d8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10111dc:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 10111e0:	e0bffd17 	ldw	r2,-12(fp)
 10111e4:	10c00417 	ldw	r3,16(r2)
 10111e8:	e0bffd17 	ldw	r2,-12(fp)
 10111ec:	10800317 	ldw	r2,12(r2)
 10111f0:	18800736 	bltu	r3,r2,1011210 <OSMemPut+0x98>
 10111f4:	e0bffc17 	ldw	r2,-16(fp)
 10111f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10111fc:	e0bffa17 	ldw	r2,-24(fp)
 1011200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 1011204:	00801784 	movi	r2,94
 1011208:	e0bfff15 	stw	r2,-4(fp)
 101120c:	00001106 	br	1011254 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 1011210:	e0fffe17 	ldw	r3,-8(fp)
 1011214:	e0bffd17 	ldw	r2,-12(fp)
 1011218:	10800117 	ldw	r2,4(r2)
 101121c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 1011220:	e0fffd17 	ldw	r3,-12(fp)
 1011224:	e0bffe17 	ldw	r2,-8(fp)
 1011228:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 101122c:	e0bffd17 	ldw	r2,-12(fp)
 1011230:	10800417 	ldw	r2,16(r2)
 1011234:	10c00044 	addi	r3,r2,1
 1011238:	e0bffd17 	ldw	r2,-12(fp)
 101123c:	10c00415 	stw	r3,16(r2)
 1011240:	e0bffc17 	ldw	r2,-16(fp)
 1011244:	e0bff915 	stw	r2,-28(fp)
 1011248:	e0bff917 	ldw	r2,-28(fp)
 101124c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 1011250:	e03fff15 	stw	zero,-4(fp)
 1011254:	e0bfff17 	ldw	r2,-4(fp)
}
 1011258:	e037883a 	mov	sp,fp
 101125c:	df000017 	ldw	fp,0(sp)
 1011260:	dec00104 	addi	sp,sp,4
 1011264:	f800283a 	ret

01011268 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 1011268:	defff904 	addi	sp,sp,-28
 101126c:	df000615 	stw	fp,24(sp)
 1011270:	df000604 	addi	fp,sp,24
 1011274:	e13ffd15 	stw	r4,-12(fp)
 1011278:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101127c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 1011280:	e0bffd17 	ldw	r2,-12(fp)
 1011284:	1004c03a 	cmpne	r2,r2,zero
 1011288:	1000031e 	bne	r2,zero,1011298 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 101128c:	00801804 	movi	r2,96
 1011290:	e0bfff15 	stw	r2,-4(fp)
 1011294:	00002e06 	br	1011350 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 1011298:	e0bffe17 	ldw	r2,-8(fp)
 101129c:	1004c03a 	cmpne	r2,r2,zero
 10112a0:	1000031e 	bne	r2,zero,10112b0 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 10112a4:	00801844 	movi	r2,97
 10112a8:	e0bfff15 	stw	r2,-4(fp)
 10112ac:	00002806 	br	1011350 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10112b0:	0005303a 	rdctl	r2,status
 10112b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10112b8:	e0fffb17 	ldw	r3,-20(fp)
 10112bc:	00bfff84 	movi	r2,-2
 10112c0:	1884703a 	and	r2,r3,r2
 10112c4:	1001703a 	wrctl	status,r2
  
  return context;
 10112c8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10112cc:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 10112d0:	e0bffd17 	ldw	r2,-12(fp)
 10112d4:	10c00017 	ldw	r3,0(r2)
 10112d8:	e0bffe17 	ldw	r2,-8(fp)
 10112dc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 10112e0:	e0bffd17 	ldw	r2,-12(fp)
 10112e4:	10c00117 	ldw	r3,4(r2)
 10112e8:	e0bffe17 	ldw	r2,-8(fp)
 10112ec:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 10112f0:	e0bffd17 	ldw	r2,-12(fp)
 10112f4:	10c00217 	ldw	r3,8(r2)
 10112f8:	e0bffe17 	ldw	r2,-8(fp)
 10112fc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 1011300:	e0bffd17 	ldw	r2,-12(fp)
 1011304:	10c00317 	ldw	r3,12(r2)
 1011308:	e0bffe17 	ldw	r2,-8(fp)
 101130c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 1011310:	e0bffd17 	ldw	r2,-12(fp)
 1011314:	10c00417 	ldw	r3,16(r2)
 1011318:	e0bffe17 	ldw	r2,-8(fp)
 101131c:	10c00415 	stw	r3,16(r2)
 1011320:	e0bffc17 	ldw	r2,-16(fp)
 1011324:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011328:	e0bffa17 	ldw	r2,-24(fp)
 101132c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 1011330:	e0bffe17 	ldw	r2,-8(fp)
 1011334:	10c00317 	ldw	r3,12(r2)
 1011338:	e0bffe17 	ldw	r2,-8(fp)
 101133c:	10800417 	ldw	r2,16(r2)
 1011340:	1887c83a 	sub	r3,r3,r2
 1011344:	e0bffe17 	ldw	r2,-8(fp)
 1011348:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 101134c:	e03fff15 	stw	zero,-4(fp)
 1011350:	e0bfff17 	ldw	r2,-4(fp)
}
 1011354:	e037883a 	mov	sp,fp
 1011358:	df000017 	ldw	fp,0(sp)
 101135c:	dec00104 	addi	sp,sp,4
 1011360:	f800283a 	ret

01011364 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 1011364:	defffc04 	addi	sp,sp,-16
 1011368:	dfc00315 	stw	ra,12(sp)
 101136c:	df000215 	stw	fp,8(sp)
 1011370:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 1011374:	010040f4 	movhi	r4,259
 1011378:	212d8c04 	addi	r4,r4,-18896
 101137c:	01430c04 	movi	r5,3120
 1011380:	100dcd00 	call	100dcd0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 1011384:	008040f4 	movhi	r2,259
 1011388:	10ad8c04 	addi	r2,r2,-18896
 101138c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 1011390:	e03ffe0d 	sth	zero,-8(fp)
 1011394:	00001406 	br	10113e8 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 1011398:	e13ffe0b 	ldhu	r4,-8(fp)
 101139c:	01400d04 	movi	r5,52
 10113a0:	10020280 	call	1002028 <__mulsi3>
 10113a4:	1007883a 	mov	r3,r2
 10113a8:	008040f4 	movhi	r2,259
 10113ac:	10ad9904 	addi	r2,r2,-18844
 10113b0:	1887883a 	add	r3,r3,r2
 10113b4:	e0bfff17 	ldw	r2,-4(fp)
 10113b8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 10113bc:	e0ffff17 	ldw	r3,-4(fp)
 10113c0:	00800fc4 	movi	r2,63
 10113c4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 10113c8:	e0bfff17 	ldw	r2,-4(fp)
 10113cc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 10113d0:	e0bfff17 	ldw	r2,-4(fp)
 10113d4:	10800d04 	addi	r2,r2,52
 10113d8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 10113dc:	e0bffe0b 	ldhu	r2,-8(fp)
 10113e0:	10800044 	addi	r2,r2,1
 10113e4:	e0bffe0d 	sth	r2,-8(fp)
 10113e8:	e0bffe0b 	ldhu	r2,-8(fp)
 10113ec:	10800ef0 	cmpltui	r2,r2,59
 10113f0:	103fe91e 	bne	r2,zero,1011398 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 10113f4:	e0bfff17 	ldw	r2,-4(fp)
 10113f8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 10113fc:	e0ffff17 	ldw	r3,-4(fp)
 1011400:	00800fc4 	movi	r2,63
 1011404:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 1011408:	e0bfff17 	ldw	r2,-4(fp)
 101140c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 1011410:	00c040b4 	movhi	r3,258
 1011414:	18f3bd04 	addi	r3,r3,-12556
 1011418:	008040f4 	movhi	r2,259
 101141c:	10ad8c04 	addi	r2,r2,-18896
 1011420:	18800015 	stw	r2,0(r3)
#endif
}
 1011424:	e037883a 	mov	sp,fp
 1011428:	dfc00117 	ldw	ra,4(sp)
 101142c:	df000017 	ldw	fp,0(sp)
 1011430:	dec00204 	addi	sp,sp,8
 1011434:	f800283a 	ret

01011438 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 1011438:	defff704 	addi	sp,sp,-36
 101143c:	df000815 	stw	fp,32(sp)
 1011440:	df000804 	addi	fp,sp,32
 1011444:	e13ffd15 	stw	r4,-12(fp)
 1011448:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101144c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1011450:	e0bffe17 	ldw	r2,-8(fp)
 1011454:	1004c03a 	cmpne	r2,r2,zero
 1011458:	1000021e 	bne	r2,zero,1011464 <OSQAccept+0x2c>
        return ((void *)0);
 101145c:	e03fff15 	stw	zero,-4(fp)
 1011460:	00004506 	br	1011578 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1011464:	e0bffd17 	ldw	r2,-12(fp)
 1011468:	1004c03a 	cmpne	r2,r2,zero
 101146c:	1000051e 	bne	r2,zero,1011484 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 1011470:	e0fffe17 	ldw	r3,-8(fp)
 1011474:	00800104 	movi	r2,4
 1011478:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 101147c:	e03fff15 	stw	zero,-4(fp)
 1011480:	00003d06 	br	1011578 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1011484:	e0bffd17 	ldw	r2,-12(fp)
 1011488:	10800003 	ldbu	r2,0(r2)
 101148c:	10803fcc 	andi	r2,r2,255
 1011490:	108000a0 	cmpeqi	r2,r2,2
 1011494:	1000051e 	bne	r2,zero,10114ac <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 1011498:	e0fffe17 	ldw	r3,-8(fp)
 101149c:	00800044 	movi	r2,1
 10114a0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 10114a4:	e03fff15 	stw	zero,-4(fp)
 10114a8:	00003306 	br	1011578 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10114ac:	0005303a 	rdctl	r2,status
 10114b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10114b4:	e0fff917 	ldw	r3,-28(fp)
 10114b8:	00bfff84 	movi	r2,-2
 10114bc:	1884703a 	and	r2,r3,r2
 10114c0:	1001703a 	wrctl	status,r2
  
  return context;
 10114c4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 10114c8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 10114cc:	e0bffd17 	ldw	r2,-12(fp)
 10114d0:	10800117 	ldw	r2,4(r2)
 10114d4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 10114d8:	e0bffb17 	ldw	r2,-20(fp)
 10114dc:	1080058b 	ldhu	r2,22(r2)
 10114e0:	10bfffcc 	andi	r2,r2,65535
 10114e4:	1005003a 	cmpeq	r2,r2,zero
 10114e8:	1000191e 	bne	r2,zero,1011550 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 10114ec:	e0bffb17 	ldw	r2,-20(fp)
 10114f0:	10c00417 	ldw	r3,16(r2)
 10114f4:	18800017 	ldw	r2,0(r3)
 10114f8:	e0bffc15 	stw	r2,-16(fp)
 10114fc:	18c00104 	addi	r3,r3,4
 1011500:	e0bffb17 	ldw	r2,-20(fp)
 1011504:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1011508:	e0bffb17 	ldw	r2,-20(fp)
 101150c:	1080058b 	ldhu	r2,22(r2)
 1011510:	10bfffc4 	addi	r2,r2,-1
 1011514:	1007883a 	mov	r3,r2
 1011518:	e0bffb17 	ldw	r2,-20(fp)
 101151c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1011520:	e0bffb17 	ldw	r2,-20(fp)
 1011524:	10c00417 	ldw	r3,16(r2)
 1011528:	e0bffb17 	ldw	r2,-20(fp)
 101152c:	10800217 	ldw	r2,8(r2)
 1011530:	1880041e 	bne	r3,r2,1011544 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 1011534:	e0bffb17 	ldw	r2,-20(fp)
 1011538:	10c00117 	ldw	r3,4(r2)
 101153c:	e0bffb17 	ldw	r2,-20(fp)
 1011540:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 1011544:	e0bffe17 	ldw	r2,-8(fp)
 1011548:	10000005 	stb	zero,0(r2)
 101154c:	00000406 	br	1011560 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 1011550:	e0fffe17 	ldw	r3,-8(fp)
 1011554:	008007c4 	movi	r2,31
 1011558:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 101155c:	e03ffc15 	stw	zero,-16(fp)
 1011560:	e0bffa17 	ldw	r2,-24(fp)
 1011564:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011568:	e0bff817 	ldw	r2,-32(fp)
 101156c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 1011570:	e0bffc17 	ldw	r2,-16(fp)
 1011574:	e0bfff15 	stw	r2,-4(fp)
 1011578:	e0bfff17 	ldw	r2,-4(fp)
}
 101157c:	e037883a 	mov	sp,fp
 1011580:	df000017 	ldw	fp,0(sp)
 1011584:	dec00104 	addi	sp,sp,4
 1011588:	f800283a 	ret

0101158c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 101158c:	defff304 	addi	sp,sp,-52
 1011590:	dfc00c15 	stw	ra,48(sp)
 1011594:	df000b15 	stw	fp,44(sp)
 1011598:	df000b04 	addi	fp,sp,44
 101159c:	e13ffd15 	stw	r4,-12(fp)
 10115a0:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10115a4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 10115a8:	008040b4 	movhi	r2,258
 10115ac:	10b3c204 	addi	r2,r2,-12536
 10115b0:	10800003 	ldbu	r2,0(r2)
 10115b4:	10803fcc 	andi	r2,r2,255
 10115b8:	1005003a 	cmpeq	r2,r2,zero
 10115bc:	1000021e 	bne	r2,zero,10115c8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 10115c0:	e03fff15 	stw	zero,-4(fp)
 10115c4:	00007006 	br	1011788 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10115c8:	0005303a 	rdctl	r2,status
 10115cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10115d0:	e0fff917 	ldw	r3,-28(fp)
 10115d4:	00bfff84 	movi	r2,-2
 10115d8:	1884703a 	and	r2,r3,r2
 10115dc:	1001703a 	wrctl	status,r2
  
  return context;
 10115e0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 10115e4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 10115e8:	008040b4 	movhi	r2,258
 10115ec:	10b3c104 	addi	r2,r2,-12540
 10115f0:	10800017 	ldw	r2,0(r2)
 10115f4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 10115f8:	008040b4 	movhi	r2,258
 10115fc:	10b3c104 	addi	r2,r2,-12540
 1011600:	10800017 	ldw	r2,0(r2)
 1011604:	1005003a 	cmpeq	r2,r2,zero
 1011608:	1000081e 	bne	r2,zero,101162c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 101160c:	008040b4 	movhi	r2,258
 1011610:	10b3c104 	addi	r2,r2,-12540
 1011614:	10800017 	ldw	r2,0(r2)
 1011618:	10800117 	ldw	r2,4(r2)
 101161c:	1007883a 	mov	r3,r2
 1011620:	008040b4 	movhi	r2,258
 1011624:	10b3c104 	addi	r2,r2,-12540
 1011628:	10c00015 	stw	r3,0(r2)
 101162c:	e0bffa17 	ldw	r2,-24(fp)
 1011630:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011634:	e0bff817 	ldw	r2,-32(fp)
 1011638:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 101163c:	e0bffc17 	ldw	r2,-16(fp)
 1011640:	1005003a 	cmpeq	r2,r2,zero
 1011644:	10004e1e 	bne	r2,zero,1011780 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011648:	0005303a 	rdctl	r2,status
 101164c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011650:	e0fff717 	ldw	r3,-36(fp)
 1011654:	00bfff84 	movi	r2,-2
 1011658:	1884703a 	and	r2,r3,r2
 101165c:	1001703a 	wrctl	status,r2
  
  return context;
 1011660:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 1011664:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 1011668:	008040b4 	movhi	r2,258
 101166c:	10b3bf04 	addi	r2,r2,-12548
 1011670:	10800017 	ldw	r2,0(r2)
 1011674:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 1011678:	e0bffb17 	ldw	r2,-20(fp)
 101167c:	1005003a 	cmpeq	r2,r2,zero
 1011680:	1000311e 	bne	r2,zero,1011748 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 1011684:	008040b4 	movhi	r2,258
 1011688:	10b3bf04 	addi	r2,r2,-12548
 101168c:	10800017 	ldw	r2,0(r2)
 1011690:	10c00017 	ldw	r3,0(r2)
 1011694:	008040b4 	movhi	r2,258
 1011698:	10b3bf04 	addi	r2,r2,-12548
 101169c:	10c00015 	stw	r3,0(r2)
 10116a0:	e0bffa17 	ldw	r2,-24(fp)
 10116a4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10116a8:	e0bff617 	ldw	r2,-40(fp)
 10116ac:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 10116b0:	e0fffb17 	ldw	r3,-20(fp)
 10116b4:	e0bffd17 	ldw	r2,-12(fp)
 10116b8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 10116bc:	e0bffe0b 	ldhu	r2,-8(fp)
 10116c0:	1085883a 	add	r2,r2,r2
 10116c4:	1085883a 	add	r2,r2,r2
 10116c8:	1007883a 	mov	r3,r2
 10116cc:	e0bffd17 	ldw	r2,-12(fp)
 10116d0:	1887883a 	add	r3,r3,r2
 10116d4:	e0bffb17 	ldw	r2,-20(fp)
 10116d8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 10116dc:	e0fffb17 	ldw	r3,-20(fp)
 10116e0:	e0bffd17 	ldw	r2,-12(fp)
 10116e4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 10116e8:	e0fffb17 	ldw	r3,-20(fp)
 10116ec:	e0bffd17 	ldw	r2,-12(fp)
 10116f0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 10116f4:	e0fffb17 	ldw	r3,-20(fp)
 10116f8:	e0bffe0b 	ldhu	r2,-8(fp)
 10116fc:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 1011700:	e0bffb17 	ldw	r2,-20(fp)
 1011704:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 1011708:	e0fffc17 	ldw	r3,-16(fp)
 101170c:	00800084 	movi	r2,2
 1011710:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 1011714:	e0bffc17 	ldw	r2,-16(fp)
 1011718:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 101171c:	e0fffc17 	ldw	r3,-16(fp)
 1011720:	e0bffb17 	ldw	r2,-20(fp)
 1011724:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 1011728:	e0fffc17 	ldw	r3,-16(fp)
 101172c:	00800fc4 	movi	r2,63
 1011730:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 1011734:	e0bffc17 	ldw	r2,-16(fp)
 1011738:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 101173c:	e13ffc17 	ldw	r4,-16(fp)
 1011740:	100d9040 	call	100d904 <OS_EventWaitListInit>
 1011744:	00000e06 	br	1011780 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 1011748:	008040b4 	movhi	r2,258
 101174c:	10b3c104 	addi	r2,r2,-12540
 1011750:	10c00017 	ldw	r3,0(r2)
 1011754:	e0bffc17 	ldw	r2,-16(fp)
 1011758:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 101175c:	00c040b4 	movhi	r3,258
 1011760:	18f3c104 	addi	r3,r3,-12540
 1011764:	e0bffc17 	ldw	r2,-16(fp)
 1011768:	18800015 	stw	r2,0(r3)
 101176c:	e0bffa17 	ldw	r2,-24(fp)
 1011770:	e0bff515 	stw	r2,-44(fp)
 1011774:	e0bff517 	ldw	r2,-44(fp)
 1011778:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 101177c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 1011780:	e0bffc17 	ldw	r2,-16(fp)
 1011784:	e0bfff15 	stw	r2,-4(fp)
 1011788:	e0bfff17 	ldw	r2,-4(fp)
}
 101178c:	e037883a 	mov	sp,fp
 1011790:	dfc00117 	ldw	ra,4(sp)
 1011794:	df000017 	ldw	fp,0(sp)
 1011798:	dec00204 	addi	sp,sp,8
 101179c:	f800283a 	ret

010117a0 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10117a0:	defff004 	addi	sp,sp,-64
 10117a4:	dfc00f15 	stw	ra,60(sp)
 10117a8:	df000e15 	stw	fp,56(sp)
 10117ac:	df000e04 	addi	fp,sp,56
 10117b0:	e13ffb15 	stw	r4,-20(fp)
 10117b4:	e1bffd15 	stw	r6,-12(fp)
 10117b8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10117bc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 10117c0:	e0bffd17 	ldw	r2,-12(fp)
 10117c4:	1004c03a 	cmpne	r2,r2,zero
 10117c8:	1000031e 	bne	r2,zero,10117d8 <OSQDel+0x38>
        return (pevent);
 10117cc:	e0bffb17 	ldw	r2,-20(fp)
 10117d0:	e0bfff15 	stw	r2,-4(fp)
 10117d4:	0000ac06 	br	1011a88 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 10117d8:	e0bffb17 	ldw	r2,-20(fp)
 10117dc:	1004c03a 	cmpne	r2,r2,zero
 10117e0:	1000061e 	bne	r2,zero,10117fc <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 10117e4:	e0fffd17 	ldw	r3,-12(fp)
 10117e8:	00800104 	movi	r2,4
 10117ec:	18800005 	stb	r2,0(r3)
        return (pevent);
 10117f0:	e0fffb17 	ldw	r3,-20(fp)
 10117f4:	e0ffff15 	stw	r3,-4(fp)
 10117f8:	0000a306 	br	1011a88 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 10117fc:	e0bffb17 	ldw	r2,-20(fp)
 1011800:	10800003 	ldbu	r2,0(r2)
 1011804:	10803fcc 	andi	r2,r2,255
 1011808:	108000a0 	cmpeqi	r2,r2,2
 101180c:	1000061e 	bne	r2,zero,1011828 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1011810:	e0fffd17 	ldw	r3,-12(fp)
 1011814:	00800044 	movi	r2,1
 1011818:	18800005 	stb	r2,0(r3)
        return (pevent);
 101181c:	e0bffb17 	ldw	r2,-20(fp)
 1011820:	e0bfff15 	stw	r2,-4(fp)
 1011824:	00009806 	br	1011a88 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1011828:	008040b4 	movhi	r2,258
 101182c:	10b3c204 	addi	r2,r2,-12536
 1011830:	10800003 	ldbu	r2,0(r2)
 1011834:	10803fcc 	andi	r2,r2,255
 1011838:	1005003a 	cmpeq	r2,r2,zero
 101183c:	1000061e 	bne	r2,zero,1011858 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 1011840:	e0fffd17 	ldw	r3,-12(fp)
 1011844:	008003c4 	movi	r2,15
 1011848:	18800005 	stb	r2,0(r3)
        return (pevent);
 101184c:	e0fffb17 	ldw	r3,-20(fp)
 1011850:	e0ffff15 	stw	r3,-4(fp)
 1011854:	00008c06 	br	1011a88 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011858:	0005303a 	rdctl	r2,status
 101185c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011860:	e0fff617 	ldw	r3,-40(fp)
 1011864:	00bfff84 	movi	r2,-2
 1011868:	1884703a 	and	r2,r3,r2
 101186c:	1001703a 	wrctl	status,r2
  
  return context;
 1011870:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 1011874:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 1011878:	e0bffb17 	ldw	r2,-20(fp)
 101187c:	10800283 	ldbu	r2,10(r2)
 1011880:	10803fcc 	andi	r2,r2,255
 1011884:	1005003a 	cmpeq	r2,r2,zero
 1011888:	1000031e 	bne	r2,zero,1011898 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 101188c:	00800044 	movi	r2,1
 1011890:	e0bffa05 	stb	r2,-24(fp)
 1011894:	00000106 	br	101189c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1011898:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 101189c:	e0bffc03 	ldbu	r2,-16(fp)
 10118a0:	e0bffe15 	stw	r2,-8(fp)
 10118a4:	e0fffe17 	ldw	r3,-8(fp)
 10118a8:	1805003a 	cmpeq	r2,r3,zero
 10118ac:	1000041e 	bne	r2,zero,10118c0 <OSQDel+0x120>
 10118b0:	e0fffe17 	ldw	r3,-8(fp)
 10118b4:	18800060 	cmpeqi	r2,r3,1
 10118b8:	1000391e 	bne	r2,zero,10119a0 <OSQDel+0x200>
 10118bc:	00006706 	br	1011a5c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 10118c0:	e0bffa03 	ldbu	r2,-24(fp)
 10118c4:	1004c03a 	cmpne	r2,r2,zero
 10118c8:	1000261e 	bne	r2,zero,1011964 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 10118cc:	e0fffb17 	ldw	r3,-20(fp)
 10118d0:	00800fc4 	movi	r2,63
 10118d4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 10118d8:	e0bffb17 	ldw	r2,-20(fp)
 10118dc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 10118e0:	e0bffb17 	ldw	r2,-20(fp)
 10118e4:	10800117 	ldw	r2,4(r2)
 10118e8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 10118ec:	008040b4 	movhi	r2,258
 10118f0:	10b3bf04 	addi	r2,r2,-12548
 10118f4:	10c00017 	ldw	r3,0(r2)
 10118f8:	e0bff817 	ldw	r2,-32(fp)
 10118fc:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 1011900:	00c040b4 	movhi	r3,258
 1011904:	18f3bf04 	addi	r3,r3,-12548
 1011908:	e0bff817 	ldw	r2,-32(fp)
 101190c:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1011910:	e0bffb17 	ldw	r2,-20(fp)
 1011914:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 1011918:	008040b4 	movhi	r2,258
 101191c:	10b3c104 	addi	r2,r2,-12540
 1011920:	10c00017 	ldw	r3,0(r2)
 1011924:	e0bffb17 	ldw	r2,-20(fp)
 1011928:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 101192c:	e0bffb17 	ldw	r2,-20(fp)
 1011930:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1011934:	00c040b4 	movhi	r3,258
 1011938:	18f3c104 	addi	r3,r3,-12540
 101193c:	e0bffb17 	ldw	r2,-20(fp)
 1011940:	18800015 	stw	r2,0(r3)
 1011944:	e0bff717 	ldw	r2,-36(fp)
 1011948:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101194c:	e0bff517 	ldw	r2,-44(fp)
 1011950:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1011954:	e0bffd17 	ldw	r2,-12(fp)
 1011958:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 101195c:	e03ff915 	stw	zero,-28(fp)
 1011960:	00004706 	br	1011a80 <OSQDel+0x2e0>
 1011964:	e0bff717 	ldw	r2,-36(fp)
 1011968:	e0bff415 	stw	r2,-48(fp)
 101196c:	e0bff417 	ldw	r2,-48(fp)
 1011970:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1011974:	e0fffd17 	ldw	r3,-12(fp)
 1011978:	00801244 	movi	r2,73
 101197c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1011980:	e0bffb17 	ldw	r2,-20(fp)
 1011984:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1011988:	00003d06 	br	1011a80 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 101198c:	e13ffb17 	ldw	r4,-20(fp)
 1011990:	000b883a 	mov	r5,zero
 1011994:	01800104 	movi	r6,4
 1011998:	000f883a 	mov	r7,zero
 101199c:	100d3500 	call	100d350 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 10119a0:	e0bffb17 	ldw	r2,-20(fp)
 10119a4:	10800283 	ldbu	r2,10(r2)
 10119a8:	10803fcc 	andi	r2,r2,255
 10119ac:	1004c03a 	cmpne	r2,r2,zero
 10119b0:	103ff61e 	bne	r2,zero,101198c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 10119b4:	e0fffb17 	ldw	r3,-20(fp)
 10119b8:	00800fc4 	movi	r2,63
 10119bc:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 10119c0:	e0bffb17 	ldw	r2,-20(fp)
 10119c4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 10119c8:	e0bffb17 	ldw	r2,-20(fp)
 10119cc:	10800117 	ldw	r2,4(r2)
 10119d0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 10119d4:	008040b4 	movhi	r2,258
 10119d8:	10b3bf04 	addi	r2,r2,-12548
 10119dc:	10c00017 	ldw	r3,0(r2)
 10119e0:	e0bff817 	ldw	r2,-32(fp)
 10119e4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 10119e8:	00c040b4 	movhi	r3,258
 10119ec:	18f3bf04 	addi	r3,r3,-12548
 10119f0:	e0bff817 	ldw	r2,-32(fp)
 10119f4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10119f8:	e0bffb17 	ldw	r2,-20(fp)
 10119fc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1011a00:	008040b4 	movhi	r2,258
 1011a04:	10b3c104 	addi	r2,r2,-12540
 1011a08:	10c00017 	ldw	r3,0(r2)
 1011a0c:	e0bffb17 	ldw	r2,-20(fp)
 1011a10:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1011a14:	e0bffb17 	ldw	r2,-20(fp)
 1011a18:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1011a1c:	00c040b4 	movhi	r3,258
 1011a20:	18f3c104 	addi	r3,r3,-12540
 1011a24:	e0bffb17 	ldw	r2,-20(fp)
 1011a28:	18800015 	stw	r2,0(r3)
 1011a2c:	e0bff717 	ldw	r2,-36(fp)
 1011a30:	e0bff315 	stw	r2,-52(fp)
 1011a34:	e0bff317 	ldw	r2,-52(fp)
 1011a38:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1011a3c:	e0bffa03 	ldbu	r2,-24(fp)
 1011a40:	10800058 	cmpnei	r2,r2,1
 1011a44:	1000011e 	bne	r2,zero,1011a4c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1011a48:	100dd900 	call	100dd90 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1011a4c:	e0bffd17 	ldw	r2,-12(fp)
 1011a50:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 1011a54:	e03ff915 	stw	zero,-28(fp)
             break;
 1011a58:	00000906 	br	1011a80 <OSQDel+0x2e0>
 1011a5c:	e0bff717 	ldw	r2,-36(fp)
 1011a60:	e0bff215 	stw	r2,-56(fp)
 1011a64:	e0bff217 	ldw	r2,-56(fp)
 1011a68:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1011a6c:	e0fffd17 	ldw	r3,-12(fp)
 1011a70:	008001c4 	movi	r2,7
 1011a74:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1011a78:	e0bffb17 	ldw	r2,-20(fp)
 1011a7c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1011a80:	e0bff917 	ldw	r2,-28(fp)
 1011a84:	e0bfff15 	stw	r2,-4(fp)
 1011a88:	e0bfff17 	ldw	r2,-4(fp)
}
 1011a8c:	e037883a 	mov	sp,fp
 1011a90:	dfc00117 	ldw	ra,4(sp)
 1011a94:	df000017 	ldw	fp,0(sp)
 1011a98:	dec00204 	addi	sp,sp,8
 1011a9c:	f800283a 	ret

01011aa0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 1011aa0:	defff904 	addi	sp,sp,-28
 1011aa4:	df000615 	stw	fp,24(sp)
 1011aa8:	df000604 	addi	fp,sp,24
 1011aac:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1011ab0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1011ab4:	e0bffe17 	ldw	r2,-8(fp)
 1011ab8:	1004c03a 	cmpne	r2,r2,zero
 1011abc:	1000031e 	bne	r2,zero,1011acc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 1011ac0:	00800104 	movi	r2,4
 1011ac4:	e0bfff15 	stw	r2,-4(fp)
 1011ac8:	00002206 	br	1011b54 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1011acc:	e0bffe17 	ldw	r2,-8(fp)
 1011ad0:	10800003 	ldbu	r2,0(r2)
 1011ad4:	10803fcc 	andi	r2,r2,255
 1011ad8:	108000a0 	cmpeqi	r2,r2,2
 1011adc:	1000031e 	bne	r2,zero,1011aec <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 1011ae0:	00800044 	movi	r2,1
 1011ae4:	e0bfff15 	stw	r2,-4(fp)
 1011ae8:	00001a06 	br	1011b54 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011aec:	0005303a 	rdctl	r2,status
 1011af0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011af4:	e0fffb17 	ldw	r3,-20(fp)
 1011af8:	00bfff84 	movi	r2,-2
 1011afc:	1884703a 	and	r2,r3,r2
 1011b00:	1001703a 	wrctl	status,r2
  
  return context;
 1011b04:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1011b08:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 1011b0c:	e0bffe17 	ldw	r2,-8(fp)
 1011b10:	10800117 	ldw	r2,4(r2)
 1011b14:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 1011b18:	e0bffd17 	ldw	r2,-12(fp)
 1011b1c:	10c00117 	ldw	r3,4(r2)
 1011b20:	e0bffd17 	ldw	r2,-12(fp)
 1011b24:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 1011b28:	e0bffd17 	ldw	r2,-12(fp)
 1011b2c:	10c00117 	ldw	r3,4(r2)
 1011b30:	e0bffd17 	ldw	r2,-12(fp)
 1011b34:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 1011b38:	e0bffd17 	ldw	r2,-12(fp)
 1011b3c:	1000058d 	sth	zero,22(r2)
 1011b40:	e0bffc17 	ldw	r2,-16(fp)
 1011b44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011b48:	e0bffa17 	ldw	r2,-24(fp)
 1011b4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1011b50:	e03fff15 	stw	zero,-4(fp)
 1011b54:	e0bfff17 	ldw	r2,-4(fp)
}
 1011b58:	e037883a 	mov	sp,fp
 1011b5c:	df000017 	ldw	fp,0(sp)
 1011b60:	dec00104 	addi	sp,sp,4
 1011b64:	f800283a 	ret

01011b68 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1011b68:	defff104 	addi	sp,sp,-60
 1011b6c:	dfc00e15 	stw	ra,56(sp)
 1011b70:	df000d15 	stw	fp,52(sp)
 1011b74:	df000d04 	addi	fp,sp,52
 1011b78:	e13ffb15 	stw	r4,-20(fp)
 1011b7c:	e1bffd15 	stw	r6,-12(fp)
 1011b80:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1011b84:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 1011b88:	e0bffd17 	ldw	r2,-12(fp)
 1011b8c:	1004c03a 	cmpne	r2,r2,zero
 1011b90:	1000021e 	bne	r2,zero,1011b9c <OSQPend+0x34>
        return ((void *)0);
 1011b94:	e03fff15 	stw	zero,-4(fp)
 1011b98:	0000b506 	br	1011e70 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 1011b9c:	e0bffb17 	ldw	r2,-20(fp)
 1011ba0:	1004c03a 	cmpne	r2,r2,zero
 1011ba4:	1000051e 	bne	r2,zero,1011bbc <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1011ba8:	e0fffd17 	ldw	r3,-12(fp)
 1011bac:	00800104 	movi	r2,4
 1011bb0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011bb4:	e03fff15 	stw	zero,-4(fp)
 1011bb8:	0000ad06 	br	1011e70 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 1011bbc:	e0bffb17 	ldw	r2,-20(fp)
 1011bc0:	10800003 	ldbu	r2,0(r2)
 1011bc4:	10803fcc 	andi	r2,r2,255
 1011bc8:	108000a0 	cmpeqi	r2,r2,2
 1011bcc:	1000051e 	bne	r2,zero,1011be4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1011bd0:	e0fffd17 	ldw	r3,-12(fp)
 1011bd4:	00800044 	movi	r2,1
 1011bd8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011bdc:	e03fff15 	stw	zero,-4(fp)
 1011be0:	0000a306 	br	1011e70 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 1011be4:	008040b4 	movhi	r2,258
 1011be8:	10b3c204 	addi	r2,r2,-12536
 1011bec:	10800003 	ldbu	r2,0(r2)
 1011bf0:	10803fcc 	andi	r2,r2,255
 1011bf4:	1005003a 	cmpeq	r2,r2,zero
 1011bf8:	1000051e 	bne	r2,zero,1011c10 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 1011bfc:	e0fffd17 	ldw	r3,-12(fp)
 1011c00:	00800084 	movi	r2,2
 1011c04:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011c08:	e03fff15 	stw	zero,-4(fp)
 1011c0c:	00009806 	br	1011e70 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 1011c10:	008040b4 	movhi	r2,258
 1011c14:	10b3b104 	addi	r2,r2,-12604
 1011c18:	10800003 	ldbu	r2,0(r2)
 1011c1c:	10803fcc 	andi	r2,r2,255
 1011c20:	1005003a 	cmpeq	r2,r2,zero
 1011c24:	1000051e 	bne	r2,zero,1011c3c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 1011c28:	e0fffd17 	ldw	r3,-12(fp)
 1011c2c:	00800344 	movi	r2,13
 1011c30:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 1011c34:	e03fff15 	stw	zero,-4(fp)
 1011c38:	00008d06 	br	1011e70 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011c3c:	0005303a 	rdctl	r2,status
 1011c40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011c44:	e0fff717 	ldw	r3,-36(fp)
 1011c48:	00bfff84 	movi	r2,-2
 1011c4c:	1884703a 	and	r2,r3,r2
 1011c50:	1001703a 	wrctl	status,r2
  
  return context;
 1011c54:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1011c58:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 1011c5c:	e0bffb17 	ldw	r2,-20(fp)
 1011c60:	10800117 	ldw	r2,4(r2)
 1011c64:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 1011c68:	e0bff917 	ldw	r2,-28(fp)
 1011c6c:	1080058b 	ldhu	r2,22(r2)
 1011c70:	10bfffcc 	andi	r2,r2,65535
 1011c74:	1005003a 	cmpeq	r2,r2,zero
 1011c78:	10001f1e 	bne	r2,zero,1011cf8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 1011c7c:	e0bff917 	ldw	r2,-28(fp)
 1011c80:	10c00417 	ldw	r3,16(r2)
 1011c84:	18800017 	ldw	r2,0(r3)
 1011c88:	e0bffa15 	stw	r2,-24(fp)
 1011c8c:	18c00104 	addi	r3,r3,4
 1011c90:	e0bff917 	ldw	r2,-28(fp)
 1011c94:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 1011c98:	e0bff917 	ldw	r2,-28(fp)
 1011c9c:	1080058b 	ldhu	r2,22(r2)
 1011ca0:	10bfffc4 	addi	r2,r2,-1
 1011ca4:	1007883a 	mov	r3,r2
 1011ca8:	e0bff917 	ldw	r2,-28(fp)
 1011cac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 1011cb0:	e0bff917 	ldw	r2,-28(fp)
 1011cb4:	10c00417 	ldw	r3,16(r2)
 1011cb8:	e0bff917 	ldw	r2,-28(fp)
 1011cbc:	10800217 	ldw	r2,8(r2)
 1011cc0:	1880041e 	bne	r3,r2,1011cd4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 1011cc4:	e0bff917 	ldw	r2,-28(fp)
 1011cc8:	10c00117 	ldw	r3,4(r2)
 1011ccc:	e0bff917 	ldw	r2,-28(fp)
 1011cd0:	10c00415 	stw	r3,16(r2)
 1011cd4:	e0bff817 	ldw	r2,-32(fp)
 1011cd8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011cdc:	e0bff617 	ldw	r2,-40(fp)
 1011ce0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1011ce4:	e0bffd17 	ldw	r2,-12(fp)
 1011ce8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 1011cec:	e0bffa17 	ldw	r2,-24(fp)
 1011cf0:	e0bfff15 	stw	r2,-4(fp)
 1011cf4:	00005e06 	br	1011e70 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 1011cf8:	008040b4 	movhi	r2,258
 1011cfc:	10b3c304 	addi	r2,r2,-12532
 1011d00:	10c00017 	ldw	r3,0(r2)
 1011d04:	008040b4 	movhi	r2,258
 1011d08:	10b3c304 	addi	r2,r2,-12532
 1011d0c:	10800017 	ldw	r2,0(r2)
 1011d10:	10800c03 	ldbu	r2,48(r2)
 1011d14:	10800114 	ori	r2,r2,4
 1011d18:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1011d1c:	008040b4 	movhi	r2,258
 1011d20:	10b3c304 	addi	r2,r2,-12532
 1011d24:	10800017 	ldw	r2,0(r2)
 1011d28:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 1011d2c:	008040b4 	movhi	r2,258
 1011d30:	10b3c304 	addi	r2,r2,-12532
 1011d34:	10c00017 	ldw	r3,0(r2)
 1011d38:	e0bffc0b 	ldhu	r2,-16(fp)
 1011d3c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 1011d40:	e13ffb17 	ldw	r4,-20(fp)
 1011d44:	100d4e40 	call	100d4e4 <OS_EventTaskWait>
 1011d48:	e0bff817 	ldw	r2,-32(fp)
 1011d4c:	e0bff515 	stw	r2,-44(fp)
 1011d50:	e0bff517 	ldw	r2,-44(fp)
 1011d54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 1011d58:	100dd900 	call	100dd90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011d5c:	0005303a 	rdctl	r2,status
 1011d60:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011d64:	e0fff417 	ldw	r3,-48(fp)
 1011d68:	00bfff84 	movi	r2,-2
 1011d6c:	1884703a 	and	r2,r3,r2
 1011d70:	1001703a 	wrctl	status,r2
  
  return context;
 1011d74:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 1011d78:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1011d7c:	008040b4 	movhi	r2,258
 1011d80:	10b3c304 	addi	r2,r2,-12532
 1011d84:	10800017 	ldw	r2,0(r2)
 1011d88:	10800c43 	ldbu	r2,49(r2)
 1011d8c:	10803fcc 	andi	r2,r2,255
 1011d90:	e0bffe15 	stw	r2,-8(fp)
 1011d94:	e0fffe17 	ldw	r3,-8(fp)
 1011d98:	1805003a 	cmpeq	r2,r3,zero
 1011d9c:	1000041e 	bne	r2,zero,1011db0 <OSQPend+0x248>
 1011da0:	e0fffe17 	ldw	r3,-8(fp)
 1011da4:	188000a0 	cmpeqi	r2,r3,2
 1011da8:	1000091e 	bne	r2,zero,1011dd0 <OSQPend+0x268>
 1011dac:	00000d06 	br	1011de4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 1011db0:	008040b4 	movhi	r2,258
 1011db4:	10b3c304 	addi	r2,r2,-12532
 1011db8:	10800017 	ldw	r2,0(r2)
 1011dbc:	10800917 	ldw	r2,36(r2)
 1011dc0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 1011dc4:	e0bffd17 	ldw	r2,-12(fp)
 1011dc8:	10000005 	stb	zero,0(r2)
             break;
 1011dcc:	00000e06 	br	1011e08 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 1011dd0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1011dd4:	e0fffd17 	ldw	r3,-12(fp)
 1011dd8:	00800384 	movi	r2,14
 1011ddc:	18800005 	stb	r2,0(r3)
             break;
 1011de0:	00000906 	br	1011e08 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 1011de4:	008040b4 	movhi	r2,258
 1011de8:	10b3c304 	addi	r2,r2,-12532
 1011dec:	11000017 	ldw	r4,0(r2)
 1011df0:	e17ffb17 	ldw	r5,-20(fp)
 1011df4:	100d7480 	call	100d748 <OS_EventTaskRemove>
             pmsg = (void *)0;
 1011df8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1011dfc:	e0fffd17 	ldw	r3,-12(fp)
 1011e00:	00800284 	movi	r2,10
 1011e04:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1011e08:	008040b4 	movhi	r2,258
 1011e0c:	10b3c304 	addi	r2,r2,-12532
 1011e10:	10800017 	ldw	r2,0(r2)
 1011e14:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1011e18:	008040b4 	movhi	r2,258
 1011e1c:	10b3c304 	addi	r2,r2,-12532
 1011e20:	10800017 	ldw	r2,0(r2)
 1011e24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1011e28:	008040b4 	movhi	r2,258
 1011e2c:	10b3c304 	addi	r2,r2,-12532
 1011e30:	10800017 	ldw	r2,0(r2)
 1011e34:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1011e38:	008040b4 	movhi	r2,258
 1011e3c:	10b3c304 	addi	r2,r2,-12532
 1011e40:	10800017 	ldw	r2,0(r2)
 1011e44:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 1011e48:	008040b4 	movhi	r2,258
 1011e4c:	10b3c304 	addi	r2,r2,-12532
 1011e50:	10800017 	ldw	r2,0(r2)
 1011e54:	10000915 	stw	zero,36(r2)
 1011e58:	e0bff817 	ldw	r2,-32(fp)
 1011e5c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011e60:	e0bff317 	ldw	r2,-52(fp)
 1011e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 1011e68:	e0bffa17 	ldw	r2,-24(fp)
 1011e6c:	e0bfff15 	stw	r2,-4(fp)
 1011e70:	e0bfff17 	ldw	r2,-4(fp)
}
 1011e74:	e037883a 	mov	sp,fp
 1011e78:	dfc00117 	ldw	ra,4(sp)
 1011e7c:	df000017 	ldw	fp,0(sp)
 1011e80:	dec00204 	addi	sp,sp,8
 1011e84:	f800283a 	ret

01011e88 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1011e88:	defff504 	addi	sp,sp,-44
 1011e8c:	dfc00a15 	stw	ra,40(sp)
 1011e90:	df000915 	stw	fp,36(sp)
 1011e94:	df000904 	addi	fp,sp,36
 1011e98:	e13ffc15 	stw	r4,-16(fp)
 1011e9c:	e1bffe15 	stw	r6,-8(fp)
 1011ea0:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1011ea4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1011ea8:	e0bffe17 	ldw	r2,-8(fp)
 1011eac:	1004c03a 	cmpne	r2,r2,zero
 1011eb0:	1000021e 	bne	r2,zero,1011ebc <OSQPendAbort+0x34>
        return (0);
 1011eb4:	e03fff15 	stw	zero,-4(fp)
 1011eb8:	00004c06 	br	1011fec <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1011ebc:	e0bffc17 	ldw	r2,-16(fp)
 1011ec0:	1004c03a 	cmpne	r2,r2,zero
 1011ec4:	1000051e 	bne	r2,zero,1011edc <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1011ec8:	e0fffe17 	ldw	r3,-8(fp)
 1011ecc:	00800104 	movi	r2,4
 1011ed0:	18800005 	stb	r2,0(r3)
        return (0);
 1011ed4:	e03fff15 	stw	zero,-4(fp)
 1011ed8:	00004406 	br	1011fec <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 1011edc:	e0bffc17 	ldw	r2,-16(fp)
 1011ee0:	10800003 	ldbu	r2,0(r2)
 1011ee4:	10803fcc 	andi	r2,r2,255
 1011ee8:	108000a0 	cmpeqi	r2,r2,2
 1011eec:	1000051e 	bne	r2,zero,1011f04 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1011ef0:	e0fffe17 	ldw	r3,-8(fp)
 1011ef4:	00800044 	movi	r2,1
 1011ef8:	18800005 	stb	r2,0(r3)
        return (0);
 1011efc:	e03fff15 	stw	zero,-4(fp)
 1011f00:	00003a06 	br	1011fec <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011f04:	0005303a 	rdctl	r2,status
 1011f08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011f0c:	e0fff917 	ldw	r3,-28(fp)
 1011f10:	00bfff84 	movi	r2,-2
 1011f14:	1884703a 	and	r2,r3,r2
 1011f18:	1001703a 	wrctl	status,r2
  
  return context;
 1011f1c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1011f20:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 1011f24:	e0bffc17 	ldw	r2,-16(fp)
 1011f28:	10800283 	ldbu	r2,10(r2)
 1011f2c:	10803fcc 	andi	r2,r2,255
 1011f30:	1005003a 	cmpeq	r2,r2,zero
 1011f34:	1000261e 	bne	r2,zero,1011fd0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 1011f38:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1011f3c:	e0bffd03 	ldbu	r2,-12(fp)
 1011f40:	10800060 	cmpeqi	r2,r2,1
 1011f44:	1000091e 	bne	r2,zero,1011f6c <OSQPendAbort+0xe4>
 1011f48:	00000e06 	br	1011f84 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1011f4c:	e13ffc17 	ldw	r4,-16(fp)
 1011f50:	000b883a 	mov	r5,zero
 1011f54:	01800104 	movi	r6,4
 1011f58:	01c00084 	movi	r7,2
 1011f5c:	100d3500 	call	100d350 <OS_EventTaskRdy>
                     nbr_tasks++;
 1011f60:	e0bffb03 	ldbu	r2,-20(fp)
 1011f64:	10800044 	addi	r2,r2,1
 1011f68:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 1011f6c:	e0bffc17 	ldw	r2,-16(fp)
 1011f70:	10800283 	ldbu	r2,10(r2)
 1011f74:	10803fcc 	andi	r2,r2,255
 1011f78:	1004c03a 	cmpne	r2,r2,zero
 1011f7c:	103ff31e 	bne	r2,zero,1011f4c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1011f80:	00000806 	br	1011fa4 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 1011f84:	e13ffc17 	ldw	r4,-16(fp)
 1011f88:	000b883a 	mov	r5,zero
 1011f8c:	01800104 	movi	r6,4
 1011f90:	01c00084 	movi	r7,2
 1011f94:	100d3500 	call	100d350 <OS_EventTaskRdy>
                 nbr_tasks++;
 1011f98:	e0bffb03 	ldbu	r2,-20(fp)
 1011f9c:	10800044 	addi	r2,r2,1
 1011fa0:	e0bffb05 	stb	r2,-20(fp)
 1011fa4:	e0bffa17 	ldw	r2,-24(fp)
 1011fa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011fac:	e0bff817 	ldw	r2,-32(fp)
 1011fb0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 1011fb4:	100dd900 	call	100dd90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 1011fb8:	e0fffe17 	ldw	r3,-8(fp)
 1011fbc:	00800384 	movi	r2,14
 1011fc0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 1011fc4:	e0bffb03 	ldbu	r2,-20(fp)
 1011fc8:	e0bfff15 	stw	r2,-4(fp)
 1011fcc:	00000706 	br	1011fec <OSQPendAbort+0x164>
 1011fd0:	e0bffa17 	ldw	r2,-24(fp)
 1011fd4:	e0bff715 	stw	r2,-36(fp)
 1011fd8:	e0bff717 	ldw	r2,-36(fp)
 1011fdc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1011fe0:	e0bffe17 	ldw	r2,-8(fp)
 1011fe4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 1011fe8:	e03fff15 	stw	zero,-4(fp)
 1011fec:	e0bfff17 	ldw	r2,-4(fp)
}
 1011ff0:	e037883a 	mov	sp,fp
 1011ff4:	dfc00117 	ldw	ra,4(sp)
 1011ff8:	df000017 	ldw	fp,0(sp)
 1011ffc:	dec00204 	addi	sp,sp,8
 1012000:	f800283a 	ret

01012004 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 1012004:	defff504 	addi	sp,sp,-44
 1012008:	dfc00a15 	stw	ra,40(sp)
 101200c:	df000915 	stw	fp,36(sp)
 1012010:	df000904 	addi	fp,sp,36
 1012014:	e13ffd15 	stw	r4,-12(fp)
 1012018:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 101201c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1012020:	e0bffd17 	ldw	r2,-12(fp)
 1012024:	1004c03a 	cmpne	r2,r2,zero
 1012028:	1000031e 	bne	r2,zero,1012038 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 101202c:	00800104 	movi	r2,4
 1012030:	e0bfff15 	stw	r2,-4(fp)
 1012034:	00004d06 	br	101216c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1012038:	e0bffd17 	ldw	r2,-12(fp)
 101203c:	10800003 	ldbu	r2,0(r2)
 1012040:	10803fcc 	andi	r2,r2,255
 1012044:	108000a0 	cmpeqi	r2,r2,2
 1012048:	1000031e 	bne	r2,zero,1012058 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 101204c:	00800044 	movi	r2,1
 1012050:	e0bfff15 	stw	r2,-4(fp)
 1012054:	00004506 	br	101216c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012058:	0005303a 	rdctl	r2,status
 101205c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012060:	e0fffa17 	ldw	r3,-24(fp)
 1012064:	00bfff84 	movi	r2,-2
 1012068:	1884703a 	and	r2,r3,r2
 101206c:	1001703a 	wrctl	status,r2
  
  return context;
 1012070:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1012074:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 1012078:	e0bffd17 	ldw	r2,-12(fp)
 101207c:	10800283 	ldbu	r2,10(r2)
 1012080:	10803fcc 	andi	r2,r2,255
 1012084:	1005003a 	cmpeq	r2,r2,zero
 1012088:	10000c1e 	bne	r2,zero,10120bc <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101208c:	e13ffd17 	ldw	r4,-12(fp)
 1012090:	e17ffe17 	ldw	r5,-8(fp)
 1012094:	01800104 	movi	r6,4
 1012098:	000f883a 	mov	r7,zero
 101209c:	100d3500 	call	100d350 <OS_EventTaskRdy>
 10120a0:	e0bffb17 	ldw	r2,-20(fp)
 10120a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10120a8:	e0bff917 	ldw	r2,-28(fp)
 10120ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 10120b0:	100dd900 	call	100dd90 <OS_Sched>
        return (OS_ERR_NONE);
 10120b4:	e03fff15 	stw	zero,-4(fp)
 10120b8:	00002c06 	br	101216c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 10120bc:	e0bffd17 	ldw	r2,-12(fp)
 10120c0:	10800117 	ldw	r2,4(r2)
 10120c4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 10120c8:	e0bffc17 	ldw	r2,-16(fp)
 10120cc:	10c0058b 	ldhu	r3,22(r2)
 10120d0:	e0bffc17 	ldw	r2,-16(fp)
 10120d4:	1080050b 	ldhu	r2,20(r2)
 10120d8:	18ffffcc 	andi	r3,r3,65535
 10120dc:	10bfffcc 	andi	r2,r2,65535
 10120e0:	18800736 	bltu	r3,r2,1012100 <OSQPost+0xfc>
 10120e4:	e0bffb17 	ldw	r2,-20(fp)
 10120e8:	e0bff815 	stw	r2,-32(fp)
 10120ec:	e0bff817 	ldw	r2,-32(fp)
 10120f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 10120f4:	00800784 	movi	r2,30
 10120f8:	e0bfff15 	stw	r2,-4(fp)
 10120fc:	00001b06 	br	101216c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 1012100:	e0bffc17 	ldw	r2,-16(fp)
 1012104:	10c00317 	ldw	r3,12(r2)
 1012108:	e0bffe17 	ldw	r2,-8(fp)
 101210c:	18800015 	stw	r2,0(r3)
 1012110:	18c00104 	addi	r3,r3,4
 1012114:	e0bffc17 	ldw	r2,-16(fp)
 1012118:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 101211c:	e0bffc17 	ldw	r2,-16(fp)
 1012120:	1080058b 	ldhu	r2,22(r2)
 1012124:	10800044 	addi	r2,r2,1
 1012128:	1007883a 	mov	r3,r2
 101212c:	e0bffc17 	ldw	r2,-16(fp)
 1012130:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 1012134:	e0bffc17 	ldw	r2,-16(fp)
 1012138:	10c00317 	ldw	r3,12(r2)
 101213c:	e0bffc17 	ldw	r2,-16(fp)
 1012140:	10800217 	ldw	r2,8(r2)
 1012144:	1880041e 	bne	r3,r2,1012158 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 1012148:	e0bffc17 	ldw	r2,-16(fp)
 101214c:	10c00117 	ldw	r3,4(r2)
 1012150:	e0bffc17 	ldw	r2,-16(fp)
 1012154:	10c00315 	stw	r3,12(r2)
 1012158:	e0bffb17 	ldw	r2,-20(fp)
 101215c:	e0bff715 	stw	r2,-36(fp)
 1012160:	e0bff717 	ldw	r2,-36(fp)
 1012164:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1012168:	e03fff15 	stw	zero,-4(fp)
 101216c:	e0bfff17 	ldw	r2,-4(fp)
}
 1012170:	e037883a 	mov	sp,fp
 1012174:	dfc00117 	ldw	ra,4(sp)
 1012178:	df000017 	ldw	fp,0(sp)
 101217c:	dec00204 	addi	sp,sp,8
 1012180:	f800283a 	ret

01012184 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 1012184:	defff504 	addi	sp,sp,-44
 1012188:	dfc00a15 	stw	ra,40(sp)
 101218c:	df000915 	stw	fp,36(sp)
 1012190:	df000904 	addi	fp,sp,36
 1012194:	e13ffd15 	stw	r4,-12(fp)
 1012198:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101219c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10121a0:	e0bffd17 	ldw	r2,-12(fp)
 10121a4:	1004c03a 	cmpne	r2,r2,zero
 10121a8:	1000031e 	bne	r2,zero,10121b8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 10121ac:	00800104 	movi	r2,4
 10121b0:	e0bfff15 	stw	r2,-4(fp)
 10121b4:	00004f06 	br	10122f4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 10121b8:	e0bffd17 	ldw	r2,-12(fp)
 10121bc:	10800003 	ldbu	r2,0(r2)
 10121c0:	10803fcc 	andi	r2,r2,255
 10121c4:	108000a0 	cmpeqi	r2,r2,2
 10121c8:	1000031e 	bne	r2,zero,10121d8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 10121cc:	00800044 	movi	r2,1
 10121d0:	e0bfff15 	stw	r2,-4(fp)
 10121d4:	00004706 	br	10122f4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10121d8:	0005303a 	rdctl	r2,status
 10121dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10121e0:	e0fffa17 	ldw	r3,-24(fp)
 10121e4:	00bfff84 	movi	r2,-2
 10121e8:	1884703a 	and	r2,r3,r2
 10121ec:	1001703a 	wrctl	status,r2
  
  return context;
 10121f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 10121f4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 10121f8:	e0bffd17 	ldw	r2,-12(fp)
 10121fc:	10800283 	ldbu	r2,10(r2)
 1012200:	10803fcc 	andi	r2,r2,255
 1012204:	1005003a 	cmpeq	r2,r2,zero
 1012208:	10000c1e 	bne	r2,zero,101223c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 101220c:	e13ffd17 	ldw	r4,-12(fp)
 1012210:	e17ffe17 	ldw	r5,-8(fp)
 1012214:	01800104 	movi	r6,4
 1012218:	000f883a 	mov	r7,zero
 101221c:	100d3500 	call	100d350 <OS_EventTaskRdy>
 1012220:	e0bffb17 	ldw	r2,-20(fp)
 1012224:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012228:	e0bff917 	ldw	r2,-28(fp)
 101222c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 1012230:	100dd900 	call	100dd90 <OS_Sched>
        return (OS_ERR_NONE);
 1012234:	e03fff15 	stw	zero,-4(fp)
 1012238:	00002e06 	br	10122f4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101223c:	e0bffd17 	ldw	r2,-12(fp)
 1012240:	10800117 	ldw	r2,4(r2)
 1012244:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1012248:	e0bffc17 	ldw	r2,-16(fp)
 101224c:	10c0058b 	ldhu	r3,22(r2)
 1012250:	e0bffc17 	ldw	r2,-16(fp)
 1012254:	1080050b 	ldhu	r2,20(r2)
 1012258:	18ffffcc 	andi	r3,r3,65535
 101225c:	10bfffcc 	andi	r2,r2,65535
 1012260:	18800736 	bltu	r3,r2,1012280 <OSQPostFront+0xfc>
 1012264:	e0bffb17 	ldw	r2,-20(fp)
 1012268:	e0bff815 	stw	r2,-32(fp)
 101226c:	e0bff817 	ldw	r2,-32(fp)
 1012270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1012274:	00800784 	movi	r2,30
 1012278:	e0bfff15 	stw	r2,-4(fp)
 101227c:	00001d06 	br	10122f4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 1012280:	e0bffc17 	ldw	r2,-16(fp)
 1012284:	10c00417 	ldw	r3,16(r2)
 1012288:	e0bffc17 	ldw	r2,-16(fp)
 101228c:	10800117 	ldw	r2,4(r2)
 1012290:	1880041e 	bne	r3,r2,10122a4 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 1012294:	e0bffc17 	ldw	r2,-16(fp)
 1012298:	10c00217 	ldw	r3,8(r2)
 101229c:	e0bffc17 	ldw	r2,-16(fp)
 10122a0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 10122a4:	e0bffc17 	ldw	r2,-16(fp)
 10122a8:	10800417 	ldw	r2,16(r2)
 10122ac:	10ffff04 	addi	r3,r2,-4
 10122b0:	e0bffc17 	ldw	r2,-16(fp)
 10122b4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 10122b8:	e0bffc17 	ldw	r2,-16(fp)
 10122bc:	10c00417 	ldw	r3,16(r2)
 10122c0:	e0bffe17 	ldw	r2,-8(fp)
 10122c4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10122c8:	e0bffc17 	ldw	r2,-16(fp)
 10122cc:	1080058b 	ldhu	r2,22(r2)
 10122d0:	10800044 	addi	r2,r2,1
 10122d4:	1007883a 	mov	r3,r2
 10122d8:	e0bffc17 	ldw	r2,-16(fp)
 10122dc:	10c0058d 	sth	r3,22(r2)
 10122e0:	e0bffb17 	ldw	r2,-20(fp)
 10122e4:	e0bff715 	stw	r2,-36(fp)
 10122e8:	e0bff717 	ldw	r2,-36(fp)
 10122ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10122f0:	e03fff15 	stw	zero,-4(fp)
 10122f4:	e0bfff17 	ldw	r2,-4(fp)
}
 10122f8:	e037883a 	mov	sp,fp
 10122fc:	dfc00117 	ldw	ra,4(sp)
 1012300:	df000017 	ldw	fp,0(sp)
 1012304:	dec00204 	addi	sp,sp,8
 1012308:	f800283a 	ret

0101230c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 101230c:	defff404 	addi	sp,sp,-48
 1012310:	dfc00b15 	stw	ra,44(sp)
 1012314:	df000a15 	stw	fp,40(sp)
 1012318:	df000a04 	addi	fp,sp,40
 101231c:	e13ffc15 	stw	r4,-16(fp)
 1012320:	e17ffd15 	stw	r5,-12(fp)
 1012324:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012328:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 101232c:	e0bffc17 	ldw	r2,-16(fp)
 1012330:	1004c03a 	cmpne	r2,r2,zero
 1012334:	1000031e 	bne	r2,zero,1012344 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 1012338:	00800104 	movi	r2,4
 101233c:	e0bfff15 	stw	r2,-4(fp)
 1012340:	00007906 	br	1012528 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 1012344:	e0bffc17 	ldw	r2,-16(fp)
 1012348:	10800003 	ldbu	r2,0(r2)
 101234c:	10803fcc 	andi	r2,r2,255
 1012350:	108000a0 	cmpeqi	r2,r2,2
 1012354:	1000031e 	bne	r2,zero,1012364 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 1012358:	00800044 	movi	r2,1
 101235c:	e0bfff15 	stw	r2,-4(fp)
 1012360:	00007106 	br	1012528 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012364:	0005303a 	rdctl	r2,status
 1012368:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101236c:	e0fff917 	ldw	r3,-28(fp)
 1012370:	00bfff84 	movi	r2,-2
 1012374:	1884703a 	and	r2,r3,r2
 1012378:	1001703a 	wrctl	status,r2
  
  return context;
 101237c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1012380:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 1012384:	e0bffc17 	ldw	r2,-16(fp)
 1012388:	10800283 	ldbu	r2,10(r2)
 101238c:	10803fcc 	andi	r2,r2,255
 1012390:	1005003a 	cmpeq	r2,r2,zero
 1012394:	1000211e 	bne	r2,zero,101241c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 1012398:	e0bffe03 	ldbu	r2,-8(fp)
 101239c:	1080004c 	andi	r2,r2,1
 10123a0:	10803fcc 	andi	r2,r2,255
 10123a4:	1005003a 	cmpeq	r2,r2,zero
 10123a8:	10000c1e 	bne	r2,zero,10123dc <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10123ac:	00000506 	br	10123c4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10123b0:	e13ffc17 	ldw	r4,-16(fp)
 10123b4:	e17ffd17 	ldw	r5,-12(fp)
 10123b8:	01800104 	movi	r6,4
 10123bc:	000f883a 	mov	r7,zero
 10123c0:	100d3500 	call	100d350 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 10123c4:	e0bffc17 	ldw	r2,-16(fp)
 10123c8:	10800283 	ldbu	r2,10(r2)
 10123cc:	10803fcc 	andi	r2,r2,255
 10123d0:	1004c03a 	cmpne	r2,r2,zero
 10123d4:	103ff61e 	bne	r2,zero,10123b0 <OSQPostOpt+0xa4>
 10123d8:	00000506 	br	10123f0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 10123dc:	e13ffc17 	ldw	r4,-16(fp)
 10123e0:	e17ffd17 	ldw	r5,-12(fp)
 10123e4:	01800104 	movi	r6,4
 10123e8:	000f883a 	mov	r7,zero
 10123ec:	100d3500 	call	100d350 <OS_EventTaskRdy>
 10123f0:	e0bffa17 	ldw	r2,-24(fp)
 10123f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10123f8:	e0bff817 	ldw	r2,-32(fp)
 10123fc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 1012400:	e0bffe03 	ldbu	r2,-8(fp)
 1012404:	1080010c 	andi	r2,r2,4
 1012408:	1004c03a 	cmpne	r2,r2,zero
 101240c:	1000011e 	bne	r2,zero,1012414 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 1012410:	100dd900 	call	100dd90 <OS_Sched>
        }
        return (OS_ERR_NONE);
 1012414:	e03fff15 	stw	zero,-4(fp)
 1012418:	00004306 	br	1012528 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 101241c:	e0bffc17 	ldw	r2,-16(fp)
 1012420:	10800117 	ldw	r2,4(r2)
 1012424:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 1012428:	e0bffb17 	ldw	r2,-20(fp)
 101242c:	10c0058b 	ldhu	r3,22(r2)
 1012430:	e0bffb17 	ldw	r2,-20(fp)
 1012434:	1080050b 	ldhu	r2,20(r2)
 1012438:	18ffffcc 	andi	r3,r3,65535
 101243c:	10bfffcc 	andi	r2,r2,65535
 1012440:	18800736 	bltu	r3,r2,1012460 <OSQPostOpt+0x154>
 1012444:	e0bffa17 	ldw	r2,-24(fp)
 1012448:	e0bff715 	stw	r2,-36(fp)
 101244c:	e0bff717 	ldw	r2,-36(fp)
 1012450:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1012454:	00800784 	movi	r2,30
 1012458:	e0bfff15 	stw	r2,-4(fp)
 101245c:	00003206 	br	1012528 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 1012460:	e0bffe03 	ldbu	r2,-8(fp)
 1012464:	1080008c 	andi	r2,r2,2
 1012468:	1005003a 	cmpeq	r2,r2,zero
 101246c:	1000131e 	bne	r2,zero,10124bc <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 1012470:	e0bffb17 	ldw	r2,-20(fp)
 1012474:	10c00417 	ldw	r3,16(r2)
 1012478:	e0bffb17 	ldw	r2,-20(fp)
 101247c:	10800117 	ldw	r2,4(r2)
 1012480:	1880041e 	bne	r3,r2,1012494 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 1012484:	e0bffb17 	ldw	r2,-20(fp)
 1012488:	10c00217 	ldw	r3,8(r2)
 101248c:	e0bffb17 	ldw	r2,-20(fp)
 1012490:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 1012494:	e0bffb17 	ldw	r2,-20(fp)
 1012498:	10800417 	ldw	r2,16(r2)
 101249c:	10ffff04 	addi	r3,r2,-4
 10124a0:	e0bffb17 	ldw	r2,-20(fp)
 10124a4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 10124a8:	e0bffb17 	ldw	r2,-20(fp)
 10124ac:	10c00417 	ldw	r3,16(r2)
 10124b0:	e0bffd17 	ldw	r2,-12(fp)
 10124b4:	18800015 	stw	r2,0(r3)
 10124b8:	00001006 	br	10124fc <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 10124bc:	e0bffb17 	ldw	r2,-20(fp)
 10124c0:	10c00317 	ldw	r3,12(r2)
 10124c4:	e0bffd17 	ldw	r2,-12(fp)
 10124c8:	18800015 	stw	r2,0(r3)
 10124cc:	18c00104 	addi	r3,r3,4
 10124d0:	e0bffb17 	ldw	r2,-20(fp)
 10124d4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 10124d8:	e0bffb17 	ldw	r2,-20(fp)
 10124dc:	10c00317 	ldw	r3,12(r2)
 10124e0:	e0bffb17 	ldw	r2,-20(fp)
 10124e4:	10800217 	ldw	r2,8(r2)
 10124e8:	1880041e 	bne	r3,r2,10124fc <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 10124ec:	e0bffb17 	ldw	r2,-20(fp)
 10124f0:	10c00117 	ldw	r3,4(r2)
 10124f4:	e0bffb17 	ldw	r2,-20(fp)
 10124f8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10124fc:	e0bffb17 	ldw	r2,-20(fp)
 1012500:	1080058b 	ldhu	r2,22(r2)
 1012504:	10800044 	addi	r2,r2,1
 1012508:	1007883a 	mov	r3,r2
 101250c:	e0bffb17 	ldw	r2,-20(fp)
 1012510:	10c0058d 	sth	r3,22(r2)
 1012514:	e0bffa17 	ldw	r2,-24(fp)
 1012518:	e0bff615 	stw	r2,-40(fp)
 101251c:	e0bff617 	ldw	r2,-40(fp)
 1012520:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1012524:	e03fff15 	stw	zero,-4(fp)
 1012528:	e0bfff17 	ldw	r2,-4(fp)
}
 101252c:	e037883a 	mov	sp,fp
 1012530:	dfc00117 	ldw	ra,4(sp)
 1012534:	df000017 	ldw	fp,0(sp)
 1012538:	dec00204 	addi	sp,sp,8
 101253c:	f800283a 	ret

01012540 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 1012540:	defff504 	addi	sp,sp,-44
 1012544:	df000a15 	stw	fp,40(sp)
 1012548:	df000a04 	addi	fp,sp,40
 101254c:	e13ffd15 	stw	r4,-12(fp)
 1012550:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1012554:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 1012558:	e0bffd17 	ldw	r2,-12(fp)
 101255c:	1004c03a 	cmpne	r2,r2,zero
 1012560:	1000031e 	bne	r2,zero,1012570 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1012564:	00800104 	movi	r2,4
 1012568:	e0bfff15 	stw	r2,-4(fp)
 101256c:	00004f06 	br	10126ac <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 1012570:	e0bffe17 	ldw	r2,-8(fp)
 1012574:	1004c03a 	cmpne	r2,r2,zero
 1012578:	1000031e 	bne	r2,zero,1012588 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101257c:	00800244 	movi	r2,9
 1012580:	e0bfff15 	stw	r2,-4(fp)
 1012584:	00004906 	br	10126ac <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 1012588:	e0bffd17 	ldw	r2,-12(fp)
 101258c:	10800003 	ldbu	r2,0(r2)
 1012590:	10803fcc 	andi	r2,r2,255
 1012594:	108000a0 	cmpeqi	r2,r2,2
 1012598:	1000031e 	bne	r2,zero,10125a8 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101259c:	00800044 	movi	r2,1
 10125a0:	e0bfff15 	stw	r2,-4(fp)
 10125a4:	00004106 	br	10126ac <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10125a8:	0005303a 	rdctl	r2,status
 10125ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10125b0:	e0fff717 	ldw	r3,-36(fp)
 10125b4:	00bfff84 	movi	r2,-2
 10125b8:	1884703a 	and	r2,r3,r2
 10125bc:	1001703a 	wrctl	status,r2
  
  return context;
 10125c0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 10125c4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 10125c8:	e0bffd17 	ldw	r2,-12(fp)
 10125cc:	10c00283 	ldbu	r3,10(r2)
 10125d0:	e0bffe17 	ldw	r2,-8(fp)
 10125d4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 10125d8:	e0bffd17 	ldw	r2,-12(fp)
 10125dc:	108002c4 	addi	r2,r2,11
 10125e0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 10125e4:	e0bffe17 	ldw	r2,-8(fp)
 10125e8:	10800204 	addi	r2,r2,8
 10125ec:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 10125f0:	e03ffb05 	stb	zero,-20(fp)
 10125f4:	00000d06 	br	101262c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 10125f8:	e0bffa17 	ldw	r2,-24(fp)
 10125fc:	10c00003 	ldbu	r3,0(r2)
 1012600:	e0bff917 	ldw	r2,-28(fp)
 1012604:	10c00005 	stb	r3,0(r2)
 1012608:	e0bff917 	ldw	r2,-28(fp)
 101260c:	10800044 	addi	r2,r2,1
 1012610:	e0bff915 	stw	r2,-28(fp)
 1012614:	e0bffa17 	ldw	r2,-24(fp)
 1012618:	10800044 	addi	r2,r2,1
 101261c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1012620:	e0bffb03 	ldbu	r2,-20(fp)
 1012624:	10800044 	addi	r2,r2,1
 1012628:	e0bffb05 	stb	r2,-20(fp)
 101262c:	e0bffb03 	ldbu	r2,-20(fp)
 1012630:	108000f0 	cmpltui	r2,r2,3
 1012634:	103ff01e 	bne	r2,zero,10125f8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 1012638:	e0bffd17 	ldw	r2,-12(fp)
 101263c:	10800117 	ldw	r2,4(r2)
 1012640:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 1012644:	e0bffc17 	ldw	r2,-16(fp)
 1012648:	1080058b 	ldhu	r2,22(r2)
 101264c:	10bfffcc 	andi	r2,r2,65535
 1012650:	1005003a 	cmpeq	r2,r2,zero
 1012654:	1000061e 	bne	r2,zero,1012670 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 1012658:	e0bffc17 	ldw	r2,-16(fp)
 101265c:	10800417 	ldw	r2,16(r2)
 1012660:	10c00017 	ldw	r3,0(r2)
 1012664:	e0bffe17 	ldw	r2,-8(fp)
 1012668:	10c00015 	stw	r3,0(r2)
 101266c:	00000206 	br	1012678 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 1012670:	e0bffe17 	ldw	r2,-8(fp)
 1012674:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 1012678:	e0bffc17 	ldw	r2,-16(fp)
 101267c:	10c0058b 	ldhu	r3,22(r2)
 1012680:	e0bffe17 	ldw	r2,-8(fp)
 1012684:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 1012688:	e0bffc17 	ldw	r2,-16(fp)
 101268c:	10c0050b 	ldhu	r3,20(r2)
 1012690:	e0bffe17 	ldw	r2,-8(fp)
 1012694:	10c0018d 	sth	r3,6(r2)
 1012698:	e0bff817 	ldw	r2,-32(fp)
 101269c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10126a0:	e0bff617 	ldw	r2,-40(fp)
 10126a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10126a8:	e03fff15 	stw	zero,-4(fp)
 10126ac:	e0bfff17 	ldw	r2,-4(fp)
}
 10126b0:	e037883a 	mov	sp,fp
 10126b4:	df000017 	ldw	fp,0(sp)
 10126b8:	dec00104 	addi	sp,sp,4
 10126bc:	f800283a 	ret

010126c0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 10126c0:	defffb04 	addi	sp,sp,-20
 10126c4:	dfc00415 	stw	ra,16(sp)
 10126c8:	df000315 	stw	fp,12(sp)
 10126cc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 10126d0:	010040f4 	movhi	r4,259
 10126d4:	21329804 	addi	r4,r4,-13728
 10126d8:	01407804 	movi	r5,480
 10126dc:	100dcd00 	call	100dcd0 <OS_MemClr>
    pq1 = &OSQTbl[0];
 10126e0:	008040f4 	movhi	r2,259
 10126e4:	10b29804 	addi	r2,r2,-13728
 10126e8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 10126ec:	008040f4 	movhi	r2,259
 10126f0:	10b29e04 	addi	r2,r2,-13704
 10126f4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 10126f8:	e03fff0d 	sth	zero,-4(fp)
 10126fc:	00000c06 	br	1012730 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 1012700:	e0fffe17 	ldw	r3,-8(fp)
 1012704:	e0bffd17 	ldw	r2,-12(fp)
 1012708:	18800015 	stw	r2,0(r3)
        pq1++;
 101270c:	e0bffe17 	ldw	r2,-8(fp)
 1012710:	10800604 	addi	r2,r2,24
 1012714:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 1012718:	e0bffd17 	ldw	r2,-12(fp)
 101271c:	10800604 	addi	r2,r2,24
 1012720:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 1012724:	e0bfff0b 	ldhu	r2,-4(fp)
 1012728:	10800044 	addi	r2,r2,1
 101272c:	e0bfff0d 	sth	r2,-4(fp)
 1012730:	e0bfff0b 	ldhu	r2,-4(fp)
 1012734:	108004f0 	cmpltui	r2,r2,19
 1012738:	103ff11e 	bne	r2,zero,1012700 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 101273c:	e0bffe17 	ldw	r2,-8(fp)
 1012740:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 1012744:	00c040b4 	movhi	r3,258
 1012748:	18f3bf04 	addi	r3,r3,-12548
 101274c:	008040f4 	movhi	r2,259
 1012750:	10b29804 	addi	r2,r2,-13728
 1012754:	18800015 	stw	r2,0(r3)
#endif
}
 1012758:	e037883a 	mov	sp,fp
 101275c:	dfc00117 	ldw	ra,4(sp)
 1012760:	df000017 	ldw	fp,0(sp)
 1012764:	dec00204 	addi	sp,sp,8
 1012768:	f800283a 	ret

0101276c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 101276c:	defff904 	addi	sp,sp,-28
 1012770:	df000615 	stw	fp,24(sp)
 1012774:	df000604 	addi	fp,sp,24
 1012778:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101277c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012780:	e0bffe17 	ldw	r2,-8(fp)
 1012784:	1004c03a 	cmpne	r2,r2,zero
 1012788:	1000021e 	bne	r2,zero,1012794 <OSSemAccept+0x28>
        return (0);
 101278c:	e03fff15 	stw	zero,-4(fp)
 1012790:	00002106 	br	1012818 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012794:	e0bffe17 	ldw	r2,-8(fp)
 1012798:	10800003 	ldbu	r2,0(r2)
 101279c:	10803fcc 	andi	r2,r2,255
 10127a0:	108000e0 	cmpeqi	r2,r2,3
 10127a4:	1000021e 	bne	r2,zero,10127b0 <OSSemAccept+0x44>
        return (0);
 10127a8:	e03fff15 	stw	zero,-4(fp)
 10127ac:	00001a06 	br	1012818 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10127b0:	0005303a 	rdctl	r2,status
 10127b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10127b8:	e0fffb17 	ldw	r3,-20(fp)
 10127bc:	00bfff84 	movi	r2,-2
 10127c0:	1884703a 	and	r2,r3,r2
 10127c4:	1001703a 	wrctl	status,r2
  
  return context;
 10127c8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10127cc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 10127d0:	e0bffe17 	ldw	r2,-8(fp)
 10127d4:	1080020b 	ldhu	r2,8(r2)
 10127d8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 10127dc:	e0bffd0b 	ldhu	r2,-12(fp)
 10127e0:	1005003a 	cmpeq	r2,r2,zero
 10127e4:	1000061e 	bne	r2,zero,1012800 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 10127e8:	e0bffe17 	ldw	r2,-8(fp)
 10127ec:	1080020b 	ldhu	r2,8(r2)
 10127f0:	10bfffc4 	addi	r2,r2,-1
 10127f4:	1007883a 	mov	r3,r2
 10127f8:	e0bffe17 	ldw	r2,-8(fp)
 10127fc:	10c0020d 	sth	r3,8(r2)
 1012800:	e0bffc17 	ldw	r2,-16(fp)
 1012804:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012808:	e0bffa17 	ldw	r2,-24(fp)
 101280c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 1012810:	e0bffd0b 	ldhu	r2,-12(fp)
 1012814:	e0bfff15 	stw	r2,-4(fp)
 1012818:	e0bfff17 	ldw	r2,-4(fp)
}
 101281c:	e037883a 	mov	sp,fp
 1012820:	df000017 	ldw	fp,0(sp)
 1012824:	dec00104 	addi	sp,sp,4
 1012828:	f800283a 	ret

0101282c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 101282c:	defff804 	addi	sp,sp,-32
 1012830:	dfc00715 	stw	ra,28(sp)
 1012834:	df000615 	stw	fp,24(sp)
 1012838:	df000604 	addi	fp,sp,24
 101283c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1012840:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 1012844:	008040b4 	movhi	r2,258
 1012848:	10b3c204 	addi	r2,r2,-12536
 101284c:	10800003 	ldbu	r2,0(r2)
 1012850:	10803fcc 	andi	r2,r2,255
 1012854:	1005003a 	cmpeq	r2,r2,zero
 1012858:	1000021e 	bne	r2,zero,1012864 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 101285c:	e03fff15 	stw	zero,-4(fp)
 1012860:	00003106 	br	1012928 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012864:	0005303a 	rdctl	r2,status
 1012868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101286c:	e0fffb17 	ldw	r3,-20(fp)
 1012870:	00bfff84 	movi	r2,-2
 1012874:	1884703a 	and	r2,r3,r2
 1012878:	1001703a 	wrctl	status,r2
  
  return context;
 101287c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1012880:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 1012884:	008040b4 	movhi	r2,258
 1012888:	10b3c104 	addi	r2,r2,-12540
 101288c:	10800017 	ldw	r2,0(r2)
 1012890:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 1012894:	008040b4 	movhi	r2,258
 1012898:	10b3c104 	addi	r2,r2,-12540
 101289c:	10800017 	ldw	r2,0(r2)
 10128a0:	1005003a 	cmpeq	r2,r2,zero
 10128a4:	1000081e 	bne	r2,zero,10128c8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 10128a8:	008040b4 	movhi	r2,258
 10128ac:	10b3c104 	addi	r2,r2,-12540
 10128b0:	10800017 	ldw	r2,0(r2)
 10128b4:	10800117 	ldw	r2,4(r2)
 10128b8:	1007883a 	mov	r3,r2
 10128bc:	008040b4 	movhi	r2,258
 10128c0:	10b3c104 	addi	r2,r2,-12540
 10128c4:	10c00015 	stw	r3,0(r2)
 10128c8:	e0bffc17 	ldw	r2,-16(fp)
 10128cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10128d0:	e0bffa17 	ldw	r2,-24(fp)
 10128d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 10128d8:	e0bffd17 	ldw	r2,-12(fp)
 10128dc:	1005003a 	cmpeq	r2,r2,zero
 10128e0:	10000f1e 	bne	r2,zero,1012920 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 10128e4:	e0fffd17 	ldw	r3,-12(fp)
 10128e8:	008000c4 	movi	r2,3
 10128ec:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 10128f0:	e0fffd17 	ldw	r3,-12(fp)
 10128f4:	e0bffe0b 	ldhu	r2,-8(fp)
 10128f8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 10128fc:	e0bffd17 	ldw	r2,-12(fp)
 1012900:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 1012904:	e0fffd17 	ldw	r3,-12(fp)
 1012908:	00800fc4 	movi	r2,63
 101290c:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 1012910:	e0bffd17 	ldw	r2,-12(fp)
 1012914:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 1012918:	e13ffd17 	ldw	r4,-12(fp)
 101291c:	100d9040 	call	100d904 <OS_EventWaitListInit>
    }
    return (pevent);
 1012920:	e0bffd17 	ldw	r2,-12(fp)
 1012924:	e0bfff15 	stw	r2,-4(fp)
 1012928:	e0bfff17 	ldw	r2,-4(fp)
}
 101292c:	e037883a 	mov	sp,fp
 1012930:	dfc00117 	ldw	ra,4(sp)
 1012934:	df000017 	ldw	fp,0(sp)
 1012938:	dec00204 	addi	sp,sp,8
 101293c:	f800283a 	ret

01012940 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1012940:	defff104 	addi	sp,sp,-60
 1012944:	dfc00e15 	stw	ra,56(sp)
 1012948:	df000d15 	stw	fp,52(sp)
 101294c:	df000d04 	addi	fp,sp,52
 1012950:	e13ffb15 	stw	r4,-20(fp)
 1012954:	e1bffd15 	stw	r6,-12(fp)
 1012958:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 101295c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1012960:	e0bffd17 	ldw	r2,-12(fp)
 1012964:	1004c03a 	cmpne	r2,r2,zero
 1012968:	1000031e 	bne	r2,zero,1012978 <OSSemDel+0x38>
        return (pevent);
 101296c:	e0bffb17 	ldw	r2,-20(fp)
 1012970:	e0bfff15 	stw	r2,-4(fp)
 1012974:	00009406 	br	1012bc8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1012978:	e0bffb17 	ldw	r2,-20(fp)
 101297c:	1004c03a 	cmpne	r2,r2,zero
 1012980:	1000061e 	bne	r2,zero,101299c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 1012984:	e0fffd17 	ldw	r3,-12(fp)
 1012988:	00800104 	movi	r2,4
 101298c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1012990:	e0fffb17 	ldw	r3,-20(fp)
 1012994:	e0ffff15 	stw	r3,-4(fp)
 1012998:	00008b06 	br	1012bc8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 101299c:	e0bffb17 	ldw	r2,-20(fp)
 10129a0:	10800003 	ldbu	r2,0(r2)
 10129a4:	10803fcc 	andi	r2,r2,255
 10129a8:	108000e0 	cmpeqi	r2,r2,3
 10129ac:	1000061e 	bne	r2,zero,10129c8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 10129b0:	e0fffd17 	ldw	r3,-12(fp)
 10129b4:	00800044 	movi	r2,1
 10129b8:	18800005 	stb	r2,0(r3)
        return (pevent);
 10129bc:	e0bffb17 	ldw	r2,-20(fp)
 10129c0:	e0bfff15 	stw	r2,-4(fp)
 10129c4:	00008006 	br	1012bc8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10129c8:	008040b4 	movhi	r2,258
 10129cc:	10b3c204 	addi	r2,r2,-12536
 10129d0:	10800003 	ldbu	r2,0(r2)
 10129d4:	10803fcc 	andi	r2,r2,255
 10129d8:	1005003a 	cmpeq	r2,r2,zero
 10129dc:	1000061e 	bne	r2,zero,10129f8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 10129e0:	e0fffd17 	ldw	r3,-12(fp)
 10129e4:	008003c4 	movi	r2,15
 10129e8:	18800005 	stb	r2,0(r3)
        return (pevent);
 10129ec:	e0fffb17 	ldw	r3,-20(fp)
 10129f0:	e0ffff15 	stw	r3,-4(fp)
 10129f4:	00007406 	br	1012bc8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10129f8:	0005303a 	rdctl	r2,status
 10129fc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012a00:	e0fff717 	ldw	r3,-36(fp)
 1012a04:	00bfff84 	movi	r2,-2
 1012a08:	1884703a 	and	r2,r3,r2
 1012a0c:	1001703a 	wrctl	status,r2
  
  return context;
 1012a10:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1012a14:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 1012a18:	e0bffb17 	ldw	r2,-20(fp)
 1012a1c:	10800283 	ldbu	r2,10(r2)
 1012a20:	10803fcc 	andi	r2,r2,255
 1012a24:	1005003a 	cmpeq	r2,r2,zero
 1012a28:	1000031e 	bne	r2,zero,1012a38 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 1012a2c:	00800044 	movi	r2,1
 1012a30:	e0bffa05 	stb	r2,-24(fp)
 1012a34:	00000106 	br	1012a3c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 1012a38:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 1012a3c:	e0bffc03 	ldbu	r2,-16(fp)
 1012a40:	e0bffe15 	stw	r2,-8(fp)
 1012a44:	e0fffe17 	ldw	r3,-8(fp)
 1012a48:	1805003a 	cmpeq	r2,r3,zero
 1012a4c:	1000041e 	bne	r2,zero,1012a60 <OSSemDel+0x120>
 1012a50:	e0fffe17 	ldw	r3,-8(fp)
 1012a54:	18800060 	cmpeqi	r2,r3,1
 1012a58:	10002d1e 	bne	r2,zero,1012b10 <OSSemDel+0x1d0>
 1012a5c:	00004f06 	br	1012b9c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 1012a60:	e0bffa03 	ldbu	r2,-24(fp)
 1012a64:	1004c03a 	cmpne	r2,r2,zero
 1012a68:	10001a1e 	bne	r2,zero,1012ad4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1012a6c:	e0fffb17 	ldw	r3,-20(fp)
 1012a70:	00800fc4 	movi	r2,63
 1012a74:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 1012a78:	e0bffb17 	ldw	r2,-20(fp)
 1012a7c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1012a80:	e0bffb17 	ldw	r2,-20(fp)
 1012a84:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 1012a88:	008040b4 	movhi	r2,258
 1012a8c:	10b3c104 	addi	r2,r2,-12540
 1012a90:	10c00017 	ldw	r3,0(r2)
 1012a94:	e0bffb17 	ldw	r2,-20(fp)
 1012a98:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1012a9c:	e0bffb17 	ldw	r2,-20(fp)
 1012aa0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1012aa4:	00c040b4 	movhi	r3,258
 1012aa8:	18f3c104 	addi	r3,r3,-12540
 1012aac:	e0bffb17 	ldw	r2,-20(fp)
 1012ab0:	18800015 	stw	r2,0(r3)
 1012ab4:	e0bff817 	ldw	r2,-32(fp)
 1012ab8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012abc:	e0bff617 	ldw	r2,-40(fp)
 1012ac0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1012ac4:	e0bffd17 	ldw	r2,-12(fp)
 1012ac8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 1012acc:	e03ff915 	stw	zero,-28(fp)
 1012ad0:	00003b06 	br	1012bc0 <OSSemDel+0x280>
 1012ad4:	e0bff817 	ldw	r2,-32(fp)
 1012ad8:	e0bff515 	stw	r2,-44(fp)
 1012adc:	e0bff517 	ldw	r2,-44(fp)
 1012ae0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1012ae4:	e0fffd17 	ldw	r3,-12(fp)
 1012ae8:	00801244 	movi	r2,73
 1012aec:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1012af0:	e0bffb17 	ldw	r2,-20(fp)
 1012af4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 1012af8:	00003106 	br	1012bc0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1012afc:	e13ffb17 	ldw	r4,-20(fp)
 1012b00:	000b883a 	mov	r5,zero
 1012b04:	01800044 	movi	r6,1
 1012b08:	000f883a 	mov	r7,zero
 1012b0c:	100d3500 	call	100d350 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 1012b10:	e0bffb17 	ldw	r2,-20(fp)
 1012b14:	10800283 	ldbu	r2,10(r2)
 1012b18:	10803fcc 	andi	r2,r2,255
 1012b1c:	1004c03a 	cmpne	r2,r2,zero
 1012b20:	103ff61e 	bne	r2,zero,1012afc <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 1012b24:	e0fffb17 	ldw	r3,-20(fp)
 1012b28:	00800fc4 	movi	r2,63
 1012b2c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 1012b30:	e0bffb17 	ldw	r2,-20(fp)
 1012b34:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1012b38:	e0bffb17 	ldw	r2,-20(fp)
 1012b3c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 1012b40:	008040b4 	movhi	r2,258
 1012b44:	10b3c104 	addi	r2,r2,-12540
 1012b48:	10c00017 	ldw	r3,0(r2)
 1012b4c:	e0bffb17 	ldw	r2,-20(fp)
 1012b50:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 1012b54:	e0bffb17 	ldw	r2,-20(fp)
 1012b58:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1012b5c:	00c040b4 	movhi	r3,258
 1012b60:	18f3c104 	addi	r3,r3,-12540
 1012b64:	e0bffb17 	ldw	r2,-20(fp)
 1012b68:	18800015 	stw	r2,0(r3)
 1012b6c:	e0bff817 	ldw	r2,-32(fp)
 1012b70:	e0bff415 	stw	r2,-48(fp)
 1012b74:	e0bff417 	ldw	r2,-48(fp)
 1012b78:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1012b7c:	e0bffa03 	ldbu	r2,-24(fp)
 1012b80:	10800058 	cmpnei	r2,r2,1
 1012b84:	1000011e 	bne	r2,zero,1012b8c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 1012b88:	100dd900 	call	100dd90 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1012b8c:	e0bffd17 	ldw	r2,-12(fp)
 1012b90:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 1012b94:	e03ff915 	stw	zero,-28(fp)
             break;
 1012b98:	00000906 	br	1012bc0 <OSSemDel+0x280>
 1012b9c:	e0bff817 	ldw	r2,-32(fp)
 1012ba0:	e0bff315 	stw	r2,-52(fp)
 1012ba4:	e0bff317 	ldw	r2,-52(fp)
 1012ba8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1012bac:	e0fffd17 	ldw	r3,-12(fp)
 1012bb0:	008001c4 	movi	r2,7
 1012bb4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 1012bb8:	e0bffb17 	ldw	r2,-20(fp)
 1012bbc:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1012bc0:	e0bff917 	ldw	r2,-28(fp)
 1012bc4:	e0bfff15 	stw	r2,-4(fp)
 1012bc8:	e0bfff17 	ldw	r2,-4(fp)
}
 1012bcc:	e037883a 	mov	sp,fp
 1012bd0:	dfc00117 	ldw	ra,4(sp)
 1012bd4:	df000017 	ldw	fp,0(sp)
 1012bd8:	dec00204 	addi	sp,sp,8
 1012bdc:	f800283a 	ret

01012be0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1012be0:	defff404 	addi	sp,sp,-48
 1012be4:	dfc00b15 	stw	ra,44(sp)
 1012be8:	df000a15 	stw	fp,40(sp)
 1012bec:	df000a04 	addi	fp,sp,40
 1012bf0:	e13ffc15 	stw	r4,-16(fp)
 1012bf4:	e1bffe15 	stw	r6,-8(fp)
 1012bf8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012bfc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1012c00:	e0bffe17 	ldw	r2,-8(fp)
 1012c04:	1005003a 	cmpeq	r2,r2,zero
 1012c08:	10008f1e 	bne	r2,zero,1012e48 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012c0c:	e0bffc17 	ldw	r2,-16(fp)
 1012c10:	1004c03a 	cmpne	r2,r2,zero
 1012c14:	1000041e 	bne	r2,zero,1012c28 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 1012c18:	e0fffe17 	ldw	r3,-8(fp)
 1012c1c:	00800104 	movi	r2,4
 1012c20:	18800005 	stb	r2,0(r3)
        return;
 1012c24:	00008806 	br	1012e48 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012c28:	e0bffc17 	ldw	r2,-16(fp)
 1012c2c:	10800003 	ldbu	r2,0(r2)
 1012c30:	10803fcc 	andi	r2,r2,255
 1012c34:	108000e0 	cmpeqi	r2,r2,3
 1012c38:	1000041e 	bne	r2,zero,1012c4c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 1012c3c:	e0fffe17 	ldw	r3,-8(fp)
 1012c40:	00800044 	movi	r2,1
 1012c44:	18800005 	stb	r2,0(r3)
        return;
 1012c48:	00007f06 	br	1012e48 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 1012c4c:	008040b4 	movhi	r2,258
 1012c50:	10b3c204 	addi	r2,r2,-12536
 1012c54:	10800003 	ldbu	r2,0(r2)
 1012c58:	10803fcc 	andi	r2,r2,255
 1012c5c:	1005003a 	cmpeq	r2,r2,zero
 1012c60:	1000041e 	bne	r2,zero,1012c74 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 1012c64:	e0fffe17 	ldw	r3,-8(fp)
 1012c68:	00800084 	movi	r2,2
 1012c6c:	18800005 	stb	r2,0(r3)
        return;
 1012c70:	00007506 	br	1012e48 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 1012c74:	008040b4 	movhi	r2,258
 1012c78:	10b3b104 	addi	r2,r2,-12604
 1012c7c:	10800003 	ldbu	r2,0(r2)
 1012c80:	10803fcc 	andi	r2,r2,255
 1012c84:	1005003a 	cmpeq	r2,r2,zero
 1012c88:	1000041e 	bne	r2,zero,1012c9c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 1012c8c:	e0fffe17 	ldw	r3,-8(fp)
 1012c90:	00800344 	movi	r2,13
 1012c94:	18800005 	stb	r2,0(r3)
        return;
 1012c98:	00006b06 	br	1012e48 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012c9c:	0005303a 	rdctl	r2,status
 1012ca0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012ca4:	e0fffa17 	ldw	r3,-24(fp)
 1012ca8:	00bfff84 	movi	r2,-2
 1012cac:	1884703a 	and	r2,r3,r2
 1012cb0:	1001703a 	wrctl	status,r2
  
  return context;
 1012cb4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1012cb8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 1012cbc:	e0bffc17 	ldw	r2,-16(fp)
 1012cc0:	1080020b 	ldhu	r2,8(r2)
 1012cc4:	10bfffcc 	andi	r2,r2,65535
 1012cc8:	1005003a 	cmpeq	r2,r2,zero
 1012ccc:	10000d1e 	bne	r2,zero,1012d04 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 1012cd0:	e0bffc17 	ldw	r2,-16(fp)
 1012cd4:	1080020b 	ldhu	r2,8(r2)
 1012cd8:	10bfffc4 	addi	r2,r2,-1
 1012cdc:	1007883a 	mov	r3,r2
 1012ce0:	e0bffc17 	ldw	r2,-16(fp)
 1012ce4:	10c0020d 	sth	r3,8(r2)
 1012ce8:	e0bffb17 	ldw	r2,-20(fp)
 1012cec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012cf0:	e0bff917 	ldw	r2,-28(fp)
 1012cf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1012cf8:	e0bffe17 	ldw	r2,-8(fp)
 1012cfc:	10000005 	stb	zero,0(r2)
        return;
 1012d00:	00005106 	br	1012e48 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 1012d04:	008040b4 	movhi	r2,258
 1012d08:	10b3c304 	addi	r2,r2,-12532
 1012d0c:	10c00017 	ldw	r3,0(r2)
 1012d10:	008040b4 	movhi	r2,258
 1012d14:	10b3c304 	addi	r2,r2,-12532
 1012d18:	10800017 	ldw	r2,0(r2)
 1012d1c:	10800c03 	ldbu	r2,48(r2)
 1012d20:	10800054 	ori	r2,r2,1
 1012d24:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1012d28:	008040b4 	movhi	r2,258
 1012d2c:	10b3c304 	addi	r2,r2,-12532
 1012d30:	10800017 	ldw	r2,0(r2)
 1012d34:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 1012d38:	008040b4 	movhi	r2,258
 1012d3c:	10b3c304 	addi	r2,r2,-12532
 1012d40:	10c00017 	ldw	r3,0(r2)
 1012d44:	e0bffd0b 	ldhu	r2,-12(fp)
 1012d48:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1012d4c:	e13ffc17 	ldw	r4,-16(fp)
 1012d50:	100d4e40 	call	100d4e4 <OS_EventTaskWait>
 1012d54:	e0bffb17 	ldw	r2,-20(fp)
 1012d58:	e0bff815 	stw	r2,-32(fp)
 1012d5c:	e0bff817 	ldw	r2,-32(fp)
 1012d60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 1012d64:	100dd900 	call	100dd90 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012d68:	0005303a 	rdctl	r2,status
 1012d6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012d70:	e0fff717 	ldw	r3,-36(fp)
 1012d74:	00bfff84 	movi	r2,-2
 1012d78:	1884703a 	and	r2,r3,r2
 1012d7c:	1001703a 	wrctl	status,r2
  
  return context;
 1012d80:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1012d84:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1012d88:	008040b4 	movhi	r2,258
 1012d8c:	10b3c304 	addi	r2,r2,-12532
 1012d90:	10800017 	ldw	r2,0(r2)
 1012d94:	10800c43 	ldbu	r2,49(r2)
 1012d98:	10803fcc 	andi	r2,r2,255
 1012d9c:	e0bfff15 	stw	r2,-4(fp)
 1012da0:	e0ffff17 	ldw	r3,-4(fp)
 1012da4:	1805003a 	cmpeq	r2,r3,zero
 1012da8:	1000041e 	bne	r2,zero,1012dbc <OSSemPend+0x1dc>
 1012dac:	e0ffff17 	ldw	r3,-4(fp)
 1012db0:	188000a0 	cmpeqi	r2,r3,2
 1012db4:	1000041e 	bne	r2,zero,1012dc8 <OSSemPend+0x1e8>
 1012db8:	00000706 	br	1012dd8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 1012dbc:	e0bffe17 	ldw	r2,-8(fp)
 1012dc0:	10000005 	stb	zero,0(r2)
             break;
 1012dc4:	00000c06 	br	1012df8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1012dc8:	e0fffe17 	ldw	r3,-8(fp)
 1012dcc:	00800384 	movi	r2,14
 1012dd0:	18800005 	stb	r2,0(r3)
             break;
 1012dd4:	00000806 	br	1012df8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 1012dd8:	008040b4 	movhi	r2,258
 1012ddc:	10b3c304 	addi	r2,r2,-12532
 1012de0:	11000017 	ldw	r4,0(r2)
 1012de4:	e17ffc17 	ldw	r5,-16(fp)
 1012de8:	100d7480 	call	100d748 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1012dec:	e0fffe17 	ldw	r3,-8(fp)
 1012df0:	00800284 	movi	r2,10
 1012df4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1012df8:	008040b4 	movhi	r2,258
 1012dfc:	10b3c304 	addi	r2,r2,-12532
 1012e00:	10800017 	ldw	r2,0(r2)
 1012e04:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1012e08:	008040b4 	movhi	r2,258
 1012e0c:	10b3c304 	addi	r2,r2,-12532
 1012e10:	10800017 	ldw	r2,0(r2)
 1012e14:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1012e18:	008040b4 	movhi	r2,258
 1012e1c:	10b3c304 	addi	r2,r2,-12532
 1012e20:	10800017 	ldw	r2,0(r2)
 1012e24:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1012e28:	008040b4 	movhi	r2,258
 1012e2c:	10b3c304 	addi	r2,r2,-12532
 1012e30:	10800017 	ldw	r2,0(r2)
 1012e34:	10000815 	stw	zero,32(r2)
 1012e38:	e0bffb17 	ldw	r2,-20(fp)
 1012e3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012e40:	e0bff617 	ldw	r2,-40(fp)
 1012e44:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 1012e48:	e037883a 	mov	sp,fp
 1012e4c:	dfc00117 	ldw	ra,4(sp)
 1012e50:	df000017 	ldw	fp,0(sp)
 1012e54:	dec00204 	addi	sp,sp,8
 1012e58:	f800283a 	ret

01012e5c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1012e5c:	defff504 	addi	sp,sp,-44
 1012e60:	dfc00a15 	stw	ra,40(sp)
 1012e64:	df000915 	stw	fp,36(sp)
 1012e68:	df000904 	addi	fp,sp,36
 1012e6c:	e13ffc15 	stw	r4,-16(fp)
 1012e70:	e1bffe15 	stw	r6,-8(fp)
 1012e74:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012e78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1012e7c:	e0bffe17 	ldw	r2,-8(fp)
 1012e80:	1004c03a 	cmpne	r2,r2,zero
 1012e84:	1000021e 	bne	r2,zero,1012e90 <OSSemPendAbort+0x34>
        return (0);
 1012e88:	e03fff15 	stw	zero,-4(fp)
 1012e8c:	00004c06 	br	1012fc0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012e90:	e0bffc17 	ldw	r2,-16(fp)
 1012e94:	1004c03a 	cmpne	r2,r2,zero
 1012e98:	1000051e 	bne	r2,zero,1012eb0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1012e9c:	e0fffe17 	ldw	r3,-8(fp)
 1012ea0:	00800104 	movi	r2,4
 1012ea4:	18800005 	stb	r2,0(r3)
        return (0);
 1012ea8:	e03fff15 	stw	zero,-4(fp)
 1012eac:	00004406 	br	1012fc0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1012eb0:	e0bffc17 	ldw	r2,-16(fp)
 1012eb4:	10800003 	ldbu	r2,0(r2)
 1012eb8:	10803fcc 	andi	r2,r2,255
 1012ebc:	108000e0 	cmpeqi	r2,r2,3
 1012ec0:	1000051e 	bne	r2,zero,1012ed8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1012ec4:	e0fffe17 	ldw	r3,-8(fp)
 1012ec8:	00800044 	movi	r2,1
 1012ecc:	18800005 	stb	r2,0(r3)
        return (0);
 1012ed0:	e03fff15 	stw	zero,-4(fp)
 1012ed4:	00003a06 	br	1012fc0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012ed8:	0005303a 	rdctl	r2,status
 1012edc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012ee0:	e0fff917 	ldw	r3,-28(fp)
 1012ee4:	00bfff84 	movi	r2,-2
 1012ee8:	1884703a 	and	r2,r3,r2
 1012eec:	1001703a 	wrctl	status,r2
  
  return context;
 1012ef0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1012ef4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 1012ef8:	e0bffc17 	ldw	r2,-16(fp)
 1012efc:	10800283 	ldbu	r2,10(r2)
 1012f00:	10803fcc 	andi	r2,r2,255
 1012f04:	1005003a 	cmpeq	r2,r2,zero
 1012f08:	1000261e 	bne	r2,zero,1012fa4 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 1012f0c:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1012f10:	e0bffd03 	ldbu	r2,-12(fp)
 1012f14:	10800060 	cmpeqi	r2,r2,1
 1012f18:	1000091e 	bne	r2,zero,1012f40 <OSSemPendAbort+0xe4>
 1012f1c:	00000e06 	br	1012f58 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1012f20:	e13ffc17 	ldw	r4,-16(fp)
 1012f24:	000b883a 	mov	r5,zero
 1012f28:	01800044 	movi	r6,1
 1012f2c:	01c00084 	movi	r7,2
 1012f30:	100d3500 	call	100d350 <OS_EventTaskRdy>
                     nbr_tasks++;
 1012f34:	e0bffb03 	ldbu	r2,-20(fp)
 1012f38:	10800044 	addi	r2,r2,1
 1012f3c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 1012f40:	e0bffc17 	ldw	r2,-16(fp)
 1012f44:	10800283 	ldbu	r2,10(r2)
 1012f48:	10803fcc 	andi	r2,r2,255
 1012f4c:	1004c03a 	cmpne	r2,r2,zero
 1012f50:	103ff31e 	bne	r2,zero,1012f20 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1012f54:	00000806 	br	1012f78 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1012f58:	e13ffc17 	ldw	r4,-16(fp)
 1012f5c:	000b883a 	mov	r5,zero
 1012f60:	01800044 	movi	r6,1
 1012f64:	01c00084 	movi	r7,2
 1012f68:	100d3500 	call	100d350 <OS_EventTaskRdy>
                 nbr_tasks++;
 1012f6c:	e0bffb03 	ldbu	r2,-20(fp)
 1012f70:	10800044 	addi	r2,r2,1
 1012f74:	e0bffb05 	stb	r2,-20(fp)
 1012f78:	e0bffa17 	ldw	r2,-24(fp)
 1012f7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012f80:	e0bff817 	ldw	r2,-32(fp)
 1012f84:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 1012f88:	100dd900 	call	100dd90 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 1012f8c:	e0fffe17 	ldw	r3,-8(fp)
 1012f90:	00800384 	movi	r2,14
 1012f94:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 1012f98:	e0bffb03 	ldbu	r2,-20(fp)
 1012f9c:	e0bfff15 	stw	r2,-4(fp)
 1012fa0:	00000706 	br	1012fc0 <OSSemPendAbort+0x164>
 1012fa4:	e0bffa17 	ldw	r2,-24(fp)
 1012fa8:	e0bff715 	stw	r2,-36(fp)
 1012fac:	e0bff717 	ldw	r2,-36(fp)
 1012fb0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1012fb4:	e0bffe17 	ldw	r2,-8(fp)
 1012fb8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 1012fbc:	e03fff15 	stw	zero,-4(fp)
 1012fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 1012fc4:	e037883a 	mov	sp,fp
 1012fc8:	dfc00117 	ldw	ra,4(sp)
 1012fcc:	df000017 	ldw	fp,0(sp)
 1012fd0:	dec00204 	addi	sp,sp,8
 1012fd4:	f800283a 	ret

01012fd8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 1012fd8:	defff704 	addi	sp,sp,-36
 1012fdc:	dfc00815 	stw	ra,32(sp)
 1012fe0:	df000715 	stw	fp,28(sp)
 1012fe4:	df000704 	addi	fp,sp,28
 1012fe8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012fec:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1012ff0:	e0bffe17 	ldw	r2,-8(fp)
 1012ff4:	1004c03a 	cmpne	r2,r2,zero
 1012ff8:	1000031e 	bne	r2,zero,1013008 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 1012ffc:	00800104 	movi	r2,4
 1013000:	e0bfff15 	stw	r2,-4(fp)
 1013004:	00003806 	br	10130e8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1013008:	e0bffe17 	ldw	r2,-8(fp)
 101300c:	10800003 	ldbu	r2,0(r2)
 1013010:	10803fcc 	andi	r2,r2,255
 1013014:	108000e0 	cmpeqi	r2,r2,3
 1013018:	1000031e 	bne	r2,zero,1013028 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 101301c:	00800044 	movi	r2,1
 1013020:	e0bfff15 	stw	r2,-4(fp)
 1013024:	00003006 	br	10130e8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013028:	0005303a 	rdctl	r2,status
 101302c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013030:	e0fffc17 	ldw	r3,-16(fp)
 1013034:	00bfff84 	movi	r2,-2
 1013038:	1884703a 	and	r2,r3,r2
 101303c:	1001703a 	wrctl	status,r2
  
  return context;
 1013040:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 1013044:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 1013048:	e0bffe17 	ldw	r2,-8(fp)
 101304c:	10800283 	ldbu	r2,10(r2)
 1013050:	10803fcc 	andi	r2,r2,255
 1013054:	1005003a 	cmpeq	r2,r2,zero
 1013058:	10000c1e 	bne	r2,zero,101308c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 101305c:	e13ffe17 	ldw	r4,-8(fp)
 1013060:	000b883a 	mov	r5,zero
 1013064:	01800044 	movi	r6,1
 1013068:	000f883a 	mov	r7,zero
 101306c:	100d3500 	call	100d350 <OS_EventTaskRdy>
 1013070:	e0bffd17 	ldw	r2,-12(fp)
 1013074:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013078:	e0bffb17 	ldw	r2,-20(fp)
 101307c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 1013080:	100dd900 	call	100dd90 <OS_Sched>
        return (OS_ERR_NONE);
 1013084:	e03fff15 	stw	zero,-4(fp)
 1013088:	00001706 	br	10130e8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 101308c:	e0bffe17 	ldw	r2,-8(fp)
 1013090:	1080020b 	ldhu	r2,8(r2)
 1013094:	10ffffcc 	andi	r3,r2,65535
 1013098:	00bfffd4 	movui	r2,65535
 101309c:	18800c26 	beq	r3,r2,10130d0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 10130a0:	e0bffe17 	ldw	r2,-8(fp)
 10130a4:	1080020b 	ldhu	r2,8(r2)
 10130a8:	10800044 	addi	r2,r2,1
 10130ac:	1007883a 	mov	r3,r2
 10130b0:	e0bffe17 	ldw	r2,-8(fp)
 10130b4:	10c0020d 	sth	r3,8(r2)
 10130b8:	e0bffd17 	ldw	r2,-12(fp)
 10130bc:	e0bffa15 	stw	r2,-24(fp)
 10130c0:	e0bffa17 	ldw	r2,-24(fp)
 10130c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 10130c8:	e03fff15 	stw	zero,-4(fp)
 10130cc:	00000606 	br	10130e8 <OSSemPost+0x110>
 10130d0:	e0bffd17 	ldw	r2,-12(fp)
 10130d4:	e0bff915 	stw	r2,-28(fp)
 10130d8:	e0bff917 	ldw	r2,-28(fp)
 10130dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 10130e0:	00800c84 	movi	r2,50
 10130e4:	e0bfff15 	stw	r2,-4(fp)
 10130e8:	e0bfff17 	ldw	r2,-4(fp)
}
 10130ec:	e037883a 	mov	sp,fp
 10130f0:	dfc00117 	ldw	ra,4(sp)
 10130f4:	df000017 	ldw	fp,0(sp)
 10130f8:	dec00204 	addi	sp,sp,8
 10130fc:	f800283a 	ret

01013100 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 1013100:	defff604 	addi	sp,sp,-40
 1013104:	df000915 	stw	fp,36(sp)
 1013108:	df000904 	addi	fp,sp,36
 101310c:	e13ffd15 	stw	r4,-12(fp)
 1013110:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1013114:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1013118:	e0bffd17 	ldw	r2,-12(fp)
 101311c:	1004c03a 	cmpne	r2,r2,zero
 1013120:	1000031e 	bne	r2,zero,1013130 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1013124:	00800104 	movi	r2,4
 1013128:	e0bfff15 	stw	r2,-4(fp)
 101312c:	00003b06 	br	101321c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 1013130:	e0bffe17 	ldw	r2,-8(fp)
 1013134:	1004c03a 	cmpne	r2,r2,zero
 1013138:	1000031e 	bne	r2,zero,1013148 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 101313c:	00800244 	movi	r2,9
 1013140:	e0bfff15 	stw	r2,-4(fp)
 1013144:	00003506 	br	101321c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 1013148:	e0bffd17 	ldw	r2,-12(fp)
 101314c:	10800003 	ldbu	r2,0(r2)
 1013150:	10803fcc 	andi	r2,r2,255
 1013154:	108000e0 	cmpeqi	r2,r2,3
 1013158:	1000031e 	bne	r2,zero,1013168 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 101315c:	00800044 	movi	r2,1
 1013160:	e0bfff15 	stw	r2,-4(fp)
 1013164:	00002d06 	br	101321c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013168:	0005303a 	rdctl	r2,status
 101316c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013170:	e0fff817 	ldw	r3,-32(fp)
 1013174:	00bfff84 	movi	r2,-2
 1013178:	1884703a 	and	r2,r3,r2
 101317c:	1001703a 	wrctl	status,r2
  
  return context;
 1013180:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1013184:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 1013188:	e0bffd17 	ldw	r2,-12(fp)
 101318c:	10c00283 	ldbu	r3,10(r2)
 1013190:	e0bffe17 	ldw	r2,-8(fp)
 1013194:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 1013198:	e0bffd17 	ldw	r2,-12(fp)
 101319c:	108002c4 	addi	r2,r2,11
 10131a0:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 10131a4:	e0bffe17 	ldw	r2,-8(fp)
 10131a8:	10800084 	addi	r2,r2,2
 10131ac:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 10131b0:	e03ffa05 	stb	zero,-24(fp)
 10131b4:	00000d06 	br	10131ec <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 10131b8:	e0bffc17 	ldw	r2,-16(fp)
 10131bc:	10c00003 	ldbu	r3,0(r2)
 10131c0:	e0bffb17 	ldw	r2,-20(fp)
 10131c4:	10c00005 	stb	r3,0(r2)
 10131c8:	e0bffb17 	ldw	r2,-20(fp)
 10131cc:	10800044 	addi	r2,r2,1
 10131d0:	e0bffb15 	stw	r2,-20(fp)
 10131d4:	e0bffc17 	ldw	r2,-16(fp)
 10131d8:	10800044 	addi	r2,r2,1
 10131dc:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 10131e0:	e0bffa03 	ldbu	r2,-24(fp)
 10131e4:	10800044 	addi	r2,r2,1
 10131e8:	e0bffa05 	stb	r2,-24(fp)
 10131ec:	e0bffa03 	ldbu	r2,-24(fp)
 10131f0:	108000f0 	cmpltui	r2,r2,3
 10131f4:	103ff01e 	bne	r2,zero,10131b8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 10131f8:	e0bffd17 	ldw	r2,-12(fp)
 10131fc:	10c0020b 	ldhu	r3,8(r2)
 1013200:	e0bffe17 	ldw	r2,-8(fp)
 1013204:	10c0000d 	sth	r3,0(r2)
 1013208:	e0bff917 	ldw	r2,-28(fp)
 101320c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013210:	e0bff717 	ldw	r2,-36(fp)
 1013214:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1013218:	e03fff15 	stw	zero,-4(fp)
 101321c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013220:	e037883a 	mov	sp,fp
 1013224:	df000017 	ldw	fp,0(sp)
 1013228:	dec00104 	addi	sp,sp,4
 101322c:	f800283a 	ret

01013230 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 1013230:	defff904 	addi	sp,sp,-28
 1013234:	df000615 	stw	fp,24(sp)
 1013238:	df000604 	addi	fp,sp,24
 101323c:	e13ffd15 	stw	r4,-12(fp)
 1013240:	e1bfff15 	stw	r6,-4(fp)
 1013244:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1013248:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 101324c:	e0bfff17 	ldw	r2,-4(fp)
 1013250:	1005003a 	cmpeq	r2,r2,zero
 1013254:	1000331e 	bne	r2,zero,1013324 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1013258:	e0bffd17 	ldw	r2,-12(fp)
 101325c:	1004c03a 	cmpne	r2,r2,zero
 1013260:	1000041e 	bne	r2,zero,1013274 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 1013264:	e0ffff17 	ldw	r3,-4(fp)
 1013268:	00800104 	movi	r2,4
 101326c:	18800005 	stb	r2,0(r3)
        return;
 1013270:	00002c06 	br	1013324 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1013274:	e0bffd17 	ldw	r2,-12(fp)
 1013278:	10800003 	ldbu	r2,0(r2)
 101327c:	10803fcc 	andi	r2,r2,255
 1013280:	108000e0 	cmpeqi	r2,r2,3
 1013284:	1000041e 	bne	r2,zero,1013298 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 1013288:	e0ffff17 	ldw	r3,-4(fp)
 101328c:	00800044 	movi	r2,1
 1013290:	18800005 	stb	r2,0(r3)
        return;
 1013294:	00002306 	br	1013324 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013298:	0005303a 	rdctl	r2,status
 101329c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10132a0:	e0fffb17 	ldw	r3,-20(fp)
 10132a4:	00bfff84 	movi	r2,-2
 10132a8:	1884703a 	and	r2,r3,r2
 10132ac:	1001703a 	wrctl	status,r2
  
  return context;
 10132b0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 10132b4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 10132b8:	e0bfff17 	ldw	r2,-4(fp)
 10132bc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 10132c0:	e0bffd17 	ldw	r2,-12(fp)
 10132c4:	1080020b 	ldhu	r2,8(r2)
 10132c8:	10bfffcc 	andi	r2,r2,65535
 10132cc:	1005003a 	cmpeq	r2,r2,zero
 10132d0:	1000041e 	bne	r2,zero,10132e4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 10132d4:	e0fffd17 	ldw	r3,-12(fp)
 10132d8:	e0bffe0b 	ldhu	r2,-8(fp)
 10132dc:	1880020d 	sth	r2,8(r3)
 10132e0:	00000c06 	br	1013314 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 10132e4:	e0bffd17 	ldw	r2,-12(fp)
 10132e8:	10800283 	ldbu	r2,10(r2)
 10132ec:	10803fcc 	andi	r2,r2,255
 10132f0:	1004c03a 	cmpne	r2,r2,zero
 10132f4:	1000041e 	bne	r2,zero,1013308 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 10132f8:	e0fffd17 	ldw	r3,-12(fp)
 10132fc:	e0bffe0b 	ldhu	r2,-8(fp)
 1013300:	1880020d 	sth	r2,8(r3)
 1013304:	00000306 	br	1013314 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 1013308:	e0ffff17 	ldw	r3,-4(fp)
 101330c:	00801244 	movi	r2,73
 1013310:	18800005 	stb	r2,0(r3)
 1013314:	e0bffc17 	ldw	r2,-16(fp)
 1013318:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101331c:	e0bffa17 	ldw	r2,-24(fp)
 1013320:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 1013324:	e037883a 	mov	sp,fp
 1013328:	df000017 	ldw	fp,0(sp)
 101332c:	dec00104 	addi	sp,sp,4
 1013330:	f800283a 	ret

01013334 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 1013334:	defff004 	addi	sp,sp,-64
 1013338:	dfc00f15 	stw	ra,60(sp)
 101333c:	df000e15 	stw	fp,56(sp)
 1013340:	df000e04 	addi	fp,sp,56
 1013344:	e13ffd05 	stb	r4,-12(fp)
 1013348:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 101334c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 1013350:	e0bffd03 	ldbu	r2,-12(fp)
 1013354:	10800530 	cmpltui	r2,r2,20
 1013358:	1000061e 	bne	r2,zero,1013374 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 101335c:	e0bffd03 	ldbu	r2,-12(fp)
 1013360:	10803fe0 	cmpeqi	r2,r2,255
 1013364:	1000031e 	bne	r2,zero,1013374 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 1013368:	00800a84 	movi	r2,42
 101336c:	e0bfff15 	stw	r2,-4(fp)
 1013370:	00014706 	br	1013890 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 1013374:	e0bffe03 	ldbu	r2,-8(fp)
 1013378:	10800530 	cmpltui	r2,r2,20
 101337c:	1000031e 	bne	r2,zero,101338c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 1013380:	00800a84 	movi	r2,42
 1013384:	e0bfff15 	stw	r2,-4(fp)
 1013388:	00014106 	br	1013890 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101338c:	0005303a 	rdctl	r2,status
 1013390:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013394:	e0fff617 	ldw	r3,-40(fp)
 1013398:	00bfff84 	movi	r2,-2
 101339c:	1884703a 	and	r2,r3,r2
 10133a0:	1001703a 	wrctl	status,r2
  
  return context;
 10133a4:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10133a8:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 10133ac:	e0bffe03 	ldbu	r2,-8(fp)
 10133b0:	00c040f4 	movhi	r3,259
 10133b4:	18fb2404 	addi	r3,r3,-4976
 10133b8:	1085883a 	add	r2,r2,r2
 10133bc:	1085883a 	add	r2,r2,r2
 10133c0:	10c5883a 	add	r2,r2,r3
 10133c4:	10800017 	ldw	r2,0(r2)
 10133c8:	1005003a 	cmpeq	r2,r2,zero
 10133cc:	1000071e 	bne	r2,zero,10133ec <OSTaskChangePrio+0xb8>
 10133d0:	e0bff717 	ldw	r2,-36(fp)
 10133d4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10133d8:	e0bff517 	ldw	r2,-44(fp)
 10133dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 10133e0:	00800a04 	movi	r2,40
 10133e4:	e0bfff15 	stw	r2,-4(fp)
 10133e8:	00012906 	br	1013890 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 10133ec:	e0bffd03 	ldbu	r2,-12(fp)
 10133f0:	10803fd8 	cmpnei	r2,r2,255
 10133f4:	1000051e 	bne	r2,zero,101340c <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 10133f8:	008040b4 	movhi	r2,258
 10133fc:	10b3c304 	addi	r2,r2,-12532
 1013400:	10800017 	ldw	r2,0(r2)
 1013404:	10800c83 	ldbu	r2,50(r2)
 1013408:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 101340c:	e0bffd03 	ldbu	r2,-12(fp)
 1013410:	00c040f4 	movhi	r3,259
 1013414:	18fb2404 	addi	r3,r3,-4976
 1013418:	1085883a 	add	r2,r2,r2
 101341c:	1085883a 	add	r2,r2,r2
 1013420:	10c5883a 	add	r2,r2,r3
 1013424:	10800017 	ldw	r2,0(r2)
 1013428:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 101342c:	e0bffa17 	ldw	r2,-24(fp)
 1013430:	1004c03a 	cmpne	r2,r2,zero
 1013434:	1000071e 	bne	r2,zero,1013454 <OSTaskChangePrio+0x120>
 1013438:	e0bff717 	ldw	r2,-36(fp)
 101343c:	e0bff415 	stw	r2,-48(fp)
 1013440:	e0bff417 	ldw	r2,-48(fp)
 1013444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 1013448:	00800a44 	movi	r2,41
 101344c:	e0bfff15 	stw	r2,-4(fp)
 1013450:	00010f06 	br	1013890 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 1013454:	e0bffa17 	ldw	r2,-24(fp)
 1013458:	10800058 	cmpnei	r2,r2,1
 101345c:	1000071e 	bne	r2,zero,101347c <OSTaskChangePrio+0x148>
 1013460:	e0bff717 	ldw	r2,-36(fp)
 1013464:	e0bff315 	stw	r2,-52(fp)
 1013468:	e0bff317 	ldw	r2,-52(fp)
 101346c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 1013470:	008010c4 	movi	r2,67
 1013474:	e0bfff15 	stw	r2,-4(fp)
 1013478:	00010506 	br	1013890 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 101347c:	e0bffe03 	ldbu	r2,-8(fp)
 1013480:	1004d0fa 	srli	r2,r2,3
 1013484:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 1013488:	e0bffe03 	ldbu	r2,-8(fp)
 101348c:	108001cc 	andi	r2,r2,7
 1013490:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 1013494:	e0fff983 	ldbu	r3,-26(fp)
 1013498:	00800044 	movi	r2,1
 101349c:	10c4983a 	sll	r2,r2,r3
 10134a0:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 10134a4:	e0fff943 	ldbu	r3,-27(fp)
 10134a8:	00800044 	movi	r2,1
 10134ac:	10c4983a 	sll	r2,r2,r3
 10134b0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 10134b4:	e0bffd03 	ldbu	r2,-12(fp)
 10134b8:	00c040f4 	movhi	r3,259
 10134bc:	18fb2404 	addi	r3,r3,-4976
 10134c0:	1085883a 	add	r2,r2,r2
 10134c4:	1085883a 	add	r2,r2,r2
 10134c8:	10c5883a 	add	r2,r2,r3
 10134cc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 10134d0:	e0bffe03 	ldbu	r2,-8(fp)
 10134d4:	00c040f4 	movhi	r3,259
 10134d8:	18fb2404 	addi	r3,r3,-4976
 10134dc:	1085883a 	add	r2,r2,r2
 10134e0:	1085883a 	add	r2,r2,r2
 10134e4:	10c7883a 	add	r3,r2,r3
 10134e8:	e0bffa17 	ldw	r2,-24(fp)
 10134ec:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 10134f0:	e0bffa17 	ldw	r2,-24(fp)
 10134f4:	10800d03 	ldbu	r2,52(r2)
 10134f8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 10134fc:	e0bffa17 	ldw	r2,-24(fp)
 1013500:	10800d83 	ldbu	r2,54(r2)
 1013504:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 1013508:	e0bffa17 	ldw	r2,-24(fp)
 101350c:	10800d43 	ldbu	r2,53(r2)
 1013510:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 1013514:	e0fff903 	ldbu	r3,-28(fp)
 1013518:	008040b4 	movhi	r2,258
 101351c:	10b3c044 	addi	r2,r2,-12543
 1013520:	10c5883a 	add	r2,r2,r3
 1013524:	10c00003 	ldbu	r3,0(r2)
 1013528:	e0bff803 	ldbu	r2,-32(fp)
 101352c:	1884703a 	and	r2,r3,r2
 1013530:	10803fcc 	andi	r2,r2,255
 1013534:	1005003a 	cmpeq	r2,r2,zero
 1013538:	1000381e 	bne	r2,zero,101361c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 101353c:	e13ff903 	ldbu	r4,-28(fp)
 1013540:	e0fff903 	ldbu	r3,-28(fp)
 1013544:	008040b4 	movhi	r2,258
 1013548:	10b3c044 	addi	r2,r2,-12543
 101354c:	10c5883a 	add	r2,r2,r3
 1013550:	10800003 	ldbu	r2,0(r2)
 1013554:	1007883a 	mov	r3,r2
 1013558:	e0bff803 	ldbu	r2,-32(fp)
 101355c:	0084303a 	nor	r2,zero,r2
 1013560:	1884703a 	and	r2,r3,r2
 1013564:	1007883a 	mov	r3,r2
 1013568:	008040b4 	movhi	r2,258
 101356c:	10b3c044 	addi	r2,r2,-12543
 1013570:	1105883a 	add	r2,r2,r4
 1013574:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 1013578:	e0fff903 	ldbu	r3,-28(fp)
 101357c:	008040b4 	movhi	r2,258
 1013580:	10b3c044 	addi	r2,r2,-12543
 1013584:	10c5883a 	add	r2,r2,r3
 1013588:	10800003 	ldbu	r2,0(r2)
 101358c:	10803fcc 	andi	r2,r2,255
 1013590:	1004c03a 	cmpne	r2,r2,zero
 1013594:	10000b1e 	bne	r2,zero,10135c4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 1013598:	e0bff843 	ldbu	r2,-31(fp)
 101359c:	0084303a 	nor	r2,zero,r2
 10135a0:	1007883a 	mov	r3,r2
 10135a4:	008040b4 	movhi	r2,258
 10135a8:	10b3c004 	addi	r2,r2,-12544
 10135ac:	10800003 	ldbu	r2,0(r2)
 10135b0:	1884703a 	and	r2,r3,r2
 10135b4:	1007883a 	mov	r3,r2
 10135b8:	008040b4 	movhi	r2,258
 10135bc:	10b3c004 	addi	r2,r2,-12544
 10135c0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 10135c4:	008040b4 	movhi	r2,258
 10135c8:	10b3c004 	addi	r2,r2,-12544
 10135cc:	10c00003 	ldbu	r3,0(r2)
 10135d0:	e0bff8c3 	ldbu	r2,-29(fp)
 10135d4:	1884b03a 	or	r2,r3,r2
 10135d8:	1007883a 	mov	r3,r2
 10135dc:	008040b4 	movhi	r2,258
 10135e0:	10b3c004 	addi	r2,r2,-12544
 10135e4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 10135e8:	e13ff983 	ldbu	r4,-26(fp)
 10135ec:	e0fff983 	ldbu	r3,-26(fp)
 10135f0:	008040b4 	movhi	r2,258
 10135f4:	10b3c044 	addi	r2,r2,-12543
 10135f8:	10c5883a 	add	r2,r2,r3
 10135fc:	10c00003 	ldbu	r3,0(r2)
 1013600:	e0bff883 	ldbu	r2,-30(fp)
 1013604:	1884b03a 	or	r2,r3,r2
 1013608:	1007883a 	mov	r3,r2
 101360c:	008040b4 	movhi	r2,258
 1013610:	10b3c044 	addi	r2,r2,-12543
 1013614:	1105883a 	add	r2,r2,r4
 1013618:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 101361c:	e0bffa17 	ldw	r2,-24(fp)
 1013620:	10800717 	ldw	r2,28(r2)
 1013624:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 1013628:	e0bffc17 	ldw	r2,-16(fp)
 101362c:	1005003a 	cmpeq	r2,r2,zero
 1013630:	1000341e 	bne	r2,zero,1013704 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 1013634:	e13ff903 	ldbu	r4,-28(fp)
 1013638:	e0fff903 	ldbu	r3,-28(fp)
 101363c:	e0bffc17 	ldw	r2,-16(fp)
 1013640:	1885883a 	add	r2,r3,r2
 1013644:	10800204 	addi	r2,r2,8
 1013648:	108000c3 	ldbu	r2,3(r2)
 101364c:	1007883a 	mov	r3,r2
 1013650:	e0bff803 	ldbu	r2,-32(fp)
 1013654:	0084303a 	nor	r2,zero,r2
 1013658:	1884703a 	and	r2,r3,r2
 101365c:	1007883a 	mov	r3,r2
 1013660:	e0bffc17 	ldw	r2,-16(fp)
 1013664:	2085883a 	add	r2,r4,r2
 1013668:	10800204 	addi	r2,r2,8
 101366c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 1013670:	e0fff903 	ldbu	r3,-28(fp)
 1013674:	e0bffc17 	ldw	r2,-16(fp)
 1013678:	1885883a 	add	r2,r3,r2
 101367c:	10800204 	addi	r2,r2,8
 1013680:	108000c3 	ldbu	r2,3(r2)
 1013684:	10803fcc 	andi	r2,r2,255
 1013688:	1004c03a 	cmpne	r2,r2,zero
 101368c:	1000091e 	bne	r2,zero,10136b4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 1013690:	e0bffc17 	ldw	r2,-16(fp)
 1013694:	10800283 	ldbu	r2,10(r2)
 1013698:	1007883a 	mov	r3,r2
 101369c:	e0bff843 	ldbu	r2,-31(fp)
 10136a0:	0084303a 	nor	r2,zero,r2
 10136a4:	1884703a 	and	r2,r3,r2
 10136a8:	1007883a 	mov	r3,r2
 10136ac:	e0bffc17 	ldw	r2,-16(fp)
 10136b0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 10136b4:	e0bffc17 	ldw	r2,-16(fp)
 10136b8:	10c00283 	ldbu	r3,10(r2)
 10136bc:	e0bff8c3 	ldbu	r2,-29(fp)
 10136c0:	1884b03a 	or	r2,r3,r2
 10136c4:	1007883a 	mov	r3,r2
 10136c8:	e0bffc17 	ldw	r2,-16(fp)
 10136cc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 10136d0:	e13ff983 	ldbu	r4,-26(fp)
 10136d4:	e0fff983 	ldbu	r3,-26(fp)
 10136d8:	e0bffc17 	ldw	r2,-16(fp)
 10136dc:	1885883a 	add	r2,r3,r2
 10136e0:	10800204 	addi	r2,r2,8
 10136e4:	10c000c3 	ldbu	r3,3(r2)
 10136e8:	e0bff883 	ldbu	r2,-30(fp)
 10136ec:	1884b03a 	or	r2,r3,r2
 10136f0:	1007883a 	mov	r3,r2
 10136f4:	e0bffc17 	ldw	r2,-16(fp)
 10136f8:	2085883a 	add	r2,r4,r2
 10136fc:	10800204 	addi	r2,r2,8
 1013700:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 1013704:	e0bffa17 	ldw	r2,-24(fp)
 1013708:	10800817 	ldw	r2,32(r2)
 101370c:	1005003a 	cmpeq	r2,r2,zero
 1013710:	1000441e 	bne	r2,zero,1013824 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 1013714:	e0bffa17 	ldw	r2,-24(fp)
 1013718:	10800817 	ldw	r2,32(r2)
 101371c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 1013720:	e0bffb17 	ldw	r2,-20(fp)
 1013724:	10800017 	ldw	r2,0(r2)
 1013728:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 101372c:	00003a06 	br	1013818 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 1013730:	e13ff903 	ldbu	r4,-28(fp)
 1013734:	e0fff903 	ldbu	r3,-28(fp)
 1013738:	e0bffc17 	ldw	r2,-16(fp)
 101373c:	1885883a 	add	r2,r3,r2
 1013740:	10800204 	addi	r2,r2,8
 1013744:	108000c3 	ldbu	r2,3(r2)
 1013748:	1007883a 	mov	r3,r2
 101374c:	e0bff803 	ldbu	r2,-32(fp)
 1013750:	0084303a 	nor	r2,zero,r2
 1013754:	1884703a 	and	r2,r3,r2
 1013758:	1007883a 	mov	r3,r2
 101375c:	e0bffc17 	ldw	r2,-16(fp)
 1013760:	2085883a 	add	r2,r4,r2
 1013764:	10800204 	addi	r2,r2,8
 1013768:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 101376c:	e0fff903 	ldbu	r3,-28(fp)
 1013770:	e0bffc17 	ldw	r2,-16(fp)
 1013774:	1885883a 	add	r2,r3,r2
 1013778:	10800204 	addi	r2,r2,8
 101377c:	108000c3 	ldbu	r2,3(r2)
 1013780:	10803fcc 	andi	r2,r2,255
 1013784:	1004c03a 	cmpne	r2,r2,zero
 1013788:	1000091e 	bne	r2,zero,10137b0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 101378c:	e0bffc17 	ldw	r2,-16(fp)
 1013790:	10800283 	ldbu	r2,10(r2)
 1013794:	1007883a 	mov	r3,r2
 1013798:	e0bff843 	ldbu	r2,-31(fp)
 101379c:	0084303a 	nor	r2,zero,r2
 10137a0:	1884703a 	and	r2,r3,r2
 10137a4:	1007883a 	mov	r3,r2
 10137a8:	e0bffc17 	ldw	r2,-16(fp)
 10137ac:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 10137b0:	e0bffc17 	ldw	r2,-16(fp)
 10137b4:	10c00283 	ldbu	r3,10(r2)
 10137b8:	e0bff8c3 	ldbu	r2,-29(fp)
 10137bc:	1884b03a 	or	r2,r3,r2
 10137c0:	1007883a 	mov	r3,r2
 10137c4:	e0bffc17 	ldw	r2,-16(fp)
 10137c8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 10137cc:	e13ff983 	ldbu	r4,-26(fp)
 10137d0:	e0fff983 	ldbu	r3,-26(fp)
 10137d4:	e0bffc17 	ldw	r2,-16(fp)
 10137d8:	1885883a 	add	r2,r3,r2
 10137dc:	10800204 	addi	r2,r2,8
 10137e0:	10c000c3 	ldbu	r3,3(r2)
 10137e4:	e0bff883 	ldbu	r2,-30(fp)
 10137e8:	1884b03a 	or	r2,r3,r2
 10137ec:	1007883a 	mov	r3,r2
 10137f0:	e0bffc17 	ldw	r2,-16(fp)
 10137f4:	2085883a 	add	r2,r4,r2
 10137f8:	10800204 	addi	r2,r2,8
 10137fc:	10c000c5 	stb	r3,3(r2)
            pevents++;
 1013800:	e0bffb17 	ldw	r2,-20(fp)
 1013804:	10800104 	addi	r2,r2,4
 1013808:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 101380c:	e0bffb17 	ldw	r2,-20(fp)
 1013810:	10800017 	ldw	r2,0(r2)
 1013814:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 1013818:	e0bffc17 	ldw	r2,-16(fp)
 101381c:	1004c03a 	cmpne	r2,r2,zero
 1013820:	103fc31e 	bne	r2,zero,1013730 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 1013824:	e0fffa17 	ldw	r3,-24(fp)
 1013828:	e0bffe03 	ldbu	r2,-8(fp)
 101382c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 1013830:	e0fffa17 	ldw	r3,-24(fp)
 1013834:	e0bff983 	ldbu	r2,-26(fp)
 1013838:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 101383c:	e0fffa17 	ldw	r3,-24(fp)
 1013840:	e0bff943 	ldbu	r2,-27(fp)
 1013844:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 1013848:	e0fffa17 	ldw	r3,-24(fp)
 101384c:	e0bff8c3 	ldbu	r2,-29(fp)
 1013850:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 1013854:	e0fffa17 	ldw	r3,-24(fp)
 1013858:	e0bff883 	ldbu	r2,-30(fp)
 101385c:	18800d45 	stb	r2,53(r3)
 1013860:	e0bff717 	ldw	r2,-36(fp)
 1013864:	e0bff215 	stw	r2,-56(fp)
 1013868:	e0bff217 	ldw	r2,-56(fp)
 101386c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 1013870:	008040b4 	movhi	r2,258
 1013874:	10b3b304 	addi	r2,r2,-12596
 1013878:	10800003 	ldbu	r2,0(r2)
 101387c:	10803fcc 	andi	r2,r2,255
 1013880:	10800058 	cmpnei	r2,r2,1
 1013884:	1000011e 	bne	r2,zero,101388c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 1013888:	100dd900 	call	100dd90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101388c:	e03fff15 	stw	zero,-4(fp)
 1013890:	e0bfff17 	ldw	r2,-4(fp)
}
 1013894:	e037883a 	mov	sp,fp
 1013898:	dfc00117 	ldw	ra,4(sp)
 101389c:	df000017 	ldw	fp,0(sp)
 10138a0:	dec00204 	addi	sp,sp,8
 10138a4:	f800283a 	ret

010138a8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 10138a8:	deffed04 	addi	sp,sp,-76
 10138ac:	dfc01215 	stw	ra,72(sp)
 10138b0:	df001115 	stw	fp,68(sp)
 10138b4:	df001104 	addi	fp,sp,68
 10138b8:	e13ffb15 	stw	r4,-20(fp)
 10138bc:	e17ffc15 	stw	r5,-16(fp)
 10138c0:	e1bffd15 	stw	r6,-12(fp)
 10138c4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 10138c8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 10138cc:	e0bffe03 	ldbu	r2,-8(fp)
 10138d0:	10800570 	cmpltui	r2,r2,21
 10138d4:	1000031e 	bne	r2,zero,10138e4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 10138d8:	00800a84 	movi	r2,42
 10138dc:	e0bfff15 	stw	r2,-4(fp)
 10138e0:	00006006 	br	1013a64 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10138e4:	0005303a 	rdctl	r2,status
 10138e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10138ec:	e0fff717 	ldw	r3,-36(fp)
 10138f0:	00bfff84 	movi	r2,-2
 10138f4:	1884703a 	and	r2,r3,r2
 10138f8:	1001703a 	wrctl	status,r2
  
  return context;
 10138fc:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1013900:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 1013904:	008040b4 	movhi	r2,258
 1013908:	10b3c204 	addi	r2,r2,-12536
 101390c:	10800003 	ldbu	r2,0(r2)
 1013910:	10803fcc 	andi	r2,r2,255
 1013914:	1005003a 	cmpeq	r2,r2,zero
 1013918:	1000071e 	bne	r2,zero,1013938 <OSTaskCreate+0x90>
 101391c:	e0bff817 	ldw	r2,-32(fp)
 1013920:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013924:	e0bff617 	ldw	r2,-40(fp)
 1013928:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 101392c:	00800f04 	movi	r2,60
 1013930:	e0bfff15 	stw	r2,-4(fp)
 1013934:	00004b06 	br	1013a64 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 1013938:	e0bffe03 	ldbu	r2,-8(fp)
 101393c:	00c040f4 	movhi	r3,259
 1013940:	18fb2404 	addi	r3,r3,-4976
 1013944:	1085883a 	add	r2,r2,r2
 1013948:	1085883a 	add	r2,r2,r2
 101394c:	10c5883a 	add	r2,r2,r3
 1013950:	10800017 	ldw	r2,0(r2)
 1013954:	1004c03a 	cmpne	r2,r2,zero
 1013958:	10003c1e 	bne	r2,zero,1013a4c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 101395c:	e0bffe03 	ldbu	r2,-8(fp)
 1013960:	00c040f4 	movhi	r3,259
 1013964:	18fb2404 	addi	r3,r3,-4976
 1013968:	1085883a 	add	r2,r2,r2
 101396c:	1085883a 	add	r2,r2,r2
 1013970:	10c7883a 	add	r3,r2,r3
 1013974:	00800044 	movi	r2,1
 1013978:	18800015 	stw	r2,0(r3)
 101397c:	e0bff817 	ldw	r2,-32(fp)
 1013980:	e0bff515 	stw	r2,-44(fp)
 1013984:	e0bff517 	ldw	r2,-44(fp)
 1013988:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 101398c:	e13ffb17 	ldw	r4,-20(fp)
 1013990:	e17ffc17 	ldw	r5,-16(fp)
 1013994:	e1bffd17 	ldw	r6,-12(fp)
 1013998:	000f883a 	mov	r7,zero
 101399c:	101864c0 	call	101864c <OSTaskStkInit>
 10139a0:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 10139a4:	e13ffe03 	ldbu	r4,-8(fp)
 10139a8:	d8000015 	stw	zero,0(sp)
 10139ac:	d8000115 	stw	zero,4(sp)
 10139b0:	d8000215 	stw	zero,8(sp)
 10139b4:	e17ffa17 	ldw	r5,-24(fp)
 10139b8:	000d883a 	mov	r6,zero
 10139bc:	000f883a 	mov	r7,zero
 10139c0:	100e1980 	call	100e198 <OS_TCBInit>
 10139c4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 10139c8:	e0bff903 	ldbu	r2,-28(fp)
 10139cc:	1004c03a 	cmpne	r2,r2,zero
 10139d0:	1000081e 	bne	r2,zero,10139f4 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 10139d4:	008040b4 	movhi	r2,258
 10139d8:	10b3b304 	addi	r2,r2,-12596
 10139dc:	10800003 	ldbu	r2,0(r2)
 10139e0:	10803fcc 	andi	r2,r2,255
 10139e4:	10800058 	cmpnei	r2,r2,1
 10139e8:	1000151e 	bne	r2,zero,1013a40 <OSTaskCreate+0x198>
                OS_Sched();
 10139ec:	100dd900 	call	100dd90 <OS_Sched>
 10139f0:	00001306 	br	1013a40 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10139f4:	0005303a 	rdctl	r2,status
 10139f8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10139fc:	e0fff417 	ldw	r3,-48(fp)
 1013a00:	00bfff84 	movi	r2,-2
 1013a04:	1884703a 	and	r2,r3,r2
 1013a08:	1001703a 	wrctl	status,r2
  
  return context;
 1013a0c:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1013a10:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 1013a14:	e0bffe03 	ldbu	r2,-8(fp)
 1013a18:	00c040f4 	movhi	r3,259
 1013a1c:	18fb2404 	addi	r3,r3,-4976
 1013a20:	1085883a 	add	r2,r2,r2
 1013a24:	1085883a 	add	r2,r2,r2
 1013a28:	10c5883a 	add	r2,r2,r3
 1013a2c:	10000015 	stw	zero,0(r2)
 1013a30:	e0bff817 	ldw	r2,-32(fp)
 1013a34:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013a38:	e0bff317 	ldw	r2,-52(fp)
 1013a3c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1013a40:	e0bff903 	ldbu	r2,-28(fp)
 1013a44:	e0bfff15 	stw	r2,-4(fp)
 1013a48:	00000606 	br	1013a64 <OSTaskCreate+0x1bc>
 1013a4c:	e0bff817 	ldw	r2,-32(fp)
 1013a50:	e0bff215 	stw	r2,-56(fp)
 1013a54:	e0bff217 	ldw	r2,-56(fp)
 1013a58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1013a5c:	00800a04 	movi	r2,40
 1013a60:	e0bfff15 	stw	r2,-4(fp)
 1013a64:	e0bfff17 	ldw	r2,-4(fp)
}
 1013a68:	e037883a 	mov	sp,fp
 1013a6c:	dfc00117 	ldw	ra,4(sp)
 1013a70:	df000017 	ldw	fp,0(sp)
 1013a74:	dec00204 	addi	sp,sp,8
 1013a78:	f800283a 	ret

01013a7c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 1013a7c:	deffeb04 	addi	sp,sp,-84
 1013a80:	dfc01415 	stw	ra,80(sp)
 1013a84:	df001315 	stw	fp,76(sp)
 1013a88:	df001304 	addi	fp,sp,76
 1013a8c:	e13ff915 	stw	r4,-28(fp)
 1013a90:	e17ffa15 	stw	r5,-24(fp)
 1013a94:	e1bffb15 	stw	r6,-20(fp)
 1013a98:	e0800217 	ldw	r2,8(fp)
 1013a9c:	e0c00617 	ldw	r3,24(fp)
 1013aa0:	e1fffc05 	stb	r7,-16(fp)
 1013aa4:	e0bffd0d 	sth	r2,-12(fp)
 1013aa8:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 1013aac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1013ab0:	e0bffc03 	ldbu	r2,-16(fp)
 1013ab4:	10800570 	cmpltui	r2,r2,21
 1013ab8:	1000031e 	bne	r2,zero,1013ac8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 1013abc:	00800a84 	movi	r2,42
 1013ac0:	e0bfff15 	stw	r2,-4(fp)
 1013ac4:	00006706 	br	1013c64 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013ac8:	0005303a 	rdctl	r2,status
 1013acc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013ad0:	e0fff517 	ldw	r3,-44(fp)
 1013ad4:	00bfff84 	movi	r2,-2
 1013ad8:	1884703a 	and	r2,r3,r2
 1013adc:	1001703a 	wrctl	status,r2
  
  return context;
 1013ae0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1013ae4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 1013ae8:	008040b4 	movhi	r2,258
 1013aec:	10b3c204 	addi	r2,r2,-12536
 1013af0:	10800003 	ldbu	r2,0(r2)
 1013af4:	10803fcc 	andi	r2,r2,255
 1013af8:	1005003a 	cmpeq	r2,r2,zero
 1013afc:	1000071e 	bne	r2,zero,1013b1c <OSTaskCreateExt+0xa0>
 1013b00:	e0bff617 	ldw	r2,-40(fp)
 1013b04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013b08:	e0bff417 	ldw	r2,-48(fp)
 1013b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 1013b10:	00800f04 	movi	r2,60
 1013b14:	e0bfff15 	stw	r2,-4(fp)
 1013b18:	00005206 	br	1013c64 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 1013b1c:	e0bffc03 	ldbu	r2,-16(fp)
 1013b20:	00c040f4 	movhi	r3,259
 1013b24:	18fb2404 	addi	r3,r3,-4976
 1013b28:	1085883a 	add	r2,r2,r2
 1013b2c:	1085883a 	add	r2,r2,r2
 1013b30:	10c5883a 	add	r2,r2,r3
 1013b34:	10800017 	ldw	r2,0(r2)
 1013b38:	1004c03a 	cmpne	r2,r2,zero
 1013b3c:	1000431e 	bne	r2,zero,1013c4c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1013b40:	e0bffc03 	ldbu	r2,-16(fp)
 1013b44:	00c040f4 	movhi	r3,259
 1013b48:	18fb2404 	addi	r3,r3,-4976
 1013b4c:	1085883a 	add	r2,r2,r2
 1013b50:	1085883a 	add	r2,r2,r2
 1013b54:	10c7883a 	add	r3,r2,r3
 1013b58:	00800044 	movi	r2,1
 1013b5c:	18800015 	stw	r2,0(r3)
 1013b60:	e0bff617 	ldw	r2,-40(fp)
 1013b64:	e0bff315 	stw	r2,-52(fp)
 1013b68:	e0bff317 	ldw	r2,-52(fp)
 1013b6c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 1013b70:	e1bffe0b 	ldhu	r6,-8(fp)
 1013b74:	e1000317 	ldw	r4,12(fp)
 1013b78:	e1400417 	ldw	r5,16(fp)
 1013b7c:	1014cf80 	call	1014cf8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 1013b80:	e1fffe0b 	ldhu	r7,-8(fp)
 1013b84:	e13ff917 	ldw	r4,-28(fp)
 1013b88:	e17ffa17 	ldw	r5,-24(fp)
 1013b8c:	e1bffb17 	ldw	r6,-20(fp)
 1013b90:	101864c0 	call	101864c <OSTaskStkInit>
 1013b94:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 1013b98:	e13ffc03 	ldbu	r4,-16(fp)
 1013b9c:	e1fffd0b 	ldhu	r7,-12(fp)
 1013ba0:	e0fffe0b 	ldhu	r3,-8(fp)
 1013ba4:	e0800417 	ldw	r2,16(fp)
 1013ba8:	d8800015 	stw	r2,0(sp)
 1013bac:	e0800517 	ldw	r2,20(fp)
 1013bb0:	d8800115 	stw	r2,4(sp)
 1013bb4:	d8c00215 	stw	r3,8(sp)
 1013bb8:	e17ff817 	ldw	r5,-32(fp)
 1013bbc:	e1800317 	ldw	r6,12(fp)
 1013bc0:	100e1980 	call	100e198 <OS_TCBInit>
 1013bc4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 1013bc8:	e0bff703 	ldbu	r2,-36(fp)
 1013bcc:	1004c03a 	cmpne	r2,r2,zero
 1013bd0:	1000081e 	bne	r2,zero,1013bf4 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 1013bd4:	008040b4 	movhi	r2,258
 1013bd8:	10b3b304 	addi	r2,r2,-12596
 1013bdc:	10800003 	ldbu	r2,0(r2)
 1013be0:	10803fcc 	andi	r2,r2,255
 1013be4:	10800058 	cmpnei	r2,r2,1
 1013be8:	1000151e 	bne	r2,zero,1013c40 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 1013bec:	100dd900 	call	100dd90 <OS_Sched>
 1013bf0:	00001306 	br	1013c40 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013bf4:	0005303a 	rdctl	r2,status
 1013bf8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013bfc:	e0fff217 	ldw	r3,-56(fp)
 1013c00:	00bfff84 	movi	r2,-2
 1013c04:	1884703a 	and	r2,r3,r2
 1013c08:	1001703a 	wrctl	status,r2
  
  return context;
 1013c0c:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 1013c10:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 1013c14:	e0bffc03 	ldbu	r2,-16(fp)
 1013c18:	00c040f4 	movhi	r3,259
 1013c1c:	18fb2404 	addi	r3,r3,-4976
 1013c20:	1085883a 	add	r2,r2,r2
 1013c24:	1085883a 	add	r2,r2,r2
 1013c28:	10c5883a 	add	r2,r2,r3
 1013c2c:	10000015 	stw	zero,0(r2)
 1013c30:	e0bff617 	ldw	r2,-40(fp)
 1013c34:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013c38:	e0bff117 	ldw	r2,-60(fp)
 1013c3c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 1013c40:	e0bff703 	ldbu	r2,-36(fp)
 1013c44:	e0bfff15 	stw	r2,-4(fp)
 1013c48:	00000606 	br	1013c64 <OSTaskCreateExt+0x1e8>
 1013c4c:	e0bff617 	ldw	r2,-40(fp)
 1013c50:	e0bff015 	stw	r2,-64(fp)
 1013c54:	e0bff017 	ldw	r2,-64(fp)
 1013c58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1013c5c:	00800a04 	movi	r2,40
 1013c60:	e0bfff15 	stw	r2,-4(fp)
 1013c64:	e0bfff17 	ldw	r2,-4(fp)
}
 1013c68:	e037883a 	mov	sp,fp
 1013c6c:	dfc00117 	ldw	ra,4(sp)
 1013c70:	df000017 	ldw	fp,0(sp)
 1013c74:	dec00204 	addi	sp,sp,8
 1013c78:	f800283a 	ret

01013c7c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 1013c7c:	defff304 	addi	sp,sp,-52
 1013c80:	dfc00c15 	stw	ra,48(sp)
 1013c84:	df000b15 	stw	fp,44(sp)
 1013c88:	df000b04 	addi	fp,sp,44
 1013c8c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 1013c90:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 1013c94:	008040b4 	movhi	r2,258
 1013c98:	10b3c204 	addi	r2,r2,-12536
 1013c9c:	10800003 	ldbu	r2,0(r2)
 1013ca0:	10803fcc 	andi	r2,r2,255
 1013ca4:	1005003a 	cmpeq	r2,r2,zero
 1013ca8:	1000031e 	bne	r2,zero,1013cb8 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 1013cac:	00801004 	movi	r2,64
 1013cb0:	e0bfff15 	stw	r2,-4(fp)
 1013cb4:	0000ee06 	br	1014070 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 1013cb8:	e0bffe03 	ldbu	r2,-8(fp)
 1013cbc:	10800518 	cmpnei	r2,r2,20
 1013cc0:	1000031e 	bne	r2,zero,1013cd0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 1013cc4:	00800f84 	movi	r2,62
 1013cc8:	e0bfff15 	stw	r2,-4(fp)
 1013ccc:	0000e806 	br	1014070 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 1013cd0:	e0bffe03 	ldbu	r2,-8(fp)
 1013cd4:	10800530 	cmpltui	r2,r2,20
 1013cd8:	1000061e 	bne	r2,zero,1013cf4 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 1013cdc:	e0bffe03 	ldbu	r2,-8(fp)
 1013ce0:	10803fe0 	cmpeqi	r2,r2,255
 1013ce4:	1000031e 	bne	r2,zero,1013cf4 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 1013ce8:	00800a84 	movi	r2,42
 1013cec:	e0bfff15 	stw	r2,-4(fp)
 1013cf0:	0000df06 	br	1014070 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013cf4:	0005303a 	rdctl	r2,status
 1013cf8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013cfc:	e0fffa17 	ldw	r3,-24(fp)
 1013d00:	00bfff84 	movi	r2,-2
 1013d04:	1884703a 	and	r2,r3,r2
 1013d08:	1001703a 	wrctl	status,r2
  
  return context;
 1013d0c:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1013d10:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 1013d14:	e0bffe03 	ldbu	r2,-8(fp)
 1013d18:	10803fd8 	cmpnei	r2,r2,255
 1013d1c:	1000051e 	bne	r2,zero,1013d34 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 1013d20:	008040b4 	movhi	r2,258
 1013d24:	10b3c304 	addi	r2,r2,-12532
 1013d28:	10800017 	ldw	r2,0(r2)
 1013d2c:	10800c83 	ldbu	r2,50(r2)
 1013d30:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1013d34:	e0bffe03 	ldbu	r2,-8(fp)
 1013d38:	00c040f4 	movhi	r3,259
 1013d3c:	18fb2404 	addi	r3,r3,-4976
 1013d40:	1085883a 	add	r2,r2,r2
 1013d44:	1085883a 	add	r2,r2,r2
 1013d48:	10c5883a 	add	r2,r2,r3
 1013d4c:	10800017 	ldw	r2,0(r2)
 1013d50:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 1013d54:	e0bffc17 	ldw	r2,-16(fp)
 1013d58:	1004c03a 	cmpne	r2,r2,zero
 1013d5c:	1000071e 	bne	r2,zero,1013d7c <OSTaskDel+0x100>
 1013d60:	e0bffb17 	ldw	r2,-20(fp)
 1013d64:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013d68:	e0bff917 	ldw	r2,-28(fp)
 1013d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1013d70:	008010c4 	movi	r2,67
 1013d74:	e0bfff15 	stw	r2,-4(fp)
 1013d78:	0000bd06 	br	1014070 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 1013d7c:	e0bffc17 	ldw	r2,-16(fp)
 1013d80:	10800058 	cmpnei	r2,r2,1
 1013d84:	1000071e 	bne	r2,zero,1013da4 <OSTaskDel+0x128>
 1013d88:	e0bffb17 	ldw	r2,-20(fp)
 1013d8c:	e0bff815 	stw	r2,-32(fp)
 1013d90:	e0bff817 	ldw	r2,-32(fp)
 1013d94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1013d98:	00800f44 	movi	r2,61
 1013d9c:	e0bfff15 	stw	r2,-4(fp)
 1013da0:	0000b306 	br	1014070 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 1013da4:	e0bffc17 	ldw	r2,-16(fp)
 1013da8:	10800d03 	ldbu	r2,52(r2)
 1013dac:	11003fcc 	andi	r4,r2,255
 1013db0:	e0bffc17 	ldw	r2,-16(fp)
 1013db4:	10800d03 	ldbu	r2,52(r2)
 1013db8:	10c03fcc 	andi	r3,r2,255
 1013dbc:	008040b4 	movhi	r2,258
 1013dc0:	10b3c044 	addi	r2,r2,-12543
 1013dc4:	10c5883a 	add	r2,r2,r3
 1013dc8:	10800003 	ldbu	r2,0(r2)
 1013dcc:	1007883a 	mov	r3,r2
 1013dd0:	e0bffc17 	ldw	r2,-16(fp)
 1013dd4:	10800d43 	ldbu	r2,53(r2)
 1013dd8:	0084303a 	nor	r2,zero,r2
 1013ddc:	1884703a 	and	r2,r3,r2
 1013de0:	1007883a 	mov	r3,r2
 1013de4:	008040b4 	movhi	r2,258
 1013de8:	10b3c044 	addi	r2,r2,-12543
 1013dec:	1105883a 	add	r2,r2,r4
 1013df0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 1013df4:	e0bffc17 	ldw	r2,-16(fp)
 1013df8:	10800d03 	ldbu	r2,52(r2)
 1013dfc:	10c03fcc 	andi	r3,r2,255
 1013e00:	008040b4 	movhi	r2,258
 1013e04:	10b3c044 	addi	r2,r2,-12543
 1013e08:	10c5883a 	add	r2,r2,r3
 1013e0c:	10800003 	ldbu	r2,0(r2)
 1013e10:	10803fcc 	andi	r2,r2,255
 1013e14:	1004c03a 	cmpne	r2,r2,zero
 1013e18:	10000c1e 	bne	r2,zero,1013e4c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 1013e1c:	e0bffc17 	ldw	r2,-16(fp)
 1013e20:	10800d83 	ldbu	r2,54(r2)
 1013e24:	0084303a 	nor	r2,zero,r2
 1013e28:	1007883a 	mov	r3,r2
 1013e2c:	008040b4 	movhi	r2,258
 1013e30:	10b3c004 	addi	r2,r2,-12544
 1013e34:	10800003 	ldbu	r2,0(r2)
 1013e38:	1884703a 	and	r2,r3,r2
 1013e3c:	1007883a 	mov	r3,r2
 1013e40:	008040b4 	movhi	r2,258
 1013e44:	10b3c004 	addi	r2,r2,-12544
 1013e48:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 1013e4c:	e0bffc17 	ldw	r2,-16(fp)
 1013e50:	10800717 	ldw	r2,28(r2)
 1013e54:	1005003a 	cmpeq	r2,r2,zero
 1013e58:	1000041e 	bne	r2,zero,1013e6c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 1013e5c:	e0bffc17 	ldw	r2,-16(fp)
 1013e60:	11400717 	ldw	r5,28(r2)
 1013e64:	e13ffc17 	ldw	r4,-16(fp)
 1013e68:	100d7480 	call	100d748 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 1013e6c:	e0bffc17 	ldw	r2,-16(fp)
 1013e70:	10800817 	ldw	r2,32(r2)
 1013e74:	1005003a 	cmpeq	r2,r2,zero
 1013e78:	1000041e 	bne	r2,zero,1013e8c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 1013e7c:	e0bffc17 	ldw	r2,-16(fp)
 1013e80:	11400817 	ldw	r5,32(r2)
 1013e84:	e13ffc17 	ldw	r4,-16(fp)
 1013e88:	100d8000 	call	100d800 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 1013e8c:	e0bffc17 	ldw	r2,-16(fp)
 1013e90:	10800a17 	ldw	r2,40(r2)
 1013e94:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 1013e98:	e0bffd17 	ldw	r2,-12(fp)
 1013e9c:	1005003a 	cmpeq	r2,r2,zero
 1013ea0:	1000021e 	bne	r2,zero,1013eac <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 1013ea4:	e13ffd17 	ldw	r4,-12(fp)
 1013ea8:	100fef40 	call	100fef4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 1013eac:	e0bffc17 	ldw	r2,-16(fp)
 1013eb0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 1013eb4:	e0bffc17 	ldw	r2,-16(fp)
 1013eb8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 1013ebc:	e0bffc17 	ldw	r2,-16(fp)
 1013ec0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 1013ec4:	008040b4 	movhi	r2,258
 1013ec8:	10b3b104 	addi	r2,r2,-12604
 1013ecc:	10800003 	ldbu	r2,0(r2)
 1013ed0:	10803fcc 	andi	r2,r2,255
 1013ed4:	10803fe0 	cmpeqi	r2,r2,255
 1013ed8:	1000081e 	bne	r2,zero,1013efc <OSTaskDel+0x280>
        OSLockNesting++;
 1013edc:	008040b4 	movhi	r2,258
 1013ee0:	10b3b104 	addi	r2,r2,-12604
 1013ee4:	10800003 	ldbu	r2,0(r2)
 1013ee8:	10800044 	addi	r2,r2,1
 1013eec:	1007883a 	mov	r3,r2
 1013ef0:	008040b4 	movhi	r2,258
 1013ef4:	10b3b104 	addi	r2,r2,-12604
 1013ef8:	10c00005 	stb	r3,0(r2)
 1013efc:	e0bffb17 	ldw	r2,-20(fp)
 1013f00:	e0bff715 	stw	r2,-36(fp)
 1013f04:	e0bff717 	ldw	r2,-36(fp)
 1013f08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 1013f0c:	100d3340 	call	100d334 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013f10:	0005303a 	rdctl	r2,status
 1013f14:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013f18:	e0fff617 	ldw	r3,-40(fp)
 1013f1c:	00bfff84 	movi	r2,-2
 1013f20:	1884703a 	and	r2,r3,r2
 1013f24:	1001703a 	wrctl	status,r2
  
  return context;
 1013f28:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 1013f2c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 1013f30:	008040b4 	movhi	r2,258
 1013f34:	10b3b104 	addi	r2,r2,-12604
 1013f38:	10800003 	ldbu	r2,0(r2)
 1013f3c:	10803fcc 	andi	r2,r2,255
 1013f40:	1005003a 	cmpeq	r2,r2,zero
 1013f44:	1000081e 	bne	r2,zero,1013f68 <OSTaskDel+0x2ec>
        OSLockNesting--;
 1013f48:	008040b4 	movhi	r2,258
 1013f4c:	10b3b104 	addi	r2,r2,-12604
 1013f50:	10800003 	ldbu	r2,0(r2)
 1013f54:	10bfffc4 	addi	r2,r2,-1
 1013f58:	1007883a 	mov	r3,r2
 1013f5c:	008040b4 	movhi	r2,258
 1013f60:	10b3b104 	addi	r2,r2,-12604
 1013f64:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 1013f68:	e13ffc17 	ldw	r4,-16(fp)
 1013f6c:	101897c0 	call	101897c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 1013f70:	008040b4 	movhi	r2,258
 1013f74:	10b3bc44 	addi	r2,r2,-12559
 1013f78:	10800003 	ldbu	r2,0(r2)
 1013f7c:	10bfffc4 	addi	r2,r2,-1
 1013f80:	1007883a 	mov	r3,r2
 1013f84:	008040b4 	movhi	r2,258
 1013f88:	10b3bc44 	addi	r2,r2,-12559
 1013f8c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 1013f90:	e0bffe03 	ldbu	r2,-8(fp)
 1013f94:	00c040f4 	movhi	r3,259
 1013f98:	18fb2404 	addi	r3,r3,-4976
 1013f9c:	1085883a 	add	r2,r2,r2
 1013fa0:	1085883a 	add	r2,r2,r2
 1013fa4:	10c5883a 	add	r2,r2,r3
 1013fa8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 1013fac:	e0bffc17 	ldw	r2,-16(fp)
 1013fb0:	10800617 	ldw	r2,24(r2)
 1013fb4:	1004c03a 	cmpne	r2,r2,zero
 1013fb8:	1000091e 	bne	r2,zero,1013fe0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 1013fbc:	e0bffc17 	ldw	r2,-16(fp)
 1013fc0:	10800517 	ldw	r2,20(r2)
 1013fc4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 1013fc8:	e0bffc17 	ldw	r2,-16(fp)
 1013fcc:	10c00517 	ldw	r3,20(r2)
 1013fd0:	008040b4 	movhi	r2,258
 1013fd4:	10b3b604 	addi	r2,r2,-12584
 1013fd8:	10c00015 	stw	r3,0(r2)
 1013fdc:	00000a06 	br	1014008 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 1013fe0:	e0bffc17 	ldw	r2,-16(fp)
 1013fe4:	10c00617 	ldw	r3,24(r2)
 1013fe8:	e0bffc17 	ldw	r2,-16(fp)
 1013fec:	10800517 	ldw	r2,20(r2)
 1013ff0:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 1013ff4:	e0bffc17 	ldw	r2,-16(fp)
 1013ff8:	10c00517 	ldw	r3,20(r2)
 1013ffc:	e0bffc17 	ldw	r2,-16(fp)
 1014000:	10800617 	ldw	r2,24(r2)
 1014004:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 1014008:	008040b4 	movhi	r2,258
 101400c:	10b3bb04 	addi	r2,r2,-12564
 1014010:	10c00017 	ldw	r3,0(r2)
 1014014:	e0bffc17 	ldw	r2,-16(fp)
 1014018:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 101401c:	00c040b4 	movhi	r3,258
 1014020:	18f3bb04 	addi	r3,r3,-12564
 1014024:	e0bffc17 	ldw	r2,-16(fp)
 1014028:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 101402c:	e0fffc17 	ldw	r3,-16(fp)
 1014030:	00800fc4 	movi	r2,63
 1014034:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1014038:	e0bffc17 	ldw	r2,-16(fp)
 101403c:	10001345 	stb	zero,77(r2)
 1014040:	e0bffb17 	ldw	r2,-20(fp)
 1014044:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014048:	e0bff517 	ldw	r2,-44(fp)
 101404c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 1014050:	008040b4 	movhi	r2,258
 1014054:	10b3b304 	addi	r2,r2,-12596
 1014058:	10800003 	ldbu	r2,0(r2)
 101405c:	10803fcc 	andi	r2,r2,255
 1014060:	10800058 	cmpnei	r2,r2,1
 1014064:	1000011e 	bne	r2,zero,101406c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 1014068:	100dd900 	call	100dd90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101406c:	e03fff15 	stw	zero,-4(fp)
 1014070:	e0bfff17 	ldw	r2,-4(fp)
}
 1014074:	e037883a 	mov	sp,fp
 1014078:	dfc00117 	ldw	ra,4(sp)
 101407c:	df000017 	ldw	fp,0(sp)
 1014080:	dec00204 	addi	sp,sp,8
 1014084:	f800283a 	ret

01014088 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 1014088:	defff404 	addi	sp,sp,-48
 101408c:	df000b15 	stw	fp,44(sp)
 1014090:	df000b04 	addi	fp,sp,44
 1014094:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014098:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 101409c:	e0bffe03 	ldbu	r2,-8(fp)
 10140a0:	10800518 	cmpnei	r2,r2,20
 10140a4:	1000031e 	bne	r2,zero,10140b4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 10140a8:	00800f84 	movi	r2,62
 10140ac:	e0bfff15 	stw	r2,-4(fp)
 10140b0:	00004c06 	br	10141e4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 10140b4:	e0bffe03 	ldbu	r2,-8(fp)
 10140b8:	10800530 	cmpltui	r2,r2,20
 10140bc:	1000061e 	bne	r2,zero,10140d8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 10140c0:	e0bffe03 	ldbu	r2,-8(fp)
 10140c4:	10803fe0 	cmpeqi	r2,r2,255
 10140c8:	1000031e 	bne	r2,zero,10140d8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 10140cc:	00800a84 	movi	r2,42
 10140d0:	e0bfff15 	stw	r2,-4(fp)
 10140d4:	00004306 	br	10141e4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 10140d8:	e0bffe03 	ldbu	r2,-8(fp)
 10140dc:	10803fd8 	cmpnei	r2,r2,255
 10140e0:	1000141e 	bne	r2,zero,1014134 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10140e4:	0005303a 	rdctl	r2,status
 10140e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10140ec:	e0fffa17 	ldw	r3,-24(fp)
 10140f0:	00bfff84 	movi	r2,-2
 10140f4:	1884703a 	and	r2,r3,r2
 10140f8:	1001703a 	wrctl	status,r2
  
  return context;
 10140fc:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 1014100:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 1014104:	008040b4 	movhi	r2,258
 1014108:	10b3c304 	addi	r2,r2,-12532
 101410c:	10800017 	ldw	r2,0(r2)
 1014110:	10800dc3 	ldbu	r2,55(r2)
 1014114:	e0bffd05 	stb	r2,-12(fp)
 1014118:	e0bffb17 	ldw	r2,-20(fp)
 101411c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014120:	e0bff917 	ldw	r2,-28(fp)
 1014124:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 1014128:	e0bffd03 	ldbu	r2,-12(fp)
 101412c:	e0bfff15 	stw	r2,-4(fp)
 1014130:	00002c06 	br	10141e4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014134:	0005303a 	rdctl	r2,status
 1014138:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101413c:	e0fff817 	ldw	r3,-32(fp)
 1014140:	00bfff84 	movi	r2,-2
 1014144:	1884703a 	and	r2,r3,r2
 1014148:	1001703a 	wrctl	status,r2
  
  return context;
 101414c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1014150:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 1014154:	e0bffe03 	ldbu	r2,-8(fp)
 1014158:	00c040f4 	movhi	r3,259
 101415c:	18fb2404 	addi	r3,r3,-4976
 1014160:	1085883a 	add	r2,r2,r2
 1014164:	1085883a 	add	r2,r2,r2
 1014168:	10c5883a 	add	r2,r2,r3
 101416c:	10800017 	ldw	r2,0(r2)
 1014170:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 1014174:	e0bffc17 	ldw	r2,-16(fp)
 1014178:	1004c03a 	cmpne	r2,r2,zero
 101417c:	1000071e 	bne	r2,zero,101419c <OSTaskDelReq+0x114>
 1014180:	e0bffb17 	ldw	r2,-20(fp)
 1014184:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014188:	e0bff717 	ldw	r2,-36(fp)
 101418c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 1014190:	008010c4 	movi	r2,67
 1014194:	e0bfff15 	stw	r2,-4(fp)
 1014198:	00001206 	br	10141e4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 101419c:	e0bffc17 	ldw	r2,-16(fp)
 10141a0:	10800058 	cmpnei	r2,r2,1
 10141a4:	1000071e 	bne	r2,zero,10141c4 <OSTaskDelReq+0x13c>
 10141a8:	e0bffb17 	ldw	r2,-20(fp)
 10141ac:	e0bff615 	stw	r2,-40(fp)
 10141b0:	e0bff617 	ldw	r2,-40(fp)
 10141b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 10141b8:	00800f44 	movi	r2,61
 10141bc:	e0bfff15 	stw	r2,-4(fp)
 10141c0:	00000806 	br	10141e4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 10141c4:	e0fffc17 	ldw	r3,-16(fp)
 10141c8:	00800fc4 	movi	r2,63
 10141cc:	18800dc5 	stb	r2,55(r3)
 10141d0:	e0bffb17 	ldw	r2,-20(fp)
 10141d4:	e0bff515 	stw	r2,-44(fp)
 10141d8:	e0bff517 	ldw	r2,-44(fp)
 10141dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10141e0:	e03fff15 	stw	zero,-4(fp)
 10141e4:	e0bfff17 	ldw	r2,-4(fp)
}
 10141e8:	e037883a 	mov	sp,fp
 10141ec:	df000017 	ldw	fp,0(sp)
 10141f0:	dec00104 	addi	sp,sp,4
 10141f4:	f800283a 	ret

010141f8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 10141f8:	defff304 	addi	sp,sp,-52
 10141fc:	dfc00c15 	stw	ra,48(sp)
 1014200:	df000b15 	stw	fp,44(sp)
 1014204:	df000b04 	addi	fp,sp,44
 1014208:	e17ffd15 	stw	r5,-12(fp)
 101420c:	e1bffe15 	stw	r6,-8(fp)
 1014210:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 1014214:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 1014218:	e0bffe17 	ldw	r2,-8(fp)
 101421c:	1004c03a 	cmpne	r2,r2,zero
 1014220:	1000021e 	bne	r2,zero,101422c <OSTaskNameGet+0x34>
        return (0);
 1014224:	e03fff15 	stw	zero,-4(fp)
 1014228:	00005b06 	br	1014398 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 101422c:	e0bffc03 	ldbu	r2,-16(fp)
 1014230:	10800570 	cmpltui	r2,r2,21
 1014234:	1000081e 	bne	r2,zero,1014258 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 1014238:	e0bffc03 	ldbu	r2,-16(fp)
 101423c:	10803fe0 	cmpeqi	r2,r2,255
 1014240:	1000051e 	bne	r2,zero,1014258 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 1014244:	e0fffe17 	ldw	r3,-8(fp)
 1014248:	00800a84 	movi	r2,42
 101424c:	18800005 	stb	r2,0(r3)
            return (0);
 1014250:	e03fff15 	stw	zero,-4(fp)
 1014254:	00005006 	br	1014398 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 1014258:	e0bffd17 	ldw	r2,-12(fp)
 101425c:	1004c03a 	cmpne	r2,r2,zero
 1014260:	1000051e 	bne	r2,zero,1014278 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 1014264:	e0fffe17 	ldw	r3,-8(fp)
 1014268:	00800304 	movi	r2,12
 101426c:	18800005 	stb	r2,0(r3)
        return (0);
 1014270:	e03fff15 	stw	zero,-4(fp)
 1014274:	00004806 	br	1014398 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 1014278:	008040b4 	movhi	r2,258
 101427c:	10b3c204 	addi	r2,r2,-12536
 1014280:	10800003 	ldbu	r2,0(r2)
 1014284:	10803fcc 	andi	r2,r2,255
 1014288:	1005003a 	cmpeq	r2,r2,zero
 101428c:	1000051e 	bne	r2,zero,10142a4 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 1014290:	e0fffe17 	ldw	r3,-8(fp)
 1014294:	00800444 	movi	r2,17
 1014298:	18800005 	stb	r2,0(r3)
        return (0);
 101429c:	e03fff15 	stw	zero,-4(fp)
 10142a0:	00003d06 	br	1014398 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10142a4:	0005303a 	rdctl	r2,status
 10142a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10142ac:	e0fff817 	ldw	r3,-32(fp)
 10142b0:	00bfff84 	movi	r2,-2
 10142b4:	1884703a 	and	r2,r3,r2
 10142b8:	1001703a 	wrctl	status,r2
  
  return context;
 10142bc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 10142c0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 10142c4:	e0bffc03 	ldbu	r2,-16(fp)
 10142c8:	10803fd8 	cmpnei	r2,r2,255
 10142cc:	1000051e 	bne	r2,zero,10142e4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 10142d0:	008040b4 	movhi	r2,258
 10142d4:	10b3c304 	addi	r2,r2,-12532
 10142d8:	10800017 	ldw	r2,0(r2)
 10142dc:	10800c83 	ldbu	r2,50(r2)
 10142e0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10142e4:	e0bffc03 	ldbu	r2,-16(fp)
 10142e8:	00c040f4 	movhi	r3,259
 10142ec:	18fb2404 	addi	r3,r3,-4976
 10142f0:	1085883a 	add	r2,r2,r2
 10142f4:	1085883a 	add	r2,r2,r2
 10142f8:	10c5883a 	add	r2,r2,r3
 10142fc:	10800017 	ldw	r2,0(r2)
 1014300:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 1014304:	e0bffb17 	ldw	r2,-20(fp)
 1014308:	1004c03a 	cmpne	r2,r2,zero
 101430c:	1000091e 	bne	r2,zero,1014334 <OSTaskNameGet+0x13c>
 1014310:	e0bff917 	ldw	r2,-28(fp)
 1014314:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014318:	e0bff717 	ldw	r2,-36(fp)
 101431c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1014320:	e0fffe17 	ldw	r3,-8(fp)
 1014324:	008010c4 	movi	r2,67
 1014328:	18800005 	stb	r2,0(r3)
        return (0);
 101432c:	e03fff15 	stw	zero,-4(fp)
 1014330:	00001906 	br	1014398 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 1014334:	e0bffb17 	ldw	r2,-20(fp)
 1014338:	10800058 	cmpnei	r2,r2,1
 101433c:	1000091e 	bne	r2,zero,1014364 <OSTaskNameGet+0x16c>
 1014340:	e0bff917 	ldw	r2,-28(fp)
 1014344:	e0bff615 	stw	r2,-40(fp)
 1014348:	e0bff617 	ldw	r2,-40(fp)
 101434c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1014350:	e0fffe17 	ldw	r3,-8(fp)
 1014354:	008010c4 	movi	r2,67
 1014358:	18800005 	stb	r2,0(r3)
        return (0);
 101435c:	e03fff15 	stw	zero,-4(fp)
 1014360:	00000d06 	br	1014398 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 1014364:	e0bffb17 	ldw	r2,-20(fp)
 1014368:	11401304 	addi	r5,r2,76
 101436c:	e13ffd17 	ldw	r4,-12(fp)
 1014370:	100ded40 	call	100ded4 <OS_StrCopy>
 1014374:	e0bffa05 	stb	r2,-24(fp)
 1014378:	e0bff917 	ldw	r2,-28(fp)
 101437c:	e0bff515 	stw	r2,-44(fp)
 1014380:	e0bff517 	ldw	r2,-44(fp)
 1014384:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1014388:	e0bffe17 	ldw	r2,-8(fp)
 101438c:	10000005 	stb	zero,0(r2)
    return (len);
 1014390:	e0bffa03 	ldbu	r2,-24(fp)
 1014394:	e0bfff15 	stw	r2,-4(fp)
 1014398:	e0bfff17 	ldw	r2,-4(fp)
}
 101439c:	e037883a 	mov	sp,fp
 10143a0:	dfc00117 	ldw	ra,4(sp)
 10143a4:	df000017 	ldw	fp,0(sp)
 10143a8:	dec00204 	addi	sp,sp,8
 10143ac:	f800283a 	ret

010143b0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 10143b0:	defff304 	addi	sp,sp,-52
 10143b4:	dfc00c15 	stw	ra,48(sp)
 10143b8:	df000b15 	stw	fp,44(sp)
 10143bc:	df000b04 	addi	fp,sp,44
 10143c0:	e17ffe15 	stw	r5,-8(fp)
 10143c4:	e1bfff15 	stw	r6,-4(fp)
 10143c8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 10143cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 10143d0:	e0bfff17 	ldw	r2,-4(fp)
 10143d4:	1005003a 	cmpeq	r2,r2,zero
 10143d8:	1000611e 	bne	r2,zero,1014560 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 10143dc:	e0bffd03 	ldbu	r2,-12(fp)
 10143e0:	10800570 	cmpltui	r2,r2,21
 10143e4:	1000071e 	bne	r2,zero,1014404 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 10143e8:	e0bffd03 	ldbu	r2,-12(fp)
 10143ec:	10803fe0 	cmpeqi	r2,r2,255
 10143f0:	1000041e 	bne	r2,zero,1014404 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 10143f4:	e0ffff17 	ldw	r3,-4(fp)
 10143f8:	00800a84 	movi	r2,42
 10143fc:	18800005 	stb	r2,0(r3)
            return;
 1014400:	00005706 	br	1014560 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 1014404:	e0bffe17 	ldw	r2,-8(fp)
 1014408:	1004c03a 	cmpne	r2,r2,zero
 101440c:	1000041e 	bne	r2,zero,1014420 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 1014410:	e0ffff17 	ldw	r3,-4(fp)
 1014414:	00800304 	movi	r2,12
 1014418:	18800005 	stb	r2,0(r3)
        return;
 101441c:	00005006 	br	1014560 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 1014420:	008040b4 	movhi	r2,258
 1014424:	10b3c204 	addi	r2,r2,-12536
 1014428:	10800003 	ldbu	r2,0(r2)
 101442c:	10803fcc 	andi	r2,r2,255
 1014430:	1005003a 	cmpeq	r2,r2,zero
 1014434:	1000041e 	bne	r2,zero,1014448 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 1014438:	e0ffff17 	ldw	r3,-4(fp)
 101443c:	00800484 	movi	r2,18
 1014440:	18800005 	stb	r2,0(r3)
        return;
 1014444:	00004606 	br	1014560 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014448:	0005303a 	rdctl	r2,status
 101444c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014450:	e0fff917 	ldw	r3,-28(fp)
 1014454:	00bfff84 	movi	r2,-2
 1014458:	1884703a 	and	r2,r3,r2
 101445c:	1001703a 	wrctl	status,r2
  
  return context;
 1014460:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1014464:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 1014468:	e0bffd03 	ldbu	r2,-12(fp)
 101446c:	10803fd8 	cmpnei	r2,r2,255
 1014470:	1000051e 	bne	r2,zero,1014488 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 1014474:	008040b4 	movhi	r2,258
 1014478:	10b3c304 	addi	r2,r2,-12532
 101447c:	10800017 	ldw	r2,0(r2)
 1014480:	10800c83 	ldbu	r2,50(r2)
 1014484:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014488:	e0bffd03 	ldbu	r2,-12(fp)
 101448c:	00c040f4 	movhi	r3,259
 1014490:	18fb2404 	addi	r3,r3,-4976
 1014494:	1085883a 	add	r2,r2,r2
 1014498:	1085883a 	add	r2,r2,r2
 101449c:	10c5883a 	add	r2,r2,r3
 10144a0:	10800017 	ldw	r2,0(r2)
 10144a4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 10144a8:	e0bffb17 	ldw	r2,-20(fp)
 10144ac:	1004c03a 	cmpne	r2,r2,zero
 10144b0:	1000081e 	bne	r2,zero,10144d4 <OSTaskNameSet+0x124>
 10144b4:	e0bffa17 	ldw	r2,-24(fp)
 10144b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10144bc:	e0bff817 	ldw	r2,-32(fp)
 10144c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10144c4:	e0ffff17 	ldw	r3,-4(fp)
 10144c8:	008010c4 	movi	r2,67
 10144cc:	18800005 	stb	r2,0(r3)
        return;
 10144d0:	00002306 	br	1014560 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 10144d4:	e0bffb17 	ldw	r2,-20(fp)
 10144d8:	10800058 	cmpnei	r2,r2,1
 10144dc:	1000081e 	bne	r2,zero,1014500 <OSTaskNameSet+0x150>
 10144e0:	e0bffa17 	ldw	r2,-24(fp)
 10144e4:	e0bff715 	stw	r2,-36(fp)
 10144e8:	e0bff717 	ldw	r2,-36(fp)
 10144ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10144f0:	e0ffff17 	ldw	r3,-4(fp)
 10144f4:	008010c4 	movi	r2,67
 10144f8:	18800005 	stb	r2,0(r3)
        return;
 10144fc:	00001806 	br	1014560 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 1014500:	e13ffe17 	ldw	r4,-8(fp)
 1014504:	100df540 	call	100df54 <OS_StrLen>
 1014508:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 101450c:	e0bffc03 	ldbu	r2,-16(fp)
 1014510:	10800830 	cmpltui	r2,r2,32
 1014514:	1000081e 	bne	r2,zero,1014538 <OSTaskNameSet+0x188>
 1014518:	e0bffa17 	ldw	r2,-24(fp)
 101451c:	e0bff615 	stw	r2,-40(fp)
 1014520:	e0bff617 	ldw	r2,-40(fp)
 1014524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 1014528:	e0ffff17 	ldw	r3,-4(fp)
 101452c:	00801044 	movi	r2,65
 1014530:	18800005 	stb	r2,0(r3)
        return;
 1014534:	00000a06 	br	1014560 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 1014538:	e0bffb17 	ldw	r2,-20(fp)
 101453c:	11001304 	addi	r4,r2,76
 1014540:	e17ffe17 	ldw	r5,-8(fp)
 1014544:	100ded40 	call	100ded4 <OS_StrCopy>
 1014548:	e0bffa17 	ldw	r2,-24(fp)
 101454c:	e0bff515 	stw	r2,-44(fp)
 1014550:	e0bff517 	ldw	r2,-44(fp)
 1014554:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1014558:	e0bfff17 	ldw	r2,-4(fp)
 101455c:	10000005 	stb	zero,0(r2)
}
 1014560:	e037883a 	mov	sp,fp
 1014564:	dfc00117 	ldw	ra,4(sp)
 1014568:	df000017 	ldw	fp,0(sp)
 101456c:	dec00204 	addi	sp,sp,8
 1014570:	f800283a 	ret

01014574 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 1014574:	defff304 	addi	sp,sp,-52
 1014578:	dfc00c15 	stw	ra,48(sp)
 101457c:	df000b15 	stw	fp,44(sp)
 1014580:	df000b04 	addi	fp,sp,44
 1014584:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1014588:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 101458c:	e0bffe03 	ldbu	r2,-8(fp)
 1014590:	10800530 	cmpltui	r2,r2,20
 1014594:	1000031e 	bne	r2,zero,10145a4 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 1014598:	00800a84 	movi	r2,42
 101459c:	e0bfff15 	stw	r2,-4(fp)
 10145a0:	00007406 	br	1014774 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10145a4:	0005303a 	rdctl	r2,status
 10145a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10145ac:	e0fffb17 	ldw	r3,-20(fp)
 10145b0:	00bfff84 	movi	r2,-2
 10145b4:	1884703a 	and	r2,r3,r2
 10145b8:	1001703a 	wrctl	status,r2
  
  return context;
 10145bc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10145c0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 10145c4:	e0bffe03 	ldbu	r2,-8(fp)
 10145c8:	00c040f4 	movhi	r3,259
 10145cc:	18fb2404 	addi	r3,r3,-4976
 10145d0:	1085883a 	add	r2,r2,r2
 10145d4:	1085883a 	add	r2,r2,r2
 10145d8:	10c5883a 	add	r2,r2,r3
 10145dc:	10800017 	ldw	r2,0(r2)
 10145e0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 10145e4:	e0bffd17 	ldw	r2,-12(fp)
 10145e8:	1004c03a 	cmpne	r2,r2,zero
 10145ec:	1000071e 	bne	r2,zero,101460c <OSTaskResume+0x98>
 10145f0:	e0bffc17 	ldw	r2,-16(fp)
 10145f4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10145f8:	e0bffa17 	ldw	r2,-24(fp)
 10145fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 1014600:	00801184 	movi	r2,70
 1014604:	e0bfff15 	stw	r2,-4(fp)
 1014608:	00005a06 	br	1014774 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 101460c:	e0bffd17 	ldw	r2,-12(fp)
 1014610:	10800058 	cmpnei	r2,r2,1
 1014614:	1000071e 	bne	r2,zero,1014634 <OSTaskResume+0xc0>
 1014618:	e0bffc17 	ldw	r2,-16(fp)
 101461c:	e0bff915 	stw	r2,-28(fp)
 1014620:	e0bff917 	ldw	r2,-28(fp)
 1014624:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014628:	008010c4 	movi	r2,67
 101462c:	e0bfff15 	stw	r2,-4(fp)
 1014630:	00005006 	br	1014774 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 1014634:	e0bffd17 	ldw	r2,-12(fp)
 1014638:	10800c03 	ldbu	r2,48(r2)
 101463c:	10803fcc 	andi	r2,r2,255
 1014640:	1080020c 	andi	r2,r2,8
 1014644:	1005003a 	cmpeq	r2,r2,zero
 1014648:	1000441e 	bne	r2,zero,101475c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 101464c:	e0bffd17 	ldw	r2,-12(fp)
 1014650:	10c00c03 	ldbu	r3,48(r2)
 1014654:	00bffdc4 	movi	r2,-9
 1014658:	1884703a 	and	r2,r3,r2
 101465c:	1007883a 	mov	r3,r2
 1014660:	e0bffd17 	ldw	r2,-12(fp)
 1014664:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 1014668:	e0bffd17 	ldw	r2,-12(fp)
 101466c:	10800c03 	ldbu	r2,48(r2)
 1014670:	10803fcc 	andi	r2,r2,255
 1014674:	1004c03a 	cmpne	r2,r2,zero
 1014678:	1000321e 	bne	r2,zero,1014744 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 101467c:	e0bffd17 	ldw	r2,-12(fp)
 1014680:	10800b8b 	ldhu	r2,46(r2)
 1014684:	10bfffcc 	andi	r2,r2,65535
 1014688:	1004c03a 	cmpne	r2,r2,zero
 101468c:	1000281e 	bne	r2,zero,1014730 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 1014690:	e0bffd17 	ldw	r2,-12(fp)
 1014694:	10c00d83 	ldbu	r3,54(r2)
 1014698:	008040b4 	movhi	r2,258
 101469c:	10b3c004 	addi	r2,r2,-12544
 10146a0:	10800003 	ldbu	r2,0(r2)
 10146a4:	1884b03a 	or	r2,r3,r2
 10146a8:	1007883a 	mov	r3,r2
 10146ac:	008040b4 	movhi	r2,258
 10146b0:	10b3c004 	addi	r2,r2,-12544
 10146b4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 10146b8:	e0bffd17 	ldw	r2,-12(fp)
 10146bc:	10800d03 	ldbu	r2,52(r2)
 10146c0:	11003fcc 	andi	r4,r2,255
 10146c4:	e0bffd17 	ldw	r2,-12(fp)
 10146c8:	10800d03 	ldbu	r2,52(r2)
 10146cc:	10c03fcc 	andi	r3,r2,255
 10146d0:	008040b4 	movhi	r2,258
 10146d4:	10b3c044 	addi	r2,r2,-12543
 10146d8:	10c5883a 	add	r2,r2,r3
 10146dc:	10c00003 	ldbu	r3,0(r2)
 10146e0:	e0bffd17 	ldw	r2,-12(fp)
 10146e4:	10800d43 	ldbu	r2,53(r2)
 10146e8:	1884b03a 	or	r2,r3,r2
 10146ec:	1007883a 	mov	r3,r2
 10146f0:	008040b4 	movhi	r2,258
 10146f4:	10b3c044 	addi	r2,r2,-12543
 10146f8:	1105883a 	add	r2,r2,r4
 10146fc:	10c00005 	stb	r3,0(r2)
 1014700:	e0bffc17 	ldw	r2,-16(fp)
 1014704:	e0bff815 	stw	r2,-32(fp)
 1014708:	e0bff817 	ldw	r2,-32(fp)
 101470c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 1014710:	008040b4 	movhi	r2,258
 1014714:	10b3b304 	addi	r2,r2,-12596
 1014718:	10800003 	ldbu	r2,0(r2)
 101471c:	10803fcc 	andi	r2,r2,255
 1014720:	10800058 	cmpnei	r2,r2,1
 1014724:	10000b1e 	bne	r2,zero,1014754 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 1014728:	100dd900 	call	100dd90 <OS_Sched>
 101472c:	00000906 	br	1014754 <OSTaskResume+0x1e0>
 1014730:	e0bffc17 	ldw	r2,-16(fp)
 1014734:	e0bff715 	stw	r2,-36(fp)
 1014738:	e0bff717 	ldw	r2,-36(fp)
 101473c:	1001703a 	wrctl	status,r2
 1014740:	00000406 	br	1014754 <OSTaskResume+0x1e0>
 1014744:	e0bffc17 	ldw	r2,-16(fp)
 1014748:	e0bff615 	stw	r2,-40(fp)
 101474c:	e0bff617 	ldw	r2,-40(fp)
 1014750:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 1014754:	e03fff15 	stw	zero,-4(fp)
 1014758:	00000606 	br	1014774 <OSTaskResume+0x200>
 101475c:	e0bffc17 	ldw	r2,-16(fp)
 1014760:	e0bff515 	stw	r2,-44(fp)
 1014764:	e0bff517 	ldw	r2,-44(fp)
 1014768:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 101476c:	00801104 	movi	r2,68
 1014770:	e0bfff15 	stw	r2,-4(fp)
 1014774:	e0bfff17 	ldw	r2,-4(fp)
}
 1014778:	e037883a 	mov	sp,fp
 101477c:	dfc00117 	ldw	ra,4(sp)
 1014780:	df000017 	ldw	fp,0(sp)
 1014784:	dec00204 	addi	sp,sp,8
 1014788:	f800283a 	ret

0101478c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 101478c:	defff204 	addi	sp,sp,-56
 1014790:	df000d15 	stw	fp,52(sp)
 1014794:	df000d04 	addi	fp,sp,52
 1014798:	e17ffe15 	stw	r5,-8(fp)
 101479c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 10147a0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 10147a4:	e0bffd03 	ldbu	r2,-12(fp)
 10147a8:	10800570 	cmpltui	r2,r2,21
 10147ac:	1000061e 	bne	r2,zero,10147c8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 10147b0:	e0bffd03 	ldbu	r2,-12(fp)
 10147b4:	10803fe0 	cmpeqi	r2,r2,255
 10147b8:	1000031e 	bne	r2,zero,10147c8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 10147bc:	00800a84 	movi	r2,42
 10147c0:	e0bfff15 	stw	r2,-4(fp)
 10147c4:	00006b06 	br	1014974 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 10147c8:	e0bffe17 	ldw	r2,-8(fp)
 10147cc:	1004c03a 	cmpne	r2,r2,zero
 10147d0:	1000031e 	bne	r2,zero,10147e0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 10147d4:	00800244 	movi	r2,9
 10147d8:	e0bfff15 	stw	r2,-4(fp)
 10147dc:	00006506 	br	1014974 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 10147e0:	e0bffe17 	ldw	r2,-8(fp)
 10147e4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 10147e8:	e0bffe17 	ldw	r2,-8(fp)
 10147ec:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10147f0:	0005303a 	rdctl	r2,status
 10147f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10147f8:	e0fff717 	ldw	r3,-36(fp)
 10147fc:	00bfff84 	movi	r2,-2
 1014800:	1884703a 	and	r2,r3,r2
 1014804:	1001703a 	wrctl	status,r2
  
  return context;
 1014808:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 101480c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 1014810:	e0bffd03 	ldbu	r2,-12(fp)
 1014814:	10803fd8 	cmpnei	r2,r2,255
 1014818:	1000051e 	bne	r2,zero,1014830 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 101481c:	008040b4 	movhi	r2,258
 1014820:	10b3c304 	addi	r2,r2,-12532
 1014824:	10800017 	ldw	r2,0(r2)
 1014828:	10800c83 	ldbu	r2,50(r2)
 101482c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014830:	e0bffd03 	ldbu	r2,-12(fp)
 1014834:	00c040f4 	movhi	r3,259
 1014838:	18fb2404 	addi	r3,r3,-4976
 101483c:	1085883a 	add	r2,r2,r2
 1014840:	1085883a 	add	r2,r2,r2
 1014844:	10c5883a 	add	r2,r2,r3
 1014848:	10800017 	ldw	r2,0(r2)
 101484c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 1014850:	e0bffc17 	ldw	r2,-16(fp)
 1014854:	1004c03a 	cmpne	r2,r2,zero
 1014858:	1000071e 	bne	r2,zero,1014878 <OSTaskStkChk+0xec>
 101485c:	e0bff817 	ldw	r2,-32(fp)
 1014860:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014864:	e0bff617 	ldw	r2,-40(fp)
 1014868:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101486c:	008010c4 	movi	r2,67
 1014870:	e0bfff15 	stw	r2,-4(fp)
 1014874:	00003f06 	br	1014974 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 1014878:	e0bffc17 	ldw	r2,-16(fp)
 101487c:	10800058 	cmpnei	r2,r2,1
 1014880:	1000071e 	bne	r2,zero,10148a0 <OSTaskStkChk+0x114>
 1014884:	e0bff817 	ldw	r2,-32(fp)
 1014888:	e0bff515 	stw	r2,-44(fp)
 101488c:	e0bff517 	ldw	r2,-44(fp)
 1014890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014894:	008010c4 	movi	r2,67
 1014898:	e0bfff15 	stw	r2,-4(fp)
 101489c:	00003506 	br	1014974 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 10148a0:	e0bffc17 	ldw	r2,-16(fp)
 10148a4:	1080040b 	ldhu	r2,16(r2)
 10148a8:	10bfffcc 	andi	r2,r2,65535
 10148ac:	1080004c 	andi	r2,r2,1
 10148b0:	1004c03a 	cmpne	r2,r2,zero
 10148b4:	1000071e 	bne	r2,zero,10148d4 <OSTaskStkChk+0x148>
 10148b8:	e0bff817 	ldw	r2,-32(fp)
 10148bc:	e0bff415 	stw	r2,-48(fp)
 10148c0:	e0bff417 	ldw	r2,-48(fp)
 10148c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 10148c8:	00801144 	movi	r2,69
 10148cc:	e0bfff15 	stw	r2,-4(fp)
 10148d0:	00002806 	br	1014974 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 10148d4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 10148d8:	e0bffc17 	ldw	r2,-16(fp)
 10148dc:	10800317 	ldw	r2,12(r2)
 10148e0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 10148e4:	e0bffc17 	ldw	r2,-16(fp)
 10148e8:	10800217 	ldw	r2,8(r2)
 10148ec:	e0bffb15 	stw	r2,-20(fp)
 10148f0:	e0bff817 	ldw	r2,-32(fp)
 10148f4:	e0bff315 	stw	r2,-52(fp)
 10148f8:	e0bff317 	ldw	r2,-52(fp)
 10148fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1014900:	00000306 	br	1014910 <OSTaskStkChk+0x184>
        nfree++;
 1014904:	e0bffa17 	ldw	r2,-24(fp)
 1014908:	10800044 	addi	r2,r2,1
 101490c:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 1014910:	e0bffb17 	ldw	r2,-20(fp)
 1014914:	10800017 	ldw	r2,0(r2)
 1014918:	1005003a 	cmpeq	r2,r2,zero
 101491c:	1007883a 	mov	r3,r2
 1014920:	e0bffb17 	ldw	r2,-20(fp)
 1014924:	10800104 	addi	r2,r2,4
 1014928:	e0bffb15 	stw	r2,-20(fp)
 101492c:	18803fcc 	andi	r2,r3,255
 1014930:	1004c03a 	cmpne	r2,r2,zero
 1014934:	103ff31e 	bne	r2,zero,1014904 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 1014938:	e0bffa17 	ldw	r2,-24(fp)
 101493c:	1085883a 	add	r2,r2,r2
 1014940:	1085883a 	add	r2,r2,r2
 1014944:	1007883a 	mov	r3,r2
 1014948:	e0bffe17 	ldw	r2,-8(fp)
 101494c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 1014950:	e0fff917 	ldw	r3,-28(fp)
 1014954:	e0bffa17 	ldw	r2,-24(fp)
 1014958:	1885c83a 	sub	r2,r3,r2
 101495c:	1085883a 	add	r2,r2,r2
 1014960:	1085883a 	add	r2,r2,r2
 1014964:	1007883a 	mov	r3,r2
 1014968:	e0bffe17 	ldw	r2,-8(fp)
 101496c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 1014970:	e03fff15 	stw	zero,-4(fp)
 1014974:	e0bfff17 	ldw	r2,-4(fp)
}
 1014978:	e037883a 	mov	sp,fp
 101497c:	df000017 	ldw	fp,0(sp)
 1014980:	dec00104 	addi	sp,sp,4
 1014984:	f800283a 	ret

01014988 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 1014988:	defff404 	addi	sp,sp,-48
 101498c:	dfc00b15 	stw	ra,44(sp)
 1014990:	df000a15 	stw	fp,40(sp)
 1014994:	df000a04 	addi	fp,sp,40
 1014998:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101499c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 10149a0:	e0bffe03 	ldbu	r2,-8(fp)
 10149a4:	10800518 	cmpnei	r2,r2,20
 10149a8:	1000031e 	bne	r2,zero,10149b8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 10149ac:	008011c4 	movi	r2,71
 10149b0:	e0bfff15 	stw	r2,-4(fp)
 10149b4:	00007906 	br	1014b9c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 10149b8:	e0bffe03 	ldbu	r2,-8(fp)
 10149bc:	10800530 	cmpltui	r2,r2,20
 10149c0:	1000061e 	bne	r2,zero,10149dc <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 10149c4:	e0bffe03 	ldbu	r2,-8(fp)
 10149c8:	10803fe0 	cmpeqi	r2,r2,255
 10149cc:	1000031e 	bne	r2,zero,10149dc <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 10149d0:	00800a84 	movi	r2,42
 10149d4:	e0bfff15 	stw	r2,-4(fp)
 10149d8:	00007006 	br	1014b9c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10149dc:	0005303a 	rdctl	r2,status
 10149e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10149e4:	e0fff917 	ldw	r3,-28(fp)
 10149e8:	00bfff84 	movi	r2,-2
 10149ec:	1884703a 	and	r2,r3,r2
 10149f0:	1001703a 	wrctl	status,r2
  
  return context;
 10149f4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 10149f8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 10149fc:	e0bffe03 	ldbu	r2,-8(fp)
 1014a00:	10803fd8 	cmpnei	r2,r2,255
 1014a04:	1000081e 	bne	r2,zero,1014a28 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 1014a08:	008040b4 	movhi	r2,258
 1014a0c:	10b3c304 	addi	r2,r2,-12532
 1014a10:	10800017 	ldw	r2,0(r2)
 1014a14:	10800c83 	ldbu	r2,50(r2)
 1014a18:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 1014a1c:	00800044 	movi	r2,1
 1014a20:	e0bffd05 	stb	r2,-12(fp)
 1014a24:	00000b06 	br	1014a54 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 1014a28:	008040b4 	movhi	r2,258
 1014a2c:	10b3c304 	addi	r2,r2,-12532
 1014a30:	10800017 	ldw	r2,0(r2)
 1014a34:	10800c83 	ldbu	r2,50(r2)
 1014a38:	10c03fcc 	andi	r3,r2,255
 1014a3c:	e0bffe03 	ldbu	r2,-8(fp)
 1014a40:	1880031e 	bne	r3,r2,1014a50 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 1014a44:	00800044 	movi	r2,1
 1014a48:	e0bffd05 	stb	r2,-12(fp)
 1014a4c:	00000106 	br	1014a54 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 1014a50:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014a54:	e0bffe03 	ldbu	r2,-8(fp)
 1014a58:	00c040f4 	movhi	r3,259
 1014a5c:	18fb2404 	addi	r3,r3,-4976
 1014a60:	1085883a 	add	r2,r2,r2
 1014a64:	1085883a 	add	r2,r2,r2
 1014a68:	10c5883a 	add	r2,r2,r3
 1014a6c:	10800017 	ldw	r2,0(r2)
 1014a70:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 1014a74:	e0bffc17 	ldw	r2,-16(fp)
 1014a78:	1004c03a 	cmpne	r2,r2,zero
 1014a7c:	1000071e 	bne	r2,zero,1014a9c <OSTaskSuspend+0x114>
 1014a80:	e0bffa17 	ldw	r2,-24(fp)
 1014a84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014a88:	e0bff817 	ldw	r2,-32(fp)
 1014a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 1014a90:	00801204 	movi	r2,72
 1014a94:	e0bfff15 	stw	r2,-4(fp)
 1014a98:	00004006 	br	1014b9c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 1014a9c:	e0bffc17 	ldw	r2,-16(fp)
 1014aa0:	10800058 	cmpnei	r2,r2,1
 1014aa4:	1000071e 	bne	r2,zero,1014ac4 <OSTaskSuspend+0x13c>
 1014aa8:	e0bffa17 	ldw	r2,-24(fp)
 1014aac:	e0bff715 	stw	r2,-36(fp)
 1014ab0:	e0bff717 	ldw	r2,-36(fp)
 1014ab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014ab8:	008010c4 	movi	r2,67
 1014abc:	e0bfff15 	stw	r2,-4(fp)
 1014ac0:	00003606 	br	1014b9c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 1014ac4:	e0bffc17 	ldw	r2,-16(fp)
 1014ac8:	10800d03 	ldbu	r2,52(r2)
 1014acc:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 1014ad0:	e13ffb03 	ldbu	r4,-20(fp)
 1014ad4:	e0fffb03 	ldbu	r3,-20(fp)
 1014ad8:	008040b4 	movhi	r2,258
 1014adc:	10b3c044 	addi	r2,r2,-12543
 1014ae0:	10c5883a 	add	r2,r2,r3
 1014ae4:	10800003 	ldbu	r2,0(r2)
 1014ae8:	1007883a 	mov	r3,r2
 1014aec:	e0bffc17 	ldw	r2,-16(fp)
 1014af0:	10800d43 	ldbu	r2,53(r2)
 1014af4:	0084303a 	nor	r2,zero,r2
 1014af8:	1884703a 	and	r2,r3,r2
 1014afc:	1007883a 	mov	r3,r2
 1014b00:	008040b4 	movhi	r2,258
 1014b04:	10b3c044 	addi	r2,r2,-12543
 1014b08:	1105883a 	add	r2,r2,r4
 1014b0c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 1014b10:	e0fffb03 	ldbu	r3,-20(fp)
 1014b14:	008040b4 	movhi	r2,258
 1014b18:	10b3c044 	addi	r2,r2,-12543
 1014b1c:	10c5883a 	add	r2,r2,r3
 1014b20:	10800003 	ldbu	r2,0(r2)
 1014b24:	10803fcc 	andi	r2,r2,255
 1014b28:	1004c03a 	cmpne	r2,r2,zero
 1014b2c:	10000c1e 	bne	r2,zero,1014b60 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 1014b30:	e0bffc17 	ldw	r2,-16(fp)
 1014b34:	10800d83 	ldbu	r2,54(r2)
 1014b38:	0084303a 	nor	r2,zero,r2
 1014b3c:	1007883a 	mov	r3,r2
 1014b40:	008040b4 	movhi	r2,258
 1014b44:	10b3c004 	addi	r2,r2,-12544
 1014b48:	10800003 	ldbu	r2,0(r2)
 1014b4c:	1884703a 	and	r2,r3,r2
 1014b50:	1007883a 	mov	r3,r2
 1014b54:	008040b4 	movhi	r2,258
 1014b58:	10b3c004 	addi	r2,r2,-12544
 1014b5c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 1014b60:	e0bffc17 	ldw	r2,-16(fp)
 1014b64:	10800c03 	ldbu	r2,48(r2)
 1014b68:	10800214 	ori	r2,r2,8
 1014b6c:	1007883a 	mov	r3,r2
 1014b70:	e0bffc17 	ldw	r2,-16(fp)
 1014b74:	10c00c05 	stb	r3,48(r2)
 1014b78:	e0bffa17 	ldw	r2,-24(fp)
 1014b7c:	e0bff615 	stw	r2,-40(fp)
 1014b80:	e0bff617 	ldw	r2,-40(fp)
 1014b84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 1014b88:	e0bffd03 	ldbu	r2,-12(fp)
 1014b8c:	10800058 	cmpnei	r2,r2,1
 1014b90:	1000011e 	bne	r2,zero,1014b98 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 1014b94:	100dd900 	call	100dd90 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1014b98:	e03fff15 	stw	zero,-4(fp)
 1014b9c:	e0bfff17 	ldw	r2,-4(fp)
}
 1014ba0:	e037883a 	mov	sp,fp
 1014ba4:	dfc00117 	ldw	ra,4(sp)
 1014ba8:	df000017 	ldw	fp,0(sp)
 1014bac:	dec00204 	addi	sp,sp,8
 1014bb0:	f800283a 	ret

01014bb4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 1014bb4:	defff504 	addi	sp,sp,-44
 1014bb8:	dfc00a15 	stw	ra,40(sp)
 1014bbc:	df000915 	stw	fp,36(sp)
 1014bc0:	df000904 	addi	fp,sp,36
 1014bc4:	e17ffe15 	stw	r5,-8(fp)
 1014bc8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014bcc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 1014bd0:	e0bffd03 	ldbu	r2,-12(fp)
 1014bd4:	10800570 	cmpltui	r2,r2,21
 1014bd8:	1000061e 	bne	r2,zero,1014bf4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 1014bdc:	e0bffd03 	ldbu	r2,-12(fp)
 1014be0:	10803fe0 	cmpeqi	r2,r2,255
 1014be4:	1000031e 	bne	r2,zero,1014bf4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 1014be8:	00800a84 	movi	r2,42
 1014bec:	e0bfff15 	stw	r2,-4(fp)
 1014bf0:	00003b06 	br	1014ce0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 1014bf4:	e0bffe17 	ldw	r2,-8(fp)
 1014bf8:	1004c03a 	cmpne	r2,r2,zero
 1014bfc:	1000031e 	bne	r2,zero,1014c0c <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 1014c00:	00800244 	movi	r2,9
 1014c04:	e0bfff15 	stw	r2,-4(fp)
 1014c08:	00003506 	br	1014ce0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014c0c:	0005303a 	rdctl	r2,status
 1014c10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014c14:	e0fffa17 	ldw	r3,-24(fp)
 1014c18:	00bfff84 	movi	r2,-2
 1014c1c:	1884703a 	and	r2,r3,r2
 1014c20:	1001703a 	wrctl	status,r2
  
  return context;
 1014c24:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1014c28:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 1014c2c:	e0bffd03 	ldbu	r2,-12(fp)
 1014c30:	10803fd8 	cmpnei	r2,r2,255
 1014c34:	1000051e 	bne	r2,zero,1014c4c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 1014c38:	008040b4 	movhi	r2,258
 1014c3c:	10b3c304 	addi	r2,r2,-12532
 1014c40:	10800017 	ldw	r2,0(r2)
 1014c44:	10800c83 	ldbu	r2,50(r2)
 1014c48:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1014c4c:	e0bffd03 	ldbu	r2,-12(fp)
 1014c50:	00c040f4 	movhi	r3,259
 1014c54:	18fb2404 	addi	r3,r3,-4976
 1014c58:	1085883a 	add	r2,r2,r2
 1014c5c:	1085883a 	add	r2,r2,r2
 1014c60:	10c5883a 	add	r2,r2,r3
 1014c64:	10800017 	ldw	r2,0(r2)
 1014c68:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 1014c6c:	e0bffc17 	ldw	r2,-16(fp)
 1014c70:	1004c03a 	cmpne	r2,r2,zero
 1014c74:	1000071e 	bne	r2,zero,1014c94 <OSTaskQuery+0xe0>
 1014c78:	e0bffb17 	ldw	r2,-20(fp)
 1014c7c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014c80:	e0bff917 	ldw	r2,-28(fp)
 1014c84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 1014c88:	00800a44 	movi	r2,41
 1014c8c:	e0bfff15 	stw	r2,-4(fp)
 1014c90:	00001306 	br	1014ce0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 1014c94:	e0bffc17 	ldw	r2,-16(fp)
 1014c98:	10800058 	cmpnei	r2,r2,1
 1014c9c:	1000071e 	bne	r2,zero,1014cbc <OSTaskQuery+0x108>
 1014ca0:	e0bffb17 	ldw	r2,-20(fp)
 1014ca4:	e0bff815 	stw	r2,-32(fp)
 1014ca8:	e0bff817 	ldw	r2,-32(fp)
 1014cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1014cb0:	008010c4 	movi	r2,67
 1014cb4:	e0bfff15 	stw	r2,-4(fp)
 1014cb8:	00000906 	br	1014ce0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 1014cbc:	e13ffe17 	ldw	r4,-8(fp)
 1014cc0:	e17ffc17 	ldw	r5,-16(fp)
 1014cc4:	01801b04 	movi	r6,108
 1014cc8:	100dd240 	call	100dd24 <OS_MemCopy>
 1014ccc:	e0bffb17 	ldw	r2,-20(fp)
 1014cd0:	e0bff715 	stw	r2,-36(fp)
 1014cd4:	e0bff717 	ldw	r2,-36(fp)
 1014cd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1014cdc:	e03fff15 	stw	zero,-4(fp)
 1014ce0:	e0bfff17 	ldw	r2,-4(fp)
}
 1014ce4:	e037883a 	mov	sp,fp
 1014ce8:	dfc00117 	ldw	ra,4(sp)
 1014cec:	df000017 	ldw	fp,0(sp)
 1014cf0:	dec00204 	addi	sp,sp,8
 1014cf4:	f800283a 	ret

01014cf8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 1014cf8:	defffc04 	addi	sp,sp,-16
 1014cfc:	df000315 	stw	fp,12(sp)
 1014d00:	df000304 	addi	fp,sp,12
 1014d04:	e13ffd15 	stw	r4,-12(fp)
 1014d08:	e17ffe15 	stw	r5,-8(fp)
 1014d0c:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 1014d10:	e0bfff0b 	ldhu	r2,-4(fp)
 1014d14:	1080004c 	andi	r2,r2,1
 1014d18:	10803fcc 	andi	r2,r2,255
 1014d1c:	1005003a 	cmpeq	r2,r2,zero
 1014d20:	1000101e 	bne	r2,zero,1014d64 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 1014d24:	e0bfff0b 	ldhu	r2,-4(fp)
 1014d28:	1080008c 	andi	r2,r2,2
 1014d2c:	1005003a 	cmpeq	r2,r2,zero
 1014d30:	10000c1e 	bne	r2,zero,1014d64 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1014d34:	00000806 	br	1014d58 <OS_TaskStkClr+0x60>
                size--;
 1014d38:	e0bffe17 	ldw	r2,-8(fp)
 1014d3c:	10bfffc4 	addi	r2,r2,-1
 1014d40:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 1014d44:	e0bffd17 	ldw	r2,-12(fp)
 1014d48:	10000015 	stw	zero,0(r2)
 1014d4c:	e0bffd17 	ldw	r2,-12(fp)
 1014d50:	10800104 	addi	r2,r2,4
 1014d54:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1014d58:	e0bffe17 	ldw	r2,-8(fp)
 1014d5c:	1004c03a 	cmpne	r2,r2,zero
 1014d60:	103ff51e 	bne	r2,zero,1014d38 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 1014d64:	e037883a 	mov	sp,fp
 1014d68:	df000017 	ldw	fp,0(sp)
 1014d6c:	dec00104 	addi	sp,sp,4
 1014d70:	f800283a 	ret

01014d74 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 1014d74:	defff904 	addi	sp,sp,-28
 1014d78:	dfc00615 	stw	ra,24(sp)
 1014d7c:	df000515 	stw	fp,20(sp)
 1014d80:	df000504 	addi	fp,sp,20
 1014d84:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1014d88:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1014d8c:	008040b4 	movhi	r2,258
 1014d90:	10b3c204 	addi	r2,r2,-12536
 1014d94:	10800003 	ldbu	r2,0(r2)
 1014d98:	10803fcc 	andi	r2,r2,255
 1014d9c:	1004c03a 	cmpne	r2,r2,zero
 1014da0:	1000421e 	bne	r2,zero,1014eac <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 1014da4:	e0bfff0b 	ldhu	r2,-4(fp)
 1014da8:	1005003a 	cmpeq	r2,r2,zero
 1014dac:	10003f1e 	bne	r2,zero,1014eac <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014db0:	0005303a 	rdctl	r2,status
 1014db4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014db8:	e0fffc17 	ldw	r3,-16(fp)
 1014dbc:	00bfff84 	movi	r2,-2
 1014dc0:	1884703a 	and	r2,r3,r2
 1014dc4:	1001703a 	wrctl	status,r2
  
  return context;
 1014dc8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 1014dcc:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 1014dd0:	008040b4 	movhi	r2,258
 1014dd4:	10b3c304 	addi	r2,r2,-12532
 1014dd8:	10800017 	ldw	r2,0(r2)
 1014ddc:	10800d03 	ldbu	r2,52(r2)
 1014de0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 1014de4:	e13ffe03 	ldbu	r4,-8(fp)
 1014de8:	e0fffe03 	ldbu	r3,-8(fp)
 1014dec:	008040b4 	movhi	r2,258
 1014df0:	10b3c044 	addi	r2,r2,-12543
 1014df4:	10c5883a 	add	r2,r2,r3
 1014df8:	10800003 	ldbu	r2,0(r2)
 1014dfc:	1007883a 	mov	r3,r2
 1014e00:	008040b4 	movhi	r2,258
 1014e04:	10b3c304 	addi	r2,r2,-12532
 1014e08:	10800017 	ldw	r2,0(r2)
 1014e0c:	10800d43 	ldbu	r2,53(r2)
 1014e10:	0084303a 	nor	r2,zero,r2
 1014e14:	1884703a 	and	r2,r3,r2
 1014e18:	1007883a 	mov	r3,r2
 1014e1c:	008040b4 	movhi	r2,258
 1014e20:	10b3c044 	addi	r2,r2,-12543
 1014e24:	1105883a 	add	r2,r2,r4
 1014e28:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 1014e2c:	e0fffe03 	ldbu	r3,-8(fp)
 1014e30:	008040b4 	movhi	r2,258
 1014e34:	10b3c044 	addi	r2,r2,-12543
 1014e38:	10c5883a 	add	r2,r2,r3
 1014e3c:	10800003 	ldbu	r2,0(r2)
 1014e40:	10803fcc 	andi	r2,r2,255
 1014e44:	1004c03a 	cmpne	r2,r2,zero
 1014e48:	10000e1e 	bne	r2,zero,1014e84 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1014e4c:	008040b4 	movhi	r2,258
 1014e50:	10b3c304 	addi	r2,r2,-12532
 1014e54:	10800017 	ldw	r2,0(r2)
 1014e58:	10800d83 	ldbu	r2,54(r2)
 1014e5c:	0084303a 	nor	r2,zero,r2
 1014e60:	1007883a 	mov	r3,r2
 1014e64:	008040b4 	movhi	r2,258
 1014e68:	10b3c004 	addi	r2,r2,-12544
 1014e6c:	10800003 	ldbu	r2,0(r2)
 1014e70:	1884703a 	and	r2,r3,r2
 1014e74:	1007883a 	mov	r3,r2
 1014e78:	008040b4 	movhi	r2,258
 1014e7c:	10b3c004 	addi	r2,r2,-12544
 1014e80:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 1014e84:	008040b4 	movhi	r2,258
 1014e88:	10b3c304 	addi	r2,r2,-12532
 1014e8c:	10c00017 	ldw	r3,0(r2)
 1014e90:	e0bfff0b 	ldhu	r2,-4(fp)
 1014e94:	18800b8d 	sth	r2,46(r3)
 1014e98:	e0bffd17 	ldw	r2,-12(fp)
 1014e9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014ea0:	e0bffb17 	ldw	r2,-20(fp)
 1014ea4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 1014ea8:	100dd900 	call	100dd90 <OS_Sched>
    }
}
 1014eac:	e037883a 	mov	sp,fp
 1014eb0:	dfc00117 	ldw	ra,4(sp)
 1014eb4:	df000017 	ldw	fp,0(sp)
 1014eb8:	dec00204 	addi	sp,sp,8
 1014ebc:	f800283a 	ret

01014ec0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 1014ec0:	defff504 	addi	sp,sp,-44
 1014ec4:	dfc00a15 	stw	ra,40(sp)
 1014ec8:	df000915 	stw	fp,36(sp)
 1014ecc:	dc400815 	stw	r17,32(sp)
 1014ed0:	dc000715 	stw	r16,28(sp)
 1014ed4:	df000704 	addi	fp,sp,28
 1014ed8:	e13ffb05 	stb	r4,-20(fp)
 1014edc:	e17ffc05 	stb	r5,-16(fp)
 1014ee0:	e1bffd05 	stb	r6,-12(fp)
 1014ee4:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1014ee8:	008040b4 	movhi	r2,258
 1014eec:	10b3c204 	addi	r2,r2,-12536
 1014ef0:	10800003 	ldbu	r2,0(r2)
 1014ef4:	10803fcc 	andi	r2,r2,255
 1014ef8:	1005003a 	cmpeq	r2,r2,zero
 1014efc:	1000031e 	bne	r2,zero,1014f0c <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
 1014f00:	00801544 	movi	r2,85
 1014f04:	e0bfff15 	stw	r2,-4(fp)
 1014f08:	00007b06 	br	10150f8 <OSTimeDlyHMSM+0x238>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 1014f0c:	e0bffb03 	ldbu	r2,-20(fp)
 1014f10:	1004c03a 	cmpne	r2,r2,zero
 1014f14:	10000c1e 	bne	r2,zero,1014f48 <OSTimeDlyHMSM+0x88>
        if (minutes == 0) {
 1014f18:	e0bffc03 	ldbu	r2,-16(fp)
 1014f1c:	1004c03a 	cmpne	r2,r2,zero
 1014f20:	1000091e 	bne	r2,zero,1014f48 <OSTimeDlyHMSM+0x88>
            if (seconds == 0) {
 1014f24:	e0bffd03 	ldbu	r2,-12(fp)
 1014f28:	1004c03a 	cmpne	r2,r2,zero
 1014f2c:	1000061e 	bne	r2,zero,1014f48 <OSTimeDlyHMSM+0x88>
                if (ms == 0) {
 1014f30:	e0bffe0b 	ldhu	r2,-8(fp)
 1014f34:	1004c03a 	cmpne	r2,r2,zero
 1014f38:	1000031e 	bne	r2,zero,1014f48 <OSTimeDlyHMSM+0x88>
                    return (OS_ERR_TIME_ZERO_DLY);
 1014f3c:	00801504 	movi	r2,84
 1014f40:	e0bfff15 	stw	r2,-4(fp)
 1014f44:	00006c06 	br	10150f8 <OSTimeDlyHMSM+0x238>
                }
            }
        }
    }
    if (minutes > 59) {
 1014f48:	e0bffc03 	ldbu	r2,-16(fp)
 1014f4c:	10800f30 	cmpltui	r2,r2,60
 1014f50:	1000031e 	bne	r2,zero,1014f60 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 1014f54:	00801444 	movi	r2,81
 1014f58:	e0bfff15 	stw	r2,-4(fp)
 1014f5c:	00006606 	br	10150f8 <OSTimeDlyHMSM+0x238>
    }
    if (seconds > 59) {
 1014f60:	e0bffd03 	ldbu	r2,-12(fp)
 1014f64:	10800f30 	cmpltui	r2,r2,60
 1014f68:	1000031e 	bne	r2,zero,1014f78 <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_SECONDS);
 1014f6c:	00801484 	movi	r2,82
 1014f70:	e0bfff15 	stw	r2,-4(fp)
 1014f74:	00006006 	br	10150f8 <OSTimeDlyHMSM+0x238>
    }
    if (ms > 999) {
 1014f78:	e0bffe0b 	ldhu	r2,-8(fp)
 1014f7c:	1080fa30 	cmpltui	r2,r2,1000
 1014f80:	1000031e 	bne	r2,zero,1014f90 <OSTimeDlyHMSM+0xd0>
        return (OS_ERR_TIME_INVALID_MS);
 1014f84:	008014c4 	movi	r2,83
 1014f88:	e0bfff15 	stw	r2,-4(fp)
 1014f8c:	00005a06 	br	10150f8 <OSTimeDlyHMSM+0x238>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 1014f90:	e13ffb03 	ldbu	r4,-20(fp)
 1014f94:	01438404 	movi	r5,3600
 1014f98:	10020280 	call	1002028 <__mulsi3>
 1014f9c:	1021883a 	mov	r16,r2
 1014fa0:	e13ffc03 	ldbu	r4,-16(fp)
 1014fa4:	01400f04 	movi	r5,60
 1014fa8:	10020280 	call	1002028 <__mulsi3>
 1014fac:	8087883a 	add	r3,r16,r2
 1014fb0:	e0bffd03 	ldbu	r2,-12(fp)
 1014fb4:	1889883a 	add	r4,r3,r2
 1014fb8:	100aec40 	call	100aec4 <__floatunsidf>
 1014fbc:	100b883a 	mov	r5,r2
 1014fc0:	180d883a 	mov	r6,r3
 1014fc4:	2809883a 	mov	r4,r5
 1014fc8:	300b883a 	mov	r5,r6
 1014fcc:	000d883a 	mov	r6,zero
 1014fd0:	01d023f4 	movhi	r7,16527
 1014fd4:	39d00004 	addi	r7,r7,16384
 1014fd8:	100a8580 	call	100a858 <__muldf3>
 1014fdc:	1009883a 	mov	r4,r2
 1014fe0:	180b883a 	mov	r5,r3
 1014fe4:	2021883a 	mov	r16,r4
 1014fe8:	2823883a 	mov	r17,r5
 1014fec:	e13ffe0b 	ldhu	r4,-8(fp)
 1014ff0:	100aec40 	call	100aec4 <__floatunsidf>
 1014ff4:	100b883a 	mov	r5,r2
 1014ff8:	180d883a 	mov	r6,r3
 1014ffc:	2809883a 	mov	r4,r5
 1015000:	300b883a 	mov	r5,r6
 1015004:	000d883a 	mov	r6,zero
 1015008:	01cff834 	movhi	r7,16352
 101500c:	1001a080 	call	1001a08 <__adddf3>
 1015010:	1009883a 	mov	r4,r2
 1015014:	180b883a 	mov	r5,r3
 1015018:	2005883a 	mov	r2,r4
 101501c:	2807883a 	mov	r3,r5
 1015020:	1009883a 	mov	r4,r2
 1015024:	180b883a 	mov	r5,r3
 1015028:	000d883a 	mov	r6,zero
 101502c:	01d023f4 	movhi	r7,16527
 1015030:	39d00004 	addi	r7,r7,16384
 1015034:	100a8580 	call	100a858 <__muldf3>
 1015038:	1009883a 	mov	r4,r2
 101503c:	180b883a 	mov	r5,r3
 1015040:	2005883a 	mov	r2,r4
 1015044:	2807883a 	mov	r3,r5
 1015048:	1009883a 	mov	r4,r2
 101504c:	180b883a 	mov	r5,r3
 1015050:	000d883a 	mov	r6,zero
 1015054:	01d023f4 	movhi	r7,16527
 1015058:	39d00004 	addi	r7,r7,16384
 101505c:	1001a7c0 	call	1001a7c <__divdf3>
 1015060:	1009883a 	mov	r4,r2
 1015064:	180b883a 	mov	r5,r3
 1015068:	2005883a 	mov	r2,r4
 101506c:	2807883a 	mov	r3,r5
 1015070:	8009883a 	mov	r4,r16
 1015074:	880b883a 	mov	r5,r17
 1015078:	100d883a 	mov	r6,r2
 101507c:	180f883a 	mov	r7,r3
 1015080:	1001a080 	call	1001a08 <__adddf3>
 1015084:	1009883a 	mov	r4,r2
 1015088:	180b883a 	mov	r5,r3
 101508c:	2005883a 	mov	r2,r4
 1015090:	2807883a 	mov	r3,r5
 1015094:	1009883a 	mov	r4,r2
 1015098:	180b883a 	mov	r5,r3
 101509c:	10190840 	call	1019084 <__fixunsdfsi>
 10150a0:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 10150a4:	e0bffa17 	ldw	r2,-24(fp)
 10150a8:	1004d43a 	srli	r2,r2,16
 10150ac:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 10150b0:	e0bffa17 	ldw	r2,-24(fp)
 10150b4:	10bfffcc 	andi	r2,r2,65535
 10150b8:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 10150bc:	e0bffa17 	ldw	r2,-24(fp)
 10150c0:	113fffcc 	andi	r4,r2,65535
 10150c4:	1014d740 	call	1014d74 <OSTimeDly>
    while (loops > 0) {
 10150c8:	00000706 	br	10150e8 <OSTimeDlyHMSM+0x228>
        OSTimeDly((INT16U)32768u);
 10150cc:	01200014 	movui	r4,32768
 10150d0:	1014d740 	call	1014d74 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 10150d4:	01200014 	movui	r4,32768
 10150d8:	1014d740 	call	1014d74 <OSTimeDly>
        loops--;
 10150dc:	e0bff90b 	ldhu	r2,-28(fp)
 10150e0:	10bfffc4 	addi	r2,r2,-1
 10150e4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 10150e8:	e0bff90b 	ldhu	r2,-28(fp)
 10150ec:	1004c03a 	cmpne	r2,r2,zero
 10150f0:	103ff61e 	bne	r2,zero,10150cc <OSTimeDlyHMSM+0x20c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 10150f4:	e03fff15 	stw	zero,-4(fp)
 10150f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10150fc:	e037883a 	mov	sp,fp
 1015100:	dfc00317 	ldw	ra,12(sp)
 1015104:	df000217 	ldw	fp,8(sp)
 1015108:	dc400117 	ldw	r17,4(sp)
 101510c:	dc000017 	ldw	r16,0(sp)
 1015110:	dec00404 	addi	sp,sp,16
 1015114:	f800283a 	ret

01015118 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 1015118:	defff404 	addi	sp,sp,-48
 101511c:	dfc00b15 	stw	ra,44(sp)
 1015120:	df000a15 	stw	fp,40(sp)
 1015124:	df000a04 	addi	fp,sp,40
 1015128:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 101512c:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 1015130:	e0bffe03 	ldbu	r2,-8(fp)
 1015134:	10800530 	cmpltui	r2,r2,20
 1015138:	1000031e 	bne	r2,zero,1015148 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 101513c:	00800a84 	movi	r2,42
 1015140:	e0bfff15 	stw	r2,-4(fp)
 1015144:	00007206 	br	1015310 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015148:	0005303a 	rdctl	r2,status
 101514c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015150:	e0fffb17 	ldw	r3,-20(fp)
 1015154:	00bfff84 	movi	r2,-2
 1015158:	1884703a 	and	r2,r3,r2
 101515c:	1001703a 	wrctl	status,r2
  
  return context;
 1015160:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1015164:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 1015168:	e0bffe03 	ldbu	r2,-8(fp)
 101516c:	00c040f4 	movhi	r3,259
 1015170:	18fb2404 	addi	r3,r3,-4976
 1015174:	1085883a 	add	r2,r2,r2
 1015178:	1085883a 	add	r2,r2,r2
 101517c:	10c5883a 	add	r2,r2,r3
 1015180:	10800017 	ldw	r2,0(r2)
 1015184:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 1015188:	e0bffd17 	ldw	r2,-12(fp)
 101518c:	1004c03a 	cmpne	r2,r2,zero
 1015190:	1000071e 	bne	r2,zero,10151b0 <OSTimeDlyResume+0x98>
 1015194:	e0bffc17 	ldw	r2,-16(fp)
 1015198:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101519c:	e0bffa17 	ldw	r2,-24(fp)
 10151a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10151a4:	008010c4 	movi	r2,67
 10151a8:	e0bfff15 	stw	r2,-4(fp)
 10151ac:	00005806 	br	1015310 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 10151b0:	e0bffd17 	ldw	r2,-12(fp)
 10151b4:	10800058 	cmpnei	r2,r2,1
 10151b8:	1000071e 	bne	r2,zero,10151d8 <OSTimeDlyResume+0xc0>
 10151bc:	e0bffc17 	ldw	r2,-16(fp)
 10151c0:	e0bff915 	stw	r2,-28(fp)
 10151c4:	e0bff917 	ldw	r2,-28(fp)
 10151c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 10151cc:	008010c4 	movi	r2,67
 10151d0:	e0bfff15 	stw	r2,-4(fp)
 10151d4:	00004e06 	br	1015310 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 10151d8:	e0bffd17 	ldw	r2,-12(fp)
 10151dc:	10800b8b 	ldhu	r2,46(r2)
 10151e0:	10bfffcc 	andi	r2,r2,65535
 10151e4:	1004c03a 	cmpne	r2,r2,zero
 10151e8:	1000071e 	bne	r2,zero,1015208 <OSTimeDlyResume+0xf0>
 10151ec:	e0bffc17 	ldw	r2,-16(fp)
 10151f0:	e0bff815 	stw	r2,-32(fp)
 10151f4:	e0bff817 	ldw	r2,-32(fp)
 10151f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 10151fc:	00801404 	movi	r2,80
 1015200:	e0bfff15 	stw	r2,-4(fp)
 1015204:	00004206 	br	1015310 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 1015208:	e0bffd17 	ldw	r2,-12(fp)
 101520c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 1015210:	e0bffd17 	ldw	r2,-12(fp)
 1015214:	10800c03 	ldbu	r2,48(r2)
 1015218:	10803fcc 	andi	r2,r2,255
 101521c:	10800dcc 	andi	r2,r2,55
 1015220:	1005003a 	cmpeq	r2,r2,zero
 1015224:	10000b1e 	bne	r2,zero,1015254 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 1015228:	e0bffd17 	ldw	r2,-12(fp)
 101522c:	10c00c03 	ldbu	r3,48(r2)
 1015230:	00bff204 	movi	r2,-56
 1015234:	1884703a 	and	r2,r3,r2
 1015238:	1007883a 	mov	r3,r2
 101523c:	e0bffd17 	ldw	r2,-12(fp)
 1015240:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 1015244:	e0fffd17 	ldw	r3,-12(fp)
 1015248:	00800044 	movi	r2,1
 101524c:	18800c45 	stb	r2,49(r3)
 1015250:	00000206 	br	101525c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 1015254:	e0bffd17 	ldw	r2,-12(fp)
 1015258:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 101525c:	e0bffd17 	ldw	r2,-12(fp)
 1015260:	10800c03 	ldbu	r2,48(r2)
 1015264:	10803fcc 	andi	r2,r2,255
 1015268:	1080020c 	andi	r2,r2,8
 101526c:	1004c03a 	cmpne	r2,r2,zero
 1015270:	1000221e 	bne	r2,zero,10152fc <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 1015274:	e0bffd17 	ldw	r2,-12(fp)
 1015278:	10c00d83 	ldbu	r3,54(r2)
 101527c:	008040b4 	movhi	r2,258
 1015280:	10b3c004 	addi	r2,r2,-12544
 1015284:	10800003 	ldbu	r2,0(r2)
 1015288:	1884b03a 	or	r2,r3,r2
 101528c:	1007883a 	mov	r3,r2
 1015290:	008040b4 	movhi	r2,258
 1015294:	10b3c004 	addi	r2,r2,-12544
 1015298:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101529c:	e0bffd17 	ldw	r2,-12(fp)
 10152a0:	10800d03 	ldbu	r2,52(r2)
 10152a4:	11003fcc 	andi	r4,r2,255
 10152a8:	e0bffd17 	ldw	r2,-12(fp)
 10152ac:	10800d03 	ldbu	r2,52(r2)
 10152b0:	10c03fcc 	andi	r3,r2,255
 10152b4:	008040b4 	movhi	r2,258
 10152b8:	10b3c044 	addi	r2,r2,-12543
 10152bc:	10c5883a 	add	r2,r2,r3
 10152c0:	10c00003 	ldbu	r3,0(r2)
 10152c4:	e0bffd17 	ldw	r2,-12(fp)
 10152c8:	10800d43 	ldbu	r2,53(r2)
 10152cc:	1884b03a 	or	r2,r3,r2
 10152d0:	1007883a 	mov	r3,r2
 10152d4:	008040b4 	movhi	r2,258
 10152d8:	10b3c044 	addi	r2,r2,-12543
 10152dc:	1105883a 	add	r2,r2,r4
 10152e0:	10c00005 	stb	r3,0(r2)
 10152e4:	e0bffc17 	ldw	r2,-16(fp)
 10152e8:	e0bff715 	stw	r2,-36(fp)
 10152ec:	e0bff717 	ldw	r2,-36(fp)
 10152f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 10152f4:	100dd900 	call	100dd90 <OS_Sched>
 10152f8:	00000406 	br	101530c <OSTimeDlyResume+0x1f4>
 10152fc:	e0bffc17 	ldw	r2,-16(fp)
 1015300:	e0bff615 	stw	r2,-40(fp)
 1015304:	e0bff617 	ldw	r2,-40(fp)
 1015308:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 101530c:	e03fff15 	stw	zero,-4(fp)
 1015310:	e0bfff17 	ldw	r2,-4(fp)
}
 1015314:	e037883a 	mov	sp,fp
 1015318:	dfc00117 	ldw	ra,4(sp)
 101531c:	df000017 	ldw	fp,0(sp)
 1015320:	dec00204 	addi	sp,sp,8
 1015324:	f800283a 	ret

01015328 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 1015328:	defffb04 	addi	sp,sp,-20
 101532c:	df000415 	stw	fp,16(sp)
 1015330:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1015334:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015338:	0005303a 	rdctl	r2,status
 101533c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1015340:	e0fffd17 	ldw	r3,-12(fp)
 1015344:	00bfff84 	movi	r2,-2
 1015348:	1884703a 	and	r2,r3,r2
 101534c:	1001703a 	wrctl	status,r2
  
  return context;
 1015350:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1015354:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 1015358:	008040b4 	movhi	r2,258
 101535c:	10b3c504 	addi	r2,r2,-12524
 1015360:	10800017 	ldw	r2,0(r2)
 1015364:	e0bfff15 	stw	r2,-4(fp)
 1015368:	e0bffe17 	ldw	r2,-8(fp)
 101536c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015370:	e0bffc17 	ldw	r2,-16(fp)
 1015374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 1015378:	e0bfff17 	ldw	r2,-4(fp)
}
 101537c:	e037883a 	mov	sp,fp
 1015380:	df000017 	ldw	fp,0(sp)
 1015384:	dec00104 	addi	sp,sp,4
 1015388:	f800283a 	ret

0101538c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 101538c:	defffb04 	addi	sp,sp,-20
 1015390:	df000415 	stw	fp,16(sp)
 1015394:	df000404 	addi	fp,sp,16
 1015398:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 101539c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10153a0:	0005303a 	rdctl	r2,status
 10153a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10153a8:	e0fffd17 	ldw	r3,-12(fp)
 10153ac:	00bfff84 	movi	r2,-2
 10153b0:	1884703a 	and	r2,r3,r2
 10153b4:	1001703a 	wrctl	status,r2
  
  return context;
 10153b8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10153bc:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 10153c0:	00c040b4 	movhi	r3,258
 10153c4:	18f3c504 	addi	r3,r3,-12524
 10153c8:	e0bfff17 	ldw	r2,-4(fp)
 10153cc:	18800015 	stw	r2,0(r3)
 10153d0:	e0bffe17 	ldw	r2,-8(fp)
 10153d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10153d8:	e0bffc17 	ldw	r2,-16(fp)
 10153dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 10153e0:	e037883a 	mov	sp,fp
 10153e4:	df000017 	ldw	fp,0(sp)
 10153e8:	dec00104 	addi	sp,sp,4
 10153ec:	f800283a 	ret

010153f0 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
 10153f0:	defff604 	addi	sp,sp,-40
 10153f4:	dfc00915 	stw	ra,36(sp)
 10153f8:	df000815 	stw	fp,32(sp)
 10153fc:	df000804 	addi	fp,sp,32
 1015400:	e13ffa15 	stw	r4,-24(fp)
 1015404:	e17ffb15 	stw	r5,-20(fp)
 1015408:	e1fffd15 	stw	r7,-12(fp)
 101540c:	e1bffc05 	stb	r6,-16(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015410:	e0800417 	ldw	r2,16(fp)
 1015414:	1004c03a 	cmpne	r2,r2,zero
 1015418:	1000021e 	bne	r2,zero,1015424 <OSTmrCreate+0x34>
        return ((OS_TMR *)0);
 101541c:	e03fff15 	stw	zero,-4(fp)
 1015420:	00006606 	br	10155bc <OSTmrCreate+0x1cc>
    }
    switch (opt) {
 1015424:	e0bffc03 	ldbu	r2,-16(fp)
 1015428:	e0bffe15 	stw	r2,-8(fp)
 101542c:	e0fffe17 	ldw	r3,-8(fp)
 1015430:	18800060 	cmpeqi	r2,r3,1
 1015434:	10000c1e 	bne	r2,zero,1015468 <OSTmrCreate+0x78>
 1015438:	e0fffe17 	ldw	r3,-8(fp)
 101543c:	188000a0 	cmpeqi	r2,r3,2
 1015440:	1000011e 	bne	r2,zero,1015448 <OSTmrCreate+0x58>
 1015444:	00001006 	br	1015488 <OSTmrCreate+0x98>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
 1015448:	e0bffb17 	ldw	r2,-20(fp)
 101544c:	1004c03a 	cmpne	r2,r2,zero
 1015450:	1000121e 	bne	r2,zero,101549c <OSTmrCreate+0xac>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
 1015454:	e0c00417 	ldw	r3,16(fp)
 1015458:	00bfe0c4 	movi	r2,-125
 101545c:	18800005 	stb	r2,0(r3)
                 return ((OS_TMR *)0);
 1015460:	e03fff15 	stw	zero,-4(fp)
 1015464:	00005506 	br	10155bc <OSTmrCreate+0x1cc>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
 1015468:	e0bffa17 	ldw	r2,-24(fp)
 101546c:	1004c03a 	cmpne	r2,r2,zero
 1015470:	10000a1e 	bne	r2,zero,101549c <OSTmrCreate+0xac>
                 *perr = OS_ERR_TMR_INVALID_DLY;
 1015474:	e0c00417 	ldw	r3,16(fp)
 1015478:	00bfe084 	movi	r2,-126
 101547c:	18800005 	stb	r2,0(r3)
                 return ((OS_TMR *)0);
 1015480:	e03fff15 	stw	zero,-4(fp)
 1015484:	00004d06 	br	10155bc <OSTmrCreate+0x1cc>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
 1015488:	e0c00417 	ldw	r3,16(fp)
 101548c:	00bfe104 	movi	r2,-124
 1015490:	18800005 	stb	r2,0(r3)
             return ((OS_TMR *)0);
 1015494:	e03fff15 	stw	zero,-4(fp)
 1015498:	00004806 	br	10155bc <OSTmrCreate+0x1cc>
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 101549c:	008040b4 	movhi	r2,258
 10154a0:	10b3c204 	addi	r2,r2,-12536
 10154a4:	10800003 	ldbu	r2,0(r2)
 10154a8:	10803fcc 	andi	r2,r2,255
 10154ac:	1005003a 	cmpeq	r2,r2,zero
 10154b0:	1000051e 	bne	r2,zero,10154c8 <OSTmrCreate+0xd8>
        *perr  = OS_ERR_TMR_ISR;
 10154b4:	e0c00417 	ldw	r3,16(fp)
 10154b8:	00bfe2c4 	movi	r2,-117
 10154bc:	18800005 	stb	r2,0(r3)
        return ((OS_TMR *)0);
 10154c0:	e03fff15 	stw	zero,-4(fp)
 10154c4:	00003d06 	br	10155bc <OSTmrCreate+0x1cc>
    }
    OSTmr_Lock();
 10154c8:	10165a00 	call	10165a0 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
 10154cc:	1015f980 	call	1015f98 <OSTmr_Alloc>
 10154d0:	e0bff915 	stw	r2,-28(fp)
    if (ptmr == (OS_TMR *)0) {
 10154d4:	e0bff917 	ldw	r2,-28(fp)
 10154d8:	1004c03a 	cmpne	r2,r2,zero
 10154dc:	1000061e 	bne	r2,zero,10154f8 <OSTmrCreate+0x108>
        OSTmr_Unlock();
 10154e0:	10165dc0 	call	10165dc <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
 10154e4:	e0c00417 	ldw	r3,16(fp)
 10154e8:	00bfe184 	movi	r2,-122
 10154ec:	18800005 	stb	r2,0(r3)
        return ((OS_TMR *)0);
 10154f0:	e03fff15 	stw	zero,-4(fp)
 10154f4:	00003106 	br	10155bc <OSTmrCreate+0x1cc>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
 10154f8:	e0fff917 	ldw	r3,-28(fp)
 10154fc:	00800044 	movi	r2,1
 1015500:	18800c45 	stb	r2,49(r3)
    ptmr->OSTmrDly         = dly;
 1015504:	e0fff917 	ldw	r3,-28(fp)
 1015508:	e0bffa17 	ldw	r2,-24(fp)
 101550c:	18800615 	stw	r2,24(r3)
    ptmr->OSTmrPeriod      = period;
 1015510:	e0fff917 	ldw	r3,-28(fp)
 1015514:	e0bffb17 	ldw	r2,-20(fp)
 1015518:	18800715 	stw	r2,28(r3)
    ptmr->OSTmrOpt         = opt;
 101551c:	e0fff917 	ldw	r3,-28(fp)
 1015520:	e0bffc03 	ldbu	r2,-16(fp)
 1015524:	18800c05 	stb	r2,48(r3)
    ptmr->OSTmrCallback    = callback;
 1015528:	e0fff917 	ldw	r3,-28(fp)
 101552c:	e0bffd17 	ldw	r2,-12(fp)
 1015530:	18800115 	stw	r2,4(r3)
    ptmr->OSTmrCallbackArg = callback_arg;
 1015534:	e0fff917 	ldw	r3,-28(fp)
 1015538:	e0800217 	ldw	r2,8(fp)
 101553c:	18800215 	stw	r2,8(r3)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
 1015540:	e0800317 	ldw	r2,12(fp)
 1015544:	1005003a 	cmpeq	r2,r2,zero
 1015548:	1000171e 	bne	r2,zero,10155a8 <OSTmrCreate+0x1b8>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
 101554c:	e1000317 	ldw	r4,12(fp)
 1015550:	100df540 	call	100df54 <OS_StrLen>
 1015554:	e0bff805 	stb	r2,-32(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
 1015558:	e0bff803 	ldbu	r2,-32(fp)
 101555c:	10800428 	cmpgeui	r2,r2,16
 1015560:	1000051e 	bne	r2,zero,1015578 <OSTmrCreate+0x188>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
 1015564:	e0bff917 	ldw	r2,-28(fp)
 1015568:	11000804 	addi	r4,r2,32
 101556c:	e1400317 	ldw	r5,12(fp)
 1015570:	100ded40 	call	100ded4 <OS_StrCopy>
 1015574:	00000c06 	br	10155a8 <OSTmrCreate+0x1b8>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
 1015578:	e0fff917 	ldw	r3,-28(fp)
 101557c:	008008c4 	movi	r2,35
 1015580:	18800805 	stb	r2,32(r3)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
 1015584:	e0bff917 	ldw	r2,-28(fp)
 1015588:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
 101558c:	e0c00417 	ldw	r3,16(fp)
 1015590:	00bfe304 	movi	r2,-116
 1015594:	18800005 	stb	r2,0(r3)
            OSTmr_Unlock();
 1015598:	10165dc0 	call	10165dc <OSTmr_Unlock>
            return (ptmr);
 101559c:	e0bff917 	ldw	r2,-28(fp)
 10155a0:	e0bfff15 	stw	r2,-4(fp)
 10155a4:	00000506 	br	10155bc <OSTmrCreate+0x1cc>
        }
    }
#endif
    OSTmr_Unlock();
 10155a8:	10165dc0 	call	10165dc <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
 10155ac:	e0800417 	ldw	r2,16(fp)
 10155b0:	10000005 	stb	zero,0(r2)
    return (ptmr);
 10155b4:	e0fff917 	ldw	r3,-28(fp)
 10155b8:	e0ffff15 	stw	r3,-4(fp)
 10155bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10155c0:	e037883a 	mov	sp,fp
 10155c4:	dfc00117 	ldw	ra,4(sp)
 10155c8:	df000017 	ldw	fp,0(sp)
 10155cc:	dec00204 	addi	sp,sp,8
 10155d0:	f800283a 	ret

010155d4 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
 10155d4:	defffa04 	addi	sp,sp,-24
 10155d8:	dfc00515 	stw	ra,20(sp)
 10155dc:	df000415 	stw	fp,16(sp)
 10155e0:	df000404 	addi	fp,sp,16
 10155e4:	e13ffc15 	stw	r4,-16(fp)
 10155e8:	e17ffd15 	stw	r5,-12(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 10155ec:	e0bffd17 	ldw	r2,-12(fp)
 10155f0:	1004c03a 	cmpne	r2,r2,zero
 10155f4:	1000021e 	bne	r2,zero,1015600 <OSTmrDel+0x2c>
        return (OS_FALSE);
 10155f8:	e03fff15 	stw	zero,-4(fp)
 10155fc:	00004d06 	br	1015734 <OSTmrDel+0x160>
    }
    if (ptmr == (OS_TMR *)0) {
 1015600:	e0bffc17 	ldw	r2,-16(fp)
 1015604:	1004c03a 	cmpne	r2,r2,zero
 1015608:	1000051e 	bne	r2,zero,1015620 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
 101560c:	e0fffd17 	ldw	r3,-12(fp)
 1015610:	00bfe284 	movi	r2,-118
 1015614:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015618:	e03fff15 	stw	zero,-4(fp)
 101561c:	00004506 	br	1015734 <OSTmrDel+0x160>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 1015620:	e0bffc17 	ldw	r2,-16(fp)
 1015624:	10800003 	ldbu	r2,0(r2)
 1015628:	10803fcc 	andi	r2,r2,255
 101562c:	10801920 	cmpeqi	r2,r2,100
 1015630:	1000051e 	bne	r2,zero,1015648 <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015634:	e0fffd17 	ldw	r3,-12(fp)
 1015638:	00bfe244 	movi	r2,-119
 101563c:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015640:	e03fff15 	stw	zero,-4(fp)
 1015644:	00003b06 	br	1015734 <OSTmrDel+0x160>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 1015648:	008040b4 	movhi	r2,258
 101564c:	10b3c204 	addi	r2,r2,-12536
 1015650:	10800003 	ldbu	r2,0(r2)
 1015654:	10803fcc 	andi	r2,r2,255
 1015658:	1005003a 	cmpeq	r2,r2,zero
 101565c:	1000051e 	bne	r2,zero,1015674 <OSTmrDel+0xa0>
        *perr  = OS_ERR_TMR_ISR;
 1015660:	e0fffd17 	ldw	r3,-12(fp)
 1015664:	00bfe2c4 	movi	r2,-117
 1015668:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 101566c:	e03fff15 	stw	zero,-4(fp)
 1015670:	00003006 	br	1015734 <OSTmrDel+0x160>
    }
    OSTmr_Lock();
 1015674:	10165a00 	call	10165a0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015678:	e0bffc17 	ldw	r2,-16(fp)
 101567c:	10800c43 	ldbu	r2,49(r2)
 1015680:	10803fcc 	andi	r2,r2,255
 1015684:	e0bffe15 	stw	r2,-8(fp)
 1015688:	e0fffe17 	ldw	r3,-8(fp)
 101568c:	188000c8 	cmpgei	r2,r3,3
 1015690:	1000071e 	bne	r2,zero,10156b0 <OSTmrDel+0xdc>
 1015694:	e0fffe17 	ldw	r3,-8(fp)
 1015698:	18800048 	cmpgei	r2,r3,1
 101569c:	1000121e 	bne	r2,zero,10156e8 <OSTmrDel+0x114>
 10156a0:	e0fffe17 	ldw	r3,-8(fp)
 10156a4:	1805003a 	cmpeq	r2,r3,zero
 10156a8:	1000171e 	bne	r2,zero,1015708 <OSTmrDel+0x134>
 10156ac:	00001c06 	br	1015720 <OSTmrDel+0x14c>
 10156b0:	e0fffe17 	ldw	r3,-8(fp)
 10156b4:	188000e0 	cmpeqi	r2,r3,3
 10156b8:	1000011e 	bne	r2,zero,10156c0 <OSTmrDel+0xec>
 10156bc:	00001806 	br	1015720 <OSTmrDel+0x14c>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
 10156c0:	e13ffc17 	ldw	r4,-16(fp)
 10156c4:	10164a40 	call	10164a4 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 10156c8:	e13ffc17 	ldw	r4,-16(fp)
 10156cc:	10160540 	call	1016054 <OSTmr_Free>
             OSTmr_Unlock();
 10156d0:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 10156d4:	e0bffd17 	ldw	r2,-12(fp)
 10156d8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 10156dc:	00800044 	movi	r2,1
 10156e0:	e0bfff15 	stw	r2,-4(fp)
 10156e4:	00001306 	br	1015734 <OSTmrDel+0x160>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 10156e8:	e13ffc17 	ldw	r4,-16(fp)
 10156ec:	10160540 	call	1016054 <OSTmr_Free>
             OSTmr_Unlock();
 10156f0:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 10156f4:	e0bffd17 	ldw	r2,-12(fp)
 10156f8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 10156fc:	00c00044 	movi	r3,1
 1015700:	e0ffff15 	stw	r3,-4(fp)
 1015704:	00000b06 	br	1015734 <OSTmrDel+0x160>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
 1015708:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 101570c:	e0fffd17 	ldw	r3,-12(fp)
 1015710:	00bfe1c4 	movi	r2,-121
 1015714:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015718:	e03fff15 	stw	zero,-4(fp)
 101571c:	00000506 	br	1015734 <OSTmrDel+0x160>

        default:
             OSTmr_Unlock();
 1015720:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015724:	e0fffd17 	ldw	r3,-12(fp)
 1015728:	00bfe344 	movi	r2,-115
 101572c:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015730:	e03fff15 	stw	zero,-4(fp)
 1015734:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015738:	e037883a 	mov	sp,fp
 101573c:	dfc00117 	ldw	ra,4(sp)
 1015740:	df000017 	ldw	fp,0(sp)
 1015744:	dec00204 	addi	sp,sp,8
 1015748:	f800283a 	ret

0101574c <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
 101574c:	defff804 	addi	sp,sp,-32
 1015750:	dfc00715 	stw	ra,28(sp)
 1015754:	df000615 	stw	fp,24(sp)
 1015758:	df000604 	addi	fp,sp,24
 101575c:	e13ffb15 	stw	r4,-20(fp)
 1015760:	e17ffc15 	stw	r5,-16(fp)
 1015764:	e1bffd15 	stw	r6,-12(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 1015768:	e0bffd17 	ldw	r2,-12(fp)
 101576c:	1004c03a 	cmpne	r2,r2,zero
 1015770:	1000021e 	bne	r2,zero,101577c <OSTmrNameGet+0x30>
        return (0);
 1015774:	e03fff15 	stw	zero,-4(fp)
 1015778:	00004906 	br	10158a0 <OSTmrNameGet+0x154>
    }
    if (pdest == (INT8U *)0) {
 101577c:	e0bffc17 	ldw	r2,-16(fp)
 1015780:	1004c03a 	cmpne	r2,r2,zero
 1015784:	1000051e 	bne	r2,zero,101579c <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
 1015788:	e0fffd17 	ldw	r3,-12(fp)
 101578c:	00bfe204 	movi	r2,-120
 1015790:	18800005 	stb	r2,0(r3)
        return (0);
 1015794:	e03fff15 	stw	zero,-4(fp)
 1015798:	00004106 	br	10158a0 <OSTmrNameGet+0x154>
    }
    if (ptmr == (OS_TMR *)0) {
 101579c:	e0bffb17 	ldw	r2,-20(fp)
 10157a0:	1004c03a 	cmpne	r2,r2,zero
 10157a4:	1000051e 	bne	r2,zero,10157bc <OSTmrNameGet+0x70>
        *perr = OS_ERR_TMR_INVALID;
 10157a8:	e0fffd17 	ldw	r3,-12(fp)
 10157ac:	00bfe284 	movi	r2,-118
 10157b0:	18800005 	stb	r2,0(r3)
        return (0);
 10157b4:	e03fff15 	stw	zero,-4(fp)
 10157b8:	00003906 	br	10158a0 <OSTmrNameGet+0x154>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 10157bc:	e0bffb17 	ldw	r2,-20(fp)
 10157c0:	10800003 	ldbu	r2,0(r2)
 10157c4:	10803fcc 	andi	r2,r2,255
 10157c8:	10801920 	cmpeqi	r2,r2,100
 10157cc:	1000051e 	bne	r2,zero,10157e4 <OSTmrNameGet+0x98>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 10157d0:	e0fffd17 	ldw	r3,-12(fp)
 10157d4:	00bfe244 	movi	r2,-119
 10157d8:	18800005 	stb	r2,0(r3)
        return (0);
 10157dc:	e03fff15 	stw	zero,-4(fp)
 10157e0:	00002f06 	br	10158a0 <OSTmrNameGet+0x154>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 10157e4:	008040b4 	movhi	r2,258
 10157e8:	10b3c204 	addi	r2,r2,-12536
 10157ec:	10800003 	ldbu	r2,0(r2)
 10157f0:	10803fcc 	andi	r2,r2,255
 10157f4:	1005003a 	cmpeq	r2,r2,zero
 10157f8:	1000051e 	bne	r2,zero,1015810 <OSTmrNameGet+0xc4>
        *perr = OS_ERR_NAME_GET_ISR;
 10157fc:	e0fffd17 	ldw	r3,-12(fp)
 1015800:	00800444 	movi	r2,17
 1015804:	18800005 	stb	r2,0(r3)
        return (0);
 1015808:	e03fff15 	stw	zero,-4(fp)
 101580c:	00002406 	br	10158a0 <OSTmrNameGet+0x154>
    }
    OSTmr_Lock();
 1015810:	10165a00 	call	10165a0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015814:	e0bffb17 	ldw	r2,-20(fp)
 1015818:	10800c43 	ldbu	r2,49(r2)
 101581c:	10803fcc 	andi	r2,r2,255
 1015820:	e0bffe15 	stw	r2,-8(fp)
 1015824:	e0fffe17 	ldw	r3,-8(fp)
 1015828:	1805003a 	cmpeq	r2,r3,zero
 101582c:	1000111e 	bne	r2,zero,1015874 <OSTmrNameGet+0x128>
 1015830:	e0fffe17 	ldw	r3,-8(fp)
 1015834:	1804803a 	cmplt	r2,r3,zero
 1015838:	1000141e 	bne	r2,zero,101588c <OSTmrNameGet+0x140>
 101583c:	e0fffe17 	ldw	r3,-8(fp)
 1015840:	18800108 	cmpgei	r2,r3,4
 1015844:	1000111e 	bne	r2,zero,101588c <OSTmrNameGet+0x140>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
 1015848:	e0bffb17 	ldw	r2,-20(fp)
 101584c:	11400804 	addi	r5,r2,32
 1015850:	e13ffc17 	ldw	r4,-16(fp)
 1015854:	100ded40 	call	100ded4 <OS_StrCopy>
 1015858:	e0bffa05 	stb	r2,-24(fp)
             OSTmr_Unlock();
 101585c:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015860:	e0bffd17 	ldw	r2,-12(fp)
 1015864:	10000005 	stb	zero,0(r2)
             return (len);
 1015868:	e0bffa03 	ldbu	r2,-24(fp)
 101586c:	e0bfff15 	stw	r2,-4(fp)
 1015870:	00000b06 	br	10158a0 <OSTmrNameGet+0x154>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
 1015874:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015878:	e0fffd17 	ldw	r3,-12(fp)
 101587c:	00bfe1c4 	movi	r2,-121
 1015880:	18800005 	stb	r2,0(r3)
             return (0);
 1015884:	e03fff15 	stw	zero,-4(fp)
 1015888:	00000506 	br	10158a0 <OSTmrNameGet+0x154>

        default:
             OSTmr_Unlock();
 101588c:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015890:	e0fffd17 	ldw	r3,-12(fp)
 1015894:	00bfe344 	movi	r2,-115
 1015898:	18800005 	stb	r2,0(r3)
             return (0);
 101589c:	e03fff15 	stw	zero,-4(fp)
 10158a0:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 10158a4:	e037883a 	mov	sp,fp
 10158a8:	dfc00117 	ldw	ra,4(sp)
 10158ac:	df000017 	ldw	fp,0(sp)
 10158b0:	dec00204 	addi	sp,sp,8
 10158b4:	f800283a 	ret

010158b8 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
 10158b8:	defff904 	addi	sp,sp,-28
 10158bc:	dfc00615 	stw	ra,24(sp)
 10158c0:	df000515 	stw	fp,20(sp)
 10158c4:	df000504 	addi	fp,sp,20
 10158c8:	e13ffc15 	stw	r4,-16(fp)
 10158cc:	e17ffd15 	stw	r5,-12(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 10158d0:	e0bffd17 	ldw	r2,-12(fp)
 10158d4:	1004c03a 	cmpne	r2,r2,zero
 10158d8:	1000021e 	bne	r2,zero,10158e4 <OSTmrRemainGet+0x2c>
        return (0);
 10158dc:	e03fff15 	stw	zero,-4(fp)
 10158e0:	00006e06 	br	1015a9c <OSTmrRemainGet+0x1e4>
    }
    if (ptmr == (OS_TMR *)0) {
 10158e4:	e0bffc17 	ldw	r2,-16(fp)
 10158e8:	1004c03a 	cmpne	r2,r2,zero
 10158ec:	1000051e 	bne	r2,zero,1015904 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
 10158f0:	e0fffd17 	ldw	r3,-12(fp)
 10158f4:	00bfe284 	movi	r2,-118
 10158f8:	18800005 	stb	r2,0(r3)
        return (0);
 10158fc:	e03fff15 	stw	zero,-4(fp)
 1015900:	00006606 	br	1015a9c <OSTmrRemainGet+0x1e4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 1015904:	e0bffc17 	ldw	r2,-16(fp)
 1015908:	10800003 	ldbu	r2,0(r2)
 101590c:	10803fcc 	andi	r2,r2,255
 1015910:	10801920 	cmpeqi	r2,r2,100
 1015914:	1000051e 	bne	r2,zero,101592c <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015918:	e0fffd17 	ldw	r3,-12(fp)
 101591c:	00bfe244 	movi	r2,-119
 1015920:	18800005 	stb	r2,0(r3)
        return (0);
 1015924:	e03fff15 	stw	zero,-4(fp)
 1015928:	00005c06 	br	1015a9c <OSTmrRemainGet+0x1e4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 101592c:	008040b4 	movhi	r2,258
 1015930:	10b3c204 	addi	r2,r2,-12536
 1015934:	10800003 	ldbu	r2,0(r2)
 1015938:	10803fcc 	andi	r2,r2,255
 101593c:	1005003a 	cmpeq	r2,r2,zero
 1015940:	1000051e 	bne	r2,zero,1015958 <OSTmrRemainGet+0xa0>
        *perr = OS_ERR_TMR_ISR;
 1015944:	e0fffd17 	ldw	r3,-12(fp)
 1015948:	00bfe2c4 	movi	r2,-117
 101594c:	18800005 	stb	r2,0(r3)
        return (0);
 1015950:	e03fff15 	stw	zero,-4(fp)
 1015954:	00005106 	br	1015a9c <OSTmrRemainGet+0x1e4>
    }
    OSTmr_Lock();
 1015958:	10165a00 	call	10165a0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 101595c:	e0bffc17 	ldw	r2,-16(fp)
 1015960:	10800c43 	ldbu	r2,49(r2)
 1015964:	10803fcc 	andi	r2,r2,255
 1015968:	e0bffe15 	stw	r2,-8(fp)
 101596c:	e0fffe17 	ldw	r3,-8(fp)
 1015970:	18800060 	cmpeqi	r2,r3,1
 1015974:	10001b1e 	bne	r2,zero,10159e4 <OSTmrRemainGet+0x12c>
 1015978:	e0fffe17 	ldw	r3,-8(fp)
 101597c:	18800088 	cmpgei	r2,r3,2
 1015980:	1000041e 	bne	r2,zero,1015994 <OSTmrRemainGet+0xdc>
 1015984:	e0fffe17 	ldw	r3,-8(fp)
 1015988:	1805003a 	cmpeq	r2,r3,zero
 101598c:	1000381e 	bne	r2,zero,1015a70 <OSTmrRemainGet+0x1b8>
 1015990:	00003d06 	br	1015a88 <OSTmrRemainGet+0x1d0>
 1015994:	e0fffe17 	ldw	r3,-8(fp)
 1015998:	188000a0 	cmpeqi	r2,r3,2
 101599c:	10002f1e 	bne	r2,zero,1015a5c <OSTmrRemainGet+0x1a4>
 10159a0:	e0fffe17 	ldw	r3,-8(fp)
 10159a4:	188000e0 	cmpeqi	r2,r3,3
 10159a8:	1000011e 	bne	r2,zero,10159b0 <OSTmrRemainGet+0xf8>
 10159ac:	00003606 	br	1015a88 <OSTmrRemainGet+0x1d0>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
 10159b0:	e0bffc17 	ldw	r2,-16(fp)
 10159b4:	10c00517 	ldw	r3,20(r2)
 10159b8:	008040b4 	movhi	r2,258
 10159bc:	10b3c404 	addi	r2,r2,-12528
 10159c0:	10800017 	ldw	r2,0(r2)
 10159c4:	1885c83a 	sub	r2,r3,r2
 10159c8:	e0bffb15 	stw	r2,-20(fp)
             OSTmr_Unlock();
 10159cc:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
 10159d0:	e0bffd17 	ldw	r2,-12(fp)
 10159d4:	10000005 	stb	zero,0(r2)
             return (remain);
 10159d8:	e0bffb17 	ldw	r2,-20(fp)
 10159dc:	e0bfff15 	stw	r2,-4(fp)
 10159e0:	00002e06 	br	1015a9c <OSTmrRemainGet+0x1e4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
 10159e4:	e0bffc17 	ldw	r2,-16(fp)
 10159e8:	10800c03 	ldbu	r2,48(r2)
 10159ec:	10803fcc 	andi	r2,r2,255
 10159f0:	108000a0 	cmpeqi	r2,r2,2
 10159f4:	1000011e 	bne	r2,zero,10159fc <OSTmrRemainGet+0x144>
 10159f8:	00000f06 	br	1015a38 <OSTmrRemainGet+0x180>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
 10159fc:	e0bffc17 	ldw	r2,-16(fp)
 1015a00:	10800617 	ldw	r2,24(r2)
 1015a04:	1004c03a 	cmpne	r2,r2,zero
 1015a08:	1000041e 	bne	r2,zero,1015a1c <OSTmrRemainGet+0x164>
                          remain = ptmr->OSTmrPeriod;
 1015a0c:	e0bffc17 	ldw	r2,-16(fp)
 1015a10:	10800717 	ldw	r2,28(r2)
 1015a14:	e0bffb15 	stw	r2,-20(fp)
 1015a18:	00000306 	br	1015a28 <OSTmrRemainGet+0x170>
                      } else {
                          remain = ptmr->OSTmrDly;
 1015a1c:	e0bffc17 	ldw	r2,-16(fp)
 1015a20:	10800617 	ldw	r2,24(r2)
 1015a24:	e0bffb15 	stw	r2,-20(fp)
                      }
                      OSTmr_Unlock();
 1015a28:	10165dc0 	call	10165dc <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
 1015a2c:	e0bffd17 	ldw	r2,-12(fp)
 1015a30:	10000005 	stb	zero,0(r2)
                      break;
 1015a34:	00000606 	br	1015a50 <OSTmrRemainGet+0x198>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
 1015a38:	e0bffc17 	ldw	r2,-16(fp)
 1015a3c:	10800617 	ldw	r2,24(r2)
 1015a40:	e0bffb15 	stw	r2,-20(fp)
                      OSTmr_Unlock();
 1015a44:	10165dc0 	call	10165dc <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
 1015a48:	e0bffd17 	ldw	r2,-12(fp)
 1015a4c:	10000005 	stb	zero,0(r2)
                      break;
             }
             return (remain);
 1015a50:	e0fffb17 	ldw	r3,-20(fp)
 1015a54:	e0ffff15 	stw	r3,-4(fp)
 1015a58:	00001006 	br	1015a9c <OSTmrRemainGet+0x1e4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
 1015a5c:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015a60:	e0bffd17 	ldw	r2,-12(fp)
 1015a64:	10000005 	stb	zero,0(r2)
             return (0);
 1015a68:	e03fff15 	stw	zero,-4(fp)
 1015a6c:	00000b06 	br	1015a9c <OSTmrRemainGet+0x1e4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
 1015a70:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015a74:	e0fffd17 	ldw	r3,-12(fp)
 1015a78:	00bfe1c4 	movi	r2,-121
 1015a7c:	18800005 	stb	r2,0(r3)
             return (0);
 1015a80:	e03fff15 	stw	zero,-4(fp)
 1015a84:	00000506 	br	1015a9c <OSTmrRemainGet+0x1e4>

        default:
             OSTmr_Unlock();
 1015a88:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015a8c:	e0fffd17 	ldw	r3,-12(fp)
 1015a90:	00bfe344 	movi	r2,-115
 1015a94:	18800005 	stb	r2,0(r3)
             return (0);
 1015a98:	e03fff15 	stw	zero,-4(fp)
 1015a9c:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015aa0:	e037883a 	mov	sp,fp
 1015aa4:	dfc00117 	ldw	ra,4(sp)
 1015aa8:	df000017 	ldw	fp,0(sp)
 1015aac:	dec00204 	addi	sp,sp,8
 1015ab0:	f800283a 	ret

01015ab4 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
 1015ab4:	defffa04 	addi	sp,sp,-24
 1015ab8:	dfc00515 	stw	ra,20(sp)
 1015abc:	df000415 	stw	fp,16(sp)
 1015ac0:	df000404 	addi	fp,sp,16
 1015ac4:	e13ffd15 	stw	r4,-12(fp)
 1015ac8:	e17ffe15 	stw	r5,-8(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
 1015acc:	e0bffe17 	ldw	r2,-8(fp)
 1015ad0:	1004c03a 	cmpne	r2,r2,zero
 1015ad4:	1000021e 	bne	r2,zero,1015ae0 <OSTmrStateGet+0x2c>
        return (0);
 1015ad8:	e03fff15 	stw	zero,-4(fp)
 1015adc:	00002e06 	br	1015b98 <OSTmrStateGet+0xe4>
    }
    if (ptmr == (OS_TMR *)0) {
 1015ae0:	e0bffd17 	ldw	r2,-12(fp)
 1015ae4:	1004c03a 	cmpne	r2,r2,zero
 1015ae8:	1000051e 	bne	r2,zero,1015b00 <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
 1015aec:	e0fffe17 	ldw	r3,-8(fp)
 1015af0:	00bfe284 	movi	r2,-118
 1015af4:	18800005 	stb	r2,0(r3)
        return (0);
 1015af8:	e03fff15 	stw	zero,-4(fp)
 1015afc:	00002606 	br	1015b98 <OSTmrStateGet+0xe4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 1015b00:	e0bffd17 	ldw	r2,-12(fp)
 1015b04:	10800003 	ldbu	r2,0(r2)
 1015b08:	10803fcc 	andi	r2,r2,255
 1015b0c:	10801920 	cmpeqi	r2,r2,100
 1015b10:	1000051e 	bne	r2,zero,1015b28 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015b14:	e0fffe17 	ldw	r3,-8(fp)
 1015b18:	00bfe244 	movi	r2,-119
 1015b1c:	18800005 	stb	r2,0(r3)
        return (0);
 1015b20:	e03fff15 	stw	zero,-4(fp)
 1015b24:	00001c06 	br	1015b98 <OSTmrStateGet+0xe4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 1015b28:	008040b4 	movhi	r2,258
 1015b2c:	10b3c204 	addi	r2,r2,-12536
 1015b30:	10800003 	ldbu	r2,0(r2)
 1015b34:	10803fcc 	andi	r2,r2,255
 1015b38:	1005003a 	cmpeq	r2,r2,zero
 1015b3c:	1000051e 	bne	r2,zero,1015b54 <OSTmrStateGet+0xa0>
        *perr = OS_ERR_TMR_ISR;
 1015b40:	e0fffe17 	ldw	r3,-8(fp)
 1015b44:	00bfe2c4 	movi	r2,-117
 1015b48:	18800005 	stb	r2,0(r3)
        return (0);
 1015b4c:	e03fff15 	stw	zero,-4(fp)
 1015b50:	00001106 	br	1015b98 <OSTmrStateGet+0xe4>
    }
    OSTmr_Lock();
 1015b54:	10165a00 	call	10165a0 <OSTmr_Lock>
    state = ptmr->OSTmrState;
 1015b58:	e0bffd17 	ldw	r2,-12(fp)
 1015b5c:	10800c43 	ldbu	r2,49(r2)
 1015b60:	e0bffc05 	stb	r2,-16(fp)
    switch (state) {
 1015b64:	e0bffc03 	ldbu	r2,-16(fp)
 1015b68:	1005883a 	mov	r2,r2
 1015b6c:	10800128 	cmpgeui	r2,r2,4
 1015b70:	1000031e 	bne	r2,zero,1015b80 <OSTmrStateGet+0xcc>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
 1015b74:	e0bffe17 	ldw	r2,-8(fp)
 1015b78:	10000005 	stb	zero,0(r2)
             break;
 1015b7c:	00000306 	br	1015b8c <OSTmrStateGet+0xd8>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015b80:	e0fffe17 	ldw	r3,-8(fp)
 1015b84:	00bfe344 	movi	r2,-115
 1015b88:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTmr_Unlock();
 1015b8c:	10165dc0 	call	10165dc <OSTmr_Unlock>
    return (state);
 1015b90:	e0bffc03 	ldbu	r2,-16(fp)
 1015b94:	e0bfff15 	stw	r2,-4(fp)
 1015b98:	e0bfff17 	ldw	r2,-4(fp)
}
 1015b9c:	e037883a 	mov	sp,fp
 1015ba0:	dfc00117 	ldw	ra,4(sp)
 1015ba4:	df000017 	ldw	fp,0(sp)
 1015ba8:	dec00204 	addi	sp,sp,8
 1015bac:	f800283a 	ret

01015bb0 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
 1015bb0:	defffa04 	addi	sp,sp,-24
 1015bb4:	dfc00515 	stw	ra,20(sp)
 1015bb8:	df000415 	stw	fp,16(sp)
 1015bbc:	df000404 	addi	fp,sp,16
 1015bc0:	e13ffc15 	stw	r4,-16(fp)
 1015bc4:	e17ffd15 	stw	r5,-12(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
 1015bc8:	e0bffd17 	ldw	r2,-12(fp)
 1015bcc:	1004c03a 	cmpne	r2,r2,zero
 1015bd0:	1000021e 	bne	r2,zero,1015bdc <OSTmrStart+0x2c>
        return (OS_FALSE);
 1015bd4:	e03fff15 	stw	zero,-4(fp)
 1015bd8:	00004f06 	br	1015d18 <OSTmrStart+0x168>
    }
    if (ptmr == (OS_TMR *)0) {
 1015bdc:	e0bffc17 	ldw	r2,-16(fp)
 1015be0:	1004c03a 	cmpne	r2,r2,zero
 1015be4:	1000051e 	bne	r2,zero,1015bfc <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
 1015be8:	e0fffd17 	ldw	r3,-12(fp)
 1015bec:	00bfe284 	movi	r2,-118
 1015bf0:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015bf4:	e03fff15 	stw	zero,-4(fp)
 1015bf8:	00004706 	br	1015d18 <OSTmrStart+0x168>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 1015bfc:	e0bffc17 	ldw	r2,-16(fp)
 1015c00:	10800003 	ldbu	r2,0(r2)
 1015c04:	10803fcc 	andi	r2,r2,255
 1015c08:	10801920 	cmpeqi	r2,r2,100
 1015c0c:	1000051e 	bne	r2,zero,1015c24 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015c10:	e0fffd17 	ldw	r3,-12(fp)
 1015c14:	00bfe244 	movi	r2,-119
 1015c18:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015c1c:	e03fff15 	stw	zero,-4(fp)
 1015c20:	00003d06 	br	1015d18 <OSTmrStart+0x168>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 1015c24:	008040b4 	movhi	r2,258
 1015c28:	10b3c204 	addi	r2,r2,-12536
 1015c2c:	10800003 	ldbu	r2,0(r2)
 1015c30:	10803fcc 	andi	r2,r2,255
 1015c34:	1005003a 	cmpeq	r2,r2,zero
 1015c38:	1000051e 	bne	r2,zero,1015c50 <OSTmrStart+0xa0>
        *perr  = OS_ERR_TMR_ISR;
 1015c3c:	e0fffd17 	ldw	r3,-12(fp)
 1015c40:	00bfe2c4 	movi	r2,-117
 1015c44:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015c48:	e03fff15 	stw	zero,-4(fp)
 1015c4c:	00003206 	br	1015d18 <OSTmrStart+0x168>
    }
    OSTmr_Lock();
 1015c50:	10165a00 	call	10165a0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015c54:	e0bffc17 	ldw	r2,-16(fp)
 1015c58:	10800c43 	ldbu	r2,49(r2)
 1015c5c:	10803fcc 	andi	r2,r2,255
 1015c60:	e0bffe15 	stw	r2,-8(fp)
 1015c64:	e0fffe17 	ldw	r3,-8(fp)
 1015c68:	188000c8 	cmpgei	r2,r3,3
 1015c6c:	1000071e 	bne	r2,zero,1015c8c <OSTmrStart+0xdc>
 1015c70:	e0fffe17 	ldw	r3,-8(fp)
 1015c74:	18800048 	cmpgei	r2,r3,1
 1015c78:	1000131e 	bne	r2,zero,1015cc8 <OSTmrStart+0x118>
 1015c7c:	e0fffe17 	ldw	r3,-8(fp)
 1015c80:	1805003a 	cmpeq	r2,r3,zero
 1015c84:	1000191e 	bne	r2,zero,1015cec <OSTmrStart+0x13c>
 1015c88:	00001e06 	br	1015d04 <OSTmrStart+0x154>
 1015c8c:	e0fffe17 	ldw	r3,-8(fp)
 1015c90:	188000e0 	cmpeqi	r2,r3,3
 1015c94:	1000011e 	bne	r2,zero,1015c9c <OSTmrStart+0xec>
 1015c98:	00001a06 	br	1015d04 <OSTmrStart+0x154>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
 1015c9c:	e13ffc17 	ldw	r4,-16(fp)
 1015ca0:	10164a40 	call	10164a4 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 1015ca4:	e13ffc17 	ldw	r4,-16(fp)
 1015ca8:	000b883a 	mov	r5,zero
 1015cac:	10163400 	call	1016340 <OSTmr_Link>
             OSTmr_Unlock();
 1015cb0:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015cb4:	e0bffd17 	ldw	r2,-12(fp)
 1015cb8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015cbc:	00800044 	movi	r2,1
 1015cc0:	e0bfff15 	stw	r2,-4(fp)
 1015cc4:	00001406 	br	1015d18 <OSTmrStart+0x168>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 1015cc8:	e13ffc17 	ldw	r4,-16(fp)
 1015ccc:	000b883a 	mov	r5,zero
 1015cd0:	10163400 	call	1016340 <OSTmr_Link>
             OSTmr_Unlock();
 1015cd4:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 1015cd8:	e0bffd17 	ldw	r2,-12(fp)
 1015cdc:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
 1015ce0:	00c00044 	movi	r3,1
 1015ce4:	e0ffff15 	stw	r3,-4(fp)
 1015ce8:	00000b06 	br	1015d18 <OSTmrStart+0x168>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
 1015cec:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015cf0:	e0fffd17 	ldw	r3,-12(fp)
 1015cf4:	00bfe1c4 	movi	r2,-121
 1015cf8:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015cfc:	e03fff15 	stw	zero,-4(fp)
 1015d00:	00000506 	br	1015d18 <OSTmrStart+0x168>

        default:
             OSTmr_Unlock();
 1015d04:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015d08:	e0fffd17 	ldw	r3,-12(fp)
 1015d0c:	00bfe344 	movi	r2,-115
 1015d10:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015d14:	e03fff15 	stw	zero,-4(fp)
 1015d18:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015d1c:	e037883a 	mov	sp,fp
 1015d20:	dfc00117 	ldw	ra,4(sp)
 1015d24:	df000017 	ldw	fp,0(sp)
 1015d28:	dec00204 	addi	sp,sp,8
 1015d2c:	f800283a 	ret

01015d30 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
 1015d30:	defff604 	addi	sp,sp,-40
 1015d34:	dfc00915 	stw	ra,36(sp)
 1015d38:	df000815 	stw	fp,32(sp)
 1015d3c:	df000804 	addi	fp,sp,32
 1015d40:	e13ff915 	stw	r4,-28(fp)
 1015d44:	e1bffb15 	stw	r6,-20(fp)
 1015d48:	e1fffc15 	stw	r7,-16(fp)
 1015d4c:	e17ffa05 	stb	r5,-24(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
 1015d50:	e0bffc17 	ldw	r2,-16(fp)
 1015d54:	1004c03a 	cmpne	r2,r2,zero
 1015d58:	1000021e 	bne	r2,zero,1015d64 <OSTmrStop+0x34>
        return (OS_FALSE);
 1015d5c:	e03fff15 	stw	zero,-4(fp)
 1015d60:	00007806 	br	1015f44 <OSTmrStop+0x214>
    }
    if (ptmr == (OS_TMR *)0) {
 1015d64:	e0bff917 	ldw	r2,-28(fp)
 1015d68:	1004c03a 	cmpne	r2,r2,zero
 1015d6c:	1000051e 	bne	r2,zero,1015d84 <OSTmrStop+0x54>
        *perr = OS_ERR_TMR_INVALID;
 1015d70:	e0fffc17 	ldw	r3,-16(fp)
 1015d74:	00bfe284 	movi	r2,-118
 1015d78:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015d7c:	e03fff15 	stw	zero,-4(fp)
 1015d80:	00007006 	br	1015f44 <OSTmrStop+0x214>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
 1015d84:	e0bff917 	ldw	r2,-28(fp)
 1015d88:	10800003 	ldbu	r2,0(r2)
 1015d8c:	10803fcc 	andi	r2,r2,255
 1015d90:	10801920 	cmpeqi	r2,r2,100
 1015d94:	1000051e 	bne	r2,zero,1015dac <OSTmrStop+0x7c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 1015d98:	e0fffc17 	ldw	r3,-16(fp)
 1015d9c:	00bfe244 	movi	r2,-119
 1015da0:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015da4:	e03fff15 	stw	zero,-4(fp)
 1015da8:	00006606 	br	1015f44 <OSTmrStop+0x214>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
 1015dac:	008040b4 	movhi	r2,258
 1015db0:	10b3c204 	addi	r2,r2,-12536
 1015db4:	10800003 	ldbu	r2,0(r2)
 1015db8:	10803fcc 	andi	r2,r2,255
 1015dbc:	1005003a 	cmpeq	r2,r2,zero
 1015dc0:	1000051e 	bne	r2,zero,1015dd8 <OSTmrStop+0xa8>
        *perr  = OS_ERR_TMR_ISR;
 1015dc4:	e0fffc17 	ldw	r3,-16(fp)
 1015dc8:	00bfe2c4 	movi	r2,-117
 1015dcc:	18800005 	stb	r2,0(r3)
        return (OS_FALSE);
 1015dd0:	e03fff15 	stw	zero,-4(fp)
 1015dd4:	00005b06 	br	1015f44 <OSTmrStop+0x214>
    }
    OSTmr_Lock();
 1015dd8:	10165a00 	call	10165a0 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 1015ddc:	e0bff917 	ldw	r2,-28(fp)
 1015de0:	10800c43 	ldbu	r2,49(r2)
 1015de4:	10803fcc 	andi	r2,r2,255
 1015de8:	e0bffe15 	stw	r2,-8(fp)
 1015dec:	e0fffe17 	ldw	r3,-8(fp)
 1015df0:	188000c8 	cmpgei	r2,r3,3
 1015df4:	1000071e 	bne	r2,zero,1015e14 <OSTmrStop+0xe4>
 1015df8:	e0fffe17 	ldw	r3,-8(fp)
 1015dfc:	18800048 	cmpgei	r2,r3,1
 1015e00:	10003e1e 	bne	r2,zero,1015efc <OSTmrStop+0x1cc>
 1015e04:	e0fffe17 	ldw	r3,-8(fp)
 1015e08:	1805003a 	cmpeq	r2,r3,zero
 1015e0c:	1000421e 	bne	r2,zero,1015f18 <OSTmrStop+0x1e8>
 1015e10:	00004706 	br	1015f30 <OSTmrStop+0x200>
 1015e14:	e0fffe17 	ldw	r3,-8(fp)
 1015e18:	188000e0 	cmpeqi	r2,r3,3
 1015e1c:	1000011e 	bne	r2,zero,1015e24 <OSTmrStop+0xf4>
 1015e20:	00004306 	br	1015f30 <OSTmrStop+0x200>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
 1015e24:	e13ff917 	ldw	r4,-28(fp)
 1015e28:	10164a40 	call	10164a4 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
 1015e2c:	e0bffc17 	ldw	r2,-16(fp)
 1015e30:	10000005 	stb	zero,0(r2)
             switch (opt) {
 1015e34:	e0bffa03 	ldbu	r2,-24(fp)
 1015e38:	e0bffd15 	stw	r2,-12(fp)
 1015e3c:	e0fffd17 	ldw	r3,-12(fp)
 1015e40:	188000e0 	cmpeqi	r2,r3,3
 1015e44:	1000071e 	bne	r2,zero,1015e64 <OSTmrStop+0x134>
 1015e48:	e0fffd17 	ldw	r3,-12(fp)
 1015e4c:	18800120 	cmpeqi	r2,r3,4
 1015e50:	1000141e 	bne	r2,zero,1015ea4 <OSTmrStop+0x174>
 1015e54:	e0fffd17 	ldw	r3,-12(fp)
 1015e58:	1805003a 	cmpeq	r2,r3,zero
 1015e5c:	1000231e 	bne	r2,zero,1015eec <OSTmrStop+0x1bc>
 1015e60:	00001f06 	br	1015ee0 <OSTmrStop+0x1b0>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 1015e64:	e0bff917 	ldw	r2,-28(fp)
 1015e68:	10800117 	ldw	r2,4(r2)
 1015e6c:	e0bff815 	stw	r2,-32(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 1015e70:	e0bff817 	ldw	r2,-32(fp)
 1015e74:	1005003a 	cmpeq	r2,r2,zero
 1015e78:	1000061e 	bne	r2,zero,1015e94 <OSTmrStop+0x164>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
 1015e7c:	e0bff917 	ldw	r2,-28(fp)
 1015e80:	11400217 	ldw	r5,8(r2)
 1015e84:	e0bff817 	ldw	r2,-32(fp)
 1015e88:	e13ff917 	ldw	r4,-28(fp)
 1015e8c:	103ee83a 	callr	r2
 1015e90:	00001606 	br	1015eec <OSTmrStop+0x1bc>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
 1015e94:	e0fffc17 	ldw	r3,-16(fp)
 1015e98:	00bfe3c4 	movi	r2,-113
 1015e9c:	18800005 	stb	r2,0(r3)
                      }
                      break;
 1015ea0:	00001206 	br	1015eec <OSTmrStop+0x1bc>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 1015ea4:	e0bff917 	ldw	r2,-28(fp)
 1015ea8:	10800117 	ldw	r2,4(r2)
 1015eac:	e0bff815 	stw	r2,-32(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 1015eb0:	e0bff817 	ldw	r2,-32(fp)
 1015eb4:	1005003a 	cmpeq	r2,r2,zero
 1015eb8:	1000051e 	bne	r2,zero,1015ed0 <OSTmrStop+0x1a0>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
 1015ebc:	e0bff817 	ldw	r2,-32(fp)
 1015ec0:	e13ff917 	ldw	r4,-28(fp)
 1015ec4:	e17ffb17 	ldw	r5,-20(fp)
 1015ec8:	103ee83a 	callr	r2
 1015ecc:	00000706 	br	1015eec <OSTmrStop+0x1bc>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
 1015ed0:	e0fffc17 	ldw	r3,-16(fp)
 1015ed4:	00bfe3c4 	movi	r2,-113
 1015ed8:	18800005 	stb	r2,0(r3)
                      }
                      break;
 1015edc:	00000306 	br	1015eec <OSTmrStop+0x1bc>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
 1015ee0:	e0fffc17 	ldw	r3,-16(fp)
 1015ee4:	00bfe104 	movi	r2,-124
 1015ee8:	18800005 	stb	r2,0(r3)
                     break;
             }
             OSTmr_Unlock();
 1015eec:	10165dc0 	call	10165dc <OSTmr_Unlock>
             return (OS_TRUE);
 1015ef0:	00800044 	movi	r2,1
 1015ef4:	e0bfff15 	stw	r2,-4(fp)
 1015ef8:	00001206 	br	1015f44 <OSTmrStop+0x214>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
 1015efc:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
 1015f00:	e0fffc17 	ldw	r3,-16(fp)
 1015f04:	00bfe384 	movi	r2,-114
 1015f08:	18800005 	stb	r2,0(r3)
             return (OS_TRUE);
 1015f0c:	00c00044 	movi	r3,1
 1015f10:	e0ffff15 	stw	r3,-4(fp)
 1015f14:	00000b06 	br	1015f44 <OSTmrStop+0x214>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
 1015f18:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 1015f1c:	e0fffc17 	ldw	r3,-16(fp)
 1015f20:	00bfe1c4 	movi	r2,-121
 1015f24:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015f28:	e03fff15 	stw	zero,-4(fp)
 1015f2c:	00000506 	br	1015f44 <OSTmrStop+0x214>

        default:
             OSTmr_Unlock();
 1015f30:	10165dc0 	call	10165dc <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 1015f34:	e0fffc17 	ldw	r3,-16(fp)
 1015f38:	00bfe344 	movi	r2,-115
 1015f3c:	18800005 	stb	r2,0(r3)
             return (OS_FALSE);
 1015f40:	e03fff15 	stw	zero,-4(fp)
 1015f44:	e0bfff17 	ldw	r2,-4(fp)
    }
}
 1015f48:	e037883a 	mov	sp,fp
 1015f4c:	dfc00117 	ldw	ra,4(sp)
 1015f50:	df000017 	ldw	fp,0(sp)
 1015f54:	dec00204 	addi	sp,sp,8
 1015f58:	f800283a 	ret

01015f5c <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
 1015f5c:	defffd04 	addi	sp,sp,-12
 1015f60:	dfc00215 	stw	ra,8(sp)
 1015f64:	df000115 	stw	fp,4(sp)
 1015f68:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 1015f6c:	008040b4 	movhi	r2,258
 1015f70:	10b3b204 	addi	r2,r2,-12600
 1015f74:	11000017 	ldw	r4,0(r2)
 1015f78:	1012fd80 	call	1012fd8 <OSSemPost>
 1015f7c:	e0bfff05 	stb	r2,-4(fp)
    return (err);
 1015f80:	e0bfff03 	ldbu	r2,-4(fp)
}
 1015f84:	e037883a 	mov	sp,fp
 1015f88:	dfc00117 	ldw	ra,4(sp)
 1015f8c:	df000017 	ldw	fp,0(sp)
 1015f90:	dec00204 	addi	sp,sp,8
 1015f94:	f800283a 	ret

01015f98 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
 1015f98:	defffd04 	addi	sp,sp,-12
 1015f9c:	df000215 	stw	fp,8(sp)
 1015fa0:	df000204 	addi	fp,sp,8
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
 1015fa4:	008040b4 	movhi	r2,258
 1015fa8:	10b3b004 	addi	r2,r2,-12608
 1015fac:	10800017 	ldw	r2,0(r2)
 1015fb0:	1004c03a 	cmpne	r2,r2,zero
 1015fb4:	1000021e 	bne	r2,zero,1015fc0 <OSTmr_Alloc+0x28>
        return ((OS_TMR *)0);
 1015fb8:	e03fff15 	stw	zero,-4(fp)
 1015fbc:	00002006 	br	1016040 <OSTmr_Alloc+0xa8>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
 1015fc0:	008040b4 	movhi	r2,258
 1015fc4:	10b3b004 	addi	r2,r2,-12608
 1015fc8:	10800017 	ldw	r2,0(r2)
 1015fcc:	e0bffe15 	stw	r2,-8(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
 1015fd0:	e0bffe17 	ldw	r2,-8(fp)
 1015fd4:	10800317 	ldw	r2,12(r2)
 1015fd8:	1007883a 	mov	r3,r2
 1015fdc:	008040b4 	movhi	r2,258
 1015fe0:	10b3b004 	addi	r2,r2,-12608
 1015fe4:	10c00015 	stw	r3,0(r2)
    ptmr->OSTmrNext = (OS_TCB *)0;
 1015fe8:	e0bffe17 	ldw	r2,-8(fp)
 1015fec:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
 1015ff0:	e0bffe17 	ldw	r2,-8(fp)
 1015ff4:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
 1015ff8:	008040b4 	movhi	r2,258
 1015ffc:	10b3b504 	addi	r2,r2,-12588
 1016000:	1080000b 	ldhu	r2,0(r2)
 1016004:	10800044 	addi	r2,r2,1
 1016008:	1007883a 	mov	r3,r2
 101600c:	008040b4 	movhi	r2,258
 1016010:	10b3b504 	addi	r2,r2,-12588
 1016014:	10c0000d 	sth	r3,0(r2)
    OSTmrFree--;
 1016018:	008040b4 	movhi	r2,258
 101601c:	10b3b904 	addi	r2,r2,-12572
 1016020:	1080000b 	ldhu	r2,0(r2)
 1016024:	10bfffc4 	addi	r2,r2,-1
 1016028:	1007883a 	mov	r3,r2
 101602c:	008040b4 	movhi	r2,258
 1016030:	10b3b904 	addi	r2,r2,-12572
 1016034:	10c0000d 	sth	r3,0(r2)
    return (ptmr);
 1016038:	e0bffe17 	ldw	r2,-8(fp)
 101603c:	e0bfff15 	stw	r2,-4(fp)
 1016040:	e0bfff17 	ldw	r2,-4(fp)
}
 1016044:	e037883a 	mov	sp,fp
 1016048:	df000017 	ldw	fp,0(sp)
 101604c:	dec00104 	addi	sp,sp,4
 1016050:	f800283a 	ret

01016054 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
 1016054:	defffe04 	addi	sp,sp,-8
 1016058:	df000115 	stw	fp,4(sp)
 101605c:	df000104 	addi	fp,sp,4
 1016060:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
 1016064:	e0bfff17 	ldw	r2,-4(fp)
 1016068:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
 101606c:	e0bfff17 	ldw	r2,-4(fp)
 1016070:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
 1016074:	e0bfff17 	ldw	r2,-4(fp)
 1016078:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
 101607c:	e0bfff17 	ldw	r2,-4(fp)
 1016080:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
 1016084:	e0bfff17 	ldw	r2,-4(fp)
 1016088:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
 101608c:	e0bfff17 	ldw	r2,-4(fp)
 1016090:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
 1016094:	e0ffff17 	ldw	r3,-4(fp)
 1016098:	00800fc4 	movi	r2,63
 101609c:	18800805 	stb	r2,32(r3)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
 10160a0:	e0bfff17 	ldw	r2,-4(fp)
 10160a4:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
 10160a8:	e0bfff17 	ldw	r2,-4(fp)
 10160ac:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
 10160b0:	008040b4 	movhi	r2,258
 10160b4:	10b3b004 	addi	r2,r2,-12608
 10160b8:	10c00017 	ldw	r3,0(r2)
 10160bc:	e0bfff17 	ldw	r2,-4(fp)
 10160c0:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
 10160c4:	00c040b4 	movhi	r3,258
 10160c8:	18f3b004 	addi	r3,r3,-12608
 10160cc:	e0bfff17 	ldw	r2,-4(fp)
 10160d0:	18800015 	stw	r2,0(r3)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
 10160d4:	008040b4 	movhi	r2,258
 10160d8:	10b3b504 	addi	r2,r2,-12588
 10160dc:	1080000b 	ldhu	r2,0(r2)
 10160e0:	10bfffc4 	addi	r2,r2,-1
 10160e4:	1007883a 	mov	r3,r2
 10160e8:	008040b4 	movhi	r2,258
 10160ec:	10b3b504 	addi	r2,r2,-12588
 10160f0:	10c0000d 	sth	r3,0(r2)
    OSTmrFree++;
 10160f4:	008040b4 	movhi	r2,258
 10160f8:	10b3b904 	addi	r2,r2,-12572
 10160fc:	1080000b 	ldhu	r2,0(r2)
 1016100:	10800044 	addi	r2,r2,1
 1016104:	1007883a 	mov	r3,r2
 1016108:	008040b4 	movhi	r2,258
 101610c:	10b3b904 	addi	r2,r2,-12572
 1016110:	10c0000d 	sth	r3,0(r2)
}
 1016114:	e037883a 	mov	sp,fp
 1016118:	df000017 	ldw	fp,0(sp)
 101611c:	dec00104 	addi	sp,sp,4
 1016120:	f800283a 	ret

01016124 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
 1016124:	defffb04 	addi	sp,sp,-20
 1016128:	dfc00415 	stw	ra,16(sp)
 101612c:	df000315 	stw	fp,12(sp)
 1016130:	df000304 	addi	fp,sp,12
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 1016134:	010040f4 	movhi	r4,259
 1016138:	212cbc04 	addi	r4,r4,-19728
 101613c:	0140d004 	movi	r5,832
 1016140:	100dcd00 	call	100dcd0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 1016144:	010040f4 	movhi	r4,259
 1016148:	212bdc04 	addi	r4,r4,-20624
 101614c:	01400404 	movi	r5,16
 1016150:	100dcd00 	call	100dcd0 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
 1016154:	008040f4 	movhi	r2,259
 1016158:	10acbc04 	addi	r2,r2,-19728
 101615c:	e0bffe15 	stw	r2,-8(fp)
    ptmr2 = &OSTmrTbl[1];
 1016160:	008040f4 	movhi	r2,259
 1016164:	10acc904 	addi	r2,r2,-19676
 1016168:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 101616c:	e03fff0d 	sth	zero,-4(fp)
 1016170:	00001606 	br	10161cc <OSTmr_Init+0xa8>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 1016174:	e0fffe17 	ldw	r3,-8(fp)
 1016178:	00801904 	movi	r2,100
 101617c:	18800005 	stb	r2,0(r3)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 1016180:	e0bffe17 	ldw	r2,-8(fp)
 1016184:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 1016188:	e0fffe17 	ldw	r3,-8(fp)
 101618c:	e0bffd17 	ldw	r2,-12(fp)
 1016190:	18800315 	stw	r2,12(r3)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
 1016194:	e0fffe17 	ldw	r3,-8(fp)
 1016198:	00800fc4 	movi	r2,63
 101619c:	18800805 	stb	r2,32(r3)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 10161a0:	e0bffe17 	ldw	r2,-8(fp)
 10161a4:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
 10161a8:	e0bffe17 	ldw	r2,-8(fp)
 10161ac:	10800d04 	addi	r2,r2,52
 10161b0:	e0bffe15 	stw	r2,-8(fp)
        ptmr2++;
 10161b4:	e0bffd17 	ldw	r2,-12(fp)
 10161b8:	10800d04 	addi	r2,r2,52
 10161bc:	e0bffd15 	stw	r2,-12(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 10161c0:	e0bfff0b 	ldhu	r2,-4(fp)
 10161c4:	10800044 	addi	r2,r2,1
 10161c8:	e0bfff0d 	sth	r2,-4(fp)
 10161cc:	e0bfff0b 	ldhu	r2,-4(fp)
 10161d0:	108003f0 	cmpltui	r2,r2,15
 10161d4:	103fe71e 	bne	r2,zero,1016174 <OSTmr_Init+0x50>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 10161d8:	e0fffe17 	ldw	r3,-8(fp)
 10161dc:	00801904 	movi	r2,100
 10161e0:	18800005 	stb	r2,0(r3)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 10161e4:	e0bffe17 	ldw	r2,-8(fp)
 10161e8:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 10161ec:	e0bffe17 	ldw	r2,-8(fp)
 10161f0:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
 10161f4:	e0fffe17 	ldw	r3,-8(fp)
 10161f8:	00800fc4 	movi	r2,63
 10161fc:	18800805 	stb	r2,32(r3)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 1016200:	e0bffe17 	ldw	r2,-8(fp)
 1016204:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
 1016208:	008040b4 	movhi	r2,258
 101620c:	10b3c404 	addi	r2,r2,-12528
 1016210:	10000015 	stw	zero,0(r2)
    OSTmrUsed           = 0;
 1016214:	008040b4 	movhi	r2,258
 1016218:	10b3b504 	addi	r2,r2,-12588
 101621c:	1000000d 	sth	zero,0(r2)
    OSTmrFree           = OS_TMR_CFG_MAX;
 1016220:	00c040b4 	movhi	r3,258
 1016224:	18f3b904 	addi	r3,r3,-12572
 1016228:	00800404 	movi	r2,16
 101622c:	1880000d 	sth	r2,0(r3)
    OSTmrFreeList       = &OSTmrTbl[0];
 1016230:	00c040b4 	movhi	r3,258
 1016234:	18f3b004 	addi	r3,r3,-12608
 1016238:	008040f4 	movhi	r2,259
 101623c:	10acbc04 	addi	r2,r2,-19728
 1016240:	18800015 	stw	r2,0(r3)
    OSTmrSem            = OSSemCreate(1);
 1016244:	01000044 	movi	r4,1
 1016248:	101282c0 	call	101282c <OSSemCreate>
 101624c:	1007883a 	mov	r3,r2
 1016250:	008040b4 	movhi	r2,258
 1016254:	10b3c604 	addi	r2,r2,-12520
 1016258:	10c00015 	stw	r3,0(r2)
    OSTmrSemSignal      = OSSemCreate(0);
 101625c:	0009883a 	mov	r4,zero
 1016260:	101282c0 	call	101282c <OSSemCreate>
 1016264:	1007883a 	mov	r3,r2
 1016268:	008040b4 	movhi	r2,258
 101626c:	10b3b204 	addi	r2,r2,-12600
 1016270:	10c00015 	stw	r3,0(r2)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
 1016274:	008040b4 	movhi	r2,258
 1016278:	10b3c604 	addi	r2,r2,-12520
 101627c:	11000017 	ldw	r4,0(r2)
 1016280:	014040b4 	movhi	r5,258
 1016284:	2965cd04 	addi	r5,r5,-26828
 1016288:	e1bfff84 	addi	r6,fp,-2
 101628c:	100c47c0 	call	100c47c <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
 1016290:	008040b4 	movhi	r2,258
 1016294:	10b3b204 	addi	r2,r2,-12600
 1016298:	11000017 	ldw	r4,0(r2)
 101629c:	014040b4 	movhi	r5,258
 10162a0:	2965d204 	addi	r5,r5,-26808
 10162a4:	e1bfff84 	addi	r6,fp,-2
 10162a8:	100c47c0 	call	100c47c <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
 10162ac:	10162c40 	call	10162c4 <OSTmr_InitTask>
}
 10162b0:	e037883a 	mov	sp,fp
 10162b4:	dfc00117 	ldw	ra,4(sp)
 10162b8:	df000017 	ldw	fp,0(sp)
 10162bc:	dec00204 	addi	sp,sp,8
 10162c0:	f800283a 	ret

010162c4 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
 10162c4:	defff804 	addi	sp,sp,-32
 10162c8:	dfc00715 	stw	ra,28(sp)
 10162cc:	df000615 	stw	fp,24(sp)
 10162d0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
 10162d4:	018040f4 	movhi	r6,259
 10162d8:	31b50f04 	addi	r6,r6,-11204
 10162dc:	00bfff54 	movui	r2,65533
 10162e0:	d8800015 	stw	r2,0(sp)
 10162e4:	008040f4 	movhi	r2,259
 10162e8:	10b31004 	addi	r2,r2,-13248
 10162ec:	d8800115 	stw	r2,4(sp)
 10162f0:	00808004 	movi	r2,512
 10162f4:	d8800215 	stw	r2,8(sp)
 10162f8:	d8000315 	stw	zero,12(sp)
 10162fc:	008000c4 	movi	r2,3
 1016300:	d8800415 	stw	r2,16(sp)
 1016304:	01004074 	movhi	r4,257
 1016308:	21198404 	addi	r4,r4,26128
 101630c:	000b883a 	mov	r5,zero
 1016310:	000f883a 	mov	r7,zero
 1016314:	1013a7c0 	call	1013a7c <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
 1016318:	014040b4 	movhi	r5,258
 101631c:	2965d704 	addi	r5,r5,-26788
 1016320:	0009883a 	mov	r4,zero
 1016324:	e1bfff04 	addi	r6,fp,-4
 1016328:	10143b00 	call	10143b0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
 101632c:	e037883a 	mov	sp,fp
 1016330:	dfc00117 	ldw	ra,4(sp)
 1016334:	df000017 	ldw	fp,0(sp)
 1016338:	dec00204 	addi	sp,sp,8
 101633c:	f800283a 	ret

01016340 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
 1016340:	defffa04 	addi	sp,sp,-24
 1016344:	df000515 	stw	fp,20(sp)
 1016348:	df000504 	addi	fp,sp,20
 101634c:	e13ffe15 	stw	r4,-8(fp)
 1016350:	e17fff05 	stb	r5,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 1016354:	e0fffe17 	ldw	r3,-8(fp)
 1016358:	008000c4 	movi	r2,3
 101635c:	18800c45 	stb	r2,49(r3)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 1016360:	e0bfff03 	ldbu	r2,-4(fp)
 1016364:	10800058 	cmpnei	r2,r2,1
 1016368:	1000091e 	bne	r2,zero,1016390 <OSTmr_Link+0x50>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 101636c:	e0bffe17 	ldw	r2,-8(fp)
 1016370:	10c00717 	ldw	r3,28(r2)
 1016374:	008040b4 	movhi	r2,258
 1016378:	10b3c404 	addi	r2,r2,-12528
 101637c:	10800017 	ldw	r2,0(r2)
 1016380:	1887883a 	add	r3,r3,r2
 1016384:	e0bffe17 	ldw	r2,-8(fp)
 1016388:	10c00515 	stw	r3,20(r2)
 101638c:	00001506 	br	10163e4 <OSTmr_Link+0xa4>
    } else {
        if (ptmr->OSTmrDly == 0) {
 1016390:	e0bffe17 	ldw	r2,-8(fp)
 1016394:	10800617 	ldw	r2,24(r2)
 1016398:	1004c03a 	cmpne	r2,r2,zero
 101639c:	1000091e 	bne	r2,zero,10163c4 <OSTmr_Link+0x84>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 10163a0:	e0bffe17 	ldw	r2,-8(fp)
 10163a4:	10c00717 	ldw	r3,28(r2)
 10163a8:	008040b4 	movhi	r2,258
 10163ac:	10b3c404 	addi	r2,r2,-12528
 10163b0:	10800017 	ldw	r2,0(r2)
 10163b4:	1887883a 	add	r3,r3,r2
 10163b8:	e0bffe17 	ldw	r2,-8(fp)
 10163bc:	10c00515 	stw	r3,20(r2)
 10163c0:	00000806 	br	10163e4 <OSTmr_Link+0xa4>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 10163c4:	e0bffe17 	ldw	r2,-8(fp)
 10163c8:	10c00617 	ldw	r3,24(r2)
 10163cc:	008040b4 	movhi	r2,258
 10163d0:	10b3c404 	addi	r2,r2,-12528
 10163d4:	10800017 	ldw	r2,0(r2)
 10163d8:	1887883a 	add	r3,r3,r2
 10163dc:	e0bffe17 	ldw	r2,-8(fp)
 10163e0:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 10163e4:	e0bffe17 	ldw	r2,-8(fp)
 10163e8:	10800517 	ldw	r2,20(r2)
 10163ec:	1080004c 	andi	r2,r2,1
 10163f0:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
 10163f4:	e0bffb0b 	ldhu	r2,-20(fp)
 10163f8:	100490fa 	slli	r2,r2,3
 10163fc:	1007883a 	mov	r3,r2
 1016400:	008040f4 	movhi	r2,259
 1016404:	10abdc04 	addi	r2,r2,-20624
 1016408:	1885883a 	add	r2,r3,r2
 101640c:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 1016410:	e0bffc17 	ldw	r2,-16(fp)
 1016414:	10800017 	ldw	r2,0(r2)
 1016418:	1004c03a 	cmpne	r2,r2,zero
 101641c:	1000091e 	bne	r2,zero,1016444 <OSTmr_Link+0x104>
        pspoke->OSTmrFirst   = ptmr;
 1016420:	e0fffc17 	ldw	r3,-16(fp)
 1016424:	e0bffe17 	ldw	r2,-8(fp)
 1016428:	18800015 	stw	r2,0(r3)
        ptmr->OSTmrNext      = (OS_TMR *)0;
 101642c:	e0bffe17 	ldw	r2,-8(fp)
 1016430:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
 1016434:	e0fffc17 	ldw	r3,-16(fp)
 1016438:	00800044 	movi	r2,1
 101643c:	1880010d 	sth	r2,4(r3)
 1016440:	00001206 	br	101648c <OSTmr_Link+0x14c>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 1016444:	e0bffc17 	ldw	r2,-16(fp)
 1016448:	10800017 	ldw	r2,0(r2)
 101644c:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
 1016450:	e0fffc17 	ldw	r3,-16(fp)
 1016454:	e0bffe17 	ldw	r2,-8(fp)
 1016458:	18800015 	stw	r2,0(r3)
        ptmr->OSTmrNext      = (void *)ptmr1;
 101645c:	e0fffe17 	ldw	r3,-8(fp)
 1016460:	e0bffd17 	ldw	r2,-12(fp)
 1016464:	18800315 	stw	r2,12(r3)
        ptmr1->OSTmrPrev     = (void *)ptmr;
 1016468:	e0fffd17 	ldw	r3,-12(fp)
 101646c:	e0bffe17 	ldw	r2,-8(fp)
 1016470:	18800415 	stw	r2,16(r3)
        pspoke->OSTmrEntries++;
 1016474:	e0bffc17 	ldw	r2,-16(fp)
 1016478:	1080010b 	ldhu	r2,4(r2)
 101647c:	10800044 	addi	r2,r2,1
 1016480:	1007883a 	mov	r3,r2
 1016484:	e0bffc17 	ldw	r2,-16(fp)
 1016488:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 101648c:	e0bffe17 	ldw	r2,-8(fp)
 1016490:	10000415 	stw	zero,16(r2)
}
 1016494:	e037883a 	mov	sp,fp
 1016498:	df000017 	ldw	fp,0(sp)
 101649c:	dec00104 	addi	sp,sp,4
 10164a0:	f800283a 	ret

010164a4 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 10164a4:	defffa04 	addi	sp,sp,-24
 10164a8:	df000515 	stw	fp,20(sp)
 10164ac:	df000504 	addi	fp,sp,20
 10164b0:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 10164b4:	e0bfff17 	ldw	r2,-4(fp)
 10164b8:	10800517 	ldw	r2,20(r2)
 10164bc:	1080004c 	andi	r2,r2,1
 10164c0:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
 10164c4:	e0bffb0b 	ldhu	r2,-20(fp)
 10164c8:	100490fa 	slli	r2,r2,3
 10164cc:	1007883a 	mov	r3,r2
 10164d0:	008040f4 	movhi	r2,259
 10164d4:	10abdc04 	addi	r2,r2,-20624
 10164d8:	1885883a 	add	r2,r3,r2
 10164dc:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 10164e0:	e0bffc17 	ldw	r2,-16(fp)
 10164e4:	10c00017 	ldw	r3,0(r2)
 10164e8:	e0bfff17 	ldw	r2,-4(fp)
 10164ec:	18800c1e 	bne	r3,r2,1016520 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 10164f0:	e0bfff17 	ldw	r2,-4(fp)
 10164f4:	10800317 	ldw	r2,12(r2)
 10164f8:	e0bffe15 	stw	r2,-8(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 10164fc:	e0fffc17 	ldw	r3,-16(fp)
 1016500:	e0bffe17 	ldw	r2,-8(fp)
 1016504:	18800015 	stw	r2,0(r3)
        if (ptmr1 != (OS_TMR *)0) {
 1016508:	e0bffe17 	ldw	r2,-8(fp)
 101650c:	1005003a 	cmpeq	r2,r2,zero
 1016510:	1000121e 	bne	r2,zero,101655c <OSTmr_Unlink+0xb8>
            ptmr1->OSTmrPrev = (void *)0;
 1016514:	e0bffe17 	ldw	r2,-8(fp)
 1016518:	10000415 	stw	zero,16(r2)
 101651c:	00000f06 	br	101655c <OSTmr_Unlink+0xb8>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 1016520:	e0bfff17 	ldw	r2,-4(fp)
 1016524:	10800417 	ldw	r2,16(r2)
 1016528:	e0bffe15 	stw	r2,-8(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 101652c:	e0bfff17 	ldw	r2,-4(fp)
 1016530:	10800317 	ldw	r2,12(r2)
 1016534:	e0bffd15 	stw	r2,-12(fp)
        ptmr1->OSTmrNext = ptmr2;
 1016538:	e0fffe17 	ldw	r3,-8(fp)
 101653c:	e0bffd17 	ldw	r2,-12(fp)
 1016540:	18800315 	stw	r2,12(r3)
        if (ptmr2 != (OS_TMR *)0) {
 1016544:	e0bffd17 	ldw	r2,-12(fp)
 1016548:	1005003a 	cmpeq	r2,r2,zero
 101654c:	1000031e 	bne	r2,zero,101655c <OSTmr_Unlink+0xb8>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 1016550:	e0fffd17 	ldw	r3,-12(fp)
 1016554:	e0bffe17 	ldw	r2,-8(fp)
 1016558:	18800415 	stw	r2,16(r3)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 101655c:	e0ffff17 	ldw	r3,-4(fp)
 1016560:	00800044 	movi	r2,1
 1016564:	18800c45 	stb	r2,49(r3)
    ptmr->OSTmrNext  = (void *)0;
 1016568:	e0bfff17 	ldw	r2,-4(fp)
 101656c:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
 1016570:	e0bfff17 	ldw	r2,-4(fp)
 1016574:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
 1016578:	e0bffc17 	ldw	r2,-16(fp)
 101657c:	1080010b 	ldhu	r2,4(r2)
 1016580:	10bfffc4 	addi	r2,r2,-1
 1016584:	1007883a 	mov	r3,r2
 1016588:	e0bffc17 	ldw	r2,-16(fp)
 101658c:	10c0010d 	sth	r3,4(r2)
}
 1016590:	e037883a 	mov	sp,fp
 1016594:	df000017 	ldw	fp,0(sp)
 1016598:	dec00104 	addi	sp,sp,4
 101659c:	f800283a 	ret

010165a0 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
 10165a0:	defffd04 	addi	sp,sp,-12
 10165a4:	dfc00215 	stw	ra,8(sp)
 10165a8:	df000115 	stw	fp,4(sp)
 10165ac:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
 10165b0:	008040b4 	movhi	r2,258
 10165b4:	10b3c604 	addi	r2,r2,-12520
 10165b8:	11000017 	ldw	r4,0(r2)
 10165bc:	000b883a 	mov	r5,zero
 10165c0:	e1bfff04 	addi	r6,fp,-4
 10165c4:	1012be00 	call	1012be0 <OSSemPend>
    (void)err;
}
 10165c8:	e037883a 	mov	sp,fp
 10165cc:	dfc00117 	ldw	ra,4(sp)
 10165d0:	df000017 	ldw	fp,0(sp)
 10165d4:	dec00204 	addi	sp,sp,8
 10165d8:	f800283a 	ret

010165dc <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
 10165dc:	defffe04 	addi	sp,sp,-8
 10165e0:	dfc00115 	stw	ra,4(sp)
 10165e4:	df000015 	stw	fp,0(sp)
 10165e8:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
 10165ec:	008040b4 	movhi	r2,258
 10165f0:	10b3c604 	addi	r2,r2,-12520
 10165f4:	11000017 	ldw	r4,0(r2)
 10165f8:	1012fd80 	call	1012fd8 <OSSemPost>
}
 10165fc:	e037883a 	mov	sp,fp
 1016600:	dfc00117 	ldw	ra,4(sp)
 1016604:	df000017 	ldw	fp,0(sp)
 1016608:	dec00204 	addi	sp,sp,8
 101660c:	f800283a 	ret

01016610 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
 1016610:	defff704 	addi	sp,sp,-36
 1016614:	dfc00815 	stw	ra,32(sp)
 1016618:	df000715 	stw	fp,28(sp)
 101661c:	df000704 	addi	fp,sp,28
 1016620:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
 1016624:	008040b4 	movhi	r2,258
 1016628:	10b3b204 	addi	r2,r2,-12600
 101662c:	11000017 	ldw	r4,0(r2)
 1016630:	e1bffe04 	addi	r6,fp,-8
 1016634:	000b883a 	mov	r5,zero
 1016638:	1012be00 	call	1012be0 <OSSemPend>
        OSTmr_Lock();
 101663c:	10165a00 	call	10165a0 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
 1016640:	008040b4 	movhi	r2,258
 1016644:	10b3c404 	addi	r2,r2,-12528
 1016648:	10800017 	ldw	r2,0(r2)
 101664c:	10c00044 	addi	r3,r2,1
 1016650:	008040b4 	movhi	r2,258
 1016654:	10b3c404 	addi	r2,r2,-12528
 1016658:	10c00015 	stw	r3,0(r2)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 101665c:	008040b4 	movhi	r2,258
 1016660:	10b3c404 	addi	r2,r2,-12528
 1016664:	10800017 	ldw	r2,0(r2)
 1016668:	1080004c 	andi	r2,r2,1
 101666c:	e0bff90d 	sth	r2,-28(fp)
        pspoke = &OSTmrWheelTbl[spoke];
 1016670:	e0bff90b 	ldhu	r2,-28(fp)
 1016674:	100490fa 	slli	r2,r2,3
 1016678:	1007883a 	mov	r3,r2
 101667c:	008040f4 	movhi	r2,259
 1016680:	10abdc04 	addi	r2,r2,-20624
 1016684:	1885883a 	add	r2,r3,r2
 1016688:	e0bffa15 	stw	r2,-24(fp)
        ptmr   = pspoke->OSTmrFirst;
 101668c:	e0bffa17 	ldw	r2,-24(fp)
 1016690:	10800017 	ldw	r2,0(r2)
 1016694:	e0bffd15 	stw	r2,-12(fp)
        while (ptmr != (OS_TMR *)0) {
 1016698:	00002406 	br	101672c <OSTmr_Task+0x11c>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 101669c:	e0bffd17 	ldw	r2,-12(fp)
 10166a0:	10800317 	ldw	r2,12(r2)
 10166a4:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 10166a8:	e0bffd17 	ldw	r2,-12(fp)
 10166ac:	10c00517 	ldw	r3,20(r2)
 10166b0:	008040b4 	movhi	r2,258
 10166b4:	10b3c404 	addi	r2,r2,-12528
 10166b8:	10800017 	ldw	r2,0(r2)
 10166bc:	1880191e 	bne	r3,r2,1016724 <OSTmr_Task+0x114>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 10166c0:	e0bffd17 	ldw	r2,-12(fp)
 10166c4:	10800117 	ldw	r2,4(r2)
 10166c8:	e0bffb15 	stw	r2,-20(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
 10166cc:	e0bffb17 	ldw	r2,-20(fp)
 10166d0:	1005003a 	cmpeq	r2,r2,zero
 10166d4:	1000051e 	bne	r2,zero,10166ec <OSTmr_Task+0xdc>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 10166d8:	e0bffd17 	ldw	r2,-12(fp)
 10166dc:	11400217 	ldw	r5,8(r2)
 10166e0:	e0bffb17 	ldw	r2,-20(fp)
 10166e4:	e13ffd17 	ldw	r4,-12(fp)
 10166e8:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 10166ec:	e13ffd17 	ldw	r4,-12(fp)
 10166f0:	10164a40 	call	10164a4 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 10166f4:	e0bffd17 	ldw	r2,-12(fp)
 10166f8:	10800c03 	ldbu	r2,48(r2)
 10166fc:	10803fcc 	andi	r2,r2,255
 1016700:	10800098 	cmpnei	r2,r2,2
 1016704:	1000041e 	bne	r2,zero,1016718 <OSTmr_Task+0x108>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 1016708:	e13ffd17 	ldw	r4,-12(fp)
 101670c:	01400044 	movi	r5,1
 1016710:	10163400 	call	1016340 <OSTmr_Link>
 1016714:	00000306 	br	1016724 <OSTmr_Task+0x114>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 1016718:	e0fffd17 	ldw	r3,-12(fp)
 101671c:	00800084 	movi	r2,2
 1016720:	18800c45 	stb	r2,49(r3)
                }
            }
            ptmr = ptmr_next;
 1016724:	e0bffc17 	ldw	r2,-16(fp)
 1016728:	e0bffd15 	stw	r2,-12(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
 101672c:	e0bffd17 	ldw	r2,-12(fp)
 1016730:	1004c03a 	cmpne	r2,r2,zero
 1016734:	103fd91e 	bne	r2,zero,101669c <OSTmr_Task+0x8c>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
 1016738:	10165dc0 	call	10165dc <OSTmr_Unlock>
    }
 101673c:	003fb906 	br	1016624 <OSTmr_Task+0x14>

01016740 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1016740:	defffd04 	addi	sp,sp,-12
 1016744:	dfc00215 	stw	ra,8(sp)
 1016748:	df000115 	stw	fp,4(sp)
 101674c:	df000104 	addi	fp,sp,4
 1016750:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 1016754:	101855c0 	call	101855c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1016758:	00800044 	movi	r2,1
 101675c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1016760:	e037883a 	mov	sp,fp
 1016764:	dfc00117 	ldw	ra,4(sp)
 1016768:	df000017 	ldw	fp,0(sp)
 101676c:	dec00204 	addi	sp,sp,8
 1016770:	f800283a 	ret

01016774 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1016774:	defffe04 	addi	sp,sp,-8
 1016778:	dfc00115 	stw	ra,4(sp)
 101677c:	df000015 	stw	fp,0(sp)
 1016780:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1016784:	01244014 	movui	r4,37120
 1016788:	000b883a 	mov	r5,zero
 101678c:	018001c4 	movi	r6,7
 1016790:	01c0fa04 	movi	r7,1000
 1016794:	10175f40 	call	10175f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1016798:	010040b4 	movhi	r4,258
 101679c:	21286904 	addi	r4,r4,-24156
 10167a0:	000b883a 	mov	r5,zero
 10167a4:	01800144 	movi	r6,5
 10167a8:	10169700 	call	1016970 <altera_avalon_jtag_uart_init>
 10167ac:	010040b4 	movhi	r4,258
 10167b0:	21285f04 	addi	r4,r4,-24196
 10167b4:	10167f00 	call	10167f0 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
 10167b8:	00e40014 	movui	r3,36864
 10167bc:	00800044 	movi	r2,1
 10167c0:	18800035 	stwio	r2,0(r3)
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( DE2_LCD, DE2_LCD);
 10167c4:	010040b4 	movhi	r4,258
 10167c8:	212c7a04 	addi	r4,r4,-19992
 10167cc:	10177340 	call	1017734 <alt_up_character_lcd_init>
 10167d0:	010040b4 	movhi	r4,258
 10167d4:	212c7a04 	addi	r4,r4,-19992
 10167d8:	10167f00 	call	10167f0 <alt_dev_reg>
}
 10167dc:	e037883a 	mov	sp,fp
 10167e0:	dfc00117 	ldw	ra,4(sp)
 10167e4:	df000017 	ldw	fp,0(sp)
 10167e8:	dec00204 	addi	sp,sp,8
 10167ec:	f800283a 	ret

010167f0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10167f0:	defffd04 	addi	sp,sp,-12
 10167f4:	dfc00215 	stw	ra,8(sp)
 10167f8:	df000115 	stw	fp,4(sp)
 10167fc:	df000104 	addi	fp,sp,4
 1016800:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1016804:	e13fff17 	ldw	r4,-4(fp)
 1016808:	014040b4 	movhi	r5,258
 101680c:	296c9204 	addi	r5,r5,-19896
 1016810:	1017bd00 	call	1017bd0 <alt_dev_llist_insert>
}
 1016814:	e037883a 	mov	sp,fp
 1016818:	dfc00117 	ldw	ra,4(sp)
 101681c:	df000017 	ldw	fp,0(sp)
 1016820:	dec00204 	addi	sp,sp,8
 1016824:	f800283a 	ret

01016828 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1016828:	defffa04 	addi	sp,sp,-24
 101682c:	dfc00515 	stw	ra,20(sp)
 1016830:	df000415 	stw	fp,16(sp)
 1016834:	df000404 	addi	fp,sp,16
 1016838:	e13ffd15 	stw	r4,-12(fp)
 101683c:	e17ffe15 	stw	r5,-8(fp)
 1016840:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1016844:	e0bffd17 	ldw	r2,-12(fp)
 1016848:	10800017 	ldw	r2,0(r2)
 101684c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1016850:	e0bffc17 	ldw	r2,-16(fp)
 1016854:	11000a04 	addi	r4,r2,40
 1016858:	e0bffd17 	ldw	r2,-12(fp)
 101685c:	11c00217 	ldw	r7,8(r2)
 1016860:	e17ffe17 	ldw	r5,-8(fp)
 1016864:	e1bfff17 	ldw	r6,-4(fp)
 1016868:	1016fe80 	call	1016fe8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 101686c:	e037883a 	mov	sp,fp
 1016870:	dfc00117 	ldw	ra,4(sp)
 1016874:	df000017 	ldw	fp,0(sp)
 1016878:	dec00204 	addi	sp,sp,8
 101687c:	f800283a 	ret

01016880 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1016880:	defffa04 	addi	sp,sp,-24
 1016884:	dfc00515 	stw	ra,20(sp)
 1016888:	df000415 	stw	fp,16(sp)
 101688c:	df000404 	addi	fp,sp,16
 1016890:	e13ffd15 	stw	r4,-12(fp)
 1016894:	e17ffe15 	stw	r5,-8(fp)
 1016898:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 101689c:	e0bffd17 	ldw	r2,-12(fp)
 10168a0:	10800017 	ldw	r2,0(r2)
 10168a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10168a8:	e0bffc17 	ldw	r2,-16(fp)
 10168ac:	11000a04 	addi	r4,r2,40
 10168b0:	e0bffd17 	ldw	r2,-12(fp)
 10168b4:	11c00217 	ldw	r7,8(r2)
 10168b8:	e17ffe17 	ldw	r5,-8(fp)
 10168bc:	e1bfff17 	ldw	r6,-4(fp)
 10168c0:	10172a80 	call	10172a8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 10168c4:	e037883a 	mov	sp,fp
 10168c8:	dfc00117 	ldw	ra,4(sp)
 10168cc:	df000017 	ldw	fp,0(sp)
 10168d0:	dec00204 	addi	sp,sp,8
 10168d4:	f800283a 	ret

010168d8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 10168d8:	defffc04 	addi	sp,sp,-16
 10168dc:	dfc00315 	stw	ra,12(sp)
 10168e0:	df000215 	stw	fp,8(sp)
 10168e4:	df000204 	addi	fp,sp,8
 10168e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10168ec:	e0bfff17 	ldw	r2,-4(fp)
 10168f0:	10800017 	ldw	r2,0(r2)
 10168f4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10168f8:	e0bffe17 	ldw	r2,-8(fp)
 10168fc:	11000a04 	addi	r4,r2,40
 1016900:	e0bfff17 	ldw	r2,-4(fp)
 1016904:	11400217 	ldw	r5,8(r2)
 1016908:	1016e800 	call	1016e80 <altera_avalon_jtag_uart_close>
}
 101690c:	e037883a 	mov	sp,fp
 1016910:	dfc00117 	ldw	ra,4(sp)
 1016914:	df000017 	ldw	fp,0(sp)
 1016918:	dec00204 	addi	sp,sp,8
 101691c:	f800283a 	ret

01016920 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1016920:	defffa04 	addi	sp,sp,-24
 1016924:	dfc00515 	stw	ra,20(sp)
 1016928:	df000415 	stw	fp,16(sp)
 101692c:	df000404 	addi	fp,sp,16
 1016930:	e13ffd15 	stw	r4,-12(fp)
 1016934:	e17ffe15 	stw	r5,-8(fp)
 1016938:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 101693c:	e0bffd17 	ldw	r2,-12(fp)
 1016940:	10800017 	ldw	r2,0(r2)
 1016944:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1016948:	e0bffc17 	ldw	r2,-16(fp)
 101694c:	11000a04 	addi	r4,r2,40
 1016950:	e17ffe17 	ldw	r5,-8(fp)
 1016954:	e1bfff17 	ldw	r6,-4(fp)
 1016958:	1016ef40 	call	1016ef4 <altera_avalon_jtag_uart_ioctl>
}
 101695c:	e037883a 	mov	sp,fp
 1016960:	dfc00117 	ldw	ra,4(sp)
 1016964:	df000017 	ldw	fp,0(sp)
 1016968:	dec00204 	addi	sp,sp,8
 101696c:	f800283a 	ret

01016970 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1016970:	defff404 	addi	sp,sp,-48
 1016974:	dfc00b15 	stw	ra,44(sp)
 1016978:	df000a15 	stw	fp,40(sp)
 101697c:	df000a04 	addi	fp,sp,40
 1016980:	e13ffd15 	stw	r4,-12(fp)
 1016984:	e17ffe15 	stw	r5,-8(fp)
 1016988:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 101698c:	e0bffd17 	ldw	r2,-12(fp)
 1016990:	10800c04 	addi	r2,r2,48
 1016994:	e0bffb15 	stw	r2,-20(fp)
 1016998:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 101699c:	e13ffc0b 	ldhu	r4,-16(fp)
 10169a0:	e17ffc84 	addi	r5,fp,-14
 10169a4:	100e9980 	call	100e998 <OSFlagCreate>
 10169a8:	1007883a 	mov	r3,r2
 10169ac:	e0bffb17 	ldw	r2,-20(fp)
 10169b0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 10169b4:	e0bffd17 	ldw	r2,-12(fp)
 10169b8:	10800a04 	addi	r2,r2,40
 10169bc:	e0bff915 	stw	r2,-28(fp)
 10169c0:	00800044 	movi	r2,1
 10169c4:	e0bffa0d 	sth	r2,-24(fp)
 10169c8:	e13ffa0b 	ldhu	r4,-24(fp)
 10169cc:	101282c0 	call	101282c <OSSemCreate>
 10169d0:	1007883a 	mov	r3,r2
 10169d4:	e0bff917 	ldw	r2,-28(fp)
 10169d8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 10169dc:	e0bffd17 	ldw	r2,-12(fp)
 10169e0:	10800b04 	addi	r2,r2,44
 10169e4:	e0bff715 	stw	r2,-36(fp)
 10169e8:	00800044 	movi	r2,1
 10169ec:	e0bff80d 	sth	r2,-32(fp)
 10169f0:	e13ff80b 	ldhu	r4,-32(fp)
 10169f4:	101282c0 	call	101282c <OSSemCreate>
 10169f8:	1007883a 	mov	r3,r2
 10169fc:	e0bff717 	ldw	r2,-36(fp)
 1016a00:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1016a04:	e0fffd17 	ldw	r3,-12(fp)
 1016a08:	00800044 	movi	r2,1
 1016a0c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1016a10:	e0bffd17 	ldw	r2,-12(fp)
 1016a14:	10800017 	ldw	r2,0(r2)
 1016a18:	11000104 	addi	r4,r2,4
 1016a1c:	e0bffd17 	ldw	r2,-12(fp)
 1016a20:	10800817 	ldw	r2,32(r2)
 1016a24:	1007883a 	mov	r3,r2
 1016a28:	2005883a 	mov	r2,r4
 1016a2c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1016a30:	e13ffe17 	ldw	r4,-8(fp)
 1016a34:	e17fff17 	ldw	r5,-4(fp)
 1016a38:	d8000015 	stw	zero,0(sp)
 1016a3c:	01804074 	movhi	r6,257
 1016a40:	319aaa04 	addi	r6,r6,27304
 1016a44:	e1fffd17 	ldw	r7,-12(fp)
 1016a48:	1017e5c0 	call	1017e5c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1016a4c:	e0bffd17 	ldw	r2,-12(fp)
 1016a50:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1016a54:	e0bffd17 	ldw	r2,-12(fp)
 1016a58:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1016a5c:	008040b4 	movhi	r2,258
 1016a60:	10b3aa04 	addi	r2,r2,-12632
 1016a64:	10800017 	ldw	r2,0(r2)
 1016a68:	100b883a 	mov	r5,r2
 1016a6c:	01804074 	movhi	r6,257
 1016a70:	319b5b04 	addi	r6,r6,28012
 1016a74:	e1fffd17 	ldw	r7,-12(fp)
 1016a78:	100b2440 	call	100b244 <alt_alarm_start>
 1016a7c:	1004403a 	cmpge	r2,r2,zero
 1016a80:	1000041e 	bne	r2,zero,1016a94 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1016a84:	e0fffd17 	ldw	r3,-12(fp)
 1016a88:	00a00034 	movhi	r2,32768
 1016a8c:	10bfffc4 	addi	r2,r2,-1
 1016a90:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1016a94:	e037883a 	mov	sp,fp
 1016a98:	dfc00117 	ldw	ra,4(sp)
 1016a9c:	df000017 	ldw	fp,0(sp)
 1016aa0:	dec00204 	addi	sp,sp,8
 1016aa4:	f800283a 	ret

01016aa8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1016aa8:	defff204 	addi	sp,sp,-56
 1016aac:	dfc00d15 	stw	ra,52(sp)
 1016ab0:	df000c15 	stw	fp,48(sp)
 1016ab4:	df000c04 	addi	fp,sp,48
 1016ab8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1016abc:	e0bfff17 	ldw	r2,-4(fp)
 1016ac0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1016ac4:	e0bffd17 	ldw	r2,-12(fp)
 1016ac8:	10800017 	ldw	r2,0(r2)
 1016acc:	e0bffc15 	stw	r2,-16(fp)
 1016ad0:	00000006 	br	1016ad4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1016ad4:	e0bffc17 	ldw	r2,-16(fp)
 1016ad8:	10800104 	addi	r2,r2,4
 1016adc:	10800037 	ldwio	r2,0(r2)
 1016ae0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1016ae4:	e0bffb17 	ldw	r2,-20(fp)
 1016ae8:	1080c00c 	andi	r2,r2,768
 1016aec:	1005003a 	cmpeq	r2,r2,zero
 1016af0:	1000991e 	bne	r2,zero,1016d58 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1016af4:	e0bffb17 	ldw	r2,-20(fp)
 1016af8:	1080400c 	andi	r2,r2,256
 1016afc:	1005003a 	cmpeq	r2,r2,zero
 1016b00:	1000481e 	bne	r2,zero,1016c24 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1016b04:	00800074 	movhi	r2,1
 1016b08:	e0bffa15 	stw	r2,-24(fp)
 1016b0c:	00000006 	br	1016b10 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1016b10:	e0bffd17 	ldw	r2,-12(fp)
 1016b14:	10800d17 	ldw	r2,52(r2)
 1016b18:	10800044 	addi	r2,r2,1
 1016b1c:	1081ffcc 	andi	r2,r2,2047
 1016b20:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1016b24:	e0bffd17 	ldw	r2,-12(fp)
 1016b28:	10c00e17 	ldw	r3,56(r2)
 1016b2c:	e0bff917 	ldw	r2,-28(fp)
 1016b30:	18802826 	beq	r3,r2,1016bd4 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1016b34:	e0bffc17 	ldw	r2,-16(fp)
 1016b38:	10800037 	ldwio	r2,0(r2)
 1016b3c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1016b40:	e0bffa17 	ldw	r2,-24(fp)
 1016b44:	10a0000c 	andi	r2,r2,32768
 1016b48:	1005003a 	cmpeq	r2,r2,zero
 1016b4c:	1000211e 	bne	r2,zero,1016bd4 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1016b50:	e0bffd17 	ldw	r2,-12(fp)
 1016b54:	10c00d17 	ldw	r3,52(r2)
 1016b58:	e0bffa17 	ldw	r2,-24(fp)
 1016b5c:	1009883a 	mov	r4,r2
 1016b60:	e0bffd17 	ldw	r2,-12(fp)
 1016b64:	1885883a 	add	r2,r3,r2
 1016b68:	10801104 	addi	r2,r2,68
 1016b6c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1016b70:	e0bffd17 	ldw	r2,-12(fp)
 1016b74:	10800d17 	ldw	r2,52(r2)
 1016b78:	10800044 	addi	r2,r2,1
 1016b7c:	10c1ffcc 	andi	r3,r2,2047
 1016b80:	e0bffd17 	ldw	r2,-12(fp)
 1016b84:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 1016b88:	e0bffd17 	ldw	r2,-12(fp)
 1016b8c:	10800c17 	ldw	r2,48(r2)
 1016b90:	e0bff615 	stw	r2,-40(fp)
 1016b94:	00800044 	movi	r2,1
 1016b98:	e0bff70d 	sth	r2,-36(fp)
 1016b9c:	00800044 	movi	r2,1
 1016ba0:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1016ba4:	008040b4 	movhi	r2,258
 1016ba8:	10b3b304 	addi	r2,r2,-12596
 1016bac:	10800003 	ldbu	r2,0(r2)
 1016bb0:	10803fcc 	andi	r2,r2,255
 1016bb4:	1005003a 	cmpeq	r2,r2,zero
 1016bb8:	103fd51e 	bne	r2,zero,1016b10 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 1016bbc:	e17ff70b 	ldhu	r5,-36(fp)
 1016bc0:	e1bff783 	ldbu	r6,-34(fp)
 1016bc4:	e1fffe04 	addi	r7,fp,-8
 1016bc8:	e13ff617 	ldw	r4,-40(fp)
 1016bcc:	100f6c00 	call	100f6c0 <OSFlagPost>
    return err;
 1016bd0:	003fcf06 	br	1016b10 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1016bd4:	e0bffa17 	ldw	r2,-24(fp)
 1016bd8:	10bfffec 	andhi	r2,r2,65535
 1016bdc:	1005003a 	cmpeq	r2,r2,zero
 1016be0:	1000101e 	bne	r2,zero,1016c24 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1016be4:	e0bffd17 	ldw	r2,-12(fp)
 1016be8:	10c00817 	ldw	r3,32(r2)
 1016bec:	00bfff84 	movi	r2,-2
 1016bf0:	1886703a 	and	r3,r3,r2
 1016bf4:	e0bffd17 	ldw	r2,-12(fp)
 1016bf8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1016bfc:	e0bffc17 	ldw	r2,-16(fp)
 1016c00:	11000104 	addi	r4,r2,4
 1016c04:	e0bffd17 	ldw	r2,-12(fp)
 1016c08:	10800817 	ldw	r2,32(r2)
 1016c0c:	1007883a 	mov	r3,r2
 1016c10:	2005883a 	mov	r2,r4
 1016c14:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1016c18:	e0bffc17 	ldw	r2,-16(fp)
 1016c1c:	10800104 	addi	r2,r2,4
 1016c20:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1016c24:	e0bffb17 	ldw	r2,-20(fp)
 1016c28:	1080800c 	andi	r2,r2,512
 1016c2c:	1005003a 	cmpeq	r2,r2,zero
 1016c30:	103fa81e 	bne	r2,zero,1016ad4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1016c34:	e0bffb17 	ldw	r2,-20(fp)
 1016c38:	10bfffec 	andhi	r2,r2,65535
 1016c3c:	1004d43a 	srli	r2,r2,16
 1016c40:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1016c44:	00002706 	br	1016ce4 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1016c48:	e13ffc17 	ldw	r4,-16(fp)
 1016c4c:	e0bffd17 	ldw	r2,-12(fp)
 1016c50:	10c01017 	ldw	r3,64(r2)
 1016c54:	e0bffd17 	ldw	r2,-12(fp)
 1016c58:	1885883a 	add	r2,r3,r2
 1016c5c:	10821104 	addi	r2,r2,2116
 1016c60:	10800003 	ldbu	r2,0(r2)
 1016c64:	10c03fcc 	andi	r3,r2,255
 1016c68:	18c0201c 	xori	r3,r3,128
 1016c6c:	18ffe004 	addi	r3,r3,-128
 1016c70:	2005883a 	mov	r2,r4
 1016c74:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1016c78:	e0bffd17 	ldw	r2,-12(fp)
 1016c7c:	10801017 	ldw	r2,64(r2)
 1016c80:	10800044 	addi	r2,r2,1
 1016c84:	10c1ffcc 	andi	r3,r2,2047
 1016c88:	e0bffd17 	ldw	r2,-12(fp)
 1016c8c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 1016c90:	e0bffd17 	ldw	r2,-12(fp)
 1016c94:	10800c17 	ldw	r2,48(r2)
 1016c98:	e0bff415 	stw	r2,-48(fp)
 1016c9c:	00800084 	movi	r2,2
 1016ca0:	e0bff50d 	sth	r2,-44(fp)
 1016ca4:	00800044 	movi	r2,1
 1016ca8:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1016cac:	008040b4 	movhi	r2,258
 1016cb0:	10b3b304 	addi	r2,r2,-12596
 1016cb4:	10800003 	ldbu	r2,0(r2)
 1016cb8:	10803fcc 	andi	r2,r2,255
 1016cbc:	1005003a 	cmpeq	r2,r2,zero
 1016cc0:	1000051e 	bne	r2,zero,1016cd8 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 1016cc4:	e17ff50b 	ldhu	r5,-44(fp)
 1016cc8:	e1bff583 	ldbu	r6,-42(fp)
 1016ccc:	e1fffe44 	addi	r7,fp,-7
 1016cd0:	e13ff417 	ldw	r4,-48(fp)
 1016cd4:	100f6c00 	call	100f6c0 <OSFlagPost>

        space--;
 1016cd8:	e0bff817 	ldw	r2,-32(fp)
 1016cdc:	10bfffc4 	addi	r2,r2,-1
 1016ce0:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1016ce4:	e0bff817 	ldw	r2,-32(fp)
 1016ce8:	1005003a 	cmpeq	r2,r2,zero
 1016cec:	1000051e 	bne	r2,zero,1016d04 <altera_avalon_jtag_uart_irq+0x25c>
 1016cf0:	e0bffd17 	ldw	r2,-12(fp)
 1016cf4:	10c01017 	ldw	r3,64(r2)
 1016cf8:	e0bffd17 	ldw	r2,-12(fp)
 1016cfc:	10800f17 	ldw	r2,60(r2)
 1016d00:	18bfd11e 	bne	r3,r2,1016c48 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1016d04:	e0bff817 	ldw	r2,-32(fp)
 1016d08:	1005003a 	cmpeq	r2,r2,zero
 1016d0c:	103f711e 	bne	r2,zero,1016ad4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1016d10:	e0bffd17 	ldw	r2,-12(fp)
 1016d14:	10c00817 	ldw	r3,32(r2)
 1016d18:	00bfff44 	movi	r2,-3
 1016d1c:	1886703a 	and	r3,r3,r2
 1016d20:	e0bffd17 	ldw	r2,-12(fp)
 1016d24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1016d28:	e0bffd17 	ldw	r2,-12(fp)
 1016d2c:	10800017 	ldw	r2,0(r2)
 1016d30:	11000104 	addi	r4,r2,4
 1016d34:	e0bffd17 	ldw	r2,-12(fp)
 1016d38:	10800817 	ldw	r2,32(r2)
 1016d3c:	1007883a 	mov	r3,r2
 1016d40:	2005883a 	mov	r2,r4
 1016d44:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1016d48:	e0bffc17 	ldw	r2,-16(fp)
 1016d4c:	10800104 	addi	r2,r2,4
 1016d50:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1016d54:	003f5f06 	br	1016ad4 <altera_avalon_jtag_uart_irq+0x2c>
}
 1016d58:	e037883a 	mov	sp,fp
 1016d5c:	dfc00117 	ldw	ra,4(sp)
 1016d60:	df000017 	ldw	fp,0(sp)
 1016d64:	dec00204 	addi	sp,sp,8
 1016d68:	f800283a 	ret

01016d6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1016d6c:	defff804 	addi	sp,sp,-32
 1016d70:	dfc00715 	stw	ra,28(sp)
 1016d74:	df000615 	stw	fp,24(sp)
 1016d78:	df000604 	addi	fp,sp,24
 1016d7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1016d80:	e0bfff17 	ldw	r2,-4(fp)
 1016d84:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1016d88:	e0bffd17 	ldw	r2,-12(fp)
 1016d8c:	10800017 	ldw	r2,0(r2)
 1016d90:	10800104 	addi	r2,r2,4
 1016d94:	10800037 	ldwio	r2,0(r2)
 1016d98:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1016d9c:	e0bffc17 	ldw	r2,-16(fp)
 1016da0:	1081000c 	andi	r2,r2,1024
 1016da4:	1005003a 	cmpeq	r2,r2,zero
 1016da8:	10000c1e 	bne	r2,zero,1016ddc <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1016dac:	e0bffd17 	ldw	r2,-12(fp)
 1016db0:	10800017 	ldw	r2,0(r2)
 1016db4:	11000104 	addi	r4,r2,4
 1016db8:	e0bffd17 	ldw	r2,-12(fp)
 1016dbc:	10800817 	ldw	r2,32(r2)
 1016dc0:	10810014 	ori	r2,r2,1024
 1016dc4:	1007883a 	mov	r3,r2
 1016dc8:	2005883a 	mov	r2,r4
 1016dcc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1016dd0:	e0bffd17 	ldw	r2,-12(fp)
 1016dd4:	10000915 	stw	zero,36(r2)
 1016dd8:	00002106 	br	1016e60 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1016ddc:	e0bffd17 	ldw	r2,-12(fp)
 1016de0:	10c00917 	ldw	r3,36(r2)
 1016de4:	00a00034 	movhi	r2,32768
 1016de8:	10bfff04 	addi	r2,r2,-4
 1016dec:	10c01c36 	bltu	r2,r3,1016e60 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 1016df0:	e0bffd17 	ldw	r2,-12(fp)
 1016df4:	10800917 	ldw	r2,36(r2)
 1016df8:	10c00044 	addi	r3,r2,1
 1016dfc:	e0bffd17 	ldw	r2,-12(fp)
 1016e00:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 1016e04:	e0bffd17 	ldw	r2,-12(fp)
 1016e08:	10c00917 	ldw	r3,36(r2)
 1016e0c:	e0bffd17 	ldw	r2,-12(fp)
 1016e10:	10800117 	ldw	r2,4(r2)
 1016e14:	18801236 	bltu	r3,r2,1016e60 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 1016e18:	e0bffd17 	ldw	r2,-12(fp)
 1016e1c:	10800c17 	ldw	r2,48(r2)
 1016e20:	e0bffa15 	stw	r2,-24(fp)
 1016e24:	00800104 	movi	r2,4
 1016e28:	e0bffb0d 	sth	r2,-20(fp)
 1016e2c:	00800044 	movi	r2,1
 1016e30:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1016e34:	008040b4 	movhi	r2,258
 1016e38:	10b3b304 	addi	r2,r2,-12596
 1016e3c:	10800003 	ldbu	r2,0(r2)
 1016e40:	10803fcc 	andi	r2,r2,255
 1016e44:	1005003a 	cmpeq	r2,r2,zero
 1016e48:	1000051e 	bne	r2,zero,1016e60 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 1016e4c:	e17ffb0b 	ldhu	r5,-20(fp)
 1016e50:	e1bffb83 	ldbu	r6,-18(fp)
 1016e54:	e1fffe04 	addi	r7,fp,-8
 1016e58:	e13ffa17 	ldw	r4,-24(fp)
 1016e5c:	100f6c00 	call	100f6c0 <OSFlagPost>
 1016e60:	008040b4 	movhi	r2,258
 1016e64:	10b3aa04 	addi	r2,r2,-12632
 1016e68:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 1016e6c:	e037883a 	mov	sp,fp
 1016e70:	dfc00117 	ldw	ra,4(sp)
 1016e74:	df000017 	ldw	fp,0(sp)
 1016e78:	dec00204 	addi	sp,sp,8
 1016e7c:	f800283a 	ret

01016e80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1016e80:	defffc04 	addi	sp,sp,-16
 1016e84:	df000315 	stw	fp,12(sp)
 1016e88:	df000304 	addi	fp,sp,12
 1016e8c:	e13ffd15 	stw	r4,-12(fp)
 1016e90:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1016e94:	00000706 	br	1016eb4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1016e98:	e0bffe17 	ldw	r2,-8(fp)
 1016e9c:	1090000c 	andi	r2,r2,16384
 1016ea0:	1005003a 	cmpeq	r2,r2,zero
 1016ea4:	1000031e 	bne	r2,zero,1016eb4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1016ea8:	00bffd44 	movi	r2,-11
 1016eac:	e0bfff15 	stw	r2,-4(fp)
 1016eb0:	00000b06 	br	1016ee0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1016eb4:	e0bffd17 	ldw	r2,-12(fp)
 1016eb8:	10c01017 	ldw	r3,64(r2)
 1016ebc:	e0bffd17 	ldw	r2,-12(fp)
 1016ec0:	10800f17 	ldw	r2,60(r2)
 1016ec4:	18800526 	beq	r3,r2,1016edc <altera_avalon_jtag_uart_close+0x5c>
 1016ec8:	e0bffd17 	ldw	r2,-12(fp)
 1016ecc:	10c00917 	ldw	r3,36(r2)
 1016ed0:	e0bffd17 	ldw	r2,-12(fp)
 1016ed4:	10800117 	ldw	r2,4(r2)
 1016ed8:	18bfef36 	bltu	r3,r2,1016e98 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1016edc:	e03fff15 	stw	zero,-4(fp)
 1016ee0:	e0bfff17 	ldw	r2,-4(fp)
}
 1016ee4:	e037883a 	mov	sp,fp
 1016ee8:	df000017 	ldw	fp,0(sp)
 1016eec:	dec00104 	addi	sp,sp,4
 1016ef0:	f800283a 	ret

01016ef4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1016ef4:	defff804 	addi	sp,sp,-32
 1016ef8:	df000715 	stw	fp,28(sp)
 1016efc:	df000704 	addi	fp,sp,28
 1016f00:	e13ffb15 	stw	r4,-20(fp)
 1016f04:	e17ffc15 	stw	r5,-16(fp)
 1016f08:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1016f0c:	00bff9c4 	movi	r2,-25
 1016f10:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1016f14:	e0bffc17 	ldw	r2,-16(fp)
 1016f18:	e0bfff15 	stw	r2,-4(fp)
 1016f1c:	e0ffff17 	ldw	r3,-4(fp)
 1016f20:	189a8060 	cmpeqi	r2,r3,27137
 1016f24:	1000041e 	bne	r2,zero,1016f38 <altera_avalon_jtag_uart_ioctl+0x44>
 1016f28:	e0ffff17 	ldw	r3,-4(fp)
 1016f2c:	189a80a0 	cmpeqi	r2,r3,27138
 1016f30:	10001b1e 	bne	r2,zero,1016fa0 <altera_avalon_jtag_uart_ioctl+0xac>
 1016f34:	00002706 	br	1016fd4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1016f38:	e0bffb17 	ldw	r2,-20(fp)
 1016f3c:	10c00117 	ldw	r3,4(r2)
 1016f40:	00a00034 	movhi	r2,32768
 1016f44:	10bfffc4 	addi	r2,r2,-1
 1016f48:	18802226 	beq	r3,r2,1016fd4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1016f4c:	e0bffd17 	ldw	r2,-12(fp)
 1016f50:	10800017 	ldw	r2,0(r2)
 1016f54:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1016f58:	e0bff917 	ldw	r2,-28(fp)
 1016f5c:	10800090 	cmplti	r2,r2,2
 1016f60:	1000071e 	bne	r2,zero,1016f80 <altera_avalon_jtag_uart_ioctl+0x8c>
 1016f64:	e0fff917 	ldw	r3,-28(fp)
 1016f68:	00a00034 	movhi	r2,32768
 1016f6c:	10bfffc4 	addi	r2,r2,-1
 1016f70:	18800326 	beq	r3,r2,1016f80 <altera_avalon_jtag_uart_ioctl+0x8c>
 1016f74:	e0bff917 	ldw	r2,-28(fp)
 1016f78:	e0bffe15 	stw	r2,-8(fp)
 1016f7c:	00000306 	br	1016f8c <altera_avalon_jtag_uart_ioctl+0x98>
 1016f80:	00e00034 	movhi	r3,32768
 1016f84:	18ffff84 	addi	r3,r3,-2
 1016f88:	e0fffe15 	stw	r3,-8(fp)
 1016f8c:	e0bffb17 	ldw	r2,-20(fp)
 1016f90:	e0fffe17 	ldw	r3,-8(fp)
 1016f94:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1016f98:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1016f9c:	00000d06 	br	1016fd4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1016fa0:	e0bffb17 	ldw	r2,-20(fp)
 1016fa4:	10c00117 	ldw	r3,4(r2)
 1016fa8:	00a00034 	movhi	r2,32768
 1016fac:	10bfffc4 	addi	r2,r2,-1
 1016fb0:	18800826 	beq	r3,r2,1016fd4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1016fb4:	e13ffd17 	ldw	r4,-12(fp)
 1016fb8:	e0bffb17 	ldw	r2,-20(fp)
 1016fbc:	10c00917 	ldw	r3,36(r2)
 1016fc0:	e0bffb17 	ldw	r2,-20(fp)
 1016fc4:	10800117 	ldw	r2,4(r2)
 1016fc8:	1885803a 	cmpltu	r2,r3,r2
 1016fcc:	20800015 	stw	r2,0(r4)
      rc = 0;
 1016fd0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1016fd4:	e0bffa17 	ldw	r2,-24(fp)
}
 1016fd8:	e037883a 	mov	sp,fp
 1016fdc:	df000017 	ldw	fp,0(sp)
 1016fe0:	dec00104 	addi	sp,sp,4
 1016fe4:	f800283a 	ret

01016fe8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1016fe8:	deffeb04 	addi	sp,sp,-84
 1016fec:	dfc01415 	stw	ra,80(sp)
 1016ff0:	df001315 	stw	fp,76(sp)
 1016ff4:	df001304 	addi	fp,sp,76
 1016ff8:	e13ffb15 	stw	r4,-20(fp)
 1016ffc:	e17ffc15 	stw	r5,-16(fp)
 1017000:	e1bffd15 	stw	r6,-12(fp)
 1017004:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1017008:	e0bffc17 	ldw	r2,-16(fp)
 101700c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 1017010:	e0bffb17 	ldw	r2,-20(fp)
 1017014:	10800a17 	ldw	r2,40(r2)
 1017018:	e0bff315 	stw	r2,-52(fp)
 101701c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 1017020:	e17ff40b 	ldhu	r5,-48(fp)
 1017024:	e1bffa44 	addi	r6,fp,-23
 1017028:	e13ff317 	ldw	r4,-52(fp)
 101702c:	1012be00 	call	1012be0 <OSSemPend>

  while (space > 0)
 1017030:	00006406 	br	10171c4 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1017034:	e0bffb17 	ldw	r2,-20(fp)
 1017038:	10800d17 	ldw	r2,52(r2)
 101703c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 1017040:	e0bffb17 	ldw	r2,-20(fp)
 1017044:	10800e17 	ldw	r2,56(r2)
 1017048:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 101704c:	e0fff617 	ldw	r3,-40(fp)
 1017050:	e0bff517 	ldw	r2,-44(fp)
 1017054:	18800536 	bltu	r3,r2,101706c <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 1017058:	e0bff617 	ldw	r2,-40(fp)
 101705c:	e0fff517 	ldw	r3,-44(fp)
 1017060:	10c5c83a 	sub	r2,r2,r3
 1017064:	e0bff715 	stw	r2,-36(fp)
 1017068:	00000406 	br	101707c <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 101706c:	00820004 	movi	r2,2048
 1017070:	e0fff517 	ldw	r3,-44(fp)
 1017074:	10c5c83a 	sub	r2,r2,r3
 1017078:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 101707c:	e0bff717 	ldw	r2,-36(fp)
 1017080:	1005003a 	cmpeq	r2,r2,zero
 1017084:	10001f1e 	bne	r2,zero,1017104 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 1017088:	e0fffd17 	ldw	r3,-12(fp)
 101708c:	e0bff717 	ldw	r2,-36(fp)
 1017090:	1880022e 	bgeu	r3,r2,101709c <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 1017094:	e0bffd17 	ldw	r2,-12(fp)
 1017098:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 101709c:	e0bffb17 	ldw	r2,-20(fp)
 10170a0:	10c01104 	addi	r3,r2,68
 10170a4:	e0bff517 	ldw	r2,-44(fp)
 10170a8:	1887883a 	add	r3,r3,r2
 10170ac:	e0bff917 	ldw	r2,-28(fp)
 10170b0:	1009883a 	mov	r4,r2
 10170b4:	180b883a 	mov	r5,r3
 10170b8:	e1bff717 	ldw	r6,-36(fp)
 10170bc:	1007b640 	call	1007b64 <memcpy>
      ptr   += n;
 10170c0:	e0fff717 	ldw	r3,-36(fp)
 10170c4:	e0bff917 	ldw	r2,-28(fp)
 10170c8:	10c5883a 	add	r2,r2,r3
 10170cc:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 10170d0:	e0fffd17 	ldw	r3,-12(fp)
 10170d4:	e0bff717 	ldw	r2,-36(fp)
 10170d8:	1885c83a 	sub	r2,r3,r2
 10170dc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10170e0:	e0fff517 	ldw	r3,-44(fp)
 10170e4:	e0bff717 	ldw	r2,-36(fp)
 10170e8:	1885883a 	add	r2,r3,r2
 10170ec:	10c1ffcc 	andi	r3,r2,2047
 10170f0:	e0bffb17 	ldw	r2,-20(fp)
 10170f4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 10170f8:	e0bffd17 	ldw	r2,-12(fp)
 10170fc:	10800048 	cmpgei	r2,r2,1
 1017100:	103fcc1e 	bne	r2,zero,1017034 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1017104:	e0fff917 	ldw	r3,-28(fp)
 1017108:	e0bffc17 	ldw	r2,-16(fp)
 101710c:	1880301e 	bne	r3,r2,10171d0 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1017110:	e0bffe17 	ldw	r2,-8(fp)
 1017114:	1090000c 	andi	r2,r2,16384
 1017118:	1004c03a 	cmpne	r2,r2,zero
 101711c:	10002c1e 	bne	r2,zero,10171d0 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 1017120:	008040b4 	movhi	r2,258
 1017124:	10b3b304 	addi	r2,r2,-12596
 1017128:	10800003 	ldbu	r2,0(r2)
 101712c:	10803fcc 	andi	r2,r2,255
 1017130:	10800058 	cmpnei	r2,r2,1
 1017134:	1000161e 	bne	r2,zero,1017190 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 1017138:	e0bffb17 	ldw	r2,-20(fp)
 101713c:	10800c17 	ldw	r2,48(r2)
 1017140:	e0bff015 	stw	r2,-64(fp)
 1017144:	00800144 	movi	r2,5
 1017148:	e0bff10d 	sth	r2,-60(fp)
 101714c:	00bfe0c4 	movi	r2,-125
 1017150:	e0bff185 	stb	r2,-58(fp)
 1017154:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1017158:	008040b4 	movhi	r2,258
 101715c:	10b3b304 	addi	r2,r2,-12596
 1017160:	10800003 	ldbu	r2,0(r2)
 1017164:	10803fcc 	andi	r2,r2,255
 1017168:	1005003a 	cmpeq	r2,r2,zero
 101716c:	1000111e 	bne	r2,zero,10171b4 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 1017170:	e17ff10b 	ldhu	r5,-60(fp)
 1017174:	e1bff183 	ldbu	r6,-58(fp)
 1017178:	e1fff20b 	ldhu	r7,-56(fp)
 101717c:	e0bffa04 	addi	r2,fp,-24
 1017180:	d8800015 	stw	r2,0(sp)
 1017184:	e13ff017 	ldw	r4,-64(fp)
 1017188:	100f0140 	call	100f014 <OSFlagPend>
    return err;
 101718c:	00000906 	br	10171b4 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1017190:	e0bffb17 	ldw	r2,-20(fp)
 1017194:	10c00d17 	ldw	r3,52(r2)
 1017198:	e0bff617 	ldw	r2,-40(fp)
 101719c:	1880051e 	bne	r3,r2,10171b4 <altera_avalon_jtag_uart_read+0x1cc>
 10171a0:	e0bffb17 	ldw	r2,-20(fp)
 10171a4:	10c00917 	ldw	r3,36(r2)
 10171a8:	e0bffb17 	ldw	r2,-20(fp)
 10171ac:	10800117 	ldw	r2,4(r2)
 10171b0:	18bff736 	bltu	r3,r2,1017190 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10171b4:	e0bffb17 	ldw	r2,-20(fp)
 10171b8:	10c00d17 	ldw	r3,52(r2)
 10171bc:	e0bff617 	ldw	r2,-40(fp)
 10171c0:	18800326 	beq	r3,r2,10171d0 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10171c4:	e0bffd17 	ldw	r2,-12(fp)
 10171c8:	10800048 	cmpgei	r2,r2,1
 10171cc:	103f991e 	bne	r2,zero,1017034 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 10171d0:	e0bffb17 	ldw	r2,-20(fp)
 10171d4:	11000a17 	ldw	r4,40(r2)
 10171d8:	1012fd80 	call	1012fd8 <OSSemPost>

  if (ptr != buffer)
 10171dc:	e0fff917 	ldw	r3,-28(fp)
 10171e0:	e0bffc17 	ldw	r2,-16(fp)
 10171e4:	18801926 	beq	r3,r2,101724c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10171e8:	0005303a 	rdctl	r2,status
 10171ec:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10171f0:	e0ffef17 	ldw	r3,-68(fp)
 10171f4:	00bfff84 	movi	r2,-2
 10171f8:	1884703a 	and	r2,r3,r2
 10171fc:	1001703a 	wrctl	status,r2
  
  return context;
 1017200:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1017204:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1017208:	e0bffb17 	ldw	r2,-20(fp)
 101720c:	10800817 	ldw	r2,32(r2)
 1017210:	10c00054 	ori	r3,r2,1
 1017214:	e0bffb17 	ldw	r2,-20(fp)
 1017218:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101721c:	e0bffb17 	ldw	r2,-20(fp)
 1017220:	10800017 	ldw	r2,0(r2)
 1017224:	11000104 	addi	r4,r2,4
 1017228:	e0bffb17 	ldw	r2,-20(fp)
 101722c:	10800817 	ldw	r2,32(r2)
 1017230:	1007883a 	mov	r3,r2
 1017234:	2005883a 	mov	r2,r4
 1017238:	10c00035 	stwio	r3,0(r2)
 101723c:	e0bff817 	ldw	r2,-32(fp)
 1017240:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017244:	e0bfee17 	ldw	r2,-72(fp)
 1017248:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 101724c:	e0fff917 	ldw	r3,-28(fp)
 1017250:	e0bffc17 	ldw	r2,-16(fp)
 1017254:	18800526 	beq	r3,r2,101726c <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 1017258:	e0fff917 	ldw	r3,-28(fp)
 101725c:	e0bffc17 	ldw	r2,-16(fp)
 1017260:	1887c83a 	sub	r3,r3,r2
 1017264:	e0ffff15 	stw	r3,-4(fp)
 1017268:	00000906 	br	1017290 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 101726c:	e0bffe17 	ldw	r2,-8(fp)
 1017270:	1090000c 	andi	r2,r2,16384
 1017274:	1005003a 	cmpeq	r2,r2,zero
 1017278:	1000031e 	bne	r2,zero,1017288 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 101727c:	00bffd44 	movi	r2,-11
 1017280:	e0bfff15 	stw	r2,-4(fp)
 1017284:	00000206 	br	1017290 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 1017288:	00bffec4 	movi	r2,-5
 101728c:	e0bfff15 	stw	r2,-4(fp)
 1017290:	e0bfff17 	ldw	r2,-4(fp)
}
 1017294:	e037883a 	mov	sp,fp
 1017298:	dfc00117 	ldw	ra,4(sp)
 101729c:	df000017 	ldw	fp,0(sp)
 10172a0:	dec00204 	addi	sp,sp,8
 10172a4:	f800283a 	ret

010172a8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 10172a8:	deffeb04 	addi	sp,sp,-84
 10172ac:	dfc01415 	stw	ra,80(sp)
 10172b0:	df001315 	stw	fp,76(sp)
 10172b4:	df001304 	addi	fp,sp,76
 10172b8:	e13ffb15 	stw	r4,-20(fp)
 10172bc:	e17ffc15 	stw	r5,-16(fp)
 10172c0:	e1bffd15 	stw	r6,-12(fp)
 10172c4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10172c8:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10172cc:	e0bffc17 	ldw	r2,-16(fp)
 10172d0:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 10172d4:	e0bffb17 	ldw	r2,-20(fp)
 10172d8:	10800b17 	ldw	r2,44(r2)
 10172dc:	e0bff315 	stw	r2,-52(fp)
 10172e0:	e03ff40d 	sth	zero,-48(fp)
 10172e4:	e17ff40b 	ldhu	r5,-48(fp)
 10172e8:	e1bffa04 	addi	r6,fp,-24
 10172ec:	e13ff317 	ldw	r4,-52(fp)
 10172f0:	1012be00 	call	1012be0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10172f4:	00003a06 	br	10173e0 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10172f8:	e0bffb17 	ldw	r2,-20(fp)
 10172fc:	10800f17 	ldw	r2,60(r2)
 1017300:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1017304:	e0bffb17 	ldw	r2,-20(fp)
 1017308:	10801017 	ldw	r2,64(r2)
 101730c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 1017310:	e0fff917 	ldw	r3,-28(fp)
 1017314:	e0bff817 	ldw	r2,-32(fp)
 1017318:	1880062e 	bgeu	r3,r2,1017334 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 101731c:	e0fff817 	ldw	r3,-32(fp)
 1017320:	e0bff917 	ldw	r2,-28(fp)
 1017324:	1885c83a 	sub	r2,r3,r2
 1017328:	10bfffc4 	addi	r2,r2,-1
 101732c:	e0bff715 	stw	r2,-36(fp)
 1017330:	00000c06 	br	1017364 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 1017334:	e0bff817 	ldw	r2,-32(fp)
 1017338:	1005003a 	cmpeq	r2,r2,zero
 101733c:	1000051e 	bne	r2,zero,1017354 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1017340:	00820004 	movi	r2,2048
 1017344:	e0fff917 	ldw	r3,-28(fp)
 1017348:	10c5c83a 	sub	r2,r2,r3
 101734c:	e0bff715 	stw	r2,-36(fp)
 1017350:	00000406 	br	1017364 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1017354:	0081ffc4 	movi	r2,2047
 1017358:	e0fff917 	ldw	r3,-28(fp)
 101735c:	10c5c83a 	sub	r2,r2,r3
 1017360:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1017364:	e0bff717 	ldw	r2,-36(fp)
 1017368:	1005003a 	cmpeq	r2,r2,zero
 101736c:	10001f1e 	bne	r2,zero,10173ec <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 1017370:	e0fffd17 	ldw	r3,-12(fp)
 1017374:	e0bff717 	ldw	r2,-36(fp)
 1017378:	1880022e 	bgeu	r3,r2,1017384 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 101737c:	e0bffd17 	ldw	r2,-12(fp)
 1017380:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1017384:	e0bffb17 	ldw	r2,-20(fp)
 1017388:	10c21104 	addi	r3,r2,2116
 101738c:	e0bff917 	ldw	r2,-28(fp)
 1017390:	1885883a 	add	r2,r3,r2
 1017394:	e0fffc17 	ldw	r3,-16(fp)
 1017398:	1009883a 	mov	r4,r2
 101739c:	180b883a 	mov	r5,r3
 10173a0:	e1bff717 	ldw	r6,-36(fp)
 10173a4:	1007b640 	call	1007b64 <memcpy>
      ptr   += n;
 10173a8:	e0fff717 	ldw	r3,-36(fp)
 10173ac:	e0bffc17 	ldw	r2,-16(fp)
 10173b0:	10c5883a 	add	r2,r2,r3
 10173b4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 10173b8:	e0fffd17 	ldw	r3,-12(fp)
 10173bc:	e0bff717 	ldw	r2,-36(fp)
 10173c0:	1885c83a 	sub	r2,r3,r2
 10173c4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10173c8:	e0fff917 	ldw	r3,-28(fp)
 10173cc:	e0bff717 	ldw	r2,-36(fp)
 10173d0:	1885883a 	add	r2,r3,r2
 10173d4:	10c1ffcc 	andi	r3,r2,2047
 10173d8:	e0bffb17 	ldw	r2,-20(fp)
 10173dc:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10173e0:	e0bffd17 	ldw	r2,-12(fp)
 10173e4:	10800048 	cmpgei	r2,r2,1
 10173e8:	103fc31e 	bne	r2,zero,10172f8 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10173ec:	0005303a 	rdctl	r2,status
 10173f0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10173f4:	e0fff217 	ldw	r3,-56(fp)
 10173f8:	00bfff84 	movi	r2,-2
 10173fc:	1884703a 	and	r2,r3,r2
 1017400:	1001703a 	wrctl	status,r2
  
  return context;
 1017404:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1017408:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101740c:	e0bffb17 	ldw	r2,-20(fp)
 1017410:	10800817 	ldw	r2,32(r2)
 1017414:	10c00094 	ori	r3,r2,2
 1017418:	e0bffb17 	ldw	r2,-20(fp)
 101741c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1017420:	e0bffb17 	ldw	r2,-20(fp)
 1017424:	10800017 	ldw	r2,0(r2)
 1017428:	11000104 	addi	r4,r2,4
 101742c:	e0bffb17 	ldw	r2,-20(fp)
 1017430:	10800817 	ldw	r2,32(r2)
 1017434:	1007883a 	mov	r3,r2
 1017438:	2005883a 	mov	r2,r4
 101743c:	10c00035 	stwio	r3,0(r2)
 1017440:	e0bff617 	ldw	r2,-40(fp)
 1017444:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017448:	e0bff117 	ldw	r2,-60(fp)
 101744c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1017450:	e0bffd17 	ldw	r2,-12(fp)
 1017454:	10800050 	cmplti	r2,r2,1
 1017458:	10002d1e 	bne	r2,zero,1017510 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 101745c:	e0bffe17 	ldw	r2,-8(fp)
 1017460:	1090000c 	andi	r2,r2,16384
 1017464:	1004c03a 	cmpne	r2,r2,zero
 1017468:	10002c1e 	bne	r2,zero,101751c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 101746c:	008040b4 	movhi	r2,258
 1017470:	10b3b304 	addi	r2,r2,-12596
 1017474:	10800003 	ldbu	r2,0(r2)
 1017478:	10803fcc 	andi	r2,r2,255
 101747c:	10800058 	cmpnei	r2,r2,1
 1017480:	1000161e 	bne	r2,zero,10174dc <altera_avalon_jtag_uart_write+0x234>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 1017484:	e0bffb17 	ldw	r2,-20(fp)
 1017488:	10800c17 	ldw	r2,48(r2)
 101748c:	e0bfee15 	stw	r2,-72(fp)
 1017490:	00800184 	movi	r2,6
 1017494:	e0bfef0d 	sth	r2,-68(fp)
 1017498:	00bfe0c4 	movi	r2,-125
 101749c:	e0bfef85 	stb	r2,-66(fp)
 10174a0:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 10174a4:	008040b4 	movhi	r2,258
 10174a8:	10b3b304 	addi	r2,r2,-12596
 10174ac:	10800003 	ldbu	r2,0(r2)
 10174b0:	10803fcc 	andi	r2,r2,255
 10174b4:	1005003a 	cmpeq	r2,r2,zero
 10174b8:	1000111e 	bne	r2,zero,1017500 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 10174bc:	e17fef0b 	ldhu	r5,-68(fp)
 10174c0:	e1bfef83 	ldbu	r6,-66(fp)
 10174c4:	e1fff00b 	ldhu	r7,-64(fp)
 10174c8:	e0bffa44 	addi	r2,fp,-23
 10174cc:	d8800015 	stw	r2,0(sp)
 10174d0:	e13fee17 	ldw	r4,-72(fp)
 10174d4:	100f0140 	call	100f014 <OSFlagPend>
    return err;
 10174d8:	00000906 	br	1017500 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10174dc:	e0bffb17 	ldw	r2,-20(fp)
 10174e0:	10c01017 	ldw	r3,64(r2)
 10174e4:	e0bff817 	ldw	r2,-32(fp)
 10174e8:	1880051e 	bne	r3,r2,1017500 <altera_avalon_jtag_uart_write+0x258>
 10174ec:	e0bffb17 	ldw	r2,-20(fp)
 10174f0:	10c00917 	ldw	r3,36(r2)
 10174f4:	e0bffb17 	ldw	r2,-20(fp)
 10174f8:	10800117 	ldw	r2,4(r2)
 10174fc:	18bff736 	bltu	r3,r2,10174dc <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1017500:	e0bffb17 	ldw	r2,-20(fp)
 1017504:	10c01017 	ldw	r3,64(r2)
 1017508:	e0bff817 	ldw	r2,-32(fp)
 101750c:	18800326 	beq	r3,r2,101751c <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
 1017510:	e0bffd17 	ldw	r2,-12(fp)
 1017514:	10800048 	cmpgei	r2,r2,1
 1017518:	103fb11e 	bne	r2,zero,10173e0 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 101751c:	e0bffb17 	ldw	r2,-20(fp)
 1017520:	11000b17 	ldw	r4,44(r2)
 1017524:	1012fd80 	call	1012fd8 <OSSemPost>

  if (ptr != start)
 1017528:	e0fffc17 	ldw	r3,-16(fp)
 101752c:	e0bff517 	ldw	r2,-44(fp)
 1017530:	18800526 	beq	r3,r2,1017548 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 1017534:	e0fffc17 	ldw	r3,-16(fp)
 1017538:	e0bff517 	ldw	r2,-44(fp)
 101753c:	1887c83a 	sub	r3,r3,r2
 1017540:	e0ffff15 	stw	r3,-4(fp)
 1017544:	00000906 	br	101756c <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 1017548:	e0bffe17 	ldw	r2,-8(fp)
 101754c:	1090000c 	andi	r2,r2,16384
 1017550:	1005003a 	cmpeq	r2,r2,zero
 1017554:	1000031e 	bne	r2,zero,1017564 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 1017558:	00bffd44 	movi	r2,-11
 101755c:	e0bfff15 	stw	r2,-4(fp)
 1017560:	00000206 	br	101756c <altera_avalon_jtag_uart_write+0x2c4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1017564:	00bffec4 	movi	r2,-5
 1017568:	e0bfff15 	stw	r2,-4(fp)
 101756c:	e0bfff17 	ldw	r2,-4(fp)
}
 1017570:	e037883a 	mov	sp,fp
 1017574:	dfc00117 	ldw	ra,4(sp)
 1017578:	df000017 	ldw	fp,0(sp)
 101757c:	dec00204 	addi	sp,sp,8
 1017580:	f800283a 	ret

01017584 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1017584:	defffa04 	addi	sp,sp,-24
 1017588:	dfc00515 	stw	ra,20(sp)
 101758c:	df000415 	stw	fp,16(sp)
 1017590:	df000404 	addi	fp,sp,16
 1017594:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1017598:	e0bfff17 	ldw	r2,-4(fp)
 101759c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10175a0:	e0bfff17 	ldw	r2,-4(fp)
 10175a4:	10800104 	addi	r2,r2,4
 10175a8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10175ac:	0005303a 	rdctl	r2,status
 10175b0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10175b4:	e0fffd17 	ldw	r3,-12(fp)
 10175b8:	00bfff84 	movi	r2,-2
 10175bc:	1884703a 	and	r2,r3,r2
 10175c0:	1001703a 	wrctl	status,r2
  
  return context;
 10175c4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10175c8:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 10175cc:	100bdd80 	call	100bdd8 <alt_tick>
 10175d0:	e0bffe17 	ldw	r2,-8(fp)
 10175d4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10175d8:	e0bffc17 	ldw	r2,-16(fp)
 10175dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10175e0:	e037883a 	mov	sp,fp
 10175e4:	dfc00117 	ldw	ra,4(sp)
 10175e8:	df000017 	ldw	fp,0(sp)
 10175ec:	dec00204 	addi	sp,sp,8
 10175f0:	f800283a 	ret

010175f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10175f4:	defff804 	addi	sp,sp,-32
 10175f8:	dfc00715 	stw	ra,28(sp)
 10175fc:	df000615 	stw	fp,24(sp)
 1017600:	df000604 	addi	fp,sp,24
 1017604:	e13ffc15 	stw	r4,-16(fp)
 1017608:	e17ffd15 	stw	r5,-12(fp)
 101760c:	e1bffe15 	stw	r6,-8(fp)
 1017610:	e1ffff15 	stw	r7,-4(fp)
 1017614:	e0bfff17 	ldw	r2,-4(fp)
 1017618:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 101761c:	008040b4 	movhi	r2,258
 1017620:	10b3aa04 	addi	r2,r2,-12632
 1017624:	10800017 	ldw	r2,0(r2)
 1017628:	1004c03a 	cmpne	r2,r2,zero
 101762c:	1000041e 	bne	r2,zero,1017640 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1017630:	00c040b4 	movhi	r3,258
 1017634:	18f3aa04 	addi	r3,r3,-12632
 1017638:	e0bffb17 	ldw	r2,-20(fp)
 101763c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1017640:	e0bffc17 	ldw	r2,-16(fp)
 1017644:	10800104 	addi	r2,r2,4
 1017648:	1007883a 	mov	r3,r2
 101764c:	008001c4 	movi	r2,7
 1017650:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1017654:	d8000015 	stw	zero,0(sp)
 1017658:	e13ffd17 	ldw	r4,-12(fp)
 101765c:	e17ffe17 	ldw	r5,-8(fp)
 1017660:	01804074 	movhi	r6,257
 1017664:	319d6104 	addi	r6,r6,30084
 1017668:	e1fffc17 	ldw	r7,-16(fp)
 101766c:	1017e5c0 	call	1017e5c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1017670:	e037883a 	mov	sp,fp
 1017674:	dfc00117 	ldw	ra,4(sp)
 1017678:	df000017 	ldw	fp,0(sp)
 101767c:	dec00204 	addi	sp,sp,8
 1017680:	f800283a 	ret

01017684 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1017684:	defffc04 	addi	sp,sp,-16
 1017688:	df000315 	stw	fp,12(sp)
 101768c:	df000304 	addi	fp,sp,12
 1017690:	e13ffe15 	stw	r4,-8(fp)
 1017694:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1017698:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 101769c:	e0bfff17 	ldw	r2,-4(fp)
 10176a0:	1004c03a 	cmpne	r2,r2,zero
 10176a4:	1000061e 	bne	r2,zero,10176c0 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 10176a8:	e0bffe17 	ldw	r2,-8(fp)
 10176ac:	1007883a 	mov	r3,r2
 10176b0:	e0bffd03 	ldbu	r2,-12(fp)
 10176b4:	10c4b03a 	or	r2,r2,r3
 10176b8:	e0bffd05 	stb	r2,-12(fp)
 10176bc:	00000806 	br	10176e0 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 10176c0:	e0bffe17 	ldw	r2,-8(fp)
 10176c4:	1007883a 	mov	r3,r2
 10176c8:	e0bffd03 	ldbu	r2,-12(fp)
 10176cc:	10c4b03a 	or	r2,r2,r3
 10176d0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 10176d4:	e0bffd03 	ldbu	r2,-12(fp)
 10176d8:	10801014 	ori	r2,r2,64
 10176dc:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 10176e0:	e0fffd03 	ldbu	r3,-12(fp)
 10176e4:	00bfe004 	movi	r2,-128
 10176e8:	1884b03a 	or	r2,r3,r2
 10176ec:	10803fcc 	andi	r2,r2,255
}
 10176f0:	e037883a 	mov	sp,fp
 10176f4:	df000017 	ldw	fp,0(sp)
 10176f8:	dec00104 	addi	sp,sp,4
 10176fc:	f800283a 	ret

01017700 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1017700:	defffd04 	addi	sp,sp,-12
 1017704:	df000215 	stw	fp,8(sp)
 1017708:	df000204 	addi	fp,sp,8
 101770c:	e13ffe15 	stw	r4,-8(fp)
 1017710:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1017714:	e0bffe17 	ldw	r2,-8(fp)
 1017718:	10800a17 	ldw	r2,40(r2)
 101771c:	e0ffff03 	ldbu	r3,-4(fp)
 1017720:	10c00025 	stbio	r3,0(r2)
}
 1017724:	e037883a 	mov	sp,fp
 1017728:	df000017 	ldw	fp,0(sp)
 101772c:	dec00104 	addi	sp,sp,4
 1017730:	f800283a 	ret

01017734 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1017734:	defffe04 	addi	sp,sp,-8
 1017738:	df000115 	stw	fp,4(sp)
 101773c:	df000104 	addi	fp,sp,4
 1017740:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1017744:	e0bfff17 	ldw	r2,-4(fp)
 1017748:	10800a17 	ldw	r2,40(r2)
 101774c:	1007883a 	mov	r3,r2
 1017750:	00800044 	movi	r2,1
 1017754:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1017758:	e037883a 	mov	sp,fp
 101775c:	df000017 	ldw	fp,0(sp)
 1017760:	dec00104 	addi	sp,sp,4
 1017764:	f800283a 	ret

01017768 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1017768:	defffc04 	addi	sp,sp,-16
 101776c:	dfc00315 	stw	ra,12(sp)
 1017770:	df000215 	stw	fp,8(sp)
 1017774:	df000204 	addi	fp,sp,8
 1017778:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 101777c:	e13fff17 	ldw	r4,-4(fp)
 1017780:	014040b4 	movhi	r5,258
 1017784:	296c9204 	addi	r5,r5,-19896
 1017788:	1017dac0 	call	1017dac <alt_find_dev>
 101778c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1017790:	e0bffe17 	ldw	r2,-8(fp)
}
 1017794:	e037883a 	mov	sp,fp
 1017798:	dfc00117 	ldw	ra,4(sp)
 101779c:	df000017 	ldw	fp,0(sp)
 10177a0:	dec00204 	addi	sp,sp,8
 10177a4:	f800283a 	ret

010177a8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 10177a8:	defffb04 	addi	sp,sp,-20
 10177ac:	df000415 	stw	fp,16(sp)
 10177b0:	df000404 	addi	fp,sp,16
 10177b4:	e13ffd15 	stw	r4,-12(fp)
 10177b8:	e17ffe15 	stw	r5,-8(fp)
 10177bc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 10177c0:	e03ffc15 	stw	zero,-16(fp)
 10177c4:	00000f06 	br	1017804 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 10177c8:	e0bffd17 	ldw	r2,-12(fp)
 10177cc:	10800a17 	ldw	r2,40(r2)
 10177d0:	11000044 	addi	r4,r2,1
 10177d4:	e0fffc17 	ldw	r3,-16(fp)
 10177d8:	e0bffe17 	ldw	r2,-8(fp)
 10177dc:	1885883a 	add	r2,r3,r2
 10177e0:	10800003 	ldbu	r2,0(r2)
 10177e4:	10c03fcc 	andi	r3,r2,255
 10177e8:	18c0201c 	xori	r3,r3,128
 10177ec:	18ffe004 	addi	r3,r3,-128
 10177f0:	2005883a 	mov	r2,r4
 10177f4:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 10177f8:	e0bffc17 	ldw	r2,-16(fp)
 10177fc:	10800044 	addi	r2,r2,1
 1017800:	e0bffc15 	stw	r2,-16(fp)
 1017804:	e0fffc17 	ldw	r3,-16(fp)
 1017808:	e0bfff17 	ldw	r2,-4(fp)
 101780c:	18bfee36 	bltu	r3,r2,10177c8 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1017810:	e037883a 	mov	sp,fp
 1017814:	df000017 	ldw	fp,0(sp)
 1017818:	dec00104 	addi	sp,sp,4
 101781c:	f800283a 	ret

01017820 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1017820:	defffd04 	addi	sp,sp,-12
 1017824:	df000215 	stw	fp,8(sp)
 1017828:	df000204 	addi	fp,sp,8
 101782c:	e13ffe15 	stw	r4,-8(fp)
 1017830:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1017834:	00000d06 	br	101786c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1017838:	e0bffe17 	ldw	r2,-8(fp)
 101783c:	10800a17 	ldw	r2,40(r2)
 1017840:	11000044 	addi	r4,r2,1
 1017844:	e0bfff17 	ldw	r2,-4(fp)
 1017848:	10800003 	ldbu	r2,0(r2)
 101784c:	10c03fcc 	andi	r3,r2,255
 1017850:	18c0201c 	xori	r3,r3,128
 1017854:	18ffe004 	addi	r3,r3,-128
 1017858:	2005883a 	mov	r2,r4
 101785c:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1017860:	e0bfff17 	ldw	r2,-4(fp)
 1017864:	10800044 	addi	r2,r2,1
 1017868:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 101786c:	e0bfff17 	ldw	r2,-4(fp)
 1017870:	10800003 	ldbu	r2,0(r2)
 1017874:	10803fcc 	andi	r2,r2,255
 1017878:	1080201c 	xori	r2,r2,128
 101787c:	10bfe004 	addi	r2,r2,-128
 1017880:	1004c03a 	cmpne	r2,r2,zero
 1017884:	103fec1e 	bne	r2,zero,1017838 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1017888:	e037883a 	mov	sp,fp
 101788c:	df000017 	ldw	fp,0(sp)
 1017890:	dec00104 	addi	sp,sp,4
 1017894:	f800283a 	ret

01017898 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1017898:	defffb04 	addi	sp,sp,-20
 101789c:	dfc00415 	stw	ra,16(sp)
 10178a0:	df000315 	stw	fp,12(sp)
 10178a4:	df000304 	addi	fp,sp,12
 10178a8:	e13ffd15 	stw	r4,-12(fp)
 10178ac:	e17ffe15 	stw	r5,-8(fp)
 10178b0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10178b4:	e0bffd17 	ldw	r2,-12(fp)
 10178b8:	10800017 	ldw	r2,0(r2)
 10178bc:	1009883a 	mov	r4,r2
 10178c0:	e1bfff17 	ldw	r6,-4(fp)
 10178c4:	e17ffe17 	ldw	r5,-8(fp)
 10178c8:	10177a80 	call	10177a8 <alt_up_character_lcd_write>
	return 0;
 10178cc:	0005883a 	mov	r2,zero
}
 10178d0:	e037883a 	mov	sp,fp
 10178d4:	dfc00117 	ldw	ra,4(sp)
 10178d8:	df000017 	ldw	fp,0(sp)
 10178dc:	dec00204 	addi	sp,sp,8
 10178e0:	f800283a 	ret

010178e4 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 10178e4:	defff904 	addi	sp,sp,-28
 10178e8:	dfc00615 	stw	ra,24(sp)
 10178ec:	df000515 	stw	fp,20(sp)
 10178f0:	df000504 	addi	fp,sp,20
 10178f4:	e13ffc15 	stw	r4,-16(fp)
 10178f8:	e17ffd15 	stw	r5,-12(fp)
 10178fc:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1017900:	e0bffd17 	ldw	r2,-12(fp)
 1017904:	10800a28 	cmpgeui	r2,r2,40
 1017908:	1000031e 	bne	r2,zero,1017918 <alt_up_character_lcd_set_cursor_pos+0x34>
 101790c:	e0bffe17 	ldw	r2,-8(fp)
 1017910:	108000b0 	cmpltui	r2,r2,2
 1017914:	1000031e 	bne	r2,zero,1017924 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1017918:	00bfffc4 	movi	r2,-1
 101791c:	e0bfff15 	stw	r2,-4(fp)
 1017920:	00000806 	br	1017944 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1017924:	e13ffd17 	ldw	r4,-12(fp)
 1017928:	e17ffe17 	ldw	r5,-8(fp)
 101792c:	10176840 	call	1017684 <get_DDRAM_addr>
 1017930:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1017934:	e17ffb03 	ldbu	r5,-20(fp)
 1017938:	e13ffc17 	ldw	r4,-16(fp)
 101793c:	10177000 	call	1017700 <alt_up_character_lcd_send_cmd>
	return 0;
 1017940:	e03fff15 	stw	zero,-4(fp)
 1017944:	e0bfff17 	ldw	r2,-4(fp)
}
 1017948:	e037883a 	mov	sp,fp
 101794c:	dfc00117 	ldw	ra,4(sp)
 1017950:	df000017 	ldw	fp,0(sp)
 1017954:	dec00204 	addi	sp,sp,8
 1017958:	f800283a 	ret

0101795c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 101795c:	defff904 	addi	sp,sp,-28
 1017960:	dfc00615 	stw	ra,24(sp)
 1017964:	df000515 	stw	fp,20(sp)
 1017968:	df000504 	addi	fp,sp,20
 101796c:	e13ffc15 	stw	r4,-16(fp)
 1017970:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1017974:	e0bffd17 	ldw	r2,-12(fp)
 1017978:	1005003a 	cmpeq	r2,r2,zero
 101797c:	10001e1e 	bne	r2,zero,10179f8 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1017980:	e0bffd17 	ldw	r2,-12(fp)
 1017984:	10800050 	cmplti	r2,r2,1
 1017988:	1000031e 	bne	r2,zero,1017998 <alt_up_character_lcd_shift_cursor+0x3c>
 101798c:	00800504 	movi	r2,20
 1017990:	e0bfff05 	stb	r2,-4(fp)
 1017994:	00000206 	br	10179a0 <alt_up_character_lcd_shift_cursor+0x44>
 1017998:	00c00404 	movi	r3,16
 101799c:	e0ffff05 	stb	r3,-4(fp)
 10179a0:	e0bfff03 	ldbu	r2,-4(fp)
 10179a4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10179a8:	e0fffd17 	ldw	r3,-12(fp)
 10179ac:	e0fffe15 	stw	r3,-8(fp)
 10179b0:	e0fffe17 	ldw	r3,-8(fp)
 10179b4:	1804403a 	cmpge	r2,r3,zero
 10179b8:	1000031e 	bne	r2,zero,10179c8 <alt_up_character_lcd_shift_cursor+0x6c>
 10179bc:	e0bffe17 	ldw	r2,-8(fp)
 10179c0:	0085c83a 	sub	r2,zero,r2
 10179c4:	e0bffe15 	stw	r2,-8(fp)
 10179c8:	e0fffe17 	ldw	r3,-8(fp)
 10179cc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10179d0:	00000306 	br	10179e0 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10179d4:	e17ffb43 	ldbu	r5,-19(fp)
 10179d8:	e13ffc17 	ldw	r4,-16(fp)
 10179dc:	10177000 	call	1017700 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10179e0:	e0bffb03 	ldbu	r2,-20(fp)
 10179e4:	10bfffc4 	addi	r2,r2,-1
 10179e8:	e0bffb05 	stb	r2,-20(fp)
 10179ec:	e0bffb03 	ldbu	r2,-20(fp)
 10179f0:	10803fd8 	cmpnei	r2,r2,255
 10179f4:	103ff71e 	bne	r2,zero,10179d4 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10179f8:	e037883a 	mov	sp,fp
 10179fc:	dfc00117 	ldw	ra,4(sp)
 1017a00:	df000017 	ldw	fp,0(sp)
 1017a04:	dec00204 	addi	sp,sp,8
 1017a08:	f800283a 	ret

01017a0c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1017a0c:	defff904 	addi	sp,sp,-28
 1017a10:	dfc00615 	stw	ra,24(sp)
 1017a14:	df000515 	stw	fp,20(sp)
 1017a18:	df000504 	addi	fp,sp,20
 1017a1c:	e13ffc15 	stw	r4,-16(fp)
 1017a20:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1017a24:	e0bffd17 	ldw	r2,-12(fp)
 1017a28:	1005003a 	cmpeq	r2,r2,zero
 1017a2c:	10001e1e 	bne	r2,zero,1017aa8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1017a30:	e0bffd17 	ldw	r2,-12(fp)
 1017a34:	10800050 	cmplti	r2,r2,1
 1017a38:	1000031e 	bne	r2,zero,1017a48 <alt_up_character_lcd_shift_display+0x3c>
 1017a3c:	00800704 	movi	r2,28
 1017a40:	e0bfff05 	stb	r2,-4(fp)
 1017a44:	00000206 	br	1017a50 <alt_up_character_lcd_shift_display+0x44>
 1017a48:	00c00604 	movi	r3,24
 1017a4c:	e0ffff05 	stb	r3,-4(fp)
 1017a50:	e0bfff03 	ldbu	r2,-4(fp)
 1017a54:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1017a58:	e0fffd17 	ldw	r3,-12(fp)
 1017a5c:	e0fffe15 	stw	r3,-8(fp)
 1017a60:	e0fffe17 	ldw	r3,-8(fp)
 1017a64:	1804403a 	cmpge	r2,r3,zero
 1017a68:	1000031e 	bne	r2,zero,1017a78 <alt_up_character_lcd_shift_display+0x6c>
 1017a6c:	e0bffe17 	ldw	r2,-8(fp)
 1017a70:	0085c83a 	sub	r2,zero,r2
 1017a74:	e0bffe15 	stw	r2,-8(fp)
 1017a78:	e0fffe17 	ldw	r3,-8(fp)
 1017a7c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1017a80:	00000306 	br	1017a90 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1017a84:	e17ffb43 	ldbu	r5,-19(fp)
 1017a88:	e13ffc17 	ldw	r4,-16(fp)
 1017a8c:	10177000 	call	1017700 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1017a90:	e0bffb03 	ldbu	r2,-20(fp)
 1017a94:	10bfffc4 	addi	r2,r2,-1
 1017a98:	e0bffb05 	stb	r2,-20(fp)
 1017a9c:	e0bffb03 	ldbu	r2,-20(fp)
 1017aa0:	10803fd8 	cmpnei	r2,r2,255
 1017aa4:	103ff71e 	bne	r2,zero,1017a84 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1017aa8:	e037883a 	mov	sp,fp
 1017aac:	dfc00117 	ldw	ra,4(sp)
 1017ab0:	df000017 	ldw	fp,0(sp)
 1017ab4:	dec00204 	addi	sp,sp,8
 1017ab8:	f800283a 	ret

01017abc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1017abc:	defff904 	addi	sp,sp,-28
 1017ac0:	dfc00615 	stw	ra,24(sp)
 1017ac4:	df000515 	stw	fp,20(sp)
 1017ac8:	df000504 	addi	fp,sp,20
 1017acc:	e13ffc15 	stw	r4,-16(fp)
 1017ad0:	e17ffd15 	stw	r5,-12(fp)
 1017ad4:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1017ad8:	e0bffd17 	ldw	r2,-12(fp)
 1017adc:	10800a28 	cmpgeui	r2,r2,40
 1017ae0:	1000031e 	bne	r2,zero,1017af0 <alt_up_character_lcd_erase_pos+0x34>
 1017ae4:	e0bffe17 	ldw	r2,-8(fp)
 1017ae8:	108000b0 	cmpltui	r2,r2,2
 1017aec:	1000031e 	bne	r2,zero,1017afc <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1017af0:	00bfffc4 	movi	r2,-1
 1017af4:	e0bfff15 	stw	r2,-4(fp)
 1017af8:	00000e06 	br	1017b34 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1017afc:	e13ffd17 	ldw	r4,-12(fp)
 1017b00:	e17ffe17 	ldw	r5,-8(fp)
 1017b04:	10176840 	call	1017684 <get_DDRAM_addr>
 1017b08:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1017b0c:	e17ffb03 	ldbu	r5,-20(fp)
 1017b10:	e13ffc17 	ldw	r4,-16(fp)
 1017b14:	10177000 	call	1017700 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1017b18:	e0bffc17 	ldw	r2,-16(fp)
 1017b1c:	10800a17 	ldw	r2,40(r2)
 1017b20:	10800044 	addi	r2,r2,1
 1017b24:	1007883a 	mov	r3,r2
 1017b28:	00800084 	movi	r2,2
 1017b2c:	18800025 	stbio	r2,0(r3)
	return 0;
 1017b30:	e03fff15 	stw	zero,-4(fp)
 1017b34:	e0bfff17 	ldw	r2,-4(fp)
}
 1017b38:	e037883a 	mov	sp,fp
 1017b3c:	dfc00117 	ldw	ra,4(sp)
 1017b40:	df000017 	ldw	fp,0(sp)
 1017b44:	dec00204 	addi	sp,sp,8
 1017b48:	f800283a 	ret

01017b4c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1017b4c:	defffd04 	addi	sp,sp,-12
 1017b50:	dfc00215 	stw	ra,8(sp)
 1017b54:	df000115 	stw	fp,4(sp)
 1017b58:	df000104 	addi	fp,sp,4
 1017b5c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1017b60:	e13fff17 	ldw	r4,-4(fp)
 1017b64:	01400304 	movi	r5,12
 1017b68:	10177000 	call	1017700 <alt_up_character_lcd_send_cmd>
}
 1017b6c:	e037883a 	mov	sp,fp
 1017b70:	dfc00117 	ldw	ra,4(sp)
 1017b74:	df000017 	ldw	fp,0(sp)
 1017b78:	dec00204 	addi	sp,sp,8
 1017b7c:	f800283a 	ret

01017b80 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1017b80:	defffd04 	addi	sp,sp,-12
 1017b84:	dfc00215 	stw	ra,8(sp)
 1017b88:	df000115 	stw	fp,4(sp)
 1017b8c:	df000104 	addi	fp,sp,4
 1017b90:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1017b94:	e13fff17 	ldw	r4,-4(fp)
 1017b98:	014003c4 	movi	r5,15
 1017b9c:	10177000 	call	1017700 <alt_up_character_lcd_send_cmd>
}
 1017ba0:	e037883a 	mov	sp,fp
 1017ba4:	dfc00117 	ldw	ra,4(sp)
 1017ba8:	df000017 	ldw	fp,0(sp)
 1017bac:	dec00204 	addi	sp,sp,8
 1017bb0:	f800283a 	ret

01017bb4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1017bb4:	deffff04 	addi	sp,sp,-4
 1017bb8:	df000015 	stw	fp,0(sp)
 1017bbc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1017bc0:	e037883a 	mov	sp,fp
 1017bc4:	df000017 	ldw	fp,0(sp)
 1017bc8:	dec00104 	addi	sp,sp,4
 1017bcc:	f800283a 	ret

01017bd0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1017bd0:	defff904 	addi	sp,sp,-28
 1017bd4:	dfc00615 	stw	ra,24(sp)
 1017bd8:	df000515 	stw	fp,20(sp)
 1017bdc:	df000504 	addi	fp,sp,20
 1017be0:	e13ffd15 	stw	r4,-12(fp)
 1017be4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1017be8:	e0bffd17 	ldw	r2,-12(fp)
 1017bec:	1005003a 	cmpeq	r2,r2,zero
 1017bf0:	1000041e 	bne	r2,zero,1017c04 <alt_dev_llist_insert+0x34>
 1017bf4:	e0bffd17 	ldw	r2,-12(fp)
 1017bf8:	10800217 	ldw	r2,8(r2)
 1017bfc:	1004c03a 	cmpne	r2,r2,zero
 1017c00:	1000071e 	bne	r2,zero,1017c20 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1017c04:	1017c840 	call	1017c84 <alt_get_errno>
 1017c08:	1007883a 	mov	r3,r2
 1017c0c:	00800584 	movi	r2,22
 1017c10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1017c14:	00bffa84 	movi	r2,-22
 1017c18:	e0bfff15 	stw	r2,-4(fp)
 1017c1c:	00001306 	br	1017c6c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1017c20:	e0fffd17 	ldw	r3,-12(fp)
 1017c24:	e0bffe17 	ldw	r2,-8(fp)
 1017c28:	e0bffb15 	stw	r2,-20(fp)
 1017c2c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1017c30:	e0fffc17 	ldw	r3,-16(fp)
 1017c34:	e0bffb17 	ldw	r2,-20(fp)
 1017c38:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1017c3c:	e0bffb17 	ldw	r2,-20(fp)
 1017c40:	10c00017 	ldw	r3,0(r2)
 1017c44:	e0bffc17 	ldw	r2,-16(fp)
 1017c48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1017c4c:	e0bffb17 	ldw	r2,-20(fp)
 1017c50:	10c00017 	ldw	r3,0(r2)
 1017c54:	e0bffc17 	ldw	r2,-16(fp)
 1017c58:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1017c5c:	e0fffb17 	ldw	r3,-20(fp)
 1017c60:	e0bffc17 	ldw	r2,-16(fp)
 1017c64:	18800015 	stw	r2,0(r3)

  return 0;  
 1017c68:	e03fff15 	stw	zero,-4(fp)
 1017c6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1017c70:	e037883a 	mov	sp,fp
 1017c74:	dfc00117 	ldw	ra,4(sp)
 1017c78:	df000017 	ldw	fp,0(sp)
 1017c7c:	dec00204 	addi	sp,sp,8
 1017c80:	f800283a 	ret

01017c84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1017c84:	defffd04 	addi	sp,sp,-12
 1017c88:	dfc00215 	stw	ra,8(sp)
 1017c8c:	df000115 	stw	fp,4(sp)
 1017c90:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1017c94:	008040b4 	movhi	r2,258
 1017c98:	10ac9504 	addi	r2,r2,-19884
 1017c9c:	10800017 	ldw	r2,0(r2)
 1017ca0:	1005003a 	cmpeq	r2,r2,zero
 1017ca4:	1000061e 	bne	r2,zero,1017cc0 <alt_get_errno+0x3c>
 1017ca8:	008040b4 	movhi	r2,258
 1017cac:	10ac9504 	addi	r2,r2,-19884
 1017cb0:	10800017 	ldw	r2,0(r2)
 1017cb4:	103ee83a 	callr	r2
 1017cb8:	e0bfff15 	stw	r2,-4(fp)
 1017cbc:	00000306 	br	1017ccc <alt_get_errno+0x48>
 1017cc0:	008040b4 	movhi	r2,258
 1017cc4:	10b3a504 	addi	r2,r2,-12652
 1017cc8:	e0bfff15 	stw	r2,-4(fp)
 1017ccc:	e0bfff17 	ldw	r2,-4(fp)
}
 1017cd0:	e037883a 	mov	sp,fp
 1017cd4:	dfc00117 	ldw	ra,4(sp)
 1017cd8:	df000017 	ldw	fp,0(sp)
 1017cdc:	dec00204 	addi	sp,sp,8
 1017ce0:	f800283a 	ret

01017ce4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1017ce4:	defffd04 	addi	sp,sp,-12
 1017ce8:	dfc00215 	stw	ra,8(sp)
 1017cec:	df000115 	stw	fp,4(sp)
 1017cf0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1017cf4:	00bfff04 	movi	r2,-4
 1017cf8:	00c040b4 	movhi	r3,258
 1017cfc:	18e46604 	addi	r3,r3,-28264
 1017d00:	1885883a 	add	r2,r3,r2
 1017d04:	e0bfff15 	stw	r2,-4(fp)
 1017d08:	00000606 	br	1017d24 <_do_ctors+0x40>
        (*ctor) (); 
 1017d0c:	e0bfff17 	ldw	r2,-4(fp)
 1017d10:	10800017 	ldw	r2,0(r2)
 1017d14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1017d18:	e0bfff17 	ldw	r2,-4(fp)
 1017d1c:	10bfff04 	addi	r2,r2,-4
 1017d20:	e0bfff15 	stw	r2,-4(fp)
 1017d24:	e0ffff17 	ldw	r3,-4(fp)
 1017d28:	008040b4 	movhi	r2,258
 1017d2c:	10a46504 	addi	r2,r2,-28268
 1017d30:	18bff62e 	bgeu	r3,r2,1017d0c <_do_ctors+0x28>
        (*ctor) (); 
}
 1017d34:	e037883a 	mov	sp,fp
 1017d38:	dfc00117 	ldw	ra,4(sp)
 1017d3c:	df000017 	ldw	fp,0(sp)
 1017d40:	dec00204 	addi	sp,sp,8
 1017d44:	f800283a 	ret

01017d48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1017d48:	defffd04 	addi	sp,sp,-12
 1017d4c:	dfc00215 	stw	ra,8(sp)
 1017d50:	df000115 	stw	fp,4(sp)
 1017d54:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1017d58:	00bfff04 	movi	r2,-4
 1017d5c:	00c040b4 	movhi	r3,258
 1017d60:	18e46604 	addi	r3,r3,-28264
 1017d64:	1885883a 	add	r2,r3,r2
 1017d68:	e0bfff15 	stw	r2,-4(fp)
 1017d6c:	00000606 	br	1017d88 <_do_dtors+0x40>
        (*dtor) (); 
 1017d70:	e0bfff17 	ldw	r2,-4(fp)
 1017d74:	10800017 	ldw	r2,0(r2)
 1017d78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1017d7c:	e0bfff17 	ldw	r2,-4(fp)
 1017d80:	10bfff04 	addi	r2,r2,-4
 1017d84:	e0bfff15 	stw	r2,-4(fp)
 1017d88:	e0ffff17 	ldw	r3,-4(fp)
 1017d8c:	008040b4 	movhi	r2,258
 1017d90:	10a46604 	addi	r2,r2,-28264
 1017d94:	18bff62e 	bgeu	r3,r2,1017d70 <_do_dtors+0x28>
        (*dtor) (); 
}
 1017d98:	e037883a 	mov	sp,fp
 1017d9c:	dfc00117 	ldw	ra,4(sp)
 1017da0:	df000017 	ldw	fp,0(sp)
 1017da4:	dec00204 	addi	sp,sp,8
 1017da8:	f800283a 	ret

01017dac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1017dac:	defff904 	addi	sp,sp,-28
 1017db0:	dfc00615 	stw	ra,24(sp)
 1017db4:	df000515 	stw	fp,20(sp)
 1017db8:	df000504 	addi	fp,sp,20
 1017dbc:	e13ffd15 	stw	r4,-12(fp)
 1017dc0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1017dc4:	e0bffe17 	ldw	r2,-8(fp)
 1017dc8:	10800017 	ldw	r2,0(r2)
 1017dcc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1017dd0:	e13ffd17 	ldw	r4,-12(fp)
 1017dd4:	10028800 	call	1002880 <strlen>
 1017dd8:	10800044 	addi	r2,r2,1
 1017ddc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1017de0:	00000d06 	br	1017e18 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1017de4:	e0bffc17 	ldw	r2,-16(fp)
 1017de8:	11000217 	ldw	r4,8(r2)
 1017dec:	e1bffb17 	ldw	r6,-20(fp)
 1017df0:	e17ffd17 	ldw	r5,-12(fp)
 1017df4:	1018d280 	call	1018d28 <memcmp>
 1017df8:	1004c03a 	cmpne	r2,r2,zero
 1017dfc:	1000031e 	bne	r2,zero,1017e0c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1017e00:	e0bffc17 	ldw	r2,-16(fp)
 1017e04:	e0bfff15 	stw	r2,-4(fp)
 1017e08:	00000706 	br	1017e28 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1017e0c:	e0bffc17 	ldw	r2,-16(fp)
 1017e10:	10800017 	ldw	r2,0(r2)
 1017e14:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1017e18:	e0fffe17 	ldw	r3,-8(fp)
 1017e1c:	e0bffc17 	ldw	r2,-16(fp)
 1017e20:	10fff01e 	bne	r2,r3,1017de4 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1017e24:	e03fff15 	stw	zero,-4(fp)
 1017e28:	e0bfff17 	ldw	r2,-4(fp)
}
 1017e2c:	e037883a 	mov	sp,fp
 1017e30:	dfc00117 	ldw	ra,4(sp)
 1017e34:	df000017 	ldw	fp,0(sp)
 1017e38:	dec00204 	addi	sp,sp,8
 1017e3c:	f800283a 	ret

01017e40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1017e40:	deffff04 	addi	sp,sp,-4
 1017e44:	df000015 	stw	fp,0(sp)
 1017e48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1017e4c:	e037883a 	mov	sp,fp
 1017e50:	df000017 	ldw	fp,0(sp)
 1017e54:	dec00104 	addi	sp,sp,4
 1017e58:	f800283a 	ret

01017e5c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1017e5c:	defff904 	addi	sp,sp,-28
 1017e60:	dfc00615 	stw	ra,24(sp)
 1017e64:	df000515 	stw	fp,20(sp)
 1017e68:	df000504 	addi	fp,sp,20
 1017e6c:	e13ffc15 	stw	r4,-16(fp)
 1017e70:	e17ffd15 	stw	r5,-12(fp)
 1017e74:	e1bffe15 	stw	r6,-8(fp)
 1017e78:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1017e7c:	e0800217 	ldw	r2,8(fp)
 1017e80:	d8800015 	stw	r2,0(sp)
 1017e84:	e13ffc17 	ldw	r4,-16(fp)
 1017e88:	e17ffd17 	ldw	r5,-12(fp)
 1017e8c:	e1bffe17 	ldw	r6,-8(fp)
 1017e90:	e1ffff17 	ldw	r7,-4(fp)
 1017e94:	10180300 	call	1018030 <alt_iic_isr_register>
}  
 1017e98:	e037883a 	mov	sp,fp
 1017e9c:	dfc00117 	ldw	ra,4(sp)
 1017ea0:	df000017 	ldw	fp,0(sp)
 1017ea4:	dec00204 	addi	sp,sp,8
 1017ea8:	f800283a 	ret

01017eac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1017eac:	defff904 	addi	sp,sp,-28
 1017eb0:	df000615 	stw	fp,24(sp)
 1017eb4:	df000604 	addi	fp,sp,24
 1017eb8:	e13ffe15 	stw	r4,-8(fp)
 1017ebc:	e17fff15 	stw	r5,-4(fp)
 1017ec0:	e0bfff17 	ldw	r2,-4(fp)
 1017ec4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017ec8:	0005303a 	rdctl	r2,status
 1017ecc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017ed0:	e0fffb17 	ldw	r3,-20(fp)
 1017ed4:	00bfff84 	movi	r2,-2
 1017ed8:	1884703a 	and	r2,r3,r2
 1017edc:	1001703a 	wrctl	status,r2
  
  return context;
 1017ee0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1017ee4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1017ee8:	e0fffc17 	ldw	r3,-16(fp)
 1017eec:	00800044 	movi	r2,1
 1017ef0:	10c4983a 	sll	r2,r2,r3
 1017ef4:	1007883a 	mov	r3,r2
 1017ef8:	008040b4 	movhi	r2,258
 1017efc:	10b3ca04 	addi	r2,r2,-12504
 1017f00:	10800017 	ldw	r2,0(r2)
 1017f04:	1886b03a 	or	r3,r3,r2
 1017f08:	008040b4 	movhi	r2,258
 1017f0c:	10b3ca04 	addi	r2,r2,-12504
 1017f10:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1017f14:	008040b4 	movhi	r2,258
 1017f18:	10b3ca04 	addi	r2,r2,-12504
 1017f1c:	10800017 	ldw	r2,0(r2)
 1017f20:	100170fa 	wrctl	ienable,r2
 1017f24:	e0bffd17 	ldw	r2,-12(fp)
 1017f28:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017f2c:	e0bffa17 	ldw	r2,-24(fp)
 1017f30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1017f34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1017f38:	e037883a 	mov	sp,fp
 1017f3c:	df000017 	ldw	fp,0(sp)
 1017f40:	dec00104 	addi	sp,sp,4
 1017f44:	f800283a 	ret

01017f48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1017f48:	defff904 	addi	sp,sp,-28
 1017f4c:	df000615 	stw	fp,24(sp)
 1017f50:	df000604 	addi	fp,sp,24
 1017f54:	e13ffe15 	stw	r4,-8(fp)
 1017f58:	e17fff15 	stw	r5,-4(fp)
 1017f5c:	e0bfff17 	ldw	r2,-4(fp)
 1017f60:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1017f64:	0005303a 	rdctl	r2,status
 1017f68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1017f6c:	e0fffb17 	ldw	r3,-20(fp)
 1017f70:	00bfff84 	movi	r2,-2
 1017f74:	1884703a 	and	r2,r3,r2
 1017f78:	1001703a 	wrctl	status,r2
  
  return context;
 1017f7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1017f80:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1017f84:	e0fffc17 	ldw	r3,-16(fp)
 1017f88:	00800044 	movi	r2,1
 1017f8c:	10c4983a 	sll	r2,r2,r3
 1017f90:	0084303a 	nor	r2,zero,r2
 1017f94:	1007883a 	mov	r3,r2
 1017f98:	008040b4 	movhi	r2,258
 1017f9c:	10b3ca04 	addi	r2,r2,-12504
 1017fa0:	10800017 	ldw	r2,0(r2)
 1017fa4:	1886703a 	and	r3,r3,r2
 1017fa8:	008040b4 	movhi	r2,258
 1017fac:	10b3ca04 	addi	r2,r2,-12504
 1017fb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1017fb4:	008040b4 	movhi	r2,258
 1017fb8:	10b3ca04 	addi	r2,r2,-12504
 1017fbc:	10800017 	ldw	r2,0(r2)
 1017fc0:	100170fa 	wrctl	ienable,r2
 1017fc4:	e0bffd17 	ldw	r2,-12(fp)
 1017fc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1017fcc:	e0bffa17 	ldw	r2,-24(fp)
 1017fd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1017fd4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1017fd8:	e037883a 	mov	sp,fp
 1017fdc:	df000017 	ldw	fp,0(sp)
 1017fe0:	dec00104 	addi	sp,sp,4
 1017fe4:	f800283a 	ret

01017fe8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1017fe8:	defffc04 	addi	sp,sp,-16
 1017fec:	df000315 	stw	fp,12(sp)
 1017ff0:	df000304 	addi	fp,sp,12
 1017ff4:	e13ffe15 	stw	r4,-8(fp)
 1017ff8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1017ffc:	000530fa 	rdctl	r2,ienable
 1018000:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1018004:	e0ffff17 	ldw	r3,-4(fp)
 1018008:	00800044 	movi	r2,1
 101800c:	10c4983a 	sll	r2,r2,r3
 1018010:	1007883a 	mov	r3,r2
 1018014:	e0bffd17 	ldw	r2,-12(fp)
 1018018:	1884703a 	and	r2,r3,r2
 101801c:	1004c03a 	cmpne	r2,r2,zero
}
 1018020:	e037883a 	mov	sp,fp
 1018024:	df000017 	ldw	fp,0(sp)
 1018028:	dec00104 	addi	sp,sp,4
 101802c:	f800283a 	ret

01018030 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1018030:	defff404 	addi	sp,sp,-48
 1018034:	dfc00b15 	stw	ra,44(sp)
 1018038:	df000a15 	stw	fp,40(sp)
 101803c:	df000a04 	addi	fp,sp,40
 1018040:	e13ffb15 	stw	r4,-20(fp)
 1018044:	e17ffc15 	stw	r5,-16(fp)
 1018048:	e1bffd15 	stw	r6,-12(fp)
 101804c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1018050:	00bffa84 	movi	r2,-22
 1018054:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1018058:	e0bffc17 	ldw	r2,-16(fp)
 101805c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1018060:	e0bff917 	ldw	r2,-28(fp)
 1018064:	10800808 	cmpgei	r2,r2,32
 1018068:	1000291e 	bne	r2,zero,1018110 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101806c:	0005303a 	rdctl	r2,status
 1018070:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1018074:	e0fff717 	ldw	r3,-36(fp)
 1018078:	00bfff84 	movi	r2,-2
 101807c:	1884703a 	and	r2,r3,r2
 1018080:	1001703a 	wrctl	status,r2
  
  return context;
 1018084:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1018088:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 101808c:	e0bff917 	ldw	r2,-28(fp)
 1018090:	00c040f4 	movhi	r3,259
 1018094:	18fb3904 	addi	r3,r3,-4892
 1018098:	100490fa 	slli	r2,r2,3
 101809c:	10c7883a 	add	r3,r2,r3
 10180a0:	e0bffd17 	ldw	r2,-12(fp)
 10180a4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 10180a8:	e0bff917 	ldw	r2,-28(fp)
 10180ac:	00c040f4 	movhi	r3,259
 10180b0:	18fb3904 	addi	r3,r3,-4892
 10180b4:	100490fa 	slli	r2,r2,3
 10180b8:	10c5883a 	add	r2,r2,r3
 10180bc:	10c00104 	addi	r3,r2,4
 10180c0:	e0bffe17 	ldw	r2,-8(fp)
 10180c4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10180c8:	e0bffd17 	ldw	r2,-12(fp)
 10180cc:	1005003a 	cmpeq	r2,r2,zero
 10180d0:	1000051e 	bne	r2,zero,10180e8 <alt_iic_isr_register+0xb8>
 10180d4:	e17ff917 	ldw	r5,-28(fp)
 10180d8:	e13ffb17 	ldw	r4,-20(fp)
 10180dc:	1017eac0 	call	1017eac <alt_ic_irq_enable>
 10180e0:	e0bfff15 	stw	r2,-4(fp)
 10180e4:	00000406 	br	10180f8 <alt_iic_isr_register+0xc8>
 10180e8:	e17ff917 	ldw	r5,-28(fp)
 10180ec:	e13ffb17 	ldw	r4,-20(fp)
 10180f0:	1017f480 	call	1017f48 <alt_ic_irq_disable>
 10180f4:	e0bfff15 	stw	r2,-4(fp)
 10180f8:	e0bfff17 	ldw	r2,-4(fp)
 10180fc:	e0bffa15 	stw	r2,-24(fp)
 1018100:	e0bff817 	ldw	r2,-32(fp)
 1018104:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1018108:	e0bff617 	ldw	r2,-40(fp)
 101810c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1018110:	e0bffa17 	ldw	r2,-24(fp)
}
 1018114:	e037883a 	mov	sp,fp
 1018118:	dfc00117 	ldw	ra,4(sp)
 101811c:	df000017 	ldw	fp,0(sp)
 1018120:	dec00204 	addi	sp,sp,8
 1018124:	f800283a 	ret

01018128 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1018128:	defff804 	addi	sp,sp,-32
 101812c:	dfc00715 	stw	ra,28(sp)
 1018130:	df000615 	stw	fp,24(sp)
 1018134:	dc000515 	stw	r16,20(sp)
 1018138:	df000504 	addi	fp,sp,20
 101813c:	e13ffc15 	stw	r4,-16(fp)
 1018140:	e17ffd15 	stw	r5,-12(fp)
 1018144:	e1bffe15 	stw	r6,-8(fp)
 1018148:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 101814c:	e13ffd17 	ldw	r4,-12(fp)
 1018150:	e17ffe17 	ldw	r5,-8(fp)
 1018154:	e1bfff17 	ldw	r6,-4(fp)
 1018158:	10183700 	call	1018370 <open>
 101815c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1018160:	e0bffb17 	ldw	r2,-20(fp)
 1018164:	1004803a 	cmplt	r2,r2,zero
 1018168:	10001f1e 	bne	r2,zero,10181e8 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 101816c:	e13ffb17 	ldw	r4,-20(fp)
 1018170:	040040b4 	movhi	r16,258
 1018174:	8427ff04 	addi	r16,r16,-24580
 1018178:	01400304 	movi	r5,12
 101817c:	10020280 	call	1002028 <__mulsi3>
 1018180:	1405883a 	add	r2,r2,r16
 1018184:	10c00017 	ldw	r3,0(r2)
 1018188:	e0bffc17 	ldw	r2,-16(fp)
 101818c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1018190:	e13ffb17 	ldw	r4,-20(fp)
 1018194:	040040b4 	movhi	r16,258
 1018198:	8427ff04 	addi	r16,r16,-24580
 101819c:	01400304 	movi	r5,12
 10181a0:	10020280 	call	1002028 <__mulsi3>
 10181a4:	1405883a 	add	r2,r2,r16
 10181a8:	10800104 	addi	r2,r2,4
 10181ac:	10c00017 	ldw	r3,0(r2)
 10181b0:	e0bffc17 	ldw	r2,-16(fp)
 10181b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10181b8:	e13ffb17 	ldw	r4,-20(fp)
 10181bc:	040040b4 	movhi	r16,258
 10181c0:	8427ff04 	addi	r16,r16,-24580
 10181c4:	01400304 	movi	r5,12
 10181c8:	10020280 	call	1002028 <__mulsi3>
 10181cc:	1405883a 	add	r2,r2,r16
 10181d0:	10800204 	addi	r2,r2,8
 10181d4:	10c00017 	ldw	r3,0(r2)
 10181d8:	e0bffc17 	ldw	r2,-16(fp)
 10181dc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10181e0:	e13ffb17 	ldw	r4,-20(fp)
 10181e4:	100bc0c0 	call	100bc0c <alt_release_fd>
  }
} 
 10181e8:	e037883a 	mov	sp,fp
 10181ec:	dfc00217 	ldw	ra,8(sp)
 10181f0:	df000117 	ldw	fp,4(sp)
 10181f4:	dc000017 	ldw	r16,0(sp)
 10181f8:	dec00304 	addi	sp,sp,12
 10181fc:	f800283a 	ret

01018200 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1018200:	defffb04 	addi	sp,sp,-20
 1018204:	dfc00415 	stw	ra,16(sp)
 1018208:	df000315 	stw	fp,12(sp)
 101820c:	df000304 	addi	fp,sp,12
 1018210:	e13ffd15 	stw	r4,-12(fp)
 1018214:	e17ffe15 	stw	r5,-8(fp)
 1018218:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 101821c:	010040b4 	movhi	r4,258
 1018220:	21280204 	addi	r4,r4,-24568
 1018224:	e17ffd17 	ldw	r5,-12(fp)
 1018228:	01800044 	movi	r6,1
 101822c:	01c07fc4 	movi	r7,511
 1018230:	10181280 	call	1018128 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1018234:	010040b4 	movhi	r4,258
 1018238:	2127ff04 	addi	r4,r4,-24580
 101823c:	e17ffe17 	ldw	r5,-8(fp)
 1018240:	000d883a 	mov	r6,zero
 1018244:	01c07fc4 	movi	r7,511
 1018248:	10181280 	call	1018128 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 101824c:	010040b4 	movhi	r4,258
 1018250:	21280504 	addi	r4,r4,-24556
 1018254:	e17fff17 	ldw	r5,-4(fp)
 1018258:	01800044 	movi	r6,1
 101825c:	01c07fc4 	movi	r7,511
 1018260:	10181280 	call	1018128 <alt_open_fd>
}  
 1018264:	e037883a 	mov	sp,fp
 1018268:	dfc00117 	ldw	ra,4(sp)
 101826c:	df000017 	ldw	fp,0(sp)
 1018270:	dec00204 	addi	sp,sp,8
 1018274:	f800283a 	ret

01018278 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1018278:	defffa04 	addi	sp,sp,-24
 101827c:	dfc00515 	stw	ra,20(sp)
 1018280:	df000415 	stw	fp,16(sp)
 1018284:	dc000315 	stw	r16,12(sp)
 1018288:	df000304 	addi	fp,sp,12
 101828c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1018290:	e0bffe17 	ldw	r2,-8(fp)
 1018294:	10800217 	ldw	r2,8(r2)
 1018298:	10d00034 	orhi	r3,r2,16384
 101829c:	e0bffe17 	ldw	r2,-8(fp)
 10182a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10182a4:	e03ffd15 	stw	zero,-12(fp)
 10182a8:	00002306 	br	1018338 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10182ac:	e13ffd17 	ldw	r4,-12(fp)
 10182b0:	040040b4 	movhi	r16,258
 10182b4:	8427ff04 	addi	r16,r16,-24580
 10182b8:	01400304 	movi	r5,12
 10182bc:	10020280 	call	1002028 <__mulsi3>
 10182c0:	1405883a 	add	r2,r2,r16
 10182c4:	10c00017 	ldw	r3,0(r2)
 10182c8:	e0bffe17 	ldw	r2,-8(fp)
 10182cc:	10800017 	ldw	r2,0(r2)
 10182d0:	1880161e 	bne	r3,r2,101832c <alt_file_locked+0xb4>
 10182d4:	e13ffd17 	ldw	r4,-12(fp)
 10182d8:	040040b4 	movhi	r16,258
 10182dc:	8427ff04 	addi	r16,r16,-24580
 10182e0:	01400304 	movi	r5,12
 10182e4:	10020280 	call	1002028 <__mulsi3>
 10182e8:	1405883a 	add	r2,r2,r16
 10182ec:	10800204 	addi	r2,r2,8
 10182f0:	10800017 	ldw	r2,0(r2)
 10182f4:	1004403a 	cmpge	r2,r2,zero
 10182f8:	10000c1e 	bne	r2,zero,101832c <alt_file_locked+0xb4>
 10182fc:	e13ffd17 	ldw	r4,-12(fp)
 1018300:	01400304 	movi	r5,12
 1018304:	10020280 	call	1002028 <__mulsi3>
 1018308:	1007883a 	mov	r3,r2
 101830c:	008040b4 	movhi	r2,258
 1018310:	10a7ff04 	addi	r2,r2,-24580
 1018314:	1887883a 	add	r3,r3,r2
 1018318:	e0bffe17 	ldw	r2,-8(fp)
 101831c:	18800326 	beq	r3,r2,101832c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1018320:	00bffcc4 	movi	r2,-13
 1018324:	e0bfff15 	stw	r2,-4(fp)
 1018328:	00000a06 	br	1018354 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 101832c:	e0bffd17 	ldw	r2,-12(fp)
 1018330:	10800044 	addi	r2,r2,1
 1018334:	e0bffd15 	stw	r2,-12(fp)
 1018338:	008040b4 	movhi	r2,258
 101833c:	10ac9404 	addi	r2,r2,-19888
 1018340:	10800017 	ldw	r2,0(r2)
 1018344:	1007883a 	mov	r3,r2
 1018348:	e0bffd17 	ldw	r2,-12(fp)
 101834c:	18bfd72e 	bgeu	r3,r2,10182ac <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1018350:	e03fff15 	stw	zero,-4(fp)
 1018354:	e0bfff17 	ldw	r2,-4(fp)
}
 1018358:	e037883a 	mov	sp,fp
 101835c:	dfc00217 	ldw	ra,8(sp)
 1018360:	df000117 	ldw	fp,4(sp)
 1018364:	dc000017 	ldw	r16,0(sp)
 1018368:	dec00304 	addi	sp,sp,12
 101836c:	f800283a 	ret

01018370 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1018370:	defff404 	addi	sp,sp,-48
 1018374:	dfc00b15 	stw	ra,44(sp)
 1018378:	df000a15 	stw	fp,40(sp)
 101837c:	df000a04 	addi	fp,sp,40
 1018380:	e13ffb15 	stw	r4,-20(fp)
 1018384:	e17ffc15 	stw	r5,-16(fp)
 1018388:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 101838c:	00bfffc4 	movi	r2,-1
 1018390:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1018394:	00bffb44 	movi	r2,-19
 1018398:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 101839c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10183a0:	e13ffb17 	ldw	r4,-20(fp)
 10183a4:	014040b4 	movhi	r5,258
 10183a8:	296c9204 	addi	r5,r5,-19896
 10183ac:	1017dac0 	call	1017dac <alt_find_dev>
 10183b0:	e0bffa15 	stw	r2,-24(fp)
 10183b4:	e0bffa17 	ldw	r2,-24(fp)
 10183b8:	1004c03a 	cmpne	r2,r2,zero
 10183bc:	1000051e 	bne	r2,zero,10183d4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10183c0:	e13ffb17 	ldw	r4,-20(fp)
 10183c4:	1018ab80 	call	1018ab8 <alt_find_file>
 10183c8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 10183cc:	00800044 	movi	r2,1
 10183d0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 10183d4:	e0bffa17 	ldw	r2,-24(fp)
 10183d8:	1005003a 	cmpeq	r2,r2,zero
 10183dc:	1000311e 	bne	r2,zero,10184a4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10183e0:	e13ffa17 	ldw	r4,-24(fp)
 10183e4:	1018bd80 	call	1018bd8 <alt_get_fd>
 10183e8:	e0bff815 	stw	r2,-32(fp)
 10183ec:	e0bff817 	ldw	r2,-32(fp)
 10183f0:	1004403a 	cmpge	r2,r2,zero
 10183f4:	1000031e 	bne	r2,zero,1018404 <open+0x94>
    {
      status = index;
 10183f8:	e0bff817 	ldw	r2,-32(fp)
 10183fc:	e0bff715 	stw	r2,-36(fp)
 1018400:	00002a06 	br	10184ac <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1018404:	e13ff817 	ldw	r4,-32(fp)
 1018408:	01400304 	movi	r5,12
 101840c:	10020280 	call	1002028 <__mulsi3>
 1018410:	1007883a 	mov	r3,r2
 1018414:	008040b4 	movhi	r2,258
 1018418:	10a7ff04 	addi	r2,r2,-24580
 101841c:	1885883a 	add	r2,r3,r2
 1018420:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1018424:	e0fffc17 	ldw	r3,-16(fp)
 1018428:	00900034 	movhi	r2,16384
 101842c:	10bfffc4 	addi	r2,r2,-1
 1018430:	1886703a 	and	r3,r3,r2
 1018434:	e0bff917 	ldw	r2,-28(fp)
 1018438:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 101843c:	e0bff617 	ldw	r2,-40(fp)
 1018440:	1004c03a 	cmpne	r2,r2,zero
 1018444:	1000061e 	bne	r2,zero,1018460 <open+0xf0>
 1018448:	e13ff917 	ldw	r4,-28(fp)
 101844c:	10182780 	call	1018278 <alt_file_locked>
 1018450:	e0bff715 	stw	r2,-36(fp)
 1018454:	e0bff717 	ldw	r2,-36(fp)
 1018458:	1004803a 	cmplt	r2,r2,zero
 101845c:	1000131e 	bne	r2,zero,10184ac <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1018460:	e0bffa17 	ldw	r2,-24(fp)
 1018464:	10800317 	ldw	r2,12(r2)
 1018468:	1005003a 	cmpeq	r2,r2,zero
 101846c:	1000091e 	bne	r2,zero,1018494 <open+0x124>
 1018470:	e0bffa17 	ldw	r2,-24(fp)
 1018474:	10800317 	ldw	r2,12(r2)
 1018478:	e13ff917 	ldw	r4,-28(fp)
 101847c:	e17ffb17 	ldw	r5,-20(fp)
 1018480:	e1bffc17 	ldw	r6,-16(fp)
 1018484:	e1fffd17 	ldw	r7,-12(fp)
 1018488:	103ee83a 	callr	r2
 101848c:	e0bfff15 	stw	r2,-4(fp)
 1018490:	00000106 	br	1018498 <open+0x128>
 1018494:	e03fff15 	stw	zero,-4(fp)
 1018498:	e0bfff17 	ldw	r2,-4(fp)
 101849c:	e0bff715 	stw	r2,-36(fp)
 10184a0:	00000206 	br	10184ac <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10184a4:	00bffb44 	movi	r2,-19
 10184a8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10184ac:	e0bff717 	ldw	r2,-36(fp)
 10184b0:	1004403a 	cmpge	r2,r2,zero
 10184b4:	1000091e 	bne	r2,zero,10184dc <open+0x16c>
  {
    alt_release_fd (index);  
 10184b8:	e13ff817 	ldw	r4,-32(fp)
 10184bc:	100bc0c0 	call	100bc0c <alt_release_fd>
    ALT_ERRNO = -status;
 10184c0:	10184fc0 	call	10184fc <alt_get_errno>
 10184c4:	e0fff717 	ldw	r3,-36(fp)
 10184c8:	00c7c83a 	sub	r3,zero,r3
 10184cc:	10c00015 	stw	r3,0(r2)
    return -1;
 10184d0:	00bfffc4 	movi	r2,-1
 10184d4:	e0bffe15 	stw	r2,-8(fp)
 10184d8:	00000206 	br	10184e4 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 10184dc:	e0bff817 	ldw	r2,-32(fp)
 10184e0:	e0bffe15 	stw	r2,-8(fp)
 10184e4:	e0bffe17 	ldw	r2,-8(fp)
}
 10184e8:	e037883a 	mov	sp,fp
 10184ec:	dfc00117 	ldw	ra,4(sp)
 10184f0:	df000017 	ldw	fp,0(sp)
 10184f4:	dec00204 	addi	sp,sp,8
 10184f8:	f800283a 	ret

010184fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10184fc:	defffd04 	addi	sp,sp,-12
 1018500:	dfc00215 	stw	ra,8(sp)
 1018504:	df000115 	stw	fp,4(sp)
 1018508:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101850c:	008040b4 	movhi	r2,258
 1018510:	10ac9504 	addi	r2,r2,-19884
 1018514:	10800017 	ldw	r2,0(r2)
 1018518:	1005003a 	cmpeq	r2,r2,zero
 101851c:	1000061e 	bne	r2,zero,1018538 <alt_get_errno+0x3c>
 1018520:	008040b4 	movhi	r2,258
 1018524:	10ac9504 	addi	r2,r2,-19884
 1018528:	10800017 	ldw	r2,0(r2)
 101852c:	103ee83a 	callr	r2
 1018530:	e0bfff15 	stw	r2,-4(fp)
 1018534:	00000306 	br	1018544 <alt_get_errno+0x48>
 1018538:	008040b4 	movhi	r2,258
 101853c:	10b3a504 	addi	r2,r2,-12652
 1018540:	e0bfff15 	stw	r2,-4(fp)
 1018544:	e0bfff17 	ldw	r2,-4(fp)
}
 1018548:	e037883a 	mov	sp,fp
 101854c:	dfc00117 	ldw	ra,4(sp)
 1018550:	df000017 	ldw	fp,0(sp)
 1018554:	dec00204 	addi	sp,sp,8
 1018558:	f800283a 	ret

0101855c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 101855c:	deffff04 	addi	sp,sp,-4
 1018560:	df000015 	stw	fp,0(sp)
 1018564:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1018568:	000170fa 	wrctl	ienable,zero
}
 101856c:	e037883a 	mov	sp,fp
 1018570:	df000017 	ldw	fp,0(sp)
 1018574:	dec00104 	addi	sp,sp,4
 1018578:	f800283a 	ret

0101857c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 101857c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 1018580:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 1018584:	d1273e17 	ldw	r4,-25352(gp)

      stw ra,  0(sp)
 1018588:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 101858c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 1018590:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 1018594:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 1018598:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 101859c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 10185a0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 10185a4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 10185a8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 10185ac:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 10185b0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 10185b4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 10185b8:	101899c0 	call	101899c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 10185bc:	d1273917 	ldw	r4,-25372(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 10185c0:	d1673087 	ldb	r5,-25406(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 10185c4:	d1273e15 	stw	r4,-25352(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 10185c8:	d16730c5 	stb	r5,-25405(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 10185cc:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 10185d0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 10185d4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 10185d8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 10185dc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 10185e0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 10185e4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 10185e8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 10185ec:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 10185f0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 10185f4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 10185f8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 10185fc:	d0e00515 	stw	r3,-32748(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 1018600:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 1018604:	f800283a 	ret

01018608 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 1018608:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 101860c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 1018610:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 1018614:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1018618:	101899c0 	call	101899c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 101861c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 1018620:	d4a72e05 	stb	r18,-25416(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 1018624:	003fe506 	br	10185bc <OSCtxSw+0x40>

01018628 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 1018628:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 101862c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 1018630:	10800054 	ori	r2,r2,1
      wrctl status, r2
 1018634:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 1018638:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 101863c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 1018640:	dec00204 	addi	sp,sp,8

      callr r2
 1018644:	103ee83a 	callr	r2

      nop
 1018648:	0001883a 	nop

0101864c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 101864c:	defff704 	addi	sp,sp,-36
 1018650:	dfc00815 	stw	ra,32(sp)
 1018654:	df000715 	stw	fp,28(sp)
 1018658:	df000704 	addi	fp,sp,28
 101865c:	e13ffc15 	stw	r4,-16(fp)
 1018660:	e17ffd15 	stw	r5,-12(fp)
 1018664:	e1bffe15 	stw	r6,-8(fp)
 1018668:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 101866c:	e0bffe17 	ldw	r2,-8(fp)
 1018670:	1007883a 	mov	r3,r2
 1018674:	00bfff04 	movi	r2,-4
 1018678:	1884703a 	and	r2,r3,r2
 101867c:	10bf0004 	addi	r2,r2,-1024
 1018680:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 1018684:	e0bff917 	ldw	r2,-28(fp)
 1018688:	10000015 	stw	zero,0(r2)
 101868c:	e0bff917 	ldw	r2,-28(fp)
 1018690:	10c0bb04 	addi	r3,r2,748
 1018694:	e0bff917 	ldw	r2,-28(fp)
 1018698:	10c00115 	stw	r3,4(r2)
 101869c:	e0bff917 	ldw	r2,-28(fp)
 10186a0:	1080bb04 	addi	r2,r2,748
 10186a4:	10c01704 	addi	r3,r2,92
 10186a8:	e0bff917 	ldw	r2,-28(fp)
 10186ac:	10c00215 	stw	r3,8(r2)
 10186b0:	e0bff917 	ldw	r2,-28(fp)
 10186b4:	1080bb04 	addi	r2,r2,748
 10186b8:	10c02e04 	addi	r3,r2,184
 10186bc:	e0bff917 	ldw	r2,-28(fp)
 10186c0:	10c00315 	stw	r3,12(r2)
 10186c4:	e0bff917 	ldw	r2,-28(fp)
 10186c8:	10000415 	stw	zero,16(r2)
 10186cc:	e0bff917 	ldw	r2,-28(fp)
 10186d0:	10800504 	addi	r2,r2,20
 10186d4:	1009883a 	mov	r4,r2
 10186d8:	01800644 	movi	r6,25
 10186dc:	000b883a 	mov	r5,zero
 10186e0:	1007ce40 	call	1007ce4 <memset>
 10186e4:	e0bff917 	ldw	r2,-28(fp)
 10186e8:	10000c15 	stw	zero,48(r2)
 10186ec:	e0fff917 	ldw	r3,-28(fp)
 10186f0:	008040b4 	movhi	r2,258
 10186f4:	10a5e404 	addi	r2,r2,-26736
 10186f8:	18800d15 	stw	r2,52(r3)
 10186fc:	e0bff917 	ldw	r2,-28(fp)
 1018700:	10000e15 	stw	zero,56(r2)
 1018704:	e0bff917 	ldw	r2,-28(fp)
 1018708:	10000f15 	stw	zero,60(r2)
 101870c:	e0bff917 	ldw	r2,-28(fp)
 1018710:	10001015 	stw	zero,64(r2)
 1018714:	e0bff917 	ldw	r2,-28(fp)
 1018718:	10001115 	stw	zero,68(r2)
 101871c:	e0bff917 	ldw	r2,-28(fp)
 1018720:	10001215 	stw	zero,72(r2)
 1018724:	e0bff917 	ldw	r2,-28(fp)
 1018728:	10001315 	stw	zero,76(r2)
 101872c:	e0bff917 	ldw	r2,-28(fp)
 1018730:	10001415 	stw	zero,80(r2)
 1018734:	e0bff917 	ldw	r2,-28(fp)
 1018738:	10001515 	stw	zero,84(r2)
 101873c:	e0bff917 	ldw	r2,-28(fp)
 1018740:	10001615 	stw	zero,88(r2)
 1018744:	e0bff917 	ldw	r2,-28(fp)
 1018748:	10001715 	stw	zero,92(r2)
 101874c:	e0bff917 	ldw	r2,-28(fp)
 1018750:	10001805 	stb	zero,96(r2)
 1018754:	e0bff917 	ldw	r2,-28(fp)
 1018758:	10801f04 	addi	r2,r2,124
 101875c:	10000015 	stw	zero,0(r2)
 1018760:	10000115 	stw	zero,4(r2)
 1018764:	10000215 	stw	zero,8(r2)
 1018768:	10000315 	stw	zero,12(r2)
 101876c:	10000415 	stw	zero,16(r2)
 1018770:	10000515 	stw	zero,20(r2)
 1018774:	10000615 	stw	zero,24(r2)
 1018778:	10000715 	stw	zero,28(r2)
 101877c:	10000815 	stw	zero,32(r2)
 1018780:	e0bff917 	ldw	r2,-28(fp)
 1018784:	10002815 	stw	zero,160(r2)
 1018788:	e0fff917 	ldw	r3,-28(fp)
 101878c:	00800044 	movi	r2,1
 1018790:	18802915 	stw	r2,164(r3)
 1018794:	18002a15 	stw	zero,168(r3)
 1018798:	e0fff917 	ldw	r3,-28(fp)
 101879c:	008cc384 	movi	r2,13070
 10187a0:	18802b0d 	sth	r2,172(r3)
 10187a4:	e0fff917 	ldw	r3,-28(fp)
 10187a8:	00aaf344 	movi	r2,-21555
 10187ac:	18802b8d 	sth	r2,174(r3)
 10187b0:	e0fff917 	ldw	r3,-28(fp)
 10187b4:	00848d04 	movi	r2,4660
 10187b8:	18802c0d 	sth	r2,176(r3)
 10187bc:	e0fff917 	ldw	r3,-28(fp)
 10187c0:	00b99b44 	movi	r2,-6547
 10187c4:	18802c8d 	sth	r2,178(r3)
 10187c8:	e0fff917 	ldw	r3,-28(fp)
 10187cc:	00b7bb04 	movi	r2,-8468
 10187d0:	18802d0d 	sth	r2,180(r3)
 10187d4:	e0fff917 	ldw	r3,-28(fp)
 10187d8:	00800144 	movi	r2,5
 10187dc:	18802d8d 	sth	r2,182(r3)
 10187e0:	e0fff917 	ldw	r3,-28(fp)
 10187e4:	008002c4 	movi	r2,11
 10187e8:	18802e0d 	sth	r2,184(r3)
 10187ec:	e0bff917 	ldw	r2,-28(fp)
 10187f0:	10002f15 	stw	zero,188(r2)
 10187f4:	e0bff917 	ldw	r2,-28(fp)
 10187f8:	10003015 	stw	zero,192(r2)
 10187fc:	e0bff917 	ldw	r2,-28(fp)
 1018800:	10003115 	stw	zero,196(r2)
 1018804:	e0bff917 	ldw	r2,-28(fp)
 1018808:	10003215 	stw	zero,200(r2)
 101880c:	e0bff917 	ldw	r2,-28(fp)
 1018810:	10003315 	stw	zero,204(r2)
 1018814:	e0bff917 	ldw	r2,-28(fp)
 1018818:	10003415 	stw	zero,208(r2)
 101881c:	e0bff917 	ldw	r2,-28(fp)
 1018820:	10003e15 	stw	zero,248(r2)
 1018824:	e0bff917 	ldw	r2,-28(fp)
 1018828:	10003f15 	stw	zero,252(r2)
 101882c:	e0bff917 	ldw	r2,-28(fp)
 1018830:	10004015 	stw	zero,256(r2)
 1018834:	e0bff917 	ldw	r2,-28(fp)
 1018838:	10004115 	stw	zero,260(r2)
 101883c:	e0bff917 	ldw	r2,-28(fp)
 1018840:	10004215 	stw	zero,264(r2)
 1018844:	e0bff917 	ldw	r2,-28(fp)
 1018848:	10004315 	stw	zero,268(r2)
 101884c:	e0bff917 	ldw	r2,-28(fp)
 1018850:	10004415 	stw	zero,272(r2)
 1018854:	e0bff917 	ldw	r2,-28(fp)
 1018858:	10004515 	stw	zero,276(r2)
 101885c:	e0bff917 	ldw	r2,-28(fp)
 1018860:	10004615 	stw	zero,280(r2)
 1018864:	e0bff917 	ldw	r2,-28(fp)
 1018868:	10004715 	stw	zero,284(r2)
 101886c:	e0bff917 	ldw	r2,-28(fp)
 1018870:	10003505 	stb	zero,212(r2)
 1018874:	e0bff917 	ldw	r2,-28(fp)
 1018878:	10003705 	stb	zero,220(r2)
 101887c:	e0bff917 	ldw	r2,-28(fp)
 1018880:	10003d15 	stw	zero,244(r2)
 1018884:	e0bff917 	ldw	r2,-28(fp)
 1018888:	10005215 	stw	zero,328(r2)
 101888c:	e0bff917 	ldw	r2,-28(fp)
 1018890:	10005315 	stw	zero,332(r2)
 1018894:	e0bff917 	ldw	r2,-28(fp)
 1018898:	10005415 	stw	zero,336(r2)
 101889c:	e0bff917 	ldw	r2,-28(fp)
 10188a0:	10005515 	stw	zero,340(r2)
 10188a4:	e0bff917 	ldw	r2,-28(fp)
 10188a8:	1000b515 	stw	zero,724(r2)
 10188ac:	e0bff917 	ldw	r2,-28(fp)
 10188b0:	10007515 	stw	zero,468(r2)
 10188b4:	e0bff917 	ldw	r2,-28(fp)
 10188b8:	1000b715 	stw	zero,732(r2)
 10188bc:	e0bff917 	ldw	r2,-28(fp)
 10188c0:	1000b815 	stw	zero,736(r2)
 10188c4:	e0bff917 	ldw	r2,-28(fp)
 10188c8:	1000b915 	stw	zero,740(r2)
 10188cc:	e0bff917 	ldw	r2,-28(fp)
 10188d0:	1000ba15 	stw	zero,744(r2)
 10188d4:	e0bff917 	ldw	r2,-28(fp)
 10188d8:	1080bb04 	addi	r2,r2,748
 10188dc:	1009883a 	mov	r4,r2
 10188e0:	01804504 	movi	r6,276
 10188e4:	000b883a 	mov	r5,zero
 10188e8:	1007ce40 	call	1007ce4 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 10188ec:	e0bff917 	ldw	r2,-28(fp)
 10188f0:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 10188f4:	e0bffb17 	ldw	r2,-20(fp)
 10188f8:	10bff304 	addi	r2,r2,-52
 10188fc:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 1018900:	e0bffa17 	ldw	r2,-24(fp)
 1018904:	10c00c04 	addi	r3,r2,48
 1018908:	e0bffc17 	ldw	r2,-16(fp)
 101890c:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 1018910:	e0bffa17 	ldw	r2,-24(fp)
 1018914:	10c00b04 	addi	r3,r2,44
 1018918:	e0bffd17 	ldw	r2,-12(fp)
 101891c:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 1018920:	e0bffa17 	ldw	r2,-24(fp)
 1018924:	10c00a04 	addi	r3,r2,40
 1018928:	e0bff917 	ldw	r2,-28(fp)
 101892c:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 1018930:	008040b4 	movhi	r2,258
 1018934:	10a18a04 	addi	r2,r2,-31192
 1018938:	10c00104 	addi	r3,r2,4
 101893c:	e0bffa17 	ldw	r2,-24(fp)
 1018940:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 1018944:	e0bffa17 	ldw	r2,-24(fp)
}
 1018948:	e037883a 	mov	sp,fp
 101894c:	dfc00117 	ldw	ra,4(sp)
 1018950:	df000017 	ldw	fp,0(sp)
 1018954:	dec00204 	addi	sp,sp,8
 1018958:	f800283a 	ret

0101895c <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 101895c:	defffe04 	addi	sp,sp,-8
 1018960:	df000115 	stw	fp,4(sp)
 1018964:	df000104 	addi	fp,sp,4
 1018968:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 101896c:	e037883a 	mov	sp,fp
 1018970:	df000017 	ldw	fp,0(sp)
 1018974:	dec00104 	addi	sp,sp,4
 1018978:	f800283a 	ret

0101897c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 101897c:	defffe04 	addi	sp,sp,-8
 1018980:	df000115 	stw	fp,4(sp)
 1018984:	df000104 	addi	fp,sp,4
 1018988:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 101898c:	e037883a 	mov	sp,fp
 1018990:	df000017 	ldw	fp,0(sp)
 1018994:	dec00104 	addi	sp,sp,4
 1018998:	f800283a 	ret

0101899c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 101899c:	deffff04 	addi	sp,sp,-4
 10189a0:	df000015 	stw	fp,0(sp)
 10189a4:	d839883a 	mov	fp,sp
}
 10189a8:	e037883a 	mov	sp,fp
 10189ac:	df000017 	ldw	fp,0(sp)
 10189b0:	dec00104 	addi	sp,sp,4
 10189b4:	f800283a 	ret

010189b8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 10189b8:	deffff04 	addi	sp,sp,-4
 10189bc:	df000015 	stw	fp,0(sp)
 10189c0:	d839883a 	mov	fp,sp
}
 10189c4:	e037883a 	mov	sp,fp
 10189c8:	df000017 	ldw	fp,0(sp)
 10189cc:	dec00104 	addi	sp,sp,4
 10189d0:	f800283a 	ret

010189d4 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 10189d4:	defffe04 	addi	sp,sp,-8
 10189d8:	dfc00115 	stw	ra,4(sp)
 10189dc:	df000015 	stw	fp,0(sp)
 10189e0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
 10189e4:	d0a7460b 	ldhu	r2,-25320(gp)
 10189e8:	10800044 	addi	r2,r2,1
 10189ec:	d0a7460d 	sth	r2,-25320(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 10189f0:	d0a7460b 	ldhu	r2,-25320(gp)
 10189f4:	113fffcc 	andi	r4,r2,65535
 10189f8:	1001cd40 	call	1001cd4 <__floatsidf>
 10189fc:	100b883a 	mov	r5,r2
 1018a00:	180d883a 	mov	r6,r3
 1018a04:	2809883a 	mov	r4,r5
 1018a08:	300b883a 	mov	r5,r6
 1018a0c:	000d883a 	mov	r6,zero
 1018a10:	01d01674 	movhi	r7,16473
 1018a14:	100adb40 	call	100adb4 <__gedf2>
 1018a18:	1004403a 	cmpge	r2,r2,zero
 1018a1c:	1000011e 	bne	r2,zero,1018a24 <OSTimeTickHook+0x50>
 1018a20:	00000206 	br	1018a2c <OSTimeTickHook+0x58>
        OSTmrCtr = 0;
 1018a24:	d027460d 	sth	zero,-25320(gp)
        OSTmrSignal();
 1018a28:	1015f5c0 	call	1015f5c <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 1018a2c:	e037883a 	mov	sp,fp
 1018a30:	dfc00117 	ldw	ra,4(sp)
 1018a34:	df000017 	ldw	fp,0(sp)
 1018a38:	dec00204 	addi	sp,sp,8
 1018a3c:	f800283a 	ret

01018a40 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 1018a40:	deffff04 	addi	sp,sp,-4
 1018a44:	df000015 	stw	fp,0(sp)
 1018a48:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
 1018a4c:	d027460d 	sth	zero,-25320(gp)
#endif
}
 1018a50:	e037883a 	mov	sp,fp
 1018a54:	df000017 	ldw	fp,0(sp)
 1018a58:	dec00104 	addi	sp,sp,4
 1018a5c:	f800283a 	ret

01018a60 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 1018a60:	deffff04 	addi	sp,sp,-4
 1018a64:	df000015 	stw	fp,0(sp)
 1018a68:	d839883a 	mov	fp,sp
}
 1018a6c:	e037883a 	mov	sp,fp
 1018a70:	df000017 	ldw	fp,0(sp)
 1018a74:	dec00104 	addi	sp,sp,4
 1018a78:	f800283a 	ret

01018a7c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 1018a7c:	deffff04 	addi	sp,sp,-4
 1018a80:	df000015 	stw	fp,0(sp)
 1018a84:	d839883a 	mov	fp,sp
}
 1018a88:	e037883a 	mov	sp,fp
 1018a8c:	df000017 	ldw	fp,0(sp)
 1018a90:	dec00104 	addi	sp,sp,4
 1018a94:	f800283a 	ret

01018a98 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 1018a98:	defffe04 	addi	sp,sp,-8
 1018a9c:	df000115 	stw	fp,4(sp)
 1018aa0:	df000104 	addi	fp,sp,4
 1018aa4:	e13fff15 	stw	r4,-4(fp)
}
 1018aa8:	e037883a 	mov	sp,fp
 1018aac:	df000017 	ldw	fp,0(sp)
 1018ab0:	dec00104 	addi	sp,sp,4
 1018ab4:	f800283a 	ret

01018ab8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1018ab8:	defffa04 	addi	sp,sp,-24
 1018abc:	dfc00515 	stw	ra,20(sp)
 1018ac0:	df000415 	stw	fp,16(sp)
 1018ac4:	df000404 	addi	fp,sp,16
 1018ac8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1018acc:	008040b4 	movhi	r2,258
 1018ad0:	10ac9004 	addi	r2,r2,-19904
 1018ad4:	10800017 	ldw	r2,0(r2)
 1018ad8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1018adc:	00003306 	br	1018bac <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1018ae0:	e0bffd17 	ldw	r2,-12(fp)
 1018ae4:	11000217 	ldw	r4,8(r2)
 1018ae8:	10028800 	call	1002880 <strlen>
 1018aec:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1018af0:	e0bffd17 	ldw	r2,-12(fp)
 1018af4:	10c00217 	ldw	r3,8(r2)
 1018af8:	e0bffc17 	ldw	r2,-16(fp)
 1018afc:	1885883a 	add	r2,r3,r2
 1018b00:	10bfffc4 	addi	r2,r2,-1
 1018b04:	10800003 	ldbu	r2,0(r2)
 1018b08:	10803fcc 	andi	r2,r2,255
 1018b0c:	1080201c 	xori	r2,r2,128
 1018b10:	10bfe004 	addi	r2,r2,-128
 1018b14:	10800bd8 	cmpnei	r2,r2,47
 1018b18:	1000031e 	bne	r2,zero,1018b28 <alt_find_file+0x70>
    {
      len -= 1;
 1018b1c:	e0bffc17 	ldw	r2,-16(fp)
 1018b20:	10bfffc4 	addi	r2,r2,-1
 1018b24:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1018b28:	e0bffc17 	ldw	r2,-16(fp)
 1018b2c:	1007883a 	mov	r3,r2
 1018b30:	e0bffe17 	ldw	r2,-8(fp)
 1018b34:	1885883a 	add	r2,r3,r2
 1018b38:	10800003 	ldbu	r2,0(r2)
 1018b3c:	10803fcc 	andi	r2,r2,255
 1018b40:	1080201c 	xori	r2,r2,128
 1018b44:	10bfe004 	addi	r2,r2,-128
 1018b48:	10800be0 	cmpeqi	r2,r2,47
 1018b4c:	10000a1e 	bne	r2,zero,1018b78 <alt_find_file+0xc0>
 1018b50:	e0bffc17 	ldw	r2,-16(fp)
 1018b54:	1007883a 	mov	r3,r2
 1018b58:	e0bffe17 	ldw	r2,-8(fp)
 1018b5c:	1885883a 	add	r2,r3,r2
 1018b60:	10800003 	ldbu	r2,0(r2)
 1018b64:	10803fcc 	andi	r2,r2,255
 1018b68:	1080201c 	xori	r2,r2,128
 1018b6c:	10bfe004 	addi	r2,r2,-128
 1018b70:	1004c03a 	cmpne	r2,r2,zero
 1018b74:	10000a1e 	bne	r2,zero,1018ba0 <alt_find_file+0xe8>
 1018b78:	e0bffd17 	ldw	r2,-12(fp)
 1018b7c:	11000217 	ldw	r4,8(r2)
 1018b80:	e1bffc17 	ldw	r6,-16(fp)
 1018b84:	e17ffe17 	ldw	r5,-8(fp)
 1018b88:	1018d280 	call	1018d28 <memcmp>
 1018b8c:	1004c03a 	cmpne	r2,r2,zero
 1018b90:	1000031e 	bne	r2,zero,1018ba0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1018b94:	e0bffd17 	ldw	r2,-12(fp)
 1018b98:	e0bfff15 	stw	r2,-4(fp)
 1018b9c:	00000806 	br	1018bc0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1018ba0:	e0bffd17 	ldw	r2,-12(fp)
 1018ba4:	10800017 	ldw	r2,0(r2)
 1018ba8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1018bac:	00c040b4 	movhi	r3,258
 1018bb0:	18ec9004 	addi	r3,r3,-19904
 1018bb4:	e0bffd17 	ldw	r2,-12(fp)
 1018bb8:	10ffc91e 	bne	r2,r3,1018ae0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1018bbc:	e03fff15 	stw	zero,-4(fp)
 1018bc0:	e0bfff17 	ldw	r2,-4(fp)
}
 1018bc4:	e037883a 	mov	sp,fp
 1018bc8:	dfc00117 	ldw	ra,4(sp)
 1018bcc:	df000017 	ldw	fp,0(sp)
 1018bd0:	dec00204 	addi	sp,sp,8
 1018bd4:	f800283a 	ret

01018bd8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1018bd8:	defff704 	addi	sp,sp,-36
 1018bdc:	dfc00815 	stw	ra,32(sp)
 1018be0:	df000715 	stw	fp,28(sp)
 1018be4:	dc000615 	stw	r16,24(sp)
 1018be8:	df000604 	addi	fp,sp,24
 1018bec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1018bf0:	00bffa04 	movi	r2,-24
 1018bf4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 1018bf8:	008040b4 	movhi	r2,258
 1018bfc:	10b3a604 	addi	r2,r2,-12648
 1018c00:	10800017 	ldw	r2,0(r2)
 1018c04:	e0bffa15 	stw	r2,-24(fp)
 1018c08:	e03ffb0d 	sth	zero,-20(fp)
 1018c0c:	e17ffb0b 	ldhu	r5,-20(fp)
 1018c10:	e1bffe04 	addi	r6,fp,-8
 1018c14:	e13ffa17 	ldw	r4,-24(fp)
 1018c18:	1012be00 	call	1012be0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1018c1c:	e03ffd15 	stw	zero,-12(fp)
 1018c20:	00002006 	br	1018ca4 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
 1018c24:	e13ffd17 	ldw	r4,-12(fp)
 1018c28:	040040b4 	movhi	r16,258
 1018c2c:	8427ff04 	addi	r16,r16,-24580
 1018c30:	01400304 	movi	r5,12
 1018c34:	10020280 	call	1002028 <__mulsi3>
 1018c38:	1405883a 	add	r2,r2,r16
 1018c3c:	10800017 	ldw	r2,0(r2)
 1018c40:	1004c03a 	cmpne	r2,r2,zero
 1018c44:	1000141e 	bne	r2,zero,1018c98 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
 1018c48:	e13ffd17 	ldw	r4,-12(fp)
 1018c4c:	040040b4 	movhi	r16,258
 1018c50:	8427ff04 	addi	r16,r16,-24580
 1018c54:	01400304 	movi	r5,12
 1018c58:	10020280 	call	1002028 <__mulsi3>
 1018c5c:	1407883a 	add	r3,r2,r16
 1018c60:	e0bfff17 	ldw	r2,-4(fp)
 1018c64:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1018c68:	008040b4 	movhi	r2,258
 1018c6c:	10ac9404 	addi	r2,r2,-19888
 1018c70:	10c00017 	ldw	r3,0(r2)
 1018c74:	e0bffd17 	ldw	r2,-12(fp)
 1018c78:	1880040e 	bge	r3,r2,1018c8c <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
 1018c7c:	00c040b4 	movhi	r3,258
 1018c80:	18ec9404 	addi	r3,r3,-19888
 1018c84:	e0bffd17 	ldw	r2,-12(fp)
 1018c88:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1018c8c:	e0bffd17 	ldw	r2,-12(fp)
 1018c90:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 1018c94:	00000606 	br	1018cb0 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1018c98:	e0bffd17 	ldw	r2,-12(fp)
 1018c9c:	10800044 	addi	r2,r2,1
 1018ca0:	e0bffd15 	stw	r2,-12(fp)
 1018ca4:	e0bffd17 	ldw	r2,-12(fp)
 1018ca8:	10800810 	cmplti	r2,r2,32
 1018cac:	103fdd1e 	bne	r2,zero,1018c24 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 1018cb0:	008040b4 	movhi	r2,258
 1018cb4:	10b3a604 	addi	r2,r2,-12648
 1018cb8:	11000017 	ldw	r4,0(r2)
 1018cbc:	1012fd80 	call	1012fd8 <OSSemPost>

  return rc;
 1018cc0:	e0bffc17 	ldw	r2,-16(fp)
}
 1018cc4:	e037883a 	mov	sp,fp
 1018cc8:	dfc00217 	ldw	ra,8(sp)
 1018ccc:	df000117 	ldw	fp,4(sp)
 1018cd0:	dc000017 	ldw	r16,0(sp)
 1018cd4:	dec00304 	addi	sp,sp,12
 1018cd8:	f800283a 	ret

01018cdc <atexit>:
 1018cdc:	200b883a 	mov	r5,r4
 1018ce0:	000d883a 	mov	r6,zero
 1018ce4:	0009883a 	mov	r4,zero
 1018ce8:	000f883a 	mov	r7,zero
 1018cec:	1018d9c1 	jmpi	1018d9c <__register_exitproc>

01018cf0 <exit>:
 1018cf0:	defffe04 	addi	sp,sp,-8
 1018cf4:	000b883a 	mov	r5,zero
 1018cf8:	dc000015 	stw	r16,0(sp)
 1018cfc:	dfc00115 	stw	ra,4(sp)
 1018d00:	2021883a 	mov	r16,r4
 1018d04:	1018ed40 	call	1018ed4 <__call_exitprocs>
 1018d08:	008040b4 	movhi	r2,258
 1018d0c:	10ac8b04 	addi	r2,r2,-19924
 1018d10:	11000017 	ldw	r4,0(r2)
 1018d14:	20800f17 	ldw	r2,60(r4)
 1018d18:	10000126 	beq	r2,zero,1018d20 <exit+0x30>
 1018d1c:	103ee83a 	callr	r2
 1018d20:	8009883a 	mov	r4,r16
 1018d24:	10191680 	call	1019168 <_exit>

01018d28 <memcmp>:
 1018d28:	00c000c4 	movi	r3,3
 1018d2c:	1980032e 	bgeu	r3,r6,1018d3c <memcmp+0x14>
 1018d30:	2144b03a 	or	r2,r4,r5
 1018d34:	10c4703a 	and	r2,r2,r3
 1018d38:	10000f26 	beq	r2,zero,1018d78 <memcmp+0x50>
 1018d3c:	31ffffc4 	addi	r7,r6,-1
 1018d40:	3000061e 	bne	r6,zero,1018d5c <memcmp+0x34>
 1018d44:	00000a06 	br	1018d70 <memcmp+0x48>
 1018d48:	39ffffc4 	addi	r7,r7,-1
 1018d4c:	00bfffc4 	movi	r2,-1
 1018d50:	21000044 	addi	r4,r4,1
 1018d54:	29400044 	addi	r5,r5,1
 1018d58:	38800526 	beq	r7,r2,1018d70 <memcmp+0x48>
 1018d5c:	20c00003 	ldbu	r3,0(r4)
 1018d60:	28800003 	ldbu	r2,0(r5)
 1018d64:	18bff826 	beq	r3,r2,1018d48 <memcmp+0x20>
 1018d68:	1885c83a 	sub	r2,r3,r2
 1018d6c:	f800283a 	ret
 1018d70:	0005883a 	mov	r2,zero
 1018d74:	f800283a 	ret
 1018d78:	180f883a 	mov	r7,r3
 1018d7c:	20c00017 	ldw	r3,0(r4)
 1018d80:	28800017 	ldw	r2,0(r5)
 1018d84:	18bfed1e 	bne	r3,r2,1018d3c <memcmp+0x14>
 1018d88:	31bfff04 	addi	r6,r6,-4
 1018d8c:	21000104 	addi	r4,r4,4
 1018d90:	29400104 	addi	r5,r5,4
 1018d94:	39bff936 	bltu	r7,r6,1018d7c <memcmp+0x54>
 1018d98:	003fe806 	br	1018d3c <memcmp+0x14>

01018d9c <__register_exitproc>:
 1018d9c:	defffa04 	addi	sp,sp,-24
 1018da0:	008040b4 	movhi	r2,258
 1018da4:	10ac8b04 	addi	r2,r2,-19924
 1018da8:	dc000015 	stw	r16,0(sp)
 1018dac:	14000017 	ldw	r16,0(r2)
 1018db0:	dd000415 	stw	r20,16(sp)
 1018db4:	2829883a 	mov	r20,r5
 1018db8:	81405217 	ldw	r5,328(r16)
 1018dbc:	dcc00315 	stw	r19,12(sp)
 1018dc0:	dc800215 	stw	r18,8(sp)
 1018dc4:	dc400115 	stw	r17,4(sp)
 1018dc8:	dfc00515 	stw	ra,20(sp)
 1018dcc:	2023883a 	mov	r17,r4
 1018dd0:	3027883a 	mov	r19,r6
 1018dd4:	3825883a 	mov	r18,r7
 1018dd8:	28002526 	beq	r5,zero,1018e70 <__register_exitproc+0xd4>
 1018ddc:	29000117 	ldw	r4,4(r5)
 1018de0:	008007c4 	movi	r2,31
 1018de4:	11002716 	blt	r2,r4,1018e84 <__register_exitproc+0xe8>
 1018de8:	8800101e 	bne	r17,zero,1018e2c <__register_exitproc+0x90>
 1018dec:	2105883a 	add	r2,r4,r4
 1018df0:	1085883a 	add	r2,r2,r2
 1018df4:	20c00044 	addi	r3,r4,1
 1018df8:	1145883a 	add	r2,r2,r5
 1018dfc:	0009883a 	mov	r4,zero
 1018e00:	15000215 	stw	r20,8(r2)
 1018e04:	28c00115 	stw	r3,4(r5)
 1018e08:	2005883a 	mov	r2,r4
 1018e0c:	dfc00517 	ldw	ra,20(sp)
 1018e10:	dd000417 	ldw	r20,16(sp)
 1018e14:	dcc00317 	ldw	r19,12(sp)
 1018e18:	dc800217 	ldw	r18,8(sp)
 1018e1c:	dc400117 	ldw	r17,4(sp)
 1018e20:	dc000017 	ldw	r16,0(sp)
 1018e24:	dec00604 	addi	sp,sp,24
 1018e28:	f800283a 	ret
 1018e2c:	29802204 	addi	r6,r5,136
 1018e30:	00800044 	movi	r2,1
 1018e34:	110e983a 	sll	r7,r2,r4
 1018e38:	30c04017 	ldw	r3,256(r6)
 1018e3c:	2105883a 	add	r2,r4,r4
 1018e40:	1085883a 	add	r2,r2,r2
 1018e44:	1185883a 	add	r2,r2,r6
 1018e48:	19c6b03a 	or	r3,r3,r7
 1018e4c:	14802015 	stw	r18,128(r2)
 1018e50:	14c00015 	stw	r19,0(r2)
 1018e54:	00800084 	movi	r2,2
 1018e58:	30c04015 	stw	r3,256(r6)
 1018e5c:	88bfe31e 	bne	r17,r2,1018dec <__register_exitproc+0x50>
 1018e60:	30804117 	ldw	r2,260(r6)
 1018e64:	11c4b03a 	or	r2,r2,r7
 1018e68:	30804115 	stw	r2,260(r6)
 1018e6c:	003fdf06 	br	1018dec <__register_exitproc+0x50>
 1018e70:	008040f4 	movhi	r2,259
 1018e74:	10bb7904 	addi	r2,r2,-4636
 1018e78:	100b883a 	mov	r5,r2
 1018e7c:	80805215 	stw	r2,328(r16)
 1018e80:	003fd606 	br	1018ddc <__register_exitproc+0x40>
 1018e84:	00800034 	movhi	r2,0
 1018e88:	10800004 	addi	r2,r2,0
 1018e8c:	1000021e 	bne	r2,zero,1018e98 <__register_exitproc+0xfc>
 1018e90:	013fffc4 	movi	r4,-1
 1018e94:	003fdc06 	br	1018e08 <__register_exitproc+0x6c>
 1018e98:	01006404 	movi	r4,400
 1018e9c:	103ee83a 	callr	r2
 1018ea0:	1007883a 	mov	r3,r2
 1018ea4:	103ffa26 	beq	r2,zero,1018e90 <__register_exitproc+0xf4>
 1018ea8:	80805217 	ldw	r2,328(r16)
 1018eac:	180b883a 	mov	r5,r3
 1018eb0:	18000115 	stw	zero,4(r3)
 1018eb4:	18800015 	stw	r2,0(r3)
 1018eb8:	80c05215 	stw	r3,328(r16)
 1018ebc:	18006215 	stw	zero,392(r3)
 1018ec0:	18006315 	stw	zero,396(r3)
 1018ec4:	0009883a 	mov	r4,zero
 1018ec8:	883fc826 	beq	r17,zero,1018dec <__register_exitproc+0x50>
 1018ecc:	003fd706 	br	1018e2c <__register_exitproc+0x90>

01018ed0 <register_fini>:
 1018ed0:	f800283a 	ret

01018ed4 <__call_exitprocs>:
 1018ed4:	008040b4 	movhi	r2,258
 1018ed8:	10ac8b04 	addi	r2,r2,-19924
 1018edc:	10800017 	ldw	r2,0(r2)
 1018ee0:	defff304 	addi	sp,sp,-52
 1018ee4:	df000b15 	stw	fp,44(sp)
 1018ee8:	d8800115 	stw	r2,4(sp)
 1018eec:	00800034 	movhi	r2,0
 1018ef0:	10800004 	addi	r2,r2,0
 1018ef4:	1005003a 	cmpeq	r2,r2,zero
 1018ef8:	d8800215 	stw	r2,8(sp)
 1018efc:	d8800117 	ldw	r2,4(sp)
 1018f00:	dd400815 	stw	r21,32(sp)
 1018f04:	dd000715 	stw	r20,28(sp)
 1018f08:	10805204 	addi	r2,r2,328
 1018f0c:	dfc00c15 	stw	ra,48(sp)
 1018f10:	ddc00a15 	stw	r23,40(sp)
 1018f14:	dd800915 	stw	r22,36(sp)
 1018f18:	dcc00615 	stw	r19,24(sp)
 1018f1c:	dc800515 	stw	r18,20(sp)
 1018f20:	dc400415 	stw	r17,16(sp)
 1018f24:	dc000315 	stw	r16,12(sp)
 1018f28:	282b883a 	mov	r21,r5
 1018f2c:	2039883a 	mov	fp,r4
 1018f30:	d8800015 	stw	r2,0(sp)
 1018f34:	2829003a 	cmpeq	r20,r5,zero
 1018f38:	d8800117 	ldw	r2,4(sp)
 1018f3c:	14405217 	ldw	r17,328(r2)
 1018f40:	88001026 	beq	r17,zero,1018f84 <__call_exitprocs+0xb0>
 1018f44:	ddc00017 	ldw	r23,0(sp)
 1018f48:	88800117 	ldw	r2,4(r17)
 1018f4c:	8c802204 	addi	r18,r17,136
 1018f50:	143fffc4 	addi	r16,r2,-1
 1018f54:	80000916 	blt	r16,zero,1018f7c <__call_exitprocs+0xa8>
 1018f58:	05bfffc4 	movi	r22,-1
 1018f5c:	a000151e 	bne	r20,zero,1018fb4 <__call_exitprocs+0xe0>
 1018f60:	8409883a 	add	r4,r16,r16
 1018f64:	2105883a 	add	r2,r4,r4
 1018f68:	1485883a 	add	r2,r2,r18
 1018f6c:	10c02017 	ldw	r3,128(r2)
 1018f70:	a8c01126 	beq	r21,r3,1018fb8 <__call_exitprocs+0xe4>
 1018f74:	843fffc4 	addi	r16,r16,-1
 1018f78:	85bff81e 	bne	r16,r22,1018f5c <__call_exitprocs+0x88>
 1018f7c:	d8800217 	ldw	r2,8(sp)
 1018f80:	10003126 	beq	r2,zero,1019048 <__call_exitprocs+0x174>
 1018f84:	dfc00c17 	ldw	ra,48(sp)
 1018f88:	df000b17 	ldw	fp,44(sp)
 1018f8c:	ddc00a17 	ldw	r23,40(sp)
 1018f90:	dd800917 	ldw	r22,36(sp)
 1018f94:	dd400817 	ldw	r21,32(sp)
 1018f98:	dd000717 	ldw	r20,28(sp)
 1018f9c:	dcc00617 	ldw	r19,24(sp)
 1018fa0:	dc800517 	ldw	r18,20(sp)
 1018fa4:	dc400417 	ldw	r17,16(sp)
 1018fa8:	dc000317 	ldw	r16,12(sp)
 1018fac:	dec00d04 	addi	sp,sp,52
 1018fb0:	f800283a 	ret
 1018fb4:	8409883a 	add	r4,r16,r16
 1018fb8:	88c00117 	ldw	r3,4(r17)
 1018fbc:	2105883a 	add	r2,r4,r4
 1018fc0:	1445883a 	add	r2,r2,r17
 1018fc4:	18ffffc4 	addi	r3,r3,-1
 1018fc8:	11800217 	ldw	r6,8(r2)
 1018fcc:	1c001526 	beq	r3,r16,1019024 <__call_exitprocs+0x150>
 1018fd0:	10000215 	stw	zero,8(r2)
 1018fd4:	303fe726 	beq	r6,zero,1018f74 <__call_exitprocs+0xa0>
 1018fd8:	00c00044 	movi	r3,1
 1018fdc:	1c06983a 	sll	r3,r3,r16
 1018fe0:	90804017 	ldw	r2,256(r18)
 1018fe4:	8cc00117 	ldw	r19,4(r17)
 1018fe8:	1884703a 	and	r2,r3,r2
 1018fec:	10001426 	beq	r2,zero,1019040 <__call_exitprocs+0x16c>
 1018ff0:	90804117 	ldw	r2,260(r18)
 1018ff4:	1884703a 	and	r2,r3,r2
 1018ff8:	10000c1e 	bne	r2,zero,101902c <__call_exitprocs+0x158>
 1018ffc:	2105883a 	add	r2,r4,r4
 1019000:	1485883a 	add	r2,r2,r18
 1019004:	11400017 	ldw	r5,0(r2)
 1019008:	e009883a 	mov	r4,fp
 101900c:	303ee83a 	callr	r6
 1019010:	88800117 	ldw	r2,4(r17)
 1019014:	98bfc81e 	bne	r19,r2,1018f38 <__call_exitprocs+0x64>
 1019018:	b8800017 	ldw	r2,0(r23)
 101901c:	147fd526 	beq	r2,r17,1018f74 <__call_exitprocs+0xa0>
 1019020:	003fc506 	br	1018f38 <__call_exitprocs+0x64>
 1019024:	8c000115 	stw	r16,4(r17)
 1019028:	003fea06 	br	1018fd4 <__call_exitprocs+0x100>
 101902c:	2105883a 	add	r2,r4,r4
 1019030:	1485883a 	add	r2,r2,r18
 1019034:	11000017 	ldw	r4,0(r2)
 1019038:	303ee83a 	callr	r6
 101903c:	003ff406 	br	1019010 <__call_exitprocs+0x13c>
 1019040:	303ee83a 	callr	r6
 1019044:	003ff206 	br	1019010 <__call_exitprocs+0x13c>
 1019048:	88800117 	ldw	r2,4(r17)
 101904c:	1000081e 	bne	r2,zero,1019070 <__call_exitprocs+0x19c>
 1019050:	89000017 	ldw	r4,0(r17)
 1019054:	20000726 	beq	r4,zero,1019074 <__call_exitprocs+0x1a0>
 1019058:	b9000015 	stw	r4,0(r23)
 101905c:	8809883a 	mov	r4,r17
 1019060:	00000000 	call	0 <__alt_mem_onchip_memory>
 1019064:	bc400017 	ldw	r17,0(r23)
 1019068:	883fb71e 	bne	r17,zero,1018f48 <__call_exitprocs+0x74>
 101906c:	003fc506 	br	1018f84 <__call_exitprocs+0xb0>
 1019070:	89000017 	ldw	r4,0(r17)
 1019074:	882f883a 	mov	r23,r17
 1019078:	2023883a 	mov	r17,r4
 101907c:	883fb21e 	bne	r17,zero,1018f48 <__call_exitprocs+0x74>
 1019080:	003fc006 	br	1018f84 <__call_exitprocs+0xb0>

01019084 <__fixunsdfsi>:
 1019084:	defffb04 	addi	sp,sp,-20
 1019088:	dc400115 	stw	r17,4(sp)
 101908c:	dc000015 	stw	r16,0(sp)
 1019090:	04507834 	movhi	r17,16864
 1019094:	0021883a 	mov	r16,zero
 1019098:	800d883a 	mov	r6,r16
 101909c:	880f883a 	mov	r7,r17
 10190a0:	dcc00315 	stw	r19,12(sp)
 10190a4:	dc800215 	stw	r18,8(sp)
 10190a8:	2827883a 	mov	r19,r5
 10190ac:	2025883a 	mov	r18,r4
 10190b0:	dfc00415 	stw	ra,16(sp)
 10190b4:	100adb40 	call	100adb4 <__gedf2>
 10190b8:	000d883a 	mov	r6,zero
 10190bc:	880f883a 	mov	r7,r17
 10190c0:	980b883a 	mov	r5,r19
 10190c4:	9009883a 	mov	r4,r18
 10190c8:	10000d16 	blt	r2,zero,1019100 <__fixunsdfsi+0x7c>
 10190cc:	10019880 	call	1001988 <__subdf3>
 10190d0:	180b883a 	mov	r5,r3
 10190d4:	1009883a 	mov	r4,r2
 10190d8:	1001dcc0 	call	1001dcc <__fixdfsi>
 10190dc:	00e00034 	movhi	r3,32768
 10190e0:	10c5883a 	add	r2,r2,r3
 10190e4:	dfc00417 	ldw	ra,16(sp)
 10190e8:	dcc00317 	ldw	r19,12(sp)
 10190ec:	dc800217 	ldw	r18,8(sp)
 10190f0:	dc400117 	ldw	r17,4(sp)
 10190f4:	dc000017 	ldw	r16,0(sp)
 10190f8:	dec00504 	addi	sp,sp,20
 10190fc:	f800283a 	ret
 1019100:	980b883a 	mov	r5,r19
 1019104:	9009883a 	mov	r4,r18
 1019108:	1001dcc0 	call	1001dcc <__fixdfsi>
 101910c:	dfc00417 	ldw	ra,16(sp)
 1019110:	dcc00317 	ldw	r19,12(sp)
 1019114:	dc800217 	ldw	r18,8(sp)
 1019118:	dc400117 	ldw	r17,4(sp)
 101911c:	dc000017 	ldw	r16,0(sp)
 1019120:	dec00504 	addi	sp,sp,20
 1019124:	f800283a 	ret

01019128 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1019128:	defffd04 	addi	sp,sp,-12
 101912c:	df000215 	stw	fp,8(sp)
 1019130:	df000204 	addi	fp,sp,8
 1019134:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1019138:	e0bfff17 	ldw	r2,-4(fp)
 101913c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1019140:	e0bffe17 	ldw	r2,-8(fp)
 1019144:	1005003a 	cmpeq	r2,r2,zero
 1019148:	1000021e 	bne	r2,zero,1019154 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 101914c:	002af070 	cmpltui	zero,zero,43969
 1019150:	00000106 	br	1019158 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1019154:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1019158:	e037883a 	mov	sp,fp
 101915c:	df000017 	ldw	fp,0(sp)
 1019160:	dec00104 	addi	sp,sp,4
 1019164:	f800283a 	ret

01019168 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1019168:	defffd04 	addi	sp,sp,-12
 101916c:	dfc00215 	stw	ra,8(sp)
 1019170:	df000115 	stw	fp,4(sp)
 1019174:	df000104 	addi	fp,sp,4
 1019178:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 101917c:	008040b4 	movhi	r2,258
 1019180:	10b3b304 	addi	r2,r2,-12596
 1019184:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1019188:	e13fff17 	ldw	r4,-4(fp)
 101918c:	10191280 	call	1019128 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1019190:	003fff06 	br	1019190 <_exit+0x28>
 1019194:	01018ed0 	cmplti	r4,zero,1595
