
Lab1_test3.elf:     file format elf32-littlenios2
Lab1_test3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00002b9c memsz 0x00002b9c flags r-x
    LOAD off    0x00003bbc vaddr 0x01002bbc paddr 0x01004220 align 2**12
         filesz 0x00001664 memsz 0x00001664 flags rw-
    LOAD off    0x00005884 vaddr 0x01005884 paddr 0x01005884 align 2**12
         filesz 0x00000000 memsz 0x000002ac flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000029c0  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  01002b74  01002b74  00003b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001664  01002bbc  01004220  00003bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ac  01005884  01005884  00005884  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00005220  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000578  00000000  00000000  00005248  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000009c1  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000af68  00000000  00000000  00006181  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000026b7  00000000  00000000  000110e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000069e2  00000000  00000000  000137a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a2c  00000000  00000000  0001a184  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c2f  00000000  00000000  0001abb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001044  00000000  00000000  0001b7df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001c824  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001c838  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001e5ff  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0001e602  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001e607  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001e608  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001e609  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001e614  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001e61f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  0001e62a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000051  00000000  00000000  0001e639  2**0
                  CONTENTS, READONLY
 26 .jdi          0000509f  00000000  00000000  0001e68a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007119e  00000000  00000000  00023729  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
01002b74 l    d  .rodata	00000000 .rodata
01002bbc l    d  .rwdata	00000000 .rwdata
01005884 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 lab0.c
00000000 l    df *ABS*	00000000 alt_load.c
010002cc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01002bbc l     O .rwdata	00001060 jtag_uart_0
01003c1c l     O .rwdata	0000002c DE2_LCD
01000454 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01000694 l     F .text	00000228 altera_avalon_jtag_uart_irq
010008bc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01000f38 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
010017bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
01001838 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01001918 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01001dbc l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01001f0c l     F .text	000000f8 alt_file_locked
01002190 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
01003df0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01002924 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
01002b10 l     F .text	00000040 alt_sim_halt
01000338 g     F .text	0000006c alt_main
010058a0 g     O .bss	00000100 alt_irq
01004220 g       *ABS*	00000000 __flash_rwdata_start
010010b4 g     F .text	00000034 alt_up_character_lcd_send_cmd
00100000 g       *ABS*	00000000 __alt_mem_sram
00000000  w      *UND*	00000000 __errno
01001038 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100589c g     O .bss	00000004 errno
01005888 g     O .bss	00000004 alt_argv
0100c1f0 g       *ABS*	00000000 _gp
01003c70 g     O .rwdata	00000180 alt_fd_list
01001a40 g     F .text	00000094 alt_find_dev
010026dc g     F .text	000000a0 memcpy
0100124c g     F .text	0000004c alt_up_character_lcd_write_fd
01001e94 g     F .text	00000078 alt_io_redirect
01002b74 g       *ABS*	00000000 __DTOR_END__
01000ad4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
01004204 g     O .rwdata	00000004 alt_max_fd
0100421c g     O .rwdata	00000004 _global_impure_ptr
01005b30 g       *ABS*	00000000 __bss_end
01001cc4 g     F .text	000000f8 alt_iic_isr_register
01002300 g     F .text	0000010c alt_tick
01001c7c g     F .text	00000048 alt_ic_irq_enabled
01002268 g     F .text	00000098 alt_alarm_stop
01005890 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
01003c48 g     O .rwdata	00000028 alt_dev_null
01001534 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100181c g     F .text	0000001c alt_dcache_flush_all
01004220 g       *ABS*	00000000 __ram_rwdata_end
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
010041fc g     O .rwdata	00000008 alt_dev_list
01002bbc g       *ABS*	00000000 __ram_rodata_end
01005b30 g       *ABS*	00000000 end
010005d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
01002b70 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01000fa8 g     F .text	00000090 alt_avalon_timer_sc_init
01000cf8 g     F .text	00000240 altera_avalon_jtag_uart_write
0100115c g     F .text	00000078 alt_up_character_lcd_write
01002928 g     F .text	000001b0 __call_exitprocs
010001b4 g     F .text	0000003c _start
01005894 g     O .bss	00000004 _alt_tick_rate
01005898 g     O .bss	00000004 _alt_nticks
010003d8 g     F .text	0000007c alt_sys_init
010013c0 g     F .text	000000b0 alt_up_character_lcd_shift_display
010027f0 g     F .text	00000134 __register_exitproc
01001470 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100096c g     F .text	00000074 altera_avalon_jtag_uart_close
01002ad8 g     F .text	00000038 __mulsi3
01002bbc g       *ABS*	00000000 __ram_rwdata_start
01002b74 g       *ABS*	00000000 __ram_rodata_start
0100048c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100254c g     F .text	000000d0 alt_get_fd
01002668 g     F .text	00000074 memcmp
0100053c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01005b30 g       *ABS*	00000000 __alt_stack_base
01000584 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0100242c g     F .text	00000120 alt_find_file
01001864 g     F .text	000000b4 alt_dev_llist_insert
01005884 g       *ABS*	00000000 __bss_start
010001f0 g     F .text	0000005c main
0100588c g     O .bss	00000004 alt_envp
010004e4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01001310 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010059a0 g     O .bss	00000190 _atexit0
01004208 g     O .rwdata	00000004 alt_errno
0100111c g     F .text	00000040 alt_up_character_lcd_open_dev
01002b74 g       *ABS*	00000000 __CTOR_END__
010010e8 g     F .text	00000034 alt_up_character_lcd_init
01002b74 g       *ABS*	00000000 __flash_rodata_start
01002b74 g       *ABS*	00000000 __DTOR_LIST__
010003a4 g     F .text	00000034 alt_irq_init
010021f0 g     F .text	00000078 alt_release_fd
01001500 g     F .text	00000034 alt_up_character_lcd_cursor_off
0100261c g     F .text	00000014 atexit
01004218 g     O .rwdata	00000004 _impure_ptr
01005884 g     O .bss	00000004 alt_argc
010019dc g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
010041f4 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01001af0 g     F .text	00000050 alt_ic_isr_register
01004220 g       *ABS*	00000000 _edata
01005b30 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
010009e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01001bdc g     F .text	000000a0 alt_ic_irq_disable
0100240c g     F .text	00000020 altera_nios2_qsys_irq_init
01002630 g     F .text	00000038 exit
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01000000 g       *ABS*	00000000 __alt_mem_sdram
010011d4 g     F .text	00000078 alt_up_character_lcd_string
01002b50 g     F .text	00000020 _exit
01001568 g     F .text	00000154 alt_alarm_start
0100277c g     F .text	00000074 strlen
01002004 g     F .text	0000018c open
01001ad4 g     F .text	0000001c alt_icache_flush_all
01001298 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100420c g     O .rwdata	00000004 alt_priority_mask
01001b40 g     F .text	0000009c alt_ic_irq_enable
01004210 g     O .rwdata	00000008 alt_alarm_list
01001978 g     F .text	00000064 _do_ctors
010041f0 g     O .rwdata	00000004 timeloc
010016bc g     F .text	00000100 close
0100024c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04034 	movhi	r3,256
 1000134:	18d62804 	addi	r3,r3,22688
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04034 	movhi	r3,256
 100014c:	18d62804 	addi	r3,r3,22688
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
 10001c0:	d6b07c14 	ori	gp,gp,49648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001c8:	10962114 	ori	r2,r2,22660

    movhi r3, %hi(__bss_end)
 10001cc:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001d0:	18d6cc14 	ori	r3,r3,23344

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100024c0 	call	100024c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	10003380 	call	1000338 <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <main>:
#define TRUE 1

int timeloc = 0x5957; /* startvalue given in hexadecimal/BCD-code */

int main ()
{
 10001f0:	defffd04 	addi	sp,sp,-12
 10001f4:	df000215 	stw	fp,8(sp)
 10001f8:	df000204 	addi	fp,sp,8
    int i = 0;
 10001fc:	e03fff15 	stw	zero,-4(fp)
    while (TRUE)
    {
    	//delay(100);
    	long j=0;while(j++<100000);
 1000200:	e03ffe15 	stw	zero,-8(fp)
 1000204:	e0fffe17 	ldw	r3,-8(fp)
 1000208:	008000b4 	movhi	r2,2
 100020c:	10a1a7c4 	addi	r2,r2,-31073
 1000210:	10c4403a 	cmpge	r2,r2,r3
 1000214:	1007883a 	mov	r3,r2
 1000218:	e0bffe17 	ldw	r2,-8(fp)
 100021c:	10800044 	addi	r2,r2,1
 1000220:	e0bffe15 	stw	r2,-8(fp)
 1000224:	18803fcc 	andi	r2,r3,255
 1000228:	1004c03a 	cmpne	r2,r2,zero
 100022c:	103ff51e 	bne	r2,zero,1000204 <main+0x14>
    	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,++i);
 1000230:	e0bfff17 	ldw	r2,-4(fp)
 1000234:	10800044 	addi	r2,r2,1
 1000238:	e0bfff15 	stw	r2,-4(fp)
 100023c:	00e44814 	movui	r3,37152
 1000240:	e0bfff17 	ldw	r2,-4(fp)
 1000244:	18800035 	stwio	r2,0(r3)
        // puttime (&timeloc);
    }
 1000248:	003fed06 	br	1000200 <main+0x10>

0100024c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100024c:	defffe04 	addi	sp,sp,-8
 1000250:	dfc00115 	stw	ra,4(sp)
 1000254:	df000015 	stw	fp,0(sp)
 1000258:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100025c:	01004034 	movhi	r4,256
 1000260:	21108804 	addi	r4,r4,16928
 1000264:	01404034 	movhi	r5,256
 1000268:	294aef04 	addi	r5,r5,11196
 100026c:	01804034 	movhi	r6,256
 1000270:	31908804 	addi	r6,r6,16928
 1000274:	10002cc0 	call	10002cc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1000278:	01004034 	movhi	r4,256
 100027c:	21000804 	addi	r4,r4,32
 1000280:	01404034 	movhi	r5,256
 1000284:	29400804 	addi	r5,r5,32
 1000288:	01804034 	movhi	r6,256
 100028c:	31806d04 	addi	r6,r6,436
 1000290:	10002cc0 	call	10002cc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1000294:	01004034 	movhi	r4,256
 1000298:	210add04 	addi	r4,r4,11124
 100029c:	01404034 	movhi	r5,256
 10002a0:	294add04 	addi	r5,r5,11124
 10002a4:	01804034 	movhi	r6,256
 10002a8:	318aef04 	addi	r6,r6,11196
 10002ac:	10002cc0 	call	10002cc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 10002b0:	100181c0 	call	100181c <alt_dcache_flush_all>
  alt_icache_flush_all();
 10002b4:	1001ad40 	call	1001ad4 <alt_icache_flush_all>
}
 10002b8:	e037883a 	mov	sp,fp
 10002bc:	dfc00117 	ldw	ra,4(sp)
 10002c0:	df000017 	ldw	fp,0(sp)
 10002c4:	dec00204 	addi	sp,sp,8
 10002c8:	f800283a 	ret

010002cc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 10002cc:	defffc04 	addi	sp,sp,-16
 10002d0:	df000315 	stw	fp,12(sp)
 10002d4:	df000304 	addi	fp,sp,12
 10002d8:	e13ffd15 	stw	r4,-12(fp)
 10002dc:	e17ffe15 	stw	r5,-8(fp)
 10002e0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10002e4:	e0fffe17 	ldw	r3,-8(fp)
 10002e8:	e0bffd17 	ldw	r2,-12(fp)
 10002ec:	18800e26 	beq	r3,r2,1000328 <alt_load_section+0x5c>
  {
    while( to != end )
 10002f0:	00000a06 	br	100031c <alt_load_section+0x50>
    {
      *to++ = *from++;
 10002f4:	e0bffd17 	ldw	r2,-12(fp)
 10002f8:	10c00017 	ldw	r3,0(r2)
 10002fc:	e0bffe17 	ldw	r2,-8(fp)
 1000300:	10c00015 	stw	r3,0(r2)
 1000304:	e0bffe17 	ldw	r2,-8(fp)
 1000308:	10800104 	addi	r2,r2,4
 100030c:	e0bffe15 	stw	r2,-8(fp)
 1000310:	e0bffd17 	ldw	r2,-12(fp)
 1000314:	10800104 	addi	r2,r2,4
 1000318:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100031c:	e0fffe17 	ldw	r3,-8(fp)
 1000320:	e0bfff17 	ldw	r2,-4(fp)
 1000324:	18bff31e 	bne	r3,r2,10002f4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1000328:	e037883a 	mov	sp,fp
 100032c:	df000017 	ldw	fp,0(sp)
 1000330:	dec00104 	addi	sp,sp,4
 1000334:	f800283a 	ret

01000338 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1000338:	defffd04 	addi	sp,sp,-12
 100033c:	dfc00215 	stw	ra,8(sp)
 1000340:	df000115 	stw	fp,4(sp)
 1000344:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1000348:	0009883a 	mov	r4,zero
 100034c:	10003a40 	call	10003a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1000350:	10003d80 	call	10003d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1000354:	01004034 	movhi	r4,256
 1000358:	210add04 	addi	r4,r4,11124
 100035c:	01404034 	movhi	r5,256
 1000360:	294add04 	addi	r5,r5,11124
 1000364:	01804034 	movhi	r6,256
 1000368:	318add04 	addi	r6,r6,11124
 100036c:	1001e940 	call	1001e94 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1000370:	10019780 	call	1001978 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1000374:	01004034 	movhi	r4,256
 1000378:	21067704 	addi	r4,r4,6620
 100037c:	100261c0 	call	100261c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1000380:	d125a517 	ldw	r4,-26988(gp)
 1000384:	d165a617 	ldw	r5,-26984(gp)
 1000388:	d1a5a717 	ldw	r6,-26980(gp)
 100038c:	10001f00 	call	10001f0 <main>
 1000390:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1000394:	01000044 	movi	r4,1
 1000398:	10016bc0 	call	10016bc <close>
  exit (result);
 100039c:	e13fff17 	ldw	r4,-4(fp)
 10003a0:	10026300 	call	1002630 <exit>

010003a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10003a4:	defffd04 	addi	sp,sp,-12
 10003a8:	dfc00215 	stw	ra,8(sp)
 10003ac:	df000115 	stw	fp,4(sp)
 10003b0:	df000104 	addi	fp,sp,4
 10003b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 10003b8:	100240c0 	call	100240c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10003bc:	00800044 	movi	r2,1
 10003c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10003c4:	e037883a 	mov	sp,fp
 10003c8:	dfc00117 	ldw	ra,4(sp)
 10003cc:	df000017 	ldw	fp,0(sp)
 10003d0:	dec00204 	addi	sp,sp,8
 10003d4:	f800283a 	ret

010003d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10003d8:	defffe04 	addi	sp,sp,-8
 10003dc:	dfc00115 	stw	ra,4(sp)
 10003e0:	df000015 	stw	fp,0(sp)
 10003e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 10003e8:	01244014 	movui	r4,37120
 10003ec:	000b883a 	mov	r5,zero
 10003f0:	018001c4 	movi	r6,7
 10003f4:	01c0fa04 	movi	r7,1000
 10003f8:	1000fa80 	call	1000fa8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10003fc:	01004034 	movhi	r4,256
 1000400:	210af904 	addi	r4,r4,11236
 1000404:	000b883a 	mov	r5,zero
 1000408:	01800144 	movi	r6,5
 100040c:	10005d40 	call	10005d4 <altera_avalon_jtag_uart_init>
 1000410:	01004034 	movhi	r4,256
 1000414:	210aef04 	addi	r4,r4,11196
 1000418:	10004540 	call	1000454 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
 100041c:	00e40014 	movui	r3,36864
 1000420:	00800044 	movi	r2,1
 1000424:	18800035 	stwio	r2,0(r3)
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( DE2_LCD, DE2_LCD);
 1000428:	01004034 	movhi	r4,256
 100042c:	210f0704 	addi	r4,r4,15388
 1000430:	10010e80 	call	10010e8 <alt_up_character_lcd_init>
 1000434:	01004034 	movhi	r4,256
 1000438:	210f0704 	addi	r4,r4,15388
 100043c:	10004540 	call	1000454 <alt_dev_reg>
}
 1000440:	e037883a 	mov	sp,fp
 1000444:	dfc00117 	ldw	ra,4(sp)
 1000448:	df000017 	ldw	fp,0(sp)
 100044c:	dec00204 	addi	sp,sp,8
 1000450:	f800283a 	ret

01000454 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1000454:	defffd04 	addi	sp,sp,-12
 1000458:	dfc00215 	stw	ra,8(sp)
 100045c:	df000115 	stw	fp,4(sp)
 1000460:	df000104 	addi	fp,sp,4
 1000464:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1000468:	e13fff17 	ldw	r4,-4(fp)
 100046c:	01404034 	movhi	r5,256
 1000470:	29507f04 	addi	r5,r5,16892
 1000474:	10018640 	call	1001864 <alt_dev_llist_insert>
}
 1000478:	e037883a 	mov	sp,fp
 100047c:	dfc00117 	ldw	ra,4(sp)
 1000480:	df000017 	ldw	fp,0(sp)
 1000484:	dec00204 	addi	sp,sp,8
 1000488:	f800283a 	ret

0100048c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100048c:	defffa04 	addi	sp,sp,-24
 1000490:	dfc00515 	stw	ra,20(sp)
 1000494:	df000415 	stw	fp,16(sp)
 1000498:	df000404 	addi	fp,sp,16
 100049c:	e13ffd15 	stw	r4,-12(fp)
 10004a0:	e17ffe15 	stw	r5,-8(fp)
 10004a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10004a8:	e0bffd17 	ldw	r2,-12(fp)
 10004ac:	10800017 	ldw	r2,0(r2)
 10004b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10004b4:	e0bffc17 	ldw	r2,-16(fp)
 10004b8:	11000a04 	addi	r4,r2,40
 10004bc:	e0bffd17 	ldw	r2,-12(fp)
 10004c0:	11c00217 	ldw	r7,8(r2)
 10004c4:	e17ffe17 	ldw	r5,-8(fp)
 10004c8:	e1bfff17 	ldw	r6,-4(fp)
 10004cc:	1000ad40 	call	1000ad4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10004d0:	e037883a 	mov	sp,fp
 10004d4:	dfc00117 	ldw	ra,4(sp)
 10004d8:	df000017 	ldw	fp,0(sp)
 10004dc:	dec00204 	addi	sp,sp,8
 10004e0:	f800283a 	ret

010004e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10004e4:	defffa04 	addi	sp,sp,-24
 10004e8:	dfc00515 	stw	ra,20(sp)
 10004ec:	df000415 	stw	fp,16(sp)
 10004f0:	df000404 	addi	fp,sp,16
 10004f4:	e13ffd15 	stw	r4,-12(fp)
 10004f8:	e17ffe15 	stw	r5,-8(fp)
 10004fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1000500:	e0bffd17 	ldw	r2,-12(fp)
 1000504:	10800017 	ldw	r2,0(r2)
 1000508:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100050c:	e0bffc17 	ldw	r2,-16(fp)
 1000510:	11000a04 	addi	r4,r2,40
 1000514:	e0bffd17 	ldw	r2,-12(fp)
 1000518:	11c00217 	ldw	r7,8(r2)
 100051c:	e17ffe17 	ldw	r5,-8(fp)
 1000520:	e1bfff17 	ldw	r6,-4(fp)
 1000524:	1000cf80 	call	1000cf8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1000528:	e037883a 	mov	sp,fp
 100052c:	dfc00117 	ldw	ra,4(sp)
 1000530:	df000017 	ldw	fp,0(sp)
 1000534:	dec00204 	addi	sp,sp,8
 1000538:	f800283a 	ret

0100053c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100053c:	defffc04 	addi	sp,sp,-16
 1000540:	dfc00315 	stw	ra,12(sp)
 1000544:	df000215 	stw	fp,8(sp)
 1000548:	df000204 	addi	fp,sp,8
 100054c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1000550:	e0bfff17 	ldw	r2,-4(fp)
 1000554:	10800017 	ldw	r2,0(r2)
 1000558:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100055c:	e0bffe17 	ldw	r2,-8(fp)
 1000560:	11000a04 	addi	r4,r2,40
 1000564:	e0bfff17 	ldw	r2,-4(fp)
 1000568:	11400217 	ldw	r5,8(r2)
 100056c:	100096c0 	call	100096c <altera_avalon_jtag_uart_close>
}
 1000570:	e037883a 	mov	sp,fp
 1000574:	dfc00117 	ldw	ra,4(sp)
 1000578:	df000017 	ldw	fp,0(sp)
 100057c:	dec00204 	addi	sp,sp,8
 1000580:	f800283a 	ret

01000584 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1000584:	defffa04 	addi	sp,sp,-24
 1000588:	dfc00515 	stw	ra,20(sp)
 100058c:	df000415 	stw	fp,16(sp)
 1000590:	df000404 	addi	fp,sp,16
 1000594:	e13ffd15 	stw	r4,-12(fp)
 1000598:	e17ffe15 	stw	r5,-8(fp)
 100059c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10005a0:	e0bffd17 	ldw	r2,-12(fp)
 10005a4:	10800017 	ldw	r2,0(r2)
 10005a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10005ac:	e0bffc17 	ldw	r2,-16(fp)
 10005b0:	11000a04 	addi	r4,r2,40
 10005b4:	e17ffe17 	ldw	r5,-8(fp)
 10005b8:	e1bfff17 	ldw	r6,-4(fp)
 10005bc:	10009e00 	call	10009e0 <altera_avalon_jtag_uart_ioctl>
}
 10005c0:	e037883a 	mov	sp,fp
 10005c4:	dfc00117 	ldw	ra,4(sp)
 10005c8:	df000017 	ldw	fp,0(sp)
 10005cc:	dec00204 	addi	sp,sp,8
 10005d0:	f800283a 	ret

010005d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10005d4:	defffa04 	addi	sp,sp,-24
 10005d8:	dfc00515 	stw	ra,20(sp)
 10005dc:	df000415 	stw	fp,16(sp)
 10005e0:	df000404 	addi	fp,sp,16
 10005e4:	e13ffd15 	stw	r4,-12(fp)
 10005e8:	e17ffe15 	stw	r5,-8(fp)
 10005ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10005f0:	e0fffd17 	ldw	r3,-12(fp)
 10005f4:	00800044 	movi	r2,1
 10005f8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10005fc:	e0bffd17 	ldw	r2,-12(fp)
 1000600:	10800017 	ldw	r2,0(r2)
 1000604:	11000104 	addi	r4,r2,4
 1000608:	e0bffd17 	ldw	r2,-12(fp)
 100060c:	10800817 	ldw	r2,32(r2)
 1000610:	1007883a 	mov	r3,r2
 1000614:	2005883a 	mov	r2,r4
 1000618:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100061c:	e13ffe17 	ldw	r4,-8(fp)
 1000620:	e17fff17 	ldw	r5,-4(fp)
 1000624:	d8000015 	stw	zero,0(sp)
 1000628:	01804034 	movhi	r6,256
 100062c:	3181a504 	addi	r6,r6,1684
 1000630:	e1fffd17 	ldw	r7,-12(fp)
 1000634:	1001af00 	call	1001af0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1000638:	e0bffd17 	ldw	r2,-12(fp)
 100063c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1000640:	e0bffd17 	ldw	r2,-12(fp)
 1000644:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1000648:	00804034 	movhi	r2,256
 100064c:	10962504 	addi	r2,r2,22676
 1000650:	10800017 	ldw	r2,0(r2)
 1000654:	100b883a 	mov	r5,r2
 1000658:	01804034 	movhi	r6,256
 100065c:	31822f04 	addi	r6,r6,2236
 1000660:	e1fffd17 	ldw	r7,-12(fp)
 1000664:	10015680 	call	1001568 <alt_alarm_start>
 1000668:	1004403a 	cmpge	r2,r2,zero
 100066c:	1000041e 	bne	r2,zero,1000680 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1000670:	e0fffd17 	ldw	r3,-12(fp)
 1000674:	00a00034 	movhi	r2,32768
 1000678:	10bfffc4 	addi	r2,r2,-1
 100067c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1000680:	e037883a 	mov	sp,fp
 1000684:	dfc00117 	ldw	ra,4(sp)
 1000688:	df000017 	ldw	fp,0(sp)
 100068c:	dec00204 	addi	sp,sp,8
 1000690:	f800283a 	ret

01000694 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1000694:	defff804 	addi	sp,sp,-32
 1000698:	df000715 	stw	fp,28(sp)
 100069c:	df000704 	addi	fp,sp,28
 10006a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10006a4:	e0bfff17 	ldw	r2,-4(fp)
 10006a8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 10006ac:	e0bffe17 	ldw	r2,-8(fp)
 10006b0:	10800017 	ldw	r2,0(r2)
 10006b4:	e0bffd15 	stw	r2,-12(fp)
 10006b8:	00000006 	br	10006bc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10006bc:	e0bffd17 	ldw	r2,-12(fp)
 10006c0:	10800104 	addi	r2,r2,4
 10006c4:	10800037 	ldwio	r2,0(r2)
 10006c8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10006cc:	e0bffc17 	ldw	r2,-16(fp)
 10006d0:	1080c00c 	andi	r2,r2,768
 10006d4:	1005003a 	cmpeq	r2,r2,zero
 10006d8:	1000741e 	bne	r2,zero,10008ac <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10006dc:	e0bffc17 	ldw	r2,-16(fp)
 10006e0:	1080400c 	andi	r2,r2,256
 10006e4:	1005003a 	cmpeq	r2,r2,zero
 10006e8:	1000351e 	bne	r2,zero,10007c0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10006ec:	00800074 	movhi	r2,1
 10006f0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10006f4:	e0bffe17 	ldw	r2,-8(fp)
 10006f8:	10800a17 	ldw	r2,40(r2)
 10006fc:	10800044 	addi	r2,r2,1
 1000700:	1081ffcc 	andi	r2,r2,2047
 1000704:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 1000708:	e0bffe17 	ldw	r2,-8(fp)
 100070c:	10c00b17 	ldw	r3,44(r2)
 1000710:	e0bffa17 	ldw	r2,-24(fp)
 1000714:	18801626 	beq	r3,r2,1000770 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1000718:	e0bffd17 	ldw	r2,-12(fp)
 100071c:	10800037 	ldwio	r2,0(r2)
 1000720:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1000724:	e0bffb17 	ldw	r2,-20(fp)
 1000728:	10a0000c 	andi	r2,r2,32768
 100072c:	1005003a 	cmpeq	r2,r2,zero
 1000730:	10000f1e 	bne	r2,zero,1000770 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1000734:	e0bffe17 	ldw	r2,-8(fp)
 1000738:	10c00a17 	ldw	r3,40(r2)
 100073c:	e0bffb17 	ldw	r2,-20(fp)
 1000740:	1009883a 	mov	r4,r2
 1000744:	e0bffe17 	ldw	r2,-8(fp)
 1000748:	1885883a 	add	r2,r3,r2
 100074c:	10800e04 	addi	r2,r2,56
 1000750:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000754:	e0bffe17 	ldw	r2,-8(fp)
 1000758:	10800a17 	ldw	r2,40(r2)
 100075c:	10800044 	addi	r2,r2,1
 1000760:	10c1ffcc 	andi	r3,r2,2047
 1000764:	e0bffe17 	ldw	r2,-8(fp)
 1000768:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100076c:	003fe106 	br	10006f4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1000770:	e0bffb17 	ldw	r2,-20(fp)
 1000774:	10bfffec 	andhi	r2,r2,65535
 1000778:	1005003a 	cmpeq	r2,r2,zero
 100077c:	1000101e 	bne	r2,zero,10007c0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1000780:	e0bffe17 	ldw	r2,-8(fp)
 1000784:	10c00817 	ldw	r3,32(r2)
 1000788:	00bfff84 	movi	r2,-2
 100078c:	1886703a 	and	r3,r3,r2
 1000790:	e0bffe17 	ldw	r2,-8(fp)
 1000794:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1000798:	e0bffd17 	ldw	r2,-12(fp)
 100079c:	11000104 	addi	r4,r2,4
 10007a0:	e0bffe17 	ldw	r2,-8(fp)
 10007a4:	10800817 	ldw	r2,32(r2)
 10007a8:	1007883a 	mov	r3,r2
 10007ac:	2005883a 	mov	r2,r4
 10007b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10007b4:	e0bffd17 	ldw	r2,-12(fp)
 10007b8:	10800104 	addi	r2,r2,4
 10007bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10007c0:	e0bffc17 	ldw	r2,-16(fp)
 10007c4:	1080800c 	andi	r2,r2,512
 10007c8:	1005003a 	cmpeq	r2,r2,zero
 10007cc:	103fbb1e 	bne	r2,zero,10006bc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10007d0:	e0bffc17 	ldw	r2,-16(fp)
 10007d4:	10bfffec 	andhi	r2,r2,65535
 10007d8:	1004d43a 	srli	r2,r2,16
 10007dc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10007e0:	00001506 	br	1000838 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10007e4:	e13ffd17 	ldw	r4,-12(fp)
 10007e8:	e0bffe17 	ldw	r2,-8(fp)
 10007ec:	10c00d17 	ldw	r3,52(r2)
 10007f0:	e0bffe17 	ldw	r2,-8(fp)
 10007f4:	1885883a 	add	r2,r3,r2
 10007f8:	10820e04 	addi	r2,r2,2104
 10007fc:	10800003 	ldbu	r2,0(r2)
 1000800:	10c03fcc 	andi	r3,r2,255
 1000804:	18c0201c 	xori	r3,r3,128
 1000808:	18ffe004 	addi	r3,r3,-128
 100080c:	2005883a 	mov	r2,r4
 1000810:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000814:	e0bffe17 	ldw	r2,-8(fp)
 1000818:	10800d17 	ldw	r2,52(r2)
 100081c:	10800044 	addi	r2,r2,1
 1000820:	10c1ffcc 	andi	r3,r2,2047
 1000824:	e0bffe17 	ldw	r2,-8(fp)
 1000828:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100082c:	e0bff917 	ldw	r2,-28(fp)
 1000830:	10bfffc4 	addi	r2,r2,-1
 1000834:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1000838:	e0bff917 	ldw	r2,-28(fp)
 100083c:	1005003a 	cmpeq	r2,r2,zero
 1000840:	1000051e 	bne	r2,zero,1000858 <altera_avalon_jtag_uart_irq+0x1c4>
 1000844:	e0bffe17 	ldw	r2,-8(fp)
 1000848:	10c00d17 	ldw	r3,52(r2)
 100084c:	e0bffe17 	ldw	r2,-8(fp)
 1000850:	10800c17 	ldw	r2,48(r2)
 1000854:	18bfe31e 	bne	r3,r2,10007e4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1000858:	e0bff917 	ldw	r2,-28(fp)
 100085c:	1005003a 	cmpeq	r2,r2,zero
 1000860:	103f961e 	bne	r2,zero,10006bc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1000864:	e0bffe17 	ldw	r2,-8(fp)
 1000868:	10c00817 	ldw	r3,32(r2)
 100086c:	00bfff44 	movi	r2,-3
 1000870:	1886703a 	and	r3,r3,r2
 1000874:	e0bffe17 	ldw	r2,-8(fp)
 1000878:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100087c:	e0bffe17 	ldw	r2,-8(fp)
 1000880:	10800017 	ldw	r2,0(r2)
 1000884:	11000104 	addi	r4,r2,4
 1000888:	e0bffe17 	ldw	r2,-8(fp)
 100088c:	10800817 	ldw	r2,32(r2)
 1000890:	1007883a 	mov	r3,r2
 1000894:	2005883a 	mov	r2,r4
 1000898:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100089c:	e0bffd17 	ldw	r2,-12(fp)
 10008a0:	10800104 	addi	r2,r2,4
 10008a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10008a8:	003f8406 	br	10006bc <altera_avalon_jtag_uart_irq+0x28>
}
 10008ac:	e037883a 	mov	sp,fp
 10008b0:	df000017 	ldw	fp,0(sp)
 10008b4:	dec00104 	addi	sp,sp,4
 10008b8:	f800283a 	ret

010008bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10008bc:	defffc04 	addi	sp,sp,-16
 10008c0:	df000315 	stw	fp,12(sp)
 10008c4:	df000304 	addi	fp,sp,12
 10008c8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10008cc:	e0bfff17 	ldw	r2,-4(fp)
 10008d0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10008d4:	e0bffe17 	ldw	r2,-8(fp)
 10008d8:	10800017 	ldw	r2,0(r2)
 10008dc:	10800104 	addi	r2,r2,4
 10008e0:	10800037 	ldwio	r2,0(r2)
 10008e4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10008e8:	e0bffd17 	ldw	r2,-12(fp)
 10008ec:	1081000c 	andi	r2,r2,1024
 10008f0:	1005003a 	cmpeq	r2,r2,zero
 10008f4:	10000c1e 	bne	r2,zero,1000928 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10008f8:	e0bffe17 	ldw	r2,-8(fp)
 10008fc:	10800017 	ldw	r2,0(r2)
 1000900:	11000104 	addi	r4,r2,4
 1000904:	e0bffe17 	ldw	r2,-8(fp)
 1000908:	10800817 	ldw	r2,32(r2)
 100090c:	10810014 	ori	r2,r2,1024
 1000910:	1007883a 	mov	r3,r2
 1000914:	2005883a 	mov	r2,r4
 1000918:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100091c:	e0bffe17 	ldw	r2,-8(fp)
 1000920:	10000915 	stw	zero,36(r2)
 1000924:	00000a06 	br	1000950 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1000928:	e0bffe17 	ldw	r2,-8(fp)
 100092c:	10c00917 	ldw	r3,36(r2)
 1000930:	00a00034 	movhi	r2,32768
 1000934:	10bfff04 	addi	r2,r2,-4
 1000938:	10c00536 	bltu	r2,r3,1000950 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100093c:	e0bffe17 	ldw	r2,-8(fp)
 1000940:	10800917 	ldw	r2,36(r2)
 1000944:	10c00044 	addi	r3,r2,1
 1000948:	e0bffe17 	ldw	r2,-8(fp)
 100094c:	10c00915 	stw	r3,36(r2)
 1000950:	00804034 	movhi	r2,256
 1000954:	10962504 	addi	r2,r2,22676
 1000958:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100095c:	e037883a 	mov	sp,fp
 1000960:	df000017 	ldw	fp,0(sp)
 1000964:	dec00104 	addi	sp,sp,4
 1000968:	f800283a 	ret

0100096c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100096c:	defffc04 	addi	sp,sp,-16
 1000970:	df000315 	stw	fp,12(sp)
 1000974:	df000304 	addi	fp,sp,12
 1000978:	e13ffd15 	stw	r4,-12(fp)
 100097c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1000980:	00000706 	br	10009a0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1000984:	e0bffe17 	ldw	r2,-8(fp)
 1000988:	1090000c 	andi	r2,r2,16384
 100098c:	1005003a 	cmpeq	r2,r2,zero
 1000990:	1000031e 	bne	r2,zero,10009a0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1000994:	00bffd44 	movi	r2,-11
 1000998:	e0bfff15 	stw	r2,-4(fp)
 100099c:	00000b06 	br	10009cc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10009a0:	e0bffd17 	ldw	r2,-12(fp)
 10009a4:	10c00d17 	ldw	r3,52(r2)
 10009a8:	e0bffd17 	ldw	r2,-12(fp)
 10009ac:	10800c17 	ldw	r2,48(r2)
 10009b0:	18800526 	beq	r3,r2,10009c8 <altera_avalon_jtag_uart_close+0x5c>
 10009b4:	e0bffd17 	ldw	r2,-12(fp)
 10009b8:	10c00917 	ldw	r3,36(r2)
 10009bc:	e0bffd17 	ldw	r2,-12(fp)
 10009c0:	10800117 	ldw	r2,4(r2)
 10009c4:	18bfef36 	bltu	r3,r2,1000984 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 10009c8:	e03fff15 	stw	zero,-4(fp)
 10009cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10009d0:	e037883a 	mov	sp,fp
 10009d4:	df000017 	ldw	fp,0(sp)
 10009d8:	dec00104 	addi	sp,sp,4
 10009dc:	f800283a 	ret

010009e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10009e0:	defff804 	addi	sp,sp,-32
 10009e4:	df000715 	stw	fp,28(sp)
 10009e8:	df000704 	addi	fp,sp,28
 10009ec:	e13ffb15 	stw	r4,-20(fp)
 10009f0:	e17ffc15 	stw	r5,-16(fp)
 10009f4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 10009f8:	00bff9c4 	movi	r2,-25
 10009fc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1000a00:	e0bffc17 	ldw	r2,-16(fp)
 1000a04:	e0bfff15 	stw	r2,-4(fp)
 1000a08:	e0ffff17 	ldw	r3,-4(fp)
 1000a0c:	189a8060 	cmpeqi	r2,r3,27137
 1000a10:	1000041e 	bne	r2,zero,1000a24 <altera_avalon_jtag_uart_ioctl+0x44>
 1000a14:	e0ffff17 	ldw	r3,-4(fp)
 1000a18:	189a80a0 	cmpeqi	r2,r3,27138
 1000a1c:	10001b1e 	bne	r2,zero,1000a8c <altera_avalon_jtag_uart_ioctl+0xac>
 1000a20:	00002706 	br	1000ac0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1000a24:	e0bffb17 	ldw	r2,-20(fp)
 1000a28:	10c00117 	ldw	r3,4(r2)
 1000a2c:	00a00034 	movhi	r2,32768
 1000a30:	10bfffc4 	addi	r2,r2,-1
 1000a34:	18802226 	beq	r3,r2,1000ac0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1000a38:	e0bffd17 	ldw	r2,-12(fp)
 1000a3c:	10800017 	ldw	r2,0(r2)
 1000a40:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1000a44:	e0bff917 	ldw	r2,-28(fp)
 1000a48:	10800090 	cmplti	r2,r2,2
 1000a4c:	1000071e 	bne	r2,zero,1000a6c <altera_avalon_jtag_uart_ioctl+0x8c>
 1000a50:	e0fff917 	ldw	r3,-28(fp)
 1000a54:	00a00034 	movhi	r2,32768
 1000a58:	10bfffc4 	addi	r2,r2,-1
 1000a5c:	18800326 	beq	r3,r2,1000a6c <altera_avalon_jtag_uart_ioctl+0x8c>
 1000a60:	e0bff917 	ldw	r2,-28(fp)
 1000a64:	e0bffe15 	stw	r2,-8(fp)
 1000a68:	00000306 	br	1000a78 <altera_avalon_jtag_uart_ioctl+0x98>
 1000a6c:	00e00034 	movhi	r3,32768
 1000a70:	18ffff84 	addi	r3,r3,-2
 1000a74:	e0fffe15 	stw	r3,-8(fp)
 1000a78:	e0bffb17 	ldw	r2,-20(fp)
 1000a7c:	e0fffe17 	ldw	r3,-8(fp)
 1000a80:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1000a84:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1000a88:	00000d06 	br	1000ac0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1000a8c:	e0bffb17 	ldw	r2,-20(fp)
 1000a90:	10c00117 	ldw	r3,4(r2)
 1000a94:	00a00034 	movhi	r2,32768
 1000a98:	10bfffc4 	addi	r2,r2,-1
 1000a9c:	18800826 	beq	r3,r2,1000ac0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1000aa0:	e13ffd17 	ldw	r4,-12(fp)
 1000aa4:	e0bffb17 	ldw	r2,-20(fp)
 1000aa8:	10c00917 	ldw	r3,36(r2)
 1000aac:	e0bffb17 	ldw	r2,-20(fp)
 1000ab0:	10800117 	ldw	r2,4(r2)
 1000ab4:	1885803a 	cmpltu	r2,r3,r2
 1000ab8:	20800015 	stw	r2,0(r4)
      rc = 0;
 1000abc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1000ac0:	e0bffa17 	ldw	r2,-24(fp)
}
 1000ac4:	e037883a 	mov	sp,fp
 1000ac8:	df000017 	ldw	fp,0(sp)
 1000acc:	dec00104 	addi	sp,sp,4
 1000ad0:	f800283a 	ret

01000ad4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1000ad4:	defff204 	addi	sp,sp,-56
 1000ad8:	dfc00d15 	stw	ra,52(sp)
 1000adc:	df000c15 	stw	fp,48(sp)
 1000ae0:	df000c04 	addi	fp,sp,48
 1000ae4:	e13ffb15 	stw	r4,-20(fp)
 1000ae8:	e17ffc15 	stw	r5,-16(fp)
 1000aec:	e1bffd15 	stw	r6,-12(fp)
 1000af0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1000af4:	e0bffc17 	ldw	r2,-16(fp)
 1000af8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1000afc:	00004806 	br	1000c20 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1000b00:	e0bffb17 	ldw	r2,-20(fp)
 1000b04:	10800a17 	ldw	r2,40(r2)
 1000b08:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1000b0c:	e0bffb17 	ldw	r2,-20(fp)
 1000b10:	10800b17 	ldw	r2,44(r2)
 1000b14:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1000b18:	e0fff717 	ldw	r3,-36(fp)
 1000b1c:	e0bff617 	ldw	r2,-40(fp)
 1000b20:	18800536 	bltu	r3,r2,1000b38 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1000b24:	e0bff717 	ldw	r2,-36(fp)
 1000b28:	e0fff617 	ldw	r3,-40(fp)
 1000b2c:	10c5c83a 	sub	r2,r2,r3
 1000b30:	e0bff815 	stw	r2,-32(fp)
 1000b34:	00000406 	br	1000b48 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1000b38:	00820004 	movi	r2,2048
 1000b3c:	e0fff617 	ldw	r3,-40(fp)
 1000b40:	10c5c83a 	sub	r2,r2,r3
 1000b44:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1000b48:	e0bff817 	ldw	r2,-32(fp)
 1000b4c:	1005003a 	cmpeq	r2,r2,zero
 1000b50:	10001f1e 	bne	r2,zero,1000bd0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1000b54:	e0fffd17 	ldw	r3,-12(fp)
 1000b58:	e0bff817 	ldw	r2,-32(fp)
 1000b5c:	1880022e 	bgeu	r3,r2,1000b68 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1000b60:	e0bffd17 	ldw	r2,-12(fp)
 1000b64:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1000b68:	e0bffb17 	ldw	r2,-20(fp)
 1000b6c:	10c00e04 	addi	r3,r2,56
 1000b70:	e0bff617 	ldw	r2,-40(fp)
 1000b74:	1887883a 	add	r3,r3,r2
 1000b78:	e0bffa17 	ldw	r2,-24(fp)
 1000b7c:	1009883a 	mov	r4,r2
 1000b80:	180b883a 	mov	r5,r3
 1000b84:	e1bff817 	ldw	r6,-32(fp)
 1000b88:	10026dc0 	call	10026dc <memcpy>
      ptr   += n;
 1000b8c:	e0fff817 	ldw	r3,-32(fp)
 1000b90:	e0bffa17 	ldw	r2,-24(fp)
 1000b94:	10c5883a 	add	r2,r2,r3
 1000b98:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1000b9c:	e0fffd17 	ldw	r3,-12(fp)
 1000ba0:	e0bff817 	ldw	r2,-32(fp)
 1000ba4:	1885c83a 	sub	r2,r3,r2
 1000ba8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000bac:	e0fff617 	ldw	r3,-40(fp)
 1000bb0:	e0bff817 	ldw	r2,-32(fp)
 1000bb4:	1885883a 	add	r2,r3,r2
 1000bb8:	10c1ffcc 	andi	r3,r2,2047
 1000bbc:	e0bffb17 	ldw	r2,-20(fp)
 1000bc0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1000bc4:	e0bffd17 	ldw	r2,-12(fp)
 1000bc8:	10800048 	cmpgei	r2,r2,1
 1000bcc:	103fcc1e 	bne	r2,zero,1000b00 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1000bd0:	e0fffa17 	ldw	r3,-24(fp)
 1000bd4:	e0bffc17 	ldw	r2,-16(fp)
 1000bd8:	1880141e 	bne	r3,r2,1000c2c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1000bdc:	e0bffe17 	ldw	r2,-8(fp)
 1000be0:	1090000c 	andi	r2,r2,16384
 1000be4:	1004c03a 	cmpne	r2,r2,zero
 1000be8:	1000101e 	bne	r2,zero,1000c2c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1000bec:	e0bffb17 	ldw	r2,-20(fp)
 1000bf0:	10c00a17 	ldw	r3,40(r2)
 1000bf4:	e0bff717 	ldw	r2,-36(fp)
 1000bf8:	1880051e 	bne	r3,r2,1000c10 <altera_avalon_jtag_uart_read+0x13c>
 1000bfc:	e0bffb17 	ldw	r2,-20(fp)
 1000c00:	10c00917 	ldw	r3,36(r2)
 1000c04:	e0bffb17 	ldw	r2,-20(fp)
 1000c08:	10800117 	ldw	r2,4(r2)
 1000c0c:	18bff736 	bltu	r3,r2,1000bec <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1000c10:	e0bffb17 	ldw	r2,-20(fp)
 1000c14:	10c00a17 	ldw	r3,40(r2)
 1000c18:	e0bff717 	ldw	r2,-36(fp)
 1000c1c:	18800326 	beq	r3,r2,1000c2c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1000c20:	e0bffd17 	ldw	r2,-12(fp)
 1000c24:	10800048 	cmpgei	r2,r2,1
 1000c28:	103fb51e 	bne	r2,zero,1000b00 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1000c2c:	e0fffa17 	ldw	r3,-24(fp)
 1000c30:	e0bffc17 	ldw	r2,-16(fp)
 1000c34:	18801926 	beq	r3,r2,1000c9c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000c38:	0005303a 	rdctl	r2,status
 1000c3c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000c40:	e0fff517 	ldw	r3,-44(fp)
 1000c44:	00bfff84 	movi	r2,-2
 1000c48:	1884703a 	and	r2,r3,r2
 1000c4c:	1001703a 	wrctl	status,r2
  
  return context;
 1000c50:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1000c54:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1000c58:	e0bffb17 	ldw	r2,-20(fp)
 1000c5c:	10800817 	ldw	r2,32(r2)
 1000c60:	10c00054 	ori	r3,r2,1
 1000c64:	e0bffb17 	ldw	r2,-20(fp)
 1000c68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1000c6c:	e0bffb17 	ldw	r2,-20(fp)
 1000c70:	10800017 	ldw	r2,0(r2)
 1000c74:	11000104 	addi	r4,r2,4
 1000c78:	e0bffb17 	ldw	r2,-20(fp)
 1000c7c:	10800817 	ldw	r2,32(r2)
 1000c80:	1007883a 	mov	r3,r2
 1000c84:	2005883a 	mov	r2,r4
 1000c88:	10c00035 	stwio	r3,0(r2)
 1000c8c:	e0bff917 	ldw	r2,-28(fp)
 1000c90:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000c94:	e0bff417 	ldw	r2,-48(fp)
 1000c98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1000c9c:	e0fffa17 	ldw	r3,-24(fp)
 1000ca0:	e0bffc17 	ldw	r2,-16(fp)
 1000ca4:	18800526 	beq	r3,r2,1000cbc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1000ca8:	e0fffa17 	ldw	r3,-24(fp)
 1000cac:	e0bffc17 	ldw	r2,-16(fp)
 1000cb0:	1887c83a 	sub	r3,r3,r2
 1000cb4:	e0ffff15 	stw	r3,-4(fp)
 1000cb8:	00000906 	br	1000ce0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1000cbc:	e0bffe17 	ldw	r2,-8(fp)
 1000cc0:	1090000c 	andi	r2,r2,16384
 1000cc4:	1005003a 	cmpeq	r2,r2,zero
 1000cc8:	1000031e 	bne	r2,zero,1000cd8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1000ccc:	00bffd44 	movi	r2,-11
 1000cd0:	e0bfff15 	stw	r2,-4(fp)
 1000cd4:	00000206 	br	1000ce0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1000cd8:	00bffec4 	movi	r2,-5
 1000cdc:	e0bfff15 	stw	r2,-4(fp)
 1000ce0:	e0bfff17 	ldw	r2,-4(fp)
}
 1000ce4:	e037883a 	mov	sp,fp
 1000ce8:	dfc00117 	ldw	ra,4(sp)
 1000cec:	df000017 	ldw	fp,0(sp)
 1000cf0:	dec00204 	addi	sp,sp,8
 1000cf4:	f800283a 	ret

01000cf8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1000cf8:	defff204 	addi	sp,sp,-56
 1000cfc:	dfc00d15 	stw	ra,52(sp)
 1000d00:	df000c15 	stw	fp,48(sp)
 1000d04:	df000c04 	addi	fp,sp,48
 1000d08:	e13ffb15 	stw	r4,-20(fp)
 1000d0c:	e17ffc15 	stw	r5,-16(fp)
 1000d10:	e1bffd15 	stw	r6,-12(fp)
 1000d14:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1000d18:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1000d1c:	e0bffc17 	ldw	r2,-16(fp)
 1000d20:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1000d24:	00003a06 	br	1000e10 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1000d28:	e0bffb17 	ldw	r2,-20(fp)
 1000d2c:	10800c17 	ldw	r2,48(r2)
 1000d30:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1000d34:	e0bffb17 	ldw	r2,-20(fp)
 1000d38:	10800d17 	ldw	r2,52(r2)
 1000d3c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1000d40:	e0fffa17 	ldw	r3,-24(fp)
 1000d44:	e0bff917 	ldw	r2,-28(fp)
 1000d48:	1880062e 	bgeu	r3,r2,1000d64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1000d4c:	e0fff917 	ldw	r3,-28(fp)
 1000d50:	e0bffa17 	ldw	r2,-24(fp)
 1000d54:	1885c83a 	sub	r2,r3,r2
 1000d58:	10bfffc4 	addi	r2,r2,-1
 1000d5c:	e0bff815 	stw	r2,-32(fp)
 1000d60:	00000c06 	br	1000d94 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 1000d64:	e0bff917 	ldw	r2,-28(fp)
 1000d68:	1005003a 	cmpeq	r2,r2,zero
 1000d6c:	1000051e 	bne	r2,zero,1000d84 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1000d70:	00820004 	movi	r2,2048
 1000d74:	e0fffa17 	ldw	r3,-24(fp)
 1000d78:	10c5c83a 	sub	r2,r2,r3
 1000d7c:	e0bff815 	stw	r2,-32(fp)
 1000d80:	00000406 	br	1000d94 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1000d84:	0081ffc4 	movi	r2,2047
 1000d88:	e0fffa17 	ldw	r3,-24(fp)
 1000d8c:	10c5c83a 	sub	r2,r2,r3
 1000d90:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1000d94:	e0bff817 	ldw	r2,-32(fp)
 1000d98:	1005003a 	cmpeq	r2,r2,zero
 1000d9c:	10001f1e 	bne	r2,zero,1000e1c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1000da0:	e0fffd17 	ldw	r3,-12(fp)
 1000da4:	e0bff817 	ldw	r2,-32(fp)
 1000da8:	1880022e 	bgeu	r3,r2,1000db4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 1000dac:	e0bffd17 	ldw	r2,-12(fp)
 1000db0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1000db4:	e0bffb17 	ldw	r2,-20(fp)
 1000db8:	10c20e04 	addi	r3,r2,2104
 1000dbc:	e0bffa17 	ldw	r2,-24(fp)
 1000dc0:	1885883a 	add	r2,r3,r2
 1000dc4:	e0fffc17 	ldw	r3,-16(fp)
 1000dc8:	1009883a 	mov	r4,r2
 1000dcc:	180b883a 	mov	r5,r3
 1000dd0:	e1bff817 	ldw	r6,-32(fp)
 1000dd4:	10026dc0 	call	10026dc <memcpy>
      ptr   += n;
 1000dd8:	e0fff817 	ldw	r3,-32(fp)
 1000ddc:	e0bffc17 	ldw	r2,-16(fp)
 1000de0:	10c5883a 	add	r2,r2,r3
 1000de4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1000de8:	e0fffd17 	ldw	r3,-12(fp)
 1000dec:	e0bff817 	ldw	r2,-32(fp)
 1000df0:	1885c83a 	sub	r2,r3,r2
 1000df4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1000df8:	e0fffa17 	ldw	r3,-24(fp)
 1000dfc:	e0bff817 	ldw	r2,-32(fp)
 1000e00:	1885883a 	add	r2,r3,r2
 1000e04:	10c1ffcc 	andi	r3,r2,2047
 1000e08:	e0bffb17 	ldw	r2,-20(fp)
 1000e0c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1000e10:	e0bffd17 	ldw	r2,-12(fp)
 1000e14:	10800048 	cmpgei	r2,r2,1
 1000e18:	103fc31e 	bne	r2,zero,1000d28 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000e1c:	0005303a 	rdctl	r2,status
 1000e20:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000e24:	e0fff517 	ldw	r3,-44(fp)
 1000e28:	00bfff84 	movi	r2,-2
 1000e2c:	1884703a 	and	r2,r3,r2
 1000e30:	1001703a 	wrctl	status,r2
  
  return context;
 1000e34:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1000e38:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1000e3c:	e0bffb17 	ldw	r2,-20(fp)
 1000e40:	10800817 	ldw	r2,32(r2)
 1000e44:	10c00094 	ori	r3,r2,2
 1000e48:	e0bffb17 	ldw	r2,-20(fp)
 1000e4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1000e50:	e0bffb17 	ldw	r2,-20(fp)
 1000e54:	10800017 	ldw	r2,0(r2)
 1000e58:	11000104 	addi	r4,r2,4
 1000e5c:	e0bffb17 	ldw	r2,-20(fp)
 1000e60:	10800817 	ldw	r2,32(r2)
 1000e64:	1007883a 	mov	r3,r2
 1000e68:	2005883a 	mov	r2,r4
 1000e6c:	10c00035 	stwio	r3,0(r2)
 1000e70:	e0bff717 	ldw	r2,-36(fp)
 1000e74:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000e78:	e0bff417 	ldw	r2,-48(fp)
 1000e7c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1000e80:	e0bffd17 	ldw	r2,-12(fp)
 1000e84:	10800050 	cmplti	r2,r2,1
 1000e88:	1000111e 	bne	r2,zero,1000ed0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 1000e8c:	e0bffe17 	ldw	r2,-8(fp)
 1000e90:	1090000c 	andi	r2,r2,16384
 1000e94:	1004c03a 	cmpne	r2,r2,zero
 1000e98:	1000101e 	bne	r2,zero,1000edc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1000e9c:	e0bffb17 	ldw	r2,-20(fp)
 1000ea0:	10c00d17 	ldw	r3,52(r2)
 1000ea4:	e0bff917 	ldw	r2,-28(fp)
 1000ea8:	1880051e 	bne	r3,r2,1000ec0 <altera_avalon_jtag_uart_write+0x1c8>
 1000eac:	e0bffb17 	ldw	r2,-20(fp)
 1000eb0:	10c00917 	ldw	r3,36(r2)
 1000eb4:	e0bffb17 	ldw	r2,-20(fp)
 1000eb8:	10800117 	ldw	r2,4(r2)
 1000ebc:	18bff736 	bltu	r3,r2,1000e9c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1000ec0:	e0bffb17 	ldw	r2,-20(fp)
 1000ec4:	10c00d17 	ldw	r3,52(r2)
 1000ec8:	e0bff917 	ldw	r2,-28(fp)
 1000ecc:	18800326 	beq	r3,r2,1000edc <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1000ed0:	e0bffd17 	ldw	r2,-12(fp)
 1000ed4:	10800048 	cmpgei	r2,r2,1
 1000ed8:	103fcd1e 	bne	r2,zero,1000e10 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1000edc:	e0fffc17 	ldw	r3,-16(fp)
 1000ee0:	e0bff617 	ldw	r2,-40(fp)
 1000ee4:	18800526 	beq	r3,r2,1000efc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1000ee8:	e0fffc17 	ldw	r3,-16(fp)
 1000eec:	e0bff617 	ldw	r2,-40(fp)
 1000ef0:	1887c83a 	sub	r3,r3,r2
 1000ef4:	e0ffff15 	stw	r3,-4(fp)
 1000ef8:	00000906 	br	1000f20 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 1000efc:	e0bffe17 	ldw	r2,-8(fp)
 1000f00:	1090000c 	andi	r2,r2,16384
 1000f04:	1005003a 	cmpeq	r2,r2,zero
 1000f08:	1000031e 	bne	r2,zero,1000f18 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 1000f0c:	00bffd44 	movi	r2,-11
 1000f10:	e0bfff15 	stw	r2,-4(fp)
 1000f14:	00000206 	br	1000f20 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1000f18:	00bffec4 	movi	r2,-5
 1000f1c:	e0bfff15 	stw	r2,-4(fp)
 1000f20:	e0bfff17 	ldw	r2,-4(fp)
}
 1000f24:	e037883a 	mov	sp,fp
 1000f28:	dfc00117 	ldw	ra,4(sp)
 1000f2c:	df000017 	ldw	fp,0(sp)
 1000f30:	dec00204 	addi	sp,sp,8
 1000f34:	f800283a 	ret

01000f38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1000f38:	defffa04 	addi	sp,sp,-24
 1000f3c:	dfc00515 	stw	ra,20(sp)
 1000f40:	df000415 	stw	fp,16(sp)
 1000f44:	df000404 	addi	fp,sp,16
 1000f48:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1000f4c:	e0bfff17 	ldw	r2,-4(fp)
 1000f50:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1000f54:	e0bfff17 	ldw	r2,-4(fp)
 1000f58:	10800104 	addi	r2,r2,4
 1000f5c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1000f60:	0005303a 	rdctl	r2,status
 1000f64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1000f68:	e0fffd17 	ldw	r3,-12(fp)
 1000f6c:	00bfff84 	movi	r2,-2
 1000f70:	1884703a 	and	r2,r3,r2
 1000f74:	1001703a 	wrctl	status,r2
  
  return context;
 1000f78:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1000f7c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 1000f80:	10023000 	call	1002300 <alt_tick>
 1000f84:	e0bffe17 	ldw	r2,-8(fp)
 1000f88:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1000f8c:	e0bffc17 	ldw	r2,-16(fp)
 1000f90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1000f94:	e037883a 	mov	sp,fp
 1000f98:	dfc00117 	ldw	ra,4(sp)
 1000f9c:	df000017 	ldw	fp,0(sp)
 1000fa0:	dec00204 	addi	sp,sp,8
 1000fa4:	f800283a 	ret

01000fa8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1000fa8:	defff804 	addi	sp,sp,-32
 1000fac:	dfc00715 	stw	ra,28(sp)
 1000fb0:	df000615 	stw	fp,24(sp)
 1000fb4:	df000604 	addi	fp,sp,24
 1000fb8:	e13ffc15 	stw	r4,-16(fp)
 1000fbc:	e17ffd15 	stw	r5,-12(fp)
 1000fc0:	e1bffe15 	stw	r6,-8(fp)
 1000fc4:	e1ffff15 	stw	r7,-4(fp)
 1000fc8:	e0bfff17 	ldw	r2,-4(fp)
 1000fcc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1000fd0:	00804034 	movhi	r2,256
 1000fd4:	10962504 	addi	r2,r2,22676
 1000fd8:	10800017 	ldw	r2,0(r2)
 1000fdc:	1004c03a 	cmpne	r2,r2,zero
 1000fe0:	1000041e 	bne	r2,zero,1000ff4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1000fe4:	00c04034 	movhi	r3,256
 1000fe8:	18d62504 	addi	r3,r3,22676
 1000fec:	e0bffb17 	ldw	r2,-20(fp)
 1000ff0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1000ff4:	e0bffc17 	ldw	r2,-16(fp)
 1000ff8:	10800104 	addi	r2,r2,4
 1000ffc:	1007883a 	mov	r3,r2
 1001000:	008001c4 	movi	r2,7
 1001004:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 1001008:	d8000015 	stw	zero,0(sp)
 100100c:	e13ffd17 	ldw	r4,-12(fp)
 1001010:	e17ffe17 	ldw	r5,-8(fp)
 1001014:	01804034 	movhi	r6,256
 1001018:	3183ce04 	addi	r6,r6,3896
 100101c:	e1fffc17 	ldw	r7,-16(fp)
 1001020:	1001af00 	call	1001af0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 1001024:	e037883a 	mov	sp,fp
 1001028:	dfc00117 	ldw	ra,4(sp)
 100102c:	df000017 	ldw	fp,0(sp)
 1001030:	dec00204 	addi	sp,sp,8
 1001034:	f800283a 	ret

01001038 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1001038:	defffc04 	addi	sp,sp,-16
 100103c:	df000315 	stw	fp,12(sp)
 1001040:	df000304 	addi	fp,sp,12
 1001044:	e13ffe15 	stw	r4,-8(fp)
 1001048:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100104c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1001050:	e0bfff17 	ldw	r2,-4(fp)
 1001054:	1004c03a 	cmpne	r2,r2,zero
 1001058:	1000061e 	bne	r2,zero,1001074 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100105c:	e0bffe17 	ldw	r2,-8(fp)
 1001060:	1007883a 	mov	r3,r2
 1001064:	e0bffd03 	ldbu	r2,-12(fp)
 1001068:	10c4b03a 	or	r2,r2,r3
 100106c:	e0bffd05 	stb	r2,-12(fp)
 1001070:	00000806 	br	1001094 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1001074:	e0bffe17 	ldw	r2,-8(fp)
 1001078:	1007883a 	mov	r3,r2
 100107c:	e0bffd03 	ldbu	r2,-12(fp)
 1001080:	10c4b03a 	or	r2,r2,r3
 1001084:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1001088:	e0bffd03 	ldbu	r2,-12(fp)
 100108c:	10801014 	ori	r2,r2,64
 1001090:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1001094:	e0fffd03 	ldbu	r3,-12(fp)
 1001098:	00bfe004 	movi	r2,-128
 100109c:	1884b03a 	or	r2,r3,r2
 10010a0:	10803fcc 	andi	r2,r2,255
}
 10010a4:	e037883a 	mov	sp,fp
 10010a8:	df000017 	ldw	fp,0(sp)
 10010ac:	dec00104 	addi	sp,sp,4
 10010b0:	f800283a 	ret

010010b4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 10010b4:	defffd04 	addi	sp,sp,-12
 10010b8:	df000215 	stw	fp,8(sp)
 10010bc:	df000204 	addi	fp,sp,8
 10010c0:	e13ffe15 	stw	r4,-8(fp)
 10010c4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 10010c8:	e0bffe17 	ldw	r2,-8(fp)
 10010cc:	10800a17 	ldw	r2,40(r2)
 10010d0:	e0ffff03 	ldbu	r3,-4(fp)
 10010d4:	10c00025 	stbio	r3,0(r2)
}
 10010d8:	e037883a 	mov	sp,fp
 10010dc:	df000017 	ldw	fp,0(sp)
 10010e0:	dec00104 	addi	sp,sp,4
 10010e4:	f800283a 	ret

010010e8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 10010e8:	defffe04 	addi	sp,sp,-8
 10010ec:	df000115 	stw	fp,4(sp)
 10010f0:	df000104 	addi	fp,sp,4
 10010f4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 10010f8:	e0bfff17 	ldw	r2,-4(fp)
 10010fc:	10800a17 	ldw	r2,40(r2)
 1001100:	1007883a 	mov	r3,r2
 1001104:	00800044 	movi	r2,1
 1001108:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100110c:	e037883a 	mov	sp,fp
 1001110:	df000017 	ldw	fp,0(sp)
 1001114:	dec00104 	addi	sp,sp,4
 1001118:	f800283a 	ret

0100111c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100111c:	defffc04 	addi	sp,sp,-16
 1001120:	dfc00315 	stw	ra,12(sp)
 1001124:	df000215 	stw	fp,8(sp)
 1001128:	df000204 	addi	fp,sp,8
 100112c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1001130:	e13fff17 	ldw	r4,-4(fp)
 1001134:	01404034 	movhi	r5,256
 1001138:	29507f04 	addi	r5,r5,16892
 100113c:	1001a400 	call	1001a40 <alt_find_dev>
 1001140:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1001144:	e0bffe17 	ldw	r2,-8(fp)
}
 1001148:	e037883a 	mov	sp,fp
 100114c:	dfc00117 	ldw	ra,4(sp)
 1001150:	df000017 	ldw	fp,0(sp)
 1001154:	dec00204 	addi	sp,sp,8
 1001158:	f800283a 	ret

0100115c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100115c:	defffb04 	addi	sp,sp,-20
 1001160:	df000415 	stw	fp,16(sp)
 1001164:	df000404 	addi	fp,sp,16
 1001168:	e13ffd15 	stw	r4,-12(fp)
 100116c:	e17ffe15 	stw	r5,-8(fp)
 1001170:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1001174:	e03ffc15 	stw	zero,-16(fp)
 1001178:	00000f06 	br	10011b8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100117c:	e0bffd17 	ldw	r2,-12(fp)
 1001180:	10800a17 	ldw	r2,40(r2)
 1001184:	11000044 	addi	r4,r2,1
 1001188:	e0fffc17 	ldw	r3,-16(fp)
 100118c:	e0bffe17 	ldw	r2,-8(fp)
 1001190:	1885883a 	add	r2,r3,r2
 1001194:	10800003 	ldbu	r2,0(r2)
 1001198:	10c03fcc 	andi	r3,r2,255
 100119c:	18c0201c 	xori	r3,r3,128
 10011a0:	18ffe004 	addi	r3,r3,-128
 10011a4:	2005883a 	mov	r2,r4
 10011a8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 10011ac:	e0bffc17 	ldw	r2,-16(fp)
 10011b0:	10800044 	addi	r2,r2,1
 10011b4:	e0bffc15 	stw	r2,-16(fp)
 10011b8:	e0fffc17 	ldw	r3,-16(fp)
 10011bc:	e0bfff17 	ldw	r2,-4(fp)
 10011c0:	18bfee36 	bltu	r3,r2,100117c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 10011c4:	e037883a 	mov	sp,fp
 10011c8:	df000017 	ldw	fp,0(sp)
 10011cc:	dec00104 	addi	sp,sp,4
 10011d0:	f800283a 	ret

010011d4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 10011d4:	defffd04 	addi	sp,sp,-12
 10011d8:	df000215 	stw	fp,8(sp)
 10011dc:	df000204 	addi	fp,sp,8
 10011e0:	e13ffe15 	stw	r4,-8(fp)
 10011e4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 10011e8:	00000d06 	br	1001220 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 10011ec:	e0bffe17 	ldw	r2,-8(fp)
 10011f0:	10800a17 	ldw	r2,40(r2)
 10011f4:	11000044 	addi	r4,r2,1
 10011f8:	e0bfff17 	ldw	r2,-4(fp)
 10011fc:	10800003 	ldbu	r2,0(r2)
 1001200:	10c03fcc 	andi	r3,r2,255
 1001204:	18c0201c 	xori	r3,r3,128
 1001208:	18ffe004 	addi	r3,r3,-128
 100120c:	2005883a 	mov	r2,r4
 1001210:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1001214:	e0bfff17 	ldw	r2,-4(fp)
 1001218:	10800044 	addi	r2,r2,1
 100121c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1001220:	e0bfff17 	ldw	r2,-4(fp)
 1001224:	10800003 	ldbu	r2,0(r2)
 1001228:	10803fcc 	andi	r2,r2,255
 100122c:	1080201c 	xori	r2,r2,128
 1001230:	10bfe004 	addi	r2,r2,-128
 1001234:	1004c03a 	cmpne	r2,r2,zero
 1001238:	103fec1e 	bne	r2,zero,10011ec <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100123c:	e037883a 	mov	sp,fp
 1001240:	df000017 	ldw	fp,0(sp)
 1001244:	dec00104 	addi	sp,sp,4
 1001248:	f800283a 	ret

0100124c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100124c:	defffb04 	addi	sp,sp,-20
 1001250:	dfc00415 	stw	ra,16(sp)
 1001254:	df000315 	stw	fp,12(sp)
 1001258:	df000304 	addi	fp,sp,12
 100125c:	e13ffd15 	stw	r4,-12(fp)
 1001260:	e17ffe15 	stw	r5,-8(fp)
 1001264:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1001268:	e0bffd17 	ldw	r2,-12(fp)
 100126c:	10800017 	ldw	r2,0(r2)
 1001270:	1009883a 	mov	r4,r2
 1001274:	e1bfff17 	ldw	r6,-4(fp)
 1001278:	e17ffe17 	ldw	r5,-8(fp)
 100127c:	100115c0 	call	100115c <alt_up_character_lcd_write>
	return 0;
 1001280:	0005883a 	mov	r2,zero
}
 1001284:	e037883a 	mov	sp,fp
 1001288:	dfc00117 	ldw	ra,4(sp)
 100128c:	df000017 	ldw	fp,0(sp)
 1001290:	dec00204 	addi	sp,sp,8
 1001294:	f800283a 	ret

01001298 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1001298:	defff904 	addi	sp,sp,-28
 100129c:	dfc00615 	stw	ra,24(sp)
 10012a0:	df000515 	stw	fp,20(sp)
 10012a4:	df000504 	addi	fp,sp,20
 10012a8:	e13ffc15 	stw	r4,-16(fp)
 10012ac:	e17ffd15 	stw	r5,-12(fp)
 10012b0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 10012b4:	e0bffd17 	ldw	r2,-12(fp)
 10012b8:	10800a28 	cmpgeui	r2,r2,40
 10012bc:	1000031e 	bne	r2,zero,10012cc <alt_up_character_lcd_set_cursor_pos+0x34>
 10012c0:	e0bffe17 	ldw	r2,-8(fp)
 10012c4:	108000b0 	cmpltui	r2,r2,2
 10012c8:	1000031e 	bne	r2,zero,10012d8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 10012cc:	00bfffc4 	movi	r2,-1
 10012d0:	e0bfff15 	stw	r2,-4(fp)
 10012d4:	00000806 	br	10012f8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 10012d8:	e13ffd17 	ldw	r4,-12(fp)
 10012dc:	e17ffe17 	ldw	r5,-8(fp)
 10012e0:	10010380 	call	1001038 <get_DDRAM_addr>
 10012e4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 10012e8:	e17ffb03 	ldbu	r5,-20(fp)
 10012ec:	e13ffc17 	ldw	r4,-16(fp)
 10012f0:	10010b40 	call	10010b4 <alt_up_character_lcd_send_cmd>
	return 0;
 10012f4:	e03fff15 	stw	zero,-4(fp)
 10012f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10012fc:	e037883a 	mov	sp,fp
 1001300:	dfc00117 	ldw	ra,4(sp)
 1001304:	df000017 	ldw	fp,0(sp)
 1001308:	dec00204 	addi	sp,sp,8
 100130c:	f800283a 	ret

01001310 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1001310:	defff904 	addi	sp,sp,-28
 1001314:	dfc00615 	stw	ra,24(sp)
 1001318:	df000515 	stw	fp,20(sp)
 100131c:	df000504 	addi	fp,sp,20
 1001320:	e13ffc15 	stw	r4,-16(fp)
 1001324:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1001328:	e0bffd17 	ldw	r2,-12(fp)
 100132c:	1005003a 	cmpeq	r2,r2,zero
 1001330:	10001e1e 	bne	r2,zero,10013ac <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1001334:	e0bffd17 	ldw	r2,-12(fp)
 1001338:	10800050 	cmplti	r2,r2,1
 100133c:	1000031e 	bne	r2,zero,100134c <alt_up_character_lcd_shift_cursor+0x3c>
 1001340:	00800504 	movi	r2,20
 1001344:	e0bfff05 	stb	r2,-4(fp)
 1001348:	00000206 	br	1001354 <alt_up_character_lcd_shift_cursor+0x44>
 100134c:	00c00404 	movi	r3,16
 1001350:	e0ffff05 	stb	r3,-4(fp)
 1001354:	e0bfff03 	ldbu	r2,-4(fp)
 1001358:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100135c:	e0fffd17 	ldw	r3,-12(fp)
 1001360:	e0fffe15 	stw	r3,-8(fp)
 1001364:	e0fffe17 	ldw	r3,-8(fp)
 1001368:	1804403a 	cmpge	r2,r3,zero
 100136c:	1000031e 	bne	r2,zero,100137c <alt_up_character_lcd_shift_cursor+0x6c>
 1001370:	e0bffe17 	ldw	r2,-8(fp)
 1001374:	0085c83a 	sub	r2,zero,r2
 1001378:	e0bffe15 	stw	r2,-8(fp)
 100137c:	e0fffe17 	ldw	r3,-8(fp)
 1001380:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1001384:	00000306 	br	1001394 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1001388:	e17ffb43 	ldbu	r5,-19(fp)
 100138c:	e13ffc17 	ldw	r4,-16(fp)
 1001390:	10010b40 	call	10010b4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1001394:	e0bffb03 	ldbu	r2,-20(fp)
 1001398:	10bfffc4 	addi	r2,r2,-1
 100139c:	e0bffb05 	stb	r2,-20(fp)
 10013a0:	e0bffb03 	ldbu	r2,-20(fp)
 10013a4:	10803fd8 	cmpnei	r2,r2,255
 10013a8:	103ff71e 	bne	r2,zero,1001388 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10013ac:	e037883a 	mov	sp,fp
 10013b0:	dfc00117 	ldw	ra,4(sp)
 10013b4:	df000017 	ldw	fp,0(sp)
 10013b8:	dec00204 	addi	sp,sp,8
 10013bc:	f800283a 	ret

010013c0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 10013c0:	defff904 	addi	sp,sp,-28
 10013c4:	dfc00615 	stw	ra,24(sp)
 10013c8:	df000515 	stw	fp,20(sp)
 10013cc:	df000504 	addi	fp,sp,20
 10013d0:	e13ffc15 	stw	r4,-16(fp)
 10013d4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 10013d8:	e0bffd17 	ldw	r2,-12(fp)
 10013dc:	1005003a 	cmpeq	r2,r2,zero
 10013e0:	10001e1e 	bne	r2,zero,100145c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 10013e4:	e0bffd17 	ldw	r2,-12(fp)
 10013e8:	10800050 	cmplti	r2,r2,1
 10013ec:	1000031e 	bne	r2,zero,10013fc <alt_up_character_lcd_shift_display+0x3c>
 10013f0:	00800704 	movi	r2,28
 10013f4:	e0bfff05 	stb	r2,-4(fp)
 10013f8:	00000206 	br	1001404 <alt_up_character_lcd_shift_display+0x44>
 10013fc:	00c00604 	movi	r3,24
 1001400:	e0ffff05 	stb	r3,-4(fp)
 1001404:	e0bfff03 	ldbu	r2,-4(fp)
 1001408:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100140c:	e0fffd17 	ldw	r3,-12(fp)
 1001410:	e0fffe15 	stw	r3,-8(fp)
 1001414:	e0fffe17 	ldw	r3,-8(fp)
 1001418:	1804403a 	cmpge	r2,r3,zero
 100141c:	1000031e 	bne	r2,zero,100142c <alt_up_character_lcd_shift_display+0x6c>
 1001420:	e0bffe17 	ldw	r2,-8(fp)
 1001424:	0085c83a 	sub	r2,zero,r2
 1001428:	e0bffe15 	stw	r2,-8(fp)
 100142c:	e0fffe17 	ldw	r3,-8(fp)
 1001430:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1001434:	00000306 	br	1001444 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1001438:	e17ffb43 	ldbu	r5,-19(fp)
 100143c:	e13ffc17 	ldw	r4,-16(fp)
 1001440:	10010b40 	call	10010b4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1001444:	e0bffb03 	ldbu	r2,-20(fp)
 1001448:	10bfffc4 	addi	r2,r2,-1
 100144c:	e0bffb05 	stb	r2,-20(fp)
 1001450:	e0bffb03 	ldbu	r2,-20(fp)
 1001454:	10803fd8 	cmpnei	r2,r2,255
 1001458:	103ff71e 	bne	r2,zero,1001438 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100145c:	e037883a 	mov	sp,fp
 1001460:	dfc00117 	ldw	ra,4(sp)
 1001464:	df000017 	ldw	fp,0(sp)
 1001468:	dec00204 	addi	sp,sp,8
 100146c:	f800283a 	ret

01001470 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1001470:	defff904 	addi	sp,sp,-28
 1001474:	dfc00615 	stw	ra,24(sp)
 1001478:	df000515 	stw	fp,20(sp)
 100147c:	df000504 	addi	fp,sp,20
 1001480:	e13ffc15 	stw	r4,-16(fp)
 1001484:	e17ffd15 	stw	r5,-12(fp)
 1001488:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100148c:	e0bffd17 	ldw	r2,-12(fp)
 1001490:	10800a28 	cmpgeui	r2,r2,40
 1001494:	1000031e 	bne	r2,zero,10014a4 <alt_up_character_lcd_erase_pos+0x34>
 1001498:	e0bffe17 	ldw	r2,-8(fp)
 100149c:	108000b0 	cmpltui	r2,r2,2
 10014a0:	1000031e 	bne	r2,zero,10014b0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 10014a4:	00bfffc4 	movi	r2,-1
 10014a8:	e0bfff15 	stw	r2,-4(fp)
 10014ac:	00000e06 	br	10014e8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 10014b0:	e13ffd17 	ldw	r4,-12(fp)
 10014b4:	e17ffe17 	ldw	r5,-8(fp)
 10014b8:	10010380 	call	1001038 <get_DDRAM_addr>
 10014bc:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 10014c0:	e17ffb03 	ldbu	r5,-20(fp)
 10014c4:	e13ffc17 	ldw	r4,-16(fp)
 10014c8:	10010b40 	call	10010b4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 10014cc:	e0bffc17 	ldw	r2,-16(fp)
 10014d0:	10800a17 	ldw	r2,40(r2)
 10014d4:	10800044 	addi	r2,r2,1
 10014d8:	1007883a 	mov	r3,r2
 10014dc:	00800084 	movi	r2,2
 10014e0:	18800025 	stbio	r2,0(r3)
	return 0;
 10014e4:	e03fff15 	stw	zero,-4(fp)
 10014e8:	e0bfff17 	ldw	r2,-4(fp)
}
 10014ec:	e037883a 	mov	sp,fp
 10014f0:	dfc00117 	ldw	ra,4(sp)
 10014f4:	df000017 	ldw	fp,0(sp)
 10014f8:	dec00204 	addi	sp,sp,8
 10014fc:	f800283a 	ret

01001500 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1001500:	defffd04 	addi	sp,sp,-12
 1001504:	dfc00215 	stw	ra,8(sp)
 1001508:	df000115 	stw	fp,4(sp)
 100150c:	df000104 	addi	fp,sp,4
 1001510:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1001514:	e13fff17 	ldw	r4,-4(fp)
 1001518:	01400304 	movi	r5,12
 100151c:	10010b40 	call	10010b4 <alt_up_character_lcd_send_cmd>
}
 1001520:	e037883a 	mov	sp,fp
 1001524:	dfc00117 	ldw	ra,4(sp)
 1001528:	df000017 	ldw	fp,0(sp)
 100152c:	dec00204 	addi	sp,sp,8
 1001530:	f800283a 	ret

01001534 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1001534:	defffd04 	addi	sp,sp,-12
 1001538:	dfc00215 	stw	ra,8(sp)
 100153c:	df000115 	stw	fp,4(sp)
 1001540:	df000104 	addi	fp,sp,4
 1001544:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1001548:	e13fff17 	ldw	r4,-4(fp)
 100154c:	014003c4 	movi	r5,15
 1001550:	10010b40 	call	10010b4 <alt_up_character_lcd_send_cmd>
}
 1001554:	e037883a 	mov	sp,fp
 1001558:	dfc00117 	ldw	ra,4(sp)
 100155c:	df000017 	ldw	fp,0(sp)
 1001560:	dec00204 	addi	sp,sp,8
 1001564:	f800283a 	ret

01001568 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1001568:	defff404 	addi	sp,sp,-48
 100156c:	df000b15 	stw	fp,44(sp)
 1001570:	df000b04 	addi	fp,sp,44
 1001574:	e13ffb15 	stw	r4,-20(fp)
 1001578:	e17ffc15 	stw	r5,-16(fp)
 100157c:	e1bffd15 	stw	r6,-12(fp)
 1001580:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1001584:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1001588:	00804034 	movhi	r2,256
 100158c:	10962504 	addi	r2,r2,22676
 1001590:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1001594:	1005003a 	cmpeq	r2,r2,zero
 1001598:	1000411e 	bne	r2,zero,10016a0 <alt_alarm_start+0x138>
  {
    if (alarm)
 100159c:	e0bffb17 	ldw	r2,-20(fp)
 10015a0:	1005003a 	cmpeq	r2,r2,zero
 10015a4:	10003b1e 	bne	r2,zero,1001694 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10015a8:	e0fffb17 	ldw	r3,-20(fp)
 10015ac:	e0bffd17 	ldw	r2,-12(fp)
 10015b0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10015b4:	e0fffb17 	ldw	r3,-20(fp)
 10015b8:	e0bffe17 	ldw	r2,-8(fp)
 10015bc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10015c0:	0005303a 	rdctl	r2,status
 10015c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10015c8:	e0fff817 	ldw	r3,-32(fp)
 10015cc:	00bfff84 	movi	r2,-2
 10015d0:	1884703a 	and	r2,r3,r2
 10015d4:	1001703a 	wrctl	status,r2
  
  return context;
 10015d8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10015dc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10015e0:	00804034 	movhi	r2,256
 10015e4:	10962604 	addi	r2,r2,22680
 10015e8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10015ec:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10015f0:	e0fffc17 	ldw	r3,-16(fp)
 10015f4:	e0bff917 	ldw	r2,-28(fp)
 10015f8:	1885883a 	add	r2,r3,r2
 10015fc:	10c00044 	addi	r3,r2,1
 1001600:	e0bffb17 	ldw	r2,-20(fp)
 1001604:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1001608:	e0bffb17 	ldw	r2,-20(fp)
 100160c:	10c00217 	ldw	r3,8(r2)
 1001610:	e0bff917 	ldw	r2,-28(fp)
 1001614:	1880042e 	bgeu	r3,r2,1001628 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1001618:	e0fffb17 	ldw	r3,-20(fp)
 100161c:	00800044 	movi	r2,1
 1001620:	18800405 	stb	r2,16(r3)
 1001624:	00000206 	br	1001630 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1001628:	e0bffb17 	ldw	r2,-20(fp)
 100162c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1001630:	e0fffb17 	ldw	r3,-20(fp)
 1001634:	00804034 	movhi	r2,256
 1001638:	10908404 	addi	r2,r2,16912
 100163c:	e0bff615 	stw	r2,-40(fp)
 1001640:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1001644:	e0fff717 	ldw	r3,-36(fp)
 1001648:	e0bff617 	ldw	r2,-40(fp)
 100164c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1001650:	e0bff617 	ldw	r2,-40(fp)
 1001654:	10c00017 	ldw	r3,0(r2)
 1001658:	e0bff717 	ldw	r2,-36(fp)
 100165c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1001660:	e0bff617 	ldw	r2,-40(fp)
 1001664:	10c00017 	ldw	r3,0(r2)
 1001668:	e0bff717 	ldw	r2,-36(fp)
 100166c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1001670:	e0fff617 	ldw	r3,-40(fp)
 1001674:	e0bff717 	ldw	r2,-36(fp)
 1001678:	18800015 	stw	r2,0(r3)
 100167c:	e0bffa17 	ldw	r2,-24(fp)
 1001680:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1001684:	e0bff517 	ldw	r2,-44(fp)
 1001688:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100168c:	e03fff15 	stw	zero,-4(fp)
 1001690:	00000506 	br	10016a8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1001694:	00bffa84 	movi	r2,-22
 1001698:	e0bfff15 	stw	r2,-4(fp)
 100169c:	00000206 	br	10016a8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 10016a0:	00bfde84 	movi	r2,-134
 10016a4:	e0bfff15 	stw	r2,-4(fp)
 10016a8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10016ac:	e037883a 	mov	sp,fp
 10016b0:	df000017 	ldw	fp,0(sp)
 10016b4:	dec00104 	addi	sp,sp,4
 10016b8:	f800283a 	ret

010016bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10016bc:	defff804 	addi	sp,sp,-32
 10016c0:	dfc00715 	stw	ra,28(sp)
 10016c4:	df000615 	stw	fp,24(sp)
 10016c8:	df000604 	addi	fp,sp,24
 10016cc:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10016d0:	e0bffc17 	ldw	r2,-16(fp)
 10016d4:	1004803a 	cmplt	r2,r2,zero
 10016d8:	1000091e 	bne	r2,zero,1001700 <close+0x44>
 10016dc:	e13ffc17 	ldw	r4,-16(fp)
 10016e0:	01400304 	movi	r5,12
 10016e4:	1002ad80 	call	1002ad8 <__mulsi3>
 10016e8:	1007883a 	mov	r3,r2
 10016ec:	00804034 	movhi	r2,256
 10016f0:	108f1c04 	addi	r2,r2,15472
 10016f4:	1887883a 	add	r3,r3,r2
 10016f8:	e0ffff15 	stw	r3,-4(fp)
 10016fc:	00000106 	br	1001704 <close+0x48>
 1001700:	e03fff15 	stw	zero,-4(fp)
 1001704:	e0bfff17 	ldw	r2,-4(fp)
 1001708:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100170c:	e0bffb17 	ldw	r2,-20(fp)
 1001710:	1005003a 	cmpeq	r2,r2,zero
 1001714:	10001d1e 	bne	r2,zero,100178c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1001718:	e0bffb17 	ldw	r2,-20(fp)
 100171c:	10800017 	ldw	r2,0(r2)
 1001720:	10800417 	ldw	r2,16(r2)
 1001724:	1005003a 	cmpeq	r2,r2,zero
 1001728:	1000071e 	bne	r2,zero,1001748 <close+0x8c>
 100172c:	e0bffb17 	ldw	r2,-20(fp)
 1001730:	10800017 	ldw	r2,0(r2)
 1001734:	10800417 	ldw	r2,16(r2)
 1001738:	e13ffb17 	ldw	r4,-20(fp)
 100173c:	103ee83a 	callr	r2
 1001740:	e0bffe15 	stw	r2,-8(fp)
 1001744:	00000106 	br	100174c <close+0x90>
 1001748:	e03ffe15 	stw	zero,-8(fp)
 100174c:	e0bffe17 	ldw	r2,-8(fp)
 1001750:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1001754:	e13ffc17 	ldw	r4,-16(fp)
 1001758:	10021f00 	call	10021f0 <alt_release_fd>
    if (rval < 0)
 100175c:	e0bffa17 	ldw	r2,-24(fp)
 1001760:	1004403a 	cmpge	r2,r2,zero
 1001764:	1000071e 	bne	r2,zero,1001784 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1001768:	10017bc0 	call	10017bc <alt_get_errno>
 100176c:	e0fffa17 	ldw	r3,-24(fp)
 1001770:	00c7c83a 	sub	r3,zero,r3
 1001774:	10c00015 	stw	r3,0(r2)
      return -1;
 1001778:	00bfffc4 	movi	r2,-1
 100177c:	e0bffd15 	stw	r2,-12(fp)
 1001780:	00000806 	br	10017a4 <close+0xe8>
    }
    return 0;
 1001784:	e03ffd15 	stw	zero,-12(fp)
 1001788:	00000606 	br	10017a4 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100178c:	10017bc0 	call	10017bc <alt_get_errno>
 1001790:	1007883a 	mov	r3,r2
 1001794:	00801444 	movi	r2,81
 1001798:	18800015 	stw	r2,0(r3)
    return -1;
 100179c:	00bfffc4 	movi	r2,-1
 10017a0:	e0bffd15 	stw	r2,-12(fp)
 10017a4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 10017a8:	e037883a 	mov	sp,fp
 10017ac:	dfc00117 	ldw	ra,4(sp)
 10017b0:	df000017 	ldw	fp,0(sp)
 10017b4:	dec00204 	addi	sp,sp,8
 10017b8:	f800283a 	ret

010017bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10017bc:	defffd04 	addi	sp,sp,-12
 10017c0:	dfc00215 	stw	ra,8(sp)
 10017c4:	df000115 	stw	fp,4(sp)
 10017c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10017cc:	00804034 	movhi	r2,256
 10017d0:	10908204 	addi	r2,r2,16904
 10017d4:	10800017 	ldw	r2,0(r2)
 10017d8:	1005003a 	cmpeq	r2,r2,zero
 10017dc:	1000061e 	bne	r2,zero,10017f8 <alt_get_errno+0x3c>
 10017e0:	00804034 	movhi	r2,256
 10017e4:	10908204 	addi	r2,r2,16904
 10017e8:	10800017 	ldw	r2,0(r2)
 10017ec:	103ee83a 	callr	r2
 10017f0:	e0bfff15 	stw	r2,-4(fp)
 10017f4:	00000306 	br	1001804 <alt_get_errno+0x48>
 10017f8:	00804034 	movhi	r2,256
 10017fc:	10962704 	addi	r2,r2,22684
 1001800:	e0bfff15 	stw	r2,-4(fp)
 1001804:	e0bfff17 	ldw	r2,-4(fp)
}
 1001808:	e037883a 	mov	sp,fp
 100180c:	dfc00117 	ldw	ra,4(sp)
 1001810:	df000017 	ldw	fp,0(sp)
 1001814:	dec00204 	addi	sp,sp,8
 1001818:	f800283a 	ret

0100181c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100181c:	deffff04 	addi	sp,sp,-4
 1001820:	df000015 	stw	fp,0(sp)
 1001824:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1001828:	e037883a 	mov	sp,fp
 100182c:	df000017 	ldw	fp,0(sp)
 1001830:	dec00104 	addi	sp,sp,4
 1001834:	f800283a 	ret

01001838 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1001838:	defffc04 	addi	sp,sp,-16
 100183c:	df000315 	stw	fp,12(sp)
 1001840:	df000304 	addi	fp,sp,12
 1001844:	e13ffd15 	stw	r4,-12(fp)
 1001848:	e17ffe15 	stw	r5,-8(fp)
 100184c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1001850:	e0bfff17 	ldw	r2,-4(fp)
}
 1001854:	e037883a 	mov	sp,fp
 1001858:	df000017 	ldw	fp,0(sp)
 100185c:	dec00104 	addi	sp,sp,4
 1001860:	f800283a 	ret

01001864 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1001864:	defff904 	addi	sp,sp,-28
 1001868:	dfc00615 	stw	ra,24(sp)
 100186c:	df000515 	stw	fp,20(sp)
 1001870:	df000504 	addi	fp,sp,20
 1001874:	e13ffd15 	stw	r4,-12(fp)
 1001878:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100187c:	e0bffd17 	ldw	r2,-12(fp)
 1001880:	1005003a 	cmpeq	r2,r2,zero
 1001884:	1000041e 	bne	r2,zero,1001898 <alt_dev_llist_insert+0x34>
 1001888:	e0bffd17 	ldw	r2,-12(fp)
 100188c:	10800217 	ldw	r2,8(r2)
 1001890:	1004c03a 	cmpne	r2,r2,zero
 1001894:	1000071e 	bne	r2,zero,10018b4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1001898:	10019180 	call	1001918 <alt_get_errno>
 100189c:	1007883a 	mov	r3,r2
 10018a0:	00800584 	movi	r2,22
 10018a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10018a8:	00bffa84 	movi	r2,-22
 10018ac:	e0bfff15 	stw	r2,-4(fp)
 10018b0:	00001306 	br	1001900 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10018b4:	e0fffd17 	ldw	r3,-12(fp)
 10018b8:	e0bffe17 	ldw	r2,-8(fp)
 10018bc:	e0bffb15 	stw	r2,-20(fp)
 10018c0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10018c4:	e0fffc17 	ldw	r3,-16(fp)
 10018c8:	e0bffb17 	ldw	r2,-20(fp)
 10018cc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10018d0:	e0bffb17 	ldw	r2,-20(fp)
 10018d4:	10c00017 	ldw	r3,0(r2)
 10018d8:	e0bffc17 	ldw	r2,-16(fp)
 10018dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10018e0:	e0bffb17 	ldw	r2,-20(fp)
 10018e4:	10c00017 	ldw	r3,0(r2)
 10018e8:	e0bffc17 	ldw	r2,-16(fp)
 10018ec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10018f0:	e0fffb17 	ldw	r3,-20(fp)
 10018f4:	e0bffc17 	ldw	r2,-16(fp)
 10018f8:	18800015 	stw	r2,0(r3)

  return 0;  
 10018fc:	e03fff15 	stw	zero,-4(fp)
 1001900:	e0bfff17 	ldw	r2,-4(fp)
}
 1001904:	e037883a 	mov	sp,fp
 1001908:	dfc00117 	ldw	ra,4(sp)
 100190c:	df000017 	ldw	fp,0(sp)
 1001910:	dec00204 	addi	sp,sp,8
 1001914:	f800283a 	ret

01001918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1001918:	defffd04 	addi	sp,sp,-12
 100191c:	dfc00215 	stw	ra,8(sp)
 1001920:	df000115 	stw	fp,4(sp)
 1001924:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1001928:	00804034 	movhi	r2,256
 100192c:	10908204 	addi	r2,r2,16904
 1001930:	10800017 	ldw	r2,0(r2)
 1001934:	1005003a 	cmpeq	r2,r2,zero
 1001938:	1000061e 	bne	r2,zero,1001954 <alt_get_errno+0x3c>
 100193c:	00804034 	movhi	r2,256
 1001940:	10908204 	addi	r2,r2,16904
 1001944:	10800017 	ldw	r2,0(r2)
 1001948:	103ee83a 	callr	r2
 100194c:	e0bfff15 	stw	r2,-4(fp)
 1001950:	00000306 	br	1001960 <alt_get_errno+0x48>
 1001954:	00804034 	movhi	r2,256
 1001958:	10962704 	addi	r2,r2,22684
 100195c:	e0bfff15 	stw	r2,-4(fp)
 1001960:	e0bfff17 	ldw	r2,-4(fp)
}
 1001964:	e037883a 	mov	sp,fp
 1001968:	dfc00117 	ldw	ra,4(sp)
 100196c:	df000017 	ldw	fp,0(sp)
 1001970:	dec00204 	addi	sp,sp,8
 1001974:	f800283a 	ret

01001978 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1001978:	defffd04 	addi	sp,sp,-12
 100197c:	dfc00215 	stw	ra,8(sp)
 1001980:	df000115 	stw	fp,4(sp)
 1001984:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1001988:	00bfff04 	movi	r2,-4
 100198c:	00c04034 	movhi	r3,256
 1001990:	18cadd04 	addi	r3,r3,11124
 1001994:	1885883a 	add	r2,r3,r2
 1001998:	e0bfff15 	stw	r2,-4(fp)
 100199c:	00000606 	br	10019b8 <_do_ctors+0x40>
        (*ctor) (); 
 10019a0:	e0bfff17 	ldw	r2,-4(fp)
 10019a4:	10800017 	ldw	r2,0(r2)
 10019a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10019ac:	e0bfff17 	ldw	r2,-4(fp)
 10019b0:	10bfff04 	addi	r2,r2,-4
 10019b4:	e0bfff15 	stw	r2,-4(fp)
 10019b8:	e0ffff17 	ldw	r3,-4(fp)
 10019bc:	00804034 	movhi	r2,256
 10019c0:	108adc04 	addi	r2,r2,11120
 10019c4:	18bff62e 	bgeu	r3,r2,10019a0 <_do_ctors+0x28>
        (*ctor) (); 
}
 10019c8:	e037883a 	mov	sp,fp
 10019cc:	dfc00117 	ldw	ra,4(sp)
 10019d0:	df000017 	ldw	fp,0(sp)
 10019d4:	dec00204 	addi	sp,sp,8
 10019d8:	f800283a 	ret

010019dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10019dc:	defffd04 	addi	sp,sp,-12
 10019e0:	dfc00215 	stw	ra,8(sp)
 10019e4:	df000115 	stw	fp,4(sp)
 10019e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10019ec:	00bfff04 	movi	r2,-4
 10019f0:	00c04034 	movhi	r3,256
 10019f4:	18cadd04 	addi	r3,r3,11124
 10019f8:	1885883a 	add	r2,r3,r2
 10019fc:	e0bfff15 	stw	r2,-4(fp)
 1001a00:	00000606 	br	1001a1c <_do_dtors+0x40>
        (*dtor) (); 
 1001a04:	e0bfff17 	ldw	r2,-4(fp)
 1001a08:	10800017 	ldw	r2,0(r2)
 1001a0c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1001a10:	e0bfff17 	ldw	r2,-4(fp)
 1001a14:	10bfff04 	addi	r2,r2,-4
 1001a18:	e0bfff15 	stw	r2,-4(fp)
 1001a1c:	e0ffff17 	ldw	r3,-4(fp)
 1001a20:	00804034 	movhi	r2,256
 1001a24:	108add04 	addi	r2,r2,11124
 1001a28:	18bff62e 	bgeu	r3,r2,1001a04 <_do_dtors+0x28>
        (*dtor) (); 
}
 1001a2c:	e037883a 	mov	sp,fp
 1001a30:	dfc00117 	ldw	ra,4(sp)
 1001a34:	df000017 	ldw	fp,0(sp)
 1001a38:	dec00204 	addi	sp,sp,8
 1001a3c:	f800283a 	ret

01001a40 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1001a40:	defff904 	addi	sp,sp,-28
 1001a44:	dfc00615 	stw	ra,24(sp)
 1001a48:	df000515 	stw	fp,20(sp)
 1001a4c:	df000504 	addi	fp,sp,20
 1001a50:	e13ffd15 	stw	r4,-12(fp)
 1001a54:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1001a58:	e0bffe17 	ldw	r2,-8(fp)
 1001a5c:	10800017 	ldw	r2,0(r2)
 1001a60:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1001a64:	e13ffd17 	ldw	r4,-12(fp)
 1001a68:	100277c0 	call	100277c <strlen>
 1001a6c:	10800044 	addi	r2,r2,1
 1001a70:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1001a74:	00000d06 	br	1001aac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1001a78:	e0bffc17 	ldw	r2,-16(fp)
 1001a7c:	11000217 	ldw	r4,8(r2)
 1001a80:	e1bffb17 	ldw	r6,-20(fp)
 1001a84:	e17ffd17 	ldw	r5,-12(fp)
 1001a88:	10026680 	call	1002668 <memcmp>
 1001a8c:	1004c03a 	cmpne	r2,r2,zero
 1001a90:	1000031e 	bne	r2,zero,1001aa0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1001a94:	e0bffc17 	ldw	r2,-16(fp)
 1001a98:	e0bfff15 	stw	r2,-4(fp)
 1001a9c:	00000706 	br	1001abc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1001aa0:	e0bffc17 	ldw	r2,-16(fp)
 1001aa4:	10800017 	ldw	r2,0(r2)
 1001aa8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1001aac:	e0fffe17 	ldw	r3,-8(fp)
 1001ab0:	e0bffc17 	ldw	r2,-16(fp)
 1001ab4:	10fff01e 	bne	r2,r3,1001a78 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1001ab8:	e03fff15 	stw	zero,-4(fp)
 1001abc:	e0bfff17 	ldw	r2,-4(fp)
}
 1001ac0:	e037883a 	mov	sp,fp
 1001ac4:	dfc00117 	ldw	ra,4(sp)
 1001ac8:	df000017 	ldw	fp,0(sp)
 1001acc:	dec00204 	addi	sp,sp,8
 1001ad0:	f800283a 	ret

01001ad4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1001ad4:	deffff04 	addi	sp,sp,-4
 1001ad8:	df000015 	stw	fp,0(sp)
 1001adc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1001ae0:	e037883a 	mov	sp,fp
 1001ae4:	df000017 	ldw	fp,0(sp)
 1001ae8:	dec00104 	addi	sp,sp,4
 1001aec:	f800283a 	ret

01001af0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1001af0:	defff904 	addi	sp,sp,-28
 1001af4:	dfc00615 	stw	ra,24(sp)
 1001af8:	df000515 	stw	fp,20(sp)
 1001afc:	df000504 	addi	fp,sp,20
 1001b00:	e13ffc15 	stw	r4,-16(fp)
 1001b04:	e17ffd15 	stw	r5,-12(fp)
 1001b08:	e1bffe15 	stw	r6,-8(fp)
 1001b0c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1001b10:	e0800217 	ldw	r2,8(fp)
 1001b14:	d8800015 	stw	r2,0(sp)
 1001b18:	e13ffc17 	ldw	r4,-16(fp)
 1001b1c:	e17ffd17 	ldw	r5,-12(fp)
 1001b20:	e1bffe17 	ldw	r6,-8(fp)
 1001b24:	e1ffff17 	ldw	r7,-4(fp)
 1001b28:	1001cc40 	call	1001cc4 <alt_iic_isr_register>
}  
 1001b2c:	e037883a 	mov	sp,fp
 1001b30:	dfc00117 	ldw	ra,4(sp)
 1001b34:	df000017 	ldw	fp,0(sp)
 1001b38:	dec00204 	addi	sp,sp,8
 1001b3c:	f800283a 	ret

01001b40 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1001b40:	defff904 	addi	sp,sp,-28
 1001b44:	df000615 	stw	fp,24(sp)
 1001b48:	df000604 	addi	fp,sp,24
 1001b4c:	e13ffe15 	stw	r4,-8(fp)
 1001b50:	e17fff15 	stw	r5,-4(fp)
 1001b54:	e0bfff17 	ldw	r2,-4(fp)
 1001b58:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1001b5c:	0005303a 	rdctl	r2,status
 1001b60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1001b64:	e0fffb17 	ldw	r3,-20(fp)
 1001b68:	00bfff84 	movi	r2,-2
 1001b6c:	1884703a 	and	r2,r3,r2
 1001b70:	1001703a 	wrctl	status,r2
  
  return context;
 1001b74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1001b78:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1001b7c:	e0fffc17 	ldw	r3,-16(fp)
 1001b80:	00800044 	movi	r2,1
 1001b84:	10c4983a 	sll	r2,r2,r3
 1001b88:	1007883a 	mov	r3,r2
 1001b8c:	00804034 	movhi	r2,256
 1001b90:	10962404 	addi	r2,r2,22672
 1001b94:	10800017 	ldw	r2,0(r2)
 1001b98:	1886b03a 	or	r3,r3,r2
 1001b9c:	00804034 	movhi	r2,256
 1001ba0:	10962404 	addi	r2,r2,22672
 1001ba4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1001ba8:	00804034 	movhi	r2,256
 1001bac:	10962404 	addi	r2,r2,22672
 1001bb0:	10800017 	ldw	r2,0(r2)
 1001bb4:	100170fa 	wrctl	ienable,r2
 1001bb8:	e0bffd17 	ldw	r2,-12(fp)
 1001bbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1001bc0:	e0bffa17 	ldw	r2,-24(fp)
 1001bc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1001bc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1001bcc:	e037883a 	mov	sp,fp
 1001bd0:	df000017 	ldw	fp,0(sp)
 1001bd4:	dec00104 	addi	sp,sp,4
 1001bd8:	f800283a 	ret

01001bdc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1001bdc:	defff904 	addi	sp,sp,-28
 1001be0:	df000615 	stw	fp,24(sp)
 1001be4:	df000604 	addi	fp,sp,24
 1001be8:	e13ffe15 	stw	r4,-8(fp)
 1001bec:	e17fff15 	stw	r5,-4(fp)
 1001bf0:	e0bfff17 	ldw	r2,-4(fp)
 1001bf4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1001bf8:	0005303a 	rdctl	r2,status
 1001bfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1001c00:	e0fffb17 	ldw	r3,-20(fp)
 1001c04:	00bfff84 	movi	r2,-2
 1001c08:	1884703a 	and	r2,r3,r2
 1001c0c:	1001703a 	wrctl	status,r2
  
  return context;
 1001c10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1001c14:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1001c18:	e0fffc17 	ldw	r3,-16(fp)
 1001c1c:	00800044 	movi	r2,1
 1001c20:	10c4983a 	sll	r2,r2,r3
 1001c24:	0084303a 	nor	r2,zero,r2
 1001c28:	1007883a 	mov	r3,r2
 1001c2c:	00804034 	movhi	r2,256
 1001c30:	10962404 	addi	r2,r2,22672
 1001c34:	10800017 	ldw	r2,0(r2)
 1001c38:	1886703a 	and	r3,r3,r2
 1001c3c:	00804034 	movhi	r2,256
 1001c40:	10962404 	addi	r2,r2,22672
 1001c44:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1001c48:	00804034 	movhi	r2,256
 1001c4c:	10962404 	addi	r2,r2,22672
 1001c50:	10800017 	ldw	r2,0(r2)
 1001c54:	100170fa 	wrctl	ienable,r2
 1001c58:	e0bffd17 	ldw	r2,-12(fp)
 1001c5c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1001c60:	e0bffa17 	ldw	r2,-24(fp)
 1001c64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1001c68:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1001c6c:	e037883a 	mov	sp,fp
 1001c70:	df000017 	ldw	fp,0(sp)
 1001c74:	dec00104 	addi	sp,sp,4
 1001c78:	f800283a 	ret

01001c7c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1001c7c:	defffc04 	addi	sp,sp,-16
 1001c80:	df000315 	stw	fp,12(sp)
 1001c84:	df000304 	addi	fp,sp,12
 1001c88:	e13ffe15 	stw	r4,-8(fp)
 1001c8c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1001c90:	000530fa 	rdctl	r2,ienable
 1001c94:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1001c98:	e0ffff17 	ldw	r3,-4(fp)
 1001c9c:	00800044 	movi	r2,1
 1001ca0:	10c4983a 	sll	r2,r2,r3
 1001ca4:	1007883a 	mov	r3,r2
 1001ca8:	e0bffd17 	ldw	r2,-12(fp)
 1001cac:	1884703a 	and	r2,r3,r2
 1001cb0:	1004c03a 	cmpne	r2,r2,zero
}
 1001cb4:	e037883a 	mov	sp,fp
 1001cb8:	df000017 	ldw	fp,0(sp)
 1001cbc:	dec00104 	addi	sp,sp,4
 1001cc0:	f800283a 	ret

01001cc4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1001cc4:	defff404 	addi	sp,sp,-48
 1001cc8:	dfc00b15 	stw	ra,44(sp)
 1001ccc:	df000a15 	stw	fp,40(sp)
 1001cd0:	df000a04 	addi	fp,sp,40
 1001cd4:	e13ffb15 	stw	r4,-20(fp)
 1001cd8:	e17ffc15 	stw	r5,-16(fp)
 1001cdc:	e1bffd15 	stw	r6,-12(fp)
 1001ce0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1001ce4:	00bffa84 	movi	r2,-22
 1001ce8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1001cec:	e0bffc17 	ldw	r2,-16(fp)
 1001cf0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1001cf4:	e0bff917 	ldw	r2,-28(fp)
 1001cf8:	10800808 	cmpgei	r2,r2,32
 1001cfc:	1000291e 	bne	r2,zero,1001da4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1001d00:	0005303a 	rdctl	r2,status
 1001d04:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1001d08:	e0fff717 	ldw	r3,-36(fp)
 1001d0c:	00bfff84 	movi	r2,-2
 1001d10:	1884703a 	and	r2,r3,r2
 1001d14:	1001703a 	wrctl	status,r2
  
  return context;
 1001d18:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1001d1c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1001d20:	e0bff917 	ldw	r2,-28(fp)
 1001d24:	00c04034 	movhi	r3,256
 1001d28:	18d62804 	addi	r3,r3,22688
 1001d2c:	100490fa 	slli	r2,r2,3
 1001d30:	10c7883a 	add	r3,r2,r3
 1001d34:	e0bffd17 	ldw	r2,-12(fp)
 1001d38:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1001d3c:	e0bff917 	ldw	r2,-28(fp)
 1001d40:	00c04034 	movhi	r3,256
 1001d44:	18d62804 	addi	r3,r3,22688
 1001d48:	100490fa 	slli	r2,r2,3
 1001d4c:	10c5883a 	add	r2,r2,r3
 1001d50:	10c00104 	addi	r3,r2,4
 1001d54:	e0bffe17 	ldw	r2,-8(fp)
 1001d58:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1001d5c:	e0bffd17 	ldw	r2,-12(fp)
 1001d60:	1005003a 	cmpeq	r2,r2,zero
 1001d64:	1000051e 	bne	r2,zero,1001d7c <alt_iic_isr_register+0xb8>
 1001d68:	e17ff917 	ldw	r5,-28(fp)
 1001d6c:	e13ffb17 	ldw	r4,-20(fp)
 1001d70:	1001b400 	call	1001b40 <alt_ic_irq_enable>
 1001d74:	e0bfff15 	stw	r2,-4(fp)
 1001d78:	00000406 	br	1001d8c <alt_iic_isr_register+0xc8>
 1001d7c:	e17ff917 	ldw	r5,-28(fp)
 1001d80:	e13ffb17 	ldw	r4,-20(fp)
 1001d84:	1001bdc0 	call	1001bdc <alt_ic_irq_disable>
 1001d88:	e0bfff15 	stw	r2,-4(fp)
 1001d8c:	e0bfff17 	ldw	r2,-4(fp)
 1001d90:	e0bffa15 	stw	r2,-24(fp)
 1001d94:	e0bff817 	ldw	r2,-32(fp)
 1001d98:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1001d9c:	e0bff617 	ldw	r2,-40(fp)
 1001da0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1001da4:	e0bffa17 	ldw	r2,-24(fp)
}
 1001da8:	e037883a 	mov	sp,fp
 1001dac:	dfc00117 	ldw	ra,4(sp)
 1001db0:	df000017 	ldw	fp,0(sp)
 1001db4:	dec00204 	addi	sp,sp,8
 1001db8:	f800283a 	ret

01001dbc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1001dbc:	defff804 	addi	sp,sp,-32
 1001dc0:	dfc00715 	stw	ra,28(sp)
 1001dc4:	df000615 	stw	fp,24(sp)
 1001dc8:	dc000515 	stw	r16,20(sp)
 1001dcc:	df000504 	addi	fp,sp,20
 1001dd0:	e13ffc15 	stw	r4,-16(fp)
 1001dd4:	e17ffd15 	stw	r5,-12(fp)
 1001dd8:	e1bffe15 	stw	r6,-8(fp)
 1001ddc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1001de0:	e13ffd17 	ldw	r4,-12(fp)
 1001de4:	e17ffe17 	ldw	r5,-8(fp)
 1001de8:	e1bfff17 	ldw	r6,-4(fp)
 1001dec:	10020040 	call	1002004 <open>
 1001df0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1001df4:	e0bffb17 	ldw	r2,-20(fp)
 1001df8:	1004803a 	cmplt	r2,r2,zero
 1001dfc:	10001f1e 	bne	r2,zero,1001e7c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1001e00:	e13ffb17 	ldw	r4,-20(fp)
 1001e04:	04004034 	movhi	r16,256
 1001e08:	840f1c04 	addi	r16,r16,15472
 1001e0c:	01400304 	movi	r5,12
 1001e10:	1002ad80 	call	1002ad8 <__mulsi3>
 1001e14:	1405883a 	add	r2,r2,r16
 1001e18:	10c00017 	ldw	r3,0(r2)
 1001e1c:	e0bffc17 	ldw	r2,-16(fp)
 1001e20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1001e24:	e13ffb17 	ldw	r4,-20(fp)
 1001e28:	04004034 	movhi	r16,256
 1001e2c:	840f1c04 	addi	r16,r16,15472
 1001e30:	01400304 	movi	r5,12
 1001e34:	1002ad80 	call	1002ad8 <__mulsi3>
 1001e38:	1405883a 	add	r2,r2,r16
 1001e3c:	10800104 	addi	r2,r2,4
 1001e40:	10c00017 	ldw	r3,0(r2)
 1001e44:	e0bffc17 	ldw	r2,-16(fp)
 1001e48:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1001e4c:	e13ffb17 	ldw	r4,-20(fp)
 1001e50:	04004034 	movhi	r16,256
 1001e54:	840f1c04 	addi	r16,r16,15472
 1001e58:	01400304 	movi	r5,12
 1001e5c:	1002ad80 	call	1002ad8 <__mulsi3>
 1001e60:	1405883a 	add	r2,r2,r16
 1001e64:	10800204 	addi	r2,r2,8
 1001e68:	10c00017 	ldw	r3,0(r2)
 1001e6c:	e0bffc17 	ldw	r2,-16(fp)
 1001e70:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1001e74:	e13ffb17 	ldw	r4,-20(fp)
 1001e78:	10021f00 	call	10021f0 <alt_release_fd>
  }
} 
 1001e7c:	e037883a 	mov	sp,fp
 1001e80:	dfc00217 	ldw	ra,8(sp)
 1001e84:	df000117 	ldw	fp,4(sp)
 1001e88:	dc000017 	ldw	r16,0(sp)
 1001e8c:	dec00304 	addi	sp,sp,12
 1001e90:	f800283a 	ret

01001e94 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1001e94:	defffb04 	addi	sp,sp,-20
 1001e98:	dfc00415 	stw	ra,16(sp)
 1001e9c:	df000315 	stw	fp,12(sp)
 1001ea0:	df000304 	addi	fp,sp,12
 1001ea4:	e13ffd15 	stw	r4,-12(fp)
 1001ea8:	e17ffe15 	stw	r5,-8(fp)
 1001eac:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1001eb0:	01004034 	movhi	r4,256
 1001eb4:	210f1f04 	addi	r4,r4,15484
 1001eb8:	e17ffd17 	ldw	r5,-12(fp)
 1001ebc:	01800044 	movi	r6,1
 1001ec0:	01c07fc4 	movi	r7,511
 1001ec4:	1001dbc0 	call	1001dbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1001ec8:	01004034 	movhi	r4,256
 1001ecc:	210f1c04 	addi	r4,r4,15472
 1001ed0:	e17ffe17 	ldw	r5,-8(fp)
 1001ed4:	000d883a 	mov	r6,zero
 1001ed8:	01c07fc4 	movi	r7,511
 1001edc:	1001dbc0 	call	1001dbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1001ee0:	01004034 	movhi	r4,256
 1001ee4:	210f2204 	addi	r4,r4,15496
 1001ee8:	e17fff17 	ldw	r5,-4(fp)
 1001eec:	01800044 	movi	r6,1
 1001ef0:	01c07fc4 	movi	r7,511
 1001ef4:	1001dbc0 	call	1001dbc <alt_open_fd>
}  
 1001ef8:	e037883a 	mov	sp,fp
 1001efc:	dfc00117 	ldw	ra,4(sp)
 1001f00:	df000017 	ldw	fp,0(sp)
 1001f04:	dec00204 	addi	sp,sp,8
 1001f08:	f800283a 	ret

01001f0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1001f0c:	defffa04 	addi	sp,sp,-24
 1001f10:	dfc00515 	stw	ra,20(sp)
 1001f14:	df000415 	stw	fp,16(sp)
 1001f18:	dc000315 	stw	r16,12(sp)
 1001f1c:	df000304 	addi	fp,sp,12
 1001f20:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1001f24:	e0bffe17 	ldw	r2,-8(fp)
 1001f28:	10800217 	ldw	r2,8(r2)
 1001f2c:	10d00034 	orhi	r3,r2,16384
 1001f30:	e0bffe17 	ldw	r2,-8(fp)
 1001f34:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1001f38:	e03ffd15 	stw	zero,-12(fp)
 1001f3c:	00002306 	br	1001fcc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1001f40:	e13ffd17 	ldw	r4,-12(fp)
 1001f44:	04004034 	movhi	r16,256
 1001f48:	840f1c04 	addi	r16,r16,15472
 1001f4c:	01400304 	movi	r5,12
 1001f50:	1002ad80 	call	1002ad8 <__mulsi3>
 1001f54:	1405883a 	add	r2,r2,r16
 1001f58:	10c00017 	ldw	r3,0(r2)
 1001f5c:	e0bffe17 	ldw	r2,-8(fp)
 1001f60:	10800017 	ldw	r2,0(r2)
 1001f64:	1880161e 	bne	r3,r2,1001fc0 <alt_file_locked+0xb4>
 1001f68:	e13ffd17 	ldw	r4,-12(fp)
 1001f6c:	04004034 	movhi	r16,256
 1001f70:	840f1c04 	addi	r16,r16,15472
 1001f74:	01400304 	movi	r5,12
 1001f78:	1002ad80 	call	1002ad8 <__mulsi3>
 1001f7c:	1405883a 	add	r2,r2,r16
 1001f80:	10800204 	addi	r2,r2,8
 1001f84:	10800017 	ldw	r2,0(r2)
 1001f88:	1004403a 	cmpge	r2,r2,zero
 1001f8c:	10000c1e 	bne	r2,zero,1001fc0 <alt_file_locked+0xb4>
 1001f90:	e13ffd17 	ldw	r4,-12(fp)
 1001f94:	01400304 	movi	r5,12
 1001f98:	1002ad80 	call	1002ad8 <__mulsi3>
 1001f9c:	1007883a 	mov	r3,r2
 1001fa0:	00804034 	movhi	r2,256
 1001fa4:	108f1c04 	addi	r2,r2,15472
 1001fa8:	1887883a 	add	r3,r3,r2
 1001fac:	e0bffe17 	ldw	r2,-8(fp)
 1001fb0:	18800326 	beq	r3,r2,1001fc0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1001fb4:	00bffcc4 	movi	r2,-13
 1001fb8:	e0bfff15 	stw	r2,-4(fp)
 1001fbc:	00000a06 	br	1001fe8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1001fc0:	e0bffd17 	ldw	r2,-12(fp)
 1001fc4:	10800044 	addi	r2,r2,1
 1001fc8:	e0bffd15 	stw	r2,-12(fp)
 1001fcc:	00804034 	movhi	r2,256
 1001fd0:	10908104 	addi	r2,r2,16900
 1001fd4:	10800017 	ldw	r2,0(r2)
 1001fd8:	1007883a 	mov	r3,r2
 1001fdc:	e0bffd17 	ldw	r2,-12(fp)
 1001fe0:	18bfd72e 	bgeu	r3,r2,1001f40 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1001fe4:	e03fff15 	stw	zero,-4(fp)
 1001fe8:	e0bfff17 	ldw	r2,-4(fp)
}
 1001fec:	e037883a 	mov	sp,fp
 1001ff0:	dfc00217 	ldw	ra,8(sp)
 1001ff4:	df000117 	ldw	fp,4(sp)
 1001ff8:	dc000017 	ldw	r16,0(sp)
 1001ffc:	dec00304 	addi	sp,sp,12
 1002000:	f800283a 	ret

01002004 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1002004:	defff404 	addi	sp,sp,-48
 1002008:	dfc00b15 	stw	ra,44(sp)
 100200c:	df000a15 	stw	fp,40(sp)
 1002010:	df000a04 	addi	fp,sp,40
 1002014:	e13ffb15 	stw	r4,-20(fp)
 1002018:	e17ffc15 	stw	r5,-16(fp)
 100201c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1002020:	00bfffc4 	movi	r2,-1
 1002024:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1002028:	00bffb44 	movi	r2,-19
 100202c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1002030:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1002034:	e13ffb17 	ldw	r4,-20(fp)
 1002038:	01404034 	movhi	r5,256
 100203c:	29507f04 	addi	r5,r5,16892
 1002040:	1001a400 	call	1001a40 <alt_find_dev>
 1002044:	e0bffa15 	stw	r2,-24(fp)
 1002048:	e0bffa17 	ldw	r2,-24(fp)
 100204c:	1004c03a 	cmpne	r2,r2,zero
 1002050:	1000051e 	bne	r2,zero,1002068 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1002054:	e13ffb17 	ldw	r4,-20(fp)
 1002058:	100242c0 	call	100242c <alt_find_file>
 100205c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1002060:	00800044 	movi	r2,1
 1002064:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1002068:	e0bffa17 	ldw	r2,-24(fp)
 100206c:	1005003a 	cmpeq	r2,r2,zero
 1002070:	1000311e 	bne	r2,zero,1002138 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1002074:	e13ffa17 	ldw	r4,-24(fp)
 1002078:	100254c0 	call	100254c <alt_get_fd>
 100207c:	e0bff815 	stw	r2,-32(fp)
 1002080:	e0bff817 	ldw	r2,-32(fp)
 1002084:	1004403a 	cmpge	r2,r2,zero
 1002088:	1000031e 	bne	r2,zero,1002098 <open+0x94>
    {
      status = index;
 100208c:	e0bff817 	ldw	r2,-32(fp)
 1002090:	e0bff715 	stw	r2,-36(fp)
 1002094:	00002a06 	br	1002140 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1002098:	e13ff817 	ldw	r4,-32(fp)
 100209c:	01400304 	movi	r5,12
 10020a0:	1002ad80 	call	1002ad8 <__mulsi3>
 10020a4:	1007883a 	mov	r3,r2
 10020a8:	00804034 	movhi	r2,256
 10020ac:	108f1c04 	addi	r2,r2,15472
 10020b0:	1885883a 	add	r2,r3,r2
 10020b4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10020b8:	e0fffc17 	ldw	r3,-16(fp)
 10020bc:	00900034 	movhi	r2,16384
 10020c0:	10bfffc4 	addi	r2,r2,-1
 10020c4:	1886703a 	and	r3,r3,r2
 10020c8:	e0bff917 	ldw	r2,-28(fp)
 10020cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10020d0:	e0bff617 	ldw	r2,-40(fp)
 10020d4:	1004c03a 	cmpne	r2,r2,zero
 10020d8:	1000061e 	bne	r2,zero,10020f4 <open+0xf0>
 10020dc:	e13ff917 	ldw	r4,-28(fp)
 10020e0:	1001f0c0 	call	1001f0c <alt_file_locked>
 10020e4:	e0bff715 	stw	r2,-36(fp)
 10020e8:	e0bff717 	ldw	r2,-36(fp)
 10020ec:	1004803a 	cmplt	r2,r2,zero
 10020f0:	1000131e 	bne	r2,zero,1002140 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 10020f4:	e0bffa17 	ldw	r2,-24(fp)
 10020f8:	10800317 	ldw	r2,12(r2)
 10020fc:	1005003a 	cmpeq	r2,r2,zero
 1002100:	1000091e 	bne	r2,zero,1002128 <open+0x124>
 1002104:	e0bffa17 	ldw	r2,-24(fp)
 1002108:	10800317 	ldw	r2,12(r2)
 100210c:	e13ff917 	ldw	r4,-28(fp)
 1002110:	e17ffb17 	ldw	r5,-20(fp)
 1002114:	e1bffc17 	ldw	r6,-16(fp)
 1002118:	e1fffd17 	ldw	r7,-12(fp)
 100211c:	103ee83a 	callr	r2
 1002120:	e0bfff15 	stw	r2,-4(fp)
 1002124:	00000106 	br	100212c <open+0x128>
 1002128:	e03fff15 	stw	zero,-4(fp)
 100212c:	e0bfff17 	ldw	r2,-4(fp)
 1002130:	e0bff715 	stw	r2,-36(fp)
 1002134:	00000206 	br	1002140 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1002138:	00bffb44 	movi	r2,-19
 100213c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1002140:	e0bff717 	ldw	r2,-36(fp)
 1002144:	1004403a 	cmpge	r2,r2,zero
 1002148:	1000091e 	bne	r2,zero,1002170 <open+0x16c>
  {
    alt_release_fd (index);  
 100214c:	e13ff817 	ldw	r4,-32(fp)
 1002150:	10021f00 	call	10021f0 <alt_release_fd>
    ALT_ERRNO = -status;
 1002154:	10021900 	call	1002190 <alt_get_errno>
 1002158:	e0fff717 	ldw	r3,-36(fp)
 100215c:	00c7c83a 	sub	r3,zero,r3
 1002160:	10c00015 	stw	r3,0(r2)
    return -1;
 1002164:	00bfffc4 	movi	r2,-1
 1002168:	e0bffe15 	stw	r2,-8(fp)
 100216c:	00000206 	br	1002178 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1002170:	e0bff817 	ldw	r2,-32(fp)
 1002174:	e0bffe15 	stw	r2,-8(fp)
 1002178:	e0bffe17 	ldw	r2,-8(fp)
}
 100217c:	e037883a 	mov	sp,fp
 1002180:	dfc00117 	ldw	ra,4(sp)
 1002184:	df000017 	ldw	fp,0(sp)
 1002188:	dec00204 	addi	sp,sp,8
 100218c:	f800283a 	ret

01002190 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002190:	defffd04 	addi	sp,sp,-12
 1002194:	dfc00215 	stw	ra,8(sp)
 1002198:	df000115 	stw	fp,4(sp)
 100219c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10021a0:	00804034 	movhi	r2,256
 10021a4:	10908204 	addi	r2,r2,16904
 10021a8:	10800017 	ldw	r2,0(r2)
 10021ac:	1005003a 	cmpeq	r2,r2,zero
 10021b0:	1000061e 	bne	r2,zero,10021cc <alt_get_errno+0x3c>
 10021b4:	00804034 	movhi	r2,256
 10021b8:	10908204 	addi	r2,r2,16904
 10021bc:	10800017 	ldw	r2,0(r2)
 10021c0:	103ee83a 	callr	r2
 10021c4:	e0bfff15 	stw	r2,-4(fp)
 10021c8:	00000306 	br	10021d8 <alt_get_errno+0x48>
 10021cc:	00804034 	movhi	r2,256
 10021d0:	10962704 	addi	r2,r2,22684
 10021d4:	e0bfff15 	stw	r2,-4(fp)
 10021d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10021dc:	e037883a 	mov	sp,fp
 10021e0:	dfc00117 	ldw	ra,4(sp)
 10021e4:	df000017 	ldw	fp,0(sp)
 10021e8:	dec00204 	addi	sp,sp,8
 10021ec:	f800283a 	ret

010021f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10021f0:	defffc04 	addi	sp,sp,-16
 10021f4:	dfc00315 	stw	ra,12(sp)
 10021f8:	df000215 	stw	fp,8(sp)
 10021fc:	dc000115 	stw	r16,4(sp)
 1002200:	df000104 	addi	fp,sp,4
 1002204:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1002208:	e0bfff17 	ldw	r2,-4(fp)
 100220c:	108000d0 	cmplti	r2,r2,3
 1002210:	10000f1e 	bne	r2,zero,1002250 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 1002214:	e13fff17 	ldw	r4,-4(fp)
 1002218:	04004034 	movhi	r16,256
 100221c:	840f1c04 	addi	r16,r16,15472
 1002220:	01400304 	movi	r5,12
 1002224:	1002ad80 	call	1002ad8 <__mulsi3>
 1002228:	1405883a 	add	r2,r2,r16
 100222c:	10800204 	addi	r2,r2,8
 1002230:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1002234:	e13fff17 	ldw	r4,-4(fp)
 1002238:	04004034 	movhi	r16,256
 100223c:	840f1c04 	addi	r16,r16,15472
 1002240:	01400304 	movi	r5,12
 1002244:	1002ad80 	call	1002ad8 <__mulsi3>
 1002248:	1405883a 	add	r2,r2,r16
 100224c:	10000015 	stw	zero,0(r2)
  }
}
 1002250:	e037883a 	mov	sp,fp
 1002254:	dfc00217 	ldw	ra,8(sp)
 1002258:	df000117 	ldw	fp,4(sp)
 100225c:	dc000017 	ldw	r16,0(sp)
 1002260:	dec00304 	addi	sp,sp,12
 1002264:	f800283a 	ret

01002268 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1002268:	defffa04 	addi	sp,sp,-24
 100226c:	df000515 	stw	fp,20(sp)
 1002270:	df000504 	addi	fp,sp,20
 1002274:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1002278:	0005303a 	rdctl	r2,status
 100227c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1002280:	e0fffd17 	ldw	r3,-12(fp)
 1002284:	00bfff84 	movi	r2,-2
 1002288:	1884703a 	and	r2,r3,r2
 100228c:	1001703a 	wrctl	status,r2
  
  return context;
 1002290:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1002294:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1002298:	e0bfff17 	ldw	r2,-4(fp)
 100229c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10022a0:	e0bffc17 	ldw	r2,-16(fp)
 10022a4:	10c00017 	ldw	r3,0(r2)
 10022a8:	e0bffc17 	ldw	r2,-16(fp)
 10022ac:	10800117 	ldw	r2,4(r2)
 10022b0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10022b4:	e0bffc17 	ldw	r2,-16(fp)
 10022b8:	10c00117 	ldw	r3,4(r2)
 10022bc:	e0bffc17 	ldw	r2,-16(fp)
 10022c0:	10800017 	ldw	r2,0(r2)
 10022c4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10022c8:	e0fffc17 	ldw	r3,-16(fp)
 10022cc:	e0bffc17 	ldw	r2,-16(fp)
 10022d0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10022d4:	e0fffc17 	ldw	r3,-16(fp)
 10022d8:	e0bffc17 	ldw	r2,-16(fp)
 10022dc:	18800015 	stw	r2,0(r3)
 10022e0:	e0bffe17 	ldw	r2,-8(fp)
 10022e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10022e8:	e0bffb17 	ldw	r2,-20(fp)
 10022ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10022f0:	e037883a 	mov	sp,fp
 10022f4:	df000017 	ldw	fp,0(sp)
 10022f8:	dec00104 	addi	sp,sp,4
 10022fc:	f800283a 	ret

01002300 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1002300:	defffb04 	addi	sp,sp,-20
 1002304:	dfc00415 	stw	ra,16(sp)
 1002308:	df000315 	stw	fp,12(sp)
 100230c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1002310:	d0a00817 	ldw	r2,-32736(gp)
 1002314:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1002318:	d0a5aa17 	ldw	r2,-26968(gp)
 100231c:	10800044 	addi	r2,r2,1
 1002320:	d0a5aa15 	stw	r2,-26968(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1002324:	00003106 	br	10023ec <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1002328:	e0bffe17 	ldw	r2,-8(fp)
 100232c:	10800017 	ldw	r2,0(r2)
 1002330:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1002334:	e0bffe17 	ldw	r2,-8(fp)
 1002338:	10800403 	ldbu	r2,16(r2)
 100233c:	10803fcc 	andi	r2,r2,255
 1002340:	1005003a 	cmpeq	r2,r2,zero
 1002344:	1000051e 	bne	r2,zero,100235c <alt_tick+0x5c>
 1002348:	d0a5aa17 	ldw	r2,-26968(gp)
 100234c:	1004c03a 	cmpne	r2,r2,zero
 1002350:	1000021e 	bne	r2,zero,100235c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1002354:	e0bffe17 	ldw	r2,-8(fp)
 1002358:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100235c:	e0bffe17 	ldw	r2,-8(fp)
 1002360:	10c00217 	ldw	r3,8(r2)
 1002364:	d0a5aa17 	ldw	r2,-26968(gp)
 1002368:	10c01e36 	bltu	r2,r3,10023e4 <alt_tick+0xe4>
 100236c:	e0bffe17 	ldw	r2,-8(fp)
 1002370:	10800403 	ldbu	r2,16(r2)
 1002374:	10803fcc 	andi	r2,r2,255
 1002378:	1004c03a 	cmpne	r2,r2,zero
 100237c:	1000191e 	bne	r2,zero,10023e4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1002380:	e0bffe17 	ldw	r2,-8(fp)
 1002384:	10c00317 	ldw	r3,12(r2)
 1002388:	e0bffe17 	ldw	r2,-8(fp)
 100238c:	11000517 	ldw	r4,20(r2)
 1002390:	183ee83a 	callr	r3
 1002394:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1002398:	e0bffd17 	ldw	r2,-12(fp)
 100239c:	1004c03a 	cmpne	r2,r2,zero
 10023a0:	1000031e 	bne	r2,zero,10023b0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 10023a4:	e13ffe17 	ldw	r4,-8(fp)
 10023a8:	10022680 	call	1002268 <alt_alarm_stop>
 10023ac:	00000d06 	br	10023e4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10023b0:	e0bffe17 	ldw	r2,-8(fp)
 10023b4:	10c00217 	ldw	r3,8(r2)
 10023b8:	e0bffd17 	ldw	r2,-12(fp)
 10023bc:	1887883a 	add	r3,r3,r2
 10023c0:	e0bffe17 	ldw	r2,-8(fp)
 10023c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10023c8:	e0bffe17 	ldw	r2,-8(fp)
 10023cc:	10c00217 	ldw	r3,8(r2)
 10023d0:	d0a5aa17 	ldw	r2,-26968(gp)
 10023d4:	1880032e 	bgeu	r3,r2,10023e4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10023d8:	e0fffe17 	ldw	r3,-8(fp)
 10023dc:	00800044 	movi	r2,1
 10023e0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10023e4:	e0bfff17 	ldw	r2,-4(fp)
 10023e8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10023ec:	d0e00804 	addi	r3,gp,-32736
 10023f0:	e0bffe17 	ldw	r2,-8(fp)
 10023f4:	10ffcc1e 	bne	r2,r3,1002328 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10023f8:	e037883a 	mov	sp,fp
 10023fc:	dfc00117 	ldw	ra,4(sp)
 1002400:	df000017 	ldw	fp,0(sp)
 1002404:	dec00204 	addi	sp,sp,8
 1002408:	f800283a 	ret

0100240c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100240c:	deffff04 	addi	sp,sp,-4
 1002410:	df000015 	stw	fp,0(sp)
 1002414:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1002418:	000170fa 	wrctl	ienable,zero
}
 100241c:	e037883a 	mov	sp,fp
 1002420:	df000017 	ldw	fp,0(sp)
 1002424:	dec00104 	addi	sp,sp,4
 1002428:	f800283a 	ret

0100242c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100242c:	defffa04 	addi	sp,sp,-24
 1002430:	dfc00515 	stw	ra,20(sp)
 1002434:	df000415 	stw	fp,16(sp)
 1002438:	df000404 	addi	fp,sp,16
 100243c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1002440:	00804034 	movhi	r2,256
 1002444:	10907d04 	addi	r2,r2,16884
 1002448:	10800017 	ldw	r2,0(r2)
 100244c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1002450:	00003306 	br	1002520 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1002454:	e0bffd17 	ldw	r2,-12(fp)
 1002458:	11000217 	ldw	r4,8(r2)
 100245c:	100277c0 	call	100277c <strlen>
 1002460:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1002464:	e0bffd17 	ldw	r2,-12(fp)
 1002468:	10c00217 	ldw	r3,8(r2)
 100246c:	e0bffc17 	ldw	r2,-16(fp)
 1002470:	1885883a 	add	r2,r3,r2
 1002474:	10bfffc4 	addi	r2,r2,-1
 1002478:	10800003 	ldbu	r2,0(r2)
 100247c:	10803fcc 	andi	r2,r2,255
 1002480:	1080201c 	xori	r2,r2,128
 1002484:	10bfe004 	addi	r2,r2,-128
 1002488:	10800bd8 	cmpnei	r2,r2,47
 100248c:	1000031e 	bne	r2,zero,100249c <alt_find_file+0x70>
    {
      len -= 1;
 1002490:	e0bffc17 	ldw	r2,-16(fp)
 1002494:	10bfffc4 	addi	r2,r2,-1
 1002498:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100249c:	e0bffc17 	ldw	r2,-16(fp)
 10024a0:	1007883a 	mov	r3,r2
 10024a4:	e0bffe17 	ldw	r2,-8(fp)
 10024a8:	1885883a 	add	r2,r3,r2
 10024ac:	10800003 	ldbu	r2,0(r2)
 10024b0:	10803fcc 	andi	r2,r2,255
 10024b4:	1080201c 	xori	r2,r2,128
 10024b8:	10bfe004 	addi	r2,r2,-128
 10024bc:	10800be0 	cmpeqi	r2,r2,47
 10024c0:	10000a1e 	bne	r2,zero,10024ec <alt_find_file+0xc0>
 10024c4:	e0bffc17 	ldw	r2,-16(fp)
 10024c8:	1007883a 	mov	r3,r2
 10024cc:	e0bffe17 	ldw	r2,-8(fp)
 10024d0:	1885883a 	add	r2,r3,r2
 10024d4:	10800003 	ldbu	r2,0(r2)
 10024d8:	10803fcc 	andi	r2,r2,255
 10024dc:	1080201c 	xori	r2,r2,128
 10024e0:	10bfe004 	addi	r2,r2,-128
 10024e4:	1004c03a 	cmpne	r2,r2,zero
 10024e8:	10000a1e 	bne	r2,zero,1002514 <alt_find_file+0xe8>
 10024ec:	e0bffd17 	ldw	r2,-12(fp)
 10024f0:	11000217 	ldw	r4,8(r2)
 10024f4:	e1bffc17 	ldw	r6,-16(fp)
 10024f8:	e17ffe17 	ldw	r5,-8(fp)
 10024fc:	10026680 	call	1002668 <memcmp>
 1002500:	1004c03a 	cmpne	r2,r2,zero
 1002504:	1000031e 	bne	r2,zero,1002514 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1002508:	e0bffd17 	ldw	r2,-12(fp)
 100250c:	e0bfff15 	stw	r2,-4(fp)
 1002510:	00000806 	br	1002534 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1002514:	e0bffd17 	ldw	r2,-12(fp)
 1002518:	10800017 	ldw	r2,0(r2)
 100251c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1002520:	00c04034 	movhi	r3,256
 1002524:	18d07d04 	addi	r3,r3,16884
 1002528:	e0bffd17 	ldw	r2,-12(fp)
 100252c:	10ffc91e 	bne	r2,r3,1002454 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1002530:	e03fff15 	stw	zero,-4(fp)
 1002534:	e0bfff17 	ldw	r2,-4(fp)
}
 1002538:	e037883a 	mov	sp,fp
 100253c:	dfc00117 	ldw	ra,4(sp)
 1002540:	df000017 	ldw	fp,0(sp)
 1002544:	dec00204 	addi	sp,sp,8
 1002548:	f800283a 	ret

0100254c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100254c:	defffa04 	addi	sp,sp,-24
 1002550:	dfc00515 	stw	ra,20(sp)
 1002554:	df000415 	stw	fp,16(sp)
 1002558:	dc000315 	stw	r16,12(sp)
 100255c:	df000304 	addi	fp,sp,12
 1002560:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1002564:	00bffa04 	movi	r2,-24
 1002568:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100256c:	e03ffe15 	stw	zero,-8(fp)
 1002570:	00002006 	br	10025f4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 1002574:	e13ffe17 	ldw	r4,-8(fp)
 1002578:	04004034 	movhi	r16,256
 100257c:	840f1c04 	addi	r16,r16,15472
 1002580:	01400304 	movi	r5,12
 1002584:	1002ad80 	call	1002ad8 <__mulsi3>
 1002588:	1405883a 	add	r2,r2,r16
 100258c:	10800017 	ldw	r2,0(r2)
 1002590:	1004c03a 	cmpne	r2,r2,zero
 1002594:	1000141e 	bne	r2,zero,10025e8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 1002598:	e13ffe17 	ldw	r4,-8(fp)
 100259c:	04004034 	movhi	r16,256
 10025a0:	840f1c04 	addi	r16,r16,15472
 10025a4:	01400304 	movi	r5,12
 10025a8:	1002ad80 	call	1002ad8 <__mulsi3>
 10025ac:	1407883a 	add	r3,r2,r16
 10025b0:	e0bfff17 	ldw	r2,-4(fp)
 10025b4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10025b8:	00804034 	movhi	r2,256
 10025bc:	10908104 	addi	r2,r2,16900
 10025c0:	10c00017 	ldw	r3,0(r2)
 10025c4:	e0bffe17 	ldw	r2,-8(fp)
 10025c8:	1880040e 	bge	r3,r2,10025dc <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 10025cc:	00c04034 	movhi	r3,256
 10025d0:	18d08104 	addi	r3,r3,16900
 10025d4:	e0bffe17 	ldw	r2,-8(fp)
 10025d8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 10025dc:	e0bffe17 	ldw	r2,-8(fp)
 10025e0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 10025e4:	00000606 	br	1002600 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10025e8:	e0bffe17 	ldw	r2,-8(fp)
 10025ec:	10800044 	addi	r2,r2,1
 10025f0:	e0bffe15 	stw	r2,-8(fp)
 10025f4:	e0bffe17 	ldw	r2,-8(fp)
 10025f8:	10800810 	cmplti	r2,r2,32
 10025fc:	103fdd1e 	bne	r2,zero,1002574 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1002600:	e0bffd17 	ldw	r2,-12(fp)
}
 1002604:	e037883a 	mov	sp,fp
 1002608:	dfc00217 	ldw	ra,8(sp)
 100260c:	df000117 	ldw	fp,4(sp)
 1002610:	dc000017 	ldw	r16,0(sp)
 1002614:	dec00304 	addi	sp,sp,12
 1002618:	f800283a 	ret

0100261c <atexit>:
 100261c:	200b883a 	mov	r5,r4
 1002620:	000d883a 	mov	r6,zero
 1002624:	0009883a 	mov	r4,zero
 1002628:	000f883a 	mov	r7,zero
 100262c:	10027f01 	jmpi	10027f0 <__register_exitproc>

01002630 <exit>:
 1002630:	defffe04 	addi	sp,sp,-8
 1002634:	000b883a 	mov	r5,zero
 1002638:	dc000015 	stw	r16,0(sp)
 100263c:	dfc00115 	stw	ra,4(sp)
 1002640:	2021883a 	mov	r16,r4
 1002644:	10029280 	call	1002928 <__call_exitprocs>
 1002648:	00804034 	movhi	r2,256
 100264c:	10908704 	addi	r2,r2,16924
 1002650:	11000017 	ldw	r4,0(r2)
 1002654:	20800f17 	ldw	r2,60(r4)
 1002658:	10000126 	beq	r2,zero,1002660 <exit+0x30>
 100265c:	103ee83a 	callr	r2
 1002660:	8009883a 	mov	r4,r16
 1002664:	1002b500 	call	1002b50 <_exit>

01002668 <memcmp>:
 1002668:	00c000c4 	movi	r3,3
 100266c:	1980032e 	bgeu	r3,r6,100267c <memcmp+0x14>
 1002670:	2144b03a 	or	r2,r4,r5
 1002674:	10c4703a 	and	r2,r2,r3
 1002678:	10000f26 	beq	r2,zero,10026b8 <memcmp+0x50>
 100267c:	31ffffc4 	addi	r7,r6,-1
 1002680:	3000061e 	bne	r6,zero,100269c <memcmp+0x34>
 1002684:	00000a06 	br	10026b0 <memcmp+0x48>
 1002688:	39ffffc4 	addi	r7,r7,-1
 100268c:	00bfffc4 	movi	r2,-1
 1002690:	21000044 	addi	r4,r4,1
 1002694:	29400044 	addi	r5,r5,1
 1002698:	38800526 	beq	r7,r2,10026b0 <memcmp+0x48>
 100269c:	20c00003 	ldbu	r3,0(r4)
 10026a0:	28800003 	ldbu	r2,0(r5)
 10026a4:	18bff826 	beq	r3,r2,1002688 <memcmp+0x20>
 10026a8:	1885c83a 	sub	r2,r3,r2
 10026ac:	f800283a 	ret
 10026b0:	0005883a 	mov	r2,zero
 10026b4:	f800283a 	ret
 10026b8:	180f883a 	mov	r7,r3
 10026bc:	20c00017 	ldw	r3,0(r4)
 10026c0:	28800017 	ldw	r2,0(r5)
 10026c4:	18bfed1e 	bne	r3,r2,100267c <memcmp+0x14>
 10026c8:	31bfff04 	addi	r6,r6,-4
 10026cc:	21000104 	addi	r4,r4,4
 10026d0:	29400104 	addi	r5,r5,4
 10026d4:	39bff936 	bltu	r7,r6,10026bc <memcmp+0x54>
 10026d8:	003fe806 	br	100267c <memcmp+0x14>

010026dc <memcpy>:
 10026dc:	01c003c4 	movi	r7,15
 10026e0:	2007883a 	mov	r3,r4
 10026e4:	3980032e 	bgeu	r7,r6,10026f4 <memcpy+0x18>
 10026e8:	2904b03a 	or	r2,r5,r4
 10026ec:	108000cc 	andi	r2,r2,3
 10026f0:	10000926 	beq	r2,zero,1002718 <memcpy+0x3c>
 10026f4:	30000626 	beq	r6,zero,1002710 <memcpy+0x34>
 10026f8:	30cd883a 	add	r6,r6,r3
 10026fc:	28800003 	ldbu	r2,0(r5)
 1002700:	29400044 	addi	r5,r5,1
 1002704:	18800005 	stb	r2,0(r3)
 1002708:	18c00044 	addi	r3,r3,1
 100270c:	30fffb1e 	bne	r6,r3,10026fc <memcpy+0x20>
 1002710:	2005883a 	mov	r2,r4
 1002714:	f800283a 	ret
 1002718:	3811883a 	mov	r8,r7
 100271c:	200f883a 	mov	r7,r4
 1002720:	28c00017 	ldw	r3,0(r5)
 1002724:	31bffc04 	addi	r6,r6,-16
 1002728:	38c00015 	stw	r3,0(r7)
 100272c:	28800117 	ldw	r2,4(r5)
 1002730:	38800115 	stw	r2,4(r7)
 1002734:	28c00217 	ldw	r3,8(r5)
 1002738:	38c00215 	stw	r3,8(r7)
 100273c:	28800317 	ldw	r2,12(r5)
 1002740:	29400404 	addi	r5,r5,16
 1002744:	38800315 	stw	r2,12(r7)
 1002748:	39c00404 	addi	r7,r7,16
 100274c:	41bff436 	bltu	r8,r6,1002720 <memcpy+0x44>
 1002750:	008000c4 	movi	r2,3
 1002754:	1180072e 	bgeu	r2,r6,1002774 <memcpy+0x98>
 1002758:	1007883a 	mov	r3,r2
 100275c:	28800017 	ldw	r2,0(r5)
 1002760:	31bfff04 	addi	r6,r6,-4
 1002764:	29400104 	addi	r5,r5,4
 1002768:	38800015 	stw	r2,0(r7)
 100276c:	39c00104 	addi	r7,r7,4
 1002770:	19bffa36 	bltu	r3,r6,100275c <memcpy+0x80>
 1002774:	3807883a 	mov	r3,r7
 1002778:	003fde06 	br	10026f4 <memcpy+0x18>

0100277c <strlen>:
 100277c:	208000cc 	andi	r2,r4,3
 1002780:	2011883a 	mov	r8,r4
 1002784:	1000161e 	bne	r2,zero,10027e0 <strlen+0x64>
 1002788:	20c00017 	ldw	r3,0(r4)
 100278c:	017fbff4 	movhi	r5,65279
 1002790:	297fbfc4 	addi	r5,r5,-257
 1002794:	01e02074 	movhi	r7,32897
 1002798:	39e02004 	addi	r7,r7,-32640
 100279c:	1945883a 	add	r2,r3,r5
 10027a0:	11c4703a 	and	r2,r2,r7
 10027a4:	00c6303a 	nor	r3,zero,r3
 10027a8:	1886703a 	and	r3,r3,r2
 10027ac:	18000c1e 	bne	r3,zero,10027e0 <strlen+0x64>
 10027b0:	280d883a 	mov	r6,r5
 10027b4:	380b883a 	mov	r5,r7
 10027b8:	21000104 	addi	r4,r4,4
 10027bc:	20800017 	ldw	r2,0(r4)
 10027c0:	1187883a 	add	r3,r2,r6
 10027c4:	1946703a 	and	r3,r3,r5
 10027c8:	0084303a 	nor	r2,zero,r2
 10027cc:	10c4703a 	and	r2,r2,r3
 10027d0:	103ff926 	beq	r2,zero,10027b8 <strlen+0x3c>
 10027d4:	20800007 	ldb	r2,0(r4)
 10027d8:	10000326 	beq	r2,zero,10027e8 <strlen+0x6c>
 10027dc:	21000044 	addi	r4,r4,1
 10027e0:	20800007 	ldb	r2,0(r4)
 10027e4:	103ffd1e 	bne	r2,zero,10027dc <strlen+0x60>
 10027e8:	2205c83a 	sub	r2,r4,r8
 10027ec:	f800283a 	ret

010027f0 <__register_exitproc>:
 10027f0:	defffa04 	addi	sp,sp,-24
 10027f4:	00804034 	movhi	r2,256
 10027f8:	10908704 	addi	r2,r2,16924
 10027fc:	dc000015 	stw	r16,0(sp)
 1002800:	14000017 	ldw	r16,0(r2)
 1002804:	dd000415 	stw	r20,16(sp)
 1002808:	2829883a 	mov	r20,r5
 100280c:	81405217 	ldw	r5,328(r16)
 1002810:	dcc00315 	stw	r19,12(sp)
 1002814:	dc800215 	stw	r18,8(sp)
 1002818:	dc400115 	stw	r17,4(sp)
 100281c:	dfc00515 	stw	ra,20(sp)
 1002820:	2023883a 	mov	r17,r4
 1002824:	3027883a 	mov	r19,r6
 1002828:	3825883a 	mov	r18,r7
 100282c:	28002526 	beq	r5,zero,10028c4 <__register_exitproc+0xd4>
 1002830:	29000117 	ldw	r4,4(r5)
 1002834:	008007c4 	movi	r2,31
 1002838:	11002716 	blt	r2,r4,10028d8 <__register_exitproc+0xe8>
 100283c:	8800101e 	bne	r17,zero,1002880 <__register_exitproc+0x90>
 1002840:	2105883a 	add	r2,r4,r4
 1002844:	1085883a 	add	r2,r2,r2
 1002848:	20c00044 	addi	r3,r4,1
 100284c:	1145883a 	add	r2,r2,r5
 1002850:	0009883a 	mov	r4,zero
 1002854:	15000215 	stw	r20,8(r2)
 1002858:	28c00115 	stw	r3,4(r5)
 100285c:	2005883a 	mov	r2,r4
 1002860:	dfc00517 	ldw	ra,20(sp)
 1002864:	dd000417 	ldw	r20,16(sp)
 1002868:	dcc00317 	ldw	r19,12(sp)
 100286c:	dc800217 	ldw	r18,8(sp)
 1002870:	dc400117 	ldw	r17,4(sp)
 1002874:	dc000017 	ldw	r16,0(sp)
 1002878:	dec00604 	addi	sp,sp,24
 100287c:	f800283a 	ret
 1002880:	29802204 	addi	r6,r5,136
 1002884:	00800044 	movi	r2,1
 1002888:	110e983a 	sll	r7,r2,r4
 100288c:	30c04017 	ldw	r3,256(r6)
 1002890:	2105883a 	add	r2,r4,r4
 1002894:	1085883a 	add	r2,r2,r2
 1002898:	1185883a 	add	r2,r2,r6
 100289c:	19c6b03a 	or	r3,r3,r7
 10028a0:	14802015 	stw	r18,128(r2)
 10028a4:	14c00015 	stw	r19,0(r2)
 10028a8:	00800084 	movi	r2,2
 10028ac:	30c04015 	stw	r3,256(r6)
 10028b0:	88bfe31e 	bne	r17,r2,1002840 <__register_exitproc+0x50>
 10028b4:	30804117 	ldw	r2,260(r6)
 10028b8:	11c4b03a 	or	r2,r2,r7
 10028bc:	30804115 	stw	r2,260(r6)
 10028c0:	003fdf06 	br	1002840 <__register_exitproc+0x50>
 10028c4:	00804034 	movhi	r2,256
 10028c8:	10966804 	addi	r2,r2,22944
 10028cc:	100b883a 	mov	r5,r2
 10028d0:	80805215 	stw	r2,328(r16)
 10028d4:	003fd606 	br	1002830 <__register_exitproc+0x40>
 10028d8:	00800034 	movhi	r2,0
 10028dc:	10800004 	addi	r2,r2,0
 10028e0:	1000021e 	bne	r2,zero,10028ec <__register_exitproc+0xfc>
 10028e4:	013fffc4 	movi	r4,-1
 10028e8:	003fdc06 	br	100285c <__register_exitproc+0x6c>
 10028ec:	01006404 	movi	r4,400
 10028f0:	103ee83a 	callr	r2
 10028f4:	1007883a 	mov	r3,r2
 10028f8:	103ffa26 	beq	r2,zero,10028e4 <__register_exitproc+0xf4>
 10028fc:	80805217 	ldw	r2,328(r16)
 1002900:	180b883a 	mov	r5,r3
 1002904:	18000115 	stw	zero,4(r3)
 1002908:	18800015 	stw	r2,0(r3)
 100290c:	80c05215 	stw	r3,328(r16)
 1002910:	18006215 	stw	zero,392(r3)
 1002914:	18006315 	stw	zero,396(r3)
 1002918:	0009883a 	mov	r4,zero
 100291c:	883fc826 	beq	r17,zero,1002840 <__register_exitproc+0x50>
 1002920:	003fd706 	br	1002880 <__register_exitproc+0x90>

01002924 <register_fini>:
 1002924:	f800283a 	ret

01002928 <__call_exitprocs>:
 1002928:	00804034 	movhi	r2,256
 100292c:	10908704 	addi	r2,r2,16924
 1002930:	10800017 	ldw	r2,0(r2)
 1002934:	defff304 	addi	sp,sp,-52
 1002938:	df000b15 	stw	fp,44(sp)
 100293c:	d8800115 	stw	r2,4(sp)
 1002940:	00800034 	movhi	r2,0
 1002944:	10800004 	addi	r2,r2,0
 1002948:	1005003a 	cmpeq	r2,r2,zero
 100294c:	d8800215 	stw	r2,8(sp)
 1002950:	d8800117 	ldw	r2,4(sp)
 1002954:	dd400815 	stw	r21,32(sp)
 1002958:	dd000715 	stw	r20,28(sp)
 100295c:	10805204 	addi	r2,r2,328
 1002960:	dfc00c15 	stw	ra,48(sp)
 1002964:	ddc00a15 	stw	r23,40(sp)
 1002968:	dd800915 	stw	r22,36(sp)
 100296c:	dcc00615 	stw	r19,24(sp)
 1002970:	dc800515 	stw	r18,20(sp)
 1002974:	dc400415 	stw	r17,16(sp)
 1002978:	dc000315 	stw	r16,12(sp)
 100297c:	282b883a 	mov	r21,r5
 1002980:	2039883a 	mov	fp,r4
 1002984:	d8800015 	stw	r2,0(sp)
 1002988:	2829003a 	cmpeq	r20,r5,zero
 100298c:	d8800117 	ldw	r2,4(sp)
 1002990:	14405217 	ldw	r17,328(r2)
 1002994:	88001026 	beq	r17,zero,10029d8 <__call_exitprocs+0xb0>
 1002998:	ddc00017 	ldw	r23,0(sp)
 100299c:	88800117 	ldw	r2,4(r17)
 10029a0:	8c802204 	addi	r18,r17,136
 10029a4:	143fffc4 	addi	r16,r2,-1
 10029a8:	80000916 	blt	r16,zero,10029d0 <__call_exitprocs+0xa8>
 10029ac:	05bfffc4 	movi	r22,-1
 10029b0:	a000151e 	bne	r20,zero,1002a08 <__call_exitprocs+0xe0>
 10029b4:	8409883a 	add	r4,r16,r16
 10029b8:	2105883a 	add	r2,r4,r4
 10029bc:	1485883a 	add	r2,r2,r18
 10029c0:	10c02017 	ldw	r3,128(r2)
 10029c4:	a8c01126 	beq	r21,r3,1002a0c <__call_exitprocs+0xe4>
 10029c8:	843fffc4 	addi	r16,r16,-1
 10029cc:	85bff81e 	bne	r16,r22,10029b0 <__call_exitprocs+0x88>
 10029d0:	d8800217 	ldw	r2,8(sp)
 10029d4:	10003126 	beq	r2,zero,1002a9c <__call_exitprocs+0x174>
 10029d8:	dfc00c17 	ldw	ra,48(sp)
 10029dc:	df000b17 	ldw	fp,44(sp)
 10029e0:	ddc00a17 	ldw	r23,40(sp)
 10029e4:	dd800917 	ldw	r22,36(sp)
 10029e8:	dd400817 	ldw	r21,32(sp)
 10029ec:	dd000717 	ldw	r20,28(sp)
 10029f0:	dcc00617 	ldw	r19,24(sp)
 10029f4:	dc800517 	ldw	r18,20(sp)
 10029f8:	dc400417 	ldw	r17,16(sp)
 10029fc:	dc000317 	ldw	r16,12(sp)
 1002a00:	dec00d04 	addi	sp,sp,52
 1002a04:	f800283a 	ret
 1002a08:	8409883a 	add	r4,r16,r16
 1002a0c:	88c00117 	ldw	r3,4(r17)
 1002a10:	2105883a 	add	r2,r4,r4
 1002a14:	1445883a 	add	r2,r2,r17
 1002a18:	18ffffc4 	addi	r3,r3,-1
 1002a1c:	11800217 	ldw	r6,8(r2)
 1002a20:	1c001526 	beq	r3,r16,1002a78 <__call_exitprocs+0x150>
 1002a24:	10000215 	stw	zero,8(r2)
 1002a28:	303fe726 	beq	r6,zero,10029c8 <__call_exitprocs+0xa0>
 1002a2c:	00c00044 	movi	r3,1
 1002a30:	1c06983a 	sll	r3,r3,r16
 1002a34:	90804017 	ldw	r2,256(r18)
 1002a38:	8cc00117 	ldw	r19,4(r17)
 1002a3c:	1884703a 	and	r2,r3,r2
 1002a40:	10001426 	beq	r2,zero,1002a94 <__call_exitprocs+0x16c>
 1002a44:	90804117 	ldw	r2,260(r18)
 1002a48:	1884703a 	and	r2,r3,r2
 1002a4c:	10000c1e 	bne	r2,zero,1002a80 <__call_exitprocs+0x158>
 1002a50:	2105883a 	add	r2,r4,r4
 1002a54:	1485883a 	add	r2,r2,r18
 1002a58:	11400017 	ldw	r5,0(r2)
 1002a5c:	e009883a 	mov	r4,fp
 1002a60:	303ee83a 	callr	r6
 1002a64:	88800117 	ldw	r2,4(r17)
 1002a68:	98bfc81e 	bne	r19,r2,100298c <__call_exitprocs+0x64>
 1002a6c:	b8800017 	ldw	r2,0(r23)
 1002a70:	147fd526 	beq	r2,r17,10029c8 <__call_exitprocs+0xa0>
 1002a74:	003fc506 	br	100298c <__call_exitprocs+0x64>
 1002a78:	8c000115 	stw	r16,4(r17)
 1002a7c:	003fea06 	br	1002a28 <__call_exitprocs+0x100>
 1002a80:	2105883a 	add	r2,r4,r4
 1002a84:	1485883a 	add	r2,r2,r18
 1002a88:	11000017 	ldw	r4,0(r2)
 1002a8c:	303ee83a 	callr	r6
 1002a90:	003ff406 	br	1002a64 <__call_exitprocs+0x13c>
 1002a94:	303ee83a 	callr	r6
 1002a98:	003ff206 	br	1002a64 <__call_exitprocs+0x13c>
 1002a9c:	88800117 	ldw	r2,4(r17)
 1002aa0:	1000081e 	bne	r2,zero,1002ac4 <__call_exitprocs+0x19c>
 1002aa4:	89000017 	ldw	r4,0(r17)
 1002aa8:	20000726 	beq	r4,zero,1002ac8 <__call_exitprocs+0x1a0>
 1002aac:	b9000015 	stw	r4,0(r23)
 1002ab0:	8809883a 	mov	r4,r17
 1002ab4:	00000000 	call	0 <__alt_mem_onchip_memory>
 1002ab8:	bc400017 	ldw	r17,0(r23)
 1002abc:	883fb71e 	bne	r17,zero,100299c <__call_exitprocs+0x74>
 1002ac0:	003fc506 	br	10029d8 <__call_exitprocs+0xb0>
 1002ac4:	89000017 	ldw	r4,0(r17)
 1002ac8:	882f883a 	mov	r23,r17
 1002acc:	2023883a 	mov	r17,r4
 1002ad0:	883fb21e 	bne	r17,zero,100299c <__call_exitprocs+0x74>
 1002ad4:	003fc006 	br	10029d8 <__call_exitprocs+0xb0>

01002ad8 <__mulsi3>:
 1002ad8:	20000a26 	beq	r4,zero,1002b04 <__mulsi3+0x2c>
 1002adc:	0007883a 	mov	r3,zero
 1002ae0:	2080004c 	andi	r2,r4,1
 1002ae4:	1005003a 	cmpeq	r2,r2,zero
 1002ae8:	2008d07a 	srli	r4,r4,1
 1002aec:	1000011e 	bne	r2,zero,1002af4 <__mulsi3+0x1c>
 1002af0:	1947883a 	add	r3,r3,r5
 1002af4:	294b883a 	add	r5,r5,r5
 1002af8:	203ff91e 	bne	r4,zero,1002ae0 <__mulsi3+0x8>
 1002afc:	1805883a 	mov	r2,r3
 1002b00:	f800283a 	ret
 1002b04:	0007883a 	mov	r3,zero
 1002b08:	1805883a 	mov	r2,r3
 1002b0c:	f800283a 	ret

01002b10 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1002b10:	defffd04 	addi	sp,sp,-12
 1002b14:	df000215 	stw	fp,8(sp)
 1002b18:	df000204 	addi	fp,sp,8
 1002b1c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1002b20:	e0bfff17 	ldw	r2,-4(fp)
 1002b24:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1002b28:	e0bffe17 	ldw	r2,-8(fp)
 1002b2c:	1005003a 	cmpeq	r2,r2,zero
 1002b30:	1000021e 	bne	r2,zero,1002b3c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1002b34:	002af070 	cmpltui	zero,zero,43969
 1002b38:	00000106 	br	1002b40 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1002b3c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1002b40:	e037883a 	mov	sp,fp
 1002b44:	df000017 	ldw	fp,0(sp)
 1002b48:	dec00104 	addi	sp,sp,4
 1002b4c:	f800283a 	ret

01002b50 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1002b50:	defffd04 	addi	sp,sp,-12
 1002b54:	dfc00215 	stw	ra,8(sp)
 1002b58:	df000115 	stw	fp,4(sp)
 1002b5c:	df000104 	addi	fp,sp,4
 1002b60:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1002b64:	e13fff17 	ldw	r4,-4(fp)
 1002b68:	1002b100 	call	1002b10 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1002b6c:	003fff06 	br	1002b6c <_exit+0x1c>
 1002b70:	01002924 	muli	r4,zero,164
