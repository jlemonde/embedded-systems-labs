
lab2_cswitch.elf:     file format elf32-littlenios2
lab2_cswitch.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00016344 memsz 0x00016344 flags r-x
    LOAD off    0x00017364 vaddr 0x01016364 paddr 0x01017e74 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x00019984 vaddr 0x01019984 paddr 0x01019984 align 2**12
         filesz 0x00000000 memsz 0x0000958c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015cd8  010001bc  010001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004d0  01015e94  01015e94  00016e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  01016364  01017e74  00017364  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000958c  01019984  01019984  00019984  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00018e74  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e18  00000000  00000000  00018ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002271  00000000  00000000  00019cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030744  00000000  00000000  0001bf29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009373  00000000  00000000  0004c66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b8db  00000000  00000000  000559e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002660  00000000  00000000  000712bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002507  00000000  00000000  0007391c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d257  00000000  00000000  00075e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0008307c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009f8  00000000  00000000  00083090  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000884fa  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  00088500  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00088505  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00088506  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00088507  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00088512  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008851d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000f  00000000  00000000  00088528  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000051  00000000  00000000  00088537  2**0
                  CONTENTS, READONLY
 26 .jdi          0000509f  00000000  00000000  00088588  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0007119e  00000000  00000000  0008d627  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001bc l    d  .text	00000000 .text
01015e94 l    d  .rodata	00000000 .rodata
01016364 l    d  .rwdata	00000000 .rwdata
01019984 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ContextSwitch.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
01000708 l     F .text	00000058 __sprint_r
01015f5e l     O .rodata	00000010 blanks.3452
01015f4e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01002784 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010041ac l     F .text	00000058 std
010042b8 l     F .text	00000008 __fp_lock
010042c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01016364 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
01017dc4 l     O .rwdata	00000004 charset
01015f94 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010160dc l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100866c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01009798 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100a0d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100a134 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100a238 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100a35c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100a43c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100a59c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0100a7e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01017de8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100aaa0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
01017dec l     O .rwdata	00000004 lockid
010199c8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
01017df0 l     O .rwdata	00000004 lockid
010199d0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0100c4d8 l     F .text	00000044 OS_InitMisc
0100c51c l     F .text	0000006c OS_InitRdyList
0100c680 l     F .text	000000e0 OS_InitTCBList
0100c3fc l     F .text	000000dc OS_InitEventList
0100c588 l     F .text	0000007c OS_InitTaskIdle
0100c604 l     F .text	0000007c OS_InitTaskStat
0100c8f4 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0100e814 l     F .text	00000110 OS_FlagTaskRdy
0100e56c l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
01016d20 l     O .rwdata	0000106c jtag_uart_0
01017d8c l     O .rwdata	0000002c DE2_LCD
01013244 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010134fc l     F .text	000002c4 altera_avalon_jtag_uart_irq
010137c0 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01013fd8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101482c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01014cd0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01014e20 l     F .text	000000f8 alt_file_locked
010150a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01015bcc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
01015e24 l     F .text	00000040 alt_sim_halt
01005f9c g     F .text	00000094 _mprec_log10
01017e3e g     O .rwdata	00000002 OSTaskNameSize
01006088 g     F .text	00000088 __any_on
01007840 g     F .text	00000070 _isatty_r
010160b4 g     O .rodata	00000028 __mprec_tinytens
0100a5fc g     F .text	000000c8 alt_main
010005e0 g     F .text	000000a0 _puts_r
01022c80 g     O .bss	00000100 alt_irq
010078b0 g     F .text	00000078 _lseek_r
0100f108 g     F .text	000000d4 OS_MemInit
01017e74 g       *ABS*	00000000 __flash_rwdata_start
01013130 g     F .text	00000064 OSTimeSet
01014154 g     F .text	00000034 alt_up_character_lcd_send_cmd
0100918c g     F .text	00000088 __eqdf2
01019988 g     O .bss	00000004 SemT1S1
0100b054 g     F .text	000006b4 OSEventPendMulti
01022f10 g       *ABS*	00000000 __alt_heap_start
010156ac g     F .text	00000020 OSTaskCreateHook
01019a5c g     O .bss	00002000 task1_stk
01000568 g     F .text	00000044 printf
01017e16 g     O .rwdata	00000002 OSMboxEn
0100b75c g     F .text	0000007c OSIntEnter
00100000 g       *ABS*	00000000 __alt_mem_sram
010072f8 g     F .text	00000068 __sseek
01004214 g     F .text	000000a4 __sinit
01017e26 g     O .rwdata	00000002 OSQEn
01004f20 g     F .text	00000084 _setlocale_r
01004314 g     F .text	0000009c __sfmoreglue
0100ad10 g     F .text	000000d0 __malloc_unlock
01015708 g     F .text	0000001c OSTaskStatHook
010199d8 g     O .bss	00000001 OSLockNesting
01017e64 g     O .rwdata	00000002 OSDataSize
010199d9 g     O .bss	00000001 OSRunning
01005a18 g     F .text	000000e0 memmove
01015740 g     F .text	0000001c OSInitHookBegin
01017e5c g     O .rwdata	00000002 OSTmrSize
01004304 g     F .text	00000010 _cleanup
01006110 g     F .text	000000bc _Balloc
010199dc g     O .bss	00000004 OSIdleCtr
0100929c g     F .text	00000088 __gtdf2
01015378 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
010140d8 g     F .text	0000007c get_DDRAM_addr
0100cc28 g     F .text	000002e0 OS_TCBInit
01000000 g     F .entry	0000000c __reset
0101998c g     O .bss	00000004 SemT0S1
01017e62 g     O .rwdata	00000002 OSTmrWheelTblSize
01000020 g       *ABS*	00000000 __flash_exceptions_start
01017e02 g     O .rwdata	00000002 OSEventSize
010199e0 g     O .bss	00000001 OSPrioHighRdy
010077cc g     F .text	00000074 _fstat_r
010156cc g     F .text	00000020 OSTaskDelHook
010199b4 g     O .bss	00000004 errno
01015358 g       .text	00000000 OSStartHighRdy
01011820 g     F .text	00000200 OSTaskCreateExt
0100e088 g     F .text	00000068 OSFlagPendGetFlagsRdy
01017e42 g     O .rwdata	00000002 OSTaskStatStkSize
0100d094 g     F .text	00000334 OSFlagAccept
0100f844 g     F .text	000000c8 OSQFlush
0100f1dc g     F .text	00000154 OSQAccept
010199c0 g     O .bss	00000004 alt_argv
0101fdb8 g       *ABS*	00000000 _gp
0101164c g     F .text	000001d4 OSTaskCreate
010110d8 g     F .text	00000574 OSTaskChangePrio
010199d4 g     O .bss	00000004 alt_heapsem
0100cf08 g     F .text	0000018c OSDebugInit
01011a20 g     F .text	0000040c OSTaskDel
01000234 g     F .text	00000110 task0
01016ba0 g     O .rwdata	00000180 alt_fd_list
0101fa5c g     O .bss	00000370 OSFlagTbl
0100c1d8 g     F .text	000000b8 OS_EventTaskRemove
01014954 g     F .text	00000094 alt_find_dev
01005978 g     F .text	000000a0 memcpy
01017e2c g     O .rwdata	00000002 OSRdyTblSize
010142ec g     F .text	0000004c alt_up_character_lcd_write_fd
010042f8 g     F .text	0000000c _cleanup_r
01009434 g     F .text	000000f8 __floatsidf
01014da8 g     F .text	00000078 alt_io_redirect
010093ac g     F .text	00000088 __ltdf2
01015e94 g       *ABS*	00000000 __DTOR_END__
01000680 g     F .text	00000014 puts
0100ade0 g     F .text	00000130 OSEventNameGet
01017e10 g     O .rwdata	00000002 OSFlagMax
01005eec g     F .text	000000b0 __ratio
0100b7d8 g     F .text	00000100 OSIntExit
01017e4a g     O .rwdata	00000002 OSTCBSize
010199e1 g     O .bss	00000001 OSPrioCur
01013a3c g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
010005ac g     F .text	00000034 _printf_r
010098d4 g     F .text	00000008 __udivsi3
0100a298 g     F .text	000000c4 isatty
01017e30 g     O .rwdata	00000002 OSStkWidth
01015fc4 g     O .rodata	000000c8 __mprec_tens
01017e24 g     O .rwdata	00000002 OSPtrSize
01004efc g     F .text	00000008 __locale_charset
01017e04 g     O .rwdata	00000002 OSEventTblSize
01015d80 g     F .text	000000a4 __fixunsdfsi
010152cc g       .text	00000000 OSCtxSw
010199a8 g     O .bss	00000004 __malloc_top_pad
010199e4 g     O .bss	00000004 OSTCBList
010199b8 g     O .bss	00000004 alt_fd_list_lock
01017dc0 g     O .rwdata	00000004 __mb_cur_max
01004f04 g     F .text	0000000c _localeconv_r
01006874 g     F .text	0000003c __i2b
010048e0 g     F .text	0000049c __sfvwrite_r
0101fdcc g     O .bss	00000c30 OSMemTbl
010199e8 g     O .bss	00000001 OSTickStepState
01007280 g     F .text	00000070 _sbrk_r
01017e28 g     O .rwdata	00000002 OSQMax
010209fc g     O .bss	00000800 OSTaskStatStk
0100ecf0 g     F .text	0000010c OSMemNameGet
01017e08 g     O .rwdata	00000002 OSFlagEn
01007928 g     F .text	00000078 _read_r
01017e4e g     O .rwdata	00000002 OSTimeTickHookEn
0100fda8 g     F .text	00000180 OSQPost
0100e924 g     F .text	000000ac OS_FlagUnlink
01016764 g     O .rwdata	0000000c __lc_ctype
01017de0 g     O .rwdata	00000004 alt_max_fd
0100c7b4 g     F .text	0000006c OS_MemCopy
0100c820 g     F .text	000000d4 OS_Sched
01009dd4 g     F .text	00000138 __unpack_d
010076a8 g     F .text	00000110 _fclose_r
0100ebec g     F .text	00000104 OSMemGet
01012154 g     F .text	000001c4 OSTaskNameSet
01004178 g     F .text	00000034 fflush
010199ac g     O .bss	00000004 __malloc_max_sbrked_mem
010199ec g     O .bss	00000004 OSCtxSwCtr
01015724 g     F .text	0000001c OSTimeTickHook
01017e12 g     O .rwdata	00000002 OSFlagNameSize
0100c290 g     F .text	00000104 OS_EventTaskRemoveMulti
01008afc g     F .text	00000074 __adddf3
0100c084 g     F .text	00000154 OS_EventTaskWaitMulti
01005dcc g     F .text	00000120 __b2d
01017e2a g     O .rwdata	00000002 OSQSize
0100800c g     F .text	00000660 __umoddi3
0100a4a8 g     F .text	000000f4 lseek
01010984 g     F .text	0000027c OSSemPend
01017dbc g     O .rwdata	00000004 _global_impure_ptr
01006c1c g     F .text	000005f4 _realloc_r
01017e14 g     O .rwdata	00000002 OSLowestPrio
01022f10 g       *ABS*	00000000 __bss_end
01014bd8 g     F .text	000000f8 alt_iic_isr_register
01015794 g     F .text	00000020 OSTCBInitHook
01017e5a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0101519c g     F .text	00000110 alt_tick
010079a0 g     F .text	0000066c __udivdi3
01017dfc g     O .rwdata	00000002 OSEventEn
0101608c g     O .rodata	00000028 __mprec_bigtens
01006afc g     F .text	00000120 __s2b
01017e56 g     O .rwdata	00000002 OSTmrCfgNameSize
01009604 g     F .text	00000194 __floatunsidf
01005cec g     F .text	00000060 __mcmp
010042e0 g     F .text	00000018 __fp_lock_all
01014b90 g     F .text	00000048 alt_ic_irq_enabled
0100e730 g     F .text	000000e4 OS_FlagInit
01015104 g     F .text	00000098 alt_alarm_stop
0101ba5c g     O .bss	00002000 task0_stk
01017e38 g     O .rwdata	00000002 OSTaskIdleStkSize
010003e4 g     F .text	00000078 statisticTask
01019a28 g     O .bss	00000004 alt_irq_active
01010510 g     F .text	000000c0 OSSemAccept
0100ef1c g     F .text	000000f0 OSMemPut
0100e9d0 g     F .text	0000021c OSMemCreate
010199f0 g     O .bss	00000004 OSIdleCtrMax
010000ec g     F .exceptions	000000d0 alt_irq_handler
01016b78 g     O .rwdata	00000028 alt_dev_null
01017e4c g     O .rwdata	00000002 OSTicksPerSec
010145d4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010152cc g       .text	00000000 OSIntCtxSw
0101475c g     F .text	0000001c alt_dcache_flush_all
01005bb8 g     F .text	00000070 __hi0bits
0100952c g     F .text	000000d8 __fixdfsi
0101da5c g     O .bss	00002000 stat_stk
010199f4 g     O .bss	00000004 OSTCBFreeList
01017e74 g       *ABS*	00000000 __ram_rwdata_end
01010c00 g     F .text	0000017c OSSemPendAbort
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory
01017dd8 g     O .rwdata	00000008 alt_dev_list
0100a97c g     F .text	00000124 write
01017e50 g     O .rwdata	00000002 OSVersionNbr
01016364 g       *ABS*	00000000 __ram_rodata_end
0100a160 g     F .text	000000d8 fstat
01017df8 g     O .rwdata	00000004 OSEndiannessTest
010069dc g     F .text	00000120 __pow5mult
0101999c g     O .bss	00000004 __nlocale_changed
010098dc g     F .text	00000008 __umodsi3
01017e0a g     O .rwdata	00000002 OSFlagGrpSize
01022f10 g       *ABS*	00000000 end
010133c4 g     F .text	00000138 altera_avalon_jtag_uart_init
0100ca98 g     F .text	000000c8 OS_TaskStat
01019990 g     O .bss	00000004 SemT0S0
01015e90 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01014048 g     F .text	00000090 alt_avalon_timer_sc_init
01009a40 g     F .text	00000080 __clzsi2
01013cfc g     F .text	000002dc altera_avalon_jtag_uart_write
01004204 g     F .text	00000004 __sfp_lock_acquire
01005894 g     F .text	000000e4 memchr
0100c760 g     F .text	00000054 OS_MemClr
010141fc g     F .text	00000078 alt_up_character_lcd_write
01000760 g     F .text	00001ec4 ___vfprintf_internal_r
0101539c g     F .text	00000310 OSTaskStkInit
01000344 g     F .text	000000a0 task1
010045cc g     F .text	00000314 _free_r
0100bde0 g     F .text	00000194 OS_EventTaskRdy
01015bd0 g     F .text	000001b0 __call_exitprocs
010199f8 g     O .bss	00000001 OSCPUUsage
010199a0 g     O .bss	00000004 __mlocale_changed
01017dcc g     O .rwdata	00000004 __malloc_sbrk_base
010001bc g     F .text	0000003c _start
01019a2c g     O .bss	00000004 _alt_tick_rate
0100f90c g     F .text	00000320 OSQPend
01012b18 g     F .text	0000014c OSTimeDly
010064d4 g     F .text	0000014c __lshift
01019a30 g     O .bss	00000004 _alt_nticks
0100a6c4 g     F .text	00000124 read
010131c8 g     F .text	0000007c alt_sys_init
01014460 g     F .text	000000b0 alt_up_character_lcd_shift_display
01015a98 g     F .text	00000134 __register_exitproc
010199f9 g     O .bss	00000001 OSTaskCtr
01012c64 g     F .text	00000258 OSTimeDlyHMSM
01006620 g     F .text	00000254 __multiply
01014510 g     F .text	00000090 alt_up_character_lcd_erase_pos
010138d4 g     F .text	00000074 altera_avalon_jtag_uart_close
010098e4 g     F .text	00000038 __mulsi3
01016364 g       *ABS*	00000000 __ram_rwdata_start
01015e94 g       *ABS*	00000000 __ram_rodata_start
01019a34 g     O .bss	00000028 __malloc_current_mallinfo
01017dfe g     O .rwdata	00000002 OSEventMax
010061cc g     F .text	0000017c __d2b
01010d7c g     F .text	00000128 OSSemPost
0100b964 g     F .text	000000e4 OSSchedUnlock
0101327c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
010158d4 g     F .text	00000104 alt_get_fd
010199fc g     O .bss	00000004 OSMemFreeList
0100bab8 g     F .text	000000ac OSStatInit
0100e498 g     F .text	000000d4 OSFlagQuery
01009f0c g     F .text	000000c8 __fpcmp_parts_d
01017e34 g     O .rwdata	00000002 OSTaskCreateExtEn
01007638 g     F .text	00000070 _close_r
01015a24 g     F .text	00000074 memcmp
0100bdc4 g     F .text	0000001c OS_Dummy
0101332c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01022f10 g       *ABS*	00000000 __alt_stack_base
01013374 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01002648 g     F .text	0000013c __swsetup_r
010211fc g     O .bss	000001e0 OSQTbl
01008f34 g     F .text	00000258 __divdf3
010043b0 g     F .text	000000f0 __sfp
01006030 g     F .text	00000058 __copybits
01016770 g     O .rwdata	00000408 __malloc_av_
01004210 g     F .text	00000004 __sinit_lock_release
01019a00 g     O .bss	00000004 OSTCBHighRdy
01008b70 g     F .text	000003c4 __muldf3
010073dc g     F .text	00000060 __sread
01019a04 g     O .bss	00000004 OSQFreeList
010157b4 g     F .text	00000120 alt_find_file
01014778 g     F .text	000000b4 alt_dev_llist_insert
0100ac08 g     F .text	00000108 __malloc_lock
0100a8c0 g     F .text	000000bc sbrk
0100af10 g     F .text	00000144 OSEventNameSet
01003f7c g     F .text	000001fc _fflush_r
01007570 g     F .text	000000c8 _calloc_r
01019a08 g     O .bss	00000001 OSRdyGrp
01019984 g       *ABS*	00000000 __bss_start
01005af8 g     F .text	00000098 memset
0100045c g     F .text	0000010c main
010199c4 g     O .bss	00000004 alt_envp
010199b0 g     O .bss	00000004 __malloc_max_total_mem
010132d4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0101621c g     O .rodata	00000100 OSUnMapTbl
01017e2e g     O .rwdata	00000002 OSSemEn
010143b0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0100e0f0 g     F .text	000003a8 OSFlagPost
010072f0 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010077b8 g     F .text	00000014 fclose
0100bf74 g     F .text	00000110 OS_EventTaskWait
0100cb60 g     F .text	000000c8 OS_TaskStatStkChk
01022d80 g     O .bss	00000190 _atexit0
01011e2c g     F .text	00000170 OSTaskDelReq
010029c8 g     F .text	000015b4 _dtoa_r
01005154 g     F .text	00000740 _malloc_r
01017de4 g     O .rwdata	00000004 alt_errno
0100ba48 g     F .text	00000070 OSStart
0100abac g     F .text	0000005c __env_unlock
01004e44 g     F .text	000000b8 _fwalk
01012318 g     F .text	00000218 OSTaskResume
0100f00c g     F .text	000000fc OSMemQuery
01017e40 g     O .rwdata	00000002 OSTaskStatEn
01017e1a g     O .rwdata	00000002 OSMemMax
0100ff28 g     F .text	00000188 OSQPostFront
01009814 g     F .text	00000060 __divsi3
01019a09 g     O .bss	00000003 OSRdyTbl
01017df4 g     O .rwdata	00000002 OSDebugEn
010160e8 g     O .rodata	00000014 __thenan_df
010141bc g     F .text	00000040 alt_up_character_lcd_open_dev
010044a0 g     F .text	0000012c _malloc_trim_r
01015e94 g       *ABS*	00000000 __CTOR_END__
01017e0c g     O .rwdata	00000002 OSFlagNodeSize
01017e54 g     O .rwdata	00000002 OSTmrCfgMax
01014188 g     F .text	00000034 alt_up_character_lcd_init
0100743c g     F .text	000000bc strcmp
0100f330 g     F .text	00000214 OSQCreate
01011f9c g     F .text	000001b8 OSTaskNameGet
01015e94 g       *ABS*	00000000 __flash_rodata_start
010100b0 g     F .text	00000234 OSQPostOpt
0100bb64 g     F .text	00000240 OSTimeTick
01017e3c g     O .rwdata	00000002 OSTaskMax
01015e94 g       *ABS*	00000000 __DTOR_LIST__
010105d0 g     F .text	00000114 OSSemCreate
01017e60 g     O .rwdata	00000002 OSTmrWheelSize
01009214 g     F .text	00000088 __nedf2
01017e36 g     O .rwdata	00000002 OSTaskDelEn
01010ea4 g     F .text	00000130 OSSemQuery
0100f544 g     F .text	00000300 OSQDel
0100fc2c g     F .text	0000017c OSQPendAbort
01013194 g     F .text	00000034 alt_irq_init
0100a848 g     F .text	00000078 alt_release_fd
010145a0 g     F .text	00000034 alt_up_character_lcd_cursor_off
010160fc g     O .rodata	00000100 __clz_tab
010199a4 g     O .bss	00000004 _PathLocale
010159d8 g     F .text	00000014 atexit
010074f8 g     F .text	00000078 _write_r
0100b8d8 g     F .text	0000008c OSSchedLock
01004fa4 g     F .text	0000001c setlocale
0100d3c8 g     F .text	0000013c OSFlagCreate
01017db8 g     O .rwdata	00000004 _impure_ptr
010199bc g     O .bss	00000004 alt_argc
010148f0 g     F .text	00000064 _do_dtors
01017e06 g     O .rwdata	00000002 OSEventMultiEn
0100d504 g     F .text	000002a8 OSFlagDel
01019a0c g     O .bss	00000004 OSEventFreeList
01000020 g       .exceptions	00000000 alt_irq_entry
01005d4c g     F .text	00000080 __ulp
01007210 g     F .text	00000040 __isinfd
0100da44 g     F .text	00000644 OSFlagPend
01017e52 g     O .rwdata	00000002 OSTmrEn
010042c8 g     F .text	00000018 __fp_unlock_all
01017dd0 g     O .rwdata	00000008 alt_fs_list
0100c964 g     F .text	00000080 OS_StrCopy
010001f8 g     F .text	0000003c printStackSize
01017e1c g     O .rwdata	00000002 OSMemNameSize
0101575c g     F .text	0000001c OSInitHookEnd
01000020 g       *ABS*	00000000 __ram_exceptions_start
01017e48 g     O .rwdata	00000002 OSTCBPrioTblMax
01004f10 g     F .text	00000010 localeconv
01017e44 g     O .rwdata	00000002 OSTaskStatStkChkEn
01014a04 g     F .text	00000050 alt_ic_isr_register
01017e18 g     O .rwdata	00000002 OSMemEn
01017e22 g     O .rwdata	00000002 OSMutexEn
01017e74 g       *ABS*	00000000 _edata
01022f10 g       *ABS*	00000000 _end
01019a10 g     O .bss	00000001 OSIntNesting
010001bc g       *ABS*	00000000 __ram_exceptions_end
01013948 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
01012ebc g     F .text	00000210 OSTimeDlyResume
0100d8f0 g     F .text	00000154 OSFlagNameSet
01012530 g     F .text	000001fc OSTaskStkChk
01014af0 g     F .text	000000a0 alt_ic_irq_disable
01017e1e g     O .rwdata	00000002 OSMemSize
01007360 g     F .text	0000007c __swrite
01017dc8 g     O .rwdata	00000004 __malloc_trim_threshold
010152ac g     F .text	00000020 altera_nios2_qsys_irq_init
01019a14 g     O .bss	00000004 OSTCBCur
010159ec g     F .text	00000038 exit
01017e20 g     O .rwdata	00000002 OSMemTblSize
01004d7c g     F .text	000000c8 _fwalk_reent
01006348 g     F .text	0000018c __mdiff
01009874 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01004208 g     F .text	00000004 __sfp_lock_release
0100b708 g     F .text	00000054 OSInit
01000000 g       *ABS*	00000000 __alt_mem_sdram
01012958 g     F .text	00000144 OSTaskQuery
01014274 g     F .text	00000078 alt_up_character_lcd_string
01010464 g     F .text	000000ac OS_QInit
0100c9e4 g     F .text	00000058 OS_StrLen
0100edfc g     F .text	00000120 OSMemNameSet
01017e3a g     O .rwdata	00000002 OSTaskProfileEn
01019a18 g     O .bss	00000004 OSTime
010213dc g     O .bss	00000800 OSTaskIdleStk
01015e64 g     F .text	0000002c _exit
01007250 g     F .text	00000030 __isnand
01014608 g     F .text	00000154 alt_alarm_start
0100d7ac g     F .text	00000144 OSFlagNameGet
010130cc g     F .text	00000064 OSTimeGet
0100991c g     F .text	00000124 __muldi3
01004fc0 g     F .text	00000194 __smakebuf_r
01000694 g     F .text	00000074 strlen
010156ec g     F .text	0000001c OSTaskSwHook
01014f18 g     F .text	0000018c open
01021bdc g     O .bss	00000b40 OSEventTbl
01009324 g     F .text	00000088 __gedf2
0102271c g     O .bss	00000510 OSTCBTbl
01010fd4 g     F .text	00000104 OSSemSet
01019994 g     O .bss	00000004 MemBuffer
01019984 g     O .bss	00000004 Mem
010149e8 g     F .text	0000001c alt_icache_flush_all
01014338 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01017e68 g     O .rwdata	00000004 alt_priority_mask
010106e4 g     F .text	000002a0 OSSemDel
01019a1c g     O .bss	00000004 OSFlagFreeList
01014a54 g     F .text	0000009c alt_ic_irq_enable
01017e00 g     O .rwdata	00000002 OSEventNameSize
01002624 g     F .text	00000024 __vfprintf_internal
01019a20 g     O .bss	00000001 OSStatRdy
01022c2c g     O .bss	00000054 OSTCBPrioTbl
0100ab00 g     F .text	000000ac __env_lock
01017e46 g     O .rwdata	00000002 OSTaskSwHookEn
01019998 g     O .bss	00000004 SemT1S0
01008a7c g     F .text	00000080 __subdf3
01005c28 g     F .text	000000c4 __lo0bits
01017e6c g     O .rwdata	00000008 alt_alarm_list
01017e0e g     O .rwdata	00000002 OSFlagWidth
0101488c g     F .text	00000064 _do_ctors
01009fd4 g     F .text	00000100 close
010199cc g     O .bss	00000004 alt_envsem
01019a24 g     O .bss	00000004 OSIdleCtrRun
0100bda4 g     F .text	00000020 OSVersion
01017e58 g     O .rwdata	00000002 OSTmrCfgWheelSize
0100a3bc g     F .text	00000080 alt_load
01012a9c g     F .text	0000007c OS_TaskStkClr
01009ac0 g     F .text	00000314 __pack_d
01017e32 g     O .rwdata	00000002 OSTaskCreateEn
0100c394 g     F .text	00000068 OS_EventWaitListInit
01015778 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0100420c g     F .text	00000004 __sinit_lock_acquire
010068b0 g     F .text	0000012c __multadd
0101272c g     F .text	0000022c OSTaskSuspend
01005b90 g     F .text	00000028 _Bfree
0100ca3c g     F .text	0000005c OS_TaskIdle
01017e5e g     O .rwdata	00000002 OSTmrTblSize
010102e4 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406f14 	ori	at,at,444
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10000fc:	100b75c0 	call	100b75c <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000100:	0005313a 	rdctl	r2,ipending
 1000104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100010c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000114:	00800044 	movi	r2,1
 1000118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100011c:	e0ffff17 	ldw	r3,-4(fp)
 1000120:	e0bffe17 	ldw	r2,-8(fp)
 1000124:	1884703a 	and	r2,r3,r2
 1000128:	1005003a 	cmpeq	r2,r2,zero
 100012c:	1000161e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1000130:	e0bffd17 	ldw	r2,-12(fp)
 1000134:	00c040b4 	movhi	r3,258
 1000138:	18cb2004 	addi	r3,r3,11392
 100013c:	100490fa 	slli	r2,r2,3
 1000140:	10c5883a 	add	r2,r2,r3
 1000144:	11400017 	ldw	r5,0(r2)
 1000148:	e0bffd17 	ldw	r2,-12(fp)
 100014c:	00c040b4 	movhi	r3,258
 1000150:	18cb2004 	addi	r3,r3,11392
 1000154:	100490fa 	slli	r2,r2,3
 1000158:	10c5883a 	add	r2,r2,r3
 100015c:	10800104 	addi	r2,r2,4
 1000160:	11000017 	ldw	r4,0(r2)
 1000164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe31e 	bne	r2,zero,1000110 <alt_irq_handler+0x24>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fde06 	br	100011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001a4:	100b7d80 	call	100b7d8 <OSIntExit>
}
 10001a8:	e037883a 	mov	sp,fp
 10001ac:	dfc00117 	ldw	ra,4(sp)
 10001b0:	df000017 	ldw	fp,0(sp)
 10001b4:	dec00204 	addi	sp,sp,8
 10001b8:	f800283a 	ret

Disassembly of section .text:

010001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001bc:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001c0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001c4:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c8:	d6bf6e14 	ori	gp,gp,64952
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001cc:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001d0:	10a66114 	ori	r2,r2,39300

    movhi r3, %hi(__bss_end)
 10001d4:	00c040b4 	movhi	r3,258
    ori r3, r3, %lo(__bss_end)
 10001d8:	18cbc414 	ori	r3,r3,12048

    beq r2, r3, 1f
 10001dc:	10c00326 	beq	r2,r3,10001ec <_start+0x30>

0:
    stw zero, (r2)
 10001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e8:	10fffd36 	bltu	r2,r3,10001e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001ec:	100a3bc0 	call	100a3bc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001f0:	100a5fc0 	call	100a5fc <alt_main>

010001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001f4:	003fff06 	br	10001f4 <alt_after_alt_main>

010001f8 <printStackSize>:
/* ----------------------------------------------- */


/* Called by StatisticTask */
void printStackSize(char* name, INT8U prio)
{
 10001f8:	defff904 	addi	sp,sp,-28
 10001fc:	dfc00615 	stw	ra,24(sp)
 1000200:	df000515 	stw	fp,20(sp)
 1000204:	df000504 	addi	fp,sp,20
 1000208:	e13ffe15 	stw	r4,-8(fp)
 100020c:	e17fff05 	stb	r5,-4(fp)
  INT8U err;
  OS_STK_DATA stk_data;

  err = OSTaskStkChk(prio, &stk_data);
 1000210:	e13fff03 	ldbu	r4,-4(fp)
 1000214:	e17ffc04 	addi	r5,fp,-16
 1000218:	10125300 	call	1012530 <OSTaskStkChk>
 100021c:	e0bffb05 	stb	r2,-20(fp)
  else
    {
      if (DEBUG == 1)
	printf("Stack Check Error!\n");
    }
}
 1000220:	e037883a 	mov	sp,fp
 1000224:	dfc00117 	ldw	ra,4(sp)
 1000228:	df000017 	ldw	fp,0(sp)
 100022c:	dec00204 	addi	sp,sp,8
 1000230:	f800283a 	ret

01000234 <task0>:

/* Prints a message and sleeps for given time interval */
void task0(void* pdata) {
 1000234:	defff904 	addi	sp,sp,-28
 1000238:	dfc00615 	stw	ra,24(sp)
 100023c:	df000515 	stw	fp,20(sp)
 1000240:	df000504 	addi	fp,sp,20
 1000244:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	INT16U timeout = 0;
 1000248:	e03ffe0d 	sth	zero,-8(fp)
	INT16S* tempo_buffer;
	INT8U aberrant = 0;
 100024c:	e03ffc85 	stb	zero,-14(fp)
	INT16U j = 0;					// number of iterations of measure_cswitch that aren't aberrant
 1000250:	e03ffc0d 	sth	zero,-16(fp)
	INT16U mean = 0;
 1000254:	e03ffb8d 	sth	zero,-18(fp)
	INT16U tempo = 0;
 1000258:	e03ffb0d 	sth	zero,-20(fp)

	tempo_buffer = OSMemGet(Mem, &err);
 100025c:	d126f317 	ldw	r4,-25652(gp)
 1000260:	e17ffe84 	addi	r5,fp,-6
 1000264:	100ebec0 	call	100ebec <OSMemGet>
 1000268:	e0bffd15 	stw	r2,-12(fp)
	*tempo_buffer = 1;
 100026c:	e0fffd17 	ldw	r3,-12(fp)
 1000270:	00800044 	movi	r2,1
 1000274:	1880000d 	sth	r2,0(r3)

	while (1) {
		OSSemPend(SemT0S0, timeout, &err);
 1000278:	d126f617 	ldw	r4,-25640(gp)
 100027c:	e17ffe0b 	ldhu	r5,-8(fp)
 1000280:	e1bffe84 	addi	r6,fp,-6
 1000284:	10109840 	call	1010984 <OSSemPend>
		if(!err) {
 1000288:	e0bffe83 	ldbu	r2,-6(fp)
 100028c:	10803fcc 	andi	r2,r2,255
 1000290:	1004c03a 	cmpne	r2,r2,zero
 1000294:	10000b1e 	bne	r2,zero,10002c4 <task0+0x90>
			OSMemPut(Mem,tempo_buffer);
 1000298:	d126f317 	ldw	r4,-25652(gp)
 100029c:	e17ffd17 	ldw	r5,-12(fp)
 10002a0:	100ef1c0 	call	100ef1c <OSMemPut>
			printf("Sending   : %d\n", *tempo_buffer);
 10002a4:	e0bffd17 	ldw	r2,-12(fp)
 10002a8:	1080000b 	ldhu	r2,0(r2)
 10002ac:	117fffcc 	andi	r5,r2,65535
 10002b0:	2960001c 	xori	r5,r5,32768
 10002b4:	29600004 	addi	r5,r5,-32768
 10002b8:	01004074 	movhi	r4,257
 10002bc:	2117a504 	addi	r4,r4,24212
 10002c0:	10005680 	call	1000568 <printf>
		}

		OSSemPost(SemT1S0);
 10002c4:	d126f817 	ldw	r4,-25632(gp)
 10002c8:	1010d7c0 	call	1010d7c <OSSemPost>


//		PERF_RESET(PERFORMANCE_COUNTER_BASE);
//		PERF_BEGIN(PERFORMANCE_COUNTER_BASE,0);

		OSSemPend(SemT0S1, timeout, &err); // Context Switch calculated here
 10002cc:	d126f517 	ldw	r4,-25644(gp)
 10002d0:	e17ffe0b 	ldhu	r5,-8(fp)
 10002d4:	e1bffe84 	addi	r6,fp,-6
 10002d8:	10109840 	call	1010984 <OSSemPend>
//						(int) (1000000* (float) mean / (float) alt_get_cpu_freq()), (int) j);
//			if(aberrant > 0) aberrant--;
//		}


		if(!err) {
 10002dc:	e0bffe83 	ldbu	r2,-6(fp)
 10002e0:	10803fcc 	andi	r2,r2,255
 10002e4:	1004c03a 	cmpne	r2,r2,zero
 10002e8:	1000131e 	bne	r2,zero,1000338 <task0+0x104>
			OSMemPut(Mem,tempo_buffer);
 10002ec:	d126f317 	ldw	r4,-25652(gp)
 10002f0:	e17ffd17 	ldw	r5,-12(fp)
 10002f4:	100ef1c0 	call	100ef1c <OSMemPut>
			printf("Receiving : %d\n", *tempo_buffer);
 10002f8:	e0bffd17 	ldw	r2,-12(fp)
 10002fc:	1080000b 	ldhu	r2,0(r2)
 1000300:	117fffcc 	andi	r5,r2,65535
 1000304:	2960001c 	xori	r5,r5,32768
 1000308:	29600004 	addi	r5,r5,-32768
 100030c:	01004074 	movhi	r4,257
 1000310:	2117a904 	addi	r4,r4,24228
 1000314:	10005680 	call	1000568 <printf>
			*tempo_buffer = -(*tempo_buffer) + 1;
 1000318:	e0bffd17 	ldw	r2,-12(fp)
 100031c:	1080000b 	ldhu	r2,0(r2)
 1000320:	1007883a 	mov	r3,r2
 1000324:	00800044 	movi	r2,1
 1000328:	10c5c83a 	sub	r2,r2,r3
 100032c:	1007883a 	mov	r3,r2
 1000330:	e0bffd17 	ldw	r2,-12(fp)
 1000334:	10c0000d 	sth	r3,0(r2)
		}

		OSSemPost(SemT0S0);
 1000338:	d126f617 	ldw	r4,-25640(gp)
 100033c:	1010d7c0 	call	1010d7c <OSSemPost>

		if(DEBUG)
			OSTimeDlyHMSM(0,0,0,4);
	}
 1000340:	003fcd06 	br	1000278 <task0+0x44>

01000344 <task1>:
}


/* Prints a message and sleeps for given time interval */
void task1(void* pdata) {
 1000344:	defffb04 	addi	sp,sp,-20
 1000348:	dfc00415 	stw	ra,16(sp)
 100034c:	df000315 	stw	fp,12(sp)
 1000350:	df000304 	addi	fp,sp,12
 1000354:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	INT16U timeout = 0;
 1000358:	e03ffe0d 	sth	zero,-8(fp)
	INT16S* tempo_buffer;

	while (1) {
		OSSemPend(SemT1S0, timeout, &err);
 100035c:	d126f817 	ldw	r4,-25632(gp)
 1000360:	e17ffe0b 	ldhu	r5,-8(fp)
 1000364:	e1bffe84 	addi	r6,fp,-6
 1000368:	10109840 	call	1010984 <OSSemPend>
		if(!err) {
 100036c:	e0bffe83 	ldbu	r2,-6(fp)
 1000370:	10803fcc 	andi	r2,r2,255
 1000374:	1004c03a 	cmpne	r2,r2,zero
 1000378:	1000041e 	bne	r2,zero,100038c <task1+0x48>
		tempo_buffer = OSMemGet(Mem,&err);
 100037c:	d126f317 	ldw	r4,-25652(gp)
 1000380:	e17ffe84 	addi	r5,fp,-6
 1000384:	100ebec0 	call	100ebec <OSMemGet>
 1000388:	e0bffd15 	stw	r2,-12(fp)
		}

		if(DEBUG)
			OSTimeDlyHMSM(0,0,0,4);

		OSSemPost(SemT1S1);
 100038c:	d126f417 	ldw	r4,-25648(gp)
 1000390:	1010d7c0 	call	1010d7c <OSSemPost>

		OSSemPend(SemT1S1, timeout, &err);
 1000394:	d126f417 	ldw	r4,-25648(gp)
 1000398:	e17ffe0b 	ldhu	r5,-8(fp)
 100039c:	e1bffe84 	addi	r6,fp,-6
 10003a0:	10109840 	call	1010984 <OSSemPend>
		if(!err) {
 10003a4:	e0bffe83 	ldbu	r2,-6(fp)
 10003a8:	10803fcc 	andi	r2,r2,255
 10003ac:	1004c03a 	cmpne	r2,r2,zero
 10003b0:	1000091e 	bne	r2,zero,10003d8 <task1+0x94>
		*tempo_buffer *= (-1);
 10003b4:	e0bffd17 	ldw	r2,-12(fp)
 10003b8:	1080000b 	ldhu	r2,0(r2)
 10003bc:	0085c83a 	sub	r2,zero,r2
 10003c0:	1007883a 	mov	r3,r2
 10003c4:	e0bffd17 	ldw	r2,-12(fp)
 10003c8:	10c0000d 	sth	r3,0(r2)
		OSMemPut(Mem,tempo_buffer);
 10003cc:	d126f317 	ldw	r4,-25652(gp)
 10003d0:	e17ffd17 	ldw	r5,-12(fp)
 10003d4:	100ef1c0 	call	100ef1c <OSMemPut>
		}

		OSSemPost(SemT0S1);
 10003d8:	d126f517 	ldw	r4,-25644(gp)
 10003dc:	1010d7c0 	call	1010d7c <OSSemPost>
	}
 10003e0:	003fde06 	br	100035c <task1+0x18>

010003e4 <statisticTask>:
}


/* Printing Statistics */
void statisticTask(void* pdata) {
 10003e4:	defffc04 	addi	sp,sp,-16
 10003e8:	dfc00315 	stw	ra,12(sp)
 10003ec:	df000215 	stw	fp,8(sp)
 10003f0:	df000204 	addi	fp,sp,8
 10003f4:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	INT16U timeout = 0;
 10003f8:	e03ffe0d 	sth	zero,-8(fp)
 10003fc:	00000006 	br	1000400 <statisticTask+0x1c>

	while (1) {
		OSSemPend(SemT0S0, timeout, &err);
 1000400:	d126f617 	ldw	r4,-25640(gp)
 1000404:	e17ffe0b 	ldhu	r5,-8(fp)
 1000408:	e1bffe84 	addi	r6,fp,-6
 100040c:	10109840 	call	1010984 <OSSemPend>
		if (!err) {
 1000410:	e0bffe83 	ldbu	r2,-6(fp)
 1000414:	10803fcc 	andi	r2,r2,255
 1000418:	1004c03a 	cmpne	r2,r2,zero
 100041c:	103ff81e 	bne	r2,zero,1000400 <statisticTask+0x1c>
			printStackSize("Task0", TASK0_PRIORITY);
 1000420:	01004074 	movhi	r4,257
 1000424:	2117ad04 	addi	r4,r4,24244
 1000428:	01400184 	movi	r5,6
 100042c:	10001f80 	call	10001f8 <printStackSize>
			printStackSize("Task1", TASK1_PRIORITY);
 1000430:	01004074 	movhi	r4,257
 1000434:	2117af04 	addi	r4,r4,24252
 1000438:	014001c4 	movi	r5,7
 100043c:	10001f80 	call	10001f8 <printStackSize>
			printStackSize("StatisticTask", TASK_STAT_PRIORITY);
 1000440:	01004074 	movhi	r4,257
 1000444:	2117b104 	addi	r4,r4,24260
 1000448:	01400304 	movi	r5,12
 100044c:	10001f80 	call	10001f8 <printStackSize>
			OSSemPost(SemT0S0);
 1000450:	d126f617 	ldw	r4,-25640(gp)
 1000454:	1010d7c0 	call	1010d7c <OSSemPost>
		}
	}
 1000458:	003fe906 	br	1000400 <statisticTask+0x1c>

0100045c <main>:
}


/* The main function creates two task and starts multi-tasking */
int main(void) {
 100045c:	defff804 	addi	sp,sp,-32
 1000460:	dfc00715 	stw	ra,28(sp)
 1000464:	df000615 	stw	fp,24(sp)
 1000468:	df000604 	addi	fp,sp,24
	printf("Lab 2 - ContextSwitch\n");
 100046c:	01004074 	movhi	r4,257
 1000470:	2117b504 	addi	r4,r4,24276
 1000474:	10006800 	call	1000680 <puts>

	INT8U err;

	OSInit();
 1000478:	100b7080 	call	100b708 <OSInit>

	OSTaskCreateExt(task0, 							// Pointer to task code
 100047c:	018040b4 	movhi	r6,258
 1000480:	31b69604 	addi	r6,r6,-9640
 1000484:	00800184 	movi	r2,6
 1000488:	d8800015 	stw	r2,0(sp)
 100048c:	008040b4 	movhi	r2,258
 1000490:	10ae9704 	addi	r2,r2,-17828
 1000494:	d8800115 	stw	r2,4(sp)
 1000498:	00820004 	movi	r2,2048
 100049c:	d8800215 	stw	r2,8(sp)
 10004a0:	d8000315 	stw	zero,12(sp)
 10004a4:	008000c4 	movi	r2,3
 10004a8:	d8800415 	stw	r2,16(sp)
 10004ac:	01004034 	movhi	r4,256
 10004b0:	21008d04 	addi	r4,r4,564
 10004b4:	000b883a 	mov	r5,zero
 10004b8:	01c00184 	movi	r7,6
 10004bc:	10118200 	call	1011820 <OSTaskCreateExt>
			NULL, 									// Pointer to user supplied memory (not needed)
			OS_TASK_OPT_STK_CHK | 					// Stack Checking enabled
				OS_TASK_OPT_STK_CLR 				// Stack Cleared
			);

	OSTaskCreateExt(task1, 							// Pointer to task code
 10004c0:	018040b4 	movhi	r6,258
 10004c4:	31ae9604 	addi	r6,r6,-17832
 10004c8:	008001c4 	movi	r2,7
 10004cc:	d8800015 	stw	r2,0(sp)
 10004d0:	008040b4 	movhi	r2,258
 10004d4:	10a69704 	addi	r2,r2,-26020
 10004d8:	d8800115 	stw	r2,4(sp)
 10004dc:	00820004 	movi	r2,2048
 10004e0:	d8800215 	stw	r2,8(sp)
 10004e4:	d8000315 	stw	zero,12(sp)
 10004e8:	008000c4 	movi	r2,3
 10004ec:	d8800415 	stw	r2,16(sp)
 10004f0:	01004034 	movhi	r4,256
 10004f4:	2100d104 	addi	r4,r4,836
 10004f8:	000b883a 	mov	r5,zero
 10004fc:	01c001c4 	movi	r7,7
 1000500:	10118200 	call	1011820 <OSTaskCreateExt>
				OS_TASK_OPT_STK_CHK | 				// Stack Checking enabled
					OS_TASK_OPT_STK_CLR 			// Stack Cleared
				);
	}

	Mem = OSMemCreate(MemBuffer,2,
 1000504:	d126f704 	addi	r4,gp,-25636
 1000508:	01400084 	movi	r5,2
 100050c:	01800084 	movi	r6,2
 1000510:	e1ffff04 	addi	r7,fp,-4
 1000514:	100e9d00 	call	100e9d0 <OSMemCreate>
 1000518:	d0a6f315 	stw	r2,-25652(gp)
			sizeof(INT16U),&err);

	SemT0S0 = OSSemCreate(1);
 100051c:	01000044 	movi	r4,1
 1000520:	10105d00 	call	10105d0 <OSSemCreate>
 1000524:	d0a6f615 	stw	r2,-25640(gp)
	SemT0S1 = OSSemCreate(0);
 1000528:	0009883a 	mov	r4,zero
 100052c:	10105d00 	call	10105d0 <OSSemCreate>
 1000530:	d0a6f515 	stw	r2,-25644(gp)
	SemT1S0 = OSSemCreate(0);
 1000534:	0009883a 	mov	r4,zero
 1000538:	10105d00 	call	10105d0 <OSSemCreate>
 100053c:	d0a6f815 	stw	r2,-25632(gp)
	SemT1S1 = OSSemCreate(0);
 1000540:	0009883a 	mov	r4,zero
 1000544:	10105d00 	call	10105d0 <OSSemCreate>
 1000548:	d0a6f415 	stw	r2,-25648(gp)

	OSStart();
 100054c:	100ba480 	call	100ba48 <OSStart>
	return 0;
 1000550:	0005883a 	mov	r2,zero
}
 1000554:	e037883a 	mov	sp,fp
 1000558:	dfc00117 	ldw	ra,4(sp)
 100055c:	df000017 	ldw	fp,0(sp)
 1000560:	dec00204 	addi	sp,sp,8
 1000564:	f800283a 	ret

01000568 <printf>:
 1000568:	defffb04 	addi	sp,sp,-20
 100056c:	dfc00115 	stw	ra,4(sp)
 1000570:	d9400215 	stw	r5,8(sp)
 1000574:	d9800315 	stw	r6,12(sp)
 1000578:	d9c00415 	stw	r7,16(sp)
 100057c:	00804074 	movhi	r2,257
 1000580:	109f6e04 	addi	r2,r2,32184
 1000584:	10c00017 	ldw	r3,0(r2)
 1000588:	200b883a 	mov	r5,r4
 100058c:	d8800204 	addi	r2,sp,8
 1000590:	19000217 	ldw	r4,8(r3)
 1000594:	100d883a 	mov	r6,r2
 1000598:	d8800015 	stw	r2,0(sp)
 100059c:	10026240 	call	1002624 <__vfprintf_internal>
 10005a0:	dfc00117 	ldw	ra,4(sp)
 10005a4:	dec00504 	addi	sp,sp,20
 10005a8:	f800283a 	ret

010005ac <_printf_r>:
 10005ac:	defffc04 	addi	sp,sp,-16
 10005b0:	dfc00115 	stw	ra,4(sp)
 10005b4:	d9800215 	stw	r6,8(sp)
 10005b8:	d9c00315 	stw	r7,12(sp)
 10005bc:	280d883a 	mov	r6,r5
 10005c0:	21400217 	ldw	r5,8(r4)
 10005c4:	d8c00204 	addi	r3,sp,8
 10005c8:	180f883a 	mov	r7,r3
 10005cc:	d8c00015 	stw	r3,0(sp)
 10005d0:	10007600 	call	1000760 <___vfprintf_internal_r>
 10005d4:	dfc00117 	ldw	ra,4(sp)
 10005d8:	dec00404 	addi	sp,sp,16
 10005dc:	f800283a 	ret

010005e0 <_puts_r>:
 10005e0:	defff604 	addi	sp,sp,-40
 10005e4:	dc400715 	stw	r17,28(sp)
 10005e8:	2023883a 	mov	r17,r4
 10005ec:	2809883a 	mov	r4,r5
 10005f0:	dfc00915 	stw	ra,36(sp)
 10005f4:	dcc00815 	stw	r19,32(sp)
 10005f8:	2827883a 	mov	r19,r5
 10005fc:	10006940 	call	1000694 <strlen>
 1000600:	89400217 	ldw	r5,8(r17)
 1000604:	00c04074 	movhi	r3,257
 1000608:	18d7bb04 	addi	r3,r3,24300
 100060c:	01c00044 	movi	r7,1
 1000610:	12000044 	addi	r8,r2,1
 1000614:	d8c00515 	stw	r3,20(sp)
 1000618:	d9c00615 	stw	r7,24(sp)
 100061c:	d8c00304 	addi	r3,sp,12
 1000620:	01c00084 	movi	r7,2
 1000624:	8809883a 	mov	r4,r17
 1000628:	d80d883a 	mov	r6,sp
 100062c:	d8c00015 	stw	r3,0(sp)
 1000630:	dcc00315 	stw	r19,12(sp)
 1000634:	da000215 	stw	r8,8(sp)
 1000638:	d9c00115 	stw	r7,4(sp)
 100063c:	d8800415 	stw	r2,16(sp)
 1000640:	10048e00 	call	10048e0 <__sfvwrite_r>
 1000644:	00ffffc4 	movi	r3,-1
 1000648:	10000626 	beq	r2,zero,1000664 <_puts_r+0x84>
 100064c:	1805883a 	mov	r2,r3
 1000650:	dfc00917 	ldw	ra,36(sp)
 1000654:	dcc00817 	ldw	r19,32(sp)
 1000658:	dc400717 	ldw	r17,28(sp)
 100065c:	dec00a04 	addi	sp,sp,40
 1000660:	f800283a 	ret
 1000664:	00c00284 	movi	r3,10
 1000668:	1805883a 	mov	r2,r3
 100066c:	dfc00917 	ldw	ra,36(sp)
 1000670:	dcc00817 	ldw	r19,32(sp)
 1000674:	dc400717 	ldw	r17,28(sp)
 1000678:	dec00a04 	addi	sp,sp,40
 100067c:	f800283a 	ret

01000680 <puts>:
 1000680:	00804074 	movhi	r2,257
 1000684:	109f6e04 	addi	r2,r2,32184
 1000688:	200b883a 	mov	r5,r4
 100068c:	11000017 	ldw	r4,0(r2)
 1000690:	10005e01 	jmpi	10005e0 <_puts_r>

01000694 <strlen>:
 1000694:	208000cc 	andi	r2,r4,3
 1000698:	2011883a 	mov	r8,r4
 100069c:	1000161e 	bne	r2,zero,10006f8 <strlen+0x64>
 10006a0:	20c00017 	ldw	r3,0(r4)
 10006a4:	017fbff4 	movhi	r5,65279
 10006a8:	297fbfc4 	addi	r5,r5,-257
 10006ac:	01e02074 	movhi	r7,32897
 10006b0:	39e02004 	addi	r7,r7,-32640
 10006b4:	1945883a 	add	r2,r3,r5
 10006b8:	11c4703a 	and	r2,r2,r7
 10006bc:	00c6303a 	nor	r3,zero,r3
 10006c0:	1886703a 	and	r3,r3,r2
 10006c4:	18000c1e 	bne	r3,zero,10006f8 <strlen+0x64>
 10006c8:	280d883a 	mov	r6,r5
 10006cc:	380b883a 	mov	r5,r7
 10006d0:	21000104 	addi	r4,r4,4
 10006d4:	20800017 	ldw	r2,0(r4)
 10006d8:	1187883a 	add	r3,r2,r6
 10006dc:	1946703a 	and	r3,r3,r5
 10006e0:	0084303a 	nor	r2,zero,r2
 10006e4:	10c4703a 	and	r2,r2,r3
 10006e8:	103ff926 	beq	r2,zero,10006d0 <strlen+0x3c>
 10006ec:	20800007 	ldb	r2,0(r4)
 10006f0:	10000326 	beq	r2,zero,1000700 <strlen+0x6c>
 10006f4:	21000044 	addi	r4,r4,1
 10006f8:	20800007 	ldb	r2,0(r4)
 10006fc:	103ffd1e 	bne	r2,zero,10006f4 <strlen+0x60>
 1000700:	2205c83a 	sub	r2,r4,r8
 1000704:	f800283a 	ret

01000708 <__sprint_r>:
 1000708:	30800217 	ldw	r2,8(r6)
 100070c:	defffe04 	addi	sp,sp,-8
 1000710:	dc000015 	stw	r16,0(sp)
 1000714:	dfc00115 	stw	ra,4(sp)
 1000718:	3021883a 	mov	r16,r6
 100071c:	0007883a 	mov	r3,zero
 1000720:	1000061e 	bne	r2,zero,100073c <__sprint_r+0x34>
 1000724:	1805883a 	mov	r2,r3
 1000728:	30000115 	stw	zero,4(r6)
 100072c:	dfc00117 	ldw	ra,4(sp)
 1000730:	dc000017 	ldw	r16,0(sp)
 1000734:	dec00204 	addi	sp,sp,8
 1000738:	f800283a 	ret
 100073c:	10048e00 	call	10048e0 <__sfvwrite_r>
 1000740:	1007883a 	mov	r3,r2
 1000744:	1805883a 	mov	r2,r3
 1000748:	80000115 	stw	zero,4(r16)
 100074c:	80000215 	stw	zero,8(r16)
 1000750:	dfc00117 	ldw	ra,4(sp)
 1000754:	dc000017 	ldw	r16,0(sp)
 1000758:	dec00204 	addi	sp,sp,8
 100075c:	f800283a 	ret

01000760 <___vfprintf_internal_r>:
 1000760:	defea404 	addi	sp,sp,-1392
 1000764:	dd815815 	stw	r22,1376(sp)
 1000768:	dc015215 	stw	r16,1352(sp)
 100076c:	d9c15115 	stw	r7,1348(sp)
 1000770:	dfc15b15 	stw	ra,1388(sp)
 1000774:	df015a15 	stw	fp,1384(sp)
 1000778:	ddc15915 	stw	r23,1380(sp)
 100077c:	dd415715 	stw	r21,1372(sp)
 1000780:	dd015615 	stw	r20,1368(sp)
 1000784:	dcc15515 	stw	r19,1364(sp)
 1000788:	dc815415 	stw	r18,1360(sp)
 100078c:	dc415315 	stw	r17,1356(sp)
 1000790:	282d883a 	mov	r22,r5
 1000794:	3021883a 	mov	r16,r6
 1000798:	d9014f15 	stw	r4,1340(sp)
 100079c:	1004f040 	call	1004f04 <_localeconv_r>
 10007a0:	10800017 	ldw	r2,0(r2)
 10007a4:	d9c15117 	ldw	r7,1348(sp)
 10007a8:	d8814915 	stw	r2,1316(sp)
 10007ac:	d8814f17 	ldw	r2,1340(sp)
 10007b0:	10000226 	beq	r2,zero,10007bc <___vfprintf_internal_r+0x5c>
 10007b4:	10800e17 	ldw	r2,56(r2)
 10007b8:	10020d26 	beq	r2,zero,1000ff0 <___vfprintf_internal_r+0x890>
 10007bc:	b080030b 	ldhu	r2,12(r22)
 10007c0:	1080020c 	andi	r2,r2,8
 10007c4:	10020e26 	beq	r2,zero,1001000 <___vfprintf_internal_r+0x8a0>
 10007c8:	b0800417 	ldw	r2,16(r22)
 10007cc:	10020c26 	beq	r2,zero,1001000 <___vfprintf_internal_r+0x8a0>
 10007d0:	b200030b 	ldhu	r8,12(r22)
 10007d4:	00800284 	movi	r2,10
 10007d8:	40c0068c 	andi	r3,r8,26
 10007dc:	18802f1e 	bne	r3,r2,100089c <___vfprintf_internal_r+0x13c>
 10007e0:	b080038f 	ldh	r2,14(r22)
 10007e4:	10002d16 	blt	r2,zero,100089c <___vfprintf_internal_r+0x13c>
 10007e8:	b240038b 	ldhu	r9,14(r22)
 10007ec:	b2800717 	ldw	r10,28(r22)
 10007f0:	b2c00917 	ldw	r11,36(r22)
 10007f4:	d9014f17 	ldw	r4,1340(sp)
 10007f8:	dc402904 	addi	r17,sp,164
 10007fc:	d8804004 	addi	r2,sp,256
 1000800:	00c10004 	movi	r3,1024
 1000804:	423fff4c 	andi	r8,r8,65533
 1000808:	800d883a 	mov	r6,r16
 100080c:	880b883a 	mov	r5,r17
 1000810:	da002c0d 	sth	r8,176(sp)
 1000814:	da402c8d 	sth	r9,178(sp)
 1000818:	da803015 	stw	r10,192(sp)
 100081c:	dac03215 	stw	r11,200(sp)
 1000820:	d8802d15 	stw	r2,180(sp)
 1000824:	d8c02e15 	stw	r3,184(sp)
 1000828:	d8802915 	stw	r2,164(sp)
 100082c:	d8c02b15 	stw	r3,172(sp)
 1000830:	d8002f15 	stw	zero,188(sp)
 1000834:	10007600 	call	1000760 <___vfprintf_internal_r>
 1000838:	d8814b15 	stw	r2,1324(sp)
 100083c:	10000416 	blt	r2,zero,1000850 <___vfprintf_internal_r+0xf0>
 1000840:	d9014f17 	ldw	r4,1340(sp)
 1000844:	880b883a 	mov	r5,r17
 1000848:	1003f7c0 	call	1003f7c <_fflush_r>
 100084c:	1002321e 	bne	r2,zero,1001118 <___vfprintf_internal_r+0x9b8>
 1000850:	d8802c0b 	ldhu	r2,176(sp)
 1000854:	1080100c 	andi	r2,r2,64
 1000858:	10000326 	beq	r2,zero,1000868 <___vfprintf_internal_r+0x108>
 100085c:	b080030b 	ldhu	r2,12(r22)
 1000860:	10801014 	ori	r2,r2,64
 1000864:	b080030d 	sth	r2,12(r22)
 1000868:	d8814b17 	ldw	r2,1324(sp)
 100086c:	dfc15b17 	ldw	ra,1388(sp)
 1000870:	df015a17 	ldw	fp,1384(sp)
 1000874:	ddc15917 	ldw	r23,1380(sp)
 1000878:	dd815817 	ldw	r22,1376(sp)
 100087c:	dd415717 	ldw	r21,1372(sp)
 1000880:	dd015617 	ldw	r20,1368(sp)
 1000884:	dcc15517 	ldw	r19,1364(sp)
 1000888:	dc815417 	ldw	r18,1360(sp)
 100088c:	dc415317 	ldw	r17,1356(sp)
 1000890:	dc015217 	ldw	r16,1352(sp)
 1000894:	dec15c04 	addi	sp,sp,1392
 1000898:	f800283a 	ret
 100089c:	0005883a 	mov	r2,zero
 10008a0:	0007883a 	mov	r3,zero
 10008a4:	dd401904 	addi	r21,sp,100
 10008a8:	d8814215 	stw	r2,1288(sp)
 10008ac:	802f883a 	mov	r23,r16
 10008b0:	d8c14315 	stw	r3,1292(sp)
 10008b4:	d8014b15 	stw	zero,1324(sp)
 10008b8:	d8014815 	stw	zero,1312(sp)
 10008bc:	d8014415 	stw	zero,1296(sp)
 10008c0:	d8014715 	stw	zero,1308(sp)
 10008c4:	dd400c15 	stw	r21,48(sp)
 10008c8:	d8000e15 	stw	zero,56(sp)
 10008cc:	d8000d15 	stw	zero,52(sp)
 10008d0:	b8800007 	ldb	r2,0(r23)
 10008d4:	10001926 	beq	r2,zero,100093c <___vfprintf_internal_r+0x1dc>
 10008d8:	00c00944 	movi	r3,37
 10008dc:	10c01726 	beq	r2,r3,100093c <___vfprintf_internal_r+0x1dc>
 10008e0:	b821883a 	mov	r16,r23
 10008e4:	00000106 	br	10008ec <___vfprintf_internal_r+0x18c>
 10008e8:	10c00326 	beq	r2,r3,10008f8 <___vfprintf_internal_r+0x198>
 10008ec:	84000044 	addi	r16,r16,1
 10008f0:	80800007 	ldb	r2,0(r16)
 10008f4:	103ffc1e 	bne	r2,zero,10008e8 <___vfprintf_internal_r+0x188>
 10008f8:	85e7c83a 	sub	r19,r16,r23
 10008fc:	98000e26 	beq	r19,zero,1000938 <___vfprintf_internal_r+0x1d8>
 1000900:	dc800e17 	ldw	r18,56(sp)
 1000904:	dc400d17 	ldw	r17,52(sp)
 1000908:	008001c4 	movi	r2,7
 100090c:	94e5883a 	add	r18,r18,r19
 1000910:	8c400044 	addi	r17,r17,1
 1000914:	adc00015 	stw	r23,0(r21)
 1000918:	dc800e15 	stw	r18,56(sp)
 100091c:	acc00115 	stw	r19,4(r21)
 1000920:	dc400d15 	stw	r17,52(sp)
 1000924:	14428b16 	blt	r2,r17,1001354 <___vfprintf_internal_r+0xbf4>
 1000928:	ad400204 	addi	r21,r21,8
 100092c:	d9014b17 	ldw	r4,1324(sp)
 1000930:	24c9883a 	add	r4,r4,r19
 1000934:	d9014b15 	stw	r4,1324(sp)
 1000938:	802f883a 	mov	r23,r16
 100093c:	b8800007 	ldb	r2,0(r23)
 1000940:	10013c26 	beq	r2,zero,1000e34 <___vfprintf_internal_r+0x6d4>
 1000944:	bdc00044 	addi	r23,r23,1
 1000948:	d8000405 	stb	zero,16(sp)
 100094c:	b8c00007 	ldb	r3,0(r23)
 1000950:	04ffffc4 	movi	r19,-1
 1000954:	d8014c15 	stw	zero,1328(sp)
 1000958:	d8014a15 	stw	zero,1320(sp)
 100095c:	d8c14d15 	stw	r3,1332(sp)
 1000960:	bdc00044 	addi	r23,r23,1
 1000964:	d9414d17 	ldw	r5,1332(sp)
 1000968:	00801604 	movi	r2,88
 100096c:	28fff804 	addi	r3,r5,-32
 1000970:	10c06036 	bltu	r2,r3,1000af4 <___vfprintf_internal_r+0x394>
 1000974:	18c5883a 	add	r2,r3,r3
 1000978:	1085883a 	add	r2,r2,r2
 100097c:	00c04034 	movhi	r3,256
 1000980:	18c26404 	addi	r3,r3,2448
 1000984:	10c5883a 	add	r2,r2,r3
 1000988:	11000017 	ldw	r4,0(r2)
 100098c:	2000683a 	jmp	r4
 1000990:	01001904 	movi	r4,100
 1000994:	01000af4 	movhi	r4,43
 1000998:	01000af4 	movhi	r4,43
 100099c:	010018f0 	cmpltui	r4,zero,99
 10009a0:	01000af4 	movhi	r4,43
 10009a4:	01000af4 	movhi	r4,43
 10009a8:	01000af4 	movhi	r4,43
 10009ac:	01000af4 	movhi	r4,43
 10009b0:	01000af4 	movhi	r4,43
 10009b4:	01000af4 	movhi	r4,43
 10009b8:	010016d0 	cmplti	r4,zero,91
 10009bc:	010018e0 	cmpeqi	r4,zero,99
 10009c0:	01000af4 	movhi	r4,43
 10009c4:	010016e8 	cmpgeui	r4,zero,91
 10009c8:	01001988 	cmpgei	r4,zero,102
 10009cc:	01000af4 	movhi	r4,43
 10009d0:	01001974 	movhi	r4,101
 10009d4:	01001930 	cmpltui	r4,zero,100
 10009d8:	01001930 	cmpltui	r4,zero,100
 10009dc:	01001930 	cmpltui	r4,zero,100
 10009e0:	01001930 	cmpltui	r4,zero,100
 10009e4:	01001930 	cmpltui	r4,zero,100
 10009e8:	01001930 	cmpltui	r4,zero,100
 10009ec:	01001930 	cmpltui	r4,zero,100
 10009f0:	01001930 	cmpltui	r4,zero,100
 10009f4:	01001930 	cmpltui	r4,zero,100
 10009f8:	01000af4 	movhi	r4,43
 10009fc:	01000af4 	movhi	r4,43
 1000a00:	01000af4 	movhi	r4,43
 1000a04:	01000af4 	movhi	r4,43
 1000a08:	01000af4 	movhi	r4,43
 1000a0c:	01000af4 	movhi	r4,43
 1000a10:	01000af4 	movhi	r4,43
 1000a14:	01000af4 	movhi	r4,43
 1000a18:	01000af4 	movhi	r4,43
 1000a1c:	01000af4 	movhi	r4,43
 1000a20:	0100114c 	andi	r4,zero,69
 1000a24:	010017b8 	rdprs	r4,zero,94
 1000a28:	01000af4 	movhi	r4,43
 1000a2c:	010017b8 	rdprs	r4,zero,94
 1000a30:	01000af4 	movhi	r4,43
 1000a34:	01000af4 	movhi	r4,43
 1000a38:	01000af4 	movhi	r4,43
 1000a3c:	01000af4 	movhi	r4,43
 1000a40:	0100191c 	xori	r4,zero,100
 1000a44:	01000af4 	movhi	r4,43
 1000a48:	01000af4 	movhi	r4,43
 1000a4c:	01001200 	call	100120 <__alt_mem_sram+0x120>
 1000a50:	01000af4 	movhi	r4,43
 1000a54:	01000af4 	movhi	r4,43
 1000a58:	01000af4 	movhi	r4,43
 1000a5c:	01000af4 	movhi	r4,43
 1000a60:	01000af4 	movhi	r4,43
 1000a64:	0100124c 	andi	r4,zero,73
 1000a68:	01000af4 	movhi	r4,43
 1000a6c:	01000af4 	movhi	r4,43
 1000a70:	0100186c 	andhi	r4,zero,97
 1000a74:	01000af4 	movhi	r4,43
 1000a78:	01000af4 	movhi	r4,43
 1000a7c:	01000af4 	movhi	r4,43
 1000a80:	01000af4 	movhi	r4,43
 1000a84:	01000af4 	movhi	r4,43
 1000a88:	01000af4 	movhi	r4,43
 1000a8c:	01000af4 	movhi	r4,43
 1000a90:	01000af4 	movhi	r4,43
 1000a94:	01000af4 	movhi	r4,43
 1000a98:	01000af4 	movhi	r4,43
 1000a9c:	01001840 	call	100184 <__alt_mem_sram+0x184>
 1000aa0:	01001158 	cmpnei	r4,zero,69
 1000aa4:	010017b8 	rdprs	r4,zero,94
 1000aa8:	010017b8 	rdprs	r4,zero,94
 1000aac:	010017b8 	rdprs	r4,zero,94
 1000ab0:	010017a4 	muli	r4,zero,94
 1000ab4:	01001158 	cmpnei	r4,zero,69
 1000ab8:	01000af4 	movhi	r4,43
 1000abc:	01000af4 	movhi	r4,43
 1000ac0:	0100172c 	andhi	r4,zero,92
 1000ac4:	01000af4 	movhi	r4,43
 1000ac8:	010016fc 	xorhi	r4,zero,91
 1000acc:	0100120c 	andi	r4,zero,72
 1000ad0:	0100175c 	xori	r4,zero,93
 1000ad4:	01001748 	cmpgei	r4,zero,93
 1000ad8:	01000af4 	movhi	r4,43
 1000adc:	010019f0 	cmpltui	r4,zero,103
 1000ae0:	01000af4 	movhi	r4,43
 1000ae4:	01001258 	cmpnei	r4,zero,73
 1000ae8:	01000af4 	movhi	r4,43
 1000aec:	01000af4 	movhi	r4,43
 1000af0:	010018d0 	cmplti	r4,zero,99
 1000af4:	d9014d17 	ldw	r4,1332(sp)
 1000af8:	2000ce26 	beq	r4,zero,1000e34 <___vfprintf_internal_r+0x6d4>
 1000afc:	01400044 	movi	r5,1
 1000b00:	d9800f04 	addi	r6,sp,60
 1000b04:	d9c14015 	stw	r7,1280(sp)
 1000b08:	d9414515 	stw	r5,1300(sp)
 1000b0c:	d9814115 	stw	r6,1284(sp)
 1000b10:	280f883a 	mov	r7,r5
 1000b14:	d9000f05 	stb	r4,60(sp)
 1000b18:	d8000405 	stb	zero,16(sp)
 1000b1c:	d8014615 	stw	zero,1304(sp)
 1000b20:	d8c14c17 	ldw	r3,1328(sp)
 1000b24:	1880008c 	andi	r2,r3,2
 1000b28:	1005003a 	cmpeq	r2,r2,zero
 1000b2c:	d8815015 	stw	r2,1344(sp)
 1000b30:	1000031e 	bne	r2,zero,1000b40 <___vfprintf_internal_r+0x3e0>
 1000b34:	d9014517 	ldw	r4,1300(sp)
 1000b38:	21000084 	addi	r4,r4,2
 1000b3c:	d9014515 	stw	r4,1300(sp)
 1000b40:	d9414c17 	ldw	r5,1328(sp)
 1000b44:	2940210c 	andi	r5,r5,132
 1000b48:	d9414e15 	stw	r5,1336(sp)
 1000b4c:	28002d1e 	bne	r5,zero,1000c04 <___vfprintf_internal_r+0x4a4>
 1000b50:	d9814a17 	ldw	r6,1320(sp)
 1000b54:	d8814517 	ldw	r2,1300(sp)
 1000b58:	30a1c83a 	sub	r16,r6,r2
 1000b5c:	0400290e 	bge	zero,r16,1000c04 <___vfprintf_internal_r+0x4a4>
 1000b60:	00800404 	movi	r2,16
 1000b64:	14045e0e 	bge	r2,r16,1001ce0 <___vfprintf_internal_r+0x1580>
 1000b68:	dc800e17 	ldw	r18,56(sp)
 1000b6c:	dc400d17 	ldw	r17,52(sp)
 1000b70:	1027883a 	mov	r19,r2
 1000b74:	07004074 	movhi	fp,257
 1000b78:	e717d784 	addi	fp,fp,24414
 1000b7c:	050001c4 	movi	r20,7
 1000b80:	00000306 	br	1000b90 <___vfprintf_internal_r+0x430>
 1000b84:	843ffc04 	addi	r16,r16,-16
 1000b88:	ad400204 	addi	r21,r21,8
 1000b8c:	9c00130e 	bge	r19,r16,1000bdc <___vfprintf_internal_r+0x47c>
 1000b90:	94800404 	addi	r18,r18,16
 1000b94:	8c400044 	addi	r17,r17,1
 1000b98:	af000015 	stw	fp,0(r21)
 1000b9c:	acc00115 	stw	r19,4(r21)
 1000ba0:	dc800e15 	stw	r18,56(sp)
 1000ba4:	dc400d15 	stw	r17,52(sp)
 1000ba8:	a47ff60e 	bge	r20,r17,1000b84 <___vfprintf_internal_r+0x424>
 1000bac:	d9014f17 	ldw	r4,1340(sp)
 1000bb0:	b00b883a 	mov	r5,r22
 1000bb4:	d9800c04 	addi	r6,sp,48
 1000bb8:	d9c15115 	stw	r7,1348(sp)
 1000bbc:	10007080 	call	1000708 <__sprint_r>
 1000bc0:	d9c15117 	ldw	r7,1348(sp)
 1000bc4:	10009e1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1000bc8:	843ffc04 	addi	r16,r16,-16
 1000bcc:	dc800e17 	ldw	r18,56(sp)
 1000bd0:	dc400d17 	ldw	r17,52(sp)
 1000bd4:	dd401904 	addi	r21,sp,100
 1000bd8:	9c3fed16 	blt	r19,r16,1000b90 <___vfprintf_internal_r+0x430>
 1000bdc:	9425883a 	add	r18,r18,r16
 1000be0:	8c400044 	addi	r17,r17,1
 1000be4:	008001c4 	movi	r2,7
 1000be8:	af000015 	stw	fp,0(r21)
 1000bec:	ac000115 	stw	r16,4(r21)
 1000bf0:	dc800e15 	stw	r18,56(sp)
 1000bf4:	dc400d15 	stw	r17,52(sp)
 1000bf8:	1441f516 	blt	r2,r17,10013d0 <___vfprintf_internal_r+0xc70>
 1000bfc:	ad400204 	addi	r21,r21,8
 1000c00:	00000206 	br	1000c0c <___vfprintf_internal_r+0x4ac>
 1000c04:	dc800e17 	ldw	r18,56(sp)
 1000c08:	dc400d17 	ldw	r17,52(sp)
 1000c0c:	d8800407 	ldb	r2,16(sp)
 1000c10:	10000b26 	beq	r2,zero,1000c40 <___vfprintf_internal_r+0x4e0>
 1000c14:	00800044 	movi	r2,1
 1000c18:	94800044 	addi	r18,r18,1
 1000c1c:	8c400044 	addi	r17,r17,1
 1000c20:	a8800115 	stw	r2,4(r21)
 1000c24:	d8c00404 	addi	r3,sp,16
 1000c28:	008001c4 	movi	r2,7
 1000c2c:	a8c00015 	stw	r3,0(r21)
 1000c30:	dc800e15 	stw	r18,56(sp)
 1000c34:	dc400d15 	stw	r17,52(sp)
 1000c38:	1441da16 	blt	r2,r17,10013a4 <___vfprintf_internal_r+0xc44>
 1000c3c:	ad400204 	addi	r21,r21,8
 1000c40:	d9015017 	ldw	r4,1344(sp)
 1000c44:	20000b1e 	bne	r4,zero,1000c74 <___vfprintf_internal_r+0x514>
 1000c48:	d8800444 	addi	r2,sp,17
 1000c4c:	94800084 	addi	r18,r18,2
 1000c50:	8c400044 	addi	r17,r17,1
 1000c54:	a8800015 	stw	r2,0(r21)
 1000c58:	00c00084 	movi	r3,2
 1000c5c:	008001c4 	movi	r2,7
 1000c60:	a8c00115 	stw	r3,4(r21)
 1000c64:	dc800e15 	stw	r18,56(sp)
 1000c68:	dc400d15 	stw	r17,52(sp)
 1000c6c:	1441c216 	blt	r2,r17,1001378 <___vfprintf_internal_r+0xc18>
 1000c70:	ad400204 	addi	r21,r21,8
 1000c74:	d9414e17 	ldw	r5,1336(sp)
 1000c78:	00802004 	movi	r2,128
 1000c7c:	2880b126 	beq	r5,r2,1000f44 <___vfprintf_internal_r+0x7e4>
 1000c80:	d8c14617 	ldw	r3,1304(sp)
 1000c84:	19e1c83a 	sub	r16,r3,r7
 1000c88:	0400260e 	bge	zero,r16,1000d24 <___vfprintf_internal_r+0x5c4>
 1000c8c:	00800404 	movi	r2,16
 1000c90:	1403cf0e 	bge	r2,r16,1001bd0 <___vfprintf_internal_r+0x1470>
 1000c94:	1027883a 	mov	r19,r2
 1000c98:	07004074 	movhi	fp,257
 1000c9c:	e717d384 	addi	fp,fp,24398
 1000ca0:	050001c4 	movi	r20,7
 1000ca4:	00000306 	br	1000cb4 <___vfprintf_internal_r+0x554>
 1000ca8:	843ffc04 	addi	r16,r16,-16
 1000cac:	ad400204 	addi	r21,r21,8
 1000cb0:	9c00130e 	bge	r19,r16,1000d00 <___vfprintf_internal_r+0x5a0>
 1000cb4:	94800404 	addi	r18,r18,16
 1000cb8:	8c400044 	addi	r17,r17,1
 1000cbc:	af000015 	stw	fp,0(r21)
 1000cc0:	acc00115 	stw	r19,4(r21)
 1000cc4:	dc800e15 	stw	r18,56(sp)
 1000cc8:	dc400d15 	stw	r17,52(sp)
 1000ccc:	a47ff60e 	bge	r20,r17,1000ca8 <___vfprintf_internal_r+0x548>
 1000cd0:	d9014f17 	ldw	r4,1340(sp)
 1000cd4:	b00b883a 	mov	r5,r22
 1000cd8:	d9800c04 	addi	r6,sp,48
 1000cdc:	d9c15115 	stw	r7,1348(sp)
 1000ce0:	10007080 	call	1000708 <__sprint_r>
 1000ce4:	d9c15117 	ldw	r7,1348(sp)
 1000ce8:	1000551e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1000cec:	843ffc04 	addi	r16,r16,-16
 1000cf0:	dc800e17 	ldw	r18,56(sp)
 1000cf4:	dc400d17 	ldw	r17,52(sp)
 1000cf8:	dd401904 	addi	r21,sp,100
 1000cfc:	9c3fed16 	blt	r19,r16,1000cb4 <___vfprintf_internal_r+0x554>
 1000d00:	9425883a 	add	r18,r18,r16
 1000d04:	8c400044 	addi	r17,r17,1
 1000d08:	008001c4 	movi	r2,7
 1000d0c:	af000015 	stw	fp,0(r21)
 1000d10:	ac000115 	stw	r16,4(r21)
 1000d14:	dc800e15 	stw	r18,56(sp)
 1000d18:	dc400d15 	stw	r17,52(sp)
 1000d1c:	14418216 	blt	r2,r17,1001328 <___vfprintf_internal_r+0xbc8>
 1000d20:	ad400204 	addi	r21,r21,8
 1000d24:	d9014c17 	ldw	r4,1328(sp)
 1000d28:	2080400c 	andi	r2,r4,256
 1000d2c:	10004a1e 	bne	r2,zero,1000e58 <___vfprintf_internal_r+0x6f8>
 1000d30:	d9414117 	ldw	r5,1284(sp)
 1000d34:	91e5883a 	add	r18,r18,r7
 1000d38:	8c400044 	addi	r17,r17,1
 1000d3c:	008001c4 	movi	r2,7
 1000d40:	a9400015 	stw	r5,0(r21)
 1000d44:	a9c00115 	stw	r7,4(r21)
 1000d48:	dc800e15 	stw	r18,56(sp)
 1000d4c:	dc400d15 	stw	r17,52(sp)
 1000d50:	14416716 	blt	r2,r17,10012f0 <___vfprintf_internal_r+0xb90>
 1000d54:	a8c00204 	addi	r3,r21,8
 1000d58:	d9814c17 	ldw	r6,1328(sp)
 1000d5c:	3080010c 	andi	r2,r6,4
 1000d60:	10002826 	beq	r2,zero,1000e04 <___vfprintf_internal_r+0x6a4>
 1000d64:	d8814a17 	ldw	r2,1320(sp)
 1000d68:	d9014517 	ldw	r4,1300(sp)
 1000d6c:	1121c83a 	sub	r16,r2,r4
 1000d70:	0400240e 	bge	zero,r16,1000e04 <___vfprintf_internal_r+0x6a4>
 1000d74:	00800404 	movi	r2,16
 1000d78:	1404550e 	bge	r2,r16,1001ed0 <___vfprintf_internal_r+0x1770>
 1000d7c:	dc400d17 	ldw	r17,52(sp)
 1000d80:	1027883a 	mov	r19,r2
 1000d84:	07004074 	movhi	fp,257
 1000d88:	e717d784 	addi	fp,fp,24414
 1000d8c:	050001c4 	movi	r20,7
 1000d90:	00000306 	br	1000da0 <___vfprintf_internal_r+0x640>
 1000d94:	843ffc04 	addi	r16,r16,-16
 1000d98:	18c00204 	addi	r3,r3,8
 1000d9c:	9c00110e 	bge	r19,r16,1000de4 <___vfprintf_internal_r+0x684>
 1000da0:	94800404 	addi	r18,r18,16
 1000da4:	8c400044 	addi	r17,r17,1
 1000da8:	1f000015 	stw	fp,0(r3)
 1000dac:	1cc00115 	stw	r19,4(r3)
 1000db0:	dc800e15 	stw	r18,56(sp)
 1000db4:	dc400d15 	stw	r17,52(sp)
 1000db8:	a47ff60e 	bge	r20,r17,1000d94 <___vfprintf_internal_r+0x634>
 1000dbc:	d9014f17 	ldw	r4,1340(sp)
 1000dc0:	b00b883a 	mov	r5,r22
 1000dc4:	d9800c04 	addi	r6,sp,48
 1000dc8:	10007080 	call	1000708 <__sprint_r>
 1000dcc:	10001c1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1000dd0:	843ffc04 	addi	r16,r16,-16
 1000dd4:	dc800e17 	ldw	r18,56(sp)
 1000dd8:	dc400d17 	ldw	r17,52(sp)
 1000ddc:	d8c01904 	addi	r3,sp,100
 1000de0:	9c3fef16 	blt	r19,r16,1000da0 <___vfprintf_internal_r+0x640>
 1000de4:	9425883a 	add	r18,r18,r16
 1000de8:	8c400044 	addi	r17,r17,1
 1000dec:	008001c4 	movi	r2,7
 1000df0:	1f000015 	stw	fp,0(r3)
 1000df4:	1c000115 	stw	r16,4(r3)
 1000df8:	dc800e15 	stw	r18,56(sp)
 1000dfc:	dc400d15 	stw	r17,52(sp)
 1000e00:	1440cb16 	blt	r2,r17,1001130 <___vfprintf_internal_r+0x9d0>
 1000e04:	d8814a17 	ldw	r2,1320(sp)
 1000e08:	d9414517 	ldw	r5,1300(sp)
 1000e0c:	1140010e 	bge	r2,r5,1000e14 <___vfprintf_internal_r+0x6b4>
 1000e10:	2805883a 	mov	r2,r5
 1000e14:	d9814b17 	ldw	r6,1324(sp)
 1000e18:	308d883a 	add	r6,r6,r2
 1000e1c:	d9814b15 	stw	r6,1324(sp)
 1000e20:	90013b1e 	bne	r18,zero,1001310 <___vfprintf_internal_r+0xbb0>
 1000e24:	d9c14017 	ldw	r7,1280(sp)
 1000e28:	dd401904 	addi	r21,sp,100
 1000e2c:	d8000d15 	stw	zero,52(sp)
 1000e30:	003ea706 	br	10008d0 <___vfprintf_internal_r+0x170>
 1000e34:	d8800e17 	ldw	r2,56(sp)
 1000e38:	1005451e 	bne	r2,zero,1002350 <___vfprintf_internal_r+0x1bf0>
 1000e3c:	d8000d15 	stw	zero,52(sp)
 1000e40:	b080030b 	ldhu	r2,12(r22)
 1000e44:	1080100c 	andi	r2,r2,64
 1000e48:	103e8726 	beq	r2,zero,1000868 <___vfprintf_internal_r+0x108>
 1000e4c:	00bfffc4 	movi	r2,-1
 1000e50:	d8814b15 	stw	r2,1324(sp)
 1000e54:	003e8406 	br	1000868 <___vfprintf_internal_r+0x108>
 1000e58:	d9814d17 	ldw	r6,1332(sp)
 1000e5c:	00801944 	movi	r2,101
 1000e60:	11806e16 	blt	r2,r6,100101c <___vfprintf_internal_r+0x8bc>
 1000e64:	d9414717 	ldw	r5,1308(sp)
 1000e68:	00c00044 	movi	r3,1
 1000e6c:	1943490e 	bge	r3,r5,1001b94 <___vfprintf_internal_r+0x1434>
 1000e70:	d8814117 	ldw	r2,1284(sp)
 1000e74:	94800044 	addi	r18,r18,1
 1000e78:	8c400044 	addi	r17,r17,1
 1000e7c:	a8800015 	stw	r2,0(r21)
 1000e80:	008001c4 	movi	r2,7
 1000e84:	a8c00115 	stw	r3,4(r21)
 1000e88:	dc800e15 	stw	r18,56(sp)
 1000e8c:	dc400d15 	stw	r17,52(sp)
 1000e90:	1441ca16 	blt	r2,r17,10015bc <___vfprintf_internal_r+0xe5c>
 1000e94:	a8c00204 	addi	r3,r21,8
 1000e98:	d9014917 	ldw	r4,1316(sp)
 1000e9c:	00800044 	movi	r2,1
 1000ea0:	94800044 	addi	r18,r18,1
 1000ea4:	8c400044 	addi	r17,r17,1
 1000ea8:	18800115 	stw	r2,4(r3)
 1000eac:	008001c4 	movi	r2,7
 1000eb0:	19000015 	stw	r4,0(r3)
 1000eb4:	dc800e15 	stw	r18,56(sp)
 1000eb8:	dc400d15 	stw	r17,52(sp)
 1000ebc:	1441b616 	blt	r2,r17,1001598 <___vfprintf_internal_r+0xe38>
 1000ec0:	1cc00204 	addi	r19,r3,8
 1000ec4:	d9014217 	ldw	r4,1288(sp)
 1000ec8:	d9414317 	ldw	r5,1292(sp)
 1000ecc:	000d883a 	mov	r6,zero
 1000ed0:	000f883a 	mov	r7,zero
 1000ed4:	10092140 	call	1009214 <__nedf2>
 1000ed8:	10017426 	beq	r2,zero,10014ac <___vfprintf_internal_r+0xd4c>
 1000edc:	d9414717 	ldw	r5,1308(sp)
 1000ee0:	d9814117 	ldw	r6,1284(sp)
 1000ee4:	8c400044 	addi	r17,r17,1
 1000ee8:	2c85883a 	add	r2,r5,r18
 1000eec:	14bfffc4 	addi	r18,r2,-1
 1000ef0:	28bfffc4 	addi	r2,r5,-1
 1000ef4:	30c00044 	addi	r3,r6,1
 1000ef8:	98800115 	stw	r2,4(r19)
 1000efc:	008001c4 	movi	r2,7
 1000f00:	98c00015 	stw	r3,0(r19)
 1000f04:	dc800e15 	stw	r18,56(sp)
 1000f08:	dc400d15 	stw	r17,52(sp)
 1000f0c:	14418e16 	blt	r2,r17,1001548 <___vfprintf_internal_r+0xde8>
 1000f10:	9cc00204 	addi	r19,r19,8
 1000f14:	d9414817 	ldw	r5,1312(sp)
 1000f18:	d8800804 	addi	r2,sp,32
 1000f1c:	8c400044 	addi	r17,r17,1
 1000f20:	9165883a 	add	r18,r18,r5
 1000f24:	98800015 	stw	r2,0(r19)
 1000f28:	008001c4 	movi	r2,7
 1000f2c:	99400115 	stw	r5,4(r19)
 1000f30:	dc800e15 	stw	r18,56(sp)
 1000f34:	dc400d15 	stw	r17,52(sp)
 1000f38:	1440ed16 	blt	r2,r17,10012f0 <___vfprintf_internal_r+0xb90>
 1000f3c:	98c00204 	addi	r3,r19,8
 1000f40:	003f8506 	br	1000d58 <___vfprintf_internal_r+0x5f8>
 1000f44:	d9814a17 	ldw	r6,1320(sp)
 1000f48:	d8814517 	ldw	r2,1300(sp)
 1000f4c:	30a1c83a 	sub	r16,r6,r2
 1000f50:	043f4b0e 	bge	zero,r16,1000c80 <___vfprintf_internal_r+0x520>
 1000f54:	00800404 	movi	r2,16
 1000f58:	14043a0e 	bge	r2,r16,1002044 <___vfprintf_internal_r+0x18e4>
 1000f5c:	1027883a 	mov	r19,r2
 1000f60:	07004074 	movhi	fp,257
 1000f64:	e717d384 	addi	fp,fp,24398
 1000f68:	050001c4 	movi	r20,7
 1000f6c:	00000306 	br	1000f7c <___vfprintf_internal_r+0x81c>
 1000f70:	843ffc04 	addi	r16,r16,-16
 1000f74:	ad400204 	addi	r21,r21,8
 1000f78:	9c00130e 	bge	r19,r16,1000fc8 <___vfprintf_internal_r+0x868>
 1000f7c:	94800404 	addi	r18,r18,16
 1000f80:	8c400044 	addi	r17,r17,1
 1000f84:	af000015 	stw	fp,0(r21)
 1000f88:	acc00115 	stw	r19,4(r21)
 1000f8c:	dc800e15 	stw	r18,56(sp)
 1000f90:	dc400d15 	stw	r17,52(sp)
 1000f94:	a47ff60e 	bge	r20,r17,1000f70 <___vfprintf_internal_r+0x810>
 1000f98:	d9014f17 	ldw	r4,1340(sp)
 1000f9c:	b00b883a 	mov	r5,r22
 1000fa0:	d9800c04 	addi	r6,sp,48
 1000fa4:	d9c15115 	stw	r7,1348(sp)
 1000fa8:	10007080 	call	1000708 <__sprint_r>
 1000fac:	d9c15117 	ldw	r7,1348(sp)
 1000fb0:	103fa31e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1000fb4:	843ffc04 	addi	r16,r16,-16
 1000fb8:	dc800e17 	ldw	r18,56(sp)
 1000fbc:	dc400d17 	ldw	r17,52(sp)
 1000fc0:	dd401904 	addi	r21,sp,100
 1000fc4:	9c3fed16 	blt	r19,r16,1000f7c <___vfprintf_internal_r+0x81c>
 1000fc8:	9425883a 	add	r18,r18,r16
 1000fcc:	8c400044 	addi	r17,r17,1
 1000fd0:	008001c4 	movi	r2,7
 1000fd4:	af000015 	stw	fp,0(r21)
 1000fd8:	ac000115 	stw	r16,4(r21)
 1000fdc:	dc800e15 	stw	r18,56(sp)
 1000fe0:	dc400d15 	stw	r17,52(sp)
 1000fe4:	14416116 	blt	r2,r17,100156c <___vfprintf_internal_r+0xe0c>
 1000fe8:	ad400204 	addi	r21,r21,8
 1000fec:	003f2406 	br	1000c80 <___vfprintf_internal_r+0x520>
 1000ff0:	d9014f17 	ldw	r4,1340(sp)
 1000ff4:	10042140 	call	1004214 <__sinit>
 1000ff8:	d9c15117 	ldw	r7,1348(sp)
 1000ffc:	003def06 	br	10007bc <___vfprintf_internal_r+0x5c>
 1001000:	d9014f17 	ldw	r4,1340(sp)
 1001004:	b00b883a 	mov	r5,r22
 1001008:	d9c15115 	stw	r7,1348(sp)
 100100c:	10026480 	call	1002648 <__swsetup_r>
 1001010:	d9c15117 	ldw	r7,1348(sp)
 1001014:	103dee26 	beq	r2,zero,10007d0 <___vfprintf_internal_r+0x70>
 1001018:	003f8c06 	br	1000e4c <___vfprintf_internal_r+0x6ec>
 100101c:	d9014217 	ldw	r4,1288(sp)
 1001020:	d9414317 	ldw	r5,1292(sp)
 1001024:	000d883a 	mov	r6,zero
 1001028:	000f883a 	mov	r7,zero
 100102c:	100918c0 	call	100918c <__eqdf2>
 1001030:	1000f21e 	bne	r2,zero,10013fc <___vfprintf_internal_r+0xc9c>
 1001034:	00804074 	movhi	r2,257
 1001038:	1097d304 	addi	r2,r2,24396
 100103c:	94800044 	addi	r18,r18,1
 1001040:	8c400044 	addi	r17,r17,1
 1001044:	a8800015 	stw	r2,0(r21)
 1001048:	00c00044 	movi	r3,1
 100104c:	008001c4 	movi	r2,7
 1001050:	a8c00115 	stw	r3,4(r21)
 1001054:	dc800e15 	stw	r18,56(sp)
 1001058:	dc400d15 	stw	r17,52(sp)
 100105c:	14430016 	blt	r2,r17,1001c60 <___vfprintf_internal_r+0x1500>
 1001060:	a8c00204 	addi	r3,r21,8
 1001064:	d8800517 	ldw	r2,20(sp)
 1001068:	d9014717 	ldw	r4,1308(sp)
 100106c:	11015c0e 	bge	r2,r4,10015e0 <___vfprintf_internal_r+0xe80>
 1001070:	dc400d17 	ldw	r17,52(sp)
 1001074:	d9814917 	ldw	r6,1316(sp)
 1001078:	00800044 	movi	r2,1
 100107c:	94800044 	addi	r18,r18,1
 1001080:	8c400044 	addi	r17,r17,1
 1001084:	18800115 	stw	r2,4(r3)
 1001088:	008001c4 	movi	r2,7
 100108c:	19800015 	stw	r6,0(r3)
 1001090:	dc800e15 	stw	r18,56(sp)
 1001094:	dc400d15 	stw	r17,52(sp)
 1001098:	14431616 	blt	r2,r17,1001cf4 <___vfprintf_internal_r+0x1594>
 100109c:	18c00204 	addi	r3,r3,8
 10010a0:	d8814717 	ldw	r2,1308(sp)
 10010a4:	143fffc4 	addi	r16,r2,-1
 10010a8:	043f2b0e 	bge	zero,r16,1000d58 <___vfprintf_internal_r+0x5f8>
 10010ac:	00800404 	movi	r2,16
 10010b0:	1402a80e 	bge	r2,r16,1001b54 <___vfprintf_internal_r+0x13f4>
 10010b4:	dc400d17 	ldw	r17,52(sp)
 10010b8:	1027883a 	mov	r19,r2
 10010bc:	07004074 	movhi	fp,257
 10010c0:	e717d384 	addi	fp,fp,24398
 10010c4:	050001c4 	movi	r20,7
 10010c8:	00000306 	br	10010d8 <___vfprintf_internal_r+0x978>
 10010cc:	18c00204 	addi	r3,r3,8
 10010d0:	843ffc04 	addi	r16,r16,-16
 10010d4:	9c02a20e 	bge	r19,r16,1001b60 <___vfprintf_internal_r+0x1400>
 10010d8:	94800404 	addi	r18,r18,16
 10010dc:	8c400044 	addi	r17,r17,1
 10010e0:	1f000015 	stw	fp,0(r3)
 10010e4:	1cc00115 	stw	r19,4(r3)
 10010e8:	dc800e15 	stw	r18,56(sp)
 10010ec:	dc400d15 	stw	r17,52(sp)
 10010f0:	a47ff60e 	bge	r20,r17,10010cc <___vfprintf_internal_r+0x96c>
 10010f4:	d9014f17 	ldw	r4,1340(sp)
 10010f8:	b00b883a 	mov	r5,r22
 10010fc:	d9800c04 	addi	r6,sp,48
 1001100:	10007080 	call	1000708 <__sprint_r>
 1001104:	103f4e1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001108:	dc800e17 	ldw	r18,56(sp)
 100110c:	dc400d17 	ldw	r17,52(sp)
 1001110:	d8c01904 	addi	r3,sp,100
 1001114:	003fee06 	br	10010d0 <___vfprintf_internal_r+0x970>
 1001118:	d8802c0b 	ldhu	r2,176(sp)
 100111c:	00ffffc4 	movi	r3,-1
 1001120:	d8c14b15 	stw	r3,1324(sp)
 1001124:	1080100c 	andi	r2,r2,64
 1001128:	103dcc1e 	bne	r2,zero,100085c <___vfprintf_internal_r+0xfc>
 100112c:	003dce06 	br	1000868 <___vfprintf_internal_r+0x108>
 1001130:	d9014f17 	ldw	r4,1340(sp)
 1001134:	b00b883a 	mov	r5,r22
 1001138:	d9800c04 	addi	r6,sp,48
 100113c:	10007080 	call	1000708 <__sprint_r>
 1001140:	103f3f1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001144:	dc800e17 	ldw	r18,56(sp)
 1001148:	003f2e06 	br	1000e04 <___vfprintf_internal_r+0x6a4>
 100114c:	d9414c17 	ldw	r5,1328(sp)
 1001150:	29400414 	ori	r5,r5,16
 1001154:	d9414c15 	stw	r5,1328(sp)
 1001158:	d9814c17 	ldw	r6,1328(sp)
 100115c:	3080080c 	andi	r2,r6,32
 1001160:	10014f1e 	bne	r2,zero,10016a0 <___vfprintf_internal_r+0xf40>
 1001164:	d8c14c17 	ldw	r3,1328(sp)
 1001168:	1880040c 	andi	r2,r3,16
 100116c:	1002f01e 	bne	r2,zero,1001d30 <___vfprintf_internal_r+0x15d0>
 1001170:	d9014c17 	ldw	r4,1328(sp)
 1001174:	2080100c 	andi	r2,r4,64
 1001178:	1002ed26 	beq	r2,zero,1001d30 <___vfprintf_internal_r+0x15d0>
 100117c:	3880000f 	ldh	r2,0(r7)
 1001180:	39c00104 	addi	r7,r7,4
 1001184:	d9c14015 	stw	r7,1280(sp)
 1001188:	1023d7fa 	srai	r17,r2,31
 100118c:	1021883a 	mov	r16,r2
 1001190:	88037816 	blt	r17,zero,1001f74 <___vfprintf_internal_r+0x1814>
 1001194:	01000044 	movi	r4,1
 1001198:	98000416 	blt	r19,zero,10011ac <___vfprintf_internal_r+0xa4c>
 100119c:	d8c14c17 	ldw	r3,1328(sp)
 10011a0:	00bfdfc4 	movi	r2,-129
 10011a4:	1886703a 	and	r3,r3,r2
 10011a8:	d8c14c15 	stw	r3,1328(sp)
 10011ac:	8444b03a 	or	r2,r16,r17
 10011b0:	10022c1e 	bne	r2,zero,1001a64 <___vfprintf_internal_r+0x1304>
 10011b4:	98022b1e 	bne	r19,zero,1001a64 <___vfprintf_internal_r+0x1304>
 10011b8:	20803fcc 	andi	r2,r4,255
 10011bc:	1002a126 	beq	r2,zero,1001c44 <___vfprintf_internal_r+0x14e4>
 10011c0:	d8c01904 	addi	r3,sp,100
 10011c4:	dd000f04 	addi	r20,sp,60
 10011c8:	d8c14115 	stw	r3,1284(sp)
 10011cc:	d8c14117 	ldw	r3,1284(sp)
 10011d0:	dcc14515 	stw	r19,1300(sp)
 10011d4:	a0c5c83a 	sub	r2,r20,r3
 10011d8:	11c00a04 	addi	r7,r2,40
 10011dc:	99c0010e 	bge	r19,r7,10011e4 <___vfprintf_internal_r+0xa84>
 10011e0:	d9c14515 	stw	r7,1300(sp)
 10011e4:	dcc14615 	stw	r19,1304(sp)
 10011e8:	d8800407 	ldb	r2,16(sp)
 10011ec:	103e4c26 	beq	r2,zero,1000b20 <___vfprintf_internal_r+0x3c0>
 10011f0:	d8814517 	ldw	r2,1300(sp)
 10011f4:	10800044 	addi	r2,r2,1
 10011f8:	d8814515 	stw	r2,1300(sp)
 10011fc:	003e4806 	br	1000b20 <___vfprintf_internal_r+0x3c0>
 1001200:	d9814c17 	ldw	r6,1328(sp)
 1001204:	31800414 	ori	r6,r6,16
 1001208:	d9814c15 	stw	r6,1328(sp)
 100120c:	d8c14c17 	ldw	r3,1328(sp)
 1001210:	1880080c 	andi	r2,r3,32
 1001214:	1001271e 	bne	r2,zero,10016b4 <___vfprintf_internal_r+0xf54>
 1001218:	d9414c17 	ldw	r5,1328(sp)
 100121c:	2880040c 	andi	r2,r5,16
 1001220:	1002bc1e 	bne	r2,zero,1001d14 <___vfprintf_internal_r+0x15b4>
 1001224:	d9814c17 	ldw	r6,1328(sp)
 1001228:	3080100c 	andi	r2,r6,64
 100122c:	1002b926 	beq	r2,zero,1001d14 <___vfprintf_internal_r+0x15b4>
 1001230:	3c00000b 	ldhu	r16,0(r7)
 1001234:	0009883a 	mov	r4,zero
 1001238:	39c00104 	addi	r7,r7,4
 100123c:	0023883a 	mov	r17,zero
 1001240:	d9c14015 	stw	r7,1280(sp)
 1001244:	d8000405 	stb	zero,16(sp)
 1001248:	003fd306 	br	1001198 <___vfprintf_internal_r+0xa38>
 100124c:	d9014c17 	ldw	r4,1328(sp)
 1001250:	21000414 	ori	r4,r4,16
 1001254:	d9014c15 	stw	r4,1328(sp)
 1001258:	d9414c17 	ldw	r5,1328(sp)
 100125c:	2880080c 	andi	r2,r5,32
 1001260:	1001081e 	bne	r2,zero,1001684 <___vfprintf_internal_r+0xf24>
 1001264:	d8c14c17 	ldw	r3,1328(sp)
 1001268:	1880040c 	andi	r2,r3,16
 100126c:	1002b61e 	bne	r2,zero,1001d48 <___vfprintf_internal_r+0x15e8>
 1001270:	d9014c17 	ldw	r4,1328(sp)
 1001274:	2080100c 	andi	r2,r4,64
 1001278:	1002b326 	beq	r2,zero,1001d48 <___vfprintf_internal_r+0x15e8>
 100127c:	3c00000b 	ldhu	r16,0(r7)
 1001280:	01000044 	movi	r4,1
 1001284:	39c00104 	addi	r7,r7,4
 1001288:	0023883a 	mov	r17,zero
 100128c:	d9c14015 	stw	r7,1280(sp)
 1001290:	d8000405 	stb	zero,16(sp)
 1001294:	003fc006 	br	1001198 <___vfprintf_internal_r+0xa38>
 1001298:	d9014f17 	ldw	r4,1340(sp)
 100129c:	b00b883a 	mov	r5,r22
 10012a0:	d9800c04 	addi	r6,sp,48
 10012a4:	10007080 	call	1000708 <__sprint_r>
 10012a8:	103ee51e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 10012ac:	dc800e17 	ldw	r18,56(sp)
 10012b0:	d8c01904 	addi	r3,sp,100
 10012b4:	d9814c17 	ldw	r6,1328(sp)
 10012b8:	3080004c 	andi	r2,r6,1
 10012bc:	1005003a 	cmpeq	r2,r2,zero
 10012c0:	103ea51e 	bne	r2,zero,1000d58 <___vfprintf_internal_r+0x5f8>
 10012c4:	00800044 	movi	r2,1
 10012c8:	dc400d17 	ldw	r17,52(sp)
 10012cc:	18800115 	stw	r2,4(r3)
 10012d0:	d8814917 	ldw	r2,1316(sp)
 10012d4:	94800044 	addi	r18,r18,1
 10012d8:	8c400044 	addi	r17,r17,1
 10012dc:	18800015 	stw	r2,0(r3)
 10012e0:	008001c4 	movi	r2,7
 10012e4:	dc800e15 	stw	r18,56(sp)
 10012e8:	dc400d15 	stw	r17,52(sp)
 10012ec:	1442240e 	bge	r2,r17,1001b80 <___vfprintf_internal_r+0x1420>
 10012f0:	d9014f17 	ldw	r4,1340(sp)
 10012f4:	b00b883a 	mov	r5,r22
 10012f8:	d9800c04 	addi	r6,sp,48
 10012fc:	10007080 	call	1000708 <__sprint_r>
 1001300:	103ecf1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001304:	dc800e17 	ldw	r18,56(sp)
 1001308:	d8c01904 	addi	r3,sp,100
 100130c:	003e9206 	br	1000d58 <___vfprintf_internal_r+0x5f8>
 1001310:	d9014f17 	ldw	r4,1340(sp)
 1001314:	b00b883a 	mov	r5,r22
 1001318:	d9800c04 	addi	r6,sp,48
 100131c:	10007080 	call	1000708 <__sprint_r>
 1001320:	103ec026 	beq	r2,zero,1000e24 <___vfprintf_internal_r+0x6c4>
 1001324:	003ec606 	br	1000e40 <___vfprintf_internal_r+0x6e0>
 1001328:	d9014f17 	ldw	r4,1340(sp)
 100132c:	b00b883a 	mov	r5,r22
 1001330:	d9800c04 	addi	r6,sp,48
 1001334:	d9c15115 	stw	r7,1348(sp)
 1001338:	10007080 	call	1000708 <__sprint_r>
 100133c:	d9c15117 	ldw	r7,1348(sp)
 1001340:	103ebf1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001344:	dc800e17 	ldw	r18,56(sp)
 1001348:	dc400d17 	ldw	r17,52(sp)
 100134c:	dd401904 	addi	r21,sp,100
 1001350:	003e7406 	br	1000d24 <___vfprintf_internal_r+0x5c4>
 1001354:	d9014f17 	ldw	r4,1340(sp)
 1001358:	b00b883a 	mov	r5,r22
 100135c:	d9800c04 	addi	r6,sp,48
 1001360:	d9c15115 	stw	r7,1348(sp)
 1001364:	10007080 	call	1000708 <__sprint_r>
 1001368:	d9c15117 	ldw	r7,1348(sp)
 100136c:	103eb41e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001370:	dd401904 	addi	r21,sp,100
 1001374:	003d6d06 	br	100092c <___vfprintf_internal_r+0x1cc>
 1001378:	d9014f17 	ldw	r4,1340(sp)
 100137c:	b00b883a 	mov	r5,r22
 1001380:	d9800c04 	addi	r6,sp,48
 1001384:	d9c15115 	stw	r7,1348(sp)
 1001388:	10007080 	call	1000708 <__sprint_r>
 100138c:	d9c15117 	ldw	r7,1348(sp)
 1001390:	103eab1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001394:	dc800e17 	ldw	r18,56(sp)
 1001398:	dc400d17 	ldw	r17,52(sp)
 100139c:	dd401904 	addi	r21,sp,100
 10013a0:	003e3406 	br	1000c74 <___vfprintf_internal_r+0x514>
 10013a4:	d9014f17 	ldw	r4,1340(sp)
 10013a8:	b00b883a 	mov	r5,r22
 10013ac:	d9800c04 	addi	r6,sp,48
 10013b0:	d9c15115 	stw	r7,1348(sp)
 10013b4:	10007080 	call	1000708 <__sprint_r>
 10013b8:	d9c15117 	ldw	r7,1348(sp)
 10013bc:	103ea01e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 10013c0:	dc800e17 	ldw	r18,56(sp)
 10013c4:	dc400d17 	ldw	r17,52(sp)
 10013c8:	dd401904 	addi	r21,sp,100
 10013cc:	003e1c06 	br	1000c40 <___vfprintf_internal_r+0x4e0>
 10013d0:	d9014f17 	ldw	r4,1340(sp)
 10013d4:	b00b883a 	mov	r5,r22
 10013d8:	d9800c04 	addi	r6,sp,48
 10013dc:	d9c15115 	stw	r7,1348(sp)
 10013e0:	10007080 	call	1000708 <__sprint_r>
 10013e4:	d9c15117 	ldw	r7,1348(sp)
 10013e8:	103e951e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 10013ec:	dc800e17 	ldw	r18,56(sp)
 10013f0:	dc400d17 	ldw	r17,52(sp)
 10013f4:	dd401904 	addi	r21,sp,100
 10013f8:	003e0406 	br	1000c0c <___vfprintf_internal_r+0x4ac>
 10013fc:	d9000517 	ldw	r4,20(sp)
 1001400:	0102580e 	bge	zero,r4,1001d64 <___vfprintf_internal_r+0x1604>
 1001404:	d9814717 	ldw	r6,1308(sp)
 1001408:	21807a16 	blt	r4,r6,10015f4 <___vfprintf_internal_r+0xe94>
 100140c:	d8814117 	ldw	r2,1284(sp)
 1001410:	91a5883a 	add	r18,r18,r6
 1001414:	8c400044 	addi	r17,r17,1
 1001418:	a8800015 	stw	r2,0(r21)
 100141c:	008001c4 	movi	r2,7
 1001420:	a9800115 	stw	r6,4(r21)
 1001424:	dc800e15 	stw	r18,56(sp)
 1001428:	dc400d15 	stw	r17,52(sp)
 100142c:	1442fc16 	blt	r2,r17,1002020 <___vfprintf_internal_r+0x18c0>
 1001430:	a8c00204 	addi	r3,r21,8
 1001434:	d9414717 	ldw	r5,1308(sp)
 1001438:	2161c83a 	sub	r16,r4,r5
 100143c:	043f9d0e 	bge	zero,r16,10012b4 <___vfprintf_internal_r+0xb54>
 1001440:	00800404 	movi	r2,16
 1001444:	1402190e 	bge	r2,r16,1001cac <___vfprintf_internal_r+0x154c>
 1001448:	dc400d17 	ldw	r17,52(sp)
 100144c:	1027883a 	mov	r19,r2
 1001450:	07004074 	movhi	fp,257
 1001454:	e717d384 	addi	fp,fp,24398
 1001458:	050001c4 	movi	r20,7
 100145c:	00000306 	br	100146c <___vfprintf_internal_r+0xd0c>
 1001460:	18c00204 	addi	r3,r3,8
 1001464:	843ffc04 	addi	r16,r16,-16
 1001468:	9c02130e 	bge	r19,r16,1001cb8 <___vfprintf_internal_r+0x1558>
 100146c:	94800404 	addi	r18,r18,16
 1001470:	8c400044 	addi	r17,r17,1
 1001474:	1f000015 	stw	fp,0(r3)
 1001478:	1cc00115 	stw	r19,4(r3)
 100147c:	dc800e15 	stw	r18,56(sp)
 1001480:	dc400d15 	stw	r17,52(sp)
 1001484:	a47ff60e 	bge	r20,r17,1001460 <___vfprintf_internal_r+0xd00>
 1001488:	d9014f17 	ldw	r4,1340(sp)
 100148c:	b00b883a 	mov	r5,r22
 1001490:	d9800c04 	addi	r6,sp,48
 1001494:	10007080 	call	1000708 <__sprint_r>
 1001498:	103e691e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 100149c:	dc800e17 	ldw	r18,56(sp)
 10014a0:	dc400d17 	ldw	r17,52(sp)
 10014a4:	d8c01904 	addi	r3,sp,100
 10014a8:	003fee06 	br	1001464 <___vfprintf_internal_r+0xd04>
 10014ac:	d8814717 	ldw	r2,1308(sp)
 10014b0:	143fffc4 	addi	r16,r2,-1
 10014b4:	043e970e 	bge	zero,r16,1000f14 <___vfprintf_internal_r+0x7b4>
 10014b8:	00800404 	movi	r2,16
 10014bc:	1400180e 	bge	r2,r16,1001520 <___vfprintf_internal_r+0xdc0>
 10014c0:	1029883a 	mov	r20,r2
 10014c4:	07004074 	movhi	fp,257
 10014c8:	e717d384 	addi	fp,fp,24398
 10014cc:	054001c4 	movi	r21,7
 10014d0:	00000306 	br	10014e0 <___vfprintf_internal_r+0xd80>
 10014d4:	9cc00204 	addi	r19,r19,8
 10014d8:	843ffc04 	addi	r16,r16,-16
 10014dc:	a400120e 	bge	r20,r16,1001528 <___vfprintf_internal_r+0xdc8>
 10014e0:	94800404 	addi	r18,r18,16
 10014e4:	8c400044 	addi	r17,r17,1
 10014e8:	9f000015 	stw	fp,0(r19)
 10014ec:	9d000115 	stw	r20,4(r19)
 10014f0:	dc800e15 	stw	r18,56(sp)
 10014f4:	dc400d15 	stw	r17,52(sp)
 10014f8:	ac7ff60e 	bge	r21,r17,10014d4 <___vfprintf_internal_r+0xd74>
 10014fc:	d9014f17 	ldw	r4,1340(sp)
 1001500:	b00b883a 	mov	r5,r22
 1001504:	d9800c04 	addi	r6,sp,48
 1001508:	10007080 	call	1000708 <__sprint_r>
 100150c:	103e4c1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001510:	dc800e17 	ldw	r18,56(sp)
 1001514:	dc400d17 	ldw	r17,52(sp)
 1001518:	dcc01904 	addi	r19,sp,100
 100151c:	003fee06 	br	10014d8 <___vfprintf_internal_r+0xd78>
 1001520:	07004074 	movhi	fp,257
 1001524:	e717d384 	addi	fp,fp,24398
 1001528:	9425883a 	add	r18,r18,r16
 100152c:	8c400044 	addi	r17,r17,1
 1001530:	008001c4 	movi	r2,7
 1001534:	9f000015 	stw	fp,0(r19)
 1001538:	9c000115 	stw	r16,4(r19)
 100153c:	dc800e15 	stw	r18,56(sp)
 1001540:	dc400d15 	stw	r17,52(sp)
 1001544:	147e720e 	bge	r2,r17,1000f10 <___vfprintf_internal_r+0x7b0>
 1001548:	d9014f17 	ldw	r4,1340(sp)
 100154c:	b00b883a 	mov	r5,r22
 1001550:	d9800c04 	addi	r6,sp,48
 1001554:	10007080 	call	1000708 <__sprint_r>
 1001558:	103e391e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 100155c:	dc800e17 	ldw	r18,56(sp)
 1001560:	dc400d17 	ldw	r17,52(sp)
 1001564:	dcc01904 	addi	r19,sp,100
 1001568:	003e6a06 	br	1000f14 <___vfprintf_internal_r+0x7b4>
 100156c:	d9014f17 	ldw	r4,1340(sp)
 1001570:	b00b883a 	mov	r5,r22
 1001574:	d9800c04 	addi	r6,sp,48
 1001578:	d9c15115 	stw	r7,1348(sp)
 100157c:	10007080 	call	1000708 <__sprint_r>
 1001580:	d9c15117 	ldw	r7,1348(sp)
 1001584:	103e2e1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001588:	dc800e17 	ldw	r18,56(sp)
 100158c:	dc400d17 	ldw	r17,52(sp)
 1001590:	dd401904 	addi	r21,sp,100
 1001594:	003dba06 	br	1000c80 <___vfprintf_internal_r+0x520>
 1001598:	d9014f17 	ldw	r4,1340(sp)
 100159c:	b00b883a 	mov	r5,r22
 10015a0:	d9800c04 	addi	r6,sp,48
 10015a4:	10007080 	call	1000708 <__sprint_r>
 10015a8:	103e251e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 10015ac:	dc800e17 	ldw	r18,56(sp)
 10015b0:	dc400d17 	ldw	r17,52(sp)
 10015b4:	dcc01904 	addi	r19,sp,100
 10015b8:	003e4206 	br	1000ec4 <___vfprintf_internal_r+0x764>
 10015bc:	d9014f17 	ldw	r4,1340(sp)
 10015c0:	b00b883a 	mov	r5,r22
 10015c4:	d9800c04 	addi	r6,sp,48
 10015c8:	10007080 	call	1000708 <__sprint_r>
 10015cc:	103e1c1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 10015d0:	dc800e17 	ldw	r18,56(sp)
 10015d4:	dc400d17 	ldw	r17,52(sp)
 10015d8:	d8c01904 	addi	r3,sp,100
 10015dc:	003e2e06 	br	1000e98 <___vfprintf_internal_r+0x738>
 10015e0:	d9414c17 	ldw	r5,1328(sp)
 10015e4:	2880004c 	andi	r2,r5,1
 10015e8:	1005003a 	cmpeq	r2,r2,zero
 10015ec:	103dda1e 	bne	r2,zero,1000d58 <___vfprintf_internal_r+0x5f8>
 10015f0:	003e9f06 	br	1001070 <___vfprintf_internal_r+0x910>
 10015f4:	d8c14117 	ldw	r3,1284(sp)
 10015f8:	9125883a 	add	r18,r18,r4
 10015fc:	8c400044 	addi	r17,r17,1
 1001600:	008001c4 	movi	r2,7
 1001604:	a8c00015 	stw	r3,0(r21)
 1001608:	a9000115 	stw	r4,4(r21)
 100160c:	dc800e15 	stw	r18,56(sp)
 1001610:	dc400d15 	stw	r17,52(sp)
 1001614:	14426c16 	blt	r2,r17,1001fc8 <___vfprintf_internal_r+0x1868>
 1001618:	a8c00204 	addi	r3,r21,8
 100161c:	d9414917 	ldw	r5,1316(sp)
 1001620:	00800044 	movi	r2,1
 1001624:	94800044 	addi	r18,r18,1
 1001628:	8c400044 	addi	r17,r17,1
 100162c:	18800115 	stw	r2,4(r3)
 1001630:	008001c4 	movi	r2,7
 1001634:	19400015 	stw	r5,0(r3)
 1001638:	dc800e15 	stw	r18,56(sp)
 100163c:	dc400d15 	stw	r17,52(sp)
 1001640:	2021883a 	mov	r16,r4
 1001644:	14425616 	blt	r2,r17,1001fa0 <___vfprintf_internal_r+0x1840>
 1001648:	19400204 	addi	r5,r3,8
 100164c:	d9814717 	ldw	r6,1308(sp)
 1001650:	8c400044 	addi	r17,r17,1
 1001654:	dc400d15 	stw	r17,52(sp)
 1001658:	3107c83a 	sub	r3,r6,r4
 100165c:	d9014117 	ldw	r4,1284(sp)
 1001660:	90e5883a 	add	r18,r18,r3
 1001664:	28c00115 	stw	r3,4(r5)
 1001668:	8105883a 	add	r2,r16,r4
 100166c:	28800015 	stw	r2,0(r5)
 1001670:	008001c4 	movi	r2,7
 1001674:	dc800e15 	stw	r18,56(sp)
 1001678:	147f1d16 	blt	r2,r17,10012f0 <___vfprintf_internal_r+0xb90>
 100167c:	28c00204 	addi	r3,r5,8
 1001680:	003db506 	br	1000d58 <___vfprintf_internal_r+0x5f8>
 1001684:	3c000017 	ldw	r16,0(r7)
 1001688:	3c400117 	ldw	r17,4(r7)
 100168c:	39800204 	addi	r6,r7,8
 1001690:	01000044 	movi	r4,1
 1001694:	d9814015 	stw	r6,1280(sp)
 1001698:	d8000405 	stb	zero,16(sp)
 100169c:	003ebe06 	br	1001198 <___vfprintf_internal_r+0xa38>
 10016a0:	3c000017 	ldw	r16,0(r7)
 10016a4:	3c400117 	ldw	r17,4(r7)
 10016a8:	38800204 	addi	r2,r7,8
 10016ac:	d8814015 	stw	r2,1280(sp)
 10016b0:	003eb706 	br	1001190 <___vfprintf_internal_r+0xa30>
 10016b4:	3c000017 	ldw	r16,0(r7)
 10016b8:	3c400117 	ldw	r17,4(r7)
 10016bc:	39000204 	addi	r4,r7,8
 10016c0:	d9014015 	stw	r4,1280(sp)
 10016c4:	0009883a 	mov	r4,zero
 10016c8:	d8000405 	stb	zero,16(sp)
 10016cc:	003eb206 	br	1001198 <___vfprintf_internal_r+0xa38>
 10016d0:	38c00017 	ldw	r3,0(r7)
 10016d4:	39c00104 	addi	r7,r7,4
 10016d8:	d8c14a15 	stw	r3,1320(sp)
 10016dc:	1800d70e 	bge	r3,zero,1001a3c <___vfprintf_internal_r+0x12dc>
 10016e0:	00c7c83a 	sub	r3,zero,r3
 10016e4:	d8c14a15 	stw	r3,1320(sp)
 10016e8:	d9014c17 	ldw	r4,1328(sp)
 10016ec:	b8c00007 	ldb	r3,0(r23)
 10016f0:	21000114 	ori	r4,r4,4
 10016f4:	d9014c15 	stw	r4,1328(sp)
 10016f8:	003c9806 	br	100095c <___vfprintf_internal_r+0x1fc>
 10016fc:	d9814c17 	ldw	r6,1328(sp)
 1001700:	3080080c 	andi	r2,r6,32
 1001704:	1001f626 	beq	r2,zero,1001ee0 <___vfprintf_internal_r+0x1780>
 1001708:	d9014b17 	ldw	r4,1324(sp)
 100170c:	38800017 	ldw	r2,0(r7)
 1001710:	39c00104 	addi	r7,r7,4
 1001714:	d9c14015 	stw	r7,1280(sp)
 1001718:	2007d7fa 	srai	r3,r4,31
 100171c:	d9c14017 	ldw	r7,1280(sp)
 1001720:	11000015 	stw	r4,0(r2)
 1001724:	10c00115 	stw	r3,4(r2)
 1001728:	003c6906 	br	10008d0 <___vfprintf_internal_r+0x170>
 100172c:	b8c00007 	ldb	r3,0(r23)
 1001730:	00801b04 	movi	r2,108
 1001734:	18825526 	beq	r3,r2,100208c <___vfprintf_internal_r+0x192c>
 1001738:	d9414c17 	ldw	r5,1328(sp)
 100173c:	29400414 	ori	r5,r5,16
 1001740:	d9414c15 	stw	r5,1328(sp)
 1001744:	003c8506 	br	100095c <___vfprintf_internal_r+0x1fc>
 1001748:	d9814c17 	ldw	r6,1328(sp)
 100174c:	b8c00007 	ldb	r3,0(r23)
 1001750:	31800814 	ori	r6,r6,32
 1001754:	d9814c15 	stw	r6,1328(sp)
 1001758:	003c8006 	br	100095c <___vfprintf_internal_r+0x1fc>
 100175c:	d8814c17 	ldw	r2,1328(sp)
 1001760:	3c000017 	ldw	r16,0(r7)
 1001764:	00c01e04 	movi	r3,120
 1001768:	10800094 	ori	r2,r2,2
 100176c:	d8814c15 	stw	r2,1328(sp)
 1001770:	39c00104 	addi	r7,r7,4
 1001774:	01404074 	movhi	r5,257
 1001778:	2957bc04 	addi	r5,r5,24304
 100177c:	00800c04 	movi	r2,48
 1001780:	0023883a 	mov	r17,zero
 1001784:	01000084 	movi	r4,2
 1001788:	d9c14015 	stw	r7,1280(sp)
 100178c:	d8c14d15 	stw	r3,1332(sp)
 1001790:	d9414415 	stw	r5,1296(sp)
 1001794:	d8800445 	stb	r2,17(sp)
 1001798:	d8c00485 	stb	r3,18(sp)
 100179c:	d8000405 	stb	zero,16(sp)
 10017a0:	003e7d06 	br	1001198 <___vfprintf_internal_r+0xa38>
 10017a4:	d8814c17 	ldw	r2,1328(sp)
 10017a8:	b8c00007 	ldb	r3,0(r23)
 10017ac:	10801014 	ori	r2,r2,64
 10017b0:	d8814c15 	stw	r2,1328(sp)
 10017b4:	003c6906 	br	100095c <___vfprintf_internal_r+0x1fc>
 10017b8:	d9414c17 	ldw	r5,1328(sp)
 10017bc:	2880020c 	andi	r2,r5,8
 10017c0:	1001e526 	beq	r2,zero,1001f58 <___vfprintf_internal_r+0x17f8>
 10017c4:	39800017 	ldw	r6,0(r7)
 10017c8:	38800204 	addi	r2,r7,8
 10017cc:	d8814015 	stw	r2,1280(sp)
 10017d0:	d9814215 	stw	r6,1288(sp)
 10017d4:	39c00117 	ldw	r7,4(r7)
 10017d8:	d9c14315 	stw	r7,1292(sp)
 10017dc:	d9014217 	ldw	r4,1288(sp)
 10017e0:	d9414317 	ldw	r5,1292(sp)
 10017e4:	10072100 	call	1007210 <__isinfd>
 10017e8:	10021d26 	beq	r2,zero,1002060 <___vfprintf_internal_r+0x1900>
 10017ec:	d9014217 	ldw	r4,1288(sp)
 10017f0:	d9414317 	ldw	r5,1292(sp)
 10017f4:	000d883a 	mov	r6,zero
 10017f8:	000f883a 	mov	r7,zero
 10017fc:	10093ac0 	call	10093ac <__ltdf2>
 1001800:	1002d016 	blt	r2,zero,1002344 <___vfprintf_internal_r+0x1be4>
 1001804:	d9414d17 	ldw	r5,1332(sp)
 1001808:	008011c4 	movi	r2,71
 100180c:	11421016 	blt	r2,r5,1002050 <___vfprintf_internal_r+0x18f0>
 1001810:	01804074 	movhi	r6,257
 1001814:	3197c104 	addi	r6,r6,24324
 1001818:	d9814115 	stw	r6,1284(sp)
 100181c:	d9014c17 	ldw	r4,1328(sp)
 1001820:	00c000c4 	movi	r3,3
 1001824:	00bfdfc4 	movi	r2,-129
 1001828:	2088703a 	and	r4,r4,r2
 100182c:	180f883a 	mov	r7,r3
 1001830:	d8c14515 	stw	r3,1300(sp)
 1001834:	d9014c15 	stw	r4,1328(sp)
 1001838:	d8014615 	stw	zero,1304(sp)
 100183c:	003e6a06 	br	10011e8 <___vfprintf_internal_r+0xa88>
 1001840:	38800017 	ldw	r2,0(r7)
 1001844:	00c00044 	movi	r3,1
 1001848:	39c00104 	addi	r7,r7,4
 100184c:	d9c14015 	stw	r7,1280(sp)
 1001850:	d9000f04 	addi	r4,sp,60
 1001854:	180f883a 	mov	r7,r3
 1001858:	d8c14515 	stw	r3,1300(sp)
 100185c:	d9014115 	stw	r4,1284(sp)
 1001860:	d8800f05 	stb	r2,60(sp)
 1001864:	d8000405 	stb	zero,16(sp)
 1001868:	003cac06 	br	1000b1c <___vfprintf_internal_r+0x3bc>
 100186c:	01404074 	movhi	r5,257
 1001870:	2957c704 	addi	r5,r5,24348
 1001874:	d9414415 	stw	r5,1296(sp)
 1001878:	d9814c17 	ldw	r6,1328(sp)
 100187c:	3080080c 	andi	r2,r6,32
 1001880:	1000ff26 	beq	r2,zero,1001c80 <___vfprintf_internal_r+0x1520>
 1001884:	3c000017 	ldw	r16,0(r7)
 1001888:	3c400117 	ldw	r17,4(r7)
 100188c:	38800204 	addi	r2,r7,8
 1001890:	d8814015 	stw	r2,1280(sp)
 1001894:	d9414c17 	ldw	r5,1328(sp)
 1001898:	2880004c 	andi	r2,r5,1
 100189c:	1005003a 	cmpeq	r2,r2,zero
 10018a0:	1000b91e 	bne	r2,zero,1001b88 <___vfprintf_internal_r+0x1428>
 10018a4:	8444b03a 	or	r2,r16,r17
 10018a8:	1000b726 	beq	r2,zero,1001b88 <___vfprintf_internal_r+0x1428>
 10018ac:	d9814d17 	ldw	r6,1332(sp)
 10018b0:	29400094 	ori	r5,r5,2
 10018b4:	00800c04 	movi	r2,48
 10018b8:	01000084 	movi	r4,2
 10018bc:	d9414c15 	stw	r5,1328(sp)
 10018c0:	d8800445 	stb	r2,17(sp)
 10018c4:	d9800485 	stb	r6,18(sp)
 10018c8:	d8000405 	stb	zero,16(sp)
 10018cc:	003e3206 	br	1001198 <___vfprintf_internal_r+0xa38>
 10018d0:	01804074 	movhi	r6,257
 10018d4:	3197bc04 	addi	r6,r6,24304
 10018d8:	d9814415 	stw	r6,1296(sp)
 10018dc:	003fe606 	br	1001878 <___vfprintf_internal_r+0x1118>
 10018e0:	00800ac4 	movi	r2,43
 10018e4:	d8800405 	stb	r2,16(sp)
 10018e8:	b8c00007 	ldb	r3,0(r23)
 10018ec:	003c1b06 	br	100095c <___vfprintf_internal_r+0x1fc>
 10018f0:	d8814c17 	ldw	r2,1328(sp)
 10018f4:	b8c00007 	ldb	r3,0(r23)
 10018f8:	10800054 	ori	r2,r2,1
 10018fc:	d8814c15 	stw	r2,1328(sp)
 1001900:	003c1606 	br	100095c <___vfprintf_internal_r+0x1fc>
 1001904:	d8800407 	ldb	r2,16(sp)
 1001908:	10004c1e 	bne	r2,zero,1001a3c <___vfprintf_internal_r+0x12dc>
 100190c:	00800804 	movi	r2,32
 1001910:	d8800405 	stb	r2,16(sp)
 1001914:	b8c00007 	ldb	r3,0(r23)
 1001918:	003c1006 	br	100095c <___vfprintf_internal_r+0x1fc>
 100191c:	d9814c17 	ldw	r6,1328(sp)
 1001920:	b8c00007 	ldb	r3,0(r23)
 1001924:	31800214 	ori	r6,r6,8
 1001928:	d9814c15 	stw	r6,1328(sp)
 100192c:	003c0b06 	br	100095c <___vfprintf_internal_r+0x1fc>
 1001930:	0009883a 	mov	r4,zero
 1001934:	04000244 	movi	r16,9
 1001938:	01400284 	movi	r5,10
 100193c:	d9c15115 	stw	r7,1348(sp)
 1001940:	10098e40 	call	10098e4 <__mulsi3>
 1001944:	b9000007 	ldb	r4,0(r23)
 1001948:	d8c14d17 	ldw	r3,1332(sp)
 100194c:	bdc00044 	addi	r23,r23,1
 1001950:	d9014d15 	stw	r4,1332(sp)
 1001954:	d9414d17 	ldw	r5,1332(sp)
 1001958:	1885883a 	add	r2,r3,r2
 100195c:	113ff404 	addi	r4,r2,-48
 1001960:	28bff404 	addi	r2,r5,-48
 1001964:	d9c15117 	ldw	r7,1348(sp)
 1001968:	80bff32e 	bgeu	r16,r2,1001938 <___vfprintf_internal_r+0x11d8>
 100196c:	d9014a15 	stw	r4,1320(sp)
 1001970:	003bfc06 	br	1000964 <___vfprintf_internal_r+0x204>
 1001974:	d8814c17 	ldw	r2,1328(sp)
 1001978:	b8c00007 	ldb	r3,0(r23)
 100197c:	10802014 	ori	r2,r2,128
 1001980:	d8814c15 	stw	r2,1328(sp)
 1001984:	003bf506 	br	100095c <___vfprintf_internal_r+0x1fc>
 1001988:	b8c00007 	ldb	r3,0(r23)
 100198c:	00800a84 	movi	r2,42
 1001990:	bdc00044 	addi	r23,r23,1
 1001994:	18831826 	beq	r3,r2,10025f8 <___vfprintf_internal_r+0x1e98>
 1001998:	d8c14d15 	stw	r3,1332(sp)
 100199c:	18bff404 	addi	r2,r3,-48
 10019a0:	00c00244 	movi	r3,9
 10019a4:	18827b36 	bltu	r3,r2,1002394 <___vfprintf_internal_r+0x1c34>
 10019a8:	1821883a 	mov	r16,r3
 10019ac:	0009883a 	mov	r4,zero
 10019b0:	01400284 	movi	r5,10
 10019b4:	d9c15115 	stw	r7,1348(sp)
 10019b8:	10098e40 	call	10098e4 <__mulsi3>
 10019bc:	d9414d17 	ldw	r5,1332(sp)
 10019c0:	b9800007 	ldb	r6,0(r23)
 10019c4:	d9c15117 	ldw	r7,1348(sp)
 10019c8:	1145883a 	add	r2,r2,r5
 10019cc:	113ff404 	addi	r4,r2,-48
 10019d0:	30bff404 	addi	r2,r6,-48
 10019d4:	d9814d15 	stw	r6,1332(sp)
 10019d8:	bdc00044 	addi	r23,r23,1
 10019dc:	80bff42e 	bgeu	r16,r2,10019b0 <___vfprintf_internal_r+0x1250>
 10019e0:	2027883a 	mov	r19,r4
 10019e4:	203bdf0e 	bge	r4,zero,1000964 <___vfprintf_internal_r+0x204>
 10019e8:	04ffffc4 	movi	r19,-1
 10019ec:	003bdd06 	br	1000964 <___vfprintf_internal_r+0x204>
 10019f0:	d8000405 	stb	zero,16(sp)
 10019f4:	39800017 	ldw	r6,0(r7)
 10019f8:	39c00104 	addi	r7,r7,4
 10019fc:	d9c14015 	stw	r7,1280(sp)
 1001a00:	d9814115 	stw	r6,1284(sp)
 1001a04:	3001c926 	beq	r6,zero,100212c <___vfprintf_internal_r+0x19cc>
 1001a08:	98000e16 	blt	r19,zero,1001a44 <___vfprintf_internal_r+0x12e4>
 1001a0c:	d9014117 	ldw	r4,1284(sp)
 1001a10:	000b883a 	mov	r5,zero
 1001a14:	980d883a 	mov	r6,r19
 1001a18:	10058940 	call	1005894 <memchr>
 1001a1c:	10025926 	beq	r2,zero,1002384 <___vfprintf_internal_r+0x1c24>
 1001a20:	d8c14117 	ldw	r3,1284(sp)
 1001a24:	10cfc83a 	sub	r7,r2,r3
 1001a28:	99c19e16 	blt	r19,r7,10020a4 <___vfprintf_internal_r+0x1944>
 1001a2c:	d9c14515 	stw	r7,1300(sp)
 1001a30:	38000916 	blt	r7,zero,1001a58 <___vfprintf_internal_r+0x12f8>
 1001a34:	d8014615 	stw	zero,1304(sp)
 1001a38:	003deb06 	br	10011e8 <___vfprintf_internal_r+0xa88>
 1001a3c:	b8c00007 	ldb	r3,0(r23)
 1001a40:	003bc606 	br	100095c <___vfprintf_internal_r+0x1fc>
 1001a44:	d9014117 	ldw	r4,1284(sp)
 1001a48:	10006940 	call	1000694 <strlen>
 1001a4c:	d8814515 	stw	r2,1300(sp)
 1001a50:	100f883a 	mov	r7,r2
 1001a54:	103ff70e 	bge	r2,zero,1001a34 <___vfprintf_internal_r+0x12d4>
 1001a58:	d8014515 	stw	zero,1300(sp)
 1001a5c:	d8014615 	stw	zero,1304(sp)
 1001a60:	003de106 	br	10011e8 <___vfprintf_internal_r+0xa88>
 1001a64:	20c03fcc 	andi	r3,r4,255
 1001a68:	00800044 	movi	r2,1
 1001a6c:	18802d26 	beq	r3,r2,1001b24 <___vfprintf_internal_r+0x13c4>
 1001a70:	18800e36 	bltu	r3,r2,1001aac <___vfprintf_internal_r+0x134c>
 1001a74:	00800084 	movi	r2,2
 1001a78:	1880fa26 	beq	r3,r2,1001e64 <___vfprintf_internal_r+0x1704>
 1001a7c:	01004074 	movhi	r4,257
 1001a80:	2117cc04 	addi	r4,r4,24368
 1001a84:	10006940 	call	1000694 <strlen>
 1001a88:	100f883a 	mov	r7,r2
 1001a8c:	dcc14515 	stw	r19,1300(sp)
 1001a90:	9880010e 	bge	r19,r2,1001a98 <___vfprintf_internal_r+0x1338>
 1001a94:	d8814515 	stw	r2,1300(sp)
 1001a98:	00804074 	movhi	r2,257
 1001a9c:	1097cc04 	addi	r2,r2,24368
 1001aa0:	dcc14615 	stw	r19,1304(sp)
 1001aa4:	d8814115 	stw	r2,1284(sp)
 1001aa8:	003dcf06 	br	10011e8 <___vfprintf_internal_r+0xa88>
 1001aac:	d9401904 	addi	r5,sp,100
 1001ab0:	dd000f04 	addi	r20,sp,60
 1001ab4:	d9414115 	stw	r5,1284(sp)
 1001ab8:	880a977a 	slli	r5,r17,29
 1001abc:	d9814117 	ldw	r6,1284(sp)
 1001ac0:	8004d0fa 	srli	r2,r16,3
 1001ac4:	8806d0fa 	srli	r3,r17,3
 1001ac8:	810001cc 	andi	r4,r16,7
 1001acc:	2884b03a 	or	r2,r5,r2
 1001ad0:	31bfffc4 	addi	r6,r6,-1
 1001ad4:	21000c04 	addi	r4,r4,48
 1001ad8:	d9814115 	stw	r6,1284(sp)
 1001adc:	10cab03a 	or	r5,r2,r3
 1001ae0:	31000005 	stb	r4,0(r6)
 1001ae4:	1021883a 	mov	r16,r2
 1001ae8:	1823883a 	mov	r17,r3
 1001aec:	283ff21e 	bne	r5,zero,1001ab8 <___vfprintf_internal_r+0x1358>
 1001af0:	d8c14c17 	ldw	r3,1328(sp)
 1001af4:	1880004c 	andi	r2,r3,1
 1001af8:	1005003a 	cmpeq	r2,r2,zero
 1001afc:	103db31e 	bne	r2,zero,10011cc <___vfprintf_internal_r+0xa6c>
 1001b00:	20803fcc 	andi	r2,r4,255
 1001b04:	1080201c 	xori	r2,r2,128
 1001b08:	10bfe004 	addi	r2,r2,-128
 1001b0c:	00c00c04 	movi	r3,48
 1001b10:	10fdae26 	beq	r2,r3,10011cc <___vfprintf_internal_r+0xa6c>
 1001b14:	31bfffc4 	addi	r6,r6,-1
 1001b18:	d9814115 	stw	r6,1284(sp)
 1001b1c:	30c00005 	stb	r3,0(r6)
 1001b20:	003daa06 	br	10011cc <___vfprintf_internal_r+0xa6c>
 1001b24:	88800068 	cmpgeui	r2,r17,1
 1001b28:	10002c1e 	bne	r2,zero,1001bdc <___vfprintf_internal_r+0x147c>
 1001b2c:	8800021e 	bne	r17,zero,1001b38 <___vfprintf_internal_r+0x13d8>
 1001b30:	00800244 	movi	r2,9
 1001b34:	14002936 	bltu	r2,r16,1001bdc <___vfprintf_internal_r+0x147c>
 1001b38:	d90018c4 	addi	r4,sp,99
 1001b3c:	dd000f04 	addi	r20,sp,60
 1001b40:	d9014115 	stw	r4,1284(sp)
 1001b44:	d9014117 	ldw	r4,1284(sp)
 1001b48:	80800c04 	addi	r2,r16,48
 1001b4c:	20800005 	stb	r2,0(r4)
 1001b50:	003d9e06 	br	10011cc <___vfprintf_internal_r+0xa6c>
 1001b54:	dc400d17 	ldw	r17,52(sp)
 1001b58:	07004074 	movhi	fp,257
 1001b5c:	e717d384 	addi	fp,fp,24398
 1001b60:	9425883a 	add	r18,r18,r16
 1001b64:	8c400044 	addi	r17,r17,1
 1001b68:	008001c4 	movi	r2,7
 1001b6c:	1f000015 	stw	fp,0(r3)
 1001b70:	1c000115 	stw	r16,4(r3)
 1001b74:	dc800e15 	stw	r18,56(sp)
 1001b78:	dc400d15 	stw	r17,52(sp)
 1001b7c:	147ddc16 	blt	r2,r17,10012f0 <___vfprintf_internal_r+0xb90>
 1001b80:	18c00204 	addi	r3,r3,8
 1001b84:	003c7406 	br	1000d58 <___vfprintf_internal_r+0x5f8>
 1001b88:	01000084 	movi	r4,2
 1001b8c:	d8000405 	stb	zero,16(sp)
 1001b90:	003d8106 	br	1001198 <___vfprintf_internal_r+0xa38>
 1001b94:	d9814c17 	ldw	r6,1328(sp)
 1001b98:	30c4703a 	and	r2,r6,r3
 1001b9c:	1005003a 	cmpeq	r2,r2,zero
 1001ba0:	103cb326 	beq	r2,zero,1000e70 <___vfprintf_internal_r+0x710>
 1001ba4:	d9014117 	ldw	r4,1284(sp)
 1001ba8:	94800044 	addi	r18,r18,1
 1001bac:	8c400044 	addi	r17,r17,1
 1001bb0:	008001c4 	movi	r2,7
 1001bb4:	a9000015 	stw	r4,0(r21)
 1001bb8:	a8c00115 	stw	r3,4(r21)
 1001bbc:	dc800e15 	stw	r18,56(sp)
 1001bc0:	dc400d15 	stw	r17,52(sp)
 1001bc4:	147e6016 	blt	r2,r17,1001548 <___vfprintf_internal_r+0xde8>
 1001bc8:	acc00204 	addi	r19,r21,8
 1001bcc:	003cd106 	br	1000f14 <___vfprintf_internal_r+0x7b4>
 1001bd0:	07004074 	movhi	fp,257
 1001bd4:	e717d384 	addi	fp,fp,24398
 1001bd8:	003c4906 	br	1000d00 <___vfprintf_internal_r+0x5a0>
 1001bdc:	dd000f04 	addi	r20,sp,60
 1001be0:	dc801904 	addi	r18,sp,100
 1001be4:	8009883a 	mov	r4,r16
 1001be8:	880b883a 	mov	r5,r17
 1001bec:	01800284 	movi	r6,10
 1001bf0:	000f883a 	mov	r7,zero
 1001bf4:	100800c0 	call	100800c <__umoddi3>
 1001bf8:	12000c04 	addi	r8,r2,48
 1001bfc:	94bfffc4 	addi	r18,r18,-1
 1001c00:	8009883a 	mov	r4,r16
 1001c04:	880b883a 	mov	r5,r17
 1001c08:	01800284 	movi	r6,10
 1001c0c:	000f883a 	mov	r7,zero
 1001c10:	92000005 	stb	r8,0(r18)
 1001c14:	10079a00 	call	10079a0 <__udivdi3>
 1001c18:	1009883a 	mov	r4,r2
 1001c1c:	1021883a 	mov	r16,r2
 1001c20:	18800068 	cmpgeui	r2,r3,1
 1001c24:	1823883a 	mov	r17,r3
 1001c28:	103fee1e 	bne	r2,zero,1001be4 <___vfprintf_internal_r+0x1484>
 1001c2c:	1800021e 	bne	r3,zero,1001c38 <___vfprintf_internal_r+0x14d8>
 1001c30:	00800244 	movi	r2,9
 1001c34:	113feb36 	bltu	r2,r4,1001be4 <___vfprintf_internal_r+0x1484>
 1001c38:	94bfffc4 	addi	r18,r18,-1
 1001c3c:	dc814115 	stw	r18,1284(sp)
 1001c40:	003fc006 	br	1001b44 <___vfprintf_internal_r+0x13e4>
 1001c44:	d9014c17 	ldw	r4,1328(sp)
 1001c48:	2080004c 	andi	r2,r4,1
 1001c4c:	10009a1e 	bne	r2,zero,1001eb8 <___vfprintf_internal_r+0x1758>
 1001c50:	d9401904 	addi	r5,sp,100
 1001c54:	dd000f04 	addi	r20,sp,60
 1001c58:	d9414115 	stw	r5,1284(sp)
 1001c5c:	003d5b06 	br	10011cc <___vfprintf_internal_r+0xa6c>
 1001c60:	d9014f17 	ldw	r4,1340(sp)
 1001c64:	b00b883a 	mov	r5,r22
 1001c68:	d9800c04 	addi	r6,sp,48
 1001c6c:	10007080 	call	1000708 <__sprint_r>
 1001c70:	103c731e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001c74:	dc800e17 	ldw	r18,56(sp)
 1001c78:	d8c01904 	addi	r3,sp,100
 1001c7c:	003cf906 	br	1001064 <___vfprintf_internal_r+0x904>
 1001c80:	d8c14c17 	ldw	r3,1328(sp)
 1001c84:	1880040c 	andi	r2,r3,16
 1001c88:	1000711e 	bne	r2,zero,1001e50 <___vfprintf_internal_r+0x16f0>
 1001c8c:	d9014c17 	ldw	r4,1328(sp)
 1001c90:	2080100c 	andi	r2,r4,64
 1001c94:	10006e26 	beq	r2,zero,1001e50 <___vfprintf_internal_r+0x16f0>
 1001c98:	3c00000b 	ldhu	r16,0(r7)
 1001c9c:	0023883a 	mov	r17,zero
 1001ca0:	39c00104 	addi	r7,r7,4
 1001ca4:	d9c14015 	stw	r7,1280(sp)
 1001ca8:	003efa06 	br	1001894 <___vfprintf_internal_r+0x1134>
 1001cac:	dc400d17 	ldw	r17,52(sp)
 1001cb0:	07004074 	movhi	fp,257
 1001cb4:	e717d384 	addi	fp,fp,24398
 1001cb8:	9425883a 	add	r18,r18,r16
 1001cbc:	8c400044 	addi	r17,r17,1
 1001cc0:	008001c4 	movi	r2,7
 1001cc4:	1f000015 	stw	fp,0(r3)
 1001cc8:	1c000115 	stw	r16,4(r3)
 1001ccc:	dc800e15 	stw	r18,56(sp)
 1001cd0:	dc400d15 	stw	r17,52(sp)
 1001cd4:	147d7016 	blt	r2,r17,1001298 <___vfprintf_internal_r+0xb38>
 1001cd8:	18c00204 	addi	r3,r3,8
 1001cdc:	003d7506 	br	10012b4 <___vfprintf_internal_r+0xb54>
 1001ce0:	dc800e17 	ldw	r18,56(sp)
 1001ce4:	dc400d17 	ldw	r17,52(sp)
 1001ce8:	07004074 	movhi	fp,257
 1001cec:	e717d784 	addi	fp,fp,24414
 1001cf0:	003bba06 	br	1000bdc <___vfprintf_internal_r+0x47c>
 1001cf4:	d9014f17 	ldw	r4,1340(sp)
 1001cf8:	b00b883a 	mov	r5,r22
 1001cfc:	d9800c04 	addi	r6,sp,48
 1001d00:	10007080 	call	1000708 <__sprint_r>
 1001d04:	103c4e1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001d08:	dc800e17 	ldw	r18,56(sp)
 1001d0c:	d8c01904 	addi	r3,sp,100
 1001d10:	003ce306 	br	10010a0 <___vfprintf_internal_r+0x940>
 1001d14:	3c000017 	ldw	r16,0(r7)
 1001d18:	0009883a 	mov	r4,zero
 1001d1c:	39c00104 	addi	r7,r7,4
 1001d20:	0023883a 	mov	r17,zero
 1001d24:	d9c14015 	stw	r7,1280(sp)
 1001d28:	d8000405 	stb	zero,16(sp)
 1001d2c:	003d1a06 	br	1001198 <___vfprintf_internal_r+0xa38>
 1001d30:	38800017 	ldw	r2,0(r7)
 1001d34:	39c00104 	addi	r7,r7,4
 1001d38:	d9c14015 	stw	r7,1280(sp)
 1001d3c:	1023d7fa 	srai	r17,r2,31
 1001d40:	1021883a 	mov	r16,r2
 1001d44:	003d1206 	br	1001190 <___vfprintf_internal_r+0xa30>
 1001d48:	3c000017 	ldw	r16,0(r7)
 1001d4c:	01000044 	movi	r4,1
 1001d50:	39c00104 	addi	r7,r7,4
 1001d54:	0023883a 	mov	r17,zero
 1001d58:	d9c14015 	stw	r7,1280(sp)
 1001d5c:	d8000405 	stb	zero,16(sp)
 1001d60:	003d0d06 	br	1001198 <___vfprintf_internal_r+0xa38>
 1001d64:	00804074 	movhi	r2,257
 1001d68:	1097d304 	addi	r2,r2,24396
 1001d6c:	94800044 	addi	r18,r18,1
 1001d70:	8c400044 	addi	r17,r17,1
 1001d74:	a8800015 	stw	r2,0(r21)
 1001d78:	00c00044 	movi	r3,1
 1001d7c:	008001c4 	movi	r2,7
 1001d80:	a8c00115 	stw	r3,4(r21)
 1001d84:	dc800e15 	stw	r18,56(sp)
 1001d88:	dc400d15 	stw	r17,52(sp)
 1001d8c:	1440ca16 	blt	r2,r17,10020b8 <___vfprintf_internal_r+0x1958>
 1001d90:	a8c00204 	addi	r3,r21,8
 1001d94:	2000061e 	bne	r4,zero,1001db0 <___vfprintf_internal_r+0x1650>
 1001d98:	d9414717 	ldw	r5,1308(sp)
 1001d9c:	2800041e 	bne	r5,zero,1001db0 <___vfprintf_internal_r+0x1650>
 1001da0:	d9814c17 	ldw	r6,1328(sp)
 1001da4:	3080004c 	andi	r2,r6,1
 1001da8:	1005003a 	cmpeq	r2,r2,zero
 1001dac:	103bea1e 	bne	r2,zero,1000d58 <___vfprintf_internal_r+0x5f8>
 1001db0:	00800044 	movi	r2,1
 1001db4:	dc400d17 	ldw	r17,52(sp)
 1001db8:	18800115 	stw	r2,4(r3)
 1001dbc:	d8814917 	ldw	r2,1316(sp)
 1001dc0:	94800044 	addi	r18,r18,1
 1001dc4:	8c400044 	addi	r17,r17,1
 1001dc8:	18800015 	stw	r2,0(r3)
 1001dcc:	008001c4 	movi	r2,7
 1001dd0:	dc800e15 	stw	r18,56(sp)
 1001dd4:	dc400d15 	stw	r17,52(sp)
 1001dd8:	1440ca16 	blt	r2,r17,1002104 <___vfprintf_internal_r+0x19a4>
 1001ddc:	18c00204 	addi	r3,r3,8
 1001de0:	0121c83a 	sub	r16,zero,r4
 1001de4:	0400500e 	bge	zero,r16,1001f28 <___vfprintf_internal_r+0x17c8>
 1001de8:	00800404 	movi	r2,16
 1001dec:	1400800e 	bge	r2,r16,1001ff0 <___vfprintf_internal_r+0x1890>
 1001df0:	1027883a 	mov	r19,r2
 1001df4:	07004074 	movhi	fp,257
 1001df8:	e717d384 	addi	fp,fp,24398
 1001dfc:	050001c4 	movi	r20,7
 1001e00:	00000306 	br	1001e10 <___vfprintf_internal_r+0x16b0>
 1001e04:	18c00204 	addi	r3,r3,8
 1001e08:	843ffc04 	addi	r16,r16,-16
 1001e0c:	9c007a0e 	bge	r19,r16,1001ff8 <___vfprintf_internal_r+0x1898>
 1001e10:	94800404 	addi	r18,r18,16
 1001e14:	8c400044 	addi	r17,r17,1
 1001e18:	1f000015 	stw	fp,0(r3)
 1001e1c:	1cc00115 	stw	r19,4(r3)
 1001e20:	dc800e15 	stw	r18,56(sp)
 1001e24:	dc400d15 	stw	r17,52(sp)
 1001e28:	a47ff60e 	bge	r20,r17,1001e04 <___vfprintf_internal_r+0x16a4>
 1001e2c:	d9014f17 	ldw	r4,1340(sp)
 1001e30:	b00b883a 	mov	r5,r22
 1001e34:	d9800c04 	addi	r6,sp,48
 1001e38:	10007080 	call	1000708 <__sprint_r>
 1001e3c:	103c001e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001e40:	dc800e17 	ldw	r18,56(sp)
 1001e44:	dc400d17 	ldw	r17,52(sp)
 1001e48:	d8c01904 	addi	r3,sp,100
 1001e4c:	003fee06 	br	1001e08 <___vfprintf_internal_r+0x16a8>
 1001e50:	3c000017 	ldw	r16,0(r7)
 1001e54:	0023883a 	mov	r17,zero
 1001e58:	39c00104 	addi	r7,r7,4
 1001e5c:	d9c14015 	stw	r7,1280(sp)
 1001e60:	003e8c06 	br	1001894 <___vfprintf_internal_r+0x1134>
 1001e64:	d9401904 	addi	r5,sp,100
 1001e68:	dd000f04 	addi	r20,sp,60
 1001e6c:	d9414115 	stw	r5,1284(sp)
 1001e70:	d9814417 	ldw	r6,1296(sp)
 1001e74:	880a973a 	slli	r5,r17,28
 1001e78:	8004d13a 	srli	r2,r16,4
 1001e7c:	810003cc 	andi	r4,r16,15
 1001e80:	3109883a 	add	r4,r6,r4
 1001e84:	2884b03a 	or	r2,r5,r2
 1001e88:	21400003 	ldbu	r5,0(r4)
 1001e8c:	d9014117 	ldw	r4,1284(sp)
 1001e90:	8806d13a 	srli	r3,r17,4
 1001e94:	1021883a 	mov	r16,r2
 1001e98:	213fffc4 	addi	r4,r4,-1
 1001e9c:	d9014115 	stw	r4,1284(sp)
 1001ea0:	d9814117 	ldw	r6,1284(sp)
 1001ea4:	10c8b03a 	or	r4,r2,r3
 1001ea8:	1823883a 	mov	r17,r3
 1001eac:	31400005 	stb	r5,0(r6)
 1001eb0:	203fef1e 	bne	r4,zero,1001e70 <___vfprintf_internal_r+0x1710>
 1001eb4:	003cc506 	br	10011cc <___vfprintf_internal_r+0xa6c>
 1001eb8:	00800c04 	movi	r2,48
 1001ebc:	d98018c4 	addi	r6,sp,99
 1001ec0:	dd000f04 	addi	r20,sp,60
 1001ec4:	d88018c5 	stb	r2,99(sp)
 1001ec8:	d9814115 	stw	r6,1284(sp)
 1001ecc:	003cbf06 	br	10011cc <___vfprintf_internal_r+0xa6c>
 1001ed0:	dc400d17 	ldw	r17,52(sp)
 1001ed4:	07004074 	movhi	fp,257
 1001ed8:	e717d784 	addi	fp,fp,24414
 1001edc:	003bc106 	br	1000de4 <___vfprintf_internal_r+0x684>
 1001ee0:	d9414c17 	ldw	r5,1328(sp)
 1001ee4:	2880040c 	andi	r2,r5,16
 1001ee8:	10007c26 	beq	r2,zero,10020dc <___vfprintf_internal_r+0x197c>
 1001eec:	38800017 	ldw	r2,0(r7)
 1001ef0:	39c00104 	addi	r7,r7,4
 1001ef4:	d9c14015 	stw	r7,1280(sp)
 1001ef8:	d9814b17 	ldw	r6,1324(sp)
 1001efc:	d9c14017 	ldw	r7,1280(sp)
 1001f00:	11800015 	stw	r6,0(r2)
 1001f04:	003a7206 	br	10008d0 <___vfprintf_internal_r+0x170>
 1001f08:	d9014f17 	ldw	r4,1340(sp)
 1001f0c:	b00b883a 	mov	r5,r22
 1001f10:	d9800c04 	addi	r6,sp,48
 1001f14:	10007080 	call	1000708 <__sprint_r>
 1001f18:	103bc91e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001f1c:	dc800e17 	ldw	r18,56(sp)
 1001f20:	dc400d17 	ldw	r17,52(sp)
 1001f24:	d8c01904 	addi	r3,sp,100
 1001f28:	d9014717 	ldw	r4,1308(sp)
 1001f2c:	d9414117 	ldw	r5,1284(sp)
 1001f30:	8c400044 	addi	r17,r17,1
 1001f34:	9125883a 	add	r18,r18,r4
 1001f38:	008001c4 	movi	r2,7
 1001f3c:	19400015 	stw	r5,0(r3)
 1001f40:	19000115 	stw	r4,4(r3)
 1001f44:	dc800e15 	stw	r18,56(sp)
 1001f48:	dc400d15 	stw	r17,52(sp)
 1001f4c:	147ce816 	blt	r2,r17,10012f0 <___vfprintf_internal_r+0xb90>
 1001f50:	18c00204 	addi	r3,r3,8
 1001f54:	003b8006 	br	1000d58 <___vfprintf_internal_r+0x5f8>
 1001f58:	38c00017 	ldw	r3,0(r7)
 1001f5c:	39000204 	addi	r4,r7,8
 1001f60:	d9014015 	stw	r4,1280(sp)
 1001f64:	d8c14215 	stw	r3,1288(sp)
 1001f68:	39c00117 	ldw	r7,4(r7)
 1001f6c:	d9c14315 	stw	r7,1292(sp)
 1001f70:	003e1a06 	br	10017dc <___vfprintf_internal_r+0x107c>
 1001f74:	0005883a 	mov	r2,zero
 1001f78:	1409c83a 	sub	r4,r2,r16
 1001f7c:	1105803a 	cmpltu	r2,r2,r4
 1001f80:	044bc83a 	sub	r5,zero,r17
 1001f84:	2885c83a 	sub	r2,r5,r2
 1001f88:	2021883a 	mov	r16,r4
 1001f8c:	1023883a 	mov	r17,r2
 1001f90:	01000044 	movi	r4,1
 1001f94:	00800b44 	movi	r2,45
 1001f98:	d8800405 	stb	r2,16(sp)
 1001f9c:	003c7e06 	br	1001198 <___vfprintf_internal_r+0xa38>
 1001fa0:	d9014f17 	ldw	r4,1340(sp)
 1001fa4:	b00b883a 	mov	r5,r22
 1001fa8:	d9800c04 	addi	r6,sp,48
 1001fac:	10007080 	call	1000708 <__sprint_r>
 1001fb0:	103ba31e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001fb4:	dc800e17 	ldw	r18,56(sp)
 1001fb8:	dc400d17 	ldw	r17,52(sp)
 1001fbc:	d9000517 	ldw	r4,20(sp)
 1001fc0:	d9401904 	addi	r5,sp,100
 1001fc4:	003da106 	br	100164c <___vfprintf_internal_r+0xeec>
 1001fc8:	d9014f17 	ldw	r4,1340(sp)
 1001fcc:	b00b883a 	mov	r5,r22
 1001fd0:	d9800c04 	addi	r6,sp,48
 1001fd4:	10007080 	call	1000708 <__sprint_r>
 1001fd8:	103b991e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1001fdc:	dc800e17 	ldw	r18,56(sp)
 1001fe0:	dc400d17 	ldw	r17,52(sp)
 1001fe4:	d9000517 	ldw	r4,20(sp)
 1001fe8:	d8c01904 	addi	r3,sp,100
 1001fec:	003d8b06 	br	100161c <___vfprintf_internal_r+0xebc>
 1001ff0:	07004074 	movhi	fp,257
 1001ff4:	e717d384 	addi	fp,fp,24398
 1001ff8:	9425883a 	add	r18,r18,r16
 1001ffc:	8c400044 	addi	r17,r17,1
 1002000:	008001c4 	movi	r2,7
 1002004:	1f000015 	stw	fp,0(r3)
 1002008:	1c000115 	stw	r16,4(r3)
 100200c:	dc800e15 	stw	r18,56(sp)
 1002010:	dc400d15 	stw	r17,52(sp)
 1002014:	147fbc16 	blt	r2,r17,1001f08 <___vfprintf_internal_r+0x17a8>
 1002018:	18c00204 	addi	r3,r3,8
 100201c:	003fc206 	br	1001f28 <___vfprintf_internal_r+0x17c8>
 1002020:	d9014f17 	ldw	r4,1340(sp)
 1002024:	b00b883a 	mov	r5,r22
 1002028:	d9800c04 	addi	r6,sp,48
 100202c:	10007080 	call	1000708 <__sprint_r>
 1002030:	103b831e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1002034:	dc800e17 	ldw	r18,56(sp)
 1002038:	d9000517 	ldw	r4,20(sp)
 100203c:	d8c01904 	addi	r3,sp,100
 1002040:	003cfc06 	br	1001434 <___vfprintf_internal_r+0xcd4>
 1002044:	07004074 	movhi	fp,257
 1002048:	e717d384 	addi	fp,fp,24398
 100204c:	003bde06 	br	1000fc8 <___vfprintf_internal_r+0x868>
 1002050:	00804074 	movhi	r2,257
 1002054:	1097c204 	addi	r2,r2,24328
 1002058:	d8814115 	stw	r2,1284(sp)
 100205c:	003def06 	br	100181c <___vfprintf_internal_r+0x10bc>
 1002060:	d9014217 	ldw	r4,1288(sp)
 1002064:	d9414317 	ldw	r5,1292(sp)
 1002068:	10072500 	call	1007250 <__isnand>
 100206c:	10003926 	beq	r2,zero,1002154 <___vfprintf_internal_r+0x19f4>
 1002070:	d9414d17 	ldw	r5,1332(sp)
 1002074:	008011c4 	movi	r2,71
 1002078:	1140ce16 	blt	r2,r5,10023b4 <___vfprintf_internal_r+0x1c54>
 100207c:	01804074 	movhi	r6,257
 1002080:	3197c304 	addi	r6,r6,24332
 1002084:	d9814115 	stw	r6,1284(sp)
 1002088:	003de406 	br	100181c <___vfprintf_internal_r+0x10bc>
 100208c:	d9014c17 	ldw	r4,1328(sp)
 1002090:	bdc00044 	addi	r23,r23,1
 1002094:	b8c00007 	ldb	r3,0(r23)
 1002098:	21000814 	ori	r4,r4,32
 100209c:	d9014c15 	stw	r4,1328(sp)
 10020a0:	003a2e06 	br	100095c <___vfprintf_internal_r+0x1fc>
 10020a4:	dcc14515 	stw	r19,1300(sp)
 10020a8:	98011016 	blt	r19,zero,10024ec <___vfprintf_internal_r+0x1d8c>
 10020ac:	980f883a 	mov	r7,r19
 10020b0:	d8014615 	stw	zero,1304(sp)
 10020b4:	003c4c06 	br	10011e8 <___vfprintf_internal_r+0xa88>
 10020b8:	d9014f17 	ldw	r4,1340(sp)
 10020bc:	b00b883a 	mov	r5,r22
 10020c0:	d9800c04 	addi	r6,sp,48
 10020c4:	10007080 	call	1000708 <__sprint_r>
 10020c8:	103b5d1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 10020cc:	dc800e17 	ldw	r18,56(sp)
 10020d0:	d9000517 	ldw	r4,20(sp)
 10020d4:	d8c01904 	addi	r3,sp,100
 10020d8:	003f2e06 	br	1001d94 <___vfprintf_internal_r+0x1634>
 10020dc:	d8c14c17 	ldw	r3,1328(sp)
 10020e0:	1880100c 	andi	r2,r3,64
 10020e4:	1000a026 	beq	r2,zero,1002368 <___vfprintf_internal_r+0x1c08>
 10020e8:	38800017 	ldw	r2,0(r7)
 10020ec:	39c00104 	addi	r7,r7,4
 10020f0:	d9c14015 	stw	r7,1280(sp)
 10020f4:	d9014b17 	ldw	r4,1324(sp)
 10020f8:	d9c14017 	ldw	r7,1280(sp)
 10020fc:	1100000d 	sth	r4,0(r2)
 1002100:	0039f306 	br	10008d0 <___vfprintf_internal_r+0x170>
 1002104:	d9014f17 	ldw	r4,1340(sp)
 1002108:	b00b883a 	mov	r5,r22
 100210c:	d9800c04 	addi	r6,sp,48
 1002110:	10007080 	call	1000708 <__sprint_r>
 1002114:	103b4a1e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1002118:	dc800e17 	ldw	r18,56(sp)
 100211c:	dc400d17 	ldw	r17,52(sp)
 1002120:	d9000517 	ldw	r4,20(sp)
 1002124:	d8c01904 	addi	r3,sp,100
 1002128:	003f2d06 	br	1001de0 <___vfprintf_internal_r+0x1680>
 100212c:	00800184 	movi	r2,6
 1002130:	14c09a36 	bltu	r2,r19,100239c <___vfprintf_internal_r+0x1c3c>
 1002134:	dcc14515 	stw	r19,1300(sp)
 1002138:	9800010e 	bge	r19,zero,1002140 <___vfprintf_internal_r+0x19e0>
 100213c:	d8014515 	stw	zero,1300(sp)
 1002140:	00804074 	movhi	r2,257
 1002144:	1097c504 	addi	r2,r2,24340
 1002148:	980f883a 	mov	r7,r19
 100214c:	d8814115 	stw	r2,1284(sp)
 1002150:	003a7206 	br	1000b1c <___vfprintf_internal_r+0x3bc>
 1002154:	00bfffc4 	movi	r2,-1
 1002158:	9880e226 	beq	r19,r2,10024e4 <___vfprintf_internal_r+0x1d84>
 100215c:	d9414d17 	ldw	r5,1332(sp)
 1002160:	008019c4 	movi	r2,103
 1002164:	2880dc26 	beq	r5,r2,10024d8 <___vfprintf_internal_r+0x1d78>
 1002168:	008011c4 	movi	r2,71
 100216c:	2880da26 	beq	r5,r2,10024d8 <___vfprintf_internal_r+0x1d78>
 1002170:	d9414c17 	ldw	r5,1328(sp)
 1002174:	d9014317 	ldw	r4,1292(sp)
 1002178:	d9814217 	ldw	r6,1288(sp)
 100217c:	29404014 	ori	r5,r5,256
 1002180:	d9414c15 	stw	r5,1328(sp)
 1002184:	2000cc16 	blt	r4,zero,10024b8 <___vfprintf_internal_r+0x1d58>
 1002188:	3021883a 	mov	r16,r6
 100218c:	2023883a 	mov	r17,r4
 1002190:	0039883a 	mov	fp,zero
 1002194:	d9414d17 	ldw	r5,1332(sp)
 1002198:	00801984 	movi	r2,102
 100219c:	2880b726 	beq	r5,r2,100247c <___vfprintf_internal_r+0x1d1c>
 10021a0:	00801184 	movi	r2,70
 10021a4:	2880b526 	beq	r5,r2,100247c <___vfprintf_internal_r+0x1d1c>
 10021a8:	00801944 	movi	r2,101
 10021ac:	2880c826 	beq	r5,r2,10024d0 <___vfprintf_internal_r+0x1d70>
 10021b0:	00801144 	movi	r2,69
 10021b4:	2880c626 	beq	r5,r2,10024d0 <___vfprintf_internal_r+0x1d70>
 10021b8:	9829883a 	mov	r20,r19
 10021bc:	d9014f17 	ldw	r4,1340(sp)
 10021c0:	d8800504 	addi	r2,sp,20
 10021c4:	880d883a 	mov	r6,r17
 10021c8:	d8800115 	stw	r2,4(sp)
 10021cc:	d8c00604 	addi	r3,sp,24
 10021d0:	d8800704 	addi	r2,sp,28
 10021d4:	800b883a 	mov	r5,r16
 10021d8:	01c00084 	movi	r7,2
 10021dc:	d8c00215 	stw	r3,8(sp)
 10021e0:	d8800315 	stw	r2,12(sp)
 10021e4:	dd000015 	stw	r20,0(sp)
 10021e8:	10029c80 	call	10029c8 <_dtoa_r>
 10021ec:	d9814d17 	ldw	r6,1332(sp)
 10021f0:	d8814115 	stw	r2,1284(sp)
 10021f4:	008019c4 	movi	r2,103
 10021f8:	30809526 	beq	r6,r2,1002450 <___vfprintf_internal_r+0x1cf0>
 10021fc:	d8c14d17 	ldw	r3,1332(sp)
 1002200:	008011c4 	movi	r2,71
 1002204:	18809226 	beq	r3,r2,1002450 <___vfprintf_internal_r+0x1cf0>
 1002208:	d9414117 	ldw	r5,1284(sp)
 100220c:	d9814d17 	ldw	r6,1332(sp)
 1002210:	00801984 	movi	r2,102
 1002214:	2d25883a 	add	r18,r5,r20
 1002218:	30808626 	beq	r6,r2,1002434 <___vfprintf_internal_r+0x1cd4>
 100221c:	00801184 	movi	r2,70
 1002220:	30808426 	beq	r6,r2,1002434 <___vfprintf_internal_r+0x1cd4>
 1002224:	000d883a 	mov	r6,zero
 1002228:	000f883a 	mov	r7,zero
 100222c:	880b883a 	mov	r5,r17
 1002230:	8009883a 	mov	r4,r16
 1002234:	100918c0 	call	100918c <__eqdf2>
 1002238:	1000751e 	bne	r2,zero,1002410 <___vfprintf_internal_r+0x1cb0>
 100223c:	9005883a 	mov	r2,r18
 1002240:	dc800715 	stw	r18,28(sp)
 1002244:	d9014117 	ldw	r4,1284(sp)
 1002248:	d9414d17 	ldw	r5,1332(sp)
 100224c:	00c019c4 	movi	r3,103
 1002250:	1125c83a 	sub	r18,r2,r4
 1002254:	28c06826 	beq	r5,r3,10023f8 <___vfprintf_internal_r+0x1c98>
 1002258:	008011c4 	movi	r2,71
 100225c:	28806626 	beq	r5,r2,10023f8 <___vfprintf_internal_r+0x1c98>
 1002260:	d9000517 	ldw	r4,20(sp)
 1002264:	d8c14d17 	ldw	r3,1332(sp)
 1002268:	00801944 	movi	r2,101
 100226c:	10c05516 	blt	r2,r3,10023c4 <___vfprintf_internal_r+0x1c64>
 1002270:	213fffc4 	addi	r4,r4,-1
 1002274:	d9000515 	stw	r4,20(sp)
 1002278:	d8c00805 	stb	r3,32(sp)
 100227c:	2021883a 	mov	r16,r4
 1002280:	2000c116 	blt	r4,zero,1002588 <___vfprintf_internal_r+0x1e28>
 1002284:	00800ac4 	movi	r2,43
 1002288:	d8800845 	stb	r2,33(sp)
 100228c:	00800244 	movi	r2,9
 1002290:	1400af0e 	bge	r2,r16,1002550 <___vfprintf_internal_r+0x1df0>
 1002294:	1027883a 	mov	r19,r2
 1002298:	dc400b84 	addi	r17,sp,46
 100229c:	8009883a 	mov	r4,r16
 10022a0:	01400284 	movi	r5,10
 10022a4:	10098740 	call	1009874 <__modsi3>
 10022a8:	10800c04 	addi	r2,r2,48
 10022ac:	8c7fffc4 	addi	r17,r17,-1
 10022b0:	8009883a 	mov	r4,r16
 10022b4:	01400284 	movi	r5,10
 10022b8:	88800005 	stb	r2,0(r17)
 10022bc:	10098140 	call	1009814 <__divsi3>
 10022c0:	1021883a 	mov	r16,r2
 10022c4:	98bff516 	blt	r19,r2,100229c <___vfprintf_internal_r+0x1b3c>
 10022c8:	10c00c04 	addi	r3,r2,48
 10022cc:	d88009c4 	addi	r2,sp,39
 10022d0:	108001c4 	addi	r2,r2,7
 10022d4:	897fffc4 	addi	r5,r17,-1
 10022d8:	88ffffc5 	stb	r3,-1(r17)
 10022dc:	2880a72e 	bgeu	r5,r2,100257c <___vfprintf_internal_r+0x1e1c>
 10022e0:	1009883a 	mov	r4,r2
 10022e4:	d9800804 	addi	r6,sp,32
 10022e8:	d8c00884 	addi	r3,sp,34
 10022ec:	28800003 	ldbu	r2,0(r5)
 10022f0:	29400044 	addi	r5,r5,1
 10022f4:	18800005 	stb	r2,0(r3)
 10022f8:	18c00044 	addi	r3,r3,1
 10022fc:	293ffb36 	bltu	r5,r4,10022ec <___vfprintf_internal_r+0x1b8c>
 1002300:	1987c83a 	sub	r3,r3,r6
 1002304:	00800044 	movi	r2,1
 1002308:	d8c14815 	stw	r3,1312(sp)
 100230c:	90cf883a 	add	r7,r18,r3
 1002310:	1480960e 	bge	r2,r18,100256c <___vfprintf_internal_r+0x1e0c>
 1002314:	39c00044 	addi	r7,r7,1
 1002318:	d9c14515 	stw	r7,1300(sp)
 100231c:	38003416 	blt	r7,zero,10023f0 <___vfprintf_internal_r+0x1c90>
 1002320:	e0803fcc 	andi	r2,fp,255
 1002324:	1080201c 	xori	r2,r2,128
 1002328:	10bfe004 	addi	r2,r2,-128
 100232c:	10004e26 	beq	r2,zero,1002468 <___vfprintf_internal_r+0x1d08>
 1002330:	00800b44 	movi	r2,45
 1002334:	dc814715 	stw	r18,1308(sp)
 1002338:	d8014615 	stw	zero,1304(sp)
 100233c:	d8800405 	stb	r2,16(sp)
 1002340:	003bab06 	br	10011f0 <___vfprintf_internal_r+0xa90>
 1002344:	00800b44 	movi	r2,45
 1002348:	d8800405 	stb	r2,16(sp)
 100234c:	003d2d06 	br	1001804 <___vfprintf_internal_r+0x10a4>
 1002350:	d9014f17 	ldw	r4,1340(sp)
 1002354:	b00b883a 	mov	r5,r22
 1002358:	d9800c04 	addi	r6,sp,48
 100235c:	10007080 	call	1000708 <__sprint_r>
 1002360:	103ab71e 	bne	r2,zero,1000e40 <___vfprintf_internal_r+0x6e0>
 1002364:	003ab506 	br	1000e3c <___vfprintf_internal_r+0x6dc>
 1002368:	38800017 	ldw	r2,0(r7)
 100236c:	39c00104 	addi	r7,r7,4
 1002370:	d9c14015 	stw	r7,1280(sp)
 1002374:	d9414b17 	ldw	r5,1324(sp)
 1002378:	d9c14017 	ldw	r7,1280(sp)
 100237c:	11400015 	stw	r5,0(r2)
 1002380:	00395306 	br	10008d0 <___vfprintf_internal_r+0x170>
 1002384:	980f883a 	mov	r7,r19
 1002388:	dcc14515 	stw	r19,1300(sp)
 100238c:	d8014615 	stw	zero,1304(sp)
 1002390:	003b9506 	br	10011e8 <___vfprintf_internal_r+0xa88>
 1002394:	0027883a 	mov	r19,zero
 1002398:	00397206 	br	1000964 <___vfprintf_internal_r+0x204>
 100239c:	00c04074 	movhi	r3,257
 10023a0:	18d7c504 	addi	r3,r3,24340
 10023a4:	100f883a 	mov	r7,r2
 10023a8:	d8814515 	stw	r2,1300(sp)
 10023ac:	d8c14115 	stw	r3,1284(sp)
 10023b0:	0039da06 	br	1000b1c <___vfprintf_internal_r+0x3bc>
 10023b4:	00804074 	movhi	r2,257
 10023b8:	1097c404 	addi	r2,r2,24336
 10023bc:	d8814115 	stw	r2,1284(sp)
 10023c0:	003d1606 	br	100181c <___vfprintf_internal_r+0x10bc>
 10023c4:	d9414d17 	ldw	r5,1332(sp)
 10023c8:	00801984 	movi	r2,102
 10023cc:	28804926 	beq	r5,r2,10024f4 <___vfprintf_internal_r+0x1d94>
 10023d0:	200f883a 	mov	r7,r4
 10023d4:	24805716 	blt	r4,r18,1002534 <___vfprintf_internal_r+0x1dd4>
 10023d8:	d9414c17 	ldw	r5,1328(sp)
 10023dc:	2880004c 	andi	r2,r5,1
 10023e0:	10000126 	beq	r2,zero,10023e8 <___vfprintf_internal_r+0x1c88>
 10023e4:	21c00044 	addi	r7,r4,1
 10023e8:	d9c14515 	stw	r7,1300(sp)
 10023ec:	383fcc0e 	bge	r7,zero,1002320 <___vfprintf_internal_r+0x1bc0>
 10023f0:	d8014515 	stw	zero,1300(sp)
 10023f4:	003fca06 	br	1002320 <___vfprintf_internal_r+0x1bc0>
 10023f8:	d9000517 	ldw	r4,20(sp)
 10023fc:	00bfff04 	movi	r2,-4
 1002400:	1100480e 	bge	r2,r4,1002524 <___vfprintf_internal_r+0x1dc4>
 1002404:	99004716 	blt	r19,r4,1002524 <___vfprintf_internal_r+0x1dc4>
 1002408:	d8c14d15 	stw	r3,1332(sp)
 100240c:	003ff006 	br	10023d0 <___vfprintf_internal_r+0x1c70>
 1002410:	d8800717 	ldw	r2,28(sp)
 1002414:	14bf8b2e 	bgeu	r2,r18,1002244 <___vfprintf_internal_r+0x1ae4>
 1002418:	9007883a 	mov	r3,r18
 100241c:	01000c04 	movi	r4,48
 1002420:	11000005 	stb	r4,0(r2)
 1002424:	10800044 	addi	r2,r2,1
 1002428:	d8800715 	stw	r2,28(sp)
 100242c:	18bffc1e 	bne	r3,r2,1002420 <___vfprintf_internal_r+0x1cc0>
 1002430:	003f8406 	br	1002244 <___vfprintf_internal_r+0x1ae4>
 1002434:	d8814117 	ldw	r2,1284(sp)
 1002438:	10c00007 	ldb	r3,0(r2)
 100243c:	00800c04 	movi	r2,48
 1002440:	18805b26 	beq	r3,r2,10025b0 <___vfprintf_internal_r+0x1e50>
 1002444:	d9000517 	ldw	r4,20(sp)
 1002448:	9125883a 	add	r18,r18,r4
 100244c:	003f7506 	br	1002224 <___vfprintf_internal_r+0x1ac4>
 1002450:	d9014c17 	ldw	r4,1328(sp)
 1002454:	2080004c 	andi	r2,r4,1
 1002458:	1005003a 	cmpeq	r2,r2,zero
 100245c:	103f6a26 	beq	r2,zero,1002208 <___vfprintf_internal_r+0x1aa8>
 1002460:	d8800717 	ldw	r2,28(sp)
 1002464:	003f7706 	br	1002244 <___vfprintf_internal_r+0x1ae4>
 1002468:	d9c14515 	stw	r7,1300(sp)
 100246c:	38004d16 	blt	r7,zero,10025a4 <___vfprintf_internal_r+0x1e44>
 1002470:	dc814715 	stw	r18,1308(sp)
 1002474:	d8014615 	stw	zero,1304(sp)
 1002478:	003b5b06 	br	10011e8 <___vfprintf_internal_r+0xa88>
 100247c:	d9014f17 	ldw	r4,1340(sp)
 1002480:	d8800504 	addi	r2,sp,20
 1002484:	d8800115 	stw	r2,4(sp)
 1002488:	d8c00604 	addi	r3,sp,24
 100248c:	d8800704 	addi	r2,sp,28
 1002490:	800b883a 	mov	r5,r16
 1002494:	880d883a 	mov	r6,r17
 1002498:	01c000c4 	movi	r7,3
 100249c:	d8c00215 	stw	r3,8(sp)
 10024a0:	d8800315 	stw	r2,12(sp)
 10024a4:	dcc00015 	stw	r19,0(sp)
 10024a8:	9829883a 	mov	r20,r19
 10024ac:	10029c80 	call	10029c8 <_dtoa_r>
 10024b0:	d8814115 	stw	r2,1284(sp)
 10024b4:	003f5106 	br	10021fc <___vfprintf_internal_r+0x1a9c>
 10024b8:	d8c14217 	ldw	r3,1288(sp)
 10024bc:	d9014317 	ldw	r4,1292(sp)
 10024c0:	07000b44 	movi	fp,45
 10024c4:	1821883a 	mov	r16,r3
 10024c8:	2460003c 	xorhi	r17,r4,32768
 10024cc:	003f3106 	br	1002194 <___vfprintf_internal_r+0x1a34>
 10024d0:	9d000044 	addi	r20,r19,1
 10024d4:	003f3906 	br	10021bc <___vfprintf_internal_r+0x1a5c>
 10024d8:	983f251e 	bne	r19,zero,1002170 <___vfprintf_internal_r+0x1a10>
 10024dc:	04c00044 	movi	r19,1
 10024e0:	003f2306 	br	1002170 <___vfprintf_internal_r+0x1a10>
 10024e4:	04c00184 	movi	r19,6
 10024e8:	003f2106 	br	1002170 <___vfprintf_internal_r+0x1a10>
 10024ec:	d8014515 	stw	zero,1300(sp)
 10024f0:	003eee06 	br	10020ac <___vfprintf_internal_r+0x194c>
 10024f4:	200f883a 	mov	r7,r4
 10024f8:	0100370e 	bge	zero,r4,10025d8 <___vfprintf_internal_r+0x1e78>
 10024fc:	9800031e 	bne	r19,zero,100250c <___vfprintf_internal_r+0x1dac>
 1002500:	d9814c17 	ldw	r6,1328(sp)
 1002504:	3080004c 	andi	r2,r6,1
 1002508:	103fb726 	beq	r2,zero,10023e8 <___vfprintf_internal_r+0x1c88>
 100250c:	20800044 	addi	r2,r4,1
 1002510:	98a7883a 	add	r19,r19,r2
 1002514:	dcc14515 	stw	r19,1300(sp)
 1002518:	980f883a 	mov	r7,r19
 100251c:	983f800e 	bge	r19,zero,1002320 <___vfprintf_internal_r+0x1bc0>
 1002520:	003fb306 	br	10023f0 <___vfprintf_internal_r+0x1c90>
 1002524:	d9814d17 	ldw	r6,1332(sp)
 1002528:	31bfff84 	addi	r6,r6,-2
 100252c:	d9814d15 	stw	r6,1332(sp)
 1002530:	003f4c06 	br	1002264 <___vfprintf_internal_r+0x1b04>
 1002534:	0100180e 	bge	zero,r4,1002598 <___vfprintf_internal_r+0x1e38>
 1002538:	00800044 	movi	r2,1
 100253c:	1485883a 	add	r2,r2,r18
 1002540:	d8814515 	stw	r2,1300(sp)
 1002544:	100f883a 	mov	r7,r2
 1002548:	103f750e 	bge	r2,zero,1002320 <___vfprintf_internal_r+0x1bc0>
 100254c:	003fa806 	br	10023f0 <___vfprintf_internal_r+0x1c90>
 1002550:	80c00c04 	addi	r3,r16,48
 1002554:	00800c04 	movi	r2,48
 1002558:	d8c008c5 	stb	r3,35(sp)
 100255c:	d9800804 	addi	r6,sp,32
 1002560:	d8c00904 	addi	r3,sp,36
 1002564:	d8800885 	stb	r2,34(sp)
 1002568:	003f6506 	br	1002300 <___vfprintf_internal_r+0x1ba0>
 100256c:	d9014c17 	ldw	r4,1328(sp)
 1002570:	2084703a 	and	r2,r4,r2
 1002574:	103f9c26 	beq	r2,zero,10023e8 <___vfprintf_internal_r+0x1c88>
 1002578:	003f6606 	br	1002314 <___vfprintf_internal_r+0x1bb4>
 100257c:	d9800804 	addi	r6,sp,32
 1002580:	d8c00884 	addi	r3,sp,34
 1002584:	003f5e06 	br	1002300 <___vfprintf_internal_r+0x1ba0>
 1002588:	00800b44 	movi	r2,45
 100258c:	0121c83a 	sub	r16,zero,r4
 1002590:	d8800845 	stb	r2,33(sp)
 1002594:	003f3d06 	br	100228c <___vfprintf_internal_r+0x1b2c>
 1002598:	00800084 	movi	r2,2
 100259c:	1105c83a 	sub	r2,r2,r4
 10025a0:	003fe606 	br	100253c <___vfprintf_internal_r+0x1ddc>
 10025a4:	d8014515 	stw	zero,1300(sp)
 10025a8:	dc814715 	stw	r18,1308(sp)
 10025ac:	003fb106 	br	1002474 <___vfprintf_internal_r+0x1d14>
 10025b0:	000d883a 	mov	r6,zero
 10025b4:	000f883a 	mov	r7,zero
 10025b8:	8009883a 	mov	r4,r16
 10025bc:	880b883a 	mov	r5,r17
 10025c0:	10092140 	call	1009214 <__nedf2>
 10025c4:	103f9f26 	beq	r2,zero,1002444 <___vfprintf_internal_r+0x1ce4>
 10025c8:	00800044 	movi	r2,1
 10025cc:	1509c83a 	sub	r4,r2,r20
 10025d0:	d9000515 	stw	r4,20(sp)
 10025d4:	003f9b06 	br	1002444 <___vfprintf_internal_r+0x1ce4>
 10025d8:	98000d1e 	bne	r19,zero,1002610 <___vfprintf_internal_r+0x1eb0>
 10025dc:	d8c14c17 	ldw	r3,1328(sp)
 10025e0:	1880004c 	andi	r2,r3,1
 10025e4:	10000a1e 	bne	r2,zero,1002610 <___vfprintf_internal_r+0x1eb0>
 10025e8:	01000044 	movi	r4,1
 10025ec:	200f883a 	mov	r7,r4
 10025f0:	d9014515 	stw	r4,1300(sp)
 10025f4:	003f4a06 	br	1002320 <___vfprintf_internal_r+0x1bc0>
 10025f8:	3cc00017 	ldw	r19,0(r7)
 10025fc:	39c00104 	addi	r7,r7,4
 1002600:	983d0e0e 	bge	r19,zero,1001a3c <___vfprintf_internal_r+0x12dc>
 1002604:	b8c00007 	ldb	r3,0(r23)
 1002608:	04ffffc4 	movi	r19,-1
 100260c:	0038d306 	br	100095c <___vfprintf_internal_r+0x1fc>
 1002610:	9cc00084 	addi	r19,r19,2
 1002614:	dcc14515 	stw	r19,1300(sp)
 1002618:	980f883a 	mov	r7,r19
 100261c:	983f400e 	bge	r19,zero,1002320 <___vfprintf_internal_r+0x1bc0>
 1002620:	003f7306 	br	10023f0 <___vfprintf_internal_r+0x1c90>

01002624 <__vfprintf_internal>:
 1002624:	00804074 	movhi	r2,257
 1002628:	109f6e04 	addi	r2,r2,32184
 100262c:	2013883a 	mov	r9,r4
 1002630:	11000017 	ldw	r4,0(r2)
 1002634:	2805883a 	mov	r2,r5
 1002638:	300f883a 	mov	r7,r6
 100263c:	480b883a 	mov	r5,r9
 1002640:	100d883a 	mov	r6,r2
 1002644:	10007601 	jmpi	1000760 <___vfprintf_internal_r>

01002648 <__swsetup_r>:
 1002648:	00804074 	movhi	r2,257
 100264c:	109f6e04 	addi	r2,r2,32184
 1002650:	10c00017 	ldw	r3,0(r2)
 1002654:	defffd04 	addi	sp,sp,-12
 1002658:	dc400115 	stw	r17,4(sp)
 100265c:	dc000015 	stw	r16,0(sp)
 1002660:	dfc00215 	stw	ra,8(sp)
 1002664:	2023883a 	mov	r17,r4
 1002668:	2821883a 	mov	r16,r5
 100266c:	18000226 	beq	r3,zero,1002678 <__swsetup_r+0x30>
 1002670:	18800e17 	ldw	r2,56(r3)
 1002674:	10001f26 	beq	r2,zero,10026f4 <__swsetup_r+0xac>
 1002678:	8100030b 	ldhu	r4,12(r16)
 100267c:	2080020c 	andi	r2,r4,8
 1002680:	10002826 	beq	r2,zero,1002724 <__swsetup_r+0xdc>
 1002684:	81400417 	ldw	r5,16(r16)
 1002688:	28001d26 	beq	r5,zero,1002700 <__swsetup_r+0xb8>
 100268c:	2080004c 	andi	r2,r4,1
 1002690:	1005003a 	cmpeq	r2,r2,zero
 1002694:	10000b26 	beq	r2,zero,10026c4 <__swsetup_r+0x7c>
 1002698:	2080008c 	andi	r2,r4,2
 100269c:	10001226 	beq	r2,zero,10026e8 <__swsetup_r+0xa0>
 10026a0:	0005883a 	mov	r2,zero
 10026a4:	80800215 	stw	r2,8(r16)
 10026a8:	28000b26 	beq	r5,zero,10026d8 <__swsetup_r+0x90>
 10026ac:	0005883a 	mov	r2,zero
 10026b0:	dfc00217 	ldw	ra,8(sp)
 10026b4:	dc400117 	ldw	r17,4(sp)
 10026b8:	dc000017 	ldw	r16,0(sp)
 10026bc:	dec00304 	addi	sp,sp,12
 10026c0:	f800283a 	ret
 10026c4:	80800517 	ldw	r2,20(r16)
 10026c8:	80000215 	stw	zero,8(r16)
 10026cc:	0085c83a 	sub	r2,zero,r2
 10026d0:	80800615 	stw	r2,24(r16)
 10026d4:	283ff51e 	bne	r5,zero,10026ac <__swsetup_r+0x64>
 10026d8:	2080200c 	andi	r2,r4,128
 10026dc:	103ff326 	beq	r2,zero,10026ac <__swsetup_r+0x64>
 10026e0:	00bfffc4 	movi	r2,-1
 10026e4:	003ff206 	br	10026b0 <__swsetup_r+0x68>
 10026e8:	80800517 	ldw	r2,20(r16)
 10026ec:	80800215 	stw	r2,8(r16)
 10026f0:	003fed06 	br	10026a8 <__swsetup_r+0x60>
 10026f4:	1809883a 	mov	r4,r3
 10026f8:	10042140 	call	1004214 <__sinit>
 10026fc:	003fde06 	br	1002678 <__swsetup_r+0x30>
 1002700:	20c0a00c 	andi	r3,r4,640
 1002704:	00808004 	movi	r2,512
 1002708:	18bfe026 	beq	r3,r2,100268c <__swsetup_r+0x44>
 100270c:	8809883a 	mov	r4,r17
 1002710:	800b883a 	mov	r5,r16
 1002714:	1004fc00 	call	1004fc0 <__smakebuf_r>
 1002718:	8100030b 	ldhu	r4,12(r16)
 100271c:	81400417 	ldw	r5,16(r16)
 1002720:	003fda06 	br	100268c <__swsetup_r+0x44>
 1002724:	2080040c 	andi	r2,r4,16
 1002728:	103fed26 	beq	r2,zero,10026e0 <__swsetup_r+0x98>
 100272c:	2080010c 	andi	r2,r4,4
 1002730:	10001226 	beq	r2,zero,100277c <__swsetup_r+0x134>
 1002734:	81400c17 	ldw	r5,48(r16)
 1002738:	28000526 	beq	r5,zero,1002750 <__swsetup_r+0x108>
 100273c:	80801004 	addi	r2,r16,64
 1002740:	28800226 	beq	r5,r2,100274c <__swsetup_r+0x104>
 1002744:	8809883a 	mov	r4,r17
 1002748:	10045cc0 	call	10045cc <_free_r>
 100274c:	80000c15 	stw	zero,48(r16)
 1002750:	8080030b 	ldhu	r2,12(r16)
 1002754:	81400417 	ldw	r5,16(r16)
 1002758:	80000115 	stw	zero,4(r16)
 100275c:	10bff6cc 	andi	r2,r2,65499
 1002760:	8080030d 	sth	r2,12(r16)
 1002764:	81400015 	stw	r5,0(r16)
 1002768:	8080030b 	ldhu	r2,12(r16)
 100276c:	10800214 	ori	r2,r2,8
 1002770:	113fffcc 	andi	r4,r2,65535
 1002774:	8080030d 	sth	r2,12(r16)
 1002778:	003fc306 	br	1002688 <__swsetup_r+0x40>
 100277c:	81400417 	ldw	r5,16(r16)
 1002780:	003ff906 	br	1002768 <__swsetup_r+0x120>

01002784 <quorem>:
 1002784:	28c00417 	ldw	r3,16(r5)
 1002788:	20800417 	ldw	r2,16(r4)
 100278c:	defff104 	addi	sp,sp,-60
 1002790:	dfc00e15 	stw	ra,56(sp)
 1002794:	df000d15 	stw	fp,52(sp)
 1002798:	ddc00c15 	stw	r23,48(sp)
 100279c:	dd800b15 	stw	r22,44(sp)
 10027a0:	dd400a15 	stw	r21,40(sp)
 10027a4:	dd000915 	stw	r20,36(sp)
 10027a8:	dcc00815 	stw	r19,32(sp)
 10027ac:	dc800715 	stw	r18,28(sp)
 10027b0:	dc400615 	stw	r17,24(sp)
 10027b4:	dc000515 	stw	r16,20(sp)
 10027b8:	d9000315 	stw	r4,12(sp)
 10027bc:	d9400415 	stw	r5,16(sp)
 10027c0:	10c07f16 	blt	r2,r3,10029c0 <quorem+0x23c>
 10027c4:	1d3fffc4 	addi	r20,r3,-1
 10027c8:	d8c00417 	ldw	r3,16(sp)
 10027cc:	d9000317 	ldw	r4,12(sp)
 10027d0:	a505883a 	add	r2,r20,r20
 10027d4:	1085883a 	add	r2,r2,r2
 10027d8:	1cc00504 	addi	r19,r3,20
 10027dc:	25c00504 	addi	r23,r4,20
 10027e0:	98ad883a 	add	r22,r19,r2
 10027e4:	15c7883a 	add	r3,r2,r23
 10027e8:	b1400017 	ldw	r5,0(r22)
 10027ec:	19000017 	ldw	r4,0(r3)
 10027f0:	d8c00015 	stw	r3,0(sp)
 10027f4:	29400044 	addi	r5,r5,1
 10027f8:	d9000215 	stw	r4,8(sp)
 10027fc:	10098d40 	call	10098d4 <__udivsi3>
 1002800:	1039883a 	mov	fp,r2
 1002804:	10003d1e 	bne	r2,zero,10028fc <quorem+0x178>
 1002808:	d9400417 	ldw	r5,16(sp)
 100280c:	d9000317 	ldw	r4,12(sp)
 1002810:	1005cec0 	call	1005cec <__mcmp>
 1002814:	10002c16 	blt	r2,zero,10028c8 <quorem+0x144>
 1002818:	e7000044 	addi	fp,fp,1
 100281c:	b80f883a 	mov	r7,r23
 1002820:	0011883a 	mov	r8,zero
 1002824:	0009883a 	mov	r4,zero
 1002828:	99400017 	ldw	r5,0(r19)
 100282c:	38c00017 	ldw	r3,0(r7)
 1002830:	9cc00104 	addi	r19,r19,4
 1002834:	28bfffcc 	andi	r2,r5,65535
 1002838:	2085883a 	add	r2,r4,r2
 100283c:	11bfffcc 	andi	r6,r2,65535
 1002840:	193fffcc 	andi	r4,r3,65535
 1002844:	1004d43a 	srli	r2,r2,16
 1002848:	280ad43a 	srli	r5,r5,16
 100284c:	2189c83a 	sub	r4,r4,r6
 1002850:	2209883a 	add	r4,r4,r8
 1002854:	1806d43a 	srli	r3,r3,16
 1002858:	288b883a 	add	r5,r5,r2
 100285c:	200dd43a 	srai	r6,r4,16
 1002860:	28bfffcc 	andi	r2,r5,65535
 1002864:	1887c83a 	sub	r3,r3,r2
 1002868:	1987883a 	add	r3,r3,r6
 100286c:	3900000d 	sth	r4,0(r7)
 1002870:	38c0008d 	sth	r3,2(r7)
 1002874:	2808d43a 	srli	r4,r5,16
 1002878:	39c00104 	addi	r7,r7,4
 100287c:	1811d43a 	srai	r8,r3,16
 1002880:	b4ffe92e 	bgeu	r22,r19,1002828 <quorem+0xa4>
 1002884:	a505883a 	add	r2,r20,r20
 1002888:	1085883a 	add	r2,r2,r2
 100288c:	b885883a 	add	r2,r23,r2
 1002890:	10c00017 	ldw	r3,0(r2)
 1002894:	18000c1e 	bne	r3,zero,10028c8 <quorem+0x144>
 1002898:	113fff04 	addi	r4,r2,-4
 100289c:	b900082e 	bgeu	r23,r4,10028c0 <quorem+0x13c>
 10028a0:	10bfff17 	ldw	r2,-4(r2)
 10028a4:	10000326 	beq	r2,zero,10028b4 <quorem+0x130>
 10028a8:	00000506 	br	10028c0 <quorem+0x13c>
 10028ac:	20800017 	ldw	r2,0(r4)
 10028b0:	1000031e 	bne	r2,zero,10028c0 <quorem+0x13c>
 10028b4:	213fff04 	addi	r4,r4,-4
 10028b8:	a53fffc4 	addi	r20,r20,-1
 10028bc:	b93ffb36 	bltu	r23,r4,10028ac <quorem+0x128>
 10028c0:	d9000317 	ldw	r4,12(sp)
 10028c4:	25000415 	stw	r20,16(r4)
 10028c8:	e005883a 	mov	r2,fp
 10028cc:	dfc00e17 	ldw	ra,56(sp)
 10028d0:	df000d17 	ldw	fp,52(sp)
 10028d4:	ddc00c17 	ldw	r23,48(sp)
 10028d8:	dd800b17 	ldw	r22,44(sp)
 10028dc:	dd400a17 	ldw	r21,40(sp)
 10028e0:	dd000917 	ldw	r20,36(sp)
 10028e4:	dcc00817 	ldw	r19,32(sp)
 10028e8:	dc800717 	ldw	r18,28(sp)
 10028ec:	dc400617 	ldw	r17,24(sp)
 10028f0:	dc000517 	ldw	r16,20(sp)
 10028f4:	dec00f04 	addi	sp,sp,60
 10028f8:	f800283a 	ret
 10028fc:	b823883a 	mov	r17,r23
 1002900:	9825883a 	mov	r18,r19
 1002904:	d8000115 	stw	zero,4(sp)
 1002908:	002b883a 	mov	r21,zero
 100290c:	94000017 	ldw	r16,0(r18)
 1002910:	e009883a 	mov	r4,fp
 1002914:	94800104 	addi	r18,r18,4
 1002918:	817fffcc 	andi	r5,r16,65535
 100291c:	10098e40 	call	10098e4 <__mulsi3>
 1002920:	800ad43a 	srli	r5,r16,16
 1002924:	e009883a 	mov	r4,fp
 1002928:	a8a1883a 	add	r16,r21,r2
 100292c:	10098e40 	call	10098e4 <__mulsi3>
 1002930:	89000017 	ldw	r4,0(r17)
 1002934:	80ffffcc 	andi	r3,r16,65535
 1002938:	8020d43a 	srli	r16,r16,16
 100293c:	217fffcc 	andi	r5,r4,65535
 1002940:	28cbc83a 	sub	r5,r5,r3
 1002944:	d8c00117 	ldw	r3,4(sp)
 1002948:	2008d43a 	srli	r4,r4,16
 100294c:	1405883a 	add	r2,r2,r16
 1002950:	28cb883a 	add	r5,r5,r3
 1002954:	280dd43a 	srai	r6,r5,16
 1002958:	10ffffcc 	andi	r3,r2,65535
 100295c:	20c9c83a 	sub	r4,r4,r3
 1002960:	2189883a 	add	r4,r4,r6
 1002964:	8900008d 	sth	r4,2(r17)
 1002968:	2009d43a 	srai	r4,r4,16
 100296c:	8940000d 	sth	r5,0(r17)
 1002970:	102ad43a 	srli	r21,r2,16
 1002974:	8c400104 	addi	r17,r17,4
 1002978:	d9000115 	stw	r4,4(sp)
 100297c:	b4bfe32e 	bgeu	r22,r18,100290c <quorem+0x188>
 1002980:	d9000217 	ldw	r4,8(sp)
 1002984:	203fa01e 	bne	r4,zero,1002808 <quorem+0x84>
 1002988:	d8800017 	ldw	r2,0(sp)
 100298c:	10ffff04 	addi	r3,r2,-4
 1002990:	b8c0082e 	bgeu	r23,r3,10029b4 <quorem+0x230>
 1002994:	10bfff17 	ldw	r2,-4(r2)
 1002998:	10000326 	beq	r2,zero,10029a8 <quorem+0x224>
 100299c:	00000506 	br	10029b4 <quorem+0x230>
 10029a0:	18800017 	ldw	r2,0(r3)
 10029a4:	1000031e 	bne	r2,zero,10029b4 <quorem+0x230>
 10029a8:	18ffff04 	addi	r3,r3,-4
 10029ac:	a53fffc4 	addi	r20,r20,-1
 10029b0:	b8fffb36 	bltu	r23,r3,10029a0 <quorem+0x21c>
 10029b4:	d8c00317 	ldw	r3,12(sp)
 10029b8:	1d000415 	stw	r20,16(r3)
 10029bc:	003f9206 	br	1002808 <quorem+0x84>
 10029c0:	0005883a 	mov	r2,zero
 10029c4:	003fc106 	br	10028cc <quorem+0x148>

010029c8 <_dtoa_r>:
 10029c8:	22001017 	ldw	r8,64(r4)
 10029cc:	deffda04 	addi	sp,sp,-152
 10029d0:	dd402115 	stw	r21,132(sp)
 10029d4:	dd002015 	stw	r20,128(sp)
 10029d8:	dc801e15 	stw	r18,120(sp)
 10029dc:	dc401d15 	stw	r17,116(sp)
 10029e0:	dfc02515 	stw	ra,148(sp)
 10029e4:	df002415 	stw	fp,144(sp)
 10029e8:	ddc02315 	stw	r23,140(sp)
 10029ec:	dd802215 	stw	r22,136(sp)
 10029f0:	dcc01f15 	stw	r19,124(sp)
 10029f4:	dc001c15 	stw	r16,112(sp)
 10029f8:	d9001615 	stw	r4,88(sp)
 10029fc:	3023883a 	mov	r17,r6
 1002a00:	2829883a 	mov	r20,r5
 1002a04:	d9c01715 	stw	r7,92(sp)
 1002a08:	dc802817 	ldw	r18,160(sp)
 1002a0c:	302b883a 	mov	r21,r6
 1002a10:	40000a26 	beq	r8,zero,1002a3c <_dtoa_r+0x74>
 1002a14:	20801117 	ldw	r2,68(r4)
 1002a18:	400b883a 	mov	r5,r8
 1002a1c:	40800115 	stw	r2,4(r8)
 1002a20:	20c01117 	ldw	r3,68(r4)
 1002a24:	00800044 	movi	r2,1
 1002a28:	10c4983a 	sll	r2,r2,r3
 1002a2c:	40800215 	stw	r2,8(r8)
 1002a30:	1005b900 	call	1005b90 <_Bfree>
 1002a34:	d8c01617 	ldw	r3,88(sp)
 1002a38:	18001015 	stw	zero,64(r3)
 1002a3c:	8800a316 	blt	r17,zero,1002ccc <_dtoa_r+0x304>
 1002a40:	90000015 	stw	zero,0(r18)
 1002a44:	a8dffc2c 	andhi	r3,r21,32752
 1002a48:	009ffc34 	movhi	r2,32752
 1002a4c:	18809126 	beq	r3,r2,1002c94 <_dtoa_r+0x2cc>
 1002a50:	000d883a 	mov	r6,zero
 1002a54:	000f883a 	mov	r7,zero
 1002a58:	a009883a 	mov	r4,r20
 1002a5c:	a80b883a 	mov	r5,r21
 1002a60:	dd001215 	stw	r20,72(sp)
 1002a64:	dd401315 	stw	r21,76(sp)
 1002a68:	10092140 	call	1009214 <__nedf2>
 1002a6c:	1000171e 	bne	r2,zero,1002acc <_dtoa_r+0x104>
 1002a70:	d9802717 	ldw	r6,156(sp)
 1002a74:	00800044 	movi	r2,1
 1002a78:	30800015 	stw	r2,0(r6)
 1002a7c:	d8802917 	ldw	r2,164(sp)
 1002a80:	10029b26 	beq	r2,zero,10034f0 <_dtoa_r+0xb28>
 1002a84:	d9002917 	ldw	r4,164(sp)
 1002a88:	00804074 	movhi	r2,257
 1002a8c:	1097d344 	addi	r2,r2,24397
 1002a90:	10ffffc4 	addi	r3,r2,-1
 1002a94:	20800015 	stw	r2,0(r4)
 1002a98:	1805883a 	mov	r2,r3
 1002a9c:	dfc02517 	ldw	ra,148(sp)
 1002aa0:	df002417 	ldw	fp,144(sp)
 1002aa4:	ddc02317 	ldw	r23,140(sp)
 1002aa8:	dd802217 	ldw	r22,136(sp)
 1002aac:	dd402117 	ldw	r21,132(sp)
 1002ab0:	dd002017 	ldw	r20,128(sp)
 1002ab4:	dcc01f17 	ldw	r19,124(sp)
 1002ab8:	dc801e17 	ldw	r18,120(sp)
 1002abc:	dc401d17 	ldw	r17,116(sp)
 1002ac0:	dc001c17 	ldw	r16,112(sp)
 1002ac4:	dec02604 	addi	sp,sp,152
 1002ac8:	f800283a 	ret
 1002acc:	d9001617 	ldw	r4,88(sp)
 1002ad0:	d9401217 	ldw	r5,72(sp)
 1002ad4:	d8800104 	addi	r2,sp,4
 1002ad8:	a80d883a 	mov	r6,r21
 1002adc:	d9c00204 	addi	r7,sp,8
 1002ae0:	d8800015 	stw	r2,0(sp)
 1002ae4:	10061cc0 	call	10061cc <__d2b>
 1002ae8:	d8800715 	stw	r2,28(sp)
 1002aec:	a804d53a 	srli	r2,r21,20
 1002af0:	1101ffcc 	andi	r4,r2,2047
 1002af4:	20008626 	beq	r4,zero,1002d10 <_dtoa_r+0x348>
 1002af8:	d8c01217 	ldw	r3,72(sp)
 1002afc:	00800434 	movhi	r2,16
 1002b00:	10bfffc4 	addi	r2,r2,-1
 1002b04:	ddc00117 	ldw	r23,4(sp)
 1002b08:	a884703a 	and	r2,r21,r2
 1002b0c:	1811883a 	mov	r8,r3
 1002b10:	124ffc34 	orhi	r9,r2,16368
 1002b14:	25bf0044 	addi	r22,r4,-1023
 1002b18:	d8000815 	stw	zero,32(sp)
 1002b1c:	0005883a 	mov	r2,zero
 1002b20:	00cffe34 	movhi	r3,16376
 1002b24:	480b883a 	mov	r5,r9
 1002b28:	4009883a 	mov	r4,r8
 1002b2c:	180f883a 	mov	r7,r3
 1002b30:	100d883a 	mov	r6,r2
 1002b34:	1008a7c0 	call	1008a7c <__subdf3>
 1002b38:	0218dbf4 	movhi	r8,25455
 1002b3c:	4210d844 	addi	r8,r8,17249
 1002b40:	024ff4f4 	movhi	r9,16339
 1002b44:	4a61e9c4 	addi	r9,r9,-30809
 1002b48:	480f883a 	mov	r7,r9
 1002b4c:	400d883a 	mov	r6,r8
 1002b50:	180b883a 	mov	r5,r3
 1002b54:	1009883a 	mov	r4,r2
 1002b58:	1008b700 	call	1008b70 <__muldf3>
 1002b5c:	0222d874 	movhi	r8,35681
 1002b60:	42322cc4 	addi	r8,r8,-14157
 1002b64:	024ff1f4 	movhi	r9,16327
 1002b68:	4a628a04 	addi	r9,r9,-30168
 1002b6c:	480f883a 	mov	r7,r9
 1002b70:	400d883a 	mov	r6,r8
 1002b74:	180b883a 	mov	r5,r3
 1002b78:	1009883a 	mov	r4,r2
 1002b7c:	1008afc0 	call	1008afc <__adddf3>
 1002b80:	b009883a 	mov	r4,r22
 1002b84:	1021883a 	mov	r16,r2
 1002b88:	1823883a 	mov	r17,r3
 1002b8c:	10094340 	call	1009434 <__floatsidf>
 1002b90:	021427f4 	movhi	r8,20639
 1002b94:	421e7ec4 	addi	r8,r8,31227
 1002b98:	024ff4f4 	movhi	r9,16339
 1002b9c:	4a5104c4 	addi	r9,r9,17427
 1002ba0:	480f883a 	mov	r7,r9
 1002ba4:	400d883a 	mov	r6,r8
 1002ba8:	180b883a 	mov	r5,r3
 1002bac:	1009883a 	mov	r4,r2
 1002bb0:	1008b700 	call	1008b70 <__muldf3>
 1002bb4:	180f883a 	mov	r7,r3
 1002bb8:	880b883a 	mov	r5,r17
 1002bbc:	100d883a 	mov	r6,r2
 1002bc0:	8009883a 	mov	r4,r16
 1002bc4:	1008afc0 	call	1008afc <__adddf3>
 1002bc8:	1009883a 	mov	r4,r2
 1002bcc:	180b883a 	mov	r5,r3
 1002bd0:	1021883a 	mov	r16,r2
 1002bd4:	1823883a 	mov	r17,r3
 1002bd8:	100952c0 	call	100952c <__fixdfsi>
 1002bdc:	000d883a 	mov	r6,zero
 1002be0:	000f883a 	mov	r7,zero
 1002be4:	8009883a 	mov	r4,r16
 1002be8:	880b883a 	mov	r5,r17
 1002bec:	d8800d15 	stw	r2,52(sp)
 1002bf0:	10093ac0 	call	10093ac <__ltdf2>
 1002bf4:	10031716 	blt	r2,zero,1003854 <_dtoa_r+0xe8c>
 1002bf8:	d8c00d17 	ldw	r3,52(sp)
 1002bfc:	00800584 	movi	r2,22
 1002c00:	10c1482e 	bgeu	r2,r3,1003124 <_dtoa_r+0x75c>
 1002c04:	01000044 	movi	r4,1
 1002c08:	d9000c15 	stw	r4,48(sp)
 1002c0c:	bd85c83a 	sub	r2,r23,r22
 1002c10:	11bfffc4 	addi	r6,r2,-1
 1002c14:	30030b16 	blt	r6,zero,1003844 <_dtoa_r+0xe7c>
 1002c18:	d9800a15 	stw	r6,40(sp)
 1002c1c:	d8001115 	stw	zero,68(sp)
 1002c20:	d8c00d17 	ldw	r3,52(sp)
 1002c24:	1802ff16 	blt	r3,zero,1003824 <_dtoa_r+0xe5c>
 1002c28:	d9000a17 	ldw	r4,40(sp)
 1002c2c:	d8c00915 	stw	r3,36(sp)
 1002c30:	d8001015 	stw	zero,64(sp)
 1002c34:	20c9883a 	add	r4,r4,r3
 1002c38:	d9000a15 	stw	r4,40(sp)
 1002c3c:	d9001717 	ldw	r4,92(sp)
 1002c40:	00800244 	movi	r2,9
 1002c44:	11004636 	bltu	r2,r4,1002d60 <_dtoa_r+0x398>
 1002c48:	00800144 	movi	r2,5
 1002c4c:	11020416 	blt	r2,r4,1003460 <_dtoa_r+0xa98>
 1002c50:	04400044 	movi	r17,1
 1002c54:	d8c01717 	ldw	r3,92(sp)
 1002c58:	00800144 	movi	r2,5
 1002c5c:	10c1ed36 	bltu	r2,r3,1003414 <_dtoa_r+0xa4c>
 1002c60:	18c5883a 	add	r2,r3,r3
 1002c64:	1085883a 	add	r2,r2,r2
 1002c68:	00c04034 	movhi	r3,256
 1002c6c:	18cb1f04 	addi	r3,r3,11388
 1002c70:	10c5883a 	add	r2,r2,r3
 1002c74:	11000017 	ldw	r4,0(r2)
 1002c78:	2000683a 	jmp	r4
 1002c7c:	01002d68 	cmpgeui	r4,zero,181
 1002c80:	01002d68 	cmpgeui	r4,zero,181
 1002c84:	01003768 	cmpgeui	r4,zero,221
 1002c88:	01003740 	call	100374 <__alt_mem_sram+0x374>
 1002c8c:	01003784 	movi	r4,222
 1002c90:	01003790 	cmplti	r4,zero,222
 1002c94:	d9002717 	ldw	r4,156(sp)
 1002c98:	0089c3c4 	movi	r2,9999
 1002c9c:	20800015 	stw	r2,0(r4)
 1002ca0:	a0001026 	beq	r20,zero,1002ce4 <_dtoa_r+0x31c>
 1002ca4:	00c04074 	movhi	r3,257
 1002ca8:	18d7df04 	addi	r3,r3,24444
 1002cac:	d9802917 	ldw	r6,164(sp)
 1002cb0:	303f7926 	beq	r6,zero,1002a98 <_dtoa_r+0xd0>
 1002cb4:	188000c7 	ldb	r2,3(r3)
 1002cb8:	190000c4 	addi	r4,r3,3
 1002cbc:	1000101e 	bne	r2,zero,1002d00 <_dtoa_r+0x338>
 1002cc0:	d8802917 	ldw	r2,164(sp)
 1002cc4:	11000015 	stw	r4,0(r2)
 1002cc8:	003f7306 	br	1002a98 <_dtoa_r+0xd0>
 1002ccc:	00a00034 	movhi	r2,32768
 1002cd0:	10bfffc4 	addi	r2,r2,-1
 1002cd4:	00c00044 	movi	r3,1
 1002cd8:	88aa703a 	and	r21,r17,r2
 1002cdc:	90c00015 	stw	r3,0(r18)
 1002ce0:	003f5806 	br	1002a44 <_dtoa_r+0x7c>
 1002ce4:	00800434 	movhi	r2,16
 1002ce8:	10bfffc4 	addi	r2,r2,-1
 1002cec:	a884703a 	and	r2,r21,r2
 1002cf0:	103fec1e 	bne	r2,zero,1002ca4 <_dtoa_r+0x2dc>
 1002cf4:	00c04074 	movhi	r3,257
 1002cf8:	18d7dc04 	addi	r3,r3,24432
 1002cfc:	003feb06 	br	1002cac <_dtoa_r+0x2e4>
 1002d00:	d8802917 	ldw	r2,164(sp)
 1002d04:	19000204 	addi	r4,r3,8
 1002d08:	11000015 	stw	r4,0(r2)
 1002d0c:	003f6206 	br	1002a98 <_dtoa_r+0xd0>
 1002d10:	ddc00117 	ldw	r23,4(sp)
 1002d14:	d8800217 	ldw	r2,8(sp)
 1002d18:	01000804 	movi	r4,32
 1002d1c:	b8c10c84 	addi	r3,r23,1074
 1002d20:	18a3883a 	add	r17,r3,r2
 1002d24:	2441b80e 	bge	r4,r17,1003408 <_dtoa_r+0xa40>
 1002d28:	00c01004 	movi	r3,64
 1002d2c:	1c47c83a 	sub	r3,r3,r17
 1002d30:	88bff804 	addi	r2,r17,-32
 1002d34:	a8c6983a 	sll	r3,r21,r3
 1002d38:	a084d83a 	srl	r2,r20,r2
 1002d3c:	1888b03a 	or	r4,r3,r2
 1002d40:	10096040 	call	1009604 <__floatunsidf>
 1002d44:	1011883a 	mov	r8,r2
 1002d48:	00bf8434 	movhi	r2,65040
 1002d4c:	01000044 	movi	r4,1
 1002d50:	10d3883a 	add	r9,r2,r3
 1002d54:	8dbef344 	addi	r22,r17,-1075
 1002d58:	d9000815 	stw	r4,32(sp)
 1002d5c:	003f6f06 	br	1002b1c <_dtoa_r+0x154>
 1002d60:	d8001715 	stw	zero,92(sp)
 1002d64:	04400044 	movi	r17,1
 1002d68:	00bfffc4 	movi	r2,-1
 1002d6c:	00c00044 	movi	r3,1
 1002d70:	d8800e15 	stw	r2,56(sp)
 1002d74:	d8002615 	stw	zero,152(sp)
 1002d78:	d8800f15 	stw	r2,60(sp)
 1002d7c:	d8c00b15 	stw	r3,44(sp)
 1002d80:	1021883a 	mov	r16,r2
 1002d84:	d8801617 	ldw	r2,88(sp)
 1002d88:	10001115 	stw	zero,68(r2)
 1002d8c:	d8801617 	ldw	r2,88(sp)
 1002d90:	11401117 	ldw	r5,68(r2)
 1002d94:	1009883a 	mov	r4,r2
 1002d98:	10061100 	call	1006110 <_Balloc>
 1002d9c:	d8c01617 	ldw	r3,88(sp)
 1002da0:	d8800515 	stw	r2,20(sp)
 1002da4:	18801015 	stw	r2,64(r3)
 1002da8:	00800384 	movi	r2,14
 1002dac:	14006836 	bltu	r2,r16,1002f50 <_dtoa_r+0x588>
 1002db0:	8805003a 	cmpeq	r2,r17,zero
 1002db4:	1000661e 	bne	r2,zero,1002f50 <_dtoa_r+0x588>
 1002db8:	d9000d17 	ldw	r4,52(sp)
 1002dbc:	0102300e 	bge	zero,r4,1003680 <_dtoa_r+0xcb8>
 1002dc0:	208003cc 	andi	r2,r4,15
 1002dc4:	100490fa 	slli	r2,r2,3
 1002dc8:	2025d13a 	srai	r18,r4,4
 1002dcc:	00c04074 	movhi	r3,257
 1002dd0:	18d7f104 	addi	r3,r3,24516
 1002dd4:	10c5883a 	add	r2,r2,r3
 1002dd8:	90c0040c 	andi	r3,r18,16
 1002ddc:	14000017 	ldw	r16,0(r2)
 1002de0:	14400117 	ldw	r17,4(r2)
 1002de4:	18036a1e 	bne	r3,zero,1003b90 <_dtoa_r+0x11c8>
 1002de8:	05800084 	movi	r22,2
 1002dec:	90001026 	beq	r18,zero,1002e30 <_dtoa_r+0x468>
 1002df0:	04c04074 	movhi	r19,257
 1002df4:	9cd82304 	addi	r19,r19,24716
 1002df8:	9080004c 	andi	r2,r18,1
 1002dfc:	1005003a 	cmpeq	r2,r2,zero
 1002e00:	1000081e 	bne	r2,zero,1002e24 <_dtoa_r+0x45c>
 1002e04:	99800017 	ldw	r6,0(r19)
 1002e08:	99c00117 	ldw	r7,4(r19)
 1002e0c:	880b883a 	mov	r5,r17
 1002e10:	8009883a 	mov	r4,r16
 1002e14:	1008b700 	call	1008b70 <__muldf3>
 1002e18:	1021883a 	mov	r16,r2
 1002e1c:	b5800044 	addi	r22,r22,1
 1002e20:	1823883a 	mov	r17,r3
 1002e24:	9025d07a 	srai	r18,r18,1
 1002e28:	9cc00204 	addi	r19,r19,8
 1002e2c:	903ff21e 	bne	r18,zero,1002df8 <_dtoa_r+0x430>
 1002e30:	a80b883a 	mov	r5,r21
 1002e34:	a009883a 	mov	r4,r20
 1002e38:	880f883a 	mov	r7,r17
 1002e3c:	800d883a 	mov	r6,r16
 1002e40:	1008f340 	call	1008f34 <__divdf3>
 1002e44:	1029883a 	mov	r20,r2
 1002e48:	182b883a 	mov	r21,r3
 1002e4c:	d8c00c17 	ldw	r3,48(sp)
 1002e50:	1805003a 	cmpeq	r2,r3,zero
 1002e54:	1000081e 	bne	r2,zero,1002e78 <_dtoa_r+0x4b0>
 1002e58:	0005883a 	mov	r2,zero
 1002e5c:	00cffc34 	movhi	r3,16368
 1002e60:	180f883a 	mov	r7,r3
 1002e64:	a009883a 	mov	r4,r20
 1002e68:	a80b883a 	mov	r5,r21
 1002e6c:	100d883a 	mov	r6,r2
 1002e70:	10093ac0 	call	10093ac <__ltdf2>
 1002e74:	1003fe16 	blt	r2,zero,1003e70 <_dtoa_r+0x14a8>
 1002e78:	b009883a 	mov	r4,r22
 1002e7c:	10094340 	call	1009434 <__floatsidf>
 1002e80:	180b883a 	mov	r5,r3
 1002e84:	1009883a 	mov	r4,r2
 1002e88:	a00d883a 	mov	r6,r20
 1002e8c:	a80f883a 	mov	r7,r21
 1002e90:	1008b700 	call	1008b70 <__muldf3>
 1002e94:	0011883a 	mov	r8,zero
 1002e98:	02500734 	movhi	r9,16412
 1002e9c:	1009883a 	mov	r4,r2
 1002ea0:	180b883a 	mov	r5,r3
 1002ea4:	480f883a 	mov	r7,r9
 1002ea8:	400d883a 	mov	r6,r8
 1002eac:	1008afc0 	call	1008afc <__adddf3>
 1002eb0:	d9000f17 	ldw	r4,60(sp)
 1002eb4:	102d883a 	mov	r22,r2
 1002eb8:	00bf3034 	movhi	r2,64704
 1002ebc:	18b9883a 	add	fp,r3,r2
 1002ec0:	e02f883a 	mov	r23,fp
 1002ec4:	20028f1e 	bne	r4,zero,1003904 <_dtoa_r+0xf3c>
 1002ec8:	0005883a 	mov	r2,zero
 1002ecc:	00d00534 	movhi	r3,16404
 1002ed0:	a009883a 	mov	r4,r20
 1002ed4:	a80b883a 	mov	r5,r21
 1002ed8:	180f883a 	mov	r7,r3
 1002edc:	100d883a 	mov	r6,r2
 1002ee0:	1008a7c0 	call	1008a7c <__subdf3>
 1002ee4:	1009883a 	mov	r4,r2
 1002ee8:	e00f883a 	mov	r7,fp
 1002eec:	180b883a 	mov	r5,r3
 1002ef0:	b00d883a 	mov	r6,r22
 1002ef4:	1025883a 	mov	r18,r2
 1002ef8:	1827883a 	mov	r19,r3
 1002efc:	100929c0 	call	100929c <__gtdf2>
 1002f00:	00834f16 	blt	zero,r2,1003c40 <_dtoa_r+0x1278>
 1002f04:	e0e0003c 	xorhi	r3,fp,32768
 1002f08:	9009883a 	mov	r4,r18
 1002f0c:	980b883a 	mov	r5,r19
 1002f10:	180f883a 	mov	r7,r3
 1002f14:	b00d883a 	mov	r6,r22
 1002f18:	10093ac0 	call	10093ac <__ltdf2>
 1002f1c:	1000080e 	bge	r2,zero,1002f40 <_dtoa_r+0x578>
 1002f20:	0027883a 	mov	r19,zero
 1002f24:	0025883a 	mov	r18,zero
 1002f28:	d8802617 	ldw	r2,152(sp)
 1002f2c:	df000517 	ldw	fp,20(sp)
 1002f30:	d8000615 	stw	zero,24(sp)
 1002f34:	0084303a 	nor	r2,zero,r2
 1002f38:	d8800d15 	stw	r2,52(sp)
 1002f3c:	00019b06 	br	10035ac <_dtoa_r+0xbe4>
 1002f40:	d9801217 	ldw	r6,72(sp)
 1002f44:	d8801317 	ldw	r2,76(sp)
 1002f48:	3029883a 	mov	r20,r6
 1002f4c:	102b883a 	mov	r21,r2
 1002f50:	d8c00217 	ldw	r3,8(sp)
 1002f54:	18008516 	blt	r3,zero,100316c <_dtoa_r+0x7a4>
 1002f58:	d9000d17 	ldw	r4,52(sp)
 1002f5c:	00800384 	movi	r2,14
 1002f60:	11008216 	blt	r2,r4,100316c <_dtoa_r+0x7a4>
 1002f64:	200490fa 	slli	r2,r4,3
 1002f68:	d9802617 	ldw	r6,152(sp)
 1002f6c:	00c04074 	movhi	r3,257
 1002f70:	18d7f104 	addi	r3,r3,24516
 1002f74:	10c5883a 	add	r2,r2,r3
 1002f78:	14800017 	ldw	r18,0(r2)
 1002f7c:	14c00117 	ldw	r19,4(r2)
 1002f80:	30031e16 	blt	r6,zero,1003bfc <_dtoa_r+0x1234>
 1002f84:	d9000517 	ldw	r4,20(sp)
 1002f88:	d8c00f17 	ldw	r3,60(sp)
 1002f8c:	a823883a 	mov	r17,r21
 1002f90:	a021883a 	mov	r16,r20
 1002f94:	192b883a 	add	r21,r3,r4
 1002f98:	2039883a 	mov	fp,r4
 1002f9c:	00000f06 	br	1002fdc <_dtoa_r+0x614>
 1002fa0:	0005883a 	mov	r2,zero
 1002fa4:	00d00934 	movhi	r3,16420
 1002fa8:	5009883a 	mov	r4,r10
 1002fac:	580b883a 	mov	r5,r11
 1002fb0:	180f883a 	mov	r7,r3
 1002fb4:	100d883a 	mov	r6,r2
 1002fb8:	1008b700 	call	1008b70 <__muldf3>
 1002fbc:	180b883a 	mov	r5,r3
 1002fc0:	000d883a 	mov	r6,zero
 1002fc4:	000f883a 	mov	r7,zero
 1002fc8:	1009883a 	mov	r4,r2
 1002fcc:	1021883a 	mov	r16,r2
 1002fd0:	1823883a 	mov	r17,r3
 1002fd4:	10092140 	call	1009214 <__nedf2>
 1002fd8:	10004526 	beq	r2,zero,10030f0 <_dtoa_r+0x728>
 1002fdc:	900d883a 	mov	r6,r18
 1002fe0:	980f883a 	mov	r7,r19
 1002fe4:	8009883a 	mov	r4,r16
 1002fe8:	880b883a 	mov	r5,r17
 1002fec:	1008f340 	call	1008f34 <__divdf3>
 1002ff0:	180b883a 	mov	r5,r3
 1002ff4:	1009883a 	mov	r4,r2
 1002ff8:	100952c0 	call	100952c <__fixdfsi>
 1002ffc:	1009883a 	mov	r4,r2
 1003000:	1029883a 	mov	r20,r2
 1003004:	10094340 	call	1009434 <__floatsidf>
 1003008:	180f883a 	mov	r7,r3
 100300c:	9009883a 	mov	r4,r18
 1003010:	980b883a 	mov	r5,r19
 1003014:	100d883a 	mov	r6,r2
 1003018:	1008b700 	call	1008b70 <__muldf3>
 100301c:	180f883a 	mov	r7,r3
 1003020:	880b883a 	mov	r5,r17
 1003024:	8009883a 	mov	r4,r16
 1003028:	100d883a 	mov	r6,r2
 100302c:	1008a7c0 	call	1008a7c <__subdf3>
 1003030:	1015883a 	mov	r10,r2
 1003034:	a0800c04 	addi	r2,r20,48
 1003038:	e0800005 	stb	r2,0(fp)
 100303c:	e7000044 	addi	fp,fp,1
 1003040:	1817883a 	mov	r11,r3
 1003044:	e57fd61e 	bne	fp,r21,1002fa0 <_dtoa_r+0x5d8>
 1003048:	500d883a 	mov	r6,r10
 100304c:	180f883a 	mov	r7,r3
 1003050:	5009883a 	mov	r4,r10
 1003054:	180b883a 	mov	r5,r3
 1003058:	1008afc0 	call	1008afc <__adddf3>
 100305c:	100d883a 	mov	r6,r2
 1003060:	9009883a 	mov	r4,r18
 1003064:	980b883a 	mov	r5,r19
 1003068:	180f883a 	mov	r7,r3
 100306c:	1021883a 	mov	r16,r2
 1003070:	1823883a 	mov	r17,r3
 1003074:	10093ac0 	call	10093ac <__ltdf2>
 1003078:	10000816 	blt	r2,zero,100309c <_dtoa_r+0x6d4>
 100307c:	980b883a 	mov	r5,r19
 1003080:	800d883a 	mov	r6,r16
 1003084:	880f883a 	mov	r7,r17
 1003088:	9009883a 	mov	r4,r18
 100308c:	100918c0 	call	100918c <__eqdf2>
 1003090:	1000171e 	bne	r2,zero,10030f0 <_dtoa_r+0x728>
 1003094:	a080004c 	andi	r2,r20,1
 1003098:	10001526 	beq	r2,zero,10030f0 <_dtoa_r+0x728>
 100309c:	d8800d17 	ldw	r2,52(sp)
 10030a0:	d8800415 	stw	r2,16(sp)
 10030a4:	e009883a 	mov	r4,fp
 10030a8:	213fffc4 	addi	r4,r4,-1
 10030ac:	20c00007 	ldb	r3,0(r4)
 10030b0:	00800e44 	movi	r2,57
 10030b4:	1880081e 	bne	r3,r2,10030d8 <_dtoa_r+0x710>
 10030b8:	d8800517 	ldw	r2,20(sp)
 10030bc:	113ffa1e 	bne	r2,r4,10030a8 <_dtoa_r+0x6e0>
 10030c0:	d8c00417 	ldw	r3,16(sp)
 10030c4:	d9800517 	ldw	r6,20(sp)
 10030c8:	00800c04 	movi	r2,48
 10030cc:	18c00044 	addi	r3,r3,1
 10030d0:	d8c00415 	stw	r3,16(sp)
 10030d4:	30800005 	stb	r2,0(r6)
 10030d8:	20800003 	ldbu	r2,0(r4)
 10030dc:	d8c00417 	ldw	r3,16(sp)
 10030e0:	27000044 	addi	fp,r4,1
 10030e4:	10800044 	addi	r2,r2,1
 10030e8:	d8c00d15 	stw	r3,52(sp)
 10030ec:	20800005 	stb	r2,0(r4)
 10030f0:	d9001617 	ldw	r4,88(sp)
 10030f4:	d9400717 	ldw	r5,28(sp)
 10030f8:	1005b900 	call	1005b90 <_Bfree>
 10030fc:	e0000005 	stb	zero,0(fp)
 1003100:	d9800d17 	ldw	r6,52(sp)
 1003104:	d8c02717 	ldw	r3,156(sp)
 1003108:	d9002917 	ldw	r4,164(sp)
 100310c:	30800044 	addi	r2,r6,1
 1003110:	18800015 	stw	r2,0(r3)
 1003114:	20029c26 	beq	r4,zero,1003b88 <_dtoa_r+0x11c0>
 1003118:	d8c00517 	ldw	r3,20(sp)
 100311c:	27000015 	stw	fp,0(r4)
 1003120:	003e5d06 	br	1002a98 <_dtoa_r+0xd0>
 1003124:	d9800d17 	ldw	r6,52(sp)
 1003128:	00c04074 	movhi	r3,257
 100312c:	18d7f104 	addi	r3,r3,24516
 1003130:	d9001217 	ldw	r4,72(sp)
 1003134:	300490fa 	slli	r2,r6,3
 1003138:	d9401317 	ldw	r5,76(sp)
 100313c:	10c5883a 	add	r2,r2,r3
 1003140:	12000017 	ldw	r8,0(r2)
 1003144:	12400117 	ldw	r9,4(r2)
 1003148:	400d883a 	mov	r6,r8
 100314c:	480f883a 	mov	r7,r9
 1003150:	10093ac0 	call	10093ac <__ltdf2>
 1003154:	1000030e 	bge	r2,zero,1003164 <_dtoa_r+0x79c>
 1003158:	d8800d17 	ldw	r2,52(sp)
 100315c:	10bfffc4 	addi	r2,r2,-1
 1003160:	d8800d15 	stw	r2,52(sp)
 1003164:	d8000c15 	stw	zero,48(sp)
 1003168:	003ea806 	br	1002c0c <_dtoa_r+0x244>
 100316c:	d9000b17 	ldw	r4,44(sp)
 1003170:	202cc03a 	cmpne	r22,r4,zero
 1003174:	b000c71e 	bne	r22,zero,1003494 <_dtoa_r+0xacc>
 1003178:	dc001117 	ldw	r16,68(sp)
 100317c:	dc801017 	ldw	r18,64(sp)
 1003180:	0027883a 	mov	r19,zero
 1003184:	04000b0e 	bge	zero,r16,10031b4 <_dtoa_r+0x7ec>
 1003188:	d8c00a17 	ldw	r3,40(sp)
 100318c:	00c0090e 	bge	zero,r3,10031b4 <_dtoa_r+0x7ec>
 1003190:	8005883a 	mov	r2,r16
 1003194:	1c011316 	blt	r3,r16,10035e4 <_dtoa_r+0xc1c>
 1003198:	d9000a17 	ldw	r4,40(sp)
 100319c:	d9801117 	ldw	r6,68(sp)
 10031a0:	80a1c83a 	sub	r16,r16,r2
 10031a4:	2089c83a 	sub	r4,r4,r2
 10031a8:	308dc83a 	sub	r6,r6,r2
 10031ac:	d9000a15 	stw	r4,40(sp)
 10031b0:	d9801115 	stw	r6,68(sp)
 10031b4:	d8801017 	ldw	r2,64(sp)
 10031b8:	0080150e 	bge	zero,r2,1003210 <_dtoa_r+0x848>
 10031bc:	d8c00b17 	ldw	r3,44(sp)
 10031c0:	1805003a 	cmpeq	r2,r3,zero
 10031c4:	1001c91e 	bne	r2,zero,10038ec <_dtoa_r+0xf24>
 10031c8:	04800e0e 	bge	zero,r18,1003204 <_dtoa_r+0x83c>
 10031cc:	d9001617 	ldw	r4,88(sp)
 10031d0:	980b883a 	mov	r5,r19
 10031d4:	900d883a 	mov	r6,r18
 10031d8:	10069dc0 	call	10069dc <__pow5mult>
 10031dc:	d9001617 	ldw	r4,88(sp)
 10031e0:	d9800717 	ldw	r6,28(sp)
 10031e4:	100b883a 	mov	r5,r2
 10031e8:	1027883a 	mov	r19,r2
 10031ec:	10066200 	call	1006620 <__multiply>
 10031f0:	d9001617 	ldw	r4,88(sp)
 10031f4:	d9400717 	ldw	r5,28(sp)
 10031f8:	1023883a 	mov	r17,r2
 10031fc:	1005b900 	call	1005b90 <_Bfree>
 1003200:	dc400715 	stw	r17,28(sp)
 1003204:	d9001017 	ldw	r4,64(sp)
 1003208:	248dc83a 	sub	r6,r4,r18
 100320c:	30010e1e 	bne	r6,zero,1003648 <_dtoa_r+0xc80>
 1003210:	d9001617 	ldw	r4,88(sp)
 1003214:	04400044 	movi	r17,1
 1003218:	880b883a 	mov	r5,r17
 100321c:	10068740 	call	1006874 <__i2b>
 1003220:	d9800917 	ldw	r6,36(sp)
 1003224:	1025883a 	mov	r18,r2
 1003228:	0180040e 	bge	zero,r6,100323c <_dtoa_r+0x874>
 100322c:	d9001617 	ldw	r4,88(sp)
 1003230:	100b883a 	mov	r5,r2
 1003234:	10069dc0 	call	10069dc <__pow5mult>
 1003238:	1025883a 	mov	r18,r2
 100323c:	d8801717 	ldw	r2,92(sp)
 1003240:	8880f30e 	bge	r17,r2,1003610 <_dtoa_r+0xc48>
 1003244:	0023883a 	mov	r17,zero
 1003248:	d9800917 	ldw	r6,36(sp)
 100324c:	30019e1e 	bne	r6,zero,10038c8 <_dtoa_r+0xf00>
 1003250:	00c00044 	movi	r3,1
 1003254:	d9000a17 	ldw	r4,40(sp)
 1003258:	20c5883a 	add	r2,r4,r3
 100325c:	10c007cc 	andi	r3,r2,31
 1003260:	1800841e 	bne	r3,zero,1003474 <_dtoa_r+0xaac>
 1003264:	00800704 	movi	r2,28
 1003268:	d9000a17 	ldw	r4,40(sp)
 100326c:	d9801117 	ldw	r6,68(sp)
 1003270:	80a1883a 	add	r16,r16,r2
 1003274:	2089883a 	add	r4,r4,r2
 1003278:	308d883a 	add	r6,r6,r2
 100327c:	d9000a15 	stw	r4,40(sp)
 1003280:	d9801115 	stw	r6,68(sp)
 1003284:	d8801117 	ldw	r2,68(sp)
 1003288:	0080050e 	bge	zero,r2,10032a0 <_dtoa_r+0x8d8>
 100328c:	d9400717 	ldw	r5,28(sp)
 1003290:	d9001617 	ldw	r4,88(sp)
 1003294:	100d883a 	mov	r6,r2
 1003298:	10064d40 	call	10064d4 <__lshift>
 100329c:	d8800715 	stw	r2,28(sp)
 10032a0:	d8c00a17 	ldw	r3,40(sp)
 10032a4:	00c0050e 	bge	zero,r3,10032bc <_dtoa_r+0x8f4>
 10032a8:	d9001617 	ldw	r4,88(sp)
 10032ac:	900b883a 	mov	r5,r18
 10032b0:	180d883a 	mov	r6,r3
 10032b4:	10064d40 	call	10064d4 <__lshift>
 10032b8:	1025883a 	mov	r18,r2
 10032bc:	d9000c17 	ldw	r4,48(sp)
 10032c0:	2005003a 	cmpeq	r2,r4,zero
 10032c4:	10016f26 	beq	r2,zero,1003884 <_dtoa_r+0xebc>
 10032c8:	d9000f17 	ldw	r4,60(sp)
 10032cc:	0102170e 	bge	zero,r4,1003b2c <_dtoa_r+0x1164>
 10032d0:	d9800b17 	ldw	r6,44(sp)
 10032d4:	3005003a 	cmpeq	r2,r6,zero
 10032d8:	1000881e 	bne	r2,zero,10034fc <_dtoa_r+0xb34>
 10032dc:	0400050e 	bge	zero,r16,10032f4 <_dtoa_r+0x92c>
 10032e0:	d9001617 	ldw	r4,88(sp)
 10032e4:	980b883a 	mov	r5,r19
 10032e8:	800d883a 	mov	r6,r16
 10032ec:	10064d40 	call	10064d4 <__lshift>
 10032f0:	1027883a 	mov	r19,r2
 10032f4:	8804c03a 	cmpne	r2,r17,zero
 10032f8:	1002541e 	bne	r2,zero,1003c4c <_dtoa_r+0x1284>
 10032fc:	980b883a 	mov	r5,r19
 1003300:	dd800517 	ldw	r22,20(sp)
 1003304:	dcc00615 	stw	r19,24(sp)
 1003308:	a700004c 	andi	fp,r20,1
 100330c:	2827883a 	mov	r19,r5
 1003310:	d9000717 	ldw	r4,28(sp)
 1003314:	900b883a 	mov	r5,r18
 1003318:	10027840 	call	1002784 <quorem>
 100331c:	d9000717 	ldw	r4,28(sp)
 1003320:	d9400617 	ldw	r5,24(sp)
 1003324:	1023883a 	mov	r17,r2
 1003328:	8dc00c04 	addi	r23,r17,48
 100332c:	1005cec0 	call	1005cec <__mcmp>
 1003330:	d9001617 	ldw	r4,88(sp)
 1003334:	900b883a 	mov	r5,r18
 1003338:	980d883a 	mov	r6,r19
 100333c:	1029883a 	mov	r20,r2
 1003340:	10063480 	call	1006348 <__mdiff>
 1003344:	102b883a 	mov	r21,r2
 1003348:	10800317 	ldw	r2,12(r2)
 100334c:	1001281e 	bne	r2,zero,10037f0 <_dtoa_r+0xe28>
 1003350:	d9000717 	ldw	r4,28(sp)
 1003354:	a80b883a 	mov	r5,r21
 1003358:	1005cec0 	call	1005cec <__mcmp>
 100335c:	d9001617 	ldw	r4,88(sp)
 1003360:	1021883a 	mov	r16,r2
 1003364:	a80b883a 	mov	r5,r21
 1003368:	1005b900 	call	1005b90 <_Bfree>
 100336c:	8000041e 	bne	r16,zero,1003380 <_dtoa_r+0x9b8>
 1003370:	d8801717 	ldw	r2,92(sp)
 1003374:	1000021e 	bne	r2,zero,1003380 <_dtoa_r+0x9b8>
 1003378:	e004c03a 	cmpne	r2,fp,zero
 100337c:	10011726 	beq	r2,zero,10037dc <_dtoa_r+0xe14>
 1003380:	a0010616 	blt	r20,zero,100379c <_dtoa_r+0xdd4>
 1003384:	a000041e 	bne	r20,zero,1003398 <_dtoa_r+0x9d0>
 1003388:	d8c01717 	ldw	r3,92(sp)
 100338c:	1800021e 	bne	r3,zero,1003398 <_dtoa_r+0x9d0>
 1003390:	e004c03a 	cmpne	r2,fp,zero
 1003394:	10010126 	beq	r2,zero,100379c <_dtoa_r+0xdd4>
 1003398:	04023d16 	blt	zero,r16,1003c90 <_dtoa_r+0x12c8>
 100339c:	b5c00005 	stb	r23,0(r22)
 10033a0:	d9800517 	ldw	r6,20(sp)
 10033a4:	d9000f17 	ldw	r4,60(sp)
 10033a8:	b5800044 	addi	r22,r22,1
 10033ac:	3105883a 	add	r2,r6,r4
 10033b0:	b0806526 	beq	r22,r2,1003548 <_dtoa_r+0xb80>
 10033b4:	d9400717 	ldw	r5,28(sp)
 10033b8:	d9001617 	ldw	r4,88(sp)
 10033bc:	01800284 	movi	r6,10
 10033c0:	000f883a 	mov	r7,zero
 10033c4:	10068b00 	call	10068b0 <__multadd>
 10033c8:	d8800715 	stw	r2,28(sp)
 10033cc:	d8800617 	ldw	r2,24(sp)
 10033d0:	14c10c26 	beq	r2,r19,1003804 <_dtoa_r+0xe3c>
 10033d4:	d9400617 	ldw	r5,24(sp)
 10033d8:	d9001617 	ldw	r4,88(sp)
 10033dc:	01800284 	movi	r6,10
 10033e0:	000f883a 	mov	r7,zero
 10033e4:	10068b00 	call	10068b0 <__multadd>
 10033e8:	d9001617 	ldw	r4,88(sp)
 10033ec:	980b883a 	mov	r5,r19
 10033f0:	01800284 	movi	r6,10
 10033f4:	000f883a 	mov	r7,zero
 10033f8:	d8800615 	stw	r2,24(sp)
 10033fc:	10068b00 	call	10068b0 <__multadd>
 1003400:	1027883a 	mov	r19,r2
 1003404:	003fc206 	br	1003310 <_dtoa_r+0x948>
 1003408:	2445c83a 	sub	r2,r4,r17
 100340c:	a088983a 	sll	r4,r20,r2
 1003410:	003e4b06 	br	1002d40 <_dtoa_r+0x378>
 1003414:	01bfffc4 	movi	r6,-1
 1003418:	00800044 	movi	r2,1
 100341c:	d9800e15 	stw	r6,56(sp)
 1003420:	d9800f15 	stw	r6,60(sp)
 1003424:	d8800b15 	stw	r2,44(sp)
 1003428:	d8c01617 	ldw	r3,88(sp)
 100342c:	008005c4 	movi	r2,23
 1003430:	18001115 	stw	zero,68(r3)
 1003434:	1580082e 	bgeu	r2,r22,1003458 <_dtoa_r+0xa90>
 1003438:	00c00104 	movi	r3,4
 100343c:	0009883a 	mov	r4,zero
 1003440:	18c7883a 	add	r3,r3,r3
 1003444:	18800504 	addi	r2,r3,20
 1003448:	21000044 	addi	r4,r4,1
 100344c:	b0bffc2e 	bgeu	r22,r2,1003440 <_dtoa_r+0xa78>
 1003450:	d9801617 	ldw	r6,88(sp)
 1003454:	31001115 	stw	r4,68(r6)
 1003458:	dc000f17 	ldw	r16,60(sp)
 100345c:	003e4b06 	br	1002d8c <_dtoa_r+0x3c4>
 1003460:	d9801717 	ldw	r6,92(sp)
 1003464:	0023883a 	mov	r17,zero
 1003468:	31bfff04 	addi	r6,r6,-4
 100346c:	d9801715 	stw	r6,92(sp)
 1003470:	003df806 	br	1002c54 <_dtoa_r+0x28c>
 1003474:	00800804 	movi	r2,32
 1003478:	10c9c83a 	sub	r4,r2,r3
 100347c:	00c00104 	movi	r3,4
 1003480:	19005a16 	blt	r3,r4,10035ec <_dtoa_r+0xc24>
 1003484:	008000c4 	movi	r2,3
 1003488:	113f7e16 	blt	r2,r4,1003284 <_dtoa_r+0x8bc>
 100348c:	20800704 	addi	r2,r4,28
 1003490:	003f7506 	br	1003268 <_dtoa_r+0x8a0>
 1003494:	d9801717 	ldw	r6,92(sp)
 1003498:	00800044 	movi	r2,1
 100349c:	1180a10e 	bge	r2,r6,1003724 <_dtoa_r+0xd5c>
 10034a0:	d9800f17 	ldw	r6,60(sp)
 10034a4:	d8c01017 	ldw	r3,64(sp)
 10034a8:	30bfffc4 	addi	r2,r6,-1
 10034ac:	1881c616 	blt	r3,r2,1003bc8 <_dtoa_r+0x1200>
 10034b0:	18a5c83a 	sub	r18,r3,r2
 10034b4:	d8800f17 	ldw	r2,60(sp)
 10034b8:	10026216 	blt	r2,zero,1003e44 <_dtoa_r+0x147c>
 10034bc:	dc001117 	ldw	r16,68(sp)
 10034c0:	1007883a 	mov	r3,r2
 10034c4:	d9800a17 	ldw	r6,40(sp)
 10034c8:	d8801117 	ldw	r2,68(sp)
 10034cc:	d9001617 	ldw	r4,88(sp)
 10034d0:	30cd883a 	add	r6,r6,r3
 10034d4:	10c5883a 	add	r2,r2,r3
 10034d8:	01400044 	movi	r5,1
 10034dc:	d9800a15 	stw	r6,40(sp)
 10034e0:	d8801115 	stw	r2,68(sp)
 10034e4:	10068740 	call	1006874 <__i2b>
 10034e8:	1027883a 	mov	r19,r2
 10034ec:	003f2506 	br	1003184 <_dtoa_r+0x7bc>
 10034f0:	00c04074 	movhi	r3,257
 10034f4:	18d7d304 	addi	r3,r3,24396
 10034f8:	003d6706 	br	1002a98 <_dtoa_r+0xd0>
 10034fc:	dd800517 	ldw	r22,20(sp)
 1003500:	04000044 	movi	r16,1
 1003504:	00000706 	br	1003524 <_dtoa_r+0xb5c>
 1003508:	d9400717 	ldw	r5,28(sp)
 100350c:	d9001617 	ldw	r4,88(sp)
 1003510:	01800284 	movi	r6,10
 1003514:	000f883a 	mov	r7,zero
 1003518:	10068b00 	call	10068b0 <__multadd>
 100351c:	d8800715 	stw	r2,28(sp)
 1003520:	84000044 	addi	r16,r16,1
 1003524:	d9000717 	ldw	r4,28(sp)
 1003528:	900b883a 	mov	r5,r18
 100352c:	10027840 	call	1002784 <quorem>
 1003530:	15c00c04 	addi	r23,r2,48
 1003534:	b5c00005 	stb	r23,0(r22)
 1003538:	d8c00f17 	ldw	r3,60(sp)
 100353c:	b5800044 	addi	r22,r22,1
 1003540:	80fff116 	blt	r16,r3,1003508 <_dtoa_r+0xb40>
 1003544:	d8000615 	stw	zero,24(sp)
 1003548:	d9400717 	ldw	r5,28(sp)
 100354c:	d9001617 	ldw	r4,88(sp)
 1003550:	01800044 	movi	r6,1
 1003554:	10064d40 	call	10064d4 <__lshift>
 1003558:	1009883a 	mov	r4,r2
 100355c:	900b883a 	mov	r5,r18
 1003560:	d8800715 	stw	r2,28(sp)
 1003564:	1005cec0 	call	1005cec <__mcmp>
 1003568:	00803c0e 	bge	zero,r2,100365c <_dtoa_r+0xc94>
 100356c:	b009883a 	mov	r4,r22
 1003570:	213fffc4 	addi	r4,r4,-1
 1003574:	21400003 	ldbu	r5,0(r4)
 1003578:	00800e44 	movi	r2,57
 100357c:	28c03fcc 	andi	r3,r5,255
 1003580:	18c0201c 	xori	r3,r3,128
 1003584:	18ffe004 	addi	r3,r3,-128
 1003588:	1881981e 	bne	r3,r2,1003bec <_dtoa_r+0x1224>
 100358c:	d9800517 	ldw	r6,20(sp)
 1003590:	21bff71e 	bne	r4,r6,1003570 <_dtoa_r+0xba8>
 1003594:	d8800d17 	ldw	r2,52(sp)
 1003598:	37000044 	addi	fp,r6,1
 100359c:	10800044 	addi	r2,r2,1
 10035a0:	d8800d15 	stw	r2,52(sp)
 10035a4:	00800c44 	movi	r2,49
 10035a8:	30800005 	stb	r2,0(r6)
 10035ac:	d9001617 	ldw	r4,88(sp)
 10035b0:	900b883a 	mov	r5,r18
 10035b4:	1005b900 	call	1005b90 <_Bfree>
 10035b8:	983ecd26 	beq	r19,zero,10030f0 <_dtoa_r+0x728>
 10035bc:	d8c00617 	ldw	r3,24(sp)
 10035c0:	18000426 	beq	r3,zero,10035d4 <_dtoa_r+0xc0c>
 10035c4:	1cc00326 	beq	r3,r19,10035d4 <_dtoa_r+0xc0c>
 10035c8:	d9001617 	ldw	r4,88(sp)
 10035cc:	180b883a 	mov	r5,r3
 10035d0:	1005b900 	call	1005b90 <_Bfree>
 10035d4:	d9001617 	ldw	r4,88(sp)
 10035d8:	980b883a 	mov	r5,r19
 10035dc:	1005b900 	call	1005b90 <_Bfree>
 10035e0:	003ec306 	br	10030f0 <_dtoa_r+0x728>
 10035e4:	1805883a 	mov	r2,r3
 10035e8:	003eeb06 	br	1003198 <_dtoa_r+0x7d0>
 10035ec:	d9800a17 	ldw	r6,40(sp)
 10035f0:	d8c01117 	ldw	r3,68(sp)
 10035f4:	20bfff04 	addi	r2,r4,-4
 10035f8:	308d883a 	add	r6,r6,r2
 10035fc:	1887883a 	add	r3,r3,r2
 1003600:	80a1883a 	add	r16,r16,r2
 1003604:	d9800a15 	stw	r6,40(sp)
 1003608:	d8c01115 	stw	r3,68(sp)
 100360c:	003f1d06 	br	1003284 <_dtoa_r+0x8bc>
 1003610:	a03f0c1e 	bne	r20,zero,1003244 <_dtoa_r+0x87c>
 1003614:	00800434 	movhi	r2,16
 1003618:	10bfffc4 	addi	r2,r2,-1
 100361c:	a884703a 	and	r2,r21,r2
 1003620:	103f081e 	bne	r2,zero,1003244 <_dtoa_r+0x87c>
 1003624:	a89ffc2c 	andhi	r2,r21,32752
 1003628:	103f0626 	beq	r2,zero,1003244 <_dtoa_r+0x87c>
 100362c:	d8c01117 	ldw	r3,68(sp)
 1003630:	d9000a17 	ldw	r4,40(sp)
 1003634:	18c00044 	addi	r3,r3,1
 1003638:	21000044 	addi	r4,r4,1
 100363c:	d8c01115 	stw	r3,68(sp)
 1003640:	d9000a15 	stw	r4,40(sp)
 1003644:	003f0006 	br	1003248 <_dtoa_r+0x880>
 1003648:	d9400717 	ldw	r5,28(sp)
 100364c:	d9001617 	ldw	r4,88(sp)
 1003650:	10069dc0 	call	10069dc <__pow5mult>
 1003654:	d8800715 	stw	r2,28(sp)
 1003658:	003eed06 	br	1003210 <_dtoa_r+0x848>
 100365c:	1000021e 	bne	r2,zero,1003668 <_dtoa_r+0xca0>
 1003660:	b880004c 	andi	r2,r23,1
 1003664:	103fc11e 	bne	r2,zero,100356c <_dtoa_r+0xba4>
 1003668:	b5bfffc4 	addi	r22,r22,-1
 100366c:	b0c00007 	ldb	r3,0(r22)
 1003670:	00800c04 	movi	r2,48
 1003674:	18bffc26 	beq	r3,r2,1003668 <_dtoa_r+0xca0>
 1003678:	b7000044 	addi	fp,r22,1
 100367c:	003fcb06 	br	10035ac <_dtoa_r+0xbe4>
 1003680:	d9800d17 	ldw	r6,52(sp)
 1003684:	018fc83a 	sub	r7,zero,r6
 1003688:	3801f726 	beq	r7,zero,1003e68 <_dtoa_r+0x14a0>
 100368c:	398003cc 	andi	r6,r7,15
 1003690:	300c90fa 	slli	r6,r6,3
 1003694:	01404074 	movhi	r5,257
 1003698:	2957f104 	addi	r5,r5,24516
 100369c:	d9001217 	ldw	r4,72(sp)
 10036a0:	314d883a 	add	r6,r6,r5
 10036a4:	30c00117 	ldw	r3,4(r6)
 10036a8:	30800017 	ldw	r2,0(r6)
 10036ac:	d9401317 	ldw	r5,76(sp)
 10036b0:	3821d13a 	srai	r16,r7,4
 10036b4:	100d883a 	mov	r6,r2
 10036b8:	180f883a 	mov	r7,r3
 10036bc:	1008b700 	call	1008b70 <__muldf3>
 10036c0:	1011883a 	mov	r8,r2
 10036c4:	1813883a 	mov	r9,r3
 10036c8:	1029883a 	mov	r20,r2
 10036cc:	182b883a 	mov	r21,r3
 10036d0:	8001e526 	beq	r16,zero,1003e68 <_dtoa_r+0x14a0>
 10036d4:	05800084 	movi	r22,2
 10036d8:	04404074 	movhi	r17,257
 10036dc:	8c582304 	addi	r17,r17,24716
 10036e0:	8080004c 	andi	r2,r16,1
 10036e4:	1005003a 	cmpeq	r2,r2,zero
 10036e8:	1000081e 	bne	r2,zero,100370c <_dtoa_r+0xd44>
 10036ec:	89800017 	ldw	r6,0(r17)
 10036f0:	89c00117 	ldw	r7,4(r17)
 10036f4:	480b883a 	mov	r5,r9
 10036f8:	4009883a 	mov	r4,r8
 10036fc:	1008b700 	call	1008b70 <__muldf3>
 1003700:	1011883a 	mov	r8,r2
 1003704:	b5800044 	addi	r22,r22,1
 1003708:	1813883a 	mov	r9,r3
 100370c:	8021d07a 	srai	r16,r16,1
 1003710:	8c400204 	addi	r17,r17,8
 1003714:	803ff21e 	bne	r16,zero,10036e0 <_dtoa_r+0xd18>
 1003718:	4029883a 	mov	r20,r8
 100371c:	482b883a 	mov	r21,r9
 1003720:	003dca06 	br	1002e4c <_dtoa_r+0x484>
 1003724:	d9000817 	ldw	r4,32(sp)
 1003728:	2005003a 	cmpeq	r2,r4,zero
 100372c:	1001f61e 	bne	r2,zero,1003f08 <_dtoa_r+0x1540>
 1003730:	dc001117 	ldw	r16,68(sp)
 1003734:	dc801017 	ldw	r18,64(sp)
 1003738:	18c10cc4 	addi	r3,r3,1075
 100373c:	003f6106 	br	10034c4 <_dtoa_r+0xafc>
 1003740:	d8000b15 	stw	zero,44(sp)
 1003744:	d9802617 	ldw	r6,152(sp)
 1003748:	d8c00d17 	ldw	r3,52(sp)
 100374c:	30800044 	addi	r2,r6,1
 1003750:	18ad883a 	add	r22,r3,r2
 1003754:	b13fffc4 	addi	r4,r22,-1
 1003758:	d9000e15 	stw	r4,56(sp)
 100375c:	0581f60e 	bge	zero,r22,1003f38 <_dtoa_r+0x1570>
 1003760:	dd800f15 	stw	r22,60(sp)
 1003764:	003f3006 	br	1003428 <_dtoa_r+0xa60>
 1003768:	d8000b15 	stw	zero,44(sp)
 100376c:	d9002617 	ldw	r4,152(sp)
 1003770:	0101eb0e 	bge	zero,r4,1003f20 <_dtoa_r+0x1558>
 1003774:	202d883a 	mov	r22,r4
 1003778:	d9000e15 	stw	r4,56(sp)
 100377c:	d9000f15 	stw	r4,60(sp)
 1003780:	003f2906 	br	1003428 <_dtoa_r+0xa60>
 1003784:	01800044 	movi	r6,1
 1003788:	d9800b15 	stw	r6,44(sp)
 100378c:	003ff706 	br	100376c <_dtoa_r+0xda4>
 1003790:	01000044 	movi	r4,1
 1003794:	d9000b15 	stw	r4,44(sp)
 1003798:	003fea06 	br	1003744 <_dtoa_r+0xd7c>
 100379c:	04000c0e 	bge	zero,r16,10037d0 <_dtoa_r+0xe08>
 10037a0:	d9400717 	ldw	r5,28(sp)
 10037a4:	d9001617 	ldw	r4,88(sp)
 10037a8:	01800044 	movi	r6,1
 10037ac:	10064d40 	call	10064d4 <__lshift>
 10037b0:	1009883a 	mov	r4,r2
 10037b4:	900b883a 	mov	r5,r18
 10037b8:	d8800715 	stw	r2,28(sp)
 10037bc:	1005cec0 	call	1005cec <__mcmp>
 10037c0:	0081e00e 	bge	zero,r2,1003f44 <_dtoa_r+0x157c>
 10037c4:	bdc00044 	addi	r23,r23,1
 10037c8:	00800e84 	movi	r2,58
 10037cc:	b881a226 	beq	r23,r2,1003e58 <_dtoa_r+0x1490>
 10037d0:	b7000044 	addi	fp,r22,1
 10037d4:	b5c00005 	stb	r23,0(r22)
 10037d8:	003f7406 	br	10035ac <_dtoa_r+0xbe4>
 10037dc:	00800e44 	movi	r2,57
 10037e0:	b8819d26 	beq	r23,r2,1003e58 <_dtoa_r+0x1490>
 10037e4:	053ffa0e 	bge	zero,r20,10037d0 <_dtoa_r+0xe08>
 10037e8:	8dc00c44 	addi	r23,r17,49
 10037ec:	003ff806 	br	10037d0 <_dtoa_r+0xe08>
 10037f0:	d9001617 	ldw	r4,88(sp)
 10037f4:	a80b883a 	mov	r5,r21
 10037f8:	04000044 	movi	r16,1
 10037fc:	1005b900 	call	1005b90 <_Bfree>
 1003800:	003edf06 	br	1003380 <_dtoa_r+0x9b8>
 1003804:	d9001617 	ldw	r4,88(sp)
 1003808:	980b883a 	mov	r5,r19
 100380c:	01800284 	movi	r6,10
 1003810:	000f883a 	mov	r7,zero
 1003814:	10068b00 	call	10068b0 <__multadd>
 1003818:	1027883a 	mov	r19,r2
 100381c:	d8800615 	stw	r2,24(sp)
 1003820:	003ebb06 	br	1003310 <_dtoa_r+0x948>
 1003824:	d9801117 	ldw	r6,68(sp)
 1003828:	d8800d17 	ldw	r2,52(sp)
 100382c:	d8000915 	stw	zero,36(sp)
 1003830:	308dc83a 	sub	r6,r6,r2
 1003834:	0087c83a 	sub	r3,zero,r2
 1003838:	d9801115 	stw	r6,68(sp)
 100383c:	d8c01015 	stw	r3,64(sp)
 1003840:	003cfe06 	br	1002c3c <_dtoa_r+0x274>
 1003844:	018dc83a 	sub	r6,zero,r6
 1003848:	d9801115 	stw	r6,68(sp)
 100384c:	d8000a15 	stw	zero,40(sp)
 1003850:	003cf306 	br	1002c20 <_dtoa_r+0x258>
 1003854:	d9000d17 	ldw	r4,52(sp)
 1003858:	10094340 	call	1009434 <__floatsidf>
 100385c:	880b883a 	mov	r5,r17
 1003860:	8009883a 	mov	r4,r16
 1003864:	180f883a 	mov	r7,r3
 1003868:	100d883a 	mov	r6,r2
 100386c:	10092140 	call	1009214 <__nedf2>
 1003870:	103ce126 	beq	r2,zero,1002bf8 <_dtoa_r+0x230>
 1003874:	d9800d17 	ldw	r6,52(sp)
 1003878:	31bfffc4 	addi	r6,r6,-1
 100387c:	d9800d15 	stw	r6,52(sp)
 1003880:	003cdd06 	br	1002bf8 <_dtoa_r+0x230>
 1003884:	d9000717 	ldw	r4,28(sp)
 1003888:	900b883a 	mov	r5,r18
 100388c:	1005cec0 	call	1005cec <__mcmp>
 1003890:	103e8d0e 	bge	r2,zero,10032c8 <_dtoa_r+0x900>
 1003894:	d9400717 	ldw	r5,28(sp)
 1003898:	d9001617 	ldw	r4,88(sp)
 100389c:	01800284 	movi	r6,10
 10038a0:	000f883a 	mov	r7,zero
 10038a4:	10068b00 	call	10068b0 <__multadd>
 10038a8:	d9800d17 	ldw	r6,52(sp)
 10038ac:	d8800715 	stw	r2,28(sp)
 10038b0:	31bfffc4 	addi	r6,r6,-1
 10038b4:	d9800d15 	stw	r6,52(sp)
 10038b8:	b001a71e 	bne	r22,zero,1003f58 <_dtoa_r+0x1590>
 10038bc:	d8800e17 	ldw	r2,56(sp)
 10038c0:	d8800f15 	stw	r2,60(sp)
 10038c4:	003e8006 	br	10032c8 <_dtoa_r+0x900>
 10038c8:	90800417 	ldw	r2,16(r18)
 10038cc:	1085883a 	add	r2,r2,r2
 10038d0:	1085883a 	add	r2,r2,r2
 10038d4:	1485883a 	add	r2,r2,r18
 10038d8:	11000417 	ldw	r4,16(r2)
 10038dc:	1005bb80 	call	1005bb8 <__hi0bits>
 10038e0:	00c00804 	movi	r3,32
 10038e4:	1887c83a 	sub	r3,r3,r2
 10038e8:	003e5a06 	br	1003254 <_dtoa_r+0x88c>
 10038ec:	d9400717 	ldw	r5,28(sp)
 10038f0:	d9801017 	ldw	r6,64(sp)
 10038f4:	d9001617 	ldw	r4,88(sp)
 10038f8:	10069dc0 	call	10069dc <__pow5mult>
 10038fc:	d8800715 	stw	r2,28(sp)
 1003900:	003e4306 	br	1003210 <_dtoa_r+0x848>
 1003904:	d9800f17 	ldw	r6,60(sp)
 1003908:	d8800d17 	ldw	r2,52(sp)
 100390c:	d9800315 	stw	r6,12(sp)
 1003910:	d8800415 	stw	r2,16(sp)
 1003914:	d8c00b17 	ldw	r3,44(sp)
 1003918:	1805003a 	cmpeq	r2,r3,zero
 100391c:	1000e21e 	bne	r2,zero,1003ca8 <_dtoa_r+0x12e0>
 1003920:	d9000317 	ldw	r4,12(sp)
 1003924:	0005883a 	mov	r2,zero
 1003928:	00cff834 	movhi	r3,16352
 100392c:	200c90fa 	slli	r6,r4,3
 1003930:	01004074 	movhi	r4,257
 1003934:	2117f104 	addi	r4,r4,24516
 1003938:	180b883a 	mov	r5,r3
 100393c:	310d883a 	add	r6,r6,r4
 1003940:	327fff17 	ldw	r9,-4(r6)
 1003944:	323ffe17 	ldw	r8,-8(r6)
 1003948:	1009883a 	mov	r4,r2
 100394c:	480f883a 	mov	r7,r9
 1003950:	400d883a 	mov	r6,r8
 1003954:	1008f340 	call	1008f34 <__divdf3>
 1003958:	180b883a 	mov	r5,r3
 100395c:	b00d883a 	mov	r6,r22
 1003960:	b80f883a 	mov	r7,r23
 1003964:	1009883a 	mov	r4,r2
 1003968:	1008a7c0 	call	1008a7c <__subdf3>
 100396c:	a80b883a 	mov	r5,r21
 1003970:	a009883a 	mov	r4,r20
 1003974:	d8c01915 	stw	r3,100(sp)
 1003978:	d8801815 	stw	r2,96(sp)
 100397c:	100952c0 	call	100952c <__fixdfsi>
 1003980:	1009883a 	mov	r4,r2
 1003984:	1027883a 	mov	r19,r2
 1003988:	10094340 	call	1009434 <__floatsidf>
 100398c:	a80b883a 	mov	r5,r21
 1003990:	a009883a 	mov	r4,r20
 1003994:	180f883a 	mov	r7,r3
 1003998:	100d883a 	mov	r6,r2
 100399c:	1008a7c0 	call	1008a7c <__subdf3>
 10039a0:	d9801817 	ldw	r6,96(sp)
 10039a4:	1823883a 	mov	r17,r3
 10039a8:	d8801415 	stw	r2,80(sp)
 10039ac:	302d883a 	mov	r22,r6
 10039b0:	d9800517 	ldw	r6,20(sp)
 10039b4:	9cc00c04 	addi	r19,r19,48
 10039b8:	dc401515 	stw	r17,84(sp)
 10039bc:	d8c01917 	ldw	r3,100(sp)
 10039c0:	34c00005 	stb	r19,0(r6)
 10039c4:	d8800517 	ldw	r2,20(sp)
 10039c8:	d9401917 	ldw	r5,100(sp)
 10039cc:	d9801417 	ldw	r6,80(sp)
 10039d0:	b009883a 	mov	r4,r22
 10039d4:	880f883a 	mov	r7,r17
 10039d8:	182f883a 	mov	r23,r3
 10039dc:	17000044 	addi	fp,r2,1
 10039e0:	100929c0 	call	100929c <__gtdf2>
 10039e4:	00804e16 	blt	zero,r2,1003b20 <_dtoa_r+0x1158>
 10039e8:	d9801417 	ldw	r6,80(sp)
 10039ec:	0005883a 	mov	r2,zero
 10039f0:	00cffc34 	movhi	r3,16368
 10039f4:	180b883a 	mov	r5,r3
 10039f8:	880f883a 	mov	r7,r17
 10039fc:	1009883a 	mov	r4,r2
 1003a00:	1008a7c0 	call	1008a7c <__subdf3>
 1003a04:	d9401917 	ldw	r5,100(sp)
 1003a08:	180f883a 	mov	r7,r3
 1003a0c:	b009883a 	mov	r4,r22
 1003a10:	100d883a 	mov	r6,r2
 1003a14:	100929c0 	call	100929c <__gtdf2>
 1003a18:	00bda216 	blt	zero,r2,10030a4 <_dtoa_r+0x6dc>
 1003a1c:	d8c00317 	ldw	r3,12(sp)
 1003a20:	00800044 	movi	r2,1
 1003a24:	10c01216 	blt	r2,r3,1003a70 <_dtoa_r+0x10a8>
 1003a28:	003d4506 	br	1002f40 <_dtoa_r+0x578>
 1003a2c:	d9801417 	ldw	r6,80(sp)
 1003a30:	0005883a 	mov	r2,zero
 1003a34:	00cffc34 	movhi	r3,16368
 1003a38:	180b883a 	mov	r5,r3
 1003a3c:	880f883a 	mov	r7,r17
 1003a40:	1009883a 	mov	r4,r2
 1003a44:	1008a7c0 	call	1008a7c <__subdf3>
 1003a48:	d9c01b17 	ldw	r7,108(sp)
 1003a4c:	180b883a 	mov	r5,r3
 1003a50:	1009883a 	mov	r4,r2
 1003a54:	b00d883a 	mov	r6,r22
 1003a58:	10093ac0 	call	10093ac <__ltdf2>
 1003a5c:	103d9116 	blt	r2,zero,10030a4 <_dtoa_r+0x6dc>
 1003a60:	d9800517 	ldw	r6,20(sp)
 1003a64:	d9000317 	ldw	r4,12(sp)
 1003a68:	3105883a 	add	r2,r6,r4
 1003a6c:	e0bd3426 	beq	fp,r2,1002f40 <_dtoa_r+0x578>
 1003a70:	04500934 	movhi	r17,16420
 1003a74:	0021883a 	mov	r16,zero
 1003a78:	b80b883a 	mov	r5,r23
 1003a7c:	b009883a 	mov	r4,r22
 1003a80:	800d883a 	mov	r6,r16
 1003a84:	880f883a 	mov	r7,r17
 1003a88:	1008b700 	call	1008b70 <__muldf3>
 1003a8c:	d9401517 	ldw	r5,84(sp)
 1003a90:	d9001417 	ldw	r4,80(sp)
 1003a94:	880f883a 	mov	r7,r17
 1003a98:	000d883a 	mov	r6,zero
 1003a9c:	d8801a15 	stw	r2,104(sp)
 1003aa0:	d8c01b15 	stw	r3,108(sp)
 1003aa4:	1008b700 	call	1008b70 <__muldf3>
 1003aa8:	180b883a 	mov	r5,r3
 1003aac:	1009883a 	mov	r4,r2
 1003ab0:	1823883a 	mov	r17,r3
 1003ab4:	1021883a 	mov	r16,r2
 1003ab8:	100952c0 	call	100952c <__fixdfsi>
 1003abc:	1009883a 	mov	r4,r2
 1003ac0:	102b883a 	mov	r21,r2
 1003ac4:	10094340 	call	1009434 <__floatsidf>
 1003ac8:	880b883a 	mov	r5,r17
 1003acc:	8009883a 	mov	r4,r16
 1003ad0:	180f883a 	mov	r7,r3
 1003ad4:	100d883a 	mov	r6,r2
 1003ad8:	1008a7c0 	call	1008a7c <__subdf3>
 1003adc:	1021883a 	mov	r16,r2
 1003ae0:	d9001b17 	ldw	r4,108(sp)
 1003ae4:	1823883a 	mov	r17,r3
 1003ae8:	dc001415 	stw	r16,80(sp)
 1003aec:	ad400c04 	addi	r21,r21,48
 1003af0:	dc401515 	stw	r17,84(sp)
 1003af4:	d8801a17 	ldw	r2,104(sp)
 1003af8:	e5400005 	stb	r21,0(fp)
 1003afc:	202f883a 	mov	r23,r4
 1003b00:	d9c01b17 	ldw	r7,108(sp)
 1003b04:	d9001417 	ldw	r4,80(sp)
 1003b08:	880b883a 	mov	r5,r17
 1003b0c:	100d883a 	mov	r6,r2
 1003b10:	102d883a 	mov	r22,r2
 1003b14:	e7000044 	addi	fp,fp,1
 1003b18:	10093ac0 	call	10093ac <__ltdf2>
 1003b1c:	103fc30e 	bge	r2,zero,1003a2c <_dtoa_r+0x1064>
 1003b20:	d9000417 	ldw	r4,16(sp)
 1003b24:	d9000d15 	stw	r4,52(sp)
 1003b28:	003d7106 	br	10030f0 <_dtoa_r+0x728>
 1003b2c:	d9801717 	ldw	r6,92(sp)
 1003b30:	00800084 	movi	r2,2
 1003b34:	11bde60e 	bge	r2,r6,10032d0 <_dtoa_r+0x908>
 1003b38:	203cfb1e 	bne	r4,zero,1002f28 <_dtoa_r+0x560>
 1003b3c:	d9001617 	ldw	r4,88(sp)
 1003b40:	900b883a 	mov	r5,r18
 1003b44:	01800144 	movi	r6,5
 1003b48:	000f883a 	mov	r7,zero
 1003b4c:	10068b00 	call	10068b0 <__multadd>
 1003b50:	d9000717 	ldw	r4,28(sp)
 1003b54:	100b883a 	mov	r5,r2
 1003b58:	1025883a 	mov	r18,r2
 1003b5c:	1005cec0 	call	1005cec <__mcmp>
 1003b60:	00bcf10e 	bge	zero,r2,1002f28 <_dtoa_r+0x560>
 1003b64:	d8c00d17 	ldw	r3,52(sp)
 1003b68:	d9000517 	ldw	r4,20(sp)
 1003b6c:	d8000615 	stw	zero,24(sp)
 1003b70:	18c00044 	addi	r3,r3,1
 1003b74:	d8c00d15 	stw	r3,52(sp)
 1003b78:	00800c44 	movi	r2,49
 1003b7c:	27000044 	addi	fp,r4,1
 1003b80:	20800005 	stb	r2,0(r4)
 1003b84:	003e8906 	br	10035ac <_dtoa_r+0xbe4>
 1003b88:	d8c00517 	ldw	r3,20(sp)
 1003b8c:	003bc206 	br	1002a98 <_dtoa_r+0xd0>
 1003b90:	01804074 	movhi	r6,257
 1003b94:	31982304 	addi	r6,r6,24716
 1003b98:	30c00917 	ldw	r3,36(r6)
 1003b9c:	30800817 	ldw	r2,32(r6)
 1003ba0:	d9001217 	ldw	r4,72(sp)
 1003ba4:	d9401317 	ldw	r5,76(sp)
 1003ba8:	180f883a 	mov	r7,r3
 1003bac:	100d883a 	mov	r6,r2
 1003bb0:	1008f340 	call	1008f34 <__divdf3>
 1003bb4:	948003cc 	andi	r18,r18,15
 1003bb8:	058000c4 	movi	r22,3
 1003bbc:	1029883a 	mov	r20,r2
 1003bc0:	182b883a 	mov	r21,r3
 1003bc4:	003c8906 	br	1002dec <_dtoa_r+0x424>
 1003bc8:	d9001017 	ldw	r4,64(sp)
 1003bcc:	d9800917 	ldw	r6,36(sp)
 1003bd0:	0025883a 	mov	r18,zero
 1003bd4:	1105c83a 	sub	r2,r2,r4
 1003bd8:	2089883a 	add	r4,r4,r2
 1003bdc:	308d883a 	add	r6,r6,r2
 1003be0:	d9001015 	stw	r4,64(sp)
 1003be4:	d9800915 	stw	r6,36(sp)
 1003be8:	003e3206 	br	10034b4 <_dtoa_r+0xaec>
 1003bec:	28800044 	addi	r2,r5,1
 1003bf0:	27000044 	addi	fp,r4,1
 1003bf4:	20800005 	stb	r2,0(r4)
 1003bf8:	003e6c06 	br	10035ac <_dtoa_r+0xbe4>
 1003bfc:	d8800f17 	ldw	r2,60(sp)
 1003c00:	00bce016 	blt	zero,r2,1002f84 <_dtoa_r+0x5bc>
 1003c04:	d9800f17 	ldw	r6,60(sp)
 1003c08:	303cc51e 	bne	r6,zero,1002f20 <_dtoa_r+0x558>
 1003c0c:	0005883a 	mov	r2,zero
 1003c10:	00d00534 	movhi	r3,16404
 1003c14:	980b883a 	mov	r5,r19
 1003c18:	180f883a 	mov	r7,r3
 1003c1c:	9009883a 	mov	r4,r18
 1003c20:	100d883a 	mov	r6,r2
 1003c24:	1008b700 	call	1008b70 <__muldf3>
 1003c28:	180b883a 	mov	r5,r3
 1003c2c:	a80f883a 	mov	r7,r21
 1003c30:	1009883a 	mov	r4,r2
 1003c34:	a00d883a 	mov	r6,r20
 1003c38:	10093240 	call	1009324 <__gedf2>
 1003c3c:	103cb80e 	bge	r2,zero,1002f20 <_dtoa_r+0x558>
 1003c40:	0027883a 	mov	r19,zero
 1003c44:	0025883a 	mov	r18,zero
 1003c48:	003fc606 	br	1003b64 <_dtoa_r+0x119c>
 1003c4c:	99400117 	ldw	r5,4(r19)
 1003c50:	d9001617 	ldw	r4,88(sp)
 1003c54:	10061100 	call	1006110 <_Balloc>
 1003c58:	99800417 	ldw	r6,16(r19)
 1003c5c:	11000304 	addi	r4,r2,12
 1003c60:	99400304 	addi	r5,r19,12
 1003c64:	318d883a 	add	r6,r6,r6
 1003c68:	318d883a 	add	r6,r6,r6
 1003c6c:	31800204 	addi	r6,r6,8
 1003c70:	1023883a 	mov	r17,r2
 1003c74:	10059780 	call	1005978 <memcpy>
 1003c78:	d9001617 	ldw	r4,88(sp)
 1003c7c:	880b883a 	mov	r5,r17
 1003c80:	01800044 	movi	r6,1
 1003c84:	10064d40 	call	10064d4 <__lshift>
 1003c88:	100b883a 	mov	r5,r2
 1003c8c:	003d9c06 	br	1003300 <_dtoa_r+0x938>
 1003c90:	00800e44 	movi	r2,57
 1003c94:	b8807026 	beq	r23,r2,1003e58 <_dtoa_r+0x1490>
 1003c98:	b8800044 	addi	r2,r23,1
 1003c9c:	b7000044 	addi	fp,r22,1
 1003ca0:	b0800005 	stb	r2,0(r22)
 1003ca4:	003e4106 	br	10035ac <_dtoa_r+0xbe4>
 1003ca8:	d8800317 	ldw	r2,12(sp)
 1003cac:	01804074 	movhi	r6,257
 1003cb0:	3197f104 	addi	r6,r6,24516
 1003cb4:	b009883a 	mov	r4,r22
 1003cb8:	100e90fa 	slli	r7,r2,3
 1003cbc:	b80b883a 	mov	r5,r23
 1003cc0:	398f883a 	add	r7,r7,r6
 1003cc4:	38bffe17 	ldw	r2,-8(r7)
 1003cc8:	d9800517 	ldw	r6,20(sp)
 1003ccc:	38ffff17 	ldw	r3,-4(r7)
 1003cd0:	37000044 	addi	fp,r6,1
 1003cd4:	180f883a 	mov	r7,r3
 1003cd8:	100d883a 	mov	r6,r2
 1003cdc:	1008b700 	call	1008b70 <__muldf3>
 1003ce0:	a80b883a 	mov	r5,r21
 1003ce4:	a009883a 	mov	r4,r20
 1003ce8:	182f883a 	mov	r23,r3
 1003cec:	102d883a 	mov	r22,r2
 1003cf0:	100952c0 	call	100952c <__fixdfsi>
 1003cf4:	1009883a 	mov	r4,r2
 1003cf8:	1027883a 	mov	r19,r2
 1003cfc:	10094340 	call	1009434 <__floatsidf>
 1003d00:	a80b883a 	mov	r5,r21
 1003d04:	a009883a 	mov	r4,r20
 1003d08:	180f883a 	mov	r7,r3
 1003d0c:	100d883a 	mov	r6,r2
 1003d10:	1008a7c0 	call	1008a7c <__subdf3>
 1003d14:	180b883a 	mov	r5,r3
 1003d18:	d8c00517 	ldw	r3,20(sp)
 1003d1c:	9cc00c04 	addi	r19,r19,48
 1003d20:	1009883a 	mov	r4,r2
 1003d24:	1cc00005 	stb	r19,0(r3)
 1003d28:	2021883a 	mov	r16,r4
 1003d2c:	d9000317 	ldw	r4,12(sp)
 1003d30:	00800044 	movi	r2,1
 1003d34:	2823883a 	mov	r17,r5
 1003d38:	20802226 	beq	r4,r2,1003dc4 <_dtoa_r+0x13fc>
 1003d3c:	1029883a 	mov	r20,r2
 1003d40:	0005883a 	mov	r2,zero
 1003d44:	00d00934 	movhi	r3,16420
 1003d48:	180f883a 	mov	r7,r3
 1003d4c:	100d883a 	mov	r6,r2
 1003d50:	880b883a 	mov	r5,r17
 1003d54:	8009883a 	mov	r4,r16
 1003d58:	1008b700 	call	1008b70 <__muldf3>
 1003d5c:	180b883a 	mov	r5,r3
 1003d60:	1009883a 	mov	r4,r2
 1003d64:	1823883a 	mov	r17,r3
 1003d68:	1021883a 	mov	r16,r2
 1003d6c:	100952c0 	call	100952c <__fixdfsi>
 1003d70:	1009883a 	mov	r4,r2
 1003d74:	102b883a 	mov	r21,r2
 1003d78:	10094340 	call	1009434 <__floatsidf>
 1003d7c:	880b883a 	mov	r5,r17
 1003d80:	8009883a 	mov	r4,r16
 1003d84:	180f883a 	mov	r7,r3
 1003d88:	100d883a 	mov	r6,r2
 1003d8c:	1008a7c0 	call	1008a7c <__subdf3>
 1003d90:	180b883a 	mov	r5,r3
 1003d94:	d8c00517 	ldw	r3,20(sp)
 1003d98:	1009883a 	mov	r4,r2
 1003d9c:	ad400c04 	addi	r21,r21,48
 1003da0:	1d05883a 	add	r2,r3,r20
 1003da4:	15400005 	stb	r21,0(r2)
 1003da8:	2021883a 	mov	r16,r4
 1003dac:	d9000317 	ldw	r4,12(sp)
 1003db0:	a5000044 	addi	r20,r20,1
 1003db4:	2823883a 	mov	r17,r5
 1003db8:	a13fe11e 	bne	r20,r4,1003d40 <_dtoa_r+0x1378>
 1003dbc:	e505883a 	add	r2,fp,r20
 1003dc0:	173fffc4 	addi	fp,r2,-1
 1003dc4:	0025883a 	mov	r18,zero
 1003dc8:	04cff834 	movhi	r19,16352
 1003dcc:	b009883a 	mov	r4,r22
 1003dd0:	b80b883a 	mov	r5,r23
 1003dd4:	900d883a 	mov	r6,r18
 1003dd8:	980f883a 	mov	r7,r19
 1003ddc:	1008afc0 	call	1008afc <__adddf3>
 1003de0:	180b883a 	mov	r5,r3
 1003de4:	1009883a 	mov	r4,r2
 1003de8:	800d883a 	mov	r6,r16
 1003dec:	880f883a 	mov	r7,r17
 1003df0:	10093ac0 	call	10093ac <__ltdf2>
 1003df4:	103cab16 	blt	r2,zero,10030a4 <_dtoa_r+0x6dc>
 1003df8:	0009883a 	mov	r4,zero
 1003dfc:	980b883a 	mov	r5,r19
 1003e00:	b80f883a 	mov	r7,r23
 1003e04:	b00d883a 	mov	r6,r22
 1003e08:	1008a7c0 	call	1008a7c <__subdf3>
 1003e0c:	180b883a 	mov	r5,r3
 1003e10:	880f883a 	mov	r7,r17
 1003e14:	1009883a 	mov	r4,r2
 1003e18:	800d883a 	mov	r6,r16
 1003e1c:	100929c0 	call	100929c <__gtdf2>
 1003e20:	00bc470e 	bge	zero,r2,1002f40 <_dtoa_r+0x578>
 1003e24:	00c00c04 	movi	r3,48
 1003e28:	e73fffc4 	addi	fp,fp,-1
 1003e2c:	e0800007 	ldb	r2,0(fp)
 1003e30:	10fffd26 	beq	r2,r3,1003e28 <_dtoa_r+0x1460>
 1003e34:	d9800417 	ldw	r6,16(sp)
 1003e38:	e7000044 	addi	fp,fp,1
 1003e3c:	d9800d15 	stw	r6,52(sp)
 1003e40:	003cab06 	br	10030f0 <_dtoa_r+0x728>
 1003e44:	d8c00f17 	ldw	r3,60(sp)
 1003e48:	d9001117 	ldw	r4,68(sp)
 1003e4c:	20e1c83a 	sub	r16,r4,r3
 1003e50:	0007883a 	mov	r3,zero
 1003e54:	003d9b06 	br	10034c4 <_dtoa_r+0xafc>
 1003e58:	00800e44 	movi	r2,57
 1003e5c:	b0800005 	stb	r2,0(r22)
 1003e60:	b5800044 	addi	r22,r22,1
 1003e64:	003dc106 	br	100356c <_dtoa_r+0xba4>
 1003e68:	05800084 	movi	r22,2
 1003e6c:	003bf706 	br	1002e4c <_dtoa_r+0x484>
 1003e70:	d9000f17 	ldw	r4,60(sp)
 1003e74:	013c000e 	bge	zero,r4,1002e78 <_dtoa_r+0x4b0>
 1003e78:	d9800e17 	ldw	r6,56(sp)
 1003e7c:	01bc300e 	bge	zero,r6,1002f40 <_dtoa_r+0x578>
 1003e80:	0005883a 	mov	r2,zero
 1003e84:	00d00934 	movhi	r3,16420
 1003e88:	a80b883a 	mov	r5,r21
 1003e8c:	180f883a 	mov	r7,r3
 1003e90:	a009883a 	mov	r4,r20
 1003e94:	100d883a 	mov	r6,r2
 1003e98:	1008b700 	call	1008b70 <__muldf3>
 1003e9c:	b1000044 	addi	r4,r22,1
 1003ea0:	1021883a 	mov	r16,r2
 1003ea4:	1823883a 	mov	r17,r3
 1003ea8:	10094340 	call	1009434 <__floatsidf>
 1003eac:	880b883a 	mov	r5,r17
 1003eb0:	8009883a 	mov	r4,r16
 1003eb4:	180f883a 	mov	r7,r3
 1003eb8:	100d883a 	mov	r6,r2
 1003ebc:	1008b700 	call	1008b70 <__muldf3>
 1003ec0:	0011883a 	mov	r8,zero
 1003ec4:	02500734 	movhi	r9,16412
 1003ec8:	180b883a 	mov	r5,r3
 1003ecc:	480f883a 	mov	r7,r9
 1003ed0:	1009883a 	mov	r4,r2
 1003ed4:	400d883a 	mov	r6,r8
 1003ed8:	1008afc0 	call	1008afc <__adddf3>
 1003edc:	102d883a 	mov	r22,r2
 1003ee0:	00bf3034 	movhi	r2,64704
 1003ee4:	10ef883a 	add	r23,r2,r3
 1003ee8:	d8800d17 	ldw	r2,52(sp)
 1003eec:	d8c00e17 	ldw	r3,56(sp)
 1003ef0:	8029883a 	mov	r20,r16
 1003ef4:	10bfffc4 	addi	r2,r2,-1
 1003ef8:	882b883a 	mov	r21,r17
 1003efc:	d8800415 	stw	r2,16(sp)
 1003f00:	d8c00315 	stw	r3,12(sp)
 1003f04:	003e8306 	br	1003914 <_dtoa_r+0xf4c>
 1003f08:	d8800117 	ldw	r2,4(sp)
 1003f0c:	dc001117 	ldw	r16,68(sp)
 1003f10:	dc801017 	ldw	r18,64(sp)
 1003f14:	00c00d84 	movi	r3,54
 1003f18:	1887c83a 	sub	r3,r3,r2
 1003f1c:	003d6906 	br	10034c4 <_dtoa_r+0xafc>
 1003f20:	01800044 	movi	r6,1
 1003f24:	3021883a 	mov	r16,r6
 1003f28:	d9800f15 	stw	r6,60(sp)
 1003f2c:	d9802615 	stw	r6,152(sp)
 1003f30:	d9800e15 	stw	r6,56(sp)
 1003f34:	003b9306 	br	1002d84 <_dtoa_r+0x3bc>
 1003f38:	b021883a 	mov	r16,r22
 1003f3c:	dd800f15 	stw	r22,60(sp)
 1003f40:	003b9006 	br	1002d84 <_dtoa_r+0x3bc>
 1003f44:	103e221e 	bne	r2,zero,10037d0 <_dtoa_r+0xe08>
 1003f48:	b880004c 	andi	r2,r23,1
 1003f4c:	1005003a 	cmpeq	r2,r2,zero
 1003f50:	103e1f1e 	bne	r2,zero,10037d0 <_dtoa_r+0xe08>
 1003f54:	003e1b06 	br	10037c4 <_dtoa_r+0xdfc>
 1003f58:	d9001617 	ldw	r4,88(sp)
 1003f5c:	980b883a 	mov	r5,r19
 1003f60:	01800284 	movi	r6,10
 1003f64:	000f883a 	mov	r7,zero
 1003f68:	10068b00 	call	10068b0 <__multadd>
 1003f6c:	d8c00e17 	ldw	r3,56(sp)
 1003f70:	1027883a 	mov	r19,r2
 1003f74:	d8c00f15 	stw	r3,60(sp)
 1003f78:	003cd306 	br	10032c8 <_dtoa_r+0x900>

01003f7c <_fflush_r>:
 1003f7c:	defffb04 	addi	sp,sp,-20
 1003f80:	dcc00315 	stw	r19,12(sp)
 1003f84:	dc800215 	stw	r18,8(sp)
 1003f88:	dfc00415 	stw	ra,16(sp)
 1003f8c:	dc400115 	stw	r17,4(sp)
 1003f90:	dc000015 	stw	r16,0(sp)
 1003f94:	2027883a 	mov	r19,r4
 1003f98:	2825883a 	mov	r18,r5
 1003f9c:	20000226 	beq	r4,zero,1003fa8 <_fflush_r+0x2c>
 1003fa0:	20800e17 	ldw	r2,56(r4)
 1003fa4:	10005626 	beq	r2,zero,1004100 <_fflush_r+0x184>
 1003fa8:	9100030b 	ldhu	r4,12(r18)
 1003fac:	20ffffcc 	andi	r3,r4,65535
 1003fb0:	18e0001c 	xori	r3,r3,32768
 1003fb4:	18e00004 	addi	r3,r3,-32768
 1003fb8:	1880020c 	andi	r2,r3,8
 1003fbc:	1000261e 	bne	r2,zero,1004058 <_fflush_r+0xdc>
 1003fc0:	90c00117 	ldw	r3,4(r18)
 1003fc4:	20820014 	ori	r2,r4,2048
 1003fc8:	9080030d 	sth	r2,12(r18)
 1003fcc:	1009883a 	mov	r4,r2
 1003fd0:	00c0400e 	bge	zero,r3,10040d4 <_fflush_r+0x158>
 1003fd4:	92000a17 	ldw	r8,40(r18)
 1003fd8:	40004026 	beq	r8,zero,10040dc <_fflush_r+0x160>
 1003fdc:	2084000c 	andi	r2,r4,4096
 1003fe0:	10005326 	beq	r2,zero,1004130 <_fflush_r+0x1b4>
 1003fe4:	94001417 	ldw	r16,80(r18)
 1003fe8:	9080030b 	ldhu	r2,12(r18)
 1003fec:	1080010c 	andi	r2,r2,4
 1003ff0:	1000481e 	bne	r2,zero,1004114 <_fflush_r+0x198>
 1003ff4:	91400717 	ldw	r5,28(r18)
 1003ff8:	9809883a 	mov	r4,r19
 1003ffc:	800d883a 	mov	r6,r16
 1004000:	000f883a 	mov	r7,zero
 1004004:	403ee83a 	callr	r8
 1004008:	8080261e 	bne	r16,r2,10040a4 <_fflush_r+0x128>
 100400c:	9080030b 	ldhu	r2,12(r18)
 1004010:	91000417 	ldw	r4,16(r18)
 1004014:	90000115 	stw	zero,4(r18)
 1004018:	10bdffcc 	andi	r2,r2,63487
 100401c:	10ffffcc 	andi	r3,r2,65535
 1004020:	18c4000c 	andi	r3,r3,4096
 1004024:	9080030d 	sth	r2,12(r18)
 1004028:	91000015 	stw	r4,0(r18)
 100402c:	18002b26 	beq	r3,zero,10040dc <_fflush_r+0x160>
 1004030:	0007883a 	mov	r3,zero
 1004034:	1805883a 	mov	r2,r3
 1004038:	94001415 	stw	r16,80(r18)
 100403c:	dfc00417 	ldw	ra,16(sp)
 1004040:	dcc00317 	ldw	r19,12(sp)
 1004044:	dc800217 	ldw	r18,8(sp)
 1004048:	dc400117 	ldw	r17,4(sp)
 100404c:	dc000017 	ldw	r16,0(sp)
 1004050:	dec00504 	addi	sp,sp,20
 1004054:	f800283a 	ret
 1004058:	94400417 	ldw	r17,16(r18)
 100405c:	88001f26 	beq	r17,zero,10040dc <_fflush_r+0x160>
 1004060:	90800017 	ldw	r2,0(r18)
 1004064:	18c000cc 	andi	r3,r3,3
 1004068:	94400015 	stw	r17,0(r18)
 100406c:	1461c83a 	sub	r16,r2,r17
 1004070:	18002526 	beq	r3,zero,1004108 <_fflush_r+0x18c>
 1004074:	0005883a 	mov	r2,zero
 1004078:	90800215 	stw	r2,8(r18)
 100407c:	0400170e 	bge	zero,r16,10040dc <_fflush_r+0x160>
 1004080:	90c00917 	ldw	r3,36(r18)
 1004084:	91400717 	ldw	r5,28(r18)
 1004088:	880d883a 	mov	r6,r17
 100408c:	800f883a 	mov	r7,r16
 1004090:	9809883a 	mov	r4,r19
 1004094:	183ee83a 	callr	r3
 1004098:	88a3883a 	add	r17,r17,r2
 100409c:	80a1c83a 	sub	r16,r16,r2
 10040a0:	00bff616 	blt	zero,r2,100407c <_fflush_r+0x100>
 10040a4:	9080030b 	ldhu	r2,12(r18)
 10040a8:	00ffffc4 	movi	r3,-1
 10040ac:	10801014 	ori	r2,r2,64
 10040b0:	9080030d 	sth	r2,12(r18)
 10040b4:	1805883a 	mov	r2,r3
 10040b8:	dfc00417 	ldw	ra,16(sp)
 10040bc:	dcc00317 	ldw	r19,12(sp)
 10040c0:	dc800217 	ldw	r18,8(sp)
 10040c4:	dc400117 	ldw	r17,4(sp)
 10040c8:	dc000017 	ldw	r16,0(sp)
 10040cc:	dec00504 	addi	sp,sp,20
 10040d0:	f800283a 	ret
 10040d4:	90800f17 	ldw	r2,60(r18)
 10040d8:	00bfbe16 	blt	zero,r2,1003fd4 <_fflush_r+0x58>
 10040dc:	0007883a 	mov	r3,zero
 10040e0:	1805883a 	mov	r2,r3
 10040e4:	dfc00417 	ldw	ra,16(sp)
 10040e8:	dcc00317 	ldw	r19,12(sp)
 10040ec:	dc800217 	ldw	r18,8(sp)
 10040f0:	dc400117 	ldw	r17,4(sp)
 10040f4:	dc000017 	ldw	r16,0(sp)
 10040f8:	dec00504 	addi	sp,sp,20
 10040fc:	f800283a 	ret
 1004100:	10042140 	call	1004214 <__sinit>
 1004104:	003fa806 	br	1003fa8 <_fflush_r+0x2c>
 1004108:	90800517 	ldw	r2,20(r18)
 100410c:	90800215 	stw	r2,8(r18)
 1004110:	003fda06 	br	100407c <_fflush_r+0x100>
 1004114:	90800117 	ldw	r2,4(r18)
 1004118:	90c00c17 	ldw	r3,48(r18)
 100411c:	80a1c83a 	sub	r16,r16,r2
 1004120:	183fb426 	beq	r3,zero,1003ff4 <_fflush_r+0x78>
 1004124:	90800f17 	ldw	r2,60(r18)
 1004128:	80a1c83a 	sub	r16,r16,r2
 100412c:	003fb106 	br	1003ff4 <_fflush_r+0x78>
 1004130:	91400717 	ldw	r5,28(r18)
 1004134:	9809883a 	mov	r4,r19
 1004138:	000d883a 	mov	r6,zero
 100413c:	01c00044 	movi	r7,1
 1004140:	403ee83a 	callr	r8
 1004144:	1021883a 	mov	r16,r2
 1004148:	00bfffc4 	movi	r2,-1
 100414c:	80800226 	beq	r16,r2,1004158 <_fflush_r+0x1dc>
 1004150:	92000a17 	ldw	r8,40(r18)
 1004154:	003fa406 	br	1003fe8 <_fflush_r+0x6c>
 1004158:	98c00017 	ldw	r3,0(r19)
 100415c:	00800744 	movi	r2,29
 1004160:	18bfde26 	beq	r3,r2,10040dc <_fflush_r+0x160>
 1004164:	9080030b 	ldhu	r2,12(r18)
 1004168:	8007883a 	mov	r3,r16
 100416c:	10801014 	ori	r2,r2,64
 1004170:	9080030d 	sth	r2,12(r18)
 1004174:	003fcf06 	br	10040b4 <_fflush_r+0x138>

01004178 <fflush>:
 1004178:	01404034 	movhi	r5,256
 100417c:	294fdf04 	addi	r5,r5,16252
 1004180:	2007883a 	mov	r3,r4
 1004184:	20000526 	beq	r4,zero,100419c <fflush+0x24>
 1004188:	00804074 	movhi	r2,257
 100418c:	109f6e04 	addi	r2,r2,32184
 1004190:	11000017 	ldw	r4,0(r2)
 1004194:	180b883a 	mov	r5,r3
 1004198:	1003f7c1 	jmpi	1003f7c <_fflush_r>
 100419c:	00804074 	movhi	r2,257
 10041a0:	109f6f04 	addi	r2,r2,32188
 10041a4:	11000017 	ldw	r4,0(r2)
 10041a8:	1004d7c1 	jmpi	1004d7c <_fwalk_reent>

010041ac <std>:
 10041ac:	00804034 	movhi	r2,256
 10041b0:	109cbc04 	addi	r2,r2,29424
 10041b4:	20800b15 	stw	r2,44(r4)
 10041b8:	00804034 	movhi	r2,256
 10041bc:	109cf704 	addi	r2,r2,29660
 10041c0:	20800815 	stw	r2,32(r4)
 10041c4:	00c04034 	movhi	r3,256
 10041c8:	18dcd804 	addi	r3,r3,29536
 10041cc:	00804034 	movhi	r2,256
 10041d0:	109cbe04 	addi	r2,r2,29432
 10041d4:	2140030d 	sth	r5,12(r4)
 10041d8:	2180038d 	sth	r6,14(r4)
 10041dc:	20c00915 	stw	r3,36(r4)
 10041e0:	20800a15 	stw	r2,40(r4)
 10041e4:	20000015 	stw	zero,0(r4)
 10041e8:	20000115 	stw	zero,4(r4)
 10041ec:	20000215 	stw	zero,8(r4)
 10041f0:	20000415 	stw	zero,16(r4)
 10041f4:	20000515 	stw	zero,20(r4)
 10041f8:	20000615 	stw	zero,24(r4)
 10041fc:	21000715 	stw	r4,28(r4)
 1004200:	f800283a 	ret

01004204 <__sfp_lock_acquire>:
 1004204:	f800283a 	ret

01004208 <__sfp_lock_release>:
 1004208:	f800283a 	ret

0100420c <__sinit_lock_acquire>:
 100420c:	f800283a 	ret

01004210 <__sinit_lock_release>:
 1004210:	f800283a 	ret

01004214 <__sinit>:
 1004214:	20800e17 	ldw	r2,56(r4)
 1004218:	defffd04 	addi	sp,sp,-12
 100421c:	dc400115 	stw	r17,4(sp)
 1004220:	dc000015 	stw	r16,0(sp)
 1004224:	dfc00215 	stw	ra,8(sp)
 1004228:	04400044 	movi	r17,1
 100422c:	01400104 	movi	r5,4
 1004230:	000d883a 	mov	r6,zero
 1004234:	2021883a 	mov	r16,r4
 1004238:	2200bb04 	addi	r8,r4,748
 100423c:	200f883a 	mov	r7,r4
 1004240:	10000526 	beq	r2,zero,1004258 <__sinit+0x44>
 1004244:	dfc00217 	ldw	ra,8(sp)
 1004248:	dc400117 	ldw	r17,4(sp)
 100424c:	dc000017 	ldw	r16,0(sp)
 1004250:	dec00304 	addi	sp,sp,12
 1004254:	f800283a 	ret
 1004258:	21000117 	ldw	r4,4(r4)
 100425c:	00804034 	movhi	r2,256
 1004260:	1090be04 	addi	r2,r2,17144
 1004264:	00c000c4 	movi	r3,3
 1004268:	80800f15 	stw	r2,60(r16)
 100426c:	80c0b915 	stw	r3,740(r16)
 1004270:	8200ba15 	stw	r8,744(r16)
 1004274:	84400e15 	stw	r17,56(r16)
 1004278:	8000b815 	stw	zero,736(r16)
 100427c:	10041ac0 	call	10041ac <std>
 1004280:	81000217 	ldw	r4,8(r16)
 1004284:	880d883a 	mov	r6,r17
 1004288:	800f883a 	mov	r7,r16
 100428c:	01400284 	movi	r5,10
 1004290:	10041ac0 	call	10041ac <std>
 1004294:	81000317 	ldw	r4,12(r16)
 1004298:	800f883a 	mov	r7,r16
 100429c:	01400484 	movi	r5,18
 10042a0:	01800084 	movi	r6,2
 10042a4:	dfc00217 	ldw	ra,8(sp)
 10042a8:	dc400117 	ldw	r17,4(sp)
 10042ac:	dc000017 	ldw	r16,0(sp)
 10042b0:	dec00304 	addi	sp,sp,12
 10042b4:	10041ac1 	jmpi	10041ac <std>

010042b8 <__fp_lock>:
 10042b8:	0005883a 	mov	r2,zero
 10042bc:	f800283a 	ret

010042c0 <__fp_unlock>:
 10042c0:	0005883a 	mov	r2,zero
 10042c4:	f800283a 	ret

010042c8 <__fp_unlock_all>:
 10042c8:	00804074 	movhi	r2,257
 10042cc:	109f6e04 	addi	r2,r2,32184
 10042d0:	11000017 	ldw	r4,0(r2)
 10042d4:	01404034 	movhi	r5,256
 10042d8:	2950b004 	addi	r5,r5,17088
 10042dc:	1004e441 	jmpi	1004e44 <_fwalk>

010042e0 <__fp_lock_all>:
 10042e0:	00804074 	movhi	r2,257
 10042e4:	109f6e04 	addi	r2,r2,32184
 10042e8:	11000017 	ldw	r4,0(r2)
 10042ec:	01404034 	movhi	r5,256
 10042f0:	2950ae04 	addi	r5,r5,17080
 10042f4:	1004e441 	jmpi	1004e44 <_fwalk>

010042f8 <_cleanup_r>:
 10042f8:	01404034 	movhi	r5,256
 10042fc:	295dee04 	addi	r5,r5,30648
 1004300:	1004e441 	jmpi	1004e44 <_fwalk>

01004304 <_cleanup>:
 1004304:	00804074 	movhi	r2,257
 1004308:	109f6f04 	addi	r2,r2,32188
 100430c:	11000017 	ldw	r4,0(r2)
 1004310:	10042f81 	jmpi	10042f8 <_cleanup_r>

01004314 <__sfmoreglue>:
 1004314:	defffc04 	addi	sp,sp,-16
 1004318:	dc000015 	stw	r16,0(sp)
 100431c:	2821883a 	mov	r16,r5
 1004320:	dc400115 	stw	r17,4(sp)
 1004324:	01401704 	movi	r5,92
 1004328:	2023883a 	mov	r17,r4
 100432c:	8009883a 	mov	r4,r16
 1004330:	dfc00315 	stw	ra,12(sp)
 1004334:	dcc00215 	stw	r19,8(sp)
 1004338:	10098e40 	call	10098e4 <__mulsi3>
 100433c:	11400304 	addi	r5,r2,12
 1004340:	8809883a 	mov	r4,r17
 1004344:	1027883a 	mov	r19,r2
 1004348:	10051540 	call	1005154 <_malloc_r>
 100434c:	10c00304 	addi	r3,r2,12
 1004350:	1023883a 	mov	r17,r2
 1004354:	1809883a 	mov	r4,r3
 1004358:	980d883a 	mov	r6,r19
 100435c:	000b883a 	mov	r5,zero
 1004360:	10000b26 	beq	r2,zero,1004390 <__sfmoreglue+0x7c>
 1004364:	14000115 	stw	r16,4(r2)
 1004368:	10c00215 	stw	r3,8(r2)
 100436c:	10000015 	stw	zero,0(r2)
 1004370:	1005af80 	call	1005af8 <memset>
 1004374:	8805883a 	mov	r2,r17
 1004378:	dfc00317 	ldw	ra,12(sp)
 100437c:	dcc00217 	ldw	r19,8(sp)
 1004380:	dc400117 	ldw	r17,4(sp)
 1004384:	dc000017 	ldw	r16,0(sp)
 1004388:	dec00404 	addi	sp,sp,16
 100438c:	f800283a 	ret
 1004390:	0023883a 	mov	r17,zero
 1004394:	8805883a 	mov	r2,r17
 1004398:	dfc00317 	ldw	ra,12(sp)
 100439c:	dcc00217 	ldw	r19,8(sp)
 10043a0:	dc400117 	ldw	r17,4(sp)
 10043a4:	dc000017 	ldw	r16,0(sp)
 10043a8:	dec00404 	addi	sp,sp,16
 10043ac:	f800283a 	ret

010043b0 <__sfp>:
 10043b0:	defffd04 	addi	sp,sp,-12
 10043b4:	00804074 	movhi	r2,257
 10043b8:	109f6f04 	addi	r2,r2,32188
 10043bc:	dc000015 	stw	r16,0(sp)
 10043c0:	14000017 	ldw	r16,0(r2)
 10043c4:	dc400115 	stw	r17,4(sp)
 10043c8:	dfc00215 	stw	ra,8(sp)
 10043cc:	80800e17 	ldw	r2,56(r16)
 10043d0:	2023883a 	mov	r17,r4
 10043d4:	10002626 	beq	r2,zero,1004470 <__sfp+0xc0>
 10043d8:	8400b804 	addi	r16,r16,736
 10043dc:	80800117 	ldw	r2,4(r16)
 10043e0:	81000217 	ldw	r4,8(r16)
 10043e4:	10ffffc4 	addi	r3,r2,-1
 10043e8:	18000916 	blt	r3,zero,1004410 <__sfp+0x60>
 10043ec:	2080030f 	ldh	r2,12(r4)
 10043f0:	10000b26 	beq	r2,zero,1004420 <__sfp+0x70>
 10043f4:	017fffc4 	movi	r5,-1
 10043f8:	00000206 	br	1004404 <__sfp+0x54>
 10043fc:	2080030f 	ldh	r2,12(r4)
 1004400:	10000726 	beq	r2,zero,1004420 <__sfp+0x70>
 1004404:	18ffffc4 	addi	r3,r3,-1
 1004408:	21001704 	addi	r4,r4,92
 100440c:	197ffb1e 	bne	r3,r5,10043fc <__sfp+0x4c>
 1004410:	80800017 	ldw	r2,0(r16)
 1004414:	10001926 	beq	r2,zero,100447c <__sfp+0xcc>
 1004418:	1021883a 	mov	r16,r2
 100441c:	003fef06 	br	10043dc <__sfp+0x2c>
 1004420:	00bfffc4 	movi	r2,-1
 1004424:	00c00044 	movi	r3,1
 1004428:	2080038d 	sth	r2,14(r4)
 100442c:	20c0030d 	sth	r3,12(r4)
 1004430:	20000015 	stw	zero,0(r4)
 1004434:	20000215 	stw	zero,8(r4)
 1004438:	20000115 	stw	zero,4(r4)
 100443c:	20000415 	stw	zero,16(r4)
 1004440:	20000515 	stw	zero,20(r4)
 1004444:	20000615 	stw	zero,24(r4)
 1004448:	20000c15 	stw	zero,48(r4)
 100444c:	20000d15 	stw	zero,52(r4)
 1004450:	20001115 	stw	zero,68(r4)
 1004454:	20001215 	stw	zero,72(r4)
 1004458:	2005883a 	mov	r2,r4
 100445c:	dfc00217 	ldw	ra,8(sp)
 1004460:	dc400117 	ldw	r17,4(sp)
 1004464:	dc000017 	ldw	r16,0(sp)
 1004468:	dec00304 	addi	sp,sp,12
 100446c:	f800283a 	ret
 1004470:	8009883a 	mov	r4,r16
 1004474:	10042140 	call	1004214 <__sinit>
 1004478:	003fd706 	br	10043d8 <__sfp+0x28>
 100447c:	8809883a 	mov	r4,r17
 1004480:	01400104 	movi	r5,4
 1004484:	10043140 	call	1004314 <__sfmoreglue>
 1004488:	80800015 	stw	r2,0(r16)
 100448c:	103fe21e 	bne	r2,zero,1004418 <__sfp+0x68>
 1004490:	00800304 	movi	r2,12
 1004494:	0009883a 	mov	r4,zero
 1004498:	88800015 	stw	r2,0(r17)
 100449c:	003fee06 	br	1004458 <__sfp+0xa8>

010044a0 <_malloc_trim_r>:
 10044a0:	defffb04 	addi	sp,sp,-20
 10044a4:	dcc00315 	stw	r19,12(sp)
 10044a8:	04c04074 	movhi	r19,257
 10044ac:	9cd9dc04 	addi	r19,r19,26480
 10044b0:	dc800215 	stw	r18,8(sp)
 10044b4:	dc400115 	stw	r17,4(sp)
 10044b8:	dc000015 	stw	r16,0(sp)
 10044bc:	2823883a 	mov	r17,r5
 10044c0:	2025883a 	mov	r18,r4
 10044c4:	dfc00415 	stw	ra,16(sp)
 10044c8:	100ac080 	call	100ac08 <__malloc_lock>
 10044cc:	98800217 	ldw	r2,8(r19)
 10044d0:	9009883a 	mov	r4,r18
 10044d4:	000b883a 	mov	r5,zero
 10044d8:	10c00117 	ldw	r3,4(r2)
 10044dc:	00bfff04 	movi	r2,-4
 10044e0:	18a0703a 	and	r16,r3,r2
 10044e4:	8463c83a 	sub	r17,r16,r17
 10044e8:	8c43fbc4 	addi	r17,r17,4079
 10044ec:	8822d33a 	srli	r17,r17,12
 10044f0:	0083ffc4 	movi	r2,4095
 10044f4:	8c7fffc4 	addi	r17,r17,-1
 10044f8:	8822933a 	slli	r17,r17,12
 10044fc:	1440060e 	bge	r2,r17,1004518 <_malloc_trim_r+0x78>
 1004500:	10072800 	call	1007280 <_sbrk_r>
 1004504:	98c00217 	ldw	r3,8(r19)
 1004508:	9009883a 	mov	r4,r18
 100450c:	044bc83a 	sub	r5,zero,r17
 1004510:	80c7883a 	add	r3,r16,r3
 1004514:	10c00926 	beq	r2,r3,100453c <_malloc_trim_r+0x9c>
 1004518:	100ad100 	call	100ad10 <__malloc_unlock>
 100451c:	0005883a 	mov	r2,zero
 1004520:	dfc00417 	ldw	ra,16(sp)
 1004524:	dcc00317 	ldw	r19,12(sp)
 1004528:	dc800217 	ldw	r18,8(sp)
 100452c:	dc400117 	ldw	r17,4(sp)
 1004530:	dc000017 	ldw	r16,0(sp)
 1004534:	dec00504 	addi	sp,sp,20
 1004538:	f800283a 	ret
 100453c:	9009883a 	mov	r4,r18
 1004540:	10072800 	call	1007280 <_sbrk_r>
 1004544:	844dc83a 	sub	r6,r16,r17
 1004548:	00ffffc4 	movi	r3,-1
 100454c:	9009883a 	mov	r4,r18
 1004550:	000b883a 	mov	r5,zero
 1004554:	01c040b4 	movhi	r7,258
 1004558:	39e68d04 	addi	r7,r7,-26060
 100455c:	31800054 	ori	r6,r6,1
 1004560:	10c00926 	beq	r2,r3,1004588 <_malloc_trim_r+0xe8>
 1004564:	38800017 	ldw	r2,0(r7)
 1004568:	98c00217 	ldw	r3,8(r19)
 100456c:	9009883a 	mov	r4,r18
 1004570:	1445c83a 	sub	r2,r2,r17
 1004574:	38800015 	stw	r2,0(r7)
 1004578:	19800115 	stw	r6,4(r3)
 100457c:	100ad100 	call	100ad10 <__malloc_unlock>
 1004580:	00800044 	movi	r2,1
 1004584:	003fe606 	br	1004520 <_malloc_trim_r+0x80>
 1004588:	10072800 	call	1007280 <_sbrk_r>
 100458c:	99800217 	ldw	r6,8(r19)
 1004590:	100f883a 	mov	r7,r2
 1004594:	9009883a 	mov	r4,r18
 1004598:	1187c83a 	sub	r3,r2,r6
 100459c:	008003c4 	movi	r2,15
 10045a0:	19400054 	ori	r5,r3,1
 10045a4:	10ffdc0e 	bge	r2,r3,1004518 <_malloc_trim_r+0x78>
 10045a8:	00804074 	movhi	r2,257
 10045ac:	109f7304 	addi	r2,r2,32204
 10045b0:	10c00017 	ldw	r3,0(r2)
 10045b4:	008040b4 	movhi	r2,258
 10045b8:	10a68d04 	addi	r2,r2,-26060
 10045bc:	31400115 	stw	r5,4(r6)
 10045c0:	38c7c83a 	sub	r3,r7,r3
 10045c4:	10c00015 	stw	r3,0(r2)
 10045c8:	003fd306 	br	1004518 <_malloc_trim_r+0x78>

010045cc <_free_r>:
 10045cc:	defffd04 	addi	sp,sp,-12
 10045d0:	dc400115 	stw	r17,4(sp)
 10045d4:	dc000015 	stw	r16,0(sp)
 10045d8:	dfc00215 	stw	ra,8(sp)
 10045dc:	2821883a 	mov	r16,r5
 10045e0:	2023883a 	mov	r17,r4
 10045e4:	28005a26 	beq	r5,zero,1004750 <_free_r+0x184>
 10045e8:	100ac080 	call	100ac08 <__malloc_lock>
 10045ec:	823ffe04 	addi	r8,r16,-8
 10045f0:	41400117 	ldw	r5,4(r8)
 10045f4:	00bfff84 	movi	r2,-2
 10045f8:	02804074 	movhi	r10,257
 10045fc:	5299dc04 	addi	r10,r10,26480
 1004600:	288e703a 	and	r7,r5,r2
 1004604:	41cd883a 	add	r6,r8,r7
 1004608:	30c00117 	ldw	r3,4(r6)
 100460c:	51000217 	ldw	r4,8(r10)
 1004610:	00bfff04 	movi	r2,-4
 1004614:	1892703a 	and	r9,r3,r2
 1004618:	5017883a 	mov	r11,r10
 100461c:	31006726 	beq	r6,r4,10047bc <_free_r+0x1f0>
 1004620:	2880004c 	andi	r2,r5,1
 1004624:	1005003a 	cmpeq	r2,r2,zero
 1004628:	32400115 	stw	r9,4(r6)
 100462c:	10001a1e 	bne	r2,zero,1004698 <_free_r+0xcc>
 1004630:	000b883a 	mov	r5,zero
 1004634:	3247883a 	add	r3,r6,r9
 1004638:	18800117 	ldw	r2,4(r3)
 100463c:	1080004c 	andi	r2,r2,1
 1004640:	1000231e 	bne	r2,zero,10046d0 <_free_r+0x104>
 1004644:	280ac03a 	cmpne	r5,r5,zero
 1004648:	3a4f883a 	add	r7,r7,r9
 100464c:	2800451e 	bne	r5,zero,1004764 <_free_r+0x198>
 1004650:	31000217 	ldw	r4,8(r6)
 1004654:	00804074 	movhi	r2,257
 1004658:	1099de04 	addi	r2,r2,26488
 100465c:	20807b26 	beq	r4,r2,100484c <_free_r+0x280>
 1004660:	30800317 	ldw	r2,12(r6)
 1004664:	3a07883a 	add	r3,r7,r8
 1004668:	19c00015 	stw	r7,0(r3)
 100466c:	11000215 	stw	r4,8(r2)
 1004670:	20800315 	stw	r2,12(r4)
 1004674:	38800054 	ori	r2,r7,1
 1004678:	40800115 	stw	r2,4(r8)
 100467c:	28001a26 	beq	r5,zero,10046e8 <_free_r+0x11c>
 1004680:	8809883a 	mov	r4,r17
 1004684:	dfc00217 	ldw	ra,8(sp)
 1004688:	dc400117 	ldw	r17,4(sp)
 100468c:	dc000017 	ldw	r16,0(sp)
 1004690:	dec00304 	addi	sp,sp,12
 1004694:	100ad101 	jmpi	100ad10 <__malloc_unlock>
 1004698:	80bffe17 	ldw	r2,-8(r16)
 100469c:	50c00204 	addi	r3,r10,8
 10046a0:	4091c83a 	sub	r8,r8,r2
 10046a4:	41000217 	ldw	r4,8(r8)
 10046a8:	388f883a 	add	r7,r7,r2
 10046ac:	20c06126 	beq	r4,r3,1004834 <_free_r+0x268>
 10046b0:	40800317 	ldw	r2,12(r8)
 10046b4:	3247883a 	add	r3,r6,r9
 10046b8:	000b883a 	mov	r5,zero
 10046bc:	11000215 	stw	r4,8(r2)
 10046c0:	20800315 	stw	r2,12(r4)
 10046c4:	18800117 	ldw	r2,4(r3)
 10046c8:	1080004c 	andi	r2,r2,1
 10046cc:	103fdd26 	beq	r2,zero,1004644 <_free_r+0x78>
 10046d0:	38800054 	ori	r2,r7,1
 10046d4:	3a07883a 	add	r3,r7,r8
 10046d8:	280ac03a 	cmpne	r5,r5,zero
 10046dc:	40800115 	stw	r2,4(r8)
 10046e0:	19c00015 	stw	r7,0(r3)
 10046e4:	283fe61e 	bne	r5,zero,1004680 <_free_r+0xb4>
 10046e8:	00807fc4 	movi	r2,511
 10046ec:	11c01f2e 	bgeu	r2,r7,100476c <_free_r+0x1a0>
 10046f0:	3806d27a 	srli	r3,r7,9
 10046f4:	1800481e 	bne	r3,zero,1004818 <_free_r+0x24c>
 10046f8:	3804d0fa 	srli	r2,r7,3
 10046fc:	100690fa 	slli	r3,r2,3
 1004700:	1acd883a 	add	r6,r3,r11
 1004704:	31400217 	ldw	r5,8(r6)
 1004708:	31405926 	beq	r6,r5,1004870 <_free_r+0x2a4>
 100470c:	28800117 	ldw	r2,4(r5)
 1004710:	00ffff04 	movi	r3,-4
 1004714:	10c4703a 	and	r2,r2,r3
 1004718:	3880022e 	bgeu	r7,r2,1004724 <_free_r+0x158>
 100471c:	29400217 	ldw	r5,8(r5)
 1004720:	317ffa1e 	bne	r6,r5,100470c <_free_r+0x140>
 1004724:	29800317 	ldw	r6,12(r5)
 1004728:	41800315 	stw	r6,12(r8)
 100472c:	41400215 	stw	r5,8(r8)
 1004730:	8809883a 	mov	r4,r17
 1004734:	2a000315 	stw	r8,12(r5)
 1004738:	32000215 	stw	r8,8(r6)
 100473c:	dfc00217 	ldw	ra,8(sp)
 1004740:	dc400117 	ldw	r17,4(sp)
 1004744:	dc000017 	ldw	r16,0(sp)
 1004748:	dec00304 	addi	sp,sp,12
 100474c:	100ad101 	jmpi	100ad10 <__malloc_unlock>
 1004750:	dfc00217 	ldw	ra,8(sp)
 1004754:	dc400117 	ldw	r17,4(sp)
 1004758:	dc000017 	ldw	r16,0(sp)
 100475c:	dec00304 	addi	sp,sp,12
 1004760:	f800283a 	ret
 1004764:	31000217 	ldw	r4,8(r6)
 1004768:	003fbd06 	br	1004660 <_free_r+0x94>
 100476c:	3806d0fa 	srli	r3,r7,3
 1004770:	00800044 	movi	r2,1
 1004774:	51400117 	ldw	r5,4(r10)
 1004778:	180890fa 	slli	r4,r3,3
 100477c:	1807d0ba 	srai	r3,r3,2
 1004780:	22c9883a 	add	r4,r4,r11
 1004784:	21800217 	ldw	r6,8(r4)
 1004788:	10c4983a 	sll	r2,r2,r3
 100478c:	41000315 	stw	r4,12(r8)
 1004790:	41800215 	stw	r6,8(r8)
 1004794:	288ab03a 	or	r5,r5,r2
 1004798:	22000215 	stw	r8,8(r4)
 100479c:	8809883a 	mov	r4,r17
 10047a0:	51400115 	stw	r5,4(r10)
 10047a4:	32000315 	stw	r8,12(r6)
 10047a8:	dfc00217 	ldw	ra,8(sp)
 10047ac:	dc400117 	ldw	r17,4(sp)
 10047b0:	dc000017 	ldw	r16,0(sp)
 10047b4:	dec00304 	addi	sp,sp,12
 10047b8:	100ad101 	jmpi	100ad10 <__malloc_unlock>
 10047bc:	2880004c 	andi	r2,r5,1
 10047c0:	3a4d883a 	add	r6,r7,r9
 10047c4:	1000071e 	bne	r2,zero,10047e4 <_free_r+0x218>
 10047c8:	80bffe17 	ldw	r2,-8(r16)
 10047cc:	4091c83a 	sub	r8,r8,r2
 10047d0:	41000317 	ldw	r4,12(r8)
 10047d4:	40c00217 	ldw	r3,8(r8)
 10047d8:	308d883a 	add	r6,r6,r2
 10047dc:	20c00215 	stw	r3,8(r4)
 10047e0:	19000315 	stw	r4,12(r3)
 10047e4:	00804074 	movhi	r2,257
 10047e8:	109f7204 	addi	r2,r2,32200
 10047ec:	11000017 	ldw	r4,0(r2)
 10047f0:	30c00054 	ori	r3,r6,1
 10047f4:	52000215 	stw	r8,8(r10)
 10047f8:	40c00115 	stw	r3,4(r8)
 10047fc:	313fa036 	bltu	r6,r4,1004680 <_free_r+0xb4>
 1004800:	008040b4 	movhi	r2,258
 1004804:	10a66a04 	addi	r2,r2,-26200
 1004808:	11400017 	ldw	r5,0(r2)
 100480c:	8809883a 	mov	r4,r17
 1004810:	10044a00 	call	10044a0 <_malloc_trim_r>
 1004814:	003f9a06 	br	1004680 <_free_r+0xb4>
 1004818:	00800104 	movi	r2,4
 100481c:	10c0072e 	bgeu	r2,r3,100483c <_free_r+0x270>
 1004820:	00800504 	movi	r2,20
 1004824:	10c01936 	bltu	r2,r3,100488c <_free_r+0x2c0>
 1004828:	188016c4 	addi	r2,r3,91
 100482c:	100690fa 	slli	r3,r2,3
 1004830:	003fb306 	br	1004700 <_free_r+0x134>
 1004834:	01400044 	movi	r5,1
 1004838:	003f7e06 	br	1004634 <_free_r+0x68>
 100483c:	3804d1ba 	srli	r2,r7,6
 1004840:	10800e04 	addi	r2,r2,56
 1004844:	100690fa 	slli	r3,r2,3
 1004848:	003fad06 	br	1004700 <_free_r+0x134>
 100484c:	22000315 	stw	r8,12(r4)
 1004850:	22000215 	stw	r8,8(r4)
 1004854:	3a05883a 	add	r2,r7,r8
 1004858:	38c00054 	ori	r3,r7,1
 100485c:	11c00015 	stw	r7,0(r2)
 1004860:	41000215 	stw	r4,8(r8)
 1004864:	40c00115 	stw	r3,4(r8)
 1004868:	41000315 	stw	r4,12(r8)
 100486c:	003f8406 	br	1004680 <_free_r+0xb4>
 1004870:	1005d0ba 	srai	r2,r2,2
 1004874:	00c00044 	movi	r3,1
 1004878:	51000117 	ldw	r4,4(r10)
 100487c:	1886983a 	sll	r3,r3,r2
 1004880:	20c8b03a 	or	r4,r4,r3
 1004884:	51000115 	stw	r4,4(r10)
 1004888:	003fa706 	br	1004728 <_free_r+0x15c>
 100488c:	00801504 	movi	r2,84
 1004890:	10c00436 	bltu	r2,r3,10048a4 <_free_r+0x2d8>
 1004894:	3804d33a 	srli	r2,r7,12
 1004898:	10801b84 	addi	r2,r2,110
 100489c:	100690fa 	slli	r3,r2,3
 10048a0:	003f9706 	br	1004700 <_free_r+0x134>
 10048a4:	00805504 	movi	r2,340
 10048a8:	10c00436 	bltu	r2,r3,10048bc <_free_r+0x2f0>
 10048ac:	3804d3fa 	srli	r2,r7,15
 10048b0:	10801dc4 	addi	r2,r2,119
 10048b4:	100690fa 	slli	r3,r2,3
 10048b8:	003f9106 	br	1004700 <_free_r+0x134>
 10048bc:	00815504 	movi	r2,1364
 10048c0:	10c0032e 	bgeu	r2,r3,10048d0 <_free_r+0x304>
 10048c4:	00801f84 	movi	r2,126
 10048c8:	00c0fc04 	movi	r3,1008
 10048cc:	003f8c06 	br	1004700 <_free_r+0x134>
 10048d0:	3804d4ba 	srli	r2,r7,18
 10048d4:	10801f04 	addi	r2,r2,124
 10048d8:	100690fa 	slli	r3,r2,3
 10048dc:	003f8806 	br	1004700 <_free_r+0x134>

010048e0 <__sfvwrite_r>:
 10048e0:	30800217 	ldw	r2,8(r6)
 10048e4:	defff504 	addi	sp,sp,-44
 10048e8:	df000915 	stw	fp,36(sp)
 10048ec:	dd800715 	stw	r22,28(sp)
 10048f0:	dc800315 	stw	r18,12(sp)
 10048f4:	dfc00a15 	stw	ra,40(sp)
 10048f8:	ddc00815 	stw	r23,32(sp)
 10048fc:	dd400615 	stw	r21,24(sp)
 1004900:	dd000515 	stw	r20,20(sp)
 1004904:	dcc00415 	stw	r19,16(sp)
 1004908:	dc400215 	stw	r17,8(sp)
 100490c:	dc000115 	stw	r16,4(sp)
 1004910:	302d883a 	mov	r22,r6
 1004914:	2039883a 	mov	fp,r4
 1004918:	2825883a 	mov	r18,r5
 100491c:	10001c26 	beq	r2,zero,1004990 <__sfvwrite_r+0xb0>
 1004920:	29c0030b 	ldhu	r7,12(r5)
 1004924:	3880020c 	andi	r2,r7,8
 1004928:	10002726 	beq	r2,zero,10049c8 <__sfvwrite_r+0xe8>
 100492c:	28800417 	ldw	r2,16(r5)
 1004930:	10002526 	beq	r2,zero,10049c8 <__sfvwrite_r+0xe8>
 1004934:	3880008c 	andi	r2,r7,2
 1004938:	b5400017 	ldw	r21,0(r22)
 100493c:	10002826 	beq	r2,zero,10049e0 <__sfvwrite_r+0x100>
 1004940:	0021883a 	mov	r16,zero
 1004944:	0023883a 	mov	r17,zero
 1004948:	880d883a 	mov	r6,r17
 100494c:	e009883a 	mov	r4,fp
 1004950:	00810004 	movi	r2,1024
 1004954:	80006e26 	beq	r16,zero,1004b10 <__sfvwrite_r+0x230>
 1004958:	800f883a 	mov	r7,r16
 100495c:	91400717 	ldw	r5,28(r18)
 1004960:	1400012e 	bgeu	r2,r16,1004968 <__sfvwrite_r+0x88>
 1004964:	100f883a 	mov	r7,r2
 1004968:	90c00917 	ldw	r3,36(r18)
 100496c:	183ee83a 	callr	r3
 1004970:	1007883a 	mov	r3,r2
 1004974:	80a1c83a 	sub	r16,r16,r2
 1004978:	88a3883a 	add	r17,r17,r2
 100497c:	00806d0e 	bge	zero,r2,1004b34 <__sfvwrite_r+0x254>
 1004980:	b0800217 	ldw	r2,8(r22)
 1004984:	10c5c83a 	sub	r2,r2,r3
 1004988:	b0800215 	stw	r2,8(r22)
 100498c:	103fee1e 	bne	r2,zero,1004948 <__sfvwrite_r+0x68>
 1004990:	0009883a 	mov	r4,zero
 1004994:	2005883a 	mov	r2,r4
 1004998:	dfc00a17 	ldw	ra,40(sp)
 100499c:	df000917 	ldw	fp,36(sp)
 10049a0:	ddc00817 	ldw	r23,32(sp)
 10049a4:	dd800717 	ldw	r22,28(sp)
 10049a8:	dd400617 	ldw	r21,24(sp)
 10049ac:	dd000517 	ldw	r20,20(sp)
 10049b0:	dcc00417 	ldw	r19,16(sp)
 10049b4:	dc800317 	ldw	r18,12(sp)
 10049b8:	dc400217 	ldw	r17,8(sp)
 10049bc:	dc000117 	ldw	r16,4(sp)
 10049c0:	dec00b04 	addi	sp,sp,44
 10049c4:	f800283a 	ret
 10049c8:	10026480 	call	1002648 <__swsetup_r>
 10049cc:	1000e41e 	bne	r2,zero,1004d60 <__sfvwrite_r+0x480>
 10049d0:	91c0030b 	ldhu	r7,12(r18)
 10049d4:	b5400017 	ldw	r21,0(r22)
 10049d8:	3880008c 	andi	r2,r7,2
 10049dc:	103fd81e 	bne	r2,zero,1004940 <__sfvwrite_r+0x60>
 10049e0:	3880004c 	andi	r2,r7,1
 10049e4:	1005003a 	cmpeq	r2,r2,zero
 10049e8:	10005726 	beq	r2,zero,1004b48 <__sfvwrite_r+0x268>
 10049ec:	0029883a 	mov	r20,zero
 10049f0:	002f883a 	mov	r23,zero
 10049f4:	a0004226 	beq	r20,zero,1004b00 <__sfvwrite_r+0x220>
 10049f8:	3880800c 	andi	r2,r7,512
 10049fc:	94000217 	ldw	r16,8(r18)
 1004a00:	10008b26 	beq	r2,zero,1004c30 <__sfvwrite_r+0x350>
 1004a04:	800d883a 	mov	r6,r16
 1004a08:	a400a536 	bltu	r20,r16,1004ca0 <__sfvwrite_r+0x3c0>
 1004a0c:	3881200c 	andi	r2,r7,1152
 1004a10:	10002726 	beq	r2,zero,1004ab0 <__sfvwrite_r+0x1d0>
 1004a14:	90800517 	ldw	r2,20(r18)
 1004a18:	92000417 	ldw	r8,16(r18)
 1004a1c:	91400017 	ldw	r5,0(r18)
 1004a20:	1087883a 	add	r3,r2,r2
 1004a24:	1887883a 	add	r3,r3,r2
 1004a28:	1808d7fa 	srli	r4,r3,31
 1004a2c:	2a21c83a 	sub	r16,r5,r8
 1004a30:	80800044 	addi	r2,r16,1
 1004a34:	20c9883a 	add	r4,r4,r3
 1004a38:	2027d07a 	srai	r19,r4,1
 1004a3c:	a085883a 	add	r2,r20,r2
 1004a40:	980d883a 	mov	r6,r19
 1004a44:	9880022e 	bgeu	r19,r2,1004a50 <__sfvwrite_r+0x170>
 1004a48:	1027883a 	mov	r19,r2
 1004a4c:	100d883a 	mov	r6,r2
 1004a50:	3881000c 	andi	r2,r7,1024
 1004a54:	1000b826 	beq	r2,zero,1004d38 <__sfvwrite_r+0x458>
 1004a58:	300b883a 	mov	r5,r6
 1004a5c:	e009883a 	mov	r4,fp
 1004a60:	10051540 	call	1005154 <_malloc_r>
 1004a64:	10003126 	beq	r2,zero,1004b2c <__sfvwrite_r+0x24c>
 1004a68:	91400417 	ldw	r5,16(r18)
 1004a6c:	1009883a 	mov	r4,r2
 1004a70:	800d883a 	mov	r6,r16
 1004a74:	1023883a 	mov	r17,r2
 1004a78:	10059780 	call	1005978 <memcpy>
 1004a7c:	90c0030b 	ldhu	r3,12(r18)
 1004a80:	00beffc4 	movi	r2,-1025
 1004a84:	1886703a 	and	r3,r3,r2
 1004a88:	18c02014 	ori	r3,r3,128
 1004a8c:	90c0030d 	sth	r3,12(r18)
 1004a90:	9c07c83a 	sub	r3,r19,r16
 1004a94:	8c05883a 	add	r2,r17,r16
 1004a98:	a00d883a 	mov	r6,r20
 1004a9c:	a021883a 	mov	r16,r20
 1004aa0:	90800015 	stw	r2,0(r18)
 1004aa4:	90c00215 	stw	r3,8(r18)
 1004aa8:	94400415 	stw	r17,16(r18)
 1004aac:	94c00515 	stw	r19,20(r18)
 1004ab0:	91000017 	ldw	r4,0(r18)
 1004ab4:	b80b883a 	mov	r5,r23
 1004ab8:	a023883a 	mov	r17,r20
 1004abc:	1005a180 	call	1005a18 <memmove>
 1004ac0:	90c00217 	ldw	r3,8(r18)
 1004ac4:	90800017 	ldw	r2,0(r18)
 1004ac8:	a027883a 	mov	r19,r20
 1004acc:	1c07c83a 	sub	r3,r3,r16
 1004ad0:	1405883a 	add	r2,r2,r16
 1004ad4:	90c00215 	stw	r3,8(r18)
 1004ad8:	a021883a 	mov	r16,r20
 1004adc:	90800015 	stw	r2,0(r18)
 1004ae0:	b0800217 	ldw	r2,8(r22)
 1004ae4:	1405c83a 	sub	r2,r2,r16
 1004ae8:	b0800215 	stw	r2,8(r22)
 1004aec:	103fa826 	beq	r2,zero,1004990 <__sfvwrite_r+0xb0>
 1004af0:	a469c83a 	sub	r20,r20,r17
 1004af4:	91c0030b 	ldhu	r7,12(r18)
 1004af8:	bcef883a 	add	r23,r23,r19
 1004afc:	a03fbe1e 	bne	r20,zero,10049f8 <__sfvwrite_r+0x118>
 1004b00:	adc00017 	ldw	r23,0(r21)
 1004b04:	ad000117 	ldw	r20,4(r21)
 1004b08:	ad400204 	addi	r21,r21,8
 1004b0c:	003fb906 	br	10049f4 <__sfvwrite_r+0x114>
 1004b10:	ac400017 	ldw	r17,0(r21)
 1004b14:	ac000117 	ldw	r16,4(r21)
 1004b18:	ad400204 	addi	r21,r21,8
 1004b1c:	003f8a06 	br	1004948 <__sfvwrite_r+0x68>
 1004b20:	91400417 	ldw	r5,16(r18)
 1004b24:	e009883a 	mov	r4,fp
 1004b28:	10045cc0 	call	10045cc <_free_r>
 1004b2c:	00800304 	movi	r2,12
 1004b30:	e0800015 	stw	r2,0(fp)
 1004b34:	9080030b 	ldhu	r2,12(r18)
 1004b38:	013fffc4 	movi	r4,-1
 1004b3c:	10801014 	ori	r2,r2,64
 1004b40:	9080030d 	sth	r2,12(r18)
 1004b44:	003f9306 	br	1004994 <__sfvwrite_r+0xb4>
 1004b48:	0027883a 	mov	r19,zero
 1004b4c:	002f883a 	mov	r23,zero
 1004b50:	d8000015 	stw	zero,0(sp)
 1004b54:	0029883a 	mov	r20,zero
 1004b58:	98001e26 	beq	r19,zero,1004bd4 <__sfvwrite_r+0x2f4>
 1004b5c:	d8c00017 	ldw	r3,0(sp)
 1004b60:	1804c03a 	cmpne	r2,r3,zero
 1004b64:	10005e26 	beq	r2,zero,1004ce0 <__sfvwrite_r+0x400>
 1004b68:	9821883a 	mov	r16,r19
 1004b6c:	a4c0012e 	bgeu	r20,r19,1004b74 <__sfvwrite_r+0x294>
 1004b70:	a021883a 	mov	r16,r20
 1004b74:	91000017 	ldw	r4,0(r18)
 1004b78:	90800417 	ldw	r2,16(r18)
 1004b7c:	91800217 	ldw	r6,8(r18)
 1004b80:	91c00517 	ldw	r7,20(r18)
 1004b84:	1100022e 	bgeu	r2,r4,1004b90 <__sfvwrite_r+0x2b0>
 1004b88:	31e3883a 	add	r17,r6,r7
 1004b8c:	8c001616 	blt	r17,r16,1004be8 <__sfvwrite_r+0x308>
 1004b90:	81c03816 	blt	r16,r7,1004c74 <__sfvwrite_r+0x394>
 1004b94:	90c00917 	ldw	r3,36(r18)
 1004b98:	91400717 	ldw	r5,28(r18)
 1004b9c:	e009883a 	mov	r4,fp
 1004ba0:	b80d883a 	mov	r6,r23
 1004ba4:	183ee83a 	callr	r3
 1004ba8:	1023883a 	mov	r17,r2
 1004bac:	00bfe10e 	bge	zero,r2,1004b34 <__sfvwrite_r+0x254>
 1004bb0:	a469c83a 	sub	r20,r20,r17
 1004bb4:	a0001826 	beq	r20,zero,1004c18 <__sfvwrite_r+0x338>
 1004bb8:	b0800217 	ldw	r2,8(r22)
 1004bbc:	1445c83a 	sub	r2,r2,r17
 1004bc0:	b0800215 	stw	r2,8(r22)
 1004bc4:	103f7226 	beq	r2,zero,1004990 <__sfvwrite_r+0xb0>
 1004bc8:	9c67c83a 	sub	r19,r19,r17
 1004bcc:	bc6f883a 	add	r23,r23,r17
 1004bd0:	983fe21e 	bne	r19,zero,1004b5c <__sfvwrite_r+0x27c>
 1004bd4:	adc00017 	ldw	r23,0(r21)
 1004bd8:	acc00117 	ldw	r19,4(r21)
 1004bdc:	ad400204 	addi	r21,r21,8
 1004be0:	d8000015 	stw	zero,0(sp)
 1004be4:	003fdc06 	br	1004b58 <__sfvwrite_r+0x278>
 1004be8:	b80b883a 	mov	r5,r23
 1004bec:	880d883a 	mov	r6,r17
 1004bf0:	1005a180 	call	1005a18 <memmove>
 1004bf4:	90c00017 	ldw	r3,0(r18)
 1004bf8:	e009883a 	mov	r4,fp
 1004bfc:	900b883a 	mov	r5,r18
 1004c00:	1c47883a 	add	r3,r3,r17
 1004c04:	90c00015 	stw	r3,0(r18)
 1004c08:	1003f7c0 	call	1003f7c <_fflush_r>
 1004c0c:	103fc91e 	bne	r2,zero,1004b34 <__sfvwrite_r+0x254>
 1004c10:	a469c83a 	sub	r20,r20,r17
 1004c14:	a03fe81e 	bne	r20,zero,1004bb8 <__sfvwrite_r+0x2d8>
 1004c18:	e009883a 	mov	r4,fp
 1004c1c:	900b883a 	mov	r5,r18
 1004c20:	1003f7c0 	call	1003f7c <_fflush_r>
 1004c24:	103fc31e 	bne	r2,zero,1004b34 <__sfvwrite_r+0x254>
 1004c28:	d8000015 	stw	zero,0(sp)
 1004c2c:	003fe206 	br	1004bb8 <__sfvwrite_r+0x2d8>
 1004c30:	91000017 	ldw	r4,0(r18)
 1004c34:	90800417 	ldw	r2,16(r18)
 1004c38:	1100022e 	bgeu	r2,r4,1004c44 <__sfvwrite_r+0x364>
 1004c3c:	8023883a 	mov	r17,r16
 1004c40:	85003136 	bltu	r16,r20,1004d08 <__sfvwrite_r+0x428>
 1004c44:	91c00517 	ldw	r7,20(r18)
 1004c48:	a1c01836 	bltu	r20,r7,1004cac <__sfvwrite_r+0x3cc>
 1004c4c:	90c00917 	ldw	r3,36(r18)
 1004c50:	91400717 	ldw	r5,28(r18)
 1004c54:	e009883a 	mov	r4,fp
 1004c58:	b80d883a 	mov	r6,r23
 1004c5c:	183ee83a 	callr	r3
 1004c60:	1021883a 	mov	r16,r2
 1004c64:	00bfb30e 	bge	zero,r2,1004b34 <__sfvwrite_r+0x254>
 1004c68:	1023883a 	mov	r17,r2
 1004c6c:	1027883a 	mov	r19,r2
 1004c70:	003f9b06 	br	1004ae0 <__sfvwrite_r+0x200>
 1004c74:	b80b883a 	mov	r5,r23
 1004c78:	800d883a 	mov	r6,r16
 1004c7c:	1005a180 	call	1005a18 <memmove>
 1004c80:	90c00217 	ldw	r3,8(r18)
 1004c84:	90800017 	ldw	r2,0(r18)
 1004c88:	8023883a 	mov	r17,r16
 1004c8c:	1c07c83a 	sub	r3,r3,r16
 1004c90:	1405883a 	add	r2,r2,r16
 1004c94:	90c00215 	stw	r3,8(r18)
 1004c98:	90800015 	stw	r2,0(r18)
 1004c9c:	003fc406 	br	1004bb0 <__sfvwrite_r+0x2d0>
 1004ca0:	a00d883a 	mov	r6,r20
 1004ca4:	a021883a 	mov	r16,r20
 1004ca8:	003f8106 	br	1004ab0 <__sfvwrite_r+0x1d0>
 1004cac:	b80b883a 	mov	r5,r23
 1004cb0:	a00d883a 	mov	r6,r20
 1004cb4:	1005a180 	call	1005a18 <memmove>
 1004cb8:	90c00217 	ldw	r3,8(r18)
 1004cbc:	90800017 	ldw	r2,0(r18)
 1004cc0:	a021883a 	mov	r16,r20
 1004cc4:	1d07c83a 	sub	r3,r3,r20
 1004cc8:	1505883a 	add	r2,r2,r20
 1004ccc:	a023883a 	mov	r17,r20
 1004cd0:	a027883a 	mov	r19,r20
 1004cd4:	90c00215 	stw	r3,8(r18)
 1004cd8:	90800015 	stw	r2,0(r18)
 1004cdc:	003f8006 	br	1004ae0 <__sfvwrite_r+0x200>
 1004ce0:	b809883a 	mov	r4,r23
 1004ce4:	01400284 	movi	r5,10
 1004ce8:	980d883a 	mov	r6,r19
 1004cec:	10058940 	call	1005894 <memchr>
 1004cf0:	10001726 	beq	r2,zero,1004d50 <__sfvwrite_r+0x470>
 1004cf4:	15c5c83a 	sub	r2,r2,r23
 1004cf8:	15000044 	addi	r20,r2,1
 1004cfc:	00800044 	movi	r2,1
 1004d00:	d8800015 	stw	r2,0(sp)
 1004d04:	003f9806 	br	1004b68 <__sfvwrite_r+0x288>
 1004d08:	b80b883a 	mov	r5,r23
 1004d0c:	800d883a 	mov	r6,r16
 1004d10:	1005a180 	call	1005a18 <memmove>
 1004d14:	90c00017 	ldw	r3,0(r18)
 1004d18:	e009883a 	mov	r4,fp
 1004d1c:	900b883a 	mov	r5,r18
 1004d20:	1c07883a 	add	r3,r3,r16
 1004d24:	90c00015 	stw	r3,0(r18)
 1004d28:	8027883a 	mov	r19,r16
 1004d2c:	1003f7c0 	call	1003f7c <_fflush_r>
 1004d30:	103f6b26 	beq	r2,zero,1004ae0 <__sfvwrite_r+0x200>
 1004d34:	003f7f06 	br	1004b34 <__sfvwrite_r+0x254>
 1004d38:	400b883a 	mov	r5,r8
 1004d3c:	e009883a 	mov	r4,fp
 1004d40:	1006c1c0 	call	1006c1c <_realloc_r>
 1004d44:	103f7626 	beq	r2,zero,1004b20 <__sfvwrite_r+0x240>
 1004d48:	1023883a 	mov	r17,r2
 1004d4c:	003f5006 	br	1004a90 <__sfvwrite_r+0x1b0>
 1004d50:	00c00044 	movi	r3,1
 1004d54:	9d000044 	addi	r20,r19,1
 1004d58:	d8c00015 	stw	r3,0(sp)
 1004d5c:	003f8206 	br	1004b68 <__sfvwrite_r+0x288>
 1004d60:	9080030b 	ldhu	r2,12(r18)
 1004d64:	00c00244 	movi	r3,9
 1004d68:	013fffc4 	movi	r4,-1
 1004d6c:	10801014 	ori	r2,r2,64
 1004d70:	9080030d 	sth	r2,12(r18)
 1004d74:	e0c00015 	stw	r3,0(fp)
 1004d78:	003f0606 	br	1004994 <__sfvwrite_r+0xb4>

01004d7c <_fwalk_reent>:
 1004d7c:	defff704 	addi	sp,sp,-36
 1004d80:	dcc00315 	stw	r19,12(sp)
 1004d84:	24c0b804 	addi	r19,r4,736
 1004d88:	dd800615 	stw	r22,24(sp)
 1004d8c:	dd400515 	stw	r21,20(sp)
 1004d90:	dfc00815 	stw	ra,32(sp)
 1004d94:	ddc00715 	stw	r23,28(sp)
 1004d98:	dd000415 	stw	r20,16(sp)
 1004d9c:	dc800215 	stw	r18,8(sp)
 1004da0:	dc400115 	stw	r17,4(sp)
 1004da4:	dc000015 	stw	r16,0(sp)
 1004da8:	202b883a 	mov	r21,r4
 1004dac:	282d883a 	mov	r22,r5
 1004db0:	10042040 	call	1004204 <__sfp_lock_acquire>
 1004db4:	98002126 	beq	r19,zero,1004e3c <_fwalk_reent+0xc0>
 1004db8:	002f883a 	mov	r23,zero
 1004dbc:	9c800117 	ldw	r18,4(r19)
 1004dc0:	9c000217 	ldw	r16,8(r19)
 1004dc4:	90bfffc4 	addi	r2,r18,-1
 1004dc8:	10000d16 	blt	r2,zero,1004e00 <_fwalk_reent+0x84>
 1004dcc:	0023883a 	mov	r17,zero
 1004dd0:	053fffc4 	movi	r20,-1
 1004dd4:	8080030f 	ldh	r2,12(r16)
 1004dd8:	8c400044 	addi	r17,r17,1
 1004ddc:	10000626 	beq	r2,zero,1004df8 <_fwalk_reent+0x7c>
 1004de0:	8080038f 	ldh	r2,14(r16)
 1004de4:	800b883a 	mov	r5,r16
 1004de8:	a809883a 	mov	r4,r21
 1004dec:	15000226 	beq	r2,r20,1004df8 <_fwalk_reent+0x7c>
 1004df0:	b03ee83a 	callr	r22
 1004df4:	b8aeb03a 	or	r23,r23,r2
 1004df8:	84001704 	addi	r16,r16,92
 1004dfc:	947ff51e 	bne	r18,r17,1004dd4 <_fwalk_reent+0x58>
 1004e00:	9cc00017 	ldw	r19,0(r19)
 1004e04:	983fed1e 	bne	r19,zero,1004dbc <_fwalk_reent+0x40>
 1004e08:	10042080 	call	1004208 <__sfp_lock_release>
 1004e0c:	b805883a 	mov	r2,r23
 1004e10:	dfc00817 	ldw	ra,32(sp)
 1004e14:	ddc00717 	ldw	r23,28(sp)
 1004e18:	dd800617 	ldw	r22,24(sp)
 1004e1c:	dd400517 	ldw	r21,20(sp)
 1004e20:	dd000417 	ldw	r20,16(sp)
 1004e24:	dcc00317 	ldw	r19,12(sp)
 1004e28:	dc800217 	ldw	r18,8(sp)
 1004e2c:	dc400117 	ldw	r17,4(sp)
 1004e30:	dc000017 	ldw	r16,0(sp)
 1004e34:	dec00904 	addi	sp,sp,36
 1004e38:	f800283a 	ret
 1004e3c:	002f883a 	mov	r23,zero
 1004e40:	003ff106 	br	1004e08 <_fwalk_reent+0x8c>

01004e44 <_fwalk>:
 1004e44:	defff804 	addi	sp,sp,-32
 1004e48:	dcc00315 	stw	r19,12(sp)
 1004e4c:	24c0b804 	addi	r19,r4,736
 1004e50:	dd400515 	stw	r21,20(sp)
 1004e54:	dfc00715 	stw	ra,28(sp)
 1004e58:	dd800615 	stw	r22,24(sp)
 1004e5c:	dd000415 	stw	r20,16(sp)
 1004e60:	dc800215 	stw	r18,8(sp)
 1004e64:	dc400115 	stw	r17,4(sp)
 1004e68:	dc000015 	stw	r16,0(sp)
 1004e6c:	282b883a 	mov	r21,r5
 1004e70:	10042040 	call	1004204 <__sfp_lock_acquire>
 1004e74:	98001f26 	beq	r19,zero,1004ef4 <_fwalk+0xb0>
 1004e78:	002d883a 	mov	r22,zero
 1004e7c:	9c800117 	ldw	r18,4(r19)
 1004e80:	9c000217 	ldw	r16,8(r19)
 1004e84:	90bfffc4 	addi	r2,r18,-1
 1004e88:	10000c16 	blt	r2,zero,1004ebc <_fwalk+0x78>
 1004e8c:	0023883a 	mov	r17,zero
 1004e90:	053fffc4 	movi	r20,-1
 1004e94:	8080030f 	ldh	r2,12(r16)
 1004e98:	8c400044 	addi	r17,r17,1
 1004e9c:	10000526 	beq	r2,zero,1004eb4 <_fwalk+0x70>
 1004ea0:	8080038f 	ldh	r2,14(r16)
 1004ea4:	8009883a 	mov	r4,r16
 1004ea8:	15000226 	beq	r2,r20,1004eb4 <_fwalk+0x70>
 1004eac:	a83ee83a 	callr	r21
 1004eb0:	b0acb03a 	or	r22,r22,r2
 1004eb4:	84001704 	addi	r16,r16,92
 1004eb8:	947ff61e 	bne	r18,r17,1004e94 <_fwalk+0x50>
 1004ebc:	9cc00017 	ldw	r19,0(r19)
 1004ec0:	983fee1e 	bne	r19,zero,1004e7c <_fwalk+0x38>
 1004ec4:	10042080 	call	1004208 <__sfp_lock_release>
 1004ec8:	b005883a 	mov	r2,r22
 1004ecc:	dfc00717 	ldw	ra,28(sp)
 1004ed0:	dd800617 	ldw	r22,24(sp)
 1004ed4:	dd400517 	ldw	r21,20(sp)
 1004ed8:	dd000417 	ldw	r20,16(sp)
 1004edc:	dcc00317 	ldw	r19,12(sp)
 1004ee0:	dc800217 	ldw	r18,8(sp)
 1004ee4:	dc400117 	ldw	r17,4(sp)
 1004ee8:	dc000017 	ldw	r16,0(sp)
 1004eec:	dec00804 	addi	sp,sp,32
 1004ef0:	f800283a 	ret
 1004ef4:	002d883a 	mov	r22,zero
 1004ef8:	003ff206 	br	1004ec4 <_fwalk+0x80>

01004efc <__locale_charset>:
 1004efc:	d0a00317 	ldw	r2,-32756(gp)
 1004f00:	f800283a 	ret

01004f04 <_localeconv_r>:
 1004f04:	00804074 	movhi	r2,257
 1004f08:	1097e504 	addi	r2,r2,24468
 1004f0c:	f800283a 	ret

01004f10 <localeconv>:
 1004f10:	00804074 	movhi	r2,257
 1004f14:	109f6e04 	addi	r2,r2,32184
 1004f18:	11000017 	ldw	r4,0(r2)
 1004f1c:	1004f041 	jmpi	1004f04 <_localeconv_r>

01004f20 <_setlocale_r>:
 1004f20:	defffc04 	addi	sp,sp,-16
 1004f24:	00c04074 	movhi	r3,257
 1004f28:	18d7e004 	addi	r3,r3,24448
 1004f2c:	dc800215 	stw	r18,8(sp)
 1004f30:	dc400115 	stw	r17,4(sp)
 1004f34:	dc000015 	stw	r16,0(sp)
 1004f38:	2023883a 	mov	r17,r4
 1004f3c:	2825883a 	mov	r18,r5
 1004f40:	dfc00315 	stw	ra,12(sp)
 1004f44:	3021883a 	mov	r16,r6
 1004f48:	3009883a 	mov	r4,r6
 1004f4c:	180b883a 	mov	r5,r3
 1004f50:	30000926 	beq	r6,zero,1004f78 <_setlocale_r+0x58>
 1004f54:	100743c0 	call	100743c <strcmp>
 1004f58:	8009883a 	mov	r4,r16
 1004f5c:	01404074 	movhi	r5,257
 1004f60:	2957cb04 	addi	r5,r5,24364
 1004f64:	10000b1e 	bne	r2,zero,1004f94 <_setlocale_r+0x74>
 1004f68:	8c000d15 	stw	r16,52(r17)
 1004f6c:	8c800c15 	stw	r18,48(r17)
 1004f70:	00c04074 	movhi	r3,257
 1004f74:	18d7e004 	addi	r3,r3,24448
 1004f78:	1805883a 	mov	r2,r3
 1004f7c:	dfc00317 	ldw	ra,12(sp)
 1004f80:	dc800217 	ldw	r18,8(sp)
 1004f84:	dc400117 	ldw	r17,4(sp)
 1004f88:	dc000017 	ldw	r16,0(sp)
 1004f8c:	dec00404 	addi	sp,sp,16
 1004f90:	f800283a 	ret
 1004f94:	100743c0 	call	100743c <strcmp>
 1004f98:	0007883a 	mov	r3,zero
 1004f9c:	103ff226 	beq	r2,zero,1004f68 <_setlocale_r+0x48>
 1004fa0:	003ff506 	br	1004f78 <_setlocale_r+0x58>

01004fa4 <setlocale>:
 1004fa4:	01804074 	movhi	r6,257
 1004fa8:	319f6e04 	addi	r6,r6,32184
 1004fac:	2007883a 	mov	r3,r4
 1004fb0:	31000017 	ldw	r4,0(r6)
 1004fb4:	280d883a 	mov	r6,r5
 1004fb8:	180b883a 	mov	r5,r3
 1004fbc:	1004f201 	jmpi	1004f20 <_setlocale_r>

01004fc0 <__smakebuf_r>:
 1004fc0:	2880030b 	ldhu	r2,12(r5)
 1004fc4:	deffed04 	addi	sp,sp,-76
 1004fc8:	dc401015 	stw	r17,64(sp)
 1004fcc:	1080008c 	andi	r2,r2,2
 1004fd0:	dc000f15 	stw	r16,60(sp)
 1004fd4:	dfc01215 	stw	ra,72(sp)
 1004fd8:	dc801115 	stw	r18,68(sp)
 1004fdc:	2821883a 	mov	r16,r5
 1004fe0:	2023883a 	mov	r17,r4
 1004fe4:	10000b26 	beq	r2,zero,1005014 <__smakebuf_r+0x54>
 1004fe8:	28c010c4 	addi	r3,r5,67
 1004fec:	00800044 	movi	r2,1
 1004ff0:	28800515 	stw	r2,20(r5)
 1004ff4:	28c00415 	stw	r3,16(r5)
 1004ff8:	28c00015 	stw	r3,0(r5)
 1004ffc:	dfc01217 	ldw	ra,72(sp)
 1005000:	dc801117 	ldw	r18,68(sp)
 1005004:	dc401017 	ldw	r17,64(sp)
 1005008:	dc000f17 	ldw	r16,60(sp)
 100500c:	dec01304 	addi	sp,sp,76
 1005010:	f800283a 	ret
 1005014:	2940038f 	ldh	r5,14(r5)
 1005018:	28002116 	blt	r5,zero,10050a0 <__smakebuf_r+0xe0>
 100501c:	d80d883a 	mov	r6,sp
 1005020:	10077cc0 	call	10077cc <_fstat_r>
 1005024:	10001e16 	blt	r2,zero,10050a0 <__smakebuf_r+0xe0>
 1005028:	d8800117 	ldw	r2,4(sp)
 100502c:	00e00014 	movui	r3,32768
 1005030:	113c000c 	andi	r4,r2,61440
 1005034:	20c03126 	beq	r4,r3,10050fc <__smakebuf_r+0x13c>
 1005038:	8080030b 	ldhu	r2,12(r16)
 100503c:	00c80004 	movi	r3,8192
 1005040:	10820014 	ori	r2,r2,2048
 1005044:	8080030d 	sth	r2,12(r16)
 1005048:	20c01e26 	beq	r4,r3,10050c4 <__smakebuf_r+0x104>
 100504c:	04810004 	movi	r18,1024
 1005050:	8809883a 	mov	r4,r17
 1005054:	900b883a 	mov	r5,r18
 1005058:	10051540 	call	1005154 <_malloc_r>
 100505c:	1009883a 	mov	r4,r2
 1005060:	10003126 	beq	r2,zero,1005128 <__smakebuf_r+0x168>
 1005064:	80c0030b 	ldhu	r3,12(r16)
 1005068:	00804034 	movhi	r2,256
 100506c:	1090be04 	addi	r2,r2,17144
 1005070:	88800f15 	stw	r2,60(r17)
 1005074:	18c02014 	ori	r3,r3,128
 1005078:	84800515 	stw	r18,20(r16)
 100507c:	80c0030d 	sth	r3,12(r16)
 1005080:	81000415 	stw	r4,16(r16)
 1005084:	81000015 	stw	r4,0(r16)
 1005088:	dfc01217 	ldw	ra,72(sp)
 100508c:	dc801117 	ldw	r18,68(sp)
 1005090:	dc401017 	ldw	r17,64(sp)
 1005094:	dc000f17 	ldw	r16,60(sp)
 1005098:	dec01304 	addi	sp,sp,76
 100509c:	f800283a 	ret
 10050a0:	80c0030b 	ldhu	r3,12(r16)
 10050a4:	1880200c 	andi	r2,r3,128
 10050a8:	10000426 	beq	r2,zero,10050bc <__smakebuf_r+0xfc>
 10050ac:	04801004 	movi	r18,64
 10050b0:	18820014 	ori	r2,r3,2048
 10050b4:	8080030d 	sth	r2,12(r16)
 10050b8:	003fe506 	br	1005050 <__smakebuf_r+0x90>
 10050bc:	04810004 	movi	r18,1024
 10050c0:	003ffb06 	br	10050b0 <__smakebuf_r+0xf0>
 10050c4:	8140038f 	ldh	r5,14(r16)
 10050c8:	8809883a 	mov	r4,r17
 10050cc:	10078400 	call	1007840 <_isatty_r>
 10050d0:	103fde26 	beq	r2,zero,100504c <__smakebuf_r+0x8c>
 10050d4:	8080030b 	ldhu	r2,12(r16)
 10050d8:	80c010c4 	addi	r3,r16,67
 10050dc:	04810004 	movi	r18,1024
 10050e0:	10800054 	ori	r2,r2,1
 10050e4:	8080030d 	sth	r2,12(r16)
 10050e8:	00800044 	movi	r2,1
 10050ec:	80c00415 	stw	r3,16(r16)
 10050f0:	80800515 	stw	r2,20(r16)
 10050f4:	80c00015 	stw	r3,0(r16)
 10050f8:	003fd506 	br	1005050 <__smakebuf_r+0x90>
 10050fc:	80c00a17 	ldw	r3,40(r16)
 1005100:	00804034 	movhi	r2,256
 1005104:	109cbe04 	addi	r2,r2,29432
 1005108:	18bfcb1e 	bne	r3,r2,1005038 <__smakebuf_r+0x78>
 100510c:	8080030b 	ldhu	r2,12(r16)
 1005110:	00c10004 	movi	r3,1024
 1005114:	1825883a 	mov	r18,r3
 1005118:	10c4b03a 	or	r2,r2,r3
 100511c:	8080030d 	sth	r2,12(r16)
 1005120:	80c01315 	stw	r3,76(r16)
 1005124:	003fca06 	br	1005050 <__smakebuf_r+0x90>
 1005128:	8100030b 	ldhu	r4,12(r16)
 100512c:	2080800c 	andi	r2,r4,512
 1005130:	103fb21e 	bne	r2,zero,1004ffc <__smakebuf_r+0x3c>
 1005134:	80c010c4 	addi	r3,r16,67
 1005138:	21000094 	ori	r4,r4,2
 100513c:	00800044 	movi	r2,1
 1005140:	80800515 	stw	r2,20(r16)
 1005144:	8100030d 	sth	r4,12(r16)
 1005148:	80c00415 	stw	r3,16(r16)
 100514c:	80c00015 	stw	r3,0(r16)
 1005150:	003faa06 	br	1004ffc <__smakebuf_r+0x3c>

01005154 <_malloc_r>:
 1005154:	defff604 	addi	sp,sp,-40
 1005158:	28c002c4 	addi	r3,r5,11
 100515c:	00800584 	movi	r2,22
 1005160:	dc800215 	stw	r18,8(sp)
 1005164:	dfc00915 	stw	ra,36(sp)
 1005168:	df000815 	stw	fp,32(sp)
 100516c:	ddc00715 	stw	r23,28(sp)
 1005170:	dd800615 	stw	r22,24(sp)
 1005174:	dd400515 	stw	r21,20(sp)
 1005178:	dd000415 	stw	r20,16(sp)
 100517c:	dcc00315 	stw	r19,12(sp)
 1005180:	dc400115 	stw	r17,4(sp)
 1005184:	dc000015 	stw	r16,0(sp)
 1005188:	2025883a 	mov	r18,r4
 100518c:	10c01236 	bltu	r2,r3,10051d8 <_malloc_r+0x84>
 1005190:	04400404 	movi	r17,16
 1005194:	8940142e 	bgeu	r17,r5,10051e8 <_malloc_r+0x94>
 1005198:	00800304 	movi	r2,12
 100519c:	0007883a 	mov	r3,zero
 10051a0:	90800015 	stw	r2,0(r18)
 10051a4:	1805883a 	mov	r2,r3
 10051a8:	dfc00917 	ldw	ra,36(sp)
 10051ac:	df000817 	ldw	fp,32(sp)
 10051b0:	ddc00717 	ldw	r23,28(sp)
 10051b4:	dd800617 	ldw	r22,24(sp)
 10051b8:	dd400517 	ldw	r21,20(sp)
 10051bc:	dd000417 	ldw	r20,16(sp)
 10051c0:	dcc00317 	ldw	r19,12(sp)
 10051c4:	dc800217 	ldw	r18,8(sp)
 10051c8:	dc400117 	ldw	r17,4(sp)
 10051cc:	dc000017 	ldw	r16,0(sp)
 10051d0:	dec00a04 	addi	sp,sp,40
 10051d4:	f800283a 	ret
 10051d8:	00bffe04 	movi	r2,-8
 10051dc:	18a2703a 	and	r17,r3,r2
 10051e0:	883fed16 	blt	r17,zero,1005198 <_malloc_r+0x44>
 10051e4:	897fec36 	bltu	r17,r5,1005198 <_malloc_r+0x44>
 10051e8:	9009883a 	mov	r4,r18
 10051ec:	100ac080 	call	100ac08 <__malloc_lock>
 10051f0:	00807dc4 	movi	r2,503
 10051f4:	14402b2e 	bgeu	r2,r17,10052a4 <_malloc_r+0x150>
 10051f8:	8806d27a 	srli	r3,r17,9
 10051fc:	18003f1e 	bne	r3,zero,10052fc <_malloc_r+0x1a8>
 1005200:	880cd0fa 	srli	r6,r17,3
 1005204:	300490fa 	slli	r2,r6,3
 1005208:	02c04074 	movhi	r11,257
 100520c:	5ad9dc04 	addi	r11,r11,26480
 1005210:	12cb883a 	add	r5,r2,r11
 1005214:	2c000317 	ldw	r16,12(r5)
 1005218:	580f883a 	mov	r7,r11
 100521c:	2c00041e 	bne	r5,r16,1005230 <_malloc_r+0xdc>
 1005220:	00000a06 	br	100524c <_malloc_r+0xf8>
 1005224:	1800860e 	bge	r3,zero,1005440 <_malloc_r+0x2ec>
 1005228:	84000317 	ldw	r16,12(r16)
 100522c:	2c000726 	beq	r5,r16,100524c <_malloc_r+0xf8>
 1005230:	80800117 	ldw	r2,4(r16)
 1005234:	00ffff04 	movi	r3,-4
 1005238:	10c8703a 	and	r4,r2,r3
 100523c:	2447c83a 	sub	r3,r4,r17
 1005240:	008003c4 	movi	r2,15
 1005244:	10fff70e 	bge	r2,r3,1005224 <_malloc_r+0xd0>
 1005248:	31bfffc4 	addi	r6,r6,-1
 100524c:	32400044 	addi	r9,r6,1
 1005250:	02804074 	movhi	r10,257
 1005254:	5299de04 	addi	r10,r10,26488
 1005258:	54000217 	ldw	r16,8(r10)
 100525c:	8280a026 	beq	r16,r10,10054e0 <_malloc_r+0x38c>
 1005260:	80800117 	ldw	r2,4(r16)
 1005264:	00ffff04 	movi	r3,-4
 1005268:	10ca703a 	and	r5,r2,r3
 100526c:	2c4dc83a 	sub	r6,r5,r17
 1005270:	008003c4 	movi	r2,15
 1005274:	11808316 	blt	r2,r6,1005484 <_malloc_r+0x330>
 1005278:	52800315 	stw	r10,12(r10)
 100527c:	52800215 	stw	r10,8(r10)
 1005280:	30002916 	blt	r6,zero,1005328 <_malloc_r+0x1d4>
 1005284:	8147883a 	add	r3,r16,r5
 1005288:	18800117 	ldw	r2,4(r3)
 100528c:	9009883a 	mov	r4,r18
 1005290:	10800054 	ori	r2,r2,1
 1005294:	18800115 	stw	r2,4(r3)
 1005298:	100ad100 	call	100ad10 <__malloc_unlock>
 100529c:	80c00204 	addi	r3,r16,8
 10052a0:	003fc006 	br	10051a4 <_malloc_r+0x50>
 10052a4:	02c04074 	movhi	r11,257
 10052a8:	5ad9dc04 	addi	r11,r11,26480
 10052ac:	8ac5883a 	add	r2,r17,r11
 10052b0:	14000317 	ldw	r16,12(r2)
 10052b4:	580f883a 	mov	r7,r11
 10052b8:	8806d0fa 	srli	r3,r17,3
 10052bc:	14006c26 	beq	r2,r16,1005470 <_malloc_r+0x31c>
 10052c0:	80c00117 	ldw	r3,4(r16)
 10052c4:	00bfff04 	movi	r2,-4
 10052c8:	81800317 	ldw	r6,12(r16)
 10052cc:	1886703a 	and	r3,r3,r2
 10052d0:	80c7883a 	add	r3,r16,r3
 10052d4:	18800117 	ldw	r2,4(r3)
 10052d8:	81400217 	ldw	r5,8(r16)
 10052dc:	9009883a 	mov	r4,r18
 10052e0:	10800054 	ori	r2,r2,1
 10052e4:	18800115 	stw	r2,4(r3)
 10052e8:	31400215 	stw	r5,8(r6)
 10052ec:	29800315 	stw	r6,12(r5)
 10052f0:	100ad100 	call	100ad10 <__malloc_unlock>
 10052f4:	80c00204 	addi	r3,r16,8
 10052f8:	003faa06 	br	10051a4 <_malloc_r+0x50>
 10052fc:	00800104 	movi	r2,4
 1005300:	10c0052e 	bgeu	r2,r3,1005318 <_malloc_r+0x1c4>
 1005304:	00800504 	movi	r2,20
 1005308:	10c07836 	bltu	r2,r3,10054ec <_malloc_r+0x398>
 100530c:	198016c4 	addi	r6,r3,91
 1005310:	300490fa 	slli	r2,r6,3
 1005314:	003fbc06 	br	1005208 <_malloc_r+0xb4>
 1005318:	8804d1ba 	srli	r2,r17,6
 100531c:	11800e04 	addi	r6,r2,56
 1005320:	300490fa 	slli	r2,r6,3
 1005324:	003fb806 	br	1005208 <_malloc_r+0xb4>
 1005328:	00807fc4 	movi	r2,511
 100532c:	1140bb36 	bltu	r2,r5,100561c <_malloc_r+0x4c8>
 1005330:	2806d0fa 	srli	r3,r5,3
 1005334:	573ffe04 	addi	fp,r10,-8
 1005338:	00800044 	movi	r2,1
 100533c:	180890fa 	slli	r4,r3,3
 1005340:	1807d0ba 	srai	r3,r3,2
 1005344:	e1c00117 	ldw	r7,4(fp)
 1005348:	5909883a 	add	r4,r11,r4
 100534c:	21400217 	ldw	r5,8(r4)
 1005350:	10c4983a 	sll	r2,r2,r3
 1005354:	81000315 	stw	r4,12(r16)
 1005358:	81400215 	stw	r5,8(r16)
 100535c:	388eb03a 	or	r7,r7,r2
 1005360:	2c000315 	stw	r16,12(r5)
 1005364:	24000215 	stw	r16,8(r4)
 1005368:	e1c00115 	stw	r7,4(fp)
 100536c:	4807883a 	mov	r3,r9
 1005370:	4800cd16 	blt	r9,zero,10056a8 <_malloc_r+0x554>
 1005374:	1807d0ba 	srai	r3,r3,2
 1005378:	00800044 	movi	r2,1
 100537c:	10c8983a 	sll	r4,r2,r3
 1005380:	39004436 	bltu	r7,r4,1005494 <_malloc_r+0x340>
 1005384:	21c4703a 	and	r2,r4,r7
 1005388:	10000a1e 	bne	r2,zero,10053b4 <_malloc_r+0x260>
 100538c:	2109883a 	add	r4,r4,r4
 1005390:	00bfff04 	movi	r2,-4
 1005394:	4884703a 	and	r2,r9,r2
 1005398:	3906703a 	and	r3,r7,r4
 100539c:	12400104 	addi	r9,r2,4
 10053a0:	1800041e 	bne	r3,zero,10053b4 <_malloc_r+0x260>
 10053a4:	2109883a 	add	r4,r4,r4
 10053a8:	3904703a 	and	r2,r7,r4
 10053ac:	4a400104 	addi	r9,r9,4
 10053b0:	103ffc26 	beq	r2,zero,10053a4 <_malloc_r+0x250>
 10053b4:	480490fa 	slli	r2,r9,3
 10053b8:	4819883a 	mov	r12,r9
 10053bc:	023fff04 	movi	r8,-4
 10053c0:	589b883a 	add	r13,r11,r2
 10053c4:	6807883a 	mov	r3,r13
 10053c8:	014003c4 	movi	r5,15
 10053cc:	1c000317 	ldw	r16,12(r3)
 10053d0:	1c00041e 	bne	r3,r16,10053e4 <_malloc_r+0x290>
 10053d4:	0000a706 	br	1005674 <_malloc_r+0x520>
 10053d8:	3000ab0e 	bge	r6,zero,1005688 <_malloc_r+0x534>
 10053dc:	84000317 	ldw	r16,12(r16)
 10053e0:	1c00a426 	beq	r3,r16,1005674 <_malloc_r+0x520>
 10053e4:	80800117 	ldw	r2,4(r16)
 10053e8:	1204703a 	and	r2,r2,r8
 10053ec:	144dc83a 	sub	r6,r2,r17
 10053f0:	29bff90e 	bge	r5,r6,10053d8 <_malloc_r+0x284>
 10053f4:	81000317 	ldw	r4,12(r16)
 10053f8:	80c00217 	ldw	r3,8(r16)
 10053fc:	89400054 	ori	r5,r17,1
 1005400:	8445883a 	add	r2,r16,r17
 1005404:	20c00215 	stw	r3,8(r4)
 1005408:	19000315 	stw	r4,12(r3)
 100540c:	81400115 	stw	r5,4(r16)
 1005410:	1187883a 	add	r3,r2,r6
 1005414:	31000054 	ori	r4,r6,1
 1005418:	50800315 	stw	r2,12(r10)
 100541c:	50800215 	stw	r2,8(r10)
 1005420:	19800015 	stw	r6,0(r3)
 1005424:	11000115 	stw	r4,4(r2)
 1005428:	12800215 	stw	r10,8(r2)
 100542c:	12800315 	stw	r10,12(r2)
 1005430:	9009883a 	mov	r4,r18
 1005434:	100ad100 	call	100ad10 <__malloc_unlock>
 1005438:	80c00204 	addi	r3,r16,8
 100543c:	003f5906 	br	10051a4 <_malloc_r+0x50>
 1005440:	8109883a 	add	r4,r16,r4
 1005444:	20800117 	ldw	r2,4(r4)
 1005448:	80c00217 	ldw	r3,8(r16)
 100544c:	81400317 	ldw	r5,12(r16)
 1005450:	10800054 	ori	r2,r2,1
 1005454:	20800115 	stw	r2,4(r4)
 1005458:	28c00215 	stw	r3,8(r5)
 100545c:	19400315 	stw	r5,12(r3)
 1005460:	9009883a 	mov	r4,r18
 1005464:	100ad100 	call	100ad10 <__malloc_unlock>
 1005468:	80c00204 	addi	r3,r16,8
 100546c:	003f4d06 	br	10051a4 <_malloc_r+0x50>
 1005470:	80800204 	addi	r2,r16,8
 1005474:	14000317 	ldw	r16,12(r2)
 1005478:	143f911e 	bne	r2,r16,10052c0 <_malloc_r+0x16c>
 100547c:	1a400084 	addi	r9,r3,2
 1005480:	003f7306 	br	1005250 <_malloc_r+0xfc>
 1005484:	88c00054 	ori	r3,r17,1
 1005488:	8445883a 	add	r2,r16,r17
 100548c:	80c00115 	stw	r3,4(r16)
 1005490:	003fdf06 	br	1005410 <_malloc_r+0x2bc>
 1005494:	e4000217 	ldw	r16,8(fp)
 1005498:	00bfff04 	movi	r2,-4
 100549c:	80c00117 	ldw	r3,4(r16)
 10054a0:	802d883a 	mov	r22,r16
 10054a4:	18aa703a 	and	r21,r3,r2
 10054a8:	ac401636 	bltu	r21,r17,1005504 <_malloc_r+0x3b0>
 10054ac:	ac49c83a 	sub	r4,r21,r17
 10054b0:	008003c4 	movi	r2,15
 10054b4:	1100130e 	bge	r2,r4,1005504 <_malloc_r+0x3b0>
 10054b8:	88800054 	ori	r2,r17,1
 10054bc:	8447883a 	add	r3,r16,r17
 10054c0:	80800115 	stw	r2,4(r16)
 10054c4:	20800054 	ori	r2,r4,1
 10054c8:	18800115 	stw	r2,4(r3)
 10054cc:	e0c00215 	stw	r3,8(fp)
 10054d0:	9009883a 	mov	r4,r18
 10054d4:	100ad100 	call	100ad10 <__malloc_unlock>
 10054d8:	80c00204 	addi	r3,r16,8
 10054dc:	003f3106 	br	10051a4 <_malloc_r+0x50>
 10054e0:	39c00117 	ldw	r7,4(r7)
 10054e4:	573ffe04 	addi	fp,r10,-8
 10054e8:	003fa006 	br	100536c <_malloc_r+0x218>
 10054ec:	00801504 	movi	r2,84
 10054f0:	10c06736 	bltu	r2,r3,1005690 <_malloc_r+0x53c>
 10054f4:	8804d33a 	srli	r2,r17,12
 10054f8:	11801b84 	addi	r6,r2,110
 10054fc:	300490fa 	slli	r2,r6,3
 1005500:	003f4106 	br	1005208 <_malloc_r+0xb4>
 1005504:	d0a6fc17 	ldw	r2,-25616(gp)
 1005508:	d0e00517 	ldw	r3,-32748(gp)
 100550c:	053fffc4 	movi	r20,-1
 1005510:	10800404 	addi	r2,r2,16
 1005514:	88a7883a 	add	r19,r17,r2
 1005518:	1d000326 	beq	r3,r20,1005528 <_malloc_r+0x3d4>
 100551c:	98c3ffc4 	addi	r3,r19,4095
 1005520:	00bc0004 	movi	r2,-4096
 1005524:	18a6703a 	and	r19,r3,r2
 1005528:	9009883a 	mov	r4,r18
 100552c:	980b883a 	mov	r5,r19
 1005530:	10072800 	call	1007280 <_sbrk_r>
 1005534:	1009883a 	mov	r4,r2
 1005538:	15000426 	beq	r2,r20,100554c <_malloc_r+0x3f8>
 100553c:	854b883a 	add	r5,r16,r21
 1005540:	1029883a 	mov	r20,r2
 1005544:	11405a2e 	bgeu	r2,r5,10056b0 <_malloc_r+0x55c>
 1005548:	87000c26 	beq	r16,fp,100557c <_malloc_r+0x428>
 100554c:	e4000217 	ldw	r16,8(fp)
 1005550:	80c00117 	ldw	r3,4(r16)
 1005554:	00bfff04 	movi	r2,-4
 1005558:	1884703a 	and	r2,r3,r2
 100555c:	14400336 	bltu	r2,r17,100556c <_malloc_r+0x418>
 1005560:	1449c83a 	sub	r4,r2,r17
 1005564:	008003c4 	movi	r2,15
 1005568:	113fd316 	blt	r2,r4,10054b8 <_malloc_r+0x364>
 100556c:	9009883a 	mov	r4,r18
 1005570:	100ad100 	call	100ad10 <__malloc_unlock>
 1005574:	0007883a 	mov	r3,zero
 1005578:	003f0a06 	br	10051a4 <_malloc_r+0x50>
 100557c:	05c040b4 	movhi	r23,258
 1005580:	bde68d04 	addi	r23,r23,-26060
 1005584:	b8800017 	ldw	r2,0(r23)
 1005588:	988d883a 	add	r6,r19,r2
 100558c:	b9800015 	stw	r6,0(r23)
 1005590:	d0e00517 	ldw	r3,-32748(gp)
 1005594:	00bfffc4 	movi	r2,-1
 1005598:	18808e26 	beq	r3,r2,10057d4 <_malloc_r+0x680>
 100559c:	2145c83a 	sub	r2,r4,r5
 10055a0:	3085883a 	add	r2,r6,r2
 10055a4:	b8800015 	stw	r2,0(r23)
 10055a8:	20c001cc 	andi	r3,r4,7
 10055ac:	18005f1e 	bne	r3,zero,100572c <_malloc_r+0x5d8>
 10055b0:	000b883a 	mov	r5,zero
 10055b4:	a4c5883a 	add	r2,r20,r19
 10055b8:	1083ffcc 	andi	r2,r2,4095
 10055bc:	00c40004 	movi	r3,4096
 10055c0:	1887c83a 	sub	r3,r3,r2
 10055c4:	28e7883a 	add	r19,r5,r3
 10055c8:	9009883a 	mov	r4,r18
 10055cc:	980b883a 	mov	r5,r19
 10055d0:	10072800 	call	1007280 <_sbrk_r>
 10055d4:	1007883a 	mov	r3,r2
 10055d8:	00bfffc4 	movi	r2,-1
 10055dc:	18807a26 	beq	r3,r2,10057c8 <_malloc_r+0x674>
 10055e0:	1d05c83a 	sub	r2,r3,r20
 10055e4:	9885883a 	add	r2,r19,r2
 10055e8:	10c00054 	ori	r3,r2,1
 10055ec:	b8800017 	ldw	r2,0(r23)
 10055f0:	a021883a 	mov	r16,r20
 10055f4:	a0c00115 	stw	r3,4(r20)
 10055f8:	9885883a 	add	r2,r19,r2
 10055fc:	b8800015 	stw	r2,0(r23)
 1005600:	e5000215 	stw	r20,8(fp)
 1005604:	b7003626 	beq	r22,fp,10056e0 <_malloc_r+0x58c>
 1005608:	018003c4 	movi	r6,15
 100560c:	35404b36 	bltu	r6,r21,100573c <_malloc_r+0x5e8>
 1005610:	00800044 	movi	r2,1
 1005614:	a0800115 	stw	r2,4(r20)
 1005618:	003fcd06 	br	1005550 <_malloc_r+0x3fc>
 100561c:	2808d27a 	srli	r4,r5,9
 1005620:	2000371e 	bne	r4,zero,1005700 <_malloc_r+0x5ac>
 1005624:	2808d0fa 	srli	r4,r5,3
 1005628:	200690fa 	slli	r3,r4,3
 100562c:	1ad1883a 	add	r8,r3,r11
 1005630:	41800217 	ldw	r6,8(r8)
 1005634:	41805b26 	beq	r8,r6,10057a4 <_malloc_r+0x650>
 1005638:	30800117 	ldw	r2,4(r6)
 100563c:	00ffff04 	movi	r3,-4
 1005640:	10c4703a 	and	r2,r2,r3
 1005644:	2880022e 	bgeu	r5,r2,1005650 <_malloc_r+0x4fc>
 1005648:	31800217 	ldw	r6,8(r6)
 100564c:	41bffa1e 	bne	r8,r6,1005638 <_malloc_r+0x4e4>
 1005650:	32000317 	ldw	r8,12(r6)
 1005654:	39c00117 	ldw	r7,4(r7)
 1005658:	82000315 	stw	r8,12(r16)
 100565c:	81800215 	stw	r6,8(r16)
 1005660:	07004074 	movhi	fp,257
 1005664:	e719dc04 	addi	fp,fp,26480
 1005668:	34000315 	stw	r16,12(r6)
 100566c:	44000215 	stw	r16,8(r8)
 1005670:	003f3e06 	br	100536c <_malloc_r+0x218>
 1005674:	63000044 	addi	r12,r12,1
 1005678:	608000cc 	andi	r2,r12,3
 100567c:	10005d26 	beq	r2,zero,10057f4 <_malloc_r+0x6a0>
 1005680:	18c00204 	addi	r3,r3,8
 1005684:	003f5106 	br	10053cc <_malloc_r+0x278>
 1005688:	8089883a 	add	r4,r16,r2
 100568c:	003f6d06 	br	1005444 <_malloc_r+0x2f0>
 1005690:	00805504 	movi	r2,340
 1005694:	10c02036 	bltu	r2,r3,1005718 <_malloc_r+0x5c4>
 1005698:	8804d3fa 	srli	r2,r17,15
 100569c:	11801dc4 	addi	r6,r2,119
 10056a0:	300490fa 	slli	r2,r6,3
 10056a4:	003ed806 	br	1005208 <_malloc_r+0xb4>
 10056a8:	48c000c4 	addi	r3,r9,3
 10056ac:	003f3106 	br	1005374 <_malloc_r+0x220>
 10056b0:	05c040b4 	movhi	r23,258
 10056b4:	bde68d04 	addi	r23,r23,-26060
 10056b8:	b8800017 	ldw	r2,0(r23)
 10056bc:	988d883a 	add	r6,r19,r2
 10056c0:	b9800015 	stw	r6,0(r23)
 10056c4:	293fb21e 	bne	r5,r4,1005590 <_malloc_r+0x43c>
 10056c8:	2083ffcc 	andi	r2,r4,4095
 10056cc:	103fb01e 	bne	r2,zero,1005590 <_malloc_r+0x43c>
 10056d0:	e4000217 	ldw	r16,8(fp)
 10056d4:	9d45883a 	add	r2,r19,r21
 10056d8:	10800054 	ori	r2,r2,1
 10056dc:	80800115 	stw	r2,4(r16)
 10056e0:	b8c00017 	ldw	r3,0(r23)
 10056e4:	d0a6fd17 	ldw	r2,-25612(gp)
 10056e8:	10c0012e 	bgeu	r2,r3,10056f0 <_malloc_r+0x59c>
 10056ec:	d0e6fd15 	stw	r3,-25612(gp)
 10056f0:	d0a6fe17 	ldw	r2,-25608(gp)
 10056f4:	10ff962e 	bgeu	r2,r3,1005550 <_malloc_r+0x3fc>
 10056f8:	d0e6fe15 	stw	r3,-25608(gp)
 10056fc:	003f9406 	br	1005550 <_malloc_r+0x3fc>
 1005700:	00800104 	movi	r2,4
 1005704:	11001e36 	bltu	r2,r4,1005780 <_malloc_r+0x62c>
 1005708:	2804d1ba 	srli	r2,r5,6
 100570c:	11000e04 	addi	r4,r2,56
 1005710:	200690fa 	slli	r3,r4,3
 1005714:	003fc506 	br	100562c <_malloc_r+0x4d8>
 1005718:	00815504 	movi	r2,1364
 100571c:	10c01d2e 	bgeu	r2,r3,1005794 <_malloc_r+0x640>
 1005720:	01801f84 	movi	r6,126
 1005724:	0080fc04 	movi	r2,1008
 1005728:	003eb706 	br	1005208 <_malloc_r+0xb4>
 100572c:	00800204 	movi	r2,8
 1005730:	10cbc83a 	sub	r5,r2,r3
 1005734:	2169883a 	add	r20,r4,r5
 1005738:	003f9e06 	br	10055b4 <_malloc_r+0x460>
 100573c:	00bffe04 	movi	r2,-8
 1005740:	a93ffd04 	addi	r4,r21,-12
 1005744:	2088703a 	and	r4,r4,r2
 1005748:	b10b883a 	add	r5,r22,r4
 100574c:	00c00144 	movi	r3,5
 1005750:	28c00215 	stw	r3,8(r5)
 1005754:	28c00115 	stw	r3,4(r5)
 1005758:	b0800117 	ldw	r2,4(r22)
 100575c:	1080004c 	andi	r2,r2,1
 1005760:	2084b03a 	or	r2,r4,r2
 1005764:	b0800115 	stw	r2,4(r22)
 1005768:	313fdd2e 	bgeu	r6,r4,10056e0 <_malloc_r+0x58c>
 100576c:	b1400204 	addi	r5,r22,8
 1005770:	9009883a 	mov	r4,r18
 1005774:	10045cc0 	call	10045cc <_free_r>
 1005778:	e4000217 	ldw	r16,8(fp)
 100577c:	003fd806 	br	10056e0 <_malloc_r+0x58c>
 1005780:	00800504 	movi	r2,20
 1005784:	11001536 	bltu	r2,r4,10057dc <_malloc_r+0x688>
 1005788:	210016c4 	addi	r4,r4,91
 100578c:	200690fa 	slli	r3,r4,3
 1005790:	003fa606 	br	100562c <_malloc_r+0x4d8>
 1005794:	8804d4ba 	srli	r2,r17,18
 1005798:	11801f04 	addi	r6,r2,124
 100579c:	300490fa 	slli	r2,r6,3
 10057a0:	003e9906 	br	1005208 <_malloc_r+0xb4>
 10057a4:	2009d0ba 	srai	r4,r4,2
 10057a8:	01404074 	movhi	r5,257
 10057ac:	2959dc04 	addi	r5,r5,26480
 10057b0:	00c00044 	movi	r3,1
 10057b4:	28800117 	ldw	r2,4(r5)
 10057b8:	1906983a 	sll	r3,r3,r4
 10057bc:	10c4b03a 	or	r2,r2,r3
 10057c0:	28800115 	stw	r2,4(r5)
 10057c4:	003fa306 	br	1005654 <_malloc_r+0x500>
 10057c8:	0027883a 	mov	r19,zero
 10057cc:	00c00044 	movi	r3,1
 10057d0:	003f8606 	br	10055ec <_malloc_r+0x498>
 10057d4:	d1200515 	stw	r4,-32748(gp)
 10057d8:	003f7306 	br	10055a8 <_malloc_r+0x454>
 10057dc:	00801504 	movi	r2,84
 10057e0:	11001936 	bltu	r2,r4,1005848 <_malloc_r+0x6f4>
 10057e4:	2804d33a 	srli	r2,r5,12
 10057e8:	11001b84 	addi	r4,r2,110
 10057ec:	200690fa 	slli	r3,r4,3
 10057f0:	003f8e06 	br	100562c <_malloc_r+0x4d8>
 10057f4:	480b883a 	mov	r5,r9
 10057f8:	6807883a 	mov	r3,r13
 10057fc:	288000cc 	andi	r2,r5,3
 1005800:	18fffe04 	addi	r3,r3,-8
 1005804:	297fffc4 	addi	r5,r5,-1
 1005808:	10001526 	beq	r2,zero,1005860 <_malloc_r+0x70c>
 100580c:	18800217 	ldw	r2,8(r3)
 1005810:	10fffa26 	beq	r2,r3,10057fc <_malloc_r+0x6a8>
 1005814:	2109883a 	add	r4,r4,r4
 1005818:	393f1e36 	bltu	r7,r4,1005494 <_malloc_r+0x340>
 100581c:	203f1d26 	beq	r4,zero,1005494 <_malloc_r+0x340>
 1005820:	21c4703a 	and	r2,r4,r7
 1005824:	10000226 	beq	r2,zero,1005830 <_malloc_r+0x6dc>
 1005828:	6013883a 	mov	r9,r12
 100582c:	003ee106 	br	10053b4 <_malloc_r+0x260>
 1005830:	2109883a 	add	r4,r4,r4
 1005834:	3904703a 	and	r2,r7,r4
 1005838:	63000104 	addi	r12,r12,4
 100583c:	103ffc26 	beq	r2,zero,1005830 <_malloc_r+0x6dc>
 1005840:	6013883a 	mov	r9,r12
 1005844:	003edb06 	br	10053b4 <_malloc_r+0x260>
 1005848:	00805504 	movi	r2,340
 100584c:	11000836 	bltu	r2,r4,1005870 <_malloc_r+0x71c>
 1005850:	2804d3fa 	srli	r2,r5,15
 1005854:	11001dc4 	addi	r4,r2,119
 1005858:	200690fa 	slli	r3,r4,3
 100585c:	003f7306 	br	100562c <_malloc_r+0x4d8>
 1005860:	0104303a 	nor	r2,zero,r4
 1005864:	388e703a 	and	r7,r7,r2
 1005868:	e1c00115 	stw	r7,4(fp)
 100586c:	003fe906 	br	1005814 <_malloc_r+0x6c0>
 1005870:	00815504 	movi	r2,1364
 1005874:	1100032e 	bgeu	r2,r4,1005884 <_malloc_r+0x730>
 1005878:	01001f84 	movi	r4,126
 100587c:	00c0fc04 	movi	r3,1008
 1005880:	003f6a06 	br	100562c <_malloc_r+0x4d8>
 1005884:	2804d4ba 	srli	r2,r5,18
 1005888:	11001f04 	addi	r4,r2,124
 100588c:	200690fa 	slli	r3,r4,3
 1005890:	003f6606 	br	100562c <_malloc_r+0x4d8>

01005894 <memchr>:
 1005894:	008000c4 	movi	r2,3
 1005898:	29403fcc 	andi	r5,r5,255
 100589c:	2007883a 	mov	r3,r4
 10058a0:	1180022e 	bgeu	r2,r6,10058ac <memchr+0x18>
 10058a4:	2084703a 	and	r2,r4,r2
 10058a8:	10000b26 	beq	r2,zero,10058d8 <memchr+0x44>
 10058ac:	313fffc4 	addi	r4,r6,-1
 10058b0:	3000051e 	bne	r6,zero,10058c8 <memchr+0x34>
 10058b4:	00002c06 	br	1005968 <memchr+0xd4>
 10058b8:	213fffc4 	addi	r4,r4,-1
 10058bc:	00bfffc4 	movi	r2,-1
 10058c0:	18c00044 	addi	r3,r3,1
 10058c4:	20802826 	beq	r4,r2,1005968 <memchr+0xd4>
 10058c8:	18800003 	ldbu	r2,0(r3)
 10058cc:	28bffa1e 	bne	r5,r2,10058b8 <memchr+0x24>
 10058d0:	1805883a 	mov	r2,r3
 10058d4:	f800283a 	ret
 10058d8:	0011883a 	mov	r8,zero
 10058dc:	0007883a 	mov	r3,zero
 10058e0:	01c00104 	movi	r7,4
 10058e4:	4004923a 	slli	r2,r8,8
 10058e8:	18c00044 	addi	r3,r3,1
 10058ec:	1151883a 	add	r8,r2,r5
 10058f0:	19fffc1e 	bne	r3,r7,10058e4 <memchr+0x50>
 10058f4:	02bfbff4 	movhi	r10,65279
 10058f8:	52bfbfc4 	addi	r10,r10,-257
 10058fc:	02602074 	movhi	r9,32897
 1005900:	4a602004 	addi	r9,r9,-32640
 1005904:	02c000c4 	movi	r11,3
 1005908:	20800017 	ldw	r2,0(r4)
 100590c:	31bfff04 	addi	r6,r6,-4
 1005910:	200f883a 	mov	r7,r4
 1005914:	1204f03a 	xor	r2,r2,r8
 1005918:	1287883a 	add	r3,r2,r10
 100591c:	1a46703a 	and	r3,r3,r9
 1005920:	0084303a 	nor	r2,zero,r2
 1005924:	10c4703a 	and	r2,r2,r3
 1005928:	10000b26 	beq	r2,zero,1005958 <memchr+0xc4>
 100592c:	20800003 	ldbu	r2,0(r4)
 1005930:	28800f26 	beq	r5,r2,1005970 <memchr+0xdc>
 1005934:	20800043 	ldbu	r2,1(r4)
 1005938:	21c00044 	addi	r7,r4,1
 100593c:	28800c26 	beq	r5,r2,1005970 <memchr+0xdc>
 1005940:	20800083 	ldbu	r2,2(r4)
 1005944:	21c00084 	addi	r7,r4,2
 1005948:	28800926 	beq	r5,r2,1005970 <memchr+0xdc>
 100594c:	208000c3 	ldbu	r2,3(r4)
 1005950:	21c000c4 	addi	r7,r4,3
 1005954:	28800626 	beq	r5,r2,1005970 <memchr+0xdc>
 1005958:	21000104 	addi	r4,r4,4
 100595c:	59bfea36 	bltu	r11,r6,1005908 <memchr+0x74>
 1005960:	2007883a 	mov	r3,r4
 1005964:	003fd106 	br	10058ac <memchr+0x18>
 1005968:	0005883a 	mov	r2,zero
 100596c:	f800283a 	ret
 1005970:	3805883a 	mov	r2,r7
 1005974:	f800283a 	ret

01005978 <memcpy>:
 1005978:	01c003c4 	movi	r7,15
 100597c:	2007883a 	mov	r3,r4
 1005980:	3980032e 	bgeu	r7,r6,1005990 <memcpy+0x18>
 1005984:	2904b03a 	or	r2,r5,r4
 1005988:	108000cc 	andi	r2,r2,3
 100598c:	10000926 	beq	r2,zero,10059b4 <memcpy+0x3c>
 1005990:	30000626 	beq	r6,zero,10059ac <memcpy+0x34>
 1005994:	30cd883a 	add	r6,r6,r3
 1005998:	28800003 	ldbu	r2,0(r5)
 100599c:	29400044 	addi	r5,r5,1
 10059a0:	18800005 	stb	r2,0(r3)
 10059a4:	18c00044 	addi	r3,r3,1
 10059a8:	30fffb1e 	bne	r6,r3,1005998 <memcpy+0x20>
 10059ac:	2005883a 	mov	r2,r4
 10059b0:	f800283a 	ret
 10059b4:	3811883a 	mov	r8,r7
 10059b8:	200f883a 	mov	r7,r4
 10059bc:	28c00017 	ldw	r3,0(r5)
 10059c0:	31bffc04 	addi	r6,r6,-16
 10059c4:	38c00015 	stw	r3,0(r7)
 10059c8:	28800117 	ldw	r2,4(r5)
 10059cc:	38800115 	stw	r2,4(r7)
 10059d0:	28c00217 	ldw	r3,8(r5)
 10059d4:	38c00215 	stw	r3,8(r7)
 10059d8:	28800317 	ldw	r2,12(r5)
 10059dc:	29400404 	addi	r5,r5,16
 10059e0:	38800315 	stw	r2,12(r7)
 10059e4:	39c00404 	addi	r7,r7,16
 10059e8:	41bff436 	bltu	r8,r6,10059bc <memcpy+0x44>
 10059ec:	008000c4 	movi	r2,3
 10059f0:	1180072e 	bgeu	r2,r6,1005a10 <memcpy+0x98>
 10059f4:	1007883a 	mov	r3,r2
 10059f8:	28800017 	ldw	r2,0(r5)
 10059fc:	31bfff04 	addi	r6,r6,-4
 1005a00:	29400104 	addi	r5,r5,4
 1005a04:	38800015 	stw	r2,0(r7)
 1005a08:	39c00104 	addi	r7,r7,4
 1005a0c:	19bffa36 	bltu	r3,r6,10059f8 <memcpy+0x80>
 1005a10:	3807883a 	mov	r3,r7
 1005a14:	003fde06 	br	1005990 <memcpy+0x18>

01005a18 <memmove>:
 1005a18:	2807883a 	mov	r3,r5
 1005a1c:	2011883a 	mov	r8,r4
 1005a20:	29000c2e 	bgeu	r5,r4,1005a54 <memmove+0x3c>
 1005a24:	298f883a 	add	r7,r5,r6
 1005a28:	21c00a2e 	bgeu	r4,r7,1005a54 <memmove+0x3c>
 1005a2c:	30000726 	beq	r6,zero,1005a4c <memmove+0x34>
 1005a30:	2187883a 	add	r3,r4,r6
 1005a34:	198dc83a 	sub	r6,r3,r6
 1005a38:	39ffffc4 	addi	r7,r7,-1
 1005a3c:	38800003 	ldbu	r2,0(r7)
 1005a40:	18ffffc4 	addi	r3,r3,-1
 1005a44:	18800005 	stb	r2,0(r3)
 1005a48:	19bffb1e 	bne	r3,r6,1005a38 <memmove+0x20>
 1005a4c:	2005883a 	mov	r2,r4
 1005a50:	f800283a 	ret
 1005a54:	01c003c4 	movi	r7,15
 1005a58:	39800a36 	bltu	r7,r6,1005a84 <memmove+0x6c>
 1005a5c:	303ffb26 	beq	r6,zero,1005a4c <memmove+0x34>
 1005a60:	400f883a 	mov	r7,r8
 1005a64:	320d883a 	add	r6,r6,r8
 1005a68:	28800003 	ldbu	r2,0(r5)
 1005a6c:	29400044 	addi	r5,r5,1
 1005a70:	38800005 	stb	r2,0(r7)
 1005a74:	39c00044 	addi	r7,r7,1
 1005a78:	39bffb1e 	bne	r7,r6,1005a68 <memmove+0x50>
 1005a7c:	2005883a 	mov	r2,r4
 1005a80:	f800283a 	ret
 1005a84:	1904b03a 	or	r2,r3,r4
 1005a88:	108000cc 	andi	r2,r2,3
 1005a8c:	103ff31e 	bne	r2,zero,1005a5c <memmove+0x44>
 1005a90:	3811883a 	mov	r8,r7
 1005a94:	180b883a 	mov	r5,r3
 1005a98:	200f883a 	mov	r7,r4
 1005a9c:	28c00017 	ldw	r3,0(r5)
 1005aa0:	31bffc04 	addi	r6,r6,-16
 1005aa4:	38c00015 	stw	r3,0(r7)
 1005aa8:	28800117 	ldw	r2,4(r5)
 1005aac:	38800115 	stw	r2,4(r7)
 1005ab0:	28c00217 	ldw	r3,8(r5)
 1005ab4:	38c00215 	stw	r3,8(r7)
 1005ab8:	28800317 	ldw	r2,12(r5)
 1005abc:	29400404 	addi	r5,r5,16
 1005ac0:	38800315 	stw	r2,12(r7)
 1005ac4:	39c00404 	addi	r7,r7,16
 1005ac8:	41bff436 	bltu	r8,r6,1005a9c <memmove+0x84>
 1005acc:	008000c4 	movi	r2,3
 1005ad0:	1180072e 	bgeu	r2,r6,1005af0 <memmove+0xd8>
 1005ad4:	1007883a 	mov	r3,r2
 1005ad8:	28800017 	ldw	r2,0(r5)
 1005adc:	31bfff04 	addi	r6,r6,-4
 1005ae0:	29400104 	addi	r5,r5,4
 1005ae4:	38800015 	stw	r2,0(r7)
 1005ae8:	39c00104 	addi	r7,r7,4
 1005aec:	19bffa36 	bltu	r3,r6,1005ad8 <memmove+0xc0>
 1005af0:	3811883a 	mov	r8,r7
 1005af4:	003fd906 	br	1005a5c <memmove+0x44>

01005af8 <memset>:
 1005af8:	008000c4 	movi	r2,3
 1005afc:	29403fcc 	andi	r5,r5,255
 1005b00:	2007883a 	mov	r3,r4
 1005b04:	1180022e 	bgeu	r2,r6,1005b10 <memset+0x18>
 1005b08:	2084703a 	and	r2,r4,r2
 1005b0c:	10000826 	beq	r2,zero,1005b30 <memset+0x38>
 1005b10:	30000526 	beq	r6,zero,1005b28 <memset+0x30>
 1005b14:	2805883a 	mov	r2,r5
 1005b18:	30cd883a 	add	r6,r6,r3
 1005b1c:	18800005 	stb	r2,0(r3)
 1005b20:	18c00044 	addi	r3,r3,1
 1005b24:	19bffd1e 	bne	r3,r6,1005b1c <memset+0x24>
 1005b28:	2005883a 	mov	r2,r4
 1005b2c:	f800283a 	ret
 1005b30:	2804923a 	slli	r2,r5,8
 1005b34:	020003c4 	movi	r8,15
 1005b38:	200f883a 	mov	r7,r4
 1005b3c:	2884b03a 	or	r2,r5,r2
 1005b40:	1006943a 	slli	r3,r2,16
 1005b44:	10c6b03a 	or	r3,r2,r3
 1005b48:	41800a2e 	bgeu	r8,r6,1005b74 <memset+0x7c>
 1005b4c:	4005883a 	mov	r2,r8
 1005b50:	31bffc04 	addi	r6,r6,-16
 1005b54:	38c00015 	stw	r3,0(r7)
 1005b58:	38c00115 	stw	r3,4(r7)
 1005b5c:	38c00215 	stw	r3,8(r7)
 1005b60:	38c00315 	stw	r3,12(r7)
 1005b64:	39c00404 	addi	r7,r7,16
 1005b68:	11bff936 	bltu	r2,r6,1005b50 <memset+0x58>
 1005b6c:	008000c4 	movi	r2,3
 1005b70:	1180052e 	bgeu	r2,r6,1005b88 <memset+0x90>
 1005b74:	31bfff04 	addi	r6,r6,-4
 1005b78:	008000c4 	movi	r2,3
 1005b7c:	38c00015 	stw	r3,0(r7)
 1005b80:	39c00104 	addi	r7,r7,4
 1005b84:	11bffb36 	bltu	r2,r6,1005b74 <memset+0x7c>
 1005b88:	3807883a 	mov	r3,r7
 1005b8c:	003fe006 	br	1005b10 <memset+0x18>

01005b90 <_Bfree>:
 1005b90:	28000826 	beq	r5,zero,1005bb4 <_Bfree+0x24>
 1005b94:	28800117 	ldw	r2,4(r5)
 1005b98:	21001317 	ldw	r4,76(r4)
 1005b9c:	1085883a 	add	r2,r2,r2
 1005ba0:	1085883a 	add	r2,r2,r2
 1005ba4:	1105883a 	add	r2,r2,r4
 1005ba8:	10c00017 	ldw	r3,0(r2)
 1005bac:	28c00015 	stw	r3,0(r5)
 1005bb0:	11400015 	stw	r5,0(r2)
 1005bb4:	f800283a 	ret

01005bb8 <__hi0bits>:
 1005bb8:	20bfffec 	andhi	r2,r4,65535
 1005bbc:	10001426 	beq	r2,zero,1005c10 <__hi0bits+0x58>
 1005bc0:	0007883a 	mov	r3,zero
 1005bc4:	20bfc02c 	andhi	r2,r4,65280
 1005bc8:	1000021e 	bne	r2,zero,1005bd4 <__hi0bits+0x1c>
 1005bcc:	2008923a 	slli	r4,r4,8
 1005bd0:	18c00204 	addi	r3,r3,8
 1005bd4:	20bc002c 	andhi	r2,r4,61440
 1005bd8:	1000021e 	bne	r2,zero,1005be4 <__hi0bits+0x2c>
 1005bdc:	2008913a 	slli	r4,r4,4
 1005be0:	18c00104 	addi	r3,r3,4
 1005be4:	20b0002c 	andhi	r2,r4,49152
 1005be8:	1000031e 	bne	r2,zero,1005bf8 <__hi0bits+0x40>
 1005bec:	2105883a 	add	r2,r4,r4
 1005bf0:	18c00084 	addi	r3,r3,2
 1005bf4:	1089883a 	add	r4,r2,r2
 1005bf8:	20000316 	blt	r4,zero,1005c08 <__hi0bits+0x50>
 1005bfc:	2090002c 	andhi	r2,r4,16384
 1005c00:	10000626 	beq	r2,zero,1005c1c <__hi0bits+0x64>
 1005c04:	18c00044 	addi	r3,r3,1
 1005c08:	1805883a 	mov	r2,r3
 1005c0c:	f800283a 	ret
 1005c10:	2008943a 	slli	r4,r4,16
 1005c14:	00c00404 	movi	r3,16
 1005c18:	003fea06 	br	1005bc4 <__hi0bits+0xc>
 1005c1c:	00c00804 	movi	r3,32
 1005c20:	1805883a 	mov	r2,r3
 1005c24:	f800283a 	ret

01005c28 <__lo0bits>:
 1005c28:	20c00017 	ldw	r3,0(r4)
 1005c2c:	188001cc 	andi	r2,r3,7
 1005c30:	10000a26 	beq	r2,zero,1005c5c <__lo0bits+0x34>
 1005c34:	1880004c 	andi	r2,r3,1
 1005c38:	1005003a 	cmpeq	r2,r2,zero
 1005c3c:	10002126 	beq	r2,zero,1005cc4 <__lo0bits+0x9c>
 1005c40:	1880008c 	andi	r2,r3,2
 1005c44:	1000251e 	bne	r2,zero,1005cdc <__lo0bits+0xb4>
 1005c48:	1804d0ba 	srli	r2,r3,2
 1005c4c:	01400084 	movi	r5,2
 1005c50:	20800015 	stw	r2,0(r4)
 1005c54:	2805883a 	mov	r2,r5
 1005c58:	f800283a 	ret
 1005c5c:	18bfffcc 	andi	r2,r3,65535
 1005c60:	10001526 	beq	r2,zero,1005cb8 <__lo0bits+0x90>
 1005c64:	000b883a 	mov	r5,zero
 1005c68:	18803fcc 	andi	r2,r3,255
 1005c6c:	1000021e 	bne	r2,zero,1005c78 <__lo0bits+0x50>
 1005c70:	1806d23a 	srli	r3,r3,8
 1005c74:	29400204 	addi	r5,r5,8
 1005c78:	188003cc 	andi	r2,r3,15
 1005c7c:	1000021e 	bne	r2,zero,1005c88 <__lo0bits+0x60>
 1005c80:	1806d13a 	srli	r3,r3,4
 1005c84:	29400104 	addi	r5,r5,4
 1005c88:	188000cc 	andi	r2,r3,3
 1005c8c:	1000021e 	bne	r2,zero,1005c98 <__lo0bits+0x70>
 1005c90:	1806d0ba 	srli	r3,r3,2
 1005c94:	29400084 	addi	r5,r5,2
 1005c98:	1880004c 	andi	r2,r3,1
 1005c9c:	1000031e 	bne	r2,zero,1005cac <__lo0bits+0x84>
 1005ca0:	1806d07a 	srli	r3,r3,1
 1005ca4:	18000a26 	beq	r3,zero,1005cd0 <__lo0bits+0xa8>
 1005ca8:	29400044 	addi	r5,r5,1
 1005cac:	2805883a 	mov	r2,r5
 1005cb0:	20c00015 	stw	r3,0(r4)
 1005cb4:	f800283a 	ret
 1005cb8:	1806d43a 	srli	r3,r3,16
 1005cbc:	01400404 	movi	r5,16
 1005cc0:	003fe906 	br	1005c68 <__lo0bits+0x40>
 1005cc4:	000b883a 	mov	r5,zero
 1005cc8:	2805883a 	mov	r2,r5
 1005ccc:	f800283a 	ret
 1005cd0:	01400804 	movi	r5,32
 1005cd4:	2805883a 	mov	r2,r5
 1005cd8:	f800283a 	ret
 1005cdc:	1804d07a 	srli	r2,r3,1
 1005ce0:	01400044 	movi	r5,1
 1005ce4:	20800015 	stw	r2,0(r4)
 1005ce8:	003fda06 	br	1005c54 <__lo0bits+0x2c>

01005cec <__mcmp>:
 1005cec:	20800417 	ldw	r2,16(r4)
 1005cf0:	28c00417 	ldw	r3,16(r5)
 1005cf4:	10cfc83a 	sub	r7,r2,r3
 1005cf8:	38000c1e 	bne	r7,zero,1005d2c <__mcmp+0x40>
 1005cfc:	18c5883a 	add	r2,r3,r3
 1005d00:	1085883a 	add	r2,r2,r2
 1005d04:	10c00504 	addi	r3,r2,20
 1005d08:	21000504 	addi	r4,r4,20
 1005d0c:	28cb883a 	add	r5,r5,r3
 1005d10:	2085883a 	add	r2,r4,r2
 1005d14:	10bfff04 	addi	r2,r2,-4
 1005d18:	297fff04 	addi	r5,r5,-4
 1005d1c:	11800017 	ldw	r6,0(r2)
 1005d20:	28c00017 	ldw	r3,0(r5)
 1005d24:	30c0031e 	bne	r6,r3,1005d34 <__mcmp+0x48>
 1005d28:	20bffa36 	bltu	r4,r2,1005d14 <__mcmp+0x28>
 1005d2c:	3805883a 	mov	r2,r7
 1005d30:	f800283a 	ret
 1005d34:	30c00336 	bltu	r6,r3,1005d44 <__mcmp+0x58>
 1005d38:	01c00044 	movi	r7,1
 1005d3c:	3805883a 	mov	r2,r7
 1005d40:	f800283a 	ret
 1005d44:	01ffffc4 	movi	r7,-1
 1005d48:	003ff806 	br	1005d2c <__mcmp+0x40>

01005d4c <__ulp>:
 1005d4c:	295ffc2c 	andhi	r5,r5,32752
 1005d50:	013f3034 	movhi	r4,64704
 1005d54:	290b883a 	add	r5,r5,r4
 1005d58:	0145c83a 	sub	r2,zero,r5
 1005d5c:	1007d53a 	srai	r3,r2,20
 1005d60:	000d883a 	mov	r6,zero
 1005d64:	0140040e 	bge	zero,r5,1005d78 <__ulp+0x2c>
 1005d68:	280f883a 	mov	r7,r5
 1005d6c:	3807883a 	mov	r3,r7
 1005d70:	3005883a 	mov	r2,r6
 1005d74:	f800283a 	ret
 1005d78:	008004c4 	movi	r2,19
 1005d7c:	193ffb04 	addi	r4,r3,-20
 1005d80:	10c00c0e 	bge	r2,r3,1005db4 <__ulp+0x68>
 1005d84:	008007c4 	movi	r2,31
 1005d88:	1107c83a 	sub	r3,r2,r4
 1005d8c:	00800784 	movi	r2,30
 1005d90:	01400044 	movi	r5,1
 1005d94:	11000216 	blt	r2,r4,1005da0 <__ulp+0x54>
 1005d98:	00800044 	movi	r2,1
 1005d9c:	10ca983a 	sll	r5,r2,r3
 1005da0:	000f883a 	mov	r7,zero
 1005da4:	280d883a 	mov	r6,r5
 1005da8:	3807883a 	mov	r3,r7
 1005dac:	3005883a 	mov	r2,r6
 1005db0:	f800283a 	ret
 1005db4:	00800234 	movhi	r2,8
 1005db8:	10cfd83a 	sra	r7,r2,r3
 1005dbc:	000d883a 	mov	r6,zero
 1005dc0:	3005883a 	mov	r2,r6
 1005dc4:	3807883a 	mov	r3,r7
 1005dc8:	f800283a 	ret

01005dcc <__b2d>:
 1005dcc:	20800417 	ldw	r2,16(r4)
 1005dd0:	defff904 	addi	sp,sp,-28
 1005dd4:	dd000415 	stw	r20,16(sp)
 1005dd8:	1085883a 	add	r2,r2,r2
 1005ddc:	25000504 	addi	r20,r4,20
 1005de0:	1085883a 	add	r2,r2,r2
 1005de4:	dc000015 	stw	r16,0(sp)
 1005de8:	a0a1883a 	add	r16,r20,r2
 1005dec:	dd400515 	stw	r21,20(sp)
 1005df0:	857fff17 	ldw	r21,-4(r16)
 1005df4:	dc400115 	stw	r17,4(sp)
 1005df8:	dfc00615 	stw	ra,24(sp)
 1005dfc:	a809883a 	mov	r4,r21
 1005e00:	2823883a 	mov	r17,r5
 1005e04:	dcc00315 	stw	r19,12(sp)
 1005e08:	dc800215 	stw	r18,8(sp)
 1005e0c:	1005bb80 	call	1005bb8 <__hi0bits>
 1005e10:	100b883a 	mov	r5,r2
 1005e14:	00800804 	movi	r2,32
 1005e18:	1145c83a 	sub	r2,r2,r5
 1005e1c:	88800015 	stw	r2,0(r17)
 1005e20:	00800284 	movi	r2,10
 1005e24:	80ffff04 	addi	r3,r16,-4
 1005e28:	11401416 	blt	r2,r5,1005e7c <__b2d+0xb0>
 1005e2c:	008002c4 	movi	r2,11
 1005e30:	1149c83a 	sub	r4,r2,r5
 1005e34:	a0c02736 	bltu	r20,r3,1005ed4 <__b2d+0x108>
 1005e38:	000d883a 	mov	r6,zero
 1005e3c:	28800544 	addi	r2,r5,21
 1005e40:	a906d83a 	srl	r3,r21,r4
 1005e44:	a884983a 	sll	r2,r21,r2
 1005e48:	1ccffc34 	orhi	r19,r3,16368
 1005e4c:	11a4b03a 	or	r18,r2,r6
 1005e50:	9005883a 	mov	r2,r18
 1005e54:	9807883a 	mov	r3,r19
 1005e58:	dfc00617 	ldw	ra,24(sp)
 1005e5c:	dd400517 	ldw	r21,20(sp)
 1005e60:	dd000417 	ldw	r20,16(sp)
 1005e64:	dcc00317 	ldw	r19,12(sp)
 1005e68:	dc800217 	ldw	r18,8(sp)
 1005e6c:	dc400117 	ldw	r17,4(sp)
 1005e70:	dc000017 	ldw	r16,0(sp)
 1005e74:	dec00704 	addi	sp,sp,28
 1005e78:	f800283a 	ret
 1005e7c:	a0c00e36 	bltu	r20,r3,1005eb8 <__b2d+0xec>
 1005e80:	293ffd44 	addi	r4,r5,-11
 1005e84:	000d883a 	mov	r6,zero
 1005e88:	20000f26 	beq	r4,zero,1005ec8 <__b2d+0xfc>
 1005e8c:	00800804 	movi	r2,32
 1005e90:	110bc83a 	sub	r5,r2,r4
 1005e94:	a0c01236 	bltu	r20,r3,1005ee0 <__b2d+0x114>
 1005e98:	000f883a 	mov	r7,zero
 1005e9c:	a904983a 	sll	r2,r21,r4
 1005ea0:	3146d83a 	srl	r3,r6,r5
 1005ea4:	3108983a 	sll	r4,r6,r4
 1005ea8:	108ffc34 	orhi	r2,r2,16368
 1005eac:	18a6b03a 	or	r19,r3,r2
 1005eb0:	3924b03a 	or	r18,r7,r4
 1005eb4:	003fe606 	br	1005e50 <__b2d+0x84>
 1005eb8:	293ffd44 	addi	r4,r5,-11
 1005ebc:	81bffe17 	ldw	r6,-8(r16)
 1005ec0:	80fffe04 	addi	r3,r16,-8
 1005ec4:	203ff11e 	bne	r4,zero,1005e8c <__b2d+0xc0>
 1005ec8:	accffc34 	orhi	r19,r21,16368
 1005ecc:	3025883a 	mov	r18,r6
 1005ed0:	003fdf06 	br	1005e50 <__b2d+0x84>
 1005ed4:	18bfff17 	ldw	r2,-4(r3)
 1005ed8:	110cd83a 	srl	r6,r2,r4
 1005edc:	003fd706 	br	1005e3c <__b2d+0x70>
 1005ee0:	18bfff17 	ldw	r2,-4(r3)
 1005ee4:	114ed83a 	srl	r7,r2,r5
 1005ee8:	003fec06 	br	1005e9c <__b2d+0xd0>

01005eec <__ratio>:
 1005eec:	defff904 	addi	sp,sp,-28
 1005ef0:	dc400215 	stw	r17,8(sp)
 1005ef4:	2823883a 	mov	r17,r5
 1005ef8:	d80b883a 	mov	r5,sp
 1005efc:	dfc00615 	stw	ra,24(sp)
 1005f00:	dd000515 	stw	r20,20(sp)
 1005f04:	dcc00415 	stw	r19,16(sp)
 1005f08:	dc800315 	stw	r18,12(sp)
 1005f0c:	2025883a 	mov	r18,r4
 1005f10:	1005dcc0 	call	1005dcc <__b2d>
 1005f14:	8809883a 	mov	r4,r17
 1005f18:	d9400104 	addi	r5,sp,4
 1005f1c:	1027883a 	mov	r19,r2
 1005f20:	1829883a 	mov	r20,r3
 1005f24:	1005dcc0 	call	1005dcc <__b2d>
 1005f28:	89000417 	ldw	r4,16(r17)
 1005f2c:	91c00417 	ldw	r7,16(r18)
 1005f30:	d9800117 	ldw	r6,4(sp)
 1005f34:	180b883a 	mov	r5,r3
 1005f38:	390fc83a 	sub	r7,r7,r4
 1005f3c:	1009883a 	mov	r4,r2
 1005f40:	d8800017 	ldw	r2,0(sp)
 1005f44:	380e917a 	slli	r7,r7,5
 1005f48:	2011883a 	mov	r8,r4
 1005f4c:	1185c83a 	sub	r2,r2,r6
 1005f50:	11c5883a 	add	r2,r2,r7
 1005f54:	1006953a 	slli	r3,r2,20
 1005f58:	2813883a 	mov	r9,r5
 1005f5c:	00800d0e 	bge	zero,r2,1005f94 <__ratio+0xa8>
 1005f60:	1d29883a 	add	r20,r3,r20
 1005f64:	a00b883a 	mov	r5,r20
 1005f68:	480f883a 	mov	r7,r9
 1005f6c:	9809883a 	mov	r4,r19
 1005f70:	400d883a 	mov	r6,r8
 1005f74:	1008f340 	call	1008f34 <__divdf3>
 1005f78:	dfc00617 	ldw	ra,24(sp)
 1005f7c:	dd000517 	ldw	r20,20(sp)
 1005f80:	dcc00417 	ldw	r19,16(sp)
 1005f84:	dc800317 	ldw	r18,12(sp)
 1005f88:	dc400217 	ldw	r17,8(sp)
 1005f8c:	dec00704 	addi	sp,sp,28
 1005f90:	f800283a 	ret
 1005f94:	28d3c83a 	sub	r9,r5,r3
 1005f98:	003ff206 	br	1005f64 <__ratio+0x78>

01005f9c <_mprec_log10>:
 1005f9c:	defffe04 	addi	sp,sp,-8
 1005fa0:	008005c4 	movi	r2,23
 1005fa4:	dc000015 	stw	r16,0(sp)
 1005fa8:	dfc00115 	stw	ra,4(sp)
 1005fac:	2021883a 	mov	r16,r4
 1005fb0:	11000c16 	blt	r2,r4,1005fe4 <_mprec_log10+0x48>
 1005fb4:	200490fa 	slli	r2,r4,3
 1005fb8:	00c04074 	movhi	r3,257
 1005fbc:	18d7f104 	addi	r3,r3,24516
 1005fc0:	10c5883a 	add	r2,r2,r3
 1005fc4:	12400117 	ldw	r9,4(r2)
 1005fc8:	12000017 	ldw	r8,0(r2)
 1005fcc:	4807883a 	mov	r3,r9
 1005fd0:	4005883a 	mov	r2,r8
 1005fd4:	dfc00117 	ldw	ra,4(sp)
 1005fd8:	dc000017 	ldw	r16,0(sp)
 1005fdc:	dec00204 	addi	sp,sp,8
 1005fe0:	f800283a 	ret
 1005fe4:	0011883a 	mov	r8,zero
 1005fe8:	024ffc34 	movhi	r9,16368
 1005fec:	0005883a 	mov	r2,zero
 1005ff0:	00d00934 	movhi	r3,16420
 1005ff4:	480b883a 	mov	r5,r9
 1005ff8:	4009883a 	mov	r4,r8
 1005ffc:	180f883a 	mov	r7,r3
 1006000:	100d883a 	mov	r6,r2
 1006004:	1008b700 	call	1008b70 <__muldf3>
 1006008:	843fffc4 	addi	r16,r16,-1
 100600c:	1011883a 	mov	r8,r2
 1006010:	1813883a 	mov	r9,r3
 1006014:	803ff51e 	bne	r16,zero,1005fec <_mprec_log10+0x50>
 1006018:	4005883a 	mov	r2,r8
 100601c:	4807883a 	mov	r3,r9
 1006020:	dfc00117 	ldw	ra,4(sp)
 1006024:	dc000017 	ldw	r16,0(sp)
 1006028:	dec00204 	addi	sp,sp,8
 100602c:	f800283a 	ret

01006030 <__copybits>:
 1006030:	297fffc4 	addi	r5,r5,-1
 1006034:	30800417 	ldw	r2,16(r6)
 1006038:	280bd17a 	srai	r5,r5,5
 100603c:	31800504 	addi	r6,r6,20
 1006040:	1085883a 	add	r2,r2,r2
 1006044:	294b883a 	add	r5,r5,r5
 1006048:	294b883a 	add	r5,r5,r5
 100604c:	1085883a 	add	r2,r2,r2
 1006050:	290b883a 	add	r5,r5,r4
 1006054:	3087883a 	add	r3,r6,r2
 1006058:	29400104 	addi	r5,r5,4
 100605c:	30c0052e 	bgeu	r6,r3,1006074 <__copybits+0x44>
 1006060:	30800017 	ldw	r2,0(r6)
 1006064:	31800104 	addi	r6,r6,4
 1006068:	20800015 	stw	r2,0(r4)
 100606c:	21000104 	addi	r4,r4,4
 1006070:	30fffb36 	bltu	r6,r3,1006060 <__copybits+0x30>
 1006074:	2140032e 	bgeu	r4,r5,1006084 <__copybits+0x54>
 1006078:	20000015 	stw	zero,0(r4)
 100607c:	21000104 	addi	r4,r4,4
 1006080:	217ffd36 	bltu	r4,r5,1006078 <__copybits+0x48>
 1006084:	f800283a 	ret

01006088 <__any_on>:
 1006088:	20800417 	ldw	r2,16(r4)
 100608c:	2807d17a 	srai	r3,r5,5
 1006090:	21000504 	addi	r4,r4,20
 1006094:	10c00d0e 	bge	r2,r3,10060cc <__any_on+0x44>
 1006098:	1085883a 	add	r2,r2,r2
 100609c:	1085883a 	add	r2,r2,r2
 10060a0:	208d883a 	add	r6,r4,r2
 10060a4:	2180182e 	bgeu	r4,r6,1006108 <__any_on+0x80>
 10060a8:	30bfff17 	ldw	r2,-4(r6)
 10060ac:	30ffff04 	addi	r3,r6,-4
 10060b0:	1000041e 	bne	r2,zero,10060c4 <__any_on+0x3c>
 10060b4:	20c0142e 	bgeu	r4,r3,1006108 <__any_on+0x80>
 10060b8:	18ffff04 	addi	r3,r3,-4
 10060bc:	18800017 	ldw	r2,0(r3)
 10060c0:	103ffc26 	beq	r2,zero,10060b4 <__any_on+0x2c>
 10060c4:	00800044 	movi	r2,1
 10060c8:	f800283a 	ret
 10060cc:	18800a0e 	bge	r3,r2,10060f8 <__any_on+0x70>
 10060d0:	294007cc 	andi	r5,r5,31
 10060d4:	28000826 	beq	r5,zero,10060f8 <__any_on+0x70>
 10060d8:	18c5883a 	add	r2,r3,r3
 10060dc:	1085883a 	add	r2,r2,r2
 10060e0:	208d883a 	add	r6,r4,r2
 10060e4:	30c00017 	ldw	r3,0(r6)
 10060e8:	1944d83a 	srl	r2,r3,r5
 10060ec:	1144983a 	sll	r2,r2,r5
 10060f0:	18bff41e 	bne	r3,r2,10060c4 <__any_on+0x3c>
 10060f4:	003feb06 	br	10060a4 <__any_on+0x1c>
 10060f8:	18c5883a 	add	r2,r3,r3
 10060fc:	1085883a 	add	r2,r2,r2
 1006100:	208d883a 	add	r6,r4,r2
 1006104:	003fe706 	br	10060a4 <__any_on+0x1c>
 1006108:	0005883a 	mov	r2,zero
 100610c:	f800283a 	ret

01006110 <_Balloc>:
 1006110:	20c01317 	ldw	r3,76(r4)
 1006114:	defffb04 	addi	sp,sp,-20
 1006118:	dcc00315 	stw	r19,12(sp)
 100611c:	dc800215 	stw	r18,8(sp)
 1006120:	dfc00415 	stw	ra,16(sp)
 1006124:	2825883a 	mov	r18,r5
 1006128:	dc400115 	stw	r17,4(sp)
 100612c:	dc000015 	stw	r16,0(sp)
 1006130:	2027883a 	mov	r19,r4
 1006134:	01800404 	movi	r6,16
 1006138:	01400104 	movi	r5,4
 100613c:	18001726 	beq	r3,zero,100619c <_Balloc+0x8c>
 1006140:	01400044 	movi	r5,1
 1006144:	9485883a 	add	r2,r18,r18
 1006148:	2ca2983a 	sll	r17,r5,r18
 100614c:	1085883a 	add	r2,r2,r2
 1006150:	10c7883a 	add	r3,r2,r3
 1006154:	1c000017 	ldw	r16,0(r3)
 1006158:	8c4d883a 	add	r6,r17,r17
 100615c:	318d883a 	add	r6,r6,r6
 1006160:	9809883a 	mov	r4,r19
 1006164:	31800504 	addi	r6,r6,20
 1006168:	80001226 	beq	r16,zero,10061b4 <_Balloc+0xa4>
 100616c:	80800017 	ldw	r2,0(r16)
 1006170:	18800015 	stw	r2,0(r3)
 1006174:	80000415 	stw	zero,16(r16)
 1006178:	80000315 	stw	zero,12(r16)
 100617c:	8005883a 	mov	r2,r16
 1006180:	dfc00417 	ldw	ra,16(sp)
 1006184:	dcc00317 	ldw	r19,12(sp)
 1006188:	dc800217 	ldw	r18,8(sp)
 100618c:	dc400117 	ldw	r17,4(sp)
 1006190:	dc000017 	ldw	r16,0(sp)
 1006194:	dec00504 	addi	sp,sp,20
 1006198:	f800283a 	ret
 100619c:	10075700 	call	1007570 <_calloc_r>
 10061a0:	1007883a 	mov	r3,r2
 10061a4:	0021883a 	mov	r16,zero
 10061a8:	98801315 	stw	r2,76(r19)
 10061ac:	103fe41e 	bne	r2,zero,1006140 <_Balloc+0x30>
 10061b0:	003ff206 	br	100617c <_Balloc+0x6c>
 10061b4:	10075700 	call	1007570 <_calloc_r>
 10061b8:	103ff026 	beq	r2,zero,100617c <_Balloc+0x6c>
 10061bc:	1021883a 	mov	r16,r2
 10061c0:	14800115 	stw	r18,4(r2)
 10061c4:	14400215 	stw	r17,8(r2)
 10061c8:	003fea06 	br	1006174 <_Balloc+0x64>

010061cc <__d2b>:
 10061cc:	defff504 	addi	sp,sp,-44
 10061d0:	dcc00515 	stw	r19,20(sp)
 10061d4:	04c00044 	movi	r19,1
 10061d8:	dc000215 	stw	r16,8(sp)
 10061dc:	2821883a 	mov	r16,r5
 10061e0:	980b883a 	mov	r5,r19
 10061e4:	ddc00915 	stw	r23,36(sp)
 10061e8:	dd800815 	stw	r22,32(sp)
 10061ec:	dd400715 	stw	r21,28(sp)
 10061f0:	dd000615 	stw	r20,24(sp)
 10061f4:	dc800415 	stw	r18,16(sp)
 10061f8:	dc400315 	stw	r17,12(sp)
 10061fc:	dfc00a15 	stw	ra,40(sp)
 1006200:	3023883a 	mov	r17,r6
 1006204:	382d883a 	mov	r22,r7
 1006208:	ddc00b17 	ldw	r23,44(sp)
 100620c:	10061100 	call	1006110 <_Balloc>
 1006210:	1025883a 	mov	r18,r2
 1006214:	00a00034 	movhi	r2,32768
 1006218:	10bfffc4 	addi	r2,r2,-1
 100621c:	8888703a 	and	r4,r17,r2
 1006220:	202ad53a 	srli	r21,r4,20
 1006224:	00800434 	movhi	r2,16
 1006228:	10bfffc4 	addi	r2,r2,-1
 100622c:	8886703a 	and	r3,r17,r2
 1006230:	a829003a 	cmpeq	r20,r21,zero
 1006234:	800b883a 	mov	r5,r16
 1006238:	d8c00115 	stw	r3,4(sp)
 100623c:	94000504 	addi	r16,r18,20
 1006240:	a000021e 	bne	r20,zero,100624c <__d2b+0x80>
 1006244:	18c00434 	orhi	r3,r3,16
 1006248:	d8c00115 	stw	r3,4(sp)
 100624c:	28002726 	beq	r5,zero,10062ec <__d2b+0x120>
 1006250:	d809883a 	mov	r4,sp
 1006254:	d9400015 	stw	r5,0(sp)
 1006258:	1005c280 	call	1005c28 <__lo0bits>
 100625c:	100d883a 	mov	r6,r2
 1006260:	10003526 	beq	r2,zero,1006338 <__d2b+0x16c>
 1006264:	d8c00117 	ldw	r3,4(sp)
 1006268:	00800804 	movi	r2,32
 100626c:	1185c83a 	sub	r2,r2,r6
 1006270:	d9000017 	ldw	r4,0(sp)
 1006274:	1886983a 	sll	r3,r3,r2
 1006278:	1906b03a 	or	r3,r3,r4
 100627c:	90c00515 	stw	r3,20(r18)
 1006280:	d8c00117 	ldw	r3,4(sp)
 1006284:	1986d83a 	srl	r3,r3,r6
 1006288:	d8c00115 	stw	r3,4(sp)
 100628c:	180b003a 	cmpeq	r5,r3,zero
 1006290:	00800084 	movi	r2,2
 1006294:	114bc83a 	sub	r5,r2,r5
 1006298:	80c00115 	stw	r3,4(r16)
 100629c:	91400415 	stw	r5,16(r18)
 10062a0:	a0001a1e 	bne	r20,zero,100630c <__d2b+0x140>
 10062a4:	3545883a 	add	r2,r6,r21
 10062a8:	10bef344 	addi	r2,r2,-1075
 10062ac:	00c00d44 	movi	r3,53
 10062b0:	b0800015 	stw	r2,0(r22)
 10062b4:	1987c83a 	sub	r3,r3,r6
 10062b8:	b8c00015 	stw	r3,0(r23)
 10062bc:	9005883a 	mov	r2,r18
 10062c0:	dfc00a17 	ldw	ra,40(sp)
 10062c4:	ddc00917 	ldw	r23,36(sp)
 10062c8:	dd800817 	ldw	r22,32(sp)
 10062cc:	dd400717 	ldw	r21,28(sp)
 10062d0:	dd000617 	ldw	r20,24(sp)
 10062d4:	dcc00517 	ldw	r19,20(sp)
 10062d8:	dc800417 	ldw	r18,16(sp)
 10062dc:	dc400317 	ldw	r17,12(sp)
 10062e0:	dc000217 	ldw	r16,8(sp)
 10062e4:	dec00b04 	addi	sp,sp,44
 10062e8:	f800283a 	ret
 10062ec:	d9000104 	addi	r4,sp,4
 10062f0:	1005c280 	call	1005c28 <__lo0bits>
 10062f4:	11800804 	addi	r6,r2,32
 10062f8:	d8800117 	ldw	r2,4(sp)
 10062fc:	94c00415 	stw	r19,16(r18)
 1006300:	980b883a 	mov	r5,r19
 1006304:	90800515 	stw	r2,20(r18)
 1006308:	a03fe626 	beq	r20,zero,10062a4 <__d2b+0xd8>
 100630c:	2945883a 	add	r2,r5,r5
 1006310:	1085883a 	add	r2,r2,r2
 1006314:	1405883a 	add	r2,r2,r16
 1006318:	113fff17 	ldw	r4,-4(r2)
 100631c:	30fef384 	addi	r3,r6,-1074
 1006320:	2820917a 	slli	r16,r5,5
 1006324:	b0c00015 	stw	r3,0(r22)
 1006328:	1005bb80 	call	1005bb8 <__hi0bits>
 100632c:	80a1c83a 	sub	r16,r16,r2
 1006330:	bc000015 	stw	r16,0(r23)
 1006334:	003fe106 	br	10062bc <__d2b+0xf0>
 1006338:	d8800017 	ldw	r2,0(sp)
 100633c:	90800515 	stw	r2,20(r18)
 1006340:	d8c00117 	ldw	r3,4(sp)
 1006344:	003fd106 	br	100628c <__d2b+0xc0>

01006348 <__mdiff>:
 1006348:	defffb04 	addi	sp,sp,-20
 100634c:	dc000015 	stw	r16,0(sp)
 1006350:	2821883a 	mov	r16,r5
 1006354:	dc800215 	stw	r18,8(sp)
 1006358:	300b883a 	mov	r5,r6
 100635c:	2025883a 	mov	r18,r4
 1006360:	8009883a 	mov	r4,r16
 1006364:	dc400115 	stw	r17,4(sp)
 1006368:	dfc00415 	stw	ra,16(sp)
 100636c:	dcc00315 	stw	r19,12(sp)
 1006370:	3023883a 	mov	r17,r6
 1006374:	1005cec0 	call	1005cec <__mcmp>
 1006378:	10004226 	beq	r2,zero,1006484 <__mdiff+0x13c>
 100637c:	10005016 	blt	r2,zero,10064c0 <__mdiff+0x178>
 1006380:	0027883a 	mov	r19,zero
 1006384:	81400117 	ldw	r5,4(r16)
 1006388:	9009883a 	mov	r4,r18
 100638c:	10061100 	call	1006110 <_Balloc>
 1006390:	1019883a 	mov	r12,r2
 1006394:	82800417 	ldw	r10,16(r16)
 1006398:	88800417 	ldw	r2,16(r17)
 100639c:	81800504 	addi	r6,r16,20
 10063a0:	5287883a 	add	r3,r10,r10
 10063a4:	1085883a 	add	r2,r2,r2
 10063a8:	18c7883a 	add	r3,r3,r3
 10063ac:	1085883a 	add	r2,r2,r2
 10063b0:	8a000504 	addi	r8,r17,20
 10063b4:	64c00315 	stw	r19,12(r12)
 10063b8:	30db883a 	add	r13,r6,r3
 10063bc:	4097883a 	add	r11,r8,r2
 10063c0:	61c00504 	addi	r7,r12,20
 10063c4:	0013883a 	mov	r9,zero
 10063c8:	31000017 	ldw	r4,0(r6)
 10063cc:	41400017 	ldw	r5,0(r8)
 10063d0:	42000104 	addi	r8,r8,4
 10063d4:	20bfffcc 	andi	r2,r4,65535
 10063d8:	28ffffcc 	andi	r3,r5,65535
 10063dc:	10c5c83a 	sub	r2,r2,r3
 10063e0:	1245883a 	add	r2,r2,r9
 10063e4:	2008d43a 	srli	r4,r4,16
 10063e8:	280ad43a 	srli	r5,r5,16
 10063ec:	1007d43a 	srai	r3,r2,16
 10063f0:	3880000d 	sth	r2,0(r7)
 10063f4:	2149c83a 	sub	r4,r4,r5
 10063f8:	20c9883a 	add	r4,r4,r3
 10063fc:	3900008d 	sth	r4,2(r7)
 1006400:	31800104 	addi	r6,r6,4
 1006404:	39c00104 	addi	r7,r7,4
 1006408:	2013d43a 	srai	r9,r4,16
 100640c:	42ffee36 	bltu	r8,r11,10063c8 <__mdiff+0x80>
 1006410:	33400c2e 	bgeu	r6,r13,1006444 <__mdiff+0xfc>
 1006414:	30800017 	ldw	r2,0(r6)
 1006418:	31800104 	addi	r6,r6,4
 100641c:	10ffffcc 	andi	r3,r2,65535
 1006420:	1a47883a 	add	r3,r3,r9
 1006424:	1004d43a 	srli	r2,r2,16
 1006428:	1809d43a 	srai	r4,r3,16
 100642c:	38c0000d 	sth	r3,0(r7)
 1006430:	1105883a 	add	r2,r2,r4
 1006434:	3880008d 	sth	r2,2(r7)
 1006438:	1013d43a 	srai	r9,r2,16
 100643c:	39c00104 	addi	r7,r7,4
 1006440:	337ff436 	bltu	r6,r13,1006414 <__mdiff+0xcc>
 1006444:	38bfff17 	ldw	r2,-4(r7)
 1006448:	38ffff04 	addi	r3,r7,-4
 100644c:	1000041e 	bne	r2,zero,1006460 <__mdiff+0x118>
 1006450:	18ffff04 	addi	r3,r3,-4
 1006454:	18800017 	ldw	r2,0(r3)
 1006458:	52bfffc4 	addi	r10,r10,-1
 100645c:	103ffc26 	beq	r2,zero,1006450 <__mdiff+0x108>
 1006460:	6005883a 	mov	r2,r12
 1006464:	62800415 	stw	r10,16(r12)
 1006468:	dfc00417 	ldw	ra,16(sp)
 100646c:	dcc00317 	ldw	r19,12(sp)
 1006470:	dc800217 	ldw	r18,8(sp)
 1006474:	dc400117 	ldw	r17,4(sp)
 1006478:	dc000017 	ldw	r16,0(sp)
 100647c:	dec00504 	addi	sp,sp,20
 1006480:	f800283a 	ret
 1006484:	9009883a 	mov	r4,r18
 1006488:	000b883a 	mov	r5,zero
 100648c:	10061100 	call	1006110 <_Balloc>
 1006490:	1019883a 	mov	r12,r2
 1006494:	00800044 	movi	r2,1
 1006498:	60800415 	stw	r2,16(r12)
 100649c:	6005883a 	mov	r2,r12
 10064a0:	60000515 	stw	zero,20(r12)
 10064a4:	dfc00417 	ldw	ra,16(sp)
 10064a8:	dcc00317 	ldw	r19,12(sp)
 10064ac:	dc800217 	ldw	r18,8(sp)
 10064b0:	dc400117 	ldw	r17,4(sp)
 10064b4:	dc000017 	ldw	r16,0(sp)
 10064b8:	dec00504 	addi	sp,sp,20
 10064bc:	f800283a 	ret
 10064c0:	880d883a 	mov	r6,r17
 10064c4:	04c00044 	movi	r19,1
 10064c8:	8023883a 	mov	r17,r16
 10064cc:	3021883a 	mov	r16,r6
 10064d0:	003fac06 	br	1006384 <__mdiff+0x3c>

010064d4 <__lshift>:
 10064d4:	defff904 	addi	sp,sp,-28
 10064d8:	28800417 	ldw	r2,16(r5)
 10064dc:	dc000015 	stw	r16,0(sp)
 10064e0:	3021d17a 	srai	r16,r6,5
 10064e4:	28c00217 	ldw	r3,8(r5)
 10064e8:	10800044 	addi	r2,r2,1
 10064ec:	dc400115 	stw	r17,4(sp)
 10064f0:	80a3883a 	add	r17,r16,r2
 10064f4:	dd400515 	stw	r21,20(sp)
 10064f8:	dd000415 	stw	r20,16(sp)
 10064fc:	dc800215 	stw	r18,8(sp)
 1006500:	dfc00615 	stw	ra,24(sp)
 1006504:	2825883a 	mov	r18,r5
 1006508:	dcc00315 	stw	r19,12(sp)
 100650c:	3029883a 	mov	r20,r6
 1006510:	202b883a 	mov	r21,r4
 1006514:	29400117 	ldw	r5,4(r5)
 1006518:	1c40030e 	bge	r3,r17,1006528 <__lshift+0x54>
 100651c:	18c7883a 	add	r3,r3,r3
 1006520:	29400044 	addi	r5,r5,1
 1006524:	1c7ffd16 	blt	r3,r17,100651c <__lshift+0x48>
 1006528:	a809883a 	mov	r4,r21
 100652c:	10061100 	call	1006110 <_Balloc>
 1006530:	1027883a 	mov	r19,r2
 1006534:	11400504 	addi	r5,r2,20
 1006538:	0400090e 	bge	zero,r16,1006560 <__lshift+0x8c>
 100653c:	2805883a 	mov	r2,r5
 1006540:	0007883a 	mov	r3,zero
 1006544:	18c00044 	addi	r3,r3,1
 1006548:	10000015 	stw	zero,0(r2)
 100654c:	10800104 	addi	r2,r2,4
 1006550:	80fffc1e 	bne	r16,r3,1006544 <__lshift+0x70>
 1006554:	8405883a 	add	r2,r16,r16
 1006558:	1085883a 	add	r2,r2,r2
 100655c:	288b883a 	add	r5,r5,r2
 1006560:	90800417 	ldw	r2,16(r18)
 1006564:	91000504 	addi	r4,r18,20
 1006568:	a18007cc 	andi	r6,r20,31
 100656c:	1085883a 	add	r2,r2,r2
 1006570:	1085883a 	add	r2,r2,r2
 1006574:	208f883a 	add	r7,r4,r2
 1006578:	30001e26 	beq	r6,zero,10065f4 <__lshift+0x120>
 100657c:	00800804 	movi	r2,32
 1006580:	1191c83a 	sub	r8,r2,r6
 1006584:	0007883a 	mov	r3,zero
 1006588:	20800017 	ldw	r2,0(r4)
 100658c:	1184983a 	sll	r2,r2,r6
 1006590:	1884b03a 	or	r2,r3,r2
 1006594:	28800015 	stw	r2,0(r5)
 1006598:	20c00017 	ldw	r3,0(r4)
 100659c:	21000104 	addi	r4,r4,4
 10065a0:	29400104 	addi	r5,r5,4
 10065a4:	1a06d83a 	srl	r3,r3,r8
 10065a8:	21fff736 	bltu	r4,r7,1006588 <__lshift+0xb4>
 10065ac:	28c00015 	stw	r3,0(r5)
 10065b0:	18000126 	beq	r3,zero,10065b8 <__lshift+0xe4>
 10065b4:	8c400044 	addi	r17,r17,1
 10065b8:	88bfffc4 	addi	r2,r17,-1
 10065bc:	98800415 	stw	r2,16(r19)
 10065c0:	a809883a 	mov	r4,r21
 10065c4:	900b883a 	mov	r5,r18
 10065c8:	1005b900 	call	1005b90 <_Bfree>
 10065cc:	9805883a 	mov	r2,r19
 10065d0:	dfc00617 	ldw	ra,24(sp)
 10065d4:	dd400517 	ldw	r21,20(sp)
 10065d8:	dd000417 	ldw	r20,16(sp)
 10065dc:	dcc00317 	ldw	r19,12(sp)
 10065e0:	dc800217 	ldw	r18,8(sp)
 10065e4:	dc400117 	ldw	r17,4(sp)
 10065e8:	dc000017 	ldw	r16,0(sp)
 10065ec:	dec00704 	addi	sp,sp,28
 10065f0:	f800283a 	ret
 10065f4:	20800017 	ldw	r2,0(r4)
 10065f8:	21000104 	addi	r4,r4,4
 10065fc:	28800015 	stw	r2,0(r5)
 1006600:	29400104 	addi	r5,r5,4
 1006604:	21ffec2e 	bgeu	r4,r7,10065b8 <__lshift+0xe4>
 1006608:	20800017 	ldw	r2,0(r4)
 100660c:	21000104 	addi	r4,r4,4
 1006610:	28800015 	stw	r2,0(r5)
 1006614:	29400104 	addi	r5,r5,4
 1006618:	21fff636 	bltu	r4,r7,10065f4 <__lshift+0x120>
 100661c:	003fe606 	br	10065b8 <__lshift+0xe4>

01006620 <__multiply>:
 1006620:	defff004 	addi	sp,sp,-64
 1006624:	dc800815 	stw	r18,32(sp)
 1006628:	dc400715 	stw	r17,28(sp)
 100662c:	2c800417 	ldw	r18,16(r5)
 1006630:	34400417 	ldw	r17,16(r6)
 1006634:	dcc00915 	stw	r19,36(sp)
 1006638:	dc000615 	stw	r16,24(sp)
 100663c:	dfc00f15 	stw	ra,60(sp)
 1006640:	df000e15 	stw	fp,56(sp)
 1006644:	ddc00d15 	stw	r23,52(sp)
 1006648:	dd800c15 	stw	r22,48(sp)
 100664c:	dd400b15 	stw	r21,44(sp)
 1006650:	dd000a15 	stw	r20,40(sp)
 1006654:	2821883a 	mov	r16,r5
 1006658:	3027883a 	mov	r19,r6
 100665c:	9440040e 	bge	r18,r17,1006670 <__multiply+0x50>
 1006660:	8825883a 	mov	r18,r17
 1006664:	2c400417 	ldw	r17,16(r5)
 1006668:	2827883a 	mov	r19,r5
 100666c:	3021883a 	mov	r16,r6
 1006670:	80800217 	ldw	r2,8(r16)
 1006674:	9447883a 	add	r3,r18,r17
 1006678:	d8c00415 	stw	r3,16(sp)
 100667c:	81400117 	ldw	r5,4(r16)
 1006680:	10c0010e 	bge	r2,r3,1006688 <__multiply+0x68>
 1006684:	29400044 	addi	r5,r5,1
 1006688:	10061100 	call	1006110 <_Balloc>
 100668c:	d8800515 	stw	r2,20(sp)
 1006690:	d9000417 	ldw	r4,16(sp)
 1006694:	d8c00517 	ldw	r3,20(sp)
 1006698:	2105883a 	add	r2,r4,r4
 100669c:	1085883a 	add	r2,r2,r2
 10066a0:	19000504 	addi	r4,r3,20
 10066a4:	2085883a 	add	r2,r4,r2
 10066a8:	d8800315 	stw	r2,12(sp)
 10066ac:	2080052e 	bgeu	r4,r2,10066c4 <__multiply+0xa4>
 10066b0:	2005883a 	mov	r2,r4
 10066b4:	d8c00317 	ldw	r3,12(sp)
 10066b8:	10000015 	stw	zero,0(r2)
 10066bc:	10800104 	addi	r2,r2,4
 10066c0:	10fffc36 	bltu	r2,r3,10066b4 <__multiply+0x94>
 10066c4:	8c45883a 	add	r2,r17,r17
 10066c8:	9487883a 	add	r3,r18,r18
 10066cc:	9dc00504 	addi	r23,r19,20
 10066d0:	1085883a 	add	r2,r2,r2
 10066d4:	84000504 	addi	r16,r16,20
 10066d8:	18c7883a 	add	r3,r3,r3
 10066dc:	b885883a 	add	r2,r23,r2
 10066e0:	dc000015 	stw	r16,0(sp)
 10066e4:	d8800215 	stw	r2,8(sp)
 10066e8:	80f9883a 	add	fp,r16,r3
 10066ec:	b880432e 	bgeu	r23,r2,10067fc <__multiply+0x1dc>
 10066f0:	d9000115 	stw	r4,4(sp)
 10066f4:	b9000017 	ldw	r4,0(r23)
 10066f8:	253fffcc 	andi	r20,r4,65535
 10066fc:	a0001a26 	beq	r20,zero,1006768 <__multiply+0x148>
 1006700:	dcc00017 	ldw	r19,0(sp)
 1006704:	dc800117 	ldw	r18,4(sp)
 1006708:	002b883a 	mov	r21,zero
 100670c:	9c400017 	ldw	r17,0(r19)
 1006710:	94000017 	ldw	r16,0(r18)
 1006714:	a009883a 	mov	r4,r20
 1006718:	897fffcc 	andi	r5,r17,65535
 100671c:	10098e40 	call	10098e4 <__mulsi3>
 1006720:	880ad43a 	srli	r5,r17,16
 1006724:	80ffffcc 	andi	r3,r16,65535
 1006728:	a8c7883a 	add	r3,r21,r3
 100672c:	a009883a 	mov	r4,r20
 1006730:	10e3883a 	add	r17,r2,r3
 1006734:	8020d43a 	srli	r16,r16,16
 1006738:	10098e40 	call	10098e4 <__mulsi3>
 100673c:	8806d43a 	srli	r3,r17,16
 1006740:	1405883a 	add	r2,r2,r16
 1006744:	9cc00104 	addi	r19,r19,4
 1006748:	1887883a 	add	r3,r3,r2
 100674c:	90c0008d 	sth	r3,2(r18)
 1006750:	9440000d 	sth	r17,0(r18)
 1006754:	182ad43a 	srli	r21,r3,16
 1006758:	94800104 	addi	r18,r18,4
 100675c:	9f3feb36 	bltu	r19,fp,100670c <__multiply+0xec>
 1006760:	95400015 	stw	r21,0(r18)
 1006764:	b9000017 	ldw	r4,0(r23)
 1006768:	202ad43a 	srli	r21,r4,16
 100676c:	a8001c26 	beq	r21,zero,10067e0 <__multiply+0x1c0>
 1006770:	d9000117 	ldw	r4,4(sp)
 1006774:	dd000017 	ldw	r20,0(sp)
 1006778:	002d883a 	mov	r22,zero
 100677c:	24c00017 	ldw	r19,0(r4)
 1006780:	2025883a 	mov	r18,r4
 1006784:	9823883a 	mov	r17,r19
 1006788:	a4000017 	ldw	r16,0(r20)
 100678c:	a809883a 	mov	r4,r21
 1006790:	a5000104 	addi	r20,r20,4
 1006794:	817fffcc 	andi	r5,r16,65535
 1006798:	10098e40 	call	10098e4 <__mulsi3>
 100679c:	8806d43a 	srli	r3,r17,16
 10067a0:	800ad43a 	srli	r5,r16,16
 10067a4:	94c0000d 	sth	r19,0(r18)
 10067a8:	b0c7883a 	add	r3,r22,r3
 10067ac:	10e1883a 	add	r16,r2,r3
 10067b0:	9400008d 	sth	r16,2(r18)
 10067b4:	a809883a 	mov	r4,r21
 10067b8:	94800104 	addi	r18,r18,4
 10067bc:	10098e40 	call	10098e4 <__mulsi3>
 10067c0:	94400017 	ldw	r17,0(r18)
 10067c4:	8020d43a 	srli	r16,r16,16
 10067c8:	88ffffcc 	andi	r3,r17,65535
 10067cc:	10c5883a 	add	r2,r2,r3
 10067d0:	80a7883a 	add	r19,r16,r2
 10067d4:	982cd43a 	srli	r22,r19,16
 10067d8:	a73feb36 	bltu	r20,fp,1006788 <__multiply+0x168>
 10067dc:	94c00015 	stw	r19,0(r18)
 10067e0:	d8800217 	ldw	r2,8(sp)
 10067e4:	bdc00104 	addi	r23,r23,4
 10067e8:	b880042e 	bgeu	r23,r2,10067fc <__multiply+0x1dc>
 10067ec:	d8c00117 	ldw	r3,4(sp)
 10067f0:	18c00104 	addi	r3,r3,4
 10067f4:	d8c00115 	stw	r3,4(sp)
 10067f8:	003fbe06 	br	10066f4 <__multiply+0xd4>
 10067fc:	d9000417 	ldw	r4,16(sp)
 1006800:	01000c0e 	bge	zero,r4,1006834 <__multiply+0x214>
 1006804:	d8c00317 	ldw	r3,12(sp)
 1006808:	18bfff17 	ldw	r2,-4(r3)
 100680c:	18ffff04 	addi	r3,r3,-4
 1006810:	10000326 	beq	r2,zero,1006820 <__multiply+0x200>
 1006814:	00000706 	br	1006834 <__multiply+0x214>
 1006818:	18800017 	ldw	r2,0(r3)
 100681c:	1000051e 	bne	r2,zero,1006834 <__multiply+0x214>
 1006820:	d9000417 	ldw	r4,16(sp)
 1006824:	18ffff04 	addi	r3,r3,-4
 1006828:	213fffc4 	addi	r4,r4,-1
 100682c:	d9000415 	stw	r4,16(sp)
 1006830:	203ff91e 	bne	r4,zero,1006818 <__multiply+0x1f8>
 1006834:	d8800417 	ldw	r2,16(sp)
 1006838:	d8c00517 	ldw	r3,20(sp)
 100683c:	18800415 	stw	r2,16(r3)
 1006840:	1805883a 	mov	r2,r3
 1006844:	dfc00f17 	ldw	ra,60(sp)
 1006848:	df000e17 	ldw	fp,56(sp)
 100684c:	ddc00d17 	ldw	r23,52(sp)
 1006850:	dd800c17 	ldw	r22,48(sp)
 1006854:	dd400b17 	ldw	r21,44(sp)
 1006858:	dd000a17 	ldw	r20,40(sp)
 100685c:	dcc00917 	ldw	r19,36(sp)
 1006860:	dc800817 	ldw	r18,32(sp)
 1006864:	dc400717 	ldw	r17,28(sp)
 1006868:	dc000617 	ldw	r16,24(sp)
 100686c:	dec01004 	addi	sp,sp,64
 1006870:	f800283a 	ret

01006874 <__i2b>:
 1006874:	defffd04 	addi	sp,sp,-12
 1006878:	dc000015 	stw	r16,0(sp)
 100687c:	04000044 	movi	r16,1
 1006880:	dc800115 	stw	r18,4(sp)
 1006884:	2825883a 	mov	r18,r5
 1006888:	800b883a 	mov	r5,r16
 100688c:	dfc00215 	stw	ra,8(sp)
 1006890:	10061100 	call	1006110 <_Balloc>
 1006894:	14000415 	stw	r16,16(r2)
 1006898:	14800515 	stw	r18,20(r2)
 100689c:	dfc00217 	ldw	ra,8(sp)
 10068a0:	dc800117 	ldw	r18,4(sp)
 10068a4:	dc000017 	ldw	r16,0(sp)
 10068a8:	dec00304 	addi	sp,sp,12
 10068ac:	f800283a 	ret

010068b0 <__multadd>:
 10068b0:	defff604 	addi	sp,sp,-40
 10068b4:	dd800615 	stw	r22,24(sp)
 10068b8:	2d800417 	ldw	r22,16(r5)
 10068bc:	df000815 	stw	fp,32(sp)
 10068c0:	ddc00715 	stw	r23,28(sp)
 10068c4:	dd400515 	stw	r21,20(sp)
 10068c8:	dd000415 	stw	r20,16(sp)
 10068cc:	dcc00315 	stw	r19,12(sp)
 10068d0:	dc800215 	stw	r18,8(sp)
 10068d4:	dfc00915 	stw	ra,36(sp)
 10068d8:	dc400115 	stw	r17,4(sp)
 10068dc:	dc000015 	stw	r16,0(sp)
 10068e0:	282f883a 	mov	r23,r5
 10068e4:	2039883a 	mov	fp,r4
 10068e8:	302b883a 	mov	r21,r6
 10068ec:	3829883a 	mov	r20,r7
 10068f0:	2c800504 	addi	r18,r5,20
 10068f4:	0027883a 	mov	r19,zero
 10068f8:	94400017 	ldw	r17,0(r18)
 10068fc:	a80b883a 	mov	r5,r21
 1006900:	9cc00044 	addi	r19,r19,1
 1006904:	893fffcc 	andi	r4,r17,65535
 1006908:	10098e40 	call	10098e4 <__mulsi3>
 100690c:	8808d43a 	srli	r4,r17,16
 1006910:	1521883a 	add	r16,r2,r20
 1006914:	a80b883a 	mov	r5,r21
 1006918:	10098e40 	call	10098e4 <__mulsi3>
 100691c:	8008d43a 	srli	r4,r16,16
 1006920:	843fffcc 	andi	r16,r16,65535
 1006924:	1105883a 	add	r2,r2,r4
 1006928:	1006943a 	slli	r3,r2,16
 100692c:	1028d43a 	srli	r20,r2,16
 1006930:	1c07883a 	add	r3,r3,r16
 1006934:	90c00015 	stw	r3,0(r18)
 1006938:	94800104 	addi	r18,r18,4
 100693c:	9dbfee16 	blt	r19,r22,10068f8 <__multadd+0x48>
 1006940:	a0000826 	beq	r20,zero,1006964 <__multadd+0xb4>
 1006944:	b8800217 	ldw	r2,8(r23)
 1006948:	b080130e 	bge	r22,r2,1006998 <__multadd+0xe8>
 100694c:	b585883a 	add	r2,r22,r22
 1006950:	1085883a 	add	r2,r2,r2
 1006954:	15c5883a 	add	r2,r2,r23
 1006958:	b0c00044 	addi	r3,r22,1
 100695c:	15000515 	stw	r20,20(r2)
 1006960:	b8c00415 	stw	r3,16(r23)
 1006964:	b805883a 	mov	r2,r23
 1006968:	dfc00917 	ldw	ra,36(sp)
 100696c:	df000817 	ldw	fp,32(sp)
 1006970:	ddc00717 	ldw	r23,28(sp)
 1006974:	dd800617 	ldw	r22,24(sp)
 1006978:	dd400517 	ldw	r21,20(sp)
 100697c:	dd000417 	ldw	r20,16(sp)
 1006980:	dcc00317 	ldw	r19,12(sp)
 1006984:	dc800217 	ldw	r18,8(sp)
 1006988:	dc400117 	ldw	r17,4(sp)
 100698c:	dc000017 	ldw	r16,0(sp)
 1006990:	dec00a04 	addi	sp,sp,40
 1006994:	f800283a 	ret
 1006998:	b9400117 	ldw	r5,4(r23)
 100699c:	e009883a 	mov	r4,fp
 10069a0:	29400044 	addi	r5,r5,1
 10069a4:	10061100 	call	1006110 <_Balloc>
 10069a8:	b9800417 	ldw	r6,16(r23)
 10069ac:	b9400304 	addi	r5,r23,12
 10069b0:	11000304 	addi	r4,r2,12
 10069b4:	318d883a 	add	r6,r6,r6
 10069b8:	318d883a 	add	r6,r6,r6
 10069bc:	31800204 	addi	r6,r6,8
 10069c0:	1023883a 	mov	r17,r2
 10069c4:	10059780 	call	1005978 <memcpy>
 10069c8:	b80b883a 	mov	r5,r23
 10069cc:	e009883a 	mov	r4,fp
 10069d0:	1005b900 	call	1005b90 <_Bfree>
 10069d4:	882f883a 	mov	r23,r17
 10069d8:	003fdc06 	br	100694c <__multadd+0x9c>

010069dc <__pow5mult>:
 10069dc:	defffa04 	addi	sp,sp,-24
 10069e0:	308000cc 	andi	r2,r6,3
 10069e4:	dd000415 	stw	r20,16(sp)
 10069e8:	dcc00315 	stw	r19,12(sp)
 10069ec:	dc000015 	stw	r16,0(sp)
 10069f0:	dfc00515 	stw	ra,20(sp)
 10069f4:	dc800215 	stw	r18,8(sp)
 10069f8:	dc400115 	stw	r17,4(sp)
 10069fc:	3021883a 	mov	r16,r6
 1006a00:	2027883a 	mov	r19,r4
 1006a04:	2829883a 	mov	r20,r5
 1006a08:	10002b1e 	bne	r2,zero,1006ab8 <__pow5mult+0xdc>
 1006a0c:	8025d0ba 	srai	r18,r16,2
 1006a10:	90001b26 	beq	r18,zero,1006a80 <__pow5mult+0xa4>
 1006a14:	9c001217 	ldw	r16,72(r19)
 1006a18:	8000081e 	bne	r16,zero,1006a3c <__pow5mult+0x60>
 1006a1c:	00003006 	br	1006ae0 <__pow5mult+0x104>
 1006a20:	800b883a 	mov	r5,r16
 1006a24:	800d883a 	mov	r6,r16
 1006a28:	9809883a 	mov	r4,r19
 1006a2c:	90001426 	beq	r18,zero,1006a80 <__pow5mult+0xa4>
 1006a30:	80800017 	ldw	r2,0(r16)
 1006a34:	10001b26 	beq	r2,zero,1006aa4 <__pow5mult+0xc8>
 1006a38:	1021883a 	mov	r16,r2
 1006a3c:	9080004c 	andi	r2,r18,1
 1006a40:	1005003a 	cmpeq	r2,r2,zero
 1006a44:	9025d07a 	srai	r18,r18,1
 1006a48:	800d883a 	mov	r6,r16
 1006a4c:	9809883a 	mov	r4,r19
 1006a50:	a00b883a 	mov	r5,r20
 1006a54:	103ff21e 	bne	r2,zero,1006a20 <__pow5mult+0x44>
 1006a58:	10066200 	call	1006620 <__multiply>
 1006a5c:	a00b883a 	mov	r5,r20
 1006a60:	9809883a 	mov	r4,r19
 1006a64:	1023883a 	mov	r17,r2
 1006a68:	1005b900 	call	1005b90 <_Bfree>
 1006a6c:	8829883a 	mov	r20,r17
 1006a70:	800b883a 	mov	r5,r16
 1006a74:	800d883a 	mov	r6,r16
 1006a78:	9809883a 	mov	r4,r19
 1006a7c:	903fec1e 	bne	r18,zero,1006a30 <__pow5mult+0x54>
 1006a80:	a005883a 	mov	r2,r20
 1006a84:	dfc00517 	ldw	ra,20(sp)
 1006a88:	dd000417 	ldw	r20,16(sp)
 1006a8c:	dcc00317 	ldw	r19,12(sp)
 1006a90:	dc800217 	ldw	r18,8(sp)
 1006a94:	dc400117 	ldw	r17,4(sp)
 1006a98:	dc000017 	ldw	r16,0(sp)
 1006a9c:	dec00604 	addi	sp,sp,24
 1006aa0:	f800283a 	ret
 1006aa4:	10066200 	call	1006620 <__multiply>
 1006aa8:	80800015 	stw	r2,0(r16)
 1006aac:	1021883a 	mov	r16,r2
 1006ab0:	10000015 	stw	zero,0(r2)
 1006ab4:	003fe106 	br	1006a3c <__pow5mult+0x60>
 1006ab8:	1085883a 	add	r2,r2,r2
 1006abc:	00c04074 	movhi	r3,257
 1006ac0:	18d83704 	addi	r3,r3,24796
 1006ac4:	1085883a 	add	r2,r2,r2
 1006ac8:	10c5883a 	add	r2,r2,r3
 1006acc:	11bfff17 	ldw	r6,-4(r2)
 1006ad0:	000f883a 	mov	r7,zero
 1006ad4:	10068b00 	call	10068b0 <__multadd>
 1006ad8:	1029883a 	mov	r20,r2
 1006adc:	003fcb06 	br	1006a0c <__pow5mult+0x30>
 1006ae0:	9809883a 	mov	r4,r19
 1006ae4:	01409c44 	movi	r5,625
 1006ae8:	10068740 	call	1006874 <__i2b>
 1006aec:	98801215 	stw	r2,72(r19)
 1006af0:	1021883a 	mov	r16,r2
 1006af4:	10000015 	stw	zero,0(r2)
 1006af8:	003fd006 	br	1006a3c <__pow5mult+0x60>

01006afc <__s2b>:
 1006afc:	defff904 	addi	sp,sp,-28
 1006b00:	dcc00315 	stw	r19,12(sp)
 1006b04:	dc800215 	stw	r18,8(sp)
 1006b08:	2827883a 	mov	r19,r5
 1006b0c:	2025883a 	mov	r18,r4
 1006b10:	01400244 	movi	r5,9
 1006b14:	39000204 	addi	r4,r7,8
 1006b18:	dd000415 	stw	r20,16(sp)
 1006b1c:	dc400115 	stw	r17,4(sp)
 1006b20:	dfc00615 	stw	ra,24(sp)
 1006b24:	dd400515 	stw	r21,20(sp)
 1006b28:	dc000015 	stw	r16,0(sp)
 1006b2c:	3829883a 	mov	r20,r7
 1006b30:	3023883a 	mov	r17,r6
 1006b34:	10098140 	call	1009814 <__divsi3>
 1006b38:	00c00044 	movi	r3,1
 1006b3c:	1880350e 	bge	r3,r2,1006c14 <__s2b+0x118>
 1006b40:	000b883a 	mov	r5,zero
 1006b44:	18c7883a 	add	r3,r3,r3
 1006b48:	29400044 	addi	r5,r5,1
 1006b4c:	18bffd16 	blt	r3,r2,1006b44 <__s2b+0x48>
 1006b50:	9009883a 	mov	r4,r18
 1006b54:	10061100 	call	1006110 <_Balloc>
 1006b58:	1011883a 	mov	r8,r2
 1006b5c:	d8800717 	ldw	r2,28(sp)
 1006b60:	00c00044 	movi	r3,1
 1006b64:	01800244 	movi	r6,9
 1006b68:	40800515 	stw	r2,20(r8)
 1006b6c:	40c00415 	stw	r3,16(r8)
 1006b70:	3440260e 	bge	r6,r17,1006c0c <__s2b+0x110>
 1006b74:	3021883a 	mov	r16,r6
 1006b78:	99ab883a 	add	r21,r19,r6
 1006b7c:	9c05883a 	add	r2,r19,r16
 1006b80:	11c00007 	ldb	r7,0(r2)
 1006b84:	400b883a 	mov	r5,r8
 1006b88:	9009883a 	mov	r4,r18
 1006b8c:	39fff404 	addi	r7,r7,-48
 1006b90:	01800284 	movi	r6,10
 1006b94:	10068b00 	call	10068b0 <__multadd>
 1006b98:	84000044 	addi	r16,r16,1
 1006b9c:	1011883a 	mov	r8,r2
 1006ba0:	8c3ff61e 	bne	r17,r16,1006b7c <__s2b+0x80>
 1006ba4:	ac45883a 	add	r2,r21,r17
 1006ba8:	117ffe04 	addi	r5,r2,-8
 1006bac:	880d883a 	mov	r6,r17
 1006bb0:	35000c0e 	bge	r6,r20,1006be4 <__s2b+0xe8>
 1006bb4:	a185c83a 	sub	r2,r20,r6
 1006bb8:	2821883a 	mov	r16,r5
 1006bbc:	28a3883a 	add	r17,r5,r2
 1006bc0:	81c00007 	ldb	r7,0(r16)
 1006bc4:	400b883a 	mov	r5,r8
 1006bc8:	9009883a 	mov	r4,r18
 1006bcc:	39fff404 	addi	r7,r7,-48
 1006bd0:	01800284 	movi	r6,10
 1006bd4:	10068b00 	call	10068b0 <__multadd>
 1006bd8:	84000044 	addi	r16,r16,1
 1006bdc:	1011883a 	mov	r8,r2
 1006be0:	847ff71e 	bne	r16,r17,1006bc0 <__s2b+0xc4>
 1006be4:	4005883a 	mov	r2,r8
 1006be8:	dfc00617 	ldw	ra,24(sp)
 1006bec:	dd400517 	ldw	r21,20(sp)
 1006bf0:	dd000417 	ldw	r20,16(sp)
 1006bf4:	dcc00317 	ldw	r19,12(sp)
 1006bf8:	dc800217 	ldw	r18,8(sp)
 1006bfc:	dc400117 	ldw	r17,4(sp)
 1006c00:	dc000017 	ldw	r16,0(sp)
 1006c04:	dec00704 	addi	sp,sp,28
 1006c08:	f800283a 	ret
 1006c0c:	99400284 	addi	r5,r19,10
 1006c10:	003fe706 	br	1006bb0 <__s2b+0xb4>
 1006c14:	000b883a 	mov	r5,zero
 1006c18:	003fcd06 	br	1006b50 <__s2b+0x54>

01006c1c <_realloc_r>:
 1006c1c:	defff404 	addi	sp,sp,-48
 1006c20:	dd800815 	stw	r22,32(sp)
 1006c24:	dc800415 	stw	r18,16(sp)
 1006c28:	dc400315 	stw	r17,12(sp)
 1006c2c:	dfc00b15 	stw	ra,44(sp)
 1006c30:	df000a15 	stw	fp,40(sp)
 1006c34:	ddc00915 	stw	r23,36(sp)
 1006c38:	dd400715 	stw	r21,28(sp)
 1006c3c:	dd000615 	stw	r20,24(sp)
 1006c40:	dcc00515 	stw	r19,20(sp)
 1006c44:	dc000215 	stw	r16,8(sp)
 1006c48:	2825883a 	mov	r18,r5
 1006c4c:	3023883a 	mov	r17,r6
 1006c50:	202d883a 	mov	r22,r4
 1006c54:	2800c926 	beq	r5,zero,1006f7c <_realloc_r+0x360>
 1006c58:	100ac080 	call	100ac08 <__malloc_lock>
 1006c5c:	943ffe04 	addi	r16,r18,-8
 1006c60:	88c002c4 	addi	r3,r17,11
 1006c64:	00800584 	movi	r2,22
 1006c68:	82000117 	ldw	r8,4(r16)
 1006c6c:	10c01b2e 	bgeu	r2,r3,1006cdc <_realloc_r+0xc0>
 1006c70:	00bffe04 	movi	r2,-8
 1006c74:	188e703a 	and	r7,r3,r2
 1006c78:	3839883a 	mov	fp,r7
 1006c7c:	38001a16 	blt	r7,zero,1006ce8 <_realloc_r+0xcc>
 1006c80:	e4401936 	bltu	fp,r17,1006ce8 <_realloc_r+0xcc>
 1006c84:	013fff04 	movi	r4,-4
 1006c88:	4126703a 	and	r19,r8,r4
 1006c8c:	99c02616 	blt	r19,r7,1006d28 <_realloc_r+0x10c>
 1006c90:	802b883a 	mov	r21,r16
 1006c94:	9829883a 	mov	r20,r19
 1006c98:	84000204 	addi	r16,r16,8
 1006c9c:	a80f883a 	mov	r7,r21
 1006ca0:	a70dc83a 	sub	r6,r20,fp
 1006ca4:	008003c4 	movi	r2,15
 1006ca8:	1180c136 	bltu	r2,r6,1006fb0 <_realloc_r+0x394>
 1006cac:	38800117 	ldw	r2,4(r7)
 1006cb0:	a549883a 	add	r4,r20,r21
 1006cb4:	1080004c 	andi	r2,r2,1
 1006cb8:	a084b03a 	or	r2,r20,r2
 1006cbc:	38800115 	stw	r2,4(r7)
 1006cc0:	20c00117 	ldw	r3,4(r4)
 1006cc4:	18c00054 	ori	r3,r3,1
 1006cc8:	20c00115 	stw	r3,4(r4)
 1006ccc:	b009883a 	mov	r4,r22
 1006cd0:	100ad100 	call	100ad10 <__malloc_unlock>
 1006cd4:	8023883a 	mov	r17,r16
 1006cd8:	00000606 	br	1006cf4 <_realloc_r+0xd8>
 1006cdc:	01c00404 	movi	r7,16
 1006ce0:	3839883a 	mov	fp,r7
 1006ce4:	e47fe72e 	bgeu	fp,r17,1006c84 <_realloc_r+0x68>
 1006ce8:	00800304 	movi	r2,12
 1006cec:	0023883a 	mov	r17,zero
 1006cf0:	b0800015 	stw	r2,0(r22)
 1006cf4:	8805883a 	mov	r2,r17
 1006cf8:	dfc00b17 	ldw	ra,44(sp)
 1006cfc:	df000a17 	ldw	fp,40(sp)
 1006d00:	ddc00917 	ldw	r23,36(sp)
 1006d04:	dd800817 	ldw	r22,32(sp)
 1006d08:	dd400717 	ldw	r21,28(sp)
 1006d0c:	dd000617 	ldw	r20,24(sp)
 1006d10:	dcc00517 	ldw	r19,20(sp)
 1006d14:	dc800417 	ldw	r18,16(sp)
 1006d18:	dc400317 	ldw	r17,12(sp)
 1006d1c:	dc000217 	ldw	r16,8(sp)
 1006d20:	dec00c04 	addi	sp,sp,48
 1006d24:	f800283a 	ret
 1006d28:	00804074 	movhi	r2,257
 1006d2c:	1099dc04 	addi	r2,r2,26480
 1006d30:	12400217 	ldw	r9,8(r2)
 1006d34:	84cd883a 	add	r6,r16,r19
 1006d38:	802b883a 	mov	r21,r16
 1006d3c:	3240b926 	beq	r6,r9,1007024 <_realloc_r+0x408>
 1006d40:	31400117 	ldw	r5,4(r6)
 1006d44:	00bfff84 	movi	r2,-2
 1006d48:	2884703a 	and	r2,r5,r2
 1006d4c:	1185883a 	add	r2,r2,r6
 1006d50:	10c00117 	ldw	r3,4(r2)
 1006d54:	18c0004c 	andi	r3,r3,1
 1006d58:	1807003a 	cmpeq	r3,r3,zero
 1006d5c:	1800a326 	beq	r3,zero,1006fec <_realloc_r+0x3d0>
 1006d60:	2908703a 	and	r4,r5,r4
 1006d64:	9929883a 	add	r20,r19,r4
 1006d68:	a1c0a30e 	bge	r20,r7,1006ff8 <_realloc_r+0x3dc>
 1006d6c:	4080004c 	andi	r2,r8,1
 1006d70:	1000551e 	bne	r2,zero,1006ec8 <_realloc_r+0x2ac>
 1006d74:	80800017 	ldw	r2,0(r16)
 1006d78:	80afc83a 	sub	r23,r16,r2
 1006d7c:	b8c00117 	ldw	r3,4(r23)
 1006d80:	00bfff04 	movi	r2,-4
 1006d84:	1884703a 	and	r2,r3,r2
 1006d88:	30002e26 	beq	r6,zero,1006e44 <_realloc_r+0x228>
 1006d8c:	3240b926 	beq	r6,r9,1007074 <_realloc_r+0x458>
 1006d90:	98a9883a 	add	r20,r19,r2
 1006d94:	2509883a 	add	r4,r4,r20
 1006d98:	d9000015 	stw	r4,0(sp)
 1006d9c:	21c02a16 	blt	r4,r7,1006e48 <_realloc_r+0x22c>
 1006da0:	30800317 	ldw	r2,12(r6)
 1006da4:	30c00217 	ldw	r3,8(r6)
 1006da8:	01400904 	movi	r5,36
 1006dac:	99bfff04 	addi	r6,r19,-4
 1006db0:	18800315 	stw	r2,12(r3)
 1006db4:	10c00215 	stw	r3,8(r2)
 1006db8:	b9000317 	ldw	r4,12(r23)
 1006dbc:	b8800217 	ldw	r2,8(r23)
 1006dc0:	b82b883a 	mov	r21,r23
 1006dc4:	bc000204 	addi	r16,r23,8
 1006dc8:	20800215 	stw	r2,8(r4)
 1006dcc:	11000315 	stw	r4,12(r2)
 1006dd0:	2980e436 	bltu	r5,r6,1007164 <_realloc_r+0x548>
 1006dd4:	008004c4 	movi	r2,19
 1006dd8:	9009883a 	mov	r4,r18
 1006ddc:	8011883a 	mov	r8,r16
 1006de0:	11800f2e 	bgeu	r2,r6,1006e20 <_realloc_r+0x204>
 1006de4:	90800017 	ldw	r2,0(r18)
 1006de8:	ba000404 	addi	r8,r23,16
 1006dec:	91000204 	addi	r4,r18,8
 1006df0:	b8800215 	stw	r2,8(r23)
 1006df4:	90c00117 	ldw	r3,4(r18)
 1006df8:	008006c4 	movi	r2,27
 1006dfc:	b8c00315 	stw	r3,12(r23)
 1006e00:	1180072e 	bgeu	r2,r6,1006e20 <_realloc_r+0x204>
 1006e04:	90c00217 	ldw	r3,8(r18)
 1006e08:	ba000604 	addi	r8,r23,24
 1006e0c:	91000404 	addi	r4,r18,16
 1006e10:	b8c00415 	stw	r3,16(r23)
 1006e14:	90800317 	ldw	r2,12(r18)
 1006e18:	b8800515 	stw	r2,20(r23)
 1006e1c:	3140e726 	beq	r6,r5,10071bc <_realloc_r+0x5a0>
 1006e20:	20800017 	ldw	r2,0(r4)
 1006e24:	dd000017 	ldw	r20,0(sp)
 1006e28:	b80f883a 	mov	r7,r23
 1006e2c:	40800015 	stw	r2,0(r8)
 1006e30:	20c00117 	ldw	r3,4(r4)
 1006e34:	40c00115 	stw	r3,4(r8)
 1006e38:	20800217 	ldw	r2,8(r4)
 1006e3c:	40800215 	stw	r2,8(r8)
 1006e40:	003f9706 	br	1006ca0 <_realloc_r+0x84>
 1006e44:	98a9883a 	add	r20,r19,r2
 1006e48:	a1c01f16 	blt	r20,r7,1006ec8 <_realloc_r+0x2ac>
 1006e4c:	b8c00317 	ldw	r3,12(r23)
 1006e50:	b8800217 	ldw	r2,8(r23)
 1006e54:	99bfff04 	addi	r6,r19,-4
 1006e58:	01400904 	movi	r5,36
 1006e5c:	b82b883a 	mov	r21,r23
 1006e60:	18800215 	stw	r2,8(r3)
 1006e64:	10c00315 	stw	r3,12(r2)
 1006e68:	bc000204 	addi	r16,r23,8
 1006e6c:	2980c336 	bltu	r5,r6,100717c <_realloc_r+0x560>
 1006e70:	008004c4 	movi	r2,19
 1006e74:	9009883a 	mov	r4,r18
 1006e78:	8011883a 	mov	r8,r16
 1006e7c:	11800f2e 	bgeu	r2,r6,1006ebc <_realloc_r+0x2a0>
 1006e80:	90800017 	ldw	r2,0(r18)
 1006e84:	ba000404 	addi	r8,r23,16
 1006e88:	91000204 	addi	r4,r18,8
 1006e8c:	b8800215 	stw	r2,8(r23)
 1006e90:	90c00117 	ldw	r3,4(r18)
 1006e94:	008006c4 	movi	r2,27
 1006e98:	b8c00315 	stw	r3,12(r23)
 1006e9c:	1180072e 	bgeu	r2,r6,1006ebc <_realloc_r+0x2a0>
 1006ea0:	90c00217 	ldw	r3,8(r18)
 1006ea4:	ba000604 	addi	r8,r23,24
 1006ea8:	91000404 	addi	r4,r18,16
 1006eac:	b8c00415 	stw	r3,16(r23)
 1006eb0:	90800317 	ldw	r2,12(r18)
 1006eb4:	b8800515 	stw	r2,20(r23)
 1006eb8:	3140c726 	beq	r6,r5,10071d8 <_realloc_r+0x5bc>
 1006ebc:	20800017 	ldw	r2,0(r4)
 1006ec0:	b80f883a 	mov	r7,r23
 1006ec4:	003fd906 	br	1006e2c <_realloc_r+0x210>
 1006ec8:	880b883a 	mov	r5,r17
 1006ecc:	b009883a 	mov	r4,r22
 1006ed0:	10051540 	call	1005154 <_malloc_r>
 1006ed4:	1023883a 	mov	r17,r2
 1006ed8:	10002526 	beq	r2,zero,1006f70 <_realloc_r+0x354>
 1006edc:	80800117 	ldw	r2,4(r16)
 1006ee0:	00ffff84 	movi	r3,-2
 1006ee4:	893ffe04 	addi	r4,r17,-8
 1006ee8:	10c4703a 	and	r2,r2,r3
 1006eec:	8085883a 	add	r2,r16,r2
 1006ef0:	20809526 	beq	r4,r2,1007148 <_realloc_r+0x52c>
 1006ef4:	99bfff04 	addi	r6,r19,-4
 1006ef8:	01c00904 	movi	r7,36
 1006efc:	39804536 	bltu	r7,r6,1007014 <_realloc_r+0x3f8>
 1006f00:	008004c4 	movi	r2,19
 1006f04:	9009883a 	mov	r4,r18
 1006f08:	880b883a 	mov	r5,r17
 1006f0c:	11800f2e 	bgeu	r2,r6,1006f4c <_realloc_r+0x330>
 1006f10:	90800017 	ldw	r2,0(r18)
 1006f14:	89400204 	addi	r5,r17,8
 1006f18:	91000204 	addi	r4,r18,8
 1006f1c:	88800015 	stw	r2,0(r17)
 1006f20:	90c00117 	ldw	r3,4(r18)
 1006f24:	008006c4 	movi	r2,27
 1006f28:	88c00115 	stw	r3,4(r17)
 1006f2c:	1180072e 	bgeu	r2,r6,1006f4c <_realloc_r+0x330>
 1006f30:	90c00217 	ldw	r3,8(r18)
 1006f34:	89400404 	addi	r5,r17,16
 1006f38:	91000404 	addi	r4,r18,16
 1006f3c:	88c00215 	stw	r3,8(r17)
 1006f40:	90800317 	ldw	r2,12(r18)
 1006f44:	88800315 	stw	r2,12(r17)
 1006f48:	31c09126 	beq	r6,r7,1007190 <_realloc_r+0x574>
 1006f4c:	20800017 	ldw	r2,0(r4)
 1006f50:	28800015 	stw	r2,0(r5)
 1006f54:	20c00117 	ldw	r3,4(r4)
 1006f58:	28c00115 	stw	r3,4(r5)
 1006f5c:	20800217 	ldw	r2,8(r4)
 1006f60:	28800215 	stw	r2,8(r5)
 1006f64:	900b883a 	mov	r5,r18
 1006f68:	b009883a 	mov	r4,r22
 1006f6c:	10045cc0 	call	10045cc <_free_r>
 1006f70:	b009883a 	mov	r4,r22
 1006f74:	100ad100 	call	100ad10 <__malloc_unlock>
 1006f78:	003f5e06 	br	1006cf4 <_realloc_r+0xd8>
 1006f7c:	300b883a 	mov	r5,r6
 1006f80:	dfc00b17 	ldw	ra,44(sp)
 1006f84:	df000a17 	ldw	fp,40(sp)
 1006f88:	ddc00917 	ldw	r23,36(sp)
 1006f8c:	dd800817 	ldw	r22,32(sp)
 1006f90:	dd400717 	ldw	r21,28(sp)
 1006f94:	dd000617 	ldw	r20,24(sp)
 1006f98:	dcc00517 	ldw	r19,20(sp)
 1006f9c:	dc800417 	ldw	r18,16(sp)
 1006fa0:	dc400317 	ldw	r17,12(sp)
 1006fa4:	dc000217 	ldw	r16,8(sp)
 1006fa8:	dec00c04 	addi	sp,sp,48
 1006fac:	10051541 	jmpi	1005154 <_malloc_r>
 1006fb0:	38800117 	ldw	r2,4(r7)
 1006fb4:	e54b883a 	add	r5,fp,r21
 1006fb8:	31000054 	ori	r4,r6,1
 1006fbc:	1080004c 	andi	r2,r2,1
 1006fc0:	1704b03a 	or	r2,r2,fp
 1006fc4:	38800115 	stw	r2,4(r7)
 1006fc8:	29000115 	stw	r4,4(r5)
 1006fcc:	2987883a 	add	r3,r5,r6
 1006fd0:	18800117 	ldw	r2,4(r3)
 1006fd4:	29400204 	addi	r5,r5,8
 1006fd8:	b009883a 	mov	r4,r22
 1006fdc:	10800054 	ori	r2,r2,1
 1006fe0:	18800115 	stw	r2,4(r3)
 1006fe4:	10045cc0 	call	10045cc <_free_r>
 1006fe8:	003f3806 	br	1006ccc <_realloc_r+0xb0>
 1006fec:	000d883a 	mov	r6,zero
 1006ff0:	0009883a 	mov	r4,zero
 1006ff4:	003f5d06 	br	1006d6c <_realloc_r+0x150>
 1006ff8:	30c00217 	ldw	r3,8(r6)
 1006ffc:	30800317 	ldw	r2,12(r6)
 1007000:	800f883a 	mov	r7,r16
 1007004:	84000204 	addi	r16,r16,8
 1007008:	10c00215 	stw	r3,8(r2)
 100700c:	18800315 	stw	r2,12(r3)
 1007010:	003f2306 	br	1006ca0 <_realloc_r+0x84>
 1007014:	8809883a 	mov	r4,r17
 1007018:	900b883a 	mov	r5,r18
 100701c:	1005a180 	call	1005a18 <memmove>
 1007020:	003fd006 	br	1006f64 <_realloc_r+0x348>
 1007024:	30800117 	ldw	r2,4(r6)
 1007028:	e0c00404 	addi	r3,fp,16
 100702c:	1108703a 	and	r4,r2,r4
 1007030:	9905883a 	add	r2,r19,r4
 1007034:	10ff4d16 	blt	r2,r3,1006d6c <_realloc_r+0x150>
 1007038:	1705c83a 	sub	r2,r2,fp
 100703c:	870b883a 	add	r5,r16,fp
 1007040:	10800054 	ori	r2,r2,1
 1007044:	28800115 	stw	r2,4(r5)
 1007048:	80c00117 	ldw	r3,4(r16)
 100704c:	00804074 	movhi	r2,257
 1007050:	1099dc04 	addi	r2,r2,26480
 1007054:	b009883a 	mov	r4,r22
 1007058:	18c0004c 	andi	r3,r3,1
 100705c:	e0c6b03a 	or	r3,fp,r3
 1007060:	11400215 	stw	r5,8(r2)
 1007064:	80c00115 	stw	r3,4(r16)
 1007068:	100ad100 	call	100ad10 <__malloc_unlock>
 100706c:	84400204 	addi	r17,r16,8
 1007070:	003f2006 	br	1006cf4 <_realloc_r+0xd8>
 1007074:	98a9883a 	add	r20,r19,r2
 1007078:	2509883a 	add	r4,r4,r20
 100707c:	e0800404 	addi	r2,fp,16
 1007080:	d9000115 	stw	r4,4(sp)
 1007084:	20bf7016 	blt	r4,r2,1006e48 <_realloc_r+0x22c>
 1007088:	b8c00317 	ldw	r3,12(r23)
 100708c:	b8800217 	ldw	r2,8(r23)
 1007090:	99bfff04 	addi	r6,r19,-4
 1007094:	01400904 	movi	r5,36
 1007098:	18800215 	stw	r2,8(r3)
 100709c:	10c00315 	stw	r3,12(r2)
 10070a0:	bc400204 	addi	r17,r23,8
 10070a4:	29804136 	bltu	r5,r6,10071ac <_realloc_r+0x590>
 10070a8:	008004c4 	movi	r2,19
 10070ac:	9009883a 	mov	r4,r18
 10070b0:	880f883a 	mov	r7,r17
 10070b4:	11800f2e 	bgeu	r2,r6,10070f4 <_realloc_r+0x4d8>
 10070b8:	90800017 	ldw	r2,0(r18)
 10070bc:	b9c00404 	addi	r7,r23,16
 10070c0:	91000204 	addi	r4,r18,8
 10070c4:	b8800215 	stw	r2,8(r23)
 10070c8:	90c00117 	ldw	r3,4(r18)
 10070cc:	008006c4 	movi	r2,27
 10070d0:	b8c00315 	stw	r3,12(r23)
 10070d4:	1180072e 	bgeu	r2,r6,10070f4 <_realloc_r+0x4d8>
 10070d8:	90c00217 	ldw	r3,8(r18)
 10070dc:	b9c00604 	addi	r7,r23,24
 10070e0:	91000404 	addi	r4,r18,16
 10070e4:	b8c00415 	stw	r3,16(r23)
 10070e8:	90800317 	ldw	r2,12(r18)
 10070ec:	b8800515 	stw	r2,20(r23)
 10070f0:	31404026 	beq	r6,r5,10071f4 <_realloc_r+0x5d8>
 10070f4:	20800017 	ldw	r2,0(r4)
 10070f8:	38800015 	stw	r2,0(r7)
 10070fc:	20c00117 	ldw	r3,4(r4)
 1007100:	38c00115 	stw	r3,4(r7)
 1007104:	20800217 	ldw	r2,8(r4)
 1007108:	38800215 	stw	r2,8(r7)
 100710c:	d8c00117 	ldw	r3,4(sp)
 1007110:	bf0b883a 	add	r5,r23,fp
 1007114:	b009883a 	mov	r4,r22
 1007118:	1f05c83a 	sub	r2,r3,fp
 100711c:	10800054 	ori	r2,r2,1
 1007120:	28800115 	stw	r2,4(r5)
 1007124:	b8c00117 	ldw	r3,4(r23)
 1007128:	00804074 	movhi	r2,257
 100712c:	1099dc04 	addi	r2,r2,26480
 1007130:	11400215 	stw	r5,8(r2)
 1007134:	18c0004c 	andi	r3,r3,1
 1007138:	e0c6b03a 	or	r3,fp,r3
 100713c:	b8c00115 	stw	r3,4(r23)
 1007140:	100ad100 	call	100ad10 <__malloc_unlock>
 1007144:	003eeb06 	br	1006cf4 <_realloc_r+0xd8>
 1007148:	20800117 	ldw	r2,4(r4)
 100714c:	00ffff04 	movi	r3,-4
 1007150:	800f883a 	mov	r7,r16
 1007154:	10c4703a 	and	r2,r2,r3
 1007158:	98a9883a 	add	r20,r19,r2
 100715c:	84000204 	addi	r16,r16,8
 1007160:	003ecf06 	br	1006ca0 <_realloc_r+0x84>
 1007164:	900b883a 	mov	r5,r18
 1007168:	8009883a 	mov	r4,r16
 100716c:	1005a180 	call	1005a18 <memmove>
 1007170:	dd000017 	ldw	r20,0(sp)
 1007174:	b80f883a 	mov	r7,r23
 1007178:	003ec906 	br	1006ca0 <_realloc_r+0x84>
 100717c:	900b883a 	mov	r5,r18
 1007180:	8009883a 	mov	r4,r16
 1007184:	1005a180 	call	1005a18 <memmove>
 1007188:	b80f883a 	mov	r7,r23
 100718c:	003ec406 	br	1006ca0 <_realloc_r+0x84>
 1007190:	90c00417 	ldw	r3,16(r18)
 1007194:	89400604 	addi	r5,r17,24
 1007198:	91000604 	addi	r4,r18,24
 100719c:	88c00415 	stw	r3,16(r17)
 10071a0:	90800517 	ldw	r2,20(r18)
 10071a4:	88800515 	stw	r2,20(r17)
 10071a8:	003f6806 	br	1006f4c <_realloc_r+0x330>
 10071ac:	900b883a 	mov	r5,r18
 10071b0:	8809883a 	mov	r4,r17
 10071b4:	1005a180 	call	1005a18 <memmove>
 10071b8:	003fd406 	br	100710c <_realloc_r+0x4f0>
 10071bc:	90c00417 	ldw	r3,16(r18)
 10071c0:	91000604 	addi	r4,r18,24
 10071c4:	ba000804 	addi	r8,r23,32
 10071c8:	b8c00615 	stw	r3,24(r23)
 10071cc:	90800517 	ldw	r2,20(r18)
 10071d0:	b8800715 	stw	r2,28(r23)
 10071d4:	003f1206 	br	1006e20 <_realloc_r+0x204>
 10071d8:	90c00417 	ldw	r3,16(r18)
 10071dc:	91000604 	addi	r4,r18,24
 10071e0:	ba000804 	addi	r8,r23,32
 10071e4:	b8c00615 	stw	r3,24(r23)
 10071e8:	90800517 	ldw	r2,20(r18)
 10071ec:	b8800715 	stw	r2,28(r23)
 10071f0:	003f3206 	br	1006ebc <_realloc_r+0x2a0>
 10071f4:	90c00417 	ldw	r3,16(r18)
 10071f8:	91000604 	addi	r4,r18,24
 10071fc:	b9c00804 	addi	r7,r23,32
 1007200:	b8c00615 	stw	r3,24(r23)
 1007204:	90800517 	ldw	r2,20(r18)
 1007208:	b8800715 	stw	r2,28(r23)
 100720c:	003fb906 	br	10070f4 <_realloc_r+0x4d8>

01007210 <__isinfd>:
 1007210:	200d883a 	mov	r6,r4
 1007214:	0109c83a 	sub	r4,zero,r4
 1007218:	2188b03a 	or	r4,r4,r6
 100721c:	2008d7fa 	srli	r4,r4,31
 1007220:	00a00034 	movhi	r2,32768
 1007224:	10bfffc4 	addi	r2,r2,-1
 1007228:	1144703a 	and	r2,r2,r5
 100722c:	2088b03a 	or	r4,r4,r2
 1007230:	009ffc34 	movhi	r2,32752
 1007234:	1105c83a 	sub	r2,r2,r4
 1007238:	0087c83a 	sub	r3,zero,r2
 100723c:	10c4b03a 	or	r2,r2,r3
 1007240:	1004d7fa 	srli	r2,r2,31
 1007244:	00c00044 	movi	r3,1
 1007248:	1885c83a 	sub	r2,r3,r2
 100724c:	f800283a 	ret

01007250 <__isnand>:
 1007250:	200d883a 	mov	r6,r4
 1007254:	0109c83a 	sub	r4,zero,r4
 1007258:	2188b03a 	or	r4,r4,r6
 100725c:	2008d7fa 	srli	r4,r4,31
 1007260:	00a00034 	movhi	r2,32768
 1007264:	10bfffc4 	addi	r2,r2,-1
 1007268:	1144703a 	and	r2,r2,r5
 100726c:	2088b03a 	or	r4,r4,r2
 1007270:	009ffc34 	movhi	r2,32752
 1007274:	1105c83a 	sub	r2,r2,r4
 1007278:	1004d7fa 	srli	r2,r2,31
 100727c:	f800283a 	ret

01007280 <_sbrk_r>:
 1007280:	defffd04 	addi	sp,sp,-12
 1007284:	dc000015 	stw	r16,0(sp)
 1007288:	040040b4 	movhi	r16,258
 100728c:	84266d04 	addi	r16,r16,-26188
 1007290:	dc400115 	stw	r17,4(sp)
 1007294:	80000015 	stw	zero,0(r16)
 1007298:	2023883a 	mov	r17,r4
 100729c:	2809883a 	mov	r4,r5
 10072a0:	dfc00215 	stw	ra,8(sp)
 10072a4:	100a8c00 	call	100a8c0 <sbrk>
 10072a8:	1007883a 	mov	r3,r2
 10072ac:	00bfffc4 	movi	r2,-1
 10072b0:	18800626 	beq	r3,r2,10072cc <_sbrk_r+0x4c>
 10072b4:	1805883a 	mov	r2,r3
 10072b8:	dfc00217 	ldw	ra,8(sp)
 10072bc:	dc400117 	ldw	r17,4(sp)
 10072c0:	dc000017 	ldw	r16,0(sp)
 10072c4:	dec00304 	addi	sp,sp,12
 10072c8:	f800283a 	ret
 10072cc:	80800017 	ldw	r2,0(r16)
 10072d0:	103ff826 	beq	r2,zero,10072b4 <_sbrk_r+0x34>
 10072d4:	88800015 	stw	r2,0(r17)
 10072d8:	1805883a 	mov	r2,r3
 10072dc:	dfc00217 	ldw	ra,8(sp)
 10072e0:	dc400117 	ldw	r17,4(sp)
 10072e4:	dc000017 	ldw	r16,0(sp)
 10072e8:	dec00304 	addi	sp,sp,12
 10072ec:	f800283a 	ret

010072f0 <__sclose>:
 10072f0:	2940038f 	ldh	r5,14(r5)
 10072f4:	10076381 	jmpi	1007638 <_close_r>

010072f8 <__sseek>:
 10072f8:	defffe04 	addi	sp,sp,-8
 10072fc:	dc000015 	stw	r16,0(sp)
 1007300:	2821883a 	mov	r16,r5
 1007304:	2940038f 	ldh	r5,14(r5)
 1007308:	dfc00115 	stw	ra,4(sp)
 100730c:	10078b00 	call	10078b0 <_lseek_r>
 1007310:	1007883a 	mov	r3,r2
 1007314:	00bfffc4 	movi	r2,-1
 1007318:	18800926 	beq	r3,r2,1007340 <__sseek+0x48>
 100731c:	8080030b 	ldhu	r2,12(r16)
 1007320:	80c01415 	stw	r3,80(r16)
 1007324:	10840014 	ori	r2,r2,4096
 1007328:	8080030d 	sth	r2,12(r16)
 100732c:	1805883a 	mov	r2,r3
 1007330:	dfc00117 	ldw	ra,4(sp)
 1007334:	dc000017 	ldw	r16,0(sp)
 1007338:	dec00204 	addi	sp,sp,8
 100733c:	f800283a 	ret
 1007340:	8080030b 	ldhu	r2,12(r16)
 1007344:	10bbffcc 	andi	r2,r2,61439
 1007348:	8080030d 	sth	r2,12(r16)
 100734c:	1805883a 	mov	r2,r3
 1007350:	dfc00117 	ldw	ra,4(sp)
 1007354:	dc000017 	ldw	r16,0(sp)
 1007358:	dec00204 	addi	sp,sp,8
 100735c:	f800283a 	ret

01007360 <__swrite>:
 1007360:	2880030b 	ldhu	r2,12(r5)
 1007364:	defffb04 	addi	sp,sp,-20
 1007368:	dcc00315 	stw	r19,12(sp)
 100736c:	1080400c 	andi	r2,r2,256
 1007370:	dc800215 	stw	r18,8(sp)
 1007374:	dc400115 	stw	r17,4(sp)
 1007378:	dc000015 	stw	r16,0(sp)
 100737c:	3027883a 	mov	r19,r6
 1007380:	3825883a 	mov	r18,r7
 1007384:	dfc00415 	stw	ra,16(sp)
 1007388:	2821883a 	mov	r16,r5
 100738c:	000d883a 	mov	r6,zero
 1007390:	01c00084 	movi	r7,2
 1007394:	2023883a 	mov	r17,r4
 1007398:	10000226 	beq	r2,zero,10073a4 <__swrite+0x44>
 100739c:	2940038f 	ldh	r5,14(r5)
 10073a0:	10078b00 	call	10078b0 <_lseek_r>
 10073a4:	8080030b 	ldhu	r2,12(r16)
 10073a8:	8140038f 	ldh	r5,14(r16)
 10073ac:	8809883a 	mov	r4,r17
 10073b0:	10bbffcc 	andi	r2,r2,61439
 10073b4:	980d883a 	mov	r6,r19
 10073b8:	900f883a 	mov	r7,r18
 10073bc:	8080030d 	sth	r2,12(r16)
 10073c0:	dfc00417 	ldw	ra,16(sp)
 10073c4:	dcc00317 	ldw	r19,12(sp)
 10073c8:	dc800217 	ldw	r18,8(sp)
 10073cc:	dc400117 	ldw	r17,4(sp)
 10073d0:	dc000017 	ldw	r16,0(sp)
 10073d4:	dec00504 	addi	sp,sp,20
 10073d8:	10074f81 	jmpi	10074f8 <_write_r>

010073dc <__sread>:
 10073dc:	defffe04 	addi	sp,sp,-8
 10073e0:	dc000015 	stw	r16,0(sp)
 10073e4:	2821883a 	mov	r16,r5
 10073e8:	2940038f 	ldh	r5,14(r5)
 10073ec:	dfc00115 	stw	ra,4(sp)
 10073f0:	10079280 	call	1007928 <_read_r>
 10073f4:	1007883a 	mov	r3,r2
 10073f8:	10000816 	blt	r2,zero,100741c <__sread+0x40>
 10073fc:	80801417 	ldw	r2,80(r16)
 1007400:	10c5883a 	add	r2,r2,r3
 1007404:	80801415 	stw	r2,80(r16)
 1007408:	1805883a 	mov	r2,r3
 100740c:	dfc00117 	ldw	ra,4(sp)
 1007410:	dc000017 	ldw	r16,0(sp)
 1007414:	dec00204 	addi	sp,sp,8
 1007418:	f800283a 	ret
 100741c:	8080030b 	ldhu	r2,12(r16)
 1007420:	10bbffcc 	andi	r2,r2,61439
 1007424:	8080030d 	sth	r2,12(r16)
 1007428:	1805883a 	mov	r2,r3
 100742c:	dfc00117 	ldw	ra,4(sp)
 1007430:	dc000017 	ldw	r16,0(sp)
 1007434:	dec00204 	addi	sp,sp,8
 1007438:	f800283a 	ret

0100743c <strcmp>:
 100743c:	2144b03a 	or	r2,r4,r5
 1007440:	108000cc 	andi	r2,r2,3
 1007444:	10001d1e 	bne	r2,zero,10074bc <strcmp+0x80>
 1007448:	200f883a 	mov	r7,r4
 100744c:	28800017 	ldw	r2,0(r5)
 1007450:	21000017 	ldw	r4,0(r4)
 1007454:	280d883a 	mov	r6,r5
 1007458:	2080161e 	bne	r4,r2,10074b4 <strcmp+0x78>
 100745c:	023fbff4 	movhi	r8,65279
 1007460:	423fbfc4 	addi	r8,r8,-257
 1007464:	2207883a 	add	r3,r4,r8
 1007468:	01602074 	movhi	r5,32897
 100746c:	29602004 	addi	r5,r5,-32640
 1007470:	1946703a 	and	r3,r3,r5
 1007474:	0104303a 	nor	r2,zero,r4
 1007478:	10c4703a 	and	r2,r2,r3
 100747c:	10001c1e 	bne	r2,zero,10074f0 <strcmp+0xb4>
 1007480:	4013883a 	mov	r9,r8
 1007484:	2811883a 	mov	r8,r5
 1007488:	00000106 	br	1007490 <strcmp+0x54>
 100748c:	1800181e 	bne	r3,zero,10074f0 <strcmp+0xb4>
 1007490:	39c00104 	addi	r7,r7,4
 1007494:	39000017 	ldw	r4,0(r7)
 1007498:	31800104 	addi	r6,r6,4
 100749c:	31400017 	ldw	r5,0(r6)
 10074a0:	2245883a 	add	r2,r4,r9
 10074a4:	1204703a 	and	r2,r2,r8
 10074a8:	0106303a 	nor	r3,zero,r4
 10074ac:	1886703a 	and	r3,r3,r2
 10074b0:	217ff626 	beq	r4,r5,100748c <strcmp+0x50>
 10074b4:	3809883a 	mov	r4,r7
 10074b8:	300b883a 	mov	r5,r6
 10074bc:	20c00007 	ldb	r3,0(r4)
 10074c0:	1800051e 	bne	r3,zero,10074d8 <strcmp+0x9c>
 10074c4:	00000606 	br	10074e0 <strcmp+0xa4>
 10074c8:	21000044 	addi	r4,r4,1
 10074cc:	20c00007 	ldb	r3,0(r4)
 10074d0:	29400044 	addi	r5,r5,1
 10074d4:	18000226 	beq	r3,zero,10074e0 <strcmp+0xa4>
 10074d8:	28800007 	ldb	r2,0(r5)
 10074dc:	18bffa26 	beq	r3,r2,10074c8 <strcmp+0x8c>
 10074e0:	20c00003 	ldbu	r3,0(r4)
 10074e4:	28800003 	ldbu	r2,0(r5)
 10074e8:	1885c83a 	sub	r2,r3,r2
 10074ec:	f800283a 	ret
 10074f0:	0005883a 	mov	r2,zero
 10074f4:	f800283a 	ret

010074f8 <_write_r>:
 10074f8:	defffd04 	addi	sp,sp,-12
 10074fc:	dc000015 	stw	r16,0(sp)
 1007500:	040040b4 	movhi	r16,258
 1007504:	84266d04 	addi	r16,r16,-26188
 1007508:	dc400115 	stw	r17,4(sp)
 100750c:	80000015 	stw	zero,0(r16)
 1007510:	2023883a 	mov	r17,r4
 1007514:	2809883a 	mov	r4,r5
 1007518:	300b883a 	mov	r5,r6
 100751c:	380d883a 	mov	r6,r7
 1007520:	dfc00215 	stw	ra,8(sp)
 1007524:	100a97c0 	call	100a97c <write>
 1007528:	1007883a 	mov	r3,r2
 100752c:	00bfffc4 	movi	r2,-1
 1007530:	18800626 	beq	r3,r2,100754c <_write_r+0x54>
 1007534:	1805883a 	mov	r2,r3
 1007538:	dfc00217 	ldw	ra,8(sp)
 100753c:	dc400117 	ldw	r17,4(sp)
 1007540:	dc000017 	ldw	r16,0(sp)
 1007544:	dec00304 	addi	sp,sp,12
 1007548:	f800283a 	ret
 100754c:	80800017 	ldw	r2,0(r16)
 1007550:	103ff826 	beq	r2,zero,1007534 <_write_r+0x3c>
 1007554:	88800015 	stw	r2,0(r17)
 1007558:	1805883a 	mov	r2,r3
 100755c:	dfc00217 	ldw	ra,8(sp)
 1007560:	dc400117 	ldw	r17,4(sp)
 1007564:	dc000017 	ldw	r16,0(sp)
 1007568:	dec00304 	addi	sp,sp,12
 100756c:	f800283a 	ret

01007570 <_calloc_r>:
 1007570:	defffe04 	addi	sp,sp,-8
 1007574:	dc400015 	stw	r17,0(sp)
 1007578:	2023883a 	mov	r17,r4
 100757c:	2809883a 	mov	r4,r5
 1007580:	300b883a 	mov	r5,r6
 1007584:	dfc00115 	stw	ra,4(sp)
 1007588:	10098e40 	call	10098e4 <__mulsi3>
 100758c:	100b883a 	mov	r5,r2
 1007590:	8809883a 	mov	r4,r17
 1007594:	10051540 	call	1005154 <_malloc_r>
 1007598:	1023883a 	mov	r17,r2
 100759c:	01c00904 	movi	r7,36
 10075a0:	10000d26 	beq	r2,zero,10075d8 <_calloc_r+0x68>
 10075a4:	10ffff17 	ldw	r3,-4(r2)
 10075a8:	1009883a 	mov	r4,r2
 10075ac:	00bfff04 	movi	r2,-4
 10075b0:	1886703a 	and	r3,r3,r2
 10075b4:	1887883a 	add	r3,r3,r2
 10075b8:	180d883a 	mov	r6,r3
 10075bc:	000b883a 	mov	r5,zero
 10075c0:	38c01736 	bltu	r7,r3,1007620 <_calloc_r+0xb0>
 10075c4:	008004c4 	movi	r2,19
 10075c8:	10c00836 	bltu	r2,r3,10075ec <_calloc_r+0x7c>
 10075cc:	20000215 	stw	zero,8(r4)
 10075d0:	20000015 	stw	zero,0(r4)
 10075d4:	20000115 	stw	zero,4(r4)
 10075d8:	8805883a 	mov	r2,r17
 10075dc:	dfc00117 	ldw	ra,4(sp)
 10075e0:	dc400017 	ldw	r17,0(sp)
 10075e4:	dec00204 	addi	sp,sp,8
 10075e8:	f800283a 	ret
 10075ec:	008006c4 	movi	r2,27
 10075f0:	88000015 	stw	zero,0(r17)
 10075f4:	88000115 	stw	zero,4(r17)
 10075f8:	89000204 	addi	r4,r17,8
 10075fc:	10fff32e 	bgeu	r2,r3,10075cc <_calloc_r+0x5c>
 1007600:	88000215 	stw	zero,8(r17)
 1007604:	88000315 	stw	zero,12(r17)
 1007608:	89000404 	addi	r4,r17,16
 100760c:	19ffef1e 	bne	r3,r7,10075cc <_calloc_r+0x5c>
 1007610:	89000604 	addi	r4,r17,24
 1007614:	88000415 	stw	zero,16(r17)
 1007618:	88000515 	stw	zero,20(r17)
 100761c:	003feb06 	br	10075cc <_calloc_r+0x5c>
 1007620:	1005af80 	call	1005af8 <memset>
 1007624:	8805883a 	mov	r2,r17
 1007628:	dfc00117 	ldw	ra,4(sp)
 100762c:	dc400017 	ldw	r17,0(sp)
 1007630:	dec00204 	addi	sp,sp,8
 1007634:	f800283a 	ret

01007638 <_close_r>:
 1007638:	defffd04 	addi	sp,sp,-12
 100763c:	dc000015 	stw	r16,0(sp)
 1007640:	040040b4 	movhi	r16,258
 1007644:	84266d04 	addi	r16,r16,-26188
 1007648:	dc400115 	stw	r17,4(sp)
 100764c:	80000015 	stw	zero,0(r16)
 1007650:	2023883a 	mov	r17,r4
 1007654:	2809883a 	mov	r4,r5
 1007658:	dfc00215 	stw	ra,8(sp)
 100765c:	1009fd40 	call	1009fd4 <close>
 1007660:	1007883a 	mov	r3,r2
 1007664:	00bfffc4 	movi	r2,-1
 1007668:	18800626 	beq	r3,r2,1007684 <_close_r+0x4c>
 100766c:	1805883a 	mov	r2,r3
 1007670:	dfc00217 	ldw	ra,8(sp)
 1007674:	dc400117 	ldw	r17,4(sp)
 1007678:	dc000017 	ldw	r16,0(sp)
 100767c:	dec00304 	addi	sp,sp,12
 1007680:	f800283a 	ret
 1007684:	80800017 	ldw	r2,0(r16)
 1007688:	103ff826 	beq	r2,zero,100766c <_close_r+0x34>
 100768c:	88800015 	stw	r2,0(r17)
 1007690:	1805883a 	mov	r2,r3
 1007694:	dfc00217 	ldw	ra,8(sp)
 1007698:	dc400117 	ldw	r17,4(sp)
 100769c:	dc000017 	ldw	r16,0(sp)
 10076a0:	dec00304 	addi	sp,sp,12
 10076a4:	f800283a 	ret

010076a8 <_fclose_r>:
 10076a8:	defffc04 	addi	sp,sp,-16
 10076ac:	dc400115 	stw	r17,4(sp)
 10076b0:	dc000015 	stw	r16,0(sp)
 10076b4:	dfc00315 	stw	ra,12(sp)
 10076b8:	dc800215 	stw	r18,8(sp)
 10076bc:	2821883a 	mov	r16,r5
 10076c0:	2023883a 	mov	r17,r4
 10076c4:	28002926 	beq	r5,zero,100776c <_fclose_r+0xc4>
 10076c8:	10042040 	call	1004204 <__sfp_lock_acquire>
 10076cc:	88000226 	beq	r17,zero,10076d8 <_fclose_r+0x30>
 10076d0:	88800e17 	ldw	r2,56(r17)
 10076d4:	10002d26 	beq	r2,zero,100778c <_fclose_r+0xe4>
 10076d8:	8080030f 	ldh	r2,12(r16)
 10076dc:	10002226 	beq	r2,zero,1007768 <_fclose_r+0xc0>
 10076e0:	8809883a 	mov	r4,r17
 10076e4:	800b883a 	mov	r5,r16
 10076e8:	1003f7c0 	call	1003f7c <_fflush_r>
 10076ec:	1025883a 	mov	r18,r2
 10076f0:	80800b17 	ldw	r2,44(r16)
 10076f4:	10000426 	beq	r2,zero,1007708 <_fclose_r+0x60>
 10076f8:	81400717 	ldw	r5,28(r16)
 10076fc:	8809883a 	mov	r4,r17
 1007700:	103ee83a 	callr	r2
 1007704:	10002a16 	blt	r2,zero,10077b0 <_fclose_r+0x108>
 1007708:	8080030b 	ldhu	r2,12(r16)
 100770c:	1080200c 	andi	r2,r2,128
 1007710:	1000231e 	bne	r2,zero,10077a0 <_fclose_r+0xf8>
 1007714:	81400c17 	ldw	r5,48(r16)
 1007718:	28000526 	beq	r5,zero,1007730 <_fclose_r+0x88>
 100771c:	80801004 	addi	r2,r16,64
 1007720:	28800226 	beq	r5,r2,100772c <_fclose_r+0x84>
 1007724:	8809883a 	mov	r4,r17
 1007728:	10045cc0 	call	10045cc <_free_r>
 100772c:	80000c15 	stw	zero,48(r16)
 1007730:	81401117 	ldw	r5,68(r16)
 1007734:	28000326 	beq	r5,zero,1007744 <_fclose_r+0x9c>
 1007738:	8809883a 	mov	r4,r17
 100773c:	10045cc0 	call	10045cc <_free_r>
 1007740:	80001115 	stw	zero,68(r16)
 1007744:	8000030d 	sth	zero,12(r16)
 1007748:	10042080 	call	1004208 <__sfp_lock_release>
 100774c:	9005883a 	mov	r2,r18
 1007750:	dfc00317 	ldw	ra,12(sp)
 1007754:	dc800217 	ldw	r18,8(sp)
 1007758:	dc400117 	ldw	r17,4(sp)
 100775c:	dc000017 	ldw	r16,0(sp)
 1007760:	dec00404 	addi	sp,sp,16
 1007764:	f800283a 	ret
 1007768:	10042080 	call	1004208 <__sfp_lock_release>
 100776c:	0025883a 	mov	r18,zero
 1007770:	9005883a 	mov	r2,r18
 1007774:	dfc00317 	ldw	ra,12(sp)
 1007778:	dc800217 	ldw	r18,8(sp)
 100777c:	dc400117 	ldw	r17,4(sp)
 1007780:	dc000017 	ldw	r16,0(sp)
 1007784:	dec00404 	addi	sp,sp,16
 1007788:	f800283a 	ret
 100778c:	8809883a 	mov	r4,r17
 1007790:	10042140 	call	1004214 <__sinit>
 1007794:	8080030f 	ldh	r2,12(r16)
 1007798:	103fd11e 	bne	r2,zero,10076e0 <_fclose_r+0x38>
 100779c:	003ff206 	br	1007768 <_fclose_r+0xc0>
 10077a0:	81400417 	ldw	r5,16(r16)
 10077a4:	8809883a 	mov	r4,r17
 10077a8:	10045cc0 	call	10045cc <_free_r>
 10077ac:	003fd906 	br	1007714 <_fclose_r+0x6c>
 10077b0:	04bfffc4 	movi	r18,-1
 10077b4:	003fd406 	br	1007708 <_fclose_r+0x60>

010077b8 <fclose>:
 10077b8:	00804074 	movhi	r2,257
 10077bc:	109f6e04 	addi	r2,r2,32184
 10077c0:	200b883a 	mov	r5,r4
 10077c4:	11000017 	ldw	r4,0(r2)
 10077c8:	10076a81 	jmpi	10076a8 <_fclose_r>

010077cc <_fstat_r>:
 10077cc:	defffd04 	addi	sp,sp,-12
 10077d0:	dc000015 	stw	r16,0(sp)
 10077d4:	040040b4 	movhi	r16,258
 10077d8:	84266d04 	addi	r16,r16,-26188
 10077dc:	dc400115 	stw	r17,4(sp)
 10077e0:	80000015 	stw	zero,0(r16)
 10077e4:	2023883a 	mov	r17,r4
 10077e8:	2809883a 	mov	r4,r5
 10077ec:	300b883a 	mov	r5,r6
 10077f0:	dfc00215 	stw	ra,8(sp)
 10077f4:	100a1600 	call	100a160 <fstat>
 10077f8:	1007883a 	mov	r3,r2
 10077fc:	00bfffc4 	movi	r2,-1
 1007800:	18800626 	beq	r3,r2,100781c <_fstat_r+0x50>
 1007804:	1805883a 	mov	r2,r3
 1007808:	dfc00217 	ldw	ra,8(sp)
 100780c:	dc400117 	ldw	r17,4(sp)
 1007810:	dc000017 	ldw	r16,0(sp)
 1007814:	dec00304 	addi	sp,sp,12
 1007818:	f800283a 	ret
 100781c:	80800017 	ldw	r2,0(r16)
 1007820:	103ff826 	beq	r2,zero,1007804 <_fstat_r+0x38>
 1007824:	88800015 	stw	r2,0(r17)
 1007828:	1805883a 	mov	r2,r3
 100782c:	dfc00217 	ldw	ra,8(sp)
 1007830:	dc400117 	ldw	r17,4(sp)
 1007834:	dc000017 	ldw	r16,0(sp)
 1007838:	dec00304 	addi	sp,sp,12
 100783c:	f800283a 	ret

01007840 <_isatty_r>:
 1007840:	defffd04 	addi	sp,sp,-12
 1007844:	dc000015 	stw	r16,0(sp)
 1007848:	040040b4 	movhi	r16,258
 100784c:	84266d04 	addi	r16,r16,-26188
 1007850:	dc400115 	stw	r17,4(sp)
 1007854:	80000015 	stw	zero,0(r16)
 1007858:	2023883a 	mov	r17,r4
 100785c:	2809883a 	mov	r4,r5
 1007860:	dfc00215 	stw	ra,8(sp)
 1007864:	100a2980 	call	100a298 <isatty>
 1007868:	1007883a 	mov	r3,r2
 100786c:	00bfffc4 	movi	r2,-1
 1007870:	18800626 	beq	r3,r2,100788c <_isatty_r+0x4c>
 1007874:	1805883a 	mov	r2,r3
 1007878:	dfc00217 	ldw	ra,8(sp)
 100787c:	dc400117 	ldw	r17,4(sp)
 1007880:	dc000017 	ldw	r16,0(sp)
 1007884:	dec00304 	addi	sp,sp,12
 1007888:	f800283a 	ret
 100788c:	80800017 	ldw	r2,0(r16)
 1007890:	103ff826 	beq	r2,zero,1007874 <_isatty_r+0x34>
 1007894:	88800015 	stw	r2,0(r17)
 1007898:	1805883a 	mov	r2,r3
 100789c:	dfc00217 	ldw	ra,8(sp)
 10078a0:	dc400117 	ldw	r17,4(sp)
 10078a4:	dc000017 	ldw	r16,0(sp)
 10078a8:	dec00304 	addi	sp,sp,12
 10078ac:	f800283a 	ret

010078b0 <_lseek_r>:
 10078b0:	defffd04 	addi	sp,sp,-12
 10078b4:	dc000015 	stw	r16,0(sp)
 10078b8:	040040b4 	movhi	r16,258
 10078bc:	84266d04 	addi	r16,r16,-26188
 10078c0:	dc400115 	stw	r17,4(sp)
 10078c4:	80000015 	stw	zero,0(r16)
 10078c8:	2023883a 	mov	r17,r4
 10078cc:	2809883a 	mov	r4,r5
 10078d0:	300b883a 	mov	r5,r6
 10078d4:	380d883a 	mov	r6,r7
 10078d8:	dfc00215 	stw	ra,8(sp)
 10078dc:	100a4a80 	call	100a4a8 <lseek>
 10078e0:	1007883a 	mov	r3,r2
 10078e4:	00bfffc4 	movi	r2,-1
 10078e8:	18800626 	beq	r3,r2,1007904 <_lseek_r+0x54>
 10078ec:	1805883a 	mov	r2,r3
 10078f0:	dfc00217 	ldw	ra,8(sp)
 10078f4:	dc400117 	ldw	r17,4(sp)
 10078f8:	dc000017 	ldw	r16,0(sp)
 10078fc:	dec00304 	addi	sp,sp,12
 1007900:	f800283a 	ret
 1007904:	80800017 	ldw	r2,0(r16)
 1007908:	103ff826 	beq	r2,zero,10078ec <_lseek_r+0x3c>
 100790c:	88800015 	stw	r2,0(r17)
 1007910:	1805883a 	mov	r2,r3
 1007914:	dfc00217 	ldw	ra,8(sp)
 1007918:	dc400117 	ldw	r17,4(sp)
 100791c:	dc000017 	ldw	r16,0(sp)
 1007920:	dec00304 	addi	sp,sp,12
 1007924:	f800283a 	ret

01007928 <_read_r>:
 1007928:	defffd04 	addi	sp,sp,-12
 100792c:	dc000015 	stw	r16,0(sp)
 1007930:	040040b4 	movhi	r16,258
 1007934:	84266d04 	addi	r16,r16,-26188
 1007938:	dc400115 	stw	r17,4(sp)
 100793c:	80000015 	stw	zero,0(r16)
 1007940:	2023883a 	mov	r17,r4
 1007944:	2809883a 	mov	r4,r5
 1007948:	300b883a 	mov	r5,r6
 100794c:	380d883a 	mov	r6,r7
 1007950:	dfc00215 	stw	ra,8(sp)
 1007954:	100a6c40 	call	100a6c4 <read>
 1007958:	1007883a 	mov	r3,r2
 100795c:	00bfffc4 	movi	r2,-1
 1007960:	18800626 	beq	r3,r2,100797c <_read_r+0x54>
 1007964:	1805883a 	mov	r2,r3
 1007968:	dfc00217 	ldw	ra,8(sp)
 100796c:	dc400117 	ldw	r17,4(sp)
 1007970:	dc000017 	ldw	r16,0(sp)
 1007974:	dec00304 	addi	sp,sp,12
 1007978:	f800283a 	ret
 100797c:	80800017 	ldw	r2,0(r16)
 1007980:	103ff826 	beq	r2,zero,1007964 <_read_r+0x3c>
 1007984:	88800015 	stw	r2,0(r17)
 1007988:	1805883a 	mov	r2,r3
 100798c:	dfc00217 	ldw	ra,8(sp)
 1007990:	dc400117 	ldw	r17,4(sp)
 1007994:	dc000017 	ldw	r16,0(sp)
 1007998:	dec00304 	addi	sp,sp,12
 100799c:	f800283a 	ret

010079a0 <__udivdi3>:
 10079a0:	defff104 	addi	sp,sp,-60
 10079a4:	0015883a 	mov	r10,zero
 10079a8:	2005883a 	mov	r2,r4
 10079ac:	3011883a 	mov	r8,r6
 10079b0:	df000d15 	stw	fp,52(sp)
 10079b4:	dd400a15 	stw	r21,40(sp)
 10079b8:	dcc00815 	stw	r19,32(sp)
 10079bc:	dfc00e15 	stw	ra,56(sp)
 10079c0:	ddc00c15 	stw	r23,48(sp)
 10079c4:	dd800b15 	stw	r22,44(sp)
 10079c8:	dd000915 	stw	r20,36(sp)
 10079cc:	dc800715 	stw	r18,28(sp)
 10079d0:	dc400615 	stw	r17,24(sp)
 10079d4:	dc000515 	stw	r16,20(sp)
 10079d8:	da800315 	stw	r10,12(sp)
 10079dc:	4027883a 	mov	r19,r8
 10079e0:	1039883a 	mov	fp,r2
 10079e4:	282b883a 	mov	r21,r5
 10079e8:	da800415 	stw	r10,16(sp)
 10079ec:	3800401e 	bne	r7,zero,1007af0 <__udivdi3+0x150>
 10079f0:	2a006536 	bltu	r5,r8,1007b88 <__udivdi3+0x1e8>
 10079f4:	4000b526 	beq	r8,zero,1007ccc <__udivdi3+0x32c>
 10079f8:	00bfffd4 	movui	r2,65535
 10079fc:	14c0ad36 	bltu	r2,r19,1007cb4 <__udivdi3+0x314>
 1007a00:	00803fc4 	movi	r2,255
 1007a04:	14c15e36 	bltu	r2,r19,1007f80 <__udivdi3+0x5e0>
 1007a08:	000b883a 	mov	r5,zero
 1007a0c:	0005883a 	mov	r2,zero
 1007a10:	9884d83a 	srl	r2,r19,r2
 1007a14:	01004074 	movhi	r4,257
 1007a18:	21183f04 	addi	r4,r4,24828
 1007a1c:	01800804 	movi	r6,32
 1007a20:	1105883a 	add	r2,r2,r4
 1007a24:	10c00003 	ldbu	r3,0(r2)
 1007a28:	28c7883a 	add	r3,r5,r3
 1007a2c:	30e9c83a 	sub	r20,r6,r3
 1007a30:	a0010a1e 	bne	r20,zero,1007e5c <__udivdi3+0x4bc>
 1007a34:	982ed43a 	srli	r23,r19,16
 1007a38:	acebc83a 	sub	r21,r21,r19
 1007a3c:	9dbfffcc 	andi	r22,r19,65535
 1007a40:	05000044 	movi	r20,1
 1007a44:	a809883a 	mov	r4,r21
 1007a48:	b80b883a 	mov	r5,r23
 1007a4c:	10098d40 	call	10098d4 <__udivsi3>
 1007a50:	100b883a 	mov	r5,r2
 1007a54:	b009883a 	mov	r4,r22
 1007a58:	1021883a 	mov	r16,r2
 1007a5c:	10098e40 	call	10098e4 <__mulsi3>
 1007a60:	a809883a 	mov	r4,r21
 1007a64:	b80b883a 	mov	r5,r23
 1007a68:	1023883a 	mov	r17,r2
 1007a6c:	10098dc0 	call	10098dc <__umodsi3>
 1007a70:	1004943a 	slli	r2,r2,16
 1007a74:	e006d43a 	srli	r3,fp,16
 1007a78:	10c4b03a 	or	r2,r2,r3
 1007a7c:	1440042e 	bgeu	r2,r17,1007a90 <__udivdi3+0xf0>
 1007a80:	14c5883a 	add	r2,r2,r19
 1007a84:	843fffc4 	addi	r16,r16,-1
 1007a88:	14c00136 	bltu	r2,r19,1007a90 <__udivdi3+0xf0>
 1007a8c:	14415c36 	bltu	r2,r17,1008000 <__udivdi3+0x660>
 1007a90:	1463c83a 	sub	r17,r2,r17
 1007a94:	8809883a 	mov	r4,r17
 1007a98:	b80b883a 	mov	r5,r23
 1007a9c:	10098d40 	call	10098d4 <__udivsi3>
 1007aa0:	100b883a 	mov	r5,r2
 1007aa4:	b009883a 	mov	r4,r22
 1007aa8:	102b883a 	mov	r21,r2
 1007aac:	10098e40 	call	10098e4 <__mulsi3>
 1007ab0:	8809883a 	mov	r4,r17
 1007ab4:	b80b883a 	mov	r5,r23
 1007ab8:	1025883a 	mov	r18,r2
 1007abc:	10098dc0 	call	10098dc <__umodsi3>
 1007ac0:	1004943a 	slli	r2,r2,16
 1007ac4:	e0ffffcc 	andi	r3,fp,65535
 1007ac8:	10c4b03a 	or	r2,r2,r3
 1007acc:	1480042e 	bgeu	r2,r18,1007ae0 <__udivdi3+0x140>
 1007ad0:	9885883a 	add	r2,r19,r2
 1007ad4:	ad7fffc4 	addi	r21,r21,-1
 1007ad8:	14c00136 	bltu	r2,r19,1007ae0 <__udivdi3+0x140>
 1007adc:	14813c36 	bltu	r2,r18,1007fd0 <__udivdi3+0x630>
 1007ae0:	8004943a 	slli	r2,r16,16
 1007ae4:	a009883a 	mov	r4,r20
 1007ae8:	a884b03a 	or	r2,r21,r2
 1007aec:	00001506 	br	1007b44 <__udivdi3+0x1a4>
 1007af0:	380d883a 	mov	r6,r7
 1007af4:	29c06c36 	bltu	r5,r7,1007ca8 <__udivdi3+0x308>
 1007af8:	00bfffd4 	movui	r2,65535
 1007afc:	11c06436 	bltu	r2,r7,1007c90 <__udivdi3+0x2f0>
 1007b00:	00803fc4 	movi	r2,255
 1007b04:	11c11836 	bltu	r2,r7,1007f68 <__udivdi3+0x5c8>
 1007b08:	000b883a 	mov	r5,zero
 1007b0c:	0005883a 	mov	r2,zero
 1007b10:	3084d83a 	srl	r2,r6,r2
 1007b14:	01004074 	movhi	r4,257
 1007b18:	21183f04 	addi	r4,r4,24828
 1007b1c:	01c00804 	movi	r7,32
 1007b20:	1105883a 	add	r2,r2,r4
 1007b24:	10c00003 	ldbu	r3,0(r2)
 1007b28:	28c7883a 	add	r3,r5,r3
 1007b2c:	38edc83a 	sub	r22,r7,r3
 1007b30:	b000731e 	bne	r22,zero,1007d00 <__udivdi3+0x360>
 1007b34:	35400136 	bltu	r6,r21,1007b3c <__udivdi3+0x19c>
 1007b38:	e4c05b36 	bltu	fp,r19,1007ca8 <__udivdi3+0x308>
 1007b3c:	00800044 	movi	r2,1
 1007b40:	0009883a 	mov	r4,zero
 1007b44:	d8800315 	stw	r2,12(sp)
 1007b48:	d9400317 	ldw	r5,12(sp)
 1007b4c:	2007883a 	mov	r3,r4
 1007b50:	d9000415 	stw	r4,16(sp)
 1007b54:	2805883a 	mov	r2,r5
 1007b58:	dfc00e17 	ldw	ra,56(sp)
 1007b5c:	df000d17 	ldw	fp,52(sp)
 1007b60:	ddc00c17 	ldw	r23,48(sp)
 1007b64:	dd800b17 	ldw	r22,44(sp)
 1007b68:	dd400a17 	ldw	r21,40(sp)
 1007b6c:	dd000917 	ldw	r20,36(sp)
 1007b70:	dcc00817 	ldw	r19,32(sp)
 1007b74:	dc800717 	ldw	r18,28(sp)
 1007b78:	dc400617 	ldw	r17,24(sp)
 1007b7c:	dc000517 	ldw	r16,20(sp)
 1007b80:	dec00f04 	addi	sp,sp,60
 1007b84:	f800283a 	ret
 1007b88:	00bfffd4 	movui	r2,65535
 1007b8c:	12005636 	bltu	r2,r8,1007ce8 <__udivdi3+0x348>
 1007b90:	00803fc4 	movi	r2,255
 1007b94:	12010036 	bltu	r2,r8,1007f98 <__udivdi3+0x5f8>
 1007b98:	000b883a 	mov	r5,zero
 1007b9c:	0005883a 	mov	r2,zero
 1007ba0:	9884d83a 	srl	r2,r19,r2
 1007ba4:	01004074 	movhi	r4,257
 1007ba8:	21183f04 	addi	r4,r4,24828
 1007bac:	01800804 	movi	r6,32
 1007bb0:	1105883a 	add	r2,r2,r4
 1007bb4:	10c00003 	ldbu	r3,0(r2)
 1007bb8:	28c7883a 	add	r3,r5,r3
 1007bbc:	30cbc83a 	sub	r5,r6,r3
 1007bc0:	28000626 	beq	r5,zero,1007bdc <__udivdi3+0x23c>
 1007bc4:	3145c83a 	sub	r2,r6,r5
 1007bc8:	e084d83a 	srl	r2,fp,r2
 1007bcc:	a946983a 	sll	r3,r21,r5
 1007bd0:	e178983a 	sll	fp,fp,r5
 1007bd4:	9966983a 	sll	r19,r19,r5
 1007bd8:	18aab03a 	or	r21,r3,r2
 1007bdc:	982ed43a 	srli	r23,r19,16
 1007be0:	a809883a 	mov	r4,r21
 1007be4:	9cbfffcc 	andi	r18,r19,65535
 1007be8:	b80b883a 	mov	r5,r23
 1007bec:	10098d40 	call	10098d4 <__udivsi3>
 1007bf0:	100b883a 	mov	r5,r2
 1007bf4:	9009883a 	mov	r4,r18
 1007bf8:	1021883a 	mov	r16,r2
 1007bfc:	10098e40 	call	10098e4 <__mulsi3>
 1007c00:	a809883a 	mov	r4,r21
 1007c04:	b80b883a 	mov	r5,r23
 1007c08:	1023883a 	mov	r17,r2
 1007c0c:	10098dc0 	call	10098dc <__umodsi3>
 1007c10:	1004943a 	slli	r2,r2,16
 1007c14:	e006d43a 	srli	r3,fp,16
 1007c18:	10c4b03a 	or	r2,r2,r3
 1007c1c:	1440042e 	bgeu	r2,r17,1007c30 <__udivdi3+0x290>
 1007c20:	14c5883a 	add	r2,r2,r19
 1007c24:	843fffc4 	addi	r16,r16,-1
 1007c28:	14c00136 	bltu	r2,r19,1007c30 <__udivdi3+0x290>
 1007c2c:	1440ea36 	bltu	r2,r17,1007fd8 <__udivdi3+0x638>
 1007c30:	1463c83a 	sub	r17,r2,r17
 1007c34:	8809883a 	mov	r4,r17
 1007c38:	b80b883a 	mov	r5,r23
 1007c3c:	10098d40 	call	10098d4 <__udivsi3>
 1007c40:	100b883a 	mov	r5,r2
 1007c44:	9009883a 	mov	r4,r18
 1007c48:	102b883a 	mov	r21,r2
 1007c4c:	10098e40 	call	10098e4 <__mulsi3>
 1007c50:	8809883a 	mov	r4,r17
 1007c54:	b80b883a 	mov	r5,r23
 1007c58:	1025883a 	mov	r18,r2
 1007c5c:	10098dc0 	call	10098dc <__umodsi3>
 1007c60:	1004943a 	slli	r2,r2,16
 1007c64:	e0ffffcc 	andi	r3,fp,65535
 1007c68:	10c4b03a 	or	r2,r2,r3
 1007c6c:	1480042e 	bgeu	r2,r18,1007c80 <__udivdi3+0x2e0>
 1007c70:	9885883a 	add	r2,r19,r2
 1007c74:	ad7fffc4 	addi	r21,r21,-1
 1007c78:	14c00136 	bltu	r2,r19,1007c80 <__udivdi3+0x2e0>
 1007c7c:	1480d936 	bltu	r2,r18,1007fe4 <__udivdi3+0x644>
 1007c80:	8004943a 	slli	r2,r16,16
 1007c84:	0009883a 	mov	r4,zero
 1007c88:	a884b03a 	or	r2,r21,r2
 1007c8c:	003fad06 	br	1007b44 <__udivdi3+0x1a4>
 1007c90:	00804034 	movhi	r2,256
 1007c94:	10bfffc4 	addi	r2,r2,-1
 1007c98:	11c0b636 	bltu	r2,r7,1007f74 <__udivdi3+0x5d4>
 1007c9c:	01400404 	movi	r5,16
 1007ca0:	2805883a 	mov	r2,r5
 1007ca4:	003f9a06 	br	1007b10 <__udivdi3+0x170>
 1007ca8:	0005883a 	mov	r2,zero
 1007cac:	0009883a 	mov	r4,zero
 1007cb0:	003fa406 	br	1007b44 <__udivdi3+0x1a4>
 1007cb4:	00804034 	movhi	r2,256
 1007cb8:	10bfffc4 	addi	r2,r2,-1
 1007cbc:	14c0b336 	bltu	r2,r19,1007f8c <__udivdi3+0x5ec>
 1007cc0:	01400404 	movi	r5,16
 1007cc4:	2805883a 	mov	r2,r5
 1007cc8:	003f5106 	br	1007a10 <__udivdi3+0x70>
 1007ccc:	01000044 	movi	r4,1
 1007cd0:	000b883a 	mov	r5,zero
 1007cd4:	10098d40 	call	10098d4 <__udivsi3>
 1007cd8:	1027883a 	mov	r19,r2
 1007cdc:	00bfffd4 	movui	r2,65535
 1007ce0:	14fff436 	bltu	r2,r19,1007cb4 <__udivdi3+0x314>
 1007ce4:	003f4606 	br	1007a00 <__udivdi3+0x60>
 1007ce8:	00804034 	movhi	r2,256
 1007cec:	10bfffc4 	addi	r2,r2,-1
 1007cf0:	1200ac36 	bltu	r2,r8,1007fa4 <__udivdi3+0x604>
 1007cf4:	01400404 	movi	r5,16
 1007cf8:	2805883a 	mov	r2,r5
 1007cfc:	003fa806 	br	1007ba0 <__udivdi3+0x200>
 1007d00:	3d85c83a 	sub	r2,r7,r22
 1007d04:	3588983a 	sll	r4,r6,r22
 1007d08:	9886d83a 	srl	r3,r19,r2
 1007d0c:	a8a2d83a 	srl	r17,r21,r2
 1007d10:	e084d83a 	srl	r2,fp,r2
 1007d14:	20eeb03a 	or	r23,r4,r3
 1007d18:	b824d43a 	srli	r18,r23,16
 1007d1c:	ad86983a 	sll	r3,r21,r22
 1007d20:	8809883a 	mov	r4,r17
 1007d24:	900b883a 	mov	r5,r18
 1007d28:	1886b03a 	or	r3,r3,r2
 1007d2c:	d8c00115 	stw	r3,4(sp)
 1007d30:	bc3fffcc 	andi	r16,r23,65535
 1007d34:	10098d40 	call	10098d4 <__udivsi3>
 1007d38:	100b883a 	mov	r5,r2
 1007d3c:	8009883a 	mov	r4,r16
 1007d40:	1029883a 	mov	r20,r2
 1007d44:	10098e40 	call	10098e4 <__mulsi3>
 1007d48:	900b883a 	mov	r5,r18
 1007d4c:	8809883a 	mov	r4,r17
 1007d50:	102b883a 	mov	r21,r2
 1007d54:	10098dc0 	call	10098dc <__umodsi3>
 1007d58:	d9400117 	ldw	r5,4(sp)
 1007d5c:	1004943a 	slli	r2,r2,16
 1007d60:	9da6983a 	sll	r19,r19,r22
 1007d64:	2806d43a 	srli	r3,r5,16
 1007d68:	10c4b03a 	or	r2,r2,r3
 1007d6c:	1540032e 	bgeu	r2,r21,1007d7c <__udivdi3+0x3dc>
 1007d70:	15c5883a 	add	r2,r2,r23
 1007d74:	a53fffc4 	addi	r20,r20,-1
 1007d78:	15c0912e 	bgeu	r2,r23,1007fc0 <__udivdi3+0x620>
 1007d7c:	1563c83a 	sub	r17,r2,r21
 1007d80:	8809883a 	mov	r4,r17
 1007d84:	900b883a 	mov	r5,r18
 1007d88:	10098d40 	call	10098d4 <__udivsi3>
 1007d8c:	100b883a 	mov	r5,r2
 1007d90:	8009883a 	mov	r4,r16
 1007d94:	102b883a 	mov	r21,r2
 1007d98:	10098e40 	call	10098e4 <__mulsi3>
 1007d9c:	8809883a 	mov	r4,r17
 1007da0:	900b883a 	mov	r5,r18
 1007da4:	1021883a 	mov	r16,r2
 1007da8:	10098dc0 	call	10098dc <__umodsi3>
 1007dac:	da800117 	ldw	r10,4(sp)
 1007db0:	1004943a 	slli	r2,r2,16
 1007db4:	50ffffcc 	andi	r3,r10,65535
 1007db8:	10c6b03a 	or	r3,r2,r3
 1007dbc:	1c00032e 	bgeu	r3,r16,1007dcc <__udivdi3+0x42c>
 1007dc0:	1dc7883a 	add	r3,r3,r23
 1007dc4:	ad7fffc4 	addi	r21,r21,-1
 1007dc8:	1dc0792e 	bgeu	r3,r23,1007fb0 <__udivdi3+0x610>
 1007dcc:	a004943a 	slli	r2,r20,16
 1007dd0:	982ed43a 	srli	r23,r19,16
 1007dd4:	9cffffcc 	andi	r19,r19,65535
 1007dd8:	a8a4b03a 	or	r18,r21,r2
 1007ddc:	947fffcc 	andi	r17,r18,65535
 1007de0:	902ad43a 	srli	r21,r18,16
 1007de4:	8809883a 	mov	r4,r17
 1007de8:	980b883a 	mov	r5,r19
 1007dec:	1c21c83a 	sub	r16,r3,r16
 1007df0:	10098e40 	call	10098e4 <__mulsi3>
 1007df4:	8809883a 	mov	r4,r17
 1007df8:	b80b883a 	mov	r5,r23
 1007dfc:	1029883a 	mov	r20,r2
 1007e00:	10098e40 	call	10098e4 <__mulsi3>
 1007e04:	980b883a 	mov	r5,r19
 1007e08:	a809883a 	mov	r4,r21
 1007e0c:	1023883a 	mov	r17,r2
 1007e10:	10098e40 	call	10098e4 <__mulsi3>
 1007e14:	a809883a 	mov	r4,r21
 1007e18:	b80b883a 	mov	r5,r23
 1007e1c:	1027883a 	mov	r19,r2
 1007e20:	10098e40 	call	10098e4 <__mulsi3>
 1007e24:	1009883a 	mov	r4,r2
 1007e28:	a004d43a 	srli	r2,r20,16
 1007e2c:	8ce3883a 	add	r17,r17,r19
 1007e30:	1447883a 	add	r3,r2,r17
 1007e34:	1cc0022e 	bgeu	r3,r19,1007e40 <__udivdi3+0x4a0>
 1007e38:	00800074 	movhi	r2,1
 1007e3c:	2089883a 	add	r4,r4,r2
 1007e40:	1804d43a 	srli	r2,r3,16
 1007e44:	2085883a 	add	r2,r4,r2
 1007e48:	80804436 	bltu	r16,r2,1007f5c <__udivdi3+0x5bc>
 1007e4c:	80803e26 	beq	r16,r2,1007f48 <__udivdi3+0x5a8>
 1007e50:	9005883a 	mov	r2,r18
 1007e54:	0009883a 	mov	r4,zero
 1007e58:	003f3a06 	br	1007b44 <__udivdi3+0x1a4>
 1007e5c:	9d26983a 	sll	r19,r19,r20
 1007e60:	3505c83a 	sub	r2,r6,r20
 1007e64:	a8a2d83a 	srl	r17,r21,r2
 1007e68:	982ed43a 	srli	r23,r19,16
 1007e6c:	e084d83a 	srl	r2,fp,r2
 1007e70:	ad06983a 	sll	r3,r21,r20
 1007e74:	8809883a 	mov	r4,r17
 1007e78:	b80b883a 	mov	r5,r23
 1007e7c:	1886b03a 	or	r3,r3,r2
 1007e80:	d8c00015 	stw	r3,0(sp)
 1007e84:	9dbfffcc 	andi	r22,r19,65535
 1007e88:	10098d40 	call	10098d4 <__udivsi3>
 1007e8c:	100b883a 	mov	r5,r2
 1007e90:	b009883a 	mov	r4,r22
 1007e94:	d8800215 	stw	r2,8(sp)
 1007e98:	10098e40 	call	10098e4 <__mulsi3>
 1007e9c:	8809883a 	mov	r4,r17
 1007ea0:	b80b883a 	mov	r5,r23
 1007ea4:	102b883a 	mov	r21,r2
 1007ea8:	10098dc0 	call	10098dc <__umodsi3>
 1007eac:	d9000017 	ldw	r4,0(sp)
 1007eb0:	1004943a 	slli	r2,r2,16
 1007eb4:	2006d43a 	srli	r3,r4,16
 1007eb8:	10c4b03a 	or	r2,r2,r3
 1007ebc:	1540052e 	bgeu	r2,r21,1007ed4 <__udivdi3+0x534>
 1007ec0:	d9400217 	ldw	r5,8(sp)
 1007ec4:	14c5883a 	add	r2,r2,r19
 1007ec8:	297fffc4 	addi	r5,r5,-1
 1007ecc:	d9400215 	stw	r5,8(sp)
 1007ed0:	14c0462e 	bgeu	r2,r19,1007fec <__udivdi3+0x64c>
 1007ed4:	1563c83a 	sub	r17,r2,r21
 1007ed8:	8809883a 	mov	r4,r17
 1007edc:	b80b883a 	mov	r5,r23
 1007ee0:	10098d40 	call	10098d4 <__udivsi3>
 1007ee4:	100b883a 	mov	r5,r2
 1007ee8:	b009883a 	mov	r4,r22
 1007eec:	1025883a 	mov	r18,r2
 1007ef0:	10098e40 	call	10098e4 <__mulsi3>
 1007ef4:	8809883a 	mov	r4,r17
 1007ef8:	b80b883a 	mov	r5,r23
 1007efc:	1021883a 	mov	r16,r2
 1007f00:	10098dc0 	call	10098dc <__umodsi3>
 1007f04:	da800017 	ldw	r10,0(sp)
 1007f08:	1004943a 	slli	r2,r2,16
 1007f0c:	50ffffcc 	andi	r3,r10,65535
 1007f10:	10c6b03a 	or	r3,r2,r3
 1007f14:	1c00062e 	bgeu	r3,r16,1007f30 <__udivdi3+0x590>
 1007f18:	1cc7883a 	add	r3,r3,r19
 1007f1c:	94bfffc4 	addi	r18,r18,-1
 1007f20:	1cc00336 	bltu	r3,r19,1007f30 <__udivdi3+0x590>
 1007f24:	1c00022e 	bgeu	r3,r16,1007f30 <__udivdi3+0x590>
 1007f28:	94bfffc4 	addi	r18,r18,-1
 1007f2c:	1cc7883a 	add	r3,r3,r19
 1007f30:	d9000217 	ldw	r4,8(sp)
 1007f34:	e538983a 	sll	fp,fp,r20
 1007f38:	1c2bc83a 	sub	r21,r3,r16
 1007f3c:	2004943a 	slli	r2,r4,16
 1007f40:	90a8b03a 	or	r20,r18,r2
 1007f44:	003ebf06 	br	1007a44 <__udivdi3+0xa4>
 1007f48:	1804943a 	slli	r2,r3,16
 1007f4c:	e588983a 	sll	r4,fp,r22
 1007f50:	a0ffffcc 	andi	r3,r20,65535
 1007f54:	10c5883a 	add	r2,r2,r3
 1007f58:	20bfbd2e 	bgeu	r4,r2,1007e50 <__udivdi3+0x4b0>
 1007f5c:	90bfffc4 	addi	r2,r18,-1
 1007f60:	0009883a 	mov	r4,zero
 1007f64:	003ef706 	br	1007b44 <__udivdi3+0x1a4>
 1007f68:	01400204 	movi	r5,8
 1007f6c:	2805883a 	mov	r2,r5
 1007f70:	003ee706 	br	1007b10 <__udivdi3+0x170>
 1007f74:	01400604 	movi	r5,24
 1007f78:	2805883a 	mov	r2,r5
 1007f7c:	003ee406 	br	1007b10 <__udivdi3+0x170>
 1007f80:	01400204 	movi	r5,8
 1007f84:	2805883a 	mov	r2,r5
 1007f88:	003ea106 	br	1007a10 <__udivdi3+0x70>
 1007f8c:	01400604 	movi	r5,24
 1007f90:	2805883a 	mov	r2,r5
 1007f94:	003e9e06 	br	1007a10 <__udivdi3+0x70>
 1007f98:	01400204 	movi	r5,8
 1007f9c:	2805883a 	mov	r2,r5
 1007fa0:	003eff06 	br	1007ba0 <__udivdi3+0x200>
 1007fa4:	01400604 	movi	r5,24
 1007fa8:	2805883a 	mov	r2,r5
 1007fac:	003efc06 	br	1007ba0 <__udivdi3+0x200>
 1007fb0:	1c3f862e 	bgeu	r3,r16,1007dcc <__udivdi3+0x42c>
 1007fb4:	1dc7883a 	add	r3,r3,r23
 1007fb8:	ad7fffc4 	addi	r21,r21,-1
 1007fbc:	003f8306 	br	1007dcc <__udivdi3+0x42c>
 1007fc0:	157f6e2e 	bgeu	r2,r21,1007d7c <__udivdi3+0x3dc>
 1007fc4:	a53fffc4 	addi	r20,r20,-1
 1007fc8:	15c5883a 	add	r2,r2,r23
 1007fcc:	003f6b06 	br	1007d7c <__udivdi3+0x3dc>
 1007fd0:	ad7fffc4 	addi	r21,r21,-1
 1007fd4:	003ec206 	br	1007ae0 <__udivdi3+0x140>
 1007fd8:	843fffc4 	addi	r16,r16,-1
 1007fdc:	14c5883a 	add	r2,r2,r19
 1007fe0:	003f1306 	br	1007c30 <__udivdi3+0x290>
 1007fe4:	ad7fffc4 	addi	r21,r21,-1
 1007fe8:	003f2506 	br	1007c80 <__udivdi3+0x2e0>
 1007fec:	157fb92e 	bgeu	r2,r21,1007ed4 <__udivdi3+0x534>
 1007ff0:	297fffc4 	addi	r5,r5,-1
 1007ff4:	14c5883a 	add	r2,r2,r19
 1007ff8:	d9400215 	stw	r5,8(sp)
 1007ffc:	003fb506 	br	1007ed4 <__udivdi3+0x534>
 1008000:	843fffc4 	addi	r16,r16,-1
 1008004:	14c5883a 	add	r2,r2,r19
 1008008:	003ea106 	br	1007a90 <__udivdi3+0xf0>

0100800c <__umoddi3>:
 100800c:	defff004 	addi	sp,sp,-64
 1008010:	3011883a 	mov	r8,r6
 1008014:	000d883a 	mov	r6,zero
 1008018:	dd400b15 	stw	r21,44(sp)
 100801c:	dcc00915 	stw	r19,36(sp)
 1008020:	dc000615 	stw	r16,24(sp)
 1008024:	dfc00f15 	stw	ra,60(sp)
 1008028:	df000e15 	stw	fp,56(sp)
 100802c:	ddc00d15 	stw	r23,52(sp)
 1008030:	dd800c15 	stw	r22,48(sp)
 1008034:	dd000a15 	stw	r20,40(sp)
 1008038:	dc800815 	stw	r18,32(sp)
 100803c:	dc400715 	stw	r17,28(sp)
 1008040:	2817883a 	mov	r11,r5
 1008044:	d9800415 	stw	r6,16(sp)
 1008048:	4027883a 	mov	r19,r8
 100804c:	d9800515 	stw	r6,20(sp)
 1008050:	2021883a 	mov	r16,r4
 1008054:	282b883a 	mov	r21,r5
 1008058:	38002c1e 	bne	r7,zero,100810c <__umoddi3+0x100>
 100805c:	2a005636 	bltu	r5,r8,10081b8 <__umoddi3+0x1ac>
 1008060:	40009a26 	beq	r8,zero,10082cc <__umoddi3+0x2c0>
 1008064:	00bfffd4 	movui	r2,65535
 1008068:	14c09236 	bltu	r2,r19,10082b4 <__umoddi3+0x2a8>
 100806c:	00803fc4 	movi	r2,255
 1008070:	14c15c36 	bltu	r2,r19,10085e4 <__umoddi3+0x5d8>
 1008074:	000b883a 	mov	r5,zero
 1008078:	0005883a 	mov	r2,zero
 100807c:	9884d83a 	srl	r2,r19,r2
 1008080:	01004074 	movhi	r4,257
 1008084:	21183f04 	addi	r4,r4,24828
 1008088:	01800804 	movi	r6,32
 100808c:	1105883a 	add	r2,r2,r4
 1008090:	10c00003 	ldbu	r3,0(r2)
 1008094:	28c7883a 	add	r3,r5,r3
 1008098:	30e5c83a 	sub	r18,r6,r3
 100809c:	9000a41e 	bne	r18,zero,1008330 <__umoddi3+0x324>
 10080a0:	982ed43a 	srli	r23,r19,16
 10080a4:	acebc83a 	sub	r21,r21,r19
 10080a8:	9d3fffcc 	andi	r20,r19,65535
 10080ac:	002d883a 	mov	r22,zero
 10080b0:	a809883a 	mov	r4,r21
 10080b4:	b80b883a 	mov	r5,r23
 10080b8:	10098d40 	call	10098d4 <__udivsi3>
 10080bc:	100b883a 	mov	r5,r2
 10080c0:	a009883a 	mov	r4,r20
 10080c4:	10098e40 	call	10098e4 <__mulsi3>
 10080c8:	a809883a 	mov	r4,r21
 10080cc:	b80b883a 	mov	r5,r23
 10080d0:	1023883a 	mov	r17,r2
 10080d4:	10098dc0 	call	10098dc <__umodsi3>
 10080d8:	1004943a 	slli	r2,r2,16
 10080dc:	8006d43a 	srli	r3,r16,16
 10080e0:	10c4b03a 	or	r2,r2,r3
 10080e4:	1440032e 	bgeu	r2,r17,10080f4 <__umoddi3+0xe8>
 10080e8:	14c5883a 	add	r2,r2,r19
 10080ec:	14c00136 	bltu	r2,r19,10080f4 <__umoddi3+0xe8>
 10080f0:	14415836 	bltu	r2,r17,1008654 <__umoddi3+0x648>
 10080f4:	1463c83a 	sub	r17,r2,r17
 10080f8:	8809883a 	mov	r4,r17
 10080fc:	b80b883a 	mov	r5,r23
 1008100:	10098d40 	call	10098d4 <__udivsi3>
 1008104:	a009883a 	mov	r4,r20
 1008108:	00005306 	br	1008258 <__umoddi3+0x24c>
 100810c:	380d883a 	mov	r6,r7
 1008110:	29c0132e 	bgeu	r5,r7,1008160 <__umoddi3+0x154>
 1008114:	d9000415 	stw	r4,16(sp)
 1008118:	d9400515 	stw	r5,20(sp)
 100811c:	d9400417 	ldw	r5,16(sp)
 1008120:	5813883a 	mov	r9,r11
 1008124:	2811883a 	mov	r8,r5
 1008128:	4005883a 	mov	r2,r8
 100812c:	4807883a 	mov	r3,r9
 1008130:	dfc00f17 	ldw	ra,60(sp)
 1008134:	df000e17 	ldw	fp,56(sp)
 1008138:	ddc00d17 	ldw	r23,52(sp)
 100813c:	dd800c17 	ldw	r22,48(sp)
 1008140:	dd400b17 	ldw	r21,44(sp)
 1008144:	dd000a17 	ldw	r20,40(sp)
 1008148:	dcc00917 	ldw	r19,36(sp)
 100814c:	dc800817 	ldw	r18,32(sp)
 1008150:	dc400717 	ldw	r17,28(sp)
 1008154:	dc000617 	ldw	r16,24(sp)
 1008158:	dec01004 	addi	sp,sp,64
 100815c:	f800283a 	ret
 1008160:	00bfffd4 	movui	r2,65535
 1008164:	11c06636 	bltu	r2,r7,1008300 <__umoddi3+0x2f4>
 1008168:	00803fc4 	movi	r2,255
 100816c:	11c12036 	bltu	r2,r7,10085f0 <__umoddi3+0x5e4>
 1008170:	000b883a 	mov	r5,zero
 1008174:	0005883a 	mov	r2,zero
 1008178:	3084d83a 	srl	r2,r6,r2
 100817c:	01004074 	movhi	r4,257
 1008180:	21183f04 	addi	r4,r4,24828
 1008184:	01c00804 	movi	r7,32
 1008188:	1105883a 	add	r2,r2,r4
 100818c:	10c00003 	ldbu	r3,0(r2)
 1008190:	28c7883a 	add	r3,r5,r3
 1008194:	38e5c83a 	sub	r18,r7,r3
 1008198:	9000941e 	bne	r18,zero,10083ec <__umoddi3+0x3e0>
 100819c:	35405e36 	bltu	r6,r21,1008318 <__umoddi3+0x30c>
 10081a0:	84c05d2e 	bgeu	r16,r19,1008318 <__umoddi3+0x30c>
 10081a4:	8011883a 	mov	r8,r16
 10081a8:	a813883a 	mov	r9,r21
 10081ac:	dc000415 	stw	r16,16(sp)
 10081b0:	dd400515 	stw	r21,20(sp)
 10081b4:	003fdc06 	br	1008128 <__umoddi3+0x11c>
 10081b8:	00bfffd4 	movui	r2,65535
 10081bc:	12004a36 	bltu	r2,r8,10082e8 <__umoddi3+0x2dc>
 10081c0:	00803fc4 	movi	r2,255
 10081c4:	12010d36 	bltu	r2,r8,10085fc <__umoddi3+0x5f0>
 10081c8:	000b883a 	mov	r5,zero
 10081cc:	0005883a 	mov	r2,zero
 10081d0:	9884d83a 	srl	r2,r19,r2
 10081d4:	01004074 	movhi	r4,257
 10081d8:	21183f04 	addi	r4,r4,24828
 10081dc:	01800804 	movi	r6,32
 10081e0:	1105883a 	add	r2,r2,r4
 10081e4:	10c00003 	ldbu	r3,0(r2)
 10081e8:	28c7883a 	add	r3,r5,r3
 10081ec:	30c7c83a 	sub	r3,r6,r3
 10081f0:	1800dc1e 	bne	r3,zero,1008564 <__umoddi3+0x558>
 10081f4:	002d883a 	mov	r22,zero
 10081f8:	982ed43a 	srli	r23,r19,16
 10081fc:	a809883a 	mov	r4,r21
 1008200:	9cbfffcc 	andi	r18,r19,65535
 1008204:	b80b883a 	mov	r5,r23
 1008208:	10098d40 	call	10098d4 <__udivsi3>
 100820c:	100b883a 	mov	r5,r2
 1008210:	9009883a 	mov	r4,r18
 1008214:	10098e40 	call	10098e4 <__mulsi3>
 1008218:	a809883a 	mov	r4,r21
 100821c:	b80b883a 	mov	r5,r23
 1008220:	1023883a 	mov	r17,r2
 1008224:	10098dc0 	call	10098dc <__umodsi3>
 1008228:	1004943a 	slli	r2,r2,16
 100822c:	8006d43a 	srli	r3,r16,16
 1008230:	10c4b03a 	or	r2,r2,r3
 1008234:	1440032e 	bgeu	r2,r17,1008244 <__umoddi3+0x238>
 1008238:	14c5883a 	add	r2,r2,r19
 100823c:	14c00136 	bltu	r2,r19,1008244 <__umoddi3+0x238>
 1008240:	14410236 	bltu	r2,r17,100864c <__umoddi3+0x640>
 1008244:	1463c83a 	sub	r17,r2,r17
 1008248:	8809883a 	mov	r4,r17
 100824c:	b80b883a 	mov	r5,r23
 1008250:	10098d40 	call	10098d4 <__udivsi3>
 1008254:	9009883a 	mov	r4,r18
 1008258:	100b883a 	mov	r5,r2
 100825c:	10098e40 	call	10098e4 <__mulsi3>
 1008260:	8809883a 	mov	r4,r17
 1008264:	b80b883a 	mov	r5,r23
 1008268:	102b883a 	mov	r21,r2
 100826c:	10098dc0 	call	10098dc <__umodsi3>
 1008270:	1004943a 	slli	r2,r2,16
 1008274:	80ffffcc 	andi	r3,r16,65535
 1008278:	10c4b03a 	or	r2,r2,r3
 100827c:	1540042e 	bgeu	r2,r21,1008290 <__umoddi3+0x284>
 1008280:	14c5883a 	add	r2,r2,r19
 1008284:	14c00236 	bltu	r2,r19,1008290 <__umoddi3+0x284>
 1008288:	1540012e 	bgeu	r2,r21,1008290 <__umoddi3+0x284>
 100828c:	14c5883a 	add	r2,r2,r19
 1008290:	1545c83a 	sub	r2,r2,r21
 1008294:	1584d83a 	srl	r2,r2,r22
 1008298:	0013883a 	mov	r9,zero
 100829c:	d8800415 	stw	r2,16(sp)
 10082a0:	d8c00417 	ldw	r3,16(sp)
 10082a4:	0005883a 	mov	r2,zero
 10082a8:	d8800515 	stw	r2,20(sp)
 10082ac:	1811883a 	mov	r8,r3
 10082b0:	003f9d06 	br	1008128 <__umoddi3+0x11c>
 10082b4:	00804034 	movhi	r2,256
 10082b8:	10bfffc4 	addi	r2,r2,-1
 10082bc:	14c0c636 	bltu	r2,r19,10085d8 <__umoddi3+0x5cc>
 10082c0:	01400404 	movi	r5,16
 10082c4:	2805883a 	mov	r2,r5
 10082c8:	003f6c06 	br	100807c <__umoddi3+0x70>
 10082cc:	01000044 	movi	r4,1
 10082d0:	000b883a 	mov	r5,zero
 10082d4:	10098d40 	call	10098d4 <__udivsi3>
 10082d8:	1027883a 	mov	r19,r2
 10082dc:	00bfffd4 	movui	r2,65535
 10082e0:	14fff436 	bltu	r2,r19,10082b4 <__umoddi3+0x2a8>
 10082e4:	003f6106 	br	100806c <__umoddi3+0x60>
 10082e8:	00804034 	movhi	r2,256
 10082ec:	10bfffc4 	addi	r2,r2,-1
 10082f0:	1200c536 	bltu	r2,r8,1008608 <__umoddi3+0x5fc>
 10082f4:	01400404 	movi	r5,16
 10082f8:	2805883a 	mov	r2,r5
 10082fc:	003fb406 	br	10081d0 <__umoddi3+0x1c4>
 1008300:	00804034 	movhi	r2,256
 1008304:	10bfffc4 	addi	r2,r2,-1
 1008308:	11c0c236 	bltu	r2,r7,1008614 <__umoddi3+0x608>
 100830c:	01400404 	movi	r5,16
 1008310:	2805883a 	mov	r2,r5
 1008314:	003f9806 	br	1008178 <__umoddi3+0x16c>
 1008318:	84c9c83a 	sub	r4,r16,r19
 100831c:	8105803a 	cmpltu	r2,r16,r4
 1008320:	a987c83a 	sub	r3,r21,r6
 1008324:	18abc83a 	sub	r21,r3,r2
 1008328:	2021883a 	mov	r16,r4
 100832c:	003f9d06 	br	10081a4 <__umoddi3+0x198>
 1008330:	9ca6983a 	sll	r19,r19,r18
 1008334:	3485c83a 	sub	r2,r6,r18
 1008338:	a8a2d83a 	srl	r17,r21,r2
 100833c:	982ed43a 	srli	r23,r19,16
 1008340:	ac86983a 	sll	r3,r21,r18
 1008344:	8084d83a 	srl	r2,r16,r2
 1008348:	8809883a 	mov	r4,r17
 100834c:	b80b883a 	mov	r5,r23
 1008350:	18b8b03a 	or	fp,r3,r2
 1008354:	9d3fffcc 	andi	r20,r19,65535
 1008358:	10098d40 	call	10098d4 <__udivsi3>
 100835c:	100b883a 	mov	r5,r2
 1008360:	a009883a 	mov	r4,r20
 1008364:	10098e40 	call	10098e4 <__mulsi3>
 1008368:	8809883a 	mov	r4,r17
 100836c:	b80b883a 	mov	r5,r23
 1008370:	102b883a 	mov	r21,r2
 1008374:	10098dc0 	call	10098dc <__umodsi3>
 1008378:	1004943a 	slli	r2,r2,16
 100837c:	e006d43a 	srli	r3,fp,16
 1008380:	902d883a 	mov	r22,r18
 1008384:	10c4b03a 	or	r2,r2,r3
 1008388:	1540022e 	bgeu	r2,r21,1008394 <__umoddi3+0x388>
 100838c:	14c5883a 	add	r2,r2,r19
 1008390:	14c0ab2e 	bgeu	r2,r19,1008640 <__umoddi3+0x634>
 1008394:	1563c83a 	sub	r17,r2,r21
 1008398:	8809883a 	mov	r4,r17
 100839c:	b80b883a 	mov	r5,r23
 10083a0:	10098d40 	call	10098d4 <__udivsi3>
 10083a4:	100b883a 	mov	r5,r2
 10083a8:	a009883a 	mov	r4,r20
 10083ac:	10098e40 	call	10098e4 <__mulsi3>
 10083b0:	8809883a 	mov	r4,r17
 10083b4:	b80b883a 	mov	r5,r23
 10083b8:	102b883a 	mov	r21,r2
 10083bc:	10098dc0 	call	10098dc <__umodsi3>
 10083c0:	1004943a 	slli	r2,r2,16
 10083c4:	e0ffffcc 	andi	r3,fp,65535
 10083c8:	10c4b03a 	or	r2,r2,r3
 10083cc:	1540042e 	bgeu	r2,r21,10083e0 <__umoddi3+0x3d4>
 10083d0:	14c5883a 	add	r2,r2,r19
 10083d4:	14c00236 	bltu	r2,r19,10083e0 <__umoddi3+0x3d4>
 10083d8:	1540012e 	bgeu	r2,r21,10083e0 <__umoddi3+0x3d4>
 10083dc:	14c5883a 	add	r2,r2,r19
 10083e0:	84a0983a 	sll	r16,r16,r18
 10083e4:	156bc83a 	sub	r21,r2,r21
 10083e8:	003f3106 	br	10080b0 <__umoddi3+0xa4>
 10083ec:	3c8fc83a 	sub	r7,r7,r18
 10083f0:	3486983a 	sll	r3,r6,r18
 10083f4:	99c4d83a 	srl	r2,r19,r7
 10083f8:	a9e2d83a 	srl	r17,r21,r7
 10083fc:	ac8c983a 	sll	r6,r21,r18
 1008400:	18acb03a 	or	r22,r3,r2
 1008404:	b02ed43a 	srli	r23,r22,16
 1008408:	81c4d83a 	srl	r2,r16,r7
 100840c:	8809883a 	mov	r4,r17
 1008410:	b80b883a 	mov	r5,r23
 1008414:	308cb03a 	or	r6,r6,r2
 1008418:	d9c00315 	stw	r7,12(sp)
 100841c:	d9800215 	stw	r6,8(sp)
 1008420:	b53fffcc 	andi	r20,r22,65535
 1008424:	10098d40 	call	10098d4 <__udivsi3>
 1008428:	100b883a 	mov	r5,r2
 100842c:	a009883a 	mov	r4,r20
 1008430:	1039883a 	mov	fp,r2
 1008434:	10098e40 	call	10098e4 <__mulsi3>
 1008438:	8809883a 	mov	r4,r17
 100843c:	b80b883a 	mov	r5,r23
 1008440:	102b883a 	mov	r21,r2
 1008444:	10098dc0 	call	10098dc <__umodsi3>
 1008448:	d9000217 	ldw	r4,8(sp)
 100844c:	1004943a 	slli	r2,r2,16
 1008450:	9ca6983a 	sll	r19,r19,r18
 1008454:	2006d43a 	srli	r3,r4,16
 1008458:	84a0983a 	sll	r16,r16,r18
 100845c:	dcc00015 	stw	r19,0(sp)
 1008460:	10c4b03a 	or	r2,r2,r3
 1008464:	dc000115 	stw	r16,4(sp)
 1008468:	1540032e 	bgeu	r2,r21,1008478 <__umoddi3+0x46c>
 100846c:	1585883a 	add	r2,r2,r22
 1008470:	e73fffc4 	addi	fp,fp,-1
 1008474:	15806e2e 	bgeu	r2,r22,1008630 <__umoddi3+0x624>
 1008478:	1563c83a 	sub	r17,r2,r21
 100847c:	8809883a 	mov	r4,r17
 1008480:	b80b883a 	mov	r5,r23
 1008484:	10098d40 	call	10098d4 <__udivsi3>
 1008488:	100b883a 	mov	r5,r2
 100848c:	a009883a 	mov	r4,r20
 1008490:	1021883a 	mov	r16,r2
 1008494:	10098e40 	call	10098e4 <__mulsi3>
 1008498:	b80b883a 	mov	r5,r23
 100849c:	8809883a 	mov	r4,r17
 10084a0:	1029883a 	mov	r20,r2
 10084a4:	10098dc0 	call	10098dc <__umodsi3>
 10084a8:	d9400217 	ldw	r5,8(sp)
 10084ac:	1004943a 	slli	r2,r2,16
 10084b0:	28ffffcc 	andi	r3,r5,65535
 10084b4:	10c4b03a 	or	r2,r2,r3
 10084b8:	1500032e 	bgeu	r2,r20,10084c8 <__umoddi3+0x4bc>
 10084bc:	1585883a 	add	r2,r2,r22
 10084c0:	843fffc4 	addi	r16,r16,-1
 10084c4:	1580562e 	bgeu	r2,r22,1008620 <__umoddi3+0x614>
 10084c8:	d9800017 	ldw	r6,0(sp)
 10084cc:	e022943a 	slli	r17,fp,16
 10084d0:	302ed43a 	srli	r23,r6,16
 10084d4:	8462b03a 	or	r17,r16,r17
 10084d8:	34ffffcc 	andi	r19,r6,65535
 10084dc:	882ad43a 	srli	r21,r17,16
 10084e0:	8c7fffcc 	andi	r17,r17,65535
 10084e4:	8809883a 	mov	r4,r17
 10084e8:	980b883a 	mov	r5,r19
 10084ec:	1521c83a 	sub	r16,r2,r20
 10084f0:	10098e40 	call	10098e4 <__mulsi3>
 10084f4:	8809883a 	mov	r4,r17
 10084f8:	b80b883a 	mov	r5,r23
 10084fc:	1029883a 	mov	r20,r2
 1008500:	10098e40 	call	10098e4 <__mulsi3>
 1008504:	980b883a 	mov	r5,r19
 1008508:	a809883a 	mov	r4,r21
 100850c:	1023883a 	mov	r17,r2
 1008510:	10098e40 	call	10098e4 <__mulsi3>
 1008514:	a809883a 	mov	r4,r21
 1008518:	b80b883a 	mov	r5,r23
 100851c:	1027883a 	mov	r19,r2
 1008520:	10098e40 	call	10098e4 <__mulsi3>
 1008524:	100b883a 	mov	r5,r2
 1008528:	a004d43a 	srli	r2,r20,16
 100852c:	8ce3883a 	add	r17,r17,r19
 1008530:	1449883a 	add	r4,r2,r17
 1008534:	24c0022e 	bgeu	r4,r19,1008540 <__umoddi3+0x534>
 1008538:	00800074 	movhi	r2,1
 100853c:	288b883a 	add	r5,r5,r2
 1008540:	2004d43a 	srli	r2,r4,16
 1008544:	2008943a 	slli	r4,r4,16
 1008548:	a0ffffcc 	andi	r3,r20,65535
 100854c:	288d883a 	add	r6,r5,r2
 1008550:	20c9883a 	add	r4,r4,r3
 1008554:	81800b36 	bltu	r16,r6,1008584 <__umoddi3+0x578>
 1008558:	81804026 	beq	r16,r6,100865c <__umoddi3+0x650>
 100855c:	818dc83a 	sub	r6,r16,r6
 1008560:	00000f06 	br	10085a0 <__umoddi3+0x594>
 1008564:	30c5c83a 	sub	r2,r6,r3
 1008568:	182d883a 	mov	r22,r3
 100856c:	8084d83a 	srl	r2,r16,r2
 1008570:	a8c6983a 	sll	r3,r21,r3
 1008574:	9da6983a 	sll	r19,r19,r22
 1008578:	85a0983a 	sll	r16,r16,r22
 100857c:	18aab03a 	or	r21,r3,r2
 1008580:	003f1d06 	br	10081f8 <__umoddi3+0x1ec>
 1008584:	d8c00017 	ldw	r3,0(sp)
 1008588:	20c5c83a 	sub	r2,r4,r3
 100858c:	2089803a 	cmpltu	r4,r4,r2
 1008590:	3587c83a 	sub	r3,r6,r22
 1008594:	1907c83a 	sub	r3,r3,r4
 1008598:	80cdc83a 	sub	r6,r16,r3
 100859c:	1009883a 	mov	r4,r2
 10085a0:	d9400117 	ldw	r5,4(sp)
 10085a4:	2905c83a 	sub	r2,r5,r4
 10085a8:	2887803a 	cmpltu	r3,r5,r2
 10085ac:	30c7c83a 	sub	r3,r6,r3
 10085b0:	d9800317 	ldw	r6,12(sp)
 10085b4:	1484d83a 	srl	r2,r2,r18
 10085b8:	1988983a 	sll	r4,r3,r6
 10085bc:	1c86d83a 	srl	r3,r3,r18
 10085c0:	2088b03a 	or	r4,r4,r2
 10085c4:	2011883a 	mov	r8,r4
 10085c8:	1813883a 	mov	r9,r3
 10085cc:	d9000415 	stw	r4,16(sp)
 10085d0:	d8c00515 	stw	r3,20(sp)
 10085d4:	003ed406 	br	1008128 <__umoddi3+0x11c>
 10085d8:	01400604 	movi	r5,24
 10085dc:	2805883a 	mov	r2,r5
 10085e0:	003ea606 	br	100807c <__umoddi3+0x70>
 10085e4:	01400204 	movi	r5,8
 10085e8:	2805883a 	mov	r2,r5
 10085ec:	003ea306 	br	100807c <__umoddi3+0x70>
 10085f0:	01400204 	movi	r5,8
 10085f4:	2805883a 	mov	r2,r5
 10085f8:	003edf06 	br	1008178 <__umoddi3+0x16c>
 10085fc:	01400204 	movi	r5,8
 1008600:	2805883a 	mov	r2,r5
 1008604:	003ef206 	br	10081d0 <__umoddi3+0x1c4>
 1008608:	01400604 	movi	r5,24
 100860c:	2805883a 	mov	r2,r5
 1008610:	003eef06 	br	10081d0 <__umoddi3+0x1c4>
 1008614:	01400604 	movi	r5,24
 1008618:	2805883a 	mov	r2,r5
 100861c:	003ed606 	br	1008178 <__umoddi3+0x16c>
 1008620:	153fa92e 	bgeu	r2,r20,10084c8 <__umoddi3+0x4bc>
 1008624:	843fffc4 	addi	r16,r16,-1
 1008628:	1585883a 	add	r2,r2,r22
 100862c:	003fa606 	br	10084c8 <__umoddi3+0x4bc>
 1008630:	157f912e 	bgeu	r2,r21,1008478 <__umoddi3+0x46c>
 1008634:	e73fffc4 	addi	fp,fp,-1
 1008638:	1585883a 	add	r2,r2,r22
 100863c:	003f8e06 	br	1008478 <__umoddi3+0x46c>
 1008640:	157f542e 	bgeu	r2,r21,1008394 <__umoddi3+0x388>
 1008644:	14c5883a 	add	r2,r2,r19
 1008648:	003f5206 	br	1008394 <__umoddi3+0x388>
 100864c:	14c5883a 	add	r2,r2,r19
 1008650:	003efc06 	br	1008244 <__umoddi3+0x238>
 1008654:	14c5883a 	add	r2,r2,r19
 1008658:	003ea606 	br	10080f4 <__umoddi3+0xe8>
 100865c:	d8800117 	ldw	r2,4(sp)
 1008660:	113fc836 	bltu	r2,r4,1008584 <__umoddi3+0x578>
 1008664:	000d883a 	mov	r6,zero
 1008668:	003fcd06 	br	10085a0 <__umoddi3+0x594>

0100866c <_fpadd_parts>:
 100866c:	defff804 	addi	sp,sp,-32
 1008670:	dcc00315 	stw	r19,12(sp)
 1008674:	2027883a 	mov	r19,r4
 1008678:	21000017 	ldw	r4,0(r4)
 100867c:	00c00044 	movi	r3,1
 1008680:	dd400515 	stw	r21,20(sp)
 1008684:	dd000415 	stw	r20,16(sp)
 1008688:	ddc00715 	stw	r23,28(sp)
 100868c:	dd800615 	stw	r22,24(sp)
 1008690:	dc800215 	stw	r18,8(sp)
 1008694:	dc400115 	stw	r17,4(sp)
 1008698:	dc000015 	stw	r16,0(sp)
 100869c:	282b883a 	mov	r21,r5
 10086a0:	3029883a 	mov	r20,r6
 10086a4:	1900632e 	bgeu	r3,r4,1008834 <_fpadd_parts+0x1c8>
 10086a8:	28800017 	ldw	r2,0(r5)
 10086ac:	1880812e 	bgeu	r3,r2,10088b4 <_fpadd_parts+0x248>
 10086b0:	00c00104 	movi	r3,4
 10086b4:	20c0dc26 	beq	r4,r3,1008a28 <_fpadd_parts+0x3bc>
 10086b8:	10c07e26 	beq	r2,r3,10088b4 <_fpadd_parts+0x248>
 10086bc:	00c00084 	movi	r3,2
 10086c0:	10c06726 	beq	r2,r3,1008860 <_fpadd_parts+0x1f4>
 10086c4:	20c07b26 	beq	r4,r3,10088b4 <_fpadd_parts+0x248>
 10086c8:	9dc00217 	ldw	r23,8(r19)
 10086cc:	28c00217 	ldw	r3,8(r5)
 10086d0:	9c400317 	ldw	r17,12(r19)
 10086d4:	2bc00317 	ldw	r15,12(r5)
 10086d8:	b8cdc83a 	sub	r6,r23,r3
 10086dc:	9c800417 	ldw	r18,16(r19)
 10086e0:	2c000417 	ldw	r16,16(r5)
 10086e4:	3009883a 	mov	r4,r6
 10086e8:	30009716 	blt	r6,zero,1008948 <_fpadd_parts+0x2dc>
 10086ec:	00800fc4 	movi	r2,63
 10086f0:	11806b16 	blt	r2,r6,10088a0 <_fpadd_parts+0x234>
 10086f4:	0100a40e 	bge	zero,r4,1008988 <_fpadd_parts+0x31c>
 10086f8:	35bff804 	addi	r22,r6,-32
 10086fc:	b000bc16 	blt	r22,zero,10089f0 <_fpadd_parts+0x384>
 1008700:	8596d83a 	srl	r11,r16,r22
 1008704:	0019883a 	mov	r12,zero
 1008708:	0013883a 	mov	r9,zero
 100870c:	01000044 	movi	r4,1
 1008710:	0015883a 	mov	r10,zero
 1008714:	b000be16 	blt	r22,zero,1008a10 <_fpadd_parts+0x3a4>
 1008718:	2590983a 	sll	r8,r4,r22
 100871c:	000f883a 	mov	r7,zero
 1008720:	00bfffc4 	movi	r2,-1
 1008724:	3889883a 	add	r4,r7,r2
 1008728:	408b883a 	add	r5,r8,r2
 100872c:	21cd803a 	cmpltu	r6,r4,r7
 1008730:	314b883a 	add	r5,r6,r5
 1008734:	7904703a 	and	r2,r15,r4
 1008738:	8146703a 	and	r3,r16,r5
 100873c:	10c4b03a 	or	r2,r2,r3
 1008740:	10000226 	beq	r2,zero,100874c <_fpadd_parts+0xe0>
 1008744:	02400044 	movi	r9,1
 1008748:	0015883a 	mov	r10,zero
 100874c:	5a5eb03a 	or	r15,r11,r9
 1008750:	62a0b03a 	or	r16,r12,r10
 1008754:	99400117 	ldw	r5,4(r19)
 1008758:	a8800117 	ldw	r2,4(r21)
 100875c:	28806e26 	beq	r5,r2,1008918 <_fpadd_parts+0x2ac>
 1008760:	28006626 	beq	r5,zero,10088fc <_fpadd_parts+0x290>
 1008764:	7c45c83a 	sub	r2,r15,r17
 1008768:	7889803a 	cmpltu	r4,r15,r2
 100876c:	8487c83a 	sub	r3,r16,r18
 1008770:	1909c83a 	sub	r4,r3,r4
 1008774:	100d883a 	mov	r6,r2
 1008778:	200f883a 	mov	r7,r4
 100877c:	38007716 	blt	r7,zero,100895c <_fpadd_parts+0x2f0>
 1008780:	a5c00215 	stw	r23,8(r20)
 1008784:	a1c00415 	stw	r7,16(r20)
 1008788:	a0000115 	stw	zero,4(r20)
 100878c:	a1800315 	stw	r6,12(r20)
 1008790:	a2000317 	ldw	r8,12(r20)
 1008794:	a2400417 	ldw	r9,16(r20)
 1008798:	00bfffc4 	movi	r2,-1
 100879c:	408b883a 	add	r5,r8,r2
 10087a0:	2a09803a 	cmpltu	r4,r5,r8
 10087a4:	488d883a 	add	r6,r9,r2
 10087a8:	01c40034 	movhi	r7,4096
 10087ac:	39ffffc4 	addi	r7,r7,-1
 10087b0:	218d883a 	add	r6,r4,r6
 10087b4:	39801736 	bltu	r7,r6,1008814 <_fpadd_parts+0x1a8>
 10087b8:	31c06526 	beq	r6,r7,1008950 <_fpadd_parts+0x2e4>
 10087bc:	a3000217 	ldw	r12,8(r20)
 10087c0:	4209883a 	add	r4,r8,r8
 10087c4:	00bfffc4 	movi	r2,-1
 10087c8:	220f803a 	cmpltu	r7,r4,r8
 10087cc:	4a4b883a 	add	r5,r9,r9
 10087d0:	394f883a 	add	r7,r7,r5
 10087d4:	2095883a 	add	r10,r4,r2
 10087d8:	3897883a 	add	r11,r7,r2
 10087dc:	510d803a 	cmpltu	r6,r10,r4
 10087e0:	6099883a 	add	r12,r12,r2
 10087e4:	32d7883a 	add	r11,r6,r11
 10087e8:	00840034 	movhi	r2,4096
 10087ec:	10bfffc4 	addi	r2,r2,-1
 10087f0:	2011883a 	mov	r8,r4
 10087f4:	3813883a 	mov	r9,r7
 10087f8:	a1000315 	stw	r4,12(r20)
 10087fc:	a1c00415 	stw	r7,16(r20)
 1008800:	a3000215 	stw	r12,8(r20)
 1008804:	12c00336 	bltu	r2,r11,1008814 <_fpadd_parts+0x1a8>
 1008808:	58bfed1e 	bne	r11,r2,10087c0 <_fpadd_parts+0x154>
 100880c:	00bfff84 	movi	r2,-2
 1008810:	12bfeb2e 	bgeu	r2,r10,10087c0 <_fpadd_parts+0x154>
 1008814:	a2800417 	ldw	r10,16(r20)
 1008818:	008000c4 	movi	r2,3
 100881c:	00c80034 	movhi	r3,8192
 1008820:	18ffffc4 	addi	r3,r3,-1
 1008824:	a2400317 	ldw	r9,12(r20)
 1008828:	a0800015 	stw	r2,0(r20)
 100882c:	1a802336 	bltu	r3,r10,10088bc <_fpadd_parts+0x250>
 1008830:	a027883a 	mov	r19,r20
 1008834:	9805883a 	mov	r2,r19
 1008838:	ddc00717 	ldw	r23,28(sp)
 100883c:	dd800617 	ldw	r22,24(sp)
 1008840:	dd400517 	ldw	r21,20(sp)
 1008844:	dd000417 	ldw	r20,16(sp)
 1008848:	dcc00317 	ldw	r19,12(sp)
 100884c:	dc800217 	ldw	r18,8(sp)
 1008850:	dc400117 	ldw	r17,4(sp)
 1008854:	dc000017 	ldw	r16,0(sp)
 1008858:	dec00804 	addi	sp,sp,32
 100885c:	f800283a 	ret
 1008860:	20fff41e 	bne	r4,r3,1008834 <_fpadd_parts+0x1c8>
 1008864:	31000015 	stw	r4,0(r6)
 1008868:	98800117 	ldw	r2,4(r19)
 100886c:	30800115 	stw	r2,4(r6)
 1008870:	98c00217 	ldw	r3,8(r19)
 1008874:	30c00215 	stw	r3,8(r6)
 1008878:	98800317 	ldw	r2,12(r19)
 100887c:	30800315 	stw	r2,12(r6)
 1008880:	98c00417 	ldw	r3,16(r19)
 1008884:	30c00415 	stw	r3,16(r6)
 1008888:	98800117 	ldw	r2,4(r19)
 100888c:	28c00117 	ldw	r3,4(r5)
 1008890:	3027883a 	mov	r19,r6
 1008894:	10c4703a 	and	r2,r2,r3
 1008898:	30800115 	stw	r2,4(r6)
 100889c:	003fe506 	br	1008834 <_fpadd_parts+0x1c8>
 10088a0:	1dc02616 	blt	r3,r23,100893c <_fpadd_parts+0x2d0>
 10088a4:	0023883a 	mov	r17,zero
 10088a8:	182f883a 	mov	r23,r3
 10088ac:	0025883a 	mov	r18,zero
 10088b0:	003fa806 	br	1008754 <_fpadd_parts+0xe8>
 10088b4:	a827883a 	mov	r19,r21
 10088b8:	003fde06 	br	1008834 <_fpadd_parts+0x1c8>
 10088bc:	01800044 	movi	r6,1
 10088c0:	500497fa 	slli	r2,r10,31
 10088c4:	4808d07a 	srli	r4,r9,1
 10088c8:	518ad83a 	srl	r5,r10,r6
 10088cc:	a2000217 	ldw	r8,8(r20)
 10088d0:	1108b03a 	or	r4,r2,r4
 10088d4:	0007883a 	mov	r3,zero
 10088d8:	4984703a 	and	r2,r9,r6
 10088dc:	208cb03a 	or	r6,r4,r2
 10088e0:	28ceb03a 	or	r7,r5,r3
 10088e4:	42000044 	addi	r8,r8,1
 10088e8:	a027883a 	mov	r19,r20
 10088ec:	a1c00415 	stw	r7,16(r20)
 10088f0:	a2000215 	stw	r8,8(r20)
 10088f4:	a1800315 	stw	r6,12(r20)
 10088f8:	003fce06 	br	1008834 <_fpadd_parts+0x1c8>
 10088fc:	8bc5c83a 	sub	r2,r17,r15
 1008900:	8889803a 	cmpltu	r4,r17,r2
 1008904:	9407c83a 	sub	r3,r18,r16
 1008908:	1909c83a 	sub	r4,r3,r4
 100890c:	100d883a 	mov	r6,r2
 1008910:	200f883a 	mov	r7,r4
 1008914:	003f9906 	br	100877c <_fpadd_parts+0x110>
 1008918:	7c45883a 	add	r2,r15,r17
 100891c:	13c9803a 	cmpltu	r4,r2,r15
 1008920:	8487883a 	add	r3,r16,r18
 1008924:	20c9883a 	add	r4,r4,r3
 1008928:	a1400115 	stw	r5,4(r20)
 100892c:	a5c00215 	stw	r23,8(r20)
 1008930:	a0800315 	stw	r2,12(r20)
 1008934:	a1000415 	stw	r4,16(r20)
 1008938:	003fb606 	br	1008814 <_fpadd_parts+0x1a8>
 100893c:	001f883a 	mov	r15,zero
 1008940:	0021883a 	mov	r16,zero
 1008944:	003f8306 	br	1008754 <_fpadd_parts+0xe8>
 1008948:	018dc83a 	sub	r6,zero,r6
 100894c:	003f6706 	br	10086ec <_fpadd_parts+0x80>
 1008950:	00bfff84 	movi	r2,-2
 1008954:	117faf36 	bltu	r2,r5,1008814 <_fpadd_parts+0x1a8>
 1008958:	003f9806 	br	10087bc <_fpadd_parts+0x150>
 100895c:	0005883a 	mov	r2,zero
 1008960:	1189c83a 	sub	r4,r2,r6
 1008964:	1105803a 	cmpltu	r2,r2,r4
 1008968:	01cbc83a 	sub	r5,zero,r7
 100896c:	2885c83a 	sub	r2,r5,r2
 1008970:	01800044 	movi	r6,1
 1008974:	a1800115 	stw	r6,4(r20)
 1008978:	a5c00215 	stw	r23,8(r20)
 100897c:	a1000315 	stw	r4,12(r20)
 1008980:	a0800415 	stw	r2,16(r20)
 1008984:	003f8206 	br	1008790 <_fpadd_parts+0x124>
 1008988:	203f7226 	beq	r4,zero,1008754 <_fpadd_parts+0xe8>
 100898c:	35bff804 	addi	r22,r6,-32
 1008990:	b9af883a 	add	r23,r23,r6
 1008994:	b0003116 	blt	r22,zero,1008a5c <_fpadd_parts+0x3f0>
 1008998:	959ad83a 	srl	r13,r18,r22
 100899c:	001d883a 	mov	r14,zero
 10089a0:	000f883a 	mov	r7,zero
 10089a4:	01000044 	movi	r4,1
 10089a8:	0011883a 	mov	r8,zero
 10089ac:	b0002516 	blt	r22,zero,1008a44 <_fpadd_parts+0x3d8>
 10089b0:	2594983a 	sll	r10,r4,r22
 10089b4:	0013883a 	mov	r9,zero
 10089b8:	00bfffc4 	movi	r2,-1
 10089bc:	4889883a 	add	r4,r9,r2
 10089c0:	508b883a 	add	r5,r10,r2
 10089c4:	224d803a 	cmpltu	r6,r4,r9
 10089c8:	314b883a 	add	r5,r6,r5
 10089cc:	8904703a 	and	r2,r17,r4
 10089d0:	9146703a 	and	r3,r18,r5
 10089d4:	10c4b03a 	or	r2,r2,r3
 10089d8:	10000226 	beq	r2,zero,10089e4 <_fpadd_parts+0x378>
 10089dc:	01c00044 	movi	r7,1
 10089e0:	0011883a 	mov	r8,zero
 10089e4:	69e2b03a 	or	r17,r13,r7
 10089e8:	7224b03a 	or	r18,r14,r8
 10089ec:	003f5906 	br	1008754 <_fpadd_parts+0xe8>
 10089f0:	8407883a 	add	r3,r16,r16
 10089f4:	008007c4 	movi	r2,31
 10089f8:	1185c83a 	sub	r2,r2,r6
 10089fc:	1886983a 	sll	r3,r3,r2
 1008a00:	7996d83a 	srl	r11,r15,r6
 1008a04:	8198d83a 	srl	r12,r16,r6
 1008a08:	1ad6b03a 	or	r11,r3,r11
 1008a0c:	003f3e06 	br	1008708 <_fpadd_parts+0x9c>
 1008a10:	2006d07a 	srli	r3,r4,1
 1008a14:	008007c4 	movi	r2,31
 1008a18:	1185c83a 	sub	r2,r2,r6
 1008a1c:	1890d83a 	srl	r8,r3,r2
 1008a20:	218e983a 	sll	r7,r4,r6
 1008a24:	003f3e06 	br	1008720 <_fpadd_parts+0xb4>
 1008a28:	113f821e 	bne	r2,r4,1008834 <_fpadd_parts+0x1c8>
 1008a2c:	28c00117 	ldw	r3,4(r5)
 1008a30:	98800117 	ldw	r2,4(r19)
 1008a34:	10ff7f26 	beq	r2,r3,1008834 <_fpadd_parts+0x1c8>
 1008a38:	04c04074 	movhi	r19,257
 1008a3c:	9cd83a04 	addi	r19,r19,24808
 1008a40:	003f7c06 	br	1008834 <_fpadd_parts+0x1c8>
 1008a44:	2006d07a 	srli	r3,r4,1
 1008a48:	008007c4 	movi	r2,31
 1008a4c:	1185c83a 	sub	r2,r2,r6
 1008a50:	1894d83a 	srl	r10,r3,r2
 1008a54:	2192983a 	sll	r9,r4,r6
 1008a58:	003fd706 	br	10089b8 <_fpadd_parts+0x34c>
 1008a5c:	9487883a 	add	r3,r18,r18
 1008a60:	008007c4 	movi	r2,31
 1008a64:	1185c83a 	sub	r2,r2,r6
 1008a68:	1886983a 	sll	r3,r3,r2
 1008a6c:	899ad83a 	srl	r13,r17,r6
 1008a70:	919cd83a 	srl	r14,r18,r6
 1008a74:	1b5ab03a 	or	r13,r3,r13
 1008a78:	003fc906 	br	10089a0 <_fpadd_parts+0x334>

01008a7c <__subdf3>:
 1008a7c:	deffea04 	addi	sp,sp,-88
 1008a80:	dcc01415 	stw	r19,80(sp)
 1008a84:	dcc00404 	addi	r19,sp,16
 1008a88:	2011883a 	mov	r8,r4
 1008a8c:	2813883a 	mov	r9,r5
 1008a90:	dc401315 	stw	r17,76(sp)
 1008a94:	d809883a 	mov	r4,sp
 1008a98:	980b883a 	mov	r5,r19
 1008a9c:	dc400904 	addi	r17,sp,36
 1008aa0:	dfc01515 	stw	ra,84(sp)
 1008aa4:	da400115 	stw	r9,4(sp)
 1008aa8:	d9c00315 	stw	r7,12(sp)
 1008aac:	da000015 	stw	r8,0(sp)
 1008ab0:	d9800215 	stw	r6,8(sp)
 1008ab4:	1009dd40 	call	1009dd4 <__unpack_d>
 1008ab8:	d9000204 	addi	r4,sp,8
 1008abc:	880b883a 	mov	r5,r17
 1008ac0:	1009dd40 	call	1009dd4 <__unpack_d>
 1008ac4:	d8800a17 	ldw	r2,40(sp)
 1008ac8:	880b883a 	mov	r5,r17
 1008acc:	9809883a 	mov	r4,r19
 1008ad0:	d9800e04 	addi	r6,sp,56
 1008ad4:	1080005c 	xori	r2,r2,1
 1008ad8:	d8800a15 	stw	r2,40(sp)
 1008adc:	100866c0 	call	100866c <_fpadd_parts>
 1008ae0:	1009883a 	mov	r4,r2
 1008ae4:	1009ac00 	call	1009ac0 <__pack_d>
 1008ae8:	dfc01517 	ldw	ra,84(sp)
 1008aec:	dcc01417 	ldw	r19,80(sp)
 1008af0:	dc401317 	ldw	r17,76(sp)
 1008af4:	dec01604 	addi	sp,sp,88
 1008af8:	f800283a 	ret

01008afc <__adddf3>:
 1008afc:	deffea04 	addi	sp,sp,-88
 1008b00:	dcc01415 	stw	r19,80(sp)
 1008b04:	dcc00404 	addi	r19,sp,16
 1008b08:	2011883a 	mov	r8,r4
 1008b0c:	2813883a 	mov	r9,r5
 1008b10:	dc401315 	stw	r17,76(sp)
 1008b14:	d809883a 	mov	r4,sp
 1008b18:	980b883a 	mov	r5,r19
 1008b1c:	dc400904 	addi	r17,sp,36
 1008b20:	dfc01515 	stw	ra,84(sp)
 1008b24:	da400115 	stw	r9,4(sp)
 1008b28:	d9c00315 	stw	r7,12(sp)
 1008b2c:	da000015 	stw	r8,0(sp)
 1008b30:	d9800215 	stw	r6,8(sp)
 1008b34:	1009dd40 	call	1009dd4 <__unpack_d>
 1008b38:	d9000204 	addi	r4,sp,8
 1008b3c:	880b883a 	mov	r5,r17
 1008b40:	1009dd40 	call	1009dd4 <__unpack_d>
 1008b44:	d9800e04 	addi	r6,sp,56
 1008b48:	9809883a 	mov	r4,r19
 1008b4c:	880b883a 	mov	r5,r17
 1008b50:	100866c0 	call	100866c <_fpadd_parts>
 1008b54:	1009883a 	mov	r4,r2
 1008b58:	1009ac00 	call	1009ac0 <__pack_d>
 1008b5c:	dfc01517 	ldw	ra,84(sp)
 1008b60:	dcc01417 	ldw	r19,80(sp)
 1008b64:	dc401317 	ldw	r17,76(sp)
 1008b68:	dec01604 	addi	sp,sp,88
 1008b6c:	f800283a 	ret

01008b70 <__muldf3>:
 1008b70:	deffe004 	addi	sp,sp,-128
 1008b74:	dc401815 	stw	r17,96(sp)
 1008b78:	dc400404 	addi	r17,sp,16
 1008b7c:	2011883a 	mov	r8,r4
 1008b80:	2813883a 	mov	r9,r5
 1008b84:	dc001715 	stw	r16,92(sp)
 1008b88:	d809883a 	mov	r4,sp
 1008b8c:	880b883a 	mov	r5,r17
 1008b90:	dc000904 	addi	r16,sp,36
 1008b94:	dfc01f15 	stw	ra,124(sp)
 1008b98:	da400115 	stw	r9,4(sp)
 1008b9c:	d9c00315 	stw	r7,12(sp)
 1008ba0:	da000015 	stw	r8,0(sp)
 1008ba4:	d9800215 	stw	r6,8(sp)
 1008ba8:	ddc01e15 	stw	r23,120(sp)
 1008bac:	dd801d15 	stw	r22,116(sp)
 1008bb0:	dd401c15 	stw	r21,112(sp)
 1008bb4:	dd001b15 	stw	r20,108(sp)
 1008bb8:	dcc01a15 	stw	r19,104(sp)
 1008bbc:	dc801915 	stw	r18,100(sp)
 1008bc0:	1009dd40 	call	1009dd4 <__unpack_d>
 1008bc4:	d9000204 	addi	r4,sp,8
 1008bc8:	800b883a 	mov	r5,r16
 1008bcc:	1009dd40 	call	1009dd4 <__unpack_d>
 1008bd0:	d9000417 	ldw	r4,16(sp)
 1008bd4:	00800044 	movi	r2,1
 1008bd8:	1100102e 	bgeu	r2,r4,1008c1c <__muldf3+0xac>
 1008bdc:	d8c00917 	ldw	r3,36(sp)
 1008be0:	10c0062e 	bgeu	r2,r3,1008bfc <__muldf3+0x8c>
 1008be4:	00800104 	movi	r2,4
 1008be8:	20800a26 	beq	r4,r2,1008c14 <__muldf3+0xa4>
 1008bec:	1880cc26 	beq	r3,r2,1008f20 <__muldf3+0x3b0>
 1008bf0:	00800084 	movi	r2,2
 1008bf4:	20800926 	beq	r4,r2,1008c1c <__muldf3+0xac>
 1008bf8:	1880191e 	bne	r3,r2,1008c60 <__muldf3+0xf0>
 1008bfc:	d8c00a17 	ldw	r3,40(sp)
 1008c00:	d8800517 	ldw	r2,20(sp)
 1008c04:	8009883a 	mov	r4,r16
 1008c08:	10c4c03a 	cmpne	r2,r2,r3
 1008c0c:	d8800a15 	stw	r2,40(sp)
 1008c10:	00000706 	br	1008c30 <__muldf3+0xc0>
 1008c14:	00800084 	movi	r2,2
 1008c18:	1880c326 	beq	r3,r2,1008f28 <__muldf3+0x3b8>
 1008c1c:	d8800517 	ldw	r2,20(sp)
 1008c20:	d8c00a17 	ldw	r3,40(sp)
 1008c24:	8809883a 	mov	r4,r17
 1008c28:	10c4c03a 	cmpne	r2,r2,r3
 1008c2c:	d8800515 	stw	r2,20(sp)
 1008c30:	1009ac00 	call	1009ac0 <__pack_d>
 1008c34:	dfc01f17 	ldw	ra,124(sp)
 1008c38:	ddc01e17 	ldw	r23,120(sp)
 1008c3c:	dd801d17 	ldw	r22,116(sp)
 1008c40:	dd401c17 	ldw	r21,112(sp)
 1008c44:	dd001b17 	ldw	r20,108(sp)
 1008c48:	dcc01a17 	ldw	r19,104(sp)
 1008c4c:	dc801917 	ldw	r18,100(sp)
 1008c50:	dc401817 	ldw	r17,96(sp)
 1008c54:	dc001717 	ldw	r16,92(sp)
 1008c58:	dec02004 	addi	sp,sp,128
 1008c5c:	f800283a 	ret
 1008c60:	dd800717 	ldw	r22,28(sp)
 1008c64:	dc800c17 	ldw	r18,48(sp)
 1008c68:	002b883a 	mov	r21,zero
 1008c6c:	0023883a 	mov	r17,zero
 1008c70:	a80b883a 	mov	r5,r21
 1008c74:	b00d883a 	mov	r6,r22
 1008c78:	880f883a 	mov	r7,r17
 1008c7c:	ddc00817 	ldw	r23,32(sp)
 1008c80:	dcc00d17 	ldw	r19,52(sp)
 1008c84:	9009883a 	mov	r4,r18
 1008c88:	100991c0 	call	100991c <__muldi3>
 1008c8c:	001b883a 	mov	r13,zero
 1008c90:	680f883a 	mov	r7,r13
 1008c94:	b009883a 	mov	r4,r22
 1008c98:	000b883a 	mov	r5,zero
 1008c9c:	980d883a 	mov	r6,r19
 1008ca0:	b82d883a 	mov	r22,r23
 1008ca4:	002f883a 	mov	r23,zero
 1008ca8:	db401615 	stw	r13,88(sp)
 1008cac:	d8801315 	stw	r2,76(sp)
 1008cb0:	d8c01415 	stw	r3,80(sp)
 1008cb4:	dcc01515 	stw	r19,84(sp)
 1008cb8:	100991c0 	call	100991c <__muldi3>
 1008cbc:	b00d883a 	mov	r6,r22
 1008cc0:	000b883a 	mov	r5,zero
 1008cc4:	9009883a 	mov	r4,r18
 1008cc8:	b80f883a 	mov	r7,r23
 1008ccc:	1021883a 	mov	r16,r2
 1008cd0:	1823883a 	mov	r17,r3
 1008cd4:	100991c0 	call	100991c <__muldi3>
 1008cd8:	8085883a 	add	r2,r16,r2
 1008cdc:	140d803a 	cmpltu	r6,r2,r16
 1008ce0:	88c7883a 	add	r3,r17,r3
 1008ce4:	30cd883a 	add	r6,r6,r3
 1008ce8:	1029883a 	mov	r20,r2
 1008cec:	302b883a 	mov	r21,r6
 1008cf0:	da801317 	ldw	r10,76(sp)
 1008cf4:	dac01417 	ldw	r11,80(sp)
 1008cf8:	db001517 	ldw	r12,84(sp)
 1008cfc:	db401617 	ldw	r13,88(sp)
 1008d00:	3440612e 	bgeu	r6,r17,1008e88 <__muldf3+0x318>
 1008d04:	0009883a 	mov	r4,zero
 1008d08:	5105883a 	add	r2,r10,r4
 1008d0c:	128d803a 	cmpltu	r6,r2,r10
 1008d10:	5d07883a 	add	r3,r11,r20
 1008d14:	30cd883a 	add	r6,r6,r3
 1008d18:	0021883a 	mov	r16,zero
 1008d1c:	04400044 	movi	r17,1
 1008d20:	1025883a 	mov	r18,r2
 1008d24:	3027883a 	mov	r19,r6
 1008d28:	32c06236 	bltu	r6,r11,1008eb4 <__muldf3+0x344>
 1008d2c:	59807a26 	beq	r11,r6,1008f18 <__muldf3+0x3a8>
 1008d30:	680b883a 	mov	r5,r13
 1008d34:	b80f883a 	mov	r7,r23
 1008d38:	6009883a 	mov	r4,r12
 1008d3c:	b00d883a 	mov	r6,r22
 1008d40:	100991c0 	call	100991c <__muldi3>
 1008d44:	1009883a 	mov	r4,r2
 1008d48:	000f883a 	mov	r7,zero
 1008d4c:	1545883a 	add	r2,r2,r21
 1008d50:	1111803a 	cmpltu	r8,r2,r4
 1008d54:	19c7883a 	add	r3,r3,r7
 1008d58:	40c7883a 	add	r3,r8,r3
 1008d5c:	88cb883a 	add	r5,r17,r3
 1008d60:	d8c00617 	ldw	r3,24(sp)
 1008d64:	8089883a 	add	r4,r16,r2
 1008d68:	d8800b17 	ldw	r2,44(sp)
 1008d6c:	18c00104 	addi	r3,r3,4
 1008d70:	240d803a 	cmpltu	r6,r4,r16
 1008d74:	10c7883a 	add	r3,r2,r3
 1008d78:	2013883a 	mov	r9,r4
 1008d7c:	d8800a17 	ldw	r2,40(sp)
 1008d80:	d9000517 	ldw	r4,20(sp)
 1008d84:	314d883a 	add	r6,r6,r5
 1008d88:	3015883a 	mov	r10,r6
 1008d8c:	2088c03a 	cmpne	r4,r4,r2
 1008d90:	00880034 	movhi	r2,8192
 1008d94:	10bfffc4 	addi	r2,r2,-1
 1008d98:	d9000f15 	stw	r4,60(sp)
 1008d9c:	d8c01015 	stw	r3,64(sp)
 1008da0:	1180162e 	bgeu	r2,r6,1008dfc <__muldf3+0x28c>
 1008da4:	1811883a 	mov	r8,r3
 1008da8:	101f883a 	mov	r15,r2
 1008dac:	980497fa 	slli	r2,r19,31
 1008db0:	9016d07a 	srli	r11,r18,1
 1008db4:	500697fa 	slli	r3,r10,31
 1008db8:	480cd07a 	srli	r6,r9,1
 1008dbc:	500ed07a 	srli	r7,r10,1
 1008dc0:	12d6b03a 	or	r11,r2,r11
 1008dc4:	00800044 	movi	r2,1
 1008dc8:	198cb03a 	or	r6,r3,r6
 1008dcc:	4888703a 	and	r4,r9,r2
 1008dd0:	9818d07a 	srli	r12,r19,1
 1008dd4:	001b883a 	mov	r13,zero
 1008dd8:	03a00034 	movhi	r14,32768
 1008ddc:	3013883a 	mov	r9,r6
 1008de0:	3815883a 	mov	r10,r7
 1008de4:	4091883a 	add	r8,r8,r2
 1008de8:	20000226 	beq	r4,zero,1008df4 <__muldf3+0x284>
 1008dec:	5b64b03a 	or	r18,r11,r13
 1008df0:	63a6b03a 	or	r19,r12,r14
 1008df4:	7abfed36 	bltu	r15,r10,1008dac <__muldf3+0x23c>
 1008df8:	da001015 	stw	r8,64(sp)
 1008dfc:	00840034 	movhi	r2,4096
 1008e00:	10bfffc4 	addi	r2,r2,-1
 1008e04:	12801436 	bltu	r2,r10,1008e58 <__muldf3+0x2e8>
 1008e08:	da001017 	ldw	r8,64(sp)
 1008e0c:	101f883a 	mov	r15,r2
 1008e10:	4a45883a 	add	r2,r9,r9
 1008e14:	124d803a 	cmpltu	r6,r2,r9
 1008e18:	5287883a 	add	r3,r10,r10
 1008e1c:	9497883a 	add	r11,r18,r18
 1008e20:	5c8f803a 	cmpltu	r7,r11,r18
 1008e24:	9cd9883a 	add	r12,r19,r19
 1008e28:	01000044 	movi	r4,1
 1008e2c:	30cd883a 	add	r6,r6,r3
 1008e30:	3b0f883a 	add	r7,r7,r12
 1008e34:	423fffc4 	addi	r8,r8,-1
 1008e38:	1013883a 	mov	r9,r2
 1008e3c:	3015883a 	mov	r10,r6
 1008e40:	111ab03a 	or	r13,r2,r4
 1008e44:	98003016 	blt	r19,zero,1008f08 <__muldf3+0x398>
 1008e48:	5825883a 	mov	r18,r11
 1008e4c:	3827883a 	mov	r19,r7
 1008e50:	7abfef2e 	bgeu	r15,r10,1008e10 <__muldf3+0x2a0>
 1008e54:	da001015 	stw	r8,64(sp)
 1008e58:	00803fc4 	movi	r2,255
 1008e5c:	488e703a 	and	r7,r9,r2
 1008e60:	00802004 	movi	r2,128
 1008e64:	0007883a 	mov	r3,zero
 1008e68:	0011883a 	mov	r8,zero
 1008e6c:	38801826 	beq	r7,r2,1008ed0 <__muldf3+0x360>
 1008e70:	008000c4 	movi	r2,3
 1008e74:	d9000e04 	addi	r4,sp,56
 1008e78:	da801215 	stw	r10,72(sp)
 1008e7c:	d8800e15 	stw	r2,56(sp)
 1008e80:	da401115 	stw	r9,68(sp)
 1008e84:	003f6a06 	br	1008c30 <__muldf3+0xc0>
 1008e88:	89802126 	beq	r17,r6,1008f10 <__muldf3+0x3a0>
 1008e8c:	0009883a 	mov	r4,zero
 1008e90:	5105883a 	add	r2,r10,r4
 1008e94:	128d803a 	cmpltu	r6,r2,r10
 1008e98:	5d07883a 	add	r3,r11,r20
 1008e9c:	30cd883a 	add	r6,r6,r3
 1008ea0:	0021883a 	mov	r16,zero
 1008ea4:	0023883a 	mov	r17,zero
 1008ea8:	1025883a 	mov	r18,r2
 1008eac:	3027883a 	mov	r19,r6
 1008eb0:	32ff9e2e 	bgeu	r6,r11,1008d2c <__muldf3+0x1bc>
 1008eb4:	00800044 	movi	r2,1
 1008eb8:	8089883a 	add	r4,r16,r2
 1008ebc:	240d803a 	cmpltu	r6,r4,r16
 1008ec0:	344d883a 	add	r6,r6,r17
 1008ec4:	2021883a 	mov	r16,r4
 1008ec8:	3023883a 	mov	r17,r6
 1008ecc:	003f9806 	br	1008d30 <__muldf3+0x1c0>
 1008ed0:	403fe71e 	bne	r8,zero,1008e70 <__muldf3+0x300>
 1008ed4:	01004004 	movi	r4,256
 1008ed8:	4904703a 	and	r2,r9,r4
 1008edc:	10c4b03a 	or	r2,r2,r3
 1008ee0:	103fe31e 	bne	r2,zero,1008e70 <__muldf3+0x300>
 1008ee4:	94c4b03a 	or	r2,r18,r19
 1008ee8:	103fe126 	beq	r2,zero,1008e70 <__muldf3+0x300>
 1008eec:	49c5883a 	add	r2,r9,r7
 1008ef0:	1251803a 	cmpltu	r8,r2,r9
 1008ef4:	4291883a 	add	r8,r8,r10
 1008ef8:	013fc004 	movi	r4,-256
 1008efc:	1112703a 	and	r9,r2,r4
 1008f00:	4015883a 	mov	r10,r8
 1008f04:	003fda06 	br	1008e70 <__muldf3+0x300>
 1008f08:	6813883a 	mov	r9,r13
 1008f0c:	003fce06 	br	1008e48 <__muldf3+0x2d8>
 1008f10:	143f7c36 	bltu	r2,r16,1008d04 <__muldf3+0x194>
 1008f14:	003fdd06 	br	1008e8c <__muldf3+0x31c>
 1008f18:	12bf852e 	bgeu	r2,r10,1008d30 <__muldf3+0x1c0>
 1008f1c:	003fe506 	br	1008eb4 <__muldf3+0x344>
 1008f20:	00800084 	movi	r2,2
 1008f24:	20bf351e 	bne	r4,r2,1008bfc <__muldf3+0x8c>
 1008f28:	01004074 	movhi	r4,257
 1008f2c:	21183a04 	addi	r4,r4,24808
 1008f30:	003f3f06 	br	1008c30 <__muldf3+0xc0>

01008f34 <__divdf3>:
 1008f34:	deffed04 	addi	sp,sp,-76
 1008f38:	dcc01115 	stw	r19,68(sp)
 1008f3c:	dcc00404 	addi	r19,sp,16
 1008f40:	2011883a 	mov	r8,r4
 1008f44:	2813883a 	mov	r9,r5
 1008f48:	dc000e15 	stw	r16,56(sp)
 1008f4c:	d809883a 	mov	r4,sp
 1008f50:	980b883a 	mov	r5,r19
 1008f54:	dc000904 	addi	r16,sp,36
 1008f58:	dfc01215 	stw	ra,72(sp)
 1008f5c:	da400115 	stw	r9,4(sp)
 1008f60:	d9c00315 	stw	r7,12(sp)
 1008f64:	da000015 	stw	r8,0(sp)
 1008f68:	d9800215 	stw	r6,8(sp)
 1008f6c:	dc801015 	stw	r18,64(sp)
 1008f70:	dc400f15 	stw	r17,60(sp)
 1008f74:	1009dd40 	call	1009dd4 <__unpack_d>
 1008f78:	d9000204 	addi	r4,sp,8
 1008f7c:	800b883a 	mov	r5,r16
 1008f80:	1009dd40 	call	1009dd4 <__unpack_d>
 1008f84:	d9000417 	ldw	r4,16(sp)
 1008f88:	00800044 	movi	r2,1
 1008f8c:	11000b2e 	bgeu	r2,r4,1008fbc <__divdf3+0x88>
 1008f90:	d9400917 	ldw	r5,36(sp)
 1008f94:	1140762e 	bgeu	r2,r5,1009170 <__divdf3+0x23c>
 1008f98:	d8800517 	ldw	r2,20(sp)
 1008f9c:	d8c00a17 	ldw	r3,40(sp)
 1008fa0:	01800104 	movi	r6,4
 1008fa4:	10c4f03a 	xor	r2,r2,r3
 1008fa8:	d8800515 	stw	r2,20(sp)
 1008fac:	21800226 	beq	r4,r6,1008fb8 <__divdf3+0x84>
 1008fb0:	00800084 	movi	r2,2
 1008fb4:	2080141e 	bne	r4,r2,1009008 <__divdf3+0xd4>
 1008fb8:	29000926 	beq	r5,r4,1008fe0 <__divdf3+0xac>
 1008fbc:	9809883a 	mov	r4,r19
 1008fc0:	1009ac00 	call	1009ac0 <__pack_d>
 1008fc4:	dfc01217 	ldw	ra,72(sp)
 1008fc8:	dcc01117 	ldw	r19,68(sp)
 1008fcc:	dc801017 	ldw	r18,64(sp)
 1008fd0:	dc400f17 	ldw	r17,60(sp)
 1008fd4:	dc000e17 	ldw	r16,56(sp)
 1008fd8:	dec01304 	addi	sp,sp,76
 1008fdc:	f800283a 	ret
 1008fe0:	01004074 	movhi	r4,257
 1008fe4:	21183a04 	addi	r4,r4,24808
 1008fe8:	1009ac00 	call	1009ac0 <__pack_d>
 1008fec:	dfc01217 	ldw	ra,72(sp)
 1008ff0:	dcc01117 	ldw	r19,68(sp)
 1008ff4:	dc801017 	ldw	r18,64(sp)
 1008ff8:	dc400f17 	ldw	r17,60(sp)
 1008ffc:	dc000e17 	ldw	r16,56(sp)
 1009000:	dec01304 	addi	sp,sp,76
 1009004:	f800283a 	ret
 1009008:	29805b26 	beq	r5,r6,1009178 <__divdf3+0x244>
 100900c:	28802d26 	beq	r5,r2,10090c4 <__divdf3+0x190>
 1009010:	d8c00617 	ldw	r3,24(sp)
 1009014:	d8800b17 	ldw	r2,44(sp)
 1009018:	d9c00817 	ldw	r7,32(sp)
 100901c:	dc400d17 	ldw	r17,52(sp)
 1009020:	188bc83a 	sub	r5,r3,r2
 1009024:	d9800717 	ldw	r6,28(sp)
 1009028:	dc000c17 	ldw	r16,48(sp)
 100902c:	d9400615 	stw	r5,24(sp)
 1009030:	3c403836 	bltu	r7,r17,1009114 <__divdf3+0x1e0>
 1009034:	89c03626 	beq	r17,r7,1009110 <__divdf3+0x1dc>
 1009038:	0015883a 	mov	r10,zero
 100903c:	001d883a 	mov	r14,zero
 1009040:	02c40034 	movhi	r11,4096
 1009044:	001f883a 	mov	r15,zero
 1009048:	003f883a 	mov	ra,zero
 100904c:	04800f44 	movi	r18,61
 1009050:	00000f06 	br	1009090 <__divdf3+0x15c>
 1009054:	601d883a 	mov	r14,r12
 1009058:	681f883a 	mov	r15,r13
 100905c:	400d883a 	mov	r6,r8
 1009060:	100f883a 	mov	r7,r2
 1009064:	3191883a 	add	r8,r6,r6
 1009068:	5808d07a 	srli	r4,r11,1
 100906c:	4185803a 	cmpltu	r2,r8,r6
 1009070:	39d3883a 	add	r9,r7,r7
 1009074:	28c6b03a 	or	r3,r5,r3
 1009078:	1245883a 	add	r2,r2,r9
 100907c:	1815883a 	mov	r10,r3
 1009080:	2017883a 	mov	r11,r4
 1009084:	400d883a 	mov	r6,r8
 1009088:	100f883a 	mov	r7,r2
 100908c:	fc801726 	beq	ra,r18,10090ec <__divdf3+0x1b8>
 1009090:	580a97fa 	slli	r5,r11,31
 1009094:	5006d07a 	srli	r3,r10,1
 1009098:	ffc00044 	addi	ra,ra,1
 100909c:	3c7ff136 	bltu	r7,r17,1009064 <__divdf3+0x130>
 10090a0:	3411c83a 	sub	r8,r6,r16
 10090a4:	3205803a 	cmpltu	r2,r6,r8
 10090a8:	3c53c83a 	sub	r9,r7,r17
 10090ac:	7298b03a 	or	r12,r14,r10
 10090b0:	7adab03a 	or	r13,r15,r11
 10090b4:	4885c83a 	sub	r2,r9,r2
 10090b8:	89ffe61e 	bne	r17,r7,1009054 <__divdf3+0x120>
 10090bc:	343fe936 	bltu	r6,r16,1009064 <__divdf3+0x130>
 10090c0:	003fe406 	br	1009054 <__divdf3+0x120>
 10090c4:	9809883a 	mov	r4,r19
 10090c8:	d9800415 	stw	r6,16(sp)
 10090cc:	1009ac00 	call	1009ac0 <__pack_d>
 10090d0:	dfc01217 	ldw	ra,72(sp)
 10090d4:	dcc01117 	ldw	r19,68(sp)
 10090d8:	dc801017 	ldw	r18,64(sp)
 10090dc:	dc400f17 	ldw	r17,60(sp)
 10090e0:	dc000e17 	ldw	r16,56(sp)
 10090e4:	dec01304 	addi	sp,sp,76
 10090e8:	f800283a 	ret
 10090ec:	00803fc4 	movi	r2,255
 10090f0:	7090703a 	and	r8,r14,r2
 10090f4:	00802004 	movi	r2,128
 10090f8:	0007883a 	mov	r3,zero
 10090fc:	0013883a 	mov	r9,zero
 1009100:	40800d26 	beq	r8,r2,1009138 <__divdf3+0x204>
 1009104:	dbc00815 	stw	r15,32(sp)
 1009108:	db800715 	stw	r14,28(sp)
 100910c:	003fab06 	br	1008fbc <__divdf3+0x88>
 1009110:	343fc92e 	bgeu	r6,r16,1009038 <__divdf3+0x104>
 1009114:	3185883a 	add	r2,r6,r6
 1009118:	1189803a 	cmpltu	r4,r2,r6
 100911c:	39c7883a 	add	r3,r7,r7
 1009120:	20c9883a 	add	r4,r4,r3
 1009124:	297fffc4 	addi	r5,r5,-1
 1009128:	100d883a 	mov	r6,r2
 100912c:	200f883a 	mov	r7,r4
 1009130:	d9400615 	stw	r5,24(sp)
 1009134:	003fc006 	br	1009038 <__divdf3+0x104>
 1009138:	483ff21e 	bne	r9,zero,1009104 <__divdf3+0x1d0>
 100913c:	01004004 	movi	r4,256
 1009140:	7104703a 	and	r2,r14,r4
 1009144:	10c4b03a 	or	r2,r2,r3
 1009148:	103fee1e 	bne	r2,zero,1009104 <__divdf3+0x1d0>
 100914c:	31c4b03a 	or	r2,r6,r7
 1009150:	103fec26 	beq	r2,zero,1009104 <__divdf3+0x1d0>
 1009154:	7205883a 	add	r2,r14,r8
 1009158:	1391803a 	cmpltu	r8,r2,r14
 100915c:	43d1883a 	add	r8,r8,r15
 1009160:	013fc004 	movi	r4,-256
 1009164:	111c703a 	and	r14,r2,r4
 1009168:	401f883a 	mov	r15,r8
 100916c:	003fe506 	br	1009104 <__divdf3+0x1d0>
 1009170:	8009883a 	mov	r4,r16
 1009174:	003f9206 	br	1008fc0 <__divdf3+0x8c>
 1009178:	9809883a 	mov	r4,r19
 100917c:	d8000715 	stw	zero,28(sp)
 1009180:	d8000815 	stw	zero,32(sp)
 1009184:	d8000615 	stw	zero,24(sp)
 1009188:	003f8d06 	br	1008fc0 <__divdf3+0x8c>

0100918c <__eqdf2>:
 100918c:	deffef04 	addi	sp,sp,-68
 1009190:	dc400f15 	stw	r17,60(sp)
 1009194:	dc400404 	addi	r17,sp,16
 1009198:	2005883a 	mov	r2,r4
 100919c:	2807883a 	mov	r3,r5
 10091a0:	dc000e15 	stw	r16,56(sp)
 10091a4:	d809883a 	mov	r4,sp
 10091a8:	880b883a 	mov	r5,r17
 10091ac:	dc000904 	addi	r16,sp,36
 10091b0:	d8c00115 	stw	r3,4(sp)
 10091b4:	d8800015 	stw	r2,0(sp)
 10091b8:	d9800215 	stw	r6,8(sp)
 10091bc:	dfc01015 	stw	ra,64(sp)
 10091c0:	d9c00315 	stw	r7,12(sp)
 10091c4:	1009dd40 	call	1009dd4 <__unpack_d>
 10091c8:	d9000204 	addi	r4,sp,8
 10091cc:	800b883a 	mov	r5,r16
 10091d0:	1009dd40 	call	1009dd4 <__unpack_d>
 10091d4:	d8800417 	ldw	r2,16(sp)
 10091d8:	00c00044 	movi	r3,1
 10091dc:	180d883a 	mov	r6,r3
 10091e0:	1880062e 	bgeu	r3,r2,10091fc <__eqdf2+0x70>
 10091e4:	d8800917 	ldw	r2,36(sp)
 10091e8:	8809883a 	mov	r4,r17
 10091ec:	800b883a 	mov	r5,r16
 10091f0:	1880022e 	bgeu	r3,r2,10091fc <__eqdf2+0x70>
 10091f4:	1009f0c0 	call	1009f0c <__fpcmp_parts_d>
 10091f8:	100d883a 	mov	r6,r2
 10091fc:	3005883a 	mov	r2,r6
 1009200:	dfc01017 	ldw	ra,64(sp)
 1009204:	dc400f17 	ldw	r17,60(sp)
 1009208:	dc000e17 	ldw	r16,56(sp)
 100920c:	dec01104 	addi	sp,sp,68
 1009210:	f800283a 	ret

01009214 <__nedf2>:
 1009214:	deffef04 	addi	sp,sp,-68
 1009218:	dc400f15 	stw	r17,60(sp)
 100921c:	dc400404 	addi	r17,sp,16
 1009220:	2005883a 	mov	r2,r4
 1009224:	2807883a 	mov	r3,r5
 1009228:	dc000e15 	stw	r16,56(sp)
 100922c:	d809883a 	mov	r4,sp
 1009230:	880b883a 	mov	r5,r17
 1009234:	dc000904 	addi	r16,sp,36
 1009238:	d8c00115 	stw	r3,4(sp)
 100923c:	d8800015 	stw	r2,0(sp)
 1009240:	d9800215 	stw	r6,8(sp)
 1009244:	dfc01015 	stw	ra,64(sp)
 1009248:	d9c00315 	stw	r7,12(sp)
 100924c:	1009dd40 	call	1009dd4 <__unpack_d>
 1009250:	d9000204 	addi	r4,sp,8
 1009254:	800b883a 	mov	r5,r16
 1009258:	1009dd40 	call	1009dd4 <__unpack_d>
 100925c:	d8800417 	ldw	r2,16(sp)
 1009260:	00c00044 	movi	r3,1
 1009264:	180d883a 	mov	r6,r3
 1009268:	1880062e 	bgeu	r3,r2,1009284 <__nedf2+0x70>
 100926c:	d8800917 	ldw	r2,36(sp)
 1009270:	8809883a 	mov	r4,r17
 1009274:	800b883a 	mov	r5,r16
 1009278:	1880022e 	bgeu	r3,r2,1009284 <__nedf2+0x70>
 100927c:	1009f0c0 	call	1009f0c <__fpcmp_parts_d>
 1009280:	100d883a 	mov	r6,r2
 1009284:	3005883a 	mov	r2,r6
 1009288:	dfc01017 	ldw	ra,64(sp)
 100928c:	dc400f17 	ldw	r17,60(sp)
 1009290:	dc000e17 	ldw	r16,56(sp)
 1009294:	dec01104 	addi	sp,sp,68
 1009298:	f800283a 	ret

0100929c <__gtdf2>:
 100929c:	deffef04 	addi	sp,sp,-68
 10092a0:	dc400f15 	stw	r17,60(sp)
 10092a4:	dc400404 	addi	r17,sp,16
 10092a8:	2005883a 	mov	r2,r4
 10092ac:	2807883a 	mov	r3,r5
 10092b0:	dc000e15 	stw	r16,56(sp)
 10092b4:	d809883a 	mov	r4,sp
 10092b8:	880b883a 	mov	r5,r17
 10092bc:	dc000904 	addi	r16,sp,36
 10092c0:	d8c00115 	stw	r3,4(sp)
 10092c4:	d8800015 	stw	r2,0(sp)
 10092c8:	d9800215 	stw	r6,8(sp)
 10092cc:	dfc01015 	stw	ra,64(sp)
 10092d0:	d9c00315 	stw	r7,12(sp)
 10092d4:	1009dd40 	call	1009dd4 <__unpack_d>
 10092d8:	d9000204 	addi	r4,sp,8
 10092dc:	800b883a 	mov	r5,r16
 10092e0:	1009dd40 	call	1009dd4 <__unpack_d>
 10092e4:	d8800417 	ldw	r2,16(sp)
 10092e8:	00c00044 	movi	r3,1
 10092ec:	01bfffc4 	movi	r6,-1
 10092f0:	1880062e 	bgeu	r3,r2,100930c <__gtdf2+0x70>
 10092f4:	d8800917 	ldw	r2,36(sp)
 10092f8:	8809883a 	mov	r4,r17
 10092fc:	800b883a 	mov	r5,r16
 1009300:	1880022e 	bgeu	r3,r2,100930c <__gtdf2+0x70>
 1009304:	1009f0c0 	call	1009f0c <__fpcmp_parts_d>
 1009308:	100d883a 	mov	r6,r2
 100930c:	3005883a 	mov	r2,r6
 1009310:	dfc01017 	ldw	ra,64(sp)
 1009314:	dc400f17 	ldw	r17,60(sp)
 1009318:	dc000e17 	ldw	r16,56(sp)
 100931c:	dec01104 	addi	sp,sp,68
 1009320:	f800283a 	ret

01009324 <__gedf2>:
 1009324:	deffef04 	addi	sp,sp,-68
 1009328:	dc400f15 	stw	r17,60(sp)
 100932c:	dc400404 	addi	r17,sp,16
 1009330:	2005883a 	mov	r2,r4
 1009334:	2807883a 	mov	r3,r5
 1009338:	dc000e15 	stw	r16,56(sp)
 100933c:	d809883a 	mov	r4,sp
 1009340:	880b883a 	mov	r5,r17
 1009344:	dc000904 	addi	r16,sp,36
 1009348:	d8c00115 	stw	r3,4(sp)
 100934c:	d8800015 	stw	r2,0(sp)
 1009350:	d9800215 	stw	r6,8(sp)
 1009354:	dfc01015 	stw	ra,64(sp)
 1009358:	d9c00315 	stw	r7,12(sp)
 100935c:	1009dd40 	call	1009dd4 <__unpack_d>
 1009360:	d9000204 	addi	r4,sp,8
 1009364:	800b883a 	mov	r5,r16
 1009368:	1009dd40 	call	1009dd4 <__unpack_d>
 100936c:	d8800417 	ldw	r2,16(sp)
 1009370:	00c00044 	movi	r3,1
 1009374:	01bfffc4 	movi	r6,-1
 1009378:	1880062e 	bgeu	r3,r2,1009394 <__gedf2+0x70>
 100937c:	d8800917 	ldw	r2,36(sp)
 1009380:	8809883a 	mov	r4,r17
 1009384:	800b883a 	mov	r5,r16
 1009388:	1880022e 	bgeu	r3,r2,1009394 <__gedf2+0x70>
 100938c:	1009f0c0 	call	1009f0c <__fpcmp_parts_d>
 1009390:	100d883a 	mov	r6,r2
 1009394:	3005883a 	mov	r2,r6
 1009398:	dfc01017 	ldw	ra,64(sp)
 100939c:	dc400f17 	ldw	r17,60(sp)
 10093a0:	dc000e17 	ldw	r16,56(sp)
 10093a4:	dec01104 	addi	sp,sp,68
 10093a8:	f800283a 	ret

010093ac <__ltdf2>:
 10093ac:	deffef04 	addi	sp,sp,-68
 10093b0:	dc400f15 	stw	r17,60(sp)
 10093b4:	dc400404 	addi	r17,sp,16
 10093b8:	2005883a 	mov	r2,r4
 10093bc:	2807883a 	mov	r3,r5
 10093c0:	dc000e15 	stw	r16,56(sp)
 10093c4:	d809883a 	mov	r4,sp
 10093c8:	880b883a 	mov	r5,r17
 10093cc:	dc000904 	addi	r16,sp,36
 10093d0:	d8c00115 	stw	r3,4(sp)
 10093d4:	d8800015 	stw	r2,0(sp)
 10093d8:	d9800215 	stw	r6,8(sp)
 10093dc:	dfc01015 	stw	ra,64(sp)
 10093e0:	d9c00315 	stw	r7,12(sp)
 10093e4:	1009dd40 	call	1009dd4 <__unpack_d>
 10093e8:	d9000204 	addi	r4,sp,8
 10093ec:	800b883a 	mov	r5,r16
 10093f0:	1009dd40 	call	1009dd4 <__unpack_d>
 10093f4:	d8800417 	ldw	r2,16(sp)
 10093f8:	00c00044 	movi	r3,1
 10093fc:	180d883a 	mov	r6,r3
 1009400:	1880062e 	bgeu	r3,r2,100941c <__ltdf2+0x70>
 1009404:	d8800917 	ldw	r2,36(sp)
 1009408:	8809883a 	mov	r4,r17
 100940c:	800b883a 	mov	r5,r16
 1009410:	1880022e 	bgeu	r3,r2,100941c <__ltdf2+0x70>
 1009414:	1009f0c0 	call	1009f0c <__fpcmp_parts_d>
 1009418:	100d883a 	mov	r6,r2
 100941c:	3005883a 	mov	r2,r6
 1009420:	dfc01017 	ldw	ra,64(sp)
 1009424:	dc400f17 	ldw	r17,60(sp)
 1009428:	dc000e17 	ldw	r16,56(sp)
 100942c:	dec01104 	addi	sp,sp,68
 1009430:	f800283a 	ret

01009434 <__floatsidf>:
 1009434:	2006d7fa 	srli	r3,r4,31
 1009438:	defff604 	addi	sp,sp,-40
 100943c:	008000c4 	movi	r2,3
 1009440:	dfc00915 	stw	ra,36(sp)
 1009444:	dcc00815 	stw	r19,32(sp)
 1009448:	dc800715 	stw	r18,28(sp)
 100944c:	dc400615 	stw	r17,24(sp)
 1009450:	dc000515 	stw	r16,20(sp)
 1009454:	d8800015 	stw	r2,0(sp)
 1009458:	d8c00115 	stw	r3,4(sp)
 100945c:	20000f1e 	bne	r4,zero,100949c <__floatsidf+0x68>
 1009460:	00800084 	movi	r2,2
 1009464:	d8800015 	stw	r2,0(sp)
 1009468:	d809883a 	mov	r4,sp
 100946c:	1009ac00 	call	1009ac0 <__pack_d>
 1009470:	1009883a 	mov	r4,r2
 1009474:	180b883a 	mov	r5,r3
 1009478:	2005883a 	mov	r2,r4
 100947c:	2807883a 	mov	r3,r5
 1009480:	dfc00917 	ldw	ra,36(sp)
 1009484:	dcc00817 	ldw	r19,32(sp)
 1009488:	dc800717 	ldw	r18,28(sp)
 100948c:	dc400617 	ldw	r17,24(sp)
 1009490:	dc000517 	ldw	r16,20(sp)
 1009494:	dec00a04 	addi	sp,sp,40
 1009498:	f800283a 	ret
 100949c:	00800f04 	movi	r2,60
 10094a0:	1807003a 	cmpeq	r3,r3,zero
 10094a4:	d8800215 	stw	r2,8(sp)
 10094a8:	18001126 	beq	r3,zero,10094f0 <__floatsidf+0xbc>
 10094ac:	0027883a 	mov	r19,zero
 10094b0:	2025883a 	mov	r18,r4
 10094b4:	d9000315 	stw	r4,12(sp)
 10094b8:	dcc00415 	stw	r19,16(sp)
 10094bc:	1009a400 	call	1009a40 <__clzsi2>
 10094c0:	11000744 	addi	r4,r2,29
 10094c4:	013fe80e 	bge	zero,r4,1009468 <__floatsidf+0x34>
 10094c8:	10bfff44 	addi	r2,r2,-3
 10094cc:	10000c16 	blt	r2,zero,1009500 <__floatsidf+0xcc>
 10094d0:	90a2983a 	sll	r17,r18,r2
 10094d4:	0021883a 	mov	r16,zero
 10094d8:	d8800217 	ldw	r2,8(sp)
 10094dc:	dc400415 	stw	r17,16(sp)
 10094e0:	dc000315 	stw	r16,12(sp)
 10094e4:	1105c83a 	sub	r2,r2,r4
 10094e8:	d8800215 	stw	r2,8(sp)
 10094ec:	003fde06 	br	1009468 <__floatsidf+0x34>
 10094f0:	00a00034 	movhi	r2,32768
 10094f4:	20800a26 	beq	r4,r2,1009520 <__floatsidf+0xec>
 10094f8:	0109c83a 	sub	r4,zero,r4
 10094fc:	003feb06 	br	10094ac <__floatsidf+0x78>
 1009500:	9006d07a 	srli	r3,r18,1
 1009504:	008007c4 	movi	r2,31
 1009508:	1105c83a 	sub	r2,r2,r4
 100950c:	1886d83a 	srl	r3,r3,r2
 1009510:	9922983a 	sll	r17,r19,r4
 1009514:	9120983a 	sll	r16,r18,r4
 1009518:	1c62b03a 	or	r17,r3,r17
 100951c:	003fee06 	br	10094d8 <__floatsidf+0xa4>
 1009520:	0009883a 	mov	r4,zero
 1009524:	01707834 	movhi	r5,49632
 1009528:	003fd306 	br	1009478 <__floatsidf+0x44>

0100952c <__fixdfsi>:
 100952c:	defff804 	addi	sp,sp,-32
 1009530:	2005883a 	mov	r2,r4
 1009534:	2807883a 	mov	r3,r5
 1009538:	d809883a 	mov	r4,sp
 100953c:	d9400204 	addi	r5,sp,8
 1009540:	d8c00115 	stw	r3,4(sp)
 1009544:	d8800015 	stw	r2,0(sp)
 1009548:	dfc00715 	stw	ra,28(sp)
 100954c:	1009dd40 	call	1009dd4 <__unpack_d>
 1009550:	d8c00217 	ldw	r3,8(sp)
 1009554:	00800084 	movi	r2,2
 1009558:	1880051e 	bne	r3,r2,1009570 <__fixdfsi+0x44>
 100955c:	0007883a 	mov	r3,zero
 1009560:	1805883a 	mov	r2,r3
 1009564:	dfc00717 	ldw	ra,28(sp)
 1009568:	dec00804 	addi	sp,sp,32
 100956c:	f800283a 	ret
 1009570:	00800044 	movi	r2,1
 1009574:	10fff92e 	bgeu	r2,r3,100955c <__fixdfsi+0x30>
 1009578:	00800104 	movi	r2,4
 100957c:	18800426 	beq	r3,r2,1009590 <__fixdfsi+0x64>
 1009580:	d8c00417 	ldw	r3,16(sp)
 1009584:	183ff516 	blt	r3,zero,100955c <__fixdfsi+0x30>
 1009588:	00800784 	movi	r2,30
 100958c:	10c0080e 	bge	r2,r3,10095b0 <__fixdfsi+0x84>
 1009590:	d8800317 	ldw	r2,12(sp)
 1009594:	1000121e 	bne	r2,zero,10095e0 <__fixdfsi+0xb4>
 1009598:	00e00034 	movhi	r3,32768
 100959c:	18ffffc4 	addi	r3,r3,-1
 10095a0:	1805883a 	mov	r2,r3
 10095a4:	dfc00717 	ldw	ra,28(sp)
 10095a8:	dec00804 	addi	sp,sp,32
 10095ac:	f800283a 	ret
 10095b0:	00800f04 	movi	r2,60
 10095b4:	10d1c83a 	sub	r8,r2,r3
 10095b8:	40bff804 	addi	r2,r8,-32
 10095bc:	d9800517 	ldw	r6,20(sp)
 10095c0:	d9c00617 	ldw	r7,24(sp)
 10095c4:	10000816 	blt	r2,zero,10095e8 <__fixdfsi+0xbc>
 10095c8:	3888d83a 	srl	r4,r7,r2
 10095cc:	d8800317 	ldw	r2,12(sp)
 10095d0:	2007883a 	mov	r3,r4
 10095d4:	103fe226 	beq	r2,zero,1009560 <__fixdfsi+0x34>
 10095d8:	0107c83a 	sub	r3,zero,r4
 10095dc:	003fe006 	br	1009560 <__fixdfsi+0x34>
 10095e0:	00e00034 	movhi	r3,32768
 10095e4:	003fde06 	br	1009560 <__fixdfsi+0x34>
 10095e8:	39c7883a 	add	r3,r7,r7
 10095ec:	008007c4 	movi	r2,31
 10095f0:	1205c83a 	sub	r2,r2,r8
 10095f4:	1886983a 	sll	r3,r3,r2
 10095f8:	3208d83a 	srl	r4,r6,r8
 10095fc:	1908b03a 	or	r4,r3,r4
 1009600:	003ff206 	br	10095cc <__fixdfsi+0xa0>

01009604 <__floatunsidf>:
 1009604:	defff204 	addi	sp,sp,-56
 1009608:	dfc00d15 	stw	ra,52(sp)
 100960c:	ddc00c15 	stw	r23,48(sp)
 1009610:	dd800b15 	stw	r22,44(sp)
 1009614:	dd400a15 	stw	r21,40(sp)
 1009618:	dd000915 	stw	r20,36(sp)
 100961c:	dcc00815 	stw	r19,32(sp)
 1009620:	dc800715 	stw	r18,28(sp)
 1009624:	dc400615 	stw	r17,24(sp)
 1009628:	dc000515 	stw	r16,20(sp)
 100962c:	d8000115 	stw	zero,4(sp)
 1009630:	20000f1e 	bne	r4,zero,1009670 <__floatunsidf+0x6c>
 1009634:	00800084 	movi	r2,2
 1009638:	d8800015 	stw	r2,0(sp)
 100963c:	d809883a 	mov	r4,sp
 1009640:	1009ac00 	call	1009ac0 <__pack_d>
 1009644:	dfc00d17 	ldw	ra,52(sp)
 1009648:	ddc00c17 	ldw	r23,48(sp)
 100964c:	dd800b17 	ldw	r22,44(sp)
 1009650:	dd400a17 	ldw	r21,40(sp)
 1009654:	dd000917 	ldw	r20,36(sp)
 1009658:	dcc00817 	ldw	r19,32(sp)
 100965c:	dc800717 	ldw	r18,28(sp)
 1009660:	dc400617 	ldw	r17,24(sp)
 1009664:	dc000517 	ldw	r16,20(sp)
 1009668:	dec00e04 	addi	sp,sp,56
 100966c:	f800283a 	ret
 1009670:	008000c4 	movi	r2,3
 1009674:	00c00f04 	movi	r3,60
 1009678:	002f883a 	mov	r23,zero
 100967c:	202d883a 	mov	r22,r4
 1009680:	d8800015 	stw	r2,0(sp)
 1009684:	d8c00215 	stw	r3,8(sp)
 1009688:	d9000315 	stw	r4,12(sp)
 100968c:	ddc00415 	stw	r23,16(sp)
 1009690:	1009a400 	call	1009a40 <__clzsi2>
 1009694:	12400744 	addi	r9,r2,29
 1009698:	48000b16 	blt	r9,zero,10096c8 <__floatunsidf+0xc4>
 100969c:	483fe726 	beq	r9,zero,100963c <__floatunsidf+0x38>
 10096a0:	10bfff44 	addi	r2,r2,-3
 10096a4:	10002e16 	blt	r2,zero,1009760 <__floatunsidf+0x15c>
 10096a8:	b0a2983a 	sll	r17,r22,r2
 10096ac:	0021883a 	mov	r16,zero
 10096b0:	d8800217 	ldw	r2,8(sp)
 10096b4:	dc400415 	stw	r17,16(sp)
 10096b8:	dc000315 	stw	r16,12(sp)
 10096bc:	1245c83a 	sub	r2,r2,r9
 10096c0:	d8800215 	stw	r2,8(sp)
 10096c4:	003fdd06 	br	100963c <__floatunsidf+0x38>
 10096c8:	0255c83a 	sub	r10,zero,r9
 10096cc:	51bff804 	addi	r6,r10,-32
 10096d0:	30001b16 	blt	r6,zero,1009740 <__floatunsidf+0x13c>
 10096d4:	b9a8d83a 	srl	r20,r23,r6
 10096d8:	002b883a 	mov	r21,zero
 10096dc:	000f883a 	mov	r7,zero
 10096e0:	01000044 	movi	r4,1
 10096e4:	0011883a 	mov	r8,zero
 10096e8:	30002516 	blt	r6,zero,1009780 <__floatunsidf+0x17c>
 10096ec:	21a6983a 	sll	r19,r4,r6
 10096f0:	0025883a 	mov	r18,zero
 10096f4:	00bfffc4 	movi	r2,-1
 10096f8:	9089883a 	add	r4,r18,r2
 10096fc:	988b883a 	add	r5,r19,r2
 1009700:	248d803a 	cmpltu	r6,r4,r18
 1009704:	314b883a 	add	r5,r6,r5
 1009708:	b104703a 	and	r2,r22,r4
 100970c:	b946703a 	and	r3,r23,r5
 1009710:	10c4b03a 	or	r2,r2,r3
 1009714:	10000226 	beq	r2,zero,1009720 <__floatunsidf+0x11c>
 1009718:	01c00044 	movi	r7,1
 100971c:	0011883a 	mov	r8,zero
 1009720:	d9000217 	ldw	r4,8(sp)
 1009724:	a1c4b03a 	or	r2,r20,r7
 1009728:	aa06b03a 	or	r3,r21,r8
 100972c:	2249c83a 	sub	r4,r4,r9
 1009730:	d8c00415 	stw	r3,16(sp)
 1009734:	d9000215 	stw	r4,8(sp)
 1009738:	d8800315 	stw	r2,12(sp)
 100973c:	003fbf06 	br	100963c <__floatunsidf+0x38>
 1009740:	bdc7883a 	add	r3,r23,r23
 1009744:	008007c4 	movi	r2,31
 1009748:	1285c83a 	sub	r2,r2,r10
 100974c:	1886983a 	sll	r3,r3,r2
 1009750:	b2a8d83a 	srl	r20,r22,r10
 1009754:	baaad83a 	srl	r21,r23,r10
 1009758:	1d28b03a 	or	r20,r3,r20
 100975c:	003fdf06 	br	10096dc <__floatunsidf+0xd8>
 1009760:	b006d07a 	srli	r3,r22,1
 1009764:	008007c4 	movi	r2,31
 1009768:	1245c83a 	sub	r2,r2,r9
 100976c:	1886d83a 	srl	r3,r3,r2
 1009770:	ba62983a 	sll	r17,r23,r9
 1009774:	b260983a 	sll	r16,r22,r9
 1009778:	1c62b03a 	or	r17,r3,r17
 100977c:	003fcc06 	br	10096b0 <__floatunsidf+0xac>
 1009780:	2006d07a 	srli	r3,r4,1
 1009784:	008007c4 	movi	r2,31
 1009788:	1285c83a 	sub	r2,r2,r10
 100978c:	18a6d83a 	srl	r19,r3,r2
 1009790:	22a4983a 	sll	r18,r4,r10
 1009794:	003fd706 	br	10096f4 <__floatunsidf+0xf0>

01009798 <udivmodsi4>:
 1009798:	29001b2e 	bgeu	r5,r4,1009808 <udivmodsi4+0x70>
 100979c:	28001a16 	blt	r5,zero,1009808 <udivmodsi4+0x70>
 10097a0:	00800044 	movi	r2,1
 10097a4:	0007883a 	mov	r3,zero
 10097a8:	01c007c4 	movi	r7,31
 10097ac:	00000306 	br	10097bc <udivmodsi4+0x24>
 10097b0:	19c01326 	beq	r3,r7,1009800 <udivmodsi4+0x68>
 10097b4:	18c00044 	addi	r3,r3,1
 10097b8:	28000416 	blt	r5,zero,10097cc <udivmodsi4+0x34>
 10097bc:	294b883a 	add	r5,r5,r5
 10097c0:	1085883a 	add	r2,r2,r2
 10097c4:	293ffa36 	bltu	r5,r4,10097b0 <udivmodsi4+0x18>
 10097c8:	10000d26 	beq	r2,zero,1009800 <udivmodsi4+0x68>
 10097cc:	0007883a 	mov	r3,zero
 10097d0:	21400236 	bltu	r4,r5,10097dc <udivmodsi4+0x44>
 10097d4:	2149c83a 	sub	r4,r4,r5
 10097d8:	1886b03a 	or	r3,r3,r2
 10097dc:	1004d07a 	srli	r2,r2,1
 10097e0:	280ad07a 	srli	r5,r5,1
 10097e4:	103ffa1e 	bne	r2,zero,10097d0 <udivmodsi4+0x38>
 10097e8:	30000226 	beq	r6,zero,10097f4 <udivmodsi4+0x5c>
 10097ec:	2005883a 	mov	r2,r4
 10097f0:	f800283a 	ret
 10097f4:	1809883a 	mov	r4,r3
 10097f8:	2005883a 	mov	r2,r4
 10097fc:	f800283a 	ret
 1009800:	0007883a 	mov	r3,zero
 1009804:	003ff806 	br	10097e8 <udivmodsi4+0x50>
 1009808:	00800044 	movi	r2,1
 100980c:	0007883a 	mov	r3,zero
 1009810:	003fef06 	br	10097d0 <udivmodsi4+0x38>

01009814 <__divsi3>:
 1009814:	defffe04 	addi	sp,sp,-8
 1009818:	dc000015 	stw	r16,0(sp)
 100981c:	dfc00115 	stw	ra,4(sp)
 1009820:	0021883a 	mov	r16,zero
 1009824:	20000c16 	blt	r4,zero,1009858 <__divsi3+0x44>
 1009828:	000d883a 	mov	r6,zero
 100982c:	28000e16 	blt	r5,zero,1009868 <__divsi3+0x54>
 1009830:	10097980 	call	1009798 <udivmodsi4>
 1009834:	1007883a 	mov	r3,r2
 1009838:	8005003a 	cmpeq	r2,r16,zero
 100983c:	1000011e 	bne	r2,zero,1009844 <__divsi3+0x30>
 1009840:	00c7c83a 	sub	r3,zero,r3
 1009844:	1805883a 	mov	r2,r3
 1009848:	dfc00117 	ldw	ra,4(sp)
 100984c:	dc000017 	ldw	r16,0(sp)
 1009850:	dec00204 	addi	sp,sp,8
 1009854:	f800283a 	ret
 1009858:	0109c83a 	sub	r4,zero,r4
 100985c:	04000044 	movi	r16,1
 1009860:	000d883a 	mov	r6,zero
 1009864:	283ff20e 	bge	r5,zero,1009830 <__divsi3+0x1c>
 1009868:	014bc83a 	sub	r5,zero,r5
 100986c:	8021003a 	cmpeq	r16,r16,zero
 1009870:	003fef06 	br	1009830 <__divsi3+0x1c>

01009874 <__modsi3>:
 1009874:	deffff04 	addi	sp,sp,-4
 1009878:	dfc00015 	stw	ra,0(sp)
 100987c:	01800044 	movi	r6,1
 1009880:	2807883a 	mov	r3,r5
 1009884:	20000416 	blt	r4,zero,1009898 <__modsi3+0x24>
 1009888:	28000c16 	blt	r5,zero,10098bc <__modsi3+0x48>
 100988c:	dfc00017 	ldw	ra,0(sp)
 1009890:	dec00104 	addi	sp,sp,4
 1009894:	10097981 	jmpi	1009798 <udivmodsi4>
 1009898:	0109c83a 	sub	r4,zero,r4
 100989c:	28000b16 	blt	r5,zero,10098cc <__modsi3+0x58>
 10098a0:	180b883a 	mov	r5,r3
 10098a4:	01800044 	movi	r6,1
 10098a8:	10097980 	call	1009798 <udivmodsi4>
 10098ac:	0085c83a 	sub	r2,zero,r2
 10098b0:	dfc00017 	ldw	ra,0(sp)
 10098b4:	dec00104 	addi	sp,sp,4
 10098b8:	f800283a 	ret
 10098bc:	014bc83a 	sub	r5,zero,r5
 10098c0:	dfc00017 	ldw	ra,0(sp)
 10098c4:	dec00104 	addi	sp,sp,4
 10098c8:	10097981 	jmpi	1009798 <udivmodsi4>
 10098cc:	0147c83a 	sub	r3,zero,r5
 10098d0:	003ff306 	br	10098a0 <__modsi3+0x2c>

010098d4 <__udivsi3>:
 10098d4:	000d883a 	mov	r6,zero
 10098d8:	10097981 	jmpi	1009798 <udivmodsi4>

010098dc <__umodsi3>:
 10098dc:	01800044 	movi	r6,1
 10098e0:	10097981 	jmpi	1009798 <udivmodsi4>

010098e4 <__mulsi3>:
 10098e4:	20000a26 	beq	r4,zero,1009910 <__mulsi3+0x2c>
 10098e8:	0007883a 	mov	r3,zero
 10098ec:	2080004c 	andi	r2,r4,1
 10098f0:	1005003a 	cmpeq	r2,r2,zero
 10098f4:	2008d07a 	srli	r4,r4,1
 10098f8:	1000011e 	bne	r2,zero,1009900 <__mulsi3+0x1c>
 10098fc:	1947883a 	add	r3,r3,r5
 1009900:	294b883a 	add	r5,r5,r5
 1009904:	203ff91e 	bne	r4,zero,10098ec <__mulsi3+0x8>
 1009908:	1805883a 	mov	r2,r3
 100990c:	f800283a 	ret
 1009910:	0007883a 	mov	r3,zero
 1009914:	1805883a 	mov	r2,r3
 1009918:	f800283a 	ret

0100991c <__muldi3>:
 100991c:	defff204 	addi	sp,sp,-56
 1009920:	df000c15 	stw	fp,48(sp)
 1009924:	3038d43a 	srli	fp,r6,16
 1009928:	dd000815 	stw	r20,32(sp)
 100992c:	dc400515 	stw	r17,20(sp)
 1009930:	2028d43a 	srli	r20,r4,16
 1009934:	247fffcc 	andi	r17,r4,65535
 1009938:	dc000415 	stw	r16,16(sp)
 100993c:	343fffcc 	andi	r16,r6,65535
 1009940:	dcc00715 	stw	r19,28(sp)
 1009944:	d9000015 	stw	r4,0(sp)
 1009948:	2827883a 	mov	r19,r5
 100994c:	8809883a 	mov	r4,r17
 1009950:	d9400115 	stw	r5,4(sp)
 1009954:	800b883a 	mov	r5,r16
 1009958:	d9800215 	stw	r6,8(sp)
 100995c:	dfc00d15 	stw	ra,52(sp)
 1009960:	d9c00315 	stw	r7,12(sp)
 1009964:	dd800a15 	stw	r22,40(sp)
 1009968:	dd400915 	stw	r21,36(sp)
 100996c:	302d883a 	mov	r22,r6
 1009970:	ddc00b15 	stw	r23,44(sp)
 1009974:	dc800615 	stw	r18,24(sp)
 1009978:	10098e40 	call	10098e4 <__mulsi3>
 100997c:	8809883a 	mov	r4,r17
 1009980:	e00b883a 	mov	r5,fp
 1009984:	102b883a 	mov	r21,r2
 1009988:	10098e40 	call	10098e4 <__mulsi3>
 100998c:	800b883a 	mov	r5,r16
 1009990:	a009883a 	mov	r4,r20
 1009994:	1023883a 	mov	r17,r2
 1009998:	10098e40 	call	10098e4 <__mulsi3>
 100999c:	a009883a 	mov	r4,r20
 10099a0:	e00b883a 	mov	r5,fp
 10099a4:	1021883a 	mov	r16,r2
 10099a8:	10098e40 	call	10098e4 <__mulsi3>
 10099ac:	a8ffffcc 	andi	r3,r21,65535
 10099b0:	a82ad43a 	srli	r21,r21,16
 10099b4:	8c23883a 	add	r17,r17,r16
 10099b8:	1011883a 	mov	r8,r2
 10099bc:	ac6b883a 	add	r21,r21,r17
 10099c0:	a804943a 	slli	r2,r21,16
 10099c4:	b009883a 	mov	r4,r22
 10099c8:	980b883a 	mov	r5,r19
 10099cc:	10c7883a 	add	r3,r2,r3
 10099d0:	a812d43a 	srli	r9,r21,16
 10099d4:	180d883a 	mov	r6,r3
 10099d8:	ac00022e 	bgeu	r21,r16,10099e4 <__muldi3+0xc8>
 10099dc:	00800074 	movhi	r2,1
 10099e0:	4091883a 	add	r8,r8,r2
 10099e4:	4267883a 	add	r19,r8,r9
 10099e8:	302d883a 	mov	r22,r6
 10099ec:	10098e40 	call	10098e4 <__mulsi3>
 10099f0:	d9400317 	ldw	r5,12(sp)
 10099f4:	d9000017 	ldw	r4,0(sp)
 10099f8:	1023883a 	mov	r17,r2
 10099fc:	10098e40 	call	10098e4 <__mulsi3>
 1009a00:	14cb883a 	add	r5,r2,r19
 1009a04:	894b883a 	add	r5,r17,r5
 1009a08:	b005883a 	mov	r2,r22
 1009a0c:	2807883a 	mov	r3,r5
 1009a10:	dfc00d17 	ldw	ra,52(sp)
 1009a14:	df000c17 	ldw	fp,48(sp)
 1009a18:	ddc00b17 	ldw	r23,44(sp)
 1009a1c:	dd800a17 	ldw	r22,40(sp)
 1009a20:	dd400917 	ldw	r21,36(sp)
 1009a24:	dd000817 	ldw	r20,32(sp)
 1009a28:	dcc00717 	ldw	r19,28(sp)
 1009a2c:	dc800617 	ldw	r18,24(sp)
 1009a30:	dc400517 	ldw	r17,20(sp)
 1009a34:	dc000417 	ldw	r16,16(sp)
 1009a38:	dec00e04 	addi	sp,sp,56
 1009a3c:	f800283a 	ret

01009a40 <__clzsi2>:
 1009a40:	00bfffd4 	movui	r2,65535
 1009a44:	11000e36 	bltu	r2,r4,1009a80 <__clzsi2+0x40>
 1009a48:	00803fc4 	movi	r2,255
 1009a4c:	01400204 	movi	r5,8
 1009a50:	0007883a 	mov	r3,zero
 1009a54:	11001036 	bltu	r2,r4,1009a98 <__clzsi2+0x58>
 1009a58:	000b883a 	mov	r5,zero
 1009a5c:	20c6d83a 	srl	r3,r4,r3
 1009a60:	00804074 	movhi	r2,257
 1009a64:	10983f04 	addi	r2,r2,24828
 1009a68:	1887883a 	add	r3,r3,r2
 1009a6c:	18800003 	ldbu	r2,0(r3)
 1009a70:	00c00804 	movi	r3,32
 1009a74:	2885883a 	add	r2,r5,r2
 1009a78:	1885c83a 	sub	r2,r3,r2
 1009a7c:	f800283a 	ret
 1009a80:	01400404 	movi	r5,16
 1009a84:	00804034 	movhi	r2,256
 1009a88:	10bfffc4 	addi	r2,r2,-1
 1009a8c:	2807883a 	mov	r3,r5
 1009a90:	113ff22e 	bgeu	r2,r4,1009a5c <__clzsi2+0x1c>
 1009a94:	01400604 	movi	r5,24
 1009a98:	2807883a 	mov	r3,r5
 1009a9c:	20c6d83a 	srl	r3,r4,r3
 1009aa0:	00804074 	movhi	r2,257
 1009aa4:	10983f04 	addi	r2,r2,24828
 1009aa8:	1887883a 	add	r3,r3,r2
 1009aac:	18800003 	ldbu	r2,0(r3)
 1009ab0:	00c00804 	movi	r3,32
 1009ab4:	2885883a 	add	r2,r5,r2
 1009ab8:	1885c83a 	sub	r2,r3,r2
 1009abc:	f800283a 	ret

01009ac0 <__pack_d>:
 1009ac0:	20c00017 	ldw	r3,0(r4)
 1009ac4:	defffd04 	addi	sp,sp,-12
 1009ac8:	dc000015 	stw	r16,0(sp)
 1009acc:	dc800215 	stw	r18,8(sp)
 1009ad0:	dc400115 	stw	r17,4(sp)
 1009ad4:	00800044 	movi	r2,1
 1009ad8:	22000317 	ldw	r8,12(r4)
 1009adc:	001f883a 	mov	r15,zero
 1009ae0:	22400417 	ldw	r9,16(r4)
 1009ae4:	24000117 	ldw	r16,4(r4)
 1009ae8:	10c0552e 	bgeu	r2,r3,1009c40 <__pack_d+0x180>
 1009aec:	00800104 	movi	r2,4
 1009af0:	18804f26 	beq	r3,r2,1009c30 <__pack_d+0x170>
 1009af4:	00800084 	movi	r2,2
 1009af8:	18800226 	beq	r3,r2,1009b04 <__pack_d+0x44>
 1009afc:	4244b03a 	or	r2,r8,r9
 1009b00:	10001a1e 	bne	r2,zero,1009b6c <__pack_d+0xac>
 1009b04:	000d883a 	mov	r6,zero
 1009b08:	000f883a 	mov	r7,zero
 1009b0c:	0011883a 	mov	r8,zero
 1009b10:	00800434 	movhi	r2,16
 1009b14:	10bfffc4 	addi	r2,r2,-1
 1009b18:	301d883a 	mov	r14,r6
 1009b1c:	3884703a 	and	r2,r7,r2
 1009b20:	400a953a 	slli	r5,r8,20
 1009b24:	79bffc2c 	andhi	r6,r15,65520
 1009b28:	308cb03a 	or	r6,r6,r2
 1009b2c:	00e00434 	movhi	r3,32784
 1009b30:	18ffffc4 	addi	r3,r3,-1
 1009b34:	800497fa 	slli	r2,r16,31
 1009b38:	30c6703a 	and	r3,r6,r3
 1009b3c:	1946b03a 	or	r3,r3,r5
 1009b40:	01600034 	movhi	r5,32768
 1009b44:	297fffc4 	addi	r5,r5,-1
 1009b48:	194a703a 	and	r5,r3,r5
 1009b4c:	288ab03a 	or	r5,r5,r2
 1009b50:	2807883a 	mov	r3,r5
 1009b54:	7005883a 	mov	r2,r14
 1009b58:	dc800217 	ldw	r18,8(sp)
 1009b5c:	dc400117 	ldw	r17,4(sp)
 1009b60:	dc000017 	ldw	r16,0(sp)
 1009b64:	dec00304 	addi	sp,sp,12
 1009b68:	f800283a 	ret
 1009b6c:	21000217 	ldw	r4,8(r4)
 1009b70:	00bf0084 	movi	r2,-1022
 1009b74:	20803f16 	blt	r4,r2,1009c74 <__pack_d+0x1b4>
 1009b78:	0080ffc4 	movi	r2,1023
 1009b7c:	11002c16 	blt	r2,r4,1009c30 <__pack_d+0x170>
 1009b80:	00803fc4 	movi	r2,255
 1009b84:	408c703a 	and	r6,r8,r2
 1009b88:	00802004 	movi	r2,128
 1009b8c:	0007883a 	mov	r3,zero
 1009b90:	000f883a 	mov	r7,zero
 1009b94:	2280ffc4 	addi	r10,r4,1023
 1009b98:	30801e26 	beq	r6,r2,1009c14 <__pack_d+0x154>
 1009b9c:	00801fc4 	movi	r2,127
 1009ba0:	4089883a 	add	r4,r8,r2
 1009ba4:	220d803a 	cmpltu	r6,r4,r8
 1009ba8:	324d883a 	add	r6,r6,r9
 1009bac:	2011883a 	mov	r8,r4
 1009bb0:	3013883a 	mov	r9,r6
 1009bb4:	00880034 	movhi	r2,8192
 1009bb8:	10bfffc4 	addi	r2,r2,-1
 1009bbc:	12400d36 	bltu	r2,r9,1009bf4 <__pack_d+0x134>
 1009bc0:	4804963a 	slli	r2,r9,24
 1009bc4:	400cd23a 	srli	r6,r8,8
 1009bc8:	480ed23a 	srli	r7,r9,8
 1009bcc:	013fffc4 	movi	r4,-1
 1009bd0:	118cb03a 	or	r6,r2,r6
 1009bd4:	01400434 	movhi	r5,16
 1009bd8:	297fffc4 	addi	r5,r5,-1
 1009bdc:	3104703a 	and	r2,r6,r4
 1009be0:	3946703a 	and	r3,r7,r5
 1009be4:	5201ffcc 	andi	r8,r10,2047
 1009be8:	100d883a 	mov	r6,r2
 1009bec:	180f883a 	mov	r7,r3
 1009bf0:	003fc706 	br	1009b10 <__pack_d+0x50>
 1009bf4:	480897fa 	slli	r4,r9,31
 1009bf8:	4004d07a 	srli	r2,r8,1
 1009bfc:	4806d07a 	srli	r3,r9,1
 1009c00:	52800044 	addi	r10,r10,1
 1009c04:	2084b03a 	or	r2,r4,r2
 1009c08:	1011883a 	mov	r8,r2
 1009c0c:	1813883a 	mov	r9,r3
 1009c10:	003feb06 	br	1009bc0 <__pack_d+0x100>
 1009c14:	383fe11e 	bne	r7,zero,1009b9c <__pack_d+0xdc>
 1009c18:	01004004 	movi	r4,256
 1009c1c:	4104703a 	and	r2,r8,r4
 1009c20:	10c4b03a 	or	r2,r2,r3
 1009c24:	103fe326 	beq	r2,zero,1009bb4 <__pack_d+0xf4>
 1009c28:	3005883a 	mov	r2,r6
 1009c2c:	003fdc06 	br	1009ba0 <__pack_d+0xe0>
 1009c30:	000d883a 	mov	r6,zero
 1009c34:	000f883a 	mov	r7,zero
 1009c38:	0201ffc4 	movi	r8,2047
 1009c3c:	003fb406 	br	1009b10 <__pack_d+0x50>
 1009c40:	0005883a 	mov	r2,zero
 1009c44:	00c00234 	movhi	r3,8
 1009c48:	408cb03a 	or	r6,r8,r2
 1009c4c:	48ceb03a 	or	r7,r9,r3
 1009c50:	013fffc4 	movi	r4,-1
 1009c54:	01400434 	movhi	r5,16
 1009c58:	297fffc4 	addi	r5,r5,-1
 1009c5c:	3104703a 	and	r2,r6,r4
 1009c60:	3946703a 	and	r3,r7,r5
 1009c64:	100d883a 	mov	r6,r2
 1009c68:	180f883a 	mov	r7,r3
 1009c6c:	0201ffc4 	movi	r8,2047
 1009c70:	003fa706 	br	1009b10 <__pack_d+0x50>
 1009c74:	1109c83a 	sub	r4,r2,r4
 1009c78:	00800e04 	movi	r2,56
 1009c7c:	11004316 	blt	r2,r4,1009d8c <__pack_d+0x2cc>
 1009c80:	21fff804 	addi	r7,r4,-32
 1009c84:	38004516 	blt	r7,zero,1009d9c <__pack_d+0x2dc>
 1009c88:	49d8d83a 	srl	r12,r9,r7
 1009c8c:	001b883a 	mov	r13,zero
 1009c90:	0023883a 	mov	r17,zero
 1009c94:	01400044 	movi	r5,1
 1009c98:	0025883a 	mov	r18,zero
 1009c9c:	38004716 	blt	r7,zero,1009dbc <__pack_d+0x2fc>
 1009ca0:	29d6983a 	sll	r11,r5,r7
 1009ca4:	0015883a 	mov	r10,zero
 1009ca8:	00bfffc4 	movi	r2,-1
 1009cac:	5089883a 	add	r4,r10,r2
 1009cb0:	588b883a 	add	r5,r11,r2
 1009cb4:	228d803a 	cmpltu	r6,r4,r10
 1009cb8:	314b883a 	add	r5,r6,r5
 1009cbc:	4104703a 	and	r2,r8,r4
 1009cc0:	4946703a 	and	r3,r9,r5
 1009cc4:	10c4b03a 	or	r2,r2,r3
 1009cc8:	10000226 	beq	r2,zero,1009cd4 <__pack_d+0x214>
 1009ccc:	04400044 	movi	r17,1
 1009cd0:	0025883a 	mov	r18,zero
 1009cd4:	00803fc4 	movi	r2,255
 1009cd8:	644eb03a 	or	r7,r12,r17
 1009cdc:	3892703a 	and	r9,r7,r2
 1009ce0:	00802004 	movi	r2,128
 1009ce4:	6c90b03a 	or	r8,r13,r18
 1009ce8:	0015883a 	mov	r10,zero
 1009cec:	48801626 	beq	r9,r2,1009d48 <__pack_d+0x288>
 1009cf0:	01001fc4 	movi	r4,127
 1009cf4:	3905883a 	add	r2,r7,r4
 1009cf8:	11cd803a 	cmpltu	r6,r2,r7
 1009cfc:	320d883a 	add	r6,r6,r8
 1009d00:	100f883a 	mov	r7,r2
 1009d04:	00840034 	movhi	r2,4096
 1009d08:	10bfffc4 	addi	r2,r2,-1
 1009d0c:	3011883a 	mov	r8,r6
 1009d10:	0007883a 	mov	r3,zero
 1009d14:	11801b36 	bltu	r2,r6,1009d84 <__pack_d+0x2c4>
 1009d18:	4004963a 	slli	r2,r8,24
 1009d1c:	3808d23a 	srli	r4,r7,8
 1009d20:	400ad23a 	srli	r5,r8,8
 1009d24:	1813883a 	mov	r9,r3
 1009d28:	1108b03a 	or	r4,r2,r4
 1009d2c:	00bfffc4 	movi	r2,-1
 1009d30:	00c00434 	movhi	r3,16
 1009d34:	18ffffc4 	addi	r3,r3,-1
 1009d38:	208c703a 	and	r6,r4,r2
 1009d3c:	28ce703a 	and	r7,r5,r3
 1009d40:	4a01ffcc 	andi	r8,r9,2047
 1009d44:	003f7206 	br	1009b10 <__pack_d+0x50>
 1009d48:	503fe91e 	bne	r10,zero,1009cf0 <__pack_d+0x230>
 1009d4c:	01004004 	movi	r4,256
 1009d50:	3904703a 	and	r2,r7,r4
 1009d54:	0007883a 	mov	r3,zero
 1009d58:	10c4b03a 	or	r2,r2,r3
 1009d5c:	10000626 	beq	r2,zero,1009d78 <__pack_d+0x2b8>
 1009d60:	3a45883a 	add	r2,r7,r9
 1009d64:	11cd803a 	cmpltu	r6,r2,r7
 1009d68:	320d883a 	add	r6,r6,r8
 1009d6c:	100f883a 	mov	r7,r2
 1009d70:	3011883a 	mov	r8,r6
 1009d74:	0007883a 	mov	r3,zero
 1009d78:	00840034 	movhi	r2,4096
 1009d7c:	10bfffc4 	addi	r2,r2,-1
 1009d80:	123fe52e 	bgeu	r2,r8,1009d18 <__pack_d+0x258>
 1009d84:	00c00044 	movi	r3,1
 1009d88:	003fe306 	br	1009d18 <__pack_d+0x258>
 1009d8c:	0009883a 	mov	r4,zero
 1009d90:	0013883a 	mov	r9,zero
 1009d94:	000b883a 	mov	r5,zero
 1009d98:	003fe406 	br	1009d2c <__pack_d+0x26c>
 1009d9c:	4a47883a 	add	r3,r9,r9
 1009da0:	008007c4 	movi	r2,31
 1009da4:	1105c83a 	sub	r2,r2,r4
 1009da8:	1886983a 	sll	r3,r3,r2
 1009dac:	4118d83a 	srl	r12,r8,r4
 1009db0:	491ad83a 	srl	r13,r9,r4
 1009db4:	1b18b03a 	or	r12,r3,r12
 1009db8:	003fb506 	br	1009c90 <__pack_d+0x1d0>
 1009dbc:	2806d07a 	srli	r3,r5,1
 1009dc0:	008007c4 	movi	r2,31
 1009dc4:	1105c83a 	sub	r2,r2,r4
 1009dc8:	1896d83a 	srl	r11,r3,r2
 1009dcc:	2914983a 	sll	r10,r5,r4
 1009dd0:	003fb506 	br	1009ca8 <__pack_d+0x1e8>

01009dd4 <__unpack_d>:
 1009dd4:	20c00117 	ldw	r3,4(r4)
 1009dd8:	22400017 	ldw	r9,0(r4)
 1009ddc:	00800434 	movhi	r2,16
 1009de0:	10bfffc4 	addi	r2,r2,-1
 1009de4:	1808d53a 	srli	r4,r3,20
 1009de8:	180cd7fa 	srli	r6,r3,31
 1009dec:	1894703a 	and	r10,r3,r2
 1009df0:	2201ffcc 	andi	r8,r4,2047
 1009df4:	281b883a 	mov	r13,r5
 1009df8:	4817883a 	mov	r11,r9
 1009dfc:	29800115 	stw	r6,4(r5)
 1009e00:	5019883a 	mov	r12,r10
 1009e04:	40001e1e 	bne	r8,zero,1009e80 <__unpack_d+0xac>
 1009e08:	4a84b03a 	or	r2,r9,r10
 1009e0c:	10001926 	beq	r2,zero,1009e74 <__unpack_d+0xa0>
 1009e10:	4804d63a 	srli	r2,r9,24
 1009e14:	500c923a 	slli	r6,r10,8
 1009e18:	013f0084 	movi	r4,-1022
 1009e1c:	00c40034 	movhi	r3,4096
 1009e20:	18ffffc4 	addi	r3,r3,-1
 1009e24:	118cb03a 	or	r6,r2,r6
 1009e28:	008000c4 	movi	r2,3
 1009e2c:	480a923a 	slli	r5,r9,8
 1009e30:	68800015 	stw	r2,0(r13)
 1009e34:	69000215 	stw	r4,8(r13)
 1009e38:	19800b36 	bltu	r3,r6,1009e68 <__unpack_d+0x94>
 1009e3c:	200f883a 	mov	r7,r4
 1009e40:	1811883a 	mov	r8,r3
 1009e44:	2945883a 	add	r2,r5,r5
 1009e48:	1149803a 	cmpltu	r4,r2,r5
 1009e4c:	3187883a 	add	r3,r6,r6
 1009e50:	20c9883a 	add	r4,r4,r3
 1009e54:	100b883a 	mov	r5,r2
 1009e58:	200d883a 	mov	r6,r4
 1009e5c:	39ffffc4 	addi	r7,r7,-1
 1009e60:	413ff82e 	bgeu	r8,r4,1009e44 <__unpack_d+0x70>
 1009e64:	69c00215 	stw	r7,8(r13)
 1009e68:	69800415 	stw	r6,16(r13)
 1009e6c:	69400315 	stw	r5,12(r13)
 1009e70:	f800283a 	ret
 1009e74:	00800084 	movi	r2,2
 1009e78:	28800015 	stw	r2,0(r5)
 1009e7c:	f800283a 	ret
 1009e80:	0081ffc4 	movi	r2,2047
 1009e84:	40800f26 	beq	r8,r2,1009ec4 <__unpack_d+0xf0>
 1009e88:	480cd63a 	srli	r6,r9,24
 1009e8c:	5006923a 	slli	r3,r10,8
 1009e90:	4804923a 	slli	r2,r9,8
 1009e94:	0009883a 	mov	r4,zero
 1009e98:	30c6b03a 	or	r3,r6,r3
 1009e9c:	01440034 	movhi	r5,4096
 1009ea0:	110cb03a 	or	r6,r2,r4
 1009ea4:	423f0044 	addi	r8,r8,-1023
 1009ea8:	194eb03a 	or	r7,r3,r5
 1009eac:	008000c4 	movi	r2,3
 1009eb0:	69c00415 	stw	r7,16(r13)
 1009eb4:	6a000215 	stw	r8,8(r13)
 1009eb8:	68800015 	stw	r2,0(r13)
 1009ebc:	69800315 	stw	r6,12(r13)
 1009ec0:	f800283a 	ret
 1009ec4:	4a84b03a 	or	r2,r9,r10
 1009ec8:	1000031e 	bne	r2,zero,1009ed8 <__unpack_d+0x104>
 1009ecc:	00800104 	movi	r2,4
 1009ed0:	28800015 	stw	r2,0(r5)
 1009ed4:	f800283a 	ret
 1009ed8:	0009883a 	mov	r4,zero
 1009edc:	01400234 	movhi	r5,8
 1009ee0:	4904703a 	and	r2,r9,r4
 1009ee4:	5146703a 	and	r3,r10,r5
 1009ee8:	10c4b03a 	or	r2,r2,r3
 1009eec:	10000526 	beq	r2,zero,1009f04 <__unpack_d+0x130>
 1009ef0:	00800044 	movi	r2,1
 1009ef4:	68800015 	stw	r2,0(r13)
 1009ef8:	6b000415 	stw	r12,16(r13)
 1009efc:	6ac00315 	stw	r11,12(r13)
 1009f00:	f800283a 	ret
 1009f04:	68000015 	stw	zero,0(r13)
 1009f08:	003ffb06 	br	1009ef8 <__unpack_d+0x124>

01009f0c <__fpcmp_parts_d>:
 1009f0c:	21800017 	ldw	r6,0(r4)
 1009f10:	00c00044 	movi	r3,1
 1009f14:	19800a2e 	bgeu	r3,r6,1009f40 <__fpcmp_parts_d+0x34>
 1009f18:	28800017 	ldw	r2,0(r5)
 1009f1c:	1880082e 	bgeu	r3,r2,1009f40 <__fpcmp_parts_d+0x34>
 1009f20:	00c00104 	movi	r3,4
 1009f24:	30c02626 	beq	r6,r3,1009fc0 <__fpcmp_parts_d+0xb4>
 1009f28:	10c02226 	beq	r2,r3,1009fb4 <__fpcmp_parts_d+0xa8>
 1009f2c:	00c00084 	movi	r3,2
 1009f30:	30c00526 	beq	r6,r3,1009f48 <__fpcmp_parts_d+0x3c>
 1009f34:	10c0071e 	bne	r2,r3,1009f54 <__fpcmp_parts_d+0x48>
 1009f38:	20800117 	ldw	r2,4(r4)
 1009f3c:	1000091e 	bne	r2,zero,1009f64 <__fpcmp_parts_d+0x58>
 1009f40:	00800044 	movi	r2,1
 1009f44:	f800283a 	ret
 1009f48:	10c01a1e 	bne	r2,r3,1009fb4 <__fpcmp_parts_d+0xa8>
 1009f4c:	0005883a 	mov	r2,zero
 1009f50:	f800283a 	ret
 1009f54:	22000117 	ldw	r8,4(r4)
 1009f58:	28800117 	ldw	r2,4(r5)
 1009f5c:	40800326 	beq	r8,r2,1009f6c <__fpcmp_parts_d+0x60>
 1009f60:	403ff726 	beq	r8,zero,1009f40 <__fpcmp_parts_d+0x34>
 1009f64:	00bfffc4 	movi	r2,-1
 1009f68:	f800283a 	ret
 1009f6c:	20c00217 	ldw	r3,8(r4)
 1009f70:	28800217 	ldw	r2,8(r5)
 1009f74:	10fffa16 	blt	r2,r3,1009f60 <__fpcmp_parts_d+0x54>
 1009f78:	18800916 	blt	r3,r2,1009fa0 <__fpcmp_parts_d+0x94>
 1009f7c:	21c00417 	ldw	r7,16(r4)
 1009f80:	28c00417 	ldw	r3,16(r5)
 1009f84:	21800317 	ldw	r6,12(r4)
 1009f88:	28800317 	ldw	r2,12(r5)
 1009f8c:	19fff436 	bltu	r3,r7,1009f60 <__fpcmp_parts_d+0x54>
 1009f90:	38c00526 	beq	r7,r3,1009fa8 <__fpcmp_parts_d+0x9c>
 1009f94:	38c00236 	bltu	r7,r3,1009fa0 <__fpcmp_parts_d+0x94>
 1009f98:	19ffec1e 	bne	r3,r7,1009f4c <__fpcmp_parts_d+0x40>
 1009f9c:	30bfeb2e 	bgeu	r6,r2,1009f4c <__fpcmp_parts_d+0x40>
 1009fa0:	403fe71e 	bne	r8,zero,1009f40 <__fpcmp_parts_d+0x34>
 1009fa4:	003fef06 	br	1009f64 <__fpcmp_parts_d+0x58>
 1009fa8:	11bffa2e 	bgeu	r2,r6,1009f94 <__fpcmp_parts_d+0x88>
 1009fac:	403fe426 	beq	r8,zero,1009f40 <__fpcmp_parts_d+0x34>
 1009fb0:	003fec06 	br	1009f64 <__fpcmp_parts_d+0x58>
 1009fb4:	28800117 	ldw	r2,4(r5)
 1009fb8:	103fe11e 	bne	r2,zero,1009f40 <__fpcmp_parts_d+0x34>
 1009fbc:	003fe906 	br	1009f64 <__fpcmp_parts_d+0x58>
 1009fc0:	11bfdd1e 	bne	r2,r6,1009f38 <__fpcmp_parts_d+0x2c>
 1009fc4:	28c00117 	ldw	r3,4(r5)
 1009fc8:	20800117 	ldw	r2,4(r4)
 1009fcc:	1885c83a 	sub	r2,r3,r2
 1009fd0:	f800283a 	ret

01009fd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1009fd4:	defff804 	addi	sp,sp,-32
 1009fd8:	dfc00715 	stw	ra,28(sp)
 1009fdc:	df000615 	stw	fp,24(sp)
 1009fe0:	df000604 	addi	fp,sp,24
 1009fe4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1009fe8:	e0bffc17 	ldw	r2,-16(fp)
 1009fec:	1004803a 	cmplt	r2,r2,zero
 1009ff0:	1000091e 	bne	r2,zero,100a018 <close+0x44>
 1009ff4:	e13ffc17 	ldw	r4,-16(fp)
 1009ff8:	01400304 	movi	r5,12
 1009ffc:	10098e40 	call	10098e4 <__mulsi3>
 100a000:	1007883a 	mov	r3,r2
 100a004:	00804074 	movhi	r2,257
 100a008:	109ae804 	addi	r2,r2,27552
 100a00c:	1887883a 	add	r3,r3,r2
 100a010:	e0ffff15 	stw	r3,-4(fp)
 100a014:	00000106 	br	100a01c <close+0x48>
 100a018:	e03fff15 	stw	zero,-4(fp)
 100a01c:	e0bfff17 	ldw	r2,-4(fp)
 100a020:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100a024:	e0bffb17 	ldw	r2,-20(fp)
 100a028:	1005003a 	cmpeq	r2,r2,zero
 100a02c:	10001d1e 	bne	r2,zero,100a0a4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100a030:	e0bffb17 	ldw	r2,-20(fp)
 100a034:	10800017 	ldw	r2,0(r2)
 100a038:	10800417 	ldw	r2,16(r2)
 100a03c:	1005003a 	cmpeq	r2,r2,zero
 100a040:	1000071e 	bne	r2,zero,100a060 <close+0x8c>
 100a044:	e0bffb17 	ldw	r2,-20(fp)
 100a048:	10800017 	ldw	r2,0(r2)
 100a04c:	10800417 	ldw	r2,16(r2)
 100a050:	e13ffb17 	ldw	r4,-20(fp)
 100a054:	103ee83a 	callr	r2
 100a058:	e0bffe15 	stw	r2,-8(fp)
 100a05c:	00000106 	br	100a064 <close+0x90>
 100a060:	e03ffe15 	stw	zero,-8(fp)
 100a064:	e0bffe17 	ldw	r2,-8(fp)
 100a068:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100a06c:	e13ffc17 	ldw	r4,-16(fp)
 100a070:	100a8480 	call	100a848 <alt_release_fd>
    if (rval < 0)
 100a074:	e0bffa17 	ldw	r2,-24(fp)
 100a078:	1004403a 	cmpge	r2,r2,zero
 100a07c:	1000071e 	bne	r2,zero,100a09c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 100a080:	100a0d40 	call	100a0d4 <alt_get_errno>
 100a084:	e0fffa17 	ldw	r3,-24(fp)
 100a088:	00c7c83a 	sub	r3,zero,r3
 100a08c:	10c00015 	stw	r3,0(r2)
      return -1;
 100a090:	00bfffc4 	movi	r2,-1
 100a094:	e0bffd15 	stw	r2,-12(fp)
 100a098:	00000806 	br	100a0bc <close+0xe8>
    }
    return 0;
 100a09c:	e03ffd15 	stw	zero,-12(fp)
 100a0a0:	00000606 	br	100a0bc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a0a4:	100a0d40 	call	100a0d4 <alt_get_errno>
 100a0a8:	1007883a 	mov	r3,r2
 100a0ac:	00801444 	movi	r2,81
 100a0b0:	18800015 	stw	r2,0(r3)
    return -1;
 100a0b4:	00bfffc4 	movi	r2,-1
 100a0b8:	e0bffd15 	stw	r2,-12(fp)
 100a0bc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100a0c0:	e037883a 	mov	sp,fp
 100a0c4:	dfc00117 	ldw	ra,4(sp)
 100a0c8:	df000017 	ldw	fp,0(sp)
 100a0cc:	dec00204 	addi	sp,sp,8
 100a0d0:	f800283a 	ret

0100a0d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a0d4:	defffd04 	addi	sp,sp,-12
 100a0d8:	dfc00215 	stw	ra,8(sp)
 100a0dc:	df000115 	stw	fp,4(sp)
 100a0e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a0e4:	00804074 	movhi	r2,257
 100a0e8:	109f7904 	addi	r2,r2,32228
 100a0ec:	10800017 	ldw	r2,0(r2)
 100a0f0:	1005003a 	cmpeq	r2,r2,zero
 100a0f4:	1000061e 	bne	r2,zero,100a110 <alt_get_errno+0x3c>
 100a0f8:	00804074 	movhi	r2,257
 100a0fc:	109f7904 	addi	r2,r2,32228
 100a100:	10800017 	ldw	r2,0(r2)
 100a104:	103ee83a 	callr	r2
 100a108:	e0bfff15 	stw	r2,-4(fp)
 100a10c:	00000306 	br	100a11c <alt_get_errno+0x48>
 100a110:	008040b4 	movhi	r2,258
 100a114:	10a66d04 	addi	r2,r2,-26188
 100a118:	e0bfff15 	stw	r2,-4(fp)
 100a11c:	e0bfff17 	ldw	r2,-4(fp)
}
 100a120:	e037883a 	mov	sp,fp
 100a124:	dfc00117 	ldw	ra,4(sp)
 100a128:	df000017 	ldw	fp,0(sp)
 100a12c:	dec00204 	addi	sp,sp,8
 100a130:	f800283a 	ret

0100a134 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100a134:	defffc04 	addi	sp,sp,-16
 100a138:	df000315 	stw	fp,12(sp)
 100a13c:	df000304 	addi	fp,sp,12
 100a140:	e13ffd15 	stw	r4,-12(fp)
 100a144:	e17ffe15 	stw	r5,-8(fp)
 100a148:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100a14c:	e0bfff17 	ldw	r2,-4(fp)
}
 100a150:	e037883a 	mov	sp,fp
 100a154:	df000017 	ldw	fp,0(sp)
 100a158:	dec00104 	addi	sp,sp,4
 100a15c:	f800283a 	ret

0100a160 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100a160:	defff904 	addi	sp,sp,-28
 100a164:	dfc00615 	stw	ra,24(sp)
 100a168:	df000515 	stw	fp,20(sp)
 100a16c:	df000504 	addi	fp,sp,20
 100a170:	e13ffc15 	stw	r4,-16(fp)
 100a174:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a178:	e0bffc17 	ldw	r2,-16(fp)
 100a17c:	1004803a 	cmplt	r2,r2,zero
 100a180:	1000091e 	bne	r2,zero,100a1a8 <fstat+0x48>
 100a184:	e13ffc17 	ldw	r4,-16(fp)
 100a188:	01400304 	movi	r5,12
 100a18c:	10098e40 	call	10098e4 <__mulsi3>
 100a190:	1007883a 	mov	r3,r2
 100a194:	00804074 	movhi	r2,257
 100a198:	109ae804 	addi	r2,r2,27552
 100a19c:	1887883a 	add	r3,r3,r2
 100a1a0:	e0ffff15 	stw	r3,-4(fp)
 100a1a4:	00000106 	br	100a1ac <fstat+0x4c>
 100a1a8:	e03fff15 	stw	zero,-4(fp)
 100a1ac:	e0bfff17 	ldw	r2,-4(fp)
 100a1b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100a1b4:	e0bffb17 	ldw	r2,-20(fp)
 100a1b8:	1005003a 	cmpeq	r2,r2,zero
 100a1bc:	1000121e 	bne	r2,zero,100a208 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100a1c0:	e0bffb17 	ldw	r2,-20(fp)
 100a1c4:	10800017 	ldw	r2,0(r2)
 100a1c8:	10800817 	ldw	r2,32(r2)
 100a1cc:	1005003a 	cmpeq	r2,r2,zero
 100a1d0:	1000081e 	bne	r2,zero,100a1f4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 100a1d4:	e0bffb17 	ldw	r2,-20(fp)
 100a1d8:	10800017 	ldw	r2,0(r2)
 100a1dc:	10800817 	ldw	r2,32(r2)
 100a1e0:	e13ffb17 	ldw	r4,-20(fp)
 100a1e4:	e17ffd17 	ldw	r5,-12(fp)
 100a1e8:	103ee83a 	callr	r2
 100a1ec:	e0bffe15 	stw	r2,-8(fp)
 100a1f0:	00000b06 	br	100a220 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100a1f4:	e0fffd17 	ldw	r3,-12(fp)
 100a1f8:	00880004 	movi	r2,8192
 100a1fc:	18800115 	stw	r2,4(r3)
      return 0;
 100a200:	e03ffe15 	stw	zero,-8(fp)
 100a204:	00000606 	br	100a220 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a208:	100a2380 	call	100a238 <alt_get_errno>
 100a20c:	1007883a 	mov	r3,r2
 100a210:	00801444 	movi	r2,81
 100a214:	18800015 	stw	r2,0(r3)
    return -1;
 100a218:	00bfffc4 	movi	r2,-1
 100a21c:	e0bffe15 	stw	r2,-8(fp)
 100a220:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a224:	e037883a 	mov	sp,fp
 100a228:	dfc00117 	ldw	ra,4(sp)
 100a22c:	df000017 	ldw	fp,0(sp)
 100a230:	dec00204 	addi	sp,sp,8
 100a234:	f800283a 	ret

0100a238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a238:	defffd04 	addi	sp,sp,-12
 100a23c:	dfc00215 	stw	ra,8(sp)
 100a240:	df000115 	stw	fp,4(sp)
 100a244:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a248:	00804074 	movhi	r2,257
 100a24c:	109f7904 	addi	r2,r2,32228
 100a250:	10800017 	ldw	r2,0(r2)
 100a254:	1005003a 	cmpeq	r2,r2,zero
 100a258:	1000061e 	bne	r2,zero,100a274 <alt_get_errno+0x3c>
 100a25c:	00804074 	movhi	r2,257
 100a260:	109f7904 	addi	r2,r2,32228
 100a264:	10800017 	ldw	r2,0(r2)
 100a268:	103ee83a 	callr	r2
 100a26c:	e0bfff15 	stw	r2,-4(fp)
 100a270:	00000306 	br	100a280 <alt_get_errno+0x48>
 100a274:	008040b4 	movhi	r2,258
 100a278:	10a66d04 	addi	r2,r2,-26188
 100a27c:	e0bfff15 	stw	r2,-4(fp)
 100a280:	e0bfff17 	ldw	r2,-4(fp)
}
 100a284:	e037883a 	mov	sp,fp
 100a288:	dfc00117 	ldw	ra,4(sp)
 100a28c:	df000017 	ldw	fp,0(sp)
 100a290:	dec00204 	addi	sp,sp,8
 100a294:	f800283a 	ret

0100a298 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a298:	deffeb04 	addi	sp,sp,-84
 100a29c:	dfc01415 	stw	ra,80(sp)
 100a2a0:	df001315 	stw	fp,76(sp)
 100a2a4:	df001304 	addi	fp,sp,76
 100a2a8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a2ac:	e0bffd17 	ldw	r2,-12(fp)
 100a2b0:	1004803a 	cmplt	r2,r2,zero
 100a2b4:	1000091e 	bne	r2,zero,100a2dc <isatty+0x44>
 100a2b8:	e13ffd17 	ldw	r4,-12(fp)
 100a2bc:	01400304 	movi	r5,12
 100a2c0:	10098e40 	call	10098e4 <__mulsi3>
 100a2c4:	1007883a 	mov	r3,r2
 100a2c8:	00804074 	movhi	r2,257
 100a2cc:	109ae804 	addi	r2,r2,27552
 100a2d0:	1887883a 	add	r3,r3,r2
 100a2d4:	e0ffff15 	stw	r3,-4(fp)
 100a2d8:	00000106 	br	100a2e0 <isatty+0x48>
 100a2dc:	e03fff15 	stw	zero,-4(fp)
 100a2e0:	e0bfff17 	ldw	r2,-4(fp)
 100a2e4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100a2e8:	e0bfed17 	ldw	r2,-76(fp)
 100a2ec:	1005003a 	cmpeq	r2,r2,zero
 100a2f0:	10000f1e 	bne	r2,zero,100a330 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100a2f4:	e0bfed17 	ldw	r2,-76(fp)
 100a2f8:	10800017 	ldw	r2,0(r2)
 100a2fc:	10800817 	ldw	r2,32(r2)
 100a300:	1004c03a 	cmpne	r2,r2,zero
 100a304:	1000031e 	bne	r2,zero,100a314 <isatty+0x7c>
    {
      return 1;
 100a308:	00800044 	movi	r2,1
 100a30c:	e0bffe15 	stw	r2,-8(fp)
 100a310:	00000c06 	br	100a344 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100a314:	e17fee04 	addi	r5,fp,-72
 100a318:	e13ffd17 	ldw	r4,-12(fp)
 100a31c:	100a1600 	call	100a160 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100a320:	e0bfef17 	ldw	r2,-68(fp)
 100a324:	10880020 	cmpeqi	r2,r2,8192
 100a328:	e0bffe15 	stw	r2,-8(fp)
 100a32c:	00000506 	br	100a344 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a330:	100a35c0 	call	100a35c <alt_get_errno>
 100a334:	1007883a 	mov	r3,r2
 100a338:	00801444 	movi	r2,81
 100a33c:	18800015 	stw	r2,0(r3)
    return 0;
 100a340:	e03ffe15 	stw	zero,-8(fp)
 100a344:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a348:	e037883a 	mov	sp,fp
 100a34c:	dfc00117 	ldw	ra,4(sp)
 100a350:	df000017 	ldw	fp,0(sp)
 100a354:	dec00204 	addi	sp,sp,8
 100a358:	f800283a 	ret

0100a35c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a35c:	defffd04 	addi	sp,sp,-12
 100a360:	dfc00215 	stw	ra,8(sp)
 100a364:	df000115 	stw	fp,4(sp)
 100a368:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a36c:	00804074 	movhi	r2,257
 100a370:	109f7904 	addi	r2,r2,32228
 100a374:	10800017 	ldw	r2,0(r2)
 100a378:	1005003a 	cmpeq	r2,r2,zero
 100a37c:	1000061e 	bne	r2,zero,100a398 <alt_get_errno+0x3c>
 100a380:	00804074 	movhi	r2,257
 100a384:	109f7904 	addi	r2,r2,32228
 100a388:	10800017 	ldw	r2,0(r2)
 100a38c:	103ee83a 	callr	r2
 100a390:	e0bfff15 	stw	r2,-4(fp)
 100a394:	00000306 	br	100a3a4 <alt_get_errno+0x48>
 100a398:	008040b4 	movhi	r2,258
 100a39c:	10a66d04 	addi	r2,r2,-26188
 100a3a0:	e0bfff15 	stw	r2,-4(fp)
 100a3a4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a3a8:	e037883a 	mov	sp,fp
 100a3ac:	dfc00117 	ldw	ra,4(sp)
 100a3b0:	df000017 	ldw	fp,0(sp)
 100a3b4:	dec00204 	addi	sp,sp,8
 100a3b8:	f800283a 	ret

0100a3bc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a3bc:	defffe04 	addi	sp,sp,-8
 100a3c0:	dfc00115 	stw	ra,4(sp)
 100a3c4:	df000015 	stw	fp,0(sp)
 100a3c8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a3cc:	01004074 	movhi	r4,257
 100a3d0:	211f9d04 	addi	r4,r4,32372
 100a3d4:	01404074 	movhi	r5,257
 100a3d8:	2958d904 	addi	r5,r5,25444
 100a3dc:	01804074 	movhi	r6,257
 100a3e0:	319f9d04 	addi	r6,r6,32372
 100a3e4:	100a43c0 	call	100a43c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a3e8:	01004034 	movhi	r4,256
 100a3ec:	21000804 	addi	r4,r4,32
 100a3f0:	01404034 	movhi	r5,256
 100a3f4:	29400804 	addi	r5,r5,32
 100a3f8:	01804034 	movhi	r6,256
 100a3fc:	31806f04 	addi	r6,r6,444
 100a400:	100a43c0 	call	100a43c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100a404:	01004074 	movhi	r4,257
 100a408:	2117a504 	addi	r4,r4,24212
 100a40c:	01404074 	movhi	r5,257
 100a410:	2957a504 	addi	r5,r5,24212
 100a414:	01804074 	movhi	r6,257
 100a418:	3198d904 	addi	r6,r6,25444
 100a41c:	100a43c0 	call	100a43c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100a420:	101475c0 	call	101475c <alt_dcache_flush_all>
  alt_icache_flush_all();
 100a424:	10149e80 	call	10149e8 <alt_icache_flush_all>
}
 100a428:	e037883a 	mov	sp,fp
 100a42c:	dfc00117 	ldw	ra,4(sp)
 100a430:	df000017 	ldw	fp,0(sp)
 100a434:	dec00204 	addi	sp,sp,8
 100a438:	f800283a 	ret

0100a43c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100a43c:	defffc04 	addi	sp,sp,-16
 100a440:	df000315 	stw	fp,12(sp)
 100a444:	df000304 	addi	fp,sp,12
 100a448:	e13ffd15 	stw	r4,-12(fp)
 100a44c:	e17ffe15 	stw	r5,-8(fp)
 100a450:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100a454:	e0fffe17 	ldw	r3,-8(fp)
 100a458:	e0bffd17 	ldw	r2,-12(fp)
 100a45c:	18800e26 	beq	r3,r2,100a498 <alt_load_section+0x5c>
  {
    while( to != end )
 100a460:	00000a06 	br	100a48c <alt_load_section+0x50>
    {
      *to++ = *from++;
 100a464:	e0bffd17 	ldw	r2,-12(fp)
 100a468:	10c00017 	ldw	r3,0(r2)
 100a46c:	e0bffe17 	ldw	r2,-8(fp)
 100a470:	10c00015 	stw	r3,0(r2)
 100a474:	e0bffe17 	ldw	r2,-8(fp)
 100a478:	10800104 	addi	r2,r2,4
 100a47c:	e0bffe15 	stw	r2,-8(fp)
 100a480:	e0bffd17 	ldw	r2,-12(fp)
 100a484:	10800104 	addi	r2,r2,4
 100a488:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a48c:	e0fffe17 	ldw	r3,-8(fp)
 100a490:	e0bfff17 	ldw	r2,-4(fp)
 100a494:	18bff31e 	bne	r3,r2,100a464 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100a498:	e037883a 	mov	sp,fp
 100a49c:	df000017 	ldw	fp,0(sp)
 100a4a0:	dec00104 	addi	sp,sp,4
 100a4a4:	f800283a 	ret

0100a4a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100a4a8:	defff804 	addi	sp,sp,-32
 100a4ac:	dfc00715 	stw	ra,28(sp)
 100a4b0:	df000615 	stw	fp,24(sp)
 100a4b4:	df000604 	addi	fp,sp,24
 100a4b8:	e13ffc15 	stw	r4,-16(fp)
 100a4bc:	e17ffd15 	stw	r5,-12(fp)
 100a4c0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100a4c4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a4c8:	e0bffc17 	ldw	r2,-16(fp)
 100a4cc:	1004803a 	cmplt	r2,r2,zero
 100a4d0:	1000091e 	bne	r2,zero,100a4f8 <lseek+0x50>
 100a4d4:	e13ffc17 	ldw	r4,-16(fp)
 100a4d8:	01400304 	movi	r5,12
 100a4dc:	10098e40 	call	10098e4 <__mulsi3>
 100a4e0:	1007883a 	mov	r3,r2
 100a4e4:	00804074 	movhi	r2,257
 100a4e8:	109ae804 	addi	r2,r2,27552
 100a4ec:	1887883a 	add	r3,r3,r2
 100a4f0:	e0ffff15 	stw	r3,-4(fp)
 100a4f4:	00000106 	br	100a4fc <lseek+0x54>
 100a4f8:	e03fff15 	stw	zero,-4(fp)
 100a4fc:	e0bfff17 	ldw	r2,-4(fp)
 100a500:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100a504:	e0bffb17 	ldw	r2,-20(fp)
 100a508:	1005003a 	cmpeq	r2,r2,zero
 100a50c:	1000111e 	bne	r2,zero,100a554 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100a510:	e0bffb17 	ldw	r2,-20(fp)
 100a514:	10800017 	ldw	r2,0(r2)
 100a518:	10800717 	ldw	r2,28(r2)
 100a51c:	1005003a 	cmpeq	r2,r2,zero
 100a520:	1000091e 	bne	r2,zero,100a548 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100a524:	e0bffb17 	ldw	r2,-20(fp)
 100a528:	10800017 	ldw	r2,0(r2)
 100a52c:	10800717 	ldw	r2,28(r2)
 100a530:	e13ffb17 	ldw	r4,-20(fp)
 100a534:	e17ffd17 	ldw	r5,-12(fp)
 100a538:	e1bffe17 	ldw	r6,-8(fp)
 100a53c:	103ee83a 	callr	r2
 100a540:	e0bffa15 	stw	r2,-24(fp)
 100a544:	00000506 	br	100a55c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100a548:	00bfde84 	movi	r2,-134
 100a54c:	e0bffa15 	stw	r2,-24(fp)
 100a550:	00000206 	br	100a55c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100a554:	00bfebc4 	movi	r2,-81
 100a558:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100a55c:	e0bffa17 	ldw	r2,-24(fp)
 100a560:	1004403a 	cmpge	r2,r2,zero
 100a564:	1000071e 	bne	r2,zero,100a584 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100a568:	100a59c0 	call	100a59c <alt_get_errno>
 100a56c:	1007883a 	mov	r3,r2
 100a570:	e0bffa17 	ldw	r2,-24(fp)
 100a574:	0085c83a 	sub	r2,zero,r2
 100a578:	18800015 	stw	r2,0(r3)
    rc = -1;
 100a57c:	00bfffc4 	movi	r2,-1
 100a580:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100a584:	e0bffa17 	ldw	r2,-24(fp)
}
 100a588:	e037883a 	mov	sp,fp
 100a58c:	dfc00117 	ldw	ra,4(sp)
 100a590:	df000017 	ldw	fp,0(sp)
 100a594:	dec00204 	addi	sp,sp,8
 100a598:	f800283a 	ret

0100a59c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a59c:	defffd04 	addi	sp,sp,-12
 100a5a0:	dfc00215 	stw	ra,8(sp)
 100a5a4:	df000115 	stw	fp,4(sp)
 100a5a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a5ac:	00804074 	movhi	r2,257
 100a5b0:	109f7904 	addi	r2,r2,32228
 100a5b4:	10800017 	ldw	r2,0(r2)
 100a5b8:	1005003a 	cmpeq	r2,r2,zero
 100a5bc:	1000061e 	bne	r2,zero,100a5d8 <alt_get_errno+0x3c>
 100a5c0:	00804074 	movhi	r2,257
 100a5c4:	109f7904 	addi	r2,r2,32228
 100a5c8:	10800017 	ldw	r2,0(r2)
 100a5cc:	103ee83a 	callr	r2
 100a5d0:	e0bfff15 	stw	r2,-4(fp)
 100a5d4:	00000306 	br	100a5e4 <alt_get_errno+0x48>
 100a5d8:	008040b4 	movhi	r2,258
 100a5dc:	10a66d04 	addi	r2,r2,-26188
 100a5e0:	e0bfff15 	stw	r2,-4(fp)
 100a5e4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a5e8:	e037883a 	mov	sp,fp
 100a5ec:	dfc00117 	ldw	ra,4(sp)
 100a5f0:	df000017 	ldw	fp,0(sp)
 100a5f4:	dec00204 	addi	sp,sp,8
 100a5f8:	f800283a 	ret

0100a5fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100a5fc:	defffb04 	addi	sp,sp,-20
 100a600:	dfc00415 	stw	ra,16(sp)
 100a604:	df000315 	stw	fp,12(sp)
 100a608:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100a60c:	0009883a 	mov	r4,zero
 100a610:	10131940 	call	1013194 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100a614:	100b7080 	call	100b708 <OSInit>
 100a618:	01000044 	movi	r4,1
 100a61c:	10105d00 	call	10105d0 <OSSemCreate>
 100a620:	1007883a 	mov	r3,r2
 100a624:	008040b4 	movhi	r2,258
 100a628:	10a67304 	addi	r2,r2,-26164
 100a62c:	10c00015 	stw	r3,0(r2)
 100a630:	01000044 	movi	r4,1
 100a634:	10105d00 	call	10105d0 <OSSemCreate>
 100a638:	1007883a 	mov	r3,r2
 100a63c:	008040b4 	movhi	r2,258
 100a640:	10a67504 	addi	r2,r2,-26156
 100a644:	10c00015 	stw	r3,0(r2)
 100a648:	008040b4 	movhi	r2,258
 100a64c:	10a66e04 	addi	r2,r2,-26184
 100a650:	e0bffd15 	stw	r2,-12(fp)
 100a654:	00800044 	movi	r2,1
 100a658:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 100a65c:	e13ffe0b 	ldhu	r4,-8(fp)
 100a660:	10105d00 	call	10105d0 <OSSemCreate>
 100a664:	1007883a 	mov	r3,r2
 100a668:	e0bffd17 	ldw	r2,-12(fp)
 100a66c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100a670:	10131c80 	call	10131c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100a674:	01004074 	movhi	r4,257
 100a678:	21188204 	addi	r4,r4,25096
 100a67c:	01404074 	movhi	r5,257
 100a680:	29588204 	addi	r5,r5,25096
 100a684:	01804074 	movhi	r6,257
 100a688:	31988204 	addi	r6,r6,25096
 100a68c:	1014da80 	call	1014da8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100a690:	101488c0 	call	101488c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100a694:	01004074 	movhi	r4,257
 100a698:	21123c04 	addi	r4,r4,18672
 100a69c:	10159d80 	call	10159d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100a6a0:	d1270117 	ldw	r4,-25596(gp)
 100a6a4:	d1670217 	ldw	r5,-25592(gp)
 100a6a8:	d1a70317 	ldw	r6,-25588(gp)
 100a6ac:	100045c0 	call	100045c <main>
 100a6b0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100a6b4:	01000044 	movi	r4,1
 100a6b8:	1009fd40 	call	1009fd4 <close>
  exit (result);
 100a6bc:	e13fff17 	ldw	r4,-4(fp)
 100a6c0:	10159ec0 	call	10159ec <exit>

0100a6c4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100a6c4:	defff704 	addi	sp,sp,-36
 100a6c8:	dfc00815 	stw	ra,32(sp)
 100a6cc:	df000715 	stw	fp,28(sp)
 100a6d0:	df000704 	addi	fp,sp,28
 100a6d4:	e13ffb15 	stw	r4,-20(fp)
 100a6d8:	e17ffc15 	stw	r5,-16(fp)
 100a6dc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a6e0:	e0bffb17 	ldw	r2,-20(fp)
 100a6e4:	1004803a 	cmplt	r2,r2,zero
 100a6e8:	1000091e 	bne	r2,zero,100a710 <read+0x4c>
 100a6ec:	e13ffb17 	ldw	r4,-20(fp)
 100a6f0:	01400304 	movi	r5,12
 100a6f4:	10098e40 	call	10098e4 <__mulsi3>
 100a6f8:	1007883a 	mov	r3,r2
 100a6fc:	00804074 	movhi	r2,257
 100a700:	109ae804 	addi	r2,r2,27552
 100a704:	1887883a 	add	r3,r3,r2
 100a708:	e0ffff15 	stw	r3,-4(fp)
 100a70c:	00000106 	br	100a714 <read+0x50>
 100a710:	e03fff15 	stw	zero,-4(fp)
 100a714:	e0bfff17 	ldw	r2,-4(fp)
 100a718:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a71c:	e0bffa17 	ldw	r2,-24(fp)
 100a720:	1005003a 	cmpeq	r2,r2,zero
 100a724:	1000241e 	bne	r2,zero,100a7b8 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100a728:	e0bffa17 	ldw	r2,-24(fp)
 100a72c:	10800217 	ldw	r2,8(r2)
 100a730:	108000cc 	andi	r2,r2,3
 100a734:	10800060 	cmpeqi	r2,r2,1
 100a738:	10001a1e 	bne	r2,zero,100a7a4 <read+0xe0>
 100a73c:	e0bffa17 	ldw	r2,-24(fp)
 100a740:	10800017 	ldw	r2,0(r2)
 100a744:	10800517 	ldw	r2,20(r2)
 100a748:	1005003a 	cmpeq	r2,r2,zero
 100a74c:	1000151e 	bne	r2,zero,100a7a4 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100a750:	e0bffa17 	ldw	r2,-24(fp)
 100a754:	10800017 	ldw	r2,0(r2)
 100a758:	10800517 	ldw	r2,20(r2)
 100a75c:	e17ffc17 	ldw	r5,-16(fp)
 100a760:	e1bffd17 	ldw	r6,-12(fp)
 100a764:	e13ffa17 	ldw	r4,-24(fp)
 100a768:	103ee83a 	callr	r2
 100a76c:	e0bff915 	stw	r2,-28(fp)
 100a770:	e0bff917 	ldw	r2,-28(fp)
 100a774:	1004403a 	cmpge	r2,r2,zero
 100a778:	1000071e 	bne	r2,zero,100a798 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100a77c:	100a7e80 	call	100a7e8 <alt_get_errno>
 100a780:	e0fff917 	ldw	r3,-28(fp)
 100a784:	00c7c83a 	sub	r3,zero,r3
 100a788:	10c00015 	stw	r3,0(r2)
          return -1;
 100a78c:	00bfffc4 	movi	r2,-1
 100a790:	e0bffe15 	stw	r2,-8(fp)
 100a794:	00000e06 	br	100a7d0 <read+0x10c>
        }
        return rval;
 100a798:	e0bff917 	ldw	r2,-28(fp)
 100a79c:	e0bffe15 	stw	r2,-8(fp)
 100a7a0:	00000b06 	br	100a7d0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100a7a4:	100a7e80 	call	100a7e8 <alt_get_errno>
 100a7a8:	1007883a 	mov	r3,r2
 100a7ac:	00800344 	movi	r2,13
 100a7b0:	18800015 	stw	r2,0(r3)
 100a7b4:	00000406 	br	100a7c8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100a7b8:	100a7e80 	call	100a7e8 <alt_get_errno>
 100a7bc:	1007883a 	mov	r3,r2
 100a7c0:	00801444 	movi	r2,81
 100a7c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a7c8:	00bfffc4 	movi	r2,-1
 100a7cc:	e0bffe15 	stw	r2,-8(fp)
 100a7d0:	e0bffe17 	ldw	r2,-8(fp)
}
 100a7d4:	e037883a 	mov	sp,fp
 100a7d8:	dfc00117 	ldw	ra,4(sp)
 100a7dc:	df000017 	ldw	fp,0(sp)
 100a7e0:	dec00204 	addi	sp,sp,8
 100a7e4:	f800283a 	ret

0100a7e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a7e8:	defffd04 	addi	sp,sp,-12
 100a7ec:	dfc00215 	stw	ra,8(sp)
 100a7f0:	df000115 	stw	fp,4(sp)
 100a7f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a7f8:	00804074 	movhi	r2,257
 100a7fc:	109f7904 	addi	r2,r2,32228
 100a800:	10800017 	ldw	r2,0(r2)
 100a804:	1005003a 	cmpeq	r2,r2,zero
 100a808:	1000061e 	bne	r2,zero,100a824 <alt_get_errno+0x3c>
 100a80c:	00804074 	movhi	r2,257
 100a810:	109f7904 	addi	r2,r2,32228
 100a814:	10800017 	ldw	r2,0(r2)
 100a818:	103ee83a 	callr	r2
 100a81c:	e0bfff15 	stw	r2,-4(fp)
 100a820:	00000306 	br	100a830 <alt_get_errno+0x48>
 100a824:	008040b4 	movhi	r2,258
 100a828:	10a66d04 	addi	r2,r2,-26188
 100a82c:	e0bfff15 	stw	r2,-4(fp)
 100a830:	e0bfff17 	ldw	r2,-4(fp)
}
 100a834:	e037883a 	mov	sp,fp
 100a838:	dfc00117 	ldw	ra,4(sp)
 100a83c:	df000017 	ldw	fp,0(sp)
 100a840:	dec00204 	addi	sp,sp,8
 100a844:	f800283a 	ret

0100a848 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100a848:	defffc04 	addi	sp,sp,-16
 100a84c:	dfc00315 	stw	ra,12(sp)
 100a850:	df000215 	stw	fp,8(sp)
 100a854:	dc000115 	stw	r16,4(sp)
 100a858:	df000104 	addi	fp,sp,4
 100a85c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100a860:	e0bfff17 	ldw	r2,-4(fp)
 100a864:	108000d0 	cmplti	r2,r2,3
 100a868:	10000f1e 	bne	r2,zero,100a8a8 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100a86c:	e13fff17 	ldw	r4,-4(fp)
 100a870:	04004074 	movhi	r16,257
 100a874:	841ae804 	addi	r16,r16,27552
 100a878:	01400304 	movi	r5,12
 100a87c:	10098e40 	call	10098e4 <__mulsi3>
 100a880:	1405883a 	add	r2,r2,r16
 100a884:	10800204 	addi	r2,r2,8
 100a888:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100a88c:	e13fff17 	ldw	r4,-4(fp)
 100a890:	04004074 	movhi	r16,257
 100a894:	841ae804 	addi	r16,r16,27552
 100a898:	01400304 	movi	r5,12
 100a89c:	10098e40 	call	10098e4 <__mulsi3>
 100a8a0:	1405883a 	add	r2,r2,r16
 100a8a4:	10000015 	stw	zero,0(r2)
  }
}
 100a8a8:	e037883a 	mov	sp,fp
 100a8ac:	dfc00217 	ldw	ra,8(sp)
 100a8b0:	df000117 	ldw	fp,4(sp)
 100a8b4:	dc000017 	ldw	r16,0(sp)
 100a8b8:	dec00304 	addi	sp,sp,12
 100a8bc:	f800283a 	ret

0100a8c0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100a8c0:	defff804 	addi	sp,sp,-32
 100a8c4:	df000715 	stw	fp,28(sp)
 100a8c8:	df000704 	addi	fp,sp,28
 100a8cc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a8d0:	0005303a 	rdctl	r2,status
 100a8d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a8d8:	e0fffb17 	ldw	r3,-20(fp)
 100a8dc:	00bfff84 	movi	r2,-2
 100a8e0:	1884703a 	and	r2,r3,r2
 100a8e4:	1001703a 	wrctl	status,r2
  
  return context;
 100a8e8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100a8ec:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100a8f0:	d0a00c17 	ldw	r2,-32720(gp)
 100a8f4:	10c000c4 	addi	r3,r2,3
 100a8f8:	00bfff04 	movi	r2,-4
 100a8fc:	1884703a 	and	r2,r3,r2
 100a900:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100a904:	d0e00c17 	ldw	r3,-32720(gp)
 100a908:	e0bffe17 	ldw	r2,-8(fp)
 100a90c:	1887883a 	add	r3,r3,r2
 100a910:	00806034 	movhi	r2,384
 100a914:	10800004 	addi	r2,r2,0
 100a918:	10c0072e 	bgeu	r2,r3,100a938 <sbrk+0x78>
 100a91c:	e0bffd17 	ldw	r2,-12(fp)
 100a920:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a924:	e0bffa17 	ldw	r2,-24(fp)
 100a928:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100a92c:	00bfffc4 	movi	r2,-1
 100a930:	e0bfff15 	stw	r2,-4(fp)
 100a934:	00000c06 	br	100a968 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100a938:	d0a00c17 	ldw	r2,-32720(gp)
 100a93c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100a940:	d0e00c17 	ldw	r3,-32720(gp)
 100a944:	e0bffe17 	ldw	r2,-8(fp)
 100a948:	1885883a 	add	r2,r3,r2
 100a94c:	d0a00c15 	stw	r2,-32720(gp)
 100a950:	e0bffd17 	ldw	r2,-12(fp)
 100a954:	e0bff915 	stw	r2,-28(fp)
 100a958:	e0bff917 	ldw	r2,-28(fp)
 100a95c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100a960:	e0bffc17 	ldw	r2,-16(fp)
 100a964:	e0bfff15 	stw	r2,-4(fp)
 100a968:	e0bfff17 	ldw	r2,-4(fp)
} 
 100a96c:	e037883a 	mov	sp,fp
 100a970:	df000017 	ldw	fp,0(sp)
 100a974:	dec00104 	addi	sp,sp,4
 100a978:	f800283a 	ret

0100a97c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100a97c:	defff704 	addi	sp,sp,-36
 100a980:	dfc00815 	stw	ra,32(sp)
 100a984:	df000715 	stw	fp,28(sp)
 100a988:	df000704 	addi	fp,sp,28
 100a98c:	e13ffb15 	stw	r4,-20(fp)
 100a990:	e17ffc15 	stw	r5,-16(fp)
 100a994:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a998:	e0bffb17 	ldw	r2,-20(fp)
 100a99c:	1004803a 	cmplt	r2,r2,zero
 100a9a0:	1000091e 	bne	r2,zero,100a9c8 <write+0x4c>
 100a9a4:	e13ffb17 	ldw	r4,-20(fp)
 100a9a8:	01400304 	movi	r5,12
 100a9ac:	10098e40 	call	10098e4 <__mulsi3>
 100a9b0:	1007883a 	mov	r3,r2
 100a9b4:	00804074 	movhi	r2,257
 100a9b8:	109ae804 	addi	r2,r2,27552
 100a9bc:	1887883a 	add	r3,r3,r2
 100a9c0:	e0ffff15 	stw	r3,-4(fp)
 100a9c4:	00000106 	br	100a9cc <write+0x50>
 100a9c8:	e03fff15 	stw	zero,-4(fp)
 100a9cc:	e0bfff17 	ldw	r2,-4(fp)
 100a9d0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a9d4:	e0bffa17 	ldw	r2,-24(fp)
 100a9d8:	1005003a 	cmpeq	r2,r2,zero
 100a9dc:	1000241e 	bne	r2,zero,100aa70 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100a9e0:	e0bffa17 	ldw	r2,-24(fp)
 100a9e4:	10800217 	ldw	r2,8(r2)
 100a9e8:	108000cc 	andi	r2,r2,3
 100a9ec:	1005003a 	cmpeq	r2,r2,zero
 100a9f0:	10001a1e 	bne	r2,zero,100aa5c <write+0xe0>
 100a9f4:	e0bffa17 	ldw	r2,-24(fp)
 100a9f8:	10800017 	ldw	r2,0(r2)
 100a9fc:	10800617 	ldw	r2,24(r2)
 100aa00:	1005003a 	cmpeq	r2,r2,zero
 100aa04:	1000151e 	bne	r2,zero,100aa5c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100aa08:	e0bffa17 	ldw	r2,-24(fp)
 100aa0c:	10800017 	ldw	r2,0(r2)
 100aa10:	10800617 	ldw	r2,24(r2)
 100aa14:	e17ffc17 	ldw	r5,-16(fp)
 100aa18:	e1bffd17 	ldw	r6,-12(fp)
 100aa1c:	e13ffa17 	ldw	r4,-24(fp)
 100aa20:	103ee83a 	callr	r2
 100aa24:	e0bff915 	stw	r2,-28(fp)
 100aa28:	e0bff917 	ldw	r2,-28(fp)
 100aa2c:	1004403a 	cmpge	r2,r2,zero
 100aa30:	1000071e 	bne	r2,zero,100aa50 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100aa34:	100aaa00 	call	100aaa0 <alt_get_errno>
 100aa38:	e0fff917 	ldw	r3,-28(fp)
 100aa3c:	00c7c83a 	sub	r3,zero,r3
 100aa40:	10c00015 	stw	r3,0(r2)
        return -1;
 100aa44:	00bfffc4 	movi	r2,-1
 100aa48:	e0bffe15 	stw	r2,-8(fp)
 100aa4c:	00000e06 	br	100aa88 <write+0x10c>
      }
      return rval;
 100aa50:	e0bff917 	ldw	r2,-28(fp)
 100aa54:	e0bffe15 	stw	r2,-8(fp)
 100aa58:	00000b06 	br	100aa88 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100aa5c:	100aaa00 	call	100aaa0 <alt_get_errno>
 100aa60:	1007883a 	mov	r3,r2
 100aa64:	00800344 	movi	r2,13
 100aa68:	18800015 	stw	r2,0(r3)
 100aa6c:	00000406 	br	100aa80 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100aa70:	100aaa00 	call	100aaa0 <alt_get_errno>
 100aa74:	1007883a 	mov	r3,r2
 100aa78:	00801444 	movi	r2,81
 100aa7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100aa80:	00bfffc4 	movi	r2,-1
 100aa84:	e0bffe15 	stw	r2,-8(fp)
 100aa88:	e0bffe17 	ldw	r2,-8(fp)
}
 100aa8c:	e037883a 	mov	sp,fp
 100aa90:	dfc00117 	ldw	ra,4(sp)
 100aa94:	df000017 	ldw	fp,0(sp)
 100aa98:	dec00204 	addi	sp,sp,8
 100aa9c:	f800283a 	ret

0100aaa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100aaa0:	defffd04 	addi	sp,sp,-12
 100aaa4:	dfc00215 	stw	ra,8(sp)
 100aaa8:	df000115 	stw	fp,4(sp)
 100aaac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100aab0:	00804074 	movhi	r2,257
 100aab4:	109f7904 	addi	r2,r2,32228
 100aab8:	10800017 	ldw	r2,0(r2)
 100aabc:	1005003a 	cmpeq	r2,r2,zero
 100aac0:	1000061e 	bne	r2,zero,100aadc <alt_get_errno+0x3c>
 100aac4:	00804074 	movhi	r2,257
 100aac8:	109f7904 	addi	r2,r2,32228
 100aacc:	10800017 	ldw	r2,0(r2)
 100aad0:	103ee83a 	callr	r2
 100aad4:	e0bfff15 	stw	r2,-4(fp)
 100aad8:	00000306 	br	100aae8 <alt_get_errno+0x48>
 100aadc:	008040b4 	movhi	r2,258
 100aae0:	10a66d04 	addi	r2,r2,-26188
 100aae4:	e0bfff15 	stw	r2,-4(fp)
 100aae8:	e0bfff17 	ldw	r2,-4(fp)
}
 100aaec:	e037883a 	mov	sp,fp
 100aaf0:	dfc00117 	ldw	ra,4(sp)
 100aaf4:	df000017 	ldw	fp,0(sp)
 100aaf8:	dec00204 	addi	sp,sp,8
 100aafc:	f800283a 	ret

0100ab00 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 100ab00:	deffdf04 	addi	sp,sp,-132
 100ab04:	dfc02015 	stw	ra,128(sp)
 100ab08:	df001f15 	stw	fp,124(sp)
 100ab0c:	df001f04 	addi	fp,sp,124
 100ab10:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100ab14:	e17fe204 	addi	r5,fp,-120
 100ab18:	01003fc4 	movi	r4,255
 100ab1c:	10129580 	call	1012958 <OSTaskQuery>
 100ab20:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100ab24:	e0bffe83 	ldbu	r2,-6(fp)
 100ab28:	10803fcc 	andi	r2,r2,255
 100ab2c:	1004c03a 	cmpne	r2,r2,zero
 100ab30:	1000191e 	bne	r2,zero,100ab98 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 100ab34:	e0bfee83 	ldbu	r2,-70(fp)
 100ab38:	10803fcc 	andi	r2,r2,255
 100ab3c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 100ab40:	d1270517 	ldw	r4,-25580(gp)
 100ab44:	e17ffd04 	addi	r5,fp,-12
 100ab48:	1010ea40 	call	1010ea4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 100ab4c:	e0bffe43 	ldbu	r2,-7(fp)
 100ab50:	10803fcc 	andi	r2,r2,255
 100ab54:	1005003a 	cmpeq	r2,r2,zero
 100ab58:	1000071e 	bne	r2,zero,100ab78 <__env_lock+0x78>
 100ab5c:	d0e00d17 	ldw	r3,-32716(gp)
 100ab60:	e0bfe117 	ldw	r2,-124(fp)
 100ab64:	10c0041e 	bne	r2,r3,100ab78 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 100ab68:	d0a70417 	ldw	r2,-25584(gp)
 100ab6c:	10800044 	addi	r2,r2,1
 100ab70:	d0a70415 	stw	r2,-25584(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 100ab74:	00000806 	br	100ab98 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 100ab78:	d1270517 	ldw	r4,-25580(gp)
 100ab7c:	e1bffe84 	addi	r6,fp,-6
 100ab80:	000b883a 	mov	r5,zero
 100ab84:	10109840 	call	1010984 <OSSemPend>
    locks  = 1;
 100ab88:	00800044 	movi	r2,1
 100ab8c:	d0a70415 	stw	r2,-25584(gp)
    lockid = id;
 100ab90:	e0bfe117 	ldw	r2,-124(fp)
 100ab94:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100ab98:	e037883a 	mov	sp,fp
 100ab9c:	dfc00117 	ldw	ra,4(sp)
 100aba0:	df000017 	ldw	fp,0(sp)
 100aba4:	dec00204 	addi	sp,sp,8
 100aba8:	f800283a 	ret

0100abac <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 100abac:	defffd04 	addi	sp,sp,-12
 100abb0:	dfc00215 	stw	ra,8(sp)
 100abb4:	df000115 	stw	fp,4(sp)
 100abb8:	df000104 	addi	fp,sp,4
 100abbc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 100abc0:	d0a70417 	ldw	r2,-25584(gp)
 100abc4:	1005003a 	cmpeq	r2,r2,zero
 100abc8:	10000a1e 	bne	r2,zero,100abf4 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 100abcc:	d0a70417 	ldw	r2,-25584(gp)
 100abd0:	10bfffc4 	addi	r2,r2,-1
 100abd4:	d0a70415 	stw	r2,-25584(gp)
 100abd8:	d0a70417 	ldw	r2,-25584(gp)
 100abdc:	1004c03a 	cmpne	r2,r2,zero
 100abe0:	1000041e 	bne	r2,zero,100abf4 <__env_unlock+0x48>
  {
    lockid = -1;
 100abe4:	00bfffc4 	movi	r2,-1
 100abe8:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
 100abec:	d1270517 	ldw	r4,-25580(gp)
 100abf0:	1010d7c0 	call	1010d7c <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100abf4:	e037883a 	mov	sp,fp
 100abf8:	dfc00117 	ldw	ra,4(sp)
 100abfc:	df000017 	ldw	fp,0(sp)
 100ac00:	dec00204 	addi	sp,sp,8
 100ac04:	f800283a 	ret

0100ac08 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 100ac08:	deffdb04 	addi	sp,sp,-148
 100ac0c:	dfc02415 	stw	ra,144(sp)
 100ac10:	df002315 	stw	fp,140(sp)
 100ac14:	df002304 	addi	fp,sp,140
 100ac18:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ac1c:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 100ac20:	008040b4 	movhi	r2,258
 100ac24:	10a67644 	addi	r2,r2,-26151
 100ac28:	10800003 	ldbu	r2,0(r2)
 100ac2c:	10803fcc 	andi	r2,r2,255
 100ac30:	10800058 	cmpnei	r2,r2,1
 100ac34:	1000311e 	bne	r2,zero,100acfc <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 100ac38:	e17fe204 	addi	r5,fp,-120
 100ac3c:	01003fc4 	movi	r4,255
 100ac40:	10129580 	call	1012958 <OSTaskQuery>
 100ac44:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 100ac48:	e0bffe83 	ldbu	r2,-6(fp)
 100ac4c:	10803fcc 	andi	r2,r2,255
 100ac50:	1004c03a 	cmpne	r2,r2,zero
 100ac54:	1000291e 	bne	r2,zero,100acfc <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 100ac58:	e0bfee83 	ldbu	r2,-70(fp)
 100ac5c:	10803fcc 	andi	r2,r2,255
 100ac60:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 100ac64:	d1270717 	ldw	r4,-25572(gp)
 100ac68:	e17ffd04 	addi	r5,fp,-12
 100ac6c:	1010ea40 	call	1010ea4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ac70:	0005303a 	rdctl	r2,status
 100ac74:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ac78:	e0ffdf17 	ldw	r3,-132(fp)
 100ac7c:	00bfff84 	movi	r2,-2
 100ac80:	1884703a 	and	r2,r3,r2
 100ac84:	1001703a 	wrctl	status,r2
  
  return context;
 100ac88:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 100ac8c:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 100ac90:	e0bffd0b 	ldhu	r2,-12(fp)
 100ac94:	10bfffcc 	andi	r2,r2,65535
 100ac98:	1004c03a 	cmpne	r2,r2,zero
 100ac9c:	10000b1e 	bne	r2,zero,100accc <__malloc_lock+0xc4>
 100aca0:	d0e00e17 	ldw	r3,-32712(gp)
 100aca4:	e0bfe117 	ldw	r2,-124(fp)
 100aca8:	10c0081e 	bne	r2,r3,100accc <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 100acac:	d0a70617 	ldw	r2,-25576(gp)
 100acb0:	10800044 	addi	r2,r2,1
 100acb4:	d0a70615 	stw	r2,-25576(gp)
 100acb8:	e0bfe017 	ldw	r2,-128(fp)
 100acbc:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100acc0:	e0bfde17 	ldw	r2,-136(fp)
 100acc4:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 100acc8:	00000c06 	br	100acfc <__malloc_lock+0xf4>
 100accc:	e0bfe017 	ldw	r2,-128(fp)
 100acd0:	e0bfdd15 	stw	r2,-140(fp)
 100acd4:	e0bfdd17 	ldw	r2,-140(fp)
 100acd8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 100acdc:	d1270717 	ldw	r4,-25572(gp)
 100ace0:	e1bffe84 	addi	r6,fp,-6
 100ace4:	000b883a 	mov	r5,zero
 100ace8:	10109840 	call	1010984 <OSSemPend>
    locks  = 1;
 100acec:	00800044 	movi	r2,1
 100acf0:	d0a70615 	stw	r2,-25576(gp)
    lockid = id;
 100acf4:	e0bfe117 	ldw	r2,-124(fp)
 100acf8:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100acfc:	e037883a 	mov	sp,fp
 100ad00:	dfc00117 	ldw	ra,4(sp)
 100ad04:	df000017 	ldw	fp,0(sp)
 100ad08:	dec00204 	addi	sp,sp,8
 100ad0c:	f800283a 	ret

0100ad10 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100ad10:	defff804 	addi	sp,sp,-32
 100ad14:	dfc00715 	stw	ra,28(sp)
 100ad18:	df000615 	stw	fp,24(sp)
 100ad1c:	df000604 	addi	fp,sp,24
 100ad20:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ad24:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 100ad28:	008040b4 	movhi	r2,258
 100ad2c:	10a67644 	addi	r2,r2,-26151
 100ad30:	10800003 	ldbu	r2,0(r2)
 100ad34:	10803fcc 	andi	r2,r2,255
 100ad38:	10800058 	cmpnei	r2,r2,1
 100ad3c:	1000231e 	bne	r2,zero,100adcc <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ad40:	0005303a 	rdctl	r2,status
 100ad44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ad48:	e0fffd17 	ldw	r3,-12(fp)
 100ad4c:	00bfff84 	movi	r2,-2
 100ad50:	1884703a 	and	r2,r3,r2
 100ad54:	1001703a 	wrctl	status,r2
  
  return context;
 100ad58:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 100ad5c:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 100ad60:	d0a70617 	ldw	r2,-25576(gp)
 100ad64:	1004c03a 	cmpne	r2,r2,zero
 100ad68:	1000051e 	bne	r2,zero,100ad80 <__malloc_unlock+0x70>
 100ad6c:	e0bffe17 	ldw	r2,-8(fp)
 100ad70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ad74:	e0bffc17 	ldw	r2,-16(fp)
 100ad78:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 100ad7c:	00001306 	br	100adcc <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 100ad80:	d0a70617 	ldw	r2,-25576(gp)
 100ad84:	10bfffc4 	addi	r2,r2,-1
 100ad88:	d0a70615 	stw	r2,-25576(gp)
 100ad8c:	d0a70617 	ldw	r2,-25576(gp)
 100ad90:	1004c03a 	cmpne	r2,r2,zero
 100ad94:	1000091e 	bne	r2,zero,100adbc <__malloc_unlock+0xac>
  {
    lockid = -1;
 100ad98:	00bfffc4 	movi	r2,-1
 100ad9c:	d0a00e15 	stw	r2,-32712(gp)
 100ada0:	e0bffe17 	ldw	r2,-8(fp)
 100ada4:	e0bffb15 	stw	r2,-20(fp)
 100ada8:	e0bffb17 	ldw	r2,-20(fp)
 100adac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 100adb0:	d1270717 	ldw	r4,-25572(gp)
 100adb4:	1010d7c0 	call	1010d7c <OSSemPost>
 100adb8:	00000406 	br	100adcc <__malloc_unlock+0xbc>
 100adbc:	e0bffe17 	ldw	r2,-8(fp)
 100adc0:	e0bffa15 	stw	r2,-24(fp)
 100adc4:	e0bffa17 	ldw	r2,-24(fp)
 100adc8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100adcc:	e037883a 	mov	sp,fp
 100add0:	dfc00117 	ldw	ra,4(sp)
 100add4:	df000017 	ldw	fp,0(sp)
 100add8:	dec00204 	addi	sp,sp,8
 100addc:	f800283a 	ret

0100ade0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100ade0:	defff604 	addi	sp,sp,-40
 100ade4:	dfc00915 	stw	ra,36(sp)
 100ade8:	df000815 	stw	fp,32(sp)
 100adec:	df000804 	addi	fp,sp,32
 100adf0:	e13ffc15 	stw	r4,-16(fp)
 100adf4:	e17ffd15 	stw	r5,-12(fp)
 100adf8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100adfc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100ae00:	e0bffe17 	ldw	r2,-8(fp)
 100ae04:	1004c03a 	cmpne	r2,r2,zero
 100ae08:	1000021e 	bne	r2,zero,100ae14 <OSEventNameGet+0x34>
        return (0);
 100ae0c:	e03fff15 	stw	zero,-4(fp)
 100ae10:	00003906 	br	100aef8 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100ae14:	e0bffc17 	ldw	r2,-16(fp)
 100ae18:	1004c03a 	cmpne	r2,r2,zero
 100ae1c:	1000051e 	bne	r2,zero,100ae34 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 100ae20:	e0fffe17 	ldw	r3,-8(fp)
 100ae24:	00800104 	movi	r2,4
 100ae28:	18800005 	stb	r2,0(r3)
        return (0);
 100ae2c:	e03fff15 	stw	zero,-4(fp)
 100ae30:	00003106 	br	100aef8 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100ae34:	e0bffd17 	ldw	r2,-12(fp)
 100ae38:	1004c03a 	cmpne	r2,r2,zero
 100ae3c:	1000051e 	bne	r2,zero,100ae54 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 100ae40:	e0fffe17 	ldw	r3,-8(fp)
 100ae44:	00800304 	movi	r2,12
 100ae48:	18800005 	stb	r2,0(r3)
        return (0);
 100ae4c:	e03fff15 	stw	zero,-4(fp)
 100ae50:	00002906 	br	100aef8 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100ae54:	d0a71603 	ldbu	r2,-25512(gp)
 100ae58:	10803fcc 	andi	r2,r2,255
 100ae5c:	1005003a 	cmpeq	r2,r2,zero
 100ae60:	1000051e 	bne	r2,zero,100ae78 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 100ae64:	e0fffe17 	ldw	r3,-8(fp)
 100ae68:	00800444 	movi	r2,17
 100ae6c:	18800005 	stb	r2,0(r3)
        return (0);
 100ae70:	e03fff15 	stw	zero,-4(fp)
 100ae74:	00002006 	br	100aef8 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 100ae78:	e0bffc17 	ldw	r2,-16(fp)
 100ae7c:	10800003 	ldbu	r2,0(r2)
 100ae80:	10803fcc 	andi	r2,r2,255
 100ae84:	10bfffc4 	addi	r2,r2,-1
 100ae88:	10800128 	cmpgeui	r2,r2,4
 100ae8c:	1000161e 	bne	r2,zero,100aee8 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ae90:	0005303a 	rdctl	r2,status
 100ae94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ae98:	e0fff917 	ldw	r3,-28(fp)
 100ae9c:	00bfff84 	movi	r2,-2
 100aea0:	1884703a 	and	r2,r3,r2
 100aea4:	1001703a 	wrctl	status,r2
  
  return context;
 100aea8:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 100aeac:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 100aeb0:	e0bffc17 	ldw	r2,-16(fp)
 100aeb4:	11400384 	addi	r5,r2,14
 100aeb8:	e13ffd17 	ldw	r4,-12(fp)
 100aebc:	100c9640 	call	100c964 <OS_StrCopy>
 100aec0:	e0bffb05 	stb	r2,-20(fp)
 100aec4:	e0bffa17 	ldw	r2,-24(fp)
 100aec8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100aecc:	e0bff817 	ldw	r2,-32(fp)
 100aed0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100aed4:	e0bffe17 	ldw	r2,-8(fp)
 100aed8:	10000005 	stb	zero,0(r2)
    return (len);
 100aedc:	e0bffb03 	ldbu	r2,-20(fp)
 100aee0:	e0bfff15 	stw	r2,-4(fp)
 100aee4:	00000406 	br	100aef8 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100aee8:	e0fffe17 	ldw	r3,-8(fp)
 100aeec:	00800044 	movi	r2,1
 100aef0:	18800005 	stb	r2,0(r3)
             return (0);
 100aef4:	e03fff15 	stw	zero,-4(fp)
 100aef8:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 100aefc:	e037883a 	mov	sp,fp
 100af00:	dfc00117 	ldw	ra,4(sp)
 100af04:	df000017 	ldw	fp,0(sp)
 100af08:	dec00204 	addi	sp,sp,8
 100af0c:	f800283a 	ret

0100af10 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100af10:	defff604 	addi	sp,sp,-40
 100af14:	dfc00915 	stw	ra,36(sp)
 100af18:	df000815 	stw	fp,32(sp)
 100af1c:	df000804 	addi	fp,sp,32
 100af20:	e13ffd15 	stw	r4,-12(fp)
 100af24:	e17ffe15 	stw	r5,-8(fp)
 100af28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100af2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100af30:	e0bfff17 	ldw	r2,-4(fp)
 100af34:	1005003a 	cmpeq	r2,r2,zero
 100af38:	1000411e 	bne	r2,zero,100b040 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 100af3c:	e0bffd17 	ldw	r2,-12(fp)
 100af40:	1004c03a 	cmpne	r2,r2,zero
 100af44:	1000041e 	bne	r2,zero,100af58 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 100af48:	e0ffff17 	ldw	r3,-4(fp)
 100af4c:	00800104 	movi	r2,4
 100af50:	18800005 	stb	r2,0(r3)
        return;
 100af54:	00003a06 	br	100b040 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100af58:	e0bffe17 	ldw	r2,-8(fp)
 100af5c:	1004c03a 	cmpne	r2,r2,zero
 100af60:	1000041e 	bne	r2,zero,100af74 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 100af64:	e0ffff17 	ldw	r3,-4(fp)
 100af68:	00800304 	movi	r2,12
 100af6c:	18800005 	stb	r2,0(r3)
        return;
 100af70:	00003306 	br	100b040 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100af74:	d0a71603 	ldbu	r2,-25512(gp)
 100af78:	10803fcc 	andi	r2,r2,255
 100af7c:	1005003a 	cmpeq	r2,r2,zero
 100af80:	1000041e 	bne	r2,zero,100af94 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 100af84:	e0ffff17 	ldw	r3,-4(fp)
 100af88:	00800484 	movi	r2,18
 100af8c:	18800005 	stb	r2,0(r3)
        return;
 100af90:	00002b06 	br	100b040 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 100af94:	e0bffd17 	ldw	r2,-12(fp)
 100af98:	10800003 	ldbu	r2,0(r2)
 100af9c:	10803fcc 	andi	r2,r2,255
 100afa0:	10bfffc4 	addi	r2,r2,-1
 100afa4:	10800128 	cmpgeui	r2,r2,4
 100afa8:	10000f1e 	bne	r2,zero,100afe8 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100afac:	0005303a 	rdctl	r2,status
 100afb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100afb4:	e0fffa17 	ldw	r3,-24(fp)
 100afb8:	00bfff84 	movi	r2,-2
 100afbc:	1884703a 	and	r2,r3,r2
 100afc0:	1001703a 	wrctl	status,r2
  
  return context;
 100afc4:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 100afc8:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 100afcc:	e13ffe17 	ldw	r4,-8(fp)
 100afd0:	100c9e40 	call	100c9e4 <OS_StrLen>
 100afd4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 100afd8:	e0bffc03 	ldbu	r2,-16(fp)
 100afdc:	10800828 	cmpgeui	r2,r2,32
 100afe0:	1000051e 	bne	r2,zero,100aff8 <OSEventNameSet+0xe8>
 100afe4:	00000c06 	br	100b018 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100afe8:	e0ffff17 	ldw	r3,-4(fp)
 100afec:	00800044 	movi	r2,1
 100aff0:	18800005 	stb	r2,0(r3)
             return;
 100aff4:	00001206 	br	100b040 <OSEventNameSet+0x130>
 100aff8:	e0bffb17 	ldw	r2,-20(fp)
 100affc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b000:	e0bff917 	ldw	r2,-28(fp)
 100b004:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 100b008:	e0ffff17 	ldw	r3,-4(fp)
 100b00c:	008002c4 	movi	r2,11
 100b010:	18800005 	stb	r2,0(r3)
        return;
 100b014:	00000a06 	br	100b040 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 100b018:	e0bffd17 	ldw	r2,-12(fp)
 100b01c:	11000384 	addi	r4,r2,14
 100b020:	e17ffe17 	ldw	r5,-8(fp)
 100b024:	100c9640 	call	100c964 <OS_StrCopy>
 100b028:	e0bffb17 	ldw	r2,-20(fp)
 100b02c:	e0bff815 	stw	r2,-32(fp)
 100b030:	e0bff817 	ldw	r2,-32(fp)
 100b034:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100b038:	e0bfff17 	ldw	r2,-4(fp)
 100b03c:	10000005 	stb	zero,0(r2)
}
 100b040:	e037883a 	mov	sp,fp
 100b044:	dfc00117 	ldw	ra,4(sp)
 100b048:	df000017 	ldw	fp,0(sp)
 100b04c:	dec00204 	addi	sp,sp,8
 100b050:	f800283a 	ret

0100b054 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100b054:	deffe704 	addi	sp,sp,-100
 100b058:	dfc01815 	stw	ra,96(sp)
 100b05c:	df001715 	stw	fp,92(sp)
 100b060:	df001704 	addi	fp,sp,92
 100b064:	e13ff615 	stw	r4,-40(fp)
 100b068:	e17ff715 	stw	r5,-36(fp)
 100b06c:	e1bff815 	stw	r6,-32(fp)
 100b070:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 100b074:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 100b078:	e0800217 	ldw	r2,8(fp)
 100b07c:	1004c03a 	cmpne	r2,r2,zero
 100b080:	1000021e 	bne	r2,zero,100b08c <OSEventPendMulti+0x38>
        return (0);
 100b084:	e03fff15 	stw	zero,-4(fp)
 100b088:	00019906 	br	100b6f0 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 100b08c:	e0bff617 	ldw	r2,-40(fp)
 100b090:	1004c03a 	cmpne	r2,r2,zero
 100b094:	1000051e 	bne	r2,zero,100b0ac <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 100b098:	e0c00217 	ldw	r3,8(fp)
 100b09c:	00800104 	movi	r2,4
 100b0a0:	18800005 	stb	r2,0(r3)
        return (0);
 100b0a4:	e03fff15 	stw	zero,-4(fp)
 100b0a8:	00019106 	br	100b6f0 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 100b0ac:	e0bff717 	ldw	r2,-36(fp)
 100b0b0:	1004c03a 	cmpne	r2,r2,zero
 100b0b4:	1000051e 	bne	r2,zero,100b0cc <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 100b0b8:	e0c00217 	ldw	r3,8(fp)
 100b0bc:	00800104 	movi	r2,4
 100b0c0:	18800005 	stb	r2,0(r3)
        return (0);
 100b0c4:	e03fff15 	stw	zero,-4(fp)
 100b0c8:	00018906 	br	100b6f0 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 100b0cc:	e0bff817 	ldw	r2,-32(fp)
 100b0d0:	1004c03a 	cmpne	r2,r2,zero
 100b0d4:	1000051e 	bne	r2,zero,100b0ec <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 100b0d8:	e0c00217 	ldw	r3,8(fp)
 100b0dc:	00800104 	movi	r2,4
 100b0e0:	18800005 	stb	r2,0(r3)
        return (0);
 100b0e4:	e03fff15 	stw	zero,-4(fp)
 100b0e8:	00018106 	br	100b6f0 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 100b0ec:	e0bff717 	ldw	r2,-36(fp)
 100b0f0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 100b0f4:	e0bff617 	ldw	r2,-40(fp)
 100b0f8:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 100b0fc:	e0bff517 	ldw	r2,-44(fp)
 100b100:	10800017 	ldw	r2,0(r2)
 100b104:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 100b108:	00001806 	br	100b16c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 100b10c:	e0bff417 	ldw	r2,-48(fp)
 100b110:	10800003 	ldbu	r2,0(r2)
 100b114:	10803fcc 	andi	r2,r2,255
 100b118:	e0bffe15 	stw	r2,-8(fp)
 100b11c:	e0fffe17 	ldw	r3,-8(fp)
 100b120:	188000a0 	cmpeqi	r2,r3,2
 100b124:	10000b1e 	bne	r2,zero,100b154 <OSEventPendMulti+0x100>
 100b128:	e0fffe17 	ldw	r3,-8(fp)
 100b12c:	188000e0 	cmpeqi	r2,r3,3
 100b130:	1000081e 	bne	r2,zero,100b154 <OSEventPendMulti+0x100>
 100b134:	e0fffe17 	ldw	r3,-8(fp)
 100b138:	18800060 	cmpeqi	r2,r3,1
 100b13c:	1000051e 	bne	r2,zero,100b154 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 100b140:	e0c00217 	ldw	r3,8(fp)
 100b144:	00800044 	movi	r2,1
 100b148:	18800005 	stb	r2,0(r3)
                 return (0);
 100b14c:	e03fff15 	stw	zero,-4(fp)
 100b150:	00016706 	br	100b6f0 <OSEventPendMulti+0x69c>
        }
        pevents++;
 100b154:	e0bff517 	ldw	r2,-44(fp)
 100b158:	10800104 	addi	r2,r2,4
 100b15c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100b160:	e0bff517 	ldw	r2,-44(fp)
 100b164:	10800017 	ldw	r2,0(r2)
 100b168:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 100b16c:	e0bff417 	ldw	r2,-48(fp)
 100b170:	1004c03a 	cmpne	r2,r2,zero
 100b174:	103fe51e 	bne	r2,zero,100b10c <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 100b178:	d0a71603 	ldbu	r2,-25512(gp)
 100b17c:	10803fcc 	andi	r2,r2,255
 100b180:	1005003a 	cmpeq	r2,r2,zero
 100b184:	1000051e 	bne	r2,zero,100b19c <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 100b188:	e0c00217 	ldw	r3,8(fp)
 100b18c:	00800084 	movi	r2,2
 100b190:	18800005 	stb	r2,0(r3)
        return (0);
 100b194:	e03fff15 	stw	zero,-4(fp)
 100b198:	00015506 	br	100b6f0 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 100b19c:	d0a70803 	ldbu	r2,-25568(gp)
 100b1a0:	10803fcc 	andi	r2,r2,255
 100b1a4:	1005003a 	cmpeq	r2,r2,zero
 100b1a8:	1000051e 	bne	r2,zero,100b1c0 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 100b1ac:	e0c00217 	ldw	r3,8(fp)
 100b1b0:	00800344 	movi	r2,13
 100b1b4:	18800005 	stb	r2,0(r3)
        return (0);
 100b1b8:	e03fff15 	stw	zero,-4(fp)
 100b1bc:	00014c06 	br	100b6f0 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b1c0:	0005303a 	rdctl	r2,status
 100b1c4:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b1c8:	e0ffef17 	ldw	r3,-68(fp)
 100b1cc:	00bfff84 	movi	r2,-2
 100b1d0:	1884703a 	and	r2,r3,r2
 100b1d4:	1001703a 	wrctl	status,r2
  
  return context;
 100b1d8:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 100b1dc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 100b1e0:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 100b1e4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 100b1e8:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 100b1ec:	e0bff617 	ldw	r2,-40(fp)
 100b1f0:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 100b1f4:	e0bff517 	ldw	r2,-44(fp)
 100b1f8:	10800017 	ldw	r2,0(r2)
 100b1fc:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100b200:	00008f06 	br	100b440 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 100b204:	e0bff417 	ldw	r2,-48(fp)
 100b208:	10800003 	ldbu	r2,0(r2)
 100b20c:	10803fcc 	andi	r2,r2,255
 100b210:	e0bffd15 	stw	r2,-12(fp)
 100b214:	e0fffd17 	ldw	r3,-12(fp)
 100b218:	188000a0 	cmpeqi	r2,r3,2
 100b21c:	1000441e 	bne	r2,zero,100b330 <OSEventPendMulti+0x2dc>
 100b220:	e0fffd17 	ldw	r3,-12(fp)
 100b224:	188000e0 	cmpeqi	r2,r3,3
 100b228:	1000041e 	bne	r2,zero,100b23c <OSEventPendMulti+0x1e8>
 100b22c:	e0fffd17 	ldw	r3,-12(fp)
 100b230:	18800060 	cmpeqi	r2,r3,1
 100b234:	1000211e 	bne	r2,zero,100b2bc <OSEventPendMulti+0x268>
 100b238:	00006f06 	br	100b3f8 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 100b23c:	e0bff417 	ldw	r2,-48(fp)
 100b240:	1080020b 	ldhu	r2,8(r2)
 100b244:	10bfffcc 	andi	r2,r2,65535
 100b248:	1005003a 	cmpeq	r2,r2,zero
 100b24c:	1000171e 	bne	r2,zero,100b2ac <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 100b250:	e0bff417 	ldw	r2,-48(fp)
 100b254:	1080020b 	ldhu	r2,8(r2)
 100b258:	10bfffc4 	addi	r2,r2,-1
 100b25c:	1007883a 	mov	r3,r2
 100b260:	e0bff417 	ldw	r2,-48(fp)
 100b264:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 100b268:	e0fff717 	ldw	r3,-36(fp)
 100b26c:	e0bff417 	ldw	r2,-48(fp)
 100b270:	18800015 	stw	r2,0(r3)
 100b274:	e0bff717 	ldw	r2,-36(fp)
 100b278:	10800104 	addi	r2,r2,4
 100b27c:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 100b280:	00800044 	movi	r2,1
 100b284:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 100b288:	e0bff817 	ldw	r2,-32(fp)
 100b28c:	10000015 	stw	zero,0(r2)
 100b290:	e0bff817 	ldw	r2,-32(fp)
 100b294:	10800104 	addi	r2,r2,4
 100b298:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 100b29c:	e0bff18b 	ldhu	r2,-58(fp)
 100b2a0:	10800044 	addi	r2,r2,1
 100b2a4:	e0bff18d 	sth	r2,-58(fp)
 100b2a8:	00005f06 	br	100b428 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 100b2ac:	e0bff103 	ldbu	r2,-60(fp)
 100b2b0:	10800054 	ori	r2,r2,1
 100b2b4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100b2b8:	00005b06 	br	100b428 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 100b2bc:	e0bff417 	ldw	r2,-48(fp)
 100b2c0:	10800117 	ldw	r2,4(r2)
 100b2c4:	1005003a 	cmpeq	r2,r2,zero
 100b2c8:	1000151e 	bne	r2,zero,100b320 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 100b2cc:	e0bff417 	ldw	r2,-48(fp)
 100b2d0:	10c00117 	ldw	r3,4(r2)
 100b2d4:	e0bff817 	ldw	r2,-32(fp)
 100b2d8:	10c00015 	stw	r3,0(r2)
 100b2dc:	e0bff817 	ldw	r2,-32(fp)
 100b2e0:	10800104 	addi	r2,r2,4
 100b2e4:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 100b2e8:	e0bff417 	ldw	r2,-48(fp)
 100b2ec:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 100b2f0:	e0fff717 	ldw	r3,-36(fp)
 100b2f4:	e0bff417 	ldw	r2,-48(fp)
 100b2f8:	18800015 	stw	r2,0(r3)
 100b2fc:	e0bff717 	ldw	r2,-36(fp)
 100b300:	10800104 	addi	r2,r2,4
 100b304:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 100b308:	00800044 	movi	r2,1
 100b30c:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100b310:	e0bff18b 	ldhu	r2,-58(fp)
 100b314:	10800044 	addi	r2,r2,1
 100b318:	e0bff18d 	sth	r2,-58(fp)
 100b31c:	00004206 	br	100b428 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 100b320:	e0bff103 	ldbu	r2,-60(fp)
 100b324:	10800094 	ori	r2,r2,2
 100b328:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100b32c:	00003e06 	br	100b428 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 100b330:	e0bff417 	ldw	r2,-48(fp)
 100b334:	10800117 	ldw	r2,4(r2)
 100b338:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 100b33c:	e0bff317 	ldw	r2,-52(fp)
 100b340:	1080058b 	ldhu	r2,22(r2)
 100b344:	10bfffcc 	andi	r2,r2,65535
 100b348:	1005003a 	cmpeq	r2,r2,zero
 100b34c:	1000261e 	bne	r2,zero,100b3e8 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 100b350:	e0bff317 	ldw	r2,-52(fp)
 100b354:	11000417 	ldw	r4,16(r2)
 100b358:	20c00017 	ldw	r3,0(r4)
 100b35c:	e0bff817 	ldw	r2,-32(fp)
 100b360:	10c00015 	stw	r3,0(r2)
 100b364:	e0bff817 	ldw	r2,-32(fp)
 100b368:	10800104 	addi	r2,r2,4
 100b36c:	e0bff815 	stw	r2,-32(fp)
 100b370:	20c00104 	addi	r3,r4,4
 100b374:	e0bff317 	ldw	r2,-52(fp)
 100b378:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 100b37c:	e0bff317 	ldw	r2,-52(fp)
 100b380:	10c00417 	ldw	r3,16(r2)
 100b384:	e0bff317 	ldw	r2,-52(fp)
 100b388:	10800217 	ldw	r2,8(r2)
 100b38c:	1880041e 	bne	r3,r2,100b3a0 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 100b390:	e0bff317 	ldw	r2,-52(fp)
 100b394:	10c00117 	ldw	r3,4(r2)
 100b398:	e0bff317 	ldw	r2,-52(fp)
 100b39c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 100b3a0:	e0bff317 	ldw	r2,-52(fp)
 100b3a4:	1080058b 	ldhu	r2,22(r2)
 100b3a8:	10bfffc4 	addi	r2,r2,-1
 100b3ac:	1007883a 	mov	r3,r2
 100b3b0:	e0bff317 	ldw	r2,-52(fp)
 100b3b4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 100b3b8:	e0fff717 	ldw	r3,-36(fp)
 100b3bc:	e0bff417 	ldw	r2,-48(fp)
 100b3c0:	18800015 	stw	r2,0(r3)
 100b3c4:	e0bff717 	ldw	r2,-36(fp)
 100b3c8:	10800104 	addi	r2,r2,4
 100b3cc:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 100b3d0:	00800044 	movi	r2,1
 100b3d4:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 100b3d8:	e0bff18b 	ldhu	r2,-58(fp)
 100b3dc:	10800044 	addi	r2,r2,1
 100b3e0:	e0bff18d 	sth	r2,-58(fp)
 100b3e4:	00001006 	br	100b428 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 100b3e8:	e0bff103 	ldbu	r2,-60(fp)
 100b3ec:	10800114 	ori	r2,r2,4
 100b3f0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 100b3f4:	00000c06 	br	100b428 <OSEventPendMulti+0x3d4>
 100b3f8:	e0bff017 	ldw	r2,-64(fp)
 100b3fc:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b400:	e0bfee17 	ldw	r2,-72(fp)
 100b404:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 100b408:	e0bff717 	ldw	r2,-36(fp)
 100b40c:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 100b410:	e0c00217 	ldw	r3,8(fp)
 100b414:	00800044 	movi	r2,1
 100b418:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 100b41c:	e0bff18b 	ldhu	r2,-58(fp)
 100b420:	e0bfff15 	stw	r2,-4(fp)
 100b424:	0000b206 	br	100b6f0 <OSEventPendMulti+0x69c>
        }
        pevents++;
 100b428:	e0bff517 	ldw	r2,-44(fp)
 100b42c:	10800104 	addi	r2,r2,4
 100b430:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 100b434:	e0bff517 	ldw	r2,-44(fp)
 100b438:	10800017 	ldw	r2,0(r2)
 100b43c:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100b440:	e0bff417 	ldw	r2,-48(fp)
 100b444:	1004c03a 	cmpne	r2,r2,zero
 100b448:	103f6e1e 	bne	r2,zero,100b204 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 100b44c:	e0bff203 	ldbu	r2,-56(fp)
 100b450:	10800058 	cmpnei	r2,r2,1
 100b454:	10000b1e 	bne	r2,zero,100b484 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 100b458:	e0bff717 	ldw	r2,-36(fp)
 100b45c:	10000015 	stw	zero,0(r2)
 100b460:	e0bff017 	ldw	r2,-64(fp)
 100b464:	e0bfed15 	stw	r2,-76(fp)
 100b468:	e0bfed17 	ldw	r2,-76(fp)
 100b46c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 100b470:	e0800217 	ldw	r2,8(fp)
 100b474:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 100b478:	e0fff18b 	ldhu	r3,-58(fp)
 100b47c:	e0ffff15 	stw	r3,-4(fp)
 100b480:	00009b06 	br	100b6f0 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 100b484:	d1271717 	ldw	r4,-25508(gp)
 100b488:	d0a71717 	ldw	r2,-25508(gp)
 100b48c:	10c00c03 	ldbu	r3,48(r2)
 100b490:	e0bff103 	ldbu	r2,-60(fp)
 100b494:	1884b03a 	or	r2,r3,r2
 100b498:	1007883a 	mov	r3,r2
 100b49c:	00bfe004 	movi	r2,-128
 100b4a0:	1884b03a 	or	r2,r3,r2
 100b4a4:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100b4a8:	d0a71717 	ldw	r2,-25508(gp)
 100b4ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 100b4b0:	d0e71717 	ldw	r3,-25508(gp)
 100b4b4:	e0bff90b 	ldhu	r2,-28(fp)
 100b4b8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 100b4bc:	e13ff617 	ldw	r4,-40(fp)
 100b4c0:	100c0840 	call	100c084 <OS_EventTaskWaitMulti>
 100b4c4:	e0bff017 	ldw	r2,-64(fp)
 100b4c8:	e0bfec15 	stw	r2,-80(fp)
 100b4cc:	e0bfec17 	ldw	r2,-80(fp)
 100b4d0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 100b4d4:	100c8200 	call	100c820 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b4d8:	0005303a 	rdctl	r2,status
 100b4dc:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b4e0:	e0ffeb17 	ldw	r3,-84(fp)
 100b4e4:	00bfff84 	movi	r2,-2
 100b4e8:	1884703a 	and	r2,r3,r2
 100b4ec:	1001703a 	wrctl	status,r2
  
  return context;
 100b4f0:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 100b4f4:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 100b4f8:	d0a71717 	ldw	r2,-25508(gp)
 100b4fc:	10800c43 	ldbu	r2,49(r2)
 100b500:	10803fcc 	andi	r2,r2,255
 100b504:	e0bffc15 	stw	r2,-16(fp)
 100b508:	e0fffc17 	ldw	r3,-16(fp)
 100b50c:	1805003a 	cmpeq	r2,r3,zero
 100b510:	1000041e 	bne	r2,zero,100b524 <OSEventPendMulti+0x4d0>
 100b514:	e0fffc17 	ldw	r3,-16(fp)
 100b518:	188000a0 	cmpeqi	r2,r3,2
 100b51c:	1000011e 	bne	r2,zero,100b524 <OSEventPendMulti+0x4d0>
 100b520:	00001906 	br	100b588 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 100b524:	d0a71717 	ldw	r2,-25508(gp)
 100b528:	10800717 	ldw	r2,28(r2)
 100b52c:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 100b530:	e0bff417 	ldw	r2,-48(fp)
 100b534:	1005003a 	cmpeq	r2,r2,zero
 100b538:	10000c1e 	bne	r2,zero,100b56c <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 100b53c:	e0fff717 	ldw	r3,-36(fp)
 100b540:	e0bff417 	ldw	r2,-48(fp)
 100b544:	18800015 	stw	r2,0(r3)
 100b548:	e0bff717 	ldw	r2,-36(fp)
 100b54c:	10800104 	addi	r2,r2,4
 100b550:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 100b554:	e0bff717 	ldw	r2,-36(fp)
 100b558:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 100b55c:	e0bff18b 	ldhu	r2,-58(fp)
 100b560:	10800044 	addi	r2,r2,1
 100b564:	e0bff18d 	sth	r2,-58(fp)
 100b568:	00000a06 	br	100b594 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 100b56c:	d0a71717 	ldw	r2,-25508(gp)
 100b570:	00c00044 	movi	r3,1
 100b574:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100b578:	d1271717 	ldw	r4,-25508(gp)
 100b57c:	e17ff617 	ldw	r5,-40(fp)
 100b580:	100c2900 	call	100c290 <OS_EventTaskRemoveMulti>
             }
			 break;
 100b584:	00000306 	br	100b594 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100b588:	d1271717 	ldw	r4,-25508(gp)
 100b58c:	e17ff617 	ldw	r5,-40(fp)
 100b590:	100c2900 	call	100c290 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 100b594:	d0a71717 	ldw	r2,-25508(gp)
 100b598:	10800c43 	ldbu	r2,49(r2)
 100b59c:	10803fcc 	andi	r2,r2,255
 100b5a0:	e0bffb15 	stw	r2,-20(fp)
 100b5a4:	e0fffb17 	ldw	r3,-20(fp)
 100b5a8:	1805003a 	cmpeq	r2,r3,zero
 100b5ac:	1000041e 	bne	r2,zero,100b5c0 <OSEventPendMulti+0x56c>
 100b5b0:	e0fffb17 	ldw	r3,-20(fp)
 100b5b4:	188000a0 	cmpeqi	r2,r3,2
 100b5b8:	10002c1e 	bne	r2,zero,100b66c <OSEventPendMulti+0x618>
 100b5bc:	00003406 	br	100b690 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 100b5c0:	e0bff417 	ldw	r2,-48(fp)
 100b5c4:	10800003 	ldbu	r2,0(r2)
 100b5c8:	10803fcc 	andi	r2,r2,255
 100b5cc:	e0bffa15 	stw	r2,-24(fp)
 100b5d0:	e0fffa17 	ldw	r3,-24(fp)
 100b5d4:	18800050 	cmplti	r2,r3,1
 100b5d8:	1000151e 	bne	r2,zero,100b630 <OSEventPendMulti+0x5dc>
 100b5dc:	e0fffa17 	ldw	r3,-24(fp)
 100b5e0:	188000d0 	cmplti	r2,r3,3
 100b5e4:	10000a1e 	bne	r2,zero,100b610 <OSEventPendMulti+0x5bc>
 100b5e8:	e0fffa17 	ldw	r3,-24(fp)
 100b5ec:	188000e0 	cmpeqi	r2,r3,3
 100b5f0:	1000011e 	bne	r2,zero,100b5f8 <OSEventPendMulti+0x5a4>
 100b5f4:	00000e06 	br	100b630 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 100b5f8:	e0bff817 	ldw	r2,-32(fp)
 100b5fc:	10000015 	stw	zero,0(r2)
 100b600:	e0bff817 	ldw	r2,-32(fp)
 100b604:	10800104 	addi	r2,r2,4
 100b608:	e0bff815 	stw	r2,-32(fp)
                      break;
 100b60c:	00001406 	br	100b660 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 100b610:	d0a71717 	ldw	r2,-25508(gp)
 100b614:	10c00917 	ldw	r3,36(r2)
 100b618:	e0bff817 	ldw	r2,-32(fp)
 100b61c:	10c00015 	stw	r3,0(r2)
 100b620:	e0bff817 	ldw	r2,-32(fp)
 100b624:	10800104 	addi	r2,r2,4
 100b628:	e0bff815 	stw	r2,-32(fp)
                      break;
 100b62c:	00000c06 	br	100b660 <OSEventPendMulti+0x60c>
 100b630:	e0bff017 	ldw	r2,-64(fp)
 100b634:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b638:	e0bfea17 	ldw	r2,-88(fp)
 100b63c:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 100b640:	e0bff717 	ldw	r2,-36(fp)
 100b644:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 100b648:	e0c00217 	ldw	r3,8(fp)
 100b64c:	00800044 	movi	r2,1
 100b650:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 100b654:	e0bff18b 	ldhu	r2,-58(fp)
 100b658:	e0bfff15 	stw	r2,-4(fp)
 100b65c:	00002406 	br	100b6f0 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 100b660:	e0800217 	ldw	r2,8(fp)
 100b664:	10000005 	stb	zero,0(r2)
             break;
 100b668:	00001106 	br	100b6b0 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 100b66c:	e0bff817 	ldw	r2,-32(fp)
 100b670:	10000015 	stw	zero,0(r2)
 100b674:	e0bff817 	ldw	r2,-32(fp)
 100b678:	10800104 	addi	r2,r2,4
 100b67c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 100b680:	e0c00217 	ldw	r3,8(fp)
 100b684:	00800384 	movi	r2,14
 100b688:	18800005 	stb	r2,0(r3)
             break;
 100b68c:	00000806 	br	100b6b0 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 100b690:	e0bff817 	ldw	r2,-32(fp)
 100b694:	10000015 	stw	zero,0(r2)
 100b698:	e0bff817 	ldw	r2,-32(fp)
 100b69c:	10800104 	addi	r2,r2,4
 100b6a0:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 100b6a4:	e0c00217 	ldw	r3,8(fp)
 100b6a8:	00800284 	movi	r2,10
 100b6ac:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 100b6b0:	d0a71717 	ldw	r2,-25508(gp)
 100b6b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 100b6b8:	d0a71717 	ldw	r2,-25508(gp)
 100b6bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 100b6c0:	d0a71717 	ldw	r2,-25508(gp)
 100b6c4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100b6c8:	d0a71717 	ldw	r2,-25508(gp)
 100b6cc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 100b6d0:	d0a71717 	ldw	r2,-25508(gp)
 100b6d4:	10000915 	stw	zero,36(r2)
 100b6d8:	e0bff017 	ldw	r2,-64(fp)
 100b6dc:	e0bfe915 	stw	r2,-92(fp)
 100b6e0:	e0bfe917 	ldw	r2,-92(fp)
 100b6e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 100b6e8:	e0fff18b 	ldhu	r3,-58(fp)
 100b6ec:	e0ffff15 	stw	r3,-4(fp)
 100b6f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100b6f4:	e037883a 	mov	sp,fp
 100b6f8:	dfc00117 	ldw	ra,4(sp)
 100b6fc:	df000017 	ldw	fp,0(sp)
 100b700:	dec00204 	addi	sp,sp,8
 100b704:	f800283a 	ret

0100b708 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 100b708:	defffe04 	addi	sp,sp,-8
 100b70c:	dfc00115 	stw	ra,4(sp)
 100b710:	df000015 	stw	fp,0(sp)
 100b714:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 100b718:	10157400 	call	1015740 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 100b71c:	100c4d80 	call	100c4d8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 100b720:	100c51c0 	call	100c51c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 100b724:	100c6800 	call	100c680 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 100b728:	100c3fc0 	call	100c3fc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 100b72c:	100e7300 	call	100e730 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 100b730:	100f1080 	call	100f108 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 100b734:	10104640 	call	1010464 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 100b738:	100c5880 	call	100c588 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 100b73c:	100c6040 	call	100c604 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 100b740:	101575c0 	call	101575c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 100b744:	100cf080 	call	100cf08 <OSDebugInit>
#endif
}
 100b748:	e037883a 	mov	sp,fp
 100b74c:	dfc00117 	ldw	ra,4(sp)
 100b750:	df000017 	ldw	fp,0(sp)
 100b754:	dec00204 	addi	sp,sp,8
 100b758:	f800283a 	ret

0100b75c <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 100b75c:	defffc04 	addi	sp,sp,-16
 100b760:	df000315 	stw	fp,12(sp)
 100b764:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100b768:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 100b76c:	d0a70843 	ldbu	r2,-25567(gp)
 100b770:	10803fcc 	andi	r2,r2,255
 100b774:	10800058 	cmpnei	r2,r2,1
 100b778:	1000131e 	bne	r2,zero,100b7c8 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b77c:	0005303a 	rdctl	r2,status
 100b780:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b784:	e0fffe17 	ldw	r3,-8(fp)
 100b788:	00bfff84 	movi	r2,-2
 100b78c:	1884703a 	and	r2,r3,r2
 100b790:	1001703a 	wrctl	status,r2
  
  return context;
 100b794:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100b798:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 100b79c:	d0a71603 	ldbu	r2,-25512(gp)
 100b7a0:	10803fcc 	andi	r2,r2,255
 100b7a4:	10803fe0 	cmpeqi	r2,r2,255
 100b7a8:	1000031e 	bne	r2,zero,100b7b8 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 100b7ac:	d0a71603 	ldbu	r2,-25512(gp)
 100b7b0:	10800044 	addi	r2,r2,1
 100b7b4:	d0a71605 	stb	r2,-25512(gp)
 100b7b8:	e0bfff17 	ldw	r2,-4(fp)
 100b7bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b7c0:	e0bffd17 	ldw	r2,-12(fp)
 100b7c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 100b7c8:	e037883a 	mov	sp,fp
 100b7cc:	df000017 	ldw	fp,0(sp)
 100b7d0:	dec00104 	addi	sp,sp,4
 100b7d4:	f800283a 	ret

0100b7d8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 100b7d8:	defffb04 	addi	sp,sp,-20
 100b7dc:	dfc00415 	stw	ra,16(sp)
 100b7e0:	df000315 	stw	fp,12(sp)
 100b7e4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100b7e8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 100b7ec:	d0a70843 	ldbu	r2,-25567(gp)
 100b7f0:	10803fcc 	andi	r2,r2,255
 100b7f4:	10800058 	cmpnei	r2,r2,1
 100b7f8:	1000321e 	bne	r2,zero,100b8c4 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b7fc:	0005303a 	rdctl	r2,status
 100b800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b804:	e0fffe17 	ldw	r3,-8(fp)
 100b808:	00bfff84 	movi	r2,-2
 100b80c:	1884703a 	and	r2,r3,r2
 100b810:	1001703a 	wrctl	status,r2
  
  return context;
 100b814:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100b818:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 100b81c:	d0a71603 	ldbu	r2,-25512(gp)
 100b820:	10803fcc 	andi	r2,r2,255
 100b824:	1005003a 	cmpeq	r2,r2,zero
 100b828:	1000031e 	bne	r2,zero,100b838 <OSIntExit+0x60>
            OSIntNesting--;
 100b82c:	d0a71603 	ldbu	r2,-25512(gp)
 100b830:	10bfffc4 	addi	r2,r2,-1
 100b834:	d0a71605 	stb	r2,-25512(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 100b838:	d0a71603 	ldbu	r2,-25512(gp)
 100b83c:	10803fcc 	andi	r2,r2,255
 100b840:	1004c03a 	cmpne	r2,r2,zero
 100b844:	10001b1e 	bne	r2,zero,100b8b4 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 100b848:	d0a70803 	ldbu	r2,-25568(gp)
 100b84c:	10803fcc 	andi	r2,r2,255
 100b850:	1004c03a 	cmpne	r2,r2,zero
 100b854:	1000171e 	bne	r2,zero,100b8b4 <OSIntExit+0xdc>
                OS_SchedNew();
 100b858:	100c8f40 	call	100c8f4 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 100b85c:	d0a70a03 	ldbu	r2,-25560(gp)
 100b860:	d0e70a43 	ldbu	r3,-25559(gp)
 100b864:	11003fcc 	andi	r4,r2,255
 100b868:	18803fcc 	andi	r2,r3,255
 100b86c:	20801126 	beq	r4,r2,100b8b4 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100b870:	d0a70a03 	ldbu	r2,-25560(gp)
 100b874:	10803fcc 	andi	r2,r2,255
 100b878:	00c040b4 	movhi	r3,258
 100b87c:	18cb0b04 	addi	r3,r3,11308
 100b880:	1085883a 	add	r2,r2,r2
 100b884:	1085883a 	add	r2,r2,r2
 100b888:	10c5883a 	add	r2,r2,r3
 100b88c:	10800017 	ldw	r2,0(r2)
 100b890:	d0a71215 	stw	r2,-25528(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 100b894:	d0e71217 	ldw	r3,-25528(gp)
 100b898:	18800e17 	ldw	r2,56(r3)
 100b89c:	10800044 	addi	r2,r2,1
 100b8a0:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 100b8a4:	d0a70d17 	ldw	r2,-25548(gp)
 100b8a8:	10800044 	addi	r2,r2,1
 100b8ac:	d0a70d15 	stw	r2,-25548(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 100b8b0:	10152cc0 	call	10152cc <OSCtxSw>
 100b8b4:	e0bfff17 	ldw	r2,-4(fp)
 100b8b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b8bc:	e0bffd17 	ldw	r2,-12(fp)
 100b8c0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100b8c4:	e037883a 	mov	sp,fp
 100b8c8:	dfc00117 	ldw	ra,4(sp)
 100b8cc:	df000017 	ldw	fp,0(sp)
 100b8d0:	dec00204 	addi	sp,sp,8
 100b8d4:	f800283a 	ret

0100b8d8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 100b8d8:	defffc04 	addi	sp,sp,-16
 100b8dc:	df000315 	stw	fp,12(sp)
 100b8e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100b8e4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 100b8e8:	d0a70843 	ldbu	r2,-25567(gp)
 100b8ec:	10803fcc 	andi	r2,r2,255
 100b8f0:	10800058 	cmpnei	r2,r2,1
 100b8f4:	1000171e 	bne	r2,zero,100b954 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b8f8:	0005303a 	rdctl	r2,status
 100b8fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b900:	e0fffe17 	ldw	r3,-8(fp)
 100b904:	00bfff84 	movi	r2,-2
 100b908:	1884703a 	and	r2,r3,r2
 100b90c:	1001703a 	wrctl	status,r2
  
  return context;
 100b910:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100b914:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 100b918:	d0a71603 	ldbu	r2,-25512(gp)
 100b91c:	10803fcc 	andi	r2,r2,255
 100b920:	1004c03a 	cmpne	r2,r2,zero
 100b924:	1000071e 	bne	r2,zero,100b944 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 100b928:	d0a70803 	ldbu	r2,-25568(gp)
 100b92c:	10803fcc 	andi	r2,r2,255
 100b930:	10803fe0 	cmpeqi	r2,r2,255
 100b934:	1000031e 	bne	r2,zero,100b944 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 100b938:	d0a70803 	ldbu	r2,-25568(gp)
 100b93c:	10800044 	addi	r2,r2,1
 100b940:	d0a70805 	stb	r2,-25568(gp)
 100b944:	e0bfff17 	ldw	r2,-4(fp)
 100b948:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b94c:	e0bffd17 	ldw	r2,-12(fp)
 100b950:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100b954:	e037883a 	mov	sp,fp
 100b958:	df000017 	ldw	fp,0(sp)
 100b95c:	dec00104 	addi	sp,sp,4
 100b960:	f800283a 	ret

0100b964 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 100b964:	defff804 	addi	sp,sp,-32
 100b968:	dfc00715 	stw	ra,28(sp)
 100b96c:	df000615 	stw	fp,24(sp)
 100b970:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100b974:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 100b978:	d0a70843 	ldbu	r2,-25567(gp)
 100b97c:	10803fcc 	andi	r2,r2,255
 100b980:	10800058 	cmpnei	r2,r2,1
 100b984:	10002b1e 	bne	r2,zero,100ba34 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b988:	0005303a 	rdctl	r2,status
 100b98c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b990:	e0fffe17 	ldw	r3,-8(fp)
 100b994:	00bfff84 	movi	r2,-2
 100b998:	1884703a 	and	r2,r3,r2
 100b99c:	1001703a 	wrctl	status,r2
  
  return context;
 100b9a0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 100b9a4:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 100b9a8:	d0a70803 	ldbu	r2,-25568(gp)
 100b9ac:	10803fcc 	andi	r2,r2,255
 100b9b0:	1005003a 	cmpeq	r2,r2,zero
 100b9b4:	10001b1e 	bne	r2,zero,100ba24 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 100b9b8:	d0a70803 	ldbu	r2,-25568(gp)
 100b9bc:	10bfffc4 	addi	r2,r2,-1
 100b9c0:	d0a70805 	stb	r2,-25568(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 100b9c4:	d0a70803 	ldbu	r2,-25568(gp)
 100b9c8:	10803fcc 	andi	r2,r2,255
 100b9cc:	1004c03a 	cmpne	r2,r2,zero
 100b9d0:	10000f1e 	bne	r2,zero,100ba10 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 100b9d4:	d0a71603 	ldbu	r2,-25512(gp)
 100b9d8:	10803fcc 	andi	r2,r2,255
 100b9dc:	1004c03a 	cmpne	r2,r2,zero
 100b9e0:	1000061e 	bne	r2,zero,100b9fc <OSSchedUnlock+0x98>
 100b9e4:	e0bfff17 	ldw	r2,-4(fp)
 100b9e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b9ec:	e0bffd17 	ldw	r2,-12(fp)
 100b9f0:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 100b9f4:	100c8200 	call	100c820 <OS_Sched>
 100b9f8:	00000e06 	br	100ba34 <OSSchedUnlock+0xd0>
 100b9fc:	e0bfff17 	ldw	r2,-4(fp)
 100ba00:	e0bffc15 	stw	r2,-16(fp)
 100ba04:	e0bffc17 	ldw	r2,-16(fp)
 100ba08:	1001703a 	wrctl	status,r2
 100ba0c:	00000906 	br	100ba34 <OSSchedUnlock+0xd0>
 100ba10:	e0bfff17 	ldw	r2,-4(fp)
 100ba14:	e0bffb15 	stw	r2,-20(fp)
 100ba18:	e0bffb17 	ldw	r2,-20(fp)
 100ba1c:	1001703a 	wrctl	status,r2
 100ba20:	00000406 	br	100ba34 <OSSchedUnlock+0xd0>
 100ba24:	e0bfff17 	ldw	r2,-4(fp)
 100ba28:	e0bffa15 	stw	r2,-24(fp)
 100ba2c:	e0bffa17 	ldw	r2,-24(fp)
 100ba30:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 100ba34:	e037883a 	mov	sp,fp
 100ba38:	dfc00117 	ldw	ra,4(sp)
 100ba3c:	df000017 	ldw	fp,0(sp)
 100ba40:	dec00204 	addi	sp,sp,8
 100ba44:	f800283a 	ret

0100ba48 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 100ba48:	defffe04 	addi	sp,sp,-8
 100ba4c:	dfc00115 	stw	ra,4(sp)
 100ba50:	df000015 	stw	fp,0(sp)
 100ba54:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 100ba58:	d0a70843 	ldbu	r2,-25567(gp)
 100ba5c:	10803fcc 	andi	r2,r2,255
 100ba60:	1004c03a 	cmpne	r2,r2,zero
 100ba64:	10000f1e 	bne	r2,zero,100baa4 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 100ba68:	100c8f40 	call	100c8f4 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 100ba6c:	d0a70a03 	ldbu	r2,-25560(gp)
 100ba70:	d0a70a45 	stb	r2,-25559(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100ba74:	d0a70a03 	ldbu	r2,-25560(gp)
 100ba78:	10803fcc 	andi	r2,r2,255
 100ba7c:	00c040b4 	movhi	r3,258
 100ba80:	18cb0b04 	addi	r3,r3,11308
 100ba84:	1085883a 	add	r2,r2,r2
 100ba88:	1085883a 	add	r2,r2,r2
 100ba8c:	10c5883a 	add	r2,r2,r3
 100ba90:	10800017 	ldw	r2,0(r2)
 100ba94:	d0a71215 	stw	r2,-25528(gp)
        OSTCBCur      = OSTCBHighRdy;
 100ba98:	d0a71217 	ldw	r2,-25528(gp)
 100ba9c:	d0a71715 	stw	r2,-25508(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 100baa0:	10153580 	call	1015358 <OSStartHighRdy>
    }
}
 100baa4:	e037883a 	mov	sp,fp
 100baa8:	dfc00117 	ldw	ra,4(sp)
 100baac:	df000017 	ldw	fp,0(sp)
 100bab0:	dec00204 	addi	sp,sp,8
 100bab4:	f800283a 	ret

0100bab8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 100bab8:	defff904 	addi	sp,sp,-28
 100babc:	dfc00615 	stw	ra,24(sp)
 100bac0:	df000515 	stw	fp,20(sp)
 100bac4:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100bac8:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 100bacc:	01000084 	movi	r4,2
 100bad0:	1012b180 	call	1012b18 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bad4:	0005303a 	rdctl	r2,status
 100bad8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100badc:	e0fffe17 	ldw	r3,-8(fp)
 100bae0:	00bfff84 	movi	r2,-2
 100bae4:	1884703a 	and	r2,r3,r2
 100bae8:	1001703a 	wrctl	status,r2
  
  return context;
 100baec:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 100baf0:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 100baf4:	d0270915 	stw	zero,-25564(gp)
 100baf8:	e0bfff17 	ldw	r2,-4(fp)
 100bafc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bb00:	e0bffd17 	ldw	r2,-12(fp)
 100bb04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 100bb08:	01001904 	movi	r4,100
 100bb0c:	1012b180 	call	1012b18 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bb10:	0005303a 	rdctl	r2,status
 100bb14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bb18:	e0fffc17 	ldw	r3,-16(fp)
 100bb1c:	00bfff84 	movi	r2,-2
 100bb20:	1884703a 	and	r2,r3,r2
 100bb24:	1001703a 	wrctl	status,r2
  
  return context;
 100bb28:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 100bb2c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 100bb30:	d0a70917 	ldw	r2,-25564(gp)
 100bb34:	d0a70e15 	stw	r2,-25544(gp)
    OSStatRdy    = OS_TRUE;
 100bb38:	00800044 	movi	r2,1
 100bb3c:	d0a71a05 	stb	r2,-25496(gp)
 100bb40:	e0bfff17 	ldw	r2,-4(fp)
 100bb44:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bb48:	e0bffb17 	ldw	r2,-20(fp)
 100bb4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 100bb50:	e037883a 	mov	sp,fp
 100bb54:	dfc00117 	ldw	ra,4(sp)
 100bb58:	df000017 	ldw	fp,0(sp)
 100bb5c:	dec00204 	addi	sp,sp,8
 100bb60:	f800283a 	ret

0100bb64 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 100bb64:	defff604 	addi	sp,sp,-40
 100bb68:	dfc00915 	stw	ra,36(sp)
 100bb6c:	df000815 	stw	fp,32(sp)
 100bb70:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100bb74:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 100bb78:	10157240 	call	1015724 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bb7c:	0005303a 	rdctl	r2,status
 100bb80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bb84:	e0fffb17 	ldw	r3,-20(fp)
 100bb88:	00bfff84 	movi	r2,-2
 100bb8c:	1884703a 	and	r2,r3,r2
 100bb90:	1001703a 	wrctl	status,r2
  
  return context;
 100bb94:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 100bb98:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 100bb9c:	d0a71817 	ldw	r2,-25504(gp)
 100bba0:	10800044 	addi	r2,r2,1
 100bba4:	d0a71815 	stw	r2,-25504(gp)
 100bba8:	e0bffc17 	ldw	r2,-16(fp)
 100bbac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bbb0:	e0bffa17 	ldw	r2,-24(fp)
 100bbb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 100bbb8:	d0a70843 	ldbu	r2,-25567(gp)
 100bbbc:	10803fcc 	andi	r2,r2,255
 100bbc0:	10800058 	cmpnei	r2,r2,1
 100bbc4:	1000721e 	bne	r2,zero,100bd90 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 100bbc8:	d0a70c03 	ldbu	r2,-25552(gp)
 100bbcc:	10803fcc 	andi	r2,r2,255
 100bbd0:	e0bfff15 	stw	r2,-4(fp)
 100bbd4:	e0ffff17 	ldw	r3,-4(fp)
 100bbd8:	18800060 	cmpeqi	r2,r3,1
 100bbdc:	10000a1e 	bne	r2,zero,100bc08 <OSTimeTick+0xa4>
 100bbe0:	e0ffff17 	ldw	r3,-4(fp)
 100bbe4:	188000a0 	cmpeqi	r2,r3,2
 100bbe8:	1000091e 	bne	r2,zero,100bc10 <OSTimeTick+0xac>
 100bbec:	e0ffff17 	ldw	r3,-4(fp)
 100bbf0:	1805003a 	cmpeq	r2,r3,zero
 100bbf4:	1000011e 	bne	r2,zero,100bbfc <OSTimeTick+0x98>
 100bbf8:	00000a06 	br	100bc24 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 100bbfc:	00800044 	movi	r2,1
 100bc00:	e0bffd05 	stb	r2,-12(fp)
                 break;
 100bc04:	00000a06 	br	100bc30 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 100bc08:	e03ffd05 	stb	zero,-12(fp)
                 break;
 100bc0c:	00000806 	br	100bc30 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 100bc10:	00800044 	movi	r2,1
 100bc14:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 100bc18:	00800044 	movi	r2,1
 100bc1c:	d0a70c05 	stb	r2,-25552(gp)
                 break;
 100bc20:	00000306 	br	100bc30 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 100bc24:	00800044 	movi	r2,1
 100bc28:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 100bc2c:	d0270c05 	stb	zero,-25552(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 100bc30:	e0bffd03 	ldbu	r2,-12(fp)
 100bc34:	1005003a 	cmpeq	r2,r2,zero
 100bc38:	1000551e 	bne	r2,zero,100bd90 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 100bc3c:	d0a70b17 	ldw	r2,-25556(gp)
 100bc40:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100bc44:	00004d06 	br	100bd7c <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bc48:	0005303a 	rdctl	r2,status
 100bc4c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bc50:	e0fff917 	ldw	r3,-28(fp)
 100bc54:	00bfff84 	movi	r2,-2
 100bc58:	1884703a 	and	r2,r3,r2
 100bc5c:	1001703a 	wrctl	status,r2
  
  return context;
 100bc60:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 100bc64:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 100bc68:	e0bffe17 	ldw	r2,-8(fp)
 100bc6c:	10800b8b 	ldhu	r2,46(r2)
 100bc70:	10bfffcc 	andi	r2,r2,65535
 100bc74:	1005003a 	cmpeq	r2,r2,zero
 100bc78:	1000391e 	bne	r2,zero,100bd60 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 100bc7c:	e0bffe17 	ldw	r2,-8(fp)
 100bc80:	10800b8b 	ldhu	r2,46(r2)
 100bc84:	10bfffc4 	addi	r2,r2,-1
 100bc88:	1007883a 	mov	r3,r2
 100bc8c:	e0bffe17 	ldw	r2,-8(fp)
 100bc90:	10c00b8d 	sth	r3,46(r2)
 100bc94:	e0bffe17 	ldw	r2,-8(fp)
 100bc98:	10800b8b 	ldhu	r2,46(r2)
 100bc9c:	10bfffcc 	andi	r2,r2,65535
 100bca0:	1004c03a 	cmpne	r2,r2,zero
 100bca4:	10002e1e 	bne	r2,zero,100bd60 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 100bca8:	e0bffe17 	ldw	r2,-8(fp)
 100bcac:	10800c03 	ldbu	r2,48(r2)
 100bcb0:	10803fcc 	andi	r2,r2,255
 100bcb4:	10800dcc 	andi	r2,r2,55
 100bcb8:	1005003a 	cmpeq	r2,r2,zero
 100bcbc:	10000b1e 	bne	r2,zero,100bcec <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 100bcc0:	e0bffe17 	ldw	r2,-8(fp)
 100bcc4:	10c00c03 	ldbu	r3,48(r2)
 100bcc8:	00bff204 	movi	r2,-56
 100bccc:	1884703a 	and	r2,r3,r2
 100bcd0:	1007883a 	mov	r3,r2
 100bcd4:	e0bffe17 	ldw	r2,-8(fp)
 100bcd8:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 100bcdc:	e0fffe17 	ldw	r3,-8(fp)
 100bce0:	00800044 	movi	r2,1
 100bce4:	18800c45 	stb	r2,49(r3)
 100bce8:	00000206 	br	100bcf4 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100bcec:	e0bffe17 	ldw	r2,-8(fp)
 100bcf0:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 100bcf4:	e0bffe17 	ldw	r2,-8(fp)
 100bcf8:	10800c03 	ldbu	r2,48(r2)
 100bcfc:	10803fcc 	andi	r2,r2,255
 100bd00:	1080020c 	andi	r2,r2,8
 100bd04:	1004c03a 	cmpne	r2,r2,zero
 100bd08:	1000151e 	bne	r2,zero,100bd60 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 100bd0c:	e0bffe17 	ldw	r2,-8(fp)
 100bd10:	10c00d83 	ldbu	r3,54(r2)
 100bd14:	d0a71403 	ldbu	r2,-25520(gp)
 100bd18:	1884b03a 	or	r2,r3,r2
 100bd1c:	d0a71405 	stb	r2,-25520(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100bd20:	e0bffe17 	ldw	r2,-8(fp)
 100bd24:	10800d03 	ldbu	r2,52(r2)
 100bd28:	11003fcc 	andi	r4,r2,255
 100bd2c:	e0bffe17 	ldw	r2,-8(fp)
 100bd30:	10800d03 	ldbu	r2,52(r2)
 100bd34:	10c03fcc 	andi	r3,r2,255
 100bd38:	d0a71444 	addi	r2,gp,-25519
 100bd3c:	1885883a 	add	r2,r3,r2
 100bd40:	10c00003 	ldbu	r3,0(r2)
 100bd44:	e0bffe17 	ldw	r2,-8(fp)
 100bd48:	10800d43 	ldbu	r2,53(r2)
 100bd4c:	1884b03a 	or	r2,r3,r2
 100bd50:	1007883a 	mov	r3,r2
 100bd54:	d0a71444 	addi	r2,gp,-25519
 100bd58:	2085883a 	add	r2,r4,r2
 100bd5c:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 100bd60:	e0bffe17 	ldw	r2,-8(fp)
 100bd64:	10800517 	ldw	r2,20(r2)
 100bd68:	e0bffe15 	stw	r2,-8(fp)
 100bd6c:	e0bffc17 	ldw	r2,-16(fp)
 100bd70:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bd74:	e0bff817 	ldw	r2,-32(fp)
 100bd78:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100bd7c:	e0bffe17 	ldw	r2,-8(fp)
 100bd80:	10800c83 	ldbu	r2,50(r2)
 100bd84:	10803fcc 	andi	r2,r2,255
 100bd88:	10800518 	cmpnei	r2,r2,20
 100bd8c:	103fae1e 	bne	r2,zero,100bc48 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 100bd90:	e037883a 	mov	sp,fp
 100bd94:	dfc00117 	ldw	ra,4(sp)
 100bd98:	df000017 	ldw	fp,0(sp)
 100bd9c:	dec00204 	addi	sp,sp,8
 100bda0:	f800283a 	ret

0100bda4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 100bda4:	deffff04 	addi	sp,sp,-4
 100bda8:	df000015 	stw	fp,0(sp)
 100bdac:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 100bdb0:	00804784 	movi	r2,286
}
 100bdb4:	e037883a 	mov	sp,fp
 100bdb8:	df000017 	ldw	fp,0(sp)
 100bdbc:	dec00104 	addi	sp,sp,4
 100bdc0:	f800283a 	ret

0100bdc4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 100bdc4:	deffff04 	addi	sp,sp,-4
 100bdc8:	df000015 	stw	fp,0(sp)
 100bdcc:	d839883a 	mov	fp,sp
}
 100bdd0:	e037883a 	mov	sp,fp
 100bdd4:	df000017 	ldw	fp,0(sp)
 100bdd8:	dec00104 	addi	sp,sp,4
 100bddc:	f800283a 	ret

0100bde0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 100bde0:	defff804 	addi	sp,sp,-32
 100bde4:	dfc00715 	stw	ra,28(sp)
 100bde8:	df000615 	stw	fp,24(sp)
 100bdec:	df000604 	addi	fp,sp,24
 100bdf0:	e13ffc15 	stw	r4,-16(fp)
 100bdf4:	e17ffd15 	stw	r5,-12(fp)
 100bdf8:	e1bffe05 	stb	r6,-8(fp)
 100bdfc:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 100be00:	e0bffc17 	ldw	r2,-16(fp)
 100be04:	10800283 	ldbu	r2,10(r2)
 100be08:	10c03fcc 	andi	r3,r2,255
 100be0c:	00804074 	movhi	r2,257
 100be10:	10988704 	addi	r2,r2,25116
 100be14:	10c5883a 	add	r2,r2,r3
 100be18:	10800003 	ldbu	r2,0(r2)
 100be1c:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 100be20:	e0fffa83 	ldbu	r3,-22(fp)
 100be24:	e0bffc17 	ldw	r2,-16(fp)
 100be28:	1885883a 	add	r2,r3,r2
 100be2c:	10800204 	addi	r2,r2,8
 100be30:	108000c3 	ldbu	r2,3(r2)
 100be34:	10c03fcc 	andi	r3,r2,255
 100be38:	00804074 	movhi	r2,257
 100be3c:	10988704 	addi	r2,r2,25116
 100be40:	10c5883a 	add	r2,r2,r3
 100be44:	10800003 	ldbu	r2,0(r2)
 100be48:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 100be4c:	e0bffa83 	ldbu	r2,-22(fp)
 100be50:	100490fa 	slli	r2,r2,3
 100be54:	1007883a 	mov	r3,r2
 100be58:	e0bffa43 	ldbu	r2,-23(fp)
 100be5c:	1885883a 	add	r2,r3,r2
 100be60:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 100be64:	e0bffa03 	ldbu	r2,-24(fp)
 100be68:	00c040b4 	movhi	r3,258
 100be6c:	18cb0b04 	addi	r3,r3,11308
 100be70:	1085883a 	add	r2,r2,r2
 100be74:	1085883a 	add	r2,r2,r2
 100be78:	10c5883a 	add	r2,r2,r3
 100be7c:	10800017 	ldw	r2,0(r2)
 100be80:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 100be84:	e0bffb17 	ldw	r2,-20(fp)
 100be88:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 100be8c:	e0fffb17 	ldw	r3,-20(fp)
 100be90:	e0bffd17 	ldw	r2,-12(fp)
 100be94:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100be98:	e0bffb17 	ldw	r2,-20(fp)
 100be9c:	10800c03 	ldbu	r2,48(r2)
 100bea0:	1007883a 	mov	r3,r2
 100bea4:	e0bffe03 	ldbu	r2,-8(fp)
 100bea8:	0084303a 	nor	r2,zero,r2
 100beac:	1884703a 	and	r2,r3,r2
 100beb0:	1007883a 	mov	r3,r2
 100beb4:	e0bffb17 	ldw	r2,-20(fp)
 100beb8:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 100bebc:	e0fffb17 	ldw	r3,-20(fp)
 100bec0:	e0bfff03 	ldbu	r2,-4(fp)
 100bec4:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 100bec8:	e0bffb17 	ldw	r2,-20(fp)
 100becc:	10800c03 	ldbu	r2,48(r2)
 100bed0:	10803fcc 	andi	r2,r2,255
 100bed4:	1080020c 	andi	r2,r2,8
 100bed8:	1004c03a 	cmpne	r2,r2,zero
 100bedc:	1000111e 	bne	r2,zero,100bf24 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 100bee0:	e0bffb17 	ldw	r2,-20(fp)
 100bee4:	10c00d83 	ldbu	r3,54(r2)
 100bee8:	d0a71403 	ldbu	r2,-25520(gp)
 100beec:	1884b03a 	or	r2,r3,r2
 100bef0:	d0a71405 	stb	r2,-25520(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100bef4:	e13ffa83 	ldbu	r4,-22(fp)
 100bef8:	e0fffa83 	ldbu	r3,-22(fp)
 100befc:	d0a71444 	addi	r2,gp,-25519
 100bf00:	1885883a 	add	r2,r3,r2
 100bf04:	10c00003 	ldbu	r3,0(r2)
 100bf08:	e0bffb17 	ldw	r2,-20(fp)
 100bf0c:	10800d43 	ldbu	r2,53(r2)
 100bf10:	1884b03a 	or	r2,r3,r2
 100bf14:	1007883a 	mov	r3,r2
 100bf18:	d0a71444 	addi	r2,gp,-25519
 100bf1c:	2085883a 	add	r2,r4,r2
 100bf20:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 100bf24:	e13ffb17 	ldw	r4,-20(fp)
 100bf28:	e17ffc17 	ldw	r5,-16(fp)
 100bf2c:	100c1d80 	call	100c1d8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 100bf30:	e0bffb17 	ldw	r2,-20(fp)
 100bf34:	10800817 	ldw	r2,32(r2)
 100bf38:	1005003a 	cmpeq	r2,r2,zero
 100bf3c:	1000071e 	bne	r2,zero,100bf5c <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100bf40:	e0bffb17 	ldw	r2,-20(fp)
 100bf44:	11400817 	ldw	r5,32(r2)
 100bf48:	e13ffb17 	ldw	r4,-20(fp)
 100bf4c:	100c2900 	call	100c290 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 100bf50:	e0fffb17 	ldw	r3,-20(fp)
 100bf54:	e0bffc17 	ldw	r2,-16(fp)
 100bf58:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 100bf5c:	e0bffa03 	ldbu	r2,-24(fp)
}
 100bf60:	e037883a 	mov	sp,fp
 100bf64:	dfc00117 	ldw	ra,4(sp)
 100bf68:	df000017 	ldw	fp,0(sp)
 100bf6c:	dec00204 	addi	sp,sp,8
 100bf70:	f800283a 	ret

0100bf74 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 100bf74:	defffd04 	addi	sp,sp,-12
 100bf78:	df000215 	stw	fp,8(sp)
 100bf7c:	df000204 	addi	fp,sp,8
 100bf80:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 100bf84:	d0e71717 	ldw	r3,-25508(gp)
 100bf88:	e0bfff17 	ldw	r2,-4(fp)
 100bf8c:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 100bf90:	d0a71717 	ldw	r2,-25508(gp)
 100bf94:	10800d03 	ldbu	r2,52(r2)
 100bf98:	11003fcc 	andi	r4,r2,255
 100bf9c:	d0a71717 	ldw	r2,-25508(gp)
 100bfa0:	10800d03 	ldbu	r2,52(r2)
 100bfa4:	10c03fcc 	andi	r3,r2,255
 100bfa8:	e0bfff17 	ldw	r2,-4(fp)
 100bfac:	1885883a 	add	r2,r3,r2
 100bfb0:	10800204 	addi	r2,r2,8
 100bfb4:	10c000c3 	ldbu	r3,3(r2)
 100bfb8:	d0a71717 	ldw	r2,-25508(gp)
 100bfbc:	10800d43 	ldbu	r2,53(r2)
 100bfc0:	1884b03a 	or	r2,r3,r2
 100bfc4:	1007883a 	mov	r3,r2
 100bfc8:	e0bfff17 	ldw	r2,-4(fp)
 100bfcc:	2085883a 	add	r2,r4,r2
 100bfd0:	10800204 	addi	r2,r2,8
 100bfd4:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100bfd8:	e0bfff17 	ldw	r2,-4(fp)
 100bfdc:	10c00283 	ldbu	r3,10(r2)
 100bfe0:	d0a71717 	ldw	r2,-25508(gp)
 100bfe4:	10800d83 	ldbu	r2,54(r2)
 100bfe8:	1884b03a 	or	r2,r3,r2
 100bfec:	1007883a 	mov	r3,r2
 100bff0:	e0bfff17 	ldw	r2,-4(fp)
 100bff4:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100bff8:	d0a71717 	ldw	r2,-25508(gp)
 100bffc:	10800d03 	ldbu	r2,52(r2)
 100c000:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100c004:	e13ffe03 	ldbu	r4,-8(fp)
 100c008:	e0fffe03 	ldbu	r3,-8(fp)
 100c00c:	d0a71444 	addi	r2,gp,-25519
 100c010:	1885883a 	add	r2,r3,r2
 100c014:	10800003 	ldbu	r2,0(r2)
 100c018:	1007883a 	mov	r3,r2
 100c01c:	d0a71717 	ldw	r2,-25508(gp)
 100c020:	10800d43 	ldbu	r2,53(r2)
 100c024:	0084303a 	nor	r2,zero,r2
 100c028:	1884703a 	and	r2,r3,r2
 100c02c:	1007883a 	mov	r3,r2
 100c030:	d0a71444 	addi	r2,gp,-25519
 100c034:	2085883a 	add	r2,r4,r2
 100c038:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100c03c:	e0fffe03 	ldbu	r3,-8(fp)
 100c040:	d0a71444 	addi	r2,gp,-25519
 100c044:	1885883a 	add	r2,r3,r2
 100c048:	10800003 	ldbu	r2,0(r2)
 100c04c:	10803fcc 	andi	r2,r2,255
 100c050:	1004c03a 	cmpne	r2,r2,zero
 100c054:	1000071e 	bne	r2,zero,100c074 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100c058:	d0a71717 	ldw	r2,-25508(gp)
 100c05c:	10800d83 	ldbu	r2,54(r2)
 100c060:	0084303a 	nor	r2,zero,r2
 100c064:	1007883a 	mov	r3,r2
 100c068:	d0a71403 	ldbu	r2,-25520(gp)
 100c06c:	1884703a 	and	r2,r3,r2
 100c070:	d0a71405 	stb	r2,-25520(gp)
    }
}
 100c074:	e037883a 	mov	sp,fp
 100c078:	df000017 	ldw	fp,0(sp)
 100c07c:	dec00104 	addi	sp,sp,4
 100c080:	f800283a 	ret

0100c084 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 100c084:	defffb04 	addi	sp,sp,-20
 100c088:	df000415 	stw	fp,16(sp)
 100c08c:	df000404 	addi	fp,sp,16
 100c090:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 100c094:	d0a71717 	ldw	r2,-25508(gp)
 100c098:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 100c09c:	d0e71717 	ldw	r3,-25508(gp)
 100c0a0:	e0bfff17 	ldw	r2,-4(fp)
 100c0a4:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 100c0a8:	e0bfff17 	ldw	r2,-4(fp)
 100c0ac:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 100c0b0:	e0bffe17 	ldw	r2,-8(fp)
 100c0b4:	10800017 	ldw	r2,0(r2)
 100c0b8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100c0bc:	00002006 	br	100c140 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 100c0c0:	d0a71717 	ldw	r2,-25508(gp)
 100c0c4:	10800d03 	ldbu	r2,52(r2)
 100c0c8:	11003fcc 	andi	r4,r2,255
 100c0cc:	d0a71717 	ldw	r2,-25508(gp)
 100c0d0:	10800d03 	ldbu	r2,52(r2)
 100c0d4:	10c03fcc 	andi	r3,r2,255
 100c0d8:	e0bffd17 	ldw	r2,-12(fp)
 100c0dc:	1885883a 	add	r2,r3,r2
 100c0e0:	10800204 	addi	r2,r2,8
 100c0e4:	10c000c3 	ldbu	r3,3(r2)
 100c0e8:	d0a71717 	ldw	r2,-25508(gp)
 100c0ec:	10800d43 	ldbu	r2,53(r2)
 100c0f0:	1884b03a 	or	r2,r3,r2
 100c0f4:	1007883a 	mov	r3,r2
 100c0f8:	e0bffd17 	ldw	r2,-12(fp)
 100c0fc:	2085883a 	add	r2,r4,r2
 100c100:	10800204 	addi	r2,r2,8
 100c104:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100c108:	e0bffd17 	ldw	r2,-12(fp)
 100c10c:	10c00283 	ldbu	r3,10(r2)
 100c110:	d0a71717 	ldw	r2,-25508(gp)
 100c114:	10800d83 	ldbu	r2,54(r2)
 100c118:	1884b03a 	or	r2,r3,r2
 100c11c:	1007883a 	mov	r3,r2
 100c120:	e0bffd17 	ldw	r2,-12(fp)
 100c124:	10c00285 	stb	r3,10(r2)
        pevents++;
 100c128:	e0bffe17 	ldw	r2,-8(fp)
 100c12c:	10800104 	addi	r2,r2,4
 100c130:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 100c134:	e0bffe17 	ldw	r2,-8(fp)
 100c138:	10800017 	ldw	r2,0(r2)
 100c13c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100c140:	e0bffd17 	ldw	r2,-12(fp)
 100c144:	1004c03a 	cmpne	r2,r2,zero
 100c148:	103fdd1e 	bne	r2,zero,100c0c0 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100c14c:	d0a71717 	ldw	r2,-25508(gp)
 100c150:	10800d03 	ldbu	r2,52(r2)
 100c154:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100c158:	e13ffc03 	ldbu	r4,-16(fp)
 100c15c:	e0fffc03 	ldbu	r3,-16(fp)
 100c160:	d0a71444 	addi	r2,gp,-25519
 100c164:	1885883a 	add	r2,r3,r2
 100c168:	10800003 	ldbu	r2,0(r2)
 100c16c:	1007883a 	mov	r3,r2
 100c170:	d0a71717 	ldw	r2,-25508(gp)
 100c174:	10800d43 	ldbu	r2,53(r2)
 100c178:	0084303a 	nor	r2,zero,r2
 100c17c:	1884703a 	and	r2,r3,r2
 100c180:	1007883a 	mov	r3,r2
 100c184:	d0a71444 	addi	r2,gp,-25519
 100c188:	2085883a 	add	r2,r4,r2
 100c18c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 100c190:	e0fffc03 	ldbu	r3,-16(fp)
 100c194:	d0a71444 	addi	r2,gp,-25519
 100c198:	1885883a 	add	r2,r3,r2
 100c19c:	10800003 	ldbu	r2,0(r2)
 100c1a0:	10803fcc 	andi	r2,r2,255
 100c1a4:	1004c03a 	cmpne	r2,r2,zero
 100c1a8:	1000071e 	bne	r2,zero,100c1c8 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100c1ac:	d0a71717 	ldw	r2,-25508(gp)
 100c1b0:	10800d83 	ldbu	r2,54(r2)
 100c1b4:	0084303a 	nor	r2,zero,r2
 100c1b8:	1007883a 	mov	r3,r2
 100c1bc:	d0a71403 	ldbu	r2,-25520(gp)
 100c1c0:	1884703a 	and	r2,r3,r2
 100c1c4:	d0a71405 	stb	r2,-25520(gp)
    }
}
 100c1c8:	e037883a 	mov	sp,fp
 100c1cc:	df000017 	ldw	fp,0(sp)
 100c1d0:	dec00104 	addi	sp,sp,4
 100c1d4:	f800283a 	ret

0100c1d8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 100c1d8:	defffc04 	addi	sp,sp,-16
 100c1dc:	df000315 	stw	fp,12(sp)
 100c1e0:	df000304 	addi	fp,sp,12
 100c1e4:	e13ffe15 	stw	r4,-8(fp)
 100c1e8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 100c1ec:	e0bffe17 	ldw	r2,-8(fp)
 100c1f0:	10800d03 	ldbu	r2,52(r2)
 100c1f4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 100c1f8:	e13ffd03 	ldbu	r4,-12(fp)
 100c1fc:	e0fffd03 	ldbu	r3,-12(fp)
 100c200:	e0bfff17 	ldw	r2,-4(fp)
 100c204:	1885883a 	add	r2,r3,r2
 100c208:	10800204 	addi	r2,r2,8
 100c20c:	108000c3 	ldbu	r2,3(r2)
 100c210:	1007883a 	mov	r3,r2
 100c214:	e0bffe17 	ldw	r2,-8(fp)
 100c218:	10800d43 	ldbu	r2,53(r2)
 100c21c:	0084303a 	nor	r2,zero,r2
 100c220:	1884703a 	and	r2,r3,r2
 100c224:	1007883a 	mov	r3,r2
 100c228:	e0bfff17 	ldw	r2,-4(fp)
 100c22c:	2085883a 	add	r2,r4,r2
 100c230:	10800204 	addi	r2,r2,8
 100c234:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 100c238:	e0fffd03 	ldbu	r3,-12(fp)
 100c23c:	e0bfff17 	ldw	r2,-4(fp)
 100c240:	1885883a 	add	r2,r3,r2
 100c244:	10800204 	addi	r2,r2,8
 100c248:	108000c3 	ldbu	r2,3(r2)
 100c24c:	10803fcc 	andi	r2,r2,255
 100c250:	1004c03a 	cmpne	r2,r2,zero
 100c254:	10000a1e 	bne	r2,zero,100c280 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 100c258:	e0bfff17 	ldw	r2,-4(fp)
 100c25c:	10800283 	ldbu	r2,10(r2)
 100c260:	1007883a 	mov	r3,r2
 100c264:	e0bffe17 	ldw	r2,-8(fp)
 100c268:	10800d83 	ldbu	r2,54(r2)
 100c26c:	0084303a 	nor	r2,zero,r2
 100c270:	1884703a 	and	r2,r3,r2
 100c274:	1007883a 	mov	r3,r2
 100c278:	e0bfff17 	ldw	r2,-4(fp)
 100c27c:	10c00285 	stb	r3,10(r2)
    }
}
 100c280:	e037883a 	mov	sp,fp
 100c284:	df000017 	ldw	fp,0(sp)
 100c288:	dec00104 	addi	sp,sp,4
 100c28c:	f800283a 	ret

0100c290 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 100c290:	defffa04 	addi	sp,sp,-24
 100c294:	df000515 	stw	fp,20(sp)
 100c298:	df000504 	addi	fp,sp,20
 100c29c:	e13ffe15 	stw	r4,-8(fp)
 100c2a0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 100c2a4:	e0bffe17 	ldw	r2,-8(fp)
 100c2a8:	10800d03 	ldbu	r2,52(r2)
 100c2ac:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 100c2b0:	e0bffe17 	ldw	r2,-8(fp)
 100c2b4:	10800d83 	ldbu	r2,54(r2)
 100c2b8:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 100c2bc:	e0bffe17 	ldw	r2,-8(fp)
 100c2c0:	10800d43 	ldbu	r2,53(r2)
 100c2c4:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 100c2c8:	e0bfff17 	ldw	r2,-4(fp)
 100c2cc:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 100c2d0:	e0bffd17 	ldw	r2,-12(fp)
 100c2d4:	10800017 	ldw	r2,0(r2)
 100c2d8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100c2dc:	00002606 	br	100c378 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 100c2e0:	e13ffb83 	ldbu	r4,-18(fp)
 100c2e4:	e0fffb83 	ldbu	r3,-18(fp)
 100c2e8:	e0bffc17 	ldw	r2,-16(fp)
 100c2ec:	1885883a 	add	r2,r3,r2
 100c2f0:	10800204 	addi	r2,r2,8
 100c2f4:	108000c3 	ldbu	r2,3(r2)
 100c2f8:	1007883a 	mov	r3,r2
 100c2fc:	e0bffb03 	ldbu	r2,-20(fp)
 100c300:	0084303a 	nor	r2,zero,r2
 100c304:	1884703a 	and	r2,r3,r2
 100c308:	1007883a 	mov	r3,r2
 100c30c:	e0bffc17 	ldw	r2,-16(fp)
 100c310:	2085883a 	add	r2,r4,r2
 100c314:	10800204 	addi	r2,r2,8
 100c318:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 100c31c:	e0fffb83 	ldbu	r3,-18(fp)
 100c320:	e0bffc17 	ldw	r2,-16(fp)
 100c324:	1885883a 	add	r2,r3,r2
 100c328:	10800204 	addi	r2,r2,8
 100c32c:	108000c3 	ldbu	r2,3(r2)
 100c330:	10803fcc 	andi	r2,r2,255
 100c334:	1004c03a 	cmpne	r2,r2,zero
 100c338:	1000091e 	bne	r2,zero,100c360 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 100c33c:	e0bffc17 	ldw	r2,-16(fp)
 100c340:	10800283 	ldbu	r2,10(r2)
 100c344:	1007883a 	mov	r3,r2
 100c348:	e0bffb43 	ldbu	r2,-19(fp)
 100c34c:	0084303a 	nor	r2,zero,r2
 100c350:	1884703a 	and	r2,r3,r2
 100c354:	1007883a 	mov	r3,r2
 100c358:	e0bffc17 	ldw	r2,-16(fp)
 100c35c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 100c360:	e0bffd17 	ldw	r2,-12(fp)
 100c364:	10800104 	addi	r2,r2,4
 100c368:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 100c36c:	e0bffd17 	ldw	r2,-12(fp)
 100c370:	10800017 	ldw	r2,0(r2)
 100c374:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100c378:	e0bffc17 	ldw	r2,-16(fp)
 100c37c:	1004c03a 	cmpne	r2,r2,zero
 100c380:	103fd71e 	bne	r2,zero,100c2e0 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 100c384:	e037883a 	mov	sp,fp
 100c388:	df000017 	ldw	fp,0(sp)
 100c38c:	dec00104 	addi	sp,sp,4
 100c390:	f800283a 	ret

0100c394 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 100c394:	defffc04 	addi	sp,sp,-16
 100c398:	df000315 	stw	fp,12(sp)
 100c39c:	df000304 	addi	fp,sp,12
 100c3a0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 100c3a4:	e0bfff17 	ldw	r2,-4(fp)
 100c3a8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 100c3ac:	e0bfff17 	ldw	r2,-4(fp)
 100c3b0:	108002c4 	addi	r2,r2,11
 100c3b4:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100c3b8:	e03ffd05 	stb	zero,-12(fp)
 100c3bc:	00000806 	br	100c3e0 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 100c3c0:	e0bffe17 	ldw	r2,-8(fp)
 100c3c4:	10000005 	stb	zero,0(r2)
 100c3c8:	e0bffe17 	ldw	r2,-8(fp)
 100c3cc:	10800044 	addi	r2,r2,1
 100c3d0:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 100c3d4:	e0bffd03 	ldbu	r2,-12(fp)
 100c3d8:	10800044 	addi	r2,r2,1
 100c3dc:	e0bffd05 	stb	r2,-12(fp)
 100c3e0:	e0bffd03 	ldbu	r2,-12(fp)
 100c3e4:	108000f0 	cmpltui	r2,r2,3
 100c3e8:	103ff51e 	bne	r2,zero,100c3c0 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 100c3ec:	e037883a 	mov	sp,fp
 100c3f0:	df000017 	ldw	fp,0(sp)
 100c3f4:	dec00104 	addi	sp,sp,4
 100c3f8:	f800283a 	ret

0100c3fc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 100c3fc:	defffb04 	addi	sp,sp,-20
 100c400:	dfc00415 	stw	ra,16(sp)
 100c404:	df000315 	stw	fp,12(sp)
 100c408:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 100c40c:	010040b4 	movhi	r4,258
 100c410:	2106f704 	addi	r4,r4,7132
 100c414:	0142d004 	movi	r5,2880
 100c418:	100c7600 	call	100c760 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 100c41c:	008040b4 	movhi	r2,258
 100c420:	1086f704 	addi	r2,r2,7132
 100c424:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 100c428:	008040b4 	movhi	r2,258
 100c42c:	10870304 	addi	r2,r2,7180
 100c430:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100c434:	e03fff0d 	sth	zero,-4(fp)
 100c438:	00001306 	br	100c488 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100c43c:	e0bffe17 	ldw	r2,-8(fp)
 100c440:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 100c444:	e0fffe17 	ldw	r3,-8(fp)
 100c448:	e0bffd17 	ldw	r2,-12(fp)
 100c44c:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 100c450:	e0fffe17 	ldw	r3,-8(fp)
 100c454:	00800fc4 	movi	r2,63
 100c458:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 100c45c:	e0bffe17 	ldw	r2,-8(fp)
 100c460:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 100c464:	e0bffe17 	ldw	r2,-8(fp)
 100c468:	10800c04 	addi	r2,r2,48
 100c46c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 100c470:	e0bffd17 	ldw	r2,-12(fp)
 100c474:	10800c04 	addi	r2,r2,48
 100c478:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100c47c:	e0bfff0b 	ldhu	r2,-4(fp)
 100c480:	10800044 	addi	r2,r2,1
 100c484:	e0bfff0d 	sth	r2,-4(fp)
 100c488:	e0bfff0b 	ldhu	r2,-4(fp)
 100c48c:	10800ef0 	cmpltui	r2,r2,59
 100c490:	103fea1e 	bne	r2,zero,100c43c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 100c494:	e0bffe17 	ldw	r2,-8(fp)
 100c498:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 100c49c:	e0bffe17 	ldw	r2,-8(fp)
 100c4a0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 100c4a4:	e0fffe17 	ldw	r3,-8(fp)
 100c4a8:	00800fc4 	movi	r2,63
 100c4ac:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 100c4b0:	e0bffe17 	ldw	r2,-8(fp)
 100c4b4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 100c4b8:	008040b4 	movhi	r2,258
 100c4bc:	1086f704 	addi	r2,r2,7132
 100c4c0:	d0a71515 	stw	r2,-25516(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 100c4c4:	e037883a 	mov	sp,fp
 100c4c8:	dfc00117 	ldw	ra,4(sp)
 100c4cc:	df000017 	ldw	fp,0(sp)
 100c4d0:	dec00204 	addi	sp,sp,8
 100c4d4:	f800283a 	ret

0100c4d8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 100c4d8:	deffff04 	addi	sp,sp,-4
 100c4dc:	df000015 	stw	fp,0(sp)
 100c4e0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 100c4e4:	d0271815 	stw	zero,-25504(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 100c4e8:	d0271605 	stb	zero,-25512(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 100c4ec:	d0270805 	stb	zero,-25568(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 100c4f0:	d0271045 	stb	zero,-25535(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 100c4f4:	d0270845 	stb	zero,-25567(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 100c4f8:	d0270d15 	stw	zero,-25548(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 100c4fc:	d0270915 	stw	zero,-25564(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 100c500:	d0271b15 	stw	zero,-25492(gp)
    OSIdleCtrMax  = 0L;
 100c504:	d0270e15 	stw	zero,-25544(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 100c508:	d0271a05 	stb	zero,-25496(gp)
#endif
}
 100c50c:	e037883a 	mov	sp,fp
 100c510:	df000017 	ldw	fp,0(sp)
 100c514:	dec00104 	addi	sp,sp,4
 100c518:	f800283a 	ret

0100c51c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 100c51c:	defffd04 	addi	sp,sp,-12
 100c520:	df000215 	stw	fp,8(sp)
 100c524:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 100c528:	d0271405 	stb	zero,-25520(gp)
    prdytbl       = &OSRdyTbl[0];
 100c52c:	d0a71444 	addi	r2,gp,-25519
 100c530:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100c534:	e03fff05 	stb	zero,-4(fp)
 100c538:	00000806 	br	100c55c <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 100c53c:	e0bffe17 	ldw	r2,-8(fp)
 100c540:	10000005 	stb	zero,0(r2)
 100c544:	e0bffe17 	ldw	r2,-8(fp)
 100c548:	10800044 	addi	r2,r2,1
 100c54c:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 100c550:	e0bfff03 	ldbu	r2,-4(fp)
 100c554:	10800044 	addi	r2,r2,1
 100c558:	e0bfff05 	stb	r2,-4(fp)
 100c55c:	e0bfff03 	ldbu	r2,-4(fp)
 100c560:	108000f0 	cmpltui	r2,r2,3
 100c564:	103ff51e 	bne	r2,zero,100c53c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 100c568:	d0270a45 	stb	zero,-25559(gp)
    OSPrioHighRdy = 0;
 100c56c:	d0270a05 	stb	zero,-25560(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 100c570:	d0271215 	stw	zero,-25528(gp)
    OSTCBCur      = (OS_TCB *)0;
 100c574:	d0271715 	stw	zero,-25508(gp)
}
 100c578:	e037883a 	mov	sp,fp
 100c57c:	df000017 	ldw	fp,0(sp)
 100c580:	dec00104 	addi	sp,sp,4
 100c584:	f800283a 	ret

0100c588 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 100c588:	defff804 	addi	sp,sp,-32
 100c58c:	dfc00715 	stw	ra,28(sp)
 100c590:	df000615 	stw	fp,24(sp)
 100c594:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 100c598:	018040b4 	movhi	r6,258
 100c59c:	3186f604 	addi	r6,r6,7128
 100c5a0:	00bfffd4 	movui	r2,65535
 100c5a4:	d8800015 	stw	r2,0(sp)
 100c5a8:	008040b4 	movhi	r2,258
 100c5ac:	1084f704 	addi	r2,r2,5084
 100c5b0:	d8800115 	stw	r2,4(sp)
 100c5b4:	00808004 	movi	r2,512
 100c5b8:	d8800215 	stw	r2,8(sp)
 100c5bc:	d8000315 	stw	zero,12(sp)
 100c5c0:	008000c4 	movi	r2,3
 100c5c4:	d8800415 	stw	r2,16(sp)
 100c5c8:	01004074 	movhi	r4,257
 100c5cc:	21328f04 	addi	r4,r4,-13764
 100c5d0:	000b883a 	mov	r5,zero
 100c5d4:	01c00504 	movi	r7,20
 100c5d8:	10118200 	call	1011820 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 100c5dc:	01404074 	movhi	r5,257
 100c5e0:	2958c704 	addi	r5,r5,25372
 100c5e4:	01000504 	movi	r4,20
 100c5e8:	e1bfff04 	addi	r6,fp,-4
 100c5ec:	10121540 	call	1012154 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 100c5f0:	e037883a 	mov	sp,fp
 100c5f4:	dfc00117 	ldw	ra,4(sp)
 100c5f8:	df000017 	ldw	fp,0(sp)
 100c5fc:	dec00204 	addi	sp,sp,8
 100c600:	f800283a 	ret

0100c604 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 100c604:	defff804 	addi	sp,sp,-32
 100c608:	dfc00715 	stw	ra,28(sp)
 100c60c:	df000615 	stw	fp,24(sp)
 100c610:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 100c614:	018040b4 	movhi	r6,258
 100c618:	31847e04 	addi	r6,r6,4600
 100c61c:	00bfff94 	movui	r2,65534
 100c620:	d8800015 	stw	r2,0(sp)
 100c624:	008040b4 	movhi	r2,258
 100c628:	10827f04 	addi	r2,r2,2556
 100c62c:	d8800115 	stw	r2,4(sp)
 100c630:	00808004 	movi	r2,512
 100c634:	d8800215 	stw	r2,8(sp)
 100c638:	d8000315 	stw	zero,12(sp)
 100c63c:	008000c4 	movi	r2,3
 100c640:	d8800415 	stw	r2,16(sp)
 100c644:	01004074 	movhi	r4,257
 100c648:	2132a604 	addi	r4,r4,-13672
 100c64c:	000b883a 	mov	r5,zero
 100c650:	01c004c4 	movi	r7,19
 100c654:	10118200 	call	1011820 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 100c658:	01404074 	movhi	r5,257
 100c65c:	2958cb04 	addi	r5,r5,25388
 100c660:	010004c4 	movi	r4,19
 100c664:	e1bfff04 	addi	r6,fp,-4
 100c668:	10121540 	call	1012154 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 100c66c:	e037883a 	mov	sp,fp
 100c670:	dfc00117 	ldw	ra,4(sp)
 100c674:	df000017 	ldw	fp,0(sp)
 100c678:	dec00204 	addi	sp,sp,8
 100c67c:	f800283a 	ret

0100c680 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 100c680:	defffb04 	addi	sp,sp,-20
 100c684:	dfc00415 	stw	ra,16(sp)
 100c688:	df000315 	stw	fp,12(sp)
 100c68c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 100c690:	010040b4 	movhi	r4,258
 100c694:	2109c704 	addi	r4,r4,10012
 100c698:	01414404 	movi	r5,1296
 100c69c:	100c7600 	call	100c760 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 100c6a0:	010040b4 	movhi	r4,258
 100c6a4:	210b0b04 	addi	r4,r4,11308
 100c6a8:	01401504 	movi	r5,84
 100c6ac:	100c7600 	call	100c760 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 100c6b0:	008040b4 	movhi	r2,258
 100c6b4:	1089c704 	addi	r2,r2,10012
 100c6b8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 100c6bc:	008040b4 	movhi	r2,258
 100c6c0:	1089e204 	addi	r2,r2,10120
 100c6c4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100c6c8:	e03fff05 	stb	zero,-4(fp)
 100c6cc:	00001106 	br	100c714 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 100c6d0:	e0fffe17 	ldw	r3,-8(fp)
 100c6d4:	e0bffd17 	ldw	r2,-12(fp)
 100c6d8:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 100c6dc:	e0fffe17 	ldw	r3,-8(fp)
 100c6e0:	00800fc4 	movi	r2,63
 100c6e4:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100c6e8:	e0bffe17 	ldw	r2,-8(fp)
 100c6ec:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 100c6f0:	e0bffe17 	ldw	r2,-8(fp)
 100c6f4:	10801b04 	addi	r2,r2,108
 100c6f8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 100c6fc:	e0bffd17 	ldw	r2,-12(fp)
 100c700:	10801b04 	addi	r2,r2,108
 100c704:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100c708:	e0bfff03 	ldbu	r2,-4(fp)
 100c70c:	10800044 	addi	r2,r2,1
 100c710:	e0bfff05 	stb	r2,-4(fp)
 100c714:	e0bfff03 	ldbu	r2,-4(fp)
 100c718:	108002f0 	cmpltui	r2,r2,11
 100c71c:	103fec1e 	bne	r2,zero,100c6d0 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 100c720:	e0bffe17 	ldw	r2,-8(fp)
 100c724:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 100c728:	e0fffe17 	ldw	r3,-8(fp)
 100c72c:	00800fc4 	movi	r2,63
 100c730:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100c734:	e0bffe17 	ldw	r2,-8(fp)
 100c738:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 100c73c:	d0270b15 	stw	zero,-25556(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 100c740:	008040b4 	movhi	r2,258
 100c744:	1089c704 	addi	r2,r2,10012
 100c748:	d0a70f15 	stw	r2,-25540(gp)
}
 100c74c:	e037883a 	mov	sp,fp
 100c750:	dfc00117 	ldw	ra,4(sp)
 100c754:	df000017 	ldw	fp,0(sp)
 100c758:	dec00204 	addi	sp,sp,8
 100c75c:	f800283a 	ret

0100c760 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 100c760:	defffd04 	addi	sp,sp,-12
 100c764:	df000215 	stw	fp,8(sp)
 100c768:	df000204 	addi	fp,sp,8
 100c76c:	e13ffe15 	stw	r4,-8(fp)
 100c770:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 100c774:	00000806 	br	100c798 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 100c778:	e0bffe17 	ldw	r2,-8(fp)
 100c77c:	10000005 	stb	zero,0(r2)
 100c780:	e0bffe17 	ldw	r2,-8(fp)
 100c784:	10800044 	addi	r2,r2,1
 100c788:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100c78c:	e0bfff0b 	ldhu	r2,-4(fp)
 100c790:	10bfffc4 	addi	r2,r2,-1
 100c794:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 100c798:	e0bfff0b 	ldhu	r2,-4(fp)
 100c79c:	1004c03a 	cmpne	r2,r2,zero
 100c7a0:	103ff51e 	bne	r2,zero,100c778 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 100c7a4:	e037883a 	mov	sp,fp
 100c7a8:	df000017 	ldw	fp,0(sp)
 100c7ac:	dec00104 	addi	sp,sp,4
 100c7b0:	f800283a 	ret

0100c7b4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 100c7b4:	defffc04 	addi	sp,sp,-16
 100c7b8:	df000315 	stw	fp,12(sp)
 100c7bc:	df000304 	addi	fp,sp,12
 100c7c0:	e13ffd15 	stw	r4,-12(fp)
 100c7c4:	e17ffe15 	stw	r5,-8(fp)
 100c7c8:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 100c7cc:	00000d06 	br	100c804 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 100c7d0:	e0bffe17 	ldw	r2,-8(fp)
 100c7d4:	10c00003 	ldbu	r3,0(r2)
 100c7d8:	e0bffd17 	ldw	r2,-12(fp)
 100c7dc:	10c00005 	stb	r3,0(r2)
 100c7e0:	e0bffd17 	ldw	r2,-12(fp)
 100c7e4:	10800044 	addi	r2,r2,1
 100c7e8:	e0bffd15 	stw	r2,-12(fp)
 100c7ec:	e0bffe17 	ldw	r2,-8(fp)
 100c7f0:	10800044 	addi	r2,r2,1
 100c7f4:	e0bffe15 	stw	r2,-8(fp)
        size--;
 100c7f8:	e0bfff0b 	ldhu	r2,-4(fp)
 100c7fc:	10bfffc4 	addi	r2,r2,-1
 100c800:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 100c804:	e0bfff0b 	ldhu	r2,-4(fp)
 100c808:	1004c03a 	cmpne	r2,r2,zero
 100c80c:	103ff01e 	bne	r2,zero,100c7d0 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 100c810:	e037883a 	mov	sp,fp
 100c814:	df000017 	ldw	fp,0(sp)
 100c818:	dec00104 	addi	sp,sp,4
 100c81c:	f800283a 	ret

0100c820 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 100c820:	defffb04 	addi	sp,sp,-20
 100c824:	dfc00415 	stw	ra,16(sp)
 100c828:	df000315 	stw	fp,12(sp)
 100c82c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100c830:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c834:	0005303a 	rdctl	r2,status
 100c838:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c83c:	e0fffe17 	ldw	r3,-8(fp)
 100c840:	00bfff84 	movi	r2,-2
 100c844:	1884703a 	and	r2,r3,r2
 100c848:	1001703a 	wrctl	status,r2
  
  return context;
 100c84c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 100c850:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 100c854:	d0a71603 	ldbu	r2,-25512(gp)
 100c858:	10803fcc 	andi	r2,r2,255
 100c85c:	1004c03a 	cmpne	r2,r2,zero
 100c860:	10001b1e 	bne	r2,zero,100c8d0 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 100c864:	d0a70803 	ldbu	r2,-25568(gp)
 100c868:	10803fcc 	andi	r2,r2,255
 100c86c:	1004c03a 	cmpne	r2,r2,zero
 100c870:	1000171e 	bne	r2,zero,100c8d0 <OS_Sched+0xb0>
            OS_SchedNew();
 100c874:	100c8f40 	call	100c8f4 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 100c878:	d0a70a03 	ldbu	r2,-25560(gp)
 100c87c:	d0e70a43 	ldbu	r3,-25559(gp)
 100c880:	11003fcc 	andi	r4,r2,255
 100c884:	18803fcc 	andi	r2,r3,255
 100c888:	20801126 	beq	r4,r2,100c8d0 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100c88c:	d0a70a03 	ldbu	r2,-25560(gp)
 100c890:	10803fcc 	andi	r2,r2,255
 100c894:	00c040b4 	movhi	r3,258
 100c898:	18cb0b04 	addi	r3,r3,11308
 100c89c:	1085883a 	add	r2,r2,r2
 100c8a0:	1085883a 	add	r2,r2,r2
 100c8a4:	10c5883a 	add	r2,r2,r3
 100c8a8:	10800017 	ldw	r2,0(r2)
 100c8ac:	d0a71215 	stw	r2,-25528(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 100c8b0:	d0e71217 	ldw	r3,-25528(gp)
 100c8b4:	18800e17 	ldw	r2,56(r3)
 100c8b8:	10800044 	addi	r2,r2,1
 100c8bc:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 100c8c0:	d0a70d17 	ldw	r2,-25548(gp)
 100c8c4:	10800044 	addi	r2,r2,1
 100c8c8:	d0a70d15 	stw	r2,-25548(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 100c8cc:	10152cc0 	call	10152cc <OSCtxSw>
 100c8d0:	e0bfff17 	ldw	r2,-4(fp)
 100c8d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c8d8:	e0bffd17 	ldw	r2,-12(fp)
 100c8dc:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 100c8e0:	e037883a 	mov	sp,fp
 100c8e4:	dfc00117 	ldw	ra,4(sp)
 100c8e8:	df000017 	ldw	fp,0(sp)
 100c8ec:	dec00204 	addi	sp,sp,8
 100c8f0:	f800283a 	ret

0100c8f4 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 100c8f4:	defffe04 	addi	sp,sp,-8
 100c8f8:	df000115 	stw	fp,4(sp)
 100c8fc:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100c900:	d0a71403 	ldbu	r2,-25520(gp)
 100c904:	10c03fcc 	andi	r3,r2,255
 100c908:	00804074 	movhi	r2,257
 100c90c:	10988704 	addi	r2,r2,25116
 100c910:	10c5883a 	add	r2,r2,r3
 100c914:	10800003 	ldbu	r2,0(r2)
 100c918:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100c91c:	e0bfff03 	ldbu	r2,-4(fp)
 100c920:	100490fa 	slli	r2,r2,3
 100c924:	1009883a 	mov	r4,r2
 100c928:	e0ffff03 	ldbu	r3,-4(fp)
 100c92c:	d0a71444 	addi	r2,gp,-25519
 100c930:	1885883a 	add	r2,r3,r2
 100c934:	10800003 	ldbu	r2,0(r2)
 100c938:	10c03fcc 	andi	r3,r2,255
 100c93c:	00804074 	movhi	r2,257
 100c940:	10988704 	addi	r2,r2,25116
 100c944:	10c5883a 	add	r2,r2,r3
 100c948:	10800003 	ldbu	r2,0(r2)
 100c94c:	2085883a 	add	r2,r4,r2
 100c950:	d0a70a05 	stb	r2,-25560(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 100c954:	e037883a 	mov	sp,fp
 100c958:	df000017 	ldw	fp,0(sp)
 100c95c:	dec00104 	addi	sp,sp,4
 100c960:	f800283a 	ret

0100c964 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 100c964:	defffc04 	addi	sp,sp,-16
 100c968:	df000315 	stw	fp,12(sp)
 100c96c:	df000304 	addi	fp,sp,12
 100c970:	e13ffe15 	stw	r4,-8(fp)
 100c974:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 100c978:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 100c97c:	00000d06 	br	100c9b4 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 100c980:	e0bfff17 	ldw	r2,-4(fp)
 100c984:	10c00003 	ldbu	r3,0(r2)
 100c988:	e0bffe17 	ldw	r2,-8(fp)
 100c98c:	10c00005 	stb	r3,0(r2)
 100c990:	e0bffe17 	ldw	r2,-8(fp)
 100c994:	10800044 	addi	r2,r2,1
 100c998:	e0bffe15 	stw	r2,-8(fp)
 100c99c:	e0bfff17 	ldw	r2,-4(fp)
 100c9a0:	10800044 	addi	r2,r2,1
 100c9a4:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100c9a8:	e0bffd03 	ldbu	r2,-12(fp)
 100c9ac:	10800044 	addi	r2,r2,1
 100c9b0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100c9b4:	e0bfff17 	ldw	r2,-4(fp)
 100c9b8:	10800003 	ldbu	r2,0(r2)
 100c9bc:	10803fcc 	andi	r2,r2,255
 100c9c0:	1004c03a 	cmpne	r2,r2,zero
 100c9c4:	103fee1e 	bne	r2,zero,100c980 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 100c9c8:	e0bffe17 	ldw	r2,-8(fp)
 100c9cc:	10000005 	stb	zero,0(r2)
    return (len);
 100c9d0:	e0bffd03 	ldbu	r2,-12(fp)
}
 100c9d4:	e037883a 	mov	sp,fp
 100c9d8:	df000017 	ldw	fp,0(sp)
 100c9dc:	dec00104 	addi	sp,sp,4
 100c9e0:	f800283a 	ret

0100c9e4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 100c9e4:	defffd04 	addi	sp,sp,-12
 100c9e8:	df000215 	stw	fp,8(sp)
 100c9ec:	df000204 	addi	fp,sp,8
 100c9f0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 100c9f4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 100c9f8:	00000606 	br	100ca14 <OS_StrLen+0x30>
        psrc++;
 100c9fc:	e0bfff17 	ldw	r2,-4(fp)
 100ca00:	10800044 	addi	r2,r2,1
 100ca04:	e0bfff15 	stw	r2,-4(fp)
        len++;
 100ca08:	e0bffe03 	ldbu	r2,-8(fp)
 100ca0c:	10800044 	addi	r2,r2,1
 100ca10:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100ca14:	e0bfff17 	ldw	r2,-4(fp)
 100ca18:	10800003 	ldbu	r2,0(r2)
 100ca1c:	10803fcc 	andi	r2,r2,255
 100ca20:	1004c03a 	cmpne	r2,r2,zero
 100ca24:	103ff51e 	bne	r2,zero,100c9fc <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 100ca28:	e0bffe03 	ldbu	r2,-8(fp)
}
 100ca2c:	e037883a 	mov	sp,fp
 100ca30:	df000017 	ldw	fp,0(sp)
 100ca34:	dec00104 	addi	sp,sp,4
 100ca38:	f800283a 	ret

0100ca3c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 100ca3c:	defffa04 	addi	sp,sp,-24
 100ca40:	dfc00515 	stw	ra,20(sp)
 100ca44:	df000415 	stw	fp,16(sp)
 100ca48:	df000404 	addi	fp,sp,16
 100ca4c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ca50:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ca54:	0005303a 	rdctl	r2,status
 100ca58:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ca5c:	e0fffd17 	ldw	r3,-12(fp)
 100ca60:	00bfff84 	movi	r2,-2
 100ca64:	1884703a 	and	r2,r3,r2
 100ca68:	1001703a 	wrctl	status,r2
  
  return context;
 100ca6c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 100ca70:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 100ca74:	d0a70917 	ldw	r2,-25564(gp)
 100ca78:	10800044 	addi	r2,r2,1
 100ca7c:	d0a70915 	stw	r2,-25564(gp)
 100ca80:	e0bffe17 	ldw	r2,-8(fp)
 100ca84:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ca88:	e0bffc17 	ldw	r2,-16(fp)
 100ca8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 100ca90:	10157780 	call	1015778 <OSTaskIdleHook>
    }
 100ca94:	003fef06 	br	100ca54 <OS_TaskIdle+0x18>

0100ca98 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 100ca98:	defffa04 	addi	sp,sp,-24
 100ca9c:	dfc00515 	stw	ra,20(sp)
 100caa0:	df000415 	stw	fp,16(sp)
 100caa4:	df000404 	addi	fp,sp,16
 100caa8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100caac:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100cab0:	00000206 	br	100cabc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 100cab4:	01003204 	movi	r4,200
 100cab8:	1012b180 	call	1012b18 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100cabc:	d0a71a03 	ldbu	r2,-25496(gp)
 100cac0:	10803fcc 	andi	r2,r2,255
 100cac4:	1005003a 	cmpeq	r2,r2,zero
 100cac8:	103ffa1e 	bne	r2,zero,100cab4 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 100cacc:	d1270e17 	ldw	r4,-25544(gp)
 100cad0:	01401904 	movi	r5,100
 100cad4:	10098d40 	call	10098d4 <__udivsi3>
 100cad8:	d0a70e15 	stw	r2,-25544(gp)
    if (OSIdleCtrMax == 0L) {
 100cadc:	d0a70e17 	ldw	r2,-25544(gp)
 100cae0:	1004c03a 	cmpne	r2,r2,zero
 100cae4:	1000031e 	bne	r2,zero,100caf4 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 100cae8:	d0271005 	stb	zero,-25536(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 100caec:	01003fc4 	movi	r4,255
 100caf0:	101272c0 	call	101272c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100caf4:	0005303a 	rdctl	r2,status
 100caf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cafc:	e0fffd17 	ldw	r3,-12(fp)
 100cb00:	00bfff84 	movi	r2,-2
 100cb04:	1884703a 	and	r2,r3,r2
 100cb08:	1001703a 	wrctl	status,r2
  
  return context;
 100cb0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 100cb10:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 100cb14:	d0a70917 	ldw	r2,-25564(gp)
 100cb18:	d0a71b15 	stw	r2,-25492(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 100cb1c:	d0270915 	stw	zero,-25564(gp)
 100cb20:	e0bffe17 	ldw	r2,-8(fp)
 100cb24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cb28:	e0bffc17 	ldw	r2,-16(fp)
 100cb2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 100cb30:	d1271b17 	ldw	r4,-25492(gp)
 100cb34:	d1670e17 	ldw	r5,-25544(gp)
 100cb38:	10098d40 	call	10098d4 <__udivsi3>
 100cb3c:	1007883a 	mov	r3,r2
 100cb40:	00801904 	movi	r2,100
 100cb44:	10c5c83a 	sub	r2,r2,r3
 100cb48:	d0a71005 	stb	r2,-25536(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 100cb4c:	10157080 	call	1015708 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 100cb50:	100cb600 	call	100cb60 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 100cb54:	01001904 	movi	r4,100
 100cb58:	1012b180 	call	1012b18 <OSTimeDly>
    }
 100cb5c:	003fe506 	br	100caf4 <OS_TaskStat+0x5c>

0100cb60 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 100cb60:	defffa04 	addi	sp,sp,-24
 100cb64:	dfc00515 	stw	ra,20(sp)
 100cb68:	df000415 	stw	fp,16(sp)
 100cb6c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100cb70:	e03ffc05 	stb	zero,-16(fp)
 100cb74:	00002406 	br	100cc08 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 100cb78:	e13ffc03 	ldbu	r4,-16(fp)
 100cb7c:	e17ffe04 	addi	r5,fp,-8
 100cb80:	10125300 	call	1012530 <OSTaskStkChk>
 100cb84:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 100cb88:	e0bffc43 	ldbu	r2,-15(fp)
 100cb8c:	1004c03a 	cmpne	r2,r2,zero
 100cb90:	10001a1e 	bne	r2,zero,100cbfc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 100cb94:	e0bffc03 	ldbu	r2,-16(fp)
 100cb98:	00c040b4 	movhi	r3,258
 100cb9c:	18cb0b04 	addi	r3,r3,11308
 100cba0:	1085883a 	add	r2,r2,r2
 100cba4:	1085883a 	add	r2,r2,r2
 100cba8:	10c5883a 	add	r2,r2,r3
 100cbac:	10800017 	ldw	r2,0(r2)
 100cbb0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 100cbb4:	e0bffd17 	ldw	r2,-12(fp)
 100cbb8:	1005003a 	cmpeq	r2,r2,zero
 100cbbc:	10000f1e 	bne	r2,zero,100cbfc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 100cbc0:	e0bffd17 	ldw	r2,-12(fp)
 100cbc4:	10800060 	cmpeqi	r2,r2,1
 100cbc8:	10000c1e 	bne	r2,zero,100cbfc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 100cbcc:	e0bffd17 	ldw	r2,-12(fp)
 100cbd0:	10c00217 	ldw	r3,8(r2)
 100cbd4:	e0bffd17 	ldw	r2,-12(fp)
 100cbd8:	10800317 	ldw	r2,12(r2)
 100cbdc:	1085883a 	add	r2,r2,r2
 100cbe0:	1085883a 	add	r2,r2,r2
 100cbe4:	1887883a 	add	r3,r3,r2
 100cbe8:	e0bffd17 	ldw	r2,-12(fp)
 100cbec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 100cbf0:	e0ffff17 	ldw	r3,-4(fp)
 100cbf4:	e0bffd17 	ldw	r2,-12(fp)
 100cbf8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 100cbfc:	e0bffc03 	ldbu	r2,-16(fp)
 100cc00:	10800044 	addi	r2,r2,1
 100cc04:	e0bffc05 	stb	r2,-16(fp)
 100cc08:	e0bffc03 	ldbu	r2,-16(fp)
 100cc0c:	10800570 	cmpltui	r2,r2,21
 100cc10:	103fd91e 	bne	r2,zero,100cb78 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 100cc14:	e037883a 	mov	sp,fp
 100cc18:	dfc00117 	ldw	ra,4(sp)
 100cc1c:	df000017 	ldw	fp,0(sp)
 100cc20:	dec00204 	addi	sp,sp,8
 100cc24:	f800283a 	ret

0100cc28 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 100cc28:	defff104 	addi	sp,sp,-60
 100cc2c:	dfc00e15 	stw	ra,56(sp)
 100cc30:	df000d15 	stw	fp,52(sp)
 100cc34:	df000d04 	addi	fp,sp,52
 100cc38:	e17ffb15 	stw	r5,-20(fp)
 100cc3c:	e1bffc15 	stw	r6,-16(fp)
 100cc40:	e0800417 	ldw	r2,16(fp)
 100cc44:	e13ffa05 	stb	r4,-24(fp)
 100cc48:	e1fffd0d 	sth	r7,-12(fp)
 100cc4c:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100cc50:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cc54:	0005303a 	rdctl	r2,status
 100cc58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cc5c:	e0fff717 	ldw	r3,-36(fp)
 100cc60:	00bfff84 	movi	r2,-2
 100cc64:	1884703a 	and	r2,r3,r2
 100cc68:	1001703a 	wrctl	status,r2
  
  return context;
 100cc6c:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 100cc70:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 100cc74:	d0a70f17 	ldw	r2,-25540(gp)
 100cc78:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 100cc7c:	e0bff917 	ldw	r2,-28(fp)
 100cc80:	1005003a 	cmpeq	r2,r2,zero
 100cc84:	1000941e 	bne	r2,zero,100ced8 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 100cc88:	e0bff917 	ldw	r2,-28(fp)
 100cc8c:	10800517 	ldw	r2,20(r2)
 100cc90:	d0a70f15 	stw	r2,-25540(gp)
 100cc94:	e0bff817 	ldw	r2,-32(fp)
 100cc98:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cc9c:	e0bff617 	ldw	r2,-40(fp)
 100cca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 100cca4:	e0fff917 	ldw	r3,-28(fp)
 100cca8:	e0bffb17 	ldw	r2,-20(fp)
 100ccac:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 100ccb0:	e0fff917 	ldw	r3,-28(fp)
 100ccb4:	e0bffa03 	ldbu	r2,-24(fp)
 100ccb8:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 100ccbc:	e0bff917 	ldw	r2,-28(fp)
 100ccc0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 100ccc4:	e0bff917 	ldw	r2,-28(fp)
 100ccc8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 100cccc:	e0bff917 	ldw	r2,-28(fp)
 100ccd0:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 100ccd4:	e0fff917 	ldw	r3,-28(fp)
 100ccd8:	e0800317 	ldw	r2,12(fp)
 100ccdc:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 100cce0:	e0fff917 	ldw	r3,-28(fp)
 100cce4:	e0800217 	ldw	r2,8(fp)
 100cce8:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 100ccec:	e0fff917 	ldw	r3,-28(fp)
 100ccf0:	e0bffc17 	ldw	r2,-16(fp)
 100ccf4:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 100ccf8:	e0fff917 	ldw	r3,-28(fp)
 100ccfc:	e0bffe0b 	ldhu	r2,-8(fp)
 100cd00:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 100cd04:	e0fff917 	ldw	r3,-28(fp)
 100cd08:	e0bffd0b 	ldhu	r2,-12(fp)
 100cd0c:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 100cd10:	e0bff917 	ldw	r2,-28(fp)
 100cd14:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 100cd18:	e0bffa03 	ldbu	r2,-24(fp)
 100cd1c:	1004d0fa 	srli	r2,r2,3
 100cd20:	1007883a 	mov	r3,r2
 100cd24:	e0bff917 	ldw	r2,-28(fp)
 100cd28:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 100cd2c:	e0bffa03 	ldbu	r2,-24(fp)
 100cd30:	108001cc 	andi	r2,r2,7
 100cd34:	1007883a 	mov	r3,r2
 100cd38:	e0bff917 	ldw	r2,-28(fp)
 100cd3c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 100cd40:	e0bff917 	ldw	r2,-28(fp)
 100cd44:	10800d03 	ldbu	r2,52(r2)
 100cd48:	10c03fcc 	andi	r3,r2,255
 100cd4c:	00800044 	movi	r2,1
 100cd50:	10c4983a 	sll	r2,r2,r3
 100cd54:	1007883a 	mov	r3,r2
 100cd58:	e0bff917 	ldw	r2,-28(fp)
 100cd5c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 100cd60:	e0bff917 	ldw	r2,-28(fp)
 100cd64:	10800cc3 	ldbu	r2,51(r2)
 100cd68:	10c03fcc 	andi	r3,r2,255
 100cd6c:	00800044 	movi	r2,1
 100cd70:	10c4983a 	sll	r2,r2,r3
 100cd74:	1007883a 	mov	r3,r2
 100cd78:	e0bff917 	ldw	r2,-28(fp)
 100cd7c:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 100cd80:	e0bff917 	ldw	r2,-28(fp)
 100cd84:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 100cd88:	e0bff917 	ldw	r2,-28(fp)
 100cd8c:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 100cd90:	e0bff917 	ldw	r2,-28(fp)
 100cd94:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 100cd98:	e0bff917 	ldw	r2,-28(fp)
 100cd9c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 100cda0:	e0bff917 	ldw	r2,-28(fp)
 100cda4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 100cda8:	e0bff917 	ldw	r2,-28(fp)
 100cdac:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 100cdb0:	e0bff917 	ldw	r2,-28(fp)
 100cdb4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 100cdb8:	e0bff917 	ldw	r2,-28(fp)
 100cdbc:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 100cdc0:	e0bff917 	ldw	r2,-28(fp)
 100cdc4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 100cdc8:	e0fff917 	ldw	r3,-28(fp)
 100cdcc:	00800fc4 	movi	r2,63
 100cdd0:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 100cdd4:	e0bff917 	ldw	r2,-28(fp)
 100cdd8:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 100cddc:	e13ff917 	ldw	r4,-28(fp)
 100cde0:	10157940 	call	1015794 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 100cde4:	e13ff917 	ldw	r4,-28(fp)
 100cde8:	10156ac0 	call	10156ac <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cdec:	0005303a 	rdctl	r2,status
 100cdf0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cdf4:	e0fff517 	ldw	r3,-44(fp)
 100cdf8:	00bfff84 	movi	r2,-2
 100cdfc:	1884703a 	and	r2,r3,r2
 100ce00:	1001703a 	wrctl	status,r2
  
  return context;
 100ce04:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 100ce08:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 100ce0c:	e0bffa03 	ldbu	r2,-24(fp)
 100ce10:	00c040b4 	movhi	r3,258
 100ce14:	18cb0b04 	addi	r3,r3,11308
 100ce18:	1085883a 	add	r2,r2,r2
 100ce1c:	1085883a 	add	r2,r2,r2
 100ce20:	10c7883a 	add	r3,r2,r3
 100ce24:	e0bff917 	ldw	r2,-28(fp)
 100ce28:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 100ce2c:	d0e70b17 	ldw	r3,-25556(gp)
 100ce30:	e0bff917 	ldw	r2,-28(fp)
 100ce34:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 100ce38:	e0bff917 	ldw	r2,-28(fp)
 100ce3c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 100ce40:	d0a70b17 	ldw	r2,-25556(gp)
 100ce44:	1005003a 	cmpeq	r2,r2,zero
 100ce48:	1000031e 	bne	r2,zero,100ce58 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 100ce4c:	d0e70b17 	ldw	r3,-25556(gp)
 100ce50:	e0bff917 	ldw	r2,-28(fp)
 100ce54:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 100ce58:	e0bff917 	ldw	r2,-28(fp)
 100ce5c:	d0a70b15 	stw	r2,-25556(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 100ce60:	e0bff917 	ldw	r2,-28(fp)
 100ce64:	10c00d83 	ldbu	r3,54(r2)
 100ce68:	d0a71403 	ldbu	r2,-25520(gp)
 100ce6c:	1884b03a 	or	r2,r3,r2
 100ce70:	d0a71405 	stb	r2,-25520(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100ce74:	e0bff917 	ldw	r2,-28(fp)
 100ce78:	10800d03 	ldbu	r2,52(r2)
 100ce7c:	11003fcc 	andi	r4,r2,255
 100ce80:	e0bff917 	ldw	r2,-28(fp)
 100ce84:	10800d03 	ldbu	r2,52(r2)
 100ce88:	10c03fcc 	andi	r3,r2,255
 100ce8c:	d0a71444 	addi	r2,gp,-25519
 100ce90:	1885883a 	add	r2,r3,r2
 100ce94:	10c00003 	ldbu	r3,0(r2)
 100ce98:	e0bff917 	ldw	r2,-28(fp)
 100ce9c:	10800d43 	ldbu	r2,53(r2)
 100cea0:	1884b03a 	or	r2,r3,r2
 100cea4:	1007883a 	mov	r3,r2
 100cea8:	d0a71444 	addi	r2,gp,-25519
 100ceac:	2085883a 	add	r2,r4,r2
 100ceb0:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 100ceb4:	d0a71043 	ldbu	r2,-25535(gp)
 100ceb8:	10800044 	addi	r2,r2,1
 100cebc:	d0a71045 	stb	r2,-25535(gp)
 100cec0:	e0bff817 	ldw	r2,-32(fp)
 100cec4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cec8:	e0bff417 	ldw	r2,-48(fp)
 100cecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 100ced0:	e03fff15 	stw	zero,-4(fp)
 100ced4:	00000606 	br	100cef0 <OS_TCBInit+0x2c8>
 100ced8:	e0bff817 	ldw	r2,-32(fp)
 100cedc:	e0bff315 	stw	r2,-52(fp)
 100cee0:	e0bff317 	ldw	r2,-52(fp)
 100cee4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 100cee8:	00801084 	movi	r2,66
 100ceec:	e0bfff15 	stw	r2,-4(fp)
 100cef0:	e0bfff17 	ldw	r2,-4(fp)
}
 100cef4:	e037883a 	mov	sp,fp
 100cef8:	dfc00117 	ldw	ra,4(sp)
 100cefc:	df000017 	ldw	fp,0(sp)
 100cf00:	dec00204 	addi	sp,sp,8
 100cf04:	f800283a 	ret

0100cf08 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 100cf08:	defffe04 	addi	sp,sp,-8
 100cf0c:	df000115 	stw	fp,4(sp)
 100cf10:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 100cf14:	d0a00f04 	addi	r2,gp,-32708
 100cf18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 100cf1c:	d0a01004 	addi	r2,gp,-32704
 100cf20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 100cf24:	d0a01184 	addi	r2,gp,-32698
 100cf28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 100cf2c:	d0a01204 	addi	r2,gp,-32696
 100cf30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 100cf34:	d0a01104 	addi	r2,gp,-32700
 100cf38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 100cf3c:	d0a01284 	addi	r2,gp,-32694
 100cf40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 100cf44:	d0a01304 	addi	r2,gp,-32692
 100cf48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 100cf4c:	d0a01384 	addi	r2,gp,-32690
 100cf50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 100cf54:	d0a01404 	addi	r2,gp,-32688
 100cf58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 100cf5c:	d0a01484 	addi	r2,gp,-32686
 100cf60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 100cf64:	d0a01504 	addi	r2,gp,-32684
 100cf68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 100cf6c:	d0a01584 	addi	r2,gp,-32682
 100cf70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 100cf74:	d0a01604 	addi	r2,gp,-32680
 100cf78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 100cf7c:	d0a01684 	addi	r2,gp,-32678
 100cf80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 100cf84:	d0a01704 	addi	r2,gp,-32676
 100cf88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 100cf8c:	d0a01784 	addi	r2,gp,-32674
 100cf90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 100cf94:	d0a01804 	addi	r2,gp,-32672
 100cf98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 100cf9c:	d0a01884 	addi	r2,gp,-32670
 100cfa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 100cfa4:	d0a01904 	addi	r2,gp,-32668
 100cfa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 100cfac:	d0a01984 	addi	r2,gp,-32666
 100cfb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 100cfb4:	d0a01a04 	addi	r2,gp,-32664
 100cfb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 100cfbc:	d0a01a84 	addi	r2,gp,-32662
 100cfc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 100cfc4:	d0a01b04 	addi	r2,gp,-32660
 100cfc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 100cfcc:	d0a01b84 	addi	r2,gp,-32658
 100cfd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 100cfd4:	d0a01c04 	addi	r2,gp,-32656
 100cfd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 100cfdc:	d0a01c84 	addi	r2,gp,-32654
 100cfe0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 100cfe4:	d0a01d04 	addi	r2,gp,-32652
 100cfe8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 100cfec:	d0a01d84 	addi	r2,gp,-32650
 100cff0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 100cff4:	d0a01e04 	addi	r2,gp,-32648
 100cff8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 100cffc:	d0a01e84 	addi	r2,gp,-32646
 100d000:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 100d004:	d0a01f04 	addi	r2,gp,-32644
 100d008:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 100d00c:	d0a01f84 	addi	r2,gp,-32642
 100d010:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 100d014:	d0a02004 	addi	r2,gp,-32640
 100d018:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 100d01c:	d0a02084 	addi	r2,gp,-32638
 100d020:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 100d024:	d0a02104 	addi	r2,gp,-32636
 100d028:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 100d02c:	d0a02184 	addi	r2,gp,-32634
 100d030:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 100d034:	d0a02204 	addi	r2,gp,-32632
 100d038:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 100d03c:	d0a02284 	addi	r2,gp,-32630
 100d040:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 100d044:	d0a02304 	addi	r2,gp,-32628
 100d048:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 100d04c:	d0a02384 	addi	r2,gp,-32626
 100d050:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 100d054:	d0a02404 	addi	r2,gp,-32624
 100d058:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 100d05c:	d0a02484 	addi	r2,gp,-32622
 100d060:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 100d064:	d0a02504 	addi	r2,gp,-32620
 100d068:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 100d06c:	d0a02584 	addi	r2,gp,-32618
 100d070:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 100d074:	d0a02604 	addi	r2,gp,-32616
 100d078:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 100d07c:	d0a02b04 	addi	r2,gp,-32596
 100d080:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 100d084:	e037883a 	mov	sp,fp
 100d088:	df000017 	ldw	fp,0(sp)
 100d08c:	dec00104 	addi	sp,sp,4
 100d090:	f800283a 	ret

0100d094 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 100d094:	defff104 	addi	sp,sp,-60
 100d098:	df000e15 	stw	fp,56(sp)
 100d09c:	df000e04 	addi	fp,sp,56
 100d0a0:	e13ffa15 	stw	r4,-24(fp)
 100d0a4:	e1fffd15 	stw	r7,-12(fp)
 100d0a8:	e17ffb0d 	sth	r5,-20(fp)
 100d0ac:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100d0b0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100d0b4:	e0bffd17 	ldw	r2,-12(fp)
 100d0b8:	1004c03a 	cmpne	r2,r2,zero
 100d0bc:	1000021e 	bne	r2,zero,100d0c8 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 100d0c0:	e03fff15 	stw	zero,-4(fp)
 100d0c4:	0000bb06 	br	100d3b4 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100d0c8:	e0bffa17 	ldw	r2,-24(fp)
 100d0cc:	1004c03a 	cmpne	r2,r2,zero
 100d0d0:	1000051e 	bne	r2,zero,100d0e8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100d0d4:	e0fffd17 	ldw	r3,-12(fp)
 100d0d8:	00801b84 	movi	r2,110
 100d0dc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100d0e0:	e03fff15 	stw	zero,-4(fp)
 100d0e4:	0000b306 	br	100d3b4 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100d0e8:	e0bffa17 	ldw	r2,-24(fp)
 100d0ec:	10800003 	ldbu	r2,0(r2)
 100d0f0:	10803fcc 	andi	r2,r2,255
 100d0f4:	10800160 	cmpeqi	r2,r2,5
 100d0f8:	1000051e 	bne	r2,zero,100d110 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 100d0fc:	e0fffd17 	ldw	r3,-12(fp)
 100d100:	00800044 	movi	r2,1
 100d104:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100d108:	e03fff15 	stw	zero,-4(fp)
 100d10c:	0000a906 	br	100d3b4 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100d110:	e0fffc03 	ldbu	r3,-16(fp)
 100d114:	00bfe004 	movi	r2,-128
 100d118:	1884703a 	and	r2,r3,r2
 100d11c:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 100d120:	e0bff943 	ldbu	r2,-27(fp)
 100d124:	1005003a 	cmpeq	r2,r2,zero
 100d128:	1000061e 	bne	r2,zero,100d144 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 100d12c:	e0bffc03 	ldbu	r2,-16(fp)
 100d130:	10801fcc 	andi	r2,r2,127
 100d134:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 100d138:	00800044 	movi	r2,1
 100d13c:	e0bff905 	stb	r2,-28(fp)
 100d140:	00000106 	br	100d148 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 100d144:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 100d148:	e0bffd17 	ldw	r2,-12(fp)
 100d14c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d150:	0005303a 	rdctl	r2,status
 100d154:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d158:	e0fff717 	ldw	r3,-36(fp)
 100d15c:	00bfff84 	movi	r2,-2
 100d160:	1884703a 	and	r2,r3,r2
 100d164:	1001703a 	wrctl	status,r2
  
  return context;
 100d168:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 100d16c:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 100d170:	e0bffc03 	ldbu	r2,-16(fp)
 100d174:	e0bffe15 	stw	r2,-8(fp)
 100d178:	e0fffe17 	ldw	r3,-8(fp)
 100d17c:	18800060 	cmpeqi	r2,r3,1
 100d180:	1000651e 	bne	r2,zero,100d318 <OSFlagAccept+0x284>
 100d184:	e0fffe17 	ldw	r3,-8(fp)
 100d188:	18800088 	cmpgei	r2,r3,2
 100d18c:	1000041e 	bne	r2,zero,100d1a0 <OSFlagAccept+0x10c>
 100d190:	e0fffe17 	ldw	r3,-8(fp)
 100d194:	1805003a 	cmpeq	r2,r3,zero
 100d198:	1000421e 	bne	r2,zero,100d2a4 <OSFlagAccept+0x210>
 100d19c:	00007b06 	br	100d38c <OSFlagAccept+0x2f8>
 100d1a0:	e0fffe17 	ldw	r3,-8(fp)
 100d1a4:	188000a0 	cmpeqi	r2,r3,2
 100d1a8:	1000041e 	bne	r2,zero,100d1bc <OSFlagAccept+0x128>
 100d1ac:	e0fffe17 	ldw	r3,-8(fp)
 100d1b0:	188000e0 	cmpeqi	r2,r3,3
 100d1b4:	10001e1e 	bne	r2,zero,100d230 <OSFlagAccept+0x19c>
 100d1b8:	00007406 	br	100d38c <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100d1bc:	e0bffa17 	ldw	r2,-24(fp)
 100d1c0:	10c0020b 	ldhu	r3,8(r2)
 100d1c4:	e0bffb0b 	ldhu	r2,-20(fp)
 100d1c8:	1884703a 	and	r2,r3,r2
 100d1cc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100d1d0:	e0fff98b 	ldhu	r3,-26(fp)
 100d1d4:	e0bffb0b 	ldhu	r2,-20(fp)
 100d1d8:	18800d1e 	bne	r3,r2,100d210 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100d1dc:	e0bff903 	ldbu	r2,-28(fp)
 100d1e0:	10800058 	cmpnei	r2,r2,1
 100d1e4:	10000d1e 	bne	r2,zero,100d21c <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100d1e8:	e0bffa17 	ldw	r2,-24(fp)
 100d1ec:	1080020b 	ldhu	r2,8(r2)
 100d1f0:	1007883a 	mov	r3,r2
 100d1f4:	e0bff98b 	ldhu	r2,-26(fp)
 100d1f8:	0084303a 	nor	r2,zero,r2
 100d1fc:	1884703a 	and	r2,r3,r2
 100d200:	1007883a 	mov	r3,r2
 100d204:	e0bffa17 	ldw	r2,-24(fp)
 100d208:	10c0020d 	sth	r3,8(r2)
 100d20c:	00000306 	br	100d21c <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100d210:	e0fffd17 	ldw	r3,-12(fp)
 100d214:	00801c04 	movi	r2,112
 100d218:	18800005 	stb	r2,0(r3)
 100d21c:	e0bff817 	ldw	r2,-32(fp)
 100d220:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d224:	e0bff617 	ldw	r2,-40(fp)
 100d228:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100d22c:	00005f06 	br	100d3ac <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100d230:	e0bffa17 	ldw	r2,-24(fp)
 100d234:	10c0020b 	ldhu	r3,8(r2)
 100d238:	e0bffb0b 	ldhu	r2,-20(fp)
 100d23c:	1884703a 	and	r2,r3,r2
 100d240:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100d244:	e0bff98b 	ldhu	r2,-26(fp)
 100d248:	1005003a 	cmpeq	r2,r2,zero
 100d24c:	10000d1e 	bne	r2,zero,100d284 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100d250:	e0bff903 	ldbu	r2,-28(fp)
 100d254:	10800058 	cmpnei	r2,r2,1
 100d258:	10000d1e 	bne	r2,zero,100d290 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100d25c:	e0bffa17 	ldw	r2,-24(fp)
 100d260:	1080020b 	ldhu	r2,8(r2)
 100d264:	1007883a 	mov	r3,r2
 100d268:	e0bff98b 	ldhu	r2,-26(fp)
 100d26c:	0084303a 	nor	r2,zero,r2
 100d270:	1884703a 	and	r2,r3,r2
 100d274:	1007883a 	mov	r3,r2
 100d278:	e0bffa17 	ldw	r2,-24(fp)
 100d27c:	10c0020d 	sth	r3,8(r2)
 100d280:	00000306 	br	100d290 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100d284:	e0fffd17 	ldw	r3,-12(fp)
 100d288:	00801c04 	movi	r2,112
 100d28c:	18800005 	stb	r2,0(r3)
 100d290:	e0bff817 	ldw	r2,-32(fp)
 100d294:	e0bff515 	stw	r2,-44(fp)
 100d298:	e0bff517 	ldw	r2,-44(fp)
 100d29c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100d2a0:	00004206 	br	100d3ac <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100d2a4:	e0bffa17 	ldw	r2,-24(fp)
 100d2a8:	1080020b 	ldhu	r2,8(r2)
 100d2ac:	0084303a 	nor	r2,zero,r2
 100d2b0:	1007883a 	mov	r3,r2
 100d2b4:	e0bffb0b 	ldhu	r2,-20(fp)
 100d2b8:	1884703a 	and	r2,r3,r2
 100d2bc:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100d2c0:	e0fff98b 	ldhu	r3,-26(fp)
 100d2c4:	e0bffb0b 	ldhu	r2,-20(fp)
 100d2c8:	18800b1e 	bne	r3,r2,100d2f8 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100d2cc:	e0bff903 	ldbu	r2,-28(fp)
 100d2d0:	10800058 	cmpnei	r2,r2,1
 100d2d4:	10000b1e 	bne	r2,zero,100d304 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100d2d8:	e0bffa17 	ldw	r2,-24(fp)
 100d2dc:	10c0020b 	ldhu	r3,8(r2)
 100d2e0:	e0bff98b 	ldhu	r2,-26(fp)
 100d2e4:	1884b03a 	or	r2,r3,r2
 100d2e8:	1007883a 	mov	r3,r2
 100d2ec:	e0bffa17 	ldw	r2,-24(fp)
 100d2f0:	10c0020d 	sth	r3,8(r2)
 100d2f4:	00000306 	br	100d304 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100d2f8:	e0fffd17 	ldw	r3,-12(fp)
 100d2fc:	00801c04 	movi	r2,112
 100d300:	18800005 	stb	r2,0(r3)
 100d304:	e0bff817 	ldw	r2,-32(fp)
 100d308:	e0bff415 	stw	r2,-48(fp)
 100d30c:	e0bff417 	ldw	r2,-48(fp)
 100d310:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100d314:	00002506 	br	100d3ac <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100d318:	e0bffa17 	ldw	r2,-24(fp)
 100d31c:	1080020b 	ldhu	r2,8(r2)
 100d320:	0084303a 	nor	r2,zero,r2
 100d324:	1007883a 	mov	r3,r2
 100d328:	e0bffb0b 	ldhu	r2,-20(fp)
 100d32c:	1884703a 	and	r2,r3,r2
 100d330:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100d334:	e0bff98b 	ldhu	r2,-26(fp)
 100d338:	1005003a 	cmpeq	r2,r2,zero
 100d33c:	10000b1e 	bne	r2,zero,100d36c <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100d340:	e0bff903 	ldbu	r2,-28(fp)
 100d344:	10800058 	cmpnei	r2,r2,1
 100d348:	10000b1e 	bne	r2,zero,100d378 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100d34c:	e0bffa17 	ldw	r2,-24(fp)
 100d350:	10c0020b 	ldhu	r3,8(r2)
 100d354:	e0bff98b 	ldhu	r2,-26(fp)
 100d358:	1884b03a 	or	r2,r3,r2
 100d35c:	1007883a 	mov	r3,r2
 100d360:	e0bffa17 	ldw	r2,-24(fp)
 100d364:	10c0020d 	sth	r3,8(r2)
 100d368:	00000306 	br	100d378 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100d36c:	e0fffd17 	ldw	r3,-12(fp)
 100d370:	00801c04 	movi	r2,112
 100d374:	18800005 	stb	r2,0(r3)
 100d378:	e0bff817 	ldw	r2,-32(fp)
 100d37c:	e0bff315 	stw	r2,-52(fp)
 100d380:	e0bff317 	ldw	r2,-52(fp)
 100d384:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 100d388:	00000806 	br	100d3ac <OSFlagAccept+0x318>
 100d38c:	e0bff817 	ldw	r2,-32(fp)
 100d390:	e0bff215 	stw	r2,-56(fp)
 100d394:	e0bff217 	ldw	r2,-56(fp)
 100d398:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100d39c:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 100d3a0:	e0fffd17 	ldw	r3,-12(fp)
 100d3a4:	00801bc4 	movi	r2,111
 100d3a8:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 100d3ac:	e0bff98b 	ldhu	r2,-26(fp)
 100d3b0:	e0bfff15 	stw	r2,-4(fp)
 100d3b4:	e0bfff17 	ldw	r2,-4(fp)
}
 100d3b8:	e037883a 	mov	sp,fp
 100d3bc:	df000017 	ldw	fp,0(sp)
 100d3c0:	dec00104 	addi	sp,sp,4
 100d3c4:	f800283a 	ret

0100d3c8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 100d3c8:	defff704 	addi	sp,sp,-36
 100d3cc:	df000815 	stw	fp,32(sp)
 100d3d0:	df000804 	addi	fp,sp,32
 100d3d4:	e17ffe15 	stw	r5,-8(fp)
 100d3d8:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 100d3dc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 100d3e0:	e0bffe17 	ldw	r2,-8(fp)
 100d3e4:	1004c03a 	cmpne	r2,r2,zero
 100d3e8:	1000021e 	bne	r2,zero,100d3f4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 100d3ec:	e03fff15 	stw	zero,-4(fp)
 100d3f0:	00003f06 	br	100d4f0 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 100d3f4:	008040b4 	movhi	r2,258
 100d3f8:	10a68404 	addi	r2,r2,-26096
 100d3fc:	10800003 	ldbu	r2,0(r2)
 100d400:	10803fcc 	andi	r2,r2,255
 100d404:	1005003a 	cmpeq	r2,r2,zero
 100d408:	1000051e 	bne	r2,zero,100d420 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 100d40c:	e0fffe17 	ldw	r3,-8(fp)
 100d410:	00800404 	movi	r2,16
 100d414:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 100d418:	e03fff15 	stw	zero,-4(fp)
 100d41c:	00003406 	br	100d4f0 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d420:	0005303a 	rdctl	r2,status
 100d424:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d428:	e0fffa17 	ldw	r3,-24(fp)
 100d42c:	00bfff84 	movi	r2,-2
 100d430:	1884703a 	and	r2,r3,r2
 100d434:	1001703a 	wrctl	status,r2
  
  return context;
 100d438:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100d43c:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 100d440:	008040b4 	movhi	r2,258
 100d444:	10a68704 	addi	r2,r2,-26084
 100d448:	10800017 	ldw	r2,0(r2)
 100d44c:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 100d450:	e0bffc17 	ldw	r2,-16(fp)
 100d454:	1005003a 	cmpeq	r2,r2,zero
 100d458:	10001c1e 	bne	r2,zero,100d4cc <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 100d45c:	008040b4 	movhi	r2,258
 100d460:	10a68704 	addi	r2,r2,-26084
 100d464:	10800017 	ldw	r2,0(r2)
 100d468:	10800117 	ldw	r2,4(r2)
 100d46c:	1007883a 	mov	r3,r2
 100d470:	008040b4 	movhi	r2,258
 100d474:	10a68704 	addi	r2,r2,-26084
 100d478:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 100d47c:	e0fffc17 	ldw	r3,-16(fp)
 100d480:	00800144 	movi	r2,5
 100d484:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 100d488:	e0fffc17 	ldw	r3,-16(fp)
 100d48c:	e0bffd0b 	ldhu	r2,-12(fp)
 100d490:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 100d494:	e0bffc17 	ldw	r2,-16(fp)
 100d498:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 100d49c:	e0fffc17 	ldw	r3,-16(fp)
 100d4a0:	00800fc4 	movi	r2,63
 100d4a4:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100d4a8:	e0bffc17 	ldw	r2,-16(fp)
 100d4ac:	100002c5 	stb	zero,11(r2)
 100d4b0:	e0bffb17 	ldw	r2,-20(fp)
 100d4b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d4b8:	e0bff917 	ldw	r2,-28(fp)
 100d4bc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 100d4c0:	e0bffe17 	ldw	r2,-8(fp)
 100d4c4:	10000005 	stb	zero,0(r2)
 100d4c8:	00000706 	br	100d4e8 <OSFlagCreate+0x120>
 100d4cc:	e0bffb17 	ldw	r2,-20(fp)
 100d4d0:	e0bff815 	stw	r2,-32(fp)
 100d4d4:	e0bff817 	ldw	r2,-32(fp)
 100d4d8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 100d4dc:	e0fffe17 	ldw	r3,-8(fp)
 100d4e0:	00801c84 	movi	r2,114
 100d4e4:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 100d4e8:	e0bffc17 	ldw	r2,-16(fp)
 100d4ec:	e0bfff15 	stw	r2,-4(fp)
 100d4f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100d4f4:	e037883a 	mov	sp,fp
 100d4f8:	df000017 	ldw	fp,0(sp)
 100d4fc:	dec00104 	addi	sp,sp,4
 100d500:	f800283a 	ret

0100d504 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 100d504:	defff004 	addi	sp,sp,-64
 100d508:	dfc00f15 	stw	ra,60(sp)
 100d50c:	df000e15 	stw	fp,56(sp)
 100d510:	df000e04 	addi	fp,sp,56
 100d514:	e13ffb15 	stw	r4,-20(fp)
 100d518:	e1bffd15 	stw	r6,-12(fp)
 100d51c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100d520:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100d524:	e0bffd17 	ldw	r2,-12(fp)
 100d528:	1004c03a 	cmpne	r2,r2,zero
 100d52c:	1000031e 	bne	r2,zero,100d53c <OSFlagDel+0x38>
        return (pgrp);
 100d530:	e0bffb17 	ldw	r2,-20(fp)
 100d534:	e0bfff15 	stw	r2,-4(fp)
 100d538:	00009606 	br	100d794 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100d53c:	e0bffb17 	ldw	r2,-20(fp)
 100d540:	1004c03a 	cmpne	r2,r2,zero
 100d544:	1000061e 	bne	r2,zero,100d560 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100d548:	e0fffd17 	ldw	r3,-12(fp)
 100d54c:	00801b84 	movi	r2,110
 100d550:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100d554:	e0fffb17 	ldw	r3,-20(fp)
 100d558:	e0ffff15 	stw	r3,-4(fp)
 100d55c:	00008d06 	br	100d794 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100d560:	008040b4 	movhi	r2,258
 100d564:	10a68404 	addi	r2,r2,-26096
 100d568:	10800003 	ldbu	r2,0(r2)
 100d56c:	10803fcc 	andi	r2,r2,255
 100d570:	1005003a 	cmpeq	r2,r2,zero
 100d574:	1000061e 	bne	r2,zero,100d590 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 100d578:	e0fffd17 	ldw	r3,-12(fp)
 100d57c:	008003c4 	movi	r2,15
 100d580:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100d584:	e0bffb17 	ldw	r2,-20(fp)
 100d588:	e0bfff15 	stw	r2,-4(fp)
 100d58c:	00008106 	br	100d794 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 100d590:	e0bffb17 	ldw	r2,-20(fp)
 100d594:	10800003 	ldbu	r2,0(r2)
 100d598:	10803fcc 	andi	r2,r2,255
 100d59c:	10800160 	cmpeqi	r2,r2,5
 100d5a0:	1000061e 	bne	r2,zero,100d5bc <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 100d5a4:	e0fffd17 	ldw	r3,-12(fp)
 100d5a8:	00800044 	movi	r2,1
 100d5ac:	18800005 	stb	r2,0(r3)
        return (pgrp);
 100d5b0:	e0fffb17 	ldw	r3,-20(fp)
 100d5b4:	e0ffff15 	stw	r3,-4(fp)
 100d5b8:	00007606 	br	100d794 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d5bc:	0005303a 	rdctl	r2,status
 100d5c0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d5c4:	e0fff617 	ldw	r3,-40(fp)
 100d5c8:	00bfff84 	movi	r2,-2
 100d5cc:	1884703a 	and	r2,r3,r2
 100d5d0:	1001703a 	wrctl	status,r2
  
  return context;
 100d5d4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 100d5d8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 100d5dc:	e0bffb17 	ldw	r2,-20(fp)
 100d5e0:	10800117 	ldw	r2,4(r2)
 100d5e4:	1005003a 	cmpeq	r2,r2,zero
 100d5e8:	1000031e 	bne	r2,zero,100d5f8 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 100d5ec:	00800044 	movi	r2,1
 100d5f0:	e0bffa05 	stb	r2,-24(fp)
 100d5f4:	00000106 	br	100d5fc <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 100d5f8:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 100d5fc:	e0bffc03 	ldbu	r2,-16(fp)
 100d600:	e0bffe15 	stw	r2,-8(fp)
 100d604:	e0fffe17 	ldw	r3,-8(fp)
 100d608:	1805003a 	cmpeq	r2,r3,zero
 100d60c:	1000041e 	bne	r2,zero,100d620 <OSFlagDel+0x11c>
 100d610:	e0fffe17 	ldw	r3,-8(fp)
 100d614:	18800060 	cmpeqi	r2,r3,1
 100d618:	1000281e 	bne	r2,zero,100d6bc <OSFlagDel+0x1b8>
 100d61c:	00005206 	br	100d768 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 100d620:	e0bffa03 	ldbu	r2,-24(fp)
 100d624:	1004c03a 	cmpne	r2,r2,zero
 100d628:	10001a1e 	bne	r2,zero,100d694 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 100d62c:	e0fffb17 	ldw	r3,-20(fp)
 100d630:	00800fc4 	movi	r2,63
 100d634:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100d638:	e0bffb17 	ldw	r2,-20(fp)
 100d63c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100d640:	e0bffb17 	ldw	r2,-20(fp)
 100d644:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 100d648:	008040b4 	movhi	r2,258
 100d64c:	10a68704 	addi	r2,r2,-26084
 100d650:	10c00017 	ldw	r3,0(r2)
 100d654:	e0bffb17 	ldw	r2,-20(fp)
 100d658:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100d65c:	e0bffb17 	ldw	r2,-20(fp)
 100d660:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 100d664:	00c040b4 	movhi	r3,258
 100d668:	18e68704 	addi	r3,r3,-26084
 100d66c:	e0bffb17 	ldw	r2,-20(fp)
 100d670:	18800015 	stw	r2,0(r3)
 100d674:	e0bff717 	ldw	r2,-36(fp)
 100d678:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d67c:	e0bff517 	ldw	r2,-44(fp)
 100d680:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 100d684:	e0bffd17 	ldw	r2,-12(fp)
 100d688:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 100d68c:	e03ff815 	stw	zero,-32(fp)
 100d690:	00003e06 	br	100d78c <OSFlagDel+0x288>
 100d694:	e0bff717 	ldw	r2,-36(fp)
 100d698:	e0bff415 	stw	r2,-48(fp)
 100d69c:	e0bff417 	ldw	r2,-48(fp)
 100d6a0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 100d6a4:	e0fffd17 	ldw	r3,-12(fp)
 100d6a8:	00801244 	movi	r2,73
 100d6ac:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 100d6b0:	e0bffb17 	ldw	r2,-20(fp)
 100d6b4:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 100d6b8:	00003406 	br	100d78c <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100d6bc:	e0bffb17 	ldw	r2,-20(fp)
 100d6c0:	10800117 	ldw	r2,4(r2)
 100d6c4:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100d6c8:	00000606 	br	100d6e4 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 100d6cc:	e13ff917 	ldw	r4,-28(fp)
 100d6d0:	000b883a 	mov	r5,zero
 100d6d4:	100e8140 	call	100e814 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100d6d8:	e0bff917 	ldw	r2,-28(fp)
 100d6dc:	10800017 	ldw	r2,0(r2)
 100d6e0:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100d6e4:	e0bff917 	ldw	r2,-28(fp)
 100d6e8:	1004c03a 	cmpne	r2,r2,zero
 100d6ec:	103ff71e 	bne	r2,zero,100d6cc <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 100d6f0:	e0fffb17 	ldw	r3,-20(fp)
 100d6f4:	00800fc4 	movi	r2,63
 100d6f8:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100d6fc:	e0bffb17 	ldw	r2,-20(fp)
 100d700:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100d704:	e0bffb17 	ldw	r2,-20(fp)
 100d708:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 100d70c:	008040b4 	movhi	r2,258
 100d710:	10a68704 	addi	r2,r2,-26084
 100d714:	10c00017 	ldw	r3,0(r2)
 100d718:	e0bffb17 	ldw	r2,-20(fp)
 100d71c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100d720:	e0bffb17 	ldw	r2,-20(fp)
 100d724:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 100d728:	00c040b4 	movhi	r3,258
 100d72c:	18e68704 	addi	r3,r3,-26084
 100d730:	e0bffb17 	ldw	r2,-20(fp)
 100d734:	18800015 	stw	r2,0(r3)
 100d738:	e0bff717 	ldw	r2,-36(fp)
 100d73c:	e0bff315 	stw	r2,-52(fp)
 100d740:	e0bff317 	ldw	r2,-52(fp)
 100d744:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 100d748:	e0bffa03 	ldbu	r2,-24(fp)
 100d74c:	10800058 	cmpnei	r2,r2,1
 100d750:	1000011e 	bne	r2,zero,100d758 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 100d754:	100c8200 	call	100c820 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 100d758:	e0bffd17 	ldw	r2,-12(fp)
 100d75c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 100d760:	e03ff815 	stw	zero,-32(fp)
             break;
 100d764:	00000906 	br	100d78c <OSFlagDel+0x288>
 100d768:	e0bff717 	ldw	r2,-36(fp)
 100d76c:	e0bff215 	stw	r2,-56(fp)
 100d770:	e0bff217 	ldw	r2,-56(fp)
 100d774:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 100d778:	e0fffd17 	ldw	r3,-12(fp)
 100d77c:	008001c4 	movi	r2,7
 100d780:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 100d784:	e0bffb17 	ldw	r2,-20(fp)
 100d788:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 100d78c:	e0bff817 	ldw	r2,-32(fp)
 100d790:	e0bfff15 	stw	r2,-4(fp)
 100d794:	e0bfff17 	ldw	r2,-4(fp)
}
 100d798:	e037883a 	mov	sp,fp
 100d79c:	dfc00117 	ldw	ra,4(sp)
 100d7a0:	df000017 	ldw	fp,0(sp)
 100d7a4:	dec00204 	addi	sp,sp,8
 100d7a8:	f800283a 	ret

0100d7ac <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100d7ac:	defff504 	addi	sp,sp,-44
 100d7b0:	dfc00a15 	stw	ra,40(sp)
 100d7b4:	df000915 	stw	fp,36(sp)
 100d7b8:	df000904 	addi	fp,sp,36
 100d7bc:	e13ffc15 	stw	r4,-16(fp)
 100d7c0:	e17ffd15 	stw	r5,-12(fp)
 100d7c4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100d7c8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100d7cc:	e0bffe17 	ldw	r2,-8(fp)
 100d7d0:	1004c03a 	cmpne	r2,r2,zero
 100d7d4:	1000021e 	bne	r2,zero,100d7e0 <OSFlagNameGet+0x34>
        return (0);
 100d7d8:	e03fff15 	stw	zero,-4(fp)
 100d7dc:	00003e06 	br	100d8d8 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100d7e0:	e0bffc17 	ldw	r2,-16(fp)
 100d7e4:	1004c03a 	cmpne	r2,r2,zero
 100d7e8:	1000051e 	bne	r2,zero,100d800 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100d7ec:	e0fffe17 	ldw	r3,-8(fp)
 100d7f0:	00801b84 	movi	r2,110
 100d7f4:	18800005 	stb	r2,0(r3)
        return (0);
 100d7f8:	e03fff15 	stw	zero,-4(fp)
 100d7fc:	00003606 	br	100d8d8 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100d800:	e0bffd17 	ldw	r2,-12(fp)
 100d804:	1004c03a 	cmpne	r2,r2,zero
 100d808:	1000051e 	bne	r2,zero,100d820 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 100d80c:	e0fffe17 	ldw	r3,-8(fp)
 100d810:	00800304 	movi	r2,12
 100d814:	18800005 	stb	r2,0(r3)
        return (0);
 100d818:	e03fff15 	stw	zero,-4(fp)
 100d81c:	00002e06 	br	100d8d8 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100d820:	008040b4 	movhi	r2,258
 100d824:	10a68404 	addi	r2,r2,-26096
 100d828:	10800003 	ldbu	r2,0(r2)
 100d82c:	10803fcc 	andi	r2,r2,255
 100d830:	1005003a 	cmpeq	r2,r2,zero
 100d834:	1000051e 	bne	r2,zero,100d84c <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 100d838:	e0fffe17 	ldw	r3,-8(fp)
 100d83c:	00800444 	movi	r2,17
 100d840:	18800005 	stb	r2,0(r3)
        return (0);
 100d844:	e03fff15 	stw	zero,-4(fp)
 100d848:	00002306 	br	100d8d8 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d84c:	0005303a 	rdctl	r2,status
 100d850:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d854:	e0fff917 	ldw	r3,-28(fp)
 100d858:	00bfff84 	movi	r2,-2
 100d85c:	1884703a 	and	r2,r3,r2
 100d860:	1001703a 	wrctl	status,r2
  
  return context;
 100d864:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100d868:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100d86c:	e0bffc17 	ldw	r2,-16(fp)
 100d870:	10800003 	ldbu	r2,0(r2)
 100d874:	10803fcc 	andi	r2,r2,255
 100d878:	10800160 	cmpeqi	r2,r2,5
 100d87c:	1000091e 	bne	r2,zero,100d8a4 <OSFlagNameGet+0xf8>
 100d880:	e0bffa17 	ldw	r2,-24(fp)
 100d884:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d888:	e0bff817 	ldw	r2,-32(fp)
 100d88c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100d890:	e0fffe17 	ldw	r3,-8(fp)
 100d894:	00800044 	movi	r2,1
 100d898:	18800005 	stb	r2,0(r3)
        return (0);
 100d89c:	e03fff15 	stw	zero,-4(fp)
 100d8a0:	00000d06 	br	100d8d8 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 100d8a4:	e0bffc17 	ldw	r2,-16(fp)
 100d8a8:	11400284 	addi	r5,r2,10
 100d8ac:	e13ffd17 	ldw	r4,-12(fp)
 100d8b0:	100c9640 	call	100c964 <OS_StrCopy>
 100d8b4:	e0bffb05 	stb	r2,-20(fp)
 100d8b8:	e0bffa17 	ldw	r2,-24(fp)
 100d8bc:	e0bff715 	stw	r2,-36(fp)
 100d8c0:	e0bff717 	ldw	r2,-36(fp)
 100d8c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100d8c8:	e0bffe17 	ldw	r2,-8(fp)
 100d8cc:	10000005 	stb	zero,0(r2)
    return (len);
 100d8d0:	e0bffb03 	ldbu	r2,-20(fp)
 100d8d4:	e0bfff15 	stw	r2,-4(fp)
 100d8d8:	e0bfff17 	ldw	r2,-4(fp)
}
 100d8dc:	e037883a 	mov	sp,fp
 100d8e0:	dfc00117 	ldw	ra,4(sp)
 100d8e4:	df000017 	ldw	fp,0(sp)
 100d8e8:	dec00204 	addi	sp,sp,8
 100d8ec:	f800283a 	ret

0100d8f0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100d8f0:	defff504 	addi	sp,sp,-44
 100d8f4:	dfc00a15 	stw	ra,40(sp)
 100d8f8:	df000915 	stw	fp,36(sp)
 100d8fc:	df000904 	addi	fp,sp,36
 100d900:	e13ffd15 	stw	r4,-12(fp)
 100d904:	e17ffe15 	stw	r5,-8(fp)
 100d908:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100d90c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100d910:	e0bfff17 	ldw	r2,-4(fp)
 100d914:	1005003a 	cmpeq	r2,r2,zero
 100d918:	1000451e 	bne	r2,zero,100da30 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 100d91c:	e0bffd17 	ldw	r2,-12(fp)
 100d920:	1004c03a 	cmpne	r2,r2,zero
 100d924:	1000041e 	bne	r2,zero,100d938 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100d928:	e0ffff17 	ldw	r3,-4(fp)
 100d92c:	00801b84 	movi	r2,110
 100d930:	18800005 	stb	r2,0(r3)
        return;
 100d934:	00003e06 	br	100da30 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100d938:	e0bffe17 	ldw	r2,-8(fp)
 100d93c:	1004c03a 	cmpne	r2,r2,zero
 100d940:	1000041e 	bne	r2,zero,100d954 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 100d944:	e0ffff17 	ldw	r3,-4(fp)
 100d948:	00800304 	movi	r2,12
 100d94c:	18800005 	stb	r2,0(r3)
        return;
 100d950:	00003706 	br	100da30 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100d954:	008040b4 	movhi	r2,258
 100d958:	10a68404 	addi	r2,r2,-26096
 100d95c:	10800003 	ldbu	r2,0(r2)
 100d960:	10803fcc 	andi	r2,r2,255
 100d964:	1005003a 	cmpeq	r2,r2,zero
 100d968:	1000041e 	bne	r2,zero,100d97c <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 100d96c:	e0ffff17 	ldw	r3,-4(fp)
 100d970:	00800484 	movi	r2,18
 100d974:	18800005 	stb	r2,0(r3)
        return;
 100d978:	00002d06 	br	100da30 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d97c:	0005303a 	rdctl	r2,status
 100d980:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d984:	e0fffa17 	ldw	r3,-24(fp)
 100d988:	00bfff84 	movi	r2,-2
 100d98c:	1884703a 	and	r2,r3,r2
 100d990:	1001703a 	wrctl	status,r2
  
  return context;
 100d994:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100d998:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100d99c:	e0bffd17 	ldw	r2,-12(fp)
 100d9a0:	10800003 	ldbu	r2,0(r2)
 100d9a4:	10803fcc 	andi	r2,r2,255
 100d9a8:	10800160 	cmpeqi	r2,r2,5
 100d9ac:	1000081e 	bne	r2,zero,100d9d0 <OSFlagNameSet+0xe0>
 100d9b0:	e0bffb17 	ldw	r2,-20(fp)
 100d9b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d9b8:	e0bff917 	ldw	r2,-28(fp)
 100d9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100d9c0:	e0ffff17 	ldw	r3,-4(fp)
 100d9c4:	00800044 	movi	r2,1
 100d9c8:	18800005 	stb	r2,0(r3)
        return;
 100d9cc:	00001806 	br	100da30 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 100d9d0:	e13ffe17 	ldw	r4,-8(fp)
 100d9d4:	100c9e40 	call	100c9e4 <OS_StrLen>
 100d9d8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 100d9dc:	e0bffc03 	ldbu	r2,-16(fp)
 100d9e0:	10800830 	cmpltui	r2,r2,32
 100d9e4:	1000081e 	bne	r2,zero,100da08 <OSFlagNameSet+0x118>
 100d9e8:	e0bffb17 	ldw	r2,-20(fp)
 100d9ec:	e0bff815 	stw	r2,-32(fp)
 100d9f0:	e0bff817 	ldw	r2,-32(fp)
 100d9f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 100d9f8:	e0ffff17 	ldw	r3,-4(fp)
 100d9fc:	00801cc4 	movi	r2,115
 100da00:	18800005 	stb	r2,0(r3)
        return;
 100da04:	00000a06 	br	100da30 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 100da08:	e0bffd17 	ldw	r2,-12(fp)
 100da0c:	11000284 	addi	r4,r2,10
 100da10:	e17ffe17 	ldw	r5,-8(fp)
 100da14:	100c9640 	call	100c964 <OS_StrCopy>
 100da18:	e0bffb17 	ldw	r2,-20(fp)
 100da1c:	e0bff715 	stw	r2,-36(fp)
 100da20:	e0bff717 	ldw	r2,-36(fp)
 100da24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100da28:	e0bfff17 	ldw	r2,-4(fp)
 100da2c:	10000005 	stb	zero,0(r2)
    return;
}
 100da30:	e037883a 	mov	sp,fp
 100da34:	dfc00117 	ldw	ra,4(sp)
 100da38:	df000017 	ldw	fp,0(sp)
 100da3c:	dec00204 	addi	sp,sp,8
 100da40:	f800283a 	ret

0100da44 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 100da44:	deffe004 	addi	sp,sp,-128
 100da48:	dfc01f15 	stw	ra,124(sp)
 100da4c:	df001e15 	stw	fp,120(sp)
 100da50:	df001e04 	addi	fp,sp,120
 100da54:	e13ff915 	stw	r4,-28(fp)
 100da58:	e17ffa0d 	sth	r5,-24(fp)
 100da5c:	e1bffb05 	stb	r6,-20(fp)
 100da60:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100da64:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100da68:	e0800217 	ldw	r2,8(fp)
 100da6c:	1004c03a 	cmpne	r2,r2,zero
 100da70:	1000021e 	bne	r2,zero,100da7c <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 100da74:	e03fff15 	stw	zero,-4(fp)
 100da78:	00017d06 	br	100e070 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 100da7c:	e0bff917 	ldw	r2,-28(fp)
 100da80:	1004c03a 	cmpne	r2,r2,zero
 100da84:	1000051e 	bne	r2,zero,100da9c <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100da88:	e0c00217 	ldw	r3,8(fp)
 100da8c:	00801b84 	movi	r2,110
 100da90:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100da94:	e03fff15 	stw	zero,-4(fp)
 100da98:	00017506 	br	100e070 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100da9c:	008040b4 	movhi	r2,258
 100daa0:	10a68404 	addi	r2,r2,-26096
 100daa4:	10800003 	ldbu	r2,0(r2)
 100daa8:	10803fcc 	andi	r2,r2,255
 100daac:	1005003a 	cmpeq	r2,r2,zero
 100dab0:	1000051e 	bne	r2,zero,100dac8 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 100dab4:	e0c00217 	ldw	r3,8(fp)
 100dab8:	00800084 	movi	r2,2
 100dabc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100dac0:	e03fff15 	stw	zero,-4(fp)
 100dac4:	00016a06 	br	100e070 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 100dac8:	008040b4 	movhi	r2,258
 100dacc:	10a67604 	addi	r2,r2,-26152
 100dad0:	10800003 	ldbu	r2,0(r2)
 100dad4:	10803fcc 	andi	r2,r2,255
 100dad8:	1005003a 	cmpeq	r2,r2,zero
 100dadc:	1000051e 	bne	r2,zero,100daf4 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 100dae0:	e0c00217 	ldw	r3,8(fp)
 100dae4:	00800344 	movi	r2,13
 100dae8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100daec:	e03fff15 	stw	zero,-4(fp)
 100daf0:	00015f06 	br	100e070 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100daf4:	e0bff917 	ldw	r2,-28(fp)
 100daf8:	10800003 	ldbu	r2,0(r2)
 100dafc:	10803fcc 	andi	r2,r2,255
 100db00:	10800160 	cmpeqi	r2,r2,5
 100db04:	1000051e 	bne	r2,zero,100db1c <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 100db08:	e0c00217 	ldw	r3,8(fp)
 100db0c:	00800044 	movi	r2,1
 100db10:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100db14:	e03fff15 	stw	zero,-4(fp)
 100db18:	00015506 	br	100e070 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 100db1c:	e0fffb03 	ldbu	r3,-20(fp)
 100db20:	00bfe004 	movi	r2,-128
 100db24:	1884703a 	and	r2,r3,r2
 100db28:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 100db2c:	e0bff283 	ldbu	r2,-54(fp)
 100db30:	1005003a 	cmpeq	r2,r2,zero
 100db34:	1000071e 	bne	r2,zero,100db54 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 100db38:	00c01fc4 	movi	r3,127
 100db3c:	e0bffb03 	ldbu	r2,-20(fp)
 100db40:	10c4703a 	and	r2,r2,r3
 100db44:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 100db48:	00800044 	movi	r2,1
 100db4c:	e0bff205 	stb	r2,-56(fp)
 100db50:	00000106 	br	100db58 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 100db54:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100db58:	0005303a 	rdctl	r2,status
 100db5c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100db60:	e0fff017 	ldw	r3,-64(fp)
 100db64:	00bfff84 	movi	r2,-2
 100db68:	1884703a 	and	r2,r3,r2
 100db6c:	1001703a 	wrctl	status,r2
  
  return context;
 100db70:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 100db74:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 100db78:	e0bffb03 	ldbu	r2,-20(fp)
 100db7c:	e0bffe15 	stw	r2,-8(fp)
 100db80:	e0fffe17 	ldw	r3,-8(fp)
 100db84:	18800060 	cmpeqi	r2,r3,1
 100db88:	1000981e 	bne	r2,zero,100ddec <OSFlagPend+0x3a8>
 100db8c:	e0fffe17 	ldw	r3,-8(fp)
 100db90:	18800088 	cmpgei	r2,r3,2
 100db94:	1000041e 	bne	r2,zero,100dba8 <OSFlagPend+0x164>
 100db98:	e0fffe17 	ldw	r3,-8(fp)
 100db9c:	1805003a 	cmpeq	r2,r3,zero
 100dba0:	1000641e 	bne	r2,zero,100dd34 <OSFlagPend+0x2f0>
 100dba4:	0000bf06 	br	100dea4 <OSFlagPend+0x460>
 100dba8:	e0fffe17 	ldw	r3,-8(fp)
 100dbac:	188000a0 	cmpeqi	r2,r3,2
 100dbb0:	1000041e 	bne	r2,zero,100dbc4 <OSFlagPend+0x180>
 100dbb4:	e0fffe17 	ldw	r3,-8(fp)
 100dbb8:	188000e0 	cmpeqi	r2,r3,3
 100dbbc:	10002f1e 	bne	r2,zero,100dc7c <OSFlagPend+0x238>
 100dbc0:	0000b806 	br	100dea4 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 100dbc4:	e0bff917 	ldw	r2,-28(fp)
 100dbc8:	10c0020b 	ldhu	r3,8(r2)
 100dbcc:	e0bffa0b 	ldhu	r2,-24(fp)
 100dbd0:	1884703a 	and	r2,r3,r2
 100dbd4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100dbd8:	e0fff30b 	ldhu	r3,-52(fp)
 100dbdc:	e0bffa0b 	ldhu	r2,-24(fp)
 100dbe0:	18801a1e 	bne	r3,r2,100dc4c <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100dbe4:	e0bff203 	ldbu	r2,-56(fp)
 100dbe8:	10800058 	cmpnei	r2,r2,1
 100dbec:	1000091e 	bne	r2,zero,100dc14 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100dbf0:	e0bff917 	ldw	r2,-28(fp)
 100dbf4:	1080020b 	ldhu	r2,8(r2)
 100dbf8:	1007883a 	mov	r3,r2
 100dbfc:	e0bff30b 	ldhu	r2,-52(fp)
 100dc00:	0084303a 	nor	r2,zero,r2
 100dc04:	1884703a 	and	r2,r3,r2
 100dc08:	1007883a 	mov	r3,r2
 100dc0c:	e0bff917 	ldw	r2,-28(fp)
 100dc10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100dc14:	008040b4 	movhi	r2,258
 100dc18:	10a68504 	addi	r2,r2,-26092
 100dc1c:	10c00017 	ldw	r3,0(r2)
 100dc20:	e0bff30b 	ldhu	r2,-52(fp)
 100dc24:	18800b0d 	sth	r2,44(r3)
 100dc28:	e0bff117 	ldw	r2,-60(fp)
 100dc2c:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100dc30:	e0bfef17 	ldw	r2,-68(fp)
 100dc34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100dc38:	e0800217 	ldw	r2,8(fp)
 100dc3c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100dc40:	e0bff30b 	ldhu	r2,-52(fp)
 100dc44:	e0bfff15 	stw	r2,-4(fp)
 100dc48:	00010906 	br	100e070 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100dc4c:	e1bffa0b 	ldhu	r6,-24(fp)
 100dc50:	e1fffb03 	ldbu	r7,-20(fp)
 100dc54:	e0bffc0b 	ldhu	r2,-16(fp)
 100dc58:	e17ff404 	addi	r5,fp,-48
 100dc5c:	d8800015 	stw	r2,0(sp)
 100dc60:	e13ff917 	ldw	r4,-28(fp)
 100dc64:	100e56c0 	call	100e56c <OS_FlagBlock>
 100dc68:	e0bff117 	ldw	r2,-60(fp)
 100dc6c:	e0bfee15 	stw	r2,-72(fp)
 100dc70:	e0bfee17 	ldw	r2,-72(fp)
 100dc74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100dc78:	00009506 	br	100ded0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 100dc7c:	e0bff917 	ldw	r2,-28(fp)
 100dc80:	10c0020b 	ldhu	r3,8(r2)
 100dc84:	e0bffa0b 	ldhu	r2,-24(fp)
 100dc88:	1884703a 	and	r2,r3,r2
 100dc8c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100dc90:	e0bff30b 	ldhu	r2,-52(fp)
 100dc94:	1005003a 	cmpeq	r2,r2,zero
 100dc98:	10001a1e 	bne	r2,zero,100dd04 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100dc9c:	e0bff203 	ldbu	r2,-56(fp)
 100dca0:	10800058 	cmpnei	r2,r2,1
 100dca4:	1000091e 	bne	r2,zero,100dccc <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100dca8:	e0bff917 	ldw	r2,-28(fp)
 100dcac:	1080020b 	ldhu	r2,8(r2)
 100dcb0:	1007883a 	mov	r3,r2
 100dcb4:	e0bff30b 	ldhu	r2,-52(fp)
 100dcb8:	0084303a 	nor	r2,zero,r2
 100dcbc:	1884703a 	and	r2,r3,r2
 100dcc0:	1007883a 	mov	r3,r2
 100dcc4:	e0bff917 	ldw	r2,-28(fp)
 100dcc8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100dccc:	008040b4 	movhi	r2,258
 100dcd0:	10a68504 	addi	r2,r2,-26092
 100dcd4:	10c00017 	ldw	r3,0(r2)
 100dcd8:	e0bff30b 	ldhu	r2,-52(fp)
 100dcdc:	18800b0d 	sth	r2,44(r3)
 100dce0:	e0bff117 	ldw	r2,-60(fp)
 100dce4:	e0bfed15 	stw	r2,-76(fp)
 100dce8:	e0bfed17 	ldw	r2,-76(fp)
 100dcec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100dcf0:	e0800217 	ldw	r2,8(fp)
 100dcf4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100dcf8:	e0fff30b 	ldhu	r3,-52(fp)
 100dcfc:	e0ffff15 	stw	r3,-4(fp)
 100dd00:	0000db06 	br	100e070 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100dd04:	e1bffa0b 	ldhu	r6,-24(fp)
 100dd08:	e1fffb03 	ldbu	r7,-20(fp)
 100dd0c:	e0bffc0b 	ldhu	r2,-16(fp)
 100dd10:	e17ff404 	addi	r5,fp,-48
 100dd14:	d8800015 	stw	r2,0(sp)
 100dd18:	e13ff917 	ldw	r4,-28(fp)
 100dd1c:	100e56c0 	call	100e56c <OS_FlagBlock>
 100dd20:	e0bff117 	ldw	r2,-60(fp)
 100dd24:	e0bfec15 	stw	r2,-80(fp)
 100dd28:	e0bfec17 	ldw	r2,-80(fp)
 100dd2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100dd30:	00006706 	br	100ded0 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100dd34:	e0bff917 	ldw	r2,-28(fp)
 100dd38:	1080020b 	ldhu	r2,8(r2)
 100dd3c:	0084303a 	nor	r2,zero,r2
 100dd40:	1007883a 	mov	r3,r2
 100dd44:	e0bffa0b 	ldhu	r2,-24(fp)
 100dd48:	1884703a 	and	r2,r3,r2
 100dd4c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100dd50:	e0fff30b 	ldhu	r3,-52(fp)
 100dd54:	e0bffa0b 	ldhu	r2,-24(fp)
 100dd58:	1880181e 	bne	r3,r2,100ddbc <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100dd5c:	e0bff203 	ldbu	r2,-56(fp)
 100dd60:	10800058 	cmpnei	r2,r2,1
 100dd64:	1000071e 	bne	r2,zero,100dd84 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100dd68:	e0bff917 	ldw	r2,-28(fp)
 100dd6c:	10c0020b 	ldhu	r3,8(r2)
 100dd70:	e0bff30b 	ldhu	r2,-52(fp)
 100dd74:	1884b03a 	or	r2,r3,r2
 100dd78:	1007883a 	mov	r3,r2
 100dd7c:	e0bff917 	ldw	r2,-28(fp)
 100dd80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100dd84:	008040b4 	movhi	r2,258
 100dd88:	10a68504 	addi	r2,r2,-26092
 100dd8c:	10c00017 	ldw	r3,0(r2)
 100dd90:	e0bff30b 	ldhu	r2,-52(fp)
 100dd94:	18800b0d 	sth	r2,44(r3)
 100dd98:	e0bff117 	ldw	r2,-60(fp)
 100dd9c:	e0bfeb15 	stw	r2,-84(fp)
 100dda0:	e0bfeb17 	ldw	r2,-84(fp)
 100dda4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100dda8:	e0800217 	ldw	r2,8(fp)
 100ddac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100ddb0:	e0bff30b 	ldhu	r2,-52(fp)
 100ddb4:	e0bfff15 	stw	r2,-4(fp)
 100ddb8:	0000ad06 	br	100e070 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100ddbc:	e1bffa0b 	ldhu	r6,-24(fp)
 100ddc0:	e1fffb03 	ldbu	r7,-20(fp)
 100ddc4:	e0bffc0b 	ldhu	r2,-16(fp)
 100ddc8:	e17ff404 	addi	r5,fp,-48
 100ddcc:	d8800015 	stw	r2,0(sp)
 100ddd0:	e13ff917 	ldw	r4,-28(fp)
 100ddd4:	100e56c0 	call	100e56c <OS_FlagBlock>
 100ddd8:	e0bff117 	ldw	r2,-60(fp)
 100dddc:	e0bfea15 	stw	r2,-88(fp)
 100dde0:	e0bfea17 	ldw	r2,-88(fp)
 100dde4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100dde8:	00003906 	br	100ded0 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100ddec:	e0bff917 	ldw	r2,-28(fp)
 100ddf0:	1080020b 	ldhu	r2,8(r2)
 100ddf4:	0084303a 	nor	r2,zero,r2
 100ddf8:	1007883a 	mov	r3,r2
 100ddfc:	e0bffa0b 	ldhu	r2,-24(fp)
 100de00:	1884703a 	and	r2,r3,r2
 100de04:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100de08:	e0bff30b 	ldhu	r2,-52(fp)
 100de0c:	1005003a 	cmpeq	r2,r2,zero
 100de10:	1000181e 	bne	r2,zero,100de74 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100de14:	e0bff203 	ldbu	r2,-56(fp)
 100de18:	10800058 	cmpnei	r2,r2,1
 100de1c:	1000071e 	bne	r2,zero,100de3c <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100de20:	e0bff917 	ldw	r2,-28(fp)
 100de24:	10c0020b 	ldhu	r3,8(r2)
 100de28:	e0bff30b 	ldhu	r2,-52(fp)
 100de2c:	1884b03a 	or	r2,r3,r2
 100de30:	1007883a 	mov	r3,r2
 100de34:	e0bff917 	ldw	r2,-28(fp)
 100de38:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100de3c:	008040b4 	movhi	r2,258
 100de40:	10a68504 	addi	r2,r2,-26092
 100de44:	10c00017 	ldw	r3,0(r2)
 100de48:	e0bff30b 	ldhu	r2,-52(fp)
 100de4c:	18800b0d 	sth	r2,44(r3)
 100de50:	e0bff117 	ldw	r2,-60(fp)
 100de54:	e0bfe915 	stw	r2,-92(fp)
 100de58:	e0bfe917 	ldw	r2,-92(fp)
 100de5c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100de60:	e0800217 	ldw	r2,8(fp)
 100de64:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 100de68:	e0fff30b 	ldhu	r3,-52(fp)
 100de6c:	e0ffff15 	stw	r3,-4(fp)
 100de70:	00007f06 	br	100e070 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100de74:	e1bffa0b 	ldhu	r6,-24(fp)
 100de78:	e1fffb03 	ldbu	r7,-20(fp)
 100de7c:	e0bffc0b 	ldhu	r2,-16(fp)
 100de80:	e17ff404 	addi	r5,fp,-48
 100de84:	d8800015 	stw	r2,0(sp)
 100de88:	e13ff917 	ldw	r4,-28(fp)
 100de8c:	100e56c0 	call	100e56c <OS_FlagBlock>
 100de90:	e0bff117 	ldw	r2,-60(fp)
 100de94:	e0bfe815 	stw	r2,-96(fp)
 100de98:	e0bfe817 	ldw	r2,-96(fp)
 100de9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 100dea0:	00000b06 	br	100ded0 <OSFlagPend+0x48c>
 100dea4:	e0bff117 	ldw	r2,-60(fp)
 100dea8:	e0bfe715 	stw	r2,-100(fp)
 100deac:	e0bfe717 	ldw	r2,-100(fp)
 100deb0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 100deb4:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 100deb8:	e0c00217 	ldw	r3,8(fp)
 100debc:	00801bc4 	movi	r2,111
 100dec0:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 100dec4:	e0bff30b 	ldhu	r2,-52(fp)
 100dec8:	e0bfff15 	stw	r2,-4(fp)
 100decc:	00006806 	br	100e070 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 100ded0:	100c8200 	call	100c820 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ded4:	0005303a 	rdctl	r2,status
 100ded8:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100dedc:	e0ffe617 	ldw	r3,-104(fp)
 100dee0:	00bfff84 	movi	r2,-2
 100dee4:	1884703a 	and	r2,r3,r2
 100dee8:	1001703a 	wrctl	status,r2
  
  return context;
 100deec:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 100def0:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 100def4:	008040b4 	movhi	r2,258
 100def8:	10a68504 	addi	r2,r2,-26092
 100defc:	10800017 	ldw	r2,0(r2)
 100df00:	10800c43 	ldbu	r2,49(r2)
 100df04:	10803fcc 	andi	r2,r2,255
 100df08:	1005003a 	cmpeq	r2,r2,zero
 100df0c:	1000221e 	bne	r2,zero,100df98 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 100df10:	008040b4 	movhi	r2,258
 100df14:	10a68504 	addi	r2,r2,-26092
 100df18:	10800017 	ldw	r2,0(r2)
 100df1c:	10800c43 	ldbu	r2,49(r2)
 100df20:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100df24:	008040b4 	movhi	r2,258
 100df28:	10a68504 	addi	r2,r2,-26092
 100df2c:	10800017 	ldw	r2,0(r2)
 100df30:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 100df34:	e13ff404 	addi	r4,fp,-48
 100df38:	100e9240 	call	100e924 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 100df3c:	008040b4 	movhi	r2,258
 100df40:	10a68504 	addi	r2,r2,-26092
 100df44:	10800017 	ldw	r2,0(r2)
 100df48:	10000c05 	stb	zero,48(r2)
 100df4c:	e0bff117 	ldw	r2,-60(fp)
 100df50:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100df54:	e0bfe517 	ldw	r2,-108(fp)
 100df58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 100df5c:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 100df60:	e0bff243 	ldbu	r2,-55(fp)
 100df64:	108000a0 	cmpeqi	r2,r2,2
 100df68:	1000011e 	bne	r2,zero,100df70 <OSFlagPend+0x52c>
 100df6c:	00000406 	br	100df80 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 100df70:	e0c00217 	ldw	r3,8(fp)
 100df74:	00800384 	movi	r2,14
 100df78:	18800005 	stb	r2,0(r3)
                 break;
 100df7c:	00000306 	br	100df8c <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 100df80:	e0c00217 	ldw	r3,8(fp)
 100df84:	00800284 	movi	r2,10
 100df88:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 100df8c:	e0fff30b 	ldhu	r3,-52(fp)
 100df90:	e0ffff15 	stw	r3,-4(fp)
 100df94:	00003606 	br	100e070 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 100df98:	008040b4 	movhi	r2,258
 100df9c:	10a68504 	addi	r2,r2,-26092
 100dfa0:	10800017 	ldw	r2,0(r2)
 100dfa4:	10800b0b 	ldhu	r2,44(r2)
 100dfa8:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 100dfac:	e0bff203 	ldbu	r2,-56(fp)
 100dfb0:	10800058 	cmpnei	r2,r2,1
 100dfb4:	1000261e 	bne	r2,zero,100e050 <OSFlagPend+0x60c>
        switch (wait_type) {
 100dfb8:	e0bffb03 	ldbu	r2,-20(fp)
 100dfbc:	e0bffd15 	stw	r2,-12(fp)
 100dfc0:	e0fffd17 	ldw	r3,-12(fp)
 100dfc4:	1804803a 	cmplt	r2,r3,zero
 100dfc8:	1000181e 	bne	r2,zero,100e02c <OSFlagPend+0x5e8>
 100dfcc:	e0fffd17 	ldw	r3,-12(fp)
 100dfd0:	18800090 	cmplti	r2,r3,2
 100dfd4:	10000d1e 	bne	r2,zero,100e00c <OSFlagPend+0x5c8>
 100dfd8:	e0fffd17 	ldw	r3,-12(fp)
 100dfdc:	18800108 	cmpgei	r2,r3,4
 100dfe0:	1000121e 	bne	r2,zero,100e02c <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 100dfe4:	e0bff917 	ldw	r2,-28(fp)
 100dfe8:	1080020b 	ldhu	r2,8(r2)
 100dfec:	1007883a 	mov	r3,r2
 100dff0:	e0bff30b 	ldhu	r2,-52(fp)
 100dff4:	0084303a 	nor	r2,zero,r2
 100dff8:	1884703a 	and	r2,r3,r2
 100dffc:	1007883a 	mov	r3,r2
 100e000:	e0bff917 	ldw	r2,-28(fp)
 100e004:	10c0020d 	sth	r3,8(r2)
                 break;
 100e008:	00001106 	br	100e050 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 100e00c:	e0bff917 	ldw	r2,-28(fp)
 100e010:	10c0020b 	ldhu	r3,8(r2)
 100e014:	e0bff30b 	ldhu	r2,-52(fp)
 100e018:	1884b03a 	or	r2,r3,r2
 100e01c:	1007883a 	mov	r3,r2
 100e020:	e0bff917 	ldw	r2,-28(fp)
 100e024:	10c0020d 	sth	r3,8(r2)
                 break;
 100e028:	00000906 	br	100e050 <OSFlagPend+0x60c>
 100e02c:	e0bff117 	ldw	r2,-60(fp)
 100e030:	e0bfe415 	stw	r2,-112(fp)
 100e034:	e0bfe417 	ldw	r2,-112(fp)
 100e038:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 100e03c:	e0c00217 	ldw	r3,8(fp)
 100e040:	00801bc4 	movi	r2,111
 100e044:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 100e048:	e03fff15 	stw	zero,-4(fp)
 100e04c:	00000806 	br	100e070 <OSFlagPend+0x62c>
 100e050:	e0bff117 	ldw	r2,-60(fp)
 100e054:	e0bfe315 	stw	r2,-116(fp)
 100e058:	e0bfe317 	ldw	r2,-116(fp)
 100e05c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 100e060:	e0800217 	ldw	r2,8(fp)
 100e064:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 100e068:	e0bff30b 	ldhu	r2,-52(fp)
 100e06c:	e0bfff15 	stw	r2,-4(fp)
 100e070:	e0bfff17 	ldw	r2,-4(fp)
}
 100e074:	e037883a 	mov	sp,fp
 100e078:	dfc00117 	ldw	ra,4(sp)
 100e07c:	df000017 	ldw	fp,0(sp)
 100e080:	dec00204 	addi	sp,sp,8
 100e084:	f800283a 	ret

0100e088 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 100e088:	defffb04 	addi	sp,sp,-20
 100e08c:	df000415 	stw	fp,16(sp)
 100e090:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 100e094:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e098:	0005303a 	rdctl	r2,status
 100e09c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e0a0:	e0fffd17 	ldw	r3,-12(fp)
 100e0a4:	00bfff84 	movi	r2,-2
 100e0a8:	1884703a 	and	r2,r3,r2
 100e0ac:	1001703a 	wrctl	status,r2
  
  return context;
 100e0b0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 100e0b4:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 100e0b8:	008040b4 	movhi	r2,258
 100e0bc:	10a68504 	addi	r2,r2,-26092
 100e0c0:	10800017 	ldw	r2,0(r2)
 100e0c4:	10800b0b 	ldhu	r2,44(r2)
 100e0c8:	e0bfff0d 	sth	r2,-4(fp)
 100e0cc:	e0bffe17 	ldw	r2,-8(fp)
 100e0d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e0d4:	e0bffc17 	ldw	r2,-16(fp)
 100e0d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 100e0dc:	e0bfff0b 	ldhu	r2,-4(fp)
}
 100e0e0:	e037883a 	mov	sp,fp
 100e0e4:	df000017 	ldw	fp,0(sp)
 100e0e8:	dec00104 	addi	sp,sp,4
 100e0ec:	f800283a 	ret

0100e0f0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 100e0f0:	deffed04 	addi	sp,sp,-76
 100e0f4:	dfc01215 	stw	ra,72(sp)
 100e0f8:	df001115 	stw	fp,68(sp)
 100e0fc:	df001104 	addi	fp,sp,68
 100e100:	e13ff915 	stw	r4,-28(fp)
 100e104:	e1fffc15 	stw	r7,-16(fp)
 100e108:	e17ffa0d 	sth	r5,-24(fp)
 100e10c:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 100e110:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 100e114:	e0bffc17 	ldw	r2,-16(fp)
 100e118:	1004c03a 	cmpne	r2,r2,zero
 100e11c:	1000021e 	bne	r2,zero,100e128 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 100e120:	e03fff15 	stw	zero,-4(fp)
 100e124:	0000d606 	br	100e480 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 100e128:	e0bff917 	ldw	r2,-28(fp)
 100e12c:	1004c03a 	cmpne	r2,r2,zero
 100e130:	1000051e 	bne	r2,zero,100e148 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100e134:	e0fffc17 	ldw	r3,-16(fp)
 100e138:	00801b84 	movi	r2,110
 100e13c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100e140:	e03fff15 	stw	zero,-4(fp)
 100e144:	0000ce06 	br	100e480 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 100e148:	e0bff917 	ldw	r2,-28(fp)
 100e14c:	10800003 	ldbu	r2,0(r2)
 100e150:	10803fcc 	andi	r2,r2,255
 100e154:	10800160 	cmpeqi	r2,r2,5
 100e158:	1000051e 	bne	r2,zero,100e170 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 100e15c:	e0fffc17 	ldw	r3,-16(fp)
 100e160:	00800044 	movi	r2,1
 100e164:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100e168:	e03fff15 	stw	zero,-4(fp)
 100e16c:	0000c406 	br	100e480 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e170:	0005303a 	rdctl	r2,status
 100e174:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e178:	e0fff417 	ldw	r3,-48(fp)
 100e17c:	00bfff84 	movi	r2,-2
 100e180:	1884703a 	and	r2,r3,r2
 100e184:	1001703a 	wrctl	status,r2
  
  return context;
 100e188:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 100e18c:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 100e190:	e0bffb03 	ldbu	r2,-20(fp)
 100e194:	e0bffe15 	stw	r2,-8(fp)
 100e198:	e0fffe17 	ldw	r3,-8(fp)
 100e19c:	1805003a 	cmpeq	r2,r3,zero
 100e1a0:	1000041e 	bne	r2,zero,100e1b4 <OSFlagPost+0xc4>
 100e1a4:	e0fffe17 	ldw	r3,-8(fp)
 100e1a8:	18800060 	cmpeqi	r2,r3,1
 100e1ac:	10000b1e 	bne	r2,zero,100e1dc <OSFlagPost+0xec>
 100e1b0:	00001206 	br	100e1fc <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 100e1b4:	e0bff917 	ldw	r2,-28(fp)
 100e1b8:	1080020b 	ldhu	r2,8(r2)
 100e1bc:	1007883a 	mov	r3,r2
 100e1c0:	e0bffa0b 	ldhu	r2,-24(fp)
 100e1c4:	0084303a 	nor	r2,zero,r2
 100e1c8:	1884703a 	and	r2,r3,r2
 100e1cc:	1007883a 	mov	r3,r2
 100e1d0:	e0bff917 	ldw	r2,-28(fp)
 100e1d4:	10c0020d 	sth	r3,8(r2)
             break;
 100e1d8:	00001106 	br	100e220 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 100e1dc:	e0bff917 	ldw	r2,-28(fp)
 100e1e0:	10c0020b 	ldhu	r3,8(r2)
 100e1e4:	e0bffa0b 	ldhu	r2,-24(fp)
 100e1e8:	1884b03a 	or	r2,r3,r2
 100e1ec:	1007883a 	mov	r3,r2
 100e1f0:	e0bff917 	ldw	r2,-28(fp)
 100e1f4:	10c0020d 	sth	r3,8(r2)
             break;
 100e1f8:	00000906 	br	100e220 <OSFlagPost+0x130>
 100e1fc:	e0bff517 	ldw	r2,-44(fp)
 100e200:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e204:	e0bff317 	ldw	r2,-52(fp)
 100e208:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 100e20c:	e0fffc17 	ldw	r3,-16(fp)
 100e210:	00801c44 	movi	r2,113
 100e214:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 100e218:	e03fff15 	stw	zero,-4(fp)
 100e21c:	00009806 	br	100e480 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 100e220:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100e224:	e0bff917 	ldw	r2,-28(fp)
 100e228:	10800117 	ldw	r2,4(r2)
 100e22c:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 100e230:	00007506 	br	100e408 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 100e234:	e0bff817 	ldw	r2,-32(fp)
 100e238:	10800483 	ldbu	r2,18(r2)
 100e23c:	10803fcc 	andi	r2,r2,255
 100e240:	e0bffd15 	stw	r2,-12(fp)
 100e244:	e0fffd17 	ldw	r3,-12(fp)
 100e248:	18800060 	cmpeqi	r2,r3,1
 100e24c:	10004d1e 	bne	r2,zero,100e384 <OSFlagPost+0x294>
 100e250:	e0fffd17 	ldw	r3,-12(fp)
 100e254:	18800088 	cmpgei	r2,r3,2
 100e258:	1000041e 	bne	r2,zero,100e26c <OSFlagPost+0x17c>
 100e25c:	e0fffd17 	ldw	r3,-12(fp)
 100e260:	1805003a 	cmpeq	r2,r3,zero
 100e264:	1000301e 	bne	r2,zero,100e328 <OSFlagPost+0x238>
 100e268:	00005b06 	br	100e3d8 <OSFlagPost+0x2e8>
 100e26c:	e0fffd17 	ldw	r3,-12(fp)
 100e270:	188000a0 	cmpeqi	r2,r3,2
 100e274:	1000041e 	bne	r2,zero,100e288 <OSFlagPost+0x198>
 100e278:	e0fffd17 	ldw	r3,-12(fp)
 100e27c:	188000e0 	cmpeqi	r2,r3,3
 100e280:	1000161e 	bne	r2,zero,100e2dc <OSFlagPost+0x1ec>
 100e284:	00005406 	br	100e3d8 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100e288:	e0bff917 	ldw	r2,-28(fp)
 100e28c:	10c0020b 	ldhu	r3,8(r2)
 100e290:	e0bff817 	ldw	r2,-32(fp)
 100e294:	1080040b 	ldhu	r2,16(r2)
 100e298:	1884703a 	and	r2,r3,r2
 100e29c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 100e2a0:	e0bff817 	ldw	r2,-32(fp)
 100e2a4:	1080040b 	ldhu	r2,16(r2)
 100e2a8:	10ffffcc 	andi	r3,r2,65535
 100e2ac:	e0bff68b 	ldhu	r2,-38(fp)
 100e2b0:	1880521e 	bne	r3,r2,100e3fc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100e2b4:	e17ff68b 	ldhu	r5,-38(fp)
 100e2b8:	e13ff817 	ldw	r4,-32(fp)
 100e2bc:	100e8140 	call	100e814 <OS_FlagTaskRdy>
 100e2c0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100e2c4:	e0bff603 	ldbu	r2,-40(fp)
 100e2c8:	10800058 	cmpnei	r2,r2,1
 100e2cc:	10004b1e 	bne	r2,zero,100e3fc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100e2d0:	00800044 	movi	r2,1
 100e2d4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100e2d8:	00004806 	br	100e3fc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100e2dc:	e0bff917 	ldw	r2,-28(fp)
 100e2e0:	10c0020b 	ldhu	r3,8(r2)
 100e2e4:	e0bff817 	ldw	r2,-32(fp)
 100e2e8:	1080040b 	ldhu	r2,16(r2)
 100e2ec:	1884703a 	and	r2,r3,r2
 100e2f0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 100e2f4:	e0bff68b 	ldhu	r2,-38(fp)
 100e2f8:	1005003a 	cmpeq	r2,r2,zero
 100e2fc:	10003f1e 	bne	r2,zero,100e3fc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100e300:	e17ff68b 	ldhu	r5,-38(fp)
 100e304:	e13ff817 	ldw	r4,-32(fp)
 100e308:	100e8140 	call	100e814 <OS_FlagTaskRdy>
 100e30c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100e310:	e0bff603 	ldbu	r2,-40(fp)
 100e314:	10800058 	cmpnei	r2,r2,1
 100e318:	1000381e 	bne	r2,zero,100e3fc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100e31c:	00800044 	movi	r2,1
 100e320:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100e324:	00003506 	br	100e3fc <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100e328:	e0bff917 	ldw	r2,-28(fp)
 100e32c:	1080020b 	ldhu	r2,8(r2)
 100e330:	0084303a 	nor	r2,zero,r2
 100e334:	1007883a 	mov	r3,r2
 100e338:	e0bff817 	ldw	r2,-32(fp)
 100e33c:	1080040b 	ldhu	r2,16(r2)
 100e340:	1884703a 	and	r2,r3,r2
 100e344:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 100e348:	e0bff817 	ldw	r2,-32(fp)
 100e34c:	1080040b 	ldhu	r2,16(r2)
 100e350:	10ffffcc 	andi	r3,r2,65535
 100e354:	e0bff68b 	ldhu	r2,-38(fp)
 100e358:	1880281e 	bne	r3,r2,100e3fc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100e35c:	e17ff68b 	ldhu	r5,-38(fp)
 100e360:	e13ff817 	ldw	r4,-32(fp)
 100e364:	100e8140 	call	100e814 <OS_FlagTaskRdy>
 100e368:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100e36c:	e0bff603 	ldbu	r2,-40(fp)
 100e370:	10800058 	cmpnei	r2,r2,1
 100e374:	1000211e 	bne	r2,zero,100e3fc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100e378:	00800044 	movi	r2,1
 100e37c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100e380:	00001e06 	br	100e3fc <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100e384:	e0bff917 	ldw	r2,-28(fp)
 100e388:	1080020b 	ldhu	r2,8(r2)
 100e38c:	0084303a 	nor	r2,zero,r2
 100e390:	1007883a 	mov	r3,r2
 100e394:	e0bff817 	ldw	r2,-32(fp)
 100e398:	1080040b 	ldhu	r2,16(r2)
 100e39c:	1884703a 	and	r2,r3,r2
 100e3a0:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 100e3a4:	e0bff68b 	ldhu	r2,-38(fp)
 100e3a8:	1005003a 	cmpeq	r2,r2,zero
 100e3ac:	1000131e 	bne	r2,zero,100e3fc <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100e3b0:	e17ff68b 	ldhu	r5,-38(fp)
 100e3b4:	e13ff817 	ldw	r4,-32(fp)
 100e3b8:	100e8140 	call	100e814 <OS_FlagTaskRdy>
 100e3bc:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 100e3c0:	e0bff603 	ldbu	r2,-40(fp)
 100e3c4:	10800058 	cmpnei	r2,r2,1
 100e3c8:	10000c1e 	bne	r2,zero,100e3fc <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 100e3cc:	00800044 	movi	r2,1
 100e3d0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 100e3d4:	00000906 	br	100e3fc <OSFlagPost+0x30c>
 100e3d8:	e0bff517 	ldw	r2,-44(fp)
 100e3dc:	e0bff215 	stw	r2,-56(fp)
 100e3e0:	e0bff217 	ldw	r2,-56(fp)
 100e3e4:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 100e3e8:	e0fffc17 	ldw	r3,-16(fp)
 100e3ec:	00801bc4 	movi	r2,111
 100e3f0:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 100e3f4:	e03fff15 	stw	zero,-4(fp)
 100e3f8:	00002106 	br	100e480 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 100e3fc:	e0bff817 	ldw	r2,-32(fp)
 100e400:	10800017 	ldw	r2,0(r2)
 100e404:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 100e408:	e0bff817 	ldw	r2,-32(fp)
 100e40c:	1004c03a 	cmpne	r2,r2,zero
 100e410:	103f881e 	bne	r2,zero,100e234 <OSFlagPost+0x144>
 100e414:	e0bff517 	ldw	r2,-44(fp)
 100e418:	e0bff115 	stw	r2,-60(fp)
 100e41c:	e0bff117 	ldw	r2,-60(fp)
 100e420:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 100e424:	e0bff783 	ldbu	r2,-34(fp)
 100e428:	10800058 	cmpnei	r2,r2,1
 100e42c:	1000011e 	bne	r2,zero,100e434 <OSFlagPost+0x344>
        OS_Sched();
 100e430:	100c8200 	call	100c820 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e434:	0005303a 	rdctl	r2,status
 100e438:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e43c:	e0fff017 	ldw	r3,-64(fp)
 100e440:	00bfff84 	movi	r2,-2
 100e444:	1884703a 	and	r2,r3,r2
 100e448:	1001703a 	wrctl	status,r2
  
  return context;
 100e44c:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 100e450:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 100e454:	e0bff917 	ldw	r2,-28(fp)
 100e458:	1080020b 	ldhu	r2,8(r2)
 100e45c:	e0bff70d 	sth	r2,-36(fp)
 100e460:	e0bff517 	ldw	r2,-44(fp)
 100e464:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e468:	e0bfef17 	ldw	r2,-68(fp)
 100e46c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 100e470:	e0bffc17 	ldw	r2,-16(fp)
 100e474:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 100e478:	e0bff70b 	ldhu	r2,-36(fp)
 100e47c:	e0bfff15 	stw	r2,-4(fp)
 100e480:	e0bfff17 	ldw	r2,-4(fp)
}
 100e484:	e037883a 	mov	sp,fp
 100e488:	dfc00117 	ldw	ra,4(sp)
 100e48c:	df000017 	ldw	fp,0(sp)
 100e490:	dec00204 	addi	sp,sp,8
 100e494:	f800283a 	ret

0100e498 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 100e498:	defff804 	addi	sp,sp,-32
 100e49c:	df000715 	stw	fp,28(sp)
 100e4a0:	df000704 	addi	fp,sp,28
 100e4a4:	e13ffd15 	stw	r4,-12(fp)
 100e4a8:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 100e4ac:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 100e4b0:	e0bffe17 	ldw	r2,-8(fp)
 100e4b4:	1004c03a 	cmpne	r2,r2,zero
 100e4b8:	1000021e 	bne	r2,zero,100e4c4 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 100e4bc:	e03fff15 	stw	zero,-4(fp)
 100e4c0:	00002506 	br	100e558 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 100e4c4:	e0bffd17 	ldw	r2,-12(fp)
 100e4c8:	1004c03a 	cmpne	r2,r2,zero
 100e4cc:	1000051e 	bne	r2,zero,100e4e4 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 100e4d0:	e0fffe17 	ldw	r3,-8(fp)
 100e4d4:	00801b84 	movi	r2,110
 100e4d8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100e4dc:	e03fff15 	stw	zero,-4(fp)
 100e4e0:	00001d06 	br	100e558 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 100e4e4:	e0bffd17 	ldw	r2,-12(fp)
 100e4e8:	10800003 	ldbu	r2,0(r2)
 100e4ec:	10803fcc 	andi	r2,r2,255
 100e4f0:	10800160 	cmpeqi	r2,r2,5
 100e4f4:	1000051e 	bne	r2,zero,100e50c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 100e4f8:	e0fffe17 	ldw	r3,-8(fp)
 100e4fc:	00800044 	movi	r2,1
 100e500:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 100e504:	e03fff15 	stw	zero,-4(fp)
 100e508:	00001306 	br	100e558 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e50c:	0005303a 	rdctl	r2,status
 100e510:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e514:	e0fffa17 	ldw	r3,-24(fp)
 100e518:	00bfff84 	movi	r2,-2
 100e51c:	1884703a 	and	r2,r3,r2
 100e520:	1001703a 	wrctl	status,r2
  
  return context;
 100e524:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100e528:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 100e52c:	e0bffd17 	ldw	r2,-12(fp)
 100e530:	1080020b 	ldhu	r2,8(r2)
 100e534:	e0bffc0d 	sth	r2,-16(fp)
 100e538:	e0bffb17 	ldw	r2,-20(fp)
 100e53c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e540:	e0bff917 	ldw	r2,-28(fp)
 100e544:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100e548:	e0bffe17 	ldw	r2,-8(fp)
 100e54c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 100e550:	e0bffc0b 	ldhu	r2,-16(fp)
 100e554:	e0bfff15 	stw	r2,-4(fp)
 100e558:	e0bfff17 	ldw	r2,-4(fp)
}
 100e55c:	e037883a 	mov	sp,fp
 100e560:	df000017 	ldw	fp,0(sp)
 100e564:	dec00104 	addi	sp,sp,4
 100e568:	f800283a 	ret

0100e56c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 100e56c:	defff804 	addi	sp,sp,-32
 100e570:	df000715 	stw	fp,28(sp)
 100e574:	df000704 	addi	fp,sp,28
 100e578:	e13ffb15 	stw	r4,-20(fp)
 100e57c:	e17ffc15 	stw	r5,-16(fp)
 100e580:	e0800117 	ldw	r2,4(fp)
 100e584:	e1bffd0d 	sth	r6,-12(fp)
 100e588:	e1fffe05 	stb	r7,-8(fp)
 100e58c:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 100e590:	008040b4 	movhi	r2,258
 100e594:	10a68504 	addi	r2,r2,-26092
 100e598:	10c00017 	ldw	r3,0(r2)
 100e59c:	008040b4 	movhi	r2,258
 100e5a0:	10a68504 	addi	r2,r2,-26092
 100e5a4:	10800017 	ldw	r2,0(r2)
 100e5a8:	10800c03 	ldbu	r2,48(r2)
 100e5ac:	10800814 	ori	r2,r2,32
 100e5b0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 100e5b4:	008040b4 	movhi	r2,258
 100e5b8:	10a68504 	addi	r2,r2,-26092
 100e5bc:	10800017 	ldw	r2,0(r2)
 100e5c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 100e5c4:	008040b4 	movhi	r2,258
 100e5c8:	10a68504 	addi	r2,r2,-26092
 100e5cc:	10c00017 	ldw	r3,0(r2)
 100e5d0:	e0bfff0b 	ldhu	r2,-4(fp)
 100e5d4:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 100e5d8:	008040b4 	movhi	r2,258
 100e5dc:	10a68504 	addi	r2,r2,-26092
 100e5e0:	10c00017 	ldw	r3,0(r2)
 100e5e4:	e0bffc17 	ldw	r2,-16(fp)
 100e5e8:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 100e5ec:	e0fffc17 	ldw	r3,-16(fp)
 100e5f0:	e0bffd0b 	ldhu	r2,-12(fp)
 100e5f4:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 100e5f8:	e0fffc17 	ldw	r3,-16(fp)
 100e5fc:	e0bffe03 	ldbu	r2,-8(fp)
 100e600:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 100e604:	008040b4 	movhi	r2,258
 100e608:	10a68504 	addi	r2,r2,-26092
 100e60c:	10c00017 	ldw	r3,0(r2)
 100e610:	e0bffc17 	ldw	r2,-16(fp)
 100e614:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 100e618:	e0bffb17 	ldw	r2,-20(fp)
 100e61c:	10c00117 	ldw	r3,4(r2)
 100e620:	e0bffc17 	ldw	r2,-16(fp)
 100e624:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 100e628:	e0bffc17 	ldw	r2,-16(fp)
 100e62c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 100e630:	e0fffc17 	ldw	r3,-16(fp)
 100e634:	e0bffb17 	ldw	r2,-20(fp)
 100e638:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100e63c:	e0bffb17 	ldw	r2,-20(fp)
 100e640:	10800117 	ldw	r2,4(r2)
 100e644:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 100e648:	e0bffa17 	ldw	r2,-24(fp)
 100e64c:	1005003a 	cmpeq	r2,r2,zero
 100e650:	1000031e 	bne	r2,zero,100e660 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 100e654:	e0fffa17 	ldw	r3,-24(fp)
 100e658:	e0bffc17 	ldw	r2,-16(fp)
 100e65c:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 100e660:	e0fffb17 	ldw	r3,-20(fp)
 100e664:	e0bffc17 	ldw	r2,-16(fp)
 100e668:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 100e66c:	008040b4 	movhi	r2,258
 100e670:	10a68504 	addi	r2,r2,-26092
 100e674:	10800017 	ldw	r2,0(r2)
 100e678:	10800d03 	ldbu	r2,52(r2)
 100e67c:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100e680:	e13ff903 	ldbu	r4,-28(fp)
 100e684:	e0fff903 	ldbu	r3,-28(fp)
 100e688:	008040b4 	movhi	r2,258
 100e68c:	10a68244 	addi	r2,r2,-26103
 100e690:	10c5883a 	add	r2,r2,r3
 100e694:	10800003 	ldbu	r2,0(r2)
 100e698:	1007883a 	mov	r3,r2
 100e69c:	008040b4 	movhi	r2,258
 100e6a0:	10a68504 	addi	r2,r2,-26092
 100e6a4:	10800017 	ldw	r2,0(r2)
 100e6a8:	10800d43 	ldbu	r2,53(r2)
 100e6ac:	0084303a 	nor	r2,zero,r2
 100e6b0:	1884703a 	and	r2,r3,r2
 100e6b4:	1007883a 	mov	r3,r2
 100e6b8:	008040b4 	movhi	r2,258
 100e6bc:	10a68244 	addi	r2,r2,-26103
 100e6c0:	1105883a 	add	r2,r2,r4
 100e6c4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 100e6c8:	e0fff903 	ldbu	r3,-28(fp)
 100e6cc:	008040b4 	movhi	r2,258
 100e6d0:	10a68244 	addi	r2,r2,-26103
 100e6d4:	10c5883a 	add	r2,r2,r3
 100e6d8:	10800003 	ldbu	r2,0(r2)
 100e6dc:	10803fcc 	andi	r2,r2,255
 100e6e0:	1004c03a 	cmpne	r2,r2,zero
 100e6e4:	10000e1e 	bne	r2,zero,100e720 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 100e6e8:	008040b4 	movhi	r2,258
 100e6ec:	10a68504 	addi	r2,r2,-26092
 100e6f0:	10800017 	ldw	r2,0(r2)
 100e6f4:	10800d83 	ldbu	r2,54(r2)
 100e6f8:	0084303a 	nor	r2,zero,r2
 100e6fc:	1007883a 	mov	r3,r2
 100e700:	008040b4 	movhi	r2,258
 100e704:	10a68204 	addi	r2,r2,-26104
 100e708:	10800003 	ldbu	r2,0(r2)
 100e70c:	1884703a 	and	r2,r3,r2
 100e710:	1007883a 	mov	r3,r2
 100e714:	008040b4 	movhi	r2,258
 100e718:	10a68204 	addi	r2,r2,-26104
 100e71c:	10c00005 	stb	r3,0(r2)
    }
}
 100e720:	e037883a 	mov	sp,fp
 100e724:	df000017 	ldw	fp,0(sp)
 100e728:	dec00104 	addi	sp,sp,4
 100e72c:	f800283a 	ret

0100e730 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 100e730:	defffb04 	addi	sp,sp,-20
 100e734:	dfc00415 	stw	ra,16(sp)
 100e738:	df000315 	stw	fp,12(sp)
 100e73c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 100e740:	010040b4 	movhi	r4,258
 100e744:	213e9704 	addi	r4,r4,-1444
 100e748:	0140dc04 	movi	r5,880
 100e74c:	100c7600 	call	100c760 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 100e750:	008040b4 	movhi	r2,258
 100e754:	10be9704 	addi	r2,r2,-1444
 100e758:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 100e75c:	008040b4 	movhi	r2,258
 100e760:	10bea204 	addi	r2,r2,-1400
 100e764:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 100e768:	e03fff0d 	sth	zero,-4(fp)
 100e76c:	00001306 	br	100e7bc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100e770:	e0bffe17 	ldw	r2,-8(fp)
 100e774:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 100e778:	e0fffe17 	ldw	r3,-8(fp)
 100e77c:	e0bffd17 	ldw	r2,-12(fp)
 100e780:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 100e784:	e0fffe17 	ldw	r3,-8(fp)
 100e788:	00800fc4 	movi	r2,63
 100e78c:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 100e790:	e0bffe17 	ldw	r2,-8(fp)
 100e794:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 100e798:	e0bffe17 	ldw	r2,-8(fp)
 100e79c:	10800b04 	addi	r2,r2,44
 100e7a0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 100e7a4:	e0bffd17 	ldw	r2,-12(fp)
 100e7a8:	10800b04 	addi	r2,r2,44
 100e7ac:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 100e7b0:	e0bfff0b 	ldhu	r2,-4(fp)
 100e7b4:	10800044 	addi	r2,r2,1
 100e7b8:	e0bfff0d 	sth	r2,-4(fp)
 100e7bc:	e0bfff0b 	ldhu	r2,-4(fp)
 100e7c0:	108004f0 	cmpltui	r2,r2,19
 100e7c4:	103fea1e 	bne	r2,zero,100e770 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100e7c8:	e0bffe17 	ldw	r2,-8(fp)
 100e7cc:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 100e7d0:	e0bffe17 	ldw	r2,-8(fp)
 100e7d4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 100e7d8:	e0fffe17 	ldw	r3,-8(fp)
 100e7dc:	00800fc4 	movi	r2,63
 100e7e0:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 100e7e4:	e0bffe17 	ldw	r2,-8(fp)
 100e7e8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 100e7ec:	00c040b4 	movhi	r3,258
 100e7f0:	18e68704 	addi	r3,r3,-26084
 100e7f4:	008040b4 	movhi	r2,258
 100e7f8:	10be9704 	addi	r2,r2,-1444
 100e7fc:	18800015 	stw	r2,0(r3)
#endif
}
 100e800:	e037883a 	mov	sp,fp
 100e804:	dfc00117 	ldw	ra,4(sp)
 100e808:	df000017 	ldw	fp,0(sp)
 100e80c:	dec00204 	addi	sp,sp,8
 100e810:	f800283a 	ret

0100e814 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 100e814:	defffa04 	addi	sp,sp,-24
 100e818:	dfc00515 	stw	ra,20(sp)
 100e81c:	df000415 	stw	fp,16(sp)
 100e820:	df000404 	addi	fp,sp,16
 100e824:	e13ffe15 	stw	r4,-8(fp)
 100e828:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 100e82c:	e0bffe17 	ldw	r2,-8(fp)
 100e830:	10800217 	ldw	r2,8(r2)
 100e834:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 100e838:	e0bffd17 	ldw	r2,-12(fp)
 100e83c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 100e840:	e0fffd17 	ldw	r3,-12(fp)
 100e844:	e0bfff0b 	ldhu	r2,-4(fp)
 100e848:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 100e84c:	e0bffd17 	ldw	r2,-12(fp)
 100e850:	10c00c03 	ldbu	r3,48(r2)
 100e854:	00bff7c4 	movi	r2,-33
 100e858:	1884703a 	and	r2,r3,r2
 100e85c:	1007883a 	mov	r3,r2
 100e860:	e0bffd17 	ldw	r2,-12(fp)
 100e864:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 100e868:	e0bffd17 	ldw	r2,-12(fp)
 100e86c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 100e870:	e0bffd17 	ldw	r2,-12(fp)
 100e874:	10800c03 	ldbu	r2,48(r2)
 100e878:	10803fcc 	andi	r2,r2,255
 100e87c:	1004c03a 	cmpne	r2,r2,zero
 100e880:	10001f1e 	bne	r2,zero,100e900 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 100e884:	e0bffd17 	ldw	r2,-12(fp)
 100e888:	10c00d83 	ldbu	r3,54(r2)
 100e88c:	008040b4 	movhi	r2,258
 100e890:	10a68204 	addi	r2,r2,-26104
 100e894:	10800003 	ldbu	r2,0(r2)
 100e898:	1884b03a 	or	r2,r3,r2
 100e89c:	1007883a 	mov	r3,r2
 100e8a0:	008040b4 	movhi	r2,258
 100e8a4:	10a68204 	addi	r2,r2,-26104
 100e8a8:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100e8ac:	e0bffd17 	ldw	r2,-12(fp)
 100e8b0:	10800d03 	ldbu	r2,52(r2)
 100e8b4:	11003fcc 	andi	r4,r2,255
 100e8b8:	e0bffd17 	ldw	r2,-12(fp)
 100e8bc:	10800d03 	ldbu	r2,52(r2)
 100e8c0:	10c03fcc 	andi	r3,r2,255
 100e8c4:	008040b4 	movhi	r2,258
 100e8c8:	10a68244 	addi	r2,r2,-26103
 100e8cc:	10c5883a 	add	r2,r2,r3
 100e8d0:	10c00003 	ldbu	r3,0(r2)
 100e8d4:	e0bffd17 	ldw	r2,-12(fp)
 100e8d8:	10800d43 	ldbu	r2,53(r2)
 100e8dc:	1884b03a 	or	r2,r3,r2
 100e8e0:	1007883a 	mov	r3,r2
 100e8e4:	008040b4 	movhi	r2,258
 100e8e8:	10a68244 	addi	r2,r2,-26103
 100e8ec:	1105883a 	add	r2,r2,r4
 100e8f0:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 100e8f4:	00800044 	movi	r2,1
 100e8f8:	e0bffc05 	stb	r2,-16(fp)
 100e8fc:	00000106 	br	100e904 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 100e900:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 100e904:	e13ffe17 	ldw	r4,-8(fp)
 100e908:	100e9240 	call	100e924 <OS_FlagUnlink>
    return (sched);
 100e90c:	e0bffc03 	ldbu	r2,-16(fp)
}
 100e910:	e037883a 	mov	sp,fp
 100e914:	dfc00117 	ldw	ra,4(sp)
 100e918:	df000017 	ldw	fp,0(sp)
 100e91c:	dec00204 	addi	sp,sp,8
 100e920:	f800283a 	ret

0100e924 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 100e924:	defffa04 	addi	sp,sp,-24
 100e928:	df000515 	stw	fp,20(sp)
 100e92c:	df000504 	addi	fp,sp,20
 100e930:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 100e934:	e0bfff17 	ldw	r2,-4(fp)
 100e938:	10800117 	ldw	r2,4(r2)
 100e93c:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100e940:	e0bfff17 	ldw	r2,-4(fp)
 100e944:	10800017 	ldw	r2,0(r2)
 100e948:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 100e94c:	e0bffc17 	ldw	r2,-16(fp)
 100e950:	1004c03a 	cmpne	r2,r2,zero
 100e954:	10000c1e 	bne	r2,zero,100e988 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 100e958:	e0bfff17 	ldw	r2,-4(fp)
 100e95c:	10800317 	ldw	r2,12(r2)
 100e960:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 100e964:	e0fffd17 	ldw	r3,-12(fp)
 100e968:	e0bffb17 	ldw	r2,-20(fp)
 100e96c:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 100e970:	e0bffb17 	ldw	r2,-20(fp)
 100e974:	1005003a 	cmpeq	r2,r2,zero
 100e978:	10000c1e 	bne	r2,zero,100e9ac <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 100e97c:	e0bffb17 	ldw	r2,-20(fp)
 100e980:	10000115 	stw	zero,4(r2)
 100e984:	00000906 	br	100e9ac <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 100e988:	e0fffc17 	ldw	r3,-16(fp)
 100e98c:	e0bffb17 	ldw	r2,-20(fp)
 100e990:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 100e994:	e0bffb17 	ldw	r2,-20(fp)
 100e998:	1005003a 	cmpeq	r2,r2,zero
 100e99c:	1000031e 	bne	r2,zero,100e9ac <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 100e9a0:	e0fffb17 	ldw	r3,-20(fp)
 100e9a4:	e0bffc17 	ldw	r2,-16(fp)
 100e9a8:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 100e9ac:	e0bfff17 	ldw	r2,-4(fp)
 100e9b0:	10800217 	ldw	r2,8(r2)
 100e9b4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 100e9b8:	e0bffe17 	ldw	r2,-8(fp)
 100e9bc:	10000a15 	stw	zero,40(r2)
#endif
}
 100e9c0:	e037883a 	mov	sp,fp
 100e9c4:	df000017 	ldw	fp,0(sp)
 100e9c8:	dec00104 	addi	sp,sp,4
 100e9cc:	f800283a 	ret

0100e9d0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 100e9d0:	defff304 	addi	sp,sp,-52
 100e9d4:	df000c15 	stw	fp,48(sp)
 100e9d8:	df000c04 	addi	fp,sp,48
 100e9dc:	e13ffb15 	stw	r4,-20(fp)
 100e9e0:	e17ffc15 	stw	r5,-16(fp)
 100e9e4:	e1bffd15 	stw	r6,-12(fp)
 100e9e8:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 100e9ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 100e9f0:	e0bffe17 	ldw	r2,-8(fp)
 100e9f4:	1004c03a 	cmpne	r2,r2,zero
 100e9f8:	1000021e 	bne	r2,zero,100ea04 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 100e9fc:	e03fff15 	stw	zero,-4(fp)
 100ea00:	00007506 	br	100ebd8 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 100ea04:	e0bffb17 	ldw	r2,-20(fp)
 100ea08:	1004c03a 	cmpne	r2,r2,zero
 100ea0c:	1000051e 	bne	r2,zero,100ea24 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 100ea10:	e0fffe17 	ldw	r3,-8(fp)
 100ea14:	00801884 	movi	r2,98
 100ea18:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 100ea1c:	e03fff15 	stw	zero,-4(fp)
 100ea20:	00006d06 	br	100ebd8 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 100ea24:	e0bffb17 	ldw	r2,-20(fp)
 100ea28:	108000cc 	andi	r2,r2,3
 100ea2c:	1005003a 	cmpeq	r2,r2,zero
 100ea30:	1000051e 	bne	r2,zero,100ea48 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 100ea34:	e0fffe17 	ldw	r3,-8(fp)
 100ea38:	00801884 	movi	r2,98
 100ea3c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 100ea40:	e03fff15 	stw	zero,-4(fp)
 100ea44:	00006406 	br	100ebd8 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 100ea48:	e0bffc17 	ldw	r2,-16(fp)
 100ea4c:	108000a8 	cmpgeui	r2,r2,2
 100ea50:	1000051e 	bne	r2,zero,100ea68 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 100ea54:	e0fffe17 	ldw	r3,-8(fp)
 100ea58:	008016c4 	movi	r2,91
 100ea5c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 100ea60:	e03fff15 	stw	zero,-4(fp)
 100ea64:	00005c06 	br	100ebd8 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 100ea68:	e0bffd17 	ldw	r2,-12(fp)
 100ea6c:	10800128 	cmpgeui	r2,r2,4
 100ea70:	1000051e 	bne	r2,zero,100ea88 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 100ea74:	e0fffe17 	ldw	r3,-8(fp)
 100ea78:	00801704 	movi	r2,92
 100ea7c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 100ea80:	e03fff15 	stw	zero,-4(fp)
 100ea84:	00005406 	br	100ebd8 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ea88:	0005303a 	rdctl	r2,status
 100ea8c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ea90:	e0fff517 	ldw	r3,-44(fp)
 100ea94:	00bfff84 	movi	r2,-2
 100ea98:	1884703a 	and	r2,r3,r2
 100ea9c:	1001703a 	wrctl	status,r2
  
  return context;
 100eaa0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100eaa4:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 100eaa8:	008040b4 	movhi	r2,258
 100eaac:	10a67f04 	addi	r2,r2,-26116
 100eab0:	10800017 	ldw	r2,0(r2)
 100eab4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 100eab8:	008040b4 	movhi	r2,258
 100eabc:	10a67f04 	addi	r2,r2,-26116
 100eac0:	10800017 	ldw	r2,0(r2)
 100eac4:	1005003a 	cmpeq	r2,r2,zero
 100eac8:	1000081e 	bne	r2,zero,100eaec <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 100eacc:	008040b4 	movhi	r2,258
 100ead0:	10a67f04 	addi	r2,r2,-26116
 100ead4:	10800017 	ldw	r2,0(r2)
 100ead8:	10800117 	ldw	r2,4(r2)
 100eadc:	1007883a 	mov	r3,r2
 100eae0:	008040b4 	movhi	r2,258
 100eae4:	10a67f04 	addi	r2,r2,-26116
 100eae8:	10c00015 	stw	r3,0(r2)
 100eaec:	e0bff617 	ldw	r2,-40(fp)
 100eaf0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100eaf4:	e0bff417 	ldw	r2,-48(fp)
 100eaf8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 100eafc:	e0bffa17 	ldw	r2,-24(fp)
 100eb00:	1004c03a 	cmpne	r2,r2,zero
 100eb04:	1000051e 	bne	r2,zero,100eb1c <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 100eb08:	e0fffe17 	ldw	r3,-8(fp)
 100eb0c:	00801684 	movi	r2,90
 100eb10:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 100eb14:	e03fff15 	stw	zero,-4(fp)
 100eb18:	00002f06 	br	100ebd8 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 100eb1c:	e0bffb17 	ldw	r2,-20(fp)
 100eb20:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 100eb24:	e0bffb17 	ldw	r2,-20(fp)
 100eb28:	1007883a 	mov	r3,r2
 100eb2c:	e0bffd17 	ldw	r2,-12(fp)
 100eb30:	1885883a 	add	r2,r3,r2
 100eb34:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 100eb38:	e03ff715 	stw	zero,-36(fp)
 100eb3c:	00000d06 	br	100eb74 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 100eb40:	e0fff817 	ldw	r3,-32(fp)
 100eb44:	e0bff917 	ldw	r2,-28(fp)
 100eb48:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 100eb4c:	e0bff917 	ldw	r2,-28(fp)
 100eb50:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 100eb54:	e0bff917 	ldw	r2,-28(fp)
 100eb58:	1007883a 	mov	r3,r2
 100eb5c:	e0bffd17 	ldw	r2,-12(fp)
 100eb60:	1885883a 	add	r2,r3,r2
 100eb64:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 100eb68:	e0bff717 	ldw	r2,-36(fp)
 100eb6c:	10800044 	addi	r2,r2,1
 100eb70:	e0bff715 	stw	r2,-36(fp)
 100eb74:	e0bffc17 	ldw	r2,-16(fp)
 100eb78:	10ffffc4 	addi	r3,r2,-1
 100eb7c:	e0bff717 	ldw	r2,-36(fp)
 100eb80:	10ffef36 	bltu	r2,r3,100eb40 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 100eb84:	e0bff817 	ldw	r2,-32(fp)
 100eb88:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 100eb8c:	e0fffa17 	ldw	r3,-24(fp)
 100eb90:	e0bffb17 	ldw	r2,-20(fp)
 100eb94:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 100eb98:	e0fffa17 	ldw	r3,-24(fp)
 100eb9c:	e0bffb17 	ldw	r2,-20(fp)
 100eba0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 100eba4:	e0fffa17 	ldw	r3,-24(fp)
 100eba8:	e0bffc17 	ldw	r2,-16(fp)
 100ebac:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 100ebb0:	e0fffa17 	ldw	r3,-24(fp)
 100ebb4:	e0bffc17 	ldw	r2,-16(fp)
 100ebb8:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 100ebbc:	e0fffa17 	ldw	r3,-24(fp)
 100ebc0:	e0bffd17 	ldw	r2,-12(fp)
 100ebc4:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 100ebc8:	e0bffe17 	ldw	r2,-8(fp)
 100ebcc:	10000005 	stb	zero,0(r2)
    return (pmem);
 100ebd0:	e0bffa17 	ldw	r2,-24(fp)
 100ebd4:	e0bfff15 	stw	r2,-4(fp)
 100ebd8:	e0bfff17 	ldw	r2,-4(fp)
}
 100ebdc:	e037883a 	mov	sp,fp
 100ebe0:	df000017 	ldw	fp,0(sp)
 100ebe4:	dec00104 	addi	sp,sp,4
 100ebe8:	f800283a 	ret

0100ebec <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 100ebec:	defff704 	addi	sp,sp,-36
 100ebf0:	df000815 	stw	fp,32(sp)
 100ebf4:	df000804 	addi	fp,sp,32
 100ebf8:	e13ffd15 	stw	r4,-12(fp)
 100ebfc:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 100ec00:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 100ec04:	e0bffe17 	ldw	r2,-8(fp)
 100ec08:	1004c03a 	cmpne	r2,r2,zero
 100ec0c:	1000021e 	bne	r2,zero,100ec18 <OSMemGet+0x2c>
        return ((void *)0);
 100ec10:	e03fff15 	stw	zero,-4(fp)
 100ec14:	00003106 	br	100ecdc <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 100ec18:	e0bffd17 	ldw	r2,-12(fp)
 100ec1c:	1004c03a 	cmpne	r2,r2,zero
 100ec20:	1000051e 	bne	r2,zero,100ec38 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 100ec24:	e0fffe17 	ldw	r3,-8(fp)
 100ec28:	00801804 	movi	r2,96
 100ec2c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100ec30:	e03fff15 	stw	zero,-4(fp)
 100ec34:	00002906 	br	100ecdc <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ec38:	0005303a 	rdctl	r2,status
 100ec3c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ec40:	e0fffa17 	ldw	r3,-24(fp)
 100ec44:	00bfff84 	movi	r2,-2
 100ec48:	1884703a 	and	r2,r3,r2
 100ec4c:	1001703a 	wrctl	status,r2
  
  return context;
 100ec50:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100ec54:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 100ec58:	e0bffd17 	ldw	r2,-12(fp)
 100ec5c:	10800417 	ldw	r2,16(r2)
 100ec60:	1005003a 	cmpeq	r2,r2,zero
 100ec64:	1000151e 	bne	r2,zero,100ecbc <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 100ec68:	e0bffd17 	ldw	r2,-12(fp)
 100ec6c:	10800117 	ldw	r2,4(r2)
 100ec70:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 100ec74:	e0bffc17 	ldw	r2,-16(fp)
 100ec78:	10c00017 	ldw	r3,0(r2)
 100ec7c:	e0bffd17 	ldw	r2,-12(fp)
 100ec80:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 100ec84:	e0bffd17 	ldw	r2,-12(fp)
 100ec88:	10800417 	ldw	r2,16(r2)
 100ec8c:	10ffffc4 	addi	r3,r2,-1
 100ec90:	e0bffd17 	ldw	r2,-12(fp)
 100ec94:	10c00415 	stw	r3,16(r2)
 100ec98:	e0bffb17 	ldw	r2,-20(fp)
 100ec9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100eca0:	e0bff917 	ldw	r2,-28(fp)
 100eca4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 100eca8:	e0bffe17 	ldw	r2,-8(fp)
 100ecac:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 100ecb0:	e0bffc17 	ldw	r2,-16(fp)
 100ecb4:	e0bfff15 	stw	r2,-4(fp)
 100ecb8:	00000806 	br	100ecdc <OSMemGet+0xf0>
 100ecbc:	e0bffb17 	ldw	r2,-20(fp)
 100ecc0:	e0bff815 	stw	r2,-32(fp)
 100ecc4:	e0bff817 	ldw	r2,-32(fp)
 100ecc8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 100eccc:	e0fffe17 	ldw	r3,-8(fp)
 100ecd0:	00801744 	movi	r2,93
 100ecd4:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 100ecd8:	e03fff15 	stw	zero,-4(fp)
 100ecdc:	e0bfff17 	ldw	r2,-4(fp)
}
 100ece0:	e037883a 	mov	sp,fp
 100ece4:	df000017 	ldw	fp,0(sp)
 100ece8:	dec00104 	addi	sp,sp,4
 100ecec:	f800283a 	ret

0100ecf0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 100ecf0:	defff604 	addi	sp,sp,-40
 100ecf4:	dfc00915 	stw	ra,36(sp)
 100ecf8:	df000815 	stw	fp,32(sp)
 100ecfc:	df000804 	addi	fp,sp,32
 100ed00:	e13ffc15 	stw	r4,-16(fp)
 100ed04:	e17ffd15 	stw	r5,-12(fp)
 100ed08:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ed0c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100ed10:	e0bffe17 	ldw	r2,-8(fp)
 100ed14:	1004c03a 	cmpne	r2,r2,zero
 100ed18:	1000021e 	bne	r2,zero,100ed24 <OSMemNameGet+0x34>
        return (0);
 100ed1c:	e03fff15 	stw	zero,-4(fp)
 100ed20:	00003006 	br	100ede4 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 100ed24:	e0bffc17 	ldw	r2,-16(fp)
 100ed28:	1004c03a 	cmpne	r2,r2,zero
 100ed2c:	1000051e 	bne	r2,zero,100ed44 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 100ed30:	e0fffe17 	ldw	r3,-8(fp)
 100ed34:	00801804 	movi	r2,96
 100ed38:	18800005 	stb	r2,0(r3)
        return (0);
 100ed3c:	e03fff15 	stw	zero,-4(fp)
 100ed40:	00002806 	br	100ede4 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100ed44:	e0bffd17 	ldw	r2,-12(fp)
 100ed48:	1004c03a 	cmpne	r2,r2,zero
 100ed4c:	1000051e 	bne	r2,zero,100ed64 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 100ed50:	e0fffe17 	ldw	r3,-8(fp)
 100ed54:	00800304 	movi	r2,12
 100ed58:	18800005 	stb	r2,0(r3)
        return (0);
 100ed5c:	e03fff15 	stw	zero,-4(fp)
 100ed60:	00002006 	br	100ede4 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100ed64:	008040b4 	movhi	r2,258
 100ed68:	10a68404 	addi	r2,r2,-26096
 100ed6c:	10800003 	ldbu	r2,0(r2)
 100ed70:	10803fcc 	andi	r2,r2,255
 100ed74:	1005003a 	cmpeq	r2,r2,zero
 100ed78:	1000051e 	bne	r2,zero,100ed90 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 100ed7c:	e0fffe17 	ldw	r3,-8(fp)
 100ed80:	00800444 	movi	r2,17
 100ed84:	18800005 	stb	r2,0(r3)
        return (0);
 100ed88:	e03fff15 	stw	zero,-4(fp)
 100ed8c:	00001506 	br	100ede4 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ed90:	0005303a 	rdctl	r2,status
 100ed94:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ed98:	e0fff917 	ldw	r3,-28(fp)
 100ed9c:	00bfff84 	movi	r2,-2
 100eda0:	1884703a 	and	r2,r3,r2
 100eda4:	1001703a 	wrctl	status,r2
  
  return context;
 100eda8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100edac:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 100edb0:	e0bffc17 	ldw	r2,-16(fp)
 100edb4:	11400504 	addi	r5,r2,20
 100edb8:	e13ffd17 	ldw	r4,-12(fp)
 100edbc:	100c9640 	call	100c964 <OS_StrCopy>
 100edc0:	e0bffb05 	stb	r2,-20(fp)
 100edc4:	e0bffa17 	ldw	r2,-24(fp)
 100edc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100edcc:	e0bff817 	ldw	r2,-32(fp)
 100edd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100edd4:	e0bffe17 	ldw	r2,-8(fp)
 100edd8:	10000005 	stb	zero,0(r2)
    return (len);
 100eddc:	e0bffb03 	ldbu	r2,-20(fp)
 100ede0:	e0bfff15 	stw	r2,-4(fp)
 100ede4:	e0bfff17 	ldw	r2,-4(fp)
}
 100ede8:	e037883a 	mov	sp,fp
 100edec:	dfc00117 	ldw	ra,4(sp)
 100edf0:	df000017 	ldw	fp,0(sp)
 100edf4:	dec00204 	addi	sp,sp,8
 100edf8:	f800283a 	ret

0100edfc <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 100edfc:	defff604 	addi	sp,sp,-40
 100ee00:	dfc00915 	stw	ra,36(sp)
 100ee04:	df000815 	stw	fp,32(sp)
 100ee08:	df000804 	addi	fp,sp,32
 100ee0c:	e13ffd15 	stw	r4,-12(fp)
 100ee10:	e17ffe15 	stw	r5,-8(fp)
 100ee14:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ee18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100ee1c:	e0bfff17 	ldw	r2,-4(fp)
 100ee20:	1005003a 	cmpeq	r2,r2,zero
 100ee24:	1000381e 	bne	r2,zero,100ef08 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 100ee28:	e0bffd17 	ldw	r2,-12(fp)
 100ee2c:	1004c03a 	cmpne	r2,r2,zero
 100ee30:	1000041e 	bne	r2,zero,100ee44 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 100ee34:	e0ffff17 	ldw	r3,-4(fp)
 100ee38:	00801804 	movi	r2,96
 100ee3c:	18800005 	stb	r2,0(r3)
        return;
 100ee40:	00003106 	br	100ef08 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 100ee44:	e0bffe17 	ldw	r2,-8(fp)
 100ee48:	1004c03a 	cmpne	r2,r2,zero
 100ee4c:	1000041e 	bne	r2,zero,100ee60 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 100ee50:	e0ffff17 	ldw	r3,-4(fp)
 100ee54:	00800304 	movi	r2,12
 100ee58:	18800005 	stb	r2,0(r3)
        return;
 100ee5c:	00002a06 	br	100ef08 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100ee60:	008040b4 	movhi	r2,258
 100ee64:	10a68404 	addi	r2,r2,-26096
 100ee68:	10800003 	ldbu	r2,0(r2)
 100ee6c:	10803fcc 	andi	r2,r2,255
 100ee70:	1005003a 	cmpeq	r2,r2,zero
 100ee74:	1000041e 	bne	r2,zero,100ee88 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 100ee78:	e0ffff17 	ldw	r3,-4(fp)
 100ee7c:	00800484 	movi	r2,18
 100ee80:	18800005 	stb	r2,0(r3)
        return;
 100ee84:	00002006 	br	100ef08 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ee88:	0005303a 	rdctl	r2,status
 100ee8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ee90:	e0fffa17 	ldw	r3,-24(fp)
 100ee94:	00bfff84 	movi	r2,-2
 100ee98:	1884703a 	and	r2,r3,r2
 100ee9c:	1001703a 	wrctl	status,r2
  
  return context;
 100eea0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100eea4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 100eea8:	e13ffe17 	ldw	r4,-8(fp)
 100eeac:	100c9e40 	call	100c9e4 <OS_StrLen>
 100eeb0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 100eeb4:	e0bffc03 	ldbu	r2,-16(fp)
 100eeb8:	10800830 	cmpltui	r2,r2,32
 100eebc:	1000081e 	bne	r2,zero,100eee0 <OSMemNameSet+0xe4>
 100eec0:	e0bffb17 	ldw	r2,-20(fp)
 100eec4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100eec8:	e0bff917 	ldw	r2,-28(fp)
 100eecc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 100eed0:	e0ffff17 	ldw	r3,-4(fp)
 100eed4:	008018c4 	movi	r2,99
 100eed8:	18800005 	stb	r2,0(r3)
        return;
 100eedc:	00000a06 	br	100ef08 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 100eee0:	e0bffd17 	ldw	r2,-12(fp)
 100eee4:	11000504 	addi	r4,r2,20
 100eee8:	e17ffe17 	ldw	r5,-8(fp)
 100eeec:	100c9640 	call	100c964 <OS_StrCopy>
 100eef0:	e0bffb17 	ldw	r2,-20(fp)
 100eef4:	e0bff815 	stw	r2,-32(fp)
 100eef8:	e0bff817 	ldw	r2,-32(fp)
 100eefc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100ef00:	e0bfff17 	ldw	r2,-4(fp)
 100ef04:	10000005 	stb	zero,0(r2)
}
 100ef08:	e037883a 	mov	sp,fp
 100ef0c:	dfc00117 	ldw	ra,4(sp)
 100ef10:	df000017 	ldw	fp,0(sp)
 100ef14:	dec00204 	addi	sp,sp,8
 100ef18:	f800283a 	ret

0100ef1c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 100ef1c:	defff804 	addi	sp,sp,-32
 100ef20:	df000715 	stw	fp,28(sp)
 100ef24:	df000704 	addi	fp,sp,28
 100ef28:	e13ffd15 	stw	r4,-12(fp)
 100ef2c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100ef30:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 100ef34:	e0bffd17 	ldw	r2,-12(fp)
 100ef38:	1004c03a 	cmpne	r2,r2,zero
 100ef3c:	1000031e 	bne	r2,zero,100ef4c <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 100ef40:	00801804 	movi	r2,96
 100ef44:	e0bfff15 	stw	r2,-4(fp)
 100ef48:	00002b06 	br	100eff8 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 100ef4c:	e0bffe17 	ldw	r2,-8(fp)
 100ef50:	1004c03a 	cmpne	r2,r2,zero
 100ef54:	1000031e 	bne	r2,zero,100ef64 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 100ef58:	008017c4 	movi	r2,95
 100ef5c:	e0bfff15 	stw	r2,-4(fp)
 100ef60:	00002506 	br	100eff8 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ef64:	0005303a 	rdctl	r2,status
 100ef68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ef6c:	e0fffb17 	ldw	r3,-20(fp)
 100ef70:	00bfff84 	movi	r2,-2
 100ef74:	1884703a 	and	r2,r3,r2
 100ef78:	1001703a 	wrctl	status,r2
  
  return context;
 100ef7c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100ef80:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 100ef84:	e0bffd17 	ldw	r2,-12(fp)
 100ef88:	10c00417 	ldw	r3,16(r2)
 100ef8c:	e0bffd17 	ldw	r2,-12(fp)
 100ef90:	10800317 	ldw	r2,12(r2)
 100ef94:	18800736 	bltu	r3,r2,100efb4 <OSMemPut+0x98>
 100ef98:	e0bffc17 	ldw	r2,-16(fp)
 100ef9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100efa0:	e0bffa17 	ldw	r2,-24(fp)
 100efa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 100efa8:	00801784 	movi	r2,94
 100efac:	e0bfff15 	stw	r2,-4(fp)
 100efb0:	00001106 	br	100eff8 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 100efb4:	e0fffe17 	ldw	r3,-8(fp)
 100efb8:	e0bffd17 	ldw	r2,-12(fp)
 100efbc:	10800117 	ldw	r2,4(r2)
 100efc0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 100efc4:	e0fffd17 	ldw	r3,-12(fp)
 100efc8:	e0bffe17 	ldw	r2,-8(fp)
 100efcc:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 100efd0:	e0bffd17 	ldw	r2,-12(fp)
 100efd4:	10800417 	ldw	r2,16(r2)
 100efd8:	10c00044 	addi	r3,r2,1
 100efdc:	e0bffd17 	ldw	r2,-12(fp)
 100efe0:	10c00415 	stw	r3,16(r2)
 100efe4:	e0bffc17 	ldw	r2,-16(fp)
 100efe8:	e0bff915 	stw	r2,-28(fp)
 100efec:	e0bff917 	ldw	r2,-28(fp)
 100eff0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 100eff4:	e03fff15 	stw	zero,-4(fp)
 100eff8:	e0bfff17 	ldw	r2,-4(fp)
}
 100effc:	e037883a 	mov	sp,fp
 100f000:	df000017 	ldw	fp,0(sp)
 100f004:	dec00104 	addi	sp,sp,4
 100f008:	f800283a 	ret

0100f00c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 100f00c:	defff904 	addi	sp,sp,-28
 100f010:	df000615 	stw	fp,24(sp)
 100f014:	df000604 	addi	fp,sp,24
 100f018:	e13ffd15 	stw	r4,-12(fp)
 100f01c:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100f020:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 100f024:	e0bffd17 	ldw	r2,-12(fp)
 100f028:	1004c03a 	cmpne	r2,r2,zero
 100f02c:	1000031e 	bne	r2,zero,100f03c <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 100f030:	00801804 	movi	r2,96
 100f034:	e0bfff15 	stw	r2,-4(fp)
 100f038:	00002e06 	br	100f0f4 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 100f03c:	e0bffe17 	ldw	r2,-8(fp)
 100f040:	1004c03a 	cmpne	r2,r2,zero
 100f044:	1000031e 	bne	r2,zero,100f054 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 100f048:	00801844 	movi	r2,97
 100f04c:	e0bfff15 	stw	r2,-4(fp)
 100f050:	00002806 	br	100f0f4 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f054:	0005303a 	rdctl	r2,status
 100f058:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f05c:	e0fffb17 	ldw	r3,-20(fp)
 100f060:	00bfff84 	movi	r2,-2
 100f064:	1884703a 	and	r2,r3,r2
 100f068:	1001703a 	wrctl	status,r2
  
  return context;
 100f06c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100f070:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 100f074:	e0bffd17 	ldw	r2,-12(fp)
 100f078:	10c00017 	ldw	r3,0(r2)
 100f07c:	e0bffe17 	ldw	r2,-8(fp)
 100f080:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 100f084:	e0bffd17 	ldw	r2,-12(fp)
 100f088:	10c00117 	ldw	r3,4(r2)
 100f08c:	e0bffe17 	ldw	r2,-8(fp)
 100f090:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 100f094:	e0bffd17 	ldw	r2,-12(fp)
 100f098:	10c00217 	ldw	r3,8(r2)
 100f09c:	e0bffe17 	ldw	r2,-8(fp)
 100f0a0:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 100f0a4:	e0bffd17 	ldw	r2,-12(fp)
 100f0a8:	10c00317 	ldw	r3,12(r2)
 100f0ac:	e0bffe17 	ldw	r2,-8(fp)
 100f0b0:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 100f0b4:	e0bffd17 	ldw	r2,-12(fp)
 100f0b8:	10c00417 	ldw	r3,16(r2)
 100f0bc:	e0bffe17 	ldw	r2,-8(fp)
 100f0c0:	10c00415 	stw	r3,16(r2)
 100f0c4:	e0bffc17 	ldw	r2,-16(fp)
 100f0c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f0cc:	e0bffa17 	ldw	r2,-24(fp)
 100f0d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 100f0d4:	e0bffe17 	ldw	r2,-8(fp)
 100f0d8:	10c00317 	ldw	r3,12(r2)
 100f0dc:	e0bffe17 	ldw	r2,-8(fp)
 100f0e0:	10800417 	ldw	r2,16(r2)
 100f0e4:	1887c83a 	sub	r3,r3,r2
 100f0e8:	e0bffe17 	ldw	r2,-8(fp)
 100f0ec:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 100f0f0:	e03fff15 	stw	zero,-4(fp)
 100f0f4:	e0bfff17 	ldw	r2,-4(fp)
}
 100f0f8:	e037883a 	mov	sp,fp
 100f0fc:	df000017 	ldw	fp,0(sp)
 100f100:	dec00104 	addi	sp,sp,4
 100f104:	f800283a 	ret

0100f108 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 100f108:	defffc04 	addi	sp,sp,-16
 100f10c:	dfc00315 	stw	ra,12(sp)
 100f110:	df000215 	stw	fp,8(sp)
 100f114:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 100f118:	010040b4 	movhi	r4,258
 100f11c:	213f7304 	addi	r4,r4,-564
 100f120:	01430c04 	movi	r5,3120
 100f124:	100c7600 	call	100c760 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 100f128:	008040b4 	movhi	r2,258
 100f12c:	10bf7304 	addi	r2,r2,-564
 100f130:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 100f134:	e03ffe0d 	sth	zero,-8(fp)
 100f138:	00001406 	br	100f18c <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 100f13c:	e13ffe0b 	ldhu	r4,-8(fp)
 100f140:	01400d04 	movi	r5,52
 100f144:	10098e40 	call	10098e4 <__mulsi3>
 100f148:	1007883a 	mov	r3,r2
 100f14c:	008040b4 	movhi	r2,258
 100f150:	10bf8004 	addi	r2,r2,-512
 100f154:	1887883a 	add	r3,r3,r2
 100f158:	e0bfff17 	ldw	r2,-4(fp)
 100f15c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 100f160:	e0ffff17 	ldw	r3,-4(fp)
 100f164:	00800fc4 	movi	r2,63
 100f168:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 100f16c:	e0bfff17 	ldw	r2,-4(fp)
 100f170:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 100f174:	e0bfff17 	ldw	r2,-4(fp)
 100f178:	10800d04 	addi	r2,r2,52
 100f17c:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 100f180:	e0bffe0b 	ldhu	r2,-8(fp)
 100f184:	10800044 	addi	r2,r2,1
 100f188:	e0bffe0d 	sth	r2,-8(fp)
 100f18c:	e0bffe0b 	ldhu	r2,-8(fp)
 100f190:	10800ef0 	cmpltui	r2,r2,59
 100f194:	103fe91e 	bne	r2,zero,100f13c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 100f198:	e0bfff17 	ldw	r2,-4(fp)
 100f19c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 100f1a0:	e0ffff17 	ldw	r3,-4(fp)
 100f1a4:	00800fc4 	movi	r2,63
 100f1a8:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 100f1ac:	e0bfff17 	ldw	r2,-4(fp)
 100f1b0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 100f1b4:	00c040b4 	movhi	r3,258
 100f1b8:	18e67f04 	addi	r3,r3,-26116
 100f1bc:	008040b4 	movhi	r2,258
 100f1c0:	10bf7304 	addi	r2,r2,-564
 100f1c4:	18800015 	stw	r2,0(r3)
#endif
}
 100f1c8:	e037883a 	mov	sp,fp
 100f1cc:	dfc00117 	ldw	ra,4(sp)
 100f1d0:	df000017 	ldw	fp,0(sp)
 100f1d4:	dec00204 	addi	sp,sp,8
 100f1d8:	f800283a 	ret

0100f1dc <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 100f1dc:	defff704 	addi	sp,sp,-36
 100f1e0:	df000815 	stw	fp,32(sp)
 100f1e4:	df000804 	addi	fp,sp,32
 100f1e8:	e13ffd15 	stw	r4,-12(fp)
 100f1ec:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100f1f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100f1f4:	e0bffe17 	ldw	r2,-8(fp)
 100f1f8:	1004c03a 	cmpne	r2,r2,zero
 100f1fc:	1000021e 	bne	r2,zero,100f208 <OSQAccept+0x2c>
        return ((void *)0);
 100f200:	e03fff15 	stw	zero,-4(fp)
 100f204:	00004506 	br	100f31c <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 100f208:	e0bffd17 	ldw	r2,-12(fp)
 100f20c:	1004c03a 	cmpne	r2,r2,zero
 100f210:	1000051e 	bne	r2,zero,100f228 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 100f214:	e0fffe17 	ldw	r3,-8(fp)
 100f218:	00800104 	movi	r2,4
 100f21c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100f220:	e03fff15 	stw	zero,-4(fp)
 100f224:	00003d06 	br	100f31c <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 100f228:	e0bffd17 	ldw	r2,-12(fp)
 100f22c:	10800003 	ldbu	r2,0(r2)
 100f230:	10803fcc 	andi	r2,r2,255
 100f234:	108000a0 	cmpeqi	r2,r2,2
 100f238:	1000051e 	bne	r2,zero,100f250 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 100f23c:	e0fffe17 	ldw	r3,-8(fp)
 100f240:	00800044 	movi	r2,1
 100f244:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100f248:	e03fff15 	stw	zero,-4(fp)
 100f24c:	00003306 	br	100f31c <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f250:	0005303a 	rdctl	r2,status
 100f254:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f258:	e0fff917 	ldw	r3,-28(fp)
 100f25c:	00bfff84 	movi	r2,-2
 100f260:	1884703a 	and	r2,r3,r2
 100f264:	1001703a 	wrctl	status,r2
  
  return context;
 100f268:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100f26c:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 100f270:	e0bffd17 	ldw	r2,-12(fp)
 100f274:	10800117 	ldw	r2,4(r2)
 100f278:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 100f27c:	e0bffb17 	ldw	r2,-20(fp)
 100f280:	1080058b 	ldhu	r2,22(r2)
 100f284:	10bfffcc 	andi	r2,r2,65535
 100f288:	1005003a 	cmpeq	r2,r2,zero
 100f28c:	1000191e 	bne	r2,zero,100f2f4 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 100f290:	e0bffb17 	ldw	r2,-20(fp)
 100f294:	10c00417 	ldw	r3,16(r2)
 100f298:	18800017 	ldw	r2,0(r3)
 100f29c:	e0bffc15 	stw	r2,-16(fp)
 100f2a0:	18c00104 	addi	r3,r3,4
 100f2a4:	e0bffb17 	ldw	r2,-20(fp)
 100f2a8:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 100f2ac:	e0bffb17 	ldw	r2,-20(fp)
 100f2b0:	1080058b 	ldhu	r2,22(r2)
 100f2b4:	10bfffc4 	addi	r2,r2,-1
 100f2b8:	1007883a 	mov	r3,r2
 100f2bc:	e0bffb17 	ldw	r2,-20(fp)
 100f2c0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 100f2c4:	e0bffb17 	ldw	r2,-20(fp)
 100f2c8:	10c00417 	ldw	r3,16(r2)
 100f2cc:	e0bffb17 	ldw	r2,-20(fp)
 100f2d0:	10800217 	ldw	r2,8(r2)
 100f2d4:	1880041e 	bne	r3,r2,100f2e8 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 100f2d8:	e0bffb17 	ldw	r2,-20(fp)
 100f2dc:	10c00117 	ldw	r3,4(r2)
 100f2e0:	e0bffb17 	ldw	r2,-20(fp)
 100f2e4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 100f2e8:	e0bffe17 	ldw	r2,-8(fp)
 100f2ec:	10000005 	stb	zero,0(r2)
 100f2f0:	00000406 	br	100f304 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 100f2f4:	e0fffe17 	ldw	r3,-8(fp)
 100f2f8:	008007c4 	movi	r2,31
 100f2fc:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 100f300:	e03ffc15 	stw	zero,-16(fp)
 100f304:	e0bffa17 	ldw	r2,-24(fp)
 100f308:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f30c:	e0bff817 	ldw	r2,-32(fp)
 100f310:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 100f314:	e0bffc17 	ldw	r2,-16(fp)
 100f318:	e0bfff15 	stw	r2,-4(fp)
 100f31c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f320:	e037883a 	mov	sp,fp
 100f324:	df000017 	ldw	fp,0(sp)
 100f328:	dec00104 	addi	sp,sp,4
 100f32c:	f800283a 	ret

0100f330 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 100f330:	defff304 	addi	sp,sp,-52
 100f334:	dfc00c15 	stw	ra,48(sp)
 100f338:	df000b15 	stw	fp,44(sp)
 100f33c:	df000b04 	addi	fp,sp,44
 100f340:	e13ffd15 	stw	r4,-12(fp)
 100f344:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100f348:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 100f34c:	008040b4 	movhi	r2,258
 100f350:	10a68404 	addi	r2,r2,-26096
 100f354:	10800003 	ldbu	r2,0(r2)
 100f358:	10803fcc 	andi	r2,r2,255
 100f35c:	1005003a 	cmpeq	r2,r2,zero
 100f360:	1000021e 	bne	r2,zero,100f36c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 100f364:	e03fff15 	stw	zero,-4(fp)
 100f368:	00007006 	br	100f52c <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f36c:	0005303a 	rdctl	r2,status
 100f370:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f374:	e0fff917 	ldw	r3,-28(fp)
 100f378:	00bfff84 	movi	r2,-2
 100f37c:	1884703a 	and	r2,r3,r2
 100f380:	1001703a 	wrctl	status,r2
  
  return context;
 100f384:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100f388:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 100f38c:	008040b4 	movhi	r2,258
 100f390:	10a68304 	addi	r2,r2,-26100
 100f394:	10800017 	ldw	r2,0(r2)
 100f398:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 100f39c:	008040b4 	movhi	r2,258
 100f3a0:	10a68304 	addi	r2,r2,-26100
 100f3a4:	10800017 	ldw	r2,0(r2)
 100f3a8:	1005003a 	cmpeq	r2,r2,zero
 100f3ac:	1000081e 	bne	r2,zero,100f3d0 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 100f3b0:	008040b4 	movhi	r2,258
 100f3b4:	10a68304 	addi	r2,r2,-26100
 100f3b8:	10800017 	ldw	r2,0(r2)
 100f3bc:	10800117 	ldw	r2,4(r2)
 100f3c0:	1007883a 	mov	r3,r2
 100f3c4:	008040b4 	movhi	r2,258
 100f3c8:	10a68304 	addi	r2,r2,-26100
 100f3cc:	10c00015 	stw	r3,0(r2)
 100f3d0:	e0bffa17 	ldw	r2,-24(fp)
 100f3d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f3d8:	e0bff817 	ldw	r2,-32(fp)
 100f3dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 100f3e0:	e0bffc17 	ldw	r2,-16(fp)
 100f3e4:	1005003a 	cmpeq	r2,r2,zero
 100f3e8:	10004e1e 	bne	r2,zero,100f524 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f3ec:	0005303a 	rdctl	r2,status
 100f3f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f3f4:	e0fff717 	ldw	r3,-36(fp)
 100f3f8:	00bfff84 	movi	r2,-2
 100f3fc:	1884703a 	and	r2,r3,r2
 100f400:	1001703a 	wrctl	status,r2
  
  return context;
 100f404:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 100f408:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 100f40c:	008040b4 	movhi	r2,258
 100f410:	10a68104 	addi	r2,r2,-26108
 100f414:	10800017 	ldw	r2,0(r2)
 100f418:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 100f41c:	e0bffb17 	ldw	r2,-20(fp)
 100f420:	1005003a 	cmpeq	r2,r2,zero
 100f424:	1000311e 	bne	r2,zero,100f4ec <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 100f428:	008040b4 	movhi	r2,258
 100f42c:	10a68104 	addi	r2,r2,-26108
 100f430:	10800017 	ldw	r2,0(r2)
 100f434:	10c00017 	ldw	r3,0(r2)
 100f438:	008040b4 	movhi	r2,258
 100f43c:	10a68104 	addi	r2,r2,-26108
 100f440:	10c00015 	stw	r3,0(r2)
 100f444:	e0bffa17 	ldw	r2,-24(fp)
 100f448:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f44c:	e0bff617 	ldw	r2,-40(fp)
 100f450:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 100f454:	e0fffb17 	ldw	r3,-20(fp)
 100f458:	e0bffd17 	ldw	r2,-12(fp)
 100f45c:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 100f460:	e0bffe0b 	ldhu	r2,-8(fp)
 100f464:	1085883a 	add	r2,r2,r2
 100f468:	1085883a 	add	r2,r2,r2
 100f46c:	1007883a 	mov	r3,r2
 100f470:	e0bffd17 	ldw	r2,-12(fp)
 100f474:	1887883a 	add	r3,r3,r2
 100f478:	e0bffb17 	ldw	r2,-20(fp)
 100f47c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 100f480:	e0fffb17 	ldw	r3,-20(fp)
 100f484:	e0bffd17 	ldw	r2,-12(fp)
 100f488:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 100f48c:	e0fffb17 	ldw	r3,-20(fp)
 100f490:	e0bffd17 	ldw	r2,-12(fp)
 100f494:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 100f498:	e0fffb17 	ldw	r3,-20(fp)
 100f49c:	e0bffe0b 	ldhu	r2,-8(fp)
 100f4a0:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 100f4a4:	e0bffb17 	ldw	r2,-20(fp)
 100f4a8:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 100f4ac:	e0fffc17 	ldw	r3,-16(fp)
 100f4b0:	00800084 	movi	r2,2
 100f4b4:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 100f4b8:	e0bffc17 	ldw	r2,-16(fp)
 100f4bc:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 100f4c0:	e0fffc17 	ldw	r3,-16(fp)
 100f4c4:	e0bffb17 	ldw	r2,-20(fp)
 100f4c8:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 100f4cc:	e0fffc17 	ldw	r3,-16(fp)
 100f4d0:	00800fc4 	movi	r2,63
 100f4d4:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 100f4d8:	e0bffc17 	ldw	r2,-16(fp)
 100f4dc:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 100f4e0:	e13ffc17 	ldw	r4,-16(fp)
 100f4e4:	100c3940 	call	100c394 <OS_EventWaitListInit>
 100f4e8:	00000e06 	br	100f524 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 100f4ec:	008040b4 	movhi	r2,258
 100f4f0:	10a68304 	addi	r2,r2,-26100
 100f4f4:	10c00017 	ldw	r3,0(r2)
 100f4f8:	e0bffc17 	ldw	r2,-16(fp)
 100f4fc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 100f500:	00c040b4 	movhi	r3,258
 100f504:	18e68304 	addi	r3,r3,-26100
 100f508:	e0bffc17 	ldw	r2,-16(fp)
 100f50c:	18800015 	stw	r2,0(r3)
 100f510:	e0bffa17 	ldw	r2,-24(fp)
 100f514:	e0bff515 	stw	r2,-44(fp)
 100f518:	e0bff517 	ldw	r2,-44(fp)
 100f51c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 100f520:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 100f524:	e0bffc17 	ldw	r2,-16(fp)
 100f528:	e0bfff15 	stw	r2,-4(fp)
 100f52c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f530:	e037883a 	mov	sp,fp
 100f534:	dfc00117 	ldw	ra,4(sp)
 100f538:	df000017 	ldw	fp,0(sp)
 100f53c:	dec00204 	addi	sp,sp,8
 100f540:	f800283a 	ret

0100f544 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 100f544:	defff004 	addi	sp,sp,-64
 100f548:	dfc00f15 	stw	ra,60(sp)
 100f54c:	df000e15 	stw	fp,56(sp)
 100f550:	df000e04 	addi	fp,sp,56
 100f554:	e13ffb15 	stw	r4,-20(fp)
 100f558:	e1bffd15 	stw	r6,-12(fp)
 100f55c:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100f560:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100f564:	e0bffd17 	ldw	r2,-12(fp)
 100f568:	1004c03a 	cmpne	r2,r2,zero
 100f56c:	1000031e 	bne	r2,zero,100f57c <OSQDel+0x38>
        return (pevent);
 100f570:	e0bffb17 	ldw	r2,-20(fp)
 100f574:	e0bfff15 	stw	r2,-4(fp)
 100f578:	0000ac06 	br	100f82c <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 100f57c:	e0bffb17 	ldw	r2,-20(fp)
 100f580:	1004c03a 	cmpne	r2,r2,zero
 100f584:	1000061e 	bne	r2,zero,100f5a0 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 100f588:	e0fffd17 	ldw	r3,-12(fp)
 100f58c:	00800104 	movi	r2,4
 100f590:	18800005 	stb	r2,0(r3)
        return (pevent);
 100f594:	e0fffb17 	ldw	r3,-20(fp)
 100f598:	e0ffff15 	stw	r3,-4(fp)
 100f59c:	0000a306 	br	100f82c <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 100f5a0:	e0bffb17 	ldw	r2,-20(fp)
 100f5a4:	10800003 	ldbu	r2,0(r2)
 100f5a8:	10803fcc 	andi	r2,r2,255
 100f5ac:	108000a0 	cmpeqi	r2,r2,2
 100f5b0:	1000061e 	bne	r2,zero,100f5cc <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 100f5b4:	e0fffd17 	ldw	r3,-12(fp)
 100f5b8:	00800044 	movi	r2,1
 100f5bc:	18800005 	stb	r2,0(r3)
        return (pevent);
 100f5c0:	e0bffb17 	ldw	r2,-20(fp)
 100f5c4:	e0bfff15 	stw	r2,-4(fp)
 100f5c8:	00009806 	br	100f82c <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100f5cc:	008040b4 	movhi	r2,258
 100f5d0:	10a68404 	addi	r2,r2,-26096
 100f5d4:	10800003 	ldbu	r2,0(r2)
 100f5d8:	10803fcc 	andi	r2,r2,255
 100f5dc:	1005003a 	cmpeq	r2,r2,zero
 100f5e0:	1000061e 	bne	r2,zero,100f5fc <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 100f5e4:	e0fffd17 	ldw	r3,-12(fp)
 100f5e8:	008003c4 	movi	r2,15
 100f5ec:	18800005 	stb	r2,0(r3)
        return (pevent);
 100f5f0:	e0fffb17 	ldw	r3,-20(fp)
 100f5f4:	e0ffff15 	stw	r3,-4(fp)
 100f5f8:	00008c06 	br	100f82c <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f5fc:	0005303a 	rdctl	r2,status
 100f600:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f604:	e0fff617 	ldw	r3,-40(fp)
 100f608:	00bfff84 	movi	r2,-2
 100f60c:	1884703a 	and	r2,r3,r2
 100f610:	1001703a 	wrctl	status,r2
  
  return context;
 100f614:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 100f618:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 100f61c:	e0bffb17 	ldw	r2,-20(fp)
 100f620:	10800283 	ldbu	r2,10(r2)
 100f624:	10803fcc 	andi	r2,r2,255
 100f628:	1005003a 	cmpeq	r2,r2,zero
 100f62c:	1000031e 	bne	r2,zero,100f63c <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 100f630:	00800044 	movi	r2,1
 100f634:	e0bffa05 	stb	r2,-24(fp)
 100f638:	00000106 	br	100f640 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 100f63c:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 100f640:	e0bffc03 	ldbu	r2,-16(fp)
 100f644:	e0bffe15 	stw	r2,-8(fp)
 100f648:	e0fffe17 	ldw	r3,-8(fp)
 100f64c:	1805003a 	cmpeq	r2,r3,zero
 100f650:	1000041e 	bne	r2,zero,100f664 <OSQDel+0x120>
 100f654:	e0fffe17 	ldw	r3,-8(fp)
 100f658:	18800060 	cmpeqi	r2,r3,1
 100f65c:	1000391e 	bne	r2,zero,100f744 <OSQDel+0x200>
 100f660:	00006706 	br	100f800 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 100f664:	e0bffa03 	ldbu	r2,-24(fp)
 100f668:	1004c03a 	cmpne	r2,r2,zero
 100f66c:	1000261e 	bne	r2,zero,100f708 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 100f670:	e0fffb17 	ldw	r3,-20(fp)
 100f674:	00800fc4 	movi	r2,63
 100f678:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 100f67c:	e0bffb17 	ldw	r2,-20(fp)
 100f680:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 100f684:	e0bffb17 	ldw	r2,-20(fp)
 100f688:	10800117 	ldw	r2,4(r2)
 100f68c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 100f690:	008040b4 	movhi	r2,258
 100f694:	10a68104 	addi	r2,r2,-26108
 100f698:	10c00017 	ldw	r3,0(r2)
 100f69c:	e0bff817 	ldw	r2,-32(fp)
 100f6a0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 100f6a4:	00c040b4 	movhi	r3,258
 100f6a8:	18e68104 	addi	r3,r3,-26108
 100f6ac:	e0bff817 	ldw	r2,-32(fp)
 100f6b0:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100f6b4:	e0bffb17 	ldw	r2,-20(fp)
 100f6b8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 100f6bc:	008040b4 	movhi	r2,258
 100f6c0:	10a68304 	addi	r2,r2,-26100
 100f6c4:	10c00017 	ldw	r3,0(r2)
 100f6c8:	e0bffb17 	ldw	r2,-20(fp)
 100f6cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 100f6d0:	e0bffb17 	ldw	r2,-20(fp)
 100f6d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 100f6d8:	00c040b4 	movhi	r3,258
 100f6dc:	18e68304 	addi	r3,r3,-26100
 100f6e0:	e0bffb17 	ldw	r2,-20(fp)
 100f6e4:	18800015 	stw	r2,0(r3)
 100f6e8:	e0bff717 	ldw	r2,-36(fp)
 100f6ec:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f6f0:	e0bff517 	ldw	r2,-44(fp)
 100f6f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 100f6f8:	e0bffd17 	ldw	r2,-12(fp)
 100f6fc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 100f700:	e03ff915 	stw	zero,-28(fp)
 100f704:	00004706 	br	100f824 <OSQDel+0x2e0>
 100f708:	e0bff717 	ldw	r2,-36(fp)
 100f70c:	e0bff415 	stw	r2,-48(fp)
 100f710:	e0bff417 	ldw	r2,-48(fp)
 100f714:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 100f718:	e0fffd17 	ldw	r3,-12(fp)
 100f71c:	00801244 	movi	r2,73
 100f720:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 100f724:	e0bffb17 	ldw	r2,-20(fp)
 100f728:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 100f72c:	00003d06 	br	100f824 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 100f730:	e13ffb17 	ldw	r4,-20(fp)
 100f734:	000b883a 	mov	r5,zero
 100f738:	01800104 	movi	r6,4
 100f73c:	000f883a 	mov	r7,zero
 100f740:	100bde00 	call	100bde0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 100f744:	e0bffb17 	ldw	r2,-20(fp)
 100f748:	10800283 	ldbu	r2,10(r2)
 100f74c:	10803fcc 	andi	r2,r2,255
 100f750:	1004c03a 	cmpne	r2,r2,zero
 100f754:	103ff61e 	bne	r2,zero,100f730 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 100f758:	e0fffb17 	ldw	r3,-20(fp)
 100f75c:	00800fc4 	movi	r2,63
 100f760:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 100f764:	e0bffb17 	ldw	r2,-20(fp)
 100f768:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 100f76c:	e0bffb17 	ldw	r2,-20(fp)
 100f770:	10800117 	ldw	r2,4(r2)
 100f774:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 100f778:	008040b4 	movhi	r2,258
 100f77c:	10a68104 	addi	r2,r2,-26108
 100f780:	10c00017 	ldw	r3,0(r2)
 100f784:	e0bff817 	ldw	r2,-32(fp)
 100f788:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 100f78c:	00c040b4 	movhi	r3,258
 100f790:	18e68104 	addi	r3,r3,-26108
 100f794:	e0bff817 	ldw	r2,-32(fp)
 100f798:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100f79c:	e0bffb17 	ldw	r2,-20(fp)
 100f7a0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 100f7a4:	008040b4 	movhi	r2,258
 100f7a8:	10a68304 	addi	r2,r2,-26100
 100f7ac:	10c00017 	ldw	r3,0(r2)
 100f7b0:	e0bffb17 	ldw	r2,-20(fp)
 100f7b4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 100f7b8:	e0bffb17 	ldw	r2,-20(fp)
 100f7bc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 100f7c0:	00c040b4 	movhi	r3,258
 100f7c4:	18e68304 	addi	r3,r3,-26100
 100f7c8:	e0bffb17 	ldw	r2,-20(fp)
 100f7cc:	18800015 	stw	r2,0(r3)
 100f7d0:	e0bff717 	ldw	r2,-36(fp)
 100f7d4:	e0bff315 	stw	r2,-52(fp)
 100f7d8:	e0bff317 	ldw	r2,-52(fp)
 100f7dc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 100f7e0:	e0bffa03 	ldbu	r2,-24(fp)
 100f7e4:	10800058 	cmpnei	r2,r2,1
 100f7e8:	1000011e 	bne	r2,zero,100f7f0 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 100f7ec:	100c8200 	call	100c820 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 100f7f0:	e0bffd17 	ldw	r2,-12(fp)
 100f7f4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 100f7f8:	e03ff915 	stw	zero,-28(fp)
             break;
 100f7fc:	00000906 	br	100f824 <OSQDel+0x2e0>
 100f800:	e0bff717 	ldw	r2,-36(fp)
 100f804:	e0bff215 	stw	r2,-56(fp)
 100f808:	e0bff217 	ldw	r2,-56(fp)
 100f80c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 100f810:	e0fffd17 	ldw	r3,-12(fp)
 100f814:	008001c4 	movi	r2,7
 100f818:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 100f81c:	e0bffb17 	ldw	r2,-20(fp)
 100f820:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 100f824:	e0bff917 	ldw	r2,-28(fp)
 100f828:	e0bfff15 	stw	r2,-4(fp)
 100f82c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f830:	e037883a 	mov	sp,fp
 100f834:	dfc00117 	ldw	ra,4(sp)
 100f838:	df000017 	ldw	fp,0(sp)
 100f83c:	dec00204 	addi	sp,sp,8
 100f840:	f800283a 	ret

0100f844 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 100f844:	defff904 	addi	sp,sp,-28
 100f848:	df000615 	stw	fp,24(sp)
 100f84c:	df000604 	addi	fp,sp,24
 100f850:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 100f854:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 100f858:	e0bffe17 	ldw	r2,-8(fp)
 100f85c:	1004c03a 	cmpne	r2,r2,zero
 100f860:	1000031e 	bne	r2,zero,100f870 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 100f864:	00800104 	movi	r2,4
 100f868:	e0bfff15 	stw	r2,-4(fp)
 100f86c:	00002206 	br	100f8f8 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 100f870:	e0bffe17 	ldw	r2,-8(fp)
 100f874:	10800003 	ldbu	r2,0(r2)
 100f878:	10803fcc 	andi	r2,r2,255
 100f87c:	108000a0 	cmpeqi	r2,r2,2
 100f880:	1000031e 	bne	r2,zero,100f890 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 100f884:	00800044 	movi	r2,1
 100f888:	e0bfff15 	stw	r2,-4(fp)
 100f88c:	00001a06 	br	100f8f8 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f890:	0005303a 	rdctl	r2,status
 100f894:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f898:	e0fffb17 	ldw	r3,-20(fp)
 100f89c:	00bfff84 	movi	r2,-2
 100f8a0:	1884703a 	and	r2,r3,r2
 100f8a4:	1001703a 	wrctl	status,r2
  
  return context;
 100f8a8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 100f8ac:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 100f8b0:	e0bffe17 	ldw	r2,-8(fp)
 100f8b4:	10800117 	ldw	r2,4(r2)
 100f8b8:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 100f8bc:	e0bffd17 	ldw	r2,-12(fp)
 100f8c0:	10c00117 	ldw	r3,4(r2)
 100f8c4:	e0bffd17 	ldw	r2,-12(fp)
 100f8c8:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 100f8cc:	e0bffd17 	ldw	r2,-12(fp)
 100f8d0:	10c00117 	ldw	r3,4(r2)
 100f8d4:	e0bffd17 	ldw	r2,-12(fp)
 100f8d8:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 100f8dc:	e0bffd17 	ldw	r2,-12(fp)
 100f8e0:	1000058d 	sth	zero,22(r2)
 100f8e4:	e0bffc17 	ldw	r2,-16(fp)
 100f8e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f8ec:	e0bffa17 	ldw	r2,-24(fp)
 100f8f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 100f8f4:	e03fff15 	stw	zero,-4(fp)
 100f8f8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f8fc:	e037883a 	mov	sp,fp
 100f900:	df000017 	ldw	fp,0(sp)
 100f904:	dec00104 	addi	sp,sp,4
 100f908:	f800283a 	ret

0100f90c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 100f90c:	defff104 	addi	sp,sp,-60
 100f910:	dfc00e15 	stw	ra,56(sp)
 100f914:	df000d15 	stw	fp,52(sp)
 100f918:	df000d04 	addi	fp,sp,52
 100f91c:	e13ffb15 	stw	r4,-20(fp)
 100f920:	e1bffd15 	stw	r6,-12(fp)
 100f924:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 100f928:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 100f92c:	e0bffd17 	ldw	r2,-12(fp)
 100f930:	1004c03a 	cmpne	r2,r2,zero
 100f934:	1000021e 	bne	r2,zero,100f940 <OSQPend+0x34>
        return ((void *)0);
 100f938:	e03fff15 	stw	zero,-4(fp)
 100f93c:	0000b506 	br	100fc14 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 100f940:	e0bffb17 	ldw	r2,-20(fp)
 100f944:	1004c03a 	cmpne	r2,r2,zero
 100f948:	1000051e 	bne	r2,zero,100f960 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 100f94c:	e0fffd17 	ldw	r3,-12(fp)
 100f950:	00800104 	movi	r2,4
 100f954:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100f958:	e03fff15 	stw	zero,-4(fp)
 100f95c:	0000ad06 	br	100fc14 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 100f960:	e0bffb17 	ldw	r2,-20(fp)
 100f964:	10800003 	ldbu	r2,0(r2)
 100f968:	10803fcc 	andi	r2,r2,255
 100f96c:	108000a0 	cmpeqi	r2,r2,2
 100f970:	1000051e 	bne	r2,zero,100f988 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 100f974:	e0fffd17 	ldw	r3,-12(fp)
 100f978:	00800044 	movi	r2,1
 100f97c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100f980:	e03fff15 	stw	zero,-4(fp)
 100f984:	0000a306 	br	100fc14 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 100f988:	008040b4 	movhi	r2,258
 100f98c:	10a68404 	addi	r2,r2,-26096
 100f990:	10800003 	ldbu	r2,0(r2)
 100f994:	10803fcc 	andi	r2,r2,255
 100f998:	1005003a 	cmpeq	r2,r2,zero
 100f99c:	1000051e 	bne	r2,zero,100f9b4 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 100f9a0:	e0fffd17 	ldw	r3,-12(fp)
 100f9a4:	00800084 	movi	r2,2
 100f9a8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100f9ac:	e03fff15 	stw	zero,-4(fp)
 100f9b0:	00009806 	br	100fc14 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 100f9b4:	008040b4 	movhi	r2,258
 100f9b8:	10a67604 	addi	r2,r2,-26152
 100f9bc:	10800003 	ldbu	r2,0(r2)
 100f9c0:	10803fcc 	andi	r2,r2,255
 100f9c4:	1005003a 	cmpeq	r2,r2,zero
 100f9c8:	1000051e 	bne	r2,zero,100f9e0 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 100f9cc:	e0fffd17 	ldw	r3,-12(fp)
 100f9d0:	00800344 	movi	r2,13
 100f9d4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 100f9d8:	e03fff15 	stw	zero,-4(fp)
 100f9dc:	00008d06 	br	100fc14 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f9e0:	0005303a 	rdctl	r2,status
 100f9e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f9e8:	e0fff717 	ldw	r3,-36(fp)
 100f9ec:	00bfff84 	movi	r2,-2
 100f9f0:	1884703a 	and	r2,r3,r2
 100f9f4:	1001703a 	wrctl	status,r2
  
  return context;
 100f9f8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 100f9fc:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 100fa00:	e0bffb17 	ldw	r2,-20(fp)
 100fa04:	10800117 	ldw	r2,4(r2)
 100fa08:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 100fa0c:	e0bff917 	ldw	r2,-28(fp)
 100fa10:	1080058b 	ldhu	r2,22(r2)
 100fa14:	10bfffcc 	andi	r2,r2,65535
 100fa18:	1005003a 	cmpeq	r2,r2,zero
 100fa1c:	10001f1e 	bne	r2,zero,100fa9c <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 100fa20:	e0bff917 	ldw	r2,-28(fp)
 100fa24:	10c00417 	ldw	r3,16(r2)
 100fa28:	18800017 	ldw	r2,0(r3)
 100fa2c:	e0bffa15 	stw	r2,-24(fp)
 100fa30:	18c00104 	addi	r3,r3,4
 100fa34:	e0bff917 	ldw	r2,-28(fp)
 100fa38:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 100fa3c:	e0bff917 	ldw	r2,-28(fp)
 100fa40:	1080058b 	ldhu	r2,22(r2)
 100fa44:	10bfffc4 	addi	r2,r2,-1
 100fa48:	1007883a 	mov	r3,r2
 100fa4c:	e0bff917 	ldw	r2,-28(fp)
 100fa50:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 100fa54:	e0bff917 	ldw	r2,-28(fp)
 100fa58:	10c00417 	ldw	r3,16(r2)
 100fa5c:	e0bff917 	ldw	r2,-28(fp)
 100fa60:	10800217 	ldw	r2,8(r2)
 100fa64:	1880041e 	bne	r3,r2,100fa78 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 100fa68:	e0bff917 	ldw	r2,-28(fp)
 100fa6c:	10c00117 	ldw	r3,4(r2)
 100fa70:	e0bff917 	ldw	r2,-28(fp)
 100fa74:	10c00415 	stw	r3,16(r2)
 100fa78:	e0bff817 	ldw	r2,-32(fp)
 100fa7c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fa80:	e0bff617 	ldw	r2,-40(fp)
 100fa84:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 100fa88:	e0bffd17 	ldw	r2,-12(fp)
 100fa8c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 100fa90:	e0bffa17 	ldw	r2,-24(fp)
 100fa94:	e0bfff15 	stw	r2,-4(fp)
 100fa98:	00005e06 	br	100fc14 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 100fa9c:	008040b4 	movhi	r2,258
 100faa0:	10a68504 	addi	r2,r2,-26092
 100faa4:	10c00017 	ldw	r3,0(r2)
 100faa8:	008040b4 	movhi	r2,258
 100faac:	10a68504 	addi	r2,r2,-26092
 100fab0:	10800017 	ldw	r2,0(r2)
 100fab4:	10800c03 	ldbu	r2,48(r2)
 100fab8:	10800114 	ori	r2,r2,4
 100fabc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100fac0:	008040b4 	movhi	r2,258
 100fac4:	10a68504 	addi	r2,r2,-26092
 100fac8:	10800017 	ldw	r2,0(r2)
 100facc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 100fad0:	008040b4 	movhi	r2,258
 100fad4:	10a68504 	addi	r2,r2,-26092
 100fad8:	10c00017 	ldw	r3,0(r2)
 100fadc:	e0bffc0b 	ldhu	r2,-16(fp)
 100fae0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 100fae4:	e13ffb17 	ldw	r4,-20(fp)
 100fae8:	100bf740 	call	100bf74 <OS_EventTaskWait>
 100faec:	e0bff817 	ldw	r2,-32(fp)
 100faf0:	e0bff515 	stw	r2,-44(fp)
 100faf4:	e0bff517 	ldw	r2,-44(fp)
 100faf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 100fafc:	100c8200 	call	100c820 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fb00:	0005303a 	rdctl	r2,status
 100fb04:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fb08:	e0fff417 	ldw	r3,-48(fp)
 100fb0c:	00bfff84 	movi	r2,-2
 100fb10:	1884703a 	and	r2,r3,r2
 100fb14:	1001703a 	wrctl	status,r2
  
  return context;
 100fb18:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 100fb1c:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 100fb20:	008040b4 	movhi	r2,258
 100fb24:	10a68504 	addi	r2,r2,-26092
 100fb28:	10800017 	ldw	r2,0(r2)
 100fb2c:	10800c43 	ldbu	r2,49(r2)
 100fb30:	10803fcc 	andi	r2,r2,255
 100fb34:	e0bffe15 	stw	r2,-8(fp)
 100fb38:	e0fffe17 	ldw	r3,-8(fp)
 100fb3c:	1805003a 	cmpeq	r2,r3,zero
 100fb40:	1000041e 	bne	r2,zero,100fb54 <OSQPend+0x248>
 100fb44:	e0fffe17 	ldw	r3,-8(fp)
 100fb48:	188000a0 	cmpeqi	r2,r3,2
 100fb4c:	1000091e 	bne	r2,zero,100fb74 <OSQPend+0x268>
 100fb50:	00000d06 	br	100fb88 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 100fb54:	008040b4 	movhi	r2,258
 100fb58:	10a68504 	addi	r2,r2,-26092
 100fb5c:	10800017 	ldw	r2,0(r2)
 100fb60:	10800917 	ldw	r2,36(r2)
 100fb64:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 100fb68:	e0bffd17 	ldw	r2,-12(fp)
 100fb6c:	10000005 	stb	zero,0(r2)
             break;
 100fb70:	00000e06 	br	100fbac <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 100fb74:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 100fb78:	e0fffd17 	ldw	r3,-12(fp)
 100fb7c:	00800384 	movi	r2,14
 100fb80:	18800005 	stb	r2,0(r3)
             break;
 100fb84:	00000906 	br	100fbac <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 100fb88:	008040b4 	movhi	r2,258
 100fb8c:	10a68504 	addi	r2,r2,-26092
 100fb90:	11000017 	ldw	r4,0(r2)
 100fb94:	e17ffb17 	ldw	r5,-20(fp)
 100fb98:	100c1d80 	call	100c1d8 <OS_EventTaskRemove>
             pmsg = (void *)0;
 100fb9c:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 100fba0:	e0fffd17 	ldw	r3,-12(fp)
 100fba4:	00800284 	movi	r2,10
 100fba8:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 100fbac:	008040b4 	movhi	r2,258
 100fbb0:	10a68504 	addi	r2,r2,-26092
 100fbb4:	10800017 	ldw	r2,0(r2)
 100fbb8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 100fbbc:	008040b4 	movhi	r2,258
 100fbc0:	10a68504 	addi	r2,r2,-26092
 100fbc4:	10800017 	ldw	r2,0(r2)
 100fbc8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 100fbcc:	008040b4 	movhi	r2,258
 100fbd0:	10a68504 	addi	r2,r2,-26092
 100fbd4:	10800017 	ldw	r2,0(r2)
 100fbd8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100fbdc:	008040b4 	movhi	r2,258
 100fbe0:	10a68504 	addi	r2,r2,-26092
 100fbe4:	10800017 	ldw	r2,0(r2)
 100fbe8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 100fbec:	008040b4 	movhi	r2,258
 100fbf0:	10a68504 	addi	r2,r2,-26092
 100fbf4:	10800017 	ldw	r2,0(r2)
 100fbf8:	10000915 	stw	zero,36(r2)
 100fbfc:	e0bff817 	ldw	r2,-32(fp)
 100fc00:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fc04:	e0bff317 	ldw	r2,-52(fp)
 100fc08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 100fc0c:	e0bffa17 	ldw	r2,-24(fp)
 100fc10:	e0bfff15 	stw	r2,-4(fp)
 100fc14:	e0bfff17 	ldw	r2,-4(fp)
}
 100fc18:	e037883a 	mov	sp,fp
 100fc1c:	dfc00117 	ldw	ra,4(sp)
 100fc20:	df000017 	ldw	fp,0(sp)
 100fc24:	dec00204 	addi	sp,sp,8
 100fc28:	f800283a 	ret

0100fc2c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 100fc2c:	defff504 	addi	sp,sp,-44
 100fc30:	dfc00a15 	stw	ra,40(sp)
 100fc34:	df000915 	stw	fp,36(sp)
 100fc38:	df000904 	addi	fp,sp,36
 100fc3c:	e13ffc15 	stw	r4,-16(fp)
 100fc40:	e1bffe15 	stw	r6,-8(fp)
 100fc44:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 100fc48:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 100fc4c:	e0bffe17 	ldw	r2,-8(fp)
 100fc50:	1004c03a 	cmpne	r2,r2,zero
 100fc54:	1000021e 	bne	r2,zero,100fc60 <OSQPendAbort+0x34>
        return (0);
 100fc58:	e03fff15 	stw	zero,-4(fp)
 100fc5c:	00004c06 	br	100fd90 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 100fc60:	e0bffc17 	ldw	r2,-16(fp)
 100fc64:	1004c03a 	cmpne	r2,r2,zero
 100fc68:	1000051e 	bne	r2,zero,100fc80 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 100fc6c:	e0fffe17 	ldw	r3,-8(fp)
 100fc70:	00800104 	movi	r2,4
 100fc74:	18800005 	stb	r2,0(r3)
        return (0);
 100fc78:	e03fff15 	stw	zero,-4(fp)
 100fc7c:	00004406 	br	100fd90 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 100fc80:	e0bffc17 	ldw	r2,-16(fp)
 100fc84:	10800003 	ldbu	r2,0(r2)
 100fc88:	10803fcc 	andi	r2,r2,255
 100fc8c:	108000a0 	cmpeqi	r2,r2,2
 100fc90:	1000051e 	bne	r2,zero,100fca8 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 100fc94:	e0fffe17 	ldw	r3,-8(fp)
 100fc98:	00800044 	movi	r2,1
 100fc9c:	18800005 	stb	r2,0(r3)
        return (0);
 100fca0:	e03fff15 	stw	zero,-4(fp)
 100fca4:	00003a06 	br	100fd90 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fca8:	0005303a 	rdctl	r2,status
 100fcac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fcb0:	e0fff917 	ldw	r3,-28(fp)
 100fcb4:	00bfff84 	movi	r2,-2
 100fcb8:	1884703a 	and	r2,r3,r2
 100fcbc:	1001703a 	wrctl	status,r2
  
  return context;
 100fcc0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 100fcc4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 100fcc8:	e0bffc17 	ldw	r2,-16(fp)
 100fccc:	10800283 	ldbu	r2,10(r2)
 100fcd0:	10803fcc 	andi	r2,r2,255
 100fcd4:	1005003a 	cmpeq	r2,r2,zero
 100fcd8:	1000261e 	bne	r2,zero,100fd74 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 100fcdc:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 100fce0:	e0bffd03 	ldbu	r2,-12(fp)
 100fce4:	10800060 	cmpeqi	r2,r2,1
 100fce8:	1000091e 	bne	r2,zero,100fd10 <OSQPendAbort+0xe4>
 100fcec:	00000e06 	br	100fd28 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 100fcf0:	e13ffc17 	ldw	r4,-16(fp)
 100fcf4:	000b883a 	mov	r5,zero
 100fcf8:	01800104 	movi	r6,4
 100fcfc:	01c00084 	movi	r7,2
 100fd00:	100bde00 	call	100bde0 <OS_EventTaskRdy>
                     nbr_tasks++;
 100fd04:	e0bffb03 	ldbu	r2,-20(fp)
 100fd08:	10800044 	addi	r2,r2,1
 100fd0c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 100fd10:	e0bffc17 	ldw	r2,-16(fp)
 100fd14:	10800283 	ldbu	r2,10(r2)
 100fd18:	10803fcc 	andi	r2,r2,255
 100fd1c:	1004c03a 	cmpne	r2,r2,zero
 100fd20:	103ff31e 	bne	r2,zero,100fcf0 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 100fd24:	00000806 	br	100fd48 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 100fd28:	e13ffc17 	ldw	r4,-16(fp)
 100fd2c:	000b883a 	mov	r5,zero
 100fd30:	01800104 	movi	r6,4
 100fd34:	01c00084 	movi	r7,2
 100fd38:	100bde00 	call	100bde0 <OS_EventTaskRdy>
                 nbr_tasks++;
 100fd3c:	e0bffb03 	ldbu	r2,-20(fp)
 100fd40:	10800044 	addi	r2,r2,1
 100fd44:	e0bffb05 	stb	r2,-20(fp)
 100fd48:	e0bffa17 	ldw	r2,-24(fp)
 100fd4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fd50:	e0bff817 	ldw	r2,-32(fp)
 100fd54:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 100fd58:	100c8200 	call	100c820 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 100fd5c:	e0fffe17 	ldw	r3,-8(fp)
 100fd60:	00800384 	movi	r2,14
 100fd64:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 100fd68:	e0bffb03 	ldbu	r2,-20(fp)
 100fd6c:	e0bfff15 	stw	r2,-4(fp)
 100fd70:	00000706 	br	100fd90 <OSQPendAbort+0x164>
 100fd74:	e0bffa17 	ldw	r2,-24(fp)
 100fd78:	e0bff715 	stw	r2,-36(fp)
 100fd7c:	e0bff717 	ldw	r2,-36(fp)
 100fd80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100fd84:	e0bffe17 	ldw	r2,-8(fp)
 100fd88:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 100fd8c:	e03fff15 	stw	zero,-4(fp)
 100fd90:	e0bfff17 	ldw	r2,-4(fp)
}
 100fd94:	e037883a 	mov	sp,fp
 100fd98:	dfc00117 	ldw	ra,4(sp)
 100fd9c:	df000017 	ldw	fp,0(sp)
 100fda0:	dec00204 	addi	sp,sp,8
 100fda4:	f800283a 	ret

0100fda8 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 100fda8:	defff504 	addi	sp,sp,-44
 100fdac:	dfc00a15 	stw	ra,40(sp)
 100fdb0:	df000915 	stw	fp,36(sp)
 100fdb4:	df000904 	addi	fp,sp,36
 100fdb8:	e13ffd15 	stw	r4,-12(fp)
 100fdbc:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 100fdc0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 100fdc4:	e0bffd17 	ldw	r2,-12(fp)
 100fdc8:	1004c03a 	cmpne	r2,r2,zero
 100fdcc:	1000031e 	bne	r2,zero,100fddc <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 100fdd0:	00800104 	movi	r2,4
 100fdd4:	e0bfff15 	stw	r2,-4(fp)
 100fdd8:	00004d06 	br	100ff10 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 100fddc:	e0bffd17 	ldw	r2,-12(fp)
 100fde0:	10800003 	ldbu	r2,0(r2)
 100fde4:	10803fcc 	andi	r2,r2,255
 100fde8:	108000a0 	cmpeqi	r2,r2,2
 100fdec:	1000031e 	bne	r2,zero,100fdfc <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 100fdf0:	00800044 	movi	r2,1
 100fdf4:	e0bfff15 	stw	r2,-4(fp)
 100fdf8:	00004506 	br	100ff10 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fdfc:	0005303a 	rdctl	r2,status
 100fe00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fe04:	e0fffa17 	ldw	r3,-24(fp)
 100fe08:	00bfff84 	movi	r2,-2
 100fe0c:	1884703a 	and	r2,r3,r2
 100fe10:	1001703a 	wrctl	status,r2
  
  return context;
 100fe14:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100fe18:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 100fe1c:	e0bffd17 	ldw	r2,-12(fp)
 100fe20:	10800283 	ldbu	r2,10(r2)
 100fe24:	10803fcc 	andi	r2,r2,255
 100fe28:	1005003a 	cmpeq	r2,r2,zero
 100fe2c:	10000c1e 	bne	r2,zero,100fe60 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 100fe30:	e13ffd17 	ldw	r4,-12(fp)
 100fe34:	e17ffe17 	ldw	r5,-8(fp)
 100fe38:	01800104 	movi	r6,4
 100fe3c:	000f883a 	mov	r7,zero
 100fe40:	100bde00 	call	100bde0 <OS_EventTaskRdy>
 100fe44:	e0bffb17 	ldw	r2,-20(fp)
 100fe48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fe4c:	e0bff917 	ldw	r2,-28(fp)
 100fe50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 100fe54:	100c8200 	call	100c820 <OS_Sched>
        return (OS_ERR_NONE);
 100fe58:	e03fff15 	stw	zero,-4(fp)
 100fe5c:	00002c06 	br	100ff10 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 100fe60:	e0bffd17 	ldw	r2,-12(fp)
 100fe64:	10800117 	ldw	r2,4(r2)
 100fe68:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 100fe6c:	e0bffc17 	ldw	r2,-16(fp)
 100fe70:	10c0058b 	ldhu	r3,22(r2)
 100fe74:	e0bffc17 	ldw	r2,-16(fp)
 100fe78:	1080050b 	ldhu	r2,20(r2)
 100fe7c:	18ffffcc 	andi	r3,r3,65535
 100fe80:	10bfffcc 	andi	r2,r2,65535
 100fe84:	18800736 	bltu	r3,r2,100fea4 <OSQPost+0xfc>
 100fe88:	e0bffb17 	ldw	r2,-20(fp)
 100fe8c:	e0bff815 	stw	r2,-32(fp)
 100fe90:	e0bff817 	ldw	r2,-32(fp)
 100fe94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 100fe98:	00800784 	movi	r2,30
 100fe9c:	e0bfff15 	stw	r2,-4(fp)
 100fea0:	00001b06 	br	100ff10 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 100fea4:	e0bffc17 	ldw	r2,-16(fp)
 100fea8:	10c00317 	ldw	r3,12(r2)
 100feac:	e0bffe17 	ldw	r2,-8(fp)
 100feb0:	18800015 	stw	r2,0(r3)
 100feb4:	18c00104 	addi	r3,r3,4
 100feb8:	e0bffc17 	ldw	r2,-16(fp)
 100febc:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 100fec0:	e0bffc17 	ldw	r2,-16(fp)
 100fec4:	1080058b 	ldhu	r2,22(r2)
 100fec8:	10800044 	addi	r2,r2,1
 100fecc:	1007883a 	mov	r3,r2
 100fed0:	e0bffc17 	ldw	r2,-16(fp)
 100fed4:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 100fed8:	e0bffc17 	ldw	r2,-16(fp)
 100fedc:	10c00317 	ldw	r3,12(r2)
 100fee0:	e0bffc17 	ldw	r2,-16(fp)
 100fee4:	10800217 	ldw	r2,8(r2)
 100fee8:	1880041e 	bne	r3,r2,100fefc <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 100feec:	e0bffc17 	ldw	r2,-16(fp)
 100fef0:	10c00117 	ldw	r3,4(r2)
 100fef4:	e0bffc17 	ldw	r2,-16(fp)
 100fef8:	10c00315 	stw	r3,12(r2)
 100fefc:	e0bffb17 	ldw	r2,-20(fp)
 100ff00:	e0bff715 	stw	r2,-36(fp)
 100ff04:	e0bff717 	ldw	r2,-36(fp)
 100ff08:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 100ff0c:	e03fff15 	stw	zero,-4(fp)
 100ff10:	e0bfff17 	ldw	r2,-4(fp)
}
 100ff14:	e037883a 	mov	sp,fp
 100ff18:	dfc00117 	ldw	ra,4(sp)
 100ff1c:	df000017 	ldw	fp,0(sp)
 100ff20:	dec00204 	addi	sp,sp,8
 100ff24:	f800283a 	ret

0100ff28 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 100ff28:	defff504 	addi	sp,sp,-44
 100ff2c:	dfc00a15 	stw	ra,40(sp)
 100ff30:	df000915 	stw	fp,36(sp)
 100ff34:	df000904 	addi	fp,sp,36
 100ff38:	e13ffd15 	stw	r4,-12(fp)
 100ff3c:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 100ff40:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 100ff44:	e0bffd17 	ldw	r2,-12(fp)
 100ff48:	1004c03a 	cmpne	r2,r2,zero
 100ff4c:	1000031e 	bne	r2,zero,100ff5c <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 100ff50:	00800104 	movi	r2,4
 100ff54:	e0bfff15 	stw	r2,-4(fp)
 100ff58:	00004f06 	br	1010098 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 100ff5c:	e0bffd17 	ldw	r2,-12(fp)
 100ff60:	10800003 	ldbu	r2,0(r2)
 100ff64:	10803fcc 	andi	r2,r2,255
 100ff68:	108000a0 	cmpeqi	r2,r2,2
 100ff6c:	1000031e 	bne	r2,zero,100ff7c <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 100ff70:	00800044 	movi	r2,1
 100ff74:	e0bfff15 	stw	r2,-4(fp)
 100ff78:	00004706 	br	1010098 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ff7c:	0005303a 	rdctl	r2,status
 100ff80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ff84:	e0fffa17 	ldw	r3,-24(fp)
 100ff88:	00bfff84 	movi	r2,-2
 100ff8c:	1884703a 	and	r2,r3,r2
 100ff90:	1001703a 	wrctl	status,r2
  
  return context;
 100ff94:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 100ff98:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 100ff9c:	e0bffd17 	ldw	r2,-12(fp)
 100ffa0:	10800283 	ldbu	r2,10(r2)
 100ffa4:	10803fcc 	andi	r2,r2,255
 100ffa8:	1005003a 	cmpeq	r2,r2,zero
 100ffac:	10000c1e 	bne	r2,zero,100ffe0 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 100ffb0:	e13ffd17 	ldw	r4,-12(fp)
 100ffb4:	e17ffe17 	ldw	r5,-8(fp)
 100ffb8:	01800104 	movi	r6,4
 100ffbc:	000f883a 	mov	r7,zero
 100ffc0:	100bde00 	call	100bde0 <OS_EventTaskRdy>
 100ffc4:	e0bffb17 	ldw	r2,-20(fp)
 100ffc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ffcc:	e0bff917 	ldw	r2,-28(fp)
 100ffd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 100ffd4:	100c8200 	call	100c820 <OS_Sched>
        return (OS_ERR_NONE);
 100ffd8:	e03fff15 	stw	zero,-4(fp)
 100ffdc:	00002e06 	br	1010098 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 100ffe0:	e0bffd17 	ldw	r2,-12(fp)
 100ffe4:	10800117 	ldw	r2,4(r2)
 100ffe8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 100ffec:	e0bffc17 	ldw	r2,-16(fp)
 100fff0:	10c0058b 	ldhu	r3,22(r2)
 100fff4:	e0bffc17 	ldw	r2,-16(fp)
 100fff8:	1080050b 	ldhu	r2,20(r2)
 100fffc:	18ffffcc 	andi	r3,r3,65535
 1010000:	10bfffcc 	andi	r2,r2,65535
 1010004:	18800736 	bltu	r3,r2,1010024 <OSQPostFront+0xfc>
 1010008:	e0bffb17 	ldw	r2,-20(fp)
 101000c:	e0bff815 	stw	r2,-32(fp)
 1010010:	e0bff817 	ldw	r2,-32(fp)
 1010014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 1010018:	00800784 	movi	r2,30
 101001c:	e0bfff15 	stw	r2,-4(fp)
 1010020:	00001d06 	br	1010098 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 1010024:	e0bffc17 	ldw	r2,-16(fp)
 1010028:	10c00417 	ldw	r3,16(r2)
 101002c:	e0bffc17 	ldw	r2,-16(fp)
 1010030:	10800117 	ldw	r2,4(r2)
 1010034:	1880041e 	bne	r3,r2,1010048 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 1010038:	e0bffc17 	ldw	r2,-16(fp)
 101003c:	10c00217 	ldw	r3,8(r2)
 1010040:	e0bffc17 	ldw	r2,-16(fp)
 1010044:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 1010048:	e0bffc17 	ldw	r2,-16(fp)
 101004c:	10800417 	ldw	r2,16(r2)
 1010050:	10ffff04 	addi	r3,r2,-4
 1010054:	e0bffc17 	ldw	r2,-16(fp)
 1010058:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 101005c:	e0bffc17 	ldw	r2,-16(fp)
 1010060:	10c00417 	ldw	r3,16(r2)
 1010064:	e0bffe17 	ldw	r2,-8(fp)
 1010068:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 101006c:	e0bffc17 	ldw	r2,-16(fp)
 1010070:	1080058b 	ldhu	r2,22(r2)
 1010074:	10800044 	addi	r2,r2,1
 1010078:	1007883a 	mov	r3,r2
 101007c:	e0bffc17 	ldw	r2,-16(fp)
 1010080:	10c0058d 	sth	r3,22(r2)
 1010084:	e0bffb17 	ldw	r2,-20(fp)
 1010088:	e0bff715 	stw	r2,-36(fp)
 101008c:	e0bff717 	ldw	r2,-36(fp)
 1010090:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1010094:	e03fff15 	stw	zero,-4(fp)
 1010098:	e0bfff17 	ldw	r2,-4(fp)
}
 101009c:	e037883a 	mov	sp,fp
 10100a0:	dfc00117 	ldw	ra,4(sp)
 10100a4:	df000017 	ldw	fp,0(sp)
 10100a8:	dec00204 	addi	sp,sp,8
 10100ac:	f800283a 	ret

010100b0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 10100b0:	defff404 	addi	sp,sp,-48
 10100b4:	dfc00b15 	stw	ra,44(sp)
 10100b8:	df000a15 	stw	fp,40(sp)
 10100bc:	df000a04 	addi	fp,sp,40
 10100c0:	e13ffc15 	stw	r4,-16(fp)
 10100c4:	e17ffd15 	stw	r5,-12(fp)
 10100c8:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10100cc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10100d0:	e0bffc17 	ldw	r2,-16(fp)
 10100d4:	1004c03a 	cmpne	r2,r2,zero
 10100d8:	1000031e 	bne	r2,zero,10100e8 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 10100dc:	00800104 	movi	r2,4
 10100e0:	e0bfff15 	stw	r2,-4(fp)
 10100e4:	00007906 	br	10102cc <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 10100e8:	e0bffc17 	ldw	r2,-16(fp)
 10100ec:	10800003 	ldbu	r2,0(r2)
 10100f0:	10803fcc 	andi	r2,r2,255
 10100f4:	108000a0 	cmpeqi	r2,r2,2
 10100f8:	1000031e 	bne	r2,zero,1010108 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 10100fc:	00800044 	movi	r2,1
 1010100:	e0bfff15 	stw	r2,-4(fp)
 1010104:	00007106 	br	10102cc <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010108:	0005303a 	rdctl	r2,status
 101010c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010110:	e0fff917 	ldw	r3,-28(fp)
 1010114:	00bfff84 	movi	r2,-2
 1010118:	1884703a 	and	r2,r3,r2
 101011c:	1001703a 	wrctl	status,r2
  
  return context;
 1010120:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1010124:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 1010128:	e0bffc17 	ldw	r2,-16(fp)
 101012c:	10800283 	ldbu	r2,10(r2)
 1010130:	10803fcc 	andi	r2,r2,255
 1010134:	1005003a 	cmpeq	r2,r2,zero
 1010138:	1000211e 	bne	r2,zero,10101c0 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 101013c:	e0bffe03 	ldbu	r2,-8(fp)
 1010140:	1080004c 	andi	r2,r2,1
 1010144:	10803fcc 	andi	r2,r2,255
 1010148:	1005003a 	cmpeq	r2,r2,zero
 101014c:	10000c1e 	bne	r2,zero,1010180 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 1010150:	00000506 	br	1010168 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1010154:	e13ffc17 	ldw	r4,-16(fp)
 1010158:	e17ffd17 	ldw	r5,-12(fp)
 101015c:	01800104 	movi	r6,4
 1010160:	000f883a 	mov	r7,zero
 1010164:	100bde00 	call	100bde0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 1010168:	e0bffc17 	ldw	r2,-16(fp)
 101016c:	10800283 	ldbu	r2,10(r2)
 1010170:	10803fcc 	andi	r2,r2,255
 1010174:	1004c03a 	cmpne	r2,r2,zero
 1010178:	103ff61e 	bne	r2,zero,1010154 <OSQPostOpt+0xa4>
 101017c:	00000506 	br	1010194 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 1010180:	e13ffc17 	ldw	r4,-16(fp)
 1010184:	e17ffd17 	ldw	r5,-12(fp)
 1010188:	01800104 	movi	r6,4
 101018c:	000f883a 	mov	r7,zero
 1010190:	100bde00 	call	100bde0 <OS_EventTaskRdy>
 1010194:	e0bffa17 	ldw	r2,-24(fp)
 1010198:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101019c:	e0bff817 	ldw	r2,-32(fp)
 10101a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 10101a4:	e0bffe03 	ldbu	r2,-8(fp)
 10101a8:	1080010c 	andi	r2,r2,4
 10101ac:	1004c03a 	cmpne	r2,r2,zero
 10101b0:	1000011e 	bne	r2,zero,10101b8 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 10101b4:	100c8200 	call	100c820 <OS_Sched>
        }
        return (OS_ERR_NONE);
 10101b8:	e03fff15 	stw	zero,-4(fp)
 10101bc:	00004306 	br	10102cc <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 10101c0:	e0bffc17 	ldw	r2,-16(fp)
 10101c4:	10800117 	ldw	r2,4(r2)
 10101c8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 10101cc:	e0bffb17 	ldw	r2,-20(fp)
 10101d0:	10c0058b 	ldhu	r3,22(r2)
 10101d4:	e0bffb17 	ldw	r2,-20(fp)
 10101d8:	1080050b 	ldhu	r2,20(r2)
 10101dc:	18ffffcc 	andi	r3,r3,65535
 10101e0:	10bfffcc 	andi	r2,r2,65535
 10101e4:	18800736 	bltu	r3,r2,1010204 <OSQPostOpt+0x154>
 10101e8:	e0bffa17 	ldw	r2,-24(fp)
 10101ec:	e0bff715 	stw	r2,-36(fp)
 10101f0:	e0bff717 	ldw	r2,-36(fp)
 10101f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 10101f8:	00800784 	movi	r2,30
 10101fc:	e0bfff15 	stw	r2,-4(fp)
 1010200:	00003206 	br	10102cc <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 1010204:	e0bffe03 	ldbu	r2,-8(fp)
 1010208:	1080008c 	andi	r2,r2,2
 101020c:	1005003a 	cmpeq	r2,r2,zero
 1010210:	1000131e 	bne	r2,zero,1010260 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 1010214:	e0bffb17 	ldw	r2,-20(fp)
 1010218:	10c00417 	ldw	r3,16(r2)
 101021c:	e0bffb17 	ldw	r2,-20(fp)
 1010220:	10800117 	ldw	r2,4(r2)
 1010224:	1880041e 	bne	r3,r2,1010238 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 1010228:	e0bffb17 	ldw	r2,-20(fp)
 101022c:	10c00217 	ldw	r3,8(r2)
 1010230:	e0bffb17 	ldw	r2,-20(fp)
 1010234:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 1010238:	e0bffb17 	ldw	r2,-20(fp)
 101023c:	10800417 	ldw	r2,16(r2)
 1010240:	10ffff04 	addi	r3,r2,-4
 1010244:	e0bffb17 	ldw	r2,-20(fp)
 1010248:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 101024c:	e0bffb17 	ldw	r2,-20(fp)
 1010250:	10c00417 	ldw	r3,16(r2)
 1010254:	e0bffd17 	ldw	r2,-12(fp)
 1010258:	18800015 	stw	r2,0(r3)
 101025c:	00001006 	br	10102a0 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 1010260:	e0bffb17 	ldw	r2,-20(fp)
 1010264:	10c00317 	ldw	r3,12(r2)
 1010268:	e0bffd17 	ldw	r2,-12(fp)
 101026c:	18800015 	stw	r2,0(r3)
 1010270:	18c00104 	addi	r3,r3,4
 1010274:	e0bffb17 	ldw	r2,-20(fp)
 1010278:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 101027c:	e0bffb17 	ldw	r2,-20(fp)
 1010280:	10c00317 	ldw	r3,12(r2)
 1010284:	e0bffb17 	ldw	r2,-20(fp)
 1010288:	10800217 	ldw	r2,8(r2)
 101028c:	1880041e 	bne	r3,r2,10102a0 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 1010290:	e0bffb17 	ldw	r2,-20(fp)
 1010294:	10c00117 	ldw	r3,4(r2)
 1010298:	e0bffb17 	ldw	r2,-20(fp)
 101029c:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 10102a0:	e0bffb17 	ldw	r2,-20(fp)
 10102a4:	1080058b 	ldhu	r2,22(r2)
 10102a8:	10800044 	addi	r2,r2,1
 10102ac:	1007883a 	mov	r3,r2
 10102b0:	e0bffb17 	ldw	r2,-20(fp)
 10102b4:	10c0058d 	sth	r3,22(r2)
 10102b8:	e0bffa17 	ldw	r2,-24(fp)
 10102bc:	e0bff615 	stw	r2,-40(fp)
 10102c0:	e0bff617 	ldw	r2,-40(fp)
 10102c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 10102c8:	e03fff15 	stw	zero,-4(fp)
 10102cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10102d0:	e037883a 	mov	sp,fp
 10102d4:	dfc00117 	ldw	ra,4(sp)
 10102d8:	df000017 	ldw	fp,0(sp)
 10102dc:	dec00204 	addi	sp,sp,8
 10102e0:	f800283a 	ret

010102e4 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 10102e4:	defff504 	addi	sp,sp,-44
 10102e8:	df000a15 	stw	fp,40(sp)
 10102ec:	df000a04 	addi	fp,sp,40
 10102f0:	e13ffd15 	stw	r4,-12(fp)
 10102f4:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 10102f8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 10102fc:	e0bffd17 	ldw	r2,-12(fp)
 1010300:	1004c03a 	cmpne	r2,r2,zero
 1010304:	1000031e 	bne	r2,zero,1010314 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1010308:	00800104 	movi	r2,4
 101030c:	e0bfff15 	stw	r2,-4(fp)
 1010310:	00004f06 	br	1010450 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 1010314:	e0bffe17 	ldw	r2,-8(fp)
 1010318:	1004c03a 	cmpne	r2,r2,zero
 101031c:	1000031e 	bne	r2,zero,101032c <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 1010320:	00800244 	movi	r2,9
 1010324:	e0bfff15 	stw	r2,-4(fp)
 1010328:	00004906 	br	1010450 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 101032c:	e0bffd17 	ldw	r2,-12(fp)
 1010330:	10800003 	ldbu	r2,0(r2)
 1010334:	10803fcc 	andi	r2,r2,255
 1010338:	108000a0 	cmpeqi	r2,r2,2
 101033c:	1000031e 	bne	r2,zero,101034c <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 1010340:	00800044 	movi	r2,1
 1010344:	e0bfff15 	stw	r2,-4(fp)
 1010348:	00004106 	br	1010450 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101034c:	0005303a 	rdctl	r2,status
 1010350:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010354:	e0fff717 	ldw	r3,-36(fp)
 1010358:	00bfff84 	movi	r2,-2
 101035c:	1884703a 	and	r2,r3,r2
 1010360:	1001703a 	wrctl	status,r2
  
  return context;
 1010364:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 1010368:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 101036c:	e0bffd17 	ldw	r2,-12(fp)
 1010370:	10c00283 	ldbu	r3,10(r2)
 1010374:	e0bffe17 	ldw	r2,-8(fp)
 1010378:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 101037c:	e0bffd17 	ldw	r2,-12(fp)
 1010380:	108002c4 	addi	r2,r2,11
 1010384:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 1010388:	e0bffe17 	ldw	r2,-8(fp)
 101038c:	10800204 	addi	r2,r2,8
 1010390:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1010394:	e03ffb05 	stb	zero,-20(fp)
 1010398:	00000d06 	br	10103d0 <OSQQuery+0xec>
        *pdest++ = *psrc++;
 101039c:	e0bffa17 	ldw	r2,-24(fp)
 10103a0:	10c00003 	ldbu	r3,0(r2)
 10103a4:	e0bff917 	ldw	r2,-28(fp)
 10103a8:	10c00005 	stb	r3,0(r2)
 10103ac:	e0bff917 	ldw	r2,-28(fp)
 10103b0:	10800044 	addi	r2,r2,1
 10103b4:	e0bff915 	stw	r2,-28(fp)
 10103b8:	e0bffa17 	ldw	r2,-24(fp)
 10103bc:	10800044 	addi	r2,r2,1
 10103c0:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 10103c4:	e0bffb03 	ldbu	r2,-20(fp)
 10103c8:	10800044 	addi	r2,r2,1
 10103cc:	e0bffb05 	stb	r2,-20(fp)
 10103d0:	e0bffb03 	ldbu	r2,-20(fp)
 10103d4:	108000f0 	cmpltui	r2,r2,3
 10103d8:	103ff01e 	bne	r2,zero,101039c <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 10103dc:	e0bffd17 	ldw	r2,-12(fp)
 10103e0:	10800117 	ldw	r2,4(r2)
 10103e4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 10103e8:	e0bffc17 	ldw	r2,-16(fp)
 10103ec:	1080058b 	ldhu	r2,22(r2)
 10103f0:	10bfffcc 	andi	r2,r2,65535
 10103f4:	1005003a 	cmpeq	r2,r2,zero
 10103f8:	1000061e 	bne	r2,zero,1010414 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 10103fc:	e0bffc17 	ldw	r2,-16(fp)
 1010400:	10800417 	ldw	r2,16(r2)
 1010404:	10c00017 	ldw	r3,0(r2)
 1010408:	e0bffe17 	ldw	r2,-8(fp)
 101040c:	10c00015 	stw	r3,0(r2)
 1010410:	00000206 	br	101041c <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 1010414:	e0bffe17 	ldw	r2,-8(fp)
 1010418:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 101041c:	e0bffc17 	ldw	r2,-16(fp)
 1010420:	10c0058b 	ldhu	r3,22(r2)
 1010424:	e0bffe17 	ldw	r2,-8(fp)
 1010428:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 101042c:	e0bffc17 	ldw	r2,-16(fp)
 1010430:	10c0050b 	ldhu	r3,20(r2)
 1010434:	e0bffe17 	ldw	r2,-8(fp)
 1010438:	10c0018d 	sth	r3,6(r2)
 101043c:	e0bff817 	ldw	r2,-32(fp)
 1010440:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010444:	e0bff617 	ldw	r2,-40(fp)
 1010448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 101044c:	e03fff15 	stw	zero,-4(fp)
 1010450:	e0bfff17 	ldw	r2,-4(fp)
}
 1010454:	e037883a 	mov	sp,fp
 1010458:	df000017 	ldw	fp,0(sp)
 101045c:	dec00104 	addi	sp,sp,4
 1010460:	f800283a 	ret

01010464 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 1010464:	defffb04 	addi	sp,sp,-20
 1010468:	dfc00415 	stw	ra,16(sp)
 101046c:	df000315 	stw	fp,12(sp)
 1010470:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 1010474:	010040b4 	movhi	r4,258
 1010478:	21047f04 	addi	r4,r4,4604
 101047c:	01407804 	movi	r5,480
 1010480:	100c7600 	call	100c760 <OS_MemClr>
    pq1 = &OSQTbl[0];
 1010484:	008040b4 	movhi	r2,258
 1010488:	10847f04 	addi	r2,r2,4604
 101048c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 1010490:	008040b4 	movhi	r2,258
 1010494:	10848504 	addi	r2,r2,4628
 1010498:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 101049c:	e03fff0d 	sth	zero,-4(fp)
 10104a0:	00000c06 	br	10104d4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 10104a4:	e0fffe17 	ldw	r3,-8(fp)
 10104a8:	e0bffd17 	ldw	r2,-12(fp)
 10104ac:	18800015 	stw	r2,0(r3)
        pq1++;
 10104b0:	e0bffe17 	ldw	r2,-8(fp)
 10104b4:	10800604 	addi	r2,r2,24
 10104b8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 10104bc:	e0bffd17 	ldw	r2,-12(fp)
 10104c0:	10800604 	addi	r2,r2,24
 10104c4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 10104c8:	e0bfff0b 	ldhu	r2,-4(fp)
 10104cc:	10800044 	addi	r2,r2,1
 10104d0:	e0bfff0d 	sth	r2,-4(fp)
 10104d4:	e0bfff0b 	ldhu	r2,-4(fp)
 10104d8:	108004f0 	cmpltui	r2,r2,19
 10104dc:	103ff11e 	bne	r2,zero,10104a4 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 10104e0:	e0bffe17 	ldw	r2,-8(fp)
 10104e4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 10104e8:	00c040b4 	movhi	r3,258
 10104ec:	18e68104 	addi	r3,r3,-26108
 10104f0:	008040b4 	movhi	r2,258
 10104f4:	10847f04 	addi	r2,r2,4604
 10104f8:	18800015 	stw	r2,0(r3)
#endif
}
 10104fc:	e037883a 	mov	sp,fp
 1010500:	dfc00117 	ldw	ra,4(sp)
 1010504:	df000017 	ldw	fp,0(sp)
 1010508:	dec00204 	addi	sp,sp,8
 101050c:	f800283a 	ret

01010510 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 1010510:	defff904 	addi	sp,sp,-28
 1010514:	df000615 	stw	fp,24(sp)
 1010518:	df000604 	addi	fp,sp,24
 101051c:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010520:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1010524:	e0bffe17 	ldw	r2,-8(fp)
 1010528:	1004c03a 	cmpne	r2,r2,zero
 101052c:	1000021e 	bne	r2,zero,1010538 <OSSemAccept+0x28>
        return (0);
 1010530:	e03fff15 	stw	zero,-4(fp)
 1010534:	00002106 	br	10105bc <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1010538:	e0bffe17 	ldw	r2,-8(fp)
 101053c:	10800003 	ldbu	r2,0(r2)
 1010540:	10803fcc 	andi	r2,r2,255
 1010544:	108000e0 	cmpeqi	r2,r2,3
 1010548:	1000021e 	bne	r2,zero,1010554 <OSSemAccept+0x44>
        return (0);
 101054c:	e03fff15 	stw	zero,-4(fp)
 1010550:	00001a06 	br	10105bc <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010554:	0005303a 	rdctl	r2,status
 1010558:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101055c:	e0fffb17 	ldw	r3,-20(fp)
 1010560:	00bfff84 	movi	r2,-2
 1010564:	1884703a 	and	r2,r3,r2
 1010568:	1001703a 	wrctl	status,r2
  
  return context;
 101056c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1010570:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 1010574:	e0bffe17 	ldw	r2,-8(fp)
 1010578:	1080020b 	ldhu	r2,8(r2)
 101057c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 1010580:	e0bffd0b 	ldhu	r2,-12(fp)
 1010584:	1005003a 	cmpeq	r2,r2,zero
 1010588:	1000061e 	bne	r2,zero,10105a4 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 101058c:	e0bffe17 	ldw	r2,-8(fp)
 1010590:	1080020b 	ldhu	r2,8(r2)
 1010594:	10bfffc4 	addi	r2,r2,-1
 1010598:	1007883a 	mov	r3,r2
 101059c:	e0bffe17 	ldw	r2,-8(fp)
 10105a0:	10c0020d 	sth	r3,8(r2)
 10105a4:	e0bffc17 	ldw	r2,-16(fp)
 10105a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10105ac:	e0bffa17 	ldw	r2,-24(fp)
 10105b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 10105b4:	e0bffd0b 	ldhu	r2,-12(fp)
 10105b8:	e0bfff15 	stw	r2,-4(fp)
 10105bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10105c0:	e037883a 	mov	sp,fp
 10105c4:	df000017 	ldw	fp,0(sp)
 10105c8:	dec00104 	addi	sp,sp,4
 10105cc:	f800283a 	ret

010105d0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 10105d0:	defff804 	addi	sp,sp,-32
 10105d4:	dfc00715 	stw	ra,28(sp)
 10105d8:	df000615 	stw	fp,24(sp)
 10105dc:	df000604 	addi	fp,sp,24
 10105e0:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 10105e4:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 10105e8:	008040b4 	movhi	r2,258
 10105ec:	10a68404 	addi	r2,r2,-26096
 10105f0:	10800003 	ldbu	r2,0(r2)
 10105f4:	10803fcc 	andi	r2,r2,255
 10105f8:	1005003a 	cmpeq	r2,r2,zero
 10105fc:	1000021e 	bne	r2,zero,1010608 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 1010600:	e03fff15 	stw	zero,-4(fp)
 1010604:	00003106 	br	10106cc <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010608:	0005303a 	rdctl	r2,status
 101060c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010610:	e0fffb17 	ldw	r3,-20(fp)
 1010614:	00bfff84 	movi	r2,-2
 1010618:	1884703a 	and	r2,r3,r2
 101061c:	1001703a 	wrctl	status,r2
  
  return context;
 1010620:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1010624:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 1010628:	008040b4 	movhi	r2,258
 101062c:	10a68304 	addi	r2,r2,-26100
 1010630:	10800017 	ldw	r2,0(r2)
 1010634:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 1010638:	008040b4 	movhi	r2,258
 101063c:	10a68304 	addi	r2,r2,-26100
 1010640:	10800017 	ldw	r2,0(r2)
 1010644:	1005003a 	cmpeq	r2,r2,zero
 1010648:	1000081e 	bne	r2,zero,101066c <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 101064c:	008040b4 	movhi	r2,258
 1010650:	10a68304 	addi	r2,r2,-26100
 1010654:	10800017 	ldw	r2,0(r2)
 1010658:	10800117 	ldw	r2,4(r2)
 101065c:	1007883a 	mov	r3,r2
 1010660:	008040b4 	movhi	r2,258
 1010664:	10a68304 	addi	r2,r2,-26100
 1010668:	10c00015 	stw	r3,0(r2)
 101066c:	e0bffc17 	ldw	r2,-16(fp)
 1010670:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010674:	e0bffa17 	ldw	r2,-24(fp)
 1010678:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 101067c:	e0bffd17 	ldw	r2,-12(fp)
 1010680:	1005003a 	cmpeq	r2,r2,zero
 1010684:	10000f1e 	bne	r2,zero,10106c4 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 1010688:	e0fffd17 	ldw	r3,-12(fp)
 101068c:	008000c4 	movi	r2,3
 1010690:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 1010694:	e0fffd17 	ldw	r3,-12(fp)
 1010698:	e0bffe0b 	ldhu	r2,-8(fp)
 101069c:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 10106a0:	e0bffd17 	ldw	r2,-12(fp)
 10106a4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 10106a8:	e0fffd17 	ldw	r3,-12(fp)
 10106ac:	00800fc4 	movi	r2,63
 10106b0:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 10106b4:	e0bffd17 	ldw	r2,-12(fp)
 10106b8:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 10106bc:	e13ffd17 	ldw	r4,-12(fp)
 10106c0:	100c3940 	call	100c394 <OS_EventWaitListInit>
    }
    return (pevent);
 10106c4:	e0bffd17 	ldw	r2,-12(fp)
 10106c8:	e0bfff15 	stw	r2,-4(fp)
 10106cc:	e0bfff17 	ldw	r2,-4(fp)
}
 10106d0:	e037883a 	mov	sp,fp
 10106d4:	dfc00117 	ldw	ra,4(sp)
 10106d8:	df000017 	ldw	fp,0(sp)
 10106dc:	dec00204 	addi	sp,sp,8
 10106e0:	f800283a 	ret

010106e4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 10106e4:	defff104 	addi	sp,sp,-60
 10106e8:	dfc00e15 	stw	ra,56(sp)
 10106ec:	df000d15 	stw	fp,52(sp)
 10106f0:	df000d04 	addi	fp,sp,52
 10106f4:	e13ffb15 	stw	r4,-20(fp)
 10106f8:	e1bffd15 	stw	r6,-12(fp)
 10106fc:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1010700:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 1010704:	e0bffd17 	ldw	r2,-12(fp)
 1010708:	1004c03a 	cmpne	r2,r2,zero
 101070c:	1000031e 	bne	r2,zero,101071c <OSSemDel+0x38>
        return (pevent);
 1010710:	e0bffb17 	ldw	r2,-20(fp)
 1010714:	e0bfff15 	stw	r2,-4(fp)
 1010718:	00009406 	br	101096c <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 101071c:	e0bffb17 	ldw	r2,-20(fp)
 1010720:	1004c03a 	cmpne	r2,r2,zero
 1010724:	1000061e 	bne	r2,zero,1010740 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 1010728:	e0fffd17 	ldw	r3,-12(fp)
 101072c:	00800104 	movi	r2,4
 1010730:	18800005 	stb	r2,0(r3)
        return (pevent);
 1010734:	e0fffb17 	ldw	r3,-20(fp)
 1010738:	e0ffff15 	stw	r3,-4(fp)
 101073c:	00008b06 	br	101096c <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 1010740:	e0bffb17 	ldw	r2,-20(fp)
 1010744:	10800003 	ldbu	r2,0(r2)
 1010748:	10803fcc 	andi	r2,r2,255
 101074c:	108000e0 	cmpeqi	r2,r2,3
 1010750:	1000061e 	bne	r2,zero,101076c <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 1010754:	e0fffd17 	ldw	r3,-12(fp)
 1010758:	00800044 	movi	r2,1
 101075c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1010760:	e0bffb17 	ldw	r2,-20(fp)
 1010764:	e0bfff15 	stw	r2,-4(fp)
 1010768:	00008006 	br	101096c <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 101076c:	008040b4 	movhi	r2,258
 1010770:	10a68404 	addi	r2,r2,-26096
 1010774:	10800003 	ldbu	r2,0(r2)
 1010778:	10803fcc 	andi	r2,r2,255
 101077c:	1005003a 	cmpeq	r2,r2,zero
 1010780:	1000061e 	bne	r2,zero,101079c <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 1010784:	e0fffd17 	ldw	r3,-12(fp)
 1010788:	008003c4 	movi	r2,15
 101078c:	18800005 	stb	r2,0(r3)
        return (pevent);
 1010790:	e0fffb17 	ldw	r3,-20(fp)
 1010794:	e0ffff15 	stw	r3,-4(fp)
 1010798:	00007406 	br	101096c <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101079c:	0005303a 	rdctl	r2,status
 10107a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10107a4:	e0fff717 	ldw	r3,-36(fp)
 10107a8:	00bfff84 	movi	r2,-2
 10107ac:	1884703a 	and	r2,r3,r2
 10107b0:	1001703a 	wrctl	status,r2
  
  return context;
 10107b4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 10107b8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 10107bc:	e0bffb17 	ldw	r2,-20(fp)
 10107c0:	10800283 	ldbu	r2,10(r2)
 10107c4:	10803fcc 	andi	r2,r2,255
 10107c8:	1005003a 	cmpeq	r2,r2,zero
 10107cc:	1000031e 	bne	r2,zero,10107dc <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 10107d0:	00800044 	movi	r2,1
 10107d4:	e0bffa05 	stb	r2,-24(fp)
 10107d8:	00000106 	br	10107e0 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 10107dc:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 10107e0:	e0bffc03 	ldbu	r2,-16(fp)
 10107e4:	e0bffe15 	stw	r2,-8(fp)
 10107e8:	e0fffe17 	ldw	r3,-8(fp)
 10107ec:	1805003a 	cmpeq	r2,r3,zero
 10107f0:	1000041e 	bne	r2,zero,1010804 <OSSemDel+0x120>
 10107f4:	e0fffe17 	ldw	r3,-8(fp)
 10107f8:	18800060 	cmpeqi	r2,r3,1
 10107fc:	10002d1e 	bne	r2,zero,10108b4 <OSSemDel+0x1d0>
 1010800:	00004f06 	br	1010940 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 1010804:	e0bffa03 	ldbu	r2,-24(fp)
 1010808:	1004c03a 	cmpne	r2,r2,zero
 101080c:	10001a1e 	bne	r2,zero,1010878 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 1010810:	e0fffb17 	ldw	r3,-20(fp)
 1010814:	00800fc4 	movi	r2,63
 1010818:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 101081c:	e0bffb17 	ldw	r2,-20(fp)
 1010820:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 1010824:	e0bffb17 	ldw	r2,-20(fp)
 1010828:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 101082c:	008040b4 	movhi	r2,258
 1010830:	10a68304 	addi	r2,r2,-26100
 1010834:	10c00017 	ldw	r3,0(r2)
 1010838:	e0bffb17 	ldw	r2,-20(fp)
 101083c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 1010840:	e0bffb17 	ldw	r2,-20(fp)
 1010844:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 1010848:	00c040b4 	movhi	r3,258
 101084c:	18e68304 	addi	r3,r3,-26100
 1010850:	e0bffb17 	ldw	r2,-20(fp)
 1010854:	18800015 	stw	r2,0(r3)
 1010858:	e0bff817 	ldw	r2,-32(fp)
 101085c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010860:	e0bff617 	ldw	r2,-40(fp)
 1010864:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 1010868:	e0bffd17 	ldw	r2,-12(fp)
 101086c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 1010870:	e03ff915 	stw	zero,-28(fp)
 1010874:	00003b06 	br	1010964 <OSSemDel+0x280>
 1010878:	e0bff817 	ldw	r2,-32(fp)
 101087c:	e0bff515 	stw	r2,-44(fp)
 1010880:	e0bff517 	ldw	r2,-44(fp)
 1010884:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 1010888:	e0fffd17 	ldw	r3,-12(fp)
 101088c:	00801244 	movi	r2,73
 1010890:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 1010894:	e0bffb17 	ldw	r2,-20(fp)
 1010898:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 101089c:	00003106 	br	1010964 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 10108a0:	e13ffb17 	ldw	r4,-20(fp)
 10108a4:	000b883a 	mov	r5,zero
 10108a8:	01800044 	movi	r6,1
 10108ac:	000f883a 	mov	r7,zero
 10108b0:	100bde00 	call	100bde0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 10108b4:	e0bffb17 	ldw	r2,-20(fp)
 10108b8:	10800283 	ldbu	r2,10(r2)
 10108bc:	10803fcc 	andi	r2,r2,255
 10108c0:	1004c03a 	cmpne	r2,r2,zero
 10108c4:	103ff61e 	bne	r2,zero,10108a0 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 10108c8:	e0fffb17 	ldw	r3,-20(fp)
 10108cc:	00800fc4 	movi	r2,63
 10108d0:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 10108d4:	e0bffb17 	ldw	r2,-20(fp)
 10108d8:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 10108dc:	e0bffb17 	ldw	r2,-20(fp)
 10108e0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 10108e4:	008040b4 	movhi	r2,258
 10108e8:	10a68304 	addi	r2,r2,-26100
 10108ec:	10c00017 	ldw	r3,0(r2)
 10108f0:	e0bffb17 	ldw	r2,-20(fp)
 10108f4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 10108f8:	e0bffb17 	ldw	r2,-20(fp)
 10108fc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 1010900:	00c040b4 	movhi	r3,258
 1010904:	18e68304 	addi	r3,r3,-26100
 1010908:	e0bffb17 	ldw	r2,-20(fp)
 101090c:	18800015 	stw	r2,0(r3)
 1010910:	e0bff817 	ldw	r2,-32(fp)
 1010914:	e0bff415 	stw	r2,-48(fp)
 1010918:	e0bff417 	ldw	r2,-48(fp)
 101091c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 1010920:	e0bffa03 	ldbu	r2,-24(fp)
 1010924:	10800058 	cmpnei	r2,r2,1
 1010928:	1000011e 	bne	r2,zero,1010930 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 101092c:	100c8200 	call	100c820 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 1010930:	e0bffd17 	ldw	r2,-12(fp)
 1010934:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 1010938:	e03ff915 	stw	zero,-28(fp)
             break;
 101093c:	00000906 	br	1010964 <OSSemDel+0x280>
 1010940:	e0bff817 	ldw	r2,-32(fp)
 1010944:	e0bff315 	stw	r2,-52(fp)
 1010948:	e0bff317 	ldw	r2,-52(fp)
 101094c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 1010950:	e0fffd17 	ldw	r3,-12(fp)
 1010954:	008001c4 	movi	r2,7
 1010958:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 101095c:	e0bffb17 	ldw	r2,-20(fp)
 1010960:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 1010964:	e0bff917 	ldw	r2,-28(fp)
 1010968:	e0bfff15 	stw	r2,-4(fp)
 101096c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010970:	e037883a 	mov	sp,fp
 1010974:	dfc00117 	ldw	ra,4(sp)
 1010978:	df000017 	ldw	fp,0(sp)
 101097c:	dec00204 	addi	sp,sp,8
 1010980:	f800283a 	ret

01010984 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 1010984:	defff404 	addi	sp,sp,-48
 1010988:	dfc00b15 	stw	ra,44(sp)
 101098c:	df000a15 	stw	fp,40(sp)
 1010990:	df000a04 	addi	fp,sp,40
 1010994:	e13ffc15 	stw	r4,-16(fp)
 1010998:	e1bffe15 	stw	r6,-8(fp)
 101099c:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 10109a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 10109a4:	e0bffe17 	ldw	r2,-8(fp)
 10109a8:	1005003a 	cmpeq	r2,r2,zero
 10109ac:	10008f1e 	bne	r2,zero,1010bec <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 10109b0:	e0bffc17 	ldw	r2,-16(fp)
 10109b4:	1004c03a 	cmpne	r2,r2,zero
 10109b8:	1000041e 	bne	r2,zero,10109cc <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 10109bc:	e0fffe17 	ldw	r3,-8(fp)
 10109c0:	00800104 	movi	r2,4
 10109c4:	18800005 	stb	r2,0(r3)
        return;
 10109c8:	00008806 	br	1010bec <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 10109cc:	e0bffc17 	ldw	r2,-16(fp)
 10109d0:	10800003 	ldbu	r2,0(r2)
 10109d4:	10803fcc 	andi	r2,r2,255
 10109d8:	108000e0 	cmpeqi	r2,r2,3
 10109dc:	1000041e 	bne	r2,zero,10109f0 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 10109e0:	e0fffe17 	ldw	r3,-8(fp)
 10109e4:	00800044 	movi	r2,1
 10109e8:	18800005 	stb	r2,0(r3)
        return;
 10109ec:	00007f06 	br	1010bec <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 10109f0:	008040b4 	movhi	r2,258
 10109f4:	10a68404 	addi	r2,r2,-26096
 10109f8:	10800003 	ldbu	r2,0(r2)
 10109fc:	10803fcc 	andi	r2,r2,255
 1010a00:	1005003a 	cmpeq	r2,r2,zero
 1010a04:	1000041e 	bne	r2,zero,1010a18 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 1010a08:	e0fffe17 	ldw	r3,-8(fp)
 1010a0c:	00800084 	movi	r2,2
 1010a10:	18800005 	stb	r2,0(r3)
        return;
 1010a14:	00007506 	br	1010bec <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 1010a18:	008040b4 	movhi	r2,258
 1010a1c:	10a67604 	addi	r2,r2,-26152
 1010a20:	10800003 	ldbu	r2,0(r2)
 1010a24:	10803fcc 	andi	r2,r2,255
 1010a28:	1005003a 	cmpeq	r2,r2,zero
 1010a2c:	1000041e 	bne	r2,zero,1010a40 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 1010a30:	e0fffe17 	ldw	r3,-8(fp)
 1010a34:	00800344 	movi	r2,13
 1010a38:	18800005 	stb	r2,0(r3)
        return;
 1010a3c:	00006b06 	br	1010bec <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010a40:	0005303a 	rdctl	r2,status
 1010a44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010a48:	e0fffa17 	ldw	r3,-24(fp)
 1010a4c:	00bfff84 	movi	r2,-2
 1010a50:	1884703a 	and	r2,r3,r2
 1010a54:	1001703a 	wrctl	status,r2
  
  return context;
 1010a58:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 1010a5c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 1010a60:	e0bffc17 	ldw	r2,-16(fp)
 1010a64:	1080020b 	ldhu	r2,8(r2)
 1010a68:	10bfffcc 	andi	r2,r2,65535
 1010a6c:	1005003a 	cmpeq	r2,r2,zero
 1010a70:	10000d1e 	bne	r2,zero,1010aa8 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 1010a74:	e0bffc17 	ldw	r2,-16(fp)
 1010a78:	1080020b 	ldhu	r2,8(r2)
 1010a7c:	10bfffc4 	addi	r2,r2,-1
 1010a80:	1007883a 	mov	r3,r2
 1010a84:	e0bffc17 	ldw	r2,-16(fp)
 1010a88:	10c0020d 	sth	r3,8(r2)
 1010a8c:	e0bffb17 	ldw	r2,-20(fp)
 1010a90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010a94:	e0bff917 	ldw	r2,-28(fp)
 1010a98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 1010a9c:	e0bffe17 	ldw	r2,-8(fp)
 1010aa0:	10000005 	stb	zero,0(r2)
        return;
 1010aa4:	00005106 	br	1010bec <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 1010aa8:	008040b4 	movhi	r2,258
 1010aac:	10a68504 	addi	r2,r2,-26092
 1010ab0:	10c00017 	ldw	r3,0(r2)
 1010ab4:	008040b4 	movhi	r2,258
 1010ab8:	10a68504 	addi	r2,r2,-26092
 1010abc:	10800017 	ldw	r2,0(r2)
 1010ac0:	10800c03 	ldbu	r2,48(r2)
 1010ac4:	10800054 	ori	r2,r2,1
 1010ac8:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 1010acc:	008040b4 	movhi	r2,258
 1010ad0:	10a68504 	addi	r2,r2,-26092
 1010ad4:	10800017 	ldw	r2,0(r2)
 1010ad8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 1010adc:	008040b4 	movhi	r2,258
 1010ae0:	10a68504 	addi	r2,r2,-26092
 1010ae4:	10c00017 	ldw	r3,0(r2)
 1010ae8:	e0bffd0b 	ldhu	r2,-12(fp)
 1010aec:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 1010af0:	e13ffc17 	ldw	r4,-16(fp)
 1010af4:	100bf740 	call	100bf74 <OS_EventTaskWait>
 1010af8:	e0bffb17 	ldw	r2,-20(fp)
 1010afc:	e0bff815 	stw	r2,-32(fp)
 1010b00:	e0bff817 	ldw	r2,-32(fp)
 1010b04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 1010b08:	100c8200 	call	100c820 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010b0c:	0005303a 	rdctl	r2,status
 1010b10:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010b14:	e0fff717 	ldw	r3,-36(fp)
 1010b18:	00bfff84 	movi	r2,-2
 1010b1c:	1884703a 	and	r2,r3,r2
 1010b20:	1001703a 	wrctl	status,r2
  
  return context;
 1010b24:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 1010b28:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 1010b2c:	008040b4 	movhi	r2,258
 1010b30:	10a68504 	addi	r2,r2,-26092
 1010b34:	10800017 	ldw	r2,0(r2)
 1010b38:	10800c43 	ldbu	r2,49(r2)
 1010b3c:	10803fcc 	andi	r2,r2,255
 1010b40:	e0bfff15 	stw	r2,-4(fp)
 1010b44:	e0ffff17 	ldw	r3,-4(fp)
 1010b48:	1805003a 	cmpeq	r2,r3,zero
 1010b4c:	1000041e 	bne	r2,zero,1010b60 <OSSemPend+0x1dc>
 1010b50:	e0ffff17 	ldw	r3,-4(fp)
 1010b54:	188000a0 	cmpeqi	r2,r3,2
 1010b58:	1000041e 	bne	r2,zero,1010b6c <OSSemPend+0x1e8>
 1010b5c:	00000706 	br	1010b7c <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 1010b60:	e0bffe17 	ldw	r2,-8(fp)
 1010b64:	10000005 	stb	zero,0(r2)
             break;
 1010b68:	00000c06 	br	1010b9c <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 1010b6c:	e0fffe17 	ldw	r3,-8(fp)
 1010b70:	00800384 	movi	r2,14
 1010b74:	18800005 	stb	r2,0(r3)
             break;
 1010b78:	00000806 	br	1010b9c <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 1010b7c:	008040b4 	movhi	r2,258
 1010b80:	10a68504 	addi	r2,r2,-26092
 1010b84:	11000017 	ldw	r4,0(r2)
 1010b88:	e17ffc17 	ldw	r5,-16(fp)
 1010b8c:	100c1d80 	call	100c1d8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 1010b90:	e0fffe17 	ldw	r3,-8(fp)
 1010b94:	00800284 	movi	r2,10
 1010b98:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 1010b9c:	008040b4 	movhi	r2,258
 1010ba0:	10a68504 	addi	r2,r2,-26092
 1010ba4:	10800017 	ldw	r2,0(r2)
 1010ba8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 1010bac:	008040b4 	movhi	r2,258
 1010bb0:	10a68504 	addi	r2,r2,-26092
 1010bb4:	10800017 	ldw	r2,0(r2)
 1010bb8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 1010bbc:	008040b4 	movhi	r2,258
 1010bc0:	10a68504 	addi	r2,r2,-26092
 1010bc4:	10800017 	ldw	r2,0(r2)
 1010bc8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 1010bcc:	008040b4 	movhi	r2,258
 1010bd0:	10a68504 	addi	r2,r2,-26092
 1010bd4:	10800017 	ldw	r2,0(r2)
 1010bd8:	10000815 	stw	zero,32(r2)
 1010bdc:	e0bffb17 	ldw	r2,-20(fp)
 1010be0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010be4:	e0bff617 	ldw	r2,-40(fp)
 1010be8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 1010bec:	e037883a 	mov	sp,fp
 1010bf0:	dfc00117 	ldw	ra,4(sp)
 1010bf4:	df000017 	ldw	fp,0(sp)
 1010bf8:	dec00204 	addi	sp,sp,8
 1010bfc:	f800283a 	ret

01010c00 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 1010c00:	defff504 	addi	sp,sp,-44
 1010c04:	dfc00a15 	stw	ra,40(sp)
 1010c08:	df000915 	stw	fp,36(sp)
 1010c0c:	df000904 	addi	fp,sp,36
 1010c10:	e13ffc15 	stw	r4,-16(fp)
 1010c14:	e1bffe15 	stw	r6,-8(fp)
 1010c18:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010c1c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010c20:	e0bffe17 	ldw	r2,-8(fp)
 1010c24:	1004c03a 	cmpne	r2,r2,zero
 1010c28:	1000021e 	bne	r2,zero,1010c34 <OSSemPendAbort+0x34>
        return (0);
 1010c2c:	e03fff15 	stw	zero,-4(fp)
 1010c30:	00004c06 	br	1010d64 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1010c34:	e0bffc17 	ldw	r2,-16(fp)
 1010c38:	1004c03a 	cmpne	r2,r2,zero
 1010c3c:	1000051e 	bne	r2,zero,1010c54 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 1010c40:	e0fffe17 	ldw	r3,-8(fp)
 1010c44:	00800104 	movi	r2,4
 1010c48:	18800005 	stb	r2,0(r3)
        return (0);
 1010c4c:	e03fff15 	stw	zero,-4(fp)
 1010c50:	00004406 	br	1010d64 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1010c54:	e0bffc17 	ldw	r2,-16(fp)
 1010c58:	10800003 	ldbu	r2,0(r2)
 1010c5c:	10803fcc 	andi	r2,r2,255
 1010c60:	108000e0 	cmpeqi	r2,r2,3
 1010c64:	1000051e 	bne	r2,zero,1010c7c <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 1010c68:	e0fffe17 	ldw	r3,-8(fp)
 1010c6c:	00800044 	movi	r2,1
 1010c70:	18800005 	stb	r2,0(r3)
        return (0);
 1010c74:	e03fff15 	stw	zero,-4(fp)
 1010c78:	00003a06 	br	1010d64 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010c7c:	0005303a 	rdctl	r2,status
 1010c80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010c84:	e0fff917 	ldw	r3,-28(fp)
 1010c88:	00bfff84 	movi	r2,-2
 1010c8c:	1884703a 	and	r2,r3,r2
 1010c90:	1001703a 	wrctl	status,r2
  
  return context;
 1010c94:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1010c98:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 1010c9c:	e0bffc17 	ldw	r2,-16(fp)
 1010ca0:	10800283 	ldbu	r2,10(r2)
 1010ca4:	10803fcc 	andi	r2,r2,255
 1010ca8:	1005003a 	cmpeq	r2,r2,zero
 1010cac:	1000261e 	bne	r2,zero,1010d48 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 1010cb0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 1010cb4:	e0bffd03 	ldbu	r2,-12(fp)
 1010cb8:	10800060 	cmpeqi	r2,r2,1
 1010cbc:	1000091e 	bne	r2,zero,1010ce4 <OSSemPendAbort+0xe4>
 1010cc0:	00000e06 	br	1010cfc <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1010cc4:	e13ffc17 	ldw	r4,-16(fp)
 1010cc8:	000b883a 	mov	r5,zero
 1010ccc:	01800044 	movi	r6,1
 1010cd0:	01c00084 	movi	r7,2
 1010cd4:	100bde00 	call	100bde0 <OS_EventTaskRdy>
                     nbr_tasks++;
 1010cd8:	e0bffb03 	ldbu	r2,-20(fp)
 1010cdc:	10800044 	addi	r2,r2,1
 1010ce0:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 1010ce4:	e0bffc17 	ldw	r2,-16(fp)
 1010ce8:	10800283 	ldbu	r2,10(r2)
 1010cec:	10803fcc 	andi	r2,r2,255
 1010cf0:	1004c03a 	cmpne	r2,r2,zero
 1010cf4:	103ff31e 	bne	r2,zero,1010cc4 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 1010cf8:	00000806 	br	1010d1c <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 1010cfc:	e13ffc17 	ldw	r4,-16(fp)
 1010d00:	000b883a 	mov	r5,zero
 1010d04:	01800044 	movi	r6,1
 1010d08:	01c00084 	movi	r7,2
 1010d0c:	100bde00 	call	100bde0 <OS_EventTaskRdy>
                 nbr_tasks++;
 1010d10:	e0bffb03 	ldbu	r2,-20(fp)
 1010d14:	10800044 	addi	r2,r2,1
 1010d18:	e0bffb05 	stb	r2,-20(fp)
 1010d1c:	e0bffa17 	ldw	r2,-24(fp)
 1010d20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d24:	e0bff817 	ldw	r2,-32(fp)
 1010d28:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 1010d2c:	100c8200 	call	100c820 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 1010d30:	e0fffe17 	ldw	r3,-8(fp)
 1010d34:	00800384 	movi	r2,14
 1010d38:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 1010d3c:	e0bffb03 	ldbu	r2,-20(fp)
 1010d40:	e0bfff15 	stw	r2,-4(fp)
 1010d44:	00000706 	br	1010d64 <OSSemPendAbort+0x164>
 1010d48:	e0bffa17 	ldw	r2,-24(fp)
 1010d4c:	e0bff715 	stw	r2,-36(fp)
 1010d50:	e0bff717 	ldw	r2,-36(fp)
 1010d54:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 1010d58:	e0bffe17 	ldw	r2,-8(fp)
 1010d5c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 1010d60:	e03fff15 	stw	zero,-4(fp)
 1010d64:	e0bfff17 	ldw	r2,-4(fp)
}
 1010d68:	e037883a 	mov	sp,fp
 1010d6c:	dfc00117 	ldw	ra,4(sp)
 1010d70:	df000017 	ldw	fp,0(sp)
 1010d74:	dec00204 	addi	sp,sp,8
 1010d78:	f800283a 	ret

01010d7c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 1010d7c:	defff704 	addi	sp,sp,-36
 1010d80:	dfc00815 	stw	ra,32(sp)
 1010d84:	df000715 	stw	fp,28(sp)
 1010d88:	df000704 	addi	fp,sp,28
 1010d8c:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010d90:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1010d94:	e0bffe17 	ldw	r2,-8(fp)
 1010d98:	1004c03a 	cmpne	r2,r2,zero
 1010d9c:	1000031e 	bne	r2,zero,1010dac <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 1010da0:	00800104 	movi	r2,4
 1010da4:	e0bfff15 	stw	r2,-4(fp)
 1010da8:	00003806 	br	1010e8c <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1010dac:	e0bffe17 	ldw	r2,-8(fp)
 1010db0:	10800003 	ldbu	r2,0(r2)
 1010db4:	10803fcc 	andi	r2,r2,255
 1010db8:	108000e0 	cmpeqi	r2,r2,3
 1010dbc:	1000031e 	bne	r2,zero,1010dcc <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 1010dc0:	00800044 	movi	r2,1
 1010dc4:	e0bfff15 	stw	r2,-4(fp)
 1010dc8:	00003006 	br	1010e8c <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010dcc:	0005303a 	rdctl	r2,status
 1010dd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010dd4:	e0fffc17 	ldw	r3,-16(fp)
 1010dd8:	00bfff84 	movi	r2,-2
 1010ddc:	1884703a 	and	r2,r3,r2
 1010de0:	1001703a 	wrctl	status,r2
  
  return context;
 1010de4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 1010de8:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 1010dec:	e0bffe17 	ldw	r2,-8(fp)
 1010df0:	10800283 	ldbu	r2,10(r2)
 1010df4:	10803fcc 	andi	r2,r2,255
 1010df8:	1005003a 	cmpeq	r2,r2,zero
 1010dfc:	10000c1e 	bne	r2,zero,1010e30 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 1010e00:	e13ffe17 	ldw	r4,-8(fp)
 1010e04:	000b883a 	mov	r5,zero
 1010e08:	01800044 	movi	r6,1
 1010e0c:	000f883a 	mov	r7,zero
 1010e10:	100bde00 	call	100bde0 <OS_EventTaskRdy>
 1010e14:	e0bffd17 	ldw	r2,-12(fp)
 1010e18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010e1c:	e0bffb17 	ldw	r2,-20(fp)
 1010e20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 1010e24:	100c8200 	call	100c820 <OS_Sched>
        return (OS_ERR_NONE);
 1010e28:	e03fff15 	stw	zero,-4(fp)
 1010e2c:	00001706 	br	1010e8c <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 1010e30:	e0bffe17 	ldw	r2,-8(fp)
 1010e34:	1080020b 	ldhu	r2,8(r2)
 1010e38:	10ffffcc 	andi	r3,r2,65535
 1010e3c:	00bfffd4 	movui	r2,65535
 1010e40:	18800c26 	beq	r3,r2,1010e74 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 1010e44:	e0bffe17 	ldw	r2,-8(fp)
 1010e48:	1080020b 	ldhu	r2,8(r2)
 1010e4c:	10800044 	addi	r2,r2,1
 1010e50:	1007883a 	mov	r3,r2
 1010e54:	e0bffe17 	ldw	r2,-8(fp)
 1010e58:	10c0020d 	sth	r3,8(r2)
 1010e5c:	e0bffd17 	ldw	r2,-12(fp)
 1010e60:	e0bffa15 	stw	r2,-24(fp)
 1010e64:	e0bffa17 	ldw	r2,-24(fp)
 1010e68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 1010e6c:	e03fff15 	stw	zero,-4(fp)
 1010e70:	00000606 	br	1010e8c <OSSemPost+0x110>
 1010e74:	e0bffd17 	ldw	r2,-12(fp)
 1010e78:	e0bff915 	stw	r2,-28(fp)
 1010e7c:	e0bff917 	ldw	r2,-28(fp)
 1010e80:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 1010e84:	00800c84 	movi	r2,50
 1010e88:	e0bfff15 	stw	r2,-4(fp)
 1010e8c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010e90:	e037883a 	mov	sp,fp
 1010e94:	dfc00117 	ldw	ra,4(sp)
 1010e98:	df000017 	ldw	fp,0(sp)
 1010e9c:	dec00204 	addi	sp,sp,8
 1010ea0:	f800283a 	ret

01010ea4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 1010ea4:	defff604 	addi	sp,sp,-40
 1010ea8:	df000915 	stw	fp,36(sp)
 1010eac:	df000904 	addi	fp,sp,36
 1010eb0:	e13ffd15 	stw	r4,-12(fp)
 1010eb4:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 1010eb8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 1010ebc:	e0bffd17 	ldw	r2,-12(fp)
 1010ec0:	1004c03a 	cmpne	r2,r2,zero
 1010ec4:	1000031e 	bne	r2,zero,1010ed4 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 1010ec8:	00800104 	movi	r2,4
 1010ecc:	e0bfff15 	stw	r2,-4(fp)
 1010ed0:	00003b06 	br	1010fc0 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 1010ed4:	e0bffe17 	ldw	r2,-8(fp)
 1010ed8:	1004c03a 	cmpne	r2,r2,zero
 1010edc:	1000031e 	bne	r2,zero,1010eec <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 1010ee0:	00800244 	movi	r2,9
 1010ee4:	e0bfff15 	stw	r2,-4(fp)
 1010ee8:	00003506 	br	1010fc0 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 1010eec:	e0bffd17 	ldw	r2,-12(fp)
 1010ef0:	10800003 	ldbu	r2,0(r2)
 1010ef4:	10803fcc 	andi	r2,r2,255
 1010ef8:	108000e0 	cmpeqi	r2,r2,3
 1010efc:	1000031e 	bne	r2,zero,1010f0c <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 1010f00:	00800044 	movi	r2,1
 1010f04:	e0bfff15 	stw	r2,-4(fp)
 1010f08:	00002d06 	br	1010fc0 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010f0c:	0005303a 	rdctl	r2,status
 1010f10:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010f14:	e0fff817 	ldw	r3,-32(fp)
 1010f18:	00bfff84 	movi	r2,-2
 1010f1c:	1884703a 	and	r2,r3,r2
 1010f20:	1001703a 	wrctl	status,r2
  
  return context;
 1010f24:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1010f28:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 1010f2c:	e0bffd17 	ldw	r2,-12(fp)
 1010f30:	10c00283 	ldbu	r3,10(r2)
 1010f34:	e0bffe17 	ldw	r2,-8(fp)
 1010f38:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 1010f3c:	e0bffd17 	ldw	r2,-12(fp)
 1010f40:	108002c4 	addi	r2,r2,11
 1010f44:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 1010f48:	e0bffe17 	ldw	r2,-8(fp)
 1010f4c:	10800084 	addi	r2,r2,2
 1010f50:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1010f54:	e03ffa05 	stb	zero,-24(fp)
 1010f58:	00000d06 	br	1010f90 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 1010f5c:	e0bffc17 	ldw	r2,-16(fp)
 1010f60:	10c00003 	ldbu	r3,0(r2)
 1010f64:	e0bffb17 	ldw	r2,-20(fp)
 1010f68:	10c00005 	stb	r3,0(r2)
 1010f6c:	e0bffb17 	ldw	r2,-20(fp)
 1010f70:	10800044 	addi	r2,r2,1
 1010f74:	e0bffb15 	stw	r2,-20(fp)
 1010f78:	e0bffc17 	ldw	r2,-16(fp)
 1010f7c:	10800044 	addi	r2,r2,1
 1010f80:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 1010f84:	e0bffa03 	ldbu	r2,-24(fp)
 1010f88:	10800044 	addi	r2,r2,1
 1010f8c:	e0bffa05 	stb	r2,-24(fp)
 1010f90:	e0bffa03 	ldbu	r2,-24(fp)
 1010f94:	108000f0 	cmpltui	r2,r2,3
 1010f98:	103ff01e 	bne	r2,zero,1010f5c <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 1010f9c:	e0bffd17 	ldw	r2,-12(fp)
 1010fa0:	10c0020b 	ldhu	r3,8(r2)
 1010fa4:	e0bffe17 	ldw	r2,-8(fp)
 1010fa8:	10c0000d 	sth	r3,0(r2)
 1010fac:	e0bff917 	ldw	r2,-28(fp)
 1010fb0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010fb4:	e0bff717 	ldw	r2,-36(fp)
 1010fb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1010fbc:	e03fff15 	stw	zero,-4(fp)
 1010fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 1010fc4:	e037883a 	mov	sp,fp
 1010fc8:	df000017 	ldw	fp,0(sp)
 1010fcc:	dec00104 	addi	sp,sp,4
 1010fd0:	f800283a 	ret

01010fd4 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 1010fd4:	defff904 	addi	sp,sp,-28
 1010fd8:	df000615 	stw	fp,24(sp)
 1010fdc:	df000604 	addi	fp,sp,24
 1010fe0:	e13ffd15 	stw	r4,-12(fp)
 1010fe4:	e1bfff15 	stw	r6,-4(fp)
 1010fe8:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1010fec:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 1010ff0:	e0bfff17 	ldw	r2,-4(fp)
 1010ff4:	1005003a 	cmpeq	r2,r2,zero
 1010ff8:	1000331e 	bne	r2,zero,10110c8 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 1010ffc:	e0bffd17 	ldw	r2,-12(fp)
 1011000:	1004c03a 	cmpne	r2,r2,zero
 1011004:	1000041e 	bne	r2,zero,1011018 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 1011008:	e0ffff17 	ldw	r3,-4(fp)
 101100c:	00800104 	movi	r2,4
 1011010:	18800005 	stb	r2,0(r3)
        return;
 1011014:	00002c06 	br	10110c8 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 1011018:	e0bffd17 	ldw	r2,-12(fp)
 101101c:	10800003 	ldbu	r2,0(r2)
 1011020:	10803fcc 	andi	r2,r2,255
 1011024:	108000e0 	cmpeqi	r2,r2,3
 1011028:	1000041e 	bne	r2,zero,101103c <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 101102c:	e0ffff17 	ldw	r3,-4(fp)
 1011030:	00800044 	movi	r2,1
 1011034:	18800005 	stb	r2,0(r3)
        return;
 1011038:	00002306 	br	10110c8 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101103c:	0005303a 	rdctl	r2,status
 1011040:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011044:	e0fffb17 	ldw	r3,-20(fp)
 1011048:	00bfff84 	movi	r2,-2
 101104c:	1884703a 	and	r2,r3,r2
 1011050:	1001703a 	wrctl	status,r2
  
  return context;
 1011054:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1011058:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 101105c:	e0bfff17 	ldw	r2,-4(fp)
 1011060:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 1011064:	e0bffd17 	ldw	r2,-12(fp)
 1011068:	1080020b 	ldhu	r2,8(r2)
 101106c:	10bfffcc 	andi	r2,r2,65535
 1011070:	1005003a 	cmpeq	r2,r2,zero
 1011074:	1000041e 	bne	r2,zero,1011088 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 1011078:	e0fffd17 	ldw	r3,-12(fp)
 101107c:	e0bffe0b 	ldhu	r2,-8(fp)
 1011080:	1880020d 	sth	r2,8(r3)
 1011084:	00000c06 	br	10110b8 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 1011088:	e0bffd17 	ldw	r2,-12(fp)
 101108c:	10800283 	ldbu	r2,10(r2)
 1011090:	10803fcc 	andi	r2,r2,255
 1011094:	1004c03a 	cmpne	r2,r2,zero
 1011098:	1000041e 	bne	r2,zero,10110ac <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 101109c:	e0fffd17 	ldw	r3,-12(fp)
 10110a0:	e0bffe0b 	ldhu	r2,-8(fp)
 10110a4:	1880020d 	sth	r2,8(r3)
 10110a8:	00000306 	br	10110b8 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 10110ac:	e0ffff17 	ldw	r3,-4(fp)
 10110b0:	00801244 	movi	r2,73
 10110b4:	18800005 	stb	r2,0(r3)
 10110b8:	e0bffc17 	ldw	r2,-16(fp)
 10110bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10110c0:	e0bffa17 	ldw	r2,-24(fp)
 10110c4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 10110c8:	e037883a 	mov	sp,fp
 10110cc:	df000017 	ldw	fp,0(sp)
 10110d0:	dec00104 	addi	sp,sp,4
 10110d4:	f800283a 	ret

010110d8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 10110d8:	defff004 	addi	sp,sp,-64
 10110dc:	dfc00f15 	stw	ra,60(sp)
 10110e0:	df000e15 	stw	fp,56(sp)
 10110e4:	df000e04 	addi	fp,sp,56
 10110e8:	e13ffd05 	stb	r4,-12(fp)
 10110ec:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 10110f0:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 10110f4:	e0bffd03 	ldbu	r2,-12(fp)
 10110f8:	10800530 	cmpltui	r2,r2,20
 10110fc:	1000061e 	bne	r2,zero,1011118 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 1011100:	e0bffd03 	ldbu	r2,-12(fp)
 1011104:	10803fe0 	cmpeqi	r2,r2,255
 1011108:	1000031e 	bne	r2,zero,1011118 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 101110c:	00800a84 	movi	r2,42
 1011110:	e0bfff15 	stw	r2,-4(fp)
 1011114:	00014706 	br	1011634 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 1011118:	e0bffe03 	ldbu	r2,-8(fp)
 101111c:	10800530 	cmpltui	r2,r2,20
 1011120:	1000031e 	bne	r2,zero,1011130 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 1011124:	00800a84 	movi	r2,42
 1011128:	e0bfff15 	stw	r2,-4(fp)
 101112c:	00014106 	br	1011634 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011130:	0005303a 	rdctl	r2,status
 1011134:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011138:	e0fff617 	ldw	r3,-40(fp)
 101113c:	00bfff84 	movi	r2,-2
 1011140:	1884703a 	and	r2,r3,r2
 1011144:	1001703a 	wrctl	status,r2
  
  return context;
 1011148:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 101114c:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 1011150:	e0bffe03 	ldbu	r2,-8(fp)
 1011154:	00c040b4 	movhi	r3,258
 1011158:	18cb0b04 	addi	r3,r3,11308
 101115c:	1085883a 	add	r2,r2,r2
 1011160:	1085883a 	add	r2,r2,r2
 1011164:	10c5883a 	add	r2,r2,r3
 1011168:	10800017 	ldw	r2,0(r2)
 101116c:	1005003a 	cmpeq	r2,r2,zero
 1011170:	1000071e 	bne	r2,zero,1011190 <OSTaskChangePrio+0xb8>
 1011174:	e0bff717 	ldw	r2,-36(fp)
 1011178:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101117c:	e0bff517 	ldw	r2,-44(fp)
 1011180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 1011184:	00800a04 	movi	r2,40
 1011188:	e0bfff15 	stw	r2,-4(fp)
 101118c:	00012906 	br	1011634 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 1011190:	e0bffd03 	ldbu	r2,-12(fp)
 1011194:	10803fd8 	cmpnei	r2,r2,255
 1011198:	1000051e 	bne	r2,zero,10111b0 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 101119c:	008040b4 	movhi	r2,258
 10111a0:	10a68504 	addi	r2,r2,-26092
 10111a4:	10800017 	ldw	r2,0(r2)
 10111a8:	10800c83 	ldbu	r2,50(r2)
 10111ac:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 10111b0:	e0bffd03 	ldbu	r2,-12(fp)
 10111b4:	00c040b4 	movhi	r3,258
 10111b8:	18cb0b04 	addi	r3,r3,11308
 10111bc:	1085883a 	add	r2,r2,r2
 10111c0:	1085883a 	add	r2,r2,r2
 10111c4:	10c5883a 	add	r2,r2,r3
 10111c8:	10800017 	ldw	r2,0(r2)
 10111cc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 10111d0:	e0bffa17 	ldw	r2,-24(fp)
 10111d4:	1004c03a 	cmpne	r2,r2,zero
 10111d8:	1000071e 	bne	r2,zero,10111f8 <OSTaskChangePrio+0x120>
 10111dc:	e0bff717 	ldw	r2,-36(fp)
 10111e0:	e0bff415 	stw	r2,-48(fp)
 10111e4:	e0bff417 	ldw	r2,-48(fp)
 10111e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 10111ec:	00800a44 	movi	r2,41
 10111f0:	e0bfff15 	stw	r2,-4(fp)
 10111f4:	00010f06 	br	1011634 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 10111f8:	e0bffa17 	ldw	r2,-24(fp)
 10111fc:	10800058 	cmpnei	r2,r2,1
 1011200:	1000071e 	bne	r2,zero,1011220 <OSTaskChangePrio+0x148>
 1011204:	e0bff717 	ldw	r2,-36(fp)
 1011208:	e0bff315 	stw	r2,-52(fp)
 101120c:	e0bff317 	ldw	r2,-52(fp)
 1011210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 1011214:	008010c4 	movi	r2,67
 1011218:	e0bfff15 	stw	r2,-4(fp)
 101121c:	00010506 	br	1011634 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 1011220:	e0bffe03 	ldbu	r2,-8(fp)
 1011224:	1004d0fa 	srli	r2,r2,3
 1011228:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 101122c:	e0bffe03 	ldbu	r2,-8(fp)
 1011230:	108001cc 	andi	r2,r2,7
 1011234:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 1011238:	e0fff983 	ldbu	r3,-26(fp)
 101123c:	00800044 	movi	r2,1
 1011240:	10c4983a 	sll	r2,r2,r3
 1011244:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 1011248:	e0fff943 	ldbu	r3,-27(fp)
 101124c:	00800044 	movi	r2,1
 1011250:	10c4983a 	sll	r2,r2,r3
 1011254:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 1011258:	e0bffd03 	ldbu	r2,-12(fp)
 101125c:	00c040b4 	movhi	r3,258
 1011260:	18cb0b04 	addi	r3,r3,11308
 1011264:	1085883a 	add	r2,r2,r2
 1011268:	1085883a 	add	r2,r2,r2
 101126c:	10c5883a 	add	r2,r2,r3
 1011270:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 1011274:	e0bffe03 	ldbu	r2,-8(fp)
 1011278:	00c040b4 	movhi	r3,258
 101127c:	18cb0b04 	addi	r3,r3,11308
 1011280:	1085883a 	add	r2,r2,r2
 1011284:	1085883a 	add	r2,r2,r2
 1011288:	10c7883a 	add	r3,r2,r3
 101128c:	e0bffa17 	ldw	r2,-24(fp)
 1011290:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 1011294:	e0bffa17 	ldw	r2,-24(fp)
 1011298:	10800d03 	ldbu	r2,52(r2)
 101129c:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 10112a0:	e0bffa17 	ldw	r2,-24(fp)
 10112a4:	10800d83 	ldbu	r2,54(r2)
 10112a8:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 10112ac:	e0bffa17 	ldw	r2,-24(fp)
 10112b0:	10800d43 	ldbu	r2,53(r2)
 10112b4:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 10112b8:	e0fff903 	ldbu	r3,-28(fp)
 10112bc:	008040b4 	movhi	r2,258
 10112c0:	10a68244 	addi	r2,r2,-26103
 10112c4:	10c5883a 	add	r2,r2,r3
 10112c8:	10c00003 	ldbu	r3,0(r2)
 10112cc:	e0bff803 	ldbu	r2,-32(fp)
 10112d0:	1884703a 	and	r2,r3,r2
 10112d4:	10803fcc 	andi	r2,r2,255
 10112d8:	1005003a 	cmpeq	r2,r2,zero
 10112dc:	1000381e 	bne	r2,zero,10113c0 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 10112e0:	e13ff903 	ldbu	r4,-28(fp)
 10112e4:	e0fff903 	ldbu	r3,-28(fp)
 10112e8:	008040b4 	movhi	r2,258
 10112ec:	10a68244 	addi	r2,r2,-26103
 10112f0:	10c5883a 	add	r2,r2,r3
 10112f4:	10800003 	ldbu	r2,0(r2)
 10112f8:	1007883a 	mov	r3,r2
 10112fc:	e0bff803 	ldbu	r2,-32(fp)
 1011300:	0084303a 	nor	r2,zero,r2
 1011304:	1884703a 	and	r2,r3,r2
 1011308:	1007883a 	mov	r3,r2
 101130c:	008040b4 	movhi	r2,258
 1011310:	10a68244 	addi	r2,r2,-26103
 1011314:	1105883a 	add	r2,r2,r4
 1011318:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 101131c:	e0fff903 	ldbu	r3,-28(fp)
 1011320:	008040b4 	movhi	r2,258
 1011324:	10a68244 	addi	r2,r2,-26103
 1011328:	10c5883a 	add	r2,r2,r3
 101132c:	10800003 	ldbu	r2,0(r2)
 1011330:	10803fcc 	andi	r2,r2,255
 1011334:	1004c03a 	cmpne	r2,r2,zero
 1011338:	10000b1e 	bne	r2,zero,1011368 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 101133c:	e0bff843 	ldbu	r2,-31(fp)
 1011340:	0084303a 	nor	r2,zero,r2
 1011344:	1007883a 	mov	r3,r2
 1011348:	008040b4 	movhi	r2,258
 101134c:	10a68204 	addi	r2,r2,-26104
 1011350:	10800003 	ldbu	r2,0(r2)
 1011354:	1884703a 	and	r2,r3,r2
 1011358:	1007883a 	mov	r3,r2
 101135c:	008040b4 	movhi	r2,258
 1011360:	10a68204 	addi	r2,r2,-26104
 1011364:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 1011368:	008040b4 	movhi	r2,258
 101136c:	10a68204 	addi	r2,r2,-26104
 1011370:	10c00003 	ldbu	r3,0(r2)
 1011374:	e0bff8c3 	ldbu	r2,-29(fp)
 1011378:	1884b03a 	or	r2,r3,r2
 101137c:	1007883a 	mov	r3,r2
 1011380:	008040b4 	movhi	r2,258
 1011384:	10a68204 	addi	r2,r2,-26104
 1011388:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 101138c:	e13ff983 	ldbu	r4,-26(fp)
 1011390:	e0fff983 	ldbu	r3,-26(fp)
 1011394:	008040b4 	movhi	r2,258
 1011398:	10a68244 	addi	r2,r2,-26103
 101139c:	10c5883a 	add	r2,r2,r3
 10113a0:	10c00003 	ldbu	r3,0(r2)
 10113a4:	e0bff883 	ldbu	r2,-30(fp)
 10113a8:	1884b03a 	or	r2,r3,r2
 10113ac:	1007883a 	mov	r3,r2
 10113b0:	008040b4 	movhi	r2,258
 10113b4:	10a68244 	addi	r2,r2,-26103
 10113b8:	1105883a 	add	r2,r2,r4
 10113bc:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 10113c0:	e0bffa17 	ldw	r2,-24(fp)
 10113c4:	10800717 	ldw	r2,28(r2)
 10113c8:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 10113cc:	e0bffc17 	ldw	r2,-16(fp)
 10113d0:	1005003a 	cmpeq	r2,r2,zero
 10113d4:	1000341e 	bne	r2,zero,10114a8 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 10113d8:	e13ff903 	ldbu	r4,-28(fp)
 10113dc:	e0fff903 	ldbu	r3,-28(fp)
 10113e0:	e0bffc17 	ldw	r2,-16(fp)
 10113e4:	1885883a 	add	r2,r3,r2
 10113e8:	10800204 	addi	r2,r2,8
 10113ec:	108000c3 	ldbu	r2,3(r2)
 10113f0:	1007883a 	mov	r3,r2
 10113f4:	e0bff803 	ldbu	r2,-32(fp)
 10113f8:	0084303a 	nor	r2,zero,r2
 10113fc:	1884703a 	and	r2,r3,r2
 1011400:	1007883a 	mov	r3,r2
 1011404:	e0bffc17 	ldw	r2,-16(fp)
 1011408:	2085883a 	add	r2,r4,r2
 101140c:	10800204 	addi	r2,r2,8
 1011410:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 1011414:	e0fff903 	ldbu	r3,-28(fp)
 1011418:	e0bffc17 	ldw	r2,-16(fp)
 101141c:	1885883a 	add	r2,r3,r2
 1011420:	10800204 	addi	r2,r2,8
 1011424:	108000c3 	ldbu	r2,3(r2)
 1011428:	10803fcc 	andi	r2,r2,255
 101142c:	1004c03a 	cmpne	r2,r2,zero
 1011430:	1000091e 	bne	r2,zero,1011458 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 1011434:	e0bffc17 	ldw	r2,-16(fp)
 1011438:	10800283 	ldbu	r2,10(r2)
 101143c:	1007883a 	mov	r3,r2
 1011440:	e0bff843 	ldbu	r2,-31(fp)
 1011444:	0084303a 	nor	r2,zero,r2
 1011448:	1884703a 	and	r2,r3,r2
 101144c:	1007883a 	mov	r3,r2
 1011450:	e0bffc17 	ldw	r2,-16(fp)
 1011454:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 1011458:	e0bffc17 	ldw	r2,-16(fp)
 101145c:	10c00283 	ldbu	r3,10(r2)
 1011460:	e0bff8c3 	ldbu	r2,-29(fp)
 1011464:	1884b03a 	or	r2,r3,r2
 1011468:	1007883a 	mov	r3,r2
 101146c:	e0bffc17 	ldw	r2,-16(fp)
 1011470:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 1011474:	e13ff983 	ldbu	r4,-26(fp)
 1011478:	e0fff983 	ldbu	r3,-26(fp)
 101147c:	e0bffc17 	ldw	r2,-16(fp)
 1011480:	1885883a 	add	r2,r3,r2
 1011484:	10800204 	addi	r2,r2,8
 1011488:	10c000c3 	ldbu	r3,3(r2)
 101148c:	e0bff883 	ldbu	r2,-30(fp)
 1011490:	1884b03a 	or	r2,r3,r2
 1011494:	1007883a 	mov	r3,r2
 1011498:	e0bffc17 	ldw	r2,-16(fp)
 101149c:	2085883a 	add	r2,r4,r2
 10114a0:	10800204 	addi	r2,r2,8
 10114a4:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 10114a8:	e0bffa17 	ldw	r2,-24(fp)
 10114ac:	10800817 	ldw	r2,32(r2)
 10114b0:	1005003a 	cmpeq	r2,r2,zero
 10114b4:	1000441e 	bne	r2,zero,10115c8 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 10114b8:	e0bffa17 	ldw	r2,-24(fp)
 10114bc:	10800817 	ldw	r2,32(r2)
 10114c0:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 10114c4:	e0bffb17 	ldw	r2,-20(fp)
 10114c8:	10800017 	ldw	r2,0(r2)
 10114cc:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 10114d0:	00003a06 	br	10115bc <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 10114d4:	e13ff903 	ldbu	r4,-28(fp)
 10114d8:	e0fff903 	ldbu	r3,-28(fp)
 10114dc:	e0bffc17 	ldw	r2,-16(fp)
 10114e0:	1885883a 	add	r2,r3,r2
 10114e4:	10800204 	addi	r2,r2,8
 10114e8:	108000c3 	ldbu	r2,3(r2)
 10114ec:	1007883a 	mov	r3,r2
 10114f0:	e0bff803 	ldbu	r2,-32(fp)
 10114f4:	0084303a 	nor	r2,zero,r2
 10114f8:	1884703a 	and	r2,r3,r2
 10114fc:	1007883a 	mov	r3,r2
 1011500:	e0bffc17 	ldw	r2,-16(fp)
 1011504:	2085883a 	add	r2,r4,r2
 1011508:	10800204 	addi	r2,r2,8
 101150c:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 1011510:	e0fff903 	ldbu	r3,-28(fp)
 1011514:	e0bffc17 	ldw	r2,-16(fp)
 1011518:	1885883a 	add	r2,r3,r2
 101151c:	10800204 	addi	r2,r2,8
 1011520:	108000c3 	ldbu	r2,3(r2)
 1011524:	10803fcc 	andi	r2,r2,255
 1011528:	1004c03a 	cmpne	r2,r2,zero
 101152c:	1000091e 	bne	r2,zero,1011554 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 1011530:	e0bffc17 	ldw	r2,-16(fp)
 1011534:	10800283 	ldbu	r2,10(r2)
 1011538:	1007883a 	mov	r3,r2
 101153c:	e0bff843 	ldbu	r2,-31(fp)
 1011540:	0084303a 	nor	r2,zero,r2
 1011544:	1884703a 	and	r2,r3,r2
 1011548:	1007883a 	mov	r3,r2
 101154c:	e0bffc17 	ldw	r2,-16(fp)
 1011550:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 1011554:	e0bffc17 	ldw	r2,-16(fp)
 1011558:	10c00283 	ldbu	r3,10(r2)
 101155c:	e0bff8c3 	ldbu	r2,-29(fp)
 1011560:	1884b03a 	or	r2,r3,r2
 1011564:	1007883a 	mov	r3,r2
 1011568:	e0bffc17 	ldw	r2,-16(fp)
 101156c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 1011570:	e13ff983 	ldbu	r4,-26(fp)
 1011574:	e0fff983 	ldbu	r3,-26(fp)
 1011578:	e0bffc17 	ldw	r2,-16(fp)
 101157c:	1885883a 	add	r2,r3,r2
 1011580:	10800204 	addi	r2,r2,8
 1011584:	10c000c3 	ldbu	r3,3(r2)
 1011588:	e0bff883 	ldbu	r2,-30(fp)
 101158c:	1884b03a 	or	r2,r3,r2
 1011590:	1007883a 	mov	r3,r2
 1011594:	e0bffc17 	ldw	r2,-16(fp)
 1011598:	2085883a 	add	r2,r4,r2
 101159c:	10800204 	addi	r2,r2,8
 10115a0:	10c000c5 	stb	r3,3(r2)
            pevents++;
 10115a4:	e0bffb17 	ldw	r2,-20(fp)
 10115a8:	10800104 	addi	r2,r2,4
 10115ac:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 10115b0:	e0bffb17 	ldw	r2,-20(fp)
 10115b4:	10800017 	ldw	r2,0(r2)
 10115b8:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 10115bc:	e0bffc17 	ldw	r2,-16(fp)
 10115c0:	1004c03a 	cmpne	r2,r2,zero
 10115c4:	103fc31e 	bne	r2,zero,10114d4 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 10115c8:	e0fffa17 	ldw	r3,-24(fp)
 10115cc:	e0bffe03 	ldbu	r2,-8(fp)
 10115d0:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 10115d4:	e0fffa17 	ldw	r3,-24(fp)
 10115d8:	e0bff983 	ldbu	r2,-26(fp)
 10115dc:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 10115e0:	e0fffa17 	ldw	r3,-24(fp)
 10115e4:	e0bff943 	ldbu	r2,-27(fp)
 10115e8:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 10115ec:	e0fffa17 	ldw	r3,-24(fp)
 10115f0:	e0bff8c3 	ldbu	r2,-29(fp)
 10115f4:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 10115f8:	e0fffa17 	ldw	r3,-24(fp)
 10115fc:	e0bff883 	ldbu	r2,-30(fp)
 1011600:	18800d45 	stb	r2,53(r3)
 1011604:	e0bff717 	ldw	r2,-36(fp)
 1011608:	e0bff215 	stw	r2,-56(fp)
 101160c:	e0bff217 	ldw	r2,-56(fp)
 1011610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 1011614:	008040b4 	movhi	r2,258
 1011618:	10a67644 	addi	r2,r2,-26151
 101161c:	10800003 	ldbu	r2,0(r2)
 1011620:	10803fcc 	andi	r2,r2,255
 1011624:	10800058 	cmpnei	r2,r2,1
 1011628:	1000011e 	bne	r2,zero,1011630 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 101162c:	100c8200 	call	100c820 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1011630:	e03fff15 	stw	zero,-4(fp)
 1011634:	e0bfff17 	ldw	r2,-4(fp)
}
 1011638:	e037883a 	mov	sp,fp
 101163c:	dfc00117 	ldw	ra,4(sp)
 1011640:	df000017 	ldw	fp,0(sp)
 1011644:	dec00204 	addi	sp,sp,8
 1011648:	f800283a 	ret

0101164c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 101164c:	deffed04 	addi	sp,sp,-76
 1011650:	dfc01215 	stw	ra,72(sp)
 1011654:	df001115 	stw	fp,68(sp)
 1011658:	df001104 	addi	fp,sp,68
 101165c:	e13ffb15 	stw	r4,-20(fp)
 1011660:	e17ffc15 	stw	r5,-16(fp)
 1011664:	e1bffd15 	stw	r6,-12(fp)
 1011668:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 101166c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1011670:	e0bffe03 	ldbu	r2,-8(fp)
 1011674:	10800570 	cmpltui	r2,r2,21
 1011678:	1000031e 	bne	r2,zero,1011688 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 101167c:	00800a84 	movi	r2,42
 1011680:	e0bfff15 	stw	r2,-4(fp)
 1011684:	00006006 	br	1011808 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011688:	0005303a 	rdctl	r2,status
 101168c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011690:	e0fff717 	ldw	r3,-36(fp)
 1011694:	00bfff84 	movi	r2,-2
 1011698:	1884703a 	and	r2,r3,r2
 101169c:	1001703a 	wrctl	status,r2
  
  return context;
 10116a0:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10116a4:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 10116a8:	008040b4 	movhi	r2,258
 10116ac:	10a68404 	addi	r2,r2,-26096
 10116b0:	10800003 	ldbu	r2,0(r2)
 10116b4:	10803fcc 	andi	r2,r2,255
 10116b8:	1005003a 	cmpeq	r2,r2,zero
 10116bc:	1000071e 	bne	r2,zero,10116dc <OSTaskCreate+0x90>
 10116c0:	e0bff817 	ldw	r2,-32(fp)
 10116c4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10116c8:	e0bff617 	ldw	r2,-40(fp)
 10116cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 10116d0:	00800f04 	movi	r2,60
 10116d4:	e0bfff15 	stw	r2,-4(fp)
 10116d8:	00004b06 	br	1011808 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 10116dc:	e0bffe03 	ldbu	r2,-8(fp)
 10116e0:	00c040b4 	movhi	r3,258
 10116e4:	18cb0b04 	addi	r3,r3,11308
 10116e8:	1085883a 	add	r2,r2,r2
 10116ec:	1085883a 	add	r2,r2,r2
 10116f0:	10c5883a 	add	r2,r2,r3
 10116f4:	10800017 	ldw	r2,0(r2)
 10116f8:	1004c03a 	cmpne	r2,r2,zero
 10116fc:	10003c1e 	bne	r2,zero,10117f0 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 1011700:	e0bffe03 	ldbu	r2,-8(fp)
 1011704:	00c040b4 	movhi	r3,258
 1011708:	18cb0b04 	addi	r3,r3,11308
 101170c:	1085883a 	add	r2,r2,r2
 1011710:	1085883a 	add	r2,r2,r2
 1011714:	10c7883a 	add	r3,r2,r3
 1011718:	00800044 	movi	r2,1
 101171c:	18800015 	stw	r2,0(r3)
 1011720:	e0bff817 	ldw	r2,-32(fp)
 1011724:	e0bff515 	stw	r2,-44(fp)
 1011728:	e0bff517 	ldw	r2,-44(fp)
 101172c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 1011730:	e13ffb17 	ldw	r4,-20(fp)
 1011734:	e17ffc17 	ldw	r5,-16(fp)
 1011738:	e1bffd17 	ldw	r6,-12(fp)
 101173c:	000f883a 	mov	r7,zero
 1011740:	101539c0 	call	101539c <OSTaskStkInit>
 1011744:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 1011748:	e13ffe03 	ldbu	r4,-8(fp)
 101174c:	d8000015 	stw	zero,0(sp)
 1011750:	d8000115 	stw	zero,4(sp)
 1011754:	d8000215 	stw	zero,8(sp)
 1011758:	e17ffa17 	ldw	r5,-24(fp)
 101175c:	000d883a 	mov	r6,zero
 1011760:	000f883a 	mov	r7,zero
 1011764:	100cc280 	call	100cc28 <OS_TCBInit>
 1011768:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 101176c:	e0bff903 	ldbu	r2,-28(fp)
 1011770:	1004c03a 	cmpne	r2,r2,zero
 1011774:	1000081e 	bne	r2,zero,1011798 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 1011778:	008040b4 	movhi	r2,258
 101177c:	10a67644 	addi	r2,r2,-26151
 1011780:	10800003 	ldbu	r2,0(r2)
 1011784:	10803fcc 	andi	r2,r2,255
 1011788:	10800058 	cmpnei	r2,r2,1
 101178c:	1000151e 	bne	r2,zero,10117e4 <OSTaskCreate+0x198>
                OS_Sched();
 1011790:	100c8200 	call	100c820 <OS_Sched>
 1011794:	00001306 	br	10117e4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011798:	0005303a 	rdctl	r2,status
 101179c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10117a0:	e0fff417 	ldw	r3,-48(fp)
 10117a4:	00bfff84 	movi	r2,-2
 10117a8:	1884703a 	and	r2,r3,r2
 10117ac:	1001703a 	wrctl	status,r2
  
  return context;
 10117b0:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 10117b4:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 10117b8:	e0bffe03 	ldbu	r2,-8(fp)
 10117bc:	00c040b4 	movhi	r3,258
 10117c0:	18cb0b04 	addi	r3,r3,11308
 10117c4:	1085883a 	add	r2,r2,r2
 10117c8:	1085883a 	add	r2,r2,r2
 10117cc:	10c5883a 	add	r2,r2,r3
 10117d0:	10000015 	stw	zero,0(r2)
 10117d4:	e0bff817 	ldw	r2,-32(fp)
 10117d8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10117dc:	e0bff317 	ldw	r2,-52(fp)
 10117e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 10117e4:	e0bff903 	ldbu	r2,-28(fp)
 10117e8:	e0bfff15 	stw	r2,-4(fp)
 10117ec:	00000606 	br	1011808 <OSTaskCreate+0x1bc>
 10117f0:	e0bff817 	ldw	r2,-32(fp)
 10117f4:	e0bff215 	stw	r2,-56(fp)
 10117f8:	e0bff217 	ldw	r2,-56(fp)
 10117fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1011800:	00800a04 	movi	r2,40
 1011804:	e0bfff15 	stw	r2,-4(fp)
 1011808:	e0bfff17 	ldw	r2,-4(fp)
}
 101180c:	e037883a 	mov	sp,fp
 1011810:	dfc00117 	ldw	ra,4(sp)
 1011814:	df000017 	ldw	fp,0(sp)
 1011818:	dec00204 	addi	sp,sp,8
 101181c:	f800283a 	ret

01011820 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 1011820:	deffeb04 	addi	sp,sp,-84
 1011824:	dfc01415 	stw	ra,80(sp)
 1011828:	df001315 	stw	fp,76(sp)
 101182c:	df001304 	addi	fp,sp,76
 1011830:	e13ff915 	stw	r4,-28(fp)
 1011834:	e17ffa15 	stw	r5,-24(fp)
 1011838:	e1bffb15 	stw	r6,-20(fp)
 101183c:	e0800217 	ldw	r2,8(fp)
 1011840:	e0c00617 	ldw	r3,24(fp)
 1011844:	e1fffc05 	stb	r7,-16(fp)
 1011848:	e0bffd0d 	sth	r2,-12(fp)
 101184c:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 1011850:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 1011854:	e0bffc03 	ldbu	r2,-16(fp)
 1011858:	10800570 	cmpltui	r2,r2,21
 101185c:	1000031e 	bne	r2,zero,101186c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 1011860:	00800a84 	movi	r2,42
 1011864:	e0bfff15 	stw	r2,-4(fp)
 1011868:	00006706 	br	1011a08 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101186c:	0005303a 	rdctl	r2,status
 1011870:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011874:	e0fff517 	ldw	r3,-44(fp)
 1011878:	00bfff84 	movi	r2,-2
 101187c:	1884703a 	and	r2,r3,r2
 1011880:	1001703a 	wrctl	status,r2
  
  return context;
 1011884:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1011888:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 101188c:	008040b4 	movhi	r2,258
 1011890:	10a68404 	addi	r2,r2,-26096
 1011894:	10800003 	ldbu	r2,0(r2)
 1011898:	10803fcc 	andi	r2,r2,255
 101189c:	1005003a 	cmpeq	r2,r2,zero
 10118a0:	1000071e 	bne	r2,zero,10118c0 <OSTaskCreateExt+0xa0>
 10118a4:	e0bff617 	ldw	r2,-40(fp)
 10118a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10118ac:	e0bff417 	ldw	r2,-48(fp)
 10118b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 10118b4:	00800f04 	movi	r2,60
 10118b8:	e0bfff15 	stw	r2,-4(fp)
 10118bc:	00005206 	br	1011a08 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 10118c0:	e0bffc03 	ldbu	r2,-16(fp)
 10118c4:	00c040b4 	movhi	r3,258
 10118c8:	18cb0b04 	addi	r3,r3,11308
 10118cc:	1085883a 	add	r2,r2,r2
 10118d0:	1085883a 	add	r2,r2,r2
 10118d4:	10c5883a 	add	r2,r2,r3
 10118d8:	10800017 	ldw	r2,0(r2)
 10118dc:	1004c03a 	cmpne	r2,r2,zero
 10118e0:	1000431e 	bne	r2,zero,10119f0 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 10118e4:	e0bffc03 	ldbu	r2,-16(fp)
 10118e8:	00c040b4 	movhi	r3,258
 10118ec:	18cb0b04 	addi	r3,r3,11308
 10118f0:	1085883a 	add	r2,r2,r2
 10118f4:	1085883a 	add	r2,r2,r2
 10118f8:	10c7883a 	add	r3,r2,r3
 10118fc:	00800044 	movi	r2,1
 1011900:	18800015 	stw	r2,0(r3)
 1011904:	e0bff617 	ldw	r2,-40(fp)
 1011908:	e0bff315 	stw	r2,-52(fp)
 101190c:	e0bff317 	ldw	r2,-52(fp)
 1011910:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 1011914:	e1bffe0b 	ldhu	r6,-8(fp)
 1011918:	e1000317 	ldw	r4,12(fp)
 101191c:	e1400417 	ldw	r5,16(fp)
 1011920:	1012a9c0 	call	1012a9c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 1011924:	e1fffe0b 	ldhu	r7,-8(fp)
 1011928:	e13ff917 	ldw	r4,-28(fp)
 101192c:	e17ffa17 	ldw	r5,-24(fp)
 1011930:	e1bffb17 	ldw	r6,-20(fp)
 1011934:	101539c0 	call	101539c <OSTaskStkInit>
 1011938:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 101193c:	e13ffc03 	ldbu	r4,-16(fp)
 1011940:	e1fffd0b 	ldhu	r7,-12(fp)
 1011944:	e0fffe0b 	ldhu	r3,-8(fp)
 1011948:	e0800417 	ldw	r2,16(fp)
 101194c:	d8800015 	stw	r2,0(sp)
 1011950:	e0800517 	ldw	r2,20(fp)
 1011954:	d8800115 	stw	r2,4(sp)
 1011958:	d8c00215 	stw	r3,8(sp)
 101195c:	e17ff817 	ldw	r5,-32(fp)
 1011960:	e1800317 	ldw	r6,12(fp)
 1011964:	100cc280 	call	100cc28 <OS_TCBInit>
 1011968:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 101196c:	e0bff703 	ldbu	r2,-36(fp)
 1011970:	1004c03a 	cmpne	r2,r2,zero
 1011974:	1000081e 	bne	r2,zero,1011998 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 1011978:	008040b4 	movhi	r2,258
 101197c:	10a67644 	addi	r2,r2,-26151
 1011980:	10800003 	ldbu	r2,0(r2)
 1011984:	10803fcc 	andi	r2,r2,255
 1011988:	10800058 	cmpnei	r2,r2,1
 101198c:	1000151e 	bne	r2,zero,10119e4 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 1011990:	100c8200 	call	100c820 <OS_Sched>
 1011994:	00001306 	br	10119e4 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011998:	0005303a 	rdctl	r2,status
 101199c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10119a0:	e0fff217 	ldw	r3,-56(fp)
 10119a4:	00bfff84 	movi	r2,-2
 10119a8:	1884703a 	and	r2,r3,r2
 10119ac:	1001703a 	wrctl	status,r2
  
  return context;
 10119b0:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 10119b4:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 10119b8:	e0bffc03 	ldbu	r2,-16(fp)
 10119bc:	00c040b4 	movhi	r3,258
 10119c0:	18cb0b04 	addi	r3,r3,11308
 10119c4:	1085883a 	add	r2,r2,r2
 10119c8:	1085883a 	add	r2,r2,r2
 10119cc:	10c5883a 	add	r2,r2,r3
 10119d0:	10000015 	stw	zero,0(r2)
 10119d4:	e0bff617 	ldw	r2,-40(fp)
 10119d8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10119dc:	e0bff117 	ldw	r2,-60(fp)
 10119e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 10119e4:	e0bff703 	ldbu	r2,-36(fp)
 10119e8:	e0bfff15 	stw	r2,-4(fp)
 10119ec:	00000606 	br	1011a08 <OSTaskCreateExt+0x1e8>
 10119f0:	e0bff617 	ldw	r2,-40(fp)
 10119f4:	e0bff015 	stw	r2,-64(fp)
 10119f8:	e0bff017 	ldw	r2,-64(fp)
 10119fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 1011a00:	00800a04 	movi	r2,40
 1011a04:	e0bfff15 	stw	r2,-4(fp)
 1011a08:	e0bfff17 	ldw	r2,-4(fp)
}
 1011a0c:	e037883a 	mov	sp,fp
 1011a10:	dfc00117 	ldw	ra,4(sp)
 1011a14:	df000017 	ldw	fp,0(sp)
 1011a18:	dec00204 	addi	sp,sp,8
 1011a1c:	f800283a 	ret

01011a20 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 1011a20:	defff304 	addi	sp,sp,-52
 1011a24:	dfc00c15 	stw	ra,48(sp)
 1011a28:	df000b15 	stw	fp,44(sp)
 1011a2c:	df000b04 	addi	fp,sp,44
 1011a30:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 1011a34:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 1011a38:	008040b4 	movhi	r2,258
 1011a3c:	10a68404 	addi	r2,r2,-26096
 1011a40:	10800003 	ldbu	r2,0(r2)
 1011a44:	10803fcc 	andi	r2,r2,255
 1011a48:	1005003a 	cmpeq	r2,r2,zero
 1011a4c:	1000031e 	bne	r2,zero,1011a5c <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 1011a50:	00801004 	movi	r2,64
 1011a54:	e0bfff15 	stw	r2,-4(fp)
 1011a58:	0000ee06 	br	1011e14 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 1011a5c:	e0bffe03 	ldbu	r2,-8(fp)
 1011a60:	10800518 	cmpnei	r2,r2,20
 1011a64:	1000031e 	bne	r2,zero,1011a74 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 1011a68:	00800f84 	movi	r2,62
 1011a6c:	e0bfff15 	stw	r2,-4(fp)
 1011a70:	0000e806 	br	1011e14 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 1011a74:	e0bffe03 	ldbu	r2,-8(fp)
 1011a78:	10800530 	cmpltui	r2,r2,20
 1011a7c:	1000061e 	bne	r2,zero,1011a98 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 1011a80:	e0bffe03 	ldbu	r2,-8(fp)
 1011a84:	10803fe0 	cmpeqi	r2,r2,255
 1011a88:	1000031e 	bne	r2,zero,1011a98 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 1011a8c:	00800a84 	movi	r2,42
 1011a90:	e0bfff15 	stw	r2,-4(fp)
 1011a94:	0000df06 	br	1011e14 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011a98:	0005303a 	rdctl	r2,status
 1011a9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011aa0:	e0fffa17 	ldw	r3,-24(fp)
 1011aa4:	00bfff84 	movi	r2,-2
 1011aa8:	1884703a 	and	r2,r3,r2
 1011aac:	1001703a 	wrctl	status,r2
  
  return context;
 1011ab0:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 1011ab4:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 1011ab8:	e0bffe03 	ldbu	r2,-8(fp)
 1011abc:	10803fd8 	cmpnei	r2,r2,255
 1011ac0:	1000051e 	bne	r2,zero,1011ad8 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 1011ac4:	008040b4 	movhi	r2,258
 1011ac8:	10a68504 	addi	r2,r2,-26092
 1011acc:	10800017 	ldw	r2,0(r2)
 1011ad0:	10800c83 	ldbu	r2,50(r2)
 1011ad4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1011ad8:	e0bffe03 	ldbu	r2,-8(fp)
 1011adc:	00c040b4 	movhi	r3,258
 1011ae0:	18cb0b04 	addi	r3,r3,11308
 1011ae4:	1085883a 	add	r2,r2,r2
 1011ae8:	1085883a 	add	r2,r2,r2
 1011aec:	10c5883a 	add	r2,r2,r3
 1011af0:	10800017 	ldw	r2,0(r2)
 1011af4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 1011af8:	e0bffc17 	ldw	r2,-16(fp)
 1011afc:	1004c03a 	cmpne	r2,r2,zero
 1011b00:	1000071e 	bne	r2,zero,1011b20 <OSTaskDel+0x100>
 1011b04:	e0bffb17 	ldw	r2,-20(fp)
 1011b08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011b0c:	e0bff917 	ldw	r2,-28(fp)
 1011b10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1011b14:	008010c4 	movi	r2,67
 1011b18:	e0bfff15 	stw	r2,-4(fp)
 1011b1c:	0000bd06 	br	1011e14 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 1011b20:	e0bffc17 	ldw	r2,-16(fp)
 1011b24:	10800058 	cmpnei	r2,r2,1
 1011b28:	1000071e 	bne	r2,zero,1011b48 <OSTaskDel+0x128>
 1011b2c:	e0bffb17 	ldw	r2,-20(fp)
 1011b30:	e0bff815 	stw	r2,-32(fp)
 1011b34:	e0bff817 	ldw	r2,-32(fp)
 1011b38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1011b3c:	00800f44 	movi	r2,61
 1011b40:	e0bfff15 	stw	r2,-4(fp)
 1011b44:	0000b306 	br	1011e14 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 1011b48:	e0bffc17 	ldw	r2,-16(fp)
 1011b4c:	10800d03 	ldbu	r2,52(r2)
 1011b50:	11003fcc 	andi	r4,r2,255
 1011b54:	e0bffc17 	ldw	r2,-16(fp)
 1011b58:	10800d03 	ldbu	r2,52(r2)
 1011b5c:	10c03fcc 	andi	r3,r2,255
 1011b60:	008040b4 	movhi	r2,258
 1011b64:	10a68244 	addi	r2,r2,-26103
 1011b68:	10c5883a 	add	r2,r2,r3
 1011b6c:	10800003 	ldbu	r2,0(r2)
 1011b70:	1007883a 	mov	r3,r2
 1011b74:	e0bffc17 	ldw	r2,-16(fp)
 1011b78:	10800d43 	ldbu	r2,53(r2)
 1011b7c:	0084303a 	nor	r2,zero,r2
 1011b80:	1884703a 	and	r2,r3,r2
 1011b84:	1007883a 	mov	r3,r2
 1011b88:	008040b4 	movhi	r2,258
 1011b8c:	10a68244 	addi	r2,r2,-26103
 1011b90:	1105883a 	add	r2,r2,r4
 1011b94:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 1011b98:	e0bffc17 	ldw	r2,-16(fp)
 1011b9c:	10800d03 	ldbu	r2,52(r2)
 1011ba0:	10c03fcc 	andi	r3,r2,255
 1011ba4:	008040b4 	movhi	r2,258
 1011ba8:	10a68244 	addi	r2,r2,-26103
 1011bac:	10c5883a 	add	r2,r2,r3
 1011bb0:	10800003 	ldbu	r2,0(r2)
 1011bb4:	10803fcc 	andi	r2,r2,255
 1011bb8:	1004c03a 	cmpne	r2,r2,zero
 1011bbc:	10000c1e 	bne	r2,zero,1011bf0 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 1011bc0:	e0bffc17 	ldw	r2,-16(fp)
 1011bc4:	10800d83 	ldbu	r2,54(r2)
 1011bc8:	0084303a 	nor	r2,zero,r2
 1011bcc:	1007883a 	mov	r3,r2
 1011bd0:	008040b4 	movhi	r2,258
 1011bd4:	10a68204 	addi	r2,r2,-26104
 1011bd8:	10800003 	ldbu	r2,0(r2)
 1011bdc:	1884703a 	and	r2,r3,r2
 1011be0:	1007883a 	mov	r3,r2
 1011be4:	008040b4 	movhi	r2,258
 1011be8:	10a68204 	addi	r2,r2,-26104
 1011bec:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 1011bf0:	e0bffc17 	ldw	r2,-16(fp)
 1011bf4:	10800717 	ldw	r2,28(r2)
 1011bf8:	1005003a 	cmpeq	r2,r2,zero
 1011bfc:	1000041e 	bne	r2,zero,1011c10 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 1011c00:	e0bffc17 	ldw	r2,-16(fp)
 1011c04:	11400717 	ldw	r5,28(r2)
 1011c08:	e13ffc17 	ldw	r4,-16(fp)
 1011c0c:	100c1d80 	call	100c1d8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 1011c10:	e0bffc17 	ldw	r2,-16(fp)
 1011c14:	10800817 	ldw	r2,32(r2)
 1011c18:	1005003a 	cmpeq	r2,r2,zero
 1011c1c:	1000041e 	bne	r2,zero,1011c30 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 1011c20:	e0bffc17 	ldw	r2,-16(fp)
 1011c24:	11400817 	ldw	r5,32(r2)
 1011c28:	e13ffc17 	ldw	r4,-16(fp)
 1011c2c:	100c2900 	call	100c290 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 1011c30:	e0bffc17 	ldw	r2,-16(fp)
 1011c34:	10800a17 	ldw	r2,40(r2)
 1011c38:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 1011c3c:	e0bffd17 	ldw	r2,-12(fp)
 1011c40:	1005003a 	cmpeq	r2,r2,zero
 1011c44:	1000021e 	bne	r2,zero,1011c50 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 1011c48:	e13ffd17 	ldw	r4,-12(fp)
 1011c4c:	100e9240 	call	100e924 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 1011c50:	e0bffc17 	ldw	r2,-16(fp)
 1011c54:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 1011c58:	e0bffc17 	ldw	r2,-16(fp)
 1011c5c:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 1011c60:	e0bffc17 	ldw	r2,-16(fp)
 1011c64:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 1011c68:	008040b4 	movhi	r2,258
 1011c6c:	10a67604 	addi	r2,r2,-26152
 1011c70:	10800003 	ldbu	r2,0(r2)
 1011c74:	10803fcc 	andi	r2,r2,255
 1011c78:	10803fe0 	cmpeqi	r2,r2,255
 1011c7c:	1000081e 	bne	r2,zero,1011ca0 <OSTaskDel+0x280>
        OSLockNesting++;
 1011c80:	008040b4 	movhi	r2,258
 1011c84:	10a67604 	addi	r2,r2,-26152
 1011c88:	10800003 	ldbu	r2,0(r2)
 1011c8c:	10800044 	addi	r2,r2,1
 1011c90:	1007883a 	mov	r3,r2
 1011c94:	008040b4 	movhi	r2,258
 1011c98:	10a67604 	addi	r2,r2,-26152
 1011c9c:	10c00005 	stb	r3,0(r2)
 1011ca0:	e0bffb17 	ldw	r2,-20(fp)
 1011ca4:	e0bff715 	stw	r2,-36(fp)
 1011ca8:	e0bff717 	ldw	r2,-36(fp)
 1011cac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 1011cb0:	100bdc40 	call	100bdc4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011cb4:	0005303a 	rdctl	r2,status
 1011cb8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011cbc:	e0fff617 	ldw	r3,-40(fp)
 1011cc0:	00bfff84 	movi	r2,-2
 1011cc4:	1884703a 	and	r2,r3,r2
 1011cc8:	1001703a 	wrctl	status,r2
  
  return context;
 1011ccc:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 1011cd0:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 1011cd4:	008040b4 	movhi	r2,258
 1011cd8:	10a67604 	addi	r2,r2,-26152
 1011cdc:	10800003 	ldbu	r2,0(r2)
 1011ce0:	10803fcc 	andi	r2,r2,255
 1011ce4:	1005003a 	cmpeq	r2,r2,zero
 1011ce8:	1000081e 	bne	r2,zero,1011d0c <OSTaskDel+0x2ec>
        OSLockNesting--;
 1011cec:	008040b4 	movhi	r2,258
 1011cf0:	10a67604 	addi	r2,r2,-26152
 1011cf4:	10800003 	ldbu	r2,0(r2)
 1011cf8:	10bfffc4 	addi	r2,r2,-1
 1011cfc:	1007883a 	mov	r3,r2
 1011d00:	008040b4 	movhi	r2,258
 1011d04:	10a67604 	addi	r2,r2,-26152
 1011d08:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 1011d0c:	e13ffc17 	ldw	r4,-16(fp)
 1011d10:	10156cc0 	call	10156cc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 1011d14:	008040b4 	movhi	r2,258
 1011d18:	10a67e44 	addi	r2,r2,-26119
 1011d1c:	10800003 	ldbu	r2,0(r2)
 1011d20:	10bfffc4 	addi	r2,r2,-1
 1011d24:	1007883a 	mov	r3,r2
 1011d28:	008040b4 	movhi	r2,258
 1011d2c:	10a67e44 	addi	r2,r2,-26119
 1011d30:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 1011d34:	e0bffe03 	ldbu	r2,-8(fp)
 1011d38:	00c040b4 	movhi	r3,258
 1011d3c:	18cb0b04 	addi	r3,r3,11308
 1011d40:	1085883a 	add	r2,r2,r2
 1011d44:	1085883a 	add	r2,r2,r2
 1011d48:	10c5883a 	add	r2,r2,r3
 1011d4c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 1011d50:	e0bffc17 	ldw	r2,-16(fp)
 1011d54:	10800617 	ldw	r2,24(r2)
 1011d58:	1004c03a 	cmpne	r2,r2,zero
 1011d5c:	1000091e 	bne	r2,zero,1011d84 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 1011d60:	e0bffc17 	ldw	r2,-16(fp)
 1011d64:	10800517 	ldw	r2,20(r2)
 1011d68:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 1011d6c:	e0bffc17 	ldw	r2,-16(fp)
 1011d70:	10c00517 	ldw	r3,20(r2)
 1011d74:	008040b4 	movhi	r2,258
 1011d78:	10a67904 	addi	r2,r2,-26140
 1011d7c:	10c00015 	stw	r3,0(r2)
 1011d80:	00000a06 	br	1011dac <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 1011d84:	e0bffc17 	ldw	r2,-16(fp)
 1011d88:	10c00617 	ldw	r3,24(r2)
 1011d8c:	e0bffc17 	ldw	r2,-16(fp)
 1011d90:	10800517 	ldw	r2,20(r2)
 1011d94:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 1011d98:	e0bffc17 	ldw	r2,-16(fp)
 1011d9c:	10c00517 	ldw	r3,20(r2)
 1011da0:	e0bffc17 	ldw	r2,-16(fp)
 1011da4:	10800617 	ldw	r2,24(r2)
 1011da8:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 1011dac:	008040b4 	movhi	r2,258
 1011db0:	10a67d04 	addi	r2,r2,-26124
 1011db4:	10c00017 	ldw	r3,0(r2)
 1011db8:	e0bffc17 	ldw	r2,-16(fp)
 1011dbc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 1011dc0:	00c040b4 	movhi	r3,258
 1011dc4:	18e67d04 	addi	r3,r3,-26124
 1011dc8:	e0bffc17 	ldw	r2,-16(fp)
 1011dcc:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 1011dd0:	e0fffc17 	ldw	r3,-16(fp)
 1011dd4:	00800fc4 	movi	r2,63
 1011dd8:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 1011ddc:	e0bffc17 	ldw	r2,-16(fp)
 1011de0:	10001345 	stb	zero,77(r2)
 1011de4:	e0bffb17 	ldw	r2,-20(fp)
 1011de8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011dec:	e0bff517 	ldw	r2,-44(fp)
 1011df0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 1011df4:	008040b4 	movhi	r2,258
 1011df8:	10a67644 	addi	r2,r2,-26151
 1011dfc:	10800003 	ldbu	r2,0(r2)
 1011e00:	10803fcc 	andi	r2,r2,255
 1011e04:	10800058 	cmpnei	r2,r2,1
 1011e08:	1000011e 	bne	r2,zero,1011e10 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 1011e0c:	100c8200 	call	100c820 <OS_Sched>
    }
    return (OS_ERR_NONE);
 1011e10:	e03fff15 	stw	zero,-4(fp)
 1011e14:	e0bfff17 	ldw	r2,-4(fp)
}
 1011e18:	e037883a 	mov	sp,fp
 1011e1c:	dfc00117 	ldw	ra,4(sp)
 1011e20:	df000017 	ldw	fp,0(sp)
 1011e24:	dec00204 	addi	sp,sp,8
 1011e28:	f800283a 	ret

01011e2c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 1011e2c:	defff404 	addi	sp,sp,-48
 1011e30:	df000b15 	stw	fp,44(sp)
 1011e34:	df000b04 	addi	fp,sp,44
 1011e38:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1011e3c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 1011e40:	e0bffe03 	ldbu	r2,-8(fp)
 1011e44:	10800518 	cmpnei	r2,r2,20
 1011e48:	1000031e 	bne	r2,zero,1011e58 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 1011e4c:	00800f84 	movi	r2,62
 1011e50:	e0bfff15 	stw	r2,-4(fp)
 1011e54:	00004c06 	br	1011f88 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 1011e58:	e0bffe03 	ldbu	r2,-8(fp)
 1011e5c:	10800530 	cmpltui	r2,r2,20
 1011e60:	1000061e 	bne	r2,zero,1011e7c <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 1011e64:	e0bffe03 	ldbu	r2,-8(fp)
 1011e68:	10803fe0 	cmpeqi	r2,r2,255
 1011e6c:	1000031e 	bne	r2,zero,1011e7c <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 1011e70:	00800a84 	movi	r2,42
 1011e74:	e0bfff15 	stw	r2,-4(fp)
 1011e78:	00004306 	br	1011f88 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 1011e7c:	e0bffe03 	ldbu	r2,-8(fp)
 1011e80:	10803fd8 	cmpnei	r2,r2,255
 1011e84:	1000141e 	bne	r2,zero,1011ed8 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011e88:	0005303a 	rdctl	r2,status
 1011e8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011e90:	e0fffa17 	ldw	r3,-24(fp)
 1011e94:	00bfff84 	movi	r2,-2
 1011e98:	1884703a 	and	r2,r3,r2
 1011e9c:	1001703a 	wrctl	status,r2
  
  return context;
 1011ea0:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 1011ea4:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 1011ea8:	008040b4 	movhi	r2,258
 1011eac:	10a68504 	addi	r2,r2,-26092
 1011eb0:	10800017 	ldw	r2,0(r2)
 1011eb4:	10800dc3 	ldbu	r2,55(r2)
 1011eb8:	e0bffd05 	stb	r2,-12(fp)
 1011ebc:	e0bffb17 	ldw	r2,-20(fp)
 1011ec0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011ec4:	e0bff917 	ldw	r2,-28(fp)
 1011ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 1011ecc:	e0bffd03 	ldbu	r2,-12(fp)
 1011ed0:	e0bfff15 	stw	r2,-4(fp)
 1011ed4:	00002c06 	br	1011f88 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1011ed8:	0005303a 	rdctl	r2,status
 1011edc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011ee0:	e0fff817 	ldw	r3,-32(fp)
 1011ee4:	00bfff84 	movi	r2,-2
 1011ee8:	1884703a 	and	r2,r3,r2
 1011eec:	1001703a 	wrctl	status,r2
  
  return context;
 1011ef0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1011ef4:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 1011ef8:	e0bffe03 	ldbu	r2,-8(fp)
 1011efc:	00c040b4 	movhi	r3,258
 1011f00:	18cb0b04 	addi	r3,r3,11308
 1011f04:	1085883a 	add	r2,r2,r2
 1011f08:	1085883a 	add	r2,r2,r2
 1011f0c:	10c5883a 	add	r2,r2,r3
 1011f10:	10800017 	ldw	r2,0(r2)
 1011f14:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 1011f18:	e0bffc17 	ldw	r2,-16(fp)
 1011f1c:	1004c03a 	cmpne	r2,r2,zero
 1011f20:	1000071e 	bne	r2,zero,1011f40 <OSTaskDelReq+0x114>
 1011f24:	e0bffb17 	ldw	r2,-20(fp)
 1011f28:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011f2c:	e0bff717 	ldw	r2,-36(fp)
 1011f30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 1011f34:	008010c4 	movi	r2,67
 1011f38:	e0bfff15 	stw	r2,-4(fp)
 1011f3c:	00001206 	br	1011f88 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 1011f40:	e0bffc17 	ldw	r2,-16(fp)
 1011f44:	10800058 	cmpnei	r2,r2,1
 1011f48:	1000071e 	bne	r2,zero,1011f68 <OSTaskDelReq+0x13c>
 1011f4c:	e0bffb17 	ldw	r2,-20(fp)
 1011f50:	e0bff615 	stw	r2,-40(fp)
 1011f54:	e0bff617 	ldw	r2,-40(fp)
 1011f58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 1011f5c:	00800f44 	movi	r2,61
 1011f60:	e0bfff15 	stw	r2,-4(fp)
 1011f64:	00000806 	br	1011f88 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 1011f68:	e0fffc17 	ldw	r3,-16(fp)
 1011f6c:	00800fc4 	movi	r2,63
 1011f70:	18800dc5 	stb	r2,55(r3)
 1011f74:	e0bffb17 	ldw	r2,-20(fp)
 1011f78:	e0bff515 	stw	r2,-44(fp)
 1011f7c:	e0bff517 	ldw	r2,-44(fp)
 1011f80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1011f84:	e03fff15 	stw	zero,-4(fp)
 1011f88:	e0bfff17 	ldw	r2,-4(fp)
}
 1011f8c:	e037883a 	mov	sp,fp
 1011f90:	df000017 	ldw	fp,0(sp)
 1011f94:	dec00104 	addi	sp,sp,4
 1011f98:	f800283a 	ret

01011f9c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 1011f9c:	defff304 	addi	sp,sp,-52
 1011fa0:	dfc00c15 	stw	ra,48(sp)
 1011fa4:	df000b15 	stw	fp,44(sp)
 1011fa8:	df000b04 	addi	fp,sp,44
 1011fac:	e17ffd15 	stw	r5,-12(fp)
 1011fb0:	e1bffe15 	stw	r6,-8(fp)
 1011fb4:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 1011fb8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 1011fbc:	e0bffe17 	ldw	r2,-8(fp)
 1011fc0:	1004c03a 	cmpne	r2,r2,zero
 1011fc4:	1000021e 	bne	r2,zero,1011fd0 <OSTaskNameGet+0x34>
        return (0);
 1011fc8:	e03fff15 	stw	zero,-4(fp)
 1011fcc:	00005b06 	br	101213c <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 1011fd0:	e0bffc03 	ldbu	r2,-16(fp)
 1011fd4:	10800570 	cmpltui	r2,r2,21
 1011fd8:	1000081e 	bne	r2,zero,1011ffc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 1011fdc:	e0bffc03 	ldbu	r2,-16(fp)
 1011fe0:	10803fe0 	cmpeqi	r2,r2,255
 1011fe4:	1000051e 	bne	r2,zero,1011ffc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 1011fe8:	e0fffe17 	ldw	r3,-8(fp)
 1011fec:	00800a84 	movi	r2,42
 1011ff0:	18800005 	stb	r2,0(r3)
            return (0);
 1011ff4:	e03fff15 	stw	zero,-4(fp)
 1011ff8:	00005006 	br	101213c <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 1011ffc:	e0bffd17 	ldw	r2,-12(fp)
 1012000:	1004c03a 	cmpne	r2,r2,zero
 1012004:	1000051e 	bne	r2,zero,101201c <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 1012008:	e0fffe17 	ldw	r3,-8(fp)
 101200c:	00800304 	movi	r2,12
 1012010:	18800005 	stb	r2,0(r3)
        return (0);
 1012014:	e03fff15 	stw	zero,-4(fp)
 1012018:	00004806 	br	101213c <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 101201c:	008040b4 	movhi	r2,258
 1012020:	10a68404 	addi	r2,r2,-26096
 1012024:	10800003 	ldbu	r2,0(r2)
 1012028:	10803fcc 	andi	r2,r2,255
 101202c:	1005003a 	cmpeq	r2,r2,zero
 1012030:	1000051e 	bne	r2,zero,1012048 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 1012034:	e0fffe17 	ldw	r3,-8(fp)
 1012038:	00800444 	movi	r2,17
 101203c:	18800005 	stb	r2,0(r3)
        return (0);
 1012040:	e03fff15 	stw	zero,-4(fp)
 1012044:	00003d06 	br	101213c <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012048:	0005303a 	rdctl	r2,status
 101204c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012050:	e0fff817 	ldw	r3,-32(fp)
 1012054:	00bfff84 	movi	r2,-2
 1012058:	1884703a 	and	r2,r3,r2
 101205c:	1001703a 	wrctl	status,r2
  
  return context;
 1012060:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 1012064:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 1012068:	e0bffc03 	ldbu	r2,-16(fp)
 101206c:	10803fd8 	cmpnei	r2,r2,255
 1012070:	1000051e 	bne	r2,zero,1012088 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 1012074:	008040b4 	movhi	r2,258
 1012078:	10a68504 	addi	r2,r2,-26092
 101207c:	10800017 	ldw	r2,0(r2)
 1012080:	10800c83 	ldbu	r2,50(r2)
 1012084:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 1012088:	e0bffc03 	ldbu	r2,-16(fp)
 101208c:	00c040b4 	movhi	r3,258
 1012090:	18cb0b04 	addi	r3,r3,11308
 1012094:	1085883a 	add	r2,r2,r2
 1012098:	1085883a 	add	r2,r2,r2
 101209c:	10c5883a 	add	r2,r2,r3
 10120a0:	10800017 	ldw	r2,0(r2)
 10120a4:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 10120a8:	e0bffb17 	ldw	r2,-20(fp)
 10120ac:	1004c03a 	cmpne	r2,r2,zero
 10120b0:	1000091e 	bne	r2,zero,10120d8 <OSTaskNameGet+0x13c>
 10120b4:	e0bff917 	ldw	r2,-28(fp)
 10120b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10120bc:	e0bff717 	ldw	r2,-36(fp)
 10120c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10120c4:	e0fffe17 	ldw	r3,-8(fp)
 10120c8:	008010c4 	movi	r2,67
 10120cc:	18800005 	stb	r2,0(r3)
        return (0);
 10120d0:	e03fff15 	stw	zero,-4(fp)
 10120d4:	00001906 	br	101213c <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 10120d8:	e0bffb17 	ldw	r2,-20(fp)
 10120dc:	10800058 	cmpnei	r2,r2,1
 10120e0:	1000091e 	bne	r2,zero,1012108 <OSTaskNameGet+0x16c>
 10120e4:	e0bff917 	ldw	r2,-28(fp)
 10120e8:	e0bff615 	stw	r2,-40(fp)
 10120ec:	e0bff617 	ldw	r2,-40(fp)
 10120f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 10120f4:	e0fffe17 	ldw	r3,-8(fp)
 10120f8:	008010c4 	movi	r2,67
 10120fc:	18800005 	stb	r2,0(r3)
        return (0);
 1012100:	e03fff15 	stw	zero,-4(fp)
 1012104:	00000d06 	br	101213c <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 1012108:	e0bffb17 	ldw	r2,-20(fp)
 101210c:	11401304 	addi	r5,r2,76
 1012110:	e13ffd17 	ldw	r4,-12(fp)
 1012114:	100c9640 	call	100c964 <OS_StrCopy>
 1012118:	e0bffa05 	stb	r2,-24(fp)
 101211c:	e0bff917 	ldw	r2,-28(fp)
 1012120:	e0bff515 	stw	r2,-44(fp)
 1012124:	e0bff517 	ldw	r2,-44(fp)
 1012128:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 101212c:	e0bffe17 	ldw	r2,-8(fp)
 1012130:	10000005 	stb	zero,0(r2)
    return (len);
 1012134:	e0bffa03 	ldbu	r2,-24(fp)
 1012138:	e0bfff15 	stw	r2,-4(fp)
 101213c:	e0bfff17 	ldw	r2,-4(fp)
}
 1012140:	e037883a 	mov	sp,fp
 1012144:	dfc00117 	ldw	ra,4(sp)
 1012148:	df000017 	ldw	fp,0(sp)
 101214c:	dec00204 	addi	sp,sp,8
 1012150:	f800283a 	ret

01012154 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 1012154:	defff304 	addi	sp,sp,-52
 1012158:	dfc00c15 	stw	ra,48(sp)
 101215c:	df000b15 	stw	fp,44(sp)
 1012160:	df000b04 	addi	fp,sp,44
 1012164:	e17ffe15 	stw	r5,-8(fp)
 1012168:	e1bfff15 	stw	r6,-4(fp)
 101216c:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 1012170:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 1012174:	e0bfff17 	ldw	r2,-4(fp)
 1012178:	1005003a 	cmpeq	r2,r2,zero
 101217c:	1000611e 	bne	r2,zero,1012304 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 1012180:	e0bffd03 	ldbu	r2,-12(fp)
 1012184:	10800570 	cmpltui	r2,r2,21
 1012188:	1000071e 	bne	r2,zero,10121a8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 101218c:	e0bffd03 	ldbu	r2,-12(fp)
 1012190:	10803fe0 	cmpeqi	r2,r2,255
 1012194:	1000041e 	bne	r2,zero,10121a8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 1012198:	e0ffff17 	ldw	r3,-4(fp)
 101219c:	00800a84 	movi	r2,42
 10121a0:	18800005 	stb	r2,0(r3)
            return;
 10121a4:	00005706 	br	1012304 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 10121a8:	e0bffe17 	ldw	r2,-8(fp)
 10121ac:	1004c03a 	cmpne	r2,r2,zero
 10121b0:	1000041e 	bne	r2,zero,10121c4 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 10121b4:	e0ffff17 	ldw	r3,-4(fp)
 10121b8:	00800304 	movi	r2,12
 10121bc:	18800005 	stb	r2,0(r3)
        return;
 10121c0:	00005006 	br	1012304 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 10121c4:	008040b4 	movhi	r2,258
 10121c8:	10a68404 	addi	r2,r2,-26096
 10121cc:	10800003 	ldbu	r2,0(r2)
 10121d0:	10803fcc 	andi	r2,r2,255
 10121d4:	1005003a 	cmpeq	r2,r2,zero
 10121d8:	1000041e 	bne	r2,zero,10121ec <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 10121dc:	e0ffff17 	ldw	r3,-4(fp)
 10121e0:	00800484 	movi	r2,18
 10121e4:	18800005 	stb	r2,0(r3)
        return;
 10121e8:	00004606 	br	1012304 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10121ec:	0005303a 	rdctl	r2,status
 10121f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10121f4:	e0fff917 	ldw	r3,-28(fp)
 10121f8:	00bfff84 	movi	r2,-2
 10121fc:	1884703a 	and	r2,r3,r2
 1012200:	1001703a 	wrctl	status,r2
  
  return context;
 1012204:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 1012208:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 101220c:	e0bffd03 	ldbu	r2,-12(fp)
 1012210:	10803fd8 	cmpnei	r2,r2,255
 1012214:	1000051e 	bne	r2,zero,101222c <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 1012218:	008040b4 	movhi	r2,258
 101221c:	10a68504 	addi	r2,r2,-26092
 1012220:	10800017 	ldw	r2,0(r2)
 1012224:	10800c83 	ldbu	r2,50(r2)
 1012228:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 101222c:	e0bffd03 	ldbu	r2,-12(fp)
 1012230:	00c040b4 	movhi	r3,258
 1012234:	18cb0b04 	addi	r3,r3,11308
 1012238:	1085883a 	add	r2,r2,r2
 101223c:	1085883a 	add	r2,r2,r2
 1012240:	10c5883a 	add	r2,r2,r3
 1012244:	10800017 	ldw	r2,0(r2)
 1012248:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 101224c:	e0bffb17 	ldw	r2,-20(fp)
 1012250:	1004c03a 	cmpne	r2,r2,zero
 1012254:	1000081e 	bne	r2,zero,1012278 <OSTaskNameSet+0x124>
 1012258:	e0bffa17 	ldw	r2,-24(fp)
 101225c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012260:	e0bff817 	ldw	r2,-32(fp)
 1012264:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1012268:	e0ffff17 	ldw	r3,-4(fp)
 101226c:	008010c4 	movi	r2,67
 1012270:	18800005 	stb	r2,0(r3)
        return;
 1012274:	00002306 	br	1012304 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 1012278:	e0bffb17 	ldw	r2,-20(fp)
 101227c:	10800058 	cmpnei	r2,r2,1
 1012280:	1000081e 	bne	r2,zero,10122a4 <OSTaskNameSet+0x150>
 1012284:	e0bffa17 	ldw	r2,-24(fp)
 1012288:	e0bff715 	stw	r2,-36(fp)
 101228c:	e0bff717 	ldw	r2,-36(fp)
 1012290:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 1012294:	e0ffff17 	ldw	r3,-4(fp)
 1012298:	008010c4 	movi	r2,67
 101229c:	18800005 	stb	r2,0(r3)
        return;
 10122a0:	00001806 	br	1012304 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 10122a4:	e13ffe17 	ldw	r4,-8(fp)
 10122a8:	100c9e40 	call	100c9e4 <OS_StrLen>
 10122ac:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 10122b0:	e0bffc03 	ldbu	r2,-16(fp)
 10122b4:	10800830 	cmpltui	r2,r2,32
 10122b8:	1000081e 	bne	r2,zero,10122dc <OSTaskNameSet+0x188>
 10122bc:	e0bffa17 	ldw	r2,-24(fp)
 10122c0:	e0bff615 	stw	r2,-40(fp)
 10122c4:	e0bff617 	ldw	r2,-40(fp)
 10122c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 10122cc:	e0ffff17 	ldw	r3,-4(fp)
 10122d0:	00801044 	movi	r2,65
 10122d4:	18800005 	stb	r2,0(r3)
        return;
 10122d8:	00000a06 	br	1012304 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 10122dc:	e0bffb17 	ldw	r2,-20(fp)
 10122e0:	11001304 	addi	r4,r2,76
 10122e4:	e17ffe17 	ldw	r5,-8(fp)
 10122e8:	100c9640 	call	100c964 <OS_StrCopy>
 10122ec:	e0bffa17 	ldw	r2,-24(fp)
 10122f0:	e0bff515 	stw	r2,-44(fp)
 10122f4:	e0bff517 	ldw	r2,-44(fp)
 10122f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 10122fc:	e0bfff17 	ldw	r2,-4(fp)
 1012300:	10000005 	stb	zero,0(r2)
}
 1012304:	e037883a 	mov	sp,fp
 1012308:	dfc00117 	ldw	ra,4(sp)
 101230c:	df000017 	ldw	fp,0(sp)
 1012310:	dec00204 	addi	sp,sp,8
 1012314:	f800283a 	ret

01012318 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 1012318:	defff304 	addi	sp,sp,-52
 101231c:	dfc00c15 	stw	ra,48(sp)
 1012320:	df000b15 	stw	fp,44(sp)
 1012324:	df000b04 	addi	fp,sp,44
 1012328:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 101232c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 1012330:	e0bffe03 	ldbu	r2,-8(fp)
 1012334:	10800530 	cmpltui	r2,r2,20
 1012338:	1000031e 	bne	r2,zero,1012348 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 101233c:	00800a84 	movi	r2,42
 1012340:	e0bfff15 	stw	r2,-4(fp)
 1012344:	00007406 	br	1012518 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012348:	0005303a 	rdctl	r2,status
 101234c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012350:	e0fffb17 	ldw	r3,-20(fp)
 1012354:	00bfff84 	movi	r2,-2
 1012358:	1884703a 	and	r2,r3,r2
 101235c:	1001703a 	wrctl	status,r2
  
  return context;
 1012360:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 1012364:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 1012368:	e0bffe03 	ldbu	r2,-8(fp)
 101236c:	00c040b4 	movhi	r3,258
 1012370:	18cb0b04 	addi	r3,r3,11308
 1012374:	1085883a 	add	r2,r2,r2
 1012378:	1085883a 	add	r2,r2,r2
 101237c:	10c5883a 	add	r2,r2,r3
 1012380:	10800017 	ldw	r2,0(r2)
 1012384:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 1012388:	e0bffd17 	ldw	r2,-12(fp)
 101238c:	1004c03a 	cmpne	r2,r2,zero
 1012390:	1000071e 	bne	r2,zero,10123b0 <OSTaskResume+0x98>
 1012394:	e0bffc17 	ldw	r2,-16(fp)
 1012398:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101239c:	e0bffa17 	ldw	r2,-24(fp)
 10123a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 10123a4:	00801184 	movi	r2,70
 10123a8:	e0bfff15 	stw	r2,-4(fp)
 10123ac:	00005a06 	br	1012518 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 10123b0:	e0bffd17 	ldw	r2,-12(fp)
 10123b4:	10800058 	cmpnei	r2,r2,1
 10123b8:	1000071e 	bne	r2,zero,10123d8 <OSTaskResume+0xc0>
 10123bc:	e0bffc17 	ldw	r2,-16(fp)
 10123c0:	e0bff915 	stw	r2,-28(fp)
 10123c4:	e0bff917 	ldw	r2,-28(fp)
 10123c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 10123cc:	008010c4 	movi	r2,67
 10123d0:	e0bfff15 	stw	r2,-4(fp)
 10123d4:	00005006 	br	1012518 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 10123d8:	e0bffd17 	ldw	r2,-12(fp)
 10123dc:	10800c03 	ldbu	r2,48(r2)
 10123e0:	10803fcc 	andi	r2,r2,255
 10123e4:	1080020c 	andi	r2,r2,8
 10123e8:	1005003a 	cmpeq	r2,r2,zero
 10123ec:	1000441e 	bne	r2,zero,1012500 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 10123f0:	e0bffd17 	ldw	r2,-12(fp)
 10123f4:	10c00c03 	ldbu	r3,48(r2)
 10123f8:	00bffdc4 	movi	r2,-9
 10123fc:	1884703a 	and	r2,r3,r2
 1012400:	1007883a 	mov	r3,r2
 1012404:	e0bffd17 	ldw	r2,-12(fp)
 1012408:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 101240c:	e0bffd17 	ldw	r2,-12(fp)
 1012410:	10800c03 	ldbu	r2,48(r2)
 1012414:	10803fcc 	andi	r2,r2,255
 1012418:	1004c03a 	cmpne	r2,r2,zero
 101241c:	1000321e 	bne	r2,zero,10124e8 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 1012420:	e0bffd17 	ldw	r2,-12(fp)
 1012424:	10800b8b 	ldhu	r2,46(r2)
 1012428:	10bfffcc 	andi	r2,r2,65535
 101242c:	1004c03a 	cmpne	r2,r2,zero
 1012430:	1000281e 	bne	r2,zero,10124d4 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 1012434:	e0bffd17 	ldw	r2,-12(fp)
 1012438:	10c00d83 	ldbu	r3,54(r2)
 101243c:	008040b4 	movhi	r2,258
 1012440:	10a68204 	addi	r2,r2,-26104
 1012444:	10800003 	ldbu	r2,0(r2)
 1012448:	1884b03a 	or	r2,r3,r2
 101244c:	1007883a 	mov	r3,r2
 1012450:	008040b4 	movhi	r2,258
 1012454:	10a68204 	addi	r2,r2,-26104
 1012458:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 101245c:	e0bffd17 	ldw	r2,-12(fp)
 1012460:	10800d03 	ldbu	r2,52(r2)
 1012464:	11003fcc 	andi	r4,r2,255
 1012468:	e0bffd17 	ldw	r2,-12(fp)
 101246c:	10800d03 	ldbu	r2,52(r2)
 1012470:	10c03fcc 	andi	r3,r2,255
 1012474:	008040b4 	movhi	r2,258
 1012478:	10a68244 	addi	r2,r2,-26103
 101247c:	10c5883a 	add	r2,r2,r3
 1012480:	10c00003 	ldbu	r3,0(r2)
 1012484:	e0bffd17 	ldw	r2,-12(fp)
 1012488:	10800d43 	ldbu	r2,53(r2)
 101248c:	1884b03a 	or	r2,r3,r2
 1012490:	1007883a 	mov	r3,r2
 1012494:	008040b4 	movhi	r2,258
 1012498:	10a68244 	addi	r2,r2,-26103
 101249c:	1105883a 	add	r2,r2,r4
 10124a0:	10c00005 	stb	r3,0(r2)
 10124a4:	e0bffc17 	ldw	r2,-16(fp)
 10124a8:	e0bff815 	stw	r2,-32(fp)
 10124ac:	e0bff817 	ldw	r2,-32(fp)
 10124b0:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 10124b4:	008040b4 	movhi	r2,258
 10124b8:	10a67644 	addi	r2,r2,-26151
 10124bc:	10800003 	ldbu	r2,0(r2)
 10124c0:	10803fcc 	andi	r2,r2,255
 10124c4:	10800058 	cmpnei	r2,r2,1
 10124c8:	10000b1e 	bne	r2,zero,10124f8 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 10124cc:	100c8200 	call	100c820 <OS_Sched>
 10124d0:	00000906 	br	10124f8 <OSTaskResume+0x1e0>
 10124d4:	e0bffc17 	ldw	r2,-16(fp)
 10124d8:	e0bff715 	stw	r2,-36(fp)
 10124dc:	e0bff717 	ldw	r2,-36(fp)
 10124e0:	1001703a 	wrctl	status,r2
 10124e4:	00000406 	br	10124f8 <OSTaskResume+0x1e0>
 10124e8:	e0bffc17 	ldw	r2,-16(fp)
 10124ec:	e0bff615 	stw	r2,-40(fp)
 10124f0:	e0bff617 	ldw	r2,-40(fp)
 10124f4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 10124f8:	e03fff15 	stw	zero,-4(fp)
 10124fc:	00000606 	br	1012518 <OSTaskResume+0x200>
 1012500:	e0bffc17 	ldw	r2,-16(fp)
 1012504:	e0bff515 	stw	r2,-44(fp)
 1012508:	e0bff517 	ldw	r2,-44(fp)
 101250c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 1012510:	00801104 	movi	r2,68
 1012514:	e0bfff15 	stw	r2,-4(fp)
 1012518:	e0bfff17 	ldw	r2,-4(fp)
}
 101251c:	e037883a 	mov	sp,fp
 1012520:	dfc00117 	ldw	ra,4(sp)
 1012524:	df000017 	ldw	fp,0(sp)
 1012528:	dec00204 	addi	sp,sp,8
 101252c:	f800283a 	ret

01012530 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 1012530:	defff204 	addi	sp,sp,-56
 1012534:	df000d15 	stw	fp,52(sp)
 1012538:	df000d04 	addi	fp,sp,52
 101253c:	e17ffe15 	stw	r5,-8(fp)
 1012540:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 1012544:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 1012548:	e0bffd03 	ldbu	r2,-12(fp)
 101254c:	10800570 	cmpltui	r2,r2,21
 1012550:	1000061e 	bne	r2,zero,101256c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 1012554:	e0bffd03 	ldbu	r2,-12(fp)
 1012558:	10803fe0 	cmpeqi	r2,r2,255
 101255c:	1000031e 	bne	r2,zero,101256c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 1012560:	00800a84 	movi	r2,42
 1012564:	e0bfff15 	stw	r2,-4(fp)
 1012568:	00006b06 	br	1012718 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 101256c:	e0bffe17 	ldw	r2,-8(fp)
 1012570:	1004c03a 	cmpne	r2,r2,zero
 1012574:	1000031e 	bne	r2,zero,1012584 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 1012578:	00800244 	movi	r2,9
 101257c:	e0bfff15 	stw	r2,-4(fp)
 1012580:	00006506 	br	1012718 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 1012584:	e0bffe17 	ldw	r2,-8(fp)
 1012588:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 101258c:	e0bffe17 	ldw	r2,-8(fp)
 1012590:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012594:	0005303a 	rdctl	r2,status
 1012598:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101259c:	e0fff717 	ldw	r3,-36(fp)
 10125a0:	00bfff84 	movi	r2,-2
 10125a4:	1884703a 	and	r2,r3,r2
 10125a8:	1001703a 	wrctl	status,r2
  
  return context;
 10125ac:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 10125b0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 10125b4:	e0bffd03 	ldbu	r2,-12(fp)
 10125b8:	10803fd8 	cmpnei	r2,r2,255
 10125bc:	1000051e 	bne	r2,zero,10125d4 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 10125c0:	008040b4 	movhi	r2,258
 10125c4:	10a68504 	addi	r2,r2,-26092
 10125c8:	10800017 	ldw	r2,0(r2)
 10125cc:	10800c83 	ldbu	r2,50(r2)
 10125d0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10125d4:	e0bffd03 	ldbu	r2,-12(fp)
 10125d8:	00c040b4 	movhi	r3,258
 10125dc:	18cb0b04 	addi	r3,r3,11308
 10125e0:	1085883a 	add	r2,r2,r2
 10125e4:	1085883a 	add	r2,r2,r2
 10125e8:	10c5883a 	add	r2,r2,r3
 10125ec:	10800017 	ldw	r2,0(r2)
 10125f0:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 10125f4:	e0bffc17 	ldw	r2,-16(fp)
 10125f8:	1004c03a 	cmpne	r2,r2,zero
 10125fc:	1000071e 	bne	r2,zero,101261c <OSTaskStkChk+0xec>
 1012600:	e0bff817 	ldw	r2,-32(fp)
 1012604:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012608:	e0bff617 	ldw	r2,-40(fp)
 101260c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1012610:	008010c4 	movi	r2,67
 1012614:	e0bfff15 	stw	r2,-4(fp)
 1012618:	00003f06 	br	1012718 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 101261c:	e0bffc17 	ldw	r2,-16(fp)
 1012620:	10800058 	cmpnei	r2,r2,1
 1012624:	1000071e 	bne	r2,zero,1012644 <OSTaskStkChk+0x114>
 1012628:	e0bff817 	ldw	r2,-32(fp)
 101262c:	e0bff515 	stw	r2,-44(fp)
 1012630:	e0bff517 	ldw	r2,-44(fp)
 1012634:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1012638:	008010c4 	movi	r2,67
 101263c:	e0bfff15 	stw	r2,-4(fp)
 1012640:	00003506 	br	1012718 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 1012644:	e0bffc17 	ldw	r2,-16(fp)
 1012648:	1080040b 	ldhu	r2,16(r2)
 101264c:	10bfffcc 	andi	r2,r2,65535
 1012650:	1080004c 	andi	r2,r2,1
 1012654:	1004c03a 	cmpne	r2,r2,zero
 1012658:	1000071e 	bne	r2,zero,1012678 <OSTaskStkChk+0x148>
 101265c:	e0bff817 	ldw	r2,-32(fp)
 1012660:	e0bff415 	stw	r2,-48(fp)
 1012664:	e0bff417 	ldw	r2,-48(fp)
 1012668:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 101266c:	00801144 	movi	r2,69
 1012670:	e0bfff15 	stw	r2,-4(fp)
 1012674:	00002806 	br	1012718 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 1012678:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 101267c:	e0bffc17 	ldw	r2,-16(fp)
 1012680:	10800317 	ldw	r2,12(r2)
 1012684:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 1012688:	e0bffc17 	ldw	r2,-16(fp)
 101268c:	10800217 	ldw	r2,8(r2)
 1012690:	e0bffb15 	stw	r2,-20(fp)
 1012694:	e0bff817 	ldw	r2,-32(fp)
 1012698:	e0bff315 	stw	r2,-52(fp)
 101269c:	e0bff317 	ldw	r2,-52(fp)
 10126a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 10126a4:	00000306 	br	10126b4 <OSTaskStkChk+0x184>
        nfree++;
 10126a8:	e0bffa17 	ldw	r2,-24(fp)
 10126ac:	10800044 	addi	r2,r2,1
 10126b0:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 10126b4:	e0bffb17 	ldw	r2,-20(fp)
 10126b8:	10800017 	ldw	r2,0(r2)
 10126bc:	1005003a 	cmpeq	r2,r2,zero
 10126c0:	1007883a 	mov	r3,r2
 10126c4:	e0bffb17 	ldw	r2,-20(fp)
 10126c8:	10800104 	addi	r2,r2,4
 10126cc:	e0bffb15 	stw	r2,-20(fp)
 10126d0:	18803fcc 	andi	r2,r3,255
 10126d4:	1004c03a 	cmpne	r2,r2,zero
 10126d8:	103ff31e 	bne	r2,zero,10126a8 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 10126dc:	e0bffa17 	ldw	r2,-24(fp)
 10126e0:	1085883a 	add	r2,r2,r2
 10126e4:	1085883a 	add	r2,r2,r2
 10126e8:	1007883a 	mov	r3,r2
 10126ec:	e0bffe17 	ldw	r2,-8(fp)
 10126f0:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 10126f4:	e0fff917 	ldw	r3,-28(fp)
 10126f8:	e0bffa17 	ldw	r2,-24(fp)
 10126fc:	1885c83a 	sub	r2,r3,r2
 1012700:	1085883a 	add	r2,r2,r2
 1012704:	1085883a 	add	r2,r2,r2
 1012708:	1007883a 	mov	r3,r2
 101270c:	e0bffe17 	ldw	r2,-8(fp)
 1012710:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 1012714:	e03fff15 	stw	zero,-4(fp)
 1012718:	e0bfff17 	ldw	r2,-4(fp)
}
 101271c:	e037883a 	mov	sp,fp
 1012720:	df000017 	ldw	fp,0(sp)
 1012724:	dec00104 	addi	sp,sp,4
 1012728:	f800283a 	ret

0101272c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 101272c:	defff404 	addi	sp,sp,-48
 1012730:	dfc00b15 	stw	ra,44(sp)
 1012734:	df000a15 	stw	fp,40(sp)
 1012738:	df000a04 	addi	fp,sp,40
 101273c:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1012740:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 1012744:	e0bffe03 	ldbu	r2,-8(fp)
 1012748:	10800518 	cmpnei	r2,r2,20
 101274c:	1000031e 	bne	r2,zero,101275c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 1012750:	008011c4 	movi	r2,71
 1012754:	e0bfff15 	stw	r2,-4(fp)
 1012758:	00007906 	br	1012940 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 101275c:	e0bffe03 	ldbu	r2,-8(fp)
 1012760:	10800530 	cmpltui	r2,r2,20
 1012764:	1000061e 	bne	r2,zero,1012780 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 1012768:	e0bffe03 	ldbu	r2,-8(fp)
 101276c:	10803fe0 	cmpeqi	r2,r2,255
 1012770:	1000031e 	bne	r2,zero,1012780 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 1012774:	00800a84 	movi	r2,42
 1012778:	e0bfff15 	stw	r2,-4(fp)
 101277c:	00007006 	br	1012940 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012780:	0005303a 	rdctl	r2,status
 1012784:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012788:	e0fff917 	ldw	r3,-28(fp)
 101278c:	00bfff84 	movi	r2,-2
 1012790:	1884703a 	and	r2,r3,r2
 1012794:	1001703a 	wrctl	status,r2
  
  return context;
 1012798:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 101279c:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 10127a0:	e0bffe03 	ldbu	r2,-8(fp)
 10127a4:	10803fd8 	cmpnei	r2,r2,255
 10127a8:	1000081e 	bne	r2,zero,10127cc <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 10127ac:	008040b4 	movhi	r2,258
 10127b0:	10a68504 	addi	r2,r2,-26092
 10127b4:	10800017 	ldw	r2,0(r2)
 10127b8:	10800c83 	ldbu	r2,50(r2)
 10127bc:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 10127c0:	00800044 	movi	r2,1
 10127c4:	e0bffd05 	stb	r2,-12(fp)
 10127c8:	00000b06 	br	10127f8 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 10127cc:	008040b4 	movhi	r2,258
 10127d0:	10a68504 	addi	r2,r2,-26092
 10127d4:	10800017 	ldw	r2,0(r2)
 10127d8:	10800c83 	ldbu	r2,50(r2)
 10127dc:	10c03fcc 	andi	r3,r2,255
 10127e0:	e0bffe03 	ldbu	r2,-8(fp)
 10127e4:	1880031e 	bne	r3,r2,10127f4 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 10127e8:	00800044 	movi	r2,1
 10127ec:	e0bffd05 	stb	r2,-12(fp)
 10127f0:	00000106 	br	10127f8 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 10127f4:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10127f8:	e0bffe03 	ldbu	r2,-8(fp)
 10127fc:	00c040b4 	movhi	r3,258
 1012800:	18cb0b04 	addi	r3,r3,11308
 1012804:	1085883a 	add	r2,r2,r2
 1012808:	1085883a 	add	r2,r2,r2
 101280c:	10c5883a 	add	r2,r2,r3
 1012810:	10800017 	ldw	r2,0(r2)
 1012814:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 1012818:	e0bffc17 	ldw	r2,-16(fp)
 101281c:	1004c03a 	cmpne	r2,r2,zero
 1012820:	1000071e 	bne	r2,zero,1012840 <OSTaskSuspend+0x114>
 1012824:	e0bffa17 	ldw	r2,-24(fp)
 1012828:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101282c:	e0bff817 	ldw	r2,-32(fp)
 1012830:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 1012834:	00801204 	movi	r2,72
 1012838:	e0bfff15 	stw	r2,-4(fp)
 101283c:	00004006 	br	1012940 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 1012840:	e0bffc17 	ldw	r2,-16(fp)
 1012844:	10800058 	cmpnei	r2,r2,1
 1012848:	1000071e 	bne	r2,zero,1012868 <OSTaskSuspend+0x13c>
 101284c:	e0bffa17 	ldw	r2,-24(fp)
 1012850:	e0bff715 	stw	r2,-36(fp)
 1012854:	e0bff717 	ldw	r2,-36(fp)
 1012858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 101285c:	008010c4 	movi	r2,67
 1012860:	e0bfff15 	stw	r2,-4(fp)
 1012864:	00003606 	br	1012940 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 1012868:	e0bffc17 	ldw	r2,-16(fp)
 101286c:	10800d03 	ldbu	r2,52(r2)
 1012870:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 1012874:	e13ffb03 	ldbu	r4,-20(fp)
 1012878:	e0fffb03 	ldbu	r3,-20(fp)
 101287c:	008040b4 	movhi	r2,258
 1012880:	10a68244 	addi	r2,r2,-26103
 1012884:	10c5883a 	add	r2,r2,r3
 1012888:	10800003 	ldbu	r2,0(r2)
 101288c:	1007883a 	mov	r3,r2
 1012890:	e0bffc17 	ldw	r2,-16(fp)
 1012894:	10800d43 	ldbu	r2,53(r2)
 1012898:	0084303a 	nor	r2,zero,r2
 101289c:	1884703a 	and	r2,r3,r2
 10128a0:	1007883a 	mov	r3,r2
 10128a4:	008040b4 	movhi	r2,258
 10128a8:	10a68244 	addi	r2,r2,-26103
 10128ac:	1105883a 	add	r2,r2,r4
 10128b0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 10128b4:	e0fffb03 	ldbu	r3,-20(fp)
 10128b8:	008040b4 	movhi	r2,258
 10128bc:	10a68244 	addi	r2,r2,-26103
 10128c0:	10c5883a 	add	r2,r2,r3
 10128c4:	10800003 	ldbu	r2,0(r2)
 10128c8:	10803fcc 	andi	r2,r2,255
 10128cc:	1004c03a 	cmpne	r2,r2,zero
 10128d0:	10000c1e 	bne	r2,zero,1012904 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 10128d4:	e0bffc17 	ldw	r2,-16(fp)
 10128d8:	10800d83 	ldbu	r2,54(r2)
 10128dc:	0084303a 	nor	r2,zero,r2
 10128e0:	1007883a 	mov	r3,r2
 10128e4:	008040b4 	movhi	r2,258
 10128e8:	10a68204 	addi	r2,r2,-26104
 10128ec:	10800003 	ldbu	r2,0(r2)
 10128f0:	1884703a 	and	r2,r3,r2
 10128f4:	1007883a 	mov	r3,r2
 10128f8:	008040b4 	movhi	r2,258
 10128fc:	10a68204 	addi	r2,r2,-26104
 1012900:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 1012904:	e0bffc17 	ldw	r2,-16(fp)
 1012908:	10800c03 	ldbu	r2,48(r2)
 101290c:	10800214 	ori	r2,r2,8
 1012910:	1007883a 	mov	r3,r2
 1012914:	e0bffc17 	ldw	r2,-16(fp)
 1012918:	10c00c05 	stb	r3,48(r2)
 101291c:	e0bffa17 	ldw	r2,-24(fp)
 1012920:	e0bff615 	stw	r2,-40(fp)
 1012924:	e0bff617 	ldw	r2,-40(fp)
 1012928:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 101292c:	e0bffd03 	ldbu	r2,-12(fp)
 1012930:	10800058 	cmpnei	r2,r2,1
 1012934:	1000011e 	bne	r2,zero,101293c <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 1012938:	100c8200 	call	100c820 <OS_Sched>
    }
    return (OS_ERR_NONE);
 101293c:	e03fff15 	stw	zero,-4(fp)
 1012940:	e0bfff17 	ldw	r2,-4(fp)
}
 1012944:	e037883a 	mov	sp,fp
 1012948:	dfc00117 	ldw	ra,4(sp)
 101294c:	df000017 	ldw	fp,0(sp)
 1012950:	dec00204 	addi	sp,sp,8
 1012954:	f800283a 	ret

01012958 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 1012958:	defff504 	addi	sp,sp,-44
 101295c:	dfc00a15 	stw	ra,40(sp)
 1012960:	df000915 	stw	fp,36(sp)
 1012964:	df000904 	addi	fp,sp,36
 1012968:	e17ffe15 	stw	r5,-8(fp)
 101296c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1012970:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 1012974:	e0bffd03 	ldbu	r2,-12(fp)
 1012978:	10800570 	cmpltui	r2,r2,21
 101297c:	1000061e 	bne	r2,zero,1012998 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 1012980:	e0bffd03 	ldbu	r2,-12(fp)
 1012984:	10803fe0 	cmpeqi	r2,r2,255
 1012988:	1000031e 	bne	r2,zero,1012998 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 101298c:	00800a84 	movi	r2,42
 1012990:	e0bfff15 	stw	r2,-4(fp)
 1012994:	00003b06 	br	1012a84 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 1012998:	e0bffe17 	ldw	r2,-8(fp)
 101299c:	1004c03a 	cmpne	r2,r2,zero
 10129a0:	1000031e 	bne	r2,zero,10129b0 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 10129a4:	00800244 	movi	r2,9
 10129a8:	e0bfff15 	stw	r2,-4(fp)
 10129ac:	00003506 	br	1012a84 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10129b0:	0005303a 	rdctl	r2,status
 10129b4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10129b8:	e0fffa17 	ldw	r3,-24(fp)
 10129bc:	00bfff84 	movi	r2,-2
 10129c0:	1884703a 	and	r2,r3,r2
 10129c4:	1001703a 	wrctl	status,r2
  
  return context;
 10129c8:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 10129cc:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 10129d0:	e0bffd03 	ldbu	r2,-12(fp)
 10129d4:	10803fd8 	cmpnei	r2,r2,255
 10129d8:	1000051e 	bne	r2,zero,10129f0 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 10129dc:	008040b4 	movhi	r2,258
 10129e0:	10a68504 	addi	r2,r2,-26092
 10129e4:	10800017 	ldw	r2,0(r2)
 10129e8:	10800c83 	ldbu	r2,50(r2)
 10129ec:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 10129f0:	e0bffd03 	ldbu	r2,-12(fp)
 10129f4:	00c040b4 	movhi	r3,258
 10129f8:	18cb0b04 	addi	r3,r3,11308
 10129fc:	1085883a 	add	r2,r2,r2
 1012a00:	1085883a 	add	r2,r2,r2
 1012a04:	10c5883a 	add	r2,r2,r3
 1012a08:	10800017 	ldw	r2,0(r2)
 1012a0c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 1012a10:	e0bffc17 	ldw	r2,-16(fp)
 1012a14:	1004c03a 	cmpne	r2,r2,zero
 1012a18:	1000071e 	bne	r2,zero,1012a38 <OSTaskQuery+0xe0>
 1012a1c:	e0bffb17 	ldw	r2,-20(fp)
 1012a20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012a24:	e0bff917 	ldw	r2,-28(fp)
 1012a28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 1012a2c:	00800a44 	movi	r2,41
 1012a30:	e0bfff15 	stw	r2,-4(fp)
 1012a34:	00001306 	br	1012a84 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 1012a38:	e0bffc17 	ldw	r2,-16(fp)
 1012a3c:	10800058 	cmpnei	r2,r2,1
 1012a40:	1000071e 	bne	r2,zero,1012a60 <OSTaskQuery+0x108>
 1012a44:	e0bffb17 	ldw	r2,-20(fp)
 1012a48:	e0bff815 	stw	r2,-32(fp)
 1012a4c:	e0bff817 	ldw	r2,-32(fp)
 1012a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 1012a54:	008010c4 	movi	r2,67
 1012a58:	e0bfff15 	stw	r2,-4(fp)
 1012a5c:	00000906 	br	1012a84 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 1012a60:	e13ffe17 	ldw	r4,-8(fp)
 1012a64:	e17ffc17 	ldw	r5,-16(fp)
 1012a68:	01801b04 	movi	r6,108
 1012a6c:	100c7b40 	call	100c7b4 <OS_MemCopy>
 1012a70:	e0bffb17 	ldw	r2,-20(fp)
 1012a74:	e0bff715 	stw	r2,-36(fp)
 1012a78:	e0bff717 	ldw	r2,-36(fp)
 1012a7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 1012a80:	e03fff15 	stw	zero,-4(fp)
 1012a84:	e0bfff17 	ldw	r2,-4(fp)
}
 1012a88:	e037883a 	mov	sp,fp
 1012a8c:	dfc00117 	ldw	ra,4(sp)
 1012a90:	df000017 	ldw	fp,0(sp)
 1012a94:	dec00204 	addi	sp,sp,8
 1012a98:	f800283a 	ret

01012a9c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 1012a9c:	defffc04 	addi	sp,sp,-16
 1012aa0:	df000315 	stw	fp,12(sp)
 1012aa4:	df000304 	addi	fp,sp,12
 1012aa8:	e13ffd15 	stw	r4,-12(fp)
 1012aac:	e17ffe15 	stw	r5,-8(fp)
 1012ab0:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 1012ab4:	e0bfff0b 	ldhu	r2,-4(fp)
 1012ab8:	1080004c 	andi	r2,r2,1
 1012abc:	10803fcc 	andi	r2,r2,255
 1012ac0:	1005003a 	cmpeq	r2,r2,zero
 1012ac4:	1000101e 	bne	r2,zero,1012b08 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 1012ac8:	e0bfff0b 	ldhu	r2,-4(fp)
 1012acc:	1080008c 	andi	r2,r2,2
 1012ad0:	1005003a 	cmpeq	r2,r2,zero
 1012ad4:	10000c1e 	bne	r2,zero,1012b08 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1012ad8:	00000806 	br	1012afc <OS_TaskStkClr+0x60>
                size--;
 1012adc:	e0bffe17 	ldw	r2,-8(fp)
 1012ae0:	10bfffc4 	addi	r2,r2,-1
 1012ae4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 1012ae8:	e0bffd17 	ldw	r2,-12(fp)
 1012aec:	10000015 	stw	zero,0(r2)
 1012af0:	e0bffd17 	ldw	r2,-12(fp)
 1012af4:	10800104 	addi	r2,r2,4
 1012af8:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 1012afc:	e0bffe17 	ldw	r2,-8(fp)
 1012b00:	1004c03a 	cmpne	r2,r2,zero
 1012b04:	103ff51e 	bne	r2,zero,1012adc <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 1012b08:	e037883a 	mov	sp,fp
 1012b0c:	df000017 	ldw	fp,0(sp)
 1012b10:	dec00104 	addi	sp,sp,4
 1012b14:	f800283a 	ret

01012b18 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 1012b18:	defff904 	addi	sp,sp,-28
 1012b1c:	dfc00615 	stw	ra,24(sp)
 1012b20:	df000515 	stw	fp,20(sp)
 1012b24:	df000504 	addi	fp,sp,20
 1012b28:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1012b2c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1012b30:	008040b4 	movhi	r2,258
 1012b34:	10a68404 	addi	r2,r2,-26096
 1012b38:	10800003 	ldbu	r2,0(r2)
 1012b3c:	10803fcc 	andi	r2,r2,255
 1012b40:	1004c03a 	cmpne	r2,r2,zero
 1012b44:	1000421e 	bne	r2,zero,1012c50 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 1012b48:	e0bfff0b 	ldhu	r2,-4(fp)
 1012b4c:	1005003a 	cmpeq	r2,r2,zero
 1012b50:	10003f1e 	bne	r2,zero,1012c50 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012b54:	0005303a 	rdctl	r2,status
 1012b58:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012b5c:	e0fffc17 	ldw	r3,-16(fp)
 1012b60:	00bfff84 	movi	r2,-2
 1012b64:	1884703a 	and	r2,r3,r2
 1012b68:	1001703a 	wrctl	status,r2
  
  return context;
 1012b6c:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 1012b70:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 1012b74:	008040b4 	movhi	r2,258
 1012b78:	10a68504 	addi	r2,r2,-26092
 1012b7c:	10800017 	ldw	r2,0(r2)
 1012b80:	10800d03 	ldbu	r2,52(r2)
 1012b84:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 1012b88:	e13ffe03 	ldbu	r4,-8(fp)
 1012b8c:	e0fffe03 	ldbu	r3,-8(fp)
 1012b90:	008040b4 	movhi	r2,258
 1012b94:	10a68244 	addi	r2,r2,-26103
 1012b98:	10c5883a 	add	r2,r2,r3
 1012b9c:	10800003 	ldbu	r2,0(r2)
 1012ba0:	1007883a 	mov	r3,r2
 1012ba4:	008040b4 	movhi	r2,258
 1012ba8:	10a68504 	addi	r2,r2,-26092
 1012bac:	10800017 	ldw	r2,0(r2)
 1012bb0:	10800d43 	ldbu	r2,53(r2)
 1012bb4:	0084303a 	nor	r2,zero,r2
 1012bb8:	1884703a 	and	r2,r3,r2
 1012bbc:	1007883a 	mov	r3,r2
 1012bc0:	008040b4 	movhi	r2,258
 1012bc4:	10a68244 	addi	r2,r2,-26103
 1012bc8:	1105883a 	add	r2,r2,r4
 1012bcc:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 1012bd0:	e0fffe03 	ldbu	r3,-8(fp)
 1012bd4:	008040b4 	movhi	r2,258
 1012bd8:	10a68244 	addi	r2,r2,-26103
 1012bdc:	10c5883a 	add	r2,r2,r3
 1012be0:	10800003 	ldbu	r2,0(r2)
 1012be4:	10803fcc 	andi	r2,r2,255
 1012be8:	1004c03a 	cmpne	r2,r2,zero
 1012bec:	10000e1e 	bne	r2,zero,1012c28 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 1012bf0:	008040b4 	movhi	r2,258
 1012bf4:	10a68504 	addi	r2,r2,-26092
 1012bf8:	10800017 	ldw	r2,0(r2)
 1012bfc:	10800d83 	ldbu	r2,54(r2)
 1012c00:	0084303a 	nor	r2,zero,r2
 1012c04:	1007883a 	mov	r3,r2
 1012c08:	008040b4 	movhi	r2,258
 1012c0c:	10a68204 	addi	r2,r2,-26104
 1012c10:	10800003 	ldbu	r2,0(r2)
 1012c14:	1884703a 	and	r2,r3,r2
 1012c18:	1007883a 	mov	r3,r2
 1012c1c:	008040b4 	movhi	r2,258
 1012c20:	10a68204 	addi	r2,r2,-26104
 1012c24:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 1012c28:	008040b4 	movhi	r2,258
 1012c2c:	10a68504 	addi	r2,r2,-26092
 1012c30:	10c00017 	ldw	r3,0(r2)
 1012c34:	e0bfff0b 	ldhu	r2,-4(fp)
 1012c38:	18800b8d 	sth	r2,46(r3)
 1012c3c:	e0bffd17 	ldw	r2,-12(fp)
 1012c40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012c44:	e0bffb17 	ldw	r2,-20(fp)
 1012c48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 1012c4c:	100c8200 	call	100c820 <OS_Sched>
    }
}
 1012c50:	e037883a 	mov	sp,fp
 1012c54:	dfc00117 	ldw	ra,4(sp)
 1012c58:	df000017 	ldw	fp,0(sp)
 1012c5c:	dec00204 	addi	sp,sp,8
 1012c60:	f800283a 	ret

01012c64 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 1012c64:	defff504 	addi	sp,sp,-44
 1012c68:	dfc00a15 	stw	ra,40(sp)
 1012c6c:	df000915 	stw	fp,36(sp)
 1012c70:	dc400815 	stw	r17,32(sp)
 1012c74:	dc000715 	stw	r16,28(sp)
 1012c78:	df000704 	addi	fp,sp,28
 1012c7c:	e13ffb05 	stb	r4,-20(fp)
 1012c80:	e17ffc05 	stb	r5,-16(fp)
 1012c84:	e1bffd05 	stb	r6,-12(fp)
 1012c88:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 1012c8c:	008040b4 	movhi	r2,258
 1012c90:	10a68404 	addi	r2,r2,-26096
 1012c94:	10800003 	ldbu	r2,0(r2)
 1012c98:	10803fcc 	andi	r2,r2,255
 1012c9c:	1005003a 	cmpeq	r2,r2,zero
 1012ca0:	1000031e 	bne	r2,zero,1012cb0 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
 1012ca4:	00801544 	movi	r2,85
 1012ca8:	e0bfff15 	stw	r2,-4(fp)
 1012cac:	00007b06 	br	1012e9c <OSTimeDlyHMSM+0x238>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 1012cb0:	e0bffb03 	ldbu	r2,-20(fp)
 1012cb4:	1004c03a 	cmpne	r2,r2,zero
 1012cb8:	10000c1e 	bne	r2,zero,1012cec <OSTimeDlyHMSM+0x88>
        if (minutes == 0) {
 1012cbc:	e0bffc03 	ldbu	r2,-16(fp)
 1012cc0:	1004c03a 	cmpne	r2,r2,zero
 1012cc4:	1000091e 	bne	r2,zero,1012cec <OSTimeDlyHMSM+0x88>
            if (seconds == 0) {
 1012cc8:	e0bffd03 	ldbu	r2,-12(fp)
 1012ccc:	1004c03a 	cmpne	r2,r2,zero
 1012cd0:	1000061e 	bne	r2,zero,1012cec <OSTimeDlyHMSM+0x88>
                if (ms == 0) {
 1012cd4:	e0bffe0b 	ldhu	r2,-8(fp)
 1012cd8:	1004c03a 	cmpne	r2,r2,zero
 1012cdc:	1000031e 	bne	r2,zero,1012cec <OSTimeDlyHMSM+0x88>
                    return (OS_ERR_TIME_ZERO_DLY);
 1012ce0:	00801504 	movi	r2,84
 1012ce4:	e0bfff15 	stw	r2,-4(fp)
 1012ce8:	00006c06 	br	1012e9c <OSTimeDlyHMSM+0x238>
                }
            }
        }
    }
    if (minutes > 59) {
 1012cec:	e0bffc03 	ldbu	r2,-16(fp)
 1012cf0:	10800f30 	cmpltui	r2,r2,60
 1012cf4:	1000031e 	bne	r2,zero,1012d04 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 1012cf8:	00801444 	movi	r2,81
 1012cfc:	e0bfff15 	stw	r2,-4(fp)
 1012d00:	00006606 	br	1012e9c <OSTimeDlyHMSM+0x238>
    }
    if (seconds > 59) {
 1012d04:	e0bffd03 	ldbu	r2,-12(fp)
 1012d08:	10800f30 	cmpltui	r2,r2,60
 1012d0c:	1000031e 	bne	r2,zero,1012d1c <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_SECONDS);
 1012d10:	00801484 	movi	r2,82
 1012d14:	e0bfff15 	stw	r2,-4(fp)
 1012d18:	00006006 	br	1012e9c <OSTimeDlyHMSM+0x238>
    }
    if (ms > 999) {
 1012d1c:	e0bffe0b 	ldhu	r2,-8(fp)
 1012d20:	1080fa30 	cmpltui	r2,r2,1000
 1012d24:	1000031e 	bne	r2,zero,1012d34 <OSTimeDlyHMSM+0xd0>
        return (OS_ERR_TIME_INVALID_MS);
 1012d28:	008014c4 	movi	r2,83
 1012d2c:	e0bfff15 	stw	r2,-4(fp)
 1012d30:	00005a06 	br	1012e9c <OSTimeDlyHMSM+0x238>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 1012d34:	e13ffb03 	ldbu	r4,-20(fp)
 1012d38:	01438404 	movi	r5,3600
 1012d3c:	10098e40 	call	10098e4 <__mulsi3>
 1012d40:	1021883a 	mov	r16,r2
 1012d44:	e13ffc03 	ldbu	r4,-16(fp)
 1012d48:	01400f04 	movi	r5,60
 1012d4c:	10098e40 	call	10098e4 <__mulsi3>
 1012d50:	8087883a 	add	r3,r16,r2
 1012d54:	e0bffd03 	ldbu	r2,-12(fp)
 1012d58:	1889883a 	add	r4,r3,r2
 1012d5c:	10096040 	call	1009604 <__floatunsidf>
 1012d60:	100b883a 	mov	r5,r2
 1012d64:	180d883a 	mov	r6,r3
 1012d68:	2809883a 	mov	r4,r5
 1012d6c:	300b883a 	mov	r5,r6
 1012d70:	000d883a 	mov	r6,zero
 1012d74:	01d023f4 	movhi	r7,16527
 1012d78:	39d00004 	addi	r7,r7,16384
 1012d7c:	1008b700 	call	1008b70 <__muldf3>
 1012d80:	1009883a 	mov	r4,r2
 1012d84:	180b883a 	mov	r5,r3
 1012d88:	2021883a 	mov	r16,r4
 1012d8c:	2823883a 	mov	r17,r5
 1012d90:	e13ffe0b 	ldhu	r4,-8(fp)
 1012d94:	10096040 	call	1009604 <__floatunsidf>
 1012d98:	100b883a 	mov	r5,r2
 1012d9c:	180d883a 	mov	r6,r3
 1012da0:	2809883a 	mov	r4,r5
 1012da4:	300b883a 	mov	r5,r6
 1012da8:	000d883a 	mov	r6,zero
 1012dac:	01cff834 	movhi	r7,16352
 1012db0:	1008afc0 	call	1008afc <__adddf3>
 1012db4:	1009883a 	mov	r4,r2
 1012db8:	180b883a 	mov	r5,r3
 1012dbc:	2005883a 	mov	r2,r4
 1012dc0:	2807883a 	mov	r3,r5
 1012dc4:	1009883a 	mov	r4,r2
 1012dc8:	180b883a 	mov	r5,r3
 1012dcc:	000d883a 	mov	r6,zero
 1012dd0:	01d023f4 	movhi	r7,16527
 1012dd4:	39d00004 	addi	r7,r7,16384
 1012dd8:	1008b700 	call	1008b70 <__muldf3>
 1012ddc:	1009883a 	mov	r4,r2
 1012de0:	180b883a 	mov	r5,r3
 1012de4:	2005883a 	mov	r2,r4
 1012de8:	2807883a 	mov	r3,r5
 1012dec:	1009883a 	mov	r4,r2
 1012df0:	180b883a 	mov	r5,r3
 1012df4:	000d883a 	mov	r6,zero
 1012df8:	01d023f4 	movhi	r7,16527
 1012dfc:	39d00004 	addi	r7,r7,16384
 1012e00:	1008f340 	call	1008f34 <__divdf3>
 1012e04:	1009883a 	mov	r4,r2
 1012e08:	180b883a 	mov	r5,r3
 1012e0c:	2005883a 	mov	r2,r4
 1012e10:	2807883a 	mov	r3,r5
 1012e14:	8009883a 	mov	r4,r16
 1012e18:	880b883a 	mov	r5,r17
 1012e1c:	100d883a 	mov	r6,r2
 1012e20:	180f883a 	mov	r7,r3
 1012e24:	1008afc0 	call	1008afc <__adddf3>
 1012e28:	1009883a 	mov	r4,r2
 1012e2c:	180b883a 	mov	r5,r3
 1012e30:	2005883a 	mov	r2,r4
 1012e34:	2807883a 	mov	r3,r5
 1012e38:	1009883a 	mov	r4,r2
 1012e3c:	180b883a 	mov	r5,r3
 1012e40:	1015d800 	call	1015d80 <__fixunsdfsi>
 1012e44:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 1012e48:	e0bffa17 	ldw	r2,-24(fp)
 1012e4c:	1004d43a 	srli	r2,r2,16
 1012e50:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 1012e54:	e0bffa17 	ldw	r2,-24(fp)
 1012e58:	10bfffcc 	andi	r2,r2,65535
 1012e5c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 1012e60:	e0bffa17 	ldw	r2,-24(fp)
 1012e64:	113fffcc 	andi	r4,r2,65535
 1012e68:	1012b180 	call	1012b18 <OSTimeDly>
    while (loops > 0) {
 1012e6c:	00000706 	br	1012e8c <OSTimeDlyHMSM+0x228>
        OSTimeDly((INT16U)32768u);
 1012e70:	01200014 	movui	r4,32768
 1012e74:	1012b180 	call	1012b18 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 1012e78:	01200014 	movui	r4,32768
 1012e7c:	1012b180 	call	1012b18 <OSTimeDly>
        loops--;
 1012e80:	e0bff90b 	ldhu	r2,-28(fp)
 1012e84:	10bfffc4 	addi	r2,r2,-1
 1012e88:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 1012e8c:	e0bff90b 	ldhu	r2,-28(fp)
 1012e90:	1004c03a 	cmpne	r2,r2,zero
 1012e94:	103ff61e 	bne	r2,zero,1012e70 <OSTimeDlyHMSM+0x20c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 1012e98:	e03fff15 	stw	zero,-4(fp)
 1012e9c:	e0bfff17 	ldw	r2,-4(fp)
}
 1012ea0:	e037883a 	mov	sp,fp
 1012ea4:	dfc00317 	ldw	ra,12(sp)
 1012ea8:	df000217 	ldw	fp,8(sp)
 1012eac:	dc400117 	ldw	r17,4(sp)
 1012eb0:	dc000017 	ldw	r16,0(sp)
 1012eb4:	dec00404 	addi	sp,sp,16
 1012eb8:	f800283a 	ret

01012ebc <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 1012ebc:	defff404 	addi	sp,sp,-48
 1012ec0:	dfc00b15 	stw	ra,44(sp)
 1012ec4:	df000a15 	stw	fp,40(sp)
 1012ec8:	df000a04 	addi	fp,sp,40
 1012ecc:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 1012ed0:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 1012ed4:	e0bffe03 	ldbu	r2,-8(fp)
 1012ed8:	10800530 	cmpltui	r2,r2,20
 1012edc:	1000031e 	bne	r2,zero,1012eec <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 1012ee0:	00800a84 	movi	r2,42
 1012ee4:	e0bfff15 	stw	r2,-4(fp)
 1012ee8:	00007206 	br	10130b4 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1012eec:	0005303a 	rdctl	r2,status
 1012ef0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1012ef4:	e0fffb17 	ldw	r3,-20(fp)
 1012ef8:	00bfff84 	movi	r2,-2
 1012efc:	1884703a 	and	r2,r3,r2
 1012f00:	1001703a 	wrctl	status,r2
  
  return context;
 1012f04:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 1012f08:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 1012f0c:	e0bffe03 	ldbu	r2,-8(fp)
 1012f10:	00c040b4 	movhi	r3,258
 1012f14:	18cb0b04 	addi	r3,r3,11308
 1012f18:	1085883a 	add	r2,r2,r2
 1012f1c:	1085883a 	add	r2,r2,r2
 1012f20:	10c5883a 	add	r2,r2,r3
 1012f24:	10800017 	ldw	r2,0(r2)
 1012f28:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 1012f2c:	e0bffd17 	ldw	r2,-12(fp)
 1012f30:	1004c03a 	cmpne	r2,r2,zero
 1012f34:	1000071e 	bne	r2,zero,1012f54 <OSTimeDlyResume+0x98>
 1012f38:	e0bffc17 	ldw	r2,-16(fp)
 1012f3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1012f40:	e0bffa17 	ldw	r2,-24(fp)
 1012f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 1012f48:	008010c4 	movi	r2,67
 1012f4c:	e0bfff15 	stw	r2,-4(fp)
 1012f50:	00005806 	br	10130b4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 1012f54:	e0bffd17 	ldw	r2,-12(fp)
 1012f58:	10800058 	cmpnei	r2,r2,1
 1012f5c:	1000071e 	bne	r2,zero,1012f7c <OSTimeDlyResume+0xc0>
 1012f60:	e0bffc17 	ldw	r2,-16(fp)
 1012f64:	e0bff915 	stw	r2,-28(fp)
 1012f68:	e0bff917 	ldw	r2,-28(fp)
 1012f6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 1012f70:	008010c4 	movi	r2,67
 1012f74:	e0bfff15 	stw	r2,-4(fp)
 1012f78:	00004e06 	br	10130b4 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 1012f7c:	e0bffd17 	ldw	r2,-12(fp)
 1012f80:	10800b8b 	ldhu	r2,46(r2)
 1012f84:	10bfffcc 	andi	r2,r2,65535
 1012f88:	1004c03a 	cmpne	r2,r2,zero
 1012f8c:	1000071e 	bne	r2,zero,1012fac <OSTimeDlyResume+0xf0>
 1012f90:	e0bffc17 	ldw	r2,-16(fp)
 1012f94:	e0bff815 	stw	r2,-32(fp)
 1012f98:	e0bff817 	ldw	r2,-32(fp)
 1012f9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 1012fa0:	00801404 	movi	r2,80
 1012fa4:	e0bfff15 	stw	r2,-4(fp)
 1012fa8:	00004206 	br	10130b4 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 1012fac:	e0bffd17 	ldw	r2,-12(fp)
 1012fb0:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 1012fb4:	e0bffd17 	ldw	r2,-12(fp)
 1012fb8:	10800c03 	ldbu	r2,48(r2)
 1012fbc:	10803fcc 	andi	r2,r2,255
 1012fc0:	10800dcc 	andi	r2,r2,55
 1012fc4:	1005003a 	cmpeq	r2,r2,zero
 1012fc8:	10000b1e 	bne	r2,zero,1012ff8 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 1012fcc:	e0bffd17 	ldw	r2,-12(fp)
 1012fd0:	10c00c03 	ldbu	r3,48(r2)
 1012fd4:	00bff204 	movi	r2,-56
 1012fd8:	1884703a 	and	r2,r3,r2
 1012fdc:	1007883a 	mov	r3,r2
 1012fe0:	e0bffd17 	ldw	r2,-12(fp)
 1012fe4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 1012fe8:	e0fffd17 	ldw	r3,-12(fp)
 1012fec:	00800044 	movi	r2,1
 1012ff0:	18800c45 	stb	r2,49(r3)
 1012ff4:	00000206 	br	1013000 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 1012ff8:	e0bffd17 	ldw	r2,-12(fp)
 1012ffc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 1013000:	e0bffd17 	ldw	r2,-12(fp)
 1013004:	10800c03 	ldbu	r2,48(r2)
 1013008:	10803fcc 	andi	r2,r2,255
 101300c:	1080020c 	andi	r2,r2,8
 1013010:	1004c03a 	cmpne	r2,r2,zero
 1013014:	1000221e 	bne	r2,zero,10130a0 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 1013018:	e0bffd17 	ldw	r2,-12(fp)
 101301c:	10c00d83 	ldbu	r3,54(r2)
 1013020:	008040b4 	movhi	r2,258
 1013024:	10a68204 	addi	r2,r2,-26104
 1013028:	10800003 	ldbu	r2,0(r2)
 101302c:	1884b03a 	or	r2,r3,r2
 1013030:	1007883a 	mov	r3,r2
 1013034:	008040b4 	movhi	r2,258
 1013038:	10a68204 	addi	r2,r2,-26104
 101303c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 1013040:	e0bffd17 	ldw	r2,-12(fp)
 1013044:	10800d03 	ldbu	r2,52(r2)
 1013048:	11003fcc 	andi	r4,r2,255
 101304c:	e0bffd17 	ldw	r2,-12(fp)
 1013050:	10800d03 	ldbu	r2,52(r2)
 1013054:	10c03fcc 	andi	r3,r2,255
 1013058:	008040b4 	movhi	r2,258
 101305c:	10a68244 	addi	r2,r2,-26103
 1013060:	10c5883a 	add	r2,r2,r3
 1013064:	10c00003 	ldbu	r3,0(r2)
 1013068:	e0bffd17 	ldw	r2,-12(fp)
 101306c:	10800d43 	ldbu	r2,53(r2)
 1013070:	1884b03a 	or	r2,r3,r2
 1013074:	1007883a 	mov	r3,r2
 1013078:	008040b4 	movhi	r2,258
 101307c:	10a68244 	addi	r2,r2,-26103
 1013080:	1105883a 	add	r2,r2,r4
 1013084:	10c00005 	stb	r3,0(r2)
 1013088:	e0bffc17 	ldw	r2,-16(fp)
 101308c:	e0bff715 	stw	r2,-36(fp)
 1013090:	e0bff717 	ldw	r2,-36(fp)
 1013094:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 1013098:	100c8200 	call	100c820 <OS_Sched>
 101309c:	00000406 	br	10130b0 <OSTimeDlyResume+0x1f4>
 10130a0:	e0bffc17 	ldw	r2,-16(fp)
 10130a4:	e0bff615 	stw	r2,-40(fp)
 10130a8:	e0bff617 	ldw	r2,-40(fp)
 10130ac:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 10130b0:	e03fff15 	stw	zero,-4(fp)
 10130b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10130b8:	e037883a 	mov	sp,fp
 10130bc:	dfc00117 	ldw	ra,4(sp)
 10130c0:	df000017 	ldw	fp,0(sp)
 10130c4:	dec00204 	addi	sp,sp,8
 10130c8:	f800283a 	ret

010130cc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 10130cc:	defffb04 	addi	sp,sp,-20
 10130d0:	df000415 	stw	fp,16(sp)
 10130d4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 10130d8:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10130dc:	0005303a 	rdctl	r2,status
 10130e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10130e4:	e0fffd17 	ldw	r3,-12(fp)
 10130e8:	00bfff84 	movi	r2,-2
 10130ec:	1884703a 	and	r2,r3,r2
 10130f0:	1001703a 	wrctl	status,r2
  
  return context;
 10130f4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 10130f8:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 10130fc:	008040b4 	movhi	r2,258
 1013100:	10a68604 	addi	r2,r2,-26088
 1013104:	10800017 	ldw	r2,0(r2)
 1013108:	e0bfff15 	stw	r2,-4(fp)
 101310c:	e0bffe17 	ldw	r2,-8(fp)
 1013110:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013114:	e0bffc17 	ldw	r2,-16(fp)
 1013118:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 101311c:	e0bfff17 	ldw	r2,-4(fp)
}
 1013120:	e037883a 	mov	sp,fp
 1013124:	df000017 	ldw	fp,0(sp)
 1013128:	dec00104 	addi	sp,sp,4
 101312c:	f800283a 	ret

01013130 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 1013130:	defffb04 	addi	sp,sp,-20
 1013134:	df000415 	stw	fp,16(sp)
 1013138:	df000404 	addi	fp,sp,16
 101313c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 1013140:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013144:	0005303a 	rdctl	r2,status
 1013148:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101314c:	e0fffd17 	ldw	r3,-12(fp)
 1013150:	00bfff84 	movi	r2,-2
 1013154:	1884703a 	and	r2,r3,r2
 1013158:	1001703a 	wrctl	status,r2
  
  return context;
 101315c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 1013160:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 1013164:	00c040b4 	movhi	r3,258
 1013168:	18e68604 	addi	r3,r3,-26088
 101316c:	e0bfff17 	ldw	r2,-4(fp)
 1013170:	18800015 	stw	r2,0(r3)
 1013174:	e0bffe17 	ldw	r2,-8(fp)
 1013178:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101317c:	e0bffc17 	ldw	r2,-16(fp)
 1013180:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 1013184:	e037883a 	mov	sp,fp
 1013188:	df000017 	ldw	fp,0(sp)
 101318c:	dec00104 	addi	sp,sp,4
 1013190:	f800283a 	ret

01013194 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1013194:	defffd04 	addi	sp,sp,-12
 1013198:	dfc00215 	stw	ra,8(sp)
 101319c:	df000115 	stw	fp,4(sp)
 10131a0:	df000104 	addi	fp,sp,4
 10131a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2, nios2);
 10131a8:	10152ac0 	call	10152ac <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 10131ac:	00800044 	movi	r2,1
 10131b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 10131b4:	e037883a 	mov	sp,fp
 10131b8:	dfc00117 	ldw	ra,4(sp)
 10131bc:	df000017 	ldw	fp,0(sp)
 10131c0:	dec00204 	addi	sp,sp,8
 10131c4:	f800283a 	ret

010131c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 10131c8:	defffe04 	addi	sp,sp,-8
 10131cc:	dfc00115 	stw	ra,4(sp)
 10131d0:	df000015 	stw	fp,0(sp)
 10131d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 10131d8:	01244014 	movui	r4,37120
 10131dc:	000b883a 	mov	r5,zero
 10131e0:	018001c4 	movi	r6,7
 10131e4:	01c0fa04 	movi	r7,1000
 10131e8:	10140480 	call	1014048 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 10131ec:	01004074 	movhi	r4,257
 10131f0:	211b5204 	addi	r4,r4,27976
 10131f4:	000b883a 	mov	r5,zero
 10131f8:	01800144 	movi	r6,5
 10131fc:	10133c40 	call	10133c4 <altera_avalon_jtag_uart_init>
 1013200:	01004074 	movhi	r4,257
 1013204:	211b4804 	addi	r4,r4,27936
 1013208:	10132440 	call	1013244 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
 101320c:	00e40014 	movui	r3,36864
 1013210:	00800044 	movi	r2,1
 1013214:	18800035 	stwio	r2,0(r3)
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( DE2_LCD, DE2_LCD);
 1013218:	01004074 	movhi	r4,257
 101321c:	211f6304 	addi	r4,r4,32140
 1013220:	10141880 	call	1014188 <alt_up_character_lcd_init>
 1013224:	01004074 	movhi	r4,257
 1013228:	211f6304 	addi	r4,r4,32140
 101322c:	10132440 	call	1013244 <alt_dev_reg>
}
 1013230:	e037883a 	mov	sp,fp
 1013234:	dfc00117 	ldw	ra,4(sp)
 1013238:	df000017 	ldw	fp,0(sp)
 101323c:	dec00204 	addi	sp,sp,8
 1013240:	f800283a 	ret

01013244 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 1013244:	defffd04 	addi	sp,sp,-12
 1013248:	dfc00215 	stw	ra,8(sp)
 101324c:	df000115 	stw	fp,4(sp)
 1013250:	df000104 	addi	fp,sp,4
 1013254:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 1013258:	e13fff17 	ldw	r4,-4(fp)
 101325c:	01404074 	movhi	r5,257
 1013260:	295f7604 	addi	r5,r5,32216
 1013264:	10147780 	call	1014778 <alt_dev_llist_insert>
}
 1013268:	e037883a 	mov	sp,fp
 101326c:	dfc00117 	ldw	ra,4(sp)
 1013270:	df000017 	ldw	fp,0(sp)
 1013274:	dec00204 	addi	sp,sp,8
 1013278:	f800283a 	ret

0101327c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 101327c:	defffa04 	addi	sp,sp,-24
 1013280:	dfc00515 	stw	ra,20(sp)
 1013284:	df000415 	stw	fp,16(sp)
 1013288:	df000404 	addi	fp,sp,16
 101328c:	e13ffd15 	stw	r4,-12(fp)
 1013290:	e17ffe15 	stw	r5,-8(fp)
 1013294:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1013298:	e0bffd17 	ldw	r2,-12(fp)
 101329c:	10800017 	ldw	r2,0(r2)
 10132a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10132a4:	e0bffc17 	ldw	r2,-16(fp)
 10132a8:	11000a04 	addi	r4,r2,40
 10132ac:	e0bffd17 	ldw	r2,-12(fp)
 10132b0:	11c00217 	ldw	r7,8(r2)
 10132b4:	e17ffe17 	ldw	r5,-8(fp)
 10132b8:	e1bfff17 	ldw	r6,-4(fp)
 10132bc:	1013a3c0 	call	1013a3c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10132c0:	e037883a 	mov	sp,fp
 10132c4:	dfc00117 	ldw	ra,4(sp)
 10132c8:	df000017 	ldw	fp,0(sp)
 10132cc:	dec00204 	addi	sp,sp,8
 10132d0:	f800283a 	ret

010132d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10132d4:	defffa04 	addi	sp,sp,-24
 10132d8:	dfc00515 	stw	ra,20(sp)
 10132dc:	df000415 	stw	fp,16(sp)
 10132e0:	df000404 	addi	fp,sp,16
 10132e4:	e13ffd15 	stw	r4,-12(fp)
 10132e8:	e17ffe15 	stw	r5,-8(fp)
 10132ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10132f0:	e0bffd17 	ldw	r2,-12(fp)
 10132f4:	10800017 	ldw	r2,0(r2)
 10132f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10132fc:	e0bffc17 	ldw	r2,-16(fp)
 1013300:	11000a04 	addi	r4,r2,40
 1013304:	e0bffd17 	ldw	r2,-12(fp)
 1013308:	11c00217 	ldw	r7,8(r2)
 101330c:	e17ffe17 	ldw	r5,-8(fp)
 1013310:	e1bfff17 	ldw	r6,-4(fp)
 1013314:	1013cfc0 	call	1013cfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1013318:	e037883a 	mov	sp,fp
 101331c:	dfc00117 	ldw	ra,4(sp)
 1013320:	df000017 	ldw	fp,0(sp)
 1013324:	dec00204 	addi	sp,sp,8
 1013328:	f800283a 	ret

0101332c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 101332c:	defffc04 	addi	sp,sp,-16
 1013330:	dfc00315 	stw	ra,12(sp)
 1013334:	df000215 	stw	fp,8(sp)
 1013338:	df000204 	addi	fp,sp,8
 101333c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1013340:	e0bfff17 	ldw	r2,-4(fp)
 1013344:	10800017 	ldw	r2,0(r2)
 1013348:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 101334c:	e0bffe17 	ldw	r2,-8(fp)
 1013350:	11000a04 	addi	r4,r2,40
 1013354:	e0bfff17 	ldw	r2,-4(fp)
 1013358:	11400217 	ldw	r5,8(r2)
 101335c:	10138d40 	call	10138d4 <altera_avalon_jtag_uart_close>
}
 1013360:	e037883a 	mov	sp,fp
 1013364:	dfc00117 	ldw	ra,4(sp)
 1013368:	df000017 	ldw	fp,0(sp)
 101336c:	dec00204 	addi	sp,sp,8
 1013370:	f800283a 	ret

01013374 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1013374:	defffa04 	addi	sp,sp,-24
 1013378:	dfc00515 	stw	ra,20(sp)
 101337c:	df000415 	stw	fp,16(sp)
 1013380:	df000404 	addi	fp,sp,16
 1013384:	e13ffd15 	stw	r4,-12(fp)
 1013388:	e17ffe15 	stw	r5,-8(fp)
 101338c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1013390:	e0bffd17 	ldw	r2,-12(fp)
 1013394:	10800017 	ldw	r2,0(r2)
 1013398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 101339c:	e0bffc17 	ldw	r2,-16(fp)
 10133a0:	11000a04 	addi	r4,r2,40
 10133a4:	e17ffe17 	ldw	r5,-8(fp)
 10133a8:	e1bfff17 	ldw	r6,-4(fp)
 10133ac:	10139480 	call	1013948 <altera_avalon_jtag_uart_ioctl>
}
 10133b0:	e037883a 	mov	sp,fp
 10133b4:	dfc00117 	ldw	ra,4(sp)
 10133b8:	df000017 	ldw	fp,0(sp)
 10133bc:	dec00204 	addi	sp,sp,8
 10133c0:	f800283a 	ret

010133c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10133c4:	defff404 	addi	sp,sp,-48
 10133c8:	dfc00b15 	stw	ra,44(sp)
 10133cc:	df000a15 	stw	fp,40(sp)
 10133d0:	df000a04 	addi	fp,sp,40
 10133d4:	e13ffd15 	stw	r4,-12(fp)
 10133d8:	e17ffe15 	stw	r5,-8(fp)
 10133dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 10133e0:	e0bffd17 	ldw	r2,-12(fp)
 10133e4:	10800c04 	addi	r2,r2,48
 10133e8:	e0bffb15 	stw	r2,-20(fp)
 10133ec:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 10133f0:	e13ffc0b 	ldhu	r4,-16(fp)
 10133f4:	e17ffc84 	addi	r5,fp,-14
 10133f8:	100d3c80 	call	100d3c8 <OSFlagCreate>
 10133fc:	1007883a 	mov	r3,r2
 1013400:	e0bffb17 	ldw	r2,-20(fp)
 1013404:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 1013408:	e0bffd17 	ldw	r2,-12(fp)
 101340c:	10800a04 	addi	r2,r2,40
 1013410:	e0bff915 	stw	r2,-28(fp)
 1013414:	00800044 	movi	r2,1
 1013418:	e0bffa0d 	sth	r2,-24(fp)
 101341c:	e13ffa0b 	ldhu	r4,-24(fp)
 1013420:	10105d00 	call	10105d0 <OSSemCreate>
 1013424:	1007883a 	mov	r3,r2
 1013428:	e0bff917 	ldw	r2,-28(fp)
 101342c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 1013430:	e0bffd17 	ldw	r2,-12(fp)
 1013434:	10800b04 	addi	r2,r2,44
 1013438:	e0bff715 	stw	r2,-36(fp)
 101343c:	00800044 	movi	r2,1
 1013440:	e0bff80d 	sth	r2,-32(fp)
 1013444:	e13ff80b 	ldhu	r4,-32(fp)
 1013448:	10105d00 	call	10105d0 <OSSemCreate>
 101344c:	1007883a 	mov	r3,r2
 1013450:	e0bff717 	ldw	r2,-36(fp)
 1013454:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1013458:	e0fffd17 	ldw	r3,-12(fp)
 101345c:	00800044 	movi	r2,1
 1013460:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1013464:	e0bffd17 	ldw	r2,-12(fp)
 1013468:	10800017 	ldw	r2,0(r2)
 101346c:	11000104 	addi	r4,r2,4
 1013470:	e0bffd17 	ldw	r2,-12(fp)
 1013474:	10800817 	ldw	r2,32(r2)
 1013478:	1007883a 	mov	r3,r2
 101347c:	2005883a 	mov	r2,r4
 1013480:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1013484:	e13ffe17 	ldw	r4,-8(fp)
 1013488:	e17fff17 	ldw	r5,-4(fp)
 101348c:	d8000015 	stw	zero,0(sp)
 1013490:	01804074 	movhi	r6,257
 1013494:	318d3f04 	addi	r6,r6,13564
 1013498:	e1fffd17 	ldw	r7,-12(fp)
 101349c:	1014a040 	call	1014a04 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 10134a0:	e0bffd17 	ldw	r2,-12(fp)
 10134a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 10134a8:	e0bffd17 	ldw	r2,-12(fp)
 10134ac:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10134b0:	008040b4 	movhi	r2,258
 10134b4:	10a68b04 	addi	r2,r2,-26068
 10134b8:	10800017 	ldw	r2,0(r2)
 10134bc:	100b883a 	mov	r5,r2
 10134c0:	01804074 	movhi	r6,257
 10134c4:	318df004 	addi	r6,r6,14272
 10134c8:	e1fffd17 	ldw	r7,-12(fp)
 10134cc:	10146080 	call	1014608 <alt_alarm_start>
 10134d0:	1004403a 	cmpge	r2,r2,zero
 10134d4:	1000041e 	bne	r2,zero,10134e8 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 10134d8:	e0fffd17 	ldw	r3,-12(fp)
 10134dc:	00a00034 	movhi	r2,32768
 10134e0:	10bfffc4 	addi	r2,r2,-1
 10134e4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 10134e8:	e037883a 	mov	sp,fp
 10134ec:	dfc00117 	ldw	ra,4(sp)
 10134f0:	df000017 	ldw	fp,0(sp)
 10134f4:	dec00204 	addi	sp,sp,8
 10134f8:	f800283a 	ret

010134fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10134fc:	defff204 	addi	sp,sp,-56
 1013500:	dfc00d15 	stw	ra,52(sp)
 1013504:	df000c15 	stw	fp,48(sp)
 1013508:	df000c04 	addi	fp,sp,48
 101350c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1013510:	e0bfff17 	ldw	r2,-4(fp)
 1013514:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1013518:	e0bffd17 	ldw	r2,-12(fp)
 101351c:	10800017 	ldw	r2,0(r2)
 1013520:	e0bffc15 	stw	r2,-16(fp)
 1013524:	00000006 	br	1013528 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1013528:	e0bffc17 	ldw	r2,-16(fp)
 101352c:	10800104 	addi	r2,r2,4
 1013530:	10800037 	ldwio	r2,0(r2)
 1013534:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1013538:	e0bffb17 	ldw	r2,-20(fp)
 101353c:	1080c00c 	andi	r2,r2,768
 1013540:	1005003a 	cmpeq	r2,r2,zero
 1013544:	1000991e 	bne	r2,zero,10137ac <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1013548:	e0bffb17 	ldw	r2,-20(fp)
 101354c:	1080400c 	andi	r2,r2,256
 1013550:	1005003a 	cmpeq	r2,r2,zero
 1013554:	1000481e 	bne	r2,zero,1013678 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1013558:	00800074 	movhi	r2,1
 101355c:	e0bffa15 	stw	r2,-24(fp)
 1013560:	00000006 	br	1013564 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1013564:	e0bffd17 	ldw	r2,-12(fp)
 1013568:	10800d17 	ldw	r2,52(r2)
 101356c:	10800044 	addi	r2,r2,1
 1013570:	1081ffcc 	andi	r2,r2,2047
 1013574:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1013578:	e0bffd17 	ldw	r2,-12(fp)
 101357c:	10c00e17 	ldw	r3,56(r2)
 1013580:	e0bff917 	ldw	r2,-28(fp)
 1013584:	18802826 	beq	r3,r2,1013628 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1013588:	e0bffc17 	ldw	r2,-16(fp)
 101358c:	10800037 	ldwio	r2,0(r2)
 1013590:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1013594:	e0bffa17 	ldw	r2,-24(fp)
 1013598:	10a0000c 	andi	r2,r2,32768
 101359c:	1005003a 	cmpeq	r2,r2,zero
 10135a0:	1000211e 	bne	r2,zero,1013628 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 10135a4:	e0bffd17 	ldw	r2,-12(fp)
 10135a8:	10c00d17 	ldw	r3,52(r2)
 10135ac:	e0bffa17 	ldw	r2,-24(fp)
 10135b0:	1009883a 	mov	r4,r2
 10135b4:	e0bffd17 	ldw	r2,-12(fp)
 10135b8:	1885883a 	add	r2,r3,r2
 10135bc:	10801104 	addi	r2,r2,68
 10135c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10135c4:	e0bffd17 	ldw	r2,-12(fp)
 10135c8:	10800d17 	ldw	r2,52(r2)
 10135cc:	10800044 	addi	r2,r2,1
 10135d0:	10c1ffcc 	andi	r3,r2,2047
 10135d4:	e0bffd17 	ldw	r2,-12(fp)
 10135d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 10135dc:	e0bffd17 	ldw	r2,-12(fp)
 10135e0:	10800c17 	ldw	r2,48(r2)
 10135e4:	e0bff615 	stw	r2,-40(fp)
 10135e8:	00800044 	movi	r2,1
 10135ec:	e0bff70d 	sth	r2,-36(fp)
 10135f0:	00800044 	movi	r2,1
 10135f4:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 10135f8:	008040b4 	movhi	r2,258
 10135fc:	10a67644 	addi	r2,r2,-26151
 1013600:	10800003 	ldbu	r2,0(r2)
 1013604:	10803fcc 	andi	r2,r2,255
 1013608:	1005003a 	cmpeq	r2,r2,zero
 101360c:	103fd51e 	bne	r2,zero,1013564 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
 1013610:	e17ff70b 	ldhu	r5,-36(fp)
 1013614:	e1bff783 	ldbu	r6,-34(fp)
 1013618:	e1fffe04 	addi	r7,fp,-8
 101361c:	e13ff617 	ldw	r4,-40(fp)
 1013620:	100e0f00 	call	100e0f0 <OSFlagPost>
    return err;
 1013624:	003fcf06 	br	1013564 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1013628:	e0bffa17 	ldw	r2,-24(fp)
 101362c:	10bfffec 	andhi	r2,r2,65535
 1013630:	1005003a 	cmpeq	r2,r2,zero
 1013634:	1000101e 	bne	r2,zero,1013678 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1013638:	e0bffd17 	ldw	r2,-12(fp)
 101363c:	10c00817 	ldw	r3,32(r2)
 1013640:	00bfff84 	movi	r2,-2
 1013644:	1886703a 	and	r3,r3,r2
 1013648:	e0bffd17 	ldw	r2,-12(fp)
 101364c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1013650:	e0bffc17 	ldw	r2,-16(fp)
 1013654:	11000104 	addi	r4,r2,4
 1013658:	e0bffd17 	ldw	r2,-12(fp)
 101365c:	10800817 	ldw	r2,32(r2)
 1013660:	1007883a 	mov	r3,r2
 1013664:	2005883a 	mov	r2,r4
 1013668:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101366c:	e0bffc17 	ldw	r2,-16(fp)
 1013670:	10800104 	addi	r2,r2,4
 1013674:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1013678:	e0bffb17 	ldw	r2,-20(fp)
 101367c:	1080800c 	andi	r2,r2,512
 1013680:	1005003a 	cmpeq	r2,r2,zero
 1013684:	103fa81e 	bne	r2,zero,1013528 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1013688:	e0bffb17 	ldw	r2,-20(fp)
 101368c:	10bfffec 	andhi	r2,r2,65535
 1013690:	1004d43a 	srli	r2,r2,16
 1013694:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1013698:	00002706 	br	1013738 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 101369c:	e13ffc17 	ldw	r4,-16(fp)
 10136a0:	e0bffd17 	ldw	r2,-12(fp)
 10136a4:	10c01017 	ldw	r3,64(r2)
 10136a8:	e0bffd17 	ldw	r2,-12(fp)
 10136ac:	1885883a 	add	r2,r3,r2
 10136b0:	10821104 	addi	r2,r2,2116
 10136b4:	10800003 	ldbu	r2,0(r2)
 10136b8:	10c03fcc 	andi	r3,r2,255
 10136bc:	18c0201c 	xori	r3,r3,128
 10136c0:	18ffe004 	addi	r3,r3,-128
 10136c4:	2005883a 	mov	r2,r4
 10136c8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10136cc:	e0bffd17 	ldw	r2,-12(fp)
 10136d0:	10801017 	ldw	r2,64(r2)
 10136d4:	10800044 	addi	r2,r2,1
 10136d8:	10c1ffcc 	andi	r3,r2,2047
 10136dc:	e0bffd17 	ldw	r2,-12(fp)
 10136e0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 10136e4:	e0bffd17 	ldw	r2,-12(fp)
 10136e8:	10800c17 	ldw	r2,48(r2)
 10136ec:	e0bff415 	stw	r2,-48(fp)
 10136f0:	00800084 	movi	r2,2
 10136f4:	e0bff50d 	sth	r2,-44(fp)
 10136f8:	00800044 	movi	r2,1
 10136fc:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1013700:	008040b4 	movhi	r2,258
 1013704:	10a67644 	addi	r2,r2,-26151
 1013708:	10800003 	ldbu	r2,0(r2)
 101370c:	10803fcc 	andi	r2,r2,255
 1013710:	1005003a 	cmpeq	r2,r2,zero
 1013714:	1000051e 	bne	r2,zero,101372c <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
 1013718:	e17ff50b 	ldhu	r5,-44(fp)
 101371c:	e1bff583 	ldbu	r6,-42(fp)
 1013720:	e1fffe44 	addi	r7,fp,-7
 1013724:	e13ff417 	ldw	r4,-48(fp)
 1013728:	100e0f00 	call	100e0f0 <OSFlagPost>

        space--;
 101372c:	e0bff817 	ldw	r2,-32(fp)
 1013730:	10bfffc4 	addi	r2,r2,-1
 1013734:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1013738:	e0bff817 	ldw	r2,-32(fp)
 101373c:	1005003a 	cmpeq	r2,r2,zero
 1013740:	1000051e 	bne	r2,zero,1013758 <altera_avalon_jtag_uart_irq+0x25c>
 1013744:	e0bffd17 	ldw	r2,-12(fp)
 1013748:	10c01017 	ldw	r3,64(r2)
 101374c:	e0bffd17 	ldw	r2,-12(fp)
 1013750:	10800f17 	ldw	r2,60(r2)
 1013754:	18bfd11e 	bne	r3,r2,101369c <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1013758:	e0bff817 	ldw	r2,-32(fp)
 101375c:	1005003a 	cmpeq	r2,r2,zero
 1013760:	103f711e 	bne	r2,zero,1013528 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1013764:	e0bffd17 	ldw	r2,-12(fp)
 1013768:	10c00817 	ldw	r3,32(r2)
 101376c:	00bfff44 	movi	r2,-3
 1013770:	1886703a 	and	r3,r3,r2
 1013774:	e0bffd17 	ldw	r2,-12(fp)
 1013778:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101377c:	e0bffd17 	ldw	r2,-12(fp)
 1013780:	10800017 	ldw	r2,0(r2)
 1013784:	11000104 	addi	r4,r2,4
 1013788:	e0bffd17 	ldw	r2,-12(fp)
 101378c:	10800817 	ldw	r2,32(r2)
 1013790:	1007883a 	mov	r3,r2
 1013794:	2005883a 	mov	r2,r4
 1013798:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 101379c:	e0bffc17 	ldw	r2,-16(fp)
 10137a0:	10800104 	addi	r2,r2,4
 10137a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 10137a8:	003f5f06 	br	1013528 <altera_avalon_jtag_uart_irq+0x2c>
}
 10137ac:	e037883a 	mov	sp,fp
 10137b0:	dfc00117 	ldw	ra,4(sp)
 10137b4:	df000017 	ldw	fp,0(sp)
 10137b8:	dec00204 	addi	sp,sp,8
 10137bc:	f800283a 	ret

010137c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 10137c0:	defff804 	addi	sp,sp,-32
 10137c4:	dfc00715 	stw	ra,28(sp)
 10137c8:	df000615 	stw	fp,24(sp)
 10137cc:	df000604 	addi	fp,sp,24
 10137d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10137d4:	e0bfff17 	ldw	r2,-4(fp)
 10137d8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10137dc:	e0bffd17 	ldw	r2,-12(fp)
 10137e0:	10800017 	ldw	r2,0(r2)
 10137e4:	10800104 	addi	r2,r2,4
 10137e8:	10800037 	ldwio	r2,0(r2)
 10137ec:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10137f0:	e0bffc17 	ldw	r2,-16(fp)
 10137f4:	1081000c 	andi	r2,r2,1024
 10137f8:	1005003a 	cmpeq	r2,r2,zero
 10137fc:	10000c1e 	bne	r2,zero,1013830 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1013800:	e0bffd17 	ldw	r2,-12(fp)
 1013804:	10800017 	ldw	r2,0(r2)
 1013808:	11000104 	addi	r4,r2,4
 101380c:	e0bffd17 	ldw	r2,-12(fp)
 1013810:	10800817 	ldw	r2,32(r2)
 1013814:	10810014 	ori	r2,r2,1024
 1013818:	1007883a 	mov	r3,r2
 101381c:	2005883a 	mov	r2,r4
 1013820:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1013824:	e0bffd17 	ldw	r2,-12(fp)
 1013828:	10000915 	stw	zero,36(r2)
 101382c:	00002106 	br	10138b4 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1013830:	e0bffd17 	ldw	r2,-12(fp)
 1013834:	10c00917 	ldw	r3,36(r2)
 1013838:	00a00034 	movhi	r2,32768
 101383c:	10bfff04 	addi	r2,r2,-4
 1013840:	10c01c36 	bltu	r2,r3,10138b4 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 1013844:	e0bffd17 	ldw	r2,-12(fp)
 1013848:	10800917 	ldw	r2,36(r2)
 101384c:	10c00044 	addi	r3,r2,1
 1013850:	e0bffd17 	ldw	r2,-12(fp)
 1013854:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 1013858:	e0bffd17 	ldw	r2,-12(fp)
 101385c:	10c00917 	ldw	r3,36(r2)
 1013860:	e0bffd17 	ldw	r2,-12(fp)
 1013864:	10800117 	ldw	r2,4(r2)
 1013868:	18801236 	bltu	r3,r2,10138b4 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 101386c:	e0bffd17 	ldw	r2,-12(fp)
 1013870:	10800c17 	ldw	r2,48(r2)
 1013874:	e0bffa15 	stw	r2,-24(fp)
 1013878:	00800104 	movi	r2,4
 101387c:	e0bffb0d 	sth	r2,-20(fp)
 1013880:	00800044 	movi	r2,1
 1013884:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 1013888:	008040b4 	movhi	r2,258
 101388c:	10a67644 	addi	r2,r2,-26151
 1013890:	10800003 	ldbu	r2,0(r2)
 1013894:	10803fcc 	andi	r2,r2,255
 1013898:	1005003a 	cmpeq	r2,r2,zero
 101389c:	1000051e 	bne	r2,zero,10138b4 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 10138a0:	e17ffb0b 	ldhu	r5,-20(fp)
 10138a4:	e1bffb83 	ldbu	r6,-18(fp)
 10138a8:	e1fffe04 	addi	r7,fp,-8
 10138ac:	e13ffa17 	ldw	r4,-24(fp)
 10138b0:	100e0f00 	call	100e0f0 <OSFlagPost>
 10138b4:	008040b4 	movhi	r2,258
 10138b8:	10a68b04 	addi	r2,r2,-26068
 10138bc:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 10138c0:	e037883a 	mov	sp,fp
 10138c4:	dfc00117 	ldw	ra,4(sp)
 10138c8:	df000017 	ldw	fp,0(sp)
 10138cc:	dec00204 	addi	sp,sp,8
 10138d0:	f800283a 	ret

010138d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10138d4:	defffc04 	addi	sp,sp,-16
 10138d8:	df000315 	stw	fp,12(sp)
 10138dc:	df000304 	addi	fp,sp,12
 10138e0:	e13ffd15 	stw	r4,-12(fp)
 10138e4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 10138e8:	00000706 	br	1013908 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 10138ec:	e0bffe17 	ldw	r2,-8(fp)
 10138f0:	1090000c 	andi	r2,r2,16384
 10138f4:	1005003a 	cmpeq	r2,r2,zero
 10138f8:	1000031e 	bne	r2,zero,1013908 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 10138fc:	00bffd44 	movi	r2,-11
 1013900:	e0bfff15 	stw	r2,-4(fp)
 1013904:	00000b06 	br	1013934 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1013908:	e0bffd17 	ldw	r2,-12(fp)
 101390c:	10c01017 	ldw	r3,64(r2)
 1013910:	e0bffd17 	ldw	r2,-12(fp)
 1013914:	10800f17 	ldw	r2,60(r2)
 1013918:	18800526 	beq	r3,r2,1013930 <altera_avalon_jtag_uart_close+0x5c>
 101391c:	e0bffd17 	ldw	r2,-12(fp)
 1013920:	10c00917 	ldw	r3,36(r2)
 1013924:	e0bffd17 	ldw	r2,-12(fp)
 1013928:	10800117 	ldw	r2,4(r2)
 101392c:	18bfef36 	bltu	r3,r2,10138ec <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1013930:	e03fff15 	stw	zero,-4(fp)
 1013934:	e0bfff17 	ldw	r2,-4(fp)
}
 1013938:	e037883a 	mov	sp,fp
 101393c:	df000017 	ldw	fp,0(sp)
 1013940:	dec00104 	addi	sp,sp,4
 1013944:	f800283a 	ret

01013948 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1013948:	defff804 	addi	sp,sp,-32
 101394c:	df000715 	stw	fp,28(sp)
 1013950:	df000704 	addi	fp,sp,28
 1013954:	e13ffb15 	stw	r4,-20(fp)
 1013958:	e17ffc15 	stw	r5,-16(fp)
 101395c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1013960:	00bff9c4 	movi	r2,-25
 1013964:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1013968:	e0bffc17 	ldw	r2,-16(fp)
 101396c:	e0bfff15 	stw	r2,-4(fp)
 1013970:	e0ffff17 	ldw	r3,-4(fp)
 1013974:	189a8060 	cmpeqi	r2,r3,27137
 1013978:	1000041e 	bne	r2,zero,101398c <altera_avalon_jtag_uart_ioctl+0x44>
 101397c:	e0ffff17 	ldw	r3,-4(fp)
 1013980:	189a80a0 	cmpeqi	r2,r3,27138
 1013984:	10001b1e 	bne	r2,zero,10139f4 <altera_avalon_jtag_uart_ioctl+0xac>
 1013988:	00002706 	br	1013a28 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 101398c:	e0bffb17 	ldw	r2,-20(fp)
 1013990:	10c00117 	ldw	r3,4(r2)
 1013994:	00a00034 	movhi	r2,32768
 1013998:	10bfffc4 	addi	r2,r2,-1
 101399c:	18802226 	beq	r3,r2,1013a28 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10139a0:	e0bffd17 	ldw	r2,-12(fp)
 10139a4:	10800017 	ldw	r2,0(r2)
 10139a8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10139ac:	e0bff917 	ldw	r2,-28(fp)
 10139b0:	10800090 	cmplti	r2,r2,2
 10139b4:	1000071e 	bne	r2,zero,10139d4 <altera_avalon_jtag_uart_ioctl+0x8c>
 10139b8:	e0fff917 	ldw	r3,-28(fp)
 10139bc:	00a00034 	movhi	r2,32768
 10139c0:	10bfffc4 	addi	r2,r2,-1
 10139c4:	18800326 	beq	r3,r2,10139d4 <altera_avalon_jtag_uart_ioctl+0x8c>
 10139c8:	e0bff917 	ldw	r2,-28(fp)
 10139cc:	e0bffe15 	stw	r2,-8(fp)
 10139d0:	00000306 	br	10139e0 <altera_avalon_jtag_uart_ioctl+0x98>
 10139d4:	00e00034 	movhi	r3,32768
 10139d8:	18ffff84 	addi	r3,r3,-2
 10139dc:	e0fffe15 	stw	r3,-8(fp)
 10139e0:	e0bffb17 	ldw	r2,-20(fp)
 10139e4:	e0fffe17 	ldw	r3,-8(fp)
 10139e8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 10139ec:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 10139f0:	00000d06 	br	1013a28 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 10139f4:	e0bffb17 	ldw	r2,-20(fp)
 10139f8:	10c00117 	ldw	r3,4(r2)
 10139fc:	00a00034 	movhi	r2,32768
 1013a00:	10bfffc4 	addi	r2,r2,-1
 1013a04:	18800826 	beq	r3,r2,1013a28 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1013a08:	e13ffd17 	ldw	r4,-12(fp)
 1013a0c:	e0bffb17 	ldw	r2,-20(fp)
 1013a10:	10c00917 	ldw	r3,36(r2)
 1013a14:	e0bffb17 	ldw	r2,-20(fp)
 1013a18:	10800117 	ldw	r2,4(r2)
 1013a1c:	1885803a 	cmpltu	r2,r3,r2
 1013a20:	20800015 	stw	r2,0(r4)
      rc = 0;
 1013a24:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1013a28:	e0bffa17 	ldw	r2,-24(fp)
}
 1013a2c:	e037883a 	mov	sp,fp
 1013a30:	df000017 	ldw	fp,0(sp)
 1013a34:	dec00104 	addi	sp,sp,4
 1013a38:	f800283a 	ret

01013a3c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1013a3c:	deffeb04 	addi	sp,sp,-84
 1013a40:	dfc01415 	stw	ra,80(sp)
 1013a44:	df001315 	stw	fp,76(sp)
 1013a48:	df001304 	addi	fp,sp,76
 1013a4c:	e13ffb15 	stw	r4,-20(fp)
 1013a50:	e17ffc15 	stw	r5,-16(fp)
 1013a54:	e1bffd15 	stw	r6,-12(fp)
 1013a58:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1013a5c:	e0bffc17 	ldw	r2,-16(fp)
 1013a60:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 1013a64:	e0bffb17 	ldw	r2,-20(fp)
 1013a68:	10800a17 	ldw	r2,40(r2)
 1013a6c:	e0bff315 	stw	r2,-52(fp)
 1013a70:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 1013a74:	e17ff40b 	ldhu	r5,-48(fp)
 1013a78:	e1bffa44 	addi	r6,fp,-23
 1013a7c:	e13ff317 	ldw	r4,-52(fp)
 1013a80:	10109840 	call	1010984 <OSSemPend>

  while (space > 0)
 1013a84:	00006406 	br	1013c18 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1013a88:	e0bffb17 	ldw	r2,-20(fp)
 1013a8c:	10800d17 	ldw	r2,52(r2)
 1013a90:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 1013a94:	e0bffb17 	ldw	r2,-20(fp)
 1013a98:	10800e17 	ldw	r2,56(r2)
 1013a9c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 1013aa0:	e0fff617 	ldw	r3,-40(fp)
 1013aa4:	e0bff517 	ldw	r2,-44(fp)
 1013aa8:	18800536 	bltu	r3,r2,1013ac0 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 1013aac:	e0bff617 	ldw	r2,-40(fp)
 1013ab0:	e0fff517 	ldw	r3,-44(fp)
 1013ab4:	10c5c83a 	sub	r2,r2,r3
 1013ab8:	e0bff715 	stw	r2,-36(fp)
 1013abc:	00000406 	br	1013ad0 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1013ac0:	00820004 	movi	r2,2048
 1013ac4:	e0fff517 	ldw	r3,-44(fp)
 1013ac8:	10c5c83a 	sub	r2,r2,r3
 1013acc:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1013ad0:	e0bff717 	ldw	r2,-36(fp)
 1013ad4:	1005003a 	cmpeq	r2,r2,zero
 1013ad8:	10001f1e 	bne	r2,zero,1013b58 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 1013adc:	e0fffd17 	ldw	r3,-12(fp)
 1013ae0:	e0bff717 	ldw	r2,-36(fp)
 1013ae4:	1880022e 	bgeu	r3,r2,1013af0 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 1013ae8:	e0bffd17 	ldw	r2,-12(fp)
 1013aec:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1013af0:	e0bffb17 	ldw	r2,-20(fp)
 1013af4:	10c01104 	addi	r3,r2,68
 1013af8:	e0bff517 	ldw	r2,-44(fp)
 1013afc:	1887883a 	add	r3,r3,r2
 1013b00:	e0bff917 	ldw	r2,-28(fp)
 1013b04:	1009883a 	mov	r4,r2
 1013b08:	180b883a 	mov	r5,r3
 1013b0c:	e1bff717 	ldw	r6,-36(fp)
 1013b10:	10059780 	call	1005978 <memcpy>
      ptr   += n;
 1013b14:	e0fff717 	ldw	r3,-36(fp)
 1013b18:	e0bff917 	ldw	r2,-28(fp)
 1013b1c:	10c5883a 	add	r2,r2,r3
 1013b20:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 1013b24:	e0fffd17 	ldw	r3,-12(fp)
 1013b28:	e0bff717 	ldw	r2,-36(fp)
 1013b2c:	1885c83a 	sub	r2,r3,r2
 1013b30:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1013b34:	e0fff517 	ldw	r3,-44(fp)
 1013b38:	e0bff717 	ldw	r2,-36(fp)
 1013b3c:	1885883a 	add	r2,r3,r2
 1013b40:	10c1ffcc 	andi	r3,r2,2047
 1013b44:	e0bffb17 	ldw	r2,-20(fp)
 1013b48:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 1013b4c:	e0bffd17 	ldw	r2,-12(fp)
 1013b50:	10800048 	cmpgei	r2,r2,1
 1013b54:	103fcc1e 	bne	r2,zero,1013a88 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1013b58:	e0fff917 	ldw	r3,-28(fp)
 1013b5c:	e0bffc17 	ldw	r2,-16(fp)
 1013b60:	1880301e 	bne	r3,r2,1013c24 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1013b64:	e0bffe17 	ldw	r2,-8(fp)
 1013b68:	1090000c 	andi	r2,r2,16384
 1013b6c:	1004c03a 	cmpne	r2,r2,zero
 1013b70:	10002c1e 	bne	r2,zero,1013c24 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 1013b74:	008040b4 	movhi	r2,258
 1013b78:	10a67644 	addi	r2,r2,-26151
 1013b7c:	10800003 	ldbu	r2,0(r2)
 1013b80:	10803fcc 	andi	r2,r2,255
 1013b84:	10800058 	cmpnei	r2,r2,1
 1013b88:	1000161e 	bne	r2,zero,1013be4 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 1013b8c:	e0bffb17 	ldw	r2,-20(fp)
 1013b90:	10800c17 	ldw	r2,48(r2)
 1013b94:	e0bff015 	stw	r2,-64(fp)
 1013b98:	00800144 	movi	r2,5
 1013b9c:	e0bff10d 	sth	r2,-60(fp)
 1013ba0:	00bfe0c4 	movi	r2,-125
 1013ba4:	e0bff185 	stb	r2,-58(fp)
 1013ba8:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1013bac:	008040b4 	movhi	r2,258
 1013bb0:	10a67644 	addi	r2,r2,-26151
 1013bb4:	10800003 	ldbu	r2,0(r2)
 1013bb8:	10803fcc 	andi	r2,r2,255
 1013bbc:	1005003a 	cmpeq	r2,r2,zero
 1013bc0:	1000111e 	bne	r2,zero,1013c08 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 1013bc4:	e17ff10b 	ldhu	r5,-60(fp)
 1013bc8:	e1bff183 	ldbu	r6,-58(fp)
 1013bcc:	e1fff20b 	ldhu	r7,-56(fp)
 1013bd0:	e0bffa04 	addi	r2,fp,-24
 1013bd4:	d8800015 	stw	r2,0(sp)
 1013bd8:	e13ff017 	ldw	r4,-64(fp)
 1013bdc:	100da440 	call	100da44 <OSFlagPend>
    return err;
 1013be0:	00000906 	br	1013c08 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1013be4:	e0bffb17 	ldw	r2,-20(fp)
 1013be8:	10c00d17 	ldw	r3,52(r2)
 1013bec:	e0bff617 	ldw	r2,-40(fp)
 1013bf0:	1880051e 	bne	r3,r2,1013c08 <altera_avalon_jtag_uart_read+0x1cc>
 1013bf4:	e0bffb17 	ldw	r2,-20(fp)
 1013bf8:	10c00917 	ldw	r3,36(r2)
 1013bfc:	e0bffb17 	ldw	r2,-20(fp)
 1013c00:	10800117 	ldw	r2,4(r2)
 1013c04:	18bff736 	bltu	r3,r2,1013be4 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1013c08:	e0bffb17 	ldw	r2,-20(fp)
 1013c0c:	10c00d17 	ldw	r3,52(r2)
 1013c10:	e0bff617 	ldw	r2,-40(fp)
 1013c14:	18800326 	beq	r3,r2,1013c24 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1013c18:	e0bffd17 	ldw	r2,-12(fp)
 1013c1c:	10800048 	cmpgei	r2,r2,1
 1013c20:	103f991e 	bne	r2,zero,1013a88 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 1013c24:	e0bffb17 	ldw	r2,-20(fp)
 1013c28:	11000a17 	ldw	r4,40(r2)
 1013c2c:	1010d7c0 	call	1010d7c <OSSemPost>

  if (ptr != buffer)
 1013c30:	e0fff917 	ldw	r3,-28(fp)
 1013c34:	e0bffc17 	ldw	r2,-16(fp)
 1013c38:	18801926 	beq	r3,r2,1013ca0 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013c3c:	0005303a 	rdctl	r2,status
 1013c40:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013c44:	e0ffef17 	ldw	r3,-68(fp)
 1013c48:	00bfff84 	movi	r2,-2
 1013c4c:	1884703a 	and	r2,r3,r2
 1013c50:	1001703a 	wrctl	status,r2
  
  return context;
 1013c54:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1013c58:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1013c5c:	e0bffb17 	ldw	r2,-20(fp)
 1013c60:	10800817 	ldw	r2,32(r2)
 1013c64:	10c00054 	ori	r3,r2,1
 1013c68:	e0bffb17 	ldw	r2,-20(fp)
 1013c6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1013c70:	e0bffb17 	ldw	r2,-20(fp)
 1013c74:	10800017 	ldw	r2,0(r2)
 1013c78:	11000104 	addi	r4,r2,4
 1013c7c:	e0bffb17 	ldw	r2,-20(fp)
 1013c80:	10800817 	ldw	r2,32(r2)
 1013c84:	1007883a 	mov	r3,r2
 1013c88:	2005883a 	mov	r2,r4
 1013c8c:	10c00035 	stwio	r3,0(r2)
 1013c90:	e0bff817 	ldw	r2,-32(fp)
 1013c94:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013c98:	e0bfee17 	ldw	r2,-72(fp)
 1013c9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1013ca0:	e0fff917 	ldw	r3,-28(fp)
 1013ca4:	e0bffc17 	ldw	r2,-16(fp)
 1013ca8:	18800526 	beq	r3,r2,1013cc0 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 1013cac:	e0fff917 	ldw	r3,-28(fp)
 1013cb0:	e0bffc17 	ldw	r2,-16(fp)
 1013cb4:	1887c83a 	sub	r3,r3,r2
 1013cb8:	e0ffff15 	stw	r3,-4(fp)
 1013cbc:	00000906 	br	1013ce4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 1013cc0:	e0bffe17 	ldw	r2,-8(fp)
 1013cc4:	1090000c 	andi	r2,r2,16384
 1013cc8:	1005003a 	cmpeq	r2,r2,zero
 1013ccc:	1000031e 	bne	r2,zero,1013cdc <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 1013cd0:	00bffd44 	movi	r2,-11
 1013cd4:	e0bfff15 	stw	r2,-4(fp)
 1013cd8:	00000206 	br	1013ce4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 1013cdc:	00bffec4 	movi	r2,-5
 1013ce0:	e0bfff15 	stw	r2,-4(fp)
 1013ce4:	e0bfff17 	ldw	r2,-4(fp)
}
 1013ce8:	e037883a 	mov	sp,fp
 1013cec:	dfc00117 	ldw	ra,4(sp)
 1013cf0:	df000017 	ldw	fp,0(sp)
 1013cf4:	dec00204 	addi	sp,sp,8
 1013cf8:	f800283a 	ret

01013cfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1013cfc:	deffeb04 	addi	sp,sp,-84
 1013d00:	dfc01415 	stw	ra,80(sp)
 1013d04:	df001315 	stw	fp,76(sp)
 1013d08:	df001304 	addi	fp,sp,76
 1013d0c:	e13ffb15 	stw	r4,-20(fp)
 1013d10:	e17ffc15 	stw	r5,-16(fp)
 1013d14:	e1bffd15 	stw	r6,-12(fp)
 1013d18:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1013d1c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1013d20:	e0bffc17 	ldw	r2,-16(fp)
 1013d24:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 1013d28:	e0bffb17 	ldw	r2,-20(fp)
 1013d2c:	10800b17 	ldw	r2,44(r2)
 1013d30:	e0bff315 	stw	r2,-52(fp)
 1013d34:	e03ff40d 	sth	zero,-48(fp)
 1013d38:	e17ff40b 	ldhu	r5,-48(fp)
 1013d3c:	e1bffa04 	addi	r6,fp,-24
 1013d40:	e13ff317 	ldw	r4,-52(fp)
 1013d44:	10109840 	call	1010984 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1013d48:	00003a06 	br	1013e34 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1013d4c:	e0bffb17 	ldw	r2,-20(fp)
 1013d50:	10800f17 	ldw	r2,60(r2)
 1013d54:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1013d58:	e0bffb17 	ldw	r2,-20(fp)
 1013d5c:	10801017 	ldw	r2,64(r2)
 1013d60:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 1013d64:	e0fff917 	ldw	r3,-28(fp)
 1013d68:	e0bff817 	ldw	r2,-32(fp)
 1013d6c:	1880062e 	bgeu	r3,r2,1013d88 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 1013d70:	e0fff817 	ldw	r3,-32(fp)
 1013d74:	e0bff917 	ldw	r2,-28(fp)
 1013d78:	1885c83a 	sub	r2,r3,r2
 1013d7c:	10bfffc4 	addi	r2,r2,-1
 1013d80:	e0bff715 	stw	r2,-36(fp)
 1013d84:	00000c06 	br	1013db8 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 1013d88:	e0bff817 	ldw	r2,-32(fp)
 1013d8c:	1005003a 	cmpeq	r2,r2,zero
 1013d90:	1000051e 	bne	r2,zero,1013da8 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1013d94:	00820004 	movi	r2,2048
 1013d98:	e0fff917 	ldw	r3,-28(fp)
 1013d9c:	10c5c83a 	sub	r2,r2,r3
 1013da0:	e0bff715 	stw	r2,-36(fp)
 1013da4:	00000406 	br	1013db8 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1013da8:	0081ffc4 	movi	r2,2047
 1013dac:	e0fff917 	ldw	r3,-28(fp)
 1013db0:	10c5c83a 	sub	r2,r2,r3
 1013db4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 1013db8:	e0bff717 	ldw	r2,-36(fp)
 1013dbc:	1005003a 	cmpeq	r2,r2,zero
 1013dc0:	10001f1e 	bne	r2,zero,1013e40 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 1013dc4:	e0fffd17 	ldw	r3,-12(fp)
 1013dc8:	e0bff717 	ldw	r2,-36(fp)
 1013dcc:	1880022e 	bgeu	r3,r2,1013dd8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 1013dd0:	e0bffd17 	ldw	r2,-12(fp)
 1013dd4:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1013dd8:	e0bffb17 	ldw	r2,-20(fp)
 1013ddc:	10c21104 	addi	r3,r2,2116
 1013de0:	e0bff917 	ldw	r2,-28(fp)
 1013de4:	1885883a 	add	r2,r3,r2
 1013de8:	e0fffc17 	ldw	r3,-16(fp)
 1013dec:	1009883a 	mov	r4,r2
 1013df0:	180b883a 	mov	r5,r3
 1013df4:	e1bff717 	ldw	r6,-36(fp)
 1013df8:	10059780 	call	1005978 <memcpy>
      ptr   += n;
 1013dfc:	e0fff717 	ldw	r3,-36(fp)
 1013e00:	e0bffc17 	ldw	r2,-16(fp)
 1013e04:	10c5883a 	add	r2,r2,r3
 1013e08:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1013e0c:	e0fffd17 	ldw	r3,-12(fp)
 1013e10:	e0bff717 	ldw	r2,-36(fp)
 1013e14:	1885c83a 	sub	r2,r3,r2
 1013e18:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1013e1c:	e0fff917 	ldw	r3,-28(fp)
 1013e20:	e0bff717 	ldw	r2,-36(fp)
 1013e24:	1885883a 	add	r2,r3,r2
 1013e28:	10c1ffcc 	andi	r3,r2,2047
 1013e2c:	e0bffb17 	ldw	r2,-20(fp)
 1013e30:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1013e34:	e0bffd17 	ldw	r2,-12(fp)
 1013e38:	10800048 	cmpgei	r2,r2,1
 1013e3c:	103fc31e 	bne	r2,zero,1013d4c <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1013e40:	0005303a 	rdctl	r2,status
 1013e44:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1013e48:	e0fff217 	ldw	r3,-56(fp)
 1013e4c:	00bfff84 	movi	r2,-2
 1013e50:	1884703a 	and	r2,r3,r2
 1013e54:	1001703a 	wrctl	status,r2
  
  return context;
 1013e58:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1013e5c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1013e60:	e0bffb17 	ldw	r2,-20(fp)
 1013e64:	10800817 	ldw	r2,32(r2)
 1013e68:	10c00094 	ori	r3,r2,2
 1013e6c:	e0bffb17 	ldw	r2,-20(fp)
 1013e70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1013e74:	e0bffb17 	ldw	r2,-20(fp)
 1013e78:	10800017 	ldw	r2,0(r2)
 1013e7c:	11000104 	addi	r4,r2,4
 1013e80:	e0bffb17 	ldw	r2,-20(fp)
 1013e84:	10800817 	ldw	r2,32(r2)
 1013e88:	1007883a 	mov	r3,r2
 1013e8c:	2005883a 	mov	r2,r4
 1013e90:	10c00035 	stwio	r3,0(r2)
 1013e94:	e0bff617 	ldw	r2,-40(fp)
 1013e98:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1013e9c:	e0bff117 	ldw	r2,-60(fp)
 1013ea0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1013ea4:	e0bffd17 	ldw	r2,-12(fp)
 1013ea8:	10800050 	cmplti	r2,r2,1
 1013eac:	10002d1e 	bne	r2,zero,1013f64 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 1013eb0:	e0bffe17 	ldw	r2,-8(fp)
 1013eb4:	1090000c 	andi	r2,r2,16384
 1013eb8:	1004c03a 	cmpne	r2,r2,zero
 1013ebc:	10002c1e 	bne	r2,zero,1013f70 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 1013ec0:	008040b4 	movhi	r2,258
 1013ec4:	10a67644 	addi	r2,r2,-26151
 1013ec8:	10800003 	ldbu	r2,0(r2)
 1013ecc:	10803fcc 	andi	r2,r2,255
 1013ed0:	10800058 	cmpnei	r2,r2,1
 1013ed4:	1000161e 	bne	r2,zero,1013f30 <altera_avalon_jtag_uart_write+0x234>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 1013ed8:	e0bffb17 	ldw	r2,-20(fp)
 1013edc:	10800c17 	ldw	r2,48(r2)
 1013ee0:	e0bfee15 	stw	r2,-72(fp)
 1013ee4:	00800184 	movi	r2,6
 1013ee8:	e0bfef0d 	sth	r2,-68(fp)
 1013eec:	00bfe0c4 	movi	r2,-125
 1013ef0:	e0bfef85 	stb	r2,-66(fp)
 1013ef4:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 1013ef8:	008040b4 	movhi	r2,258
 1013efc:	10a67644 	addi	r2,r2,-26151
 1013f00:	10800003 	ldbu	r2,0(r2)
 1013f04:	10803fcc 	andi	r2,r2,255
 1013f08:	1005003a 	cmpeq	r2,r2,zero
 1013f0c:	1000111e 	bne	r2,zero,1013f54 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 1013f10:	e17fef0b 	ldhu	r5,-68(fp)
 1013f14:	e1bfef83 	ldbu	r6,-66(fp)
 1013f18:	e1fff00b 	ldhu	r7,-64(fp)
 1013f1c:	e0bffa44 	addi	r2,fp,-23
 1013f20:	d8800015 	stw	r2,0(sp)
 1013f24:	e13fee17 	ldw	r4,-72(fp)
 1013f28:	100da440 	call	100da44 <OSFlagPend>
    return err;
 1013f2c:	00000906 	br	1013f54 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1013f30:	e0bffb17 	ldw	r2,-20(fp)
 1013f34:	10c01017 	ldw	r3,64(r2)
 1013f38:	e0bff817 	ldw	r2,-32(fp)
 1013f3c:	1880051e 	bne	r3,r2,1013f54 <altera_avalon_jtag_uart_write+0x258>
 1013f40:	e0bffb17 	ldw	r2,-20(fp)
 1013f44:	10c00917 	ldw	r3,36(r2)
 1013f48:	e0bffb17 	ldw	r2,-20(fp)
 1013f4c:	10800117 	ldw	r2,4(r2)
 1013f50:	18bff736 	bltu	r3,r2,1013f30 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1013f54:	e0bffb17 	ldw	r2,-20(fp)
 1013f58:	10c01017 	ldw	r3,64(r2)
 1013f5c:	e0bff817 	ldw	r2,-32(fp)
 1013f60:	18800326 	beq	r3,r2,1013f70 <altera_avalon_jtag_uart_write+0x274>
         break;
    }
  }
  while (count > 0);
 1013f64:	e0bffd17 	ldw	r2,-12(fp)
 1013f68:	10800048 	cmpgei	r2,r2,1
 1013f6c:	103fb11e 	bne	r2,zero,1013e34 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 1013f70:	e0bffb17 	ldw	r2,-20(fp)
 1013f74:	11000b17 	ldw	r4,44(r2)
 1013f78:	1010d7c0 	call	1010d7c <OSSemPost>

  if (ptr != start)
 1013f7c:	e0fffc17 	ldw	r3,-16(fp)
 1013f80:	e0bff517 	ldw	r2,-44(fp)
 1013f84:	18800526 	beq	r3,r2,1013f9c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 1013f88:	e0fffc17 	ldw	r3,-16(fp)
 1013f8c:	e0bff517 	ldw	r2,-44(fp)
 1013f90:	1887c83a 	sub	r3,r3,r2
 1013f94:	e0ffff15 	stw	r3,-4(fp)
 1013f98:	00000906 	br	1013fc0 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 1013f9c:	e0bffe17 	ldw	r2,-8(fp)
 1013fa0:	1090000c 	andi	r2,r2,16384
 1013fa4:	1005003a 	cmpeq	r2,r2,zero
 1013fa8:	1000031e 	bne	r2,zero,1013fb8 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 1013fac:	00bffd44 	movi	r2,-11
 1013fb0:	e0bfff15 	stw	r2,-4(fp)
 1013fb4:	00000206 	br	1013fc0 <altera_avalon_jtag_uart_write+0x2c4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1013fb8:	00bffec4 	movi	r2,-5
 1013fbc:	e0bfff15 	stw	r2,-4(fp)
 1013fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 1013fc4:	e037883a 	mov	sp,fp
 1013fc8:	dfc00117 	ldw	ra,4(sp)
 1013fcc:	df000017 	ldw	fp,0(sp)
 1013fd0:	dec00204 	addi	sp,sp,8
 1013fd4:	f800283a 	ret

01013fd8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1013fd8:	defffa04 	addi	sp,sp,-24
 1013fdc:	dfc00515 	stw	ra,20(sp)
 1013fe0:	df000415 	stw	fp,16(sp)
 1013fe4:	df000404 	addi	fp,sp,16
 1013fe8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 1013fec:	e0bfff17 	ldw	r2,-4(fp)
 1013ff0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 1013ff4:	e0bfff17 	ldw	r2,-4(fp)
 1013ff8:	10800104 	addi	r2,r2,4
 1013ffc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014000:	0005303a 	rdctl	r2,status
 1014004:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014008:	e0fffd17 	ldw	r3,-12(fp)
 101400c:	00bfff84 	movi	r2,-2
 1014010:	1884703a 	and	r2,r3,r2
 1014014:	1001703a 	wrctl	status,r2
  
  return context;
 1014018:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 101401c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 1014020:	101519c0 	call	101519c <alt_tick>
 1014024:	e0bffe17 	ldw	r2,-8(fp)
 1014028:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101402c:	e0bffc17 	ldw	r2,-16(fp)
 1014030:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1014034:	e037883a 	mov	sp,fp
 1014038:	dfc00117 	ldw	ra,4(sp)
 101403c:	df000017 	ldw	fp,0(sp)
 1014040:	dec00204 	addi	sp,sp,8
 1014044:	f800283a 	ret

01014048 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1014048:	defff804 	addi	sp,sp,-32
 101404c:	dfc00715 	stw	ra,28(sp)
 1014050:	df000615 	stw	fp,24(sp)
 1014054:	df000604 	addi	fp,sp,24
 1014058:	e13ffc15 	stw	r4,-16(fp)
 101405c:	e17ffd15 	stw	r5,-12(fp)
 1014060:	e1bffe15 	stw	r6,-8(fp)
 1014064:	e1ffff15 	stw	r7,-4(fp)
 1014068:	e0bfff17 	ldw	r2,-4(fp)
 101406c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1014070:	008040b4 	movhi	r2,258
 1014074:	10a68b04 	addi	r2,r2,-26068
 1014078:	10800017 	ldw	r2,0(r2)
 101407c:	1004c03a 	cmpne	r2,r2,zero
 1014080:	1000041e 	bne	r2,zero,1014094 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1014084:	00c040b4 	movhi	r3,258
 1014088:	18e68b04 	addi	r3,r3,-26068
 101408c:	e0bffb17 	ldw	r2,-20(fp)
 1014090:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1014094:	e0bffc17 	ldw	r2,-16(fp)
 1014098:	10800104 	addi	r2,r2,4
 101409c:	1007883a 	mov	r3,r2
 10140a0:	008001c4 	movi	r2,7
 10140a4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 10140a8:	d8000015 	stw	zero,0(sp)
 10140ac:	e13ffd17 	ldw	r4,-12(fp)
 10140b0:	e17ffe17 	ldw	r5,-8(fp)
 10140b4:	01804074 	movhi	r6,257
 10140b8:	318ff604 	addi	r6,r6,16344
 10140bc:	e1fffc17 	ldw	r7,-16(fp)
 10140c0:	1014a040 	call	1014a04 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 10140c4:	e037883a 	mov	sp,fp
 10140c8:	dfc00117 	ldw	ra,4(sp)
 10140cc:	df000017 	ldw	fp,0(sp)
 10140d0:	dec00204 	addi	sp,sp,8
 10140d4:	f800283a 	ret

010140d8 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 10140d8:	defffc04 	addi	sp,sp,-16
 10140dc:	df000315 	stw	fp,12(sp)
 10140e0:	df000304 	addi	fp,sp,12
 10140e4:	e13ffe15 	stw	r4,-8(fp)
 10140e8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 10140ec:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 10140f0:	e0bfff17 	ldw	r2,-4(fp)
 10140f4:	1004c03a 	cmpne	r2,r2,zero
 10140f8:	1000061e 	bne	r2,zero,1014114 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 10140fc:	e0bffe17 	ldw	r2,-8(fp)
 1014100:	1007883a 	mov	r3,r2
 1014104:	e0bffd03 	ldbu	r2,-12(fp)
 1014108:	10c4b03a 	or	r2,r2,r3
 101410c:	e0bffd05 	stb	r2,-12(fp)
 1014110:	00000806 	br	1014134 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1014114:	e0bffe17 	ldw	r2,-8(fp)
 1014118:	1007883a 	mov	r3,r2
 101411c:	e0bffd03 	ldbu	r2,-12(fp)
 1014120:	10c4b03a 	or	r2,r2,r3
 1014124:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1014128:	e0bffd03 	ldbu	r2,-12(fp)
 101412c:	10801014 	ori	r2,r2,64
 1014130:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1014134:	e0fffd03 	ldbu	r3,-12(fp)
 1014138:	00bfe004 	movi	r2,-128
 101413c:	1884b03a 	or	r2,r3,r2
 1014140:	10803fcc 	andi	r2,r2,255
}
 1014144:	e037883a 	mov	sp,fp
 1014148:	df000017 	ldw	fp,0(sp)
 101414c:	dec00104 	addi	sp,sp,4
 1014150:	f800283a 	ret

01014154 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1014154:	defffd04 	addi	sp,sp,-12
 1014158:	df000215 	stw	fp,8(sp)
 101415c:	df000204 	addi	fp,sp,8
 1014160:	e13ffe15 	stw	r4,-8(fp)
 1014164:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1014168:	e0bffe17 	ldw	r2,-8(fp)
 101416c:	10800a17 	ldw	r2,40(r2)
 1014170:	e0ffff03 	ldbu	r3,-4(fp)
 1014174:	10c00025 	stbio	r3,0(r2)
}
 1014178:	e037883a 	mov	sp,fp
 101417c:	df000017 	ldw	fp,0(sp)
 1014180:	dec00104 	addi	sp,sp,4
 1014184:	f800283a 	ret

01014188 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1014188:	defffe04 	addi	sp,sp,-8
 101418c:	df000115 	stw	fp,4(sp)
 1014190:	df000104 	addi	fp,sp,4
 1014194:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1014198:	e0bfff17 	ldw	r2,-4(fp)
 101419c:	10800a17 	ldw	r2,40(r2)
 10141a0:	1007883a 	mov	r3,r2
 10141a4:	00800044 	movi	r2,1
 10141a8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 10141ac:	e037883a 	mov	sp,fp
 10141b0:	df000017 	ldw	fp,0(sp)
 10141b4:	dec00104 	addi	sp,sp,4
 10141b8:	f800283a 	ret

010141bc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 10141bc:	defffc04 	addi	sp,sp,-16
 10141c0:	dfc00315 	stw	ra,12(sp)
 10141c4:	df000215 	stw	fp,8(sp)
 10141c8:	df000204 	addi	fp,sp,8
 10141cc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 10141d0:	e13fff17 	ldw	r4,-4(fp)
 10141d4:	01404074 	movhi	r5,257
 10141d8:	295f7604 	addi	r5,r5,32216
 10141dc:	10149540 	call	1014954 <alt_find_dev>
 10141e0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10141e4:	e0bffe17 	ldw	r2,-8(fp)
}
 10141e8:	e037883a 	mov	sp,fp
 10141ec:	dfc00117 	ldw	ra,4(sp)
 10141f0:	df000017 	ldw	fp,0(sp)
 10141f4:	dec00204 	addi	sp,sp,8
 10141f8:	f800283a 	ret

010141fc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 10141fc:	defffb04 	addi	sp,sp,-20
 1014200:	df000415 	stw	fp,16(sp)
 1014204:	df000404 	addi	fp,sp,16
 1014208:	e13ffd15 	stw	r4,-12(fp)
 101420c:	e17ffe15 	stw	r5,-8(fp)
 1014210:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1014214:	e03ffc15 	stw	zero,-16(fp)
 1014218:	00000f06 	br	1014258 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 101421c:	e0bffd17 	ldw	r2,-12(fp)
 1014220:	10800a17 	ldw	r2,40(r2)
 1014224:	11000044 	addi	r4,r2,1
 1014228:	e0fffc17 	ldw	r3,-16(fp)
 101422c:	e0bffe17 	ldw	r2,-8(fp)
 1014230:	1885883a 	add	r2,r3,r2
 1014234:	10800003 	ldbu	r2,0(r2)
 1014238:	10c03fcc 	andi	r3,r2,255
 101423c:	18c0201c 	xori	r3,r3,128
 1014240:	18ffe004 	addi	r3,r3,-128
 1014244:	2005883a 	mov	r2,r4
 1014248:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 101424c:	e0bffc17 	ldw	r2,-16(fp)
 1014250:	10800044 	addi	r2,r2,1
 1014254:	e0bffc15 	stw	r2,-16(fp)
 1014258:	e0fffc17 	ldw	r3,-16(fp)
 101425c:	e0bfff17 	ldw	r2,-4(fp)
 1014260:	18bfee36 	bltu	r3,r2,101421c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1014264:	e037883a 	mov	sp,fp
 1014268:	df000017 	ldw	fp,0(sp)
 101426c:	dec00104 	addi	sp,sp,4
 1014270:	f800283a 	ret

01014274 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1014274:	defffd04 	addi	sp,sp,-12
 1014278:	df000215 	stw	fp,8(sp)
 101427c:	df000204 	addi	fp,sp,8
 1014280:	e13ffe15 	stw	r4,-8(fp)
 1014284:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1014288:	00000d06 	br	10142c0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 101428c:	e0bffe17 	ldw	r2,-8(fp)
 1014290:	10800a17 	ldw	r2,40(r2)
 1014294:	11000044 	addi	r4,r2,1
 1014298:	e0bfff17 	ldw	r2,-4(fp)
 101429c:	10800003 	ldbu	r2,0(r2)
 10142a0:	10c03fcc 	andi	r3,r2,255
 10142a4:	18c0201c 	xori	r3,r3,128
 10142a8:	18ffe004 	addi	r3,r3,-128
 10142ac:	2005883a 	mov	r2,r4
 10142b0:	10c00025 	stbio	r3,0(r2)
		++ptr;
 10142b4:	e0bfff17 	ldw	r2,-4(fp)
 10142b8:	10800044 	addi	r2,r2,1
 10142bc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 10142c0:	e0bfff17 	ldw	r2,-4(fp)
 10142c4:	10800003 	ldbu	r2,0(r2)
 10142c8:	10803fcc 	andi	r2,r2,255
 10142cc:	1080201c 	xori	r2,r2,128
 10142d0:	10bfe004 	addi	r2,r2,-128
 10142d4:	1004c03a 	cmpne	r2,r2,zero
 10142d8:	103fec1e 	bne	r2,zero,101428c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 10142dc:	e037883a 	mov	sp,fp
 10142e0:	df000017 	ldw	fp,0(sp)
 10142e4:	dec00104 	addi	sp,sp,4
 10142e8:	f800283a 	ret

010142ec <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 10142ec:	defffb04 	addi	sp,sp,-20
 10142f0:	dfc00415 	stw	ra,16(sp)
 10142f4:	df000315 	stw	fp,12(sp)
 10142f8:	df000304 	addi	fp,sp,12
 10142fc:	e13ffd15 	stw	r4,-12(fp)
 1014300:	e17ffe15 	stw	r5,-8(fp)
 1014304:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1014308:	e0bffd17 	ldw	r2,-12(fp)
 101430c:	10800017 	ldw	r2,0(r2)
 1014310:	1009883a 	mov	r4,r2
 1014314:	e1bfff17 	ldw	r6,-4(fp)
 1014318:	e17ffe17 	ldw	r5,-8(fp)
 101431c:	10141fc0 	call	10141fc <alt_up_character_lcd_write>
	return 0;
 1014320:	0005883a 	mov	r2,zero
}
 1014324:	e037883a 	mov	sp,fp
 1014328:	dfc00117 	ldw	ra,4(sp)
 101432c:	df000017 	ldw	fp,0(sp)
 1014330:	dec00204 	addi	sp,sp,8
 1014334:	f800283a 	ret

01014338 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1014338:	defff904 	addi	sp,sp,-28
 101433c:	dfc00615 	stw	ra,24(sp)
 1014340:	df000515 	stw	fp,20(sp)
 1014344:	df000504 	addi	fp,sp,20
 1014348:	e13ffc15 	stw	r4,-16(fp)
 101434c:	e17ffd15 	stw	r5,-12(fp)
 1014350:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1014354:	e0bffd17 	ldw	r2,-12(fp)
 1014358:	10800a28 	cmpgeui	r2,r2,40
 101435c:	1000031e 	bne	r2,zero,101436c <alt_up_character_lcd_set_cursor_pos+0x34>
 1014360:	e0bffe17 	ldw	r2,-8(fp)
 1014364:	108000b0 	cmpltui	r2,r2,2
 1014368:	1000031e 	bne	r2,zero,1014378 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 101436c:	00bfffc4 	movi	r2,-1
 1014370:	e0bfff15 	stw	r2,-4(fp)
 1014374:	00000806 	br	1014398 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1014378:	e13ffd17 	ldw	r4,-12(fp)
 101437c:	e17ffe17 	ldw	r5,-8(fp)
 1014380:	10140d80 	call	10140d8 <get_DDRAM_addr>
 1014384:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1014388:	e17ffb03 	ldbu	r5,-20(fp)
 101438c:	e13ffc17 	ldw	r4,-16(fp)
 1014390:	10141540 	call	1014154 <alt_up_character_lcd_send_cmd>
	return 0;
 1014394:	e03fff15 	stw	zero,-4(fp)
 1014398:	e0bfff17 	ldw	r2,-4(fp)
}
 101439c:	e037883a 	mov	sp,fp
 10143a0:	dfc00117 	ldw	ra,4(sp)
 10143a4:	df000017 	ldw	fp,0(sp)
 10143a8:	dec00204 	addi	sp,sp,8
 10143ac:	f800283a 	ret

010143b0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 10143b0:	defff904 	addi	sp,sp,-28
 10143b4:	dfc00615 	stw	ra,24(sp)
 10143b8:	df000515 	stw	fp,20(sp)
 10143bc:	df000504 	addi	fp,sp,20
 10143c0:	e13ffc15 	stw	r4,-16(fp)
 10143c4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 10143c8:	e0bffd17 	ldw	r2,-12(fp)
 10143cc:	1005003a 	cmpeq	r2,r2,zero
 10143d0:	10001e1e 	bne	r2,zero,101444c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 10143d4:	e0bffd17 	ldw	r2,-12(fp)
 10143d8:	10800050 	cmplti	r2,r2,1
 10143dc:	1000031e 	bne	r2,zero,10143ec <alt_up_character_lcd_shift_cursor+0x3c>
 10143e0:	00800504 	movi	r2,20
 10143e4:	e0bfff05 	stb	r2,-4(fp)
 10143e8:	00000206 	br	10143f4 <alt_up_character_lcd_shift_cursor+0x44>
 10143ec:	00c00404 	movi	r3,16
 10143f0:	e0ffff05 	stb	r3,-4(fp)
 10143f4:	e0bfff03 	ldbu	r2,-4(fp)
 10143f8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10143fc:	e0fffd17 	ldw	r3,-12(fp)
 1014400:	e0fffe15 	stw	r3,-8(fp)
 1014404:	e0fffe17 	ldw	r3,-8(fp)
 1014408:	1804403a 	cmpge	r2,r3,zero
 101440c:	1000031e 	bne	r2,zero,101441c <alt_up_character_lcd_shift_cursor+0x6c>
 1014410:	e0bffe17 	ldw	r2,-8(fp)
 1014414:	0085c83a 	sub	r2,zero,r2
 1014418:	e0bffe15 	stw	r2,-8(fp)
 101441c:	e0fffe17 	ldw	r3,-8(fp)
 1014420:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1014424:	00000306 	br	1014434 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1014428:	e17ffb43 	ldbu	r5,-19(fp)
 101442c:	e13ffc17 	ldw	r4,-16(fp)
 1014430:	10141540 	call	1014154 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1014434:	e0bffb03 	ldbu	r2,-20(fp)
 1014438:	10bfffc4 	addi	r2,r2,-1
 101443c:	e0bffb05 	stb	r2,-20(fp)
 1014440:	e0bffb03 	ldbu	r2,-20(fp)
 1014444:	10803fd8 	cmpnei	r2,r2,255
 1014448:	103ff71e 	bne	r2,zero,1014428 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 101444c:	e037883a 	mov	sp,fp
 1014450:	dfc00117 	ldw	ra,4(sp)
 1014454:	df000017 	ldw	fp,0(sp)
 1014458:	dec00204 	addi	sp,sp,8
 101445c:	f800283a 	ret

01014460 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1014460:	defff904 	addi	sp,sp,-28
 1014464:	dfc00615 	stw	ra,24(sp)
 1014468:	df000515 	stw	fp,20(sp)
 101446c:	df000504 	addi	fp,sp,20
 1014470:	e13ffc15 	stw	r4,-16(fp)
 1014474:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1014478:	e0bffd17 	ldw	r2,-12(fp)
 101447c:	1005003a 	cmpeq	r2,r2,zero
 1014480:	10001e1e 	bne	r2,zero,10144fc <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1014484:	e0bffd17 	ldw	r2,-12(fp)
 1014488:	10800050 	cmplti	r2,r2,1
 101448c:	1000031e 	bne	r2,zero,101449c <alt_up_character_lcd_shift_display+0x3c>
 1014490:	00800704 	movi	r2,28
 1014494:	e0bfff05 	stb	r2,-4(fp)
 1014498:	00000206 	br	10144a4 <alt_up_character_lcd_shift_display+0x44>
 101449c:	00c00604 	movi	r3,24
 10144a0:	e0ffff05 	stb	r3,-4(fp)
 10144a4:	e0bfff03 	ldbu	r2,-4(fp)
 10144a8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10144ac:	e0fffd17 	ldw	r3,-12(fp)
 10144b0:	e0fffe15 	stw	r3,-8(fp)
 10144b4:	e0fffe17 	ldw	r3,-8(fp)
 10144b8:	1804403a 	cmpge	r2,r3,zero
 10144bc:	1000031e 	bne	r2,zero,10144cc <alt_up_character_lcd_shift_display+0x6c>
 10144c0:	e0bffe17 	ldw	r2,-8(fp)
 10144c4:	0085c83a 	sub	r2,zero,r2
 10144c8:	e0bffe15 	stw	r2,-8(fp)
 10144cc:	e0fffe17 	ldw	r3,-8(fp)
 10144d0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10144d4:	00000306 	br	10144e4 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10144d8:	e17ffb43 	ldbu	r5,-19(fp)
 10144dc:	e13ffc17 	ldw	r4,-16(fp)
 10144e0:	10141540 	call	1014154 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10144e4:	e0bffb03 	ldbu	r2,-20(fp)
 10144e8:	10bfffc4 	addi	r2,r2,-1
 10144ec:	e0bffb05 	stb	r2,-20(fp)
 10144f0:	e0bffb03 	ldbu	r2,-20(fp)
 10144f4:	10803fd8 	cmpnei	r2,r2,255
 10144f8:	103ff71e 	bne	r2,zero,10144d8 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10144fc:	e037883a 	mov	sp,fp
 1014500:	dfc00117 	ldw	ra,4(sp)
 1014504:	df000017 	ldw	fp,0(sp)
 1014508:	dec00204 	addi	sp,sp,8
 101450c:	f800283a 	ret

01014510 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1014510:	defff904 	addi	sp,sp,-28
 1014514:	dfc00615 	stw	ra,24(sp)
 1014518:	df000515 	stw	fp,20(sp)
 101451c:	df000504 	addi	fp,sp,20
 1014520:	e13ffc15 	stw	r4,-16(fp)
 1014524:	e17ffd15 	stw	r5,-12(fp)
 1014528:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 101452c:	e0bffd17 	ldw	r2,-12(fp)
 1014530:	10800a28 	cmpgeui	r2,r2,40
 1014534:	1000031e 	bne	r2,zero,1014544 <alt_up_character_lcd_erase_pos+0x34>
 1014538:	e0bffe17 	ldw	r2,-8(fp)
 101453c:	108000b0 	cmpltui	r2,r2,2
 1014540:	1000031e 	bne	r2,zero,1014550 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1014544:	00bfffc4 	movi	r2,-1
 1014548:	e0bfff15 	stw	r2,-4(fp)
 101454c:	00000e06 	br	1014588 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1014550:	e13ffd17 	ldw	r4,-12(fp)
 1014554:	e17ffe17 	ldw	r5,-8(fp)
 1014558:	10140d80 	call	10140d8 <get_DDRAM_addr>
 101455c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1014560:	e17ffb03 	ldbu	r5,-20(fp)
 1014564:	e13ffc17 	ldw	r4,-16(fp)
 1014568:	10141540 	call	1014154 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 101456c:	e0bffc17 	ldw	r2,-16(fp)
 1014570:	10800a17 	ldw	r2,40(r2)
 1014574:	10800044 	addi	r2,r2,1
 1014578:	1007883a 	mov	r3,r2
 101457c:	00800084 	movi	r2,2
 1014580:	18800025 	stbio	r2,0(r3)
	return 0;
 1014584:	e03fff15 	stw	zero,-4(fp)
 1014588:	e0bfff17 	ldw	r2,-4(fp)
}
 101458c:	e037883a 	mov	sp,fp
 1014590:	dfc00117 	ldw	ra,4(sp)
 1014594:	df000017 	ldw	fp,0(sp)
 1014598:	dec00204 	addi	sp,sp,8
 101459c:	f800283a 	ret

010145a0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 10145a0:	defffd04 	addi	sp,sp,-12
 10145a4:	dfc00215 	stw	ra,8(sp)
 10145a8:	df000115 	stw	fp,4(sp)
 10145ac:	df000104 	addi	fp,sp,4
 10145b0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 10145b4:	e13fff17 	ldw	r4,-4(fp)
 10145b8:	01400304 	movi	r5,12
 10145bc:	10141540 	call	1014154 <alt_up_character_lcd_send_cmd>
}
 10145c0:	e037883a 	mov	sp,fp
 10145c4:	dfc00117 	ldw	ra,4(sp)
 10145c8:	df000017 	ldw	fp,0(sp)
 10145cc:	dec00204 	addi	sp,sp,8
 10145d0:	f800283a 	ret

010145d4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 10145d4:	defffd04 	addi	sp,sp,-12
 10145d8:	dfc00215 	stw	ra,8(sp)
 10145dc:	df000115 	stw	fp,4(sp)
 10145e0:	df000104 	addi	fp,sp,4
 10145e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 10145e8:	e13fff17 	ldw	r4,-4(fp)
 10145ec:	014003c4 	movi	r5,15
 10145f0:	10141540 	call	1014154 <alt_up_character_lcd_send_cmd>
}
 10145f4:	e037883a 	mov	sp,fp
 10145f8:	dfc00117 	ldw	ra,4(sp)
 10145fc:	df000017 	ldw	fp,0(sp)
 1014600:	dec00204 	addi	sp,sp,8
 1014604:	f800283a 	ret

01014608 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1014608:	defff404 	addi	sp,sp,-48
 101460c:	df000b15 	stw	fp,44(sp)
 1014610:	df000b04 	addi	fp,sp,44
 1014614:	e13ffb15 	stw	r4,-20(fp)
 1014618:	e17ffc15 	stw	r5,-16(fp)
 101461c:	e1bffd15 	stw	r6,-12(fp)
 1014620:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1014624:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1014628:	008040b4 	movhi	r2,258
 101462c:	10a68b04 	addi	r2,r2,-26068
 1014630:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1014634:	1005003a 	cmpeq	r2,r2,zero
 1014638:	1000411e 	bne	r2,zero,1014740 <alt_alarm_start+0x138>
  {
    if (alarm)
 101463c:	e0bffb17 	ldw	r2,-20(fp)
 1014640:	1005003a 	cmpeq	r2,r2,zero
 1014644:	10003b1e 	bne	r2,zero,1014734 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 1014648:	e0fffb17 	ldw	r3,-20(fp)
 101464c:	e0bffd17 	ldw	r2,-12(fp)
 1014650:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1014654:	e0fffb17 	ldw	r3,-20(fp)
 1014658:	e0bffe17 	ldw	r2,-8(fp)
 101465c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014660:	0005303a 	rdctl	r2,status
 1014664:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014668:	e0fff817 	ldw	r3,-32(fp)
 101466c:	00bfff84 	movi	r2,-2
 1014670:	1884703a 	and	r2,r3,r2
 1014674:	1001703a 	wrctl	status,r2
  
  return context;
 1014678:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 101467c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1014680:	008040b4 	movhi	r2,258
 1014684:	10a68c04 	addi	r2,r2,-26064
 1014688:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 101468c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1014690:	e0fffc17 	ldw	r3,-16(fp)
 1014694:	e0bff917 	ldw	r2,-28(fp)
 1014698:	1885883a 	add	r2,r3,r2
 101469c:	10c00044 	addi	r3,r2,1
 10146a0:	e0bffb17 	ldw	r2,-20(fp)
 10146a4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 10146a8:	e0bffb17 	ldw	r2,-20(fp)
 10146ac:	10c00217 	ldw	r3,8(r2)
 10146b0:	e0bff917 	ldw	r2,-28(fp)
 10146b4:	1880042e 	bgeu	r3,r2,10146c8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 10146b8:	e0fffb17 	ldw	r3,-20(fp)
 10146bc:	00800044 	movi	r2,1
 10146c0:	18800405 	stb	r2,16(r3)
 10146c4:	00000206 	br	10146d0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10146c8:	e0bffb17 	ldw	r2,-20(fp)
 10146cc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10146d0:	e0fffb17 	ldw	r3,-20(fp)
 10146d4:	00804074 	movhi	r2,257
 10146d8:	109f9b04 	addi	r2,r2,32364
 10146dc:	e0bff615 	stw	r2,-40(fp)
 10146e0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10146e4:	e0fff717 	ldw	r3,-36(fp)
 10146e8:	e0bff617 	ldw	r2,-40(fp)
 10146ec:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10146f0:	e0bff617 	ldw	r2,-40(fp)
 10146f4:	10c00017 	ldw	r3,0(r2)
 10146f8:	e0bff717 	ldw	r2,-36(fp)
 10146fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1014700:	e0bff617 	ldw	r2,-40(fp)
 1014704:	10c00017 	ldw	r3,0(r2)
 1014708:	e0bff717 	ldw	r2,-36(fp)
 101470c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1014710:	e0fff617 	ldw	r3,-40(fp)
 1014714:	e0bff717 	ldw	r2,-36(fp)
 1014718:	18800015 	stw	r2,0(r3)
 101471c:	e0bffa17 	ldw	r2,-24(fp)
 1014720:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014724:	e0bff517 	ldw	r2,-44(fp)
 1014728:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 101472c:	e03fff15 	stw	zero,-4(fp)
 1014730:	00000506 	br	1014748 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1014734:	00bffa84 	movi	r2,-22
 1014738:	e0bfff15 	stw	r2,-4(fp)
 101473c:	00000206 	br	1014748 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1014740:	00bfde84 	movi	r2,-134
 1014744:	e0bfff15 	stw	r2,-4(fp)
 1014748:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 101474c:	e037883a 	mov	sp,fp
 1014750:	df000017 	ldw	fp,0(sp)
 1014754:	dec00104 	addi	sp,sp,4
 1014758:	f800283a 	ret

0101475c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101475c:	deffff04 	addi	sp,sp,-4
 1014760:	df000015 	stw	fp,0(sp)
 1014764:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1014768:	e037883a 	mov	sp,fp
 101476c:	df000017 	ldw	fp,0(sp)
 1014770:	dec00104 	addi	sp,sp,4
 1014774:	f800283a 	ret

01014778 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1014778:	defff904 	addi	sp,sp,-28
 101477c:	dfc00615 	stw	ra,24(sp)
 1014780:	df000515 	stw	fp,20(sp)
 1014784:	df000504 	addi	fp,sp,20
 1014788:	e13ffd15 	stw	r4,-12(fp)
 101478c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1014790:	e0bffd17 	ldw	r2,-12(fp)
 1014794:	1005003a 	cmpeq	r2,r2,zero
 1014798:	1000041e 	bne	r2,zero,10147ac <alt_dev_llist_insert+0x34>
 101479c:	e0bffd17 	ldw	r2,-12(fp)
 10147a0:	10800217 	ldw	r2,8(r2)
 10147a4:	1004c03a 	cmpne	r2,r2,zero
 10147a8:	1000071e 	bne	r2,zero,10147c8 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 10147ac:	101482c0 	call	101482c <alt_get_errno>
 10147b0:	1007883a 	mov	r3,r2
 10147b4:	00800584 	movi	r2,22
 10147b8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10147bc:	00bffa84 	movi	r2,-22
 10147c0:	e0bfff15 	stw	r2,-4(fp)
 10147c4:	00001306 	br	1014814 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10147c8:	e0fffd17 	ldw	r3,-12(fp)
 10147cc:	e0bffe17 	ldw	r2,-8(fp)
 10147d0:	e0bffb15 	stw	r2,-20(fp)
 10147d4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10147d8:	e0fffc17 	ldw	r3,-16(fp)
 10147dc:	e0bffb17 	ldw	r2,-20(fp)
 10147e0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10147e4:	e0bffb17 	ldw	r2,-20(fp)
 10147e8:	10c00017 	ldw	r3,0(r2)
 10147ec:	e0bffc17 	ldw	r2,-16(fp)
 10147f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10147f4:	e0bffb17 	ldw	r2,-20(fp)
 10147f8:	10c00017 	ldw	r3,0(r2)
 10147fc:	e0bffc17 	ldw	r2,-16(fp)
 1014800:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1014804:	e0fffb17 	ldw	r3,-20(fp)
 1014808:	e0bffc17 	ldw	r2,-16(fp)
 101480c:	18800015 	stw	r2,0(r3)

  return 0;  
 1014810:	e03fff15 	stw	zero,-4(fp)
 1014814:	e0bfff17 	ldw	r2,-4(fp)
}
 1014818:	e037883a 	mov	sp,fp
 101481c:	dfc00117 	ldw	ra,4(sp)
 1014820:	df000017 	ldw	fp,0(sp)
 1014824:	dec00204 	addi	sp,sp,8
 1014828:	f800283a 	ret

0101482c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101482c:	defffd04 	addi	sp,sp,-12
 1014830:	dfc00215 	stw	ra,8(sp)
 1014834:	df000115 	stw	fp,4(sp)
 1014838:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101483c:	00804074 	movhi	r2,257
 1014840:	109f7904 	addi	r2,r2,32228
 1014844:	10800017 	ldw	r2,0(r2)
 1014848:	1005003a 	cmpeq	r2,r2,zero
 101484c:	1000061e 	bne	r2,zero,1014868 <alt_get_errno+0x3c>
 1014850:	00804074 	movhi	r2,257
 1014854:	109f7904 	addi	r2,r2,32228
 1014858:	10800017 	ldw	r2,0(r2)
 101485c:	103ee83a 	callr	r2
 1014860:	e0bfff15 	stw	r2,-4(fp)
 1014864:	00000306 	br	1014874 <alt_get_errno+0x48>
 1014868:	008040b4 	movhi	r2,258
 101486c:	10a66d04 	addi	r2,r2,-26188
 1014870:	e0bfff15 	stw	r2,-4(fp)
 1014874:	e0bfff17 	ldw	r2,-4(fp)
}
 1014878:	e037883a 	mov	sp,fp
 101487c:	dfc00117 	ldw	ra,4(sp)
 1014880:	df000017 	ldw	fp,0(sp)
 1014884:	dec00204 	addi	sp,sp,8
 1014888:	f800283a 	ret

0101488c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 101488c:	defffd04 	addi	sp,sp,-12
 1014890:	dfc00215 	stw	ra,8(sp)
 1014894:	df000115 	stw	fp,4(sp)
 1014898:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 101489c:	00bfff04 	movi	r2,-4
 10148a0:	00c04074 	movhi	r3,257
 10148a4:	18d7a504 	addi	r3,r3,24212
 10148a8:	1885883a 	add	r2,r3,r2
 10148ac:	e0bfff15 	stw	r2,-4(fp)
 10148b0:	00000606 	br	10148cc <_do_ctors+0x40>
        (*ctor) (); 
 10148b4:	e0bfff17 	ldw	r2,-4(fp)
 10148b8:	10800017 	ldw	r2,0(r2)
 10148bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10148c0:	e0bfff17 	ldw	r2,-4(fp)
 10148c4:	10bfff04 	addi	r2,r2,-4
 10148c8:	e0bfff15 	stw	r2,-4(fp)
 10148cc:	e0ffff17 	ldw	r3,-4(fp)
 10148d0:	00804074 	movhi	r2,257
 10148d4:	1097a404 	addi	r2,r2,24208
 10148d8:	18bff62e 	bgeu	r3,r2,10148b4 <_do_ctors+0x28>
        (*ctor) (); 
}
 10148dc:	e037883a 	mov	sp,fp
 10148e0:	dfc00117 	ldw	ra,4(sp)
 10148e4:	df000017 	ldw	fp,0(sp)
 10148e8:	dec00204 	addi	sp,sp,8
 10148ec:	f800283a 	ret

010148f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10148f0:	defffd04 	addi	sp,sp,-12
 10148f4:	dfc00215 	stw	ra,8(sp)
 10148f8:	df000115 	stw	fp,4(sp)
 10148fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1014900:	00bfff04 	movi	r2,-4
 1014904:	00c04074 	movhi	r3,257
 1014908:	18d7a504 	addi	r3,r3,24212
 101490c:	1885883a 	add	r2,r3,r2
 1014910:	e0bfff15 	stw	r2,-4(fp)
 1014914:	00000606 	br	1014930 <_do_dtors+0x40>
        (*dtor) (); 
 1014918:	e0bfff17 	ldw	r2,-4(fp)
 101491c:	10800017 	ldw	r2,0(r2)
 1014920:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1014924:	e0bfff17 	ldw	r2,-4(fp)
 1014928:	10bfff04 	addi	r2,r2,-4
 101492c:	e0bfff15 	stw	r2,-4(fp)
 1014930:	e0ffff17 	ldw	r3,-4(fp)
 1014934:	00804074 	movhi	r2,257
 1014938:	1097a504 	addi	r2,r2,24212
 101493c:	18bff62e 	bgeu	r3,r2,1014918 <_do_dtors+0x28>
        (*dtor) (); 
}
 1014940:	e037883a 	mov	sp,fp
 1014944:	dfc00117 	ldw	ra,4(sp)
 1014948:	df000017 	ldw	fp,0(sp)
 101494c:	dec00204 	addi	sp,sp,8
 1014950:	f800283a 	ret

01014954 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1014954:	defff904 	addi	sp,sp,-28
 1014958:	dfc00615 	stw	ra,24(sp)
 101495c:	df000515 	stw	fp,20(sp)
 1014960:	df000504 	addi	fp,sp,20
 1014964:	e13ffd15 	stw	r4,-12(fp)
 1014968:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 101496c:	e0bffe17 	ldw	r2,-8(fp)
 1014970:	10800017 	ldw	r2,0(r2)
 1014974:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1014978:	e13ffd17 	ldw	r4,-12(fp)
 101497c:	10006940 	call	1000694 <strlen>
 1014980:	10800044 	addi	r2,r2,1
 1014984:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1014988:	00000d06 	br	10149c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 101498c:	e0bffc17 	ldw	r2,-16(fp)
 1014990:	11000217 	ldw	r4,8(r2)
 1014994:	e1bffb17 	ldw	r6,-20(fp)
 1014998:	e17ffd17 	ldw	r5,-12(fp)
 101499c:	1015a240 	call	1015a24 <memcmp>
 10149a0:	1004c03a 	cmpne	r2,r2,zero
 10149a4:	1000031e 	bne	r2,zero,10149b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10149a8:	e0bffc17 	ldw	r2,-16(fp)
 10149ac:	e0bfff15 	stw	r2,-4(fp)
 10149b0:	00000706 	br	10149d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10149b4:	e0bffc17 	ldw	r2,-16(fp)
 10149b8:	10800017 	ldw	r2,0(r2)
 10149bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10149c0:	e0fffe17 	ldw	r3,-8(fp)
 10149c4:	e0bffc17 	ldw	r2,-16(fp)
 10149c8:	10fff01e 	bne	r2,r3,101498c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10149cc:	e03fff15 	stw	zero,-4(fp)
 10149d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10149d4:	e037883a 	mov	sp,fp
 10149d8:	dfc00117 	ldw	ra,4(sp)
 10149dc:	df000017 	ldw	fp,0(sp)
 10149e0:	dec00204 	addi	sp,sp,8
 10149e4:	f800283a 	ret

010149e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10149e8:	deffff04 	addi	sp,sp,-4
 10149ec:	df000015 	stw	fp,0(sp)
 10149f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 10149f4:	e037883a 	mov	sp,fp
 10149f8:	df000017 	ldw	fp,0(sp)
 10149fc:	dec00104 	addi	sp,sp,4
 1014a00:	f800283a 	ret

01014a04 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1014a04:	defff904 	addi	sp,sp,-28
 1014a08:	dfc00615 	stw	ra,24(sp)
 1014a0c:	df000515 	stw	fp,20(sp)
 1014a10:	df000504 	addi	fp,sp,20
 1014a14:	e13ffc15 	stw	r4,-16(fp)
 1014a18:	e17ffd15 	stw	r5,-12(fp)
 1014a1c:	e1bffe15 	stw	r6,-8(fp)
 1014a20:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1014a24:	e0800217 	ldw	r2,8(fp)
 1014a28:	d8800015 	stw	r2,0(sp)
 1014a2c:	e13ffc17 	ldw	r4,-16(fp)
 1014a30:	e17ffd17 	ldw	r5,-12(fp)
 1014a34:	e1bffe17 	ldw	r6,-8(fp)
 1014a38:	e1ffff17 	ldw	r7,-4(fp)
 1014a3c:	1014bd80 	call	1014bd8 <alt_iic_isr_register>
}  
 1014a40:	e037883a 	mov	sp,fp
 1014a44:	dfc00117 	ldw	ra,4(sp)
 1014a48:	df000017 	ldw	fp,0(sp)
 1014a4c:	dec00204 	addi	sp,sp,8
 1014a50:	f800283a 	ret

01014a54 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1014a54:	defff904 	addi	sp,sp,-28
 1014a58:	df000615 	stw	fp,24(sp)
 1014a5c:	df000604 	addi	fp,sp,24
 1014a60:	e13ffe15 	stw	r4,-8(fp)
 1014a64:	e17fff15 	stw	r5,-4(fp)
 1014a68:	e0bfff17 	ldw	r2,-4(fp)
 1014a6c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014a70:	0005303a 	rdctl	r2,status
 1014a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014a78:	e0fffb17 	ldw	r3,-20(fp)
 1014a7c:	00bfff84 	movi	r2,-2
 1014a80:	1884703a 	and	r2,r3,r2
 1014a84:	1001703a 	wrctl	status,r2
  
  return context;
 1014a88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1014a8c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 1014a90:	e0fffc17 	ldw	r3,-16(fp)
 1014a94:	00800044 	movi	r2,1
 1014a98:	10c4983a 	sll	r2,r2,r3
 1014a9c:	1007883a 	mov	r3,r2
 1014aa0:	008040b4 	movhi	r2,258
 1014aa4:	10a68a04 	addi	r2,r2,-26072
 1014aa8:	10800017 	ldw	r2,0(r2)
 1014aac:	1886b03a 	or	r3,r3,r2
 1014ab0:	008040b4 	movhi	r2,258
 1014ab4:	10a68a04 	addi	r2,r2,-26072
 1014ab8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1014abc:	008040b4 	movhi	r2,258
 1014ac0:	10a68a04 	addi	r2,r2,-26072
 1014ac4:	10800017 	ldw	r2,0(r2)
 1014ac8:	100170fa 	wrctl	ienable,r2
 1014acc:	e0bffd17 	ldw	r2,-12(fp)
 1014ad0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014ad4:	e0bffa17 	ldw	r2,-24(fp)
 1014ad8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1014adc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 1014ae0:	e037883a 	mov	sp,fp
 1014ae4:	df000017 	ldw	fp,0(sp)
 1014ae8:	dec00104 	addi	sp,sp,4
 1014aec:	f800283a 	ret

01014af0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1014af0:	defff904 	addi	sp,sp,-28
 1014af4:	df000615 	stw	fp,24(sp)
 1014af8:	df000604 	addi	fp,sp,24
 1014afc:	e13ffe15 	stw	r4,-8(fp)
 1014b00:	e17fff15 	stw	r5,-4(fp)
 1014b04:	e0bfff17 	ldw	r2,-4(fp)
 1014b08:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014b0c:	0005303a 	rdctl	r2,status
 1014b10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014b14:	e0fffb17 	ldw	r3,-20(fp)
 1014b18:	00bfff84 	movi	r2,-2
 1014b1c:	1884703a 	and	r2,r3,r2
 1014b20:	1001703a 	wrctl	status,r2
  
  return context;
 1014b24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1014b28:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 1014b2c:	e0fffc17 	ldw	r3,-16(fp)
 1014b30:	00800044 	movi	r2,1
 1014b34:	10c4983a 	sll	r2,r2,r3
 1014b38:	0084303a 	nor	r2,zero,r2
 1014b3c:	1007883a 	mov	r3,r2
 1014b40:	008040b4 	movhi	r2,258
 1014b44:	10a68a04 	addi	r2,r2,-26072
 1014b48:	10800017 	ldw	r2,0(r2)
 1014b4c:	1886703a 	and	r3,r3,r2
 1014b50:	008040b4 	movhi	r2,258
 1014b54:	10a68a04 	addi	r2,r2,-26072
 1014b58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1014b5c:	008040b4 	movhi	r2,258
 1014b60:	10a68a04 	addi	r2,r2,-26072
 1014b64:	10800017 	ldw	r2,0(r2)
 1014b68:	100170fa 	wrctl	ienable,r2
 1014b6c:	e0bffd17 	ldw	r2,-12(fp)
 1014b70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014b74:	e0bffa17 	ldw	r2,-24(fp)
 1014b78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1014b7c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1014b80:	e037883a 	mov	sp,fp
 1014b84:	df000017 	ldw	fp,0(sp)
 1014b88:	dec00104 	addi	sp,sp,4
 1014b8c:	f800283a 	ret

01014b90 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1014b90:	defffc04 	addi	sp,sp,-16
 1014b94:	df000315 	stw	fp,12(sp)
 1014b98:	df000304 	addi	fp,sp,12
 1014b9c:	e13ffe15 	stw	r4,-8(fp)
 1014ba0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1014ba4:	000530fa 	rdctl	r2,ienable
 1014ba8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1014bac:	e0ffff17 	ldw	r3,-4(fp)
 1014bb0:	00800044 	movi	r2,1
 1014bb4:	10c4983a 	sll	r2,r2,r3
 1014bb8:	1007883a 	mov	r3,r2
 1014bbc:	e0bffd17 	ldw	r2,-12(fp)
 1014bc0:	1884703a 	and	r2,r3,r2
 1014bc4:	1004c03a 	cmpne	r2,r2,zero
}
 1014bc8:	e037883a 	mov	sp,fp
 1014bcc:	df000017 	ldw	fp,0(sp)
 1014bd0:	dec00104 	addi	sp,sp,4
 1014bd4:	f800283a 	ret

01014bd8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1014bd8:	defff404 	addi	sp,sp,-48
 1014bdc:	dfc00b15 	stw	ra,44(sp)
 1014be0:	df000a15 	stw	fp,40(sp)
 1014be4:	df000a04 	addi	fp,sp,40
 1014be8:	e13ffb15 	stw	r4,-20(fp)
 1014bec:	e17ffc15 	stw	r5,-16(fp)
 1014bf0:	e1bffd15 	stw	r6,-12(fp)
 1014bf4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 1014bf8:	00bffa84 	movi	r2,-22
 1014bfc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1014c00:	e0bffc17 	ldw	r2,-16(fp)
 1014c04:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1014c08:	e0bff917 	ldw	r2,-28(fp)
 1014c0c:	10800808 	cmpgei	r2,r2,32
 1014c10:	1000291e 	bne	r2,zero,1014cb8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1014c14:	0005303a 	rdctl	r2,status
 1014c18:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1014c1c:	e0fff717 	ldw	r3,-36(fp)
 1014c20:	00bfff84 	movi	r2,-2
 1014c24:	1884703a 	and	r2,r3,r2
 1014c28:	1001703a 	wrctl	status,r2
  
  return context;
 1014c2c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1014c30:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 1014c34:	e0bff917 	ldw	r2,-28(fp)
 1014c38:	00c040b4 	movhi	r3,258
 1014c3c:	18cb2004 	addi	r3,r3,11392
 1014c40:	100490fa 	slli	r2,r2,3
 1014c44:	10c7883a 	add	r3,r2,r3
 1014c48:	e0bffd17 	ldw	r2,-12(fp)
 1014c4c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 1014c50:	e0bff917 	ldw	r2,-28(fp)
 1014c54:	00c040b4 	movhi	r3,258
 1014c58:	18cb2004 	addi	r3,r3,11392
 1014c5c:	100490fa 	slli	r2,r2,3
 1014c60:	10c5883a 	add	r2,r2,r3
 1014c64:	10c00104 	addi	r3,r2,4
 1014c68:	e0bffe17 	ldw	r2,-8(fp)
 1014c6c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1014c70:	e0bffd17 	ldw	r2,-12(fp)
 1014c74:	1005003a 	cmpeq	r2,r2,zero
 1014c78:	1000051e 	bne	r2,zero,1014c90 <alt_iic_isr_register+0xb8>
 1014c7c:	e17ff917 	ldw	r5,-28(fp)
 1014c80:	e13ffb17 	ldw	r4,-20(fp)
 1014c84:	1014a540 	call	1014a54 <alt_ic_irq_enable>
 1014c88:	e0bfff15 	stw	r2,-4(fp)
 1014c8c:	00000406 	br	1014ca0 <alt_iic_isr_register+0xc8>
 1014c90:	e17ff917 	ldw	r5,-28(fp)
 1014c94:	e13ffb17 	ldw	r4,-20(fp)
 1014c98:	1014af00 	call	1014af0 <alt_ic_irq_disable>
 1014c9c:	e0bfff15 	stw	r2,-4(fp)
 1014ca0:	e0bfff17 	ldw	r2,-4(fp)
 1014ca4:	e0bffa15 	stw	r2,-24(fp)
 1014ca8:	e0bff817 	ldw	r2,-32(fp)
 1014cac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1014cb0:	e0bff617 	ldw	r2,-40(fp)
 1014cb4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1014cb8:	e0bffa17 	ldw	r2,-24(fp)
}
 1014cbc:	e037883a 	mov	sp,fp
 1014cc0:	dfc00117 	ldw	ra,4(sp)
 1014cc4:	df000017 	ldw	fp,0(sp)
 1014cc8:	dec00204 	addi	sp,sp,8
 1014ccc:	f800283a 	ret

01014cd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1014cd0:	defff804 	addi	sp,sp,-32
 1014cd4:	dfc00715 	stw	ra,28(sp)
 1014cd8:	df000615 	stw	fp,24(sp)
 1014cdc:	dc000515 	stw	r16,20(sp)
 1014ce0:	df000504 	addi	fp,sp,20
 1014ce4:	e13ffc15 	stw	r4,-16(fp)
 1014ce8:	e17ffd15 	stw	r5,-12(fp)
 1014cec:	e1bffe15 	stw	r6,-8(fp)
 1014cf0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1014cf4:	e13ffd17 	ldw	r4,-12(fp)
 1014cf8:	e17ffe17 	ldw	r5,-8(fp)
 1014cfc:	e1bfff17 	ldw	r6,-4(fp)
 1014d00:	1014f180 	call	1014f18 <open>
 1014d04:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1014d08:	e0bffb17 	ldw	r2,-20(fp)
 1014d0c:	1004803a 	cmplt	r2,r2,zero
 1014d10:	10001f1e 	bne	r2,zero,1014d90 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1014d14:	e13ffb17 	ldw	r4,-20(fp)
 1014d18:	04004074 	movhi	r16,257
 1014d1c:	841ae804 	addi	r16,r16,27552
 1014d20:	01400304 	movi	r5,12
 1014d24:	10098e40 	call	10098e4 <__mulsi3>
 1014d28:	1405883a 	add	r2,r2,r16
 1014d2c:	10c00017 	ldw	r3,0(r2)
 1014d30:	e0bffc17 	ldw	r2,-16(fp)
 1014d34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1014d38:	e13ffb17 	ldw	r4,-20(fp)
 1014d3c:	04004074 	movhi	r16,257
 1014d40:	841ae804 	addi	r16,r16,27552
 1014d44:	01400304 	movi	r5,12
 1014d48:	10098e40 	call	10098e4 <__mulsi3>
 1014d4c:	1405883a 	add	r2,r2,r16
 1014d50:	10800104 	addi	r2,r2,4
 1014d54:	10c00017 	ldw	r3,0(r2)
 1014d58:	e0bffc17 	ldw	r2,-16(fp)
 1014d5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1014d60:	e13ffb17 	ldw	r4,-20(fp)
 1014d64:	04004074 	movhi	r16,257
 1014d68:	841ae804 	addi	r16,r16,27552
 1014d6c:	01400304 	movi	r5,12
 1014d70:	10098e40 	call	10098e4 <__mulsi3>
 1014d74:	1405883a 	add	r2,r2,r16
 1014d78:	10800204 	addi	r2,r2,8
 1014d7c:	10c00017 	ldw	r3,0(r2)
 1014d80:	e0bffc17 	ldw	r2,-16(fp)
 1014d84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1014d88:	e13ffb17 	ldw	r4,-20(fp)
 1014d8c:	100a8480 	call	100a848 <alt_release_fd>
  }
} 
 1014d90:	e037883a 	mov	sp,fp
 1014d94:	dfc00217 	ldw	ra,8(sp)
 1014d98:	df000117 	ldw	fp,4(sp)
 1014d9c:	dc000017 	ldw	r16,0(sp)
 1014da0:	dec00304 	addi	sp,sp,12
 1014da4:	f800283a 	ret

01014da8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1014da8:	defffb04 	addi	sp,sp,-20
 1014dac:	dfc00415 	stw	ra,16(sp)
 1014db0:	df000315 	stw	fp,12(sp)
 1014db4:	df000304 	addi	fp,sp,12
 1014db8:	e13ffd15 	stw	r4,-12(fp)
 1014dbc:	e17ffe15 	stw	r5,-8(fp)
 1014dc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1014dc4:	01004074 	movhi	r4,257
 1014dc8:	211aeb04 	addi	r4,r4,27564
 1014dcc:	e17ffd17 	ldw	r5,-12(fp)
 1014dd0:	01800044 	movi	r6,1
 1014dd4:	01c07fc4 	movi	r7,511
 1014dd8:	1014cd00 	call	1014cd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1014ddc:	01004074 	movhi	r4,257
 1014de0:	211ae804 	addi	r4,r4,27552
 1014de4:	e17ffe17 	ldw	r5,-8(fp)
 1014de8:	000d883a 	mov	r6,zero
 1014dec:	01c07fc4 	movi	r7,511
 1014df0:	1014cd00 	call	1014cd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1014df4:	01004074 	movhi	r4,257
 1014df8:	211aee04 	addi	r4,r4,27576
 1014dfc:	e17fff17 	ldw	r5,-4(fp)
 1014e00:	01800044 	movi	r6,1
 1014e04:	01c07fc4 	movi	r7,511
 1014e08:	1014cd00 	call	1014cd0 <alt_open_fd>
}  
 1014e0c:	e037883a 	mov	sp,fp
 1014e10:	dfc00117 	ldw	ra,4(sp)
 1014e14:	df000017 	ldw	fp,0(sp)
 1014e18:	dec00204 	addi	sp,sp,8
 1014e1c:	f800283a 	ret

01014e20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1014e20:	defffa04 	addi	sp,sp,-24
 1014e24:	dfc00515 	stw	ra,20(sp)
 1014e28:	df000415 	stw	fp,16(sp)
 1014e2c:	dc000315 	stw	r16,12(sp)
 1014e30:	df000304 	addi	fp,sp,12
 1014e34:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1014e38:	e0bffe17 	ldw	r2,-8(fp)
 1014e3c:	10800217 	ldw	r2,8(r2)
 1014e40:	10d00034 	orhi	r3,r2,16384
 1014e44:	e0bffe17 	ldw	r2,-8(fp)
 1014e48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1014e4c:	e03ffd15 	stw	zero,-12(fp)
 1014e50:	00002306 	br	1014ee0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1014e54:	e13ffd17 	ldw	r4,-12(fp)
 1014e58:	04004074 	movhi	r16,257
 1014e5c:	841ae804 	addi	r16,r16,27552
 1014e60:	01400304 	movi	r5,12
 1014e64:	10098e40 	call	10098e4 <__mulsi3>
 1014e68:	1405883a 	add	r2,r2,r16
 1014e6c:	10c00017 	ldw	r3,0(r2)
 1014e70:	e0bffe17 	ldw	r2,-8(fp)
 1014e74:	10800017 	ldw	r2,0(r2)
 1014e78:	1880161e 	bne	r3,r2,1014ed4 <alt_file_locked+0xb4>
 1014e7c:	e13ffd17 	ldw	r4,-12(fp)
 1014e80:	04004074 	movhi	r16,257
 1014e84:	841ae804 	addi	r16,r16,27552
 1014e88:	01400304 	movi	r5,12
 1014e8c:	10098e40 	call	10098e4 <__mulsi3>
 1014e90:	1405883a 	add	r2,r2,r16
 1014e94:	10800204 	addi	r2,r2,8
 1014e98:	10800017 	ldw	r2,0(r2)
 1014e9c:	1004403a 	cmpge	r2,r2,zero
 1014ea0:	10000c1e 	bne	r2,zero,1014ed4 <alt_file_locked+0xb4>
 1014ea4:	e13ffd17 	ldw	r4,-12(fp)
 1014ea8:	01400304 	movi	r5,12
 1014eac:	10098e40 	call	10098e4 <__mulsi3>
 1014eb0:	1007883a 	mov	r3,r2
 1014eb4:	00804074 	movhi	r2,257
 1014eb8:	109ae804 	addi	r2,r2,27552
 1014ebc:	1887883a 	add	r3,r3,r2
 1014ec0:	e0bffe17 	ldw	r2,-8(fp)
 1014ec4:	18800326 	beq	r3,r2,1014ed4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1014ec8:	00bffcc4 	movi	r2,-13
 1014ecc:	e0bfff15 	stw	r2,-4(fp)
 1014ed0:	00000a06 	br	1014efc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1014ed4:	e0bffd17 	ldw	r2,-12(fp)
 1014ed8:	10800044 	addi	r2,r2,1
 1014edc:	e0bffd15 	stw	r2,-12(fp)
 1014ee0:	00804074 	movhi	r2,257
 1014ee4:	109f7804 	addi	r2,r2,32224
 1014ee8:	10800017 	ldw	r2,0(r2)
 1014eec:	1007883a 	mov	r3,r2
 1014ef0:	e0bffd17 	ldw	r2,-12(fp)
 1014ef4:	18bfd72e 	bgeu	r3,r2,1014e54 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1014ef8:	e03fff15 	stw	zero,-4(fp)
 1014efc:	e0bfff17 	ldw	r2,-4(fp)
}
 1014f00:	e037883a 	mov	sp,fp
 1014f04:	dfc00217 	ldw	ra,8(sp)
 1014f08:	df000117 	ldw	fp,4(sp)
 1014f0c:	dc000017 	ldw	r16,0(sp)
 1014f10:	dec00304 	addi	sp,sp,12
 1014f14:	f800283a 	ret

01014f18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1014f18:	defff404 	addi	sp,sp,-48
 1014f1c:	dfc00b15 	stw	ra,44(sp)
 1014f20:	df000a15 	stw	fp,40(sp)
 1014f24:	df000a04 	addi	fp,sp,40
 1014f28:	e13ffb15 	stw	r4,-20(fp)
 1014f2c:	e17ffc15 	stw	r5,-16(fp)
 1014f30:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1014f34:	00bfffc4 	movi	r2,-1
 1014f38:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1014f3c:	00bffb44 	movi	r2,-19
 1014f40:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1014f44:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1014f48:	e13ffb17 	ldw	r4,-20(fp)
 1014f4c:	01404074 	movhi	r5,257
 1014f50:	295f7604 	addi	r5,r5,32216
 1014f54:	10149540 	call	1014954 <alt_find_dev>
 1014f58:	e0bffa15 	stw	r2,-24(fp)
 1014f5c:	e0bffa17 	ldw	r2,-24(fp)
 1014f60:	1004c03a 	cmpne	r2,r2,zero
 1014f64:	1000051e 	bne	r2,zero,1014f7c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1014f68:	e13ffb17 	ldw	r4,-20(fp)
 1014f6c:	10157b40 	call	10157b4 <alt_find_file>
 1014f70:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1014f74:	00800044 	movi	r2,1
 1014f78:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1014f7c:	e0bffa17 	ldw	r2,-24(fp)
 1014f80:	1005003a 	cmpeq	r2,r2,zero
 1014f84:	1000311e 	bne	r2,zero,101504c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1014f88:	e13ffa17 	ldw	r4,-24(fp)
 1014f8c:	10158d40 	call	10158d4 <alt_get_fd>
 1014f90:	e0bff815 	stw	r2,-32(fp)
 1014f94:	e0bff817 	ldw	r2,-32(fp)
 1014f98:	1004403a 	cmpge	r2,r2,zero
 1014f9c:	1000031e 	bne	r2,zero,1014fac <open+0x94>
    {
      status = index;
 1014fa0:	e0bff817 	ldw	r2,-32(fp)
 1014fa4:	e0bff715 	stw	r2,-36(fp)
 1014fa8:	00002a06 	br	1015054 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1014fac:	e13ff817 	ldw	r4,-32(fp)
 1014fb0:	01400304 	movi	r5,12
 1014fb4:	10098e40 	call	10098e4 <__mulsi3>
 1014fb8:	1007883a 	mov	r3,r2
 1014fbc:	00804074 	movhi	r2,257
 1014fc0:	109ae804 	addi	r2,r2,27552
 1014fc4:	1885883a 	add	r2,r3,r2
 1014fc8:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1014fcc:	e0fffc17 	ldw	r3,-16(fp)
 1014fd0:	00900034 	movhi	r2,16384
 1014fd4:	10bfffc4 	addi	r2,r2,-1
 1014fd8:	1886703a 	and	r3,r3,r2
 1014fdc:	e0bff917 	ldw	r2,-28(fp)
 1014fe0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1014fe4:	e0bff617 	ldw	r2,-40(fp)
 1014fe8:	1004c03a 	cmpne	r2,r2,zero
 1014fec:	1000061e 	bne	r2,zero,1015008 <open+0xf0>
 1014ff0:	e13ff917 	ldw	r4,-28(fp)
 1014ff4:	1014e200 	call	1014e20 <alt_file_locked>
 1014ff8:	e0bff715 	stw	r2,-36(fp)
 1014ffc:	e0bff717 	ldw	r2,-36(fp)
 1015000:	1004803a 	cmplt	r2,r2,zero
 1015004:	1000131e 	bne	r2,zero,1015054 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1015008:	e0bffa17 	ldw	r2,-24(fp)
 101500c:	10800317 	ldw	r2,12(r2)
 1015010:	1005003a 	cmpeq	r2,r2,zero
 1015014:	1000091e 	bne	r2,zero,101503c <open+0x124>
 1015018:	e0bffa17 	ldw	r2,-24(fp)
 101501c:	10800317 	ldw	r2,12(r2)
 1015020:	e13ff917 	ldw	r4,-28(fp)
 1015024:	e17ffb17 	ldw	r5,-20(fp)
 1015028:	e1bffc17 	ldw	r6,-16(fp)
 101502c:	e1fffd17 	ldw	r7,-12(fp)
 1015030:	103ee83a 	callr	r2
 1015034:	e0bfff15 	stw	r2,-4(fp)
 1015038:	00000106 	br	1015040 <open+0x128>
 101503c:	e03fff15 	stw	zero,-4(fp)
 1015040:	e0bfff17 	ldw	r2,-4(fp)
 1015044:	e0bff715 	stw	r2,-36(fp)
 1015048:	00000206 	br	1015054 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101504c:	00bffb44 	movi	r2,-19
 1015050:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1015054:	e0bff717 	ldw	r2,-36(fp)
 1015058:	1004403a 	cmpge	r2,r2,zero
 101505c:	1000091e 	bne	r2,zero,1015084 <open+0x16c>
  {
    alt_release_fd (index);  
 1015060:	e13ff817 	ldw	r4,-32(fp)
 1015064:	100a8480 	call	100a848 <alt_release_fd>
    ALT_ERRNO = -status;
 1015068:	10150a40 	call	10150a4 <alt_get_errno>
 101506c:	e0fff717 	ldw	r3,-36(fp)
 1015070:	00c7c83a 	sub	r3,zero,r3
 1015074:	10c00015 	stw	r3,0(r2)
    return -1;
 1015078:	00bfffc4 	movi	r2,-1
 101507c:	e0bffe15 	stw	r2,-8(fp)
 1015080:	00000206 	br	101508c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1015084:	e0bff817 	ldw	r2,-32(fp)
 1015088:	e0bffe15 	stw	r2,-8(fp)
 101508c:	e0bffe17 	ldw	r2,-8(fp)
}
 1015090:	e037883a 	mov	sp,fp
 1015094:	dfc00117 	ldw	ra,4(sp)
 1015098:	df000017 	ldw	fp,0(sp)
 101509c:	dec00204 	addi	sp,sp,8
 10150a0:	f800283a 	ret

010150a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10150a4:	defffd04 	addi	sp,sp,-12
 10150a8:	dfc00215 	stw	ra,8(sp)
 10150ac:	df000115 	stw	fp,4(sp)
 10150b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10150b4:	00804074 	movhi	r2,257
 10150b8:	109f7904 	addi	r2,r2,32228
 10150bc:	10800017 	ldw	r2,0(r2)
 10150c0:	1005003a 	cmpeq	r2,r2,zero
 10150c4:	1000061e 	bne	r2,zero,10150e0 <alt_get_errno+0x3c>
 10150c8:	00804074 	movhi	r2,257
 10150cc:	109f7904 	addi	r2,r2,32228
 10150d0:	10800017 	ldw	r2,0(r2)
 10150d4:	103ee83a 	callr	r2
 10150d8:	e0bfff15 	stw	r2,-4(fp)
 10150dc:	00000306 	br	10150ec <alt_get_errno+0x48>
 10150e0:	008040b4 	movhi	r2,258
 10150e4:	10a66d04 	addi	r2,r2,-26188
 10150e8:	e0bfff15 	stw	r2,-4(fp)
 10150ec:	e0bfff17 	ldw	r2,-4(fp)
}
 10150f0:	e037883a 	mov	sp,fp
 10150f4:	dfc00117 	ldw	ra,4(sp)
 10150f8:	df000017 	ldw	fp,0(sp)
 10150fc:	dec00204 	addi	sp,sp,8
 1015100:	f800283a 	ret

01015104 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1015104:	defffa04 	addi	sp,sp,-24
 1015108:	df000515 	stw	fp,20(sp)
 101510c:	df000504 	addi	fp,sp,20
 1015110:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1015114:	0005303a 	rdctl	r2,status
 1015118:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101511c:	e0fffd17 	ldw	r3,-12(fp)
 1015120:	00bfff84 	movi	r2,-2
 1015124:	1884703a 	and	r2,r3,r2
 1015128:	1001703a 	wrctl	status,r2
  
  return context;
 101512c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1015130:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1015134:	e0bfff17 	ldw	r2,-4(fp)
 1015138:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 101513c:	e0bffc17 	ldw	r2,-16(fp)
 1015140:	10c00017 	ldw	r3,0(r2)
 1015144:	e0bffc17 	ldw	r2,-16(fp)
 1015148:	10800117 	ldw	r2,4(r2)
 101514c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1015150:	e0bffc17 	ldw	r2,-16(fp)
 1015154:	10c00117 	ldw	r3,4(r2)
 1015158:	e0bffc17 	ldw	r2,-16(fp)
 101515c:	10800017 	ldw	r2,0(r2)
 1015160:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1015164:	e0fffc17 	ldw	r3,-16(fp)
 1015168:	e0bffc17 	ldw	r2,-16(fp)
 101516c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1015170:	e0fffc17 	ldw	r3,-16(fp)
 1015174:	e0bffc17 	ldw	r2,-16(fp)
 1015178:	18800015 	stw	r2,0(r3)
 101517c:	e0bffe17 	ldw	r2,-8(fp)
 1015180:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1015184:	e0bffb17 	ldw	r2,-20(fp)
 1015188:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 101518c:	e037883a 	mov	sp,fp
 1015190:	df000017 	ldw	fp,0(sp)
 1015194:	dec00104 	addi	sp,sp,4
 1015198:	f800283a 	ret

0101519c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 101519c:	defffb04 	addi	sp,sp,-20
 10151a0:	dfc00415 	stw	ra,16(sp)
 10151a4:	df000315 	stw	fp,12(sp)
 10151a8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 10151ac:	d0a02d17 	ldw	r2,-32588(gp)
 10151b0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 10151b4:	d0a71e17 	ldw	r2,-25480(gp)
 10151b8:	10800044 	addi	r2,r2,1
 10151bc:	d0a71e15 	stw	r2,-25480(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10151c0:	00003106 	br	1015288 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 10151c4:	e0bffe17 	ldw	r2,-8(fp)
 10151c8:	10800017 	ldw	r2,0(r2)
 10151cc:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 10151d0:	e0bffe17 	ldw	r2,-8(fp)
 10151d4:	10800403 	ldbu	r2,16(r2)
 10151d8:	10803fcc 	andi	r2,r2,255
 10151dc:	1005003a 	cmpeq	r2,r2,zero
 10151e0:	1000051e 	bne	r2,zero,10151f8 <alt_tick+0x5c>
 10151e4:	d0a71e17 	ldw	r2,-25480(gp)
 10151e8:	1004c03a 	cmpne	r2,r2,zero
 10151ec:	1000021e 	bne	r2,zero,10151f8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 10151f0:	e0bffe17 	ldw	r2,-8(fp)
 10151f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10151f8:	e0bffe17 	ldw	r2,-8(fp)
 10151fc:	10c00217 	ldw	r3,8(r2)
 1015200:	d0a71e17 	ldw	r2,-25480(gp)
 1015204:	10c01e36 	bltu	r2,r3,1015280 <alt_tick+0xe4>
 1015208:	e0bffe17 	ldw	r2,-8(fp)
 101520c:	10800403 	ldbu	r2,16(r2)
 1015210:	10803fcc 	andi	r2,r2,255
 1015214:	1004c03a 	cmpne	r2,r2,zero
 1015218:	1000191e 	bne	r2,zero,1015280 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 101521c:	e0bffe17 	ldw	r2,-8(fp)
 1015220:	10c00317 	ldw	r3,12(r2)
 1015224:	e0bffe17 	ldw	r2,-8(fp)
 1015228:	11000517 	ldw	r4,20(r2)
 101522c:	183ee83a 	callr	r3
 1015230:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1015234:	e0bffd17 	ldw	r2,-12(fp)
 1015238:	1004c03a 	cmpne	r2,r2,zero
 101523c:	1000031e 	bne	r2,zero,101524c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1015240:	e13ffe17 	ldw	r4,-8(fp)
 1015244:	10151040 	call	1015104 <alt_alarm_stop>
 1015248:	00000d06 	br	1015280 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 101524c:	e0bffe17 	ldw	r2,-8(fp)
 1015250:	10c00217 	ldw	r3,8(r2)
 1015254:	e0bffd17 	ldw	r2,-12(fp)
 1015258:	1887883a 	add	r3,r3,r2
 101525c:	e0bffe17 	ldw	r2,-8(fp)
 1015260:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1015264:	e0bffe17 	ldw	r2,-8(fp)
 1015268:	10c00217 	ldw	r3,8(r2)
 101526c:	d0a71e17 	ldw	r2,-25480(gp)
 1015270:	1880032e 	bgeu	r3,r2,1015280 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1015274:	e0fffe17 	ldw	r3,-8(fp)
 1015278:	00800044 	movi	r2,1
 101527c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1015280:	e0bfff17 	ldw	r2,-4(fp)
 1015284:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1015288:	d0e02d04 	addi	r3,gp,-32588
 101528c:	e0bffe17 	ldw	r2,-8(fp)
 1015290:	10ffcc1e 	bne	r2,r3,10151c4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1015294:	100bb640 	call	100bb64 <OSTimeTick>
}
 1015298:	e037883a 	mov	sp,fp
 101529c:	dfc00117 	ldw	ra,4(sp)
 10152a0:	df000017 	ldw	fp,0(sp)
 10152a4:	dec00204 	addi	sp,sp,8
 10152a8:	f800283a 	ret

010152ac <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 10152ac:	deffff04 	addi	sp,sp,-4
 10152b0:	df000015 	stw	fp,0(sp)
 10152b4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 10152b8:	000170fa 	wrctl	ienable,zero
}
 10152bc:	e037883a 	mov	sp,fp
 10152c0:	df000017 	ldw	fp,0(sp)
 10152c4:	dec00104 	addi	sp,sp,4
 10152c8:	f800283a 	ret

010152cc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 10152cc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 10152d0:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 10152d4:	d1271717 	ldw	r4,-25508(gp)

      stw ra,  0(sp)
 10152d8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 10152dc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 10152e0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 10152e4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 10152e8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 10152ec:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 10152f0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 10152f4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 10152f8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 10152fc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 1015300:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 1015304:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1015308:	10156ec0 	call	10156ec <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 101530c:	d1271217 	ldw	r4,-25528(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 1015310:	d1670a07 	ldb	r5,-25560(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 1015314:	d1271715 	stw	r4,-25508(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 1015318:	d1670a45 	stb	r5,-25559(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 101531c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 1015320:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 1015324:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 1015328:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 101532c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 1015330:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 1015334:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 1015338:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 101533c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 1015340:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 1015344:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 1015348:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 101534c:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 1015350:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 1015354:	f800283a 	ret

01015358 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 1015358:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 101535c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 1015360:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 1015364:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 1015368:	10156ec0 	call	10156ec <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 101536c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 1015370:	d4a70845 	stb	r18,-25567(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 1015374:	003fe506 	br	101530c <OSCtxSw+0x40>

01015378 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 1015378:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 101537c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 1015380:	10800054 	ori	r2,r2,1
      wrctl status, r2
 1015384:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 1015388:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 101538c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 1015390:	dec00204 	addi	sp,sp,8

      callr r2
 1015394:	103ee83a 	callr	r2

      nop
 1015398:	0001883a 	nop

0101539c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 101539c:	defff704 	addi	sp,sp,-36
 10153a0:	dfc00815 	stw	ra,32(sp)
 10153a4:	df000715 	stw	fp,28(sp)
 10153a8:	df000704 	addi	fp,sp,28
 10153ac:	e13ffc15 	stw	r4,-16(fp)
 10153b0:	e17ffd15 	stw	r5,-12(fp)
 10153b4:	e1bffe15 	stw	r6,-8(fp)
 10153b8:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 10153bc:	e0bffe17 	ldw	r2,-8(fp)
 10153c0:	1007883a 	mov	r3,r2
 10153c4:	00bfff04 	movi	r2,-4
 10153c8:	1884703a 	and	r2,r3,r2
 10153cc:	10bf0004 	addi	r2,r2,-1024
 10153d0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 10153d4:	e0bff917 	ldw	r2,-28(fp)
 10153d8:	10000015 	stw	zero,0(r2)
 10153dc:	e0bff917 	ldw	r2,-28(fp)
 10153e0:	10c0bb04 	addi	r3,r2,748
 10153e4:	e0bff917 	ldw	r2,-28(fp)
 10153e8:	10c00115 	stw	r3,4(r2)
 10153ec:	e0bff917 	ldw	r2,-28(fp)
 10153f0:	1080bb04 	addi	r2,r2,748
 10153f4:	10c01704 	addi	r3,r2,92
 10153f8:	e0bff917 	ldw	r2,-28(fp)
 10153fc:	10c00215 	stw	r3,8(r2)
 1015400:	e0bff917 	ldw	r2,-28(fp)
 1015404:	1080bb04 	addi	r2,r2,748
 1015408:	10c02e04 	addi	r3,r2,184
 101540c:	e0bff917 	ldw	r2,-28(fp)
 1015410:	10c00315 	stw	r3,12(r2)
 1015414:	e0bff917 	ldw	r2,-28(fp)
 1015418:	10000415 	stw	zero,16(r2)
 101541c:	e0bff917 	ldw	r2,-28(fp)
 1015420:	10800504 	addi	r2,r2,20
 1015424:	1009883a 	mov	r4,r2
 1015428:	01800644 	movi	r6,25
 101542c:	000b883a 	mov	r5,zero
 1015430:	1005af80 	call	1005af8 <memset>
 1015434:	e0bff917 	ldw	r2,-28(fp)
 1015438:	10000c15 	stw	zero,48(r2)
 101543c:	e0fff917 	ldw	r3,-28(fp)
 1015440:	00804074 	movhi	r2,257
 1015444:	1098d804 	addi	r2,r2,25440
 1015448:	18800d15 	stw	r2,52(r3)
 101544c:	e0bff917 	ldw	r2,-28(fp)
 1015450:	10000e15 	stw	zero,56(r2)
 1015454:	e0bff917 	ldw	r2,-28(fp)
 1015458:	10000f15 	stw	zero,60(r2)
 101545c:	e0bff917 	ldw	r2,-28(fp)
 1015460:	10001015 	stw	zero,64(r2)
 1015464:	e0bff917 	ldw	r2,-28(fp)
 1015468:	10001115 	stw	zero,68(r2)
 101546c:	e0bff917 	ldw	r2,-28(fp)
 1015470:	10001215 	stw	zero,72(r2)
 1015474:	e0bff917 	ldw	r2,-28(fp)
 1015478:	10001315 	stw	zero,76(r2)
 101547c:	e0bff917 	ldw	r2,-28(fp)
 1015480:	10001415 	stw	zero,80(r2)
 1015484:	e0bff917 	ldw	r2,-28(fp)
 1015488:	10001515 	stw	zero,84(r2)
 101548c:	e0bff917 	ldw	r2,-28(fp)
 1015490:	10001615 	stw	zero,88(r2)
 1015494:	e0bff917 	ldw	r2,-28(fp)
 1015498:	10001715 	stw	zero,92(r2)
 101549c:	e0bff917 	ldw	r2,-28(fp)
 10154a0:	10001805 	stb	zero,96(r2)
 10154a4:	e0bff917 	ldw	r2,-28(fp)
 10154a8:	10801f04 	addi	r2,r2,124
 10154ac:	10000015 	stw	zero,0(r2)
 10154b0:	10000115 	stw	zero,4(r2)
 10154b4:	10000215 	stw	zero,8(r2)
 10154b8:	10000315 	stw	zero,12(r2)
 10154bc:	10000415 	stw	zero,16(r2)
 10154c0:	10000515 	stw	zero,20(r2)
 10154c4:	10000615 	stw	zero,24(r2)
 10154c8:	10000715 	stw	zero,28(r2)
 10154cc:	10000815 	stw	zero,32(r2)
 10154d0:	e0bff917 	ldw	r2,-28(fp)
 10154d4:	10002815 	stw	zero,160(r2)
 10154d8:	e0fff917 	ldw	r3,-28(fp)
 10154dc:	00800044 	movi	r2,1
 10154e0:	18802915 	stw	r2,164(r3)
 10154e4:	18002a15 	stw	zero,168(r3)
 10154e8:	e0fff917 	ldw	r3,-28(fp)
 10154ec:	008cc384 	movi	r2,13070
 10154f0:	18802b0d 	sth	r2,172(r3)
 10154f4:	e0fff917 	ldw	r3,-28(fp)
 10154f8:	00aaf344 	movi	r2,-21555
 10154fc:	18802b8d 	sth	r2,174(r3)
 1015500:	e0fff917 	ldw	r3,-28(fp)
 1015504:	00848d04 	movi	r2,4660
 1015508:	18802c0d 	sth	r2,176(r3)
 101550c:	e0fff917 	ldw	r3,-28(fp)
 1015510:	00b99b44 	movi	r2,-6547
 1015514:	18802c8d 	sth	r2,178(r3)
 1015518:	e0fff917 	ldw	r3,-28(fp)
 101551c:	00b7bb04 	movi	r2,-8468
 1015520:	18802d0d 	sth	r2,180(r3)
 1015524:	e0fff917 	ldw	r3,-28(fp)
 1015528:	00800144 	movi	r2,5
 101552c:	18802d8d 	sth	r2,182(r3)
 1015530:	e0fff917 	ldw	r3,-28(fp)
 1015534:	008002c4 	movi	r2,11
 1015538:	18802e0d 	sth	r2,184(r3)
 101553c:	e0bff917 	ldw	r2,-28(fp)
 1015540:	10002f15 	stw	zero,188(r2)
 1015544:	e0bff917 	ldw	r2,-28(fp)
 1015548:	10003015 	stw	zero,192(r2)
 101554c:	e0bff917 	ldw	r2,-28(fp)
 1015550:	10003115 	stw	zero,196(r2)
 1015554:	e0bff917 	ldw	r2,-28(fp)
 1015558:	10003215 	stw	zero,200(r2)
 101555c:	e0bff917 	ldw	r2,-28(fp)
 1015560:	10003315 	stw	zero,204(r2)
 1015564:	e0bff917 	ldw	r2,-28(fp)
 1015568:	10003415 	stw	zero,208(r2)
 101556c:	e0bff917 	ldw	r2,-28(fp)
 1015570:	10003e15 	stw	zero,248(r2)
 1015574:	e0bff917 	ldw	r2,-28(fp)
 1015578:	10003f15 	stw	zero,252(r2)
 101557c:	e0bff917 	ldw	r2,-28(fp)
 1015580:	10004015 	stw	zero,256(r2)
 1015584:	e0bff917 	ldw	r2,-28(fp)
 1015588:	10004115 	stw	zero,260(r2)
 101558c:	e0bff917 	ldw	r2,-28(fp)
 1015590:	10004215 	stw	zero,264(r2)
 1015594:	e0bff917 	ldw	r2,-28(fp)
 1015598:	10004315 	stw	zero,268(r2)
 101559c:	e0bff917 	ldw	r2,-28(fp)
 10155a0:	10004415 	stw	zero,272(r2)
 10155a4:	e0bff917 	ldw	r2,-28(fp)
 10155a8:	10004515 	stw	zero,276(r2)
 10155ac:	e0bff917 	ldw	r2,-28(fp)
 10155b0:	10004615 	stw	zero,280(r2)
 10155b4:	e0bff917 	ldw	r2,-28(fp)
 10155b8:	10004715 	stw	zero,284(r2)
 10155bc:	e0bff917 	ldw	r2,-28(fp)
 10155c0:	10003505 	stb	zero,212(r2)
 10155c4:	e0bff917 	ldw	r2,-28(fp)
 10155c8:	10003705 	stb	zero,220(r2)
 10155cc:	e0bff917 	ldw	r2,-28(fp)
 10155d0:	10003d15 	stw	zero,244(r2)
 10155d4:	e0bff917 	ldw	r2,-28(fp)
 10155d8:	10005215 	stw	zero,328(r2)
 10155dc:	e0bff917 	ldw	r2,-28(fp)
 10155e0:	10005315 	stw	zero,332(r2)
 10155e4:	e0bff917 	ldw	r2,-28(fp)
 10155e8:	10005415 	stw	zero,336(r2)
 10155ec:	e0bff917 	ldw	r2,-28(fp)
 10155f0:	10005515 	stw	zero,340(r2)
 10155f4:	e0bff917 	ldw	r2,-28(fp)
 10155f8:	1000b515 	stw	zero,724(r2)
 10155fc:	e0bff917 	ldw	r2,-28(fp)
 1015600:	10007515 	stw	zero,468(r2)
 1015604:	e0bff917 	ldw	r2,-28(fp)
 1015608:	1000b715 	stw	zero,732(r2)
 101560c:	e0bff917 	ldw	r2,-28(fp)
 1015610:	1000b815 	stw	zero,736(r2)
 1015614:	e0bff917 	ldw	r2,-28(fp)
 1015618:	1000b915 	stw	zero,740(r2)
 101561c:	e0bff917 	ldw	r2,-28(fp)
 1015620:	1000ba15 	stw	zero,744(r2)
 1015624:	e0bff917 	ldw	r2,-28(fp)
 1015628:	1080bb04 	addi	r2,r2,748
 101562c:	1009883a 	mov	r4,r2
 1015630:	01804504 	movi	r6,276
 1015634:	000b883a 	mov	r5,zero
 1015638:	1005af80 	call	1005af8 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 101563c:	e0bff917 	ldw	r2,-28(fp)
 1015640:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 1015644:	e0bffb17 	ldw	r2,-20(fp)
 1015648:	10bff304 	addi	r2,r2,-52
 101564c:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 1015650:	e0bffa17 	ldw	r2,-24(fp)
 1015654:	10c00c04 	addi	r3,r2,48
 1015658:	e0bffc17 	ldw	r2,-16(fp)
 101565c:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 1015660:	e0bffa17 	ldw	r2,-24(fp)
 1015664:	10c00b04 	addi	r3,r2,44
 1015668:	e0bffd17 	ldw	r2,-12(fp)
 101566c:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 1015670:	e0bffa17 	ldw	r2,-24(fp)
 1015674:	10c00a04 	addi	r3,r2,40
 1015678:	e0bff917 	ldw	r2,-28(fp)
 101567c:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 1015680:	00804074 	movhi	r2,257
 1015684:	1094de04 	addi	r2,r2,21368
 1015688:	10c00104 	addi	r3,r2,4
 101568c:	e0bffa17 	ldw	r2,-24(fp)
 1015690:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 1015694:	e0bffa17 	ldw	r2,-24(fp)
}
 1015698:	e037883a 	mov	sp,fp
 101569c:	dfc00117 	ldw	ra,4(sp)
 10156a0:	df000017 	ldw	fp,0(sp)
 10156a4:	dec00204 	addi	sp,sp,8
 10156a8:	f800283a 	ret

010156ac <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 10156ac:	defffe04 	addi	sp,sp,-8
 10156b0:	df000115 	stw	fp,4(sp)
 10156b4:	df000104 	addi	fp,sp,4
 10156b8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 10156bc:	e037883a 	mov	sp,fp
 10156c0:	df000017 	ldw	fp,0(sp)
 10156c4:	dec00104 	addi	sp,sp,4
 10156c8:	f800283a 	ret

010156cc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 10156cc:	defffe04 	addi	sp,sp,-8
 10156d0:	df000115 	stw	fp,4(sp)
 10156d4:	df000104 	addi	fp,sp,4
 10156d8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 10156dc:	e037883a 	mov	sp,fp
 10156e0:	df000017 	ldw	fp,0(sp)
 10156e4:	dec00104 	addi	sp,sp,4
 10156e8:	f800283a 	ret

010156ec <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 10156ec:	deffff04 	addi	sp,sp,-4
 10156f0:	df000015 	stw	fp,0(sp)
 10156f4:	d839883a 	mov	fp,sp
}
 10156f8:	e037883a 	mov	sp,fp
 10156fc:	df000017 	ldw	fp,0(sp)
 1015700:	dec00104 	addi	sp,sp,4
 1015704:	f800283a 	ret

01015708 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 1015708:	deffff04 	addi	sp,sp,-4
 101570c:	df000015 	stw	fp,0(sp)
 1015710:	d839883a 	mov	fp,sp
}
 1015714:	e037883a 	mov	sp,fp
 1015718:	df000017 	ldw	fp,0(sp)
 101571c:	dec00104 	addi	sp,sp,4
 1015720:	f800283a 	ret

01015724 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 1015724:	deffff04 	addi	sp,sp,-4
 1015728:	df000015 	stw	fp,0(sp)
 101572c:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 1015730:	e037883a 	mov	sp,fp
 1015734:	df000017 	ldw	fp,0(sp)
 1015738:	dec00104 	addi	sp,sp,4
 101573c:	f800283a 	ret

01015740 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 1015740:	deffff04 	addi	sp,sp,-4
 1015744:	df000015 	stw	fp,0(sp)
 1015748:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 101574c:	e037883a 	mov	sp,fp
 1015750:	df000017 	ldw	fp,0(sp)
 1015754:	dec00104 	addi	sp,sp,4
 1015758:	f800283a 	ret

0101575c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 101575c:	deffff04 	addi	sp,sp,-4
 1015760:	df000015 	stw	fp,0(sp)
 1015764:	d839883a 	mov	fp,sp
}
 1015768:	e037883a 	mov	sp,fp
 101576c:	df000017 	ldw	fp,0(sp)
 1015770:	dec00104 	addi	sp,sp,4
 1015774:	f800283a 	ret

01015778 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 1015778:	deffff04 	addi	sp,sp,-4
 101577c:	df000015 	stw	fp,0(sp)
 1015780:	d839883a 	mov	fp,sp
}
 1015784:	e037883a 	mov	sp,fp
 1015788:	df000017 	ldw	fp,0(sp)
 101578c:	dec00104 	addi	sp,sp,4
 1015790:	f800283a 	ret

01015794 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 1015794:	defffe04 	addi	sp,sp,-8
 1015798:	df000115 	stw	fp,4(sp)
 101579c:	df000104 	addi	fp,sp,4
 10157a0:	e13fff15 	stw	r4,-4(fp)
}
 10157a4:	e037883a 	mov	sp,fp
 10157a8:	df000017 	ldw	fp,0(sp)
 10157ac:	dec00104 	addi	sp,sp,4
 10157b0:	f800283a 	ret

010157b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10157b4:	defffa04 	addi	sp,sp,-24
 10157b8:	dfc00515 	stw	ra,20(sp)
 10157bc:	df000415 	stw	fp,16(sp)
 10157c0:	df000404 	addi	fp,sp,16
 10157c4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 10157c8:	00804074 	movhi	r2,257
 10157cc:	109f7404 	addi	r2,r2,32208
 10157d0:	10800017 	ldw	r2,0(r2)
 10157d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10157d8:	00003306 	br	10158a8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 10157dc:	e0bffd17 	ldw	r2,-12(fp)
 10157e0:	11000217 	ldw	r4,8(r2)
 10157e4:	10006940 	call	1000694 <strlen>
 10157e8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 10157ec:	e0bffd17 	ldw	r2,-12(fp)
 10157f0:	10c00217 	ldw	r3,8(r2)
 10157f4:	e0bffc17 	ldw	r2,-16(fp)
 10157f8:	1885883a 	add	r2,r3,r2
 10157fc:	10bfffc4 	addi	r2,r2,-1
 1015800:	10800003 	ldbu	r2,0(r2)
 1015804:	10803fcc 	andi	r2,r2,255
 1015808:	1080201c 	xori	r2,r2,128
 101580c:	10bfe004 	addi	r2,r2,-128
 1015810:	10800bd8 	cmpnei	r2,r2,47
 1015814:	1000031e 	bne	r2,zero,1015824 <alt_find_file+0x70>
    {
      len -= 1;
 1015818:	e0bffc17 	ldw	r2,-16(fp)
 101581c:	10bfffc4 	addi	r2,r2,-1
 1015820:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1015824:	e0bffc17 	ldw	r2,-16(fp)
 1015828:	1007883a 	mov	r3,r2
 101582c:	e0bffe17 	ldw	r2,-8(fp)
 1015830:	1885883a 	add	r2,r3,r2
 1015834:	10800003 	ldbu	r2,0(r2)
 1015838:	10803fcc 	andi	r2,r2,255
 101583c:	1080201c 	xori	r2,r2,128
 1015840:	10bfe004 	addi	r2,r2,-128
 1015844:	10800be0 	cmpeqi	r2,r2,47
 1015848:	10000a1e 	bne	r2,zero,1015874 <alt_find_file+0xc0>
 101584c:	e0bffc17 	ldw	r2,-16(fp)
 1015850:	1007883a 	mov	r3,r2
 1015854:	e0bffe17 	ldw	r2,-8(fp)
 1015858:	1885883a 	add	r2,r3,r2
 101585c:	10800003 	ldbu	r2,0(r2)
 1015860:	10803fcc 	andi	r2,r2,255
 1015864:	1080201c 	xori	r2,r2,128
 1015868:	10bfe004 	addi	r2,r2,-128
 101586c:	1004c03a 	cmpne	r2,r2,zero
 1015870:	10000a1e 	bne	r2,zero,101589c <alt_find_file+0xe8>
 1015874:	e0bffd17 	ldw	r2,-12(fp)
 1015878:	11000217 	ldw	r4,8(r2)
 101587c:	e1bffc17 	ldw	r6,-16(fp)
 1015880:	e17ffe17 	ldw	r5,-8(fp)
 1015884:	1015a240 	call	1015a24 <memcmp>
 1015888:	1004c03a 	cmpne	r2,r2,zero
 101588c:	1000031e 	bne	r2,zero,101589c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1015890:	e0bffd17 	ldw	r2,-12(fp)
 1015894:	e0bfff15 	stw	r2,-4(fp)
 1015898:	00000806 	br	10158bc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 101589c:	e0bffd17 	ldw	r2,-12(fp)
 10158a0:	10800017 	ldw	r2,0(r2)
 10158a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10158a8:	00c04074 	movhi	r3,257
 10158ac:	18df7404 	addi	r3,r3,32208
 10158b0:	e0bffd17 	ldw	r2,-12(fp)
 10158b4:	10ffc91e 	bne	r2,r3,10157dc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10158b8:	e03fff15 	stw	zero,-4(fp)
 10158bc:	e0bfff17 	ldw	r2,-4(fp)
}
 10158c0:	e037883a 	mov	sp,fp
 10158c4:	dfc00117 	ldw	ra,4(sp)
 10158c8:	df000017 	ldw	fp,0(sp)
 10158cc:	dec00204 	addi	sp,sp,8
 10158d0:	f800283a 	ret

010158d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10158d4:	defff704 	addi	sp,sp,-36
 10158d8:	dfc00815 	stw	ra,32(sp)
 10158dc:	df000715 	stw	fp,28(sp)
 10158e0:	dc000615 	stw	r16,24(sp)
 10158e4:	df000604 	addi	fp,sp,24
 10158e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 10158ec:	00bffa04 	movi	r2,-24
 10158f0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 10158f4:	008040b4 	movhi	r2,258
 10158f8:	10a66e04 	addi	r2,r2,-26184
 10158fc:	10800017 	ldw	r2,0(r2)
 1015900:	e0bffa15 	stw	r2,-24(fp)
 1015904:	e03ffb0d 	sth	zero,-20(fp)
 1015908:	e17ffb0b 	ldhu	r5,-20(fp)
 101590c:	e1bffe04 	addi	r6,fp,-8
 1015910:	e13ffa17 	ldw	r4,-24(fp)
 1015914:	10109840 	call	1010984 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1015918:	e03ffd15 	stw	zero,-12(fp)
 101591c:	00002006 	br	10159a0 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
 1015920:	e13ffd17 	ldw	r4,-12(fp)
 1015924:	04004074 	movhi	r16,257
 1015928:	841ae804 	addi	r16,r16,27552
 101592c:	01400304 	movi	r5,12
 1015930:	10098e40 	call	10098e4 <__mulsi3>
 1015934:	1405883a 	add	r2,r2,r16
 1015938:	10800017 	ldw	r2,0(r2)
 101593c:	1004c03a 	cmpne	r2,r2,zero
 1015940:	1000141e 	bne	r2,zero,1015994 <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
 1015944:	e13ffd17 	ldw	r4,-12(fp)
 1015948:	04004074 	movhi	r16,257
 101594c:	841ae804 	addi	r16,r16,27552
 1015950:	01400304 	movi	r5,12
 1015954:	10098e40 	call	10098e4 <__mulsi3>
 1015958:	1407883a 	add	r3,r2,r16
 101595c:	e0bfff17 	ldw	r2,-4(fp)
 1015960:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1015964:	00804074 	movhi	r2,257
 1015968:	109f7804 	addi	r2,r2,32224
 101596c:	10c00017 	ldw	r3,0(r2)
 1015970:	e0bffd17 	ldw	r2,-12(fp)
 1015974:	1880040e 	bge	r3,r2,1015988 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
 1015978:	00c04074 	movhi	r3,257
 101597c:	18df7804 	addi	r3,r3,32224
 1015980:	e0bffd17 	ldw	r2,-12(fp)
 1015984:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1015988:	e0bffd17 	ldw	r2,-12(fp)
 101598c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 1015990:	00000606 	br	10159ac <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1015994:	e0bffd17 	ldw	r2,-12(fp)
 1015998:	10800044 	addi	r2,r2,1
 101599c:	e0bffd15 	stw	r2,-12(fp)
 10159a0:	e0bffd17 	ldw	r2,-12(fp)
 10159a4:	10800810 	cmplti	r2,r2,32
 10159a8:	103fdd1e 	bne	r2,zero,1015920 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 10159ac:	008040b4 	movhi	r2,258
 10159b0:	10a66e04 	addi	r2,r2,-26184
 10159b4:	11000017 	ldw	r4,0(r2)
 10159b8:	1010d7c0 	call	1010d7c <OSSemPost>

  return rc;
 10159bc:	e0bffc17 	ldw	r2,-16(fp)
}
 10159c0:	e037883a 	mov	sp,fp
 10159c4:	dfc00217 	ldw	ra,8(sp)
 10159c8:	df000117 	ldw	fp,4(sp)
 10159cc:	dc000017 	ldw	r16,0(sp)
 10159d0:	dec00304 	addi	sp,sp,12
 10159d4:	f800283a 	ret

010159d8 <atexit>:
 10159d8:	200b883a 	mov	r5,r4
 10159dc:	000d883a 	mov	r6,zero
 10159e0:	0009883a 	mov	r4,zero
 10159e4:	000f883a 	mov	r7,zero
 10159e8:	1015a981 	jmpi	1015a98 <__register_exitproc>

010159ec <exit>:
 10159ec:	defffe04 	addi	sp,sp,-8
 10159f0:	000b883a 	mov	r5,zero
 10159f4:	dc000015 	stw	r16,0(sp)
 10159f8:	dfc00115 	stw	ra,4(sp)
 10159fc:	2021883a 	mov	r16,r4
 1015a00:	1015bd00 	call	1015bd0 <__call_exitprocs>
 1015a04:	00804074 	movhi	r2,257
 1015a08:	109f6f04 	addi	r2,r2,32188
 1015a0c:	11000017 	ldw	r4,0(r2)
 1015a10:	20800f17 	ldw	r2,60(r4)
 1015a14:	10000126 	beq	r2,zero,1015a1c <exit+0x30>
 1015a18:	103ee83a 	callr	r2
 1015a1c:	8009883a 	mov	r4,r16
 1015a20:	1015e640 	call	1015e64 <_exit>

01015a24 <memcmp>:
 1015a24:	00c000c4 	movi	r3,3
 1015a28:	1980032e 	bgeu	r3,r6,1015a38 <memcmp+0x14>
 1015a2c:	2144b03a 	or	r2,r4,r5
 1015a30:	10c4703a 	and	r2,r2,r3
 1015a34:	10000f26 	beq	r2,zero,1015a74 <memcmp+0x50>
 1015a38:	31ffffc4 	addi	r7,r6,-1
 1015a3c:	3000061e 	bne	r6,zero,1015a58 <memcmp+0x34>
 1015a40:	00000a06 	br	1015a6c <memcmp+0x48>
 1015a44:	39ffffc4 	addi	r7,r7,-1
 1015a48:	00bfffc4 	movi	r2,-1
 1015a4c:	21000044 	addi	r4,r4,1
 1015a50:	29400044 	addi	r5,r5,1
 1015a54:	38800526 	beq	r7,r2,1015a6c <memcmp+0x48>
 1015a58:	20c00003 	ldbu	r3,0(r4)
 1015a5c:	28800003 	ldbu	r2,0(r5)
 1015a60:	18bff826 	beq	r3,r2,1015a44 <memcmp+0x20>
 1015a64:	1885c83a 	sub	r2,r3,r2
 1015a68:	f800283a 	ret
 1015a6c:	0005883a 	mov	r2,zero
 1015a70:	f800283a 	ret
 1015a74:	180f883a 	mov	r7,r3
 1015a78:	20c00017 	ldw	r3,0(r4)
 1015a7c:	28800017 	ldw	r2,0(r5)
 1015a80:	18bfed1e 	bne	r3,r2,1015a38 <memcmp+0x14>
 1015a84:	31bfff04 	addi	r6,r6,-4
 1015a88:	21000104 	addi	r4,r4,4
 1015a8c:	29400104 	addi	r5,r5,4
 1015a90:	39bff936 	bltu	r7,r6,1015a78 <memcmp+0x54>
 1015a94:	003fe806 	br	1015a38 <memcmp+0x14>

01015a98 <__register_exitproc>:
 1015a98:	defffa04 	addi	sp,sp,-24
 1015a9c:	00804074 	movhi	r2,257
 1015aa0:	109f6f04 	addi	r2,r2,32188
 1015aa4:	dc000015 	stw	r16,0(sp)
 1015aa8:	14000017 	ldw	r16,0(r2)
 1015aac:	dd000415 	stw	r20,16(sp)
 1015ab0:	2829883a 	mov	r20,r5
 1015ab4:	81405217 	ldw	r5,328(r16)
 1015ab8:	dcc00315 	stw	r19,12(sp)
 1015abc:	dc800215 	stw	r18,8(sp)
 1015ac0:	dc400115 	stw	r17,4(sp)
 1015ac4:	dfc00515 	stw	ra,20(sp)
 1015ac8:	2023883a 	mov	r17,r4
 1015acc:	3027883a 	mov	r19,r6
 1015ad0:	3825883a 	mov	r18,r7
 1015ad4:	28002526 	beq	r5,zero,1015b6c <__register_exitproc+0xd4>
 1015ad8:	29000117 	ldw	r4,4(r5)
 1015adc:	008007c4 	movi	r2,31
 1015ae0:	11002716 	blt	r2,r4,1015b80 <__register_exitproc+0xe8>
 1015ae4:	8800101e 	bne	r17,zero,1015b28 <__register_exitproc+0x90>
 1015ae8:	2105883a 	add	r2,r4,r4
 1015aec:	1085883a 	add	r2,r2,r2
 1015af0:	20c00044 	addi	r3,r4,1
 1015af4:	1145883a 	add	r2,r2,r5
 1015af8:	0009883a 	mov	r4,zero
 1015afc:	15000215 	stw	r20,8(r2)
 1015b00:	28c00115 	stw	r3,4(r5)
 1015b04:	2005883a 	mov	r2,r4
 1015b08:	dfc00517 	ldw	ra,20(sp)
 1015b0c:	dd000417 	ldw	r20,16(sp)
 1015b10:	dcc00317 	ldw	r19,12(sp)
 1015b14:	dc800217 	ldw	r18,8(sp)
 1015b18:	dc400117 	ldw	r17,4(sp)
 1015b1c:	dc000017 	ldw	r16,0(sp)
 1015b20:	dec00604 	addi	sp,sp,24
 1015b24:	f800283a 	ret
 1015b28:	29802204 	addi	r6,r5,136
 1015b2c:	00800044 	movi	r2,1
 1015b30:	110e983a 	sll	r7,r2,r4
 1015b34:	30c04017 	ldw	r3,256(r6)
 1015b38:	2105883a 	add	r2,r4,r4
 1015b3c:	1085883a 	add	r2,r2,r2
 1015b40:	1185883a 	add	r2,r2,r6
 1015b44:	19c6b03a 	or	r3,r3,r7
 1015b48:	14802015 	stw	r18,128(r2)
 1015b4c:	14c00015 	stw	r19,0(r2)
 1015b50:	00800084 	movi	r2,2
 1015b54:	30c04015 	stw	r3,256(r6)
 1015b58:	88bfe31e 	bne	r17,r2,1015ae8 <__register_exitproc+0x50>
 1015b5c:	30804117 	ldw	r2,260(r6)
 1015b60:	11c4b03a 	or	r2,r2,r7
 1015b64:	30804115 	stw	r2,260(r6)
 1015b68:	003fdf06 	br	1015ae8 <__register_exitproc+0x50>
 1015b6c:	008040b4 	movhi	r2,258
 1015b70:	108b6004 	addi	r2,r2,11648
 1015b74:	100b883a 	mov	r5,r2
 1015b78:	80805215 	stw	r2,328(r16)
 1015b7c:	003fd606 	br	1015ad8 <__register_exitproc+0x40>
 1015b80:	00800034 	movhi	r2,0
 1015b84:	10800004 	addi	r2,r2,0
 1015b88:	1000021e 	bne	r2,zero,1015b94 <__register_exitproc+0xfc>
 1015b8c:	013fffc4 	movi	r4,-1
 1015b90:	003fdc06 	br	1015b04 <__register_exitproc+0x6c>
 1015b94:	01006404 	movi	r4,400
 1015b98:	103ee83a 	callr	r2
 1015b9c:	1007883a 	mov	r3,r2
 1015ba0:	103ffa26 	beq	r2,zero,1015b8c <__register_exitproc+0xf4>
 1015ba4:	80805217 	ldw	r2,328(r16)
 1015ba8:	180b883a 	mov	r5,r3
 1015bac:	18000115 	stw	zero,4(r3)
 1015bb0:	18800015 	stw	r2,0(r3)
 1015bb4:	80c05215 	stw	r3,328(r16)
 1015bb8:	18006215 	stw	zero,392(r3)
 1015bbc:	18006315 	stw	zero,396(r3)
 1015bc0:	0009883a 	mov	r4,zero
 1015bc4:	883fc826 	beq	r17,zero,1015ae8 <__register_exitproc+0x50>
 1015bc8:	003fd706 	br	1015b28 <__register_exitproc+0x90>

01015bcc <register_fini>:
 1015bcc:	f800283a 	ret

01015bd0 <__call_exitprocs>:
 1015bd0:	00804074 	movhi	r2,257
 1015bd4:	109f6f04 	addi	r2,r2,32188
 1015bd8:	10800017 	ldw	r2,0(r2)
 1015bdc:	defff304 	addi	sp,sp,-52
 1015be0:	df000b15 	stw	fp,44(sp)
 1015be4:	d8800115 	stw	r2,4(sp)
 1015be8:	00800034 	movhi	r2,0
 1015bec:	10800004 	addi	r2,r2,0
 1015bf0:	1005003a 	cmpeq	r2,r2,zero
 1015bf4:	d8800215 	stw	r2,8(sp)
 1015bf8:	d8800117 	ldw	r2,4(sp)
 1015bfc:	dd400815 	stw	r21,32(sp)
 1015c00:	dd000715 	stw	r20,28(sp)
 1015c04:	10805204 	addi	r2,r2,328
 1015c08:	dfc00c15 	stw	ra,48(sp)
 1015c0c:	ddc00a15 	stw	r23,40(sp)
 1015c10:	dd800915 	stw	r22,36(sp)
 1015c14:	dcc00615 	stw	r19,24(sp)
 1015c18:	dc800515 	stw	r18,20(sp)
 1015c1c:	dc400415 	stw	r17,16(sp)
 1015c20:	dc000315 	stw	r16,12(sp)
 1015c24:	282b883a 	mov	r21,r5
 1015c28:	2039883a 	mov	fp,r4
 1015c2c:	d8800015 	stw	r2,0(sp)
 1015c30:	2829003a 	cmpeq	r20,r5,zero
 1015c34:	d8800117 	ldw	r2,4(sp)
 1015c38:	14405217 	ldw	r17,328(r2)
 1015c3c:	88001026 	beq	r17,zero,1015c80 <__call_exitprocs+0xb0>
 1015c40:	ddc00017 	ldw	r23,0(sp)
 1015c44:	88800117 	ldw	r2,4(r17)
 1015c48:	8c802204 	addi	r18,r17,136
 1015c4c:	143fffc4 	addi	r16,r2,-1
 1015c50:	80000916 	blt	r16,zero,1015c78 <__call_exitprocs+0xa8>
 1015c54:	05bfffc4 	movi	r22,-1
 1015c58:	a000151e 	bne	r20,zero,1015cb0 <__call_exitprocs+0xe0>
 1015c5c:	8409883a 	add	r4,r16,r16
 1015c60:	2105883a 	add	r2,r4,r4
 1015c64:	1485883a 	add	r2,r2,r18
 1015c68:	10c02017 	ldw	r3,128(r2)
 1015c6c:	a8c01126 	beq	r21,r3,1015cb4 <__call_exitprocs+0xe4>
 1015c70:	843fffc4 	addi	r16,r16,-1
 1015c74:	85bff81e 	bne	r16,r22,1015c58 <__call_exitprocs+0x88>
 1015c78:	d8800217 	ldw	r2,8(sp)
 1015c7c:	10003126 	beq	r2,zero,1015d44 <__call_exitprocs+0x174>
 1015c80:	dfc00c17 	ldw	ra,48(sp)
 1015c84:	df000b17 	ldw	fp,44(sp)
 1015c88:	ddc00a17 	ldw	r23,40(sp)
 1015c8c:	dd800917 	ldw	r22,36(sp)
 1015c90:	dd400817 	ldw	r21,32(sp)
 1015c94:	dd000717 	ldw	r20,28(sp)
 1015c98:	dcc00617 	ldw	r19,24(sp)
 1015c9c:	dc800517 	ldw	r18,20(sp)
 1015ca0:	dc400417 	ldw	r17,16(sp)
 1015ca4:	dc000317 	ldw	r16,12(sp)
 1015ca8:	dec00d04 	addi	sp,sp,52
 1015cac:	f800283a 	ret
 1015cb0:	8409883a 	add	r4,r16,r16
 1015cb4:	88c00117 	ldw	r3,4(r17)
 1015cb8:	2105883a 	add	r2,r4,r4
 1015cbc:	1445883a 	add	r2,r2,r17
 1015cc0:	18ffffc4 	addi	r3,r3,-1
 1015cc4:	11800217 	ldw	r6,8(r2)
 1015cc8:	1c001526 	beq	r3,r16,1015d20 <__call_exitprocs+0x150>
 1015ccc:	10000215 	stw	zero,8(r2)
 1015cd0:	303fe726 	beq	r6,zero,1015c70 <__call_exitprocs+0xa0>
 1015cd4:	00c00044 	movi	r3,1
 1015cd8:	1c06983a 	sll	r3,r3,r16
 1015cdc:	90804017 	ldw	r2,256(r18)
 1015ce0:	8cc00117 	ldw	r19,4(r17)
 1015ce4:	1884703a 	and	r2,r3,r2
 1015ce8:	10001426 	beq	r2,zero,1015d3c <__call_exitprocs+0x16c>
 1015cec:	90804117 	ldw	r2,260(r18)
 1015cf0:	1884703a 	and	r2,r3,r2
 1015cf4:	10000c1e 	bne	r2,zero,1015d28 <__call_exitprocs+0x158>
 1015cf8:	2105883a 	add	r2,r4,r4
 1015cfc:	1485883a 	add	r2,r2,r18
 1015d00:	11400017 	ldw	r5,0(r2)
 1015d04:	e009883a 	mov	r4,fp
 1015d08:	303ee83a 	callr	r6
 1015d0c:	88800117 	ldw	r2,4(r17)
 1015d10:	98bfc81e 	bne	r19,r2,1015c34 <__call_exitprocs+0x64>
 1015d14:	b8800017 	ldw	r2,0(r23)
 1015d18:	147fd526 	beq	r2,r17,1015c70 <__call_exitprocs+0xa0>
 1015d1c:	003fc506 	br	1015c34 <__call_exitprocs+0x64>
 1015d20:	8c000115 	stw	r16,4(r17)
 1015d24:	003fea06 	br	1015cd0 <__call_exitprocs+0x100>
 1015d28:	2105883a 	add	r2,r4,r4
 1015d2c:	1485883a 	add	r2,r2,r18
 1015d30:	11000017 	ldw	r4,0(r2)
 1015d34:	303ee83a 	callr	r6
 1015d38:	003ff406 	br	1015d0c <__call_exitprocs+0x13c>
 1015d3c:	303ee83a 	callr	r6
 1015d40:	003ff206 	br	1015d0c <__call_exitprocs+0x13c>
 1015d44:	88800117 	ldw	r2,4(r17)
 1015d48:	1000081e 	bne	r2,zero,1015d6c <__call_exitprocs+0x19c>
 1015d4c:	89000017 	ldw	r4,0(r17)
 1015d50:	20000726 	beq	r4,zero,1015d70 <__call_exitprocs+0x1a0>
 1015d54:	b9000015 	stw	r4,0(r23)
 1015d58:	8809883a 	mov	r4,r17
 1015d5c:	00000000 	call	0 <__alt_mem_onchip_memory>
 1015d60:	bc400017 	ldw	r17,0(r23)
 1015d64:	883fb71e 	bne	r17,zero,1015c44 <__call_exitprocs+0x74>
 1015d68:	003fc506 	br	1015c80 <__call_exitprocs+0xb0>
 1015d6c:	89000017 	ldw	r4,0(r17)
 1015d70:	882f883a 	mov	r23,r17
 1015d74:	2023883a 	mov	r17,r4
 1015d78:	883fb21e 	bne	r17,zero,1015c44 <__call_exitprocs+0x74>
 1015d7c:	003fc006 	br	1015c80 <__call_exitprocs+0xb0>

01015d80 <__fixunsdfsi>:
 1015d80:	defffb04 	addi	sp,sp,-20
 1015d84:	dc400115 	stw	r17,4(sp)
 1015d88:	dc000015 	stw	r16,0(sp)
 1015d8c:	04507834 	movhi	r17,16864
 1015d90:	0021883a 	mov	r16,zero
 1015d94:	800d883a 	mov	r6,r16
 1015d98:	880f883a 	mov	r7,r17
 1015d9c:	dcc00315 	stw	r19,12(sp)
 1015da0:	dc800215 	stw	r18,8(sp)
 1015da4:	2827883a 	mov	r19,r5
 1015da8:	2025883a 	mov	r18,r4
 1015dac:	dfc00415 	stw	ra,16(sp)
 1015db0:	10093240 	call	1009324 <__gedf2>
 1015db4:	000d883a 	mov	r6,zero
 1015db8:	880f883a 	mov	r7,r17
 1015dbc:	980b883a 	mov	r5,r19
 1015dc0:	9009883a 	mov	r4,r18
 1015dc4:	10000d16 	blt	r2,zero,1015dfc <__fixunsdfsi+0x7c>
 1015dc8:	1008a7c0 	call	1008a7c <__subdf3>
 1015dcc:	180b883a 	mov	r5,r3
 1015dd0:	1009883a 	mov	r4,r2
 1015dd4:	100952c0 	call	100952c <__fixdfsi>
 1015dd8:	00e00034 	movhi	r3,32768
 1015ddc:	10c5883a 	add	r2,r2,r3
 1015de0:	dfc00417 	ldw	ra,16(sp)
 1015de4:	dcc00317 	ldw	r19,12(sp)
 1015de8:	dc800217 	ldw	r18,8(sp)
 1015dec:	dc400117 	ldw	r17,4(sp)
 1015df0:	dc000017 	ldw	r16,0(sp)
 1015df4:	dec00504 	addi	sp,sp,20
 1015df8:	f800283a 	ret
 1015dfc:	980b883a 	mov	r5,r19
 1015e00:	9009883a 	mov	r4,r18
 1015e04:	100952c0 	call	100952c <__fixdfsi>
 1015e08:	dfc00417 	ldw	ra,16(sp)
 1015e0c:	dcc00317 	ldw	r19,12(sp)
 1015e10:	dc800217 	ldw	r18,8(sp)
 1015e14:	dc400117 	ldw	r17,4(sp)
 1015e18:	dc000017 	ldw	r16,0(sp)
 1015e1c:	dec00504 	addi	sp,sp,20
 1015e20:	f800283a 	ret

01015e24 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1015e24:	defffd04 	addi	sp,sp,-12
 1015e28:	df000215 	stw	fp,8(sp)
 1015e2c:	df000204 	addi	fp,sp,8
 1015e30:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1015e34:	e0bfff17 	ldw	r2,-4(fp)
 1015e38:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1015e3c:	e0bffe17 	ldw	r2,-8(fp)
 1015e40:	1005003a 	cmpeq	r2,r2,zero
 1015e44:	1000021e 	bne	r2,zero,1015e50 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1015e48:	002af070 	cmpltui	zero,zero,43969
 1015e4c:	00000106 	br	1015e54 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1015e50:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1015e54:	e037883a 	mov	sp,fp
 1015e58:	df000017 	ldw	fp,0(sp)
 1015e5c:	dec00104 	addi	sp,sp,4
 1015e60:	f800283a 	ret

01015e64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1015e64:	defffd04 	addi	sp,sp,-12
 1015e68:	dfc00215 	stw	ra,8(sp)
 1015e6c:	df000115 	stw	fp,4(sp)
 1015e70:	df000104 	addi	fp,sp,4
 1015e74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 1015e78:	008040b4 	movhi	r2,258
 1015e7c:	10a67644 	addi	r2,r2,-26151
 1015e80:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1015e84:	e13fff17 	ldw	r4,-4(fp)
 1015e88:	1015e240 	call	1015e24 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1015e8c:	003fff06 	br	1015e8c <_exit+0x28>
 1015e90:	01015bcc 	andi	r4,zero,1391
