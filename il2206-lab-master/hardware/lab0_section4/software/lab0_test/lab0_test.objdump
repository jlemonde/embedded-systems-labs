
lab0_test.elf:     file format elf32-littlenios2
lab0_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005620 memsz 0x00005620 flags r-x
    LOAD off    0x00006640 vaddr 0x00005640 paddr 0x00007088 align 2**12
         filesz 0x00001a48 memsz 0x00001a48 flags rw-
    LOAD off    0x00008ad0 vaddr 0x00008ad0 paddr 0x00008ad0 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000543c  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  000055f0  000055f0  000065f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a48  00005640  00007088  00006640  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  00008ad0  00008ad0  00008ad0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000008f8  00000000  00000000  000080b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000d49  00000000  00000000  000089a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019d49  00000000  00000000  000096f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004f03  00000000  00000000  0002343a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c9d2  00000000  00000000  0002833d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001014  00000000  00000000  00034d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000173d  00000000  00000000  00035d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003e6e  00000000  00000000  00037461  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003b2d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0003b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003da89  2**0
                  CONTENTS, READONLY
 18 .cpu          00000019  00000000  00000000  0003da8c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003daa5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003daa6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003daa7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003daab  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003daaf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003dab3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003dabe  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003dac9  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000019  00000000  00000000  0003dad4  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000051  00000000  00000000  0003daed  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006d56e  00000000  00000000  0003db3e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000055f0 l    d  .rodata	00000000 .rodata
00005640 l    d  .rwdata	00000000 .rwdata
00008ad0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
00005640 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00001b5c l     F .text	00000058 std
00001c68 l     F .text	00000008 __fp_lock
00001c70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00002ca0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002d00 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00002e04 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00002f28 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00003008 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00003168 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00003398 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00007078 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00003650 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005ff0 l     O .rwdata	00001060 jtag_uart_0
00003750 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00003990 l     F .text	00000228 altera_avalon_jtag_uart_irq
00003bb8 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00004234 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00004558 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00004968 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00004ab8 l     F .text	000000f8 alt_file_locked
00004d3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000053d8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000558c l     F .text	00000040 alt_sim_halt
00002a08 g     F .text	00000070 _isatty_r
000031c8 g     F .text	0000006c alt_main
00000224 g     F .text	000000a0 _puts_r
00008b20 g     O .bss	00000100 alt_irq
00002a78 g     F .text	00000078 _lseek_r
00007088 g       *ABS*	00000000 __flash_rwdata_start
00008db0 g       *ABS*	00000000 __alt_heap_start
00800000 g       *ABS*	00000000 __alt_mem_sram
00002644 g     F .text	00000068 __sseek
00001bc4 g     F .text	000000a4 __sinit
00001cc4 g     F .text	0000009c __sfmoreglue
00003254 g     F .text	00000020 __malloc_unlock
000010ac g     F .text	000000e0 memmove
00001cb4 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002994 g     F .text	00000074 _fstat_r
00008adc g     O .bss	00000004 errno
00008ae4 g     O .bss	00000004 alt_argv
0000f050 g       *ABS*	00000000 _gp
00005e70 g     O .rwdata	00000180 alt_fd_list
00004f60 g     F .text	00000094 alt_find_dev
0000100c g     F .text	000000a0 memcpy
00001ca8 g     F .text	0000000c _cleanup_r
00004a40 g     F .text	00000078 alt_io_redirect
000055f0 g       *ABS*	00000000 __DTOR_END__
000002c4 g     F .text	00000014 puts
00003dd0 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002e64 g     F .text	000000c4 isatty
00008ad0 g     O .bss	00000004 __malloc_top_pad
0000034c g     F .text	0000049c __sfvwrite_r
00001780 g     F .text	00000070 _sbrk_r
00002af0 g     F .text	00000078 _read_r
00007070 g     O .rwdata	00000004 alt_max_fd
00002870 g     F .text	00000110 _fclose_r
00001b28 g     F .text	00000034 fflush
00008ad4 g     O .bss	00000004 __malloc_max_sbrked_mem
00003074 g     F .text	000000f4 lseek
00007054 g     O .rwdata	00000004 _global_impure_ptr
0000118c g     F .text	000005f4 _realloc_r
00008db0 g       *ABS*	00000000 __bss_end
00004870 g     F .text	000000f8 alt_iic_isr_register
00004e34 g     F .text	0000010c alt_tick
00001c90 g     F .text	00000018 __fp_lock_all
00004828 g     F .text	00000048 alt_ic_irq_enabled
00004d9c g     F .text	00000098 alt_alarm_stop
00008aec g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
00005e48 g     O .rwdata	00000028 alt_dev_null
00004488 g     F .text	0000001c alt_dcache_flush_all
00007088 g       *ABS*	00000000 __ram_rwdata_end
00888000 g       *ABS*	00000000 __alt_mem_onchip_memory
00007068 g     O .rwdata	00000008 alt_dev_list
0000352c g     F .text	00000124 write
00005640 g       *ABS*	00000000 __ram_rodata_end
00002d2c g     F .text	000000d8 fstat
00008db0 g       *ABS*	00000000 end
000038d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000055ec g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000042a4 g     F .text	00000090 alt_avalon_timer_sc_init
00003ff4 g     F .text	00000240 altera_avalon_jtag_uart_write
00001bb4 g     F .text	00000004 __sfp_lock_acquire
00000f28 g     F .text	000000e4 memchr
00001f7c g     F .text	00000314 _free_r
000053dc g     F .text	000001b0 __call_exitprocs
0000705c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00008af0 g     O .bss	00000004 _alt_tick_rate
00008af4 g     O .bss	00000004 _alt_nticks
00003274 g     F .text	00000124 read
000036e4 g     F .text	0000006c alt_sys_init
000052a4 g     F .text	00000134 __register_exitproc
00003c68 g     F .text	00000074 altera_avalon_jtag_uart_close
00002b68 g     F .text	00000038 __mulsi3
00005640 g       *ABS*	00000000 __ram_rwdata_start
000055f0 g       *ABS*	00000000 __ram_rodata_start
00008af8 g     O .bss	00000028 __malloc_current_mallinfo
00003788 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00005114 g     F .text	000000d0 alt_get_fd
00002800 g     F .text	00000070 _close_r
00005230 g     F .text	00000074 memcmp
00003838 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00008db0 g       *ABS*	00000000 __alt_stack_base
00003880 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000017f0 g     F .text	0000013c __swsetup_r
00001d60 g     F .text	000000f0 __sfp
00005a40 g     O .rwdata	00000408 __malloc_av_
00001bc0 g     F .text	00000004 __sinit_lock_release
00002728 g     F .text	00000060 __sread
00004ff4 g     F .text	00000120 alt_find_file
000044a4 g     F .text	000000b4 alt_dev_llist_insert
00003234 g     F .text	00000020 __malloc_lock
00003470 g     F .text	000000bc sbrk
0000192c g     F .text	000001fc _fflush_r
00008ad0 g       *ABS*	00000000 __bss_start
000025a4 g     F .text	00000098 memset
000001f0 g     F .text	00000034 main
00008ae8 g     O .bss	00000004 alt_envp
00008ad8 g     O .bss	00000004 __malloc_max_total_mem
000037e0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000263c g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00002980 g     F .text	00000014 fclose
00008c20 g     O .bss	00000190 _atexit0
000007e8 g     F .text	00000740 _malloc_r
00007074 g     O .rwdata	00000004 alt_errno
00002358 g     F .text	000000b8 _fwalk
00001e50 g     F .text	0000012c _malloc_trim_r
000055f0 g       *ABS*	00000000 __CTOR_END__
000055f0 g       *ABS*	00000000 __flash_rodata_start
000055f0 g       *ABS*	00000000 __DTOR_LIST__
000036b0 g     F .text	00000034 alt_irq_init
000033f8 g     F .text	00000078 alt_release_fd
000051e4 g     F .text	00000014 atexit
00002788 g     F .text	00000078 _write_r
00007050 g     O .rwdata	00000004 _impure_ptr
00008ae0 g     O .bss	00000004 alt_argc
0000461c g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00001c78 g     F .text	00000018 __fp_unlock_all
00007060 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000469c g     F .text	00000050 alt_ic_isr_register
00007088 g       *ABS*	00000000 _edata
00008db0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00003cdc g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00004788 g     F .text	000000a0 alt_ic_irq_disable
000026ac g     F .text	0000007c __swrite
00007058 g     O .rwdata	00000004 __malloc_trim_threshold
00004f40 g     F .text	00000020 altera_nios2_qsys_irq_init
000051f8 g     F .text	00000038 exit
00002290 g     F .text	000000c8 _fwalk_reent
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001bb8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000055cc g     F .text	00000020 _exit
00004334 g     F .text	00000154 alt_alarm_start
00002410 g     F .text	00000194 __smakebuf_r
000002d8 g     F .text	00000074 strlen
00004bb0 g     F .text	0000018c open
00004680 g     F .text	0000001c alt_icache_flush_all
0000707c g     O .rwdata	00000004 alt_priority_mask
000046ec g     F .text	0000009c alt_ic_irq_enable
00007080 g     O .rwdata	00000008 alt_alarm_list
000045b8 g     F .text	00000064 _do_ctors
00002ba0 g     F .text	00000100 close
00002f88 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
00001bbc g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406d14 	ori	at,at,436
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18e2c804 	addi	r3,r3,-29920
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18e2c804 	addi	r3,r3,-29920
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c0:	d6bc1414 	ori	gp,gp,61520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1c8:	10a2b414 	ori	r2,r2,35536

    movhi r3, %hi(__bss_end)
     1cc:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d0:	18e36c14 	ori	r3,r3,36272

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	0002f880 	call	2f88 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	00031c80 	call	31c8 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <main>:
 */

#include <stdio.h>

int main()
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	dfc00115 	stw	ra,4(sp)
     1f8:	df000015 	stw	fp,0(sp)
     1fc:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
     200:	01000034 	movhi	r4,0
     204:	21157c04 	addi	r4,r4,22000
     208:	00002c40 	call	2c4 <puts>

  return 0;
     20c:	0005883a 	mov	r2,zero
}
     210:	e037883a 	mov	sp,fp
     214:	dfc00117 	ldw	ra,4(sp)
     218:	df000017 	ldw	fp,0(sp)
     21c:	dec00204 	addi	sp,sp,8
     220:	f800283a 	ret

00000224 <_puts_r>:
     224:	defff604 	addi	sp,sp,-40
     228:	dc400715 	stw	r17,28(sp)
     22c:	2023883a 	mov	r17,r4
     230:	2809883a 	mov	r4,r5
     234:	dfc00915 	stw	ra,36(sp)
     238:	dcc00815 	stw	r19,32(sp)
     23c:	2827883a 	mov	r19,r5
     240:	00002d80 	call	2d8 <strlen>
     244:	89400217 	ldw	r5,8(r17)
     248:	00c00034 	movhi	r3,0
     24c:	18d58104 	addi	r3,r3,22020
     250:	01c00044 	movi	r7,1
     254:	12000044 	addi	r8,r2,1
     258:	d8c00515 	stw	r3,20(sp)
     25c:	d9c00615 	stw	r7,24(sp)
     260:	d8c00304 	addi	r3,sp,12
     264:	01c00084 	movi	r7,2
     268:	8809883a 	mov	r4,r17
     26c:	d80d883a 	mov	r6,sp
     270:	d8c00015 	stw	r3,0(sp)
     274:	dcc00315 	stw	r19,12(sp)
     278:	da000215 	stw	r8,8(sp)
     27c:	d9c00115 	stw	r7,4(sp)
     280:	d8800415 	stw	r2,16(sp)
     284:	000034c0 	call	34c <__sfvwrite_r>
     288:	00ffffc4 	movi	r3,-1
     28c:	10000626 	beq	r2,zero,2a8 <_puts_r+0x84>
     290:	1805883a 	mov	r2,r3
     294:	dfc00917 	ldw	ra,36(sp)
     298:	dcc00817 	ldw	r19,32(sp)
     29c:	dc400717 	ldw	r17,28(sp)
     2a0:	dec00a04 	addi	sp,sp,40
     2a4:	f800283a 	ret
     2a8:	00c00284 	movi	r3,10
     2ac:	1805883a 	mov	r2,r3
     2b0:	dfc00917 	ldw	ra,36(sp)
     2b4:	dcc00817 	ldw	r19,32(sp)
     2b8:	dc400717 	ldw	r17,28(sp)
     2bc:	dec00a04 	addi	sp,sp,40
     2c0:	f800283a 	ret

000002c4 <puts>:
     2c4:	00800034 	movhi	r2,0
     2c8:	109c1404 	addi	r2,r2,28752
     2cc:	200b883a 	mov	r5,r4
     2d0:	11000017 	ldw	r4,0(r2)
     2d4:	00002241 	jmpi	224 <_puts_r>

000002d8 <strlen>:
     2d8:	208000cc 	andi	r2,r4,3
     2dc:	2011883a 	mov	r8,r4
     2e0:	1000161e 	bne	r2,zero,33c <strlen+0x64>
     2e4:	20c00017 	ldw	r3,0(r4)
     2e8:	017fbff4 	movhi	r5,65279
     2ec:	297fbfc4 	addi	r5,r5,-257
     2f0:	01e02074 	movhi	r7,32897
     2f4:	39e02004 	addi	r7,r7,-32640
     2f8:	1945883a 	add	r2,r3,r5
     2fc:	11c4703a 	and	r2,r2,r7
     300:	00c6303a 	nor	r3,zero,r3
     304:	1886703a 	and	r3,r3,r2
     308:	18000c1e 	bne	r3,zero,33c <strlen+0x64>
     30c:	280d883a 	mov	r6,r5
     310:	380b883a 	mov	r5,r7
     314:	21000104 	addi	r4,r4,4
     318:	20800017 	ldw	r2,0(r4)
     31c:	1187883a 	add	r3,r2,r6
     320:	1946703a 	and	r3,r3,r5
     324:	0084303a 	nor	r2,zero,r2
     328:	10c4703a 	and	r2,r2,r3
     32c:	103ff926 	beq	r2,zero,314 <strlen+0x3c>
     330:	20800007 	ldb	r2,0(r4)
     334:	10000326 	beq	r2,zero,344 <strlen+0x6c>
     338:	21000044 	addi	r4,r4,1
     33c:	20800007 	ldb	r2,0(r4)
     340:	103ffd1e 	bne	r2,zero,338 <strlen+0x60>
     344:	2205c83a 	sub	r2,r4,r8
     348:	f800283a 	ret

0000034c <__sfvwrite_r>:
     34c:	30800217 	ldw	r2,8(r6)
     350:	defff504 	addi	sp,sp,-44
     354:	df000915 	stw	fp,36(sp)
     358:	dd800715 	stw	r22,28(sp)
     35c:	dc800315 	stw	r18,12(sp)
     360:	dfc00a15 	stw	ra,40(sp)
     364:	ddc00815 	stw	r23,32(sp)
     368:	dd400615 	stw	r21,24(sp)
     36c:	dd000515 	stw	r20,20(sp)
     370:	dcc00415 	stw	r19,16(sp)
     374:	dc400215 	stw	r17,8(sp)
     378:	dc000115 	stw	r16,4(sp)
     37c:	302d883a 	mov	r22,r6
     380:	2039883a 	mov	fp,r4
     384:	2825883a 	mov	r18,r5
     388:	10001c26 	beq	r2,zero,3fc <__sfvwrite_r+0xb0>
     38c:	29c0030b 	ldhu	r7,12(r5)
     390:	3880020c 	andi	r2,r7,8
     394:	10002726 	beq	r2,zero,434 <__sfvwrite_r+0xe8>
     398:	28800417 	ldw	r2,16(r5)
     39c:	10002526 	beq	r2,zero,434 <__sfvwrite_r+0xe8>
     3a0:	3880008c 	andi	r2,r7,2
     3a4:	b5400017 	ldw	r21,0(r22)
     3a8:	10002826 	beq	r2,zero,44c <__sfvwrite_r+0x100>
     3ac:	0021883a 	mov	r16,zero
     3b0:	0023883a 	mov	r17,zero
     3b4:	880d883a 	mov	r6,r17
     3b8:	e009883a 	mov	r4,fp
     3bc:	00810004 	movi	r2,1024
     3c0:	80006e26 	beq	r16,zero,57c <__sfvwrite_r+0x230>
     3c4:	800f883a 	mov	r7,r16
     3c8:	91400717 	ldw	r5,28(r18)
     3cc:	1400012e 	bgeu	r2,r16,3d4 <__sfvwrite_r+0x88>
     3d0:	100f883a 	mov	r7,r2
     3d4:	90c00917 	ldw	r3,36(r18)
     3d8:	183ee83a 	callr	r3
     3dc:	1007883a 	mov	r3,r2
     3e0:	80a1c83a 	sub	r16,r16,r2
     3e4:	88a3883a 	add	r17,r17,r2
     3e8:	00806d0e 	bge	zero,r2,5a0 <__sfvwrite_r+0x254>
     3ec:	b0800217 	ldw	r2,8(r22)
     3f0:	10c5c83a 	sub	r2,r2,r3
     3f4:	b0800215 	stw	r2,8(r22)
     3f8:	103fee1e 	bne	r2,zero,3b4 <__sfvwrite_r+0x68>
     3fc:	0009883a 	mov	r4,zero
     400:	2005883a 	mov	r2,r4
     404:	dfc00a17 	ldw	ra,40(sp)
     408:	df000917 	ldw	fp,36(sp)
     40c:	ddc00817 	ldw	r23,32(sp)
     410:	dd800717 	ldw	r22,28(sp)
     414:	dd400617 	ldw	r21,24(sp)
     418:	dd000517 	ldw	r20,20(sp)
     41c:	dcc00417 	ldw	r19,16(sp)
     420:	dc800317 	ldw	r18,12(sp)
     424:	dc400217 	ldw	r17,8(sp)
     428:	dc000117 	ldw	r16,4(sp)
     42c:	dec00b04 	addi	sp,sp,44
     430:	f800283a 	ret
     434:	00017f00 	call	17f0 <__swsetup_r>
     438:	1000e41e 	bne	r2,zero,7cc <__sfvwrite_r+0x480>
     43c:	91c0030b 	ldhu	r7,12(r18)
     440:	b5400017 	ldw	r21,0(r22)
     444:	3880008c 	andi	r2,r7,2
     448:	103fd81e 	bne	r2,zero,3ac <__sfvwrite_r+0x60>
     44c:	3880004c 	andi	r2,r7,1
     450:	1005003a 	cmpeq	r2,r2,zero
     454:	10005726 	beq	r2,zero,5b4 <__sfvwrite_r+0x268>
     458:	0029883a 	mov	r20,zero
     45c:	002f883a 	mov	r23,zero
     460:	a0004226 	beq	r20,zero,56c <__sfvwrite_r+0x220>
     464:	3880800c 	andi	r2,r7,512
     468:	94000217 	ldw	r16,8(r18)
     46c:	10008b26 	beq	r2,zero,69c <__sfvwrite_r+0x350>
     470:	800d883a 	mov	r6,r16
     474:	a400a536 	bltu	r20,r16,70c <__sfvwrite_r+0x3c0>
     478:	3881200c 	andi	r2,r7,1152
     47c:	10002726 	beq	r2,zero,51c <__sfvwrite_r+0x1d0>
     480:	90800517 	ldw	r2,20(r18)
     484:	92000417 	ldw	r8,16(r18)
     488:	91400017 	ldw	r5,0(r18)
     48c:	1087883a 	add	r3,r2,r2
     490:	1887883a 	add	r3,r3,r2
     494:	1808d7fa 	srli	r4,r3,31
     498:	2a21c83a 	sub	r16,r5,r8
     49c:	80800044 	addi	r2,r16,1
     4a0:	20c9883a 	add	r4,r4,r3
     4a4:	2027d07a 	srai	r19,r4,1
     4a8:	a085883a 	add	r2,r20,r2
     4ac:	980d883a 	mov	r6,r19
     4b0:	9880022e 	bgeu	r19,r2,4bc <__sfvwrite_r+0x170>
     4b4:	1027883a 	mov	r19,r2
     4b8:	100d883a 	mov	r6,r2
     4bc:	3881000c 	andi	r2,r7,1024
     4c0:	1000b826 	beq	r2,zero,7a4 <__sfvwrite_r+0x458>
     4c4:	300b883a 	mov	r5,r6
     4c8:	e009883a 	mov	r4,fp
     4cc:	00007e80 	call	7e8 <_malloc_r>
     4d0:	10003126 	beq	r2,zero,598 <__sfvwrite_r+0x24c>
     4d4:	91400417 	ldw	r5,16(r18)
     4d8:	1009883a 	mov	r4,r2
     4dc:	800d883a 	mov	r6,r16
     4e0:	1023883a 	mov	r17,r2
     4e4:	000100c0 	call	100c <memcpy>
     4e8:	90c0030b 	ldhu	r3,12(r18)
     4ec:	00beffc4 	movi	r2,-1025
     4f0:	1886703a 	and	r3,r3,r2
     4f4:	18c02014 	ori	r3,r3,128
     4f8:	90c0030d 	sth	r3,12(r18)
     4fc:	9c07c83a 	sub	r3,r19,r16
     500:	8c05883a 	add	r2,r17,r16
     504:	a00d883a 	mov	r6,r20
     508:	a021883a 	mov	r16,r20
     50c:	90800015 	stw	r2,0(r18)
     510:	90c00215 	stw	r3,8(r18)
     514:	94400415 	stw	r17,16(r18)
     518:	94c00515 	stw	r19,20(r18)
     51c:	91000017 	ldw	r4,0(r18)
     520:	b80b883a 	mov	r5,r23
     524:	a023883a 	mov	r17,r20
     528:	00010ac0 	call	10ac <memmove>
     52c:	90c00217 	ldw	r3,8(r18)
     530:	90800017 	ldw	r2,0(r18)
     534:	a027883a 	mov	r19,r20
     538:	1c07c83a 	sub	r3,r3,r16
     53c:	1405883a 	add	r2,r2,r16
     540:	90c00215 	stw	r3,8(r18)
     544:	a021883a 	mov	r16,r20
     548:	90800015 	stw	r2,0(r18)
     54c:	b0800217 	ldw	r2,8(r22)
     550:	1405c83a 	sub	r2,r2,r16
     554:	b0800215 	stw	r2,8(r22)
     558:	103fa826 	beq	r2,zero,3fc <__sfvwrite_r+0xb0>
     55c:	a469c83a 	sub	r20,r20,r17
     560:	91c0030b 	ldhu	r7,12(r18)
     564:	bcef883a 	add	r23,r23,r19
     568:	a03fbe1e 	bne	r20,zero,464 <__sfvwrite_r+0x118>
     56c:	adc00017 	ldw	r23,0(r21)
     570:	ad000117 	ldw	r20,4(r21)
     574:	ad400204 	addi	r21,r21,8
     578:	003fb906 	br	460 <__sfvwrite_r+0x114>
     57c:	ac400017 	ldw	r17,0(r21)
     580:	ac000117 	ldw	r16,4(r21)
     584:	ad400204 	addi	r21,r21,8
     588:	003f8a06 	br	3b4 <__sfvwrite_r+0x68>
     58c:	91400417 	ldw	r5,16(r18)
     590:	e009883a 	mov	r4,fp
     594:	0001f7c0 	call	1f7c <_free_r>
     598:	00800304 	movi	r2,12
     59c:	e0800015 	stw	r2,0(fp)
     5a0:	9080030b 	ldhu	r2,12(r18)
     5a4:	013fffc4 	movi	r4,-1
     5a8:	10801014 	ori	r2,r2,64
     5ac:	9080030d 	sth	r2,12(r18)
     5b0:	003f9306 	br	400 <__sfvwrite_r+0xb4>
     5b4:	0027883a 	mov	r19,zero
     5b8:	002f883a 	mov	r23,zero
     5bc:	d8000015 	stw	zero,0(sp)
     5c0:	0029883a 	mov	r20,zero
     5c4:	98001e26 	beq	r19,zero,640 <__sfvwrite_r+0x2f4>
     5c8:	d8c00017 	ldw	r3,0(sp)
     5cc:	1804c03a 	cmpne	r2,r3,zero
     5d0:	10005e26 	beq	r2,zero,74c <__sfvwrite_r+0x400>
     5d4:	9821883a 	mov	r16,r19
     5d8:	a4c0012e 	bgeu	r20,r19,5e0 <__sfvwrite_r+0x294>
     5dc:	a021883a 	mov	r16,r20
     5e0:	91000017 	ldw	r4,0(r18)
     5e4:	90800417 	ldw	r2,16(r18)
     5e8:	91800217 	ldw	r6,8(r18)
     5ec:	91c00517 	ldw	r7,20(r18)
     5f0:	1100022e 	bgeu	r2,r4,5fc <__sfvwrite_r+0x2b0>
     5f4:	31e3883a 	add	r17,r6,r7
     5f8:	8c001616 	blt	r17,r16,654 <__sfvwrite_r+0x308>
     5fc:	81c03816 	blt	r16,r7,6e0 <__sfvwrite_r+0x394>
     600:	90c00917 	ldw	r3,36(r18)
     604:	91400717 	ldw	r5,28(r18)
     608:	e009883a 	mov	r4,fp
     60c:	b80d883a 	mov	r6,r23
     610:	183ee83a 	callr	r3
     614:	1023883a 	mov	r17,r2
     618:	00bfe10e 	bge	zero,r2,5a0 <__sfvwrite_r+0x254>
     61c:	a469c83a 	sub	r20,r20,r17
     620:	a0001826 	beq	r20,zero,684 <__sfvwrite_r+0x338>
     624:	b0800217 	ldw	r2,8(r22)
     628:	1445c83a 	sub	r2,r2,r17
     62c:	b0800215 	stw	r2,8(r22)
     630:	103f7226 	beq	r2,zero,3fc <__sfvwrite_r+0xb0>
     634:	9c67c83a 	sub	r19,r19,r17
     638:	bc6f883a 	add	r23,r23,r17
     63c:	983fe21e 	bne	r19,zero,5c8 <__sfvwrite_r+0x27c>
     640:	adc00017 	ldw	r23,0(r21)
     644:	acc00117 	ldw	r19,4(r21)
     648:	ad400204 	addi	r21,r21,8
     64c:	d8000015 	stw	zero,0(sp)
     650:	003fdc06 	br	5c4 <__sfvwrite_r+0x278>
     654:	b80b883a 	mov	r5,r23
     658:	880d883a 	mov	r6,r17
     65c:	00010ac0 	call	10ac <memmove>
     660:	90c00017 	ldw	r3,0(r18)
     664:	e009883a 	mov	r4,fp
     668:	900b883a 	mov	r5,r18
     66c:	1c47883a 	add	r3,r3,r17
     670:	90c00015 	stw	r3,0(r18)
     674:	000192c0 	call	192c <_fflush_r>
     678:	103fc91e 	bne	r2,zero,5a0 <__sfvwrite_r+0x254>
     67c:	a469c83a 	sub	r20,r20,r17
     680:	a03fe81e 	bne	r20,zero,624 <__sfvwrite_r+0x2d8>
     684:	e009883a 	mov	r4,fp
     688:	900b883a 	mov	r5,r18
     68c:	000192c0 	call	192c <_fflush_r>
     690:	103fc31e 	bne	r2,zero,5a0 <__sfvwrite_r+0x254>
     694:	d8000015 	stw	zero,0(sp)
     698:	003fe206 	br	624 <__sfvwrite_r+0x2d8>
     69c:	91000017 	ldw	r4,0(r18)
     6a0:	90800417 	ldw	r2,16(r18)
     6a4:	1100022e 	bgeu	r2,r4,6b0 <__sfvwrite_r+0x364>
     6a8:	8023883a 	mov	r17,r16
     6ac:	85003136 	bltu	r16,r20,774 <__sfvwrite_r+0x428>
     6b0:	91c00517 	ldw	r7,20(r18)
     6b4:	a1c01836 	bltu	r20,r7,718 <__sfvwrite_r+0x3cc>
     6b8:	90c00917 	ldw	r3,36(r18)
     6bc:	91400717 	ldw	r5,28(r18)
     6c0:	e009883a 	mov	r4,fp
     6c4:	b80d883a 	mov	r6,r23
     6c8:	183ee83a 	callr	r3
     6cc:	1021883a 	mov	r16,r2
     6d0:	00bfb30e 	bge	zero,r2,5a0 <__sfvwrite_r+0x254>
     6d4:	1023883a 	mov	r17,r2
     6d8:	1027883a 	mov	r19,r2
     6dc:	003f9b06 	br	54c <__sfvwrite_r+0x200>
     6e0:	b80b883a 	mov	r5,r23
     6e4:	800d883a 	mov	r6,r16
     6e8:	00010ac0 	call	10ac <memmove>
     6ec:	90c00217 	ldw	r3,8(r18)
     6f0:	90800017 	ldw	r2,0(r18)
     6f4:	8023883a 	mov	r17,r16
     6f8:	1c07c83a 	sub	r3,r3,r16
     6fc:	1405883a 	add	r2,r2,r16
     700:	90c00215 	stw	r3,8(r18)
     704:	90800015 	stw	r2,0(r18)
     708:	003fc406 	br	61c <__sfvwrite_r+0x2d0>
     70c:	a00d883a 	mov	r6,r20
     710:	a021883a 	mov	r16,r20
     714:	003f8106 	br	51c <__sfvwrite_r+0x1d0>
     718:	b80b883a 	mov	r5,r23
     71c:	a00d883a 	mov	r6,r20
     720:	00010ac0 	call	10ac <memmove>
     724:	90c00217 	ldw	r3,8(r18)
     728:	90800017 	ldw	r2,0(r18)
     72c:	a021883a 	mov	r16,r20
     730:	1d07c83a 	sub	r3,r3,r20
     734:	1505883a 	add	r2,r2,r20
     738:	a023883a 	mov	r17,r20
     73c:	a027883a 	mov	r19,r20
     740:	90c00215 	stw	r3,8(r18)
     744:	90800015 	stw	r2,0(r18)
     748:	003f8006 	br	54c <__sfvwrite_r+0x200>
     74c:	b809883a 	mov	r4,r23
     750:	01400284 	movi	r5,10
     754:	980d883a 	mov	r6,r19
     758:	0000f280 	call	f28 <memchr>
     75c:	10001726 	beq	r2,zero,7bc <__sfvwrite_r+0x470>
     760:	15c5c83a 	sub	r2,r2,r23
     764:	15000044 	addi	r20,r2,1
     768:	00800044 	movi	r2,1
     76c:	d8800015 	stw	r2,0(sp)
     770:	003f9806 	br	5d4 <__sfvwrite_r+0x288>
     774:	b80b883a 	mov	r5,r23
     778:	800d883a 	mov	r6,r16
     77c:	00010ac0 	call	10ac <memmove>
     780:	90c00017 	ldw	r3,0(r18)
     784:	e009883a 	mov	r4,fp
     788:	900b883a 	mov	r5,r18
     78c:	1c07883a 	add	r3,r3,r16
     790:	90c00015 	stw	r3,0(r18)
     794:	8027883a 	mov	r19,r16
     798:	000192c0 	call	192c <_fflush_r>
     79c:	103f6b26 	beq	r2,zero,54c <__sfvwrite_r+0x200>
     7a0:	003f7f06 	br	5a0 <__sfvwrite_r+0x254>
     7a4:	400b883a 	mov	r5,r8
     7a8:	e009883a 	mov	r4,fp
     7ac:	000118c0 	call	118c <_realloc_r>
     7b0:	103f7626 	beq	r2,zero,58c <__sfvwrite_r+0x240>
     7b4:	1023883a 	mov	r17,r2
     7b8:	003f5006 	br	4fc <__sfvwrite_r+0x1b0>
     7bc:	00c00044 	movi	r3,1
     7c0:	9d000044 	addi	r20,r19,1
     7c4:	d8c00015 	stw	r3,0(sp)
     7c8:	003f8206 	br	5d4 <__sfvwrite_r+0x288>
     7cc:	9080030b 	ldhu	r2,12(r18)
     7d0:	00c00244 	movi	r3,9
     7d4:	013fffc4 	movi	r4,-1
     7d8:	10801014 	ori	r2,r2,64
     7dc:	9080030d 	sth	r2,12(r18)
     7e0:	e0c00015 	stw	r3,0(fp)
     7e4:	003f0606 	br	400 <__sfvwrite_r+0xb4>

000007e8 <_malloc_r>:
     7e8:	defff604 	addi	sp,sp,-40
     7ec:	28c002c4 	addi	r3,r5,11
     7f0:	00800584 	movi	r2,22
     7f4:	dc800215 	stw	r18,8(sp)
     7f8:	dfc00915 	stw	ra,36(sp)
     7fc:	df000815 	stw	fp,32(sp)
     800:	ddc00715 	stw	r23,28(sp)
     804:	dd800615 	stw	r22,24(sp)
     808:	dd400515 	stw	r21,20(sp)
     80c:	dd000415 	stw	r20,16(sp)
     810:	dcc00315 	stw	r19,12(sp)
     814:	dc400115 	stw	r17,4(sp)
     818:	dc000015 	stw	r16,0(sp)
     81c:	2025883a 	mov	r18,r4
     820:	10c01236 	bltu	r2,r3,86c <_malloc_r+0x84>
     824:	04400404 	movi	r17,16
     828:	8940142e 	bgeu	r17,r5,87c <_malloc_r+0x94>
     82c:	00800304 	movi	r2,12
     830:	0007883a 	mov	r3,zero
     834:	90800015 	stw	r2,0(r18)
     838:	1805883a 	mov	r2,r3
     83c:	dfc00917 	ldw	ra,36(sp)
     840:	df000817 	ldw	fp,32(sp)
     844:	ddc00717 	ldw	r23,28(sp)
     848:	dd800617 	ldw	r22,24(sp)
     84c:	dd400517 	ldw	r21,20(sp)
     850:	dd000417 	ldw	r20,16(sp)
     854:	dcc00317 	ldw	r19,12(sp)
     858:	dc800217 	ldw	r18,8(sp)
     85c:	dc400117 	ldw	r17,4(sp)
     860:	dc000017 	ldw	r16,0(sp)
     864:	dec00a04 	addi	sp,sp,40
     868:	f800283a 	ret
     86c:	00bffe04 	movi	r2,-8
     870:	18a2703a 	and	r17,r3,r2
     874:	883fed16 	blt	r17,zero,82c <_malloc_r+0x44>
     878:	897fec36 	bltu	r17,r5,82c <_malloc_r+0x44>
     87c:	9009883a 	mov	r4,r18
     880:	00032340 	call	3234 <__malloc_lock>
     884:	00807dc4 	movi	r2,503
     888:	14402b2e 	bgeu	r2,r17,938 <_malloc_r+0x150>
     88c:	8806d27a 	srli	r3,r17,9
     890:	18003f1e 	bne	r3,zero,990 <_malloc_r+0x1a8>
     894:	880cd0fa 	srli	r6,r17,3
     898:	300490fa 	slli	r2,r6,3
     89c:	02c00034 	movhi	r11,0
     8a0:	5ad69004 	addi	r11,r11,23104
     8a4:	12cb883a 	add	r5,r2,r11
     8a8:	2c000317 	ldw	r16,12(r5)
     8ac:	580f883a 	mov	r7,r11
     8b0:	2c00041e 	bne	r5,r16,8c4 <_malloc_r+0xdc>
     8b4:	00000a06 	br	8e0 <_malloc_r+0xf8>
     8b8:	1800860e 	bge	r3,zero,ad4 <_malloc_r+0x2ec>
     8bc:	84000317 	ldw	r16,12(r16)
     8c0:	2c000726 	beq	r5,r16,8e0 <_malloc_r+0xf8>
     8c4:	80800117 	ldw	r2,4(r16)
     8c8:	00ffff04 	movi	r3,-4
     8cc:	10c8703a 	and	r4,r2,r3
     8d0:	2447c83a 	sub	r3,r4,r17
     8d4:	008003c4 	movi	r2,15
     8d8:	10fff70e 	bge	r2,r3,8b8 <_malloc_r+0xd0>
     8dc:	31bfffc4 	addi	r6,r6,-1
     8e0:	32400044 	addi	r9,r6,1
     8e4:	02800034 	movhi	r10,0
     8e8:	52969204 	addi	r10,r10,23112
     8ec:	54000217 	ldw	r16,8(r10)
     8f0:	8280a026 	beq	r16,r10,b74 <_malloc_r+0x38c>
     8f4:	80800117 	ldw	r2,4(r16)
     8f8:	00ffff04 	movi	r3,-4
     8fc:	10ca703a 	and	r5,r2,r3
     900:	2c4dc83a 	sub	r6,r5,r17
     904:	008003c4 	movi	r2,15
     908:	11808316 	blt	r2,r6,b18 <_malloc_r+0x330>
     90c:	52800315 	stw	r10,12(r10)
     910:	52800215 	stw	r10,8(r10)
     914:	30002916 	blt	r6,zero,9bc <_malloc_r+0x1d4>
     918:	8147883a 	add	r3,r16,r5
     91c:	18800117 	ldw	r2,4(r3)
     920:	9009883a 	mov	r4,r18
     924:	10800054 	ori	r2,r2,1
     928:	18800115 	stw	r2,4(r3)
     92c:	00032540 	call	3254 <__malloc_unlock>
     930:	80c00204 	addi	r3,r16,8
     934:	003fc006 	br	838 <_malloc_r+0x50>
     938:	02c00034 	movhi	r11,0
     93c:	5ad69004 	addi	r11,r11,23104
     940:	8ac5883a 	add	r2,r17,r11
     944:	14000317 	ldw	r16,12(r2)
     948:	580f883a 	mov	r7,r11
     94c:	8806d0fa 	srli	r3,r17,3
     950:	14006c26 	beq	r2,r16,b04 <_malloc_r+0x31c>
     954:	80c00117 	ldw	r3,4(r16)
     958:	00bfff04 	movi	r2,-4
     95c:	81800317 	ldw	r6,12(r16)
     960:	1886703a 	and	r3,r3,r2
     964:	80c7883a 	add	r3,r16,r3
     968:	18800117 	ldw	r2,4(r3)
     96c:	81400217 	ldw	r5,8(r16)
     970:	9009883a 	mov	r4,r18
     974:	10800054 	ori	r2,r2,1
     978:	18800115 	stw	r2,4(r3)
     97c:	31400215 	stw	r5,8(r6)
     980:	29800315 	stw	r6,12(r5)
     984:	00032540 	call	3254 <__malloc_unlock>
     988:	80c00204 	addi	r3,r16,8
     98c:	003faa06 	br	838 <_malloc_r+0x50>
     990:	00800104 	movi	r2,4
     994:	10c0052e 	bgeu	r2,r3,9ac <_malloc_r+0x1c4>
     998:	00800504 	movi	r2,20
     99c:	10c07836 	bltu	r2,r3,b80 <_malloc_r+0x398>
     9a0:	198016c4 	addi	r6,r3,91
     9a4:	300490fa 	slli	r2,r6,3
     9a8:	003fbc06 	br	89c <_malloc_r+0xb4>
     9ac:	8804d1ba 	srli	r2,r17,6
     9b0:	11800e04 	addi	r6,r2,56
     9b4:	300490fa 	slli	r2,r6,3
     9b8:	003fb806 	br	89c <_malloc_r+0xb4>
     9bc:	00807fc4 	movi	r2,511
     9c0:	1140bb36 	bltu	r2,r5,cb0 <_malloc_r+0x4c8>
     9c4:	2806d0fa 	srli	r3,r5,3
     9c8:	573ffe04 	addi	fp,r10,-8
     9cc:	00800044 	movi	r2,1
     9d0:	180890fa 	slli	r4,r3,3
     9d4:	1807d0ba 	srai	r3,r3,2
     9d8:	e1c00117 	ldw	r7,4(fp)
     9dc:	5909883a 	add	r4,r11,r4
     9e0:	21400217 	ldw	r5,8(r4)
     9e4:	10c4983a 	sll	r2,r2,r3
     9e8:	81000315 	stw	r4,12(r16)
     9ec:	81400215 	stw	r5,8(r16)
     9f0:	388eb03a 	or	r7,r7,r2
     9f4:	2c000315 	stw	r16,12(r5)
     9f8:	24000215 	stw	r16,8(r4)
     9fc:	e1c00115 	stw	r7,4(fp)
     a00:	4807883a 	mov	r3,r9
     a04:	4800cd16 	blt	r9,zero,d3c <_malloc_r+0x554>
     a08:	1807d0ba 	srai	r3,r3,2
     a0c:	00800044 	movi	r2,1
     a10:	10c8983a 	sll	r4,r2,r3
     a14:	39004436 	bltu	r7,r4,b28 <_malloc_r+0x340>
     a18:	21c4703a 	and	r2,r4,r7
     a1c:	10000a1e 	bne	r2,zero,a48 <_malloc_r+0x260>
     a20:	2109883a 	add	r4,r4,r4
     a24:	00bfff04 	movi	r2,-4
     a28:	4884703a 	and	r2,r9,r2
     a2c:	3906703a 	and	r3,r7,r4
     a30:	12400104 	addi	r9,r2,4
     a34:	1800041e 	bne	r3,zero,a48 <_malloc_r+0x260>
     a38:	2109883a 	add	r4,r4,r4
     a3c:	3904703a 	and	r2,r7,r4
     a40:	4a400104 	addi	r9,r9,4
     a44:	103ffc26 	beq	r2,zero,a38 <_malloc_r+0x250>
     a48:	480490fa 	slli	r2,r9,3
     a4c:	4819883a 	mov	r12,r9
     a50:	023fff04 	movi	r8,-4
     a54:	589b883a 	add	r13,r11,r2
     a58:	6807883a 	mov	r3,r13
     a5c:	014003c4 	movi	r5,15
     a60:	1c000317 	ldw	r16,12(r3)
     a64:	1c00041e 	bne	r3,r16,a78 <_malloc_r+0x290>
     a68:	0000a706 	br	d08 <_malloc_r+0x520>
     a6c:	3000ab0e 	bge	r6,zero,d1c <_malloc_r+0x534>
     a70:	84000317 	ldw	r16,12(r16)
     a74:	1c00a426 	beq	r3,r16,d08 <_malloc_r+0x520>
     a78:	80800117 	ldw	r2,4(r16)
     a7c:	1204703a 	and	r2,r2,r8
     a80:	144dc83a 	sub	r6,r2,r17
     a84:	29bff90e 	bge	r5,r6,a6c <_malloc_r+0x284>
     a88:	81000317 	ldw	r4,12(r16)
     a8c:	80c00217 	ldw	r3,8(r16)
     a90:	89400054 	ori	r5,r17,1
     a94:	8445883a 	add	r2,r16,r17
     a98:	20c00215 	stw	r3,8(r4)
     a9c:	19000315 	stw	r4,12(r3)
     aa0:	81400115 	stw	r5,4(r16)
     aa4:	1187883a 	add	r3,r2,r6
     aa8:	31000054 	ori	r4,r6,1
     aac:	50800315 	stw	r2,12(r10)
     ab0:	50800215 	stw	r2,8(r10)
     ab4:	19800015 	stw	r6,0(r3)
     ab8:	11000115 	stw	r4,4(r2)
     abc:	12800215 	stw	r10,8(r2)
     ac0:	12800315 	stw	r10,12(r2)
     ac4:	9009883a 	mov	r4,r18
     ac8:	00032540 	call	3254 <__malloc_unlock>
     acc:	80c00204 	addi	r3,r16,8
     ad0:	003f5906 	br	838 <_malloc_r+0x50>
     ad4:	8109883a 	add	r4,r16,r4
     ad8:	20800117 	ldw	r2,4(r4)
     adc:	80c00217 	ldw	r3,8(r16)
     ae0:	81400317 	ldw	r5,12(r16)
     ae4:	10800054 	ori	r2,r2,1
     ae8:	20800115 	stw	r2,4(r4)
     aec:	28c00215 	stw	r3,8(r5)
     af0:	19400315 	stw	r5,12(r3)
     af4:	9009883a 	mov	r4,r18
     af8:	00032540 	call	3254 <__malloc_unlock>
     afc:	80c00204 	addi	r3,r16,8
     b00:	003f4d06 	br	838 <_malloc_r+0x50>
     b04:	80800204 	addi	r2,r16,8
     b08:	14000317 	ldw	r16,12(r2)
     b0c:	143f911e 	bne	r2,r16,954 <_malloc_r+0x16c>
     b10:	1a400084 	addi	r9,r3,2
     b14:	003f7306 	br	8e4 <_malloc_r+0xfc>
     b18:	88c00054 	ori	r3,r17,1
     b1c:	8445883a 	add	r2,r16,r17
     b20:	80c00115 	stw	r3,4(r16)
     b24:	003fdf06 	br	aa4 <_malloc_r+0x2bc>
     b28:	e4000217 	ldw	r16,8(fp)
     b2c:	00bfff04 	movi	r2,-4
     b30:	80c00117 	ldw	r3,4(r16)
     b34:	802d883a 	mov	r22,r16
     b38:	18aa703a 	and	r21,r3,r2
     b3c:	ac401636 	bltu	r21,r17,b98 <_malloc_r+0x3b0>
     b40:	ac49c83a 	sub	r4,r21,r17
     b44:	008003c4 	movi	r2,15
     b48:	1100130e 	bge	r2,r4,b98 <_malloc_r+0x3b0>
     b4c:	88800054 	ori	r2,r17,1
     b50:	8447883a 	add	r3,r16,r17
     b54:	80800115 	stw	r2,4(r16)
     b58:	20800054 	ori	r2,r4,1
     b5c:	18800115 	stw	r2,4(r3)
     b60:	e0c00215 	stw	r3,8(fp)
     b64:	9009883a 	mov	r4,r18
     b68:	00032540 	call	3254 <__malloc_unlock>
     b6c:	80c00204 	addi	r3,r16,8
     b70:	003f3106 	br	838 <_malloc_r+0x50>
     b74:	39c00117 	ldw	r7,4(r7)
     b78:	573ffe04 	addi	fp,r10,-8
     b7c:	003fa006 	br	a00 <_malloc_r+0x218>
     b80:	00801504 	movi	r2,84
     b84:	10c06736 	bltu	r2,r3,d24 <_malloc_r+0x53c>
     b88:	8804d33a 	srli	r2,r17,12
     b8c:	11801b84 	addi	r6,r2,110
     b90:	300490fa 	slli	r2,r6,3
     b94:	003f4106 	br	89c <_malloc_r+0xb4>
     b98:	d0a6a017 	ldw	r2,-25984(gp)
     b9c:	d0e00317 	ldw	r3,-32756(gp)
     ba0:	053fffc4 	movi	r20,-1
     ba4:	10800404 	addi	r2,r2,16
     ba8:	88a7883a 	add	r19,r17,r2
     bac:	1d000326 	beq	r3,r20,bbc <_malloc_r+0x3d4>
     bb0:	98c3ffc4 	addi	r3,r19,4095
     bb4:	00bc0004 	movi	r2,-4096
     bb8:	18a6703a 	and	r19,r3,r2
     bbc:	9009883a 	mov	r4,r18
     bc0:	980b883a 	mov	r5,r19
     bc4:	00017800 	call	1780 <_sbrk_r>
     bc8:	1009883a 	mov	r4,r2
     bcc:	15000426 	beq	r2,r20,be0 <_malloc_r+0x3f8>
     bd0:	854b883a 	add	r5,r16,r21
     bd4:	1029883a 	mov	r20,r2
     bd8:	11405a2e 	bgeu	r2,r5,d44 <_malloc_r+0x55c>
     bdc:	87000c26 	beq	r16,fp,c10 <_malloc_r+0x428>
     be0:	e4000217 	ldw	r16,8(fp)
     be4:	80c00117 	ldw	r3,4(r16)
     be8:	00bfff04 	movi	r2,-4
     bec:	1884703a 	and	r2,r3,r2
     bf0:	14400336 	bltu	r2,r17,c00 <_malloc_r+0x418>
     bf4:	1449c83a 	sub	r4,r2,r17
     bf8:	008003c4 	movi	r2,15
     bfc:	113fd316 	blt	r2,r4,b4c <_malloc_r+0x364>
     c00:	9009883a 	mov	r4,r18
     c04:	00032540 	call	3254 <__malloc_unlock>
     c08:	0007883a 	mov	r3,zero
     c0c:	003f0a06 	br	838 <_malloc_r+0x50>
     c10:	05c00074 	movhi	r23,1
     c14:	bde2be04 	addi	r23,r23,-29960
     c18:	b8800017 	ldw	r2,0(r23)
     c1c:	988d883a 	add	r6,r19,r2
     c20:	b9800015 	stw	r6,0(r23)
     c24:	d0e00317 	ldw	r3,-32756(gp)
     c28:	00bfffc4 	movi	r2,-1
     c2c:	18808e26 	beq	r3,r2,e68 <_malloc_r+0x680>
     c30:	2145c83a 	sub	r2,r4,r5
     c34:	3085883a 	add	r2,r6,r2
     c38:	b8800015 	stw	r2,0(r23)
     c3c:	20c001cc 	andi	r3,r4,7
     c40:	18005f1e 	bne	r3,zero,dc0 <_malloc_r+0x5d8>
     c44:	000b883a 	mov	r5,zero
     c48:	a4c5883a 	add	r2,r20,r19
     c4c:	1083ffcc 	andi	r2,r2,4095
     c50:	00c40004 	movi	r3,4096
     c54:	1887c83a 	sub	r3,r3,r2
     c58:	28e7883a 	add	r19,r5,r3
     c5c:	9009883a 	mov	r4,r18
     c60:	980b883a 	mov	r5,r19
     c64:	00017800 	call	1780 <_sbrk_r>
     c68:	1007883a 	mov	r3,r2
     c6c:	00bfffc4 	movi	r2,-1
     c70:	18807a26 	beq	r3,r2,e5c <_malloc_r+0x674>
     c74:	1d05c83a 	sub	r2,r3,r20
     c78:	9885883a 	add	r2,r19,r2
     c7c:	10c00054 	ori	r3,r2,1
     c80:	b8800017 	ldw	r2,0(r23)
     c84:	a021883a 	mov	r16,r20
     c88:	a0c00115 	stw	r3,4(r20)
     c8c:	9885883a 	add	r2,r19,r2
     c90:	b8800015 	stw	r2,0(r23)
     c94:	e5000215 	stw	r20,8(fp)
     c98:	b7003626 	beq	r22,fp,d74 <_malloc_r+0x58c>
     c9c:	018003c4 	movi	r6,15
     ca0:	35404b36 	bltu	r6,r21,dd0 <_malloc_r+0x5e8>
     ca4:	00800044 	movi	r2,1
     ca8:	a0800115 	stw	r2,4(r20)
     cac:	003fcd06 	br	be4 <_malloc_r+0x3fc>
     cb0:	2808d27a 	srli	r4,r5,9
     cb4:	2000371e 	bne	r4,zero,d94 <_malloc_r+0x5ac>
     cb8:	2808d0fa 	srli	r4,r5,3
     cbc:	200690fa 	slli	r3,r4,3
     cc0:	1ad1883a 	add	r8,r3,r11
     cc4:	41800217 	ldw	r6,8(r8)
     cc8:	41805b26 	beq	r8,r6,e38 <_malloc_r+0x650>
     ccc:	30800117 	ldw	r2,4(r6)
     cd0:	00ffff04 	movi	r3,-4
     cd4:	10c4703a 	and	r2,r2,r3
     cd8:	2880022e 	bgeu	r5,r2,ce4 <_malloc_r+0x4fc>
     cdc:	31800217 	ldw	r6,8(r6)
     ce0:	41bffa1e 	bne	r8,r6,ccc <_malloc_r+0x4e4>
     ce4:	32000317 	ldw	r8,12(r6)
     ce8:	39c00117 	ldw	r7,4(r7)
     cec:	82000315 	stw	r8,12(r16)
     cf0:	81800215 	stw	r6,8(r16)
     cf4:	07000034 	movhi	fp,0
     cf8:	e7169004 	addi	fp,fp,23104
     cfc:	34000315 	stw	r16,12(r6)
     d00:	44000215 	stw	r16,8(r8)
     d04:	003f3e06 	br	a00 <_malloc_r+0x218>
     d08:	63000044 	addi	r12,r12,1
     d0c:	608000cc 	andi	r2,r12,3
     d10:	10005d26 	beq	r2,zero,e88 <_malloc_r+0x6a0>
     d14:	18c00204 	addi	r3,r3,8
     d18:	003f5106 	br	a60 <_malloc_r+0x278>
     d1c:	8089883a 	add	r4,r16,r2
     d20:	003f6d06 	br	ad8 <_malloc_r+0x2f0>
     d24:	00805504 	movi	r2,340
     d28:	10c02036 	bltu	r2,r3,dac <_malloc_r+0x5c4>
     d2c:	8804d3fa 	srli	r2,r17,15
     d30:	11801dc4 	addi	r6,r2,119
     d34:	300490fa 	slli	r2,r6,3
     d38:	003ed806 	br	89c <_malloc_r+0xb4>
     d3c:	48c000c4 	addi	r3,r9,3
     d40:	003f3106 	br	a08 <_malloc_r+0x220>
     d44:	05c00074 	movhi	r23,1
     d48:	bde2be04 	addi	r23,r23,-29960
     d4c:	b8800017 	ldw	r2,0(r23)
     d50:	988d883a 	add	r6,r19,r2
     d54:	b9800015 	stw	r6,0(r23)
     d58:	293fb21e 	bne	r5,r4,c24 <_malloc_r+0x43c>
     d5c:	2083ffcc 	andi	r2,r4,4095
     d60:	103fb01e 	bne	r2,zero,c24 <_malloc_r+0x43c>
     d64:	e4000217 	ldw	r16,8(fp)
     d68:	9d45883a 	add	r2,r19,r21
     d6c:	10800054 	ori	r2,r2,1
     d70:	80800115 	stw	r2,4(r16)
     d74:	b8c00017 	ldw	r3,0(r23)
     d78:	d0a6a117 	ldw	r2,-25980(gp)
     d7c:	10c0012e 	bgeu	r2,r3,d84 <_malloc_r+0x59c>
     d80:	d0e6a115 	stw	r3,-25980(gp)
     d84:	d0a6a217 	ldw	r2,-25976(gp)
     d88:	10ff962e 	bgeu	r2,r3,be4 <_malloc_r+0x3fc>
     d8c:	d0e6a215 	stw	r3,-25976(gp)
     d90:	003f9406 	br	be4 <_malloc_r+0x3fc>
     d94:	00800104 	movi	r2,4
     d98:	11001e36 	bltu	r2,r4,e14 <_malloc_r+0x62c>
     d9c:	2804d1ba 	srli	r2,r5,6
     da0:	11000e04 	addi	r4,r2,56
     da4:	200690fa 	slli	r3,r4,3
     da8:	003fc506 	br	cc0 <_malloc_r+0x4d8>
     dac:	00815504 	movi	r2,1364
     db0:	10c01d2e 	bgeu	r2,r3,e28 <_malloc_r+0x640>
     db4:	01801f84 	movi	r6,126
     db8:	0080fc04 	movi	r2,1008
     dbc:	003eb706 	br	89c <_malloc_r+0xb4>
     dc0:	00800204 	movi	r2,8
     dc4:	10cbc83a 	sub	r5,r2,r3
     dc8:	2169883a 	add	r20,r4,r5
     dcc:	003f9e06 	br	c48 <_malloc_r+0x460>
     dd0:	00bffe04 	movi	r2,-8
     dd4:	a93ffd04 	addi	r4,r21,-12
     dd8:	2088703a 	and	r4,r4,r2
     ddc:	b10b883a 	add	r5,r22,r4
     de0:	00c00144 	movi	r3,5
     de4:	28c00215 	stw	r3,8(r5)
     de8:	28c00115 	stw	r3,4(r5)
     dec:	b0800117 	ldw	r2,4(r22)
     df0:	1080004c 	andi	r2,r2,1
     df4:	2084b03a 	or	r2,r4,r2
     df8:	b0800115 	stw	r2,4(r22)
     dfc:	313fdd2e 	bgeu	r6,r4,d74 <_malloc_r+0x58c>
     e00:	b1400204 	addi	r5,r22,8
     e04:	9009883a 	mov	r4,r18
     e08:	0001f7c0 	call	1f7c <_free_r>
     e0c:	e4000217 	ldw	r16,8(fp)
     e10:	003fd806 	br	d74 <_malloc_r+0x58c>
     e14:	00800504 	movi	r2,20
     e18:	11001536 	bltu	r2,r4,e70 <_malloc_r+0x688>
     e1c:	210016c4 	addi	r4,r4,91
     e20:	200690fa 	slli	r3,r4,3
     e24:	003fa606 	br	cc0 <_malloc_r+0x4d8>
     e28:	8804d4ba 	srli	r2,r17,18
     e2c:	11801f04 	addi	r6,r2,124
     e30:	300490fa 	slli	r2,r6,3
     e34:	003e9906 	br	89c <_malloc_r+0xb4>
     e38:	2009d0ba 	srai	r4,r4,2
     e3c:	01400034 	movhi	r5,0
     e40:	29569004 	addi	r5,r5,23104
     e44:	00c00044 	movi	r3,1
     e48:	28800117 	ldw	r2,4(r5)
     e4c:	1906983a 	sll	r3,r3,r4
     e50:	10c4b03a 	or	r2,r2,r3
     e54:	28800115 	stw	r2,4(r5)
     e58:	003fa306 	br	ce8 <_malloc_r+0x500>
     e5c:	0027883a 	mov	r19,zero
     e60:	00c00044 	movi	r3,1
     e64:	003f8606 	br	c80 <_malloc_r+0x498>
     e68:	d1200315 	stw	r4,-32756(gp)
     e6c:	003f7306 	br	c3c <_malloc_r+0x454>
     e70:	00801504 	movi	r2,84
     e74:	11001936 	bltu	r2,r4,edc <_malloc_r+0x6f4>
     e78:	2804d33a 	srli	r2,r5,12
     e7c:	11001b84 	addi	r4,r2,110
     e80:	200690fa 	slli	r3,r4,3
     e84:	003f8e06 	br	cc0 <_malloc_r+0x4d8>
     e88:	480b883a 	mov	r5,r9
     e8c:	6807883a 	mov	r3,r13
     e90:	288000cc 	andi	r2,r5,3
     e94:	18fffe04 	addi	r3,r3,-8
     e98:	297fffc4 	addi	r5,r5,-1
     e9c:	10001526 	beq	r2,zero,ef4 <_malloc_r+0x70c>
     ea0:	18800217 	ldw	r2,8(r3)
     ea4:	10fffa26 	beq	r2,r3,e90 <_malloc_r+0x6a8>
     ea8:	2109883a 	add	r4,r4,r4
     eac:	393f1e36 	bltu	r7,r4,b28 <_malloc_r+0x340>
     eb0:	203f1d26 	beq	r4,zero,b28 <_malloc_r+0x340>
     eb4:	21c4703a 	and	r2,r4,r7
     eb8:	10000226 	beq	r2,zero,ec4 <_malloc_r+0x6dc>
     ebc:	6013883a 	mov	r9,r12
     ec0:	003ee106 	br	a48 <_malloc_r+0x260>
     ec4:	2109883a 	add	r4,r4,r4
     ec8:	3904703a 	and	r2,r7,r4
     ecc:	63000104 	addi	r12,r12,4
     ed0:	103ffc26 	beq	r2,zero,ec4 <_malloc_r+0x6dc>
     ed4:	6013883a 	mov	r9,r12
     ed8:	003edb06 	br	a48 <_malloc_r+0x260>
     edc:	00805504 	movi	r2,340
     ee0:	11000836 	bltu	r2,r4,f04 <_malloc_r+0x71c>
     ee4:	2804d3fa 	srli	r2,r5,15
     ee8:	11001dc4 	addi	r4,r2,119
     eec:	200690fa 	slli	r3,r4,3
     ef0:	003f7306 	br	cc0 <_malloc_r+0x4d8>
     ef4:	0104303a 	nor	r2,zero,r4
     ef8:	388e703a 	and	r7,r7,r2
     efc:	e1c00115 	stw	r7,4(fp)
     f00:	003fe906 	br	ea8 <_malloc_r+0x6c0>
     f04:	00815504 	movi	r2,1364
     f08:	1100032e 	bgeu	r2,r4,f18 <_malloc_r+0x730>
     f0c:	01001f84 	movi	r4,126
     f10:	00c0fc04 	movi	r3,1008
     f14:	003f6a06 	br	cc0 <_malloc_r+0x4d8>
     f18:	2804d4ba 	srli	r2,r5,18
     f1c:	11001f04 	addi	r4,r2,124
     f20:	200690fa 	slli	r3,r4,3
     f24:	003f6606 	br	cc0 <_malloc_r+0x4d8>

00000f28 <memchr>:
     f28:	008000c4 	movi	r2,3
     f2c:	29403fcc 	andi	r5,r5,255
     f30:	2007883a 	mov	r3,r4
     f34:	1180022e 	bgeu	r2,r6,f40 <memchr+0x18>
     f38:	2084703a 	and	r2,r4,r2
     f3c:	10000b26 	beq	r2,zero,f6c <memchr+0x44>
     f40:	313fffc4 	addi	r4,r6,-1
     f44:	3000051e 	bne	r6,zero,f5c <memchr+0x34>
     f48:	00002c06 	br	ffc <memchr+0xd4>
     f4c:	213fffc4 	addi	r4,r4,-1
     f50:	00bfffc4 	movi	r2,-1
     f54:	18c00044 	addi	r3,r3,1
     f58:	20802826 	beq	r4,r2,ffc <memchr+0xd4>
     f5c:	18800003 	ldbu	r2,0(r3)
     f60:	28bffa1e 	bne	r5,r2,f4c <memchr+0x24>
     f64:	1805883a 	mov	r2,r3
     f68:	f800283a 	ret
     f6c:	0011883a 	mov	r8,zero
     f70:	0007883a 	mov	r3,zero
     f74:	01c00104 	movi	r7,4
     f78:	4004923a 	slli	r2,r8,8
     f7c:	18c00044 	addi	r3,r3,1
     f80:	1151883a 	add	r8,r2,r5
     f84:	19fffc1e 	bne	r3,r7,f78 <memchr+0x50>
     f88:	02bfbff4 	movhi	r10,65279
     f8c:	52bfbfc4 	addi	r10,r10,-257
     f90:	02602074 	movhi	r9,32897
     f94:	4a602004 	addi	r9,r9,-32640
     f98:	02c000c4 	movi	r11,3
     f9c:	20800017 	ldw	r2,0(r4)
     fa0:	31bfff04 	addi	r6,r6,-4
     fa4:	200f883a 	mov	r7,r4
     fa8:	1204f03a 	xor	r2,r2,r8
     fac:	1287883a 	add	r3,r2,r10
     fb0:	1a46703a 	and	r3,r3,r9
     fb4:	0084303a 	nor	r2,zero,r2
     fb8:	10c4703a 	and	r2,r2,r3
     fbc:	10000b26 	beq	r2,zero,fec <memchr+0xc4>
     fc0:	20800003 	ldbu	r2,0(r4)
     fc4:	28800f26 	beq	r5,r2,1004 <memchr+0xdc>
     fc8:	20800043 	ldbu	r2,1(r4)
     fcc:	21c00044 	addi	r7,r4,1
     fd0:	28800c26 	beq	r5,r2,1004 <memchr+0xdc>
     fd4:	20800083 	ldbu	r2,2(r4)
     fd8:	21c00084 	addi	r7,r4,2
     fdc:	28800926 	beq	r5,r2,1004 <memchr+0xdc>
     fe0:	208000c3 	ldbu	r2,3(r4)
     fe4:	21c000c4 	addi	r7,r4,3
     fe8:	28800626 	beq	r5,r2,1004 <memchr+0xdc>
     fec:	21000104 	addi	r4,r4,4
     ff0:	59bfea36 	bltu	r11,r6,f9c <memchr+0x74>
     ff4:	2007883a 	mov	r3,r4
     ff8:	003fd106 	br	f40 <memchr+0x18>
     ffc:	0005883a 	mov	r2,zero
    1000:	f800283a 	ret
    1004:	3805883a 	mov	r2,r7
    1008:	f800283a 	ret

0000100c <memcpy>:
    100c:	01c003c4 	movi	r7,15
    1010:	2007883a 	mov	r3,r4
    1014:	3980032e 	bgeu	r7,r6,1024 <memcpy+0x18>
    1018:	2904b03a 	or	r2,r5,r4
    101c:	108000cc 	andi	r2,r2,3
    1020:	10000926 	beq	r2,zero,1048 <memcpy+0x3c>
    1024:	30000626 	beq	r6,zero,1040 <memcpy+0x34>
    1028:	30cd883a 	add	r6,r6,r3
    102c:	28800003 	ldbu	r2,0(r5)
    1030:	29400044 	addi	r5,r5,1
    1034:	18800005 	stb	r2,0(r3)
    1038:	18c00044 	addi	r3,r3,1
    103c:	30fffb1e 	bne	r6,r3,102c <memcpy+0x20>
    1040:	2005883a 	mov	r2,r4
    1044:	f800283a 	ret
    1048:	3811883a 	mov	r8,r7
    104c:	200f883a 	mov	r7,r4
    1050:	28c00017 	ldw	r3,0(r5)
    1054:	31bffc04 	addi	r6,r6,-16
    1058:	38c00015 	stw	r3,0(r7)
    105c:	28800117 	ldw	r2,4(r5)
    1060:	38800115 	stw	r2,4(r7)
    1064:	28c00217 	ldw	r3,8(r5)
    1068:	38c00215 	stw	r3,8(r7)
    106c:	28800317 	ldw	r2,12(r5)
    1070:	29400404 	addi	r5,r5,16
    1074:	38800315 	stw	r2,12(r7)
    1078:	39c00404 	addi	r7,r7,16
    107c:	41bff436 	bltu	r8,r6,1050 <memcpy+0x44>
    1080:	008000c4 	movi	r2,3
    1084:	1180072e 	bgeu	r2,r6,10a4 <memcpy+0x98>
    1088:	1007883a 	mov	r3,r2
    108c:	28800017 	ldw	r2,0(r5)
    1090:	31bfff04 	addi	r6,r6,-4
    1094:	29400104 	addi	r5,r5,4
    1098:	38800015 	stw	r2,0(r7)
    109c:	39c00104 	addi	r7,r7,4
    10a0:	19bffa36 	bltu	r3,r6,108c <memcpy+0x80>
    10a4:	3807883a 	mov	r3,r7
    10a8:	003fde06 	br	1024 <memcpy+0x18>

000010ac <memmove>:
    10ac:	2807883a 	mov	r3,r5
    10b0:	2011883a 	mov	r8,r4
    10b4:	29000c2e 	bgeu	r5,r4,10e8 <memmove+0x3c>
    10b8:	298f883a 	add	r7,r5,r6
    10bc:	21c00a2e 	bgeu	r4,r7,10e8 <memmove+0x3c>
    10c0:	30000726 	beq	r6,zero,10e0 <memmove+0x34>
    10c4:	2187883a 	add	r3,r4,r6
    10c8:	198dc83a 	sub	r6,r3,r6
    10cc:	39ffffc4 	addi	r7,r7,-1
    10d0:	38800003 	ldbu	r2,0(r7)
    10d4:	18ffffc4 	addi	r3,r3,-1
    10d8:	18800005 	stb	r2,0(r3)
    10dc:	19bffb1e 	bne	r3,r6,10cc <memmove+0x20>
    10e0:	2005883a 	mov	r2,r4
    10e4:	f800283a 	ret
    10e8:	01c003c4 	movi	r7,15
    10ec:	39800a36 	bltu	r7,r6,1118 <memmove+0x6c>
    10f0:	303ffb26 	beq	r6,zero,10e0 <memmove+0x34>
    10f4:	400f883a 	mov	r7,r8
    10f8:	320d883a 	add	r6,r6,r8
    10fc:	28800003 	ldbu	r2,0(r5)
    1100:	29400044 	addi	r5,r5,1
    1104:	38800005 	stb	r2,0(r7)
    1108:	39c00044 	addi	r7,r7,1
    110c:	39bffb1e 	bne	r7,r6,10fc <memmove+0x50>
    1110:	2005883a 	mov	r2,r4
    1114:	f800283a 	ret
    1118:	1904b03a 	or	r2,r3,r4
    111c:	108000cc 	andi	r2,r2,3
    1120:	103ff31e 	bne	r2,zero,10f0 <memmove+0x44>
    1124:	3811883a 	mov	r8,r7
    1128:	180b883a 	mov	r5,r3
    112c:	200f883a 	mov	r7,r4
    1130:	28c00017 	ldw	r3,0(r5)
    1134:	31bffc04 	addi	r6,r6,-16
    1138:	38c00015 	stw	r3,0(r7)
    113c:	28800117 	ldw	r2,4(r5)
    1140:	38800115 	stw	r2,4(r7)
    1144:	28c00217 	ldw	r3,8(r5)
    1148:	38c00215 	stw	r3,8(r7)
    114c:	28800317 	ldw	r2,12(r5)
    1150:	29400404 	addi	r5,r5,16
    1154:	38800315 	stw	r2,12(r7)
    1158:	39c00404 	addi	r7,r7,16
    115c:	41bff436 	bltu	r8,r6,1130 <memmove+0x84>
    1160:	008000c4 	movi	r2,3
    1164:	1180072e 	bgeu	r2,r6,1184 <memmove+0xd8>
    1168:	1007883a 	mov	r3,r2
    116c:	28800017 	ldw	r2,0(r5)
    1170:	31bfff04 	addi	r6,r6,-4
    1174:	29400104 	addi	r5,r5,4
    1178:	38800015 	stw	r2,0(r7)
    117c:	39c00104 	addi	r7,r7,4
    1180:	19bffa36 	bltu	r3,r6,116c <memmove+0xc0>
    1184:	3811883a 	mov	r8,r7
    1188:	003fd906 	br	10f0 <memmove+0x44>

0000118c <_realloc_r>:
    118c:	defff404 	addi	sp,sp,-48
    1190:	dd800815 	stw	r22,32(sp)
    1194:	dc800415 	stw	r18,16(sp)
    1198:	dc400315 	stw	r17,12(sp)
    119c:	dfc00b15 	stw	ra,44(sp)
    11a0:	df000a15 	stw	fp,40(sp)
    11a4:	ddc00915 	stw	r23,36(sp)
    11a8:	dd400715 	stw	r21,28(sp)
    11ac:	dd000615 	stw	r20,24(sp)
    11b0:	dcc00515 	stw	r19,20(sp)
    11b4:	dc000215 	stw	r16,8(sp)
    11b8:	2825883a 	mov	r18,r5
    11bc:	3023883a 	mov	r17,r6
    11c0:	202d883a 	mov	r22,r4
    11c4:	2800c926 	beq	r5,zero,14ec <_realloc_r+0x360>
    11c8:	00032340 	call	3234 <__malloc_lock>
    11cc:	943ffe04 	addi	r16,r18,-8
    11d0:	88c002c4 	addi	r3,r17,11
    11d4:	00800584 	movi	r2,22
    11d8:	82000117 	ldw	r8,4(r16)
    11dc:	10c01b2e 	bgeu	r2,r3,124c <_realloc_r+0xc0>
    11e0:	00bffe04 	movi	r2,-8
    11e4:	188e703a 	and	r7,r3,r2
    11e8:	3839883a 	mov	fp,r7
    11ec:	38001a16 	blt	r7,zero,1258 <_realloc_r+0xcc>
    11f0:	e4401936 	bltu	fp,r17,1258 <_realloc_r+0xcc>
    11f4:	013fff04 	movi	r4,-4
    11f8:	4126703a 	and	r19,r8,r4
    11fc:	99c02616 	blt	r19,r7,1298 <_realloc_r+0x10c>
    1200:	802b883a 	mov	r21,r16
    1204:	9829883a 	mov	r20,r19
    1208:	84000204 	addi	r16,r16,8
    120c:	a80f883a 	mov	r7,r21
    1210:	a70dc83a 	sub	r6,r20,fp
    1214:	008003c4 	movi	r2,15
    1218:	1180c136 	bltu	r2,r6,1520 <_realloc_r+0x394>
    121c:	38800117 	ldw	r2,4(r7)
    1220:	a549883a 	add	r4,r20,r21
    1224:	1080004c 	andi	r2,r2,1
    1228:	a084b03a 	or	r2,r20,r2
    122c:	38800115 	stw	r2,4(r7)
    1230:	20c00117 	ldw	r3,4(r4)
    1234:	18c00054 	ori	r3,r3,1
    1238:	20c00115 	stw	r3,4(r4)
    123c:	b009883a 	mov	r4,r22
    1240:	00032540 	call	3254 <__malloc_unlock>
    1244:	8023883a 	mov	r17,r16
    1248:	00000606 	br	1264 <_realloc_r+0xd8>
    124c:	01c00404 	movi	r7,16
    1250:	3839883a 	mov	fp,r7
    1254:	e47fe72e 	bgeu	fp,r17,11f4 <_realloc_r+0x68>
    1258:	00800304 	movi	r2,12
    125c:	0023883a 	mov	r17,zero
    1260:	b0800015 	stw	r2,0(r22)
    1264:	8805883a 	mov	r2,r17
    1268:	dfc00b17 	ldw	ra,44(sp)
    126c:	df000a17 	ldw	fp,40(sp)
    1270:	ddc00917 	ldw	r23,36(sp)
    1274:	dd800817 	ldw	r22,32(sp)
    1278:	dd400717 	ldw	r21,28(sp)
    127c:	dd000617 	ldw	r20,24(sp)
    1280:	dcc00517 	ldw	r19,20(sp)
    1284:	dc800417 	ldw	r18,16(sp)
    1288:	dc400317 	ldw	r17,12(sp)
    128c:	dc000217 	ldw	r16,8(sp)
    1290:	dec00c04 	addi	sp,sp,48
    1294:	f800283a 	ret
    1298:	00800034 	movhi	r2,0
    129c:	10969004 	addi	r2,r2,23104
    12a0:	12400217 	ldw	r9,8(r2)
    12a4:	84cd883a 	add	r6,r16,r19
    12a8:	802b883a 	mov	r21,r16
    12ac:	3240b926 	beq	r6,r9,1594 <_realloc_r+0x408>
    12b0:	31400117 	ldw	r5,4(r6)
    12b4:	00bfff84 	movi	r2,-2
    12b8:	2884703a 	and	r2,r5,r2
    12bc:	1185883a 	add	r2,r2,r6
    12c0:	10c00117 	ldw	r3,4(r2)
    12c4:	18c0004c 	andi	r3,r3,1
    12c8:	1807003a 	cmpeq	r3,r3,zero
    12cc:	1800a326 	beq	r3,zero,155c <_realloc_r+0x3d0>
    12d0:	2908703a 	and	r4,r5,r4
    12d4:	9929883a 	add	r20,r19,r4
    12d8:	a1c0a30e 	bge	r20,r7,1568 <_realloc_r+0x3dc>
    12dc:	4080004c 	andi	r2,r8,1
    12e0:	1000551e 	bne	r2,zero,1438 <_realloc_r+0x2ac>
    12e4:	80800017 	ldw	r2,0(r16)
    12e8:	80afc83a 	sub	r23,r16,r2
    12ec:	b8c00117 	ldw	r3,4(r23)
    12f0:	00bfff04 	movi	r2,-4
    12f4:	1884703a 	and	r2,r3,r2
    12f8:	30002e26 	beq	r6,zero,13b4 <_realloc_r+0x228>
    12fc:	3240b926 	beq	r6,r9,15e4 <_realloc_r+0x458>
    1300:	98a9883a 	add	r20,r19,r2
    1304:	2509883a 	add	r4,r4,r20
    1308:	d9000015 	stw	r4,0(sp)
    130c:	21c02a16 	blt	r4,r7,13b8 <_realloc_r+0x22c>
    1310:	30800317 	ldw	r2,12(r6)
    1314:	30c00217 	ldw	r3,8(r6)
    1318:	01400904 	movi	r5,36
    131c:	99bfff04 	addi	r6,r19,-4
    1320:	18800315 	stw	r2,12(r3)
    1324:	10c00215 	stw	r3,8(r2)
    1328:	b9000317 	ldw	r4,12(r23)
    132c:	b8800217 	ldw	r2,8(r23)
    1330:	b82b883a 	mov	r21,r23
    1334:	bc000204 	addi	r16,r23,8
    1338:	20800215 	stw	r2,8(r4)
    133c:	11000315 	stw	r4,12(r2)
    1340:	2980e436 	bltu	r5,r6,16d4 <_realloc_r+0x548>
    1344:	008004c4 	movi	r2,19
    1348:	9009883a 	mov	r4,r18
    134c:	8011883a 	mov	r8,r16
    1350:	11800f2e 	bgeu	r2,r6,1390 <_realloc_r+0x204>
    1354:	90800017 	ldw	r2,0(r18)
    1358:	ba000404 	addi	r8,r23,16
    135c:	91000204 	addi	r4,r18,8
    1360:	b8800215 	stw	r2,8(r23)
    1364:	90c00117 	ldw	r3,4(r18)
    1368:	008006c4 	movi	r2,27
    136c:	b8c00315 	stw	r3,12(r23)
    1370:	1180072e 	bgeu	r2,r6,1390 <_realloc_r+0x204>
    1374:	90c00217 	ldw	r3,8(r18)
    1378:	ba000604 	addi	r8,r23,24
    137c:	91000404 	addi	r4,r18,16
    1380:	b8c00415 	stw	r3,16(r23)
    1384:	90800317 	ldw	r2,12(r18)
    1388:	b8800515 	stw	r2,20(r23)
    138c:	3140e726 	beq	r6,r5,172c <_realloc_r+0x5a0>
    1390:	20800017 	ldw	r2,0(r4)
    1394:	dd000017 	ldw	r20,0(sp)
    1398:	b80f883a 	mov	r7,r23
    139c:	40800015 	stw	r2,0(r8)
    13a0:	20c00117 	ldw	r3,4(r4)
    13a4:	40c00115 	stw	r3,4(r8)
    13a8:	20800217 	ldw	r2,8(r4)
    13ac:	40800215 	stw	r2,8(r8)
    13b0:	003f9706 	br	1210 <_realloc_r+0x84>
    13b4:	98a9883a 	add	r20,r19,r2
    13b8:	a1c01f16 	blt	r20,r7,1438 <_realloc_r+0x2ac>
    13bc:	b8c00317 	ldw	r3,12(r23)
    13c0:	b8800217 	ldw	r2,8(r23)
    13c4:	99bfff04 	addi	r6,r19,-4
    13c8:	01400904 	movi	r5,36
    13cc:	b82b883a 	mov	r21,r23
    13d0:	18800215 	stw	r2,8(r3)
    13d4:	10c00315 	stw	r3,12(r2)
    13d8:	bc000204 	addi	r16,r23,8
    13dc:	2980c336 	bltu	r5,r6,16ec <_realloc_r+0x560>
    13e0:	008004c4 	movi	r2,19
    13e4:	9009883a 	mov	r4,r18
    13e8:	8011883a 	mov	r8,r16
    13ec:	11800f2e 	bgeu	r2,r6,142c <_realloc_r+0x2a0>
    13f0:	90800017 	ldw	r2,0(r18)
    13f4:	ba000404 	addi	r8,r23,16
    13f8:	91000204 	addi	r4,r18,8
    13fc:	b8800215 	stw	r2,8(r23)
    1400:	90c00117 	ldw	r3,4(r18)
    1404:	008006c4 	movi	r2,27
    1408:	b8c00315 	stw	r3,12(r23)
    140c:	1180072e 	bgeu	r2,r6,142c <_realloc_r+0x2a0>
    1410:	90c00217 	ldw	r3,8(r18)
    1414:	ba000604 	addi	r8,r23,24
    1418:	91000404 	addi	r4,r18,16
    141c:	b8c00415 	stw	r3,16(r23)
    1420:	90800317 	ldw	r2,12(r18)
    1424:	b8800515 	stw	r2,20(r23)
    1428:	3140c726 	beq	r6,r5,1748 <_realloc_r+0x5bc>
    142c:	20800017 	ldw	r2,0(r4)
    1430:	b80f883a 	mov	r7,r23
    1434:	003fd906 	br	139c <_realloc_r+0x210>
    1438:	880b883a 	mov	r5,r17
    143c:	b009883a 	mov	r4,r22
    1440:	00007e80 	call	7e8 <_malloc_r>
    1444:	1023883a 	mov	r17,r2
    1448:	10002526 	beq	r2,zero,14e0 <_realloc_r+0x354>
    144c:	80800117 	ldw	r2,4(r16)
    1450:	00ffff84 	movi	r3,-2
    1454:	893ffe04 	addi	r4,r17,-8
    1458:	10c4703a 	and	r2,r2,r3
    145c:	8085883a 	add	r2,r16,r2
    1460:	20809526 	beq	r4,r2,16b8 <_realloc_r+0x52c>
    1464:	99bfff04 	addi	r6,r19,-4
    1468:	01c00904 	movi	r7,36
    146c:	39804536 	bltu	r7,r6,1584 <_realloc_r+0x3f8>
    1470:	008004c4 	movi	r2,19
    1474:	9009883a 	mov	r4,r18
    1478:	880b883a 	mov	r5,r17
    147c:	11800f2e 	bgeu	r2,r6,14bc <_realloc_r+0x330>
    1480:	90800017 	ldw	r2,0(r18)
    1484:	89400204 	addi	r5,r17,8
    1488:	91000204 	addi	r4,r18,8
    148c:	88800015 	stw	r2,0(r17)
    1490:	90c00117 	ldw	r3,4(r18)
    1494:	008006c4 	movi	r2,27
    1498:	88c00115 	stw	r3,4(r17)
    149c:	1180072e 	bgeu	r2,r6,14bc <_realloc_r+0x330>
    14a0:	90c00217 	ldw	r3,8(r18)
    14a4:	89400404 	addi	r5,r17,16
    14a8:	91000404 	addi	r4,r18,16
    14ac:	88c00215 	stw	r3,8(r17)
    14b0:	90800317 	ldw	r2,12(r18)
    14b4:	88800315 	stw	r2,12(r17)
    14b8:	31c09126 	beq	r6,r7,1700 <_realloc_r+0x574>
    14bc:	20800017 	ldw	r2,0(r4)
    14c0:	28800015 	stw	r2,0(r5)
    14c4:	20c00117 	ldw	r3,4(r4)
    14c8:	28c00115 	stw	r3,4(r5)
    14cc:	20800217 	ldw	r2,8(r4)
    14d0:	28800215 	stw	r2,8(r5)
    14d4:	900b883a 	mov	r5,r18
    14d8:	b009883a 	mov	r4,r22
    14dc:	0001f7c0 	call	1f7c <_free_r>
    14e0:	b009883a 	mov	r4,r22
    14e4:	00032540 	call	3254 <__malloc_unlock>
    14e8:	003f5e06 	br	1264 <_realloc_r+0xd8>
    14ec:	300b883a 	mov	r5,r6
    14f0:	dfc00b17 	ldw	ra,44(sp)
    14f4:	df000a17 	ldw	fp,40(sp)
    14f8:	ddc00917 	ldw	r23,36(sp)
    14fc:	dd800817 	ldw	r22,32(sp)
    1500:	dd400717 	ldw	r21,28(sp)
    1504:	dd000617 	ldw	r20,24(sp)
    1508:	dcc00517 	ldw	r19,20(sp)
    150c:	dc800417 	ldw	r18,16(sp)
    1510:	dc400317 	ldw	r17,12(sp)
    1514:	dc000217 	ldw	r16,8(sp)
    1518:	dec00c04 	addi	sp,sp,48
    151c:	00007e81 	jmpi	7e8 <_malloc_r>
    1520:	38800117 	ldw	r2,4(r7)
    1524:	e54b883a 	add	r5,fp,r21
    1528:	31000054 	ori	r4,r6,1
    152c:	1080004c 	andi	r2,r2,1
    1530:	1704b03a 	or	r2,r2,fp
    1534:	38800115 	stw	r2,4(r7)
    1538:	29000115 	stw	r4,4(r5)
    153c:	2987883a 	add	r3,r5,r6
    1540:	18800117 	ldw	r2,4(r3)
    1544:	29400204 	addi	r5,r5,8
    1548:	b009883a 	mov	r4,r22
    154c:	10800054 	ori	r2,r2,1
    1550:	18800115 	stw	r2,4(r3)
    1554:	0001f7c0 	call	1f7c <_free_r>
    1558:	003f3806 	br	123c <_realloc_r+0xb0>
    155c:	000d883a 	mov	r6,zero
    1560:	0009883a 	mov	r4,zero
    1564:	003f5d06 	br	12dc <_realloc_r+0x150>
    1568:	30c00217 	ldw	r3,8(r6)
    156c:	30800317 	ldw	r2,12(r6)
    1570:	800f883a 	mov	r7,r16
    1574:	84000204 	addi	r16,r16,8
    1578:	10c00215 	stw	r3,8(r2)
    157c:	18800315 	stw	r2,12(r3)
    1580:	003f2306 	br	1210 <_realloc_r+0x84>
    1584:	8809883a 	mov	r4,r17
    1588:	900b883a 	mov	r5,r18
    158c:	00010ac0 	call	10ac <memmove>
    1590:	003fd006 	br	14d4 <_realloc_r+0x348>
    1594:	30800117 	ldw	r2,4(r6)
    1598:	e0c00404 	addi	r3,fp,16
    159c:	1108703a 	and	r4,r2,r4
    15a0:	9905883a 	add	r2,r19,r4
    15a4:	10ff4d16 	blt	r2,r3,12dc <_realloc_r+0x150>
    15a8:	1705c83a 	sub	r2,r2,fp
    15ac:	870b883a 	add	r5,r16,fp
    15b0:	10800054 	ori	r2,r2,1
    15b4:	28800115 	stw	r2,4(r5)
    15b8:	80c00117 	ldw	r3,4(r16)
    15bc:	00800034 	movhi	r2,0
    15c0:	10969004 	addi	r2,r2,23104
    15c4:	b009883a 	mov	r4,r22
    15c8:	18c0004c 	andi	r3,r3,1
    15cc:	e0c6b03a 	or	r3,fp,r3
    15d0:	11400215 	stw	r5,8(r2)
    15d4:	80c00115 	stw	r3,4(r16)
    15d8:	00032540 	call	3254 <__malloc_unlock>
    15dc:	84400204 	addi	r17,r16,8
    15e0:	003f2006 	br	1264 <_realloc_r+0xd8>
    15e4:	98a9883a 	add	r20,r19,r2
    15e8:	2509883a 	add	r4,r4,r20
    15ec:	e0800404 	addi	r2,fp,16
    15f0:	d9000115 	stw	r4,4(sp)
    15f4:	20bf7016 	blt	r4,r2,13b8 <_realloc_r+0x22c>
    15f8:	b8c00317 	ldw	r3,12(r23)
    15fc:	b8800217 	ldw	r2,8(r23)
    1600:	99bfff04 	addi	r6,r19,-4
    1604:	01400904 	movi	r5,36
    1608:	18800215 	stw	r2,8(r3)
    160c:	10c00315 	stw	r3,12(r2)
    1610:	bc400204 	addi	r17,r23,8
    1614:	29804136 	bltu	r5,r6,171c <_realloc_r+0x590>
    1618:	008004c4 	movi	r2,19
    161c:	9009883a 	mov	r4,r18
    1620:	880f883a 	mov	r7,r17
    1624:	11800f2e 	bgeu	r2,r6,1664 <_realloc_r+0x4d8>
    1628:	90800017 	ldw	r2,0(r18)
    162c:	b9c00404 	addi	r7,r23,16
    1630:	91000204 	addi	r4,r18,8
    1634:	b8800215 	stw	r2,8(r23)
    1638:	90c00117 	ldw	r3,4(r18)
    163c:	008006c4 	movi	r2,27
    1640:	b8c00315 	stw	r3,12(r23)
    1644:	1180072e 	bgeu	r2,r6,1664 <_realloc_r+0x4d8>
    1648:	90c00217 	ldw	r3,8(r18)
    164c:	b9c00604 	addi	r7,r23,24
    1650:	91000404 	addi	r4,r18,16
    1654:	b8c00415 	stw	r3,16(r23)
    1658:	90800317 	ldw	r2,12(r18)
    165c:	b8800515 	stw	r2,20(r23)
    1660:	31404026 	beq	r6,r5,1764 <_realloc_r+0x5d8>
    1664:	20800017 	ldw	r2,0(r4)
    1668:	38800015 	stw	r2,0(r7)
    166c:	20c00117 	ldw	r3,4(r4)
    1670:	38c00115 	stw	r3,4(r7)
    1674:	20800217 	ldw	r2,8(r4)
    1678:	38800215 	stw	r2,8(r7)
    167c:	d8c00117 	ldw	r3,4(sp)
    1680:	bf0b883a 	add	r5,r23,fp
    1684:	b009883a 	mov	r4,r22
    1688:	1f05c83a 	sub	r2,r3,fp
    168c:	10800054 	ori	r2,r2,1
    1690:	28800115 	stw	r2,4(r5)
    1694:	b8c00117 	ldw	r3,4(r23)
    1698:	00800034 	movhi	r2,0
    169c:	10969004 	addi	r2,r2,23104
    16a0:	11400215 	stw	r5,8(r2)
    16a4:	18c0004c 	andi	r3,r3,1
    16a8:	e0c6b03a 	or	r3,fp,r3
    16ac:	b8c00115 	stw	r3,4(r23)
    16b0:	00032540 	call	3254 <__malloc_unlock>
    16b4:	003eeb06 	br	1264 <_realloc_r+0xd8>
    16b8:	20800117 	ldw	r2,4(r4)
    16bc:	00ffff04 	movi	r3,-4
    16c0:	800f883a 	mov	r7,r16
    16c4:	10c4703a 	and	r2,r2,r3
    16c8:	98a9883a 	add	r20,r19,r2
    16cc:	84000204 	addi	r16,r16,8
    16d0:	003ecf06 	br	1210 <_realloc_r+0x84>
    16d4:	900b883a 	mov	r5,r18
    16d8:	8009883a 	mov	r4,r16
    16dc:	00010ac0 	call	10ac <memmove>
    16e0:	dd000017 	ldw	r20,0(sp)
    16e4:	b80f883a 	mov	r7,r23
    16e8:	003ec906 	br	1210 <_realloc_r+0x84>
    16ec:	900b883a 	mov	r5,r18
    16f0:	8009883a 	mov	r4,r16
    16f4:	00010ac0 	call	10ac <memmove>
    16f8:	b80f883a 	mov	r7,r23
    16fc:	003ec406 	br	1210 <_realloc_r+0x84>
    1700:	90c00417 	ldw	r3,16(r18)
    1704:	89400604 	addi	r5,r17,24
    1708:	91000604 	addi	r4,r18,24
    170c:	88c00415 	stw	r3,16(r17)
    1710:	90800517 	ldw	r2,20(r18)
    1714:	88800515 	stw	r2,20(r17)
    1718:	003f6806 	br	14bc <_realloc_r+0x330>
    171c:	900b883a 	mov	r5,r18
    1720:	8809883a 	mov	r4,r17
    1724:	00010ac0 	call	10ac <memmove>
    1728:	003fd406 	br	167c <_realloc_r+0x4f0>
    172c:	90c00417 	ldw	r3,16(r18)
    1730:	91000604 	addi	r4,r18,24
    1734:	ba000804 	addi	r8,r23,32
    1738:	b8c00615 	stw	r3,24(r23)
    173c:	90800517 	ldw	r2,20(r18)
    1740:	b8800715 	stw	r2,28(r23)
    1744:	003f1206 	br	1390 <_realloc_r+0x204>
    1748:	90c00417 	ldw	r3,16(r18)
    174c:	91000604 	addi	r4,r18,24
    1750:	ba000804 	addi	r8,r23,32
    1754:	b8c00615 	stw	r3,24(r23)
    1758:	90800517 	ldw	r2,20(r18)
    175c:	b8800715 	stw	r2,28(r23)
    1760:	003f3206 	br	142c <_realloc_r+0x2a0>
    1764:	90c00417 	ldw	r3,16(r18)
    1768:	91000604 	addi	r4,r18,24
    176c:	b9c00804 	addi	r7,r23,32
    1770:	b8c00615 	stw	r3,24(r23)
    1774:	90800517 	ldw	r2,20(r18)
    1778:	b8800715 	stw	r2,28(r23)
    177c:	003fb906 	br	1664 <_realloc_r+0x4d8>

00001780 <_sbrk_r>:
    1780:	defffd04 	addi	sp,sp,-12
    1784:	dc000015 	stw	r16,0(sp)
    1788:	04000074 	movhi	r16,1
    178c:	8422b704 	addi	r16,r16,-29988
    1790:	dc400115 	stw	r17,4(sp)
    1794:	80000015 	stw	zero,0(r16)
    1798:	2023883a 	mov	r17,r4
    179c:	2809883a 	mov	r4,r5
    17a0:	dfc00215 	stw	ra,8(sp)
    17a4:	00034700 	call	3470 <sbrk>
    17a8:	1007883a 	mov	r3,r2
    17ac:	00bfffc4 	movi	r2,-1
    17b0:	18800626 	beq	r3,r2,17cc <_sbrk_r+0x4c>
    17b4:	1805883a 	mov	r2,r3
    17b8:	dfc00217 	ldw	ra,8(sp)
    17bc:	dc400117 	ldw	r17,4(sp)
    17c0:	dc000017 	ldw	r16,0(sp)
    17c4:	dec00304 	addi	sp,sp,12
    17c8:	f800283a 	ret
    17cc:	80800017 	ldw	r2,0(r16)
    17d0:	103ff826 	beq	r2,zero,17b4 <_sbrk_r+0x34>
    17d4:	88800015 	stw	r2,0(r17)
    17d8:	1805883a 	mov	r2,r3
    17dc:	dfc00217 	ldw	ra,8(sp)
    17e0:	dc400117 	ldw	r17,4(sp)
    17e4:	dc000017 	ldw	r16,0(sp)
    17e8:	dec00304 	addi	sp,sp,12
    17ec:	f800283a 	ret

000017f0 <__swsetup_r>:
    17f0:	00800034 	movhi	r2,0
    17f4:	109c1404 	addi	r2,r2,28752
    17f8:	10c00017 	ldw	r3,0(r2)
    17fc:	defffd04 	addi	sp,sp,-12
    1800:	dc400115 	stw	r17,4(sp)
    1804:	dc000015 	stw	r16,0(sp)
    1808:	dfc00215 	stw	ra,8(sp)
    180c:	2023883a 	mov	r17,r4
    1810:	2821883a 	mov	r16,r5
    1814:	18000226 	beq	r3,zero,1820 <__swsetup_r+0x30>
    1818:	18800e17 	ldw	r2,56(r3)
    181c:	10001f26 	beq	r2,zero,189c <__swsetup_r+0xac>
    1820:	8100030b 	ldhu	r4,12(r16)
    1824:	2080020c 	andi	r2,r4,8
    1828:	10002826 	beq	r2,zero,18cc <__swsetup_r+0xdc>
    182c:	81400417 	ldw	r5,16(r16)
    1830:	28001d26 	beq	r5,zero,18a8 <__swsetup_r+0xb8>
    1834:	2080004c 	andi	r2,r4,1
    1838:	1005003a 	cmpeq	r2,r2,zero
    183c:	10000b26 	beq	r2,zero,186c <__swsetup_r+0x7c>
    1840:	2080008c 	andi	r2,r4,2
    1844:	10001226 	beq	r2,zero,1890 <__swsetup_r+0xa0>
    1848:	0005883a 	mov	r2,zero
    184c:	80800215 	stw	r2,8(r16)
    1850:	28000b26 	beq	r5,zero,1880 <__swsetup_r+0x90>
    1854:	0005883a 	mov	r2,zero
    1858:	dfc00217 	ldw	ra,8(sp)
    185c:	dc400117 	ldw	r17,4(sp)
    1860:	dc000017 	ldw	r16,0(sp)
    1864:	dec00304 	addi	sp,sp,12
    1868:	f800283a 	ret
    186c:	80800517 	ldw	r2,20(r16)
    1870:	80000215 	stw	zero,8(r16)
    1874:	0085c83a 	sub	r2,zero,r2
    1878:	80800615 	stw	r2,24(r16)
    187c:	283ff51e 	bne	r5,zero,1854 <__swsetup_r+0x64>
    1880:	2080200c 	andi	r2,r4,128
    1884:	103ff326 	beq	r2,zero,1854 <__swsetup_r+0x64>
    1888:	00bfffc4 	movi	r2,-1
    188c:	003ff206 	br	1858 <__swsetup_r+0x68>
    1890:	80800517 	ldw	r2,20(r16)
    1894:	80800215 	stw	r2,8(r16)
    1898:	003fed06 	br	1850 <__swsetup_r+0x60>
    189c:	1809883a 	mov	r4,r3
    18a0:	0001bc40 	call	1bc4 <__sinit>
    18a4:	003fde06 	br	1820 <__swsetup_r+0x30>
    18a8:	20c0a00c 	andi	r3,r4,640
    18ac:	00808004 	movi	r2,512
    18b0:	18bfe026 	beq	r3,r2,1834 <__swsetup_r+0x44>
    18b4:	8809883a 	mov	r4,r17
    18b8:	800b883a 	mov	r5,r16
    18bc:	00024100 	call	2410 <__smakebuf_r>
    18c0:	8100030b 	ldhu	r4,12(r16)
    18c4:	81400417 	ldw	r5,16(r16)
    18c8:	003fda06 	br	1834 <__swsetup_r+0x44>
    18cc:	2080040c 	andi	r2,r4,16
    18d0:	103fed26 	beq	r2,zero,1888 <__swsetup_r+0x98>
    18d4:	2080010c 	andi	r2,r4,4
    18d8:	10001226 	beq	r2,zero,1924 <__swsetup_r+0x134>
    18dc:	81400c17 	ldw	r5,48(r16)
    18e0:	28000526 	beq	r5,zero,18f8 <__swsetup_r+0x108>
    18e4:	80801004 	addi	r2,r16,64
    18e8:	28800226 	beq	r5,r2,18f4 <__swsetup_r+0x104>
    18ec:	8809883a 	mov	r4,r17
    18f0:	0001f7c0 	call	1f7c <_free_r>
    18f4:	80000c15 	stw	zero,48(r16)
    18f8:	8080030b 	ldhu	r2,12(r16)
    18fc:	81400417 	ldw	r5,16(r16)
    1900:	80000115 	stw	zero,4(r16)
    1904:	10bff6cc 	andi	r2,r2,65499
    1908:	8080030d 	sth	r2,12(r16)
    190c:	81400015 	stw	r5,0(r16)
    1910:	8080030b 	ldhu	r2,12(r16)
    1914:	10800214 	ori	r2,r2,8
    1918:	113fffcc 	andi	r4,r2,65535
    191c:	8080030d 	sth	r2,12(r16)
    1920:	003fc306 	br	1830 <__swsetup_r+0x40>
    1924:	81400417 	ldw	r5,16(r16)
    1928:	003ff906 	br	1910 <__swsetup_r+0x120>

0000192c <_fflush_r>:
    192c:	defffb04 	addi	sp,sp,-20
    1930:	dcc00315 	stw	r19,12(sp)
    1934:	dc800215 	stw	r18,8(sp)
    1938:	dfc00415 	stw	ra,16(sp)
    193c:	dc400115 	stw	r17,4(sp)
    1940:	dc000015 	stw	r16,0(sp)
    1944:	2027883a 	mov	r19,r4
    1948:	2825883a 	mov	r18,r5
    194c:	20000226 	beq	r4,zero,1958 <_fflush_r+0x2c>
    1950:	20800e17 	ldw	r2,56(r4)
    1954:	10005626 	beq	r2,zero,1ab0 <_fflush_r+0x184>
    1958:	9100030b 	ldhu	r4,12(r18)
    195c:	20ffffcc 	andi	r3,r4,65535
    1960:	18e0001c 	xori	r3,r3,32768
    1964:	18e00004 	addi	r3,r3,-32768
    1968:	1880020c 	andi	r2,r3,8
    196c:	1000261e 	bne	r2,zero,1a08 <_fflush_r+0xdc>
    1970:	90c00117 	ldw	r3,4(r18)
    1974:	20820014 	ori	r2,r4,2048
    1978:	9080030d 	sth	r2,12(r18)
    197c:	1009883a 	mov	r4,r2
    1980:	00c0400e 	bge	zero,r3,1a84 <_fflush_r+0x158>
    1984:	92000a17 	ldw	r8,40(r18)
    1988:	40004026 	beq	r8,zero,1a8c <_fflush_r+0x160>
    198c:	2084000c 	andi	r2,r4,4096
    1990:	10005326 	beq	r2,zero,1ae0 <_fflush_r+0x1b4>
    1994:	94001417 	ldw	r16,80(r18)
    1998:	9080030b 	ldhu	r2,12(r18)
    199c:	1080010c 	andi	r2,r2,4
    19a0:	1000481e 	bne	r2,zero,1ac4 <_fflush_r+0x198>
    19a4:	91400717 	ldw	r5,28(r18)
    19a8:	9809883a 	mov	r4,r19
    19ac:	800d883a 	mov	r6,r16
    19b0:	000f883a 	mov	r7,zero
    19b4:	403ee83a 	callr	r8
    19b8:	8080261e 	bne	r16,r2,1a54 <_fflush_r+0x128>
    19bc:	9080030b 	ldhu	r2,12(r18)
    19c0:	91000417 	ldw	r4,16(r18)
    19c4:	90000115 	stw	zero,4(r18)
    19c8:	10bdffcc 	andi	r2,r2,63487
    19cc:	10ffffcc 	andi	r3,r2,65535
    19d0:	18c4000c 	andi	r3,r3,4096
    19d4:	9080030d 	sth	r2,12(r18)
    19d8:	91000015 	stw	r4,0(r18)
    19dc:	18002b26 	beq	r3,zero,1a8c <_fflush_r+0x160>
    19e0:	0007883a 	mov	r3,zero
    19e4:	1805883a 	mov	r2,r3
    19e8:	94001415 	stw	r16,80(r18)
    19ec:	dfc00417 	ldw	ra,16(sp)
    19f0:	dcc00317 	ldw	r19,12(sp)
    19f4:	dc800217 	ldw	r18,8(sp)
    19f8:	dc400117 	ldw	r17,4(sp)
    19fc:	dc000017 	ldw	r16,0(sp)
    1a00:	dec00504 	addi	sp,sp,20
    1a04:	f800283a 	ret
    1a08:	94400417 	ldw	r17,16(r18)
    1a0c:	88001f26 	beq	r17,zero,1a8c <_fflush_r+0x160>
    1a10:	90800017 	ldw	r2,0(r18)
    1a14:	18c000cc 	andi	r3,r3,3
    1a18:	94400015 	stw	r17,0(r18)
    1a1c:	1461c83a 	sub	r16,r2,r17
    1a20:	18002526 	beq	r3,zero,1ab8 <_fflush_r+0x18c>
    1a24:	0005883a 	mov	r2,zero
    1a28:	90800215 	stw	r2,8(r18)
    1a2c:	0400170e 	bge	zero,r16,1a8c <_fflush_r+0x160>
    1a30:	90c00917 	ldw	r3,36(r18)
    1a34:	91400717 	ldw	r5,28(r18)
    1a38:	880d883a 	mov	r6,r17
    1a3c:	800f883a 	mov	r7,r16
    1a40:	9809883a 	mov	r4,r19
    1a44:	183ee83a 	callr	r3
    1a48:	88a3883a 	add	r17,r17,r2
    1a4c:	80a1c83a 	sub	r16,r16,r2
    1a50:	00bff616 	blt	zero,r2,1a2c <_fflush_r+0x100>
    1a54:	9080030b 	ldhu	r2,12(r18)
    1a58:	00ffffc4 	movi	r3,-1
    1a5c:	10801014 	ori	r2,r2,64
    1a60:	9080030d 	sth	r2,12(r18)
    1a64:	1805883a 	mov	r2,r3
    1a68:	dfc00417 	ldw	ra,16(sp)
    1a6c:	dcc00317 	ldw	r19,12(sp)
    1a70:	dc800217 	ldw	r18,8(sp)
    1a74:	dc400117 	ldw	r17,4(sp)
    1a78:	dc000017 	ldw	r16,0(sp)
    1a7c:	dec00504 	addi	sp,sp,20
    1a80:	f800283a 	ret
    1a84:	90800f17 	ldw	r2,60(r18)
    1a88:	00bfbe16 	blt	zero,r2,1984 <_fflush_r+0x58>
    1a8c:	0007883a 	mov	r3,zero
    1a90:	1805883a 	mov	r2,r3
    1a94:	dfc00417 	ldw	ra,16(sp)
    1a98:	dcc00317 	ldw	r19,12(sp)
    1a9c:	dc800217 	ldw	r18,8(sp)
    1aa0:	dc400117 	ldw	r17,4(sp)
    1aa4:	dc000017 	ldw	r16,0(sp)
    1aa8:	dec00504 	addi	sp,sp,20
    1aac:	f800283a 	ret
    1ab0:	0001bc40 	call	1bc4 <__sinit>
    1ab4:	003fa806 	br	1958 <_fflush_r+0x2c>
    1ab8:	90800517 	ldw	r2,20(r18)
    1abc:	90800215 	stw	r2,8(r18)
    1ac0:	003fda06 	br	1a2c <_fflush_r+0x100>
    1ac4:	90800117 	ldw	r2,4(r18)
    1ac8:	90c00c17 	ldw	r3,48(r18)
    1acc:	80a1c83a 	sub	r16,r16,r2
    1ad0:	183fb426 	beq	r3,zero,19a4 <_fflush_r+0x78>
    1ad4:	90800f17 	ldw	r2,60(r18)
    1ad8:	80a1c83a 	sub	r16,r16,r2
    1adc:	003fb106 	br	19a4 <_fflush_r+0x78>
    1ae0:	91400717 	ldw	r5,28(r18)
    1ae4:	9809883a 	mov	r4,r19
    1ae8:	000d883a 	mov	r6,zero
    1aec:	01c00044 	movi	r7,1
    1af0:	403ee83a 	callr	r8
    1af4:	1021883a 	mov	r16,r2
    1af8:	00bfffc4 	movi	r2,-1
    1afc:	80800226 	beq	r16,r2,1b08 <_fflush_r+0x1dc>
    1b00:	92000a17 	ldw	r8,40(r18)
    1b04:	003fa406 	br	1998 <_fflush_r+0x6c>
    1b08:	98c00017 	ldw	r3,0(r19)
    1b0c:	00800744 	movi	r2,29
    1b10:	18bfde26 	beq	r3,r2,1a8c <_fflush_r+0x160>
    1b14:	9080030b 	ldhu	r2,12(r18)
    1b18:	8007883a 	mov	r3,r16
    1b1c:	10801014 	ori	r2,r2,64
    1b20:	9080030d 	sth	r2,12(r18)
    1b24:	003fcf06 	br	1a64 <_fflush_r+0x138>

00001b28 <fflush>:
    1b28:	01400034 	movhi	r5,0
    1b2c:	29464b04 	addi	r5,r5,6444
    1b30:	2007883a 	mov	r3,r4
    1b34:	20000526 	beq	r4,zero,1b4c <fflush+0x24>
    1b38:	00800034 	movhi	r2,0
    1b3c:	109c1404 	addi	r2,r2,28752
    1b40:	11000017 	ldw	r4,0(r2)
    1b44:	180b883a 	mov	r5,r3
    1b48:	000192c1 	jmpi	192c <_fflush_r>
    1b4c:	00800034 	movhi	r2,0
    1b50:	109c1504 	addi	r2,r2,28756
    1b54:	11000017 	ldw	r4,0(r2)
    1b58:	00022901 	jmpi	2290 <_fwalk_reent>

00001b5c <std>:
    1b5c:	00800034 	movhi	r2,0
    1b60:	10898f04 	addi	r2,r2,9788
    1b64:	20800b15 	stw	r2,44(r4)
    1b68:	00800034 	movhi	r2,0
    1b6c:	1089ca04 	addi	r2,r2,10024
    1b70:	20800815 	stw	r2,32(r4)
    1b74:	00c00034 	movhi	r3,0
    1b78:	18c9ab04 	addi	r3,r3,9900
    1b7c:	00800034 	movhi	r2,0
    1b80:	10899104 	addi	r2,r2,9796
    1b84:	2140030d 	sth	r5,12(r4)
    1b88:	2180038d 	sth	r6,14(r4)
    1b8c:	20c00915 	stw	r3,36(r4)
    1b90:	20800a15 	stw	r2,40(r4)
    1b94:	20000015 	stw	zero,0(r4)
    1b98:	20000115 	stw	zero,4(r4)
    1b9c:	20000215 	stw	zero,8(r4)
    1ba0:	20000415 	stw	zero,16(r4)
    1ba4:	20000515 	stw	zero,20(r4)
    1ba8:	20000615 	stw	zero,24(r4)
    1bac:	21000715 	stw	r4,28(r4)
    1bb0:	f800283a 	ret

00001bb4 <__sfp_lock_acquire>:
    1bb4:	f800283a 	ret

00001bb8 <__sfp_lock_release>:
    1bb8:	f800283a 	ret

00001bbc <__sinit_lock_acquire>:
    1bbc:	f800283a 	ret

00001bc0 <__sinit_lock_release>:
    1bc0:	f800283a 	ret

00001bc4 <__sinit>:
    1bc4:	20800e17 	ldw	r2,56(r4)
    1bc8:	defffd04 	addi	sp,sp,-12
    1bcc:	dc400115 	stw	r17,4(sp)
    1bd0:	dc000015 	stw	r16,0(sp)
    1bd4:	dfc00215 	stw	ra,8(sp)
    1bd8:	04400044 	movi	r17,1
    1bdc:	01400104 	movi	r5,4
    1be0:	000d883a 	mov	r6,zero
    1be4:	2021883a 	mov	r16,r4
    1be8:	2200bb04 	addi	r8,r4,748
    1bec:	200f883a 	mov	r7,r4
    1bf0:	10000526 	beq	r2,zero,1c08 <__sinit+0x44>
    1bf4:	dfc00217 	ldw	ra,8(sp)
    1bf8:	dc400117 	ldw	r17,4(sp)
    1bfc:	dc000017 	ldw	r16,0(sp)
    1c00:	dec00304 	addi	sp,sp,12
    1c04:	f800283a 	ret
    1c08:	21000117 	ldw	r4,4(r4)
    1c0c:	00800034 	movhi	r2,0
    1c10:	10872a04 	addi	r2,r2,7336
    1c14:	00c000c4 	movi	r3,3
    1c18:	80800f15 	stw	r2,60(r16)
    1c1c:	80c0b915 	stw	r3,740(r16)
    1c20:	8200ba15 	stw	r8,744(r16)
    1c24:	84400e15 	stw	r17,56(r16)
    1c28:	8000b815 	stw	zero,736(r16)
    1c2c:	0001b5c0 	call	1b5c <std>
    1c30:	81000217 	ldw	r4,8(r16)
    1c34:	880d883a 	mov	r6,r17
    1c38:	800f883a 	mov	r7,r16
    1c3c:	01400284 	movi	r5,10
    1c40:	0001b5c0 	call	1b5c <std>
    1c44:	81000317 	ldw	r4,12(r16)
    1c48:	800f883a 	mov	r7,r16
    1c4c:	01400484 	movi	r5,18
    1c50:	01800084 	movi	r6,2
    1c54:	dfc00217 	ldw	ra,8(sp)
    1c58:	dc400117 	ldw	r17,4(sp)
    1c5c:	dc000017 	ldw	r16,0(sp)
    1c60:	dec00304 	addi	sp,sp,12
    1c64:	0001b5c1 	jmpi	1b5c <std>

00001c68 <__fp_lock>:
    1c68:	0005883a 	mov	r2,zero
    1c6c:	f800283a 	ret

00001c70 <__fp_unlock>:
    1c70:	0005883a 	mov	r2,zero
    1c74:	f800283a 	ret

00001c78 <__fp_unlock_all>:
    1c78:	00800034 	movhi	r2,0
    1c7c:	109c1404 	addi	r2,r2,28752
    1c80:	11000017 	ldw	r4,0(r2)
    1c84:	01400034 	movhi	r5,0
    1c88:	29471c04 	addi	r5,r5,7280
    1c8c:	00023581 	jmpi	2358 <_fwalk>

00001c90 <__fp_lock_all>:
    1c90:	00800034 	movhi	r2,0
    1c94:	109c1404 	addi	r2,r2,28752
    1c98:	11000017 	ldw	r4,0(r2)
    1c9c:	01400034 	movhi	r5,0
    1ca0:	29471a04 	addi	r5,r5,7272
    1ca4:	00023581 	jmpi	2358 <_fwalk>

00001ca8 <_cleanup_r>:
    1ca8:	01400034 	movhi	r5,0
    1cac:	294a6004 	addi	r5,r5,10624
    1cb0:	00023581 	jmpi	2358 <_fwalk>

00001cb4 <_cleanup>:
    1cb4:	00800034 	movhi	r2,0
    1cb8:	109c1504 	addi	r2,r2,28756
    1cbc:	11000017 	ldw	r4,0(r2)
    1cc0:	0001ca81 	jmpi	1ca8 <_cleanup_r>

00001cc4 <__sfmoreglue>:
    1cc4:	defffc04 	addi	sp,sp,-16
    1cc8:	dc000015 	stw	r16,0(sp)
    1ccc:	2821883a 	mov	r16,r5
    1cd0:	dc400115 	stw	r17,4(sp)
    1cd4:	01401704 	movi	r5,92
    1cd8:	2023883a 	mov	r17,r4
    1cdc:	8009883a 	mov	r4,r16
    1ce0:	dfc00315 	stw	ra,12(sp)
    1ce4:	dcc00215 	stw	r19,8(sp)
    1ce8:	0002b680 	call	2b68 <__mulsi3>
    1cec:	11400304 	addi	r5,r2,12
    1cf0:	8809883a 	mov	r4,r17
    1cf4:	1027883a 	mov	r19,r2
    1cf8:	00007e80 	call	7e8 <_malloc_r>
    1cfc:	10c00304 	addi	r3,r2,12
    1d00:	1023883a 	mov	r17,r2
    1d04:	1809883a 	mov	r4,r3
    1d08:	980d883a 	mov	r6,r19
    1d0c:	000b883a 	mov	r5,zero
    1d10:	10000b26 	beq	r2,zero,1d40 <__sfmoreglue+0x7c>
    1d14:	14000115 	stw	r16,4(r2)
    1d18:	10c00215 	stw	r3,8(r2)
    1d1c:	10000015 	stw	zero,0(r2)
    1d20:	00025a40 	call	25a4 <memset>
    1d24:	8805883a 	mov	r2,r17
    1d28:	dfc00317 	ldw	ra,12(sp)
    1d2c:	dcc00217 	ldw	r19,8(sp)
    1d30:	dc400117 	ldw	r17,4(sp)
    1d34:	dc000017 	ldw	r16,0(sp)
    1d38:	dec00404 	addi	sp,sp,16
    1d3c:	f800283a 	ret
    1d40:	0023883a 	mov	r17,zero
    1d44:	8805883a 	mov	r2,r17
    1d48:	dfc00317 	ldw	ra,12(sp)
    1d4c:	dcc00217 	ldw	r19,8(sp)
    1d50:	dc400117 	ldw	r17,4(sp)
    1d54:	dc000017 	ldw	r16,0(sp)
    1d58:	dec00404 	addi	sp,sp,16
    1d5c:	f800283a 	ret

00001d60 <__sfp>:
    1d60:	defffd04 	addi	sp,sp,-12
    1d64:	00800034 	movhi	r2,0
    1d68:	109c1504 	addi	r2,r2,28756
    1d6c:	dc000015 	stw	r16,0(sp)
    1d70:	14000017 	ldw	r16,0(r2)
    1d74:	dc400115 	stw	r17,4(sp)
    1d78:	dfc00215 	stw	ra,8(sp)
    1d7c:	80800e17 	ldw	r2,56(r16)
    1d80:	2023883a 	mov	r17,r4
    1d84:	10002626 	beq	r2,zero,1e20 <__sfp+0xc0>
    1d88:	8400b804 	addi	r16,r16,736
    1d8c:	80800117 	ldw	r2,4(r16)
    1d90:	81000217 	ldw	r4,8(r16)
    1d94:	10ffffc4 	addi	r3,r2,-1
    1d98:	18000916 	blt	r3,zero,1dc0 <__sfp+0x60>
    1d9c:	2080030f 	ldh	r2,12(r4)
    1da0:	10000b26 	beq	r2,zero,1dd0 <__sfp+0x70>
    1da4:	017fffc4 	movi	r5,-1
    1da8:	00000206 	br	1db4 <__sfp+0x54>
    1dac:	2080030f 	ldh	r2,12(r4)
    1db0:	10000726 	beq	r2,zero,1dd0 <__sfp+0x70>
    1db4:	18ffffc4 	addi	r3,r3,-1
    1db8:	21001704 	addi	r4,r4,92
    1dbc:	197ffb1e 	bne	r3,r5,1dac <__sfp+0x4c>
    1dc0:	80800017 	ldw	r2,0(r16)
    1dc4:	10001926 	beq	r2,zero,1e2c <__sfp+0xcc>
    1dc8:	1021883a 	mov	r16,r2
    1dcc:	003fef06 	br	1d8c <__sfp+0x2c>
    1dd0:	00bfffc4 	movi	r2,-1
    1dd4:	00c00044 	movi	r3,1
    1dd8:	2080038d 	sth	r2,14(r4)
    1ddc:	20c0030d 	sth	r3,12(r4)
    1de0:	20000015 	stw	zero,0(r4)
    1de4:	20000215 	stw	zero,8(r4)
    1de8:	20000115 	stw	zero,4(r4)
    1dec:	20000415 	stw	zero,16(r4)
    1df0:	20000515 	stw	zero,20(r4)
    1df4:	20000615 	stw	zero,24(r4)
    1df8:	20000c15 	stw	zero,48(r4)
    1dfc:	20000d15 	stw	zero,52(r4)
    1e00:	20001115 	stw	zero,68(r4)
    1e04:	20001215 	stw	zero,72(r4)
    1e08:	2005883a 	mov	r2,r4
    1e0c:	dfc00217 	ldw	ra,8(sp)
    1e10:	dc400117 	ldw	r17,4(sp)
    1e14:	dc000017 	ldw	r16,0(sp)
    1e18:	dec00304 	addi	sp,sp,12
    1e1c:	f800283a 	ret
    1e20:	8009883a 	mov	r4,r16
    1e24:	0001bc40 	call	1bc4 <__sinit>
    1e28:	003fd706 	br	1d88 <__sfp+0x28>
    1e2c:	8809883a 	mov	r4,r17
    1e30:	01400104 	movi	r5,4
    1e34:	0001cc40 	call	1cc4 <__sfmoreglue>
    1e38:	80800015 	stw	r2,0(r16)
    1e3c:	103fe21e 	bne	r2,zero,1dc8 <__sfp+0x68>
    1e40:	00800304 	movi	r2,12
    1e44:	0009883a 	mov	r4,zero
    1e48:	88800015 	stw	r2,0(r17)
    1e4c:	003fee06 	br	1e08 <__sfp+0xa8>

00001e50 <_malloc_trim_r>:
    1e50:	defffb04 	addi	sp,sp,-20
    1e54:	dcc00315 	stw	r19,12(sp)
    1e58:	04c00034 	movhi	r19,0
    1e5c:	9cd69004 	addi	r19,r19,23104
    1e60:	dc800215 	stw	r18,8(sp)
    1e64:	dc400115 	stw	r17,4(sp)
    1e68:	dc000015 	stw	r16,0(sp)
    1e6c:	2823883a 	mov	r17,r5
    1e70:	2025883a 	mov	r18,r4
    1e74:	dfc00415 	stw	ra,16(sp)
    1e78:	00032340 	call	3234 <__malloc_lock>
    1e7c:	98800217 	ldw	r2,8(r19)
    1e80:	9009883a 	mov	r4,r18
    1e84:	000b883a 	mov	r5,zero
    1e88:	10c00117 	ldw	r3,4(r2)
    1e8c:	00bfff04 	movi	r2,-4
    1e90:	18a0703a 	and	r16,r3,r2
    1e94:	8463c83a 	sub	r17,r16,r17
    1e98:	8c43fbc4 	addi	r17,r17,4079
    1e9c:	8822d33a 	srli	r17,r17,12
    1ea0:	0083ffc4 	movi	r2,4095
    1ea4:	8c7fffc4 	addi	r17,r17,-1
    1ea8:	8822933a 	slli	r17,r17,12
    1eac:	1440060e 	bge	r2,r17,1ec8 <_malloc_trim_r+0x78>
    1eb0:	00017800 	call	1780 <_sbrk_r>
    1eb4:	98c00217 	ldw	r3,8(r19)
    1eb8:	9009883a 	mov	r4,r18
    1ebc:	044bc83a 	sub	r5,zero,r17
    1ec0:	80c7883a 	add	r3,r16,r3
    1ec4:	10c00926 	beq	r2,r3,1eec <_malloc_trim_r+0x9c>
    1ec8:	00032540 	call	3254 <__malloc_unlock>
    1ecc:	0005883a 	mov	r2,zero
    1ed0:	dfc00417 	ldw	ra,16(sp)
    1ed4:	dcc00317 	ldw	r19,12(sp)
    1ed8:	dc800217 	ldw	r18,8(sp)
    1edc:	dc400117 	ldw	r17,4(sp)
    1ee0:	dc000017 	ldw	r16,0(sp)
    1ee4:	dec00504 	addi	sp,sp,20
    1ee8:	f800283a 	ret
    1eec:	9009883a 	mov	r4,r18
    1ef0:	00017800 	call	1780 <_sbrk_r>
    1ef4:	844dc83a 	sub	r6,r16,r17
    1ef8:	00ffffc4 	movi	r3,-1
    1efc:	9009883a 	mov	r4,r18
    1f00:	000b883a 	mov	r5,zero
    1f04:	01c00074 	movhi	r7,1
    1f08:	39e2be04 	addi	r7,r7,-29960
    1f0c:	31800054 	ori	r6,r6,1
    1f10:	10c00926 	beq	r2,r3,1f38 <_malloc_trim_r+0xe8>
    1f14:	38800017 	ldw	r2,0(r7)
    1f18:	98c00217 	ldw	r3,8(r19)
    1f1c:	9009883a 	mov	r4,r18
    1f20:	1445c83a 	sub	r2,r2,r17
    1f24:	38800015 	stw	r2,0(r7)
    1f28:	19800115 	stw	r6,4(r3)
    1f2c:	00032540 	call	3254 <__malloc_unlock>
    1f30:	00800044 	movi	r2,1
    1f34:	003fe606 	br	1ed0 <_malloc_trim_r+0x80>
    1f38:	00017800 	call	1780 <_sbrk_r>
    1f3c:	99800217 	ldw	r6,8(r19)
    1f40:	100f883a 	mov	r7,r2
    1f44:	9009883a 	mov	r4,r18
    1f48:	1187c83a 	sub	r3,r2,r6
    1f4c:	008003c4 	movi	r2,15
    1f50:	19400054 	ori	r5,r3,1
    1f54:	10ffdc0e 	bge	r2,r3,1ec8 <_malloc_trim_r+0x78>
    1f58:	00800034 	movhi	r2,0
    1f5c:	109c1704 	addi	r2,r2,28764
    1f60:	10c00017 	ldw	r3,0(r2)
    1f64:	00800074 	movhi	r2,1
    1f68:	10a2be04 	addi	r2,r2,-29960
    1f6c:	31400115 	stw	r5,4(r6)
    1f70:	38c7c83a 	sub	r3,r7,r3
    1f74:	10c00015 	stw	r3,0(r2)
    1f78:	003fd306 	br	1ec8 <_malloc_trim_r+0x78>

00001f7c <_free_r>:
    1f7c:	defffd04 	addi	sp,sp,-12
    1f80:	dc400115 	stw	r17,4(sp)
    1f84:	dc000015 	stw	r16,0(sp)
    1f88:	dfc00215 	stw	ra,8(sp)
    1f8c:	2821883a 	mov	r16,r5
    1f90:	2023883a 	mov	r17,r4
    1f94:	28005a26 	beq	r5,zero,2100 <_free_r+0x184>
    1f98:	00032340 	call	3234 <__malloc_lock>
    1f9c:	823ffe04 	addi	r8,r16,-8
    1fa0:	41400117 	ldw	r5,4(r8)
    1fa4:	00bfff84 	movi	r2,-2
    1fa8:	02800034 	movhi	r10,0
    1fac:	52969004 	addi	r10,r10,23104
    1fb0:	288e703a 	and	r7,r5,r2
    1fb4:	41cd883a 	add	r6,r8,r7
    1fb8:	30c00117 	ldw	r3,4(r6)
    1fbc:	51000217 	ldw	r4,8(r10)
    1fc0:	00bfff04 	movi	r2,-4
    1fc4:	1892703a 	and	r9,r3,r2
    1fc8:	5017883a 	mov	r11,r10
    1fcc:	31006726 	beq	r6,r4,216c <_free_r+0x1f0>
    1fd0:	2880004c 	andi	r2,r5,1
    1fd4:	1005003a 	cmpeq	r2,r2,zero
    1fd8:	32400115 	stw	r9,4(r6)
    1fdc:	10001a1e 	bne	r2,zero,2048 <_free_r+0xcc>
    1fe0:	000b883a 	mov	r5,zero
    1fe4:	3247883a 	add	r3,r6,r9
    1fe8:	18800117 	ldw	r2,4(r3)
    1fec:	1080004c 	andi	r2,r2,1
    1ff0:	1000231e 	bne	r2,zero,2080 <_free_r+0x104>
    1ff4:	280ac03a 	cmpne	r5,r5,zero
    1ff8:	3a4f883a 	add	r7,r7,r9
    1ffc:	2800451e 	bne	r5,zero,2114 <_free_r+0x198>
    2000:	31000217 	ldw	r4,8(r6)
    2004:	00800034 	movhi	r2,0
    2008:	10969204 	addi	r2,r2,23112
    200c:	20807b26 	beq	r4,r2,21fc <_free_r+0x280>
    2010:	30800317 	ldw	r2,12(r6)
    2014:	3a07883a 	add	r3,r7,r8
    2018:	19c00015 	stw	r7,0(r3)
    201c:	11000215 	stw	r4,8(r2)
    2020:	20800315 	stw	r2,12(r4)
    2024:	38800054 	ori	r2,r7,1
    2028:	40800115 	stw	r2,4(r8)
    202c:	28001a26 	beq	r5,zero,2098 <_free_r+0x11c>
    2030:	8809883a 	mov	r4,r17
    2034:	dfc00217 	ldw	ra,8(sp)
    2038:	dc400117 	ldw	r17,4(sp)
    203c:	dc000017 	ldw	r16,0(sp)
    2040:	dec00304 	addi	sp,sp,12
    2044:	00032541 	jmpi	3254 <__malloc_unlock>
    2048:	80bffe17 	ldw	r2,-8(r16)
    204c:	50c00204 	addi	r3,r10,8
    2050:	4091c83a 	sub	r8,r8,r2
    2054:	41000217 	ldw	r4,8(r8)
    2058:	388f883a 	add	r7,r7,r2
    205c:	20c06126 	beq	r4,r3,21e4 <_free_r+0x268>
    2060:	40800317 	ldw	r2,12(r8)
    2064:	3247883a 	add	r3,r6,r9
    2068:	000b883a 	mov	r5,zero
    206c:	11000215 	stw	r4,8(r2)
    2070:	20800315 	stw	r2,12(r4)
    2074:	18800117 	ldw	r2,4(r3)
    2078:	1080004c 	andi	r2,r2,1
    207c:	103fdd26 	beq	r2,zero,1ff4 <_free_r+0x78>
    2080:	38800054 	ori	r2,r7,1
    2084:	3a07883a 	add	r3,r7,r8
    2088:	280ac03a 	cmpne	r5,r5,zero
    208c:	40800115 	stw	r2,4(r8)
    2090:	19c00015 	stw	r7,0(r3)
    2094:	283fe61e 	bne	r5,zero,2030 <_free_r+0xb4>
    2098:	00807fc4 	movi	r2,511
    209c:	11c01f2e 	bgeu	r2,r7,211c <_free_r+0x1a0>
    20a0:	3806d27a 	srli	r3,r7,9
    20a4:	1800481e 	bne	r3,zero,21c8 <_free_r+0x24c>
    20a8:	3804d0fa 	srli	r2,r7,3
    20ac:	100690fa 	slli	r3,r2,3
    20b0:	1acd883a 	add	r6,r3,r11
    20b4:	31400217 	ldw	r5,8(r6)
    20b8:	31405926 	beq	r6,r5,2220 <_free_r+0x2a4>
    20bc:	28800117 	ldw	r2,4(r5)
    20c0:	00ffff04 	movi	r3,-4
    20c4:	10c4703a 	and	r2,r2,r3
    20c8:	3880022e 	bgeu	r7,r2,20d4 <_free_r+0x158>
    20cc:	29400217 	ldw	r5,8(r5)
    20d0:	317ffa1e 	bne	r6,r5,20bc <_free_r+0x140>
    20d4:	29800317 	ldw	r6,12(r5)
    20d8:	41800315 	stw	r6,12(r8)
    20dc:	41400215 	stw	r5,8(r8)
    20e0:	8809883a 	mov	r4,r17
    20e4:	2a000315 	stw	r8,12(r5)
    20e8:	32000215 	stw	r8,8(r6)
    20ec:	dfc00217 	ldw	ra,8(sp)
    20f0:	dc400117 	ldw	r17,4(sp)
    20f4:	dc000017 	ldw	r16,0(sp)
    20f8:	dec00304 	addi	sp,sp,12
    20fc:	00032541 	jmpi	3254 <__malloc_unlock>
    2100:	dfc00217 	ldw	ra,8(sp)
    2104:	dc400117 	ldw	r17,4(sp)
    2108:	dc000017 	ldw	r16,0(sp)
    210c:	dec00304 	addi	sp,sp,12
    2110:	f800283a 	ret
    2114:	31000217 	ldw	r4,8(r6)
    2118:	003fbd06 	br	2010 <_free_r+0x94>
    211c:	3806d0fa 	srli	r3,r7,3
    2120:	00800044 	movi	r2,1
    2124:	51400117 	ldw	r5,4(r10)
    2128:	180890fa 	slli	r4,r3,3
    212c:	1807d0ba 	srai	r3,r3,2
    2130:	22c9883a 	add	r4,r4,r11
    2134:	21800217 	ldw	r6,8(r4)
    2138:	10c4983a 	sll	r2,r2,r3
    213c:	41000315 	stw	r4,12(r8)
    2140:	41800215 	stw	r6,8(r8)
    2144:	288ab03a 	or	r5,r5,r2
    2148:	22000215 	stw	r8,8(r4)
    214c:	8809883a 	mov	r4,r17
    2150:	51400115 	stw	r5,4(r10)
    2154:	32000315 	stw	r8,12(r6)
    2158:	dfc00217 	ldw	ra,8(sp)
    215c:	dc400117 	ldw	r17,4(sp)
    2160:	dc000017 	ldw	r16,0(sp)
    2164:	dec00304 	addi	sp,sp,12
    2168:	00032541 	jmpi	3254 <__malloc_unlock>
    216c:	2880004c 	andi	r2,r5,1
    2170:	3a4d883a 	add	r6,r7,r9
    2174:	1000071e 	bne	r2,zero,2194 <_free_r+0x218>
    2178:	80bffe17 	ldw	r2,-8(r16)
    217c:	4091c83a 	sub	r8,r8,r2
    2180:	41000317 	ldw	r4,12(r8)
    2184:	40c00217 	ldw	r3,8(r8)
    2188:	308d883a 	add	r6,r6,r2
    218c:	20c00215 	stw	r3,8(r4)
    2190:	19000315 	stw	r4,12(r3)
    2194:	00800034 	movhi	r2,0
    2198:	109c1604 	addi	r2,r2,28760
    219c:	11000017 	ldw	r4,0(r2)
    21a0:	30c00054 	ori	r3,r6,1
    21a4:	52000215 	stw	r8,8(r10)
    21a8:	40c00115 	stw	r3,4(r8)
    21ac:	313fa036 	bltu	r6,r4,2030 <_free_r+0xb4>
    21b0:	00800074 	movhi	r2,1
    21b4:	10a2b404 	addi	r2,r2,-30000
    21b8:	11400017 	ldw	r5,0(r2)
    21bc:	8809883a 	mov	r4,r17
    21c0:	0001e500 	call	1e50 <_malloc_trim_r>
    21c4:	003f9a06 	br	2030 <_free_r+0xb4>
    21c8:	00800104 	movi	r2,4
    21cc:	10c0072e 	bgeu	r2,r3,21ec <_free_r+0x270>
    21d0:	00800504 	movi	r2,20
    21d4:	10c01936 	bltu	r2,r3,223c <_free_r+0x2c0>
    21d8:	188016c4 	addi	r2,r3,91
    21dc:	100690fa 	slli	r3,r2,3
    21e0:	003fb306 	br	20b0 <_free_r+0x134>
    21e4:	01400044 	movi	r5,1
    21e8:	003f7e06 	br	1fe4 <_free_r+0x68>
    21ec:	3804d1ba 	srli	r2,r7,6
    21f0:	10800e04 	addi	r2,r2,56
    21f4:	100690fa 	slli	r3,r2,3
    21f8:	003fad06 	br	20b0 <_free_r+0x134>
    21fc:	22000315 	stw	r8,12(r4)
    2200:	22000215 	stw	r8,8(r4)
    2204:	3a05883a 	add	r2,r7,r8
    2208:	38c00054 	ori	r3,r7,1
    220c:	11c00015 	stw	r7,0(r2)
    2210:	41000215 	stw	r4,8(r8)
    2214:	40c00115 	stw	r3,4(r8)
    2218:	41000315 	stw	r4,12(r8)
    221c:	003f8406 	br	2030 <_free_r+0xb4>
    2220:	1005d0ba 	srai	r2,r2,2
    2224:	00c00044 	movi	r3,1
    2228:	51000117 	ldw	r4,4(r10)
    222c:	1886983a 	sll	r3,r3,r2
    2230:	20c8b03a 	or	r4,r4,r3
    2234:	51000115 	stw	r4,4(r10)
    2238:	003fa706 	br	20d8 <_free_r+0x15c>
    223c:	00801504 	movi	r2,84
    2240:	10c00436 	bltu	r2,r3,2254 <_free_r+0x2d8>
    2244:	3804d33a 	srli	r2,r7,12
    2248:	10801b84 	addi	r2,r2,110
    224c:	100690fa 	slli	r3,r2,3
    2250:	003f9706 	br	20b0 <_free_r+0x134>
    2254:	00805504 	movi	r2,340
    2258:	10c00436 	bltu	r2,r3,226c <_free_r+0x2f0>
    225c:	3804d3fa 	srli	r2,r7,15
    2260:	10801dc4 	addi	r2,r2,119
    2264:	100690fa 	slli	r3,r2,3
    2268:	003f9106 	br	20b0 <_free_r+0x134>
    226c:	00815504 	movi	r2,1364
    2270:	10c0032e 	bgeu	r2,r3,2280 <_free_r+0x304>
    2274:	00801f84 	movi	r2,126
    2278:	00c0fc04 	movi	r3,1008
    227c:	003f8c06 	br	20b0 <_free_r+0x134>
    2280:	3804d4ba 	srli	r2,r7,18
    2284:	10801f04 	addi	r2,r2,124
    2288:	100690fa 	slli	r3,r2,3
    228c:	003f8806 	br	20b0 <_free_r+0x134>

00002290 <_fwalk_reent>:
    2290:	defff704 	addi	sp,sp,-36
    2294:	dcc00315 	stw	r19,12(sp)
    2298:	24c0b804 	addi	r19,r4,736
    229c:	dd800615 	stw	r22,24(sp)
    22a0:	dd400515 	stw	r21,20(sp)
    22a4:	dfc00815 	stw	ra,32(sp)
    22a8:	ddc00715 	stw	r23,28(sp)
    22ac:	dd000415 	stw	r20,16(sp)
    22b0:	dc800215 	stw	r18,8(sp)
    22b4:	dc400115 	stw	r17,4(sp)
    22b8:	dc000015 	stw	r16,0(sp)
    22bc:	202b883a 	mov	r21,r4
    22c0:	282d883a 	mov	r22,r5
    22c4:	0001bb40 	call	1bb4 <__sfp_lock_acquire>
    22c8:	98002126 	beq	r19,zero,2350 <_fwalk_reent+0xc0>
    22cc:	002f883a 	mov	r23,zero
    22d0:	9c800117 	ldw	r18,4(r19)
    22d4:	9c000217 	ldw	r16,8(r19)
    22d8:	90bfffc4 	addi	r2,r18,-1
    22dc:	10000d16 	blt	r2,zero,2314 <_fwalk_reent+0x84>
    22e0:	0023883a 	mov	r17,zero
    22e4:	053fffc4 	movi	r20,-1
    22e8:	8080030f 	ldh	r2,12(r16)
    22ec:	8c400044 	addi	r17,r17,1
    22f0:	10000626 	beq	r2,zero,230c <_fwalk_reent+0x7c>
    22f4:	8080038f 	ldh	r2,14(r16)
    22f8:	800b883a 	mov	r5,r16
    22fc:	a809883a 	mov	r4,r21
    2300:	15000226 	beq	r2,r20,230c <_fwalk_reent+0x7c>
    2304:	b03ee83a 	callr	r22
    2308:	b8aeb03a 	or	r23,r23,r2
    230c:	84001704 	addi	r16,r16,92
    2310:	947ff51e 	bne	r18,r17,22e8 <_fwalk_reent+0x58>
    2314:	9cc00017 	ldw	r19,0(r19)
    2318:	983fed1e 	bne	r19,zero,22d0 <_fwalk_reent+0x40>
    231c:	0001bb80 	call	1bb8 <__sfp_lock_release>
    2320:	b805883a 	mov	r2,r23
    2324:	dfc00817 	ldw	ra,32(sp)
    2328:	ddc00717 	ldw	r23,28(sp)
    232c:	dd800617 	ldw	r22,24(sp)
    2330:	dd400517 	ldw	r21,20(sp)
    2334:	dd000417 	ldw	r20,16(sp)
    2338:	dcc00317 	ldw	r19,12(sp)
    233c:	dc800217 	ldw	r18,8(sp)
    2340:	dc400117 	ldw	r17,4(sp)
    2344:	dc000017 	ldw	r16,0(sp)
    2348:	dec00904 	addi	sp,sp,36
    234c:	f800283a 	ret
    2350:	002f883a 	mov	r23,zero
    2354:	003ff106 	br	231c <_fwalk_reent+0x8c>

00002358 <_fwalk>:
    2358:	defff804 	addi	sp,sp,-32
    235c:	dcc00315 	stw	r19,12(sp)
    2360:	24c0b804 	addi	r19,r4,736
    2364:	dd400515 	stw	r21,20(sp)
    2368:	dfc00715 	stw	ra,28(sp)
    236c:	dd800615 	stw	r22,24(sp)
    2370:	dd000415 	stw	r20,16(sp)
    2374:	dc800215 	stw	r18,8(sp)
    2378:	dc400115 	stw	r17,4(sp)
    237c:	dc000015 	stw	r16,0(sp)
    2380:	282b883a 	mov	r21,r5
    2384:	0001bb40 	call	1bb4 <__sfp_lock_acquire>
    2388:	98001f26 	beq	r19,zero,2408 <_fwalk+0xb0>
    238c:	002d883a 	mov	r22,zero
    2390:	9c800117 	ldw	r18,4(r19)
    2394:	9c000217 	ldw	r16,8(r19)
    2398:	90bfffc4 	addi	r2,r18,-1
    239c:	10000c16 	blt	r2,zero,23d0 <_fwalk+0x78>
    23a0:	0023883a 	mov	r17,zero
    23a4:	053fffc4 	movi	r20,-1
    23a8:	8080030f 	ldh	r2,12(r16)
    23ac:	8c400044 	addi	r17,r17,1
    23b0:	10000526 	beq	r2,zero,23c8 <_fwalk+0x70>
    23b4:	8080038f 	ldh	r2,14(r16)
    23b8:	8009883a 	mov	r4,r16
    23bc:	15000226 	beq	r2,r20,23c8 <_fwalk+0x70>
    23c0:	a83ee83a 	callr	r21
    23c4:	b0acb03a 	or	r22,r22,r2
    23c8:	84001704 	addi	r16,r16,92
    23cc:	947ff61e 	bne	r18,r17,23a8 <_fwalk+0x50>
    23d0:	9cc00017 	ldw	r19,0(r19)
    23d4:	983fee1e 	bne	r19,zero,2390 <_fwalk+0x38>
    23d8:	0001bb80 	call	1bb8 <__sfp_lock_release>
    23dc:	b005883a 	mov	r2,r22
    23e0:	dfc00717 	ldw	ra,28(sp)
    23e4:	dd800617 	ldw	r22,24(sp)
    23e8:	dd400517 	ldw	r21,20(sp)
    23ec:	dd000417 	ldw	r20,16(sp)
    23f0:	dcc00317 	ldw	r19,12(sp)
    23f4:	dc800217 	ldw	r18,8(sp)
    23f8:	dc400117 	ldw	r17,4(sp)
    23fc:	dc000017 	ldw	r16,0(sp)
    2400:	dec00804 	addi	sp,sp,32
    2404:	f800283a 	ret
    2408:	002d883a 	mov	r22,zero
    240c:	003ff206 	br	23d8 <_fwalk+0x80>

00002410 <__smakebuf_r>:
    2410:	2880030b 	ldhu	r2,12(r5)
    2414:	deffed04 	addi	sp,sp,-76
    2418:	dc401015 	stw	r17,64(sp)
    241c:	1080008c 	andi	r2,r2,2
    2420:	dc000f15 	stw	r16,60(sp)
    2424:	dfc01215 	stw	ra,72(sp)
    2428:	dc801115 	stw	r18,68(sp)
    242c:	2821883a 	mov	r16,r5
    2430:	2023883a 	mov	r17,r4
    2434:	10000b26 	beq	r2,zero,2464 <__smakebuf_r+0x54>
    2438:	28c010c4 	addi	r3,r5,67
    243c:	00800044 	movi	r2,1
    2440:	28800515 	stw	r2,20(r5)
    2444:	28c00415 	stw	r3,16(r5)
    2448:	28c00015 	stw	r3,0(r5)
    244c:	dfc01217 	ldw	ra,72(sp)
    2450:	dc801117 	ldw	r18,68(sp)
    2454:	dc401017 	ldw	r17,64(sp)
    2458:	dc000f17 	ldw	r16,60(sp)
    245c:	dec01304 	addi	sp,sp,76
    2460:	f800283a 	ret
    2464:	2940038f 	ldh	r5,14(r5)
    2468:	28002116 	blt	r5,zero,24f0 <__smakebuf_r+0xe0>
    246c:	d80d883a 	mov	r6,sp
    2470:	00029940 	call	2994 <_fstat_r>
    2474:	10001e16 	blt	r2,zero,24f0 <__smakebuf_r+0xe0>
    2478:	d8800117 	ldw	r2,4(sp)
    247c:	00e00014 	movui	r3,32768
    2480:	113c000c 	andi	r4,r2,61440
    2484:	20c03126 	beq	r4,r3,254c <__smakebuf_r+0x13c>
    2488:	8080030b 	ldhu	r2,12(r16)
    248c:	00c80004 	movi	r3,8192
    2490:	10820014 	ori	r2,r2,2048
    2494:	8080030d 	sth	r2,12(r16)
    2498:	20c01e26 	beq	r4,r3,2514 <__smakebuf_r+0x104>
    249c:	04810004 	movi	r18,1024
    24a0:	8809883a 	mov	r4,r17
    24a4:	900b883a 	mov	r5,r18
    24a8:	00007e80 	call	7e8 <_malloc_r>
    24ac:	1009883a 	mov	r4,r2
    24b0:	10003126 	beq	r2,zero,2578 <__smakebuf_r+0x168>
    24b4:	80c0030b 	ldhu	r3,12(r16)
    24b8:	00800034 	movhi	r2,0
    24bc:	10872a04 	addi	r2,r2,7336
    24c0:	88800f15 	stw	r2,60(r17)
    24c4:	18c02014 	ori	r3,r3,128
    24c8:	84800515 	stw	r18,20(r16)
    24cc:	80c0030d 	sth	r3,12(r16)
    24d0:	81000415 	stw	r4,16(r16)
    24d4:	81000015 	stw	r4,0(r16)
    24d8:	dfc01217 	ldw	ra,72(sp)
    24dc:	dc801117 	ldw	r18,68(sp)
    24e0:	dc401017 	ldw	r17,64(sp)
    24e4:	dc000f17 	ldw	r16,60(sp)
    24e8:	dec01304 	addi	sp,sp,76
    24ec:	f800283a 	ret
    24f0:	80c0030b 	ldhu	r3,12(r16)
    24f4:	1880200c 	andi	r2,r3,128
    24f8:	10000426 	beq	r2,zero,250c <__smakebuf_r+0xfc>
    24fc:	04801004 	movi	r18,64
    2500:	18820014 	ori	r2,r3,2048
    2504:	8080030d 	sth	r2,12(r16)
    2508:	003fe506 	br	24a0 <__smakebuf_r+0x90>
    250c:	04810004 	movi	r18,1024
    2510:	003ffb06 	br	2500 <__smakebuf_r+0xf0>
    2514:	8140038f 	ldh	r5,14(r16)
    2518:	8809883a 	mov	r4,r17
    251c:	0002a080 	call	2a08 <_isatty_r>
    2520:	103fde26 	beq	r2,zero,249c <__smakebuf_r+0x8c>
    2524:	8080030b 	ldhu	r2,12(r16)
    2528:	80c010c4 	addi	r3,r16,67
    252c:	04810004 	movi	r18,1024
    2530:	10800054 	ori	r2,r2,1
    2534:	8080030d 	sth	r2,12(r16)
    2538:	00800044 	movi	r2,1
    253c:	80c00415 	stw	r3,16(r16)
    2540:	80800515 	stw	r2,20(r16)
    2544:	80c00015 	stw	r3,0(r16)
    2548:	003fd506 	br	24a0 <__smakebuf_r+0x90>
    254c:	80c00a17 	ldw	r3,40(r16)
    2550:	00800034 	movhi	r2,0
    2554:	10899104 	addi	r2,r2,9796
    2558:	18bfcb1e 	bne	r3,r2,2488 <__smakebuf_r+0x78>
    255c:	8080030b 	ldhu	r2,12(r16)
    2560:	00c10004 	movi	r3,1024
    2564:	1825883a 	mov	r18,r3
    2568:	10c4b03a 	or	r2,r2,r3
    256c:	8080030d 	sth	r2,12(r16)
    2570:	80c01315 	stw	r3,76(r16)
    2574:	003fca06 	br	24a0 <__smakebuf_r+0x90>
    2578:	8100030b 	ldhu	r4,12(r16)
    257c:	2080800c 	andi	r2,r4,512
    2580:	103fb21e 	bne	r2,zero,244c <__smakebuf_r+0x3c>
    2584:	80c010c4 	addi	r3,r16,67
    2588:	21000094 	ori	r4,r4,2
    258c:	00800044 	movi	r2,1
    2590:	80800515 	stw	r2,20(r16)
    2594:	8100030d 	sth	r4,12(r16)
    2598:	80c00415 	stw	r3,16(r16)
    259c:	80c00015 	stw	r3,0(r16)
    25a0:	003faa06 	br	244c <__smakebuf_r+0x3c>

000025a4 <memset>:
    25a4:	008000c4 	movi	r2,3
    25a8:	29403fcc 	andi	r5,r5,255
    25ac:	2007883a 	mov	r3,r4
    25b0:	1180022e 	bgeu	r2,r6,25bc <memset+0x18>
    25b4:	2084703a 	and	r2,r4,r2
    25b8:	10000826 	beq	r2,zero,25dc <memset+0x38>
    25bc:	30000526 	beq	r6,zero,25d4 <memset+0x30>
    25c0:	2805883a 	mov	r2,r5
    25c4:	30cd883a 	add	r6,r6,r3
    25c8:	18800005 	stb	r2,0(r3)
    25cc:	18c00044 	addi	r3,r3,1
    25d0:	19bffd1e 	bne	r3,r6,25c8 <memset+0x24>
    25d4:	2005883a 	mov	r2,r4
    25d8:	f800283a 	ret
    25dc:	2804923a 	slli	r2,r5,8
    25e0:	020003c4 	movi	r8,15
    25e4:	200f883a 	mov	r7,r4
    25e8:	2884b03a 	or	r2,r5,r2
    25ec:	1006943a 	slli	r3,r2,16
    25f0:	10c6b03a 	or	r3,r2,r3
    25f4:	41800a2e 	bgeu	r8,r6,2620 <memset+0x7c>
    25f8:	4005883a 	mov	r2,r8
    25fc:	31bffc04 	addi	r6,r6,-16
    2600:	38c00015 	stw	r3,0(r7)
    2604:	38c00115 	stw	r3,4(r7)
    2608:	38c00215 	stw	r3,8(r7)
    260c:	38c00315 	stw	r3,12(r7)
    2610:	39c00404 	addi	r7,r7,16
    2614:	11bff936 	bltu	r2,r6,25fc <memset+0x58>
    2618:	008000c4 	movi	r2,3
    261c:	1180052e 	bgeu	r2,r6,2634 <memset+0x90>
    2620:	31bfff04 	addi	r6,r6,-4
    2624:	008000c4 	movi	r2,3
    2628:	38c00015 	stw	r3,0(r7)
    262c:	39c00104 	addi	r7,r7,4
    2630:	11bffb36 	bltu	r2,r6,2620 <memset+0x7c>
    2634:	3807883a 	mov	r3,r7
    2638:	003fe006 	br	25bc <memset+0x18>

0000263c <__sclose>:
    263c:	2940038f 	ldh	r5,14(r5)
    2640:	00028001 	jmpi	2800 <_close_r>

00002644 <__sseek>:
    2644:	defffe04 	addi	sp,sp,-8
    2648:	dc000015 	stw	r16,0(sp)
    264c:	2821883a 	mov	r16,r5
    2650:	2940038f 	ldh	r5,14(r5)
    2654:	dfc00115 	stw	ra,4(sp)
    2658:	0002a780 	call	2a78 <_lseek_r>
    265c:	1007883a 	mov	r3,r2
    2660:	00bfffc4 	movi	r2,-1
    2664:	18800926 	beq	r3,r2,268c <__sseek+0x48>
    2668:	8080030b 	ldhu	r2,12(r16)
    266c:	80c01415 	stw	r3,80(r16)
    2670:	10840014 	ori	r2,r2,4096
    2674:	8080030d 	sth	r2,12(r16)
    2678:	1805883a 	mov	r2,r3
    267c:	dfc00117 	ldw	ra,4(sp)
    2680:	dc000017 	ldw	r16,0(sp)
    2684:	dec00204 	addi	sp,sp,8
    2688:	f800283a 	ret
    268c:	8080030b 	ldhu	r2,12(r16)
    2690:	10bbffcc 	andi	r2,r2,61439
    2694:	8080030d 	sth	r2,12(r16)
    2698:	1805883a 	mov	r2,r3
    269c:	dfc00117 	ldw	ra,4(sp)
    26a0:	dc000017 	ldw	r16,0(sp)
    26a4:	dec00204 	addi	sp,sp,8
    26a8:	f800283a 	ret

000026ac <__swrite>:
    26ac:	2880030b 	ldhu	r2,12(r5)
    26b0:	defffb04 	addi	sp,sp,-20
    26b4:	dcc00315 	stw	r19,12(sp)
    26b8:	1080400c 	andi	r2,r2,256
    26bc:	dc800215 	stw	r18,8(sp)
    26c0:	dc400115 	stw	r17,4(sp)
    26c4:	dc000015 	stw	r16,0(sp)
    26c8:	3027883a 	mov	r19,r6
    26cc:	3825883a 	mov	r18,r7
    26d0:	dfc00415 	stw	ra,16(sp)
    26d4:	2821883a 	mov	r16,r5
    26d8:	000d883a 	mov	r6,zero
    26dc:	01c00084 	movi	r7,2
    26e0:	2023883a 	mov	r17,r4
    26e4:	10000226 	beq	r2,zero,26f0 <__swrite+0x44>
    26e8:	2940038f 	ldh	r5,14(r5)
    26ec:	0002a780 	call	2a78 <_lseek_r>
    26f0:	8080030b 	ldhu	r2,12(r16)
    26f4:	8140038f 	ldh	r5,14(r16)
    26f8:	8809883a 	mov	r4,r17
    26fc:	10bbffcc 	andi	r2,r2,61439
    2700:	980d883a 	mov	r6,r19
    2704:	900f883a 	mov	r7,r18
    2708:	8080030d 	sth	r2,12(r16)
    270c:	dfc00417 	ldw	ra,16(sp)
    2710:	dcc00317 	ldw	r19,12(sp)
    2714:	dc800217 	ldw	r18,8(sp)
    2718:	dc400117 	ldw	r17,4(sp)
    271c:	dc000017 	ldw	r16,0(sp)
    2720:	dec00504 	addi	sp,sp,20
    2724:	00027881 	jmpi	2788 <_write_r>

00002728 <__sread>:
    2728:	defffe04 	addi	sp,sp,-8
    272c:	dc000015 	stw	r16,0(sp)
    2730:	2821883a 	mov	r16,r5
    2734:	2940038f 	ldh	r5,14(r5)
    2738:	dfc00115 	stw	ra,4(sp)
    273c:	0002af00 	call	2af0 <_read_r>
    2740:	1007883a 	mov	r3,r2
    2744:	10000816 	blt	r2,zero,2768 <__sread+0x40>
    2748:	80801417 	ldw	r2,80(r16)
    274c:	10c5883a 	add	r2,r2,r3
    2750:	80801415 	stw	r2,80(r16)
    2754:	1805883a 	mov	r2,r3
    2758:	dfc00117 	ldw	ra,4(sp)
    275c:	dc000017 	ldw	r16,0(sp)
    2760:	dec00204 	addi	sp,sp,8
    2764:	f800283a 	ret
    2768:	8080030b 	ldhu	r2,12(r16)
    276c:	10bbffcc 	andi	r2,r2,61439
    2770:	8080030d 	sth	r2,12(r16)
    2774:	1805883a 	mov	r2,r3
    2778:	dfc00117 	ldw	ra,4(sp)
    277c:	dc000017 	ldw	r16,0(sp)
    2780:	dec00204 	addi	sp,sp,8
    2784:	f800283a 	ret

00002788 <_write_r>:
    2788:	defffd04 	addi	sp,sp,-12
    278c:	dc000015 	stw	r16,0(sp)
    2790:	04000074 	movhi	r16,1
    2794:	8422b704 	addi	r16,r16,-29988
    2798:	dc400115 	stw	r17,4(sp)
    279c:	80000015 	stw	zero,0(r16)
    27a0:	2023883a 	mov	r17,r4
    27a4:	2809883a 	mov	r4,r5
    27a8:	300b883a 	mov	r5,r6
    27ac:	380d883a 	mov	r6,r7
    27b0:	dfc00215 	stw	ra,8(sp)
    27b4:	000352c0 	call	352c <write>
    27b8:	1007883a 	mov	r3,r2
    27bc:	00bfffc4 	movi	r2,-1
    27c0:	18800626 	beq	r3,r2,27dc <_write_r+0x54>
    27c4:	1805883a 	mov	r2,r3
    27c8:	dfc00217 	ldw	ra,8(sp)
    27cc:	dc400117 	ldw	r17,4(sp)
    27d0:	dc000017 	ldw	r16,0(sp)
    27d4:	dec00304 	addi	sp,sp,12
    27d8:	f800283a 	ret
    27dc:	80800017 	ldw	r2,0(r16)
    27e0:	103ff826 	beq	r2,zero,27c4 <_write_r+0x3c>
    27e4:	88800015 	stw	r2,0(r17)
    27e8:	1805883a 	mov	r2,r3
    27ec:	dfc00217 	ldw	ra,8(sp)
    27f0:	dc400117 	ldw	r17,4(sp)
    27f4:	dc000017 	ldw	r16,0(sp)
    27f8:	dec00304 	addi	sp,sp,12
    27fc:	f800283a 	ret

00002800 <_close_r>:
    2800:	defffd04 	addi	sp,sp,-12
    2804:	dc000015 	stw	r16,0(sp)
    2808:	04000074 	movhi	r16,1
    280c:	8422b704 	addi	r16,r16,-29988
    2810:	dc400115 	stw	r17,4(sp)
    2814:	80000015 	stw	zero,0(r16)
    2818:	2023883a 	mov	r17,r4
    281c:	2809883a 	mov	r4,r5
    2820:	dfc00215 	stw	ra,8(sp)
    2824:	0002ba00 	call	2ba0 <close>
    2828:	1007883a 	mov	r3,r2
    282c:	00bfffc4 	movi	r2,-1
    2830:	18800626 	beq	r3,r2,284c <_close_r+0x4c>
    2834:	1805883a 	mov	r2,r3
    2838:	dfc00217 	ldw	ra,8(sp)
    283c:	dc400117 	ldw	r17,4(sp)
    2840:	dc000017 	ldw	r16,0(sp)
    2844:	dec00304 	addi	sp,sp,12
    2848:	f800283a 	ret
    284c:	80800017 	ldw	r2,0(r16)
    2850:	103ff826 	beq	r2,zero,2834 <_close_r+0x34>
    2854:	88800015 	stw	r2,0(r17)
    2858:	1805883a 	mov	r2,r3
    285c:	dfc00217 	ldw	ra,8(sp)
    2860:	dc400117 	ldw	r17,4(sp)
    2864:	dc000017 	ldw	r16,0(sp)
    2868:	dec00304 	addi	sp,sp,12
    286c:	f800283a 	ret

00002870 <_fclose_r>:
    2870:	defffc04 	addi	sp,sp,-16
    2874:	dc400115 	stw	r17,4(sp)
    2878:	dc000015 	stw	r16,0(sp)
    287c:	dfc00315 	stw	ra,12(sp)
    2880:	dc800215 	stw	r18,8(sp)
    2884:	2821883a 	mov	r16,r5
    2888:	2023883a 	mov	r17,r4
    288c:	28002926 	beq	r5,zero,2934 <_fclose_r+0xc4>
    2890:	0001bb40 	call	1bb4 <__sfp_lock_acquire>
    2894:	88000226 	beq	r17,zero,28a0 <_fclose_r+0x30>
    2898:	88800e17 	ldw	r2,56(r17)
    289c:	10002d26 	beq	r2,zero,2954 <_fclose_r+0xe4>
    28a0:	8080030f 	ldh	r2,12(r16)
    28a4:	10002226 	beq	r2,zero,2930 <_fclose_r+0xc0>
    28a8:	8809883a 	mov	r4,r17
    28ac:	800b883a 	mov	r5,r16
    28b0:	000192c0 	call	192c <_fflush_r>
    28b4:	1025883a 	mov	r18,r2
    28b8:	80800b17 	ldw	r2,44(r16)
    28bc:	10000426 	beq	r2,zero,28d0 <_fclose_r+0x60>
    28c0:	81400717 	ldw	r5,28(r16)
    28c4:	8809883a 	mov	r4,r17
    28c8:	103ee83a 	callr	r2
    28cc:	10002a16 	blt	r2,zero,2978 <_fclose_r+0x108>
    28d0:	8080030b 	ldhu	r2,12(r16)
    28d4:	1080200c 	andi	r2,r2,128
    28d8:	1000231e 	bne	r2,zero,2968 <_fclose_r+0xf8>
    28dc:	81400c17 	ldw	r5,48(r16)
    28e0:	28000526 	beq	r5,zero,28f8 <_fclose_r+0x88>
    28e4:	80801004 	addi	r2,r16,64
    28e8:	28800226 	beq	r5,r2,28f4 <_fclose_r+0x84>
    28ec:	8809883a 	mov	r4,r17
    28f0:	0001f7c0 	call	1f7c <_free_r>
    28f4:	80000c15 	stw	zero,48(r16)
    28f8:	81401117 	ldw	r5,68(r16)
    28fc:	28000326 	beq	r5,zero,290c <_fclose_r+0x9c>
    2900:	8809883a 	mov	r4,r17
    2904:	0001f7c0 	call	1f7c <_free_r>
    2908:	80001115 	stw	zero,68(r16)
    290c:	8000030d 	sth	zero,12(r16)
    2910:	0001bb80 	call	1bb8 <__sfp_lock_release>
    2914:	9005883a 	mov	r2,r18
    2918:	dfc00317 	ldw	ra,12(sp)
    291c:	dc800217 	ldw	r18,8(sp)
    2920:	dc400117 	ldw	r17,4(sp)
    2924:	dc000017 	ldw	r16,0(sp)
    2928:	dec00404 	addi	sp,sp,16
    292c:	f800283a 	ret
    2930:	0001bb80 	call	1bb8 <__sfp_lock_release>
    2934:	0025883a 	mov	r18,zero
    2938:	9005883a 	mov	r2,r18
    293c:	dfc00317 	ldw	ra,12(sp)
    2940:	dc800217 	ldw	r18,8(sp)
    2944:	dc400117 	ldw	r17,4(sp)
    2948:	dc000017 	ldw	r16,0(sp)
    294c:	dec00404 	addi	sp,sp,16
    2950:	f800283a 	ret
    2954:	8809883a 	mov	r4,r17
    2958:	0001bc40 	call	1bc4 <__sinit>
    295c:	8080030f 	ldh	r2,12(r16)
    2960:	103fd11e 	bne	r2,zero,28a8 <_fclose_r+0x38>
    2964:	003ff206 	br	2930 <_fclose_r+0xc0>
    2968:	81400417 	ldw	r5,16(r16)
    296c:	8809883a 	mov	r4,r17
    2970:	0001f7c0 	call	1f7c <_free_r>
    2974:	003fd906 	br	28dc <_fclose_r+0x6c>
    2978:	04bfffc4 	movi	r18,-1
    297c:	003fd406 	br	28d0 <_fclose_r+0x60>

00002980 <fclose>:
    2980:	00800034 	movhi	r2,0
    2984:	109c1404 	addi	r2,r2,28752
    2988:	200b883a 	mov	r5,r4
    298c:	11000017 	ldw	r4,0(r2)
    2990:	00028701 	jmpi	2870 <_fclose_r>

00002994 <_fstat_r>:
    2994:	defffd04 	addi	sp,sp,-12
    2998:	dc000015 	stw	r16,0(sp)
    299c:	04000074 	movhi	r16,1
    29a0:	8422b704 	addi	r16,r16,-29988
    29a4:	dc400115 	stw	r17,4(sp)
    29a8:	80000015 	stw	zero,0(r16)
    29ac:	2023883a 	mov	r17,r4
    29b0:	2809883a 	mov	r4,r5
    29b4:	300b883a 	mov	r5,r6
    29b8:	dfc00215 	stw	ra,8(sp)
    29bc:	0002d2c0 	call	2d2c <fstat>
    29c0:	1007883a 	mov	r3,r2
    29c4:	00bfffc4 	movi	r2,-1
    29c8:	18800626 	beq	r3,r2,29e4 <_fstat_r+0x50>
    29cc:	1805883a 	mov	r2,r3
    29d0:	dfc00217 	ldw	ra,8(sp)
    29d4:	dc400117 	ldw	r17,4(sp)
    29d8:	dc000017 	ldw	r16,0(sp)
    29dc:	dec00304 	addi	sp,sp,12
    29e0:	f800283a 	ret
    29e4:	80800017 	ldw	r2,0(r16)
    29e8:	103ff826 	beq	r2,zero,29cc <_fstat_r+0x38>
    29ec:	88800015 	stw	r2,0(r17)
    29f0:	1805883a 	mov	r2,r3
    29f4:	dfc00217 	ldw	ra,8(sp)
    29f8:	dc400117 	ldw	r17,4(sp)
    29fc:	dc000017 	ldw	r16,0(sp)
    2a00:	dec00304 	addi	sp,sp,12
    2a04:	f800283a 	ret

00002a08 <_isatty_r>:
    2a08:	defffd04 	addi	sp,sp,-12
    2a0c:	dc000015 	stw	r16,0(sp)
    2a10:	04000074 	movhi	r16,1
    2a14:	8422b704 	addi	r16,r16,-29988
    2a18:	dc400115 	stw	r17,4(sp)
    2a1c:	80000015 	stw	zero,0(r16)
    2a20:	2023883a 	mov	r17,r4
    2a24:	2809883a 	mov	r4,r5
    2a28:	dfc00215 	stw	ra,8(sp)
    2a2c:	0002e640 	call	2e64 <isatty>
    2a30:	1007883a 	mov	r3,r2
    2a34:	00bfffc4 	movi	r2,-1
    2a38:	18800626 	beq	r3,r2,2a54 <_isatty_r+0x4c>
    2a3c:	1805883a 	mov	r2,r3
    2a40:	dfc00217 	ldw	ra,8(sp)
    2a44:	dc400117 	ldw	r17,4(sp)
    2a48:	dc000017 	ldw	r16,0(sp)
    2a4c:	dec00304 	addi	sp,sp,12
    2a50:	f800283a 	ret
    2a54:	80800017 	ldw	r2,0(r16)
    2a58:	103ff826 	beq	r2,zero,2a3c <_isatty_r+0x34>
    2a5c:	88800015 	stw	r2,0(r17)
    2a60:	1805883a 	mov	r2,r3
    2a64:	dfc00217 	ldw	ra,8(sp)
    2a68:	dc400117 	ldw	r17,4(sp)
    2a6c:	dc000017 	ldw	r16,0(sp)
    2a70:	dec00304 	addi	sp,sp,12
    2a74:	f800283a 	ret

00002a78 <_lseek_r>:
    2a78:	defffd04 	addi	sp,sp,-12
    2a7c:	dc000015 	stw	r16,0(sp)
    2a80:	04000074 	movhi	r16,1
    2a84:	8422b704 	addi	r16,r16,-29988
    2a88:	dc400115 	stw	r17,4(sp)
    2a8c:	80000015 	stw	zero,0(r16)
    2a90:	2023883a 	mov	r17,r4
    2a94:	2809883a 	mov	r4,r5
    2a98:	300b883a 	mov	r5,r6
    2a9c:	380d883a 	mov	r6,r7
    2aa0:	dfc00215 	stw	ra,8(sp)
    2aa4:	00030740 	call	3074 <lseek>
    2aa8:	1007883a 	mov	r3,r2
    2aac:	00bfffc4 	movi	r2,-1
    2ab0:	18800626 	beq	r3,r2,2acc <_lseek_r+0x54>
    2ab4:	1805883a 	mov	r2,r3
    2ab8:	dfc00217 	ldw	ra,8(sp)
    2abc:	dc400117 	ldw	r17,4(sp)
    2ac0:	dc000017 	ldw	r16,0(sp)
    2ac4:	dec00304 	addi	sp,sp,12
    2ac8:	f800283a 	ret
    2acc:	80800017 	ldw	r2,0(r16)
    2ad0:	103ff826 	beq	r2,zero,2ab4 <_lseek_r+0x3c>
    2ad4:	88800015 	stw	r2,0(r17)
    2ad8:	1805883a 	mov	r2,r3
    2adc:	dfc00217 	ldw	ra,8(sp)
    2ae0:	dc400117 	ldw	r17,4(sp)
    2ae4:	dc000017 	ldw	r16,0(sp)
    2ae8:	dec00304 	addi	sp,sp,12
    2aec:	f800283a 	ret

00002af0 <_read_r>:
    2af0:	defffd04 	addi	sp,sp,-12
    2af4:	dc000015 	stw	r16,0(sp)
    2af8:	04000074 	movhi	r16,1
    2afc:	8422b704 	addi	r16,r16,-29988
    2b00:	dc400115 	stw	r17,4(sp)
    2b04:	80000015 	stw	zero,0(r16)
    2b08:	2023883a 	mov	r17,r4
    2b0c:	2809883a 	mov	r4,r5
    2b10:	300b883a 	mov	r5,r6
    2b14:	380d883a 	mov	r6,r7
    2b18:	dfc00215 	stw	ra,8(sp)
    2b1c:	00032740 	call	3274 <read>
    2b20:	1007883a 	mov	r3,r2
    2b24:	00bfffc4 	movi	r2,-1
    2b28:	18800626 	beq	r3,r2,2b44 <_read_r+0x54>
    2b2c:	1805883a 	mov	r2,r3
    2b30:	dfc00217 	ldw	ra,8(sp)
    2b34:	dc400117 	ldw	r17,4(sp)
    2b38:	dc000017 	ldw	r16,0(sp)
    2b3c:	dec00304 	addi	sp,sp,12
    2b40:	f800283a 	ret
    2b44:	80800017 	ldw	r2,0(r16)
    2b48:	103ff826 	beq	r2,zero,2b2c <_read_r+0x3c>
    2b4c:	88800015 	stw	r2,0(r17)
    2b50:	1805883a 	mov	r2,r3
    2b54:	dfc00217 	ldw	ra,8(sp)
    2b58:	dc400117 	ldw	r17,4(sp)
    2b5c:	dc000017 	ldw	r16,0(sp)
    2b60:	dec00304 	addi	sp,sp,12
    2b64:	f800283a 	ret

00002b68 <__mulsi3>:
    2b68:	20000a26 	beq	r4,zero,2b94 <__mulsi3+0x2c>
    2b6c:	0007883a 	mov	r3,zero
    2b70:	2080004c 	andi	r2,r4,1
    2b74:	1005003a 	cmpeq	r2,r2,zero
    2b78:	2008d07a 	srli	r4,r4,1
    2b7c:	1000011e 	bne	r2,zero,2b84 <__mulsi3+0x1c>
    2b80:	1947883a 	add	r3,r3,r5
    2b84:	294b883a 	add	r5,r5,r5
    2b88:	203ff91e 	bne	r4,zero,2b70 <__mulsi3+0x8>
    2b8c:	1805883a 	mov	r2,r3
    2b90:	f800283a 	ret
    2b94:	0007883a 	mov	r3,zero
    2b98:	1805883a 	mov	r2,r3
    2b9c:	f800283a 	ret

00002ba0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2ba0:	defff804 	addi	sp,sp,-32
    2ba4:	dfc00715 	stw	ra,28(sp)
    2ba8:	df000615 	stw	fp,24(sp)
    2bac:	df000604 	addi	fp,sp,24
    2bb0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2bb4:	e0bffc17 	ldw	r2,-16(fp)
    2bb8:	1004803a 	cmplt	r2,r2,zero
    2bbc:	1000091e 	bne	r2,zero,2be4 <close+0x44>
    2bc0:	e13ffc17 	ldw	r4,-16(fp)
    2bc4:	01400304 	movi	r5,12
    2bc8:	0002b680 	call	2b68 <__mulsi3>
    2bcc:	1007883a 	mov	r3,r2
    2bd0:	00800034 	movhi	r2,0
    2bd4:	10979c04 	addi	r2,r2,24176
    2bd8:	1887883a 	add	r3,r3,r2
    2bdc:	e0ffff15 	stw	r3,-4(fp)
    2be0:	00000106 	br	2be8 <close+0x48>
    2be4:	e03fff15 	stw	zero,-4(fp)
    2be8:	e0bfff17 	ldw	r2,-4(fp)
    2bec:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2bf0:	e0bffb17 	ldw	r2,-20(fp)
    2bf4:	1005003a 	cmpeq	r2,r2,zero
    2bf8:	10001d1e 	bne	r2,zero,2c70 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2bfc:	e0bffb17 	ldw	r2,-20(fp)
    2c00:	10800017 	ldw	r2,0(r2)
    2c04:	10800417 	ldw	r2,16(r2)
    2c08:	1005003a 	cmpeq	r2,r2,zero
    2c0c:	1000071e 	bne	r2,zero,2c2c <close+0x8c>
    2c10:	e0bffb17 	ldw	r2,-20(fp)
    2c14:	10800017 	ldw	r2,0(r2)
    2c18:	10800417 	ldw	r2,16(r2)
    2c1c:	e13ffb17 	ldw	r4,-20(fp)
    2c20:	103ee83a 	callr	r2
    2c24:	e0bffe15 	stw	r2,-8(fp)
    2c28:	00000106 	br	2c30 <close+0x90>
    2c2c:	e03ffe15 	stw	zero,-8(fp)
    2c30:	e0bffe17 	ldw	r2,-8(fp)
    2c34:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2c38:	e13ffc17 	ldw	r4,-16(fp)
    2c3c:	00033f80 	call	33f8 <alt_release_fd>
    if (rval < 0)
    2c40:	e0bffa17 	ldw	r2,-24(fp)
    2c44:	1004403a 	cmpge	r2,r2,zero
    2c48:	1000071e 	bne	r2,zero,2c68 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    2c4c:	0002ca00 	call	2ca0 <alt_get_errno>
    2c50:	e0fffa17 	ldw	r3,-24(fp)
    2c54:	00c7c83a 	sub	r3,zero,r3
    2c58:	10c00015 	stw	r3,0(r2)
      return -1;
    2c5c:	00bfffc4 	movi	r2,-1
    2c60:	e0bffd15 	stw	r2,-12(fp)
    2c64:	00000806 	br	2c88 <close+0xe8>
    }
    return 0;
    2c68:	e03ffd15 	stw	zero,-12(fp)
    2c6c:	00000606 	br	2c88 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2c70:	0002ca00 	call	2ca0 <alt_get_errno>
    2c74:	1007883a 	mov	r3,r2
    2c78:	00801444 	movi	r2,81
    2c7c:	18800015 	stw	r2,0(r3)
    return -1;
    2c80:	00bfffc4 	movi	r2,-1
    2c84:	e0bffd15 	stw	r2,-12(fp)
    2c88:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2c8c:	e037883a 	mov	sp,fp
    2c90:	dfc00117 	ldw	ra,4(sp)
    2c94:	df000017 	ldw	fp,0(sp)
    2c98:	dec00204 	addi	sp,sp,8
    2c9c:	f800283a 	ret

00002ca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2ca0:	defffd04 	addi	sp,sp,-12
    2ca4:	dfc00215 	stw	ra,8(sp)
    2ca8:	df000115 	stw	fp,4(sp)
    2cac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2cb0:	00800034 	movhi	r2,0
    2cb4:	109c1d04 	addi	r2,r2,28788
    2cb8:	10800017 	ldw	r2,0(r2)
    2cbc:	1005003a 	cmpeq	r2,r2,zero
    2cc0:	1000061e 	bne	r2,zero,2cdc <alt_get_errno+0x3c>
    2cc4:	00800034 	movhi	r2,0
    2cc8:	109c1d04 	addi	r2,r2,28788
    2ccc:	10800017 	ldw	r2,0(r2)
    2cd0:	103ee83a 	callr	r2
    2cd4:	e0bfff15 	stw	r2,-4(fp)
    2cd8:	00000306 	br	2ce8 <alt_get_errno+0x48>
    2cdc:	00800074 	movhi	r2,1
    2ce0:	10a2b704 	addi	r2,r2,-29988
    2ce4:	e0bfff15 	stw	r2,-4(fp)
    2ce8:	e0bfff17 	ldw	r2,-4(fp)
}
    2cec:	e037883a 	mov	sp,fp
    2cf0:	dfc00117 	ldw	ra,4(sp)
    2cf4:	df000017 	ldw	fp,0(sp)
    2cf8:	dec00204 	addi	sp,sp,8
    2cfc:	f800283a 	ret

00002d00 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2d00:	defffc04 	addi	sp,sp,-16
    2d04:	df000315 	stw	fp,12(sp)
    2d08:	df000304 	addi	fp,sp,12
    2d0c:	e13ffd15 	stw	r4,-12(fp)
    2d10:	e17ffe15 	stw	r5,-8(fp)
    2d14:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2d18:	e0bfff17 	ldw	r2,-4(fp)
}
    2d1c:	e037883a 	mov	sp,fp
    2d20:	df000017 	ldw	fp,0(sp)
    2d24:	dec00104 	addi	sp,sp,4
    2d28:	f800283a 	ret

00002d2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    2d2c:	defff904 	addi	sp,sp,-28
    2d30:	dfc00615 	stw	ra,24(sp)
    2d34:	df000515 	stw	fp,20(sp)
    2d38:	df000504 	addi	fp,sp,20
    2d3c:	e13ffc15 	stw	r4,-16(fp)
    2d40:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2d44:	e0bffc17 	ldw	r2,-16(fp)
    2d48:	1004803a 	cmplt	r2,r2,zero
    2d4c:	1000091e 	bne	r2,zero,2d74 <fstat+0x48>
    2d50:	e13ffc17 	ldw	r4,-16(fp)
    2d54:	01400304 	movi	r5,12
    2d58:	0002b680 	call	2b68 <__mulsi3>
    2d5c:	1007883a 	mov	r3,r2
    2d60:	00800034 	movhi	r2,0
    2d64:	10979c04 	addi	r2,r2,24176
    2d68:	1887883a 	add	r3,r3,r2
    2d6c:	e0ffff15 	stw	r3,-4(fp)
    2d70:	00000106 	br	2d78 <fstat+0x4c>
    2d74:	e03fff15 	stw	zero,-4(fp)
    2d78:	e0bfff17 	ldw	r2,-4(fp)
    2d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2d80:	e0bffb17 	ldw	r2,-20(fp)
    2d84:	1005003a 	cmpeq	r2,r2,zero
    2d88:	1000121e 	bne	r2,zero,2dd4 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    2d8c:	e0bffb17 	ldw	r2,-20(fp)
    2d90:	10800017 	ldw	r2,0(r2)
    2d94:	10800817 	ldw	r2,32(r2)
    2d98:	1005003a 	cmpeq	r2,r2,zero
    2d9c:	1000081e 	bne	r2,zero,2dc0 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    2da0:	e0bffb17 	ldw	r2,-20(fp)
    2da4:	10800017 	ldw	r2,0(r2)
    2da8:	10800817 	ldw	r2,32(r2)
    2dac:	e13ffb17 	ldw	r4,-20(fp)
    2db0:	e17ffd17 	ldw	r5,-12(fp)
    2db4:	103ee83a 	callr	r2
    2db8:	e0bffe15 	stw	r2,-8(fp)
    2dbc:	00000b06 	br	2dec <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    2dc0:	e0fffd17 	ldw	r3,-12(fp)
    2dc4:	00880004 	movi	r2,8192
    2dc8:	18800115 	stw	r2,4(r3)
      return 0;
    2dcc:	e03ffe15 	stw	zero,-8(fp)
    2dd0:	00000606 	br	2dec <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2dd4:	0002e040 	call	2e04 <alt_get_errno>
    2dd8:	1007883a 	mov	r3,r2
    2ddc:	00801444 	movi	r2,81
    2de0:	18800015 	stw	r2,0(r3)
    return -1;
    2de4:	00bfffc4 	movi	r2,-1
    2de8:	e0bffe15 	stw	r2,-8(fp)
    2dec:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2df0:	e037883a 	mov	sp,fp
    2df4:	dfc00117 	ldw	ra,4(sp)
    2df8:	df000017 	ldw	fp,0(sp)
    2dfc:	dec00204 	addi	sp,sp,8
    2e00:	f800283a 	ret

00002e04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2e04:	defffd04 	addi	sp,sp,-12
    2e08:	dfc00215 	stw	ra,8(sp)
    2e0c:	df000115 	stw	fp,4(sp)
    2e10:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2e14:	00800034 	movhi	r2,0
    2e18:	109c1d04 	addi	r2,r2,28788
    2e1c:	10800017 	ldw	r2,0(r2)
    2e20:	1005003a 	cmpeq	r2,r2,zero
    2e24:	1000061e 	bne	r2,zero,2e40 <alt_get_errno+0x3c>
    2e28:	00800034 	movhi	r2,0
    2e2c:	109c1d04 	addi	r2,r2,28788
    2e30:	10800017 	ldw	r2,0(r2)
    2e34:	103ee83a 	callr	r2
    2e38:	e0bfff15 	stw	r2,-4(fp)
    2e3c:	00000306 	br	2e4c <alt_get_errno+0x48>
    2e40:	00800074 	movhi	r2,1
    2e44:	10a2b704 	addi	r2,r2,-29988
    2e48:	e0bfff15 	stw	r2,-4(fp)
    2e4c:	e0bfff17 	ldw	r2,-4(fp)
}
    2e50:	e037883a 	mov	sp,fp
    2e54:	dfc00117 	ldw	ra,4(sp)
    2e58:	df000017 	ldw	fp,0(sp)
    2e5c:	dec00204 	addi	sp,sp,8
    2e60:	f800283a 	ret

00002e64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    2e64:	deffeb04 	addi	sp,sp,-84
    2e68:	dfc01415 	stw	ra,80(sp)
    2e6c:	df001315 	stw	fp,76(sp)
    2e70:	df001304 	addi	fp,sp,76
    2e74:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2e78:	e0bffd17 	ldw	r2,-12(fp)
    2e7c:	1004803a 	cmplt	r2,r2,zero
    2e80:	1000091e 	bne	r2,zero,2ea8 <isatty+0x44>
    2e84:	e13ffd17 	ldw	r4,-12(fp)
    2e88:	01400304 	movi	r5,12
    2e8c:	0002b680 	call	2b68 <__mulsi3>
    2e90:	1007883a 	mov	r3,r2
    2e94:	00800034 	movhi	r2,0
    2e98:	10979c04 	addi	r2,r2,24176
    2e9c:	1887883a 	add	r3,r3,r2
    2ea0:	e0ffff15 	stw	r3,-4(fp)
    2ea4:	00000106 	br	2eac <isatty+0x48>
    2ea8:	e03fff15 	stw	zero,-4(fp)
    2eac:	e0bfff17 	ldw	r2,-4(fp)
    2eb0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    2eb4:	e0bfed17 	ldw	r2,-76(fp)
    2eb8:	1005003a 	cmpeq	r2,r2,zero
    2ebc:	10000f1e 	bne	r2,zero,2efc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    2ec0:	e0bfed17 	ldw	r2,-76(fp)
    2ec4:	10800017 	ldw	r2,0(r2)
    2ec8:	10800817 	ldw	r2,32(r2)
    2ecc:	1004c03a 	cmpne	r2,r2,zero
    2ed0:	1000031e 	bne	r2,zero,2ee0 <isatty+0x7c>
    {
      return 1;
    2ed4:	00800044 	movi	r2,1
    2ed8:	e0bffe15 	stw	r2,-8(fp)
    2edc:	00000c06 	br	2f10 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    2ee0:	e17fee04 	addi	r5,fp,-72
    2ee4:	e13ffd17 	ldw	r4,-12(fp)
    2ee8:	0002d2c0 	call	2d2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    2eec:	e0bfef17 	ldw	r2,-68(fp)
    2ef0:	10880020 	cmpeqi	r2,r2,8192
    2ef4:	e0bffe15 	stw	r2,-8(fp)
    2ef8:	00000506 	br	2f10 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2efc:	0002f280 	call	2f28 <alt_get_errno>
    2f00:	1007883a 	mov	r3,r2
    2f04:	00801444 	movi	r2,81
    2f08:	18800015 	stw	r2,0(r3)
    return 0;
    2f0c:	e03ffe15 	stw	zero,-8(fp)
    2f10:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    2f14:	e037883a 	mov	sp,fp
    2f18:	dfc00117 	ldw	ra,4(sp)
    2f1c:	df000017 	ldw	fp,0(sp)
    2f20:	dec00204 	addi	sp,sp,8
    2f24:	f800283a 	ret

00002f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f28:	defffd04 	addi	sp,sp,-12
    2f2c:	dfc00215 	stw	ra,8(sp)
    2f30:	df000115 	stw	fp,4(sp)
    2f34:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2f38:	00800034 	movhi	r2,0
    2f3c:	109c1d04 	addi	r2,r2,28788
    2f40:	10800017 	ldw	r2,0(r2)
    2f44:	1005003a 	cmpeq	r2,r2,zero
    2f48:	1000061e 	bne	r2,zero,2f64 <alt_get_errno+0x3c>
    2f4c:	00800034 	movhi	r2,0
    2f50:	109c1d04 	addi	r2,r2,28788
    2f54:	10800017 	ldw	r2,0(r2)
    2f58:	103ee83a 	callr	r2
    2f5c:	e0bfff15 	stw	r2,-4(fp)
    2f60:	00000306 	br	2f70 <alt_get_errno+0x48>
    2f64:	00800074 	movhi	r2,1
    2f68:	10a2b704 	addi	r2,r2,-29988
    2f6c:	e0bfff15 	stw	r2,-4(fp)
    2f70:	e0bfff17 	ldw	r2,-4(fp)
}
    2f74:	e037883a 	mov	sp,fp
    2f78:	dfc00117 	ldw	ra,4(sp)
    2f7c:	df000017 	ldw	fp,0(sp)
    2f80:	dec00204 	addi	sp,sp,8
    2f84:	f800283a 	ret

00002f88 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    2f88:	defffe04 	addi	sp,sp,-8
    2f8c:	dfc00115 	stw	ra,4(sp)
    2f90:	df000015 	stw	fp,0(sp)
    2f94:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    2f98:	01000034 	movhi	r4,0
    2f9c:	211c2204 	addi	r4,r4,28808
    2fa0:	01400034 	movhi	r5,0
    2fa4:	29559004 	addi	r5,r5,22080
    2fa8:	01800034 	movhi	r6,0
    2fac:	319c2204 	addi	r6,r6,28808
    2fb0:	00030080 	call	3008 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    2fb4:	01000034 	movhi	r4,0
    2fb8:	21000804 	addi	r4,r4,32
    2fbc:	01400034 	movhi	r5,0
    2fc0:	29400804 	addi	r5,r5,32
    2fc4:	01800034 	movhi	r6,0
    2fc8:	31806d04 	addi	r6,r6,436
    2fcc:	00030080 	call	3008 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    2fd0:	01000034 	movhi	r4,0
    2fd4:	21157c04 	addi	r4,r4,22000
    2fd8:	01400034 	movhi	r5,0
    2fdc:	29557c04 	addi	r5,r5,22000
    2fe0:	01800034 	movhi	r6,0
    2fe4:	31959004 	addi	r6,r6,22080
    2fe8:	00030080 	call	3008 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    2fec:	00044880 	call	4488 <alt_dcache_flush_all>
  alt_icache_flush_all();
    2ff0:	00046800 	call	4680 <alt_icache_flush_all>
}
    2ff4:	e037883a 	mov	sp,fp
    2ff8:	dfc00117 	ldw	ra,4(sp)
    2ffc:	df000017 	ldw	fp,0(sp)
    3000:	dec00204 	addi	sp,sp,8
    3004:	f800283a 	ret

00003008 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    3008:	defffc04 	addi	sp,sp,-16
    300c:	df000315 	stw	fp,12(sp)
    3010:	df000304 	addi	fp,sp,12
    3014:	e13ffd15 	stw	r4,-12(fp)
    3018:	e17ffe15 	stw	r5,-8(fp)
    301c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    3020:	e0fffe17 	ldw	r3,-8(fp)
    3024:	e0bffd17 	ldw	r2,-12(fp)
    3028:	18800e26 	beq	r3,r2,3064 <alt_load_section+0x5c>
  {
    while( to != end )
    302c:	00000a06 	br	3058 <alt_load_section+0x50>
    {
      *to++ = *from++;
    3030:	e0bffd17 	ldw	r2,-12(fp)
    3034:	10c00017 	ldw	r3,0(r2)
    3038:	e0bffe17 	ldw	r2,-8(fp)
    303c:	10c00015 	stw	r3,0(r2)
    3040:	e0bffe17 	ldw	r2,-8(fp)
    3044:	10800104 	addi	r2,r2,4
    3048:	e0bffe15 	stw	r2,-8(fp)
    304c:	e0bffd17 	ldw	r2,-12(fp)
    3050:	10800104 	addi	r2,r2,4
    3054:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    3058:	e0fffe17 	ldw	r3,-8(fp)
    305c:	e0bfff17 	ldw	r2,-4(fp)
    3060:	18bff31e 	bne	r3,r2,3030 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    3064:	e037883a 	mov	sp,fp
    3068:	df000017 	ldw	fp,0(sp)
    306c:	dec00104 	addi	sp,sp,4
    3070:	f800283a 	ret

00003074 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    3074:	defff804 	addi	sp,sp,-32
    3078:	dfc00715 	stw	ra,28(sp)
    307c:	df000615 	stw	fp,24(sp)
    3080:	df000604 	addi	fp,sp,24
    3084:	e13ffc15 	stw	r4,-16(fp)
    3088:	e17ffd15 	stw	r5,-12(fp)
    308c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    3090:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3094:	e0bffc17 	ldw	r2,-16(fp)
    3098:	1004803a 	cmplt	r2,r2,zero
    309c:	1000091e 	bne	r2,zero,30c4 <lseek+0x50>
    30a0:	e13ffc17 	ldw	r4,-16(fp)
    30a4:	01400304 	movi	r5,12
    30a8:	0002b680 	call	2b68 <__mulsi3>
    30ac:	1007883a 	mov	r3,r2
    30b0:	00800034 	movhi	r2,0
    30b4:	10979c04 	addi	r2,r2,24176
    30b8:	1887883a 	add	r3,r3,r2
    30bc:	e0ffff15 	stw	r3,-4(fp)
    30c0:	00000106 	br	30c8 <lseek+0x54>
    30c4:	e03fff15 	stw	zero,-4(fp)
    30c8:	e0bfff17 	ldw	r2,-4(fp)
    30cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    30d0:	e0bffb17 	ldw	r2,-20(fp)
    30d4:	1005003a 	cmpeq	r2,r2,zero
    30d8:	1000111e 	bne	r2,zero,3120 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    30dc:	e0bffb17 	ldw	r2,-20(fp)
    30e0:	10800017 	ldw	r2,0(r2)
    30e4:	10800717 	ldw	r2,28(r2)
    30e8:	1005003a 	cmpeq	r2,r2,zero
    30ec:	1000091e 	bne	r2,zero,3114 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    30f0:	e0bffb17 	ldw	r2,-20(fp)
    30f4:	10800017 	ldw	r2,0(r2)
    30f8:	10800717 	ldw	r2,28(r2)
    30fc:	e13ffb17 	ldw	r4,-20(fp)
    3100:	e17ffd17 	ldw	r5,-12(fp)
    3104:	e1bffe17 	ldw	r6,-8(fp)
    3108:	103ee83a 	callr	r2
    310c:	e0bffa15 	stw	r2,-24(fp)
    3110:	00000506 	br	3128 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    3114:	00bfde84 	movi	r2,-134
    3118:	e0bffa15 	stw	r2,-24(fp)
    311c:	00000206 	br	3128 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    3120:	00bfebc4 	movi	r2,-81
    3124:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    3128:	e0bffa17 	ldw	r2,-24(fp)
    312c:	1004403a 	cmpge	r2,r2,zero
    3130:	1000071e 	bne	r2,zero,3150 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    3134:	00031680 	call	3168 <alt_get_errno>
    3138:	1007883a 	mov	r3,r2
    313c:	e0bffa17 	ldw	r2,-24(fp)
    3140:	0085c83a 	sub	r2,zero,r2
    3144:	18800015 	stw	r2,0(r3)
    rc = -1;
    3148:	00bfffc4 	movi	r2,-1
    314c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    3150:	e0bffa17 	ldw	r2,-24(fp)
}
    3154:	e037883a 	mov	sp,fp
    3158:	dfc00117 	ldw	ra,4(sp)
    315c:	df000017 	ldw	fp,0(sp)
    3160:	dec00204 	addi	sp,sp,8
    3164:	f800283a 	ret

00003168 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3168:	defffd04 	addi	sp,sp,-12
    316c:	dfc00215 	stw	ra,8(sp)
    3170:	df000115 	stw	fp,4(sp)
    3174:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3178:	00800034 	movhi	r2,0
    317c:	109c1d04 	addi	r2,r2,28788
    3180:	10800017 	ldw	r2,0(r2)
    3184:	1005003a 	cmpeq	r2,r2,zero
    3188:	1000061e 	bne	r2,zero,31a4 <alt_get_errno+0x3c>
    318c:	00800034 	movhi	r2,0
    3190:	109c1d04 	addi	r2,r2,28788
    3194:	10800017 	ldw	r2,0(r2)
    3198:	103ee83a 	callr	r2
    319c:	e0bfff15 	stw	r2,-4(fp)
    31a0:	00000306 	br	31b0 <alt_get_errno+0x48>
    31a4:	00800074 	movhi	r2,1
    31a8:	10a2b704 	addi	r2,r2,-29988
    31ac:	e0bfff15 	stw	r2,-4(fp)
    31b0:	e0bfff17 	ldw	r2,-4(fp)
}
    31b4:	e037883a 	mov	sp,fp
    31b8:	dfc00117 	ldw	ra,4(sp)
    31bc:	df000017 	ldw	fp,0(sp)
    31c0:	dec00204 	addi	sp,sp,8
    31c4:	f800283a 	ret

000031c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    31c8:	defffd04 	addi	sp,sp,-12
    31cc:	dfc00215 	stw	ra,8(sp)
    31d0:	df000115 	stw	fp,4(sp)
    31d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    31d8:	0009883a 	mov	r4,zero
    31dc:	00036b00 	call	36b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    31e0:	00036e40 	call	36e4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    31e4:	01000034 	movhi	r4,0
    31e8:	21158604 	addi	r4,r4,22040
    31ec:	01400034 	movhi	r5,0
    31f0:	29558604 	addi	r5,r5,22040
    31f4:	01800034 	movhi	r6,0
    31f8:	31958604 	addi	r6,r6,22040
    31fc:	0004a400 	call	4a40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    3200:	00045b80 	call	45b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    3204:	01000034 	movhi	r4,0
    3208:	21118704 	addi	r4,r4,17948
    320c:	00051e40 	call	51e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    3210:	d126a417 	ldw	r4,-25968(gp)
    3214:	d166a517 	ldw	r5,-25964(gp)
    3218:	d1a6a617 	ldw	r6,-25960(gp)
    321c:	00001f00 	call	1f0 <main>
    3220:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    3224:	01000044 	movi	r4,1
    3228:	0002ba00 	call	2ba0 <close>
  exit (result);
    322c:	e13fff17 	ldw	r4,-4(fp)
    3230:	00051f80 	call	51f8 <exit>

00003234 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    3234:	defffe04 	addi	sp,sp,-8
    3238:	df000115 	stw	fp,4(sp)
    323c:	df000104 	addi	fp,sp,4
    3240:	e13fff15 	stw	r4,-4(fp)
}
    3244:	e037883a 	mov	sp,fp
    3248:	df000017 	ldw	fp,0(sp)
    324c:	dec00104 	addi	sp,sp,4
    3250:	f800283a 	ret

00003254 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3254:	defffe04 	addi	sp,sp,-8
    3258:	df000115 	stw	fp,4(sp)
    325c:	df000104 	addi	fp,sp,4
    3260:	e13fff15 	stw	r4,-4(fp)
}
    3264:	e037883a 	mov	sp,fp
    3268:	df000017 	ldw	fp,0(sp)
    326c:	dec00104 	addi	sp,sp,4
    3270:	f800283a 	ret

00003274 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    3274:	defff704 	addi	sp,sp,-36
    3278:	dfc00815 	stw	ra,32(sp)
    327c:	df000715 	stw	fp,28(sp)
    3280:	df000704 	addi	fp,sp,28
    3284:	e13ffb15 	stw	r4,-20(fp)
    3288:	e17ffc15 	stw	r5,-16(fp)
    328c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3290:	e0bffb17 	ldw	r2,-20(fp)
    3294:	1004803a 	cmplt	r2,r2,zero
    3298:	1000091e 	bne	r2,zero,32c0 <read+0x4c>
    329c:	e13ffb17 	ldw	r4,-20(fp)
    32a0:	01400304 	movi	r5,12
    32a4:	0002b680 	call	2b68 <__mulsi3>
    32a8:	1007883a 	mov	r3,r2
    32ac:	00800034 	movhi	r2,0
    32b0:	10979c04 	addi	r2,r2,24176
    32b4:	1887883a 	add	r3,r3,r2
    32b8:	e0ffff15 	stw	r3,-4(fp)
    32bc:	00000106 	br	32c4 <read+0x50>
    32c0:	e03fff15 	stw	zero,-4(fp)
    32c4:	e0bfff17 	ldw	r2,-4(fp)
    32c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    32cc:	e0bffa17 	ldw	r2,-24(fp)
    32d0:	1005003a 	cmpeq	r2,r2,zero
    32d4:	1000241e 	bne	r2,zero,3368 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    32d8:	e0bffa17 	ldw	r2,-24(fp)
    32dc:	10800217 	ldw	r2,8(r2)
    32e0:	108000cc 	andi	r2,r2,3
    32e4:	10800060 	cmpeqi	r2,r2,1
    32e8:	10001a1e 	bne	r2,zero,3354 <read+0xe0>
    32ec:	e0bffa17 	ldw	r2,-24(fp)
    32f0:	10800017 	ldw	r2,0(r2)
    32f4:	10800517 	ldw	r2,20(r2)
    32f8:	1005003a 	cmpeq	r2,r2,zero
    32fc:	1000151e 	bne	r2,zero,3354 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    3300:	e0bffa17 	ldw	r2,-24(fp)
    3304:	10800017 	ldw	r2,0(r2)
    3308:	10800517 	ldw	r2,20(r2)
    330c:	e17ffc17 	ldw	r5,-16(fp)
    3310:	e1bffd17 	ldw	r6,-12(fp)
    3314:	e13ffa17 	ldw	r4,-24(fp)
    3318:	103ee83a 	callr	r2
    331c:	e0bff915 	stw	r2,-28(fp)
    3320:	e0bff917 	ldw	r2,-28(fp)
    3324:	1004403a 	cmpge	r2,r2,zero
    3328:	1000071e 	bne	r2,zero,3348 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    332c:	00033980 	call	3398 <alt_get_errno>
    3330:	e0fff917 	ldw	r3,-28(fp)
    3334:	00c7c83a 	sub	r3,zero,r3
    3338:	10c00015 	stw	r3,0(r2)
          return -1;
    333c:	00bfffc4 	movi	r2,-1
    3340:	e0bffe15 	stw	r2,-8(fp)
    3344:	00000e06 	br	3380 <read+0x10c>
        }
        return rval;
    3348:	e0bff917 	ldw	r2,-28(fp)
    334c:	e0bffe15 	stw	r2,-8(fp)
    3350:	00000b06 	br	3380 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    3354:	00033980 	call	3398 <alt_get_errno>
    3358:	1007883a 	mov	r3,r2
    335c:	00800344 	movi	r2,13
    3360:	18800015 	stw	r2,0(r3)
    3364:	00000406 	br	3378 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    3368:	00033980 	call	3398 <alt_get_errno>
    336c:	1007883a 	mov	r3,r2
    3370:	00801444 	movi	r2,81
    3374:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3378:	00bfffc4 	movi	r2,-1
    337c:	e0bffe15 	stw	r2,-8(fp)
    3380:	e0bffe17 	ldw	r2,-8(fp)
}
    3384:	e037883a 	mov	sp,fp
    3388:	dfc00117 	ldw	ra,4(sp)
    338c:	df000017 	ldw	fp,0(sp)
    3390:	dec00204 	addi	sp,sp,8
    3394:	f800283a 	ret

00003398 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3398:	defffd04 	addi	sp,sp,-12
    339c:	dfc00215 	stw	ra,8(sp)
    33a0:	df000115 	stw	fp,4(sp)
    33a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    33a8:	00800034 	movhi	r2,0
    33ac:	109c1d04 	addi	r2,r2,28788
    33b0:	10800017 	ldw	r2,0(r2)
    33b4:	1005003a 	cmpeq	r2,r2,zero
    33b8:	1000061e 	bne	r2,zero,33d4 <alt_get_errno+0x3c>
    33bc:	00800034 	movhi	r2,0
    33c0:	109c1d04 	addi	r2,r2,28788
    33c4:	10800017 	ldw	r2,0(r2)
    33c8:	103ee83a 	callr	r2
    33cc:	e0bfff15 	stw	r2,-4(fp)
    33d0:	00000306 	br	33e0 <alt_get_errno+0x48>
    33d4:	00800074 	movhi	r2,1
    33d8:	10a2b704 	addi	r2,r2,-29988
    33dc:	e0bfff15 	stw	r2,-4(fp)
    33e0:	e0bfff17 	ldw	r2,-4(fp)
}
    33e4:	e037883a 	mov	sp,fp
    33e8:	dfc00117 	ldw	ra,4(sp)
    33ec:	df000017 	ldw	fp,0(sp)
    33f0:	dec00204 	addi	sp,sp,8
    33f4:	f800283a 	ret

000033f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    33f8:	defffc04 	addi	sp,sp,-16
    33fc:	dfc00315 	stw	ra,12(sp)
    3400:	df000215 	stw	fp,8(sp)
    3404:	dc000115 	stw	r16,4(sp)
    3408:	df000104 	addi	fp,sp,4
    340c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    3410:	e0bfff17 	ldw	r2,-4(fp)
    3414:	108000d0 	cmplti	r2,r2,3
    3418:	10000f1e 	bne	r2,zero,3458 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    341c:	e13fff17 	ldw	r4,-4(fp)
    3420:	04000034 	movhi	r16,0
    3424:	84179c04 	addi	r16,r16,24176
    3428:	01400304 	movi	r5,12
    342c:	0002b680 	call	2b68 <__mulsi3>
    3430:	1405883a 	add	r2,r2,r16
    3434:	10800204 	addi	r2,r2,8
    3438:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    343c:	e13fff17 	ldw	r4,-4(fp)
    3440:	04000034 	movhi	r16,0
    3444:	84179c04 	addi	r16,r16,24176
    3448:	01400304 	movi	r5,12
    344c:	0002b680 	call	2b68 <__mulsi3>
    3450:	1405883a 	add	r2,r2,r16
    3454:	10000015 	stw	zero,0(r2)
  }
}
    3458:	e037883a 	mov	sp,fp
    345c:	dfc00217 	ldw	ra,8(sp)
    3460:	df000117 	ldw	fp,4(sp)
    3464:	dc000017 	ldw	r16,0(sp)
    3468:	dec00304 	addi	sp,sp,12
    346c:	f800283a 	ret

00003470 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    3470:	defff804 	addi	sp,sp,-32
    3474:	df000715 	stw	fp,28(sp)
    3478:	df000704 	addi	fp,sp,28
    347c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3480:	0005303a 	rdctl	r2,status
    3484:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3488:	e0fffb17 	ldw	r3,-20(fp)
    348c:	00bfff84 	movi	r2,-2
    3490:	1884703a 	and	r2,r3,r2
    3494:	1001703a 	wrctl	status,r2
  
  return context;
    3498:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    349c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    34a0:	d0a00a17 	ldw	r2,-32728(gp)
    34a4:	10c000c4 	addi	r3,r2,3
    34a8:	00bfff04 	movi	r2,-4
    34ac:	1884703a 	and	r2,r3,r2
    34b0:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    34b4:	d0e00a17 	ldw	r3,-32728(gp)
    34b8:	e0bffe17 	ldw	r2,-8(fp)
    34bc:	1887883a 	add	r3,r3,r2
    34c0:	00802034 	movhi	r2,128
    34c4:	10800004 	addi	r2,r2,0
    34c8:	10c0072e 	bgeu	r2,r3,34e8 <sbrk+0x78>
    34cc:	e0bffd17 	ldw	r2,-12(fp)
    34d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    34d4:	e0bffa17 	ldw	r2,-24(fp)
    34d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    34dc:	00bfffc4 	movi	r2,-1
    34e0:	e0bfff15 	stw	r2,-4(fp)
    34e4:	00000c06 	br	3518 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    34e8:	d0a00a17 	ldw	r2,-32728(gp)
    34ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    34f0:	d0e00a17 	ldw	r3,-32728(gp)
    34f4:	e0bffe17 	ldw	r2,-8(fp)
    34f8:	1885883a 	add	r2,r3,r2
    34fc:	d0a00a15 	stw	r2,-32728(gp)
    3500:	e0bffd17 	ldw	r2,-12(fp)
    3504:	e0bff915 	stw	r2,-28(fp)
    3508:	e0bff917 	ldw	r2,-28(fp)
    350c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    3510:	e0bffc17 	ldw	r2,-16(fp)
    3514:	e0bfff15 	stw	r2,-4(fp)
    3518:	e0bfff17 	ldw	r2,-4(fp)
} 
    351c:	e037883a 	mov	sp,fp
    3520:	df000017 	ldw	fp,0(sp)
    3524:	dec00104 	addi	sp,sp,4
    3528:	f800283a 	ret

0000352c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    352c:	defff704 	addi	sp,sp,-36
    3530:	dfc00815 	stw	ra,32(sp)
    3534:	df000715 	stw	fp,28(sp)
    3538:	df000704 	addi	fp,sp,28
    353c:	e13ffb15 	stw	r4,-20(fp)
    3540:	e17ffc15 	stw	r5,-16(fp)
    3544:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    3548:	e0bffb17 	ldw	r2,-20(fp)
    354c:	1004803a 	cmplt	r2,r2,zero
    3550:	1000091e 	bne	r2,zero,3578 <write+0x4c>
    3554:	e13ffb17 	ldw	r4,-20(fp)
    3558:	01400304 	movi	r5,12
    355c:	0002b680 	call	2b68 <__mulsi3>
    3560:	1007883a 	mov	r3,r2
    3564:	00800034 	movhi	r2,0
    3568:	10979c04 	addi	r2,r2,24176
    356c:	1887883a 	add	r3,r3,r2
    3570:	e0ffff15 	stw	r3,-4(fp)
    3574:	00000106 	br	357c <write+0x50>
    3578:	e03fff15 	stw	zero,-4(fp)
    357c:	e0bfff17 	ldw	r2,-4(fp)
    3580:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    3584:	e0bffa17 	ldw	r2,-24(fp)
    3588:	1005003a 	cmpeq	r2,r2,zero
    358c:	1000241e 	bne	r2,zero,3620 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    3590:	e0bffa17 	ldw	r2,-24(fp)
    3594:	10800217 	ldw	r2,8(r2)
    3598:	108000cc 	andi	r2,r2,3
    359c:	1005003a 	cmpeq	r2,r2,zero
    35a0:	10001a1e 	bne	r2,zero,360c <write+0xe0>
    35a4:	e0bffa17 	ldw	r2,-24(fp)
    35a8:	10800017 	ldw	r2,0(r2)
    35ac:	10800617 	ldw	r2,24(r2)
    35b0:	1005003a 	cmpeq	r2,r2,zero
    35b4:	1000151e 	bne	r2,zero,360c <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    35b8:	e0bffa17 	ldw	r2,-24(fp)
    35bc:	10800017 	ldw	r2,0(r2)
    35c0:	10800617 	ldw	r2,24(r2)
    35c4:	e17ffc17 	ldw	r5,-16(fp)
    35c8:	e1bffd17 	ldw	r6,-12(fp)
    35cc:	e13ffa17 	ldw	r4,-24(fp)
    35d0:	103ee83a 	callr	r2
    35d4:	e0bff915 	stw	r2,-28(fp)
    35d8:	e0bff917 	ldw	r2,-28(fp)
    35dc:	1004403a 	cmpge	r2,r2,zero
    35e0:	1000071e 	bne	r2,zero,3600 <write+0xd4>
      {
        ALT_ERRNO = -rval;
    35e4:	00036500 	call	3650 <alt_get_errno>
    35e8:	e0fff917 	ldw	r3,-28(fp)
    35ec:	00c7c83a 	sub	r3,zero,r3
    35f0:	10c00015 	stw	r3,0(r2)
        return -1;
    35f4:	00bfffc4 	movi	r2,-1
    35f8:	e0bffe15 	stw	r2,-8(fp)
    35fc:	00000e06 	br	3638 <write+0x10c>
      }
      return rval;
    3600:	e0bff917 	ldw	r2,-28(fp)
    3604:	e0bffe15 	stw	r2,-8(fp)
    3608:	00000b06 	br	3638 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    360c:	00036500 	call	3650 <alt_get_errno>
    3610:	1007883a 	mov	r3,r2
    3614:	00800344 	movi	r2,13
    3618:	18800015 	stw	r2,0(r3)
    361c:	00000406 	br	3630 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    3620:	00036500 	call	3650 <alt_get_errno>
    3624:	1007883a 	mov	r3,r2
    3628:	00801444 	movi	r2,81
    362c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    3630:	00bfffc4 	movi	r2,-1
    3634:	e0bffe15 	stw	r2,-8(fp)
    3638:	e0bffe17 	ldw	r2,-8(fp)
}
    363c:	e037883a 	mov	sp,fp
    3640:	dfc00117 	ldw	ra,4(sp)
    3644:	df000017 	ldw	fp,0(sp)
    3648:	dec00204 	addi	sp,sp,8
    364c:	f800283a 	ret

00003650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    3650:	defffd04 	addi	sp,sp,-12
    3654:	dfc00215 	stw	ra,8(sp)
    3658:	df000115 	stw	fp,4(sp)
    365c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    3660:	00800034 	movhi	r2,0
    3664:	109c1d04 	addi	r2,r2,28788
    3668:	10800017 	ldw	r2,0(r2)
    366c:	1005003a 	cmpeq	r2,r2,zero
    3670:	1000061e 	bne	r2,zero,368c <alt_get_errno+0x3c>
    3674:	00800034 	movhi	r2,0
    3678:	109c1d04 	addi	r2,r2,28788
    367c:	10800017 	ldw	r2,0(r2)
    3680:	103ee83a 	callr	r2
    3684:	e0bfff15 	stw	r2,-4(fp)
    3688:	00000306 	br	3698 <alt_get_errno+0x48>
    368c:	00800074 	movhi	r2,1
    3690:	10a2b704 	addi	r2,r2,-29988
    3694:	e0bfff15 	stw	r2,-4(fp)
    3698:	e0bfff17 	ldw	r2,-4(fp)
}
    369c:	e037883a 	mov	sp,fp
    36a0:	dfc00117 	ldw	ra,4(sp)
    36a4:	df000017 	ldw	fp,0(sp)
    36a8:	dec00204 	addi	sp,sp,8
    36ac:	f800283a 	ret

000036b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    36b0:	defffd04 	addi	sp,sp,-12
    36b4:	dfc00215 	stw	ra,8(sp)
    36b8:	df000115 	stw	fp,4(sp)
    36bc:	df000104 	addi	fp,sp,4
    36c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
    36c4:	0004f400 	call	4f40 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    36c8:	00800044 	movi	r2,1
    36cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    36d0:	e037883a 	mov	sp,fp
    36d4:	dfc00117 	ldw	ra,4(sp)
    36d8:	df000017 	ldw	fp,0(sp)
    36dc:	dec00204 	addi	sp,sp,8
    36e0:	f800283a 	ret

000036e4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    36e4:	defffe04 	addi	sp,sp,-8
    36e8:	dfc00115 	stw	ra,4(sp)
    36ec:	df000015 	stw	fp,0(sp)
    36f0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    36f4:	01002274 	movhi	r4,137
    36f8:	21042804 	addi	r4,r4,4256
    36fc:	000b883a 	mov	r5,zero
    3700:	018001c4 	movi	r6,7
    3704:	01c0fa04 	movi	r7,1000
    3708:	00042a40 	call	42a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    370c:	01000034 	movhi	r4,0
    3710:	21180604 	addi	r4,r4,24600
    3714:	000b883a 	mov	r5,zero
    3718:	01800144 	movi	r6,5
    371c:	00038d00 	call	38d0 <altera_avalon_jtag_uart_init>
    3720:	01000034 	movhi	r4,0
    3724:	2117fc04 	addi	r4,r4,24560
    3728:	00037500 	call	3750 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
    372c:	00c02274 	movhi	r3,137
    3730:	18c40004 	addi	r3,r3,4096
    3734:	00800044 	movi	r2,1
    3738:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
    373c:	e037883a 	mov	sp,fp
    3740:	dfc00117 	ldw	ra,4(sp)
    3744:	df000017 	ldw	fp,0(sp)
    3748:	dec00204 	addi	sp,sp,8
    374c:	f800283a 	ret

00003750 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    3750:	defffd04 	addi	sp,sp,-12
    3754:	dfc00215 	stw	ra,8(sp)
    3758:	df000115 	stw	fp,4(sp)
    375c:	df000104 	addi	fp,sp,4
    3760:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    3764:	e13fff17 	ldw	r4,-4(fp)
    3768:	01400034 	movhi	r5,0
    376c:	295c1a04 	addi	r5,r5,28776
    3770:	00044a40 	call	44a4 <alt_dev_llist_insert>
}
    3774:	e037883a 	mov	sp,fp
    3778:	dfc00117 	ldw	ra,4(sp)
    377c:	df000017 	ldw	fp,0(sp)
    3780:	dec00204 	addi	sp,sp,8
    3784:	f800283a 	ret

00003788 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    3788:	defffa04 	addi	sp,sp,-24
    378c:	dfc00515 	stw	ra,20(sp)
    3790:	df000415 	stw	fp,16(sp)
    3794:	df000404 	addi	fp,sp,16
    3798:	e13ffd15 	stw	r4,-12(fp)
    379c:	e17ffe15 	stw	r5,-8(fp)
    37a0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    37a4:	e0bffd17 	ldw	r2,-12(fp)
    37a8:	10800017 	ldw	r2,0(r2)
    37ac:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    37b0:	e0bffc17 	ldw	r2,-16(fp)
    37b4:	11000a04 	addi	r4,r2,40
    37b8:	e0bffd17 	ldw	r2,-12(fp)
    37bc:	11c00217 	ldw	r7,8(r2)
    37c0:	e17ffe17 	ldw	r5,-8(fp)
    37c4:	e1bfff17 	ldw	r6,-4(fp)
    37c8:	0003dd00 	call	3dd0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    37cc:	e037883a 	mov	sp,fp
    37d0:	dfc00117 	ldw	ra,4(sp)
    37d4:	df000017 	ldw	fp,0(sp)
    37d8:	dec00204 	addi	sp,sp,8
    37dc:	f800283a 	ret

000037e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    37e0:	defffa04 	addi	sp,sp,-24
    37e4:	dfc00515 	stw	ra,20(sp)
    37e8:	df000415 	stw	fp,16(sp)
    37ec:	df000404 	addi	fp,sp,16
    37f0:	e13ffd15 	stw	r4,-12(fp)
    37f4:	e17ffe15 	stw	r5,-8(fp)
    37f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    37fc:	e0bffd17 	ldw	r2,-12(fp)
    3800:	10800017 	ldw	r2,0(r2)
    3804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    3808:	e0bffc17 	ldw	r2,-16(fp)
    380c:	11000a04 	addi	r4,r2,40
    3810:	e0bffd17 	ldw	r2,-12(fp)
    3814:	11c00217 	ldw	r7,8(r2)
    3818:	e17ffe17 	ldw	r5,-8(fp)
    381c:	e1bfff17 	ldw	r6,-4(fp)
    3820:	0003ff40 	call	3ff4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    3824:	e037883a 	mov	sp,fp
    3828:	dfc00117 	ldw	ra,4(sp)
    382c:	df000017 	ldw	fp,0(sp)
    3830:	dec00204 	addi	sp,sp,8
    3834:	f800283a 	ret

00003838 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    3838:	defffc04 	addi	sp,sp,-16
    383c:	dfc00315 	stw	ra,12(sp)
    3840:	df000215 	stw	fp,8(sp)
    3844:	df000204 	addi	fp,sp,8
    3848:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    384c:	e0bfff17 	ldw	r2,-4(fp)
    3850:	10800017 	ldw	r2,0(r2)
    3854:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    3858:	e0bffe17 	ldw	r2,-8(fp)
    385c:	11000a04 	addi	r4,r2,40
    3860:	e0bfff17 	ldw	r2,-4(fp)
    3864:	11400217 	ldw	r5,8(r2)
    3868:	0003c680 	call	3c68 <altera_avalon_jtag_uart_close>
}
    386c:	e037883a 	mov	sp,fp
    3870:	dfc00117 	ldw	ra,4(sp)
    3874:	df000017 	ldw	fp,0(sp)
    3878:	dec00204 	addi	sp,sp,8
    387c:	f800283a 	ret

00003880 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    3880:	defffa04 	addi	sp,sp,-24
    3884:	dfc00515 	stw	ra,20(sp)
    3888:	df000415 	stw	fp,16(sp)
    388c:	df000404 	addi	fp,sp,16
    3890:	e13ffd15 	stw	r4,-12(fp)
    3894:	e17ffe15 	stw	r5,-8(fp)
    3898:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    389c:	e0bffd17 	ldw	r2,-12(fp)
    38a0:	10800017 	ldw	r2,0(r2)
    38a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    38a8:	e0bffc17 	ldw	r2,-16(fp)
    38ac:	11000a04 	addi	r4,r2,40
    38b0:	e17ffe17 	ldw	r5,-8(fp)
    38b4:	e1bfff17 	ldw	r6,-4(fp)
    38b8:	0003cdc0 	call	3cdc <altera_avalon_jtag_uart_ioctl>
}
    38bc:	e037883a 	mov	sp,fp
    38c0:	dfc00117 	ldw	ra,4(sp)
    38c4:	df000017 	ldw	fp,0(sp)
    38c8:	dec00204 	addi	sp,sp,8
    38cc:	f800283a 	ret

000038d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    38d0:	defffa04 	addi	sp,sp,-24
    38d4:	dfc00515 	stw	ra,20(sp)
    38d8:	df000415 	stw	fp,16(sp)
    38dc:	df000404 	addi	fp,sp,16
    38e0:	e13ffd15 	stw	r4,-12(fp)
    38e4:	e17ffe15 	stw	r5,-8(fp)
    38e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    38ec:	e0fffd17 	ldw	r3,-12(fp)
    38f0:	00800044 	movi	r2,1
    38f4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    38f8:	e0bffd17 	ldw	r2,-12(fp)
    38fc:	10800017 	ldw	r2,0(r2)
    3900:	11000104 	addi	r4,r2,4
    3904:	e0bffd17 	ldw	r2,-12(fp)
    3908:	10800817 	ldw	r2,32(r2)
    390c:	1007883a 	mov	r3,r2
    3910:	2005883a 	mov	r2,r4
    3914:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    3918:	e13ffe17 	ldw	r4,-8(fp)
    391c:	e17fff17 	ldw	r5,-4(fp)
    3920:	d8000015 	stw	zero,0(sp)
    3924:	01800034 	movhi	r6,0
    3928:	318e6404 	addi	r6,r6,14736
    392c:	e1fffd17 	ldw	r7,-12(fp)
    3930:	000469c0 	call	469c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    3934:	e0bffd17 	ldw	r2,-12(fp)
    3938:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    393c:	e0bffd17 	ldw	r2,-12(fp)
    3940:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    3944:	00800074 	movhi	r2,1
    3948:	10a2bc04 	addi	r2,r2,-29968
    394c:	10800017 	ldw	r2,0(r2)
    3950:	100b883a 	mov	r5,r2
    3954:	01800034 	movhi	r6,0
    3958:	318eee04 	addi	r6,r6,15288
    395c:	e1fffd17 	ldw	r7,-12(fp)
    3960:	00043340 	call	4334 <alt_alarm_start>
    3964:	1004403a 	cmpge	r2,r2,zero
    3968:	1000041e 	bne	r2,zero,397c <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    396c:	e0fffd17 	ldw	r3,-12(fp)
    3970:	00a00034 	movhi	r2,32768
    3974:	10bfffc4 	addi	r2,r2,-1
    3978:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    397c:	e037883a 	mov	sp,fp
    3980:	dfc00117 	ldw	ra,4(sp)
    3984:	df000017 	ldw	fp,0(sp)
    3988:	dec00204 	addi	sp,sp,8
    398c:	f800283a 	ret

00003990 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    3990:	defff804 	addi	sp,sp,-32
    3994:	df000715 	stw	fp,28(sp)
    3998:	df000704 	addi	fp,sp,28
    399c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    39a0:	e0bfff17 	ldw	r2,-4(fp)
    39a4:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    39a8:	e0bffe17 	ldw	r2,-8(fp)
    39ac:	10800017 	ldw	r2,0(r2)
    39b0:	e0bffd15 	stw	r2,-12(fp)
    39b4:	00000006 	br	39b8 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    39b8:	e0bffd17 	ldw	r2,-12(fp)
    39bc:	10800104 	addi	r2,r2,4
    39c0:	10800037 	ldwio	r2,0(r2)
    39c4:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    39c8:	e0bffc17 	ldw	r2,-16(fp)
    39cc:	1080c00c 	andi	r2,r2,768
    39d0:	1005003a 	cmpeq	r2,r2,zero
    39d4:	1000741e 	bne	r2,zero,3ba8 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    39d8:	e0bffc17 	ldw	r2,-16(fp)
    39dc:	1080400c 	andi	r2,r2,256
    39e0:	1005003a 	cmpeq	r2,r2,zero
    39e4:	1000351e 	bne	r2,zero,3abc <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    39e8:	00800074 	movhi	r2,1
    39ec:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    39f0:	e0bffe17 	ldw	r2,-8(fp)
    39f4:	10800a17 	ldw	r2,40(r2)
    39f8:	10800044 	addi	r2,r2,1
    39fc:	1081ffcc 	andi	r2,r2,2047
    3a00:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    3a04:	e0bffe17 	ldw	r2,-8(fp)
    3a08:	10c00b17 	ldw	r3,44(r2)
    3a0c:	e0bffa17 	ldw	r2,-24(fp)
    3a10:	18801626 	beq	r3,r2,3a6c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    3a14:	e0bffd17 	ldw	r2,-12(fp)
    3a18:	10800037 	ldwio	r2,0(r2)
    3a1c:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    3a20:	e0bffb17 	ldw	r2,-20(fp)
    3a24:	10a0000c 	andi	r2,r2,32768
    3a28:	1005003a 	cmpeq	r2,r2,zero
    3a2c:	10000f1e 	bne	r2,zero,3a6c <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    3a30:	e0bffe17 	ldw	r2,-8(fp)
    3a34:	10c00a17 	ldw	r3,40(r2)
    3a38:	e0bffb17 	ldw	r2,-20(fp)
    3a3c:	1009883a 	mov	r4,r2
    3a40:	e0bffe17 	ldw	r2,-8(fp)
    3a44:	1885883a 	add	r2,r3,r2
    3a48:	10800e04 	addi	r2,r2,56
    3a4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3a50:	e0bffe17 	ldw	r2,-8(fp)
    3a54:	10800a17 	ldw	r2,40(r2)
    3a58:	10800044 	addi	r2,r2,1
    3a5c:	10c1ffcc 	andi	r3,r2,2047
    3a60:	e0bffe17 	ldw	r2,-8(fp)
    3a64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    3a68:	003fe106 	br	39f0 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    3a6c:	e0bffb17 	ldw	r2,-20(fp)
    3a70:	10bfffec 	andhi	r2,r2,65535
    3a74:	1005003a 	cmpeq	r2,r2,zero
    3a78:	1000101e 	bne	r2,zero,3abc <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3a7c:	e0bffe17 	ldw	r2,-8(fp)
    3a80:	10c00817 	ldw	r3,32(r2)
    3a84:	00bfff84 	movi	r2,-2
    3a88:	1886703a 	and	r3,r3,r2
    3a8c:	e0bffe17 	ldw	r2,-8(fp)
    3a90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    3a94:	e0bffd17 	ldw	r2,-12(fp)
    3a98:	11000104 	addi	r4,r2,4
    3a9c:	e0bffe17 	ldw	r2,-8(fp)
    3aa0:	10800817 	ldw	r2,32(r2)
    3aa4:	1007883a 	mov	r3,r2
    3aa8:	2005883a 	mov	r2,r4
    3aac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3ab0:	e0bffd17 	ldw	r2,-12(fp)
    3ab4:	10800104 	addi	r2,r2,4
    3ab8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    3abc:	e0bffc17 	ldw	r2,-16(fp)
    3ac0:	1080800c 	andi	r2,r2,512
    3ac4:	1005003a 	cmpeq	r2,r2,zero
    3ac8:	103fbb1e 	bne	r2,zero,39b8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    3acc:	e0bffc17 	ldw	r2,-16(fp)
    3ad0:	10bfffec 	andhi	r2,r2,65535
    3ad4:	1004d43a 	srli	r2,r2,16
    3ad8:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    3adc:	00001506 	br	3b34 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    3ae0:	e13ffd17 	ldw	r4,-12(fp)
    3ae4:	e0bffe17 	ldw	r2,-8(fp)
    3ae8:	10c00d17 	ldw	r3,52(r2)
    3aec:	e0bffe17 	ldw	r2,-8(fp)
    3af0:	1885883a 	add	r2,r3,r2
    3af4:	10820e04 	addi	r2,r2,2104
    3af8:	10800003 	ldbu	r2,0(r2)
    3afc:	10c03fcc 	andi	r3,r2,255
    3b00:	18c0201c 	xori	r3,r3,128
    3b04:	18ffe004 	addi	r3,r3,-128
    3b08:	2005883a 	mov	r2,r4
    3b0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3b10:	e0bffe17 	ldw	r2,-8(fp)
    3b14:	10800d17 	ldw	r2,52(r2)
    3b18:	10800044 	addi	r2,r2,1
    3b1c:	10c1ffcc 	andi	r3,r2,2047
    3b20:	e0bffe17 	ldw	r2,-8(fp)
    3b24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    3b28:	e0bff917 	ldw	r2,-28(fp)
    3b2c:	10bfffc4 	addi	r2,r2,-1
    3b30:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    3b34:	e0bff917 	ldw	r2,-28(fp)
    3b38:	1005003a 	cmpeq	r2,r2,zero
    3b3c:	1000051e 	bne	r2,zero,3b54 <altera_avalon_jtag_uart_irq+0x1c4>
    3b40:	e0bffe17 	ldw	r2,-8(fp)
    3b44:	10c00d17 	ldw	r3,52(r2)
    3b48:	e0bffe17 	ldw	r2,-8(fp)
    3b4c:	10800c17 	ldw	r2,48(r2)
    3b50:	18bfe31e 	bne	r3,r2,3ae0 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    3b54:	e0bff917 	ldw	r2,-28(fp)
    3b58:	1005003a 	cmpeq	r2,r2,zero
    3b5c:	103f961e 	bne	r2,zero,39b8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    3b60:	e0bffe17 	ldw	r2,-8(fp)
    3b64:	10c00817 	ldw	r3,32(r2)
    3b68:	00bfff44 	movi	r2,-3
    3b6c:	1886703a 	and	r3,r3,r2
    3b70:	e0bffe17 	ldw	r2,-8(fp)
    3b74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3b78:	e0bffe17 	ldw	r2,-8(fp)
    3b7c:	10800017 	ldw	r2,0(r2)
    3b80:	11000104 	addi	r4,r2,4
    3b84:	e0bffe17 	ldw	r2,-8(fp)
    3b88:	10800817 	ldw	r2,32(r2)
    3b8c:	1007883a 	mov	r3,r2
    3b90:	2005883a 	mov	r2,r4
    3b94:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    3b98:	e0bffd17 	ldw	r2,-12(fp)
    3b9c:	10800104 	addi	r2,r2,4
    3ba0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    3ba4:	003f8406 	br	39b8 <altera_avalon_jtag_uart_irq+0x28>
}
    3ba8:	e037883a 	mov	sp,fp
    3bac:	df000017 	ldw	fp,0(sp)
    3bb0:	dec00104 	addi	sp,sp,4
    3bb4:	f800283a 	ret

00003bb8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    3bb8:	defffc04 	addi	sp,sp,-16
    3bbc:	df000315 	stw	fp,12(sp)
    3bc0:	df000304 	addi	fp,sp,12
    3bc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    3bc8:	e0bfff17 	ldw	r2,-4(fp)
    3bcc:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    3bd0:	e0bffe17 	ldw	r2,-8(fp)
    3bd4:	10800017 	ldw	r2,0(r2)
    3bd8:	10800104 	addi	r2,r2,4
    3bdc:	10800037 	ldwio	r2,0(r2)
    3be0:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    3be4:	e0bffd17 	ldw	r2,-12(fp)
    3be8:	1081000c 	andi	r2,r2,1024
    3bec:	1005003a 	cmpeq	r2,r2,zero
    3bf0:	10000c1e 	bne	r2,zero,3c24 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    3bf4:	e0bffe17 	ldw	r2,-8(fp)
    3bf8:	10800017 	ldw	r2,0(r2)
    3bfc:	11000104 	addi	r4,r2,4
    3c00:	e0bffe17 	ldw	r2,-8(fp)
    3c04:	10800817 	ldw	r2,32(r2)
    3c08:	10810014 	ori	r2,r2,1024
    3c0c:	1007883a 	mov	r3,r2
    3c10:	2005883a 	mov	r2,r4
    3c14:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    3c18:	e0bffe17 	ldw	r2,-8(fp)
    3c1c:	10000915 	stw	zero,36(r2)
    3c20:	00000a06 	br	3c4c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    3c24:	e0bffe17 	ldw	r2,-8(fp)
    3c28:	10c00917 	ldw	r3,36(r2)
    3c2c:	00a00034 	movhi	r2,32768
    3c30:	10bfff04 	addi	r2,r2,-4
    3c34:	10c00536 	bltu	r2,r3,3c4c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    3c38:	e0bffe17 	ldw	r2,-8(fp)
    3c3c:	10800917 	ldw	r2,36(r2)
    3c40:	10c00044 	addi	r3,r2,1
    3c44:	e0bffe17 	ldw	r2,-8(fp)
    3c48:	10c00915 	stw	r3,36(r2)
    3c4c:	00800074 	movhi	r2,1
    3c50:	10a2bc04 	addi	r2,r2,-29968
    3c54:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    3c58:	e037883a 	mov	sp,fp
    3c5c:	df000017 	ldw	fp,0(sp)
    3c60:	dec00104 	addi	sp,sp,4
    3c64:	f800283a 	ret

00003c68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    3c68:	defffc04 	addi	sp,sp,-16
    3c6c:	df000315 	stw	fp,12(sp)
    3c70:	df000304 	addi	fp,sp,12
    3c74:	e13ffd15 	stw	r4,-12(fp)
    3c78:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    3c7c:	00000706 	br	3c9c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    3c80:	e0bffe17 	ldw	r2,-8(fp)
    3c84:	1090000c 	andi	r2,r2,16384
    3c88:	1005003a 	cmpeq	r2,r2,zero
    3c8c:	1000031e 	bne	r2,zero,3c9c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    3c90:	00bffd44 	movi	r2,-11
    3c94:	e0bfff15 	stw	r2,-4(fp)
    3c98:	00000b06 	br	3cc8 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    3c9c:	e0bffd17 	ldw	r2,-12(fp)
    3ca0:	10c00d17 	ldw	r3,52(r2)
    3ca4:	e0bffd17 	ldw	r2,-12(fp)
    3ca8:	10800c17 	ldw	r2,48(r2)
    3cac:	18800526 	beq	r3,r2,3cc4 <altera_avalon_jtag_uart_close+0x5c>
    3cb0:	e0bffd17 	ldw	r2,-12(fp)
    3cb4:	10c00917 	ldw	r3,36(r2)
    3cb8:	e0bffd17 	ldw	r2,-12(fp)
    3cbc:	10800117 	ldw	r2,4(r2)
    3cc0:	18bfef36 	bltu	r3,r2,3c80 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    3cc4:	e03fff15 	stw	zero,-4(fp)
    3cc8:	e0bfff17 	ldw	r2,-4(fp)
}
    3ccc:	e037883a 	mov	sp,fp
    3cd0:	df000017 	ldw	fp,0(sp)
    3cd4:	dec00104 	addi	sp,sp,4
    3cd8:	f800283a 	ret

00003cdc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    3cdc:	defff804 	addi	sp,sp,-32
    3ce0:	df000715 	stw	fp,28(sp)
    3ce4:	df000704 	addi	fp,sp,28
    3ce8:	e13ffb15 	stw	r4,-20(fp)
    3cec:	e17ffc15 	stw	r5,-16(fp)
    3cf0:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    3cf4:	00bff9c4 	movi	r2,-25
    3cf8:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    3cfc:	e0bffc17 	ldw	r2,-16(fp)
    3d00:	e0bfff15 	stw	r2,-4(fp)
    3d04:	e0ffff17 	ldw	r3,-4(fp)
    3d08:	189a8060 	cmpeqi	r2,r3,27137
    3d0c:	1000041e 	bne	r2,zero,3d20 <altera_avalon_jtag_uart_ioctl+0x44>
    3d10:	e0ffff17 	ldw	r3,-4(fp)
    3d14:	189a80a0 	cmpeqi	r2,r3,27138
    3d18:	10001b1e 	bne	r2,zero,3d88 <altera_avalon_jtag_uart_ioctl+0xac>
    3d1c:	00002706 	br	3dbc <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    3d20:	e0bffb17 	ldw	r2,-20(fp)
    3d24:	10c00117 	ldw	r3,4(r2)
    3d28:	00a00034 	movhi	r2,32768
    3d2c:	10bfffc4 	addi	r2,r2,-1
    3d30:	18802226 	beq	r3,r2,3dbc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    3d34:	e0bffd17 	ldw	r2,-12(fp)
    3d38:	10800017 	ldw	r2,0(r2)
    3d3c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    3d40:	e0bff917 	ldw	r2,-28(fp)
    3d44:	10800090 	cmplti	r2,r2,2
    3d48:	1000071e 	bne	r2,zero,3d68 <altera_avalon_jtag_uart_ioctl+0x8c>
    3d4c:	e0fff917 	ldw	r3,-28(fp)
    3d50:	00a00034 	movhi	r2,32768
    3d54:	10bfffc4 	addi	r2,r2,-1
    3d58:	18800326 	beq	r3,r2,3d68 <altera_avalon_jtag_uart_ioctl+0x8c>
    3d5c:	e0bff917 	ldw	r2,-28(fp)
    3d60:	e0bffe15 	stw	r2,-8(fp)
    3d64:	00000306 	br	3d74 <altera_avalon_jtag_uart_ioctl+0x98>
    3d68:	00e00034 	movhi	r3,32768
    3d6c:	18ffff84 	addi	r3,r3,-2
    3d70:	e0fffe15 	stw	r3,-8(fp)
    3d74:	e0bffb17 	ldw	r2,-20(fp)
    3d78:	e0fffe17 	ldw	r3,-8(fp)
    3d7c:	10c00115 	stw	r3,4(r2)
      rc = 0;
    3d80:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    3d84:	00000d06 	br	3dbc <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    3d88:	e0bffb17 	ldw	r2,-20(fp)
    3d8c:	10c00117 	ldw	r3,4(r2)
    3d90:	00a00034 	movhi	r2,32768
    3d94:	10bfffc4 	addi	r2,r2,-1
    3d98:	18800826 	beq	r3,r2,3dbc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    3d9c:	e13ffd17 	ldw	r4,-12(fp)
    3da0:	e0bffb17 	ldw	r2,-20(fp)
    3da4:	10c00917 	ldw	r3,36(r2)
    3da8:	e0bffb17 	ldw	r2,-20(fp)
    3dac:	10800117 	ldw	r2,4(r2)
    3db0:	1885803a 	cmpltu	r2,r3,r2
    3db4:	20800015 	stw	r2,0(r4)
      rc = 0;
    3db8:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    3dbc:	e0bffa17 	ldw	r2,-24(fp)
}
    3dc0:	e037883a 	mov	sp,fp
    3dc4:	df000017 	ldw	fp,0(sp)
    3dc8:	dec00104 	addi	sp,sp,4
    3dcc:	f800283a 	ret

00003dd0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    3dd0:	defff204 	addi	sp,sp,-56
    3dd4:	dfc00d15 	stw	ra,52(sp)
    3dd8:	df000c15 	stw	fp,48(sp)
    3ddc:	df000c04 	addi	fp,sp,48
    3de0:	e13ffb15 	stw	r4,-20(fp)
    3de4:	e17ffc15 	stw	r5,-16(fp)
    3de8:	e1bffd15 	stw	r6,-12(fp)
    3dec:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    3df0:	e0bffc17 	ldw	r2,-16(fp)
    3df4:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    3df8:	00004806 	br	3f1c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    3dfc:	e0bffb17 	ldw	r2,-20(fp)
    3e00:	10800a17 	ldw	r2,40(r2)
    3e04:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    3e08:	e0bffb17 	ldw	r2,-20(fp)
    3e0c:	10800b17 	ldw	r2,44(r2)
    3e10:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    3e14:	e0fff717 	ldw	r3,-36(fp)
    3e18:	e0bff617 	ldw	r2,-40(fp)
    3e1c:	18800536 	bltu	r3,r2,3e34 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    3e20:	e0bff717 	ldw	r2,-36(fp)
    3e24:	e0fff617 	ldw	r3,-40(fp)
    3e28:	10c5c83a 	sub	r2,r2,r3
    3e2c:	e0bff815 	stw	r2,-32(fp)
    3e30:	00000406 	br	3e44 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    3e34:	00820004 	movi	r2,2048
    3e38:	e0fff617 	ldw	r3,-40(fp)
    3e3c:	10c5c83a 	sub	r2,r2,r3
    3e40:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    3e44:	e0bff817 	ldw	r2,-32(fp)
    3e48:	1005003a 	cmpeq	r2,r2,zero
    3e4c:	10001f1e 	bne	r2,zero,3ecc <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    3e50:	e0fffd17 	ldw	r3,-12(fp)
    3e54:	e0bff817 	ldw	r2,-32(fp)
    3e58:	1880022e 	bgeu	r3,r2,3e64 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    3e5c:	e0bffd17 	ldw	r2,-12(fp)
    3e60:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    3e64:	e0bffb17 	ldw	r2,-20(fp)
    3e68:	10c00e04 	addi	r3,r2,56
    3e6c:	e0bff617 	ldw	r2,-40(fp)
    3e70:	1887883a 	add	r3,r3,r2
    3e74:	e0bffa17 	ldw	r2,-24(fp)
    3e78:	1009883a 	mov	r4,r2
    3e7c:	180b883a 	mov	r5,r3
    3e80:	e1bff817 	ldw	r6,-32(fp)
    3e84:	000100c0 	call	100c <memcpy>
      ptr   += n;
    3e88:	e0fff817 	ldw	r3,-32(fp)
    3e8c:	e0bffa17 	ldw	r2,-24(fp)
    3e90:	10c5883a 	add	r2,r2,r3
    3e94:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    3e98:	e0fffd17 	ldw	r3,-12(fp)
    3e9c:	e0bff817 	ldw	r2,-32(fp)
    3ea0:	1885c83a 	sub	r2,r3,r2
    3ea4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    3ea8:	e0fff617 	ldw	r3,-40(fp)
    3eac:	e0bff817 	ldw	r2,-32(fp)
    3eb0:	1885883a 	add	r2,r3,r2
    3eb4:	10c1ffcc 	andi	r3,r2,2047
    3eb8:	e0bffb17 	ldw	r2,-20(fp)
    3ebc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    3ec0:	e0bffd17 	ldw	r2,-12(fp)
    3ec4:	10800048 	cmpgei	r2,r2,1
    3ec8:	103fcc1e 	bne	r2,zero,3dfc <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    3ecc:	e0fffa17 	ldw	r3,-24(fp)
    3ed0:	e0bffc17 	ldw	r2,-16(fp)
    3ed4:	1880141e 	bne	r3,r2,3f28 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    3ed8:	e0bffe17 	ldw	r2,-8(fp)
    3edc:	1090000c 	andi	r2,r2,16384
    3ee0:	1004c03a 	cmpne	r2,r2,zero
    3ee4:	1000101e 	bne	r2,zero,3f28 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    3ee8:	e0bffb17 	ldw	r2,-20(fp)
    3eec:	10c00a17 	ldw	r3,40(r2)
    3ef0:	e0bff717 	ldw	r2,-36(fp)
    3ef4:	1880051e 	bne	r3,r2,3f0c <altera_avalon_jtag_uart_read+0x13c>
    3ef8:	e0bffb17 	ldw	r2,-20(fp)
    3efc:	10c00917 	ldw	r3,36(r2)
    3f00:	e0bffb17 	ldw	r2,-20(fp)
    3f04:	10800117 	ldw	r2,4(r2)
    3f08:	18bff736 	bltu	r3,r2,3ee8 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    3f0c:	e0bffb17 	ldw	r2,-20(fp)
    3f10:	10c00a17 	ldw	r3,40(r2)
    3f14:	e0bff717 	ldw	r2,-36(fp)
    3f18:	18800326 	beq	r3,r2,3f28 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    3f1c:	e0bffd17 	ldw	r2,-12(fp)
    3f20:	10800048 	cmpgei	r2,r2,1
    3f24:	103fb51e 	bne	r2,zero,3dfc <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    3f28:	e0fffa17 	ldw	r3,-24(fp)
    3f2c:	e0bffc17 	ldw	r2,-16(fp)
    3f30:	18801926 	beq	r3,r2,3f98 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3f34:	0005303a 	rdctl	r2,status
    3f38:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3f3c:	e0fff517 	ldw	r3,-44(fp)
    3f40:	00bfff84 	movi	r2,-2
    3f44:	1884703a 	and	r2,r3,r2
    3f48:	1001703a 	wrctl	status,r2
  
  return context;
    3f4c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    3f50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    3f54:	e0bffb17 	ldw	r2,-20(fp)
    3f58:	10800817 	ldw	r2,32(r2)
    3f5c:	10c00054 	ori	r3,r2,1
    3f60:	e0bffb17 	ldw	r2,-20(fp)
    3f64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    3f68:	e0bffb17 	ldw	r2,-20(fp)
    3f6c:	10800017 	ldw	r2,0(r2)
    3f70:	11000104 	addi	r4,r2,4
    3f74:	e0bffb17 	ldw	r2,-20(fp)
    3f78:	10800817 	ldw	r2,32(r2)
    3f7c:	1007883a 	mov	r3,r2
    3f80:	2005883a 	mov	r2,r4
    3f84:	10c00035 	stwio	r3,0(r2)
    3f88:	e0bff917 	ldw	r2,-28(fp)
    3f8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3f90:	e0bff417 	ldw	r2,-48(fp)
    3f94:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    3f98:	e0fffa17 	ldw	r3,-24(fp)
    3f9c:	e0bffc17 	ldw	r2,-16(fp)
    3fa0:	18800526 	beq	r3,r2,3fb8 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    3fa4:	e0fffa17 	ldw	r3,-24(fp)
    3fa8:	e0bffc17 	ldw	r2,-16(fp)
    3fac:	1887c83a 	sub	r3,r3,r2
    3fb0:	e0ffff15 	stw	r3,-4(fp)
    3fb4:	00000906 	br	3fdc <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    3fb8:	e0bffe17 	ldw	r2,-8(fp)
    3fbc:	1090000c 	andi	r2,r2,16384
    3fc0:	1005003a 	cmpeq	r2,r2,zero
    3fc4:	1000031e 	bne	r2,zero,3fd4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    3fc8:	00bffd44 	movi	r2,-11
    3fcc:	e0bfff15 	stw	r2,-4(fp)
    3fd0:	00000206 	br	3fdc <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    3fd4:	00bffec4 	movi	r2,-5
    3fd8:	e0bfff15 	stw	r2,-4(fp)
    3fdc:	e0bfff17 	ldw	r2,-4(fp)
}
    3fe0:	e037883a 	mov	sp,fp
    3fe4:	dfc00117 	ldw	ra,4(sp)
    3fe8:	df000017 	ldw	fp,0(sp)
    3fec:	dec00204 	addi	sp,sp,8
    3ff0:	f800283a 	ret

00003ff4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    3ff4:	defff204 	addi	sp,sp,-56
    3ff8:	dfc00d15 	stw	ra,52(sp)
    3ffc:	df000c15 	stw	fp,48(sp)
    4000:	df000c04 	addi	fp,sp,48
    4004:	e13ffb15 	stw	r4,-20(fp)
    4008:	e17ffc15 	stw	r5,-16(fp)
    400c:	e1bffd15 	stw	r6,-12(fp)
    4010:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    4014:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    4018:	e0bffc17 	ldw	r2,-16(fp)
    401c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    4020:	00003a06 	br	410c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    4024:	e0bffb17 	ldw	r2,-20(fp)
    4028:	10800c17 	ldw	r2,48(r2)
    402c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    4030:	e0bffb17 	ldw	r2,-20(fp)
    4034:	10800d17 	ldw	r2,52(r2)
    4038:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    403c:	e0fffa17 	ldw	r3,-24(fp)
    4040:	e0bff917 	ldw	r2,-28(fp)
    4044:	1880062e 	bgeu	r3,r2,4060 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    4048:	e0fff917 	ldw	r3,-28(fp)
    404c:	e0bffa17 	ldw	r2,-24(fp)
    4050:	1885c83a 	sub	r2,r3,r2
    4054:	10bfffc4 	addi	r2,r2,-1
    4058:	e0bff815 	stw	r2,-32(fp)
    405c:	00000c06 	br	4090 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    4060:	e0bff917 	ldw	r2,-28(fp)
    4064:	1005003a 	cmpeq	r2,r2,zero
    4068:	1000051e 	bne	r2,zero,4080 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    406c:	00820004 	movi	r2,2048
    4070:	e0fffa17 	ldw	r3,-24(fp)
    4074:	10c5c83a 	sub	r2,r2,r3
    4078:	e0bff815 	stw	r2,-32(fp)
    407c:	00000406 	br	4090 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    4080:	0081ffc4 	movi	r2,2047
    4084:	e0fffa17 	ldw	r3,-24(fp)
    4088:	10c5c83a 	sub	r2,r2,r3
    408c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    4090:	e0bff817 	ldw	r2,-32(fp)
    4094:	1005003a 	cmpeq	r2,r2,zero
    4098:	10001f1e 	bne	r2,zero,4118 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    409c:	e0fffd17 	ldw	r3,-12(fp)
    40a0:	e0bff817 	ldw	r2,-32(fp)
    40a4:	1880022e 	bgeu	r3,r2,40b0 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    40a8:	e0bffd17 	ldw	r2,-12(fp)
    40ac:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    40b0:	e0bffb17 	ldw	r2,-20(fp)
    40b4:	10c20e04 	addi	r3,r2,2104
    40b8:	e0bffa17 	ldw	r2,-24(fp)
    40bc:	1885883a 	add	r2,r3,r2
    40c0:	e0fffc17 	ldw	r3,-16(fp)
    40c4:	1009883a 	mov	r4,r2
    40c8:	180b883a 	mov	r5,r3
    40cc:	e1bff817 	ldw	r6,-32(fp)
    40d0:	000100c0 	call	100c <memcpy>
      ptr   += n;
    40d4:	e0fff817 	ldw	r3,-32(fp)
    40d8:	e0bffc17 	ldw	r2,-16(fp)
    40dc:	10c5883a 	add	r2,r2,r3
    40e0:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    40e4:	e0fffd17 	ldw	r3,-12(fp)
    40e8:	e0bff817 	ldw	r2,-32(fp)
    40ec:	1885c83a 	sub	r2,r3,r2
    40f0:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    40f4:	e0fffa17 	ldw	r3,-24(fp)
    40f8:	e0bff817 	ldw	r2,-32(fp)
    40fc:	1885883a 	add	r2,r3,r2
    4100:	10c1ffcc 	andi	r3,r2,2047
    4104:	e0bffb17 	ldw	r2,-20(fp)
    4108:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    410c:	e0bffd17 	ldw	r2,-12(fp)
    4110:	10800048 	cmpgei	r2,r2,1
    4114:	103fc31e 	bne	r2,zero,4024 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4118:	0005303a 	rdctl	r2,status
    411c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4120:	e0fff517 	ldw	r3,-44(fp)
    4124:	00bfff84 	movi	r2,-2
    4128:	1884703a 	and	r2,r3,r2
    412c:	1001703a 	wrctl	status,r2
  
  return context;
    4130:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    4134:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    4138:	e0bffb17 	ldw	r2,-20(fp)
    413c:	10800817 	ldw	r2,32(r2)
    4140:	10c00094 	ori	r3,r2,2
    4144:	e0bffb17 	ldw	r2,-20(fp)
    4148:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    414c:	e0bffb17 	ldw	r2,-20(fp)
    4150:	10800017 	ldw	r2,0(r2)
    4154:	11000104 	addi	r4,r2,4
    4158:	e0bffb17 	ldw	r2,-20(fp)
    415c:	10800817 	ldw	r2,32(r2)
    4160:	1007883a 	mov	r3,r2
    4164:	2005883a 	mov	r2,r4
    4168:	10c00035 	stwio	r3,0(r2)
    416c:	e0bff717 	ldw	r2,-36(fp)
    4170:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4174:	e0bff417 	ldw	r2,-48(fp)
    4178:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    417c:	e0bffd17 	ldw	r2,-12(fp)
    4180:	10800050 	cmplti	r2,r2,1
    4184:	1000111e 	bne	r2,zero,41cc <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    4188:	e0bffe17 	ldw	r2,-8(fp)
    418c:	1090000c 	andi	r2,r2,16384
    4190:	1004c03a 	cmpne	r2,r2,zero
    4194:	1000101e 	bne	r2,zero,41d8 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    4198:	e0bffb17 	ldw	r2,-20(fp)
    419c:	10c00d17 	ldw	r3,52(r2)
    41a0:	e0bff917 	ldw	r2,-28(fp)
    41a4:	1880051e 	bne	r3,r2,41bc <altera_avalon_jtag_uart_write+0x1c8>
    41a8:	e0bffb17 	ldw	r2,-20(fp)
    41ac:	10c00917 	ldw	r3,36(r2)
    41b0:	e0bffb17 	ldw	r2,-20(fp)
    41b4:	10800117 	ldw	r2,4(r2)
    41b8:	18bff736 	bltu	r3,r2,4198 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    41bc:	e0bffb17 	ldw	r2,-20(fp)
    41c0:	10c00d17 	ldw	r3,52(r2)
    41c4:	e0bff917 	ldw	r2,-28(fp)
    41c8:	18800326 	beq	r3,r2,41d8 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    41cc:	e0bffd17 	ldw	r2,-12(fp)
    41d0:	10800048 	cmpgei	r2,r2,1
    41d4:	103fcd1e 	bne	r2,zero,410c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    41d8:	e0fffc17 	ldw	r3,-16(fp)
    41dc:	e0bff617 	ldw	r2,-40(fp)
    41e0:	18800526 	beq	r3,r2,41f8 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    41e4:	e0fffc17 	ldw	r3,-16(fp)
    41e8:	e0bff617 	ldw	r2,-40(fp)
    41ec:	1887c83a 	sub	r3,r3,r2
    41f0:	e0ffff15 	stw	r3,-4(fp)
    41f4:	00000906 	br	421c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    41f8:	e0bffe17 	ldw	r2,-8(fp)
    41fc:	1090000c 	andi	r2,r2,16384
    4200:	1005003a 	cmpeq	r2,r2,zero
    4204:	1000031e 	bne	r2,zero,4214 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    4208:	00bffd44 	movi	r2,-11
    420c:	e0bfff15 	stw	r2,-4(fp)
    4210:	00000206 	br	421c <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    4214:	00bffec4 	movi	r2,-5
    4218:	e0bfff15 	stw	r2,-4(fp)
    421c:	e0bfff17 	ldw	r2,-4(fp)
}
    4220:	e037883a 	mov	sp,fp
    4224:	dfc00117 	ldw	ra,4(sp)
    4228:	df000017 	ldw	fp,0(sp)
    422c:	dec00204 	addi	sp,sp,8
    4230:	f800283a 	ret

00004234 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    4234:	defffa04 	addi	sp,sp,-24
    4238:	dfc00515 	stw	ra,20(sp)
    423c:	df000415 	stw	fp,16(sp)
    4240:	df000404 	addi	fp,sp,16
    4244:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    4248:	e0bfff17 	ldw	r2,-4(fp)
    424c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    4250:	e0bfff17 	ldw	r2,-4(fp)
    4254:	10800104 	addi	r2,r2,4
    4258:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    425c:	0005303a 	rdctl	r2,status
    4260:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4264:	e0fffd17 	ldw	r3,-12(fp)
    4268:	00bfff84 	movi	r2,-2
    426c:	1884703a 	and	r2,r3,r2
    4270:	1001703a 	wrctl	status,r2
  
  return context;
    4274:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    4278:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    427c:	0004e340 	call	4e34 <alt_tick>
    4280:	e0bffe17 	ldw	r2,-8(fp)
    4284:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4288:	e0bffc17 	ldw	r2,-16(fp)
    428c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    4290:	e037883a 	mov	sp,fp
    4294:	dfc00117 	ldw	ra,4(sp)
    4298:	df000017 	ldw	fp,0(sp)
    429c:	dec00204 	addi	sp,sp,8
    42a0:	f800283a 	ret

000042a4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    42a4:	defff804 	addi	sp,sp,-32
    42a8:	dfc00715 	stw	ra,28(sp)
    42ac:	df000615 	stw	fp,24(sp)
    42b0:	df000604 	addi	fp,sp,24
    42b4:	e13ffc15 	stw	r4,-16(fp)
    42b8:	e17ffd15 	stw	r5,-12(fp)
    42bc:	e1bffe15 	stw	r6,-8(fp)
    42c0:	e1ffff15 	stw	r7,-4(fp)
    42c4:	e0bfff17 	ldw	r2,-4(fp)
    42c8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    42cc:	00800074 	movhi	r2,1
    42d0:	10a2bc04 	addi	r2,r2,-29968
    42d4:	10800017 	ldw	r2,0(r2)
    42d8:	1004c03a 	cmpne	r2,r2,zero
    42dc:	1000041e 	bne	r2,zero,42f0 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    42e0:	00c00074 	movhi	r3,1
    42e4:	18e2bc04 	addi	r3,r3,-29968
    42e8:	e0bffb17 	ldw	r2,-20(fp)
    42ec:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    42f0:	e0bffc17 	ldw	r2,-16(fp)
    42f4:	10800104 	addi	r2,r2,4
    42f8:	1007883a 	mov	r3,r2
    42fc:	008001c4 	movi	r2,7
    4300:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    4304:	d8000015 	stw	zero,0(sp)
    4308:	e13ffd17 	ldw	r4,-12(fp)
    430c:	e17ffe17 	ldw	r5,-8(fp)
    4310:	01800034 	movhi	r6,0
    4314:	31908d04 	addi	r6,r6,16948
    4318:	e1fffc17 	ldw	r7,-16(fp)
    431c:	000469c0 	call	469c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    4320:	e037883a 	mov	sp,fp
    4324:	dfc00117 	ldw	ra,4(sp)
    4328:	df000017 	ldw	fp,0(sp)
    432c:	dec00204 	addi	sp,sp,8
    4330:	f800283a 	ret

00004334 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    4334:	defff404 	addi	sp,sp,-48
    4338:	df000b15 	stw	fp,44(sp)
    433c:	df000b04 	addi	fp,sp,44
    4340:	e13ffb15 	stw	r4,-20(fp)
    4344:	e17ffc15 	stw	r5,-16(fp)
    4348:	e1bffd15 	stw	r6,-12(fp)
    434c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    4350:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    4354:	00800074 	movhi	r2,1
    4358:	10a2bc04 	addi	r2,r2,-29968
    435c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    4360:	1005003a 	cmpeq	r2,r2,zero
    4364:	1000411e 	bne	r2,zero,446c <alt_alarm_start+0x138>
  {
    if (alarm)
    4368:	e0bffb17 	ldw	r2,-20(fp)
    436c:	1005003a 	cmpeq	r2,r2,zero
    4370:	10003b1e 	bne	r2,zero,4460 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    4374:	e0fffb17 	ldw	r3,-20(fp)
    4378:	e0bffd17 	ldw	r2,-12(fp)
    437c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    4380:	e0fffb17 	ldw	r3,-20(fp)
    4384:	e0bffe17 	ldw	r2,-8(fp)
    4388:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    438c:	0005303a 	rdctl	r2,status
    4390:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4394:	e0fff817 	ldw	r3,-32(fp)
    4398:	00bfff84 	movi	r2,-2
    439c:	1884703a 	and	r2,r3,r2
    43a0:	1001703a 	wrctl	status,r2
  
  return context;
    43a4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    43a8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    43ac:	00800074 	movhi	r2,1
    43b0:	10a2bd04 	addi	r2,r2,-29964
    43b4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    43b8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    43bc:	e0fffc17 	ldw	r3,-16(fp)
    43c0:	e0bff917 	ldw	r2,-28(fp)
    43c4:	1885883a 	add	r2,r3,r2
    43c8:	10c00044 	addi	r3,r2,1
    43cc:	e0bffb17 	ldw	r2,-20(fp)
    43d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    43d4:	e0bffb17 	ldw	r2,-20(fp)
    43d8:	10c00217 	ldw	r3,8(r2)
    43dc:	e0bff917 	ldw	r2,-28(fp)
    43e0:	1880042e 	bgeu	r3,r2,43f4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    43e4:	e0fffb17 	ldw	r3,-20(fp)
    43e8:	00800044 	movi	r2,1
    43ec:	18800405 	stb	r2,16(r3)
    43f0:	00000206 	br	43fc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    43f4:	e0bffb17 	ldw	r2,-20(fp)
    43f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    43fc:	e0fffb17 	ldw	r3,-20(fp)
    4400:	00800034 	movhi	r2,0
    4404:	109c2004 	addi	r2,r2,28800
    4408:	e0bff615 	stw	r2,-40(fp)
    440c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4410:	e0fff717 	ldw	r3,-36(fp)
    4414:	e0bff617 	ldw	r2,-40(fp)
    4418:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    441c:	e0bff617 	ldw	r2,-40(fp)
    4420:	10c00017 	ldw	r3,0(r2)
    4424:	e0bff717 	ldw	r2,-36(fp)
    4428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    442c:	e0bff617 	ldw	r2,-40(fp)
    4430:	10c00017 	ldw	r3,0(r2)
    4434:	e0bff717 	ldw	r2,-36(fp)
    4438:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    443c:	e0fff617 	ldw	r3,-40(fp)
    4440:	e0bff717 	ldw	r2,-36(fp)
    4444:	18800015 	stw	r2,0(r3)
    4448:	e0bffa17 	ldw	r2,-24(fp)
    444c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4450:	e0bff517 	ldw	r2,-44(fp)
    4454:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    4458:	e03fff15 	stw	zero,-4(fp)
    445c:	00000506 	br	4474 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    4460:	00bffa84 	movi	r2,-22
    4464:	e0bfff15 	stw	r2,-4(fp)
    4468:	00000206 	br	4474 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    446c:	00bfde84 	movi	r2,-134
    4470:	e0bfff15 	stw	r2,-4(fp)
    4474:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    4478:	e037883a 	mov	sp,fp
    447c:	df000017 	ldw	fp,0(sp)
    4480:	dec00104 	addi	sp,sp,4
    4484:	f800283a 	ret

00004488 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    4488:	deffff04 	addi	sp,sp,-4
    448c:	df000015 	stw	fp,0(sp)
    4490:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4494:	e037883a 	mov	sp,fp
    4498:	df000017 	ldw	fp,0(sp)
    449c:	dec00104 	addi	sp,sp,4
    44a0:	f800283a 	ret

000044a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    44a4:	defff904 	addi	sp,sp,-28
    44a8:	dfc00615 	stw	ra,24(sp)
    44ac:	df000515 	stw	fp,20(sp)
    44b0:	df000504 	addi	fp,sp,20
    44b4:	e13ffd15 	stw	r4,-12(fp)
    44b8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    44bc:	e0bffd17 	ldw	r2,-12(fp)
    44c0:	1005003a 	cmpeq	r2,r2,zero
    44c4:	1000041e 	bne	r2,zero,44d8 <alt_dev_llist_insert+0x34>
    44c8:	e0bffd17 	ldw	r2,-12(fp)
    44cc:	10800217 	ldw	r2,8(r2)
    44d0:	1004c03a 	cmpne	r2,r2,zero
    44d4:	1000071e 	bne	r2,zero,44f4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    44d8:	00045580 	call	4558 <alt_get_errno>
    44dc:	1007883a 	mov	r3,r2
    44e0:	00800584 	movi	r2,22
    44e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    44e8:	00bffa84 	movi	r2,-22
    44ec:	e0bfff15 	stw	r2,-4(fp)
    44f0:	00001306 	br	4540 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    44f4:	e0fffd17 	ldw	r3,-12(fp)
    44f8:	e0bffe17 	ldw	r2,-8(fp)
    44fc:	e0bffb15 	stw	r2,-20(fp)
    4500:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    4504:	e0fffc17 	ldw	r3,-16(fp)
    4508:	e0bffb17 	ldw	r2,-20(fp)
    450c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    4510:	e0bffb17 	ldw	r2,-20(fp)
    4514:	10c00017 	ldw	r3,0(r2)
    4518:	e0bffc17 	ldw	r2,-16(fp)
    451c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    4520:	e0bffb17 	ldw	r2,-20(fp)
    4524:	10c00017 	ldw	r3,0(r2)
    4528:	e0bffc17 	ldw	r2,-16(fp)
    452c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    4530:	e0fffb17 	ldw	r3,-20(fp)
    4534:	e0bffc17 	ldw	r2,-16(fp)
    4538:	18800015 	stw	r2,0(r3)

  return 0;  
    453c:	e03fff15 	stw	zero,-4(fp)
    4540:	e0bfff17 	ldw	r2,-4(fp)
}
    4544:	e037883a 	mov	sp,fp
    4548:	dfc00117 	ldw	ra,4(sp)
    454c:	df000017 	ldw	fp,0(sp)
    4550:	dec00204 	addi	sp,sp,8
    4554:	f800283a 	ret

00004558 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4558:	defffd04 	addi	sp,sp,-12
    455c:	dfc00215 	stw	ra,8(sp)
    4560:	df000115 	stw	fp,4(sp)
    4564:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4568:	00800034 	movhi	r2,0
    456c:	109c1d04 	addi	r2,r2,28788
    4570:	10800017 	ldw	r2,0(r2)
    4574:	1005003a 	cmpeq	r2,r2,zero
    4578:	1000061e 	bne	r2,zero,4594 <alt_get_errno+0x3c>
    457c:	00800034 	movhi	r2,0
    4580:	109c1d04 	addi	r2,r2,28788
    4584:	10800017 	ldw	r2,0(r2)
    4588:	103ee83a 	callr	r2
    458c:	e0bfff15 	stw	r2,-4(fp)
    4590:	00000306 	br	45a0 <alt_get_errno+0x48>
    4594:	00800074 	movhi	r2,1
    4598:	10a2b704 	addi	r2,r2,-29988
    459c:	e0bfff15 	stw	r2,-4(fp)
    45a0:	e0bfff17 	ldw	r2,-4(fp)
}
    45a4:	e037883a 	mov	sp,fp
    45a8:	dfc00117 	ldw	ra,4(sp)
    45ac:	df000017 	ldw	fp,0(sp)
    45b0:	dec00204 	addi	sp,sp,8
    45b4:	f800283a 	ret

000045b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    45b8:	defffd04 	addi	sp,sp,-12
    45bc:	dfc00215 	stw	ra,8(sp)
    45c0:	df000115 	stw	fp,4(sp)
    45c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    45c8:	00bfff04 	movi	r2,-4
    45cc:	00c00034 	movhi	r3,0
    45d0:	18d57c04 	addi	r3,r3,22000
    45d4:	1885883a 	add	r2,r3,r2
    45d8:	e0bfff15 	stw	r2,-4(fp)
    45dc:	00000606 	br	45f8 <_do_ctors+0x40>
        (*ctor) (); 
    45e0:	e0bfff17 	ldw	r2,-4(fp)
    45e4:	10800017 	ldw	r2,0(r2)
    45e8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    45ec:	e0bfff17 	ldw	r2,-4(fp)
    45f0:	10bfff04 	addi	r2,r2,-4
    45f4:	e0bfff15 	stw	r2,-4(fp)
    45f8:	e0ffff17 	ldw	r3,-4(fp)
    45fc:	00800034 	movhi	r2,0
    4600:	10957b04 	addi	r2,r2,21996
    4604:	18bff62e 	bgeu	r3,r2,45e0 <_do_ctors+0x28>
        (*ctor) (); 
}
    4608:	e037883a 	mov	sp,fp
    460c:	dfc00117 	ldw	ra,4(sp)
    4610:	df000017 	ldw	fp,0(sp)
    4614:	dec00204 	addi	sp,sp,8
    4618:	f800283a 	ret

0000461c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    461c:	defffd04 	addi	sp,sp,-12
    4620:	dfc00215 	stw	ra,8(sp)
    4624:	df000115 	stw	fp,4(sp)
    4628:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    462c:	00bfff04 	movi	r2,-4
    4630:	00c00034 	movhi	r3,0
    4634:	18d57c04 	addi	r3,r3,22000
    4638:	1885883a 	add	r2,r3,r2
    463c:	e0bfff15 	stw	r2,-4(fp)
    4640:	00000606 	br	465c <_do_dtors+0x40>
        (*dtor) (); 
    4644:	e0bfff17 	ldw	r2,-4(fp)
    4648:	10800017 	ldw	r2,0(r2)
    464c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    4650:	e0bfff17 	ldw	r2,-4(fp)
    4654:	10bfff04 	addi	r2,r2,-4
    4658:	e0bfff15 	stw	r2,-4(fp)
    465c:	e0ffff17 	ldw	r3,-4(fp)
    4660:	00800034 	movhi	r2,0
    4664:	10957c04 	addi	r2,r2,22000
    4668:	18bff62e 	bgeu	r3,r2,4644 <_do_dtors+0x28>
        (*dtor) (); 
}
    466c:	e037883a 	mov	sp,fp
    4670:	dfc00117 	ldw	ra,4(sp)
    4674:	df000017 	ldw	fp,0(sp)
    4678:	dec00204 	addi	sp,sp,8
    467c:	f800283a 	ret

00004680 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    4680:	deffff04 	addi	sp,sp,-4
    4684:	df000015 	stw	fp,0(sp)
    4688:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    468c:	e037883a 	mov	sp,fp
    4690:	df000017 	ldw	fp,0(sp)
    4694:	dec00104 	addi	sp,sp,4
    4698:	f800283a 	ret

0000469c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    469c:	defff904 	addi	sp,sp,-28
    46a0:	dfc00615 	stw	ra,24(sp)
    46a4:	df000515 	stw	fp,20(sp)
    46a8:	df000504 	addi	fp,sp,20
    46ac:	e13ffc15 	stw	r4,-16(fp)
    46b0:	e17ffd15 	stw	r5,-12(fp)
    46b4:	e1bffe15 	stw	r6,-8(fp)
    46b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    46bc:	e0800217 	ldw	r2,8(fp)
    46c0:	d8800015 	stw	r2,0(sp)
    46c4:	e13ffc17 	ldw	r4,-16(fp)
    46c8:	e17ffd17 	ldw	r5,-12(fp)
    46cc:	e1bffe17 	ldw	r6,-8(fp)
    46d0:	e1ffff17 	ldw	r7,-4(fp)
    46d4:	00048700 	call	4870 <alt_iic_isr_register>
}  
    46d8:	e037883a 	mov	sp,fp
    46dc:	dfc00117 	ldw	ra,4(sp)
    46e0:	df000017 	ldw	fp,0(sp)
    46e4:	dec00204 	addi	sp,sp,8
    46e8:	f800283a 	ret

000046ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    46ec:	defff904 	addi	sp,sp,-28
    46f0:	df000615 	stw	fp,24(sp)
    46f4:	df000604 	addi	fp,sp,24
    46f8:	e13ffe15 	stw	r4,-8(fp)
    46fc:	e17fff15 	stw	r5,-4(fp)
    4700:	e0bfff17 	ldw	r2,-4(fp)
    4704:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4708:	0005303a 	rdctl	r2,status
    470c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4710:	e0fffb17 	ldw	r3,-20(fp)
    4714:	00bfff84 	movi	r2,-2
    4718:	1884703a 	and	r2,r3,r2
    471c:	1001703a 	wrctl	status,r2
  
  return context;
    4720:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    4724:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    4728:	e0fffc17 	ldw	r3,-16(fp)
    472c:	00800044 	movi	r2,1
    4730:	10c4983a 	sll	r2,r2,r3
    4734:	1007883a 	mov	r3,r2
    4738:	00800074 	movhi	r2,1
    473c:	10a2bb04 	addi	r2,r2,-29972
    4740:	10800017 	ldw	r2,0(r2)
    4744:	1886b03a 	or	r3,r3,r2
    4748:	00800074 	movhi	r2,1
    474c:	10a2bb04 	addi	r2,r2,-29972
    4750:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    4754:	00800074 	movhi	r2,1
    4758:	10a2bb04 	addi	r2,r2,-29972
    475c:	10800017 	ldw	r2,0(r2)
    4760:	100170fa 	wrctl	ienable,r2
    4764:	e0bffd17 	ldw	r2,-12(fp)
    4768:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    476c:	e0bffa17 	ldw	r2,-24(fp)
    4770:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4774:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    4778:	e037883a 	mov	sp,fp
    477c:	df000017 	ldw	fp,0(sp)
    4780:	dec00104 	addi	sp,sp,4
    4784:	f800283a 	ret

00004788 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    4788:	defff904 	addi	sp,sp,-28
    478c:	df000615 	stw	fp,24(sp)
    4790:	df000604 	addi	fp,sp,24
    4794:	e13ffe15 	stw	r4,-8(fp)
    4798:	e17fff15 	stw	r5,-4(fp)
    479c:	e0bfff17 	ldw	r2,-4(fp)
    47a0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    47a4:	0005303a 	rdctl	r2,status
    47a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    47ac:	e0fffb17 	ldw	r3,-20(fp)
    47b0:	00bfff84 	movi	r2,-2
    47b4:	1884703a 	and	r2,r3,r2
    47b8:	1001703a 	wrctl	status,r2
  
  return context;
    47bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    47c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    47c4:	e0fffc17 	ldw	r3,-16(fp)
    47c8:	00800044 	movi	r2,1
    47cc:	10c4983a 	sll	r2,r2,r3
    47d0:	0084303a 	nor	r2,zero,r2
    47d4:	1007883a 	mov	r3,r2
    47d8:	00800074 	movhi	r2,1
    47dc:	10a2bb04 	addi	r2,r2,-29972
    47e0:	10800017 	ldw	r2,0(r2)
    47e4:	1886703a 	and	r3,r3,r2
    47e8:	00800074 	movhi	r2,1
    47ec:	10a2bb04 	addi	r2,r2,-29972
    47f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    47f4:	00800074 	movhi	r2,1
    47f8:	10a2bb04 	addi	r2,r2,-29972
    47fc:	10800017 	ldw	r2,0(r2)
    4800:	100170fa 	wrctl	ienable,r2
    4804:	e0bffd17 	ldw	r2,-12(fp)
    4808:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    480c:	e0bffa17 	ldw	r2,-24(fp)
    4810:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    4814:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    4818:	e037883a 	mov	sp,fp
    481c:	df000017 	ldw	fp,0(sp)
    4820:	dec00104 	addi	sp,sp,4
    4824:	f800283a 	ret

00004828 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    4828:	defffc04 	addi	sp,sp,-16
    482c:	df000315 	stw	fp,12(sp)
    4830:	df000304 	addi	fp,sp,12
    4834:	e13ffe15 	stw	r4,-8(fp)
    4838:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    483c:	000530fa 	rdctl	r2,ienable
    4840:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    4844:	e0ffff17 	ldw	r3,-4(fp)
    4848:	00800044 	movi	r2,1
    484c:	10c4983a 	sll	r2,r2,r3
    4850:	1007883a 	mov	r3,r2
    4854:	e0bffd17 	ldw	r2,-12(fp)
    4858:	1884703a 	and	r2,r3,r2
    485c:	1004c03a 	cmpne	r2,r2,zero
}
    4860:	e037883a 	mov	sp,fp
    4864:	df000017 	ldw	fp,0(sp)
    4868:	dec00104 	addi	sp,sp,4
    486c:	f800283a 	ret

00004870 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    4870:	defff404 	addi	sp,sp,-48
    4874:	dfc00b15 	stw	ra,44(sp)
    4878:	df000a15 	stw	fp,40(sp)
    487c:	df000a04 	addi	fp,sp,40
    4880:	e13ffb15 	stw	r4,-20(fp)
    4884:	e17ffc15 	stw	r5,-16(fp)
    4888:	e1bffd15 	stw	r6,-12(fp)
    488c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    4890:	00bffa84 	movi	r2,-22
    4894:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    4898:	e0bffc17 	ldw	r2,-16(fp)
    489c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    48a0:	e0bff917 	ldw	r2,-28(fp)
    48a4:	10800808 	cmpgei	r2,r2,32
    48a8:	1000291e 	bne	r2,zero,4950 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    48ac:	0005303a 	rdctl	r2,status
    48b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    48b4:	e0fff717 	ldw	r3,-36(fp)
    48b8:	00bfff84 	movi	r2,-2
    48bc:	1884703a 	and	r2,r3,r2
    48c0:	1001703a 	wrctl	status,r2
  
  return context;
    48c4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    48c8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    48cc:	e0bff917 	ldw	r2,-28(fp)
    48d0:	00c00074 	movhi	r3,1
    48d4:	18e2c804 	addi	r3,r3,-29920
    48d8:	100490fa 	slli	r2,r2,3
    48dc:	10c7883a 	add	r3,r2,r3
    48e0:	e0bffd17 	ldw	r2,-12(fp)
    48e4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    48e8:	e0bff917 	ldw	r2,-28(fp)
    48ec:	00c00074 	movhi	r3,1
    48f0:	18e2c804 	addi	r3,r3,-29920
    48f4:	100490fa 	slli	r2,r2,3
    48f8:	10c5883a 	add	r2,r2,r3
    48fc:	10c00104 	addi	r3,r2,4
    4900:	e0bffe17 	ldw	r2,-8(fp)
    4904:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    4908:	e0bffd17 	ldw	r2,-12(fp)
    490c:	1005003a 	cmpeq	r2,r2,zero
    4910:	1000051e 	bne	r2,zero,4928 <alt_iic_isr_register+0xb8>
    4914:	e17ff917 	ldw	r5,-28(fp)
    4918:	e13ffb17 	ldw	r4,-20(fp)
    491c:	00046ec0 	call	46ec <alt_ic_irq_enable>
    4920:	e0bfff15 	stw	r2,-4(fp)
    4924:	00000406 	br	4938 <alt_iic_isr_register+0xc8>
    4928:	e17ff917 	ldw	r5,-28(fp)
    492c:	e13ffb17 	ldw	r4,-20(fp)
    4930:	00047880 	call	4788 <alt_ic_irq_disable>
    4934:	e0bfff15 	stw	r2,-4(fp)
    4938:	e0bfff17 	ldw	r2,-4(fp)
    493c:	e0bffa15 	stw	r2,-24(fp)
    4940:	e0bff817 	ldw	r2,-32(fp)
    4944:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4948:	e0bff617 	ldw	r2,-40(fp)
    494c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    4950:	e0bffa17 	ldw	r2,-24(fp)
}
    4954:	e037883a 	mov	sp,fp
    4958:	dfc00117 	ldw	ra,4(sp)
    495c:	df000017 	ldw	fp,0(sp)
    4960:	dec00204 	addi	sp,sp,8
    4964:	f800283a 	ret

00004968 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    4968:	defff804 	addi	sp,sp,-32
    496c:	dfc00715 	stw	ra,28(sp)
    4970:	df000615 	stw	fp,24(sp)
    4974:	dc000515 	stw	r16,20(sp)
    4978:	df000504 	addi	fp,sp,20
    497c:	e13ffc15 	stw	r4,-16(fp)
    4980:	e17ffd15 	stw	r5,-12(fp)
    4984:	e1bffe15 	stw	r6,-8(fp)
    4988:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    498c:	e13ffd17 	ldw	r4,-12(fp)
    4990:	e17ffe17 	ldw	r5,-8(fp)
    4994:	e1bfff17 	ldw	r6,-4(fp)
    4998:	0004bb00 	call	4bb0 <open>
    499c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    49a0:	e0bffb17 	ldw	r2,-20(fp)
    49a4:	1004803a 	cmplt	r2,r2,zero
    49a8:	10001f1e 	bne	r2,zero,4a28 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    49ac:	e13ffb17 	ldw	r4,-20(fp)
    49b0:	04000034 	movhi	r16,0
    49b4:	84179c04 	addi	r16,r16,24176
    49b8:	01400304 	movi	r5,12
    49bc:	0002b680 	call	2b68 <__mulsi3>
    49c0:	1405883a 	add	r2,r2,r16
    49c4:	10c00017 	ldw	r3,0(r2)
    49c8:	e0bffc17 	ldw	r2,-16(fp)
    49cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    49d0:	e13ffb17 	ldw	r4,-20(fp)
    49d4:	04000034 	movhi	r16,0
    49d8:	84179c04 	addi	r16,r16,24176
    49dc:	01400304 	movi	r5,12
    49e0:	0002b680 	call	2b68 <__mulsi3>
    49e4:	1405883a 	add	r2,r2,r16
    49e8:	10800104 	addi	r2,r2,4
    49ec:	10c00017 	ldw	r3,0(r2)
    49f0:	e0bffc17 	ldw	r2,-16(fp)
    49f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    49f8:	e13ffb17 	ldw	r4,-20(fp)
    49fc:	04000034 	movhi	r16,0
    4a00:	84179c04 	addi	r16,r16,24176
    4a04:	01400304 	movi	r5,12
    4a08:	0002b680 	call	2b68 <__mulsi3>
    4a0c:	1405883a 	add	r2,r2,r16
    4a10:	10800204 	addi	r2,r2,8
    4a14:	10c00017 	ldw	r3,0(r2)
    4a18:	e0bffc17 	ldw	r2,-16(fp)
    4a1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    4a20:	e13ffb17 	ldw	r4,-20(fp)
    4a24:	00033f80 	call	33f8 <alt_release_fd>
  }
} 
    4a28:	e037883a 	mov	sp,fp
    4a2c:	dfc00217 	ldw	ra,8(sp)
    4a30:	df000117 	ldw	fp,4(sp)
    4a34:	dc000017 	ldw	r16,0(sp)
    4a38:	dec00304 	addi	sp,sp,12
    4a3c:	f800283a 	ret

00004a40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    4a40:	defffb04 	addi	sp,sp,-20
    4a44:	dfc00415 	stw	ra,16(sp)
    4a48:	df000315 	stw	fp,12(sp)
    4a4c:	df000304 	addi	fp,sp,12
    4a50:	e13ffd15 	stw	r4,-12(fp)
    4a54:	e17ffe15 	stw	r5,-8(fp)
    4a58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    4a5c:	01000034 	movhi	r4,0
    4a60:	21179f04 	addi	r4,r4,24188
    4a64:	e17ffd17 	ldw	r5,-12(fp)
    4a68:	01800044 	movi	r6,1
    4a6c:	01c07fc4 	movi	r7,511
    4a70:	00049680 	call	4968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    4a74:	01000034 	movhi	r4,0
    4a78:	21179c04 	addi	r4,r4,24176
    4a7c:	e17ffe17 	ldw	r5,-8(fp)
    4a80:	000d883a 	mov	r6,zero
    4a84:	01c07fc4 	movi	r7,511
    4a88:	00049680 	call	4968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    4a8c:	01000034 	movhi	r4,0
    4a90:	2117a204 	addi	r4,r4,24200
    4a94:	e17fff17 	ldw	r5,-4(fp)
    4a98:	01800044 	movi	r6,1
    4a9c:	01c07fc4 	movi	r7,511
    4aa0:	00049680 	call	4968 <alt_open_fd>
}  
    4aa4:	e037883a 	mov	sp,fp
    4aa8:	dfc00117 	ldw	ra,4(sp)
    4aac:	df000017 	ldw	fp,0(sp)
    4ab0:	dec00204 	addi	sp,sp,8
    4ab4:	f800283a 	ret

00004ab8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    4ab8:	defffa04 	addi	sp,sp,-24
    4abc:	dfc00515 	stw	ra,20(sp)
    4ac0:	df000415 	stw	fp,16(sp)
    4ac4:	dc000315 	stw	r16,12(sp)
    4ac8:	df000304 	addi	fp,sp,12
    4acc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    4ad0:	e0bffe17 	ldw	r2,-8(fp)
    4ad4:	10800217 	ldw	r2,8(r2)
    4ad8:	10d00034 	orhi	r3,r2,16384
    4adc:	e0bffe17 	ldw	r2,-8(fp)
    4ae0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4ae4:	e03ffd15 	stw	zero,-12(fp)
    4ae8:	00002306 	br	4b78 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    4aec:	e13ffd17 	ldw	r4,-12(fp)
    4af0:	04000034 	movhi	r16,0
    4af4:	84179c04 	addi	r16,r16,24176
    4af8:	01400304 	movi	r5,12
    4afc:	0002b680 	call	2b68 <__mulsi3>
    4b00:	1405883a 	add	r2,r2,r16
    4b04:	10c00017 	ldw	r3,0(r2)
    4b08:	e0bffe17 	ldw	r2,-8(fp)
    4b0c:	10800017 	ldw	r2,0(r2)
    4b10:	1880161e 	bne	r3,r2,4b6c <alt_file_locked+0xb4>
    4b14:	e13ffd17 	ldw	r4,-12(fp)
    4b18:	04000034 	movhi	r16,0
    4b1c:	84179c04 	addi	r16,r16,24176
    4b20:	01400304 	movi	r5,12
    4b24:	0002b680 	call	2b68 <__mulsi3>
    4b28:	1405883a 	add	r2,r2,r16
    4b2c:	10800204 	addi	r2,r2,8
    4b30:	10800017 	ldw	r2,0(r2)
    4b34:	1004403a 	cmpge	r2,r2,zero
    4b38:	10000c1e 	bne	r2,zero,4b6c <alt_file_locked+0xb4>
    4b3c:	e13ffd17 	ldw	r4,-12(fp)
    4b40:	01400304 	movi	r5,12
    4b44:	0002b680 	call	2b68 <__mulsi3>
    4b48:	1007883a 	mov	r3,r2
    4b4c:	00800034 	movhi	r2,0
    4b50:	10979c04 	addi	r2,r2,24176
    4b54:	1887883a 	add	r3,r3,r2
    4b58:	e0bffe17 	ldw	r2,-8(fp)
    4b5c:	18800326 	beq	r3,r2,4b6c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    4b60:	00bffcc4 	movi	r2,-13
    4b64:	e0bfff15 	stw	r2,-4(fp)
    4b68:	00000a06 	br	4b94 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    4b6c:	e0bffd17 	ldw	r2,-12(fp)
    4b70:	10800044 	addi	r2,r2,1
    4b74:	e0bffd15 	stw	r2,-12(fp)
    4b78:	00800034 	movhi	r2,0
    4b7c:	109c1c04 	addi	r2,r2,28784
    4b80:	10800017 	ldw	r2,0(r2)
    4b84:	1007883a 	mov	r3,r2
    4b88:	e0bffd17 	ldw	r2,-12(fp)
    4b8c:	18bfd72e 	bgeu	r3,r2,4aec <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    4b90:	e03fff15 	stw	zero,-4(fp)
    4b94:	e0bfff17 	ldw	r2,-4(fp)
}
    4b98:	e037883a 	mov	sp,fp
    4b9c:	dfc00217 	ldw	ra,8(sp)
    4ba0:	df000117 	ldw	fp,4(sp)
    4ba4:	dc000017 	ldw	r16,0(sp)
    4ba8:	dec00304 	addi	sp,sp,12
    4bac:	f800283a 	ret

00004bb0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    4bb0:	defff404 	addi	sp,sp,-48
    4bb4:	dfc00b15 	stw	ra,44(sp)
    4bb8:	df000a15 	stw	fp,40(sp)
    4bbc:	df000a04 	addi	fp,sp,40
    4bc0:	e13ffb15 	stw	r4,-20(fp)
    4bc4:	e17ffc15 	stw	r5,-16(fp)
    4bc8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    4bcc:	00bfffc4 	movi	r2,-1
    4bd0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    4bd4:	00bffb44 	movi	r2,-19
    4bd8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    4bdc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    4be0:	e13ffb17 	ldw	r4,-20(fp)
    4be4:	01400034 	movhi	r5,0
    4be8:	295c1a04 	addi	r5,r5,28776
    4bec:	0004f600 	call	4f60 <alt_find_dev>
    4bf0:	e0bffa15 	stw	r2,-24(fp)
    4bf4:	e0bffa17 	ldw	r2,-24(fp)
    4bf8:	1004c03a 	cmpne	r2,r2,zero
    4bfc:	1000051e 	bne	r2,zero,4c14 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    4c00:	e13ffb17 	ldw	r4,-20(fp)
    4c04:	0004ff40 	call	4ff4 <alt_find_file>
    4c08:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    4c0c:	00800044 	movi	r2,1
    4c10:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    4c14:	e0bffa17 	ldw	r2,-24(fp)
    4c18:	1005003a 	cmpeq	r2,r2,zero
    4c1c:	1000311e 	bne	r2,zero,4ce4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    4c20:	e13ffa17 	ldw	r4,-24(fp)
    4c24:	00051140 	call	5114 <alt_get_fd>
    4c28:	e0bff815 	stw	r2,-32(fp)
    4c2c:	e0bff817 	ldw	r2,-32(fp)
    4c30:	1004403a 	cmpge	r2,r2,zero
    4c34:	1000031e 	bne	r2,zero,4c44 <open+0x94>
    {
      status = index;
    4c38:	e0bff817 	ldw	r2,-32(fp)
    4c3c:	e0bff715 	stw	r2,-36(fp)
    4c40:	00002a06 	br	4cec <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    4c44:	e13ff817 	ldw	r4,-32(fp)
    4c48:	01400304 	movi	r5,12
    4c4c:	0002b680 	call	2b68 <__mulsi3>
    4c50:	1007883a 	mov	r3,r2
    4c54:	00800034 	movhi	r2,0
    4c58:	10979c04 	addi	r2,r2,24176
    4c5c:	1885883a 	add	r2,r3,r2
    4c60:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    4c64:	e0fffc17 	ldw	r3,-16(fp)
    4c68:	00900034 	movhi	r2,16384
    4c6c:	10bfffc4 	addi	r2,r2,-1
    4c70:	1886703a 	and	r3,r3,r2
    4c74:	e0bff917 	ldw	r2,-28(fp)
    4c78:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    4c7c:	e0bff617 	ldw	r2,-40(fp)
    4c80:	1004c03a 	cmpne	r2,r2,zero
    4c84:	1000061e 	bne	r2,zero,4ca0 <open+0xf0>
    4c88:	e13ff917 	ldw	r4,-28(fp)
    4c8c:	0004ab80 	call	4ab8 <alt_file_locked>
    4c90:	e0bff715 	stw	r2,-36(fp)
    4c94:	e0bff717 	ldw	r2,-36(fp)
    4c98:	1004803a 	cmplt	r2,r2,zero
    4c9c:	1000131e 	bne	r2,zero,4cec <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    4ca0:	e0bffa17 	ldw	r2,-24(fp)
    4ca4:	10800317 	ldw	r2,12(r2)
    4ca8:	1005003a 	cmpeq	r2,r2,zero
    4cac:	1000091e 	bne	r2,zero,4cd4 <open+0x124>
    4cb0:	e0bffa17 	ldw	r2,-24(fp)
    4cb4:	10800317 	ldw	r2,12(r2)
    4cb8:	e13ff917 	ldw	r4,-28(fp)
    4cbc:	e17ffb17 	ldw	r5,-20(fp)
    4cc0:	e1bffc17 	ldw	r6,-16(fp)
    4cc4:	e1fffd17 	ldw	r7,-12(fp)
    4cc8:	103ee83a 	callr	r2
    4ccc:	e0bfff15 	stw	r2,-4(fp)
    4cd0:	00000106 	br	4cd8 <open+0x128>
    4cd4:	e03fff15 	stw	zero,-4(fp)
    4cd8:	e0bfff17 	ldw	r2,-4(fp)
    4cdc:	e0bff715 	stw	r2,-36(fp)
    4ce0:	00000206 	br	4cec <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    4ce4:	00bffb44 	movi	r2,-19
    4ce8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    4cec:	e0bff717 	ldw	r2,-36(fp)
    4cf0:	1004403a 	cmpge	r2,r2,zero
    4cf4:	1000091e 	bne	r2,zero,4d1c <open+0x16c>
  {
    alt_release_fd (index);  
    4cf8:	e13ff817 	ldw	r4,-32(fp)
    4cfc:	00033f80 	call	33f8 <alt_release_fd>
    ALT_ERRNO = -status;
    4d00:	0004d3c0 	call	4d3c <alt_get_errno>
    4d04:	e0fff717 	ldw	r3,-36(fp)
    4d08:	00c7c83a 	sub	r3,zero,r3
    4d0c:	10c00015 	stw	r3,0(r2)
    return -1;
    4d10:	00bfffc4 	movi	r2,-1
    4d14:	e0bffe15 	stw	r2,-8(fp)
    4d18:	00000206 	br	4d24 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    4d1c:	e0bff817 	ldw	r2,-32(fp)
    4d20:	e0bffe15 	stw	r2,-8(fp)
    4d24:	e0bffe17 	ldw	r2,-8(fp)
}
    4d28:	e037883a 	mov	sp,fp
    4d2c:	dfc00117 	ldw	ra,4(sp)
    4d30:	df000017 	ldw	fp,0(sp)
    4d34:	dec00204 	addi	sp,sp,8
    4d38:	f800283a 	ret

00004d3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    4d3c:	defffd04 	addi	sp,sp,-12
    4d40:	dfc00215 	stw	ra,8(sp)
    4d44:	df000115 	stw	fp,4(sp)
    4d48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    4d4c:	00800034 	movhi	r2,0
    4d50:	109c1d04 	addi	r2,r2,28788
    4d54:	10800017 	ldw	r2,0(r2)
    4d58:	1005003a 	cmpeq	r2,r2,zero
    4d5c:	1000061e 	bne	r2,zero,4d78 <alt_get_errno+0x3c>
    4d60:	00800034 	movhi	r2,0
    4d64:	109c1d04 	addi	r2,r2,28788
    4d68:	10800017 	ldw	r2,0(r2)
    4d6c:	103ee83a 	callr	r2
    4d70:	e0bfff15 	stw	r2,-4(fp)
    4d74:	00000306 	br	4d84 <alt_get_errno+0x48>
    4d78:	00800074 	movhi	r2,1
    4d7c:	10a2b704 	addi	r2,r2,-29988
    4d80:	e0bfff15 	stw	r2,-4(fp)
    4d84:	e0bfff17 	ldw	r2,-4(fp)
}
    4d88:	e037883a 	mov	sp,fp
    4d8c:	dfc00117 	ldw	ra,4(sp)
    4d90:	df000017 	ldw	fp,0(sp)
    4d94:	dec00204 	addi	sp,sp,8
    4d98:	f800283a 	ret

00004d9c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    4d9c:	defffa04 	addi	sp,sp,-24
    4da0:	df000515 	stw	fp,20(sp)
    4da4:	df000504 	addi	fp,sp,20
    4da8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4dac:	0005303a 	rdctl	r2,status
    4db0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4db4:	e0fffd17 	ldw	r3,-12(fp)
    4db8:	00bfff84 	movi	r2,-2
    4dbc:	1884703a 	and	r2,r3,r2
    4dc0:	1001703a 	wrctl	status,r2
  
  return context;
    4dc4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    4dc8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    4dcc:	e0bfff17 	ldw	r2,-4(fp)
    4dd0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    4dd4:	e0bffc17 	ldw	r2,-16(fp)
    4dd8:	10c00017 	ldw	r3,0(r2)
    4ddc:	e0bffc17 	ldw	r2,-16(fp)
    4de0:	10800117 	ldw	r2,4(r2)
    4de4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    4de8:	e0bffc17 	ldw	r2,-16(fp)
    4dec:	10c00117 	ldw	r3,4(r2)
    4df0:	e0bffc17 	ldw	r2,-16(fp)
    4df4:	10800017 	ldw	r2,0(r2)
    4df8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    4dfc:	e0fffc17 	ldw	r3,-16(fp)
    4e00:	e0bffc17 	ldw	r2,-16(fp)
    4e04:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    4e08:	e0fffc17 	ldw	r3,-16(fp)
    4e0c:	e0bffc17 	ldw	r2,-16(fp)
    4e10:	18800015 	stw	r2,0(r3)
    4e14:	e0bffe17 	ldw	r2,-8(fp)
    4e18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4e1c:	e0bffb17 	ldw	r2,-20(fp)
    4e20:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    4e24:	e037883a 	mov	sp,fp
    4e28:	df000017 	ldw	fp,0(sp)
    4e2c:	dec00104 	addi	sp,sp,4
    4e30:	f800283a 	ret

00004e34 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    4e34:	defffb04 	addi	sp,sp,-20
    4e38:	dfc00415 	stw	ra,16(sp)
    4e3c:	df000315 	stw	fp,12(sp)
    4e40:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    4e44:	d0a00c17 	ldw	r2,-32720(gp)
    4e48:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    4e4c:	d0a6a917 	ldw	r2,-25948(gp)
    4e50:	10800044 	addi	r2,r2,1
    4e54:	d0a6a915 	stw	r2,-25948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4e58:	00003106 	br	4f20 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    4e5c:	e0bffe17 	ldw	r2,-8(fp)
    4e60:	10800017 	ldw	r2,0(r2)
    4e64:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    4e68:	e0bffe17 	ldw	r2,-8(fp)
    4e6c:	10800403 	ldbu	r2,16(r2)
    4e70:	10803fcc 	andi	r2,r2,255
    4e74:	1005003a 	cmpeq	r2,r2,zero
    4e78:	1000051e 	bne	r2,zero,4e90 <alt_tick+0x5c>
    4e7c:	d0a6a917 	ldw	r2,-25948(gp)
    4e80:	1004c03a 	cmpne	r2,r2,zero
    4e84:	1000021e 	bne	r2,zero,4e90 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    4e88:	e0bffe17 	ldw	r2,-8(fp)
    4e8c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    4e90:	e0bffe17 	ldw	r2,-8(fp)
    4e94:	10c00217 	ldw	r3,8(r2)
    4e98:	d0a6a917 	ldw	r2,-25948(gp)
    4e9c:	10c01e36 	bltu	r2,r3,4f18 <alt_tick+0xe4>
    4ea0:	e0bffe17 	ldw	r2,-8(fp)
    4ea4:	10800403 	ldbu	r2,16(r2)
    4ea8:	10803fcc 	andi	r2,r2,255
    4eac:	1004c03a 	cmpne	r2,r2,zero
    4eb0:	1000191e 	bne	r2,zero,4f18 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    4eb4:	e0bffe17 	ldw	r2,-8(fp)
    4eb8:	10c00317 	ldw	r3,12(r2)
    4ebc:	e0bffe17 	ldw	r2,-8(fp)
    4ec0:	11000517 	ldw	r4,20(r2)
    4ec4:	183ee83a 	callr	r3
    4ec8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    4ecc:	e0bffd17 	ldw	r2,-12(fp)
    4ed0:	1004c03a 	cmpne	r2,r2,zero
    4ed4:	1000031e 	bne	r2,zero,4ee4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    4ed8:	e13ffe17 	ldw	r4,-8(fp)
    4edc:	0004d9c0 	call	4d9c <alt_alarm_stop>
    4ee0:	00000d06 	br	4f18 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    4ee4:	e0bffe17 	ldw	r2,-8(fp)
    4ee8:	10c00217 	ldw	r3,8(r2)
    4eec:	e0bffd17 	ldw	r2,-12(fp)
    4ef0:	1887883a 	add	r3,r3,r2
    4ef4:	e0bffe17 	ldw	r2,-8(fp)
    4ef8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    4efc:	e0bffe17 	ldw	r2,-8(fp)
    4f00:	10c00217 	ldw	r3,8(r2)
    4f04:	d0a6a917 	ldw	r2,-25948(gp)
    4f08:	1880032e 	bgeu	r3,r2,4f18 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    4f0c:	e0fffe17 	ldw	r3,-8(fp)
    4f10:	00800044 	movi	r2,1
    4f14:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    4f18:	e0bfff17 	ldw	r2,-4(fp)
    4f1c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    4f20:	d0e00c04 	addi	r3,gp,-32720
    4f24:	e0bffe17 	ldw	r2,-8(fp)
    4f28:	10ffcc1e 	bne	r2,r3,4e5c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    4f2c:	e037883a 	mov	sp,fp
    4f30:	dfc00117 	ldw	ra,4(sp)
    4f34:	df000017 	ldw	fp,0(sp)
    4f38:	dec00204 	addi	sp,sp,8
    4f3c:	f800283a 	ret

00004f40 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    4f40:	deffff04 	addi	sp,sp,-4
    4f44:	df000015 	stw	fp,0(sp)
    4f48:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    4f4c:	000170fa 	wrctl	ienable,zero
}
    4f50:	e037883a 	mov	sp,fp
    4f54:	df000017 	ldw	fp,0(sp)
    4f58:	dec00104 	addi	sp,sp,4
    4f5c:	f800283a 	ret

00004f60 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    4f60:	defff904 	addi	sp,sp,-28
    4f64:	dfc00615 	stw	ra,24(sp)
    4f68:	df000515 	stw	fp,20(sp)
    4f6c:	df000504 	addi	fp,sp,20
    4f70:	e13ffd15 	stw	r4,-12(fp)
    4f74:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    4f78:	e0bffe17 	ldw	r2,-8(fp)
    4f7c:	10800017 	ldw	r2,0(r2)
    4f80:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    4f84:	e13ffd17 	ldw	r4,-12(fp)
    4f88:	00002d80 	call	2d8 <strlen>
    4f8c:	10800044 	addi	r2,r2,1
    4f90:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4f94:	00000d06 	br	4fcc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    4f98:	e0bffc17 	ldw	r2,-16(fp)
    4f9c:	11000217 	ldw	r4,8(r2)
    4fa0:	e1bffb17 	ldw	r6,-20(fp)
    4fa4:	e17ffd17 	ldw	r5,-12(fp)
    4fa8:	00052300 	call	5230 <memcmp>
    4fac:	1004c03a 	cmpne	r2,r2,zero
    4fb0:	1000031e 	bne	r2,zero,4fc0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    4fb4:	e0bffc17 	ldw	r2,-16(fp)
    4fb8:	e0bfff15 	stw	r2,-4(fp)
    4fbc:	00000706 	br	4fdc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    4fc0:	e0bffc17 	ldw	r2,-16(fp)
    4fc4:	10800017 	ldw	r2,0(r2)
    4fc8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    4fcc:	e0fffe17 	ldw	r3,-8(fp)
    4fd0:	e0bffc17 	ldw	r2,-16(fp)
    4fd4:	10fff01e 	bne	r2,r3,4f98 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    4fd8:	e03fff15 	stw	zero,-4(fp)
    4fdc:	e0bfff17 	ldw	r2,-4(fp)
}
    4fe0:	e037883a 	mov	sp,fp
    4fe4:	dfc00117 	ldw	ra,4(sp)
    4fe8:	df000017 	ldw	fp,0(sp)
    4fec:	dec00204 	addi	sp,sp,8
    4ff0:	f800283a 	ret

00004ff4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    4ff4:	defffa04 	addi	sp,sp,-24
    4ff8:	dfc00515 	stw	ra,20(sp)
    4ffc:	df000415 	stw	fp,16(sp)
    5000:	df000404 	addi	fp,sp,16
    5004:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    5008:	00800034 	movhi	r2,0
    500c:	109c1804 	addi	r2,r2,28768
    5010:	10800017 	ldw	r2,0(r2)
    5014:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    5018:	00003306 	br	50e8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    501c:	e0bffd17 	ldw	r2,-12(fp)
    5020:	11000217 	ldw	r4,8(r2)
    5024:	00002d80 	call	2d8 <strlen>
    5028:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    502c:	e0bffd17 	ldw	r2,-12(fp)
    5030:	10c00217 	ldw	r3,8(r2)
    5034:	e0bffc17 	ldw	r2,-16(fp)
    5038:	1885883a 	add	r2,r3,r2
    503c:	10bfffc4 	addi	r2,r2,-1
    5040:	10800003 	ldbu	r2,0(r2)
    5044:	10803fcc 	andi	r2,r2,255
    5048:	1080201c 	xori	r2,r2,128
    504c:	10bfe004 	addi	r2,r2,-128
    5050:	10800bd8 	cmpnei	r2,r2,47
    5054:	1000031e 	bne	r2,zero,5064 <alt_find_file+0x70>
    {
      len -= 1;
    5058:	e0bffc17 	ldw	r2,-16(fp)
    505c:	10bfffc4 	addi	r2,r2,-1
    5060:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    5064:	e0bffc17 	ldw	r2,-16(fp)
    5068:	1007883a 	mov	r3,r2
    506c:	e0bffe17 	ldw	r2,-8(fp)
    5070:	1885883a 	add	r2,r3,r2
    5074:	10800003 	ldbu	r2,0(r2)
    5078:	10803fcc 	andi	r2,r2,255
    507c:	1080201c 	xori	r2,r2,128
    5080:	10bfe004 	addi	r2,r2,-128
    5084:	10800be0 	cmpeqi	r2,r2,47
    5088:	10000a1e 	bne	r2,zero,50b4 <alt_find_file+0xc0>
    508c:	e0bffc17 	ldw	r2,-16(fp)
    5090:	1007883a 	mov	r3,r2
    5094:	e0bffe17 	ldw	r2,-8(fp)
    5098:	1885883a 	add	r2,r3,r2
    509c:	10800003 	ldbu	r2,0(r2)
    50a0:	10803fcc 	andi	r2,r2,255
    50a4:	1080201c 	xori	r2,r2,128
    50a8:	10bfe004 	addi	r2,r2,-128
    50ac:	1004c03a 	cmpne	r2,r2,zero
    50b0:	10000a1e 	bne	r2,zero,50dc <alt_find_file+0xe8>
    50b4:	e0bffd17 	ldw	r2,-12(fp)
    50b8:	11000217 	ldw	r4,8(r2)
    50bc:	e1bffc17 	ldw	r6,-16(fp)
    50c0:	e17ffe17 	ldw	r5,-8(fp)
    50c4:	00052300 	call	5230 <memcmp>
    50c8:	1004c03a 	cmpne	r2,r2,zero
    50cc:	1000031e 	bne	r2,zero,50dc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    50d0:	e0bffd17 	ldw	r2,-12(fp)
    50d4:	e0bfff15 	stw	r2,-4(fp)
    50d8:	00000806 	br	50fc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    50dc:	e0bffd17 	ldw	r2,-12(fp)
    50e0:	10800017 	ldw	r2,0(r2)
    50e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    50e8:	00c00034 	movhi	r3,0
    50ec:	18dc1804 	addi	r3,r3,28768
    50f0:	e0bffd17 	ldw	r2,-12(fp)
    50f4:	10ffc91e 	bne	r2,r3,501c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    50f8:	e03fff15 	stw	zero,-4(fp)
    50fc:	e0bfff17 	ldw	r2,-4(fp)
}
    5100:	e037883a 	mov	sp,fp
    5104:	dfc00117 	ldw	ra,4(sp)
    5108:	df000017 	ldw	fp,0(sp)
    510c:	dec00204 	addi	sp,sp,8
    5110:	f800283a 	ret

00005114 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    5114:	defffa04 	addi	sp,sp,-24
    5118:	dfc00515 	stw	ra,20(sp)
    511c:	df000415 	stw	fp,16(sp)
    5120:	dc000315 	stw	r16,12(sp)
    5124:	df000304 	addi	fp,sp,12
    5128:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    512c:	00bffa04 	movi	r2,-24
    5130:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    5134:	e03ffe15 	stw	zero,-8(fp)
    5138:	00002006 	br	51bc <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    513c:	e13ffe17 	ldw	r4,-8(fp)
    5140:	04000034 	movhi	r16,0
    5144:	84179c04 	addi	r16,r16,24176
    5148:	01400304 	movi	r5,12
    514c:	0002b680 	call	2b68 <__mulsi3>
    5150:	1405883a 	add	r2,r2,r16
    5154:	10800017 	ldw	r2,0(r2)
    5158:	1004c03a 	cmpne	r2,r2,zero
    515c:	1000141e 	bne	r2,zero,51b0 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    5160:	e13ffe17 	ldw	r4,-8(fp)
    5164:	04000034 	movhi	r16,0
    5168:	84179c04 	addi	r16,r16,24176
    516c:	01400304 	movi	r5,12
    5170:	0002b680 	call	2b68 <__mulsi3>
    5174:	1407883a 	add	r3,r2,r16
    5178:	e0bfff17 	ldw	r2,-4(fp)
    517c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    5180:	00800034 	movhi	r2,0
    5184:	109c1c04 	addi	r2,r2,28784
    5188:	10c00017 	ldw	r3,0(r2)
    518c:	e0bffe17 	ldw	r2,-8(fp)
    5190:	1880040e 	bge	r3,r2,51a4 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    5194:	00c00034 	movhi	r3,0
    5198:	18dc1c04 	addi	r3,r3,28784
    519c:	e0bffe17 	ldw	r2,-8(fp)
    51a0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    51a4:	e0bffe17 	ldw	r2,-8(fp)
    51a8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    51ac:	00000606 	br	51c8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    51b0:	e0bffe17 	ldw	r2,-8(fp)
    51b4:	10800044 	addi	r2,r2,1
    51b8:	e0bffe15 	stw	r2,-8(fp)
    51bc:	e0bffe17 	ldw	r2,-8(fp)
    51c0:	10800810 	cmplti	r2,r2,32
    51c4:	103fdd1e 	bne	r2,zero,513c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    51c8:	e0bffd17 	ldw	r2,-12(fp)
}
    51cc:	e037883a 	mov	sp,fp
    51d0:	dfc00217 	ldw	ra,8(sp)
    51d4:	df000117 	ldw	fp,4(sp)
    51d8:	dc000017 	ldw	r16,0(sp)
    51dc:	dec00304 	addi	sp,sp,12
    51e0:	f800283a 	ret

000051e4 <atexit>:
    51e4:	200b883a 	mov	r5,r4
    51e8:	000d883a 	mov	r6,zero
    51ec:	0009883a 	mov	r4,zero
    51f0:	000f883a 	mov	r7,zero
    51f4:	00052a41 	jmpi	52a4 <__register_exitproc>

000051f8 <exit>:
    51f8:	defffe04 	addi	sp,sp,-8
    51fc:	000b883a 	mov	r5,zero
    5200:	dc000015 	stw	r16,0(sp)
    5204:	dfc00115 	stw	ra,4(sp)
    5208:	2021883a 	mov	r16,r4
    520c:	00053dc0 	call	53dc <__call_exitprocs>
    5210:	00800034 	movhi	r2,0
    5214:	109c1504 	addi	r2,r2,28756
    5218:	11000017 	ldw	r4,0(r2)
    521c:	20800f17 	ldw	r2,60(r4)
    5220:	10000126 	beq	r2,zero,5228 <exit+0x30>
    5224:	103ee83a 	callr	r2
    5228:	8009883a 	mov	r4,r16
    522c:	00055cc0 	call	55cc <_exit>

00005230 <memcmp>:
    5230:	00c000c4 	movi	r3,3
    5234:	1980032e 	bgeu	r3,r6,5244 <memcmp+0x14>
    5238:	2144b03a 	or	r2,r4,r5
    523c:	10c4703a 	and	r2,r2,r3
    5240:	10000f26 	beq	r2,zero,5280 <memcmp+0x50>
    5244:	31ffffc4 	addi	r7,r6,-1
    5248:	3000061e 	bne	r6,zero,5264 <memcmp+0x34>
    524c:	00000a06 	br	5278 <memcmp+0x48>
    5250:	39ffffc4 	addi	r7,r7,-1
    5254:	00bfffc4 	movi	r2,-1
    5258:	21000044 	addi	r4,r4,1
    525c:	29400044 	addi	r5,r5,1
    5260:	38800526 	beq	r7,r2,5278 <memcmp+0x48>
    5264:	20c00003 	ldbu	r3,0(r4)
    5268:	28800003 	ldbu	r2,0(r5)
    526c:	18bff826 	beq	r3,r2,5250 <memcmp+0x20>
    5270:	1885c83a 	sub	r2,r3,r2
    5274:	f800283a 	ret
    5278:	0005883a 	mov	r2,zero
    527c:	f800283a 	ret
    5280:	180f883a 	mov	r7,r3
    5284:	20c00017 	ldw	r3,0(r4)
    5288:	28800017 	ldw	r2,0(r5)
    528c:	18bfed1e 	bne	r3,r2,5244 <memcmp+0x14>
    5290:	31bfff04 	addi	r6,r6,-4
    5294:	21000104 	addi	r4,r4,4
    5298:	29400104 	addi	r5,r5,4
    529c:	39bff936 	bltu	r7,r6,5284 <memcmp+0x54>
    52a0:	003fe806 	br	5244 <memcmp+0x14>

000052a4 <__register_exitproc>:
    52a4:	defffa04 	addi	sp,sp,-24
    52a8:	00800034 	movhi	r2,0
    52ac:	109c1504 	addi	r2,r2,28756
    52b0:	dc000015 	stw	r16,0(sp)
    52b4:	14000017 	ldw	r16,0(r2)
    52b8:	dd000415 	stw	r20,16(sp)
    52bc:	2829883a 	mov	r20,r5
    52c0:	81405217 	ldw	r5,328(r16)
    52c4:	dcc00315 	stw	r19,12(sp)
    52c8:	dc800215 	stw	r18,8(sp)
    52cc:	dc400115 	stw	r17,4(sp)
    52d0:	dfc00515 	stw	ra,20(sp)
    52d4:	2023883a 	mov	r17,r4
    52d8:	3027883a 	mov	r19,r6
    52dc:	3825883a 	mov	r18,r7
    52e0:	28002526 	beq	r5,zero,5378 <__register_exitproc+0xd4>
    52e4:	29000117 	ldw	r4,4(r5)
    52e8:	008007c4 	movi	r2,31
    52ec:	11002716 	blt	r2,r4,538c <__register_exitproc+0xe8>
    52f0:	8800101e 	bne	r17,zero,5334 <__register_exitproc+0x90>
    52f4:	2105883a 	add	r2,r4,r4
    52f8:	1085883a 	add	r2,r2,r2
    52fc:	20c00044 	addi	r3,r4,1
    5300:	1145883a 	add	r2,r2,r5
    5304:	0009883a 	mov	r4,zero
    5308:	15000215 	stw	r20,8(r2)
    530c:	28c00115 	stw	r3,4(r5)
    5310:	2005883a 	mov	r2,r4
    5314:	dfc00517 	ldw	ra,20(sp)
    5318:	dd000417 	ldw	r20,16(sp)
    531c:	dcc00317 	ldw	r19,12(sp)
    5320:	dc800217 	ldw	r18,8(sp)
    5324:	dc400117 	ldw	r17,4(sp)
    5328:	dc000017 	ldw	r16,0(sp)
    532c:	dec00604 	addi	sp,sp,24
    5330:	f800283a 	ret
    5334:	29802204 	addi	r6,r5,136
    5338:	00800044 	movi	r2,1
    533c:	110e983a 	sll	r7,r2,r4
    5340:	30c04017 	ldw	r3,256(r6)
    5344:	2105883a 	add	r2,r4,r4
    5348:	1085883a 	add	r2,r2,r2
    534c:	1185883a 	add	r2,r2,r6
    5350:	19c6b03a 	or	r3,r3,r7
    5354:	14802015 	stw	r18,128(r2)
    5358:	14c00015 	stw	r19,0(r2)
    535c:	00800084 	movi	r2,2
    5360:	30c04015 	stw	r3,256(r6)
    5364:	88bfe31e 	bne	r17,r2,52f4 <__register_exitproc+0x50>
    5368:	30804117 	ldw	r2,260(r6)
    536c:	11c4b03a 	or	r2,r2,r7
    5370:	30804115 	stw	r2,260(r6)
    5374:	003fdf06 	br	52f4 <__register_exitproc+0x50>
    5378:	00800074 	movhi	r2,1
    537c:	10a30804 	addi	r2,r2,-29664
    5380:	100b883a 	mov	r5,r2
    5384:	80805215 	stw	r2,328(r16)
    5388:	003fd606 	br	52e4 <__register_exitproc+0x40>
    538c:	00800034 	movhi	r2,0
    5390:	10800004 	addi	r2,r2,0
    5394:	1000021e 	bne	r2,zero,53a0 <__register_exitproc+0xfc>
    5398:	013fffc4 	movi	r4,-1
    539c:	003fdc06 	br	5310 <__register_exitproc+0x6c>
    53a0:	01006404 	movi	r4,400
    53a4:	103ee83a 	callr	r2
    53a8:	1007883a 	mov	r3,r2
    53ac:	103ffa26 	beq	r2,zero,5398 <__register_exitproc+0xf4>
    53b0:	80805217 	ldw	r2,328(r16)
    53b4:	180b883a 	mov	r5,r3
    53b8:	18000115 	stw	zero,4(r3)
    53bc:	18800015 	stw	r2,0(r3)
    53c0:	80c05215 	stw	r3,328(r16)
    53c4:	18006215 	stw	zero,392(r3)
    53c8:	18006315 	stw	zero,396(r3)
    53cc:	0009883a 	mov	r4,zero
    53d0:	883fc826 	beq	r17,zero,52f4 <__register_exitproc+0x50>
    53d4:	003fd706 	br	5334 <__register_exitproc+0x90>

000053d8 <register_fini>:
    53d8:	f800283a 	ret

000053dc <__call_exitprocs>:
    53dc:	00800034 	movhi	r2,0
    53e0:	109c1504 	addi	r2,r2,28756
    53e4:	10800017 	ldw	r2,0(r2)
    53e8:	defff304 	addi	sp,sp,-52
    53ec:	df000b15 	stw	fp,44(sp)
    53f0:	d8800115 	stw	r2,4(sp)
    53f4:	00800034 	movhi	r2,0
    53f8:	10800004 	addi	r2,r2,0
    53fc:	1005003a 	cmpeq	r2,r2,zero
    5400:	d8800215 	stw	r2,8(sp)
    5404:	d8800117 	ldw	r2,4(sp)
    5408:	dd400815 	stw	r21,32(sp)
    540c:	dd000715 	stw	r20,28(sp)
    5410:	10805204 	addi	r2,r2,328
    5414:	dfc00c15 	stw	ra,48(sp)
    5418:	ddc00a15 	stw	r23,40(sp)
    541c:	dd800915 	stw	r22,36(sp)
    5420:	dcc00615 	stw	r19,24(sp)
    5424:	dc800515 	stw	r18,20(sp)
    5428:	dc400415 	stw	r17,16(sp)
    542c:	dc000315 	stw	r16,12(sp)
    5430:	282b883a 	mov	r21,r5
    5434:	2039883a 	mov	fp,r4
    5438:	d8800015 	stw	r2,0(sp)
    543c:	2829003a 	cmpeq	r20,r5,zero
    5440:	d8800117 	ldw	r2,4(sp)
    5444:	14405217 	ldw	r17,328(r2)
    5448:	88001026 	beq	r17,zero,548c <__call_exitprocs+0xb0>
    544c:	ddc00017 	ldw	r23,0(sp)
    5450:	88800117 	ldw	r2,4(r17)
    5454:	8c802204 	addi	r18,r17,136
    5458:	143fffc4 	addi	r16,r2,-1
    545c:	80000916 	blt	r16,zero,5484 <__call_exitprocs+0xa8>
    5460:	05bfffc4 	movi	r22,-1
    5464:	a000151e 	bne	r20,zero,54bc <__call_exitprocs+0xe0>
    5468:	8409883a 	add	r4,r16,r16
    546c:	2105883a 	add	r2,r4,r4
    5470:	1485883a 	add	r2,r2,r18
    5474:	10c02017 	ldw	r3,128(r2)
    5478:	a8c01126 	beq	r21,r3,54c0 <__call_exitprocs+0xe4>
    547c:	843fffc4 	addi	r16,r16,-1
    5480:	85bff81e 	bne	r16,r22,5464 <__call_exitprocs+0x88>
    5484:	d8800217 	ldw	r2,8(sp)
    5488:	10003126 	beq	r2,zero,5550 <__call_exitprocs+0x174>
    548c:	dfc00c17 	ldw	ra,48(sp)
    5490:	df000b17 	ldw	fp,44(sp)
    5494:	ddc00a17 	ldw	r23,40(sp)
    5498:	dd800917 	ldw	r22,36(sp)
    549c:	dd400817 	ldw	r21,32(sp)
    54a0:	dd000717 	ldw	r20,28(sp)
    54a4:	dcc00617 	ldw	r19,24(sp)
    54a8:	dc800517 	ldw	r18,20(sp)
    54ac:	dc400417 	ldw	r17,16(sp)
    54b0:	dc000317 	ldw	r16,12(sp)
    54b4:	dec00d04 	addi	sp,sp,52
    54b8:	f800283a 	ret
    54bc:	8409883a 	add	r4,r16,r16
    54c0:	88c00117 	ldw	r3,4(r17)
    54c4:	2105883a 	add	r2,r4,r4
    54c8:	1445883a 	add	r2,r2,r17
    54cc:	18ffffc4 	addi	r3,r3,-1
    54d0:	11800217 	ldw	r6,8(r2)
    54d4:	1c001526 	beq	r3,r16,552c <__call_exitprocs+0x150>
    54d8:	10000215 	stw	zero,8(r2)
    54dc:	303fe726 	beq	r6,zero,547c <__call_exitprocs+0xa0>
    54e0:	00c00044 	movi	r3,1
    54e4:	1c06983a 	sll	r3,r3,r16
    54e8:	90804017 	ldw	r2,256(r18)
    54ec:	8cc00117 	ldw	r19,4(r17)
    54f0:	1884703a 	and	r2,r3,r2
    54f4:	10001426 	beq	r2,zero,5548 <__call_exitprocs+0x16c>
    54f8:	90804117 	ldw	r2,260(r18)
    54fc:	1884703a 	and	r2,r3,r2
    5500:	10000c1e 	bne	r2,zero,5534 <__call_exitprocs+0x158>
    5504:	2105883a 	add	r2,r4,r4
    5508:	1485883a 	add	r2,r2,r18
    550c:	11400017 	ldw	r5,0(r2)
    5510:	e009883a 	mov	r4,fp
    5514:	303ee83a 	callr	r6
    5518:	88800117 	ldw	r2,4(r17)
    551c:	98bfc81e 	bne	r19,r2,5440 <__call_exitprocs+0x64>
    5520:	b8800017 	ldw	r2,0(r23)
    5524:	147fd526 	beq	r2,r17,547c <__call_exitprocs+0xa0>
    5528:	003fc506 	br	5440 <__call_exitprocs+0x64>
    552c:	8c000115 	stw	r16,4(r17)
    5530:	003fea06 	br	54dc <__call_exitprocs+0x100>
    5534:	2105883a 	add	r2,r4,r4
    5538:	1485883a 	add	r2,r2,r18
    553c:	11000017 	ldw	r4,0(r2)
    5540:	303ee83a 	callr	r6
    5544:	003ff406 	br	5518 <__call_exitprocs+0x13c>
    5548:	303ee83a 	callr	r6
    554c:	003ff206 	br	5518 <__call_exitprocs+0x13c>
    5550:	88800117 	ldw	r2,4(r17)
    5554:	1000081e 	bne	r2,zero,5578 <__call_exitprocs+0x19c>
    5558:	89000017 	ldw	r4,0(r17)
    555c:	20000726 	beq	r4,zero,557c <__call_exitprocs+0x1a0>
    5560:	b9000015 	stw	r4,0(r23)
    5564:	8809883a 	mov	r4,r17
    5568:	00000000 	call	0 <__alt_mem_sdram>
    556c:	bc400017 	ldw	r17,0(r23)
    5570:	883fb71e 	bne	r17,zero,5450 <__call_exitprocs+0x74>
    5574:	003fc506 	br	548c <__call_exitprocs+0xb0>
    5578:	89000017 	ldw	r4,0(r17)
    557c:	882f883a 	mov	r23,r17
    5580:	2023883a 	mov	r17,r4
    5584:	883fb21e 	bne	r17,zero,5450 <__call_exitprocs+0x74>
    5588:	003fc006 	br	548c <__call_exitprocs+0xb0>

0000558c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    558c:	defffd04 	addi	sp,sp,-12
    5590:	df000215 	stw	fp,8(sp)
    5594:	df000204 	addi	fp,sp,8
    5598:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    559c:	e0bfff17 	ldw	r2,-4(fp)
    55a0:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    55a4:	e0bffe17 	ldw	r2,-8(fp)
    55a8:	1005003a 	cmpeq	r2,r2,zero
    55ac:	1000021e 	bne	r2,zero,55b8 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    55b0:	002af070 	cmpltui	zero,zero,43969
    55b4:	00000106 	br	55bc <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    55b8:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    55bc:	e037883a 	mov	sp,fp
    55c0:	df000017 	ldw	fp,0(sp)
    55c4:	dec00104 	addi	sp,sp,4
    55c8:	f800283a 	ret

000055cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    55cc:	defffd04 	addi	sp,sp,-12
    55d0:	dfc00215 	stw	ra,8(sp)
    55d4:	df000115 	stw	fp,4(sp)
    55d8:	df000104 	addi	fp,sp,4
    55dc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    55e0:	e13fff17 	ldw	r4,-4(fp)
    55e4:	000558c0 	call	558c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    55e8:	003fff06 	br	55e8 <_exit+0x1c>
    55ec:	000053d8 	cmpnei	zero,zero,335
