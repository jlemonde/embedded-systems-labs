
lab0_testshw.elf:     file format elf32-littlenios2
lab0_testshw.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000001f4 memsz 0x000001f4 flags r-x
    LOAD off    0x00001214 vaddr 0x00000214 paddr 0x00000218 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x0000121c vaddr 0x0000021c paddr 0x0000021c align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000001dc  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  000001fc  000001fc  000011fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00000214  00000218  00001214  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  0000021c  0000021c  0000121c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000168  00000000  00000000  00001240  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 000001bd  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000009df  00000000  00000000  00001565  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000051b  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000015bd  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000188  00000000  00000000  00003a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000005cd  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000011b  00000000  00000000  00004171  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  0000428c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  000042a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000050ba  2**0
                  CONTENTS, READONLY
 17 .cpu          00000019  00000000  00000000  000050bd  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000050d6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000050d7  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000050d8  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000050dc  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000050e4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000050ef  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000050fa  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000019  00000000  00000000  00005105  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000006d  00000000  00000000  0000511e  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074e72  00000000  00000000  0000518b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
000001fc l    d  .rodata	00000000 .rodata
00000214 l    d  .rwdata	00000000 .rwdata
0000021c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000074 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000100 g     F .text	0000002c alt_main
00000218 g       *ABS*	00000000 __flash_rwdata_start
00800000 g       *ABS*	00000000 __alt_mem_sram
0000012c g     F .text	00000038 alt_putstr
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000220 g     O .bss	00000004 alt_argv
00008214 g       *ABS*	00000000 _gp
00000228 g       *ABS*	00000000 __bss_end
000001cc g     F .text	00000004 alt_dcache_flush_all
00000218 g       *ABS*	00000000 __ram_rwdata_end
00888000 g       *ABS*	00000000 __alt_mem_onchip_memory
00000214 g       *ABS*	00000000 __ram_rodata_end
00000214 g     O .rwdata	00000004 jtag_uart_0
00000228 g       *ABS*	00000000 end
00800000 g       *ABS*	00000000 __alt_stack_pointer
00000198 g     F .text	00000034 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
00000164 g     F .text	00000014 alt_sys_init
00000214 g       *ABS*	00000000 __ram_rwdata_start
000001fc g       *ABS*	00000000 __ram_rodata_start
00000228 g       *ABS*	00000000 __alt_stack_base
0000021c g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000018 main
00000224 g     O .bss	00000004 alt_envp
000001fc g       *ABS*	00000000 __flash_rodata_start
00000178 g     F .text	00000020 alt_irq_init
0000021c g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000218 g       *ABS*	00000000 _edata
00000228 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000001d4 g     F .text	00000008 altera_nios2_qsys_irq_init
0000000c g       .entry	00000000 exit
00800000 g       *ABS*	00000000 __alt_data_end
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000000c g       .entry	00000000 _exit
000001dc g     F .text	00000020 strlen
000001d0 g     F .text	00000004 alt_icache_flush_all
00000094 g     F .text	0000006c alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a08514 	ori	gp,gp,33300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10808714 	ori	r2,r2,540

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c08a14 	ori	r3,r3,552

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00000940 	call	94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00001000 	call	100 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
  5c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  60:	01000034 	movhi	r4,0
  64:	21007f04 	addi	r4,r4,508
#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{ 
  68:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  6c:	000012c0 	call	12c <alt_putstr>
  70:	003fff06 	br	70 <main+0x14>

00000074 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  74:	2900051e 	bne	r5,r4,8c <alt_load_section+0x18>
  78:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
  7c:	20800017 	ldw	r2,0(r4)
  80:	21000104 	addi	r4,r4,4
  84:	28800015 	stw	r2,0(r5)
  88:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8c:	29bffb1e 	bne	r5,r6,7c <alt_load_section+0x8>
  90:	f800283a 	ret

00000094 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  94:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  98:	01000034 	movhi	r4,0
  9c:	21008604 	addi	r4,r4,536
  a0:	01400034 	movhi	r5,0
  a4:	29408504 	addi	r5,r5,532
  a8:	01800034 	movhi	r6,0
  ac:	31808604 	addi	r6,r6,536
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  b0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  b4:	00000740 	call	74 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  b8:	01000034 	movhi	r4,0
  bc:	21000804 	addi	r4,r4,32
  c0:	01400034 	movhi	r5,0
  c4:	29400804 	addi	r5,r5,32
  c8:	01800034 	movhi	r6,0
  cc:	31800804 	addi	r6,r6,32
  d0:	00000740 	call	74 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  d4:	01000034 	movhi	r4,0
  d8:	21007f04 	addi	r4,r4,508
  dc:	01400034 	movhi	r5,0
  e0:	29407f04 	addi	r5,r5,508
  e4:	01800034 	movhi	r6,0
  e8:	31808504 	addi	r6,r6,532
  ec:	00000740 	call	74 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  f0:	00001cc0 	call	1cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  f4:	dfc00017 	ldw	ra,0(sp)
  f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  fc:	00001d01 	jmpi	1d0 <alt_icache_flush_all>

00000100 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 104:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 108:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10c:	00001780 	call	178 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 110:	00001640 	call	164 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 114:	d1200217 	ldw	r4,-32760(gp)
 118:	d1600317 	ldw	r5,-32756(gp)
 11c:	d1a00417 	ldw	r6,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 120:	dfc00017 	ldw	ra,0(sp)
 124:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 128:	000005c1 	jmpi	5c <main>

0000012c <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 12c:	defffe04 	addi	sp,sp,-8
 130:	dc000015 	stw	r16,0(sp)
 134:	dfc00115 	stw	ra,4(sp)
 138:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 13c:	00001dc0 	call	1dc <strlen>
 140:	800b883a 	mov	r5,r16
 144:	100d883a 	mov	r6,r2
 148:	01000034 	movhi	r4,0
 14c:	21008504 	addi	r4,r4,532
 150:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
 154:	dfc00117 	ldw	ra,4(sp)
 158:	dc000017 	ldw	r16,0(sp)
 15c:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 160:	00001981 	jmpi	198 <altera_avalon_jtag_uart_write>

00000164 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
 164:	00c00044 	movi	r3,1
 168:	00802274 	movhi	r2,137
 16c:	10840004 	addi	r2,r2,4096
 170:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
 174:	f800283a 	ret

00000178 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 178:	deffff04 	addi	sp,sp,-4
 17c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
 180:	00001d40 	call	1d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 184:	00800044 	movi	r2,1
 188:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 18c:	dfc00017 	ldw	ra,0(sp)
 190:	dec00104 	addi	sp,sp,4
 194:	f800283a 	ret

00000198 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 198:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
 19c:	298f883a 	add	r7,r5,r6
 1a0:	20c00104 	addi	r3,r4,4
 1a4:	00000606 	br	1c0 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 1a8:	18800037 	ldwio	r2,0(r3)
 1ac:	10bfffec 	andhi	r2,r2,65535
 1b0:	10000326 	beq	r2,zero,1c0 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 1b4:	28800007 	ldb	r2,0(r5)
 1b8:	29400044 	addi	r5,r5,1
 1bc:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 1c0:	29fff936 	bltu	r5,r7,1a8 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 1c4:	3005883a 	mov	r2,r6
 1c8:	f800283a 	ret

000001cc <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1cc:	f800283a 	ret

000001d0 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1d0:	f800283a 	ret

000001d4 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 1d4:	000170fa 	wrctl	ienable,zero
}
 1d8:	f800283a 	ret

000001dc <strlen>:
 1dc:	20800007 	ldb	r2,0(r4)
 1e0:	10000526 	beq	r2,zero,1f8 <strlen+0x1c>
 1e4:	2007883a 	mov	r3,r4
 1e8:	18c00044 	addi	r3,r3,1
 1ec:	18800007 	ldb	r2,0(r3)
 1f0:	103ffd1e 	bne	r2,zero,1e8 <strlen+0xc>
 1f4:	1905c83a 	sub	r2,r3,r4
 1f8:	f800283a 	ret
