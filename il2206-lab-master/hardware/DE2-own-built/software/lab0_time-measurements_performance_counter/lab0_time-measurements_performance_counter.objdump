
lab0_time-measurements_performance_counter.elf:     file format elf32-littlenios2
lab0_time-measurements_performance_counter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000d5a4 memsz 0x0000d5a4 flags r-x
    LOAD off    0x0000e5c4 vaddr 0x0080d5c4 paddr 0x0080f020 align 2**12
         filesz 0x00001a5c memsz 0x00001a5c flags rw-
    LOAD off    0x00010a7c vaddr 0x00810a7c paddr 0x00810a7c align 2**12
         filesz 0x00000000 memsz 0x00004304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d070  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a0  0080d224  0080d224  0000e224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a5c  0080d5c4  0080f020  0000e5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00004304  00810a7c  00810a7c  00010a7c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d78  00000000  00000000  00010048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000157a  00000000  00000000  00010dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024987  00000000  00000000  0001233a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008526  00000000  00000000  00036cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00014947  00000000  00000000  0003f1e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a28  00000000  00000000  00053b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022c2  00000000  00000000  00055558  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c311  00000000  00000000  0005781a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00063b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b18  00000000  00000000  00063b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006789e  2**0
                  CONTENTS, READONLY
 18 .cpu          00000019  00000000  00000000  000678a1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000678ba  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000678bb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000678bc  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000678c0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000678c4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000678c8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000678d3  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000678de  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000019  00000000  00000000  000678e9  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000054  00000000  00000000  00067902  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000712d3  00000000  00000000  00067956  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080d224 l    d  .rodata	00000000 .rodata
0080d5c4 l    d  .rwdata	00000000 .rwdata
00810a7c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 functions.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00800c9c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
008016b0 l     F .text	00000058 __sprint_r
0080d406 l     O .rodata	00000010 blanks.3452
0080d3f6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080372c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00805154 l     F .text	00000058 std
00805260 l     F .text	00000008 __fp_lock
00805268 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0080d5c4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0080efec l     O .rwdata	00000004 charset
0080d43c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080d584 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00809688 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0080a724 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080a784 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080a888 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080a9ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080aa8c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080abec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080ae1c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080f010 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080b0d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080df80 l     O .rwdata	00001060 jtag_uart_0
0080b1fc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080b43c l     F .text	00000228 altera_avalon_jtag_uart_irq
0080b664 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080be68 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080c18c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080c59c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080c6ec l     F .text	000000f8 alt_file_locked
0080c970 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080d00c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080d1c0 l     F .text	00000040 alt_sim_halt
00806f44 g     F .text	00000094 _mprec_log10
00807030 g     F .text	00000088 __any_on
0080885c g     F .text	00000070 _isatty_r
0080d55c g     O .rodata	00000028 __mprec_tinytens
0080ac4c g     F .text	0000006c alt_main
00814af0 g     O .bss	00000100 alt_irq
008088cc g     F .text	00000078 _lseek_r
0080f020 g       *ABS*	00000000 __flash_rwdata_start
00809f50 g     F .text	00000088 __eqdf2
00814d80 g       *ABS*	00000000 __alt_heap_start
00801638 g     F .text	00000044 printf
00000000 g       *ABS*	00000000 __alt_mem_sram
008082a0 g     F .text	00000068 __sseek
008051bc g     F .text	000000a4 __sinit
0080be44 g     F .text	00000024 alt_get_cpu_freq
00805ec8 g     F .text	00000084 _setlocale_r
008052bc g     F .text	0000009c __sfmoreglue
0080acd8 g     F .text	00000020 __malloc_unlock
008006ec g     F .text	00000174 __divsf3
00810ab8 g     O .bss	00000004 altera_avalon_timer_ts_freq
008069c0 g     F .text	000000e0 memmove
008052ac g     F .text	00000010 _cleanup
008070b8 g     F .text	000000bc _Balloc
0080a060 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008087e8 g     F .text	00000074 _fstat_r
00810aa4 g     O .bss	00000004 errno
00800c64 g     F .text	00000038 __make_dp
008001f0 g     F .text	00000064 microseconds
00810aac g     O .bss	00000004 alt_argv
00816fe0 g       *ABS*	00000000 _gp
0080de00 g     O .rwdata	00000180 alt_fd_list
0080cb94 g     F .text	00000094 alt_find_dev
00806920 g     F .text	000000a0 memcpy
008052a0 g     F .text	0000000c _cleanup_r
0080a1f8 g     F .text	000000f8 __floatsidf
0080c674 g     F .text	00000078 alt_io_redirect
0080a170 g     F .text	00000088 __ltdf2
0080d224 g       *ABS*	00000000 __DTOR_END__
00806e94 g     F .text	000000b0 __ratio
0080b87c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080167c g     F .text	00000034 _printf_r
00800dd8 g     F .text	00000008 __udivsi3
0080a8e8 g     F .text	000000c4 isatty
0080d46c g     O .rodata	000000c8 __mprec_tens
00805ea4 g     F .text	00000008 __locale_charset
00810a98 g     O .bss	00000004 __malloc_top_pad
0080bde4 g     F .text	00000040 perf_get_num_starts
00810a7c g     O .bss	00000004 time_1
0080efe8 g     O .rwdata	00000004 __mb_cur_max
00805eac g     F .text	0000000c _localeconv_r
0080781c g     F .text	0000003c __i2b
00805888 g     F .text	0000049c __sfvwrite_r
00808228 g     F .text	00000070 _sbrk_r
00808944 g     F .text	00000078 _read_r
0080d9c4 g     O .rwdata	0000000c __lc_ctype
0080f008 g     O .rwdata	00000004 alt_max_fd
008014c8 g     F .text	00000138 __unpack_d
008086c4 g     F .text	00000110 _fclose_r
00805120 g     F .text	00000034 fflush
00810a9c g     O .bss	00000004 __malloc_max_sbrked_mem
008008f8 g     F .text	00000054 __extendsfdf2
00809b18 g     F .text	00000074 __adddf3
00806d74 g     F .text	00000120 __b2d
00809028 g     F .text	00000660 __umoddi3
0080aaf8 g     F .text	000000f4 lseek
0080efe4 g     O .rwdata	00000004 _global_impure_ptr
00807bc4 g     F .text	000005f4 _realloc_r
00814d80 g       *ABS*	00000000 __bss_end
0080c4a4 g     F .text	000000f8 alt_iic_isr_register
0080ca68 g     F .text	0000010c alt_tick
008089bc g     F .text	0000066c __udivdi3
0080d534 g     O .rodata	00000028 __mprec_bigtens
00807aa4 g     F .text	00000120 __s2b
0080a3c8 g     F .text	00000194 __floatunsidf
00806c94 g     F .text	00000060 __mcmp
00805288 g     F .text	00000018 __fp_lock_all
0080c45c g     F .text	00000048 alt_ic_irq_enabled
0080c9d0 g     F .text	00000098 alt_alarm_stop
00810abc g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080ddd8 g     O .rwdata	00000028 alt_dev_null
008010ec g     F .text	000000c8 __unpack_f
0080c0bc g     F .text	0000001c alt_dcache_flush_all
00806b60 g     F .text	00000070 __hi0bits
0080a2f0 g     F .text	000000d8 __fixdfsi
0080f020 g       *ABS*	00000000 __ram_rwdata_end
01008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0080f000 g     O .rwdata	00000008 alt_dev_list
0080afb0 g     F .text	00000124 write
0080d5c4 g       *ABS*	00000000 __ram_rodata_end
0080a7b0 g     F .text	000000d8 fstat
0080046c g     F .text	000000a0 sumMatrix
00807984 g     F .text	00000120 __pow5mult
00810a8c g     O .bss	00000004 __nlocale_changed
00800de0 g     F .text	00000008 __umodsi3
00814d80 g       *ABS*	00000000 end
00800f8c g     F .text	00000160 __pack_f
0080b37c g     F .text	000000c0 altera_avalon_jtag_uart_init
0080d220 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080bed8 g     F .text	00000090 alt_avalon_timer_sc_init
00800f0c g     F .text	00000080 __clzsi2
0080baa0 g     F .text	00000240 altera_avalon_jtag_uart_write
008051ac g     F .text	00000004 __sfp_lock_acquire
0080683c g     F .text	000000e4 memchr
00801708 g     F .text	00001ec4 ___vfprintf_internal_r
00805574 g     F .text	00000314 _free_r
0080d010 g     F .text	000001b0 __call_exitprocs
00810a90 g     O .bss	00000004 __mlocale_changed
0080eff4 g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00810ac0 g     O .bss	00000004 _alt_tick_rate
0080747c g     F .text	0000014c __lshift
00810ac4 g     O .bss	00000004 _alt_nticks
0080acf8 g     F .text	00000124 read
0080b168 g     F .text	00000094 alt_sys_init
00800860 g     F .text	00000098 __floatsisf
0080ced8 g     F .text	00000134 __register_exitproc
008075c8 g     F .text	00000254 __multiply
0080b714 g     F .text	00000074 altera_avalon_jtag_uart_close
00801600 g     F .text	00000038 __mulsi3
0080d5c4 g       *ABS*	00000000 __ram_rwdata_start
0080d224 g       *ABS*	00000000 __ram_rodata_start
00810ac8 g     O .bss	00000028 __malloc_current_mallinfo
00807174 g     F .text	0000017c __d2b
0080b234 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080cd48 g     F .text	000000d0 alt_get_fd
0080a55c g     F .text	000000c8 __fpcmp_parts_d
00808654 g     F .text	00000070 _close_r
0080bce0 g     F .text	000000b0 perf_get_section_time
0080ce64 g     F .text	00000074 memcmp
0080b2e4 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00814d80 g       *ABS*	00000000 __alt_stack_base
0080b32c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
008035f0 g     F .text	0000013c __swsetup_r
00800a0c g     F .text	00000258 __divdf3
00805358 g     F .text	000000f0 __sfp
00806fd8 g     F .text	00000058 __copybits
0080bd90 g     F .text	00000054 perf_get_total_time
0080d9d0 g     O .rwdata	00000408 __malloc_av_
008051b8 g     F .text	00000004 __sinit_lock_release
00809b8c g     F .text	000003c4 __muldf3
00808384 g     F .text	00000060 __sread
0080d274 g     O .rodata	00000010 __thenan_sf
0080cc28 g     F .text	00000120 alt_find_file
0080c0d8 g     F .text	000000b4 alt_dev_llist_insert
0080acb8 g     F .text	00000020 __malloc_lock
0080aef4 g     F .text	000000bc sbrk
00804f24 g     F .text	000001fc _fflush_r
0080858c g     F .text	000000c8 _calloc_r
00810a7c g       *ABS*	00000000 __bss_start
00806aa0 g     F .text	00000098 memset
00800254 g     F .text	00000184 main
00810a80 g     O .bss	00000004 timer_overhead
00810ab0 g     O .bss	00000004 alt_envp
00810aa0 g     O .bss	00000004 __malloc_max_total_mem
0080b28c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00808298 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008087d4 g     F .text	00000014 fclose
00814bf0 g     O .bss	00000190 _atexit0
00803970 g     F .text	000015b4 _dtoa_r
008060fc g     F .text	00000740 _malloc_r
0080f00c g     O .rwdata	00000004 alt_errno
00805dec g     F .text	000000b8 _fwalk
00810af0 g     O .bss	00004000 matrix
00800d18 g     F .text	00000060 __divsi3
0080d284 g     O .rodata	00000014 __thenan_df
00805448 g     F .text	0000012c _malloc_trim_r
0080d224 g       *ABS*	00000000 __CTOR_END__
0080050c g     F .text	000001e0 __mulsf3
008083e4 g     F .text	000000bc strcmp
0080d224 g       *ABS*	00000000 __flash_rodata_start
0080d224 g       *ABS*	00000000 __DTOR_LIST__
00809fd8 g     F .text	00000088 __nedf2
0080b134 g     F .text	00000034 alt_irq_init
0080ae7c g     F .text	00000078 alt_release_fd
0080d298 g     O .rodata	00000100 __clz_tab
00810a94 g     O .bss	00000004 _PathLocale
0080ce18 g     F .text	00000014 atexit
00808514 g     F .text	00000078 _write_r
00805f4c g     F .text	0000001c setlocale
0080efe0 g     O .rwdata	00000004 _impure_ptr
00810aa8 g     O .bss	00000004 alt_argc
00810ab4 g     O .bss	00000004 altera_avalon_timer_ts_base
0080c250 g     F .text	00000064 _do_dtors
00810a84 g     O .bss	00000004 ticks
00800020 g       .exceptions	00000000 alt_irq_entry
00806cf4 g     F .text	00000080 __ulp
008081b8 g     F .text	00000040 __isinfd
00805270 g     F .text	00000018 __fp_unlock_all
0080eff8 g     O .rwdata	00000008 alt_fs_list
008003d8 g     F .text	00000094 initMatrix
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805eb8 g     F .text	00000010 localeconv
0080c2d0 g     F .text	00000050 alt_ic_isr_register
0080f020 g       *ABS*	00000000 _edata
00814d80 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080b788 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080c3bc g     F .text	000000a0 alt_ic_irq_disable
00808308 g     F .text	0000007c __swrite
0080eff0 g     O .rwdata	00000004 __malloc_trim_threshold
0080be24 g     F .text	00000020 alt_get_performance_counter_base
0080cb74 g     F .text	00000020 altera_nios2_qsys_irq_init
0080ce2c g     F .text	00000038 exit
00805d24 g     F .text	000000c8 _fwalk_reent
0080094c g     F .text	000000c0 __floatunsisf
008072f0 g     F .text	0000018c __mdiff
00800d78 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008051b0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080d200 g     F .text	00000020 _exit
008081f8 g     F .text	00000030 __isnand
0080bf68 g     F .text	00000154 alt_alarm_start
00800de8 g     F .text	00000124 __muldi3
00805f68 g     F .text	00000194 __smakebuf_r
008084a0 g     F .text	00000074 strlen
0080c7e4 g     F .text	0000018c open
0080a0e8 g     F .text	00000088 __gedf2
00810a88 g     O .bss	00000004 time_2
0080c2b4 g     F .text	0000001c alt_icache_flush_all
0080f014 g     O .rwdata	00000004 alt_priority_mask
0080c320 g     F .text	0000009c alt_ic_irq_enable
008035cc g     F .text	00000024 __vfprintf_internal
00809a98 g     F .text	00000080 __subdf3
00806bd0 g     F .text	000000c4 __lo0bits
0080f018 g     O .rwdata	00000008 alt_alarm_list
0080c1ec g     F .text	00000064 _do_ctors
0080a624 g     F .text	00000100 close
0080aa0c g     F .text	00000080 alt_load
008011b4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
008051b4 g     F .text	00000004 __sinit_lock_acquire
00807858 g     F .text	0000012c __multadd
00806b38 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406d14 	ori	at,at,436
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18d2bc04 	addi	r3,r3,19184
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18d2bc04 	addi	r3,r3,19184
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d69bf814 	ori	gp,gp,28640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10829f14 	ori	r2,r2,2684

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18d36014 	ori	r3,r3,19840

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080aa0c0 	call	80aa0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080ac4c0 	call	80ac4c <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <microseconds>:
alt_u32 time_1;
alt_u32 time_2;
alt_u32 timer_overhead;

float microseconds(int ticks)
{
  8001f0:	defffc04 	addi	sp,sp,-16
  8001f4:	dfc00315 	stw	ra,12(sp)
  8001f8:	df000215 	stw	fp,8(sp)
  8001fc:	dc000115 	stw	r16,4(sp)
  800200:	df000104 	addi	fp,sp,4
  800204:	e13fff15 	stw	r4,-4(fp)
  return (float) 1000000 * (float) ticks / (float) alt_get_cpu_freq();
  800208:	e13fff17 	ldw	r4,-4(fp)
  80020c:	08008600 	call	800860 <__floatsisf>
  800210:	1009883a 	mov	r4,r2
  800214:	01525d34 	movhi	r5,18804
  800218:	29490004 	addi	r5,r5,9216
  80021c:	080050c0 	call	80050c <__mulsf3>
  800220:	1021883a 	mov	r16,r2
  800224:	080be440 	call	80be44 <alt_get_cpu_freq>
  800228:	1009883a 	mov	r4,r2
  80022c:	080094c0 	call	80094c <__floatunsisf>
  800230:	8009883a 	mov	r4,r16
  800234:	100b883a 	mov	r5,r2
  800238:	08006ec0 	call	8006ec <__divsf3>
}
  80023c:	e037883a 	mov	sp,fp
  800240:	dfc00217 	ldw	ra,8(sp)
  800244:	df000117 	ldw	fp,4(sp)
  800248:	dc000017 	ldw	r16,0(sp)
  80024c:	dec00304 	addi	sp,sp,12
  800250:	f800283a 	ret

00800254 <main>:
  ticks = time_2 - time_1;
}
*/

int main ()
{
  800254:	defff504 	addi	sp,sp,-44
  800258:	dfc00a15 	stw	ra,40(sp)
  80025c:	df000915 	stw	fp,36(sp)
  800260:	df000904 	addi	fp,sp,36
  800264:	e6ffff15 	stw	sp,-4(fp)
  800268:	d805883a 	mov	r2,sp
  80026c:	e0bffe15 	stw	r2,-8(fp)

  int a;

  printf("Processor Type: %s\n", NIOS2_CPU_IMPLEMENTATION);
  800270:	01002074 	movhi	r4,129
  800274:	21348904 	addi	r4,r4,-11740
  800278:	01402074 	movhi	r5,129
  80027c:	29748e04 	addi	r5,r5,-11720
  800280:	08016380 	call	801638 <printf>

  /* Check if timer available */
  //PERF_START_MEASURING(P_COUNTER_BASE);

  /* Print frequency and period */
  printf("CPU frequency: %3.1f MHz\n", (float)alt_get_cpu_freq()/1000000.0);
  800284:	080be440 	call	80be44 <alt_get_cpu_freq>
  800288:	1009883a 	mov	r4,r2
  80028c:	080094c0 	call	80094c <__floatunsisf>
  800290:	1009883a 	mov	r4,r2
  800294:	08008f80 	call	8008f8 <__extendsfdf2>
  800298:	100b883a 	mov	r5,r2
  80029c:	180d883a 	mov	r6,r3
  8002a0:	2809883a 	mov	r4,r5
  8002a4:	300b883a 	mov	r5,r6
  8002a8:	000d883a 	mov	r6,zero
  8002ac:	01d04bf4 	movhi	r7,16687
  8002b0:	39e12004 	addi	r7,r7,-31616
  8002b4:	0800a0c0 	call	800a0c <__divdf3>
  8002b8:	1009883a 	mov	r4,r2
  8002bc:	180b883a 	mov	r5,r3
  8002c0:	2005883a 	mov	r2,r4
  8002c4:	2807883a 	mov	r3,r5
  8002c8:	01002074 	movhi	r4,129
  8002cc:	21349004 	addi	r4,r4,-11712
  8002d0:	100b883a 	mov	r5,r2
  8002d4:	180d883a 	mov	r6,r3
  8002d8:	08016380 	call	801638 <printf>
  printf("CPU period:    %f ms\n\n", 1000.0/(float)alt_get_cpu_freq());
  8002dc:	080be440 	call	80be44 <alt_get_cpu_freq>
  8002e0:	1009883a 	mov	r4,r2
  8002e4:	080094c0 	call	80094c <__floatunsisf>
  8002e8:	1009883a 	mov	r4,r2
  8002ec:	08008f80 	call	8008f8 <__extendsfdf2>
  8002f0:	100f883a 	mov	r7,r2
  8002f4:	1811883a 	mov	r8,r3
  8002f8:	0009883a 	mov	r4,zero
  8002fc:	015023f4 	movhi	r5,16527
  800300:	29500004 	addi	r5,r5,16384
  800304:	380d883a 	mov	r6,r7
  800308:	400f883a 	mov	r7,r8
  80030c:	0800a0c0 	call	800a0c <__divdf3>
  800310:	1009883a 	mov	r4,r2
  800314:	180b883a 	mov	r5,r3
  800318:	2005883a 	mov	r2,r4
  80031c:	2807883a 	mov	r3,r5
  800320:	01002074 	movhi	r4,129
  800324:	21349704 	addi	r4,r4,-11684
  800328:	100b883a 	mov	r5,r2
  80032c:	180d883a 	mov	r6,r3
  800330:	08016380 	call	801638 <printf>

  /* Calculate Timer Overhead */
  // Average of 10 measurements */
  int i;
  PERF_RESET(P_COUNTER_BASE);
  800334:	00c04074 	movhi	r3,257
  800338:	18c40004 	addi	r3,r3,4096
  80033c:	00800044 	movi	r2,1
  800340:	18800035 	stwio	r2,0(r3)
  PERF_START_MEASURING(P_COUNTER_BASE);
  800344:	00804074 	movhi	r2,257
  800348:	10840104 	addi	r2,r2,4100
  80034c:	10000035 	stwio	zero,0(r2)
  for (i = 0; i < 100; i++) {
  800350:	e03ffb15 	stw	zero,-20(fp)
  800354:	00000906 	br	80037c <main+0x128>
	  PERF_BEGIN(P_COUNTER_BASE, 0);
  800358:	00804074 	movhi	r2,257
  80035c:	10840104 	addi	r2,r2,4100
  800360:	10000035 	stwio	zero,0(r2)
	  PERF_END(P_COUNTER_BASE, 0);
  800364:	00804074 	movhi	r2,257
  800368:	10840004 	addi	r2,r2,4096
  80036c:	10000035 	stwio	zero,0(r2)
  /* Calculate Timer Overhead */
  // Average of 10 measurements */
  int i;
  PERF_RESET(P_COUNTER_BASE);
  PERF_START_MEASURING(P_COUNTER_BASE);
  for (i = 0; i < 100; i++) {
  800370:	e0bffb17 	ldw	r2,-20(fp)
  800374:	10800044 	addi	r2,r2,1
  800378:	e0bffb15 	stw	r2,-20(fp)
  80037c:	e0bffb17 	ldw	r2,-20(fp)
  800380:	10801910 	cmplti	r2,r2,100
  800384:	103ff41e 	bne	r2,zero,800358 <main+0x104>
	  PERF_BEGIN(P_COUNTER_BASE, 0);
	  PERF_END(P_COUNTER_BASE, 0);
  }
  PERF_STOP_MEASURING(P_COUNTER_BASE);
  800388:	00804074 	movhi	r2,257
  80038c:	10840004 	addi	r2,r2,4096
  800390:	10000035 	stwio	zero,0(r2)
  timer_overhead = (int)perf_get_section_time(P_COUNTER_BASE, 0) / 100;
  800394:	01004074 	movhi	r4,257
  800398:	21040004 	addi	r4,r4,4096
  80039c:	000b883a 	mov	r5,zero
  8003a0:	080bce00 	call	80bce0 <perf_get_section_time>
  8003a4:	1009883a 	mov	r4,r2
  8003a8:	180b883a 	mov	r5,r3
  8003ac:	01401904 	movi	r5,100
  8003b0:	0800d180 	call	800d18 <__divsi3>
  8003b4:	d0a6a815 	stw	r2,-25952(gp)

return 0;
  8003b8:	0005883a 	mov	r2,zero
  8003bc:	e6fffe17 	ldw	sp,-8(fp)
  printf("Done!\n");



  return 0;
}
  8003c0:	e6ffff17 	ldw	sp,-4(fp)
  8003c4:	e037883a 	mov	sp,fp
  8003c8:	dfc00117 	ldw	ra,4(sp)
  8003cc:	df000017 	ldw	fp,0(sp)
  8003d0:	dec00204 	addi	sp,sp,8
  8003d4:	f800283a 	ret

008003d8 <initMatrix>:

void initMatrix (int matrix[M][M]){
  8003d8:	defffc04 	addi	sp,sp,-16
  8003dc:	df000315 	stw	fp,12(sp)
  8003e0:	df000304 	addi	fp,sp,12
  8003e4:	e13fff15 	stw	r4,-4(fp)
  int i, j;

  for (i = 0; i < M; i++) {
  8003e8:	e03ffe15 	stw	zero,-8(fp)
  8003ec:	00001806 	br	800450 <initMatrix+0x78>
    for (j = 0; j < M; j++) {
  8003f0:	e03ffd15 	stw	zero,-12(fp)
  8003f4:	00001006 	br	800438 <initMatrix+0x60>
      matrix[i][j] = i+j;
  8003f8:	e0bffe17 	ldw	r2,-8(fp)
  8003fc:	1004923a 	slli	r2,r2,8
  800400:	1007883a 	mov	r3,r2
  800404:	e0bfff17 	ldw	r2,-4(fp)
  800408:	188b883a 	add	r5,r3,r2
  80040c:	e13ffd17 	ldw	r4,-12(fp)
  800410:	e0fffe17 	ldw	r3,-8(fp)
  800414:	e0bffd17 	ldw	r2,-12(fp)
  800418:	1887883a 	add	r3,r3,r2
  80041c:	2105883a 	add	r2,r4,r4
  800420:	1085883a 	add	r2,r2,r2
  800424:	1145883a 	add	r2,r2,r5
  800428:	10c00015 	stw	r3,0(r2)

void initMatrix (int matrix[M][M]){
  int i, j;

  for (i = 0; i < M; i++) {
    for (j = 0; j < M; j++) {
  80042c:	e0bffd17 	ldw	r2,-12(fp)
  800430:	10800044 	addi	r2,r2,1
  800434:	e0bffd15 	stw	r2,-12(fp)
  800438:	e0bffd17 	ldw	r2,-12(fp)
  80043c:	10801010 	cmplti	r2,r2,64
  800440:	103fed1e 	bne	r2,zero,8003f8 <initMatrix+0x20>
}

void initMatrix (int matrix[M][M]){
  int i, j;

  for (i = 0; i < M; i++) {
  800444:	e0bffe17 	ldw	r2,-8(fp)
  800448:	10800044 	addi	r2,r2,1
  80044c:	e0bffe15 	stw	r2,-8(fp)
  800450:	e0bffe17 	ldw	r2,-8(fp)
  800454:	10801010 	cmplti	r2,r2,64
  800458:	103fe51e 	bne	r2,zero,8003f0 <initMatrix+0x18>
    for (j = 0; j < M; j++) {
      matrix[i][j] = i+j;
    }
  }
}
  80045c:	e037883a 	mov	sp,fp
  800460:	df000017 	ldw	fp,0(sp)
  800464:	dec00104 	addi	sp,sp,4
  800468:	f800283a 	ret

0080046c <sumMatrix>:

int sumMatrix (int matrix[M][M], int size)
{
  80046c:	defffa04 	addi	sp,sp,-24
  800470:	df000515 	stw	fp,20(sp)
  800474:	df000504 	addi	fp,sp,20
  800478:	e13ffe15 	stw	r4,-8(fp)
  80047c:	e17fff15 	stw	r5,-4(fp)
  int i, j, Sum = 0;
  800480:	e03ffb15 	stw	zero,-20(fp)

  for (i = 0; i < size; i ++) {
  800484:	e03ffd15 	stw	zero,-12(fp)
  800488:	00001806 	br	8004ec <sumMatrix+0x80>
    for (j = 0; j < size; j ++) {
  80048c:	e03ffc15 	stw	zero,-16(fp)
  800490:	00001006 	br	8004d4 <sumMatrix+0x68>
      Sum += matrix[i][j];
  800494:	e0bffd17 	ldw	r2,-12(fp)
  800498:	1004923a 	slli	r2,r2,8
  80049c:	1007883a 	mov	r3,r2
  8004a0:	e0bffe17 	ldw	r2,-8(fp)
  8004a4:	1887883a 	add	r3,r3,r2
  8004a8:	e0bffc17 	ldw	r2,-16(fp)
  8004ac:	1085883a 	add	r2,r2,r2
  8004b0:	1085883a 	add	r2,r2,r2
  8004b4:	10c5883a 	add	r2,r2,r3
  8004b8:	10c00017 	ldw	r3,0(r2)
  8004bc:	e0bffb17 	ldw	r2,-20(fp)
  8004c0:	10c5883a 	add	r2,r2,r3
  8004c4:	e0bffb15 	stw	r2,-20(fp)
int sumMatrix (int matrix[M][M], int size)
{
  int i, j, Sum = 0;

  for (i = 0; i < size; i ++) {
    for (j = 0; j < size; j ++) {
  8004c8:	e0bffc17 	ldw	r2,-16(fp)
  8004cc:	10800044 	addi	r2,r2,1
  8004d0:	e0bffc15 	stw	r2,-16(fp)
  8004d4:	e0fffc17 	ldw	r3,-16(fp)
  8004d8:	e0bfff17 	ldw	r2,-4(fp)
  8004dc:	18bfed16 	blt	r3,r2,800494 <sumMatrix+0x28>

int sumMatrix (int matrix[M][M], int size)
{
  int i, j, Sum = 0;

  for (i = 0; i < size; i ++) {
  8004e0:	e0bffd17 	ldw	r2,-12(fp)
  8004e4:	10800044 	addi	r2,r2,1
  8004e8:	e0bffd15 	stw	r2,-12(fp)
  8004ec:	e0fffd17 	ldw	r3,-12(fp)
  8004f0:	e0bfff17 	ldw	r2,-4(fp)
  8004f4:	18bfe516 	blt	r3,r2,80048c <sumMatrix+0x20>
    for (j = 0; j < size; j ++) {
      Sum += matrix[i][j];
    }
  }
  return Sum;
  8004f8:	e0bffb17 	ldw	r2,-20(fp)
}
  8004fc:	e037883a 	mov	sp,fp
  800500:	df000017 	ldw	fp,0(sp)
  800504:	dec00104 	addi	sp,sp,4
  800508:	f800283a 	ret

0080050c <__mulsf3>:
  80050c:	deffef04 	addi	sp,sp,-68
  800510:	dc400f15 	stw	r17,60(sp)
  800514:	dc400204 	addi	r17,sp,8
  800518:	dc000e15 	stw	r16,56(sp)
  80051c:	d9000015 	stw	r4,0(sp)
  800520:	d9400115 	stw	r5,4(sp)
  800524:	d809883a 	mov	r4,sp
  800528:	880b883a 	mov	r5,r17
  80052c:	dc000604 	addi	r16,sp,24
  800530:	dfc01015 	stw	ra,64(sp)
  800534:	08010ec0 	call	8010ec <__unpack_f>
  800538:	d9000104 	addi	r4,sp,4
  80053c:	800b883a 	mov	r5,r16
  800540:	08010ec0 	call	8010ec <__unpack_f>
  800544:	d9000217 	ldw	r4,8(sp)
  800548:	00800044 	movi	r2,1
  80054c:	01400104 	movi	r5,4
  800550:	1100142e 	bgeu	r2,r4,8005a4 <__mulsf3+0x98>
  800554:	d8c00617 	ldw	r3,24(sp)
  800558:	10c0052e 	bgeu	r2,r3,800570 <__mulsf3+0x64>
  80055c:	21400f26 	beq	r4,r5,80059c <__mulsf3+0x90>
  800560:	19405d26 	beq	r3,r5,8006d8 <__mulsf3+0x1cc>
  800564:	00800084 	movi	r2,2
  800568:	20800e26 	beq	r4,r2,8005a4 <__mulsf3+0x98>
  80056c:	1880181e 	bne	r3,r2,8005d0 <__mulsf3+0xc4>
  800570:	d8c00717 	ldw	r3,28(sp)
  800574:	d8800317 	ldw	r2,12(sp)
  800578:	8009883a 	mov	r4,r16
  80057c:	10c4c03a 	cmpne	r2,r2,r3
  800580:	d8800715 	stw	r2,28(sp)
  800584:	0800f8c0 	call	800f8c <__pack_f>
  800588:	dfc01017 	ldw	ra,64(sp)
  80058c:	dc400f17 	ldw	r17,60(sp)
  800590:	dc000e17 	ldw	r16,56(sp)
  800594:	dec01104 	addi	sp,sp,68
  800598:	f800283a 	ret
  80059c:	00800084 	movi	r2,2
  8005a0:	18804f26 	beq	r3,r2,8006e0 <__mulsf3+0x1d4>
  8005a4:	d8800317 	ldw	r2,12(sp)
  8005a8:	d8c00717 	ldw	r3,28(sp)
  8005ac:	8809883a 	mov	r4,r17
  8005b0:	10c4c03a 	cmpne	r2,r2,r3
  8005b4:	d8800315 	stw	r2,12(sp)
  8005b8:	0800f8c0 	call	800f8c <__pack_f>
  8005bc:	dfc01017 	ldw	ra,64(sp)
  8005c0:	dc400f17 	ldw	r17,60(sp)
  8005c4:	dc000e17 	ldw	r16,56(sp)
  8005c8:	dec01104 	addi	sp,sp,68
  8005cc:	f800283a 	ret
  8005d0:	d8800517 	ldw	r2,20(sp)
  8005d4:	da000917 	ldw	r8,36(sp)
  8005d8:	0013883a 	mov	r9,zero
  8005dc:	0007883a 	mov	r3,zero
  8005e0:	480f883a 	mov	r7,r9
  8005e4:	180b883a 	mov	r5,r3
  8005e8:	400d883a 	mov	r6,r8
  8005ec:	1009883a 	mov	r4,r2
  8005f0:	0800de80 	call	800de8 <__muldi3>
  8005f4:	da800417 	ldw	r10,16(sp)
  8005f8:	d9800817 	ldw	r6,32(sp)
  8005fc:	da400317 	ldw	r9,12(sp)
  800600:	52800084 	addi	r10,r10,2
  800604:	3295883a 	add	r10,r6,r10
  800608:	d9800717 	ldw	r6,28(sp)
  80060c:	180b883a 	mov	r5,r3
  800610:	180f883a 	mov	r7,r3
  800614:	4992c03a 	cmpne	r9,r9,r6
  800618:	da400b15 	stw	r9,44(sp)
  80061c:	1007883a 	mov	r3,r2
  800620:	da800c15 	stw	r10,48(sp)
  800624:	2800070e 	bge	r5,zero,800644 <__mulsf3+0x138>
  800628:	2880004c 	andi	r2,r5,1
  80062c:	1005003a 	cmpeq	r2,r2,zero
  800630:	500d883a 	mov	r6,r10
  800634:	10001e26 	beq	r2,zero,8006b0 <__mulsf3+0x1a4>
  800638:	380ed07a 	srli	r7,r7,1
  80063c:	31800044 	addi	r6,r6,1
  800640:	d9800c15 	stw	r6,48(sp)
  800644:	01100034 	movhi	r4,16384
  800648:	213fffc4 	addi	r4,r4,-1
  80064c:	21c00b36 	bltu	r4,r7,80067c <__mulsf3+0x170>
  800650:	d8800c17 	ldw	r2,48(sp)
  800654:	00000206 	br	800660 <__mulsf3+0x154>
  800658:	18c7883a 	add	r3,r3,r3
  80065c:	21c00636 	bltu	r4,r7,800678 <__mulsf3+0x16c>
  800660:	10bfffc4 	addi	r2,r2,-1
  800664:	39cf883a 	add	r7,r7,r7
  800668:	183ffb0e 	bge	r3,zero,800658 <__mulsf3+0x14c>
  80066c:	39c00054 	ori	r7,r7,1
  800670:	18c7883a 	add	r3,r3,r3
  800674:	21fffa2e 	bgeu	r4,r7,800660 <__mulsf3+0x154>
  800678:	d8800c15 	stw	r2,48(sp)
  80067c:	39001fcc 	andi	r4,r7,127
  800680:	00801004 	movi	r2,64
  800684:	20800d26 	beq	r4,r2,8006bc <__mulsf3+0x1b0>
  800688:	008000c4 	movi	r2,3
  80068c:	d9000a04 	addi	r4,sp,40
  800690:	d9c00d15 	stw	r7,52(sp)
  800694:	d8800a15 	stw	r2,40(sp)
  800698:	0800f8c0 	call	800f8c <__pack_f>
  80069c:	dfc01017 	ldw	ra,64(sp)
  8006a0:	dc400f17 	ldw	r17,60(sp)
  8006a4:	dc000e17 	ldw	r16,56(sp)
  8006a8:	dec01104 	addi	sp,sp,68
  8006ac:	f800283a 	ret
  8006b0:	1804d07a 	srli	r2,r3,1
  8006b4:	10e00034 	orhi	r3,r2,32768
  8006b8:	003fdf06 	br	800638 <__mulsf3+0x12c>
  8006bc:	3880200c 	andi	r2,r7,128
  8006c0:	103ff11e 	bne	r2,zero,800688 <__mulsf3+0x17c>
  8006c4:	183ff026 	beq	r3,zero,800688 <__mulsf3+0x17c>
  8006c8:	3907883a 	add	r3,r7,r4
  8006cc:	00bfe004 	movi	r2,-128
  8006d0:	188e703a 	and	r7,r3,r2
  8006d4:	003fec06 	br	800688 <__mulsf3+0x17c>
  8006d8:	00800084 	movi	r2,2
  8006dc:	20bfa41e 	bne	r4,r2,800570 <__mulsf3+0x64>
  8006e0:	01002074 	movhi	r4,129
  8006e4:	21349d04 	addi	r4,r4,-11660
  8006e8:	003fb306 	br	8005b8 <__mulsf3+0xac>

008006ec <__divsf3>:
  8006ec:	defff304 	addi	sp,sp,-52
  8006f0:	dc400b15 	stw	r17,44(sp)
  8006f4:	dc400204 	addi	r17,sp,8
  8006f8:	dc000a15 	stw	r16,40(sp)
  8006fc:	d9000015 	stw	r4,0(sp)
  800700:	d9400115 	stw	r5,4(sp)
  800704:	d809883a 	mov	r4,sp
  800708:	880b883a 	mov	r5,r17
  80070c:	dc000604 	addi	r16,sp,24
  800710:	dfc00c15 	stw	ra,48(sp)
  800714:	08010ec0 	call	8010ec <__unpack_f>
  800718:	d9000104 	addi	r4,sp,4
  80071c:	800b883a 	mov	r5,r16
  800720:	08010ec0 	call	8010ec <__unpack_f>
  800724:	d9000217 	ldw	r4,8(sp)
  800728:	00800044 	movi	r2,1
  80072c:	01800104 	movi	r6,4
  800730:	11000a2e 	bgeu	r2,r4,80075c <__divsf3+0x70>
  800734:	d9400617 	ldw	r5,24(sp)
  800738:	1140432e 	bgeu	r2,r5,800848 <__divsf3+0x15c>
  80073c:	d8800317 	ldw	r2,12(sp)
  800740:	d8c00717 	ldw	r3,28(sp)
  800744:	10c4f03a 	xor	r2,r2,r3
  800748:	d8800315 	stw	r2,12(sp)
  80074c:	21800226 	beq	r4,r6,800758 <__divsf3+0x6c>
  800750:	00800084 	movi	r2,2
  800754:	2080101e 	bne	r4,r2,800798 <__divsf3+0xac>
  800758:	29000726 	beq	r5,r4,800778 <__divsf3+0x8c>
  80075c:	8809883a 	mov	r4,r17
  800760:	0800f8c0 	call	800f8c <__pack_f>
  800764:	dfc00c17 	ldw	ra,48(sp)
  800768:	dc400b17 	ldw	r17,44(sp)
  80076c:	dc000a17 	ldw	r16,40(sp)
  800770:	dec00d04 	addi	sp,sp,52
  800774:	f800283a 	ret
  800778:	01002074 	movhi	r4,129
  80077c:	21349d04 	addi	r4,r4,-11660
  800780:	0800f8c0 	call	800f8c <__pack_f>
  800784:	dfc00c17 	ldw	ra,48(sp)
  800788:	dc400b17 	ldw	r17,44(sp)
  80078c:	dc000a17 	ldw	r16,40(sp)
  800790:	dec00d04 	addi	sp,sp,52
  800794:	f800283a 	ret
  800798:	29802d26 	beq	r5,r6,800850 <__divsf3+0x164>
  80079c:	28801a26 	beq	r5,r2,800808 <__divsf3+0x11c>
  8007a0:	d8c00417 	ldw	r3,16(sp)
  8007a4:	d8800817 	ldw	r2,32(sp)
  8007a8:	d9000517 	ldw	r4,20(sp)
  8007ac:	d9800917 	ldw	r6,36(sp)
  8007b0:	1885c83a 	sub	r2,r3,r2
  8007b4:	d8800415 	stw	r2,16(sp)
  8007b8:	2180032e 	bgeu	r4,r6,8007c8 <__divsf3+0xdc>
  8007bc:	10bfffc4 	addi	r2,r2,-1
  8007c0:	d8800415 	stw	r2,16(sp)
  8007c4:	2109883a 	add	r4,r4,r4
  8007c8:	01500034 	movhi	r5,16384
  8007cc:	0007883a 	mov	r3,zero
  8007d0:	0005883a 	mov	r2,zero
  8007d4:	01c007c4 	movi	r7,31
  8007d8:	10800044 	addi	r2,r2,1
  8007dc:	21800236 	bltu	r4,r6,8007e8 <__divsf3+0xfc>
  8007e0:	1946b03a 	or	r3,r3,r5
  8007e4:	2189c83a 	sub	r4,r4,r6
  8007e8:	280ad07a 	srli	r5,r5,1
  8007ec:	2109883a 	add	r4,r4,r4
  8007f0:	11fff91e 	bne	r2,r7,8007d8 <__divsf3+0xec>
  8007f4:	19401fcc 	andi	r5,r3,127
  8007f8:	00801004 	movi	r2,64
  8007fc:	28800a26 	beq	r5,r2,800828 <__divsf3+0x13c>
  800800:	d8c00515 	stw	r3,20(sp)
  800804:	003fd506 	br	80075c <__divsf3+0x70>
  800808:	8809883a 	mov	r4,r17
  80080c:	d9800215 	stw	r6,8(sp)
  800810:	0800f8c0 	call	800f8c <__pack_f>
  800814:	dfc00c17 	ldw	ra,48(sp)
  800818:	dc400b17 	ldw	r17,44(sp)
  80081c:	dc000a17 	ldw	r16,40(sp)
  800820:	dec00d04 	addi	sp,sp,52
  800824:	f800283a 	ret
  800828:	1880200c 	andi	r2,r3,128
  80082c:	103ff41e 	bne	r2,zero,800800 <__divsf3+0x114>
  800830:	203ff326 	beq	r4,zero,800800 <__divsf3+0x114>
  800834:	1947883a 	add	r3,r3,r5
  800838:	00bfe004 	movi	r2,-128
  80083c:	1886703a 	and	r3,r3,r2
  800840:	d8c00515 	stw	r3,20(sp)
  800844:	003fc506 	br	80075c <__divsf3+0x70>
  800848:	8009883a 	mov	r4,r16
  80084c:	003fc406 	br	800760 <__divsf3+0x74>
  800850:	8809883a 	mov	r4,r17
  800854:	d8000515 	stw	zero,20(sp)
  800858:	d8000415 	stw	zero,16(sp)
  80085c:	003fc006 	br	800760 <__divsf3+0x74>

00800860 <__floatsisf>:
  800860:	2006d7fa 	srli	r3,r4,31
  800864:	defffa04 	addi	sp,sp,-24
  800868:	008000c4 	movi	r2,3
  80086c:	dfc00515 	stw	ra,20(sp)
  800870:	dc000415 	stw	r16,16(sp)
  800874:	d8800015 	stw	r2,0(sp)
  800878:	d8c00115 	stw	r3,4(sp)
  80087c:	2000081e 	bne	r4,zero,8008a0 <__floatsisf+0x40>
  800880:	00800084 	movi	r2,2
  800884:	d8800015 	stw	r2,0(sp)
  800888:	d809883a 	mov	r4,sp
  80088c:	0800f8c0 	call	800f8c <__pack_f>
  800890:	dfc00517 	ldw	ra,20(sp)
  800894:	dc000417 	ldw	r16,16(sp)
  800898:	dec00604 	addi	sp,sp,24
  80089c:	f800283a 	ret
  8008a0:	00800784 	movi	r2,30
  8008a4:	1807003a 	cmpeq	r3,r3,zero
  8008a8:	d8800215 	stw	r2,8(sp)
  8008ac:	18000e1e 	bne	r3,zero,8008e8 <__floatsisf+0x88>
  8008b0:	00a00034 	movhi	r2,32768
  8008b4:	20800e26 	beq	r4,r2,8008f0 <__floatsisf+0x90>
  8008b8:	0121c83a 	sub	r16,zero,r4
  8008bc:	8009883a 	mov	r4,r16
  8008c0:	dc000315 	stw	r16,12(sp)
  8008c4:	0800f0c0 	call	800f0c <__clzsi2>
  8008c8:	117fffc4 	addi	r5,r2,-1
  8008cc:	017fee0e 	bge	zero,r5,800888 <__floatsisf+0x28>
  8008d0:	d8800217 	ldw	r2,8(sp)
  8008d4:	8146983a 	sll	r3,r16,r5
  8008d8:	1145c83a 	sub	r2,r2,r5
  8008dc:	d8c00315 	stw	r3,12(sp)
  8008e0:	d8800215 	stw	r2,8(sp)
  8008e4:	003fe806 	br	800888 <__floatsisf+0x28>
  8008e8:	2021883a 	mov	r16,r4
  8008ec:	003ff306 	br	8008bc <__floatsisf+0x5c>
  8008f0:	00b3c034 	movhi	r2,52992
  8008f4:	003fe606 	br	800890 <__floatsisf+0x30>

008008f8 <__extendsfdf2>:
  8008f8:	defff904 	addi	sp,sp,-28
  8008fc:	d9000115 	stw	r4,4(sp)
  800900:	d9400204 	addi	r5,sp,8
  800904:	d9000104 	addi	r4,sp,4
  800908:	dfc00615 	stw	ra,24(sp)
  80090c:	08010ec0 	call	8010ec <__unpack_f>
  800910:	d9c00517 	ldw	r7,20(sp)
  800914:	0011883a 	mov	r8,zero
  800918:	400697ba 	slli	r3,r8,30
  80091c:	3812d0ba 	srli	r9,r7,2
  800920:	380497ba 	slli	r2,r7,30
  800924:	d9000217 	ldw	r4,8(sp)
  800928:	d9400317 	ldw	r5,12(sp)
  80092c:	d9800417 	ldw	r6,16(sp)
  800930:	48c6b03a 	or	r3,r9,r3
  800934:	100f883a 	mov	r7,r2
  800938:	d8c00015 	stw	r3,0(sp)
  80093c:	0800c640 	call	800c64 <__make_dp>
  800940:	dfc00617 	ldw	ra,24(sp)
  800944:	dec00704 	addi	sp,sp,28
  800948:	f800283a 	ret

0080094c <__floatunsisf>:
  80094c:	defff904 	addi	sp,sp,-28
  800950:	dc400515 	stw	r17,20(sp)
  800954:	dc000415 	stw	r16,16(sp)
  800958:	dfc00615 	stw	ra,24(sp)
  80095c:	04400784 	movi	r17,30
  800960:	2021883a 	mov	r16,r4
  800964:	d8000115 	stw	zero,4(sp)
  800968:	2000091e 	bne	r4,zero,800990 <__floatunsisf+0x44>
  80096c:	00800084 	movi	r2,2
  800970:	d8800015 	stw	r2,0(sp)
  800974:	d809883a 	mov	r4,sp
  800978:	0800f8c0 	call	800f8c <__pack_f>
  80097c:	dfc00617 	ldw	ra,24(sp)
  800980:	dc400517 	ldw	r17,20(sp)
  800984:	dc000417 	ldw	r16,16(sp)
  800988:	dec00704 	addi	sp,sp,28
  80098c:	f800283a 	ret
  800990:	008000c4 	movi	r2,3
  800994:	d9000315 	stw	r4,12(sp)
  800998:	d8800015 	stw	r2,0(sp)
  80099c:	dc400215 	stw	r17,8(sp)
  8009a0:	0800f0c0 	call	800f0c <__clzsi2>
  8009a4:	117fffc4 	addi	r5,r2,-1
  8009a8:	0147c83a 	sub	r3,zero,r5
  8009ac:	00800044 	movi	r2,1
  8009b0:	10c4983a 	sll	r2,r2,r3
  8009b4:	80c6d83a 	srl	r3,r16,r3
  8009b8:	8949c83a 	sub	r4,r17,r5
  8009bc:	10bfffc4 	addi	r2,r2,-1
  8009c0:	8084703a 	and	r2,r16,r2
  8009c4:	1004c03a 	cmpne	r2,r2,zero
  8009c8:	1886b03a 	or	r3,r3,r2
  8009cc:	28000c16 	blt	r5,zero,800a00 <__floatunsisf+0xb4>
  8009d0:	8144983a 	sll	r2,r16,r5
  8009d4:	8947c83a 	sub	r3,r17,r5
  8009d8:	283fe626 	beq	r5,zero,800974 <__floatunsisf+0x28>
  8009dc:	d809883a 	mov	r4,sp
  8009e0:	d8800315 	stw	r2,12(sp)
  8009e4:	d8c00215 	stw	r3,8(sp)
  8009e8:	0800f8c0 	call	800f8c <__pack_f>
  8009ec:	dfc00617 	ldw	ra,24(sp)
  8009f0:	dc400517 	ldw	r17,20(sp)
  8009f4:	dc000417 	ldw	r16,16(sp)
  8009f8:	dec00704 	addi	sp,sp,28
  8009fc:	f800283a 	ret
  800a00:	d8c00315 	stw	r3,12(sp)
  800a04:	d9000215 	stw	r4,8(sp)
  800a08:	003fda06 	br	800974 <__floatunsisf+0x28>

00800a0c <__divdf3>:
  800a0c:	deffed04 	addi	sp,sp,-76
  800a10:	dcc01115 	stw	r19,68(sp)
  800a14:	dcc00404 	addi	r19,sp,16
  800a18:	2011883a 	mov	r8,r4
  800a1c:	2813883a 	mov	r9,r5
  800a20:	dc000e15 	stw	r16,56(sp)
  800a24:	d809883a 	mov	r4,sp
  800a28:	980b883a 	mov	r5,r19
  800a2c:	dc000904 	addi	r16,sp,36
  800a30:	dfc01215 	stw	ra,72(sp)
  800a34:	da400115 	stw	r9,4(sp)
  800a38:	d9c00315 	stw	r7,12(sp)
  800a3c:	da000015 	stw	r8,0(sp)
  800a40:	d9800215 	stw	r6,8(sp)
  800a44:	dc801015 	stw	r18,64(sp)
  800a48:	dc400f15 	stw	r17,60(sp)
  800a4c:	08014c80 	call	8014c8 <__unpack_d>
  800a50:	d9000204 	addi	r4,sp,8
  800a54:	800b883a 	mov	r5,r16
  800a58:	08014c80 	call	8014c8 <__unpack_d>
  800a5c:	d9000417 	ldw	r4,16(sp)
  800a60:	00800044 	movi	r2,1
  800a64:	11000b2e 	bgeu	r2,r4,800a94 <__divdf3+0x88>
  800a68:	d9400917 	ldw	r5,36(sp)
  800a6c:	1140762e 	bgeu	r2,r5,800c48 <__divdf3+0x23c>
  800a70:	d8800517 	ldw	r2,20(sp)
  800a74:	d8c00a17 	ldw	r3,40(sp)
  800a78:	01800104 	movi	r6,4
  800a7c:	10c4f03a 	xor	r2,r2,r3
  800a80:	d8800515 	stw	r2,20(sp)
  800a84:	21800226 	beq	r4,r6,800a90 <__divdf3+0x84>
  800a88:	00800084 	movi	r2,2
  800a8c:	2080141e 	bne	r4,r2,800ae0 <__divdf3+0xd4>
  800a90:	29000926 	beq	r5,r4,800ab8 <__divdf3+0xac>
  800a94:	9809883a 	mov	r4,r19
  800a98:	08011b40 	call	8011b4 <__pack_d>
  800a9c:	dfc01217 	ldw	ra,72(sp)
  800aa0:	dcc01117 	ldw	r19,68(sp)
  800aa4:	dc801017 	ldw	r18,64(sp)
  800aa8:	dc400f17 	ldw	r17,60(sp)
  800aac:	dc000e17 	ldw	r16,56(sp)
  800ab0:	dec01304 	addi	sp,sp,76
  800ab4:	f800283a 	ret
  800ab8:	01002074 	movhi	r4,129
  800abc:	2134a104 	addi	r4,r4,-11644
  800ac0:	08011b40 	call	8011b4 <__pack_d>
  800ac4:	dfc01217 	ldw	ra,72(sp)
  800ac8:	dcc01117 	ldw	r19,68(sp)
  800acc:	dc801017 	ldw	r18,64(sp)
  800ad0:	dc400f17 	ldw	r17,60(sp)
  800ad4:	dc000e17 	ldw	r16,56(sp)
  800ad8:	dec01304 	addi	sp,sp,76
  800adc:	f800283a 	ret
  800ae0:	29805b26 	beq	r5,r6,800c50 <__divdf3+0x244>
  800ae4:	28802d26 	beq	r5,r2,800b9c <__divdf3+0x190>
  800ae8:	d8c00617 	ldw	r3,24(sp)
  800aec:	d8800b17 	ldw	r2,44(sp)
  800af0:	d9c00817 	ldw	r7,32(sp)
  800af4:	dc400d17 	ldw	r17,52(sp)
  800af8:	188bc83a 	sub	r5,r3,r2
  800afc:	d9800717 	ldw	r6,28(sp)
  800b00:	dc000c17 	ldw	r16,48(sp)
  800b04:	d9400615 	stw	r5,24(sp)
  800b08:	3c403836 	bltu	r7,r17,800bec <__divdf3+0x1e0>
  800b0c:	89c03626 	beq	r17,r7,800be8 <__divdf3+0x1dc>
  800b10:	0015883a 	mov	r10,zero
  800b14:	001d883a 	mov	r14,zero
  800b18:	02c40034 	movhi	r11,4096
  800b1c:	001f883a 	mov	r15,zero
  800b20:	003f883a 	mov	ra,zero
  800b24:	04800f44 	movi	r18,61
  800b28:	00000f06 	br	800b68 <__divdf3+0x15c>
  800b2c:	601d883a 	mov	r14,r12
  800b30:	681f883a 	mov	r15,r13
  800b34:	400d883a 	mov	r6,r8
  800b38:	100f883a 	mov	r7,r2
  800b3c:	3191883a 	add	r8,r6,r6
  800b40:	5808d07a 	srli	r4,r11,1
  800b44:	4185803a 	cmpltu	r2,r8,r6
  800b48:	39d3883a 	add	r9,r7,r7
  800b4c:	28c6b03a 	or	r3,r5,r3
  800b50:	1245883a 	add	r2,r2,r9
  800b54:	1815883a 	mov	r10,r3
  800b58:	2017883a 	mov	r11,r4
  800b5c:	400d883a 	mov	r6,r8
  800b60:	100f883a 	mov	r7,r2
  800b64:	fc801726 	beq	ra,r18,800bc4 <__divdf3+0x1b8>
  800b68:	580a97fa 	slli	r5,r11,31
  800b6c:	5006d07a 	srli	r3,r10,1
  800b70:	ffc00044 	addi	ra,ra,1
  800b74:	3c7ff136 	bltu	r7,r17,800b3c <__divdf3+0x130>
  800b78:	3411c83a 	sub	r8,r6,r16
  800b7c:	3205803a 	cmpltu	r2,r6,r8
  800b80:	3c53c83a 	sub	r9,r7,r17
  800b84:	7298b03a 	or	r12,r14,r10
  800b88:	7adab03a 	or	r13,r15,r11
  800b8c:	4885c83a 	sub	r2,r9,r2
  800b90:	89ffe61e 	bne	r17,r7,800b2c <__divdf3+0x120>
  800b94:	343fe936 	bltu	r6,r16,800b3c <__divdf3+0x130>
  800b98:	003fe406 	br	800b2c <__divdf3+0x120>
  800b9c:	9809883a 	mov	r4,r19
  800ba0:	d9800415 	stw	r6,16(sp)
  800ba4:	08011b40 	call	8011b4 <__pack_d>
  800ba8:	dfc01217 	ldw	ra,72(sp)
  800bac:	dcc01117 	ldw	r19,68(sp)
  800bb0:	dc801017 	ldw	r18,64(sp)
  800bb4:	dc400f17 	ldw	r17,60(sp)
  800bb8:	dc000e17 	ldw	r16,56(sp)
  800bbc:	dec01304 	addi	sp,sp,76
  800bc0:	f800283a 	ret
  800bc4:	00803fc4 	movi	r2,255
  800bc8:	7090703a 	and	r8,r14,r2
  800bcc:	00802004 	movi	r2,128
  800bd0:	0007883a 	mov	r3,zero
  800bd4:	0013883a 	mov	r9,zero
  800bd8:	40800d26 	beq	r8,r2,800c10 <__divdf3+0x204>
  800bdc:	dbc00815 	stw	r15,32(sp)
  800be0:	db800715 	stw	r14,28(sp)
  800be4:	003fab06 	br	800a94 <__divdf3+0x88>
  800be8:	343fc92e 	bgeu	r6,r16,800b10 <__divdf3+0x104>
  800bec:	3185883a 	add	r2,r6,r6
  800bf0:	1189803a 	cmpltu	r4,r2,r6
  800bf4:	39c7883a 	add	r3,r7,r7
  800bf8:	20c9883a 	add	r4,r4,r3
  800bfc:	297fffc4 	addi	r5,r5,-1
  800c00:	100d883a 	mov	r6,r2
  800c04:	200f883a 	mov	r7,r4
  800c08:	d9400615 	stw	r5,24(sp)
  800c0c:	003fc006 	br	800b10 <__divdf3+0x104>
  800c10:	483ff21e 	bne	r9,zero,800bdc <__divdf3+0x1d0>
  800c14:	01004004 	movi	r4,256
  800c18:	7104703a 	and	r2,r14,r4
  800c1c:	10c4b03a 	or	r2,r2,r3
  800c20:	103fee1e 	bne	r2,zero,800bdc <__divdf3+0x1d0>
  800c24:	31c4b03a 	or	r2,r6,r7
  800c28:	103fec26 	beq	r2,zero,800bdc <__divdf3+0x1d0>
  800c2c:	7205883a 	add	r2,r14,r8
  800c30:	1391803a 	cmpltu	r8,r2,r14
  800c34:	43d1883a 	add	r8,r8,r15
  800c38:	013fc004 	movi	r4,-256
  800c3c:	111c703a 	and	r14,r2,r4
  800c40:	401f883a 	mov	r15,r8
  800c44:	003fe506 	br	800bdc <__divdf3+0x1d0>
  800c48:	8009883a 	mov	r4,r16
  800c4c:	003f9206 	br	800a98 <__divdf3+0x8c>
  800c50:	9809883a 	mov	r4,r19
  800c54:	d8000715 	stw	zero,28(sp)
  800c58:	d8000815 	stw	zero,32(sp)
  800c5c:	d8000615 	stw	zero,24(sp)
  800c60:	003f8d06 	br	800a98 <__divdf3+0x8c>

00800c64 <__make_dp>:
  800c64:	defff904 	addi	sp,sp,-28
  800c68:	d8c00717 	ldw	r3,28(sp)
  800c6c:	d9000015 	stw	r4,0(sp)
  800c70:	d809883a 	mov	r4,sp
  800c74:	dfc00515 	stw	ra,20(sp)
  800c78:	d9c00615 	stw	r7,24(sp)
  800c7c:	d9400115 	stw	r5,4(sp)
  800c80:	d9800215 	stw	r6,8(sp)
  800c84:	d8c00415 	stw	r3,16(sp)
  800c88:	d9c00315 	stw	r7,12(sp)
  800c8c:	08011b40 	call	8011b4 <__pack_d>
  800c90:	dfc00517 	ldw	ra,20(sp)
  800c94:	dec00704 	addi	sp,sp,28
  800c98:	f800283a 	ret

00800c9c <udivmodsi4>:
  800c9c:	29001b2e 	bgeu	r5,r4,800d0c <udivmodsi4+0x70>
  800ca0:	28001a16 	blt	r5,zero,800d0c <udivmodsi4+0x70>
  800ca4:	00800044 	movi	r2,1
  800ca8:	0007883a 	mov	r3,zero
  800cac:	01c007c4 	movi	r7,31
  800cb0:	00000306 	br	800cc0 <udivmodsi4+0x24>
  800cb4:	19c01326 	beq	r3,r7,800d04 <udivmodsi4+0x68>
  800cb8:	18c00044 	addi	r3,r3,1
  800cbc:	28000416 	blt	r5,zero,800cd0 <udivmodsi4+0x34>
  800cc0:	294b883a 	add	r5,r5,r5
  800cc4:	1085883a 	add	r2,r2,r2
  800cc8:	293ffa36 	bltu	r5,r4,800cb4 <udivmodsi4+0x18>
  800ccc:	10000d26 	beq	r2,zero,800d04 <udivmodsi4+0x68>
  800cd0:	0007883a 	mov	r3,zero
  800cd4:	21400236 	bltu	r4,r5,800ce0 <udivmodsi4+0x44>
  800cd8:	2149c83a 	sub	r4,r4,r5
  800cdc:	1886b03a 	or	r3,r3,r2
  800ce0:	1004d07a 	srli	r2,r2,1
  800ce4:	280ad07a 	srli	r5,r5,1
  800ce8:	103ffa1e 	bne	r2,zero,800cd4 <udivmodsi4+0x38>
  800cec:	30000226 	beq	r6,zero,800cf8 <udivmodsi4+0x5c>
  800cf0:	2005883a 	mov	r2,r4
  800cf4:	f800283a 	ret
  800cf8:	1809883a 	mov	r4,r3
  800cfc:	2005883a 	mov	r2,r4
  800d00:	f800283a 	ret
  800d04:	0007883a 	mov	r3,zero
  800d08:	003ff806 	br	800cec <udivmodsi4+0x50>
  800d0c:	00800044 	movi	r2,1
  800d10:	0007883a 	mov	r3,zero
  800d14:	003fef06 	br	800cd4 <udivmodsi4+0x38>

00800d18 <__divsi3>:
  800d18:	defffe04 	addi	sp,sp,-8
  800d1c:	dc000015 	stw	r16,0(sp)
  800d20:	dfc00115 	stw	ra,4(sp)
  800d24:	0021883a 	mov	r16,zero
  800d28:	20000c16 	blt	r4,zero,800d5c <__divsi3+0x44>
  800d2c:	000d883a 	mov	r6,zero
  800d30:	28000e16 	blt	r5,zero,800d6c <__divsi3+0x54>
  800d34:	0800c9c0 	call	800c9c <udivmodsi4>
  800d38:	1007883a 	mov	r3,r2
  800d3c:	8005003a 	cmpeq	r2,r16,zero
  800d40:	1000011e 	bne	r2,zero,800d48 <__divsi3+0x30>
  800d44:	00c7c83a 	sub	r3,zero,r3
  800d48:	1805883a 	mov	r2,r3
  800d4c:	dfc00117 	ldw	ra,4(sp)
  800d50:	dc000017 	ldw	r16,0(sp)
  800d54:	dec00204 	addi	sp,sp,8
  800d58:	f800283a 	ret
  800d5c:	0109c83a 	sub	r4,zero,r4
  800d60:	04000044 	movi	r16,1
  800d64:	000d883a 	mov	r6,zero
  800d68:	283ff20e 	bge	r5,zero,800d34 <__divsi3+0x1c>
  800d6c:	014bc83a 	sub	r5,zero,r5
  800d70:	8021003a 	cmpeq	r16,r16,zero
  800d74:	003fef06 	br	800d34 <__divsi3+0x1c>

00800d78 <__modsi3>:
  800d78:	deffff04 	addi	sp,sp,-4
  800d7c:	dfc00015 	stw	ra,0(sp)
  800d80:	01800044 	movi	r6,1
  800d84:	2807883a 	mov	r3,r5
  800d88:	20000416 	blt	r4,zero,800d9c <__modsi3+0x24>
  800d8c:	28000c16 	blt	r5,zero,800dc0 <__modsi3+0x48>
  800d90:	dfc00017 	ldw	ra,0(sp)
  800d94:	dec00104 	addi	sp,sp,4
  800d98:	0800c9c1 	jmpi	800c9c <udivmodsi4>
  800d9c:	0109c83a 	sub	r4,zero,r4
  800da0:	28000b16 	blt	r5,zero,800dd0 <__modsi3+0x58>
  800da4:	180b883a 	mov	r5,r3
  800da8:	01800044 	movi	r6,1
  800dac:	0800c9c0 	call	800c9c <udivmodsi4>
  800db0:	0085c83a 	sub	r2,zero,r2
  800db4:	dfc00017 	ldw	ra,0(sp)
  800db8:	dec00104 	addi	sp,sp,4
  800dbc:	f800283a 	ret
  800dc0:	014bc83a 	sub	r5,zero,r5
  800dc4:	dfc00017 	ldw	ra,0(sp)
  800dc8:	dec00104 	addi	sp,sp,4
  800dcc:	0800c9c1 	jmpi	800c9c <udivmodsi4>
  800dd0:	0147c83a 	sub	r3,zero,r5
  800dd4:	003ff306 	br	800da4 <__modsi3+0x2c>

00800dd8 <__udivsi3>:
  800dd8:	000d883a 	mov	r6,zero
  800ddc:	0800c9c1 	jmpi	800c9c <udivmodsi4>

00800de0 <__umodsi3>:
  800de0:	01800044 	movi	r6,1
  800de4:	0800c9c1 	jmpi	800c9c <udivmodsi4>

00800de8 <__muldi3>:
  800de8:	defff204 	addi	sp,sp,-56
  800dec:	df000c15 	stw	fp,48(sp)
  800df0:	3038d43a 	srli	fp,r6,16
  800df4:	dd000815 	stw	r20,32(sp)
  800df8:	dc400515 	stw	r17,20(sp)
  800dfc:	2028d43a 	srli	r20,r4,16
  800e00:	247fffcc 	andi	r17,r4,65535
  800e04:	dc000415 	stw	r16,16(sp)
  800e08:	343fffcc 	andi	r16,r6,65535
  800e0c:	dcc00715 	stw	r19,28(sp)
  800e10:	d9000015 	stw	r4,0(sp)
  800e14:	2827883a 	mov	r19,r5
  800e18:	8809883a 	mov	r4,r17
  800e1c:	d9400115 	stw	r5,4(sp)
  800e20:	800b883a 	mov	r5,r16
  800e24:	d9800215 	stw	r6,8(sp)
  800e28:	dfc00d15 	stw	ra,52(sp)
  800e2c:	d9c00315 	stw	r7,12(sp)
  800e30:	dd800a15 	stw	r22,40(sp)
  800e34:	dd400915 	stw	r21,36(sp)
  800e38:	302d883a 	mov	r22,r6
  800e3c:	ddc00b15 	stw	r23,44(sp)
  800e40:	dc800615 	stw	r18,24(sp)
  800e44:	08016000 	call	801600 <__mulsi3>
  800e48:	8809883a 	mov	r4,r17
  800e4c:	e00b883a 	mov	r5,fp
  800e50:	102b883a 	mov	r21,r2
  800e54:	08016000 	call	801600 <__mulsi3>
  800e58:	800b883a 	mov	r5,r16
  800e5c:	a009883a 	mov	r4,r20
  800e60:	1023883a 	mov	r17,r2
  800e64:	08016000 	call	801600 <__mulsi3>
  800e68:	a009883a 	mov	r4,r20
  800e6c:	e00b883a 	mov	r5,fp
  800e70:	1021883a 	mov	r16,r2
  800e74:	08016000 	call	801600 <__mulsi3>
  800e78:	a8ffffcc 	andi	r3,r21,65535
  800e7c:	a82ad43a 	srli	r21,r21,16
  800e80:	8c23883a 	add	r17,r17,r16
  800e84:	1011883a 	mov	r8,r2
  800e88:	ac6b883a 	add	r21,r21,r17
  800e8c:	a804943a 	slli	r2,r21,16
  800e90:	b009883a 	mov	r4,r22
  800e94:	980b883a 	mov	r5,r19
  800e98:	10c7883a 	add	r3,r2,r3
  800e9c:	a812d43a 	srli	r9,r21,16
  800ea0:	180d883a 	mov	r6,r3
  800ea4:	ac00022e 	bgeu	r21,r16,800eb0 <__muldi3+0xc8>
  800ea8:	00800074 	movhi	r2,1
  800eac:	4091883a 	add	r8,r8,r2
  800eb0:	4267883a 	add	r19,r8,r9
  800eb4:	302d883a 	mov	r22,r6
  800eb8:	08016000 	call	801600 <__mulsi3>
  800ebc:	d9400317 	ldw	r5,12(sp)
  800ec0:	d9000017 	ldw	r4,0(sp)
  800ec4:	1023883a 	mov	r17,r2
  800ec8:	08016000 	call	801600 <__mulsi3>
  800ecc:	14cb883a 	add	r5,r2,r19
  800ed0:	894b883a 	add	r5,r17,r5
  800ed4:	b005883a 	mov	r2,r22
  800ed8:	2807883a 	mov	r3,r5
  800edc:	dfc00d17 	ldw	ra,52(sp)
  800ee0:	df000c17 	ldw	fp,48(sp)
  800ee4:	ddc00b17 	ldw	r23,44(sp)
  800ee8:	dd800a17 	ldw	r22,40(sp)
  800eec:	dd400917 	ldw	r21,36(sp)
  800ef0:	dd000817 	ldw	r20,32(sp)
  800ef4:	dcc00717 	ldw	r19,28(sp)
  800ef8:	dc800617 	ldw	r18,24(sp)
  800efc:	dc400517 	ldw	r17,20(sp)
  800f00:	dc000417 	ldw	r16,16(sp)
  800f04:	dec00e04 	addi	sp,sp,56
  800f08:	f800283a 	ret

00800f0c <__clzsi2>:
  800f0c:	00bfffd4 	movui	r2,65535
  800f10:	11000e36 	bltu	r2,r4,800f4c <__clzsi2+0x40>
  800f14:	00803fc4 	movi	r2,255
  800f18:	01400204 	movi	r5,8
  800f1c:	0007883a 	mov	r3,zero
  800f20:	11001036 	bltu	r2,r4,800f64 <__clzsi2+0x58>
  800f24:	000b883a 	mov	r5,zero
  800f28:	20c6d83a 	srl	r3,r4,r3
  800f2c:	00802074 	movhi	r2,129
  800f30:	10b4a604 	addi	r2,r2,-11624
  800f34:	1887883a 	add	r3,r3,r2
  800f38:	18800003 	ldbu	r2,0(r3)
  800f3c:	00c00804 	movi	r3,32
  800f40:	2885883a 	add	r2,r5,r2
  800f44:	1885c83a 	sub	r2,r3,r2
  800f48:	f800283a 	ret
  800f4c:	01400404 	movi	r5,16
  800f50:	00804034 	movhi	r2,256
  800f54:	10bfffc4 	addi	r2,r2,-1
  800f58:	2807883a 	mov	r3,r5
  800f5c:	113ff22e 	bgeu	r2,r4,800f28 <__clzsi2+0x1c>
  800f60:	01400604 	movi	r5,24
  800f64:	2807883a 	mov	r3,r5
  800f68:	20c6d83a 	srl	r3,r4,r3
  800f6c:	00802074 	movhi	r2,129
  800f70:	10b4a604 	addi	r2,r2,-11624
  800f74:	1887883a 	add	r3,r3,r2
  800f78:	18800003 	ldbu	r2,0(r3)
  800f7c:	00c00804 	movi	r3,32
  800f80:	2885883a 	add	r2,r5,r2
  800f84:	1885c83a 	sub	r2,r3,r2
  800f88:	f800283a 	ret

00800f8c <__pack_f>:
  800f8c:	20c00017 	ldw	r3,0(r4)
  800f90:	01c00044 	movi	r7,1
  800f94:	21800317 	ldw	r6,12(r4)
  800f98:	21400117 	ldw	r5,4(r4)
  800f9c:	38c02d2e 	bgeu	r7,r3,801054 <__pack_f+0xc8>
  800fa0:	00800104 	movi	r2,4
  800fa4:	18802826 	beq	r3,r2,801048 <__pack_f+0xbc>
  800fa8:	00800084 	movi	r2,2
  800fac:	18800126 	beq	r3,r2,800fb4 <__pack_f+0x28>
  800fb0:	3000101e 	bne	r6,zero,800ff4 <__pack_f+0x68>
  800fb4:	000d883a 	mov	r6,zero
  800fb8:	0007883a 	mov	r3,zero
  800fbc:	19003fcc 	andi	r4,r3,255
  800fc0:	200895fa 	slli	r4,r4,23
  800fc4:	00c02034 	movhi	r3,128
  800fc8:	18ffffc4 	addi	r3,r3,-1
  800fcc:	30c6703a 	and	r3,r6,r3
  800fd0:	10a0002c 	andhi	r2,r2,32768
  800fd4:	10c4b03a 	or	r2,r2,r3
  800fd8:	280a97fa 	slli	r5,r5,31
  800fdc:	1104b03a 	or	r2,r2,r4
  800fe0:	00e00034 	movhi	r3,32768
  800fe4:	18ffffc4 	addi	r3,r3,-1
  800fe8:	10c4703a 	and	r2,r2,r3
  800fec:	1144b03a 	or	r2,r2,r5
  800ff0:	f800283a 	ret
  800ff4:	21000217 	ldw	r4,8(r4)
  800ff8:	00bfe084 	movi	r2,-126
  800ffc:	20801b16 	blt	r4,r2,80106c <__pack_f+0xe0>
  801000:	00801fc4 	movi	r2,127
  801004:	11001016 	blt	r2,r4,801048 <__pack_f+0xbc>
  801008:	308e703a 	and	r7,r6,r2
  80100c:	2087883a 	add	r3,r4,r2
  801010:	00801004 	movi	r2,64
  801014:	38800526 	beq	r7,r2,80102c <__pack_f+0xa0>
  801018:	31800fc4 	addi	r6,r6,63
  80101c:	30000716 	blt	r6,zero,80103c <__pack_f+0xb0>
  801020:	300490ba 	slli	r2,r6,2
  801024:	100cd27a 	srli	r6,r2,9
  801028:	003fe406 	br	800fbc <__pack_f+0x30>
  80102c:	3080200c 	andi	r2,r6,128
  801030:	103ffa26 	beq	r2,zero,80101c <__pack_f+0x90>
  801034:	31cd883a 	add	r6,r6,r7
  801038:	003ff806 	br	80101c <__pack_f+0x90>
  80103c:	300cd07a 	srli	r6,r6,1
  801040:	18c00044 	addi	r3,r3,1
  801044:	003ff606 	br	801020 <__pack_f+0x94>
  801048:	000d883a 	mov	r6,zero
  80104c:	00ffffc4 	movi	r3,-1
  801050:	003fda06 	br	800fbc <__pack_f+0x30>
  801054:	31800434 	orhi	r6,r6,16
  801058:	00802034 	movhi	r2,128
  80105c:	10bfffc4 	addi	r2,r2,-1
  801060:	308c703a 	and	r6,r6,r2
  801064:	00ffffc4 	movi	r3,-1
  801068:	003fd406 	br	800fbc <__pack_f+0x30>
  80106c:	1109c83a 	sub	r4,r2,r4
  801070:	00800644 	movi	r2,25
  801074:	11001216 	blt	r2,r4,8010c0 <__pack_f+0x134>
  801078:	3904983a 	sll	r2,r7,r4
  80107c:	3106d83a 	srl	r3,r6,r4
  801080:	10bfffc4 	addi	r2,r2,-1
  801084:	3084703a 	and	r2,r6,r2
  801088:	1004c03a 	cmpne	r2,r2,zero
  80108c:	1886b03a 	or	r3,r3,r2
  801090:	19001fcc 	andi	r4,r3,127
  801094:	00801004 	movi	r2,64
  801098:	20800c26 	beq	r4,r2,8010cc <__pack_f+0x140>
  80109c:	18c00fc4 	addi	r3,r3,63
  8010a0:	00900034 	movhi	r2,16384
  8010a4:	10bfffc4 	addi	r2,r2,-1
  8010a8:	180cd1fa 	srli	r6,r3,7
  8010ac:	10c7803a 	cmpltu	r3,r2,r3
  8010b0:	00802034 	movhi	r2,128
  8010b4:	10bfffc4 	addi	r2,r2,-1
  8010b8:	308c703a 	and	r6,r6,r2
  8010bc:	003fbf06 	br	800fbc <__pack_f+0x30>
  8010c0:	0007883a 	mov	r3,zero
  8010c4:	000d883a 	mov	r6,zero
  8010c8:	003ff906 	br	8010b0 <__pack_f+0x124>
  8010cc:	1880200c 	andi	r2,r3,128
  8010d0:	10000126 	beq	r2,zero,8010d8 <__pack_f+0x14c>
  8010d4:	1907883a 	add	r3,r3,r4
  8010d8:	180cd1fa 	srli	r6,r3,7
  8010dc:	00900034 	movhi	r2,16384
  8010e0:	10bfffc4 	addi	r2,r2,-1
  8010e4:	10c7803a 	cmpltu	r3,r2,r3
  8010e8:	003ff106 	br	8010b0 <__pack_f+0x124>

008010ec <__unpack_f>:
  8010ec:	21800017 	ldw	r6,0(r4)
  8010f0:	00c02034 	movhi	r3,128
  8010f4:	18ffffc4 	addi	r3,r3,-1
  8010f8:	3004d5fa 	srli	r2,r6,23
  8010fc:	3008d7fa 	srli	r4,r6,31
  801100:	30ce703a 	and	r7,r6,r3
  801104:	10c03fcc 	andi	r3,r2,255
  801108:	29000115 	stw	r4,4(r5)
  80110c:	1800131e 	bne	r3,zero,80115c <__unpack_f+0x70>
  801110:	38000f26 	beq	r7,zero,801150 <__unpack_f+0x64>
  801114:	380691fa 	slli	r3,r7,7
  801118:	01bfe084 	movi	r6,-126
  80111c:	008000c4 	movi	r2,3
  801120:	01100034 	movhi	r4,16384
  801124:	213fffc4 	addi	r4,r4,-1
  801128:	28800015 	stw	r2,0(r5)
  80112c:	29800215 	stw	r6,8(r5)
  801130:	20c00536 	bltu	r4,r3,801148 <__unpack_f+0x5c>
  801134:	3005883a 	mov	r2,r6
  801138:	18c7883a 	add	r3,r3,r3
  80113c:	10bfffc4 	addi	r2,r2,-1
  801140:	20fffd2e 	bgeu	r4,r3,801138 <__unpack_f+0x4c>
  801144:	28800215 	stw	r2,8(r5)
  801148:	28c00315 	stw	r3,12(r5)
  80114c:	f800283a 	ret
  801150:	00800084 	movi	r2,2
  801154:	28800015 	stw	r2,0(r5)
  801158:	f800283a 	ret
  80115c:	00803fc4 	movi	r2,255
  801160:	18800826 	beq	r3,r2,801184 <__unpack_f+0x98>
  801164:	380491fa 	slli	r2,r7,7
  801168:	18ffe044 	addi	r3,r3,-127
  80116c:	28c00215 	stw	r3,8(r5)
  801170:	10900034 	orhi	r2,r2,16384
  801174:	28800315 	stw	r2,12(r5)
  801178:	008000c4 	movi	r2,3
  80117c:	28800015 	stw	r2,0(r5)
  801180:	f800283a 	ret
  801184:	3800031e 	bne	r7,zero,801194 <__unpack_f+0xa8>
  801188:	00800104 	movi	r2,4
  80118c:	28800015 	stw	r2,0(r5)
  801190:	f800283a 	ret
  801194:	3080042c 	andhi	r2,r6,16
  801198:	10000426 	beq	r2,zero,8011ac <__unpack_f+0xc0>
  80119c:	00800044 	movi	r2,1
  8011a0:	28800015 	stw	r2,0(r5)
  8011a4:	29c00315 	stw	r7,12(r5)
  8011a8:	f800283a 	ret
  8011ac:	28000015 	stw	zero,0(r5)
  8011b0:	003ffc06 	br	8011a4 <__unpack_f+0xb8>

008011b4 <__pack_d>:
  8011b4:	20c00017 	ldw	r3,0(r4)
  8011b8:	defffd04 	addi	sp,sp,-12
  8011bc:	dc000015 	stw	r16,0(sp)
  8011c0:	dc800215 	stw	r18,8(sp)
  8011c4:	dc400115 	stw	r17,4(sp)
  8011c8:	00800044 	movi	r2,1
  8011cc:	22000317 	ldw	r8,12(r4)
  8011d0:	001f883a 	mov	r15,zero
  8011d4:	22400417 	ldw	r9,16(r4)
  8011d8:	24000117 	ldw	r16,4(r4)
  8011dc:	10c0552e 	bgeu	r2,r3,801334 <__pack_d+0x180>
  8011e0:	00800104 	movi	r2,4
  8011e4:	18804f26 	beq	r3,r2,801324 <__pack_d+0x170>
  8011e8:	00800084 	movi	r2,2
  8011ec:	18800226 	beq	r3,r2,8011f8 <__pack_d+0x44>
  8011f0:	4244b03a 	or	r2,r8,r9
  8011f4:	10001a1e 	bne	r2,zero,801260 <__pack_d+0xac>
  8011f8:	000d883a 	mov	r6,zero
  8011fc:	000f883a 	mov	r7,zero
  801200:	0011883a 	mov	r8,zero
  801204:	00800434 	movhi	r2,16
  801208:	10bfffc4 	addi	r2,r2,-1
  80120c:	301d883a 	mov	r14,r6
  801210:	3884703a 	and	r2,r7,r2
  801214:	400a953a 	slli	r5,r8,20
  801218:	79bffc2c 	andhi	r6,r15,65520
  80121c:	308cb03a 	or	r6,r6,r2
  801220:	00e00434 	movhi	r3,32784
  801224:	18ffffc4 	addi	r3,r3,-1
  801228:	800497fa 	slli	r2,r16,31
  80122c:	30c6703a 	and	r3,r6,r3
  801230:	1946b03a 	or	r3,r3,r5
  801234:	01600034 	movhi	r5,32768
  801238:	297fffc4 	addi	r5,r5,-1
  80123c:	194a703a 	and	r5,r3,r5
  801240:	288ab03a 	or	r5,r5,r2
  801244:	2807883a 	mov	r3,r5
  801248:	7005883a 	mov	r2,r14
  80124c:	dc800217 	ldw	r18,8(sp)
  801250:	dc400117 	ldw	r17,4(sp)
  801254:	dc000017 	ldw	r16,0(sp)
  801258:	dec00304 	addi	sp,sp,12
  80125c:	f800283a 	ret
  801260:	21000217 	ldw	r4,8(r4)
  801264:	00bf0084 	movi	r2,-1022
  801268:	20803f16 	blt	r4,r2,801368 <__pack_d+0x1b4>
  80126c:	0080ffc4 	movi	r2,1023
  801270:	11002c16 	blt	r2,r4,801324 <__pack_d+0x170>
  801274:	00803fc4 	movi	r2,255
  801278:	408c703a 	and	r6,r8,r2
  80127c:	00802004 	movi	r2,128
  801280:	0007883a 	mov	r3,zero
  801284:	000f883a 	mov	r7,zero
  801288:	2280ffc4 	addi	r10,r4,1023
  80128c:	30801e26 	beq	r6,r2,801308 <__pack_d+0x154>
  801290:	00801fc4 	movi	r2,127
  801294:	4089883a 	add	r4,r8,r2
  801298:	220d803a 	cmpltu	r6,r4,r8
  80129c:	324d883a 	add	r6,r6,r9
  8012a0:	2011883a 	mov	r8,r4
  8012a4:	3013883a 	mov	r9,r6
  8012a8:	00880034 	movhi	r2,8192
  8012ac:	10bfffc4 	addi	r2,r2,-1
  8012b0:	12400d36 	bltu	r2,r9,8012e8 <__pack_d+0x134>
  8012b4:	4804963a 	slli	r2,r9,24
  8012b8:	400cd23a 	srli	r6,r8,8
  8012bc:	480ed23a 	srli	r7,r9,8
  8012c0:	013fffc4 	movi	r4,-1
  8012c4:	118cb03a 	or	r6,r2,r6
  8012c8:	01400434 	movhi	r5,16
  8012cc:	297fffc4 	addi	r5,r5,-1
  8012d0:	3104703a 	and	r2,r6,r4
  8012d4:	3946703a 	and	r3,r7,r5
  8012d8:	5201ffcc 	andi	r8,r10,2047
  8012dc:	100d883a 	mov	r6,r2
  8012e0:	180f883a 	mov	r7,r3
  8012e4:	003fc706 	br	801204 <__pack_d+0x50>
  8012e8:	480897fa 	slli	r4,r9,31
  8012ec:	4004d07a 	srli	r2,r8,1
  8012f0:	4806d07a 	srli	r3,r9,1
  8012f4:	52800044 	addi	r10,r10,1
  8012f8:	2084b03a 	or	r2,r4,r2
  8012fc:	1011883a 	mov	r8,r2
  801300:	1813883a 	mov	r9,r3
  801304:	003feb06 	br	8012b4 <__pack_d+0x100>
  801308:	383fe11e 	bne	r7,zero,801290 <__pack_d+0xdc>
  80130c:	01004004 	movi	r4,256
  801310:	4104703a 	and	r2,r8,r4
  801314:	10c4b03a 	or	r2,r2,r3
  801318:	103fe326 	beq	r2,zero,8012a8 <__pack_d+0xf4>
  80131c:	3005883a 	mov	r2,r6
  801320:	003fdc06 	br	801294 <__pack_d+0xe0>
  801324:	000d883a 	mov	r6,zero
  801328:	000f883a 	mov	r7,zero
  80132c:	0201ffc4 	movi	r8,2047
  801330:	003fb406 	br	801204 <__pack_d+0x50>
  801334:	0005883a 	mov	r2,zero
  801338:	00c00234 	movhi	r3,8
  80133c:	408cb03a 	or	r6,r8,r2
  801340:	48ceb03a 	or	r7,r9,r3
  801344:	013fffc4 	movi	r4,-1
  801348:	01400434 	movhi	r5,16
  80134c:	297fffc4 	addi	r5,r5,-1
  801350:	3104703a 	and	r2,r6,r4
  801354:	3946703a 	and	r3,r7,r5
  801358:	100d883a 	mov	r6,r2
  80135c:	180f883a 	mov	r7,r3
  801360:	0201ffc4 	movi	r8,2047
  801364:	003fa706 	br	801204 <__pack_d+0x50>
  801368:	1109c83a 	sub	r4,r2,r4
  80136c:	00800e04 	movi	r2,56
  801370:	11004316 	blt	r2,r4,801480 <__pack_d+0x2cc>
  801374:	21fff804 	addi	r7,r4,-32
  801378:	38004516 	blt	r7,zero,801490 <__pack_d+0x2dc>
  80137c:	49d8d83a 	srl	r12,r9,r7
  801380:	001b883a 	mov	r13,zero
  801384:	0023883a 	mov	r17,zero
  801388:	01400044 	movi	r5,1
  80138c:	0025883a 	mov	r18,zero
  801390:	38004716 	blt	r7,zero,8014b0 <__pack_d+0x2fc>
  801394:	29d6983a 	sll	r11,r5,r7
  801398:	0015883a 	mov	r10,zero
  80139c:	00bfffc4 	movi	r2,-1
  8013a0:	5089883a 	add	r4,r10,r2
  8013a4:	588b883a 	add	r5,r11,r2
  8013a8:	228d803a 	cmpltu	r6,r4,r10
  8013ac:	314b883a 	add	r5,r6,r5
  8013b0:	4104703a 	and	r2,r8,r4
  8013b4:	4946703a 	and	r3,r9,r5
  8013b8:	10c4b03a 	or	r2,r2,r3
  8013bc:	10000226 	beq	r2,zero,8013c8 <__pack_d+0x214>
  8013c0:	04400044 	movi	r17,1
  8013c4:	0025883a 	mov	r18,zero
  8013c8:	00803fc4 	movi	r2,255
  8013cc:	644eb03a 	or	r7,r12,r17
  8013d0:	3892703a 	and	r9,r7,r2
  8013d4:	00802004 	movi	r2,128
  8013d8:	6c90b03a 	or	r8,r13,r18
  8013dc:	0015883a 	mov	r10,zero
  8013e0:	48801626 	beq	r9,r2,80143c <__pack_d+0x288>
  8013e4:	01001fc4 	movi	r4,127
  8013e8:	3905883a 	add	r2,r7,r4
  8013ec:	11cd803a 	cmpltu	r6,r2,r7
  8013f0:	320d883a 	add	r6,r6,r8
  8013f4:	100f883a 	mov	r7,r2
  8013f8:	00840034 	movhi	r2,4096
  8013fc:	10bfffc4 	addi	r2,r2,-1
  801400:	3011883a 	mov	r8,r6
  801404:	0007883a 	mov	r3,zero
  801408:	11801b36 	bltu	r2,r6,801478 <__pack_d+0x2c4>
  80140c:	4004963a 	slli	r2,r8,24
  801410:	3808d23a 	srli	r4,r7,8
  801414:	400ad23a 	srli	r5,r8,8
  801418:	1813883a 	mov	r9,r3
  80141c:	1108b03a 	or	r4,r2,r4
  801420:	00bfffc4 	movi	r2,-1
  801424:	00c00434 	movhi	r3,16
  801428:	18ffffc4 	addi	r3,r3,-1
  80142c:	208c703a 	and	r6,r4,r2
  801430:	28ce703a 	and	r7,r5,r3
  801434:	4a01ffcc 	andi	r8,r9,2047
  801438:	003f7206 	br	801204 <__pack_d+0x50>
  80143c:	503fe91e 	bne	r10,zero,8013e4 <__pack_d+0x230>
  801440:	01004004 	movi	r4,256
  801444:	3904703a 	and	r2,r7,r4
  801448:	0007883a 	mov	r3,zero
  80144c:	10c4b03a 	or	r2,r2,r3
  801450:	10000626 	beq	r2,zero,80146c <__pack_d+0x2b8>
  801454:	3a45883a 	add	r2,r7,r9
  801458:	11cd803a 	cmpltu	r6,r2,r7
  80145c:	320d883a 	add	r6,r6,r8
  801460:	100f883a 	mov	r7,r2
  801464:	3011883a 	mov	r8,r6
  801468:	0007883a 	mov	r3,zero
  80146c:	00840034 	movhi	r2,4096
  801470:	10bfffc4 	addi	r2,r2,-1
  801474:	123fe52e 	bgeu	r2,r8,80140c <__pack_d+0x258>
  801478:	00c00044 	movi	r3,1
  80147c:	003fe306 	br	80140c <__pack_d+0x258>
  801480:	0009883a 	mov	r4,zero
  801484:	0013883a 	mov	r9,zero
  801488:	000b883a 	mov	r5,zero
  80148c:	003fe406 	br	801420 <__pack_d+0x26c>
  801490:	4a47883a 	add	r3,r9,r9
  801494:	008007c4 	movi	r2,31
  801498:	1105c83a 	sub	r2,r2,r4
  80149c:	1886983a 	sll	r3,r3,r2
  8014a0:	4118d83a 	srl	r12,r8,r4
  8014a4:	491ad83a 	srl	r13,r9,r4
  8014a8:	1b18b03a 	or	r12,r3,r12
  8014ac:	003fb506 	br	801384 <__pack_d+0x1d0>
  8014b0:	2806d07a 	srli	r3,r5,1
  8014b4:	008007c4 	movi	r2,31
  8014b8:	1105c83a 	sub	r2,r2,r4
  8014bc:	1896d83a 	srl	r11,r3,r2
  8014c0:	2914983a 	sll	r10,r5,r4
  8014c4:	003fb506 	br	80139c <__pack_d+0x1e8>

008014c8 <__unpack_d>:
  8014c8:	20c00117 	ldw	r3,4(r4)
  8014cc:	22400017 	ldw	r9,0(r4)
  8014d0:	00800434 	movhi	r2,16
  8014d4:	10bfffc4 	addi	r2,r2,-1
  8014d8:	1808d53a 	srli	r4,r3,20
  8014dc:	180cd7fa 	srli	r6,r3,31
  8014e0:	1894703a 	and	r10,r3,r2
  8014e4:	2201ffcc 	andi	r8,r4,2047
  8014e8:	281b883a 	mov	r13,r5
  8014ec:	4817883a 	mov	r11,r9
  8014f0:	29800115 	stw	r6,4(r5)
  8014f4:	5019883a 	mov	r12,r10
  8014f8:	40001e1e 	bne	r8,zero,801574 <__unpack_d+0xac>
  8014fc:	4a84b03a 	or	r2,r9,r10
  801500:	10001926 	beq	r2,zero,801568 <__unpack_d+0xa0>
  801504:	4804d63a 	srli	r2,r9,24
  801508:	500c923a 	slli	r6,r10,8
  80150c:	013f0084 	movi	r4,-1022
  801510:	00c40034 	movhi	r3,4096
  801514:	18ffffc4 	addi	r3,r3,-1
  801518:	118cb03a 	or	r6,r2,r6
  80151c:	008000c4 	movi	r2,3
  801520:	480a923a 	slli	r5,r9,8
  801524:	68800015 	stw	r2,0(r13)
  801528:	69000215 	stw	r4,8(r13)
  80152c:	19800b36 	bltu	r3,r6,80155c <__unpack_d+0x94>
  801530:	200f883a 	mov	r7,r4
  801534:	1811883a 	mov	r8,r3
  801538:	2945883a 	add	r2,r5,r5
  80153c:	1149803a 	cmpltu	r4,r2,r5
  801540:	3187883a 	add	r3,r6,r6
  801544:	20c9883a 	add	r4,r4,r3
  801548:	100b883a 	mov	r5,r2
  80154c:	200d883a 	mov	r6,r4
  801550:	39ffffc4 	addi	r7,r7,-1
  801554:	413ff82e 	bgeu	r8,r4,801538 <__unpack_d+0x70>
  801558:	69c00215 	stw	r7,8(r13)
  80155c:	69800415 	stw	r6,16(r13)
  801560:	69400315 	stw	r5,12(r13)
  801564:	f800283a 	ret
  801568:	00800084 	movi	r2,2
  80156c:	28800015 	stw	r2,0(r5)
  801570:	f800283a 	ret
  801574:	0081ffc4 	movi	r2,2047
  801578:	40800f26 	beq	r8,r2,8015b8 <__unpack_d+0xf0>
  80157c:	480cd63a 	srli	r6,r9,24
  801580:	5006923a 	slli	r3,r10,8
  801584:	4804923a 	slli	r2,r9,8
  801588:	0009883a 	mov	r4,zero
  80158c:	30c6b03a 	or	r3,r6,r3
  801590:	01440034 	movhi	r5,4096
  801594:	110cb03a 	or	r6,r2,r4
  801598:	423f0044 	addi	r8,r8,-1023
  80159c:	194eb03a 	or	r7,r3,r5
  8015a0:	008000c4 	movi	r2,3
  8015a4:	69c00415 	stw	r7,16(r13)
  8015a8:	6a000215 	stw	r8,8(r13)
  8015ac:	68800015 	stw	r2,0(r13)
  8015b0:	69800315 	stw	r6,12(r13)
  8015b4:	f800283a 	ret
  8015b8:	4a84b03a 	or	r2,r9,r10
  8015bc:	1000031e 	bne	r2,zero,8015cc <__unpack_d+0x104>
  8015c0:	00800104 	movi	r2,4
  8015c4:	28800015 	stw	r2,0(r5)
  8015c8:	f800283a 	ret
  8015cc:	0009883a 	mov	r4,zero
  8015d0:	01400234 	movhi	r5,8
  8015d4:	4904703a 	and	r2,r9,r4
  8015d8:	5146703a 	and	r3,r10,r5
  8015dc:	10c4b03a 	or	r2,r2,r3
  8015e0:	10000526 	beq	r2,zero,8015f8 <__unpack_d+0x130>
  8015e4:	00800044 	movi	r2,1
  8015e8:	68800015 	stw	r2,0(r13)
  8015ec:	6b000415 	stw	r12,16(r13)
  8015f0:	6ac00315 	stw	r11,12(r13)
  8015f4:	f800283a 	ret
  8015f8:	68000015 	stw	zero,0(r13)
  8015fc:	003ffb06 	br	8015ec <__unpack_d+0x124>

00801600 <__mulsi3>:
  801600:	20000a26 	beq	r4,zero,80162c <__mulsi3+0x2c>
  801604:	0007883a 	mov	r3,zero
  801608:	2080004c 	andi	r2,r4,1
  80160c:	1005003a 	cmpeq	r2,r2,zero
  801610:	2008d07a 	srli	r4,r4,1
  801614:	1000011e 	bne	r2,zero,80161c <__mulsi3+0x1c>
  801618:	1947883a 	add	r3,r3,r5
  80161c:	294b883a 	add	r5,r5,r5
  801620:	203ff91e 	bne	r4,zero,801608 <__mulsi3+0x8>
  801624:	1805883a 	mov	r2,r3
  801628:	f800283a 	ret
  80162c:	0007883a 	mov	r3,zero
  801630:	1805883a 	mov	r2,r3
  801634:	f800283a 	ret

00801638 <printf>:
  801638:	defffb04 	addi	sp,sp,-20
  80163c:	dfc00115 	stw	ra,4(sp)
  801640:	d9400215 	stw	r5,8(sp)
  801644:	d9800315 	stw	r6,12(sp)
  801648:	d9c00415 	stw	r7,16(sp)
  80164c:	00802074 	movhi	r2,129
  801650:	10bbf804 	addi	r2,r2,-4128
  801654:	10c00017 	ldw	r3,0(r2)
  801658:	200b883a 	mov	r5,r4
  80165c:	d8800204 	addi	r2,sp,8
  801660:	19000217 	ldw	r4,8(r3)
  801664:	100d883a 	mov	r6,r2
  801668:	d8800015 	stw	r2,0(sp)
  80166c:	08035cc0 	call	8035cc <__vfprintf_internal>
  801670:	dfc00117 	ldw	ra,4(sp)
  801674:	dec00504 	addi	sp,sp,20
  801678:	f800283a 	ret

0080167c <_printf_r>:
  80167c:	defffc04 	addi	sp,sp,-16
  801680:	dfc00115 	stw	ra,4(sp)
  801684:	d9800215 	stw	r6,8(sp)
  801688:	d9c00315 	stw	r7,12(sp)
  80168c:	280d883a 	mov	r6,r5
  801690:	21400217 	ldw	r5,8(r4)
  801694:	d8c00204 	addi	r3,sp,8
  801698:	180f883a 	mov	r7,r3
  80169c:	d8c00015 	stw	r3,0(sp)
  8016a0:	08017080 	call	801708 <___vfprintf_internal_r>
  8016a4:	dfc00117 	ldw	ra,4(sp)
  8016a8:	dec00404 	addi	sp,sp,16
  8016ac:	f800283a 	ret

008016b0 <__sprint_r>:
  8016b0:	30800217 	ldw	r2,8(r6)
  8016b4:	defffe04 	addi	sp,sp,-8
  8016b8:	dc000015 	stw	r16,0(sp)
  8016bc:	dfc00115 	stw	ra,4(sp)
  8016c0:	3021883a 	mov	r16,r6
  8016c4:	0007883a 	mov	r3,zero
  8016c8:	1000061e 	bne	r2,zero,8016e4 <__sprint_r+0x34>
  8016cc:	1805883a 	mov	r2,r3
  8016d0:	30000115 	stw	zero,4(r6)
  8016d4:	dfc00117 	ldw	ra,4(sp)
  8016d8:	dc000017 	ldw	r16,0(sp)
  8016dc:	dec00204 	addi	sp,sp,8
  8016e0:	f800283a 	ret
  8016e4:	08058880 	call	805888 <__sfvwrite_r>
  8016e8:	1007883a 	mov	r3,r2
  8016ec:	1805883a 	mov	r2,r3
  8016f0:	80000115 	stw	zero,4(r16)
  8016f4:	80000215 	stw	zero,8(r16)
  8016f8:	dfc00117 	ldw	ra,4(sp)
  8016fc:	dc000017 	ldw	r16,0(sp)
  801700:	dec00204 	addi	sp,sp,8
  801704:	f800283a 	ret

00801708 <___vfprintf_internal_r>:
  801708:	defea404 	addi	sp,sp,-1392
  80170c:	dd815815 	stw	r22,1376(sp)
  801710:	dc015215 	stw	r16,1352(sp)
  801714:	d9c15115 	stw	r7,1348(sp)
  801718:	dfc15b15 	stw	ra,1388(sp)
  80171c:	df015a15 	stw	fp,1384(sp)
  801720:	ddc15915 	stw	r23,1380(sp)
  801724:	dd415715 	stw	r21,1372(sp)
  801728:	dd015615 	stw	r20,1368(sp)
  80172c:	dcc15515 	stw	r19,1364(sp)
  801730:	dc815415 	stw	r18,1360(sp)
  801734:	dc415315 	stw	r17,1356(sp)
  801738:	282d883a 	mov	r22,r5
  80173c:	3021883a 	mov	r16,r6
  801740:	d9014f15 	stw	r4,1340(sp)
  801744:	0805eac0 	call	805eac <_localeconv_r>
  801748:	10800017 	ldw	r2,0(r2)
  80174c:	d9c15117 	ldw	r7,1348(sp)
  801750:	d8814915 	stw	r2,1316(sp)
  801754:	d8814f17 	ldw	r2,1340(sp)
  801758:	10000226 	beq	r2,zero,801764 <___vfprintf_internal_r+0x5c>
  80175c:	10800e17 	ldw	r2,56(r2)
  801760:	10020d26 	beq	r2,zero,801f98 <___vfprintf_internal_r+0x890>
  801764:	b080030b 	ldhu	r2,12(r22)
  801768:	1080020c 	andi	r2,r2,8
  80176c:	10020e26 	beq	r2,zero,801fa8 <___vfprintf_internal_r+0x8a0>
  801770:	b0800417 	ldw	r2,16(r22)
  801774:	10020c26 	beq	r2,zero,801fa8 <___vfprintf_internal_r+0x8a0>
  801778:	b200030b 	ldhu	r8,12(r22)
  80177c:	00800284 	movi	r2,10
  801780:	40c0068c 	andi	r3,r8,26
  801784:	18802f1e 	bne	r3,r2,801844 <___vfprintf_internal_r+0x13c>
  801788:	b080038f 	ldh	r2,14(r22)
  80178c:	10002d16 	blt	r2,zero,801844 <___vfprintf_internal_r+0x13c>
  801790:	b240038b 	ldhu	r9,14(r22)
  801794:	b2800717 	ldw	r10,28(r22)
  801798:	b2c00917 	ldw	r11,36(r22)
  80179c:	d9014f17 	ldw	r4,1340(sp)
  8017a0:	dc402904 	addi	r17,sp,164
  8017a4:	d8804004 	addi	r2,sp,256
  8017a8:	00c10004 	movi	r3,1024
  8017ac:	423fff4c 	andi	r8,r8,65533
  8017b0:	800d883a 	mov	r6,r16
  8017b4:	880b883a 	mov	r5,r17
  8017b8:	da002c0d 	sth	r8,176(sp)
  8017bc:	da402c8d 	sth	r9,178(sp)
  8017c0:	da803015 	stw	r10,192(sp)
  8017c4:	dac03215 	stw	r11,200(sp)
  8017c8:	d8802d15 	stw	r2,180(sp)
  8017cc:	d8c02e15 	stw	r3,184(sp)
  8017d0:	d8802915 	stw	r2,164(sp)
  8017d4:	d8c02b15 	stw	r3,172(sp)
  8017d8:	d8002f15 	stw	zero,188(sp)
  8017dc:	08017080 	call	801708 <___vfprintf_internal_r>
  8017e0:	d8814b15 	stw	r2,1324(sp)
  8017e4:	10000416 	blt	r2,zero,8017f8 <___vfprintf_internal_r+0xf0>
  8017e8:	d9014f17 	ldw	r4,1340(sp)
  8017ec:	880b883a 	mov	r5,r17
  8017f0:	0804f240 	call	804f24 <_fflush_r>
  8017f4:	1002321e 	bne	r2,zero,8020c0 <___vfprintf_internal_r+0x9b8>
  8017f8:	d8802c0b 	ldhu	r2,176(sp)
  8017fc:	1080100c 	andi	r2,r2,64
  801800:	10000326 	beq	r2,zero,801810 <___vfprintf_internal_r+0x108>
  801804:	b080030b 	ldhu	r2,12(r22)
  801808:	10801014 	ori	r2,r2,64
  80180c:	b080030d 	sth	r2,12(r22)
  801810:	d8814b17 	ldw	r2,1324(sp)
  801814:	dfc15b17 	ldw	ra,1388(sp)
  801818:	df015a17 	ldw	fp,1384(sp)
  80181c:	ddc15917 	ldw	r23,1380(sp)
  801820:	dd815817 	ldw	r22,1376(sp)
  801824:	dd415717 	ldw	r21,1372(sp)
  801828:	dd015617 	ldw	r20,1368(sp)
  80182c:	dcc15517 	ldw	r19,1364(sp)
  801830:	dc815417 	ldw	r18,1360(sp)
  801834:	dc415317 	ldw	r17,1356(sp)
  801838:	dc015217 	ldw	r16,1352(sp)
  80183c:	dec15c04 	addi	sp,sp,1392
  801840:	f800283a 	ret
  801844:	0005883a 	mov	r2,zero
  801848:	0007883a 	mov	r3,zero
  80184c:	dd401904 	addi	r21,sp,100
  801850:	d8814215 	stw	r2,1288(sp)
  801854:	802f883a 	mov	r23,r16
  801858:	d8c14315 	stw	r3,1292(sp)
  80185c:	d8014b15 	stw	zero,1324(sp)
  801860:	d8014815 	stw	zero,1312(sp)
  801864:	d8014415 	stw	zero,1296(sp)
  801868:	d8014715 	stw	zero,1308(sp)
  80186c:	dd400c15 	stw	r21,48(sp)
  801870:	d8000e15 	stw	zero,56(sp)
  801874:	d8000d15 	stw	zero,52(sp)
  801878:	b8800007 	ldb	r2,0(r23)
  80187c:	10001926 	beq	r2,zero,8018e4 <___vfprintf_internal_r+0x1dc>
  801880:	00c00944 	movi	r3,37
  801884:	10c01726 	beq	r2,r3,8018e4 <___vfprintf_internal_r+0x1dc>
  801888:	b821883a 	mov	r16,r23
  80188c:	00000106 	br	801894 <___vfprintf_internal_r+0x18c>
  801890:	10c00326 	beq	r2,r3,8018a0 <___vfprintf_internal_r+0x198>
  801894:	84000044 	addi	r16,r16,1
  801898:	80800007 	ldb	r2,0(r16)
  80189c:	103ffc1e 	bne	r2,zero,801890 <___vfprintf_internal_r+0x188>
  8018a0:	85e7c83a 	sub	r19,r16,r23
  8018a4:	98000e26 	beq	r19,zero,8018e0 <___vfprintf_internal_r+0x1d8>
  8018a8:	dc800e17 	ldw	r18,56(sp)
  8018ac:	dc400d17 	ldw	r17,52(sp)
  8018b0:	008001c4 	movi	r2,7
  8018b4:	94e5883a 	add	r18,r18,r19
  8018b8:	8c400044 	addi	r17,r17,1
  8018bc:	adc00015 	stw	r23,0(r21)
  8018c0:	dc800e15 	stw	r18,56(sp)
  8018c4:	acc00115 	stw	r19,4(r21)
  8018c8:	dc400d15 	stw	r17,52(sp)
  8018cc:	14428b16 	blt	r2,r17,8022fc <___vfprintf_internal_r+0xbf4>
  8018d0:	ad400204 	addi	r21,r21,8
  8018d4:	d9014b17 	ldw	r4,1324(sp)
  8018d8:	24c9883a 	add	r4,r4,r19
  8018dc:	d9014b15 	stw	r4,1324(sp)
  8018e0:	802f883a 	mov	r23,r16
  8018e4:	b8800007 	ldb	r2,0(r23)
  8018e8:	10013c26 	beq	r2,zero,801ddc <___vfprintf_internal_r+0x6d4>
  8018ec:	bdc00044 	addi	r23,r23,1
  8018f0:	d8000405 	stb	zero,16(sp)
  8018f4:	b8c00007 	ldb	r3,0(r23)
  8018f8:	04ffffc4 	movi	r19,-1
  8018fc:	d8014c15 	stw	zero,1328(sp)
  801900:	d8014a15 	stw	zero,1320(sp)
  801904:	d8c14d15 	stw	r3,1332(sp)
  801908:	bdc00044 	addi	r23,r23,1
  80190c:	d9414d17 	ldw	r5,1332(sp)
  801910:	00801604 	movi	r2,88
  801914:	28fff804 	addi	r3,r5,-32
  801918:	10c06036 	bltu	r2,r3,801a9c <___vfprintf_internal_r+0x394>
  80191c:	18c5883a 	add	r2,r3,r3
  801920:	1085883a 	add	r2,r2,r2
  801924:	00c02034 	movhi	r3,128
  801928:	18c64e04 	addi	r3,r3,6456
  80192c:	10c5883a 	add	r2,r2,r3
  801930:	11000017 	ldw	r4,0(r2)
  801934:	2000683a 	jmp	r4
  801938:	008028ac 	andhi	r2,zero,162
  80193c:	00801a9c 	xori	r2,zero,106
  801940:	00801a9c 	xori	r2,zero,106
  801944:	00802898 	cmpnei	r2,zero,162
  801948:	00801a9c 	xori	r2,zero,106
  80194c:	00801a9c 	xori	r2,zero,106
  801950:	00801a9c 	xori	r2,zero,106
  801954:	00801a9c 	xori	r2,zero,106
  801958:	00801a9c 	xori	r2,zero,106
  80195c:	00801a9c 	xori	r2,zero,106
  801960:	00802678 	rdprs	r2,zero,153
  801964:	00802888 	cmpgei	r2,zero,162
  801968:	00801a9c 	xori	r2,zero,106
  80196c:	00802690 	cmplti	r2,zero,154
  801970:	00802930 	cmpltui	r2,zero,164
  801974:	00801a9c 	xori	r2,zero,106
  801978:	0080291c 	xori	r2,zero,164
  80197c:	008028d8 	cmpnei	r2,zero,163
  801980:	008028d8 	cmpnei	r2,zero,163
  801984:	008028d8 	cmpnei	r2,zero,163
  801988:	008028d8 	cmpnei	r2,zero,163
  80198c:	008028d8 	cmpnei	r2,zero,163
  801990:	008028d8 	cmpnei	r2,zero,163
  801994:	008028d8 	cmpnei	r2,zero,163
  801998:	008028d8 	cmpnei	r2,zero,163
  80199c:	008028d8 	cmpnei	r2,zero,163
  8019a0:	00801a9c 	xori	r2,zero,106
  8019a4:	00801a9c 	xori	r2,zero,106
  8019a8:	00801a9c 	xori	r2,zero,106
  8019ac:	00801a9c 	xori	r2,zero,106
  8019b0:	00801a9c 	xori	r2,zero,106
  8019b4:	00801a9c 	xori	r2,zero,106
  8019b8:	00801a9c 	xori	r2,zero,106
  8019bc:	00801a9c 	xori	r2,zero,106
  8019c0:	00801a9c 	xori	r2,zero,106
  8019c4:	00801a9c 	xori	r2,zero,106
  8019c8:	008020f4 	movhi	r2,131
  8019cc:	00802760 	cmpeqi	r2,zero,157
  8019d0:	00801a9c 	xori	r2,zero,106
  8019d4:	00802760 	cmpeqi	r2,zero,157
  8019d8:	00801a9c 	xori	r2,zero,106
  8019dc:	00801a9c 	xori	r2,zero,106
  8019e0:	00801a9c 	xori	r2,zero,106
  8019e4:	00801a9c 	xori	r2,zero,106
  8019e8:	008028c4 	movi	r2,163
  8019ec:	00801a9c 	xori	r2,zero,106
  8019f0:	00801a9c 	xori	r2,zero,106
  8019f4:	008021a8 	cmpgeui	r2,zero,134
  8019f8:	00801a9c 	xori	r2,zero,106
  8019fc:	00801a9c 	xori	r2,zero,106
  801a00:	00801a9c 	xori	r2,zero,106
  801a04:	00801a9c 	xori	r2,zero,106
  801a08:	00801a9c 	xori	r2,zero,106
  801a0c:	008021f4 	movhi	r2,135
  801a10:	00801a9c 	xori	r2,zero,106
  801a14:	00801a9c 	xori	r2,zero,106
  801a18:	00802814 	movui	r2,160
  801a1c:	00801a9c 	xori	r2,zero,106
  801a20:	00801a9c 	xori	r2,zero,106
  801a24:	00801a9c 	xori	r2,zero,106
  801a28:	00801a9c 	xori	r2,zero,106
  801a2c:	00801a9c 	xori	r2,zero,106
  801a30:	00801a9c 	xori	r2,zero,106
  801a34:	00801a9c 	xori	r2,zero,106
  801a38:	00801a9c 	xori	r2,zero,106
  801a3c:	00801a9c 	xori	r2,zero,106
  801a40:	00801a9c 	xori	r2,zero,106
  801a44:	008027e8 	cmpgeui	r2,zero,159
  801a48:	00802100 	call	80210 <__alt_mem_sram+0x80210>
  801a4c:	00802760 	cmpeqi	r2,zero,157
  801a50:	00802760 	cmpeqi	r2,zero,157
  801a54:	00802760 	cmpeqi	r2,zero,157
  801a58:	0080274c 	andi	r2,zero,157
  801a5c:	00802100 	call	80210 <__alt_mem_sram+0x80210>
  801a60:	00801a9c 	xori	r2,zero,106
  801a64:	00801a9c 	xori	r2,zero,106
  801a68:	008026d4 	movui	r2,155
  801a6c:	00801a9c 	xori	r2,zero,106
  801a70:	008026a4 	muli	r2,zero,154
  801a74:	008021b4 	movhi	r2,134
  801a78:	00802704 	movi	r2,156
  801a7c:	008026f0 	cmpltui	r2,zero,155
  801a80:	00801a9c 	xori	r2,zero,106
  801a84:	00802998 	cmpnei	r2,zero,166
  801a88:	00801a9c 	xori	r2,zero,106
  801a8c:	00802200 	call	80220 <__alt_mem_sram+0x80220>
  801a90:	00801a9c 	xori	r2,zero,106
  801a94:	00801a9c 	xori	r2,zero,106
  801a98:	00802878 	rdprs	r2,zero,161
  801a9c:	d9014d17 	ldw	r4,1332(sp)
  801aa0:	2000ce26 	beq	r4,zero,801ddc <___vfprintf_internal_r+0x6d4>
  801aa4:	01400044 	movi	r5,1
  801aa8:	d9800f04 	addi	r6,sp,60
  801aac:	d9c14015 	stw	r7,1280(sp)
  801ab0:	d9414515 	stw	r5,1300(sp)
  801ab4:	d9814115 	stw	r6,1284(sp)
  801ab8:	280f883a 	mov	r7,r5
  801abc:	d9000f05 	stb	r4,60(sp)
  801ac0:	d8000405 	stb	zero,16(sp)
  801ac4:	d8014615 	stw	zero,1304(sp)
  801ac8:	d8c14c17 	ldw	r3,1328(sp)
  801acc:	1880008c 	andi	r2,r3,2
  801ad0:	1005003a 	cmpeq	r2,r2,zero
  801ad4:	d8815015 	stw	r2,1344(sp)
  801ad8:	1000031e 	bne	r2,zero,801ae8 <___vfprintf_internal_r+0x3e0>
  801adc:	d9014517 	ldw	r4,1300(sp)
  801ae0:	21000084 	addi	r4,r4,2
  801ae4:	d9014515 	stw	r4,1300(sp)
  801ae8:	d9414c17 	ldw	r5,1328(sp)
  801aec:	2940210c 	andi	r5,r5,132
  801af0:	d9414e15 	stw	r5,1336(sp)
  801af4:	28002d1e 	bne	r5,zero,801bac <___vfprintf_internal_r+0x4a4>
  801af8:	d9814a17 	ldw	r6,1320(sp)
  801afc:	d8814517 	ldw	r2,1300(sp)
  801b00:	30a1c83a 	sub	r16,r6,r2
  801b04:	0400290e 	bge	zero,r16,801bac <___vfprintf_internal_r+0x4a4>
  801b08:	00800404 	movi	r2,16
  801b0c:	14045e0e 	bge	r2,r16,802c88 <___vfprintf_internal_r+0x1580>
  801b10:	dc800e17 	ldw	r18,56(sp)
  801b14:	dc400d17 	ldw	r17,52(sp)
  801b18:	1027883a 	mov	r19,r2
  801b1c:	07002074 	movhi	fp,129
  801b20:	e7350184 	addi	fp,fp,-11258
  801b24:	050001c4 	movi	r20,7
  801b28:	00000306 	br	801b38 <___vfprintf_internal_r+0x430>
  801b2c:	843ffc04 	addi	r16,r16,-16
  801b30:	ad400204 	addi	r21,r21,8
  801b34:	9c00130e 	bge	r19,r16,801b84 <___vfprintf_internal_r+0x47c>
  801b38:	94800404 	addi	r18,r18,16
  801b3c:	8c400044 	addi	r17,r17,1
  801b40:	af000015 	stw	fp,0(r21)
  801b44:	acc00115 	stw	r19,4(r21)
  801b48:	dc800e15 	stw	r18,56(sp)
  801b4c:	dc400d15 	stw	r17,52(sp)
  801b50:	a47ff60e 	bge	r20,r17,801b2c <___vfprintf_internal_r+0x424>
  801b54:	d9014f17 	ldw	r4,1340(sp)
  801b58:	b00b883a 	mov	r5,r22
  801b5c:	d9800c04 	addi	r6,sp,48
  801b60:	d9c15115 	stw	r7,1348(sp)
  801b64:	08016b00 	call	8016b0 <__sprint_r>
  801b68:	d9c15117 	ldw	r7,1348(sp)
  801b6c:	10009e1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  801b70:	843ffc04 	addi	r16,r16,-16
  801b74:	dc800e17 	ldw	r18,56(sp)
  801b78:	dc400d17 	ldw	r17,52(sp)
  801b7c:	dd401904 	addi	r21,sp,100
  801b80:	9c3fed16 	blt	r19,r16,801b38 <___vfprintf_internal_r+0x430>
  801b84:	9425883a 	add	r18,r18,r16
  801b88:	8c400044 	addi	r17,r17,1
  801b8c:	008001c4 	movi	r2,7
  801b90:	af000015 	stw	fp,0(r21)
  801b94:	ac000115 	stw	r16,4(r21)
  801b98:	dc800e15 	stw	r18,56(sp)
  801b9c:	dc400d15 	stw	r17,52(sp)
  801ba0:	1441f516 	blt	r2,r17,802378 <___vfprintf_internal_r+0xc70>
  801ba4:	ad400204 	addi	r21,r21,8
  801ba8:	00000206 	br	801bb4 <___vfprintf_internal_r+0x4ac>
  801bac:	dc800e17 	ldw	r18,56(sp)
  801bb0:	dc400d17 	ldw	r17,52(sp)
  801bb4:	d8800407 	ldb	r2,16(sp)
  801bb8:	10000b26 	beq	r2,zero,801be8 <___vfprintf_internal_r+0x4e0>
  801bbc:	00800044 	movi	r2,1
  801bc0:	94800044 	addi	r18,r18,1
  801bc4:	8c400044 	addi	r17,r17,1
  801bc8:	a8800115 	stw	r2,4(r21)
  801bcc:	d8c00404 	addi	r3,sp,16
  801bd0:	008001c4 	movi	r2,7
  801bd4:	a8c00015 	stw	r3,0(r21)
  801bd8:	dc800e15 	stw	r18,56(sp)
  801bdc:	dc400d15 	stw	r17,52(sp)
  801be0:	1441da16 	blt	r2,r17,80234c <___vfprintf_internal_r+0xc44>
  801be4:	ad400204 	addi	r21,r21,8
  801be8:	d9015017 	ldw	r4,1344(sp)
  801bec:	20000b1e 	bne	r4,zero,801c1c <___vfprintf_internal_r+0x514>
  801bf0:	d8800444 	addi	r2,sp,17
  801bf4:	94800084 	addi	r18,r18,2
  801bf8:	8c400044 	addi	r17,r17,1
  801bfc:	a8800015 	stw	r2,0(r21)
  801c00:	00c00084 	movi	r3,2
  801c04:	008001c4 	movi	r2,7
  801c08:	a8c00115 	stw	r3,4(r21)
  801c0c:	dc800e15 	stw	r18,56(sp)
  801c10:	dc400d15 	stw	r17,52(sp)
  801c14:	1441c216 	blt	r2,r17,802320 <___vfprintf_internal_r+0xc18>
  801c18:	ad400204 	addi	r21,r21,8
  801c1c:	d9414e17 	ldw	r5,1336(sp)
  801c20:	00802004 	movi	r2,128
  801c24:	2880b126 	beq	r5,r2,801eec <___vfprintf_internal_r+0x7e4>
  801c28:	d8c14617 	ldw	r3,1304(sp)
  801c2c:	19e1c83a 	sub	r16,r3,r7
  801c30:	0400260e 	bge	zero,r16,801ccc <___vfprintf_internal_r+0x5c4>
  801c34:	00800404 	movi	r2,16
  801c38:	1403cf0e 	bge	r2,r16,802b78 <___vfprintf_internal_r+0x1470>
  801c3c:	1027883a 	mov	r19,r2
  801c40:	07002074 	movhi	fp,129
  801c44:	e734fd84 	addi	fp,fp,-11274
  801c48:	050001c4 	movi	r20,7
  801c4c:	00000306 	br	801c5c <___vfprintf_internal_r+0x554>
  801c50:	843ffc04 	addi	r16,r16,-16
  801c54:	ad400204 	addi	r21,r21,8
  801c58:	9c00130e 	bge	r19,r16,801ca8 <___vfprintf_internal_r+0x5a0>
  801c5c:	94800404 	addi	r18,r18,16
  801c60:	8c400044 	addi	r17,r17,1
  801c64:	af000015 	stw	fp,0(r21)
  801c68:	acc00115 	stw	r19,4(r21)
  801c6c:	dc800e15 	stw	r18,56(sp)
  801c70:	dc400d15 	stw	r17,52(sp)
  801c74:	a47ff60e 	bge	r20,r17,801c50 <___vfprintf_internal_r+0x548>
  801c78:	d9014f17 	ldw	r4,1340(sp)
  801c7c:	b00b883a 	mov	r5,r22
  801c80:	d9800c04 	addi	r6,sp,48
  801c84:	d9c15115 	stw	r7,1348(sp)
  801c88:	08016b00 	call	8016b0 <__sprint_r>
  801c8c:	d9c15117 	ldw	r7,1348(sp)
  801c90:	1000551e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  801c94:	843ffc04 	addi	r16,r16,-16
  801c98:	dc800e17 	ldw	r18,56(sp)
  801c9c:	dc400d17 	ldw	r17,52(sp)
  801ca0:	dd401904 	addi	r21,sp,100
  801ca4:	9c3fed16 	blt	r19,r16,801c5c <___vfprintf_internal_r+0x554>
  801ca8:	9425883a 	add	r18,r18,r16
  801cac:	8c400044 	addi	r17,r17,1
  801cb0:	008001c4 	movi	r2,7
  801cb4:	af000015 	stw	fp,0(r21)
  801cb8:	ac000115 	stw	r16,4(r21)
  801cbc:	dc800e15 	stw	r18,56(sp)
  801cc0:	dc400d15 	stw	r17,52(sp)
  801cc4:	14418216 	blt	r2,r17,8022d0 <___vfprintf_internal_r+0xbc8>
  801cc8:	ad400204 	addi	r21,r21,8
  801ccc:	d9014c17 	ldw	r4,1328(sp)
  801cd0:	2080400c 	andi	r2,r4,256
  801cd4:	10004a1e 	bne	r2,zero,801e00 <___vfprintf_internal_r+0x6f8>
  801cd8:	d9414117 	ldw	r5,1284(sp)
  801cdc:	91e5883a 	add	r18,r18,r7
  801ce0:	8c400044 	addi	r17,r17,1
  801ce4:	008001c4 	movi	r2,7
  801ce8:	a9400015 	stw	r5,0(r21)
  801cec:	a9c00115 	stw	r7,4(r21)
  801cf0:	dc800e15 	stw	r18,56(sp)
  801cf4:	dc400d15 	stw	r17,52(sp)
  801cf8:	14416716 	blt	r2,r17,802298 <___vfprintf_internal_r+0xb90>
  801cfc:	a8c00204 	addi	r3,r21,8
  801d00:	d9814c17 	ldw	r6,1328(sp)
  801d04:	3080010c 	andi	r2,r6,4
  801d08:	10002826 	beq	r2,zero,801dac <___vfprintf_internal_r+0x6a4>
  801d0c:	d8814a17 	ldw	r2,1320(sp)
  801d10:	d9014517 	ldw	r4,1300(sp)
  801d14:	1121c83a 	sub	r16,r2,r4
  801d18:	0400240e 	bge	zero,r16,801dac <___vfprintf_internal_r+0x6a4>
  801d1c:	00800404 	movi	r2,16
  801d20:	1404550e 	bge	r2,r16,802e78 <___vfprintf_internal_r+0x1770>
  801d24:	dc400d17 	ldw	r17,52(sp)
  801d28:	1027883a 	mov	r19,r2
  801d2c:	07002074 	movhi	fp,129
  801d30:	e7350184 	addi	fp,fp,-11258
  801d34:	050001c4 	movi	r20,7
  801d38:	00000306 	br	801d48 <___vfprintf_internal_r+0x640>
  801d3c:	843ffc04 	addi	r16,r16,-16
  801d40:	18c00204 	addi	r3,r3,8
  801d44:	9c00110e 	bge	r19,r16,801d8c <___vfprintf_internal_r+0x684>
  801d48:	94800404 	addi	r18,r18,16
  801d4c:	8c400044 	addi	r17,r17,1
  801d50:	1f000015 	stw	fp,0(r3)
  801d54:	1cc00115 	stw	r19,4(r3)
  801d58:	dc800e15 	stw	r18,56(sp)
  801d5c:	dc400d15 	stw	r17,52(sp)
  801d60:	a47ff60e 	bge	r20,r17,801d3c <___vfprintf_internal_r+0x634>
  801d64:	d9014f17 	ldw	r4,1340(sp)
  801d68:	b00b883a 	mov	r5,r22
  801d6c:	d9800c04 	addi	r6,sp,48
  801d70:	08016b00 	call	8016b0 <__sprint_r>
  801d74:	10001c1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  801d78:	843ffc04 	addi	r16,r16,-16
  801d7c:	dc800e17 	ldw	r18,56(sp)
  801d80:	dc400d17 	ldw	r17,52(sp)
  801d84:	d8c01904 	addi	r3,sp,100
  801d88:	9c3fef16 	blt	r19,r16,801d48 <___vfprintf_internal_r+0x640>
  801d8c:	9425883a 	add	r18,r18,r16
  801d90:	8c400044 	addi	r17,r17,1
  801d94:	008001c4 	movi	r2,7
  801d98:	1f000015 	stw	fp,0(r3)
  801d9c:	1c000115 	stw	r16,4(r3)
  801da0:	dc800e15 	stw	r18,56(sp)
  801da4:	dc400d15 	stw	r17,52(sp)
  801da8:	1440cb16 	blt	r2,r17,8020d8 <___vfprintf_internal_r+0x9d0>
  801dac:	d8814a17 	ldw	r2,1320(sp)
  801db0:	d9414517 	ldw	r5,1300(sp)
  801db4:	1140010e 	bge	r2,r5,801dbc <___vfprintf_internal_r+0x6b4>
  801db8:	2805883a 	mov	r2,r5
  801dbc:	d9814b17 	ldw	r6,1324(sp)
  801dc0:	308d883a 	add	r6,r6,r2
  801dc4:	d9814b15 	stw	r6,1324(sp)
  801dc8:	90013b1e 	bne	r18,zero,8022b8 <___vfprintf_internal_r+0xbb0>
  801dcc:	d9c14017 	ldw	r7,1280(sp)
  801dd0:	dd401904 	addi	r21,sp,100
  801dd4:	d8000d15 	stw	zero,52(sp)
  801dd8:	003ea706 	br	801878 <___vfprintf_internal_r+0x170>
  801ddc:	d8800e17 	ldw	r2,56(sp)
  801de0:	1005451e 	bne	r2,zero,8032f8 <___vfprintf_internal_r+0x1bf0>
  801de4:	d8000d15 	stw	zero,52(sp)
  801de8:	b080030b 	ldhu	r2,12(r22)
  801dec:	1080100c 	andi	r2,r2,64
  801df0:	103e8726 	beq	r2,zero,801810 <___vfprintf_internal_r+0x108>
  801df4:	00bfffc4 	movi	r2,-1
  801df8:	d8814b15 	stw	r2,1324(sp)
  801dfc:	003e8406 	br	801810 <___vfprintf_internal_r+0x108>
  801e00:	d9814d17 	ldw	r6,1332(sp)
  801e04:	00801944 	movi	r2,101
  801e08:	11806e16 	blt	r2,r6,801fc4 <___vfprintf_internal_r+0x8bc>
  801e0c:	d9414717 	ldw	r5,1308(sp)
  801e10:	00c00044 	movi	r3,1
  801e14:	1943490e 	bge	r3,r5,802b3c <___vfprintf_internal_r+0x1434>
  801e18:	d8814117 	ldw	r2,1284(sp)
  801e1c:	94800044 	addi	r18,r18,1
  801e20:	8c400044 	addi	r17,r17,1
  801e24:	a8800015 	stw	r2,0(r21)
  801e28:	008001c4 	movi	r2,7
  801e2c:	a8c00115 	stw	r3,4(r21)
  801e30:	dc800e15 	stw	r18,56(sp)
  801e34:	dc400d15 	stw	r17,52(sp)
  801e38:	1441ca16 	blt	r2,r17,802564 <___vfprintf_internal_r+0xe5c>
  801e3c:	a8c00204 	addi	r3,r21,8
  801e40:	d9014917 	ldw	r4,1316(sp)
  801e44:	00800044 	movi	r2,1
  801e48:	94800044 	addi	r18,r18,1
  801e4c:	8c400044 	addi	r17,r17,1
  801e50:	18800115 	stw	r2,4(r3)
  801e54:	008001c4 	movi	r2,7
  801e58:	19000015 	stw	r4,0(r3)
  801e5c:	dc800e15 	stw	r18,56(sp)
  801e60:	dc400d15 	stw	r17,52(sp)
  801e64:	1441b616 	blt	r2,r17,802540 <___vfprintf_internal_r+0xe38>
  801e68:	1cc00204 	addi	r19,r3,8
  801e6c:	d9014217 	ldw	r4,1288(sp)
  801e70:	d9414317 	ldw	r5,1292(sp)
  801e74:	000d883a 	mov	r6,zero
  801e78:	000f883a 	mov	r7,zero
  801e7c:	0809fd80 	call	809fd8 <__nedf2>
  801e80:	10017426 	beq	r2,zero,802454 <___vfprintf_internal_r+0xd4c>
  801e84:	d9414717 	ldw	r5,1308(sp)
  801e88:	d9814117 	ldw	r6,1284(sp)
  801e8c:	8c400044 	addi	r17,r17,1
  801e90:	2c85883a 	add	r2,r5,r18
  801e94:	14bfffc4 	addi	r18,r2,-1
  801e98:	28bfffc4 	addi	r2,r5,-1
  801e9c:	30c00044 	addi	r3,r6,1
  801ea0:	98800115 	stw	r2,4(r19)
  801ea4:	008001c4 	movi	r2,7
  801ea8:	98c00015 	stw	r3,0(r19)
  801eac:	dc800e15 	stw	r18,56(sp)
  801eb0:	dc400d15 	stw	r17,52(sp)
  801eb4:	14418e16 	blt	r2,r17,8024f0 <___vfprintf_internal_r+0xde8>
  801eb8:	9cc00204 	addi	r19,r19,8
  801ebc:	d9414817 	ldw	r5,1312(sp)
  801ec0:	d8800804 	addi	r2,sp,32
  801ec4:	8c400044 	addi	r17,r17,1
  801ec8:	9165883a 	add	r18,r18,r5
  801ecc:	98800015 	stw	r2,0(r19)
  801ed0:	008001c4 	movi	r2,7
  801ed4:	99400115 	stw	r5,4(r19)
  801ed8:	dc800e15 	stw	r18,56(sp)
  801edc:	dc400d15 	stw	r17,52(sp)
  801ee0:	1440ed16 	blt	r2,r17,802298 <___vfprintf_internal_r+0xb90>
  801ee4:	98c00204 	addi	r3,r19,8
  801ee8:	003f8506 	br	801d00 <___vfprintf_internal_r+0x5f8>
  801eec:	d9814a17 	ldw	r6,1320(sp)
  801ef0:	d8814517 	ldw	r2,1300(sp)
  801ef4:	30a1c83a 	sub	r16,r6,r2
  801ef8:	043f4b0e 	bge	zero,r16,801c28 <___vfprintf_internal_r+0x520>
  801efc:	00800404 	movi	r2,16
  801f00:	14043a0e 	bge	r2,r16,802fec <___vfprintf_internal_r+0x18e4>
  801f04:	1027883a 	mov	r19,r2
  801f08:	07002074 	movhi	fp,129
  801f0c:	e734fd84 	addi	fp,fp,-11274
  801f10:	050001c4 	movi	r20,7
  801f14:	00000306 	br	801f24 <___vfprintf_internal_r+0x81c>
  801f18:	843ffc04 	addi	r16,r16,-16
  801f1c:	ad400204 	addi	r21,r21,8
  801f20:	9c00130e 	bge	r19,r16,801f70 <___vfprintf_internal_r+0x868>
  801f24:	94800404 	addi	r18,r18,16
  801f28:	8c400044 	addi	r17,r17,1
  801f2c:	af000015 	stw	fp,0(r21)
  801f30:	acc00115 	stw	r19,4(r21)
  801f34:	dc800e15 	stw	r18,56(sp)
  801f38:	dc400d15 	stw	r17,52(sp)
  801f3c:	a47ff60e 	bge	r20,r17,801f18 <___vfprintf_internal_r+0x810>
  801f40:	d9014f17 	ldw	r4,1340(sp)
  801f44:	b00b883a 	mov	r5,r22
  801f48:	d9800c04 	addi	r6,sp,48
  801f4c:	d9c15115 	stw	r7,1348(sp)
  801f50:	08016b00 	call	8016b0 <__sprint_r>
  801f54:	d9c15117 	ldw	r7,1348(sp)
  801f58:	103fa31e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  801f5c:	843ffc04 	addi	r16,r16,-16
  801f60:	dc800e17 	ldw	r18,56(sp)
  801f64:	dc400d17 	ldw	r17,52(sp)
  801f68:	dd401904 	addi	r21,sp,100
  801f6c:	9c3fed16 	blt	r19,r16,801f24 <___vfprintf_internal_r+0x81c>
  801f70:	9425883a 	add	r18,r18,r16
  801f74:	8c400044 	addi	r17,r17,1
  801f78:	008001c4 	movi	r2,7
  801f7c:	af000015 	stw	fp,0(r21)
  801f80:	ac000115 	stw	r16,4(r21)
  801f84:	dc800e15 	stw	r18,56(sp)
  801f88:	dc400d15 	stw	r17,52(sp)
  801f8c:	14416116 	blt	r2,r17,802514 <___vfprintf_internal_r+0xe0c>
  801f90:	ad400204 	addi	r21,r21,8
  801f94:	003f2406 	br	801c28 <___vfprintf_internal_r+0x520>
  801f98:	d9014f17 	ldw	r4,1340(sp)
  801f9c:	08051bc0 	call	8051bc <__sinit>
  801fa0:	d9c15117 	ldw	r7,1348(sp)
  801fa4:	003def06 	br	801764 <___vfprintf_internal_r+0x5c>
  801fa8:	d9014f17 	ldw	r4,1340(sp)
  801fac:	b00b883a 	mov	r5,r22
  801fb0:	d9c15115 	stw	r7,1348(sp)
  801fb4:	08035f00 	call	8035f0 <__swsetup_r>
  801fb8:	d9c15117 	ldw	r7,1348(sp)
  801fbc:	103dee26 	beq	r2,zero,801778 <___vfprintf_internal_r+0x70>
  801fc0:	003f8c06 	br	801df4 <___vfprintf_internal_r+0x6ec>
  801fc4:	d9014217 	ldw	r4,1288(sp)
  801fc8:	d9414317 	ldw	r5,1292(sp)
  801fcc:	000d883a 	mov	r6,zero
  801fd0:	000f883a 	mov	r7,zero
  801fd4:	0809f500 	call	809f50 <__eqdf2>
  801fd8:	1000f21e 	bne	r2,zero,8023a4 <___vfprintf_internal_r+0xc9c>
  801fdc:	00802074 	movhi	r2,129
  801fe0:	10b4fd04 	addi	r2,r2,-11276
  801fe4:	94800044 	addi	r18,r18,1
  801fe8:	8c400044 	addi	r17,r17,1
  801fec:	a8800015 	stw	r2,0(r21)
  801ff0:	00c00044 	movi	r3,1
  801ff4:	008001c4 	movi	r2,7
  801ff8:	a8c00115 	stw	r3,4(r21)
  801ffc:	dc800e15 	stw	r18,56(sp)
  802000:	dc400d15 	stw	r17,52(sp)
  802004:	14430016 	blt	r2,r17,802c08 <___vfprintf_internal_r+0x1500>
  802008:	a8c00204 	addi	r3,r21,8
  80200c:	d8800517 	ldw	r2,20(sp)
  802010:	d9014717 	ldw	r4,1308(sp)
  802014:	11015c0e 	bge	r2,r4,802588 <___vfprintf_internal_r+0xe80>
  802018:	dc400d17 	ldw	r17,52(sp)
  80201c:	d9814917 	ldw	r6,1316(sp)
  802020:	00800044 	movi	r2,1
  802024:	94800044 	addi	r18,r18,1
  802028:	8c400044 	addi	r17,r17,1
  80202c:	18800115 	stw	r2,4(r3)
  802030:	008001c4 	movi	r2,7
  802034:	19800015 	stw	r6,0(r3)
  802038:	dc800e15 	stw	r18,56(sp)
  80203c:	dc400d15 	stw	r17,52(sp)
  802040:	14431616 	blt	r2,r17,802c9c <___vfprintf_internal_r+0x1594>
  802044:	18c00204 	addi	r3,r3,8
  802048:	d8814717 	ldw	r2,1308(sp)
  80204c:	143fffc4 	addi	r16,r2,-1
  802050:	043f2b0e 	bge	zero,r16,801d00 <___vfprintf_internal_r+0x5f8>
  802054:	00800404 	movi	r2,16
  802058:	1402a80e 	bge	r2,r16,802afc <___vfprintf_internal_r+0x13f4>
  80205c:	dc400d17 	ldw	r17,52(sp)
  802060:	1027883a 	mov	r19,r2
  802064:	07002074 	movhi	fp,129
  802068:	e734fd84 	addi	fp,fp,-11274
  80206c:	050001c4 	movi	r20,7
  802070:	00000306 	br	802080 <___vfprintf_internal_r+0x978>
  802074:	18c00204 	addi	r3,r3,8
  802078:	843ffc04 	addi	r16,r16,-16
  80207c:	9c02a20e 	bge	r19,r16,802b08 <___vfprintf_internal_r+0x1400>
  802080:	94800404 	addi	r18,r18,16
  802084:	8c400044 	addi	r17,r17,1
  802088:	1f000015 	stw	fp,0(r3)
  80208c:	1cc00115 	stw	r19,4(r3)
  802090:	dc800e15 	stw	r18,56(sp)
  802094:	dc400d15 	stw	r17,52(sp)
  802098:	a47ff60e 	bge	r20,r17,802074 <___vfprintf_internal_r+0x96c>
  80209c:	d9014f17 	ldw	r4,1340(sp)
  8020a0:	b00b883a 	mov	r5,r22
  8020a4:	d9800c04 	addi	r6,sp,48
  8020a8:	08016b00 	call	8016b0 <__sprint_r>
  8020ac:	103f4e1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  8020b0:	dc800e17 	ldw	r18,56(sp)
  8020b4:	dc400d17 	ldw	r17,52(sp)
  8020b8:	d8c01904 	addi	r3,sp,100
  8020bc:	003fee06 	br	802078 <___vfprintf_internal_r+0x970>
  8020c0:	d8802c0b 	ldhu	r2,176(sp)
  8020c4:	00ffffc4 	movi	r3,-1
  8020c8:	d8c14b15 	stw	r3,1324(sp)
  8020cc:	1080100c 	andi	r2,r2,64
  8020d0:	103dcc1e 	bne	r2,zero,801804 <___vfprintf_internal_r+0xfc>
  8020d4:	003dce06 	br	801810 <___vfprintf_internal_r+0x108>
  8020d8:	d9014f17 	ldw	r4,1340(sp)
  8020dc:	b00b883a 	mov	r5,r22
  8020e0:	d9800c04 	addi	r6,sp,48
  8020e4:	08016b00 	call	8016b0 <__sprint_r>
  8020e8:	103f3f1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  8020ec:	dc800e17 	ldw	r18,56(sp)
  8020f0:	003f2e06 	br	801dac <___vfprintf_internal_r+0x6a4>
  8020f4:	d9414c17 	ldw	r5,1328(sp)
  8020f8:	29400414 	ori	r5,r5,16
  8020fc:	d9414c15 	stw	r5,1328(sp)
  802100:	d9814c17 	ldw	r6,1328(sp)
  802104:	3080080c 	andi	r2,r6,32
  802108:	10014f1e 	bne	r2,zero,802648 <___vfprintf_internal_r+0xf40>
  80210c:	d8c14c17 	ldw	r3,1328(sp)
  802110:	1880040c 	andi	r2,r3,16
  802114:	1002f01e 	bne	r2,zero,802cd8 <___vfprintf_internal_r+0x15d0>
  802118:	d9014c17 	ldw	r4,1328(sp)
  80211c:	2080100c 	andi	r2,r4,64
  802120:	1002ed26 	beq	r2,zero,802cd8 <___vfprintf_internal_r+0x15d0>
  802124:	3880000f 	ldh	r2,0(r7)
  802128:	39c00104 	addi	r7,r7,4
  80212c:	d9c14015 	stw	r7,1280(sp)
  802130:	1023d7fa 	srai	r17,r2,31
  802134:	1021883a 	mov	r16,r2
  802138:	88037816 	blt	r17,zero,802f1c <___vfprintf_internal_r+0x1814>
  80213c:	01000044 	movi	r4,1
  802140:	98000416 	blt	r19,zero,802154 <___vfprintf_internal_r+0xa4c>
  802144:	d8c14c17 	ldw	r3,1328(sp)
  802148:	00bfdfc4 	movi	r2,-129
  80214c:	1886703a 	and	r3,r3,r2
  802150:	d8c14c15 	stw	r3,1328(sp)
  802154:	8444b03a 	or	r2,r16,r17
  802158:	10022c1e 	bne	r2,zero,802a0c <___vfprintf_internal_r+0x1304>
  80215c:	98022b1e 	bne	r19,zero,802a0c <___vfprintf_internal_r+0x1304>
  802160:	20803fcc 	andi	r2,r4,255
  802164:	1002a126 	beq	r2,zero,802bec <___vfprintf_internal_r+0x14e4>
  802168:	d8c01904 	addi	r3,sp,100
  80216c:	dd000f04 	addi	r20,sp,60
  802170:	d8c14115 	stw	r3,1284(sp)
  802174:	d8c14117 	ldw	r3,1284(sp)
  802178:	dcc14515 	stw	r19,1300(sp)
  80217c:	a0c5c83a 	sub	r2,r20,r3
  802180:	11c00a04 	addi	r7,r2,40
  802184:	99c0010e 	bge	r19,r7,80218c <___vfprintf_internal_r+0xa84>
  802188:	d9c14515 	stw	r7,1300(sp)
  80218c:	dcc14615 	stw	r19,1304(sp)
  802190:	d8800407 	ldb	r2,16(sp)
  802194:	103e4c26 	beq	r2,zero,801ac8 <___vfprintf_internal_r+0x3c0>
  802198:	d8814517 	ldw	r2,1300(sp)
  80219c:	10800044 	addi	r2,r2,1
  8021a0:	d8814515 	stw	r2,1300(sp)
  8021a4:	003e4806 	br	801ac8 <___vfprintf_internal_r+0x3c0>
  8021a8:	d9814c17 	ldw	r6,1328(sp)
  8021ac:	31800414 	ori	r6,r6,16
  8021b0:	d9814c15 	stw	r6,1328(sp)
  8021b4:	d8c14c17 	ldw	r3,1328(sp)
  8021b8:	1880080c 	andi	r2,r3,32
  8021bc:	1001271e 	bne	r2,zero,80265c <___vfprintf_internal_r+0xf54>
  8021c0:	d9414c17 	ldw	r5,1328(sp)
  8021c4:	2880040c 	andi	r2,r5,16
  8021c8:	1002bc1e 	bne	r2,zero,802cbc <___vfprintf_internal_r+0x15b4>
  8021cc:	d9814c17 	ldw	r6,1328(sp)
  8021d0:	3080100c 	andi	r2,r6,64
  8021d4:	1002b926 	beq	r2,zero,802cbc <___vfprintf_internal_r+0x15b4>
  8021d8:	3c00000b 	ldhu	r16,0(r7)
  8021dc:	0009883a 	mov	r4,zero
  8021e0:	39c00104 	addi	r7,r7,4
  8021e4:	0023883a 	mov	r17,zero
  8021e8:	d9c14015 	stw	r7,1280(sp)
  8021ec:	d8000405 	stb	zero,16(sp)
  8021f0:	003fd306 	br	802140 <___vfprintf_internal_r+0xa38>
  8021f4:	d9014c17 	ldw	r4,1328(sp)
  8021f8:	21000414 	ori	r4,r4,16
  8021fc:	d9014c15 	stw	r4,1328(sp)
  802200:	d9414c17 	ldw	r5,1328(sp)
  802204:	2880080c 	andi	r2,r5,32
  802208:	1001081e 	bne	r2,zero,80262c <___vfprintf_internal_r+0xf24>
  80220c:	d8c14c17 	ldw	r3,1328(sp)
  802210:	1880040c 	andi	r2,r3,16
  802214:	1002b61e 	bne	r2,zero,802cf0 <___vfprintf_internal_r+0x15e8>
  802218:	d9014c17 	ldw	r4,1328(sp)
  80221c:	2080100c 	andi	r2,r4,64
  802220:	1002b326 	beq	r2,zero,802cf0 <___vfprintf_internal_r+0x15e8>
  802224:	3c00000b 	ldhu	r16,0(r7)
  802228:	01000044 	movi	r4,1
  80222c:	39c00104 	addi	r7,r7,4
  802230:	0023883a 	mov	r17,zero
  802234:	d9c14015 	stw	r7,1280(sp)
  802238:	d8000405 	stb	zero,16(sp)
  80223c:	003fc006 	br	802140 <___vfprintf_internal_r+0xa38>
  802240:	d9014f17 	ldw	r4,1340(sp)
  802244:	b00b883a 	mov	r5,r22
  802248:	d9800c04 	addi	r6,sp,48
  80224c:	08016b00 	call	8016b0 <__sprint_r>
  802250:	103ee51e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802254:	dc800e17 	ldw	r18,56(sp)
  802258:	d8c01904 	addi	r3,sp,100
  80225c:	d9814c17 	ldw	r6,1328(sp)
  802260:	3080004c 	andi	r2,r6,1
  802264:	1005003a 	cmpeq	r2,r2,zero
  802268:	103ea51e 	bne	r2,zero,801d00 <___vfprintf_internal_r+0x5f8>
  80226c:	00800044 	movi	r2,1
  802270:	dc400d17 	ldw	r17,52(sp)
  802274:	18800115 	stw	r2,4(r3)
  802278:	d8814917 	ldw	r2,1316(sp)
  80227c:	94800044 	addi	r18,r18,1
  802280:	8c400044 	addi	r17,r17,1
  802284:	18800015 	stw	r2,0(r3)
  802288:	008001c4 	movi	r2,7
  80228c:	dc800e15 	stw	r18,56(sp)
  802290:	dc400d15 	stw	r17,52(sp)
  802294:	1442240e 	bge	r2,r17,802b28 <___vfprintf_internal_r+0x1420>
  802298:	d9014f17 	ldw	r4,1340(sp)
  80229c:	b00b883a 	mov	r5,r22
  8022a0:	d9800c04 	addi	r6,sp,48
  8022a4:	08016b00 	call	8016b0 <__sprint_r>
  8022a8:	103ecf1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  8022ac:	dc800e17 	ldw	r18,56(sp)
  8022b0:	d8c01904 	addi	r3,sp,100
  8022b4:	003e9206 	br	801d00 <___vfprintf_internal_r+0x5f8>
  8022b8:	d9014f17 	ldw	r4,1340(sp)
  8022bc:	b00b883a 	mov	r5,r22
  8022c0:	d9800c04 	addi	r6,sp,48
  8022c4:	08016b00 	call	8016b0 <__sprint_r>
  8022c8:	103ec026 	beq	r2,zero,801dcc <___vfprintf_internal_r+0x6c4>
  8022cc:	003ec606 	br	801de8 <___vfprintf_internal_r+0x6e0>
  8022d0:	d9014f17 	ldw	r4,1340(sp)
  8022d4:	b00b883a 	mov	r5,r22
  8022d8:	d9800c04 	addi	r6,sp,48
  8022dc:	d9c15115 	stw	r7,1348(sp)
  8022e0:	08016b00 	call	8016b0 <__sprint_r>
  8022e4:	d9c15117 	ldw	r7,1348(sp)
  8022e8:	103ebf1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  8022ec:	dc800e17 	ldw	r18,56(sp)
  8022f0:	dc400d17 	ldw	r17,52(sp)
  8022f4:	dd401904 	addi	r21,sp,100
  8022f8:	003e7406 	br	801ccc <___vfprintf_internal_r+0x5c4>
  8022fc:	d9014f17 	ldw	r4,1340(sp)
  802300:	b00b883a 	mov	r5,r22
  802304:	d9800c04 	addi	r6,sp,48
  802308:	d9c15115 	stw	r7,1348(sp)
  80230c:	08016b00 	call	8016b0 <__sprint_r>
  802310:	d9c15117 	ldw	r7,1348(sp)
  802314:	103eb41e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802318:	dd401904 	addi	r21,sp,100
  80231c:	003d6d06 	br	8018d4 <___vfprintf_internal_r+0x1cc>
  802320:	d9014f17 	ldw	r4,1340(sp)
  802324:	b00b883a 	mov	r5,r22
  802328:	d9800c04 	addi	r6,sp,48
  80232c:	d9c15115 	stw	r7,1348(sp)
  802330:	08016b00 	call	8016b0 <__sprint_r>
  802334:	d9c15117 	ldw	r7,1348(sp)
  802338:	103eab1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  80233c:	dc800e17 	ldw	r18,56(sp)
  802340:	dc400d17 	ldw	r17,52(sp)
  802344:	dd401904 	addi	r21,sp,100
  802348:	003e3406 	br	801c1c <___vfprintf_internal_r+0x514>
  80234c:	d9014f17 	ldw	r4,1340(sp)
  802350:	b00b883a 	mov	r5,r22
  802354:	d9800c04 	addi	r6,sp,48
  802358:	d9c15115 	stw	r7,1348(sp)
  80235c:	08016b00 	call	8016b0 <__sprint_r>
  802360:	d9c15117 	ldw	r7,1348(sp)
  802364:	103ea01e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802368:	dc800e17 	ldw	r18,56(sp)
  80236c:	dc400d17 	ldw	r17,52(sp)
  802370:	dd401904 	addi	r21,sp,100
  802374:	003e1c06 	br	801be8 <___vfprintf_internal_r+0x4e0>
  802378:	d9014f17 	ldw	r4,1340(sp)
  80237c:	b00b883a 	mov	r5,r22
  802380:	d9800c04 	addi	r6,sp,48
  802384:	d9c15115 	stw	r7,1348(sp)
  802388:	08016b00 	call	8016b0 <__sprint_r>
  80238c:	d9c15117 	ldw	r7,1348(sp)
  802390:	103e951e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802394:	dc800e17 	ldw	r18,56(sp)
  802398:	dc400d17 	ldw	r17,52(sp)
  80239c:	dd401904 	addi	r21,sp,100
  8023a0:	003e0406 	br	801bb4 <___vfprintf_internal_r+0x4ac>
  8023a4:	d9000517 	ldw	r4,20(sp)
  8023a8:	0102580e 	bge	zero,r4,802d0c <___vfprintf_internal_r+0x1604>
  8023ac:	d9814717 	ldw	r6,1308(sp)
  8023b0:	21807a16 	blt	r4,r6,80259c <___vfprintf_internal_r+0xe94>
  8023b4:	d8814117 	ldw	r2,1284(sp)
  8023b8:	91a5883a 	add	r18,r18,r6
  8023bc:	8c400044 	addi	r17,r17,1
  8023c0:	a8800015 	stw	r2,0(r21)
  8023c4:	008001c4 	movi	r2,7
  8023c8:	a9800115 	stw	r6,4(r21)
  8023cc:	dc800e15 	stw	r18,56(sp)
  8023d0:	dc400d15 	stw	r17,52(sp)
  8023d4:	1442fc16 	blt	r2,r17,802fc8 <___vfprintf_internal_r+0x18c0>
  8023d8:	a8c00204 	addi	r3,r21,8
  8023dc:	d9414717 	ldw	r5,1308(sp)
  8023e0:	2161c83a 	sub	r16,r4,r5
  8023e4:	043f9d0e 	bge	zero,r16,80225c <___vfprintf_internal_r+0xb54>
  8023e8:	00800404 	movi	r2,16
  8023ec:	1402190e 	bge	r2,r16,802c54 <___vfprintf_internal_r+0x154c>
  8023f0:	dc400d17 	ldw	r17,52(sp)
  8023f4:	1027883a 	mov	r19,r2
  8023f8:	07002074 	movhi	fp,129
  8023fc:	e734fd84 	addi	fp,fp,-11274
  802400:	050001c4 	movi	r20,7
  802404:	00000306 	br	802414 <___vfprintf_internal_r+0xd0c>
  802408:	18c00204 	addi	r3,r3,8
  80240c:	843ffc04 	addi	r16,r16,-16
  802410:	9c02130e 	bge	r19,r16,802c60 <___vfprintf_internal_r+0x1558>
  802414:	94800404 	addi	r18,r18,16
  802418:	8c400044 	addi	r17,r17,1
  80241c:	1f000015 	stw	fp,0(r3)
  802420:	1cc00115 	stw	r19,4(r3)
  802424:	dc800e15 	stw	r18,56(sp)
  802428:	dc400d15 	stw	r17,52(sp)
  80242c:	a47ff60e 	bge	r20,r17,802408 <___vfprintf_internal_r+0xd00>
  802430:	d9014f17 	ldw	r4,1340(sp)
  802434:	b00b883a 	mov	r5,r22
  802438:	d9800c04 	addi	r6,sp,48
  80243c:	08016b00 	call	8016b0 <__sprint_r>
  802440:	103e691e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802444:	dc800e17 	ldw	r18,56(sp)
  802448:	dc400d17 	ldw	r17,52(sp)
  80244c:	d8c01904 	addi	r3,sp,100
  802450:	003fee06 	br	80240c <___vfprintf_internal_r+0xd04>
  802454:	d8814717 	ldw	r2,1308(sp)
  802458:	143fffc4 	addi	r16,r2,-1
  80245c:	043e970e 	bge	zero,r16,801ebc <___vfprintf_internal_r+0x7b4>
  802460:	00800404 	movi	r2,16
  802464:	1400180e 	bge	r2,r16,8024c8 <___vfprintf_internal_r+0xdc0>
  802468:	1029883a 	mov	r20,r2
  80246c:	07002074 	movhi	fp,129
  802470:	e734fd84 	addi	fp,fp,-11274
  802474:	054001c4 	movi	r21,7
  802478:	00000306 	br	802488 <___vfprintf_internal_r+0xd80>
  80247c:	9cc00204 	addi	r19,r19,8
  802480:	843ffc04 	addi	r16,r16,-16
  802484:	a400120e 	bge	r20,r16,8024d0 <___vfprintf_internal_r+0xdc8>
  802488:	94800404 	addi	r18,r18,16
  80248c:	8c400044 	addi	r17,r17,1
  802490:	9f000015 	stw	fp,0(r19)
  802494:	9d000115 	stw	r20,4(r19)
  802498:	dc800e15 	stw	r18,56(sp)
  80249c:	dc400d15 	stw	r17,52(sp)
  8024a0:	ac7ff60e 	bge	r21,r17,80247c <___vfprintf_internal_r+0xd74>
  8024a4:	d9014f17 	ldw	r4,1340(sp)
  8024a8:	b00b883a 	mov	r5,r22
  8024ac:	d9800c04 	addi	r6,sp,48
  8024b0:	08016b00 	call	8016b0 <__sprint_r>
  8024b4:	103e4c1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  8024b8:	dc800e17 	ldw	r18,56(sp)
  8024bc:	dc400d17 	ldw	r17,52(sp)
  8024c0:	dcc01904 	addi	r19,sp,100
  8024c4:	003fee06 	br	802480 <___vfprintf_internal_r+0xd78>
  8024c8:	07002074 	movhi	fp,129
  8024cc:	e734fd84 	addi	fp,fp,-11274
  8024d0:	9425883a 	add	r18,r18,r16
  8024d4:	8c400044 	addi	r17,r17,1
  8024d8:	008001c4 	movi	r2,7
  8024dc:	9f000015 	stw	fp,0(r19)
  8024e0:	9c000115 	stw	r16,4(r19)
  8024e4:	dc800e15 	stw	r18,56(sp)
  8024e8:	dc400d15 	stw	r17,52(sp)
  8024ec:	147e720e 	bge	r2,r17,801eb8 <___vfprintf_internal_r+0x7b0>
  8024f0:	d9014f17 	ldw	r4,1340(sp)
  8024f4:	b00b883a 	mov	r5,r22
  8024f8:	d9800c04 	addi	r6,sp,48
  8024fc:	08016b00 	call	8016b0 <__sprint_r>
  802500:	103e391e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802504:	dc800e17 	ldw	r18,56(sp)
  802508:	dc400d17 	ldw	r17,52(sp)
  80250c:	dcc01904 	addi	r19,sp,100
  802510:	003e6a06 	br	801ebc <___vfprintf_internal_r+0x7b4>
  802514:	d9014f17 	ldw	r4,1340(sp)
  802518:	b00b883a 	mov	r5,r22
  80251c:	d9800c04 	addi	r6,sp,48
  802520:	d9c15115 	stw	r7,1348(sp)
  802524:	08016b00 	call	8016b0 <__sprint_r>
  802528:	d9c15117 	ldw	r7,1348(sp)
  80252c:	103e2e1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802530:	dc800e17 	ldw	r18,56(sp)
  802534:	dc400d17 	ldw	r17,52(sp)
  802538:	dd401904 	addi	r21,sp,100
  80253c:	003dba06 	br	801c28 <___vfprintf_internal_r+0x520>
  802540:	d9014f17 	ldw	r4,1340(sp)
  802544:	b00b883a 	mov	r5,r22
  802548:	d9800c04 	addi	r6,sp,48
  80254c:	08016b00 	call	8016b0 <__sprint_r>
  802550:	103e251e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802554:	dc800e17 	ldw	r18,56(sp)
  802558:	dc400d17 	ldw	r17,52(sp)
  80255c:	dcc01904 	addi	r19,sp,100
  802560:	003e4206 	br	801e6c <___vfprintf_internal_r+0x764>
  802564:	d9014f17 	ldw	r4,1340(sp)
  802568:	b00b883a 	mov	r5,r22
  80256c:	d9800c04 	addi	r6,sp,48
  802570:	08016b00 	call	8016b0 <__sprint_r>
  802574:	103e1c1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802578:	dc800e17 	ldw	r18,56(sp)
  80257c:	dc400d17 	ldw	r17,52(sp)
  802580:	d8c01904 	addi	r3,sp,100
  802584:	003e2e06 	br	801e40 <___vfprintf_internal_r+0x738>
  802588:	d9414c17 	ldw	r5,1328(sp)
  80258c:	2880004c 	andi	r2,r5,1
  802590:	1005003a 	cmpeq	r2,r2,zero
  802594:	103dda1e 	bne	r2,zero,801d00 <___vfprintf_internal_r+0x5f8>
  802598:	003e9f06 	br	802018 <___vfprintf_internal_r+0x910>
  80259c:	d8c14117 	ldw	r3,1284(sp)
  8025a0:	9125883a 	add	r18,r18,r4
  8025a4:	8c400044 	addi	r17,r17,1
  8025a8:	008001c4 	movi	r2,7
  8025ac:	a8c00015 	stw	r3,0(r21)
  8025b0:	a9000115 	stw	r4,4(r21)
  8025b4:	dc800e15 	stw	r18,56(sp)
  8025b8:	dc400d15 	stw	r17,52(sp)
  8025bc:	14426c16 	blt	r2,r17,802f70 <___vfprintf_internal_r+0x1868>
  8025c0:	a8c00204 	addi	r3,r21,8
  8025c4:	d9414917 	ldw	r5,1316(sp)
  8025c8:	00800044 	movi	r2,1
  8025cc:	94800044 	addi	r18,r18,1
  8025d0:	8c400044 	addi	r17,r17,1
  8025d4:	18800115 	stw	r2,4(r3)
  8025d8:	008001c4 	movi	r2,7
  8025dc:	19400015 	stw	r5,0(r3)
  8025e0:	dc800e15 	stw	r18,56(sp)
  8025e4:	dc400d15 	stw	r17,52(sp)
  8025e8:	2021883a 	mov	r16,r4
  8025ec:	14425616 	blt	r2,r17,802f48 <___vfprintf_internal_r+0x1840>
  8025f0:	19400204 	addi	r5,r3,8
  8025f4:	d9814717 	ldw	r6,1308(sp)
  8025f8:	8c400044 	addi	r17,r17,1
  8025fc:	dc400d15 	stw	r17,52(sp)
  802600:	3107c83a 	sub	r3,r6,r4
  802604:	d9014117 	ldw	r4,1284(sp)
  802608:	90e5883a 	add	r18,r18,r3
  80260c:	28c00115 	stw	r3,4(r5)
  802610:	8105883a 	add	r2,r16,r4
  802614:	28800015 	stw	r2,0(r5)
  802618:	008001c4 	movi	r2,7
  80261c:	dc800e15 	stw	r18,56(sp)
  802620:	147f1d16 	blt	r2,r17,802298 <___vfprintf_internal_r+0xb90>
  802624:	28c00204 	addi	r3,r5,8
  802628:	003db506 	br	801d00 <___vfprintf_internal_r+0x5f8>
  80262c:	3c000017 	ldw	r16,0(r7)
  802630:	3c400117 	ldw	r17,4(r7)
  802634:	39800204 	addi	r6,r7,8
  802638:	01000044 	movi	r4,1
  80263c:	d9814015 	stw	r6,1280(sp)
  802640:	d8000405 	stb	zero,16(sp)
  802644:	003ebe06 	br	802140 <___vfprintf_internal_r+0xa38>
  802648:	3c000017 	ldw	r16,0(r7)
  80264c:	3c400117 	ldw	r17,4(r7)
  802650:	38800204 	addi	r2,r7,8
  802654:	d8814015 	stw	r2,1280(sp)
  802658:	003eb706 	br	802138 <___vfprintf_internal_r+0xa30>
  80265c:	3c000017 	ldw	r16,0(r7)
  802660:	3c400117 	ldw	r17,4(r7)
  802664:	39000204 	addi	r4,r7,8
  802668:	d9014015 	stw	r4,1280(sp)
  80266c:	0009883a 	mov	r4,zero
  802670:	d8000405 	stb	zero,16(sp)
  802674:	003eb206 	br	802140 <___vfprintf_internal_r+0xa38>
  802678:	38c00017 	ldw	r3,0(r7)
  80267c:	39c00104 	addi	r7,r7,4
  802680:	d8c14a15 	stw	r3,1320(sp)
  802684:	1800d70e 	bge	r3,zero,8029e4 <___vfprintf_internal_r+0x12dc>
  802688:	00c7c83a 	sub	r3,zero,r3
  80268c:	d8c14a15 	stw	r3,1320(sp)
  802690:	d9014c17 	ldw	r4,1328(sp)
  802694:	b8c00007 	ldb	r3,0(r23)
  802698:	21000114 	ori	r4,r4,4
  80269c:	d9014c15 	stw	r4,1328(sp)
  8026a0:	003c9806 	br	801904 <___vfprintf_internal_r+0x1fc>
  8026a4:	d9814c17 	ldw	r6,1328(sp)
  8026a8:	3080080c 	andi	r2,r6,32
  8026ac:	1001f626 	beq	r2,zero,802e88 <___vfprintf_internal_r+0x1780>
  8026b0:	d9014b17 	ldw	r4,1324(sp)
  8026b4:	38800017 	ldw	r2,0(r7)
  8026b8:	39c00104 	addi	r7,r7,4
  8026bc:	d9c14015 	stw	r7,1280(sp)
  8026c0:	2007d7fa 	srai	r3,r4,31
  8026c4:	d9c14017 	ldw	r7,1280(sp)
  8026c8:	11000015 	stw	r4,0(r2)
  8026cc:	10c00115 	stw	r3,4(r2)
  8026d0:	003c6906 	br	801878 <___vfprintf_internal_r+0x170>
  8026d4:	b8c00007 	ldb	r3,0(r23)
  8026d8:	00801b04 	movi	r2,108
  8026dc:	18825526 	beq	r3,r2,803034 <___vfprintf_internal_r+0x192c>
  8026e0:	d9414c17 	ldw	r5,1328(sp)
  8026e4:	29400414 	ori	r5,r5,16
  8026e8:	d9414c15 	stw	r5,1328(sp)
  8026ec:	003c8506 	br	801904 <___vfprintf_internal_r+0x1fc>
  8026f0:	d9814c17 	ldw	r6,1328(sp)
  8026f4:	b8c00007 	ldb	r3,0(r23)
  8026f8:	31800814 	ori	r6,r6,32
  8026fc:	d9814c15 	stw	r6,1328(sp)
  802700:	003c8006 	br	801904 <___vfprintf_internal_r+0x1fc>
  802704:	d8814c17 	ldw	r2,1328(sp)
  802708:	3c000017 	ldw	r16,0(r7)
  80270c:	00c01e04 	movi	r3,120
  802710:	10800094 	ori	r2,r2,2
  802714:	d8814c15 	stw	r2,1328(sp)
  802718:	39c00104 	addi	r7,r7,4
  80271c:	01402074 	movhi	r5,129
  802720:	2974e604 	addi	r5,r5,-11368
  802724:	00800c04 	movi	r2,48
  802728:	0023883a 	mov	r17,zero
  80272c:	01000084 	movi	r4,2
  802730:	d9c14015 	stw	r7,1280(sp)
  802734:	d8c14d15 	stw	r3,1332(sp)
  802738:	d9414415 	stw	r5,1296(sp)
  80273c:	d8800445 	stb	r2,17(sp)
  802740:	d8c00485 	stb	r3,18(sp)
  802744:	d8000405 	stb	zero,16(sp)
  802748:	003e7d06 	br	802140 <___vfprintf_internal_r+0xa38>
  80274c:	d8814c17 	ldw	r2,1328(sp)
  802750:	b8c00007 	ldb	r3,0(r23)
  802754:	10801014 	ori	r2,r2,64
  802758:	d8814c15 	stw	r2,1328(sp)
  80275c:	003c6906 	br	801904 <___vfprintf_internal_r+0x1fc>
  802760:	d9414c17 	ldw	r5,1328(sp)
  802764:	2880020c 	andi	r2,r5,8
  802768:	1001e526 	beq	r2,zero,802f00 <___vfprintf_internal_r+0x17f8>
  80276c:	39800017 	ldw	r6,0(r7)
  802770:	38800204 	addi	r2,r7,8
  802774:	d8814015 	stw	r2,1280(sp)
  802778:	d9814215 	stw	r6,1288(sp)
  80277c:	39c00117 	ldw	r7,4(r7)
  802780:	d9c14315 	stw	r7,1292(sp)
  802784:	d9014217 	ldw	r4,1288(sp)
  802788:	d9414317 	ldw	r5,1292(sp)
  80278c:	08081b80 	call	8081b8 <__isinfd>
  802790:	10021d26 	beq	r2,zero,803008 <___vfprintf_internal_r+0x1900>
  802794:	d9014217 	ldw	r4,1288(sp)
  802798:	d9414317 	ldw	r5,1292(sp)
  80279c:	000d883a 	mov	r6,zero
  8027a0:	000f883a 	mov	r7,zero
  8027a4:	080a1700 	call	80a170 <__ltdf2>
  8027a8:	1002d016 	blt	r2,zero,8032ec <___vfprintf_internal_r+0x1be4>
  8027ac:	d9414d17 	ldw	r5,1332(sp)
  8027b0:	008011c4 	movi	r2,71
  8027b4:	11421016 	blt	r2,r5,802ff8 <___vfprintf_internal_r+0x18f0>
  8027b8:	01802074 	movhi	r6,129
  8027bc:	31b4eb04 	addi	r6,r6,-11348
  8027c0:	d9814115 	stw	r6,1284(sp)
  8027c4:	d9014c17 	ldw	r4,1328(sp)
  8027c8:	00c000c4 	movi	r3,3
  8027cc:	00bfdfc4 	movi	r2,-129
  8027d0:	2088703a 	and	r4,r4,r2
  8027d4:	180f883a 	mov	r7,r3
  8027d8:	d8c14515 	stw	r3,1300(sp)
  8027dc:	d9014c15 	stw	r4,1328(sp)
  8027e0:	d8014615 	stw	zero,1304(sp)
  8027e4:	003e6a06 	br	802190 <___vfprintf_internal_r+0xa88>
  8027e8:	38800017 	ldw	r2,0(r7)
  8027ec:	00c00044 	movi	r3,1
  8027f0:	39c00104 	addi	r7,r7,4
  8027f4:	d9c14015 	stw	r7,1280(sp)
  8027f8:	d9000f04 	addi	r4,sp,60
  8027fc:	180f883a 	mov	r7,r3
  802800:	d8c14515 	stw	r3,1300(sp)
  802804:	d9014115 	stw	r4,1284(sp)
  802808:	d8800f05 	stb	r2,60(sp)
  80280c:	d8000405 	stb	zero,16(sp)
  802810:	003cac06 	br	801ac4 <___vfprintf_internal_r+0x3bc>
  802814:	01402074 	movhi	r5,129
  802818:	2974f104 	addi	r5,r5,-11324
  80281c:	d9414415 	stw	r5,1296(sp)
  802820:	d9814c17 	ldw	r6,1328(sp)
  802824:	3080080c 	andi	r2,r6,32
  802828:	1000ff26 	beq	r2,zero,802c28 <___vfprintf_internal_r+0x1520>
  80282c:	3c000017 	ldw	r16,0(r7)
  802830:	3c400117 	ldw	r17,4(r7)
  802834:	38800204 	addi	r2,r7,8
  802838:	d8814015 	stw	r2,1280(sp)
  80283c:	d9414c17 	ldw	r5,1328(sp)
  802840:	2880004c 	andi	r2,r5,1
  802844:	1005003a 	cmpeq	r2,r2,zero
  802848:	1000b91e 	bne	r2,zero,802b30 <___vfprintf_internal_r+0x1428>
  80284c:	8444b03a 	or	r2,r16,r17
  802850:	1000b726 	beq	r2,zero,802b30 <___vfprintf_internal_r+0x1428>
  802854:	d9814d17 	ldw	r6,1332(sp)
  802858:	29400094 	ori	r5,r5,2
  80285c:	00800c04 	movi	r2,48
  802860:	01000084 	movi	r4,2
  802864:	d9414c15 	stw	r5,1328(sp)
  802868:	d8800445 	stb	r2,17(sp)
  80286c:	d9800485 	stb	r6,18(sp)
  802870:	d8000405 	stb	zero,16(sp)
  802874:	003e3206 	br	802140 <___vfprintf_internal_r+0xa38>
  802878:	01802074 	movhi	r6,129
  80287c:	31b4e604 	addi	r6,r6,-11368
  802880:	d9814415 	stw	r6,1296(sp)
  802884:	003fe606 	br	802820 <___vfprintf_internal_r+0x1118>
  802888:	00800ac4 	movi	r2,43
  80288c:	d8800405 	stb	r2,16(sp)
  802890:	b8c00007 	ldb	r3,0(r23)
  802894:	003c1b06 	br	801904 <___vfprintf_internal_r+0x1fc>
  802898:	d8814c17 	ldw	r2,1328(sp)
  80289c:	b8c00007 	ldb	r3,0(r23)
  8028a0:	10800054 	ori	r2,r2,1
  8028a4:	d8814c15 	stw	r2,1328(sp)
  8028a8:	003c1606 	br	801904 <___vfprintf_internal_r+0x1fc>
  8028ac:	d8800407 	ldb	r2,16(sp)
  8028b0:	10004c1e 	bne	r2,zero,8029e4 <___vfprintf_internal_r+0x12dc>
  8028b4:	00800804 	movi	r2,32
  8028b8:	d8800405 	stb	r2,16(sp)
  8028bc:	b8c00007 	ldb	r3,0(r23)
  8028c0:	003c1006 	br	801904 <___vfprintf_internal_r+0x1fc>
  8028c4:	d9814c17 	ldw	r6,1328(sp)
  8028c8:	b8c00007 	ldb	r3,0(r23)
  8028cc:	31800214 	ori	r6,r6,8
  8028d0:	d9814c15 	stw	r6,1328(sp)
  8028d4:	003c0b06 	br	801904 <___vfprintf_internal_r+0x1fc>
  8028d8:	0009883a 	mov	r4,zero
  8028dc:	04000244 	movi	r16,9
  8028e0:	01400284 	movi	r5,10
  8028e4:	d9c15115 	stw	r7,1348(sp)
  8028e8:	08016000 	call	801600 <__mulsi3>
  8028ec:	b9000007 	ldb	r4,0(r23)
  8028f0:	d8c14d17 	ldw	r3,1332(sp)
  8028f4:	bdc00044 	addi	r23,r23,1
  8028f8:	d9014d15 	stw	r4,1332(sp)
  8028fc:	d9414d17 	ldw	r5,1332(sp)
  802900:	1885883a 	add	r2,r3,r2
  802904:	113ff404 	addi	r4,r2,-48
  802908:	28bff404 	addi	r2,r5,-48
  80290c:	d9c15117 	ldw	r7,1348(sp)
  802910:	80bff32e 	bgeu	r16,r2,8028e0 <___vfprintf_internal_r+0x11d8>
  802914:	d9014a15 	stw	r4,1320(sp)
  802918:	003bfc06 	br	80190c <___vfprintf_internal_r+0x204>
  80291c:	d8814c17 	ldw	r2,1328(sp)
  802920:	b8c00007 	ldb	r3,0(r23)
  802924:	10802014 	ori	r2,r2,128
  802928:	d8814c15 	stw	r2,1328(sp)
  80292c:	003bf506 	br	801904 <___vfprintf_internal_r+0x1fc>
  802930:	b8c00007 	ldb	r3,0(r23)
  802934:	00800a84 	movi	r2,42
  802938:	bdc00044 	addi	r23,r23,1
  80293c:	18831826 	beq	r3,r2,8035a0 <___vfprintf_internal_r+0x1e98>
  802940:	d8c14d15 	stw	r3,1332(sp)
  802944:	18bff404 	addi	r2,r3,-48
  802948:	00c00244 	movi	r3,9
  80294c:	18827b36 	bltu	r3,r2,80333c <___vfprintf_internal_r+0x1c34>
  802950:	1821883a 	mov	r16,r3
  802954:	0009883a 	mov	r4,zero
  802958:	01400284 	movi	r5,10
  80295c:	d9c15115 	stw	r7,1348(sp)
  802960:	08016000 	call	801600 <__mulsi3>
  802964:	d9414d17 	ldw	r5,1332(sp)
  802968:	b9800007 	ldb	r6,0(r23)
  80296c:	d9c15117 	ldw	r7,1348(sp)
  802970:	1145883a 	add	r2,r2,r5
  802974:	113ff404 	addi	r4,r2,-48
  802978:	30bff404 	addi	r2,r6,-48
  80297c:	d9814d15 	stw	r6,1332(sp)
  802980:	bdc00044 	addi	r23,r23,1
  802984:	80bff42e 	bgeu	r16,r2,802958 <___vfprintf_internal_r+0x1250>
  802988:	2027883a 	mov	r19,r4
  80298c:	203bdf0e 	bge	r4,zero,80190c <___vfprintf_internal_r+0x204>
  802990:	04ffffc4 	movi	r19,-1
  802994:	003bdd06 	br	80190c <___vfprintf_internal_r+0x204>
  802998:	d8000405 	stb	zero,16(sp)
  80299c:	39800017 	ldw	r6,0(r7)
  8029a0:	39c00104 	addi	r7,r7,4
  8029a4:	d9c14015 	stw	r7,1280(sp)
  8029a8:	d9814115 	stw	r6,1284(sp)
  8029ac:	3001c926 	beq	r6,zero,8030d4 <___vfprintf_internal_r+0x19cc>
  8029b0:	98000e16 	blt	r19,zero,8029ec <___vfprintf_internal_r+0x12e4>
  8029b4:	d9014117 	ldw	r4,1284(sp)
  8029b8:	000b883a 	mov	r5,zero
  8029bc:	980d883a 	mov	r6,r19
  8029c0:	080683c0 	call	80683c <memchr>
  8029c4:	10025926 	beq	r2,zero,80332c <___vfprintf_internal_r+0x1c24>
  8029c8:	d8c14117 	ldw	r3,1284(sp)
  8029cc:	10cfc83a 	sub	r7,r2,r3
  8029d0:	99c19e16 	blt	r19,r7,80304c <___vfprintf_internal_r+0x1944>
  8029d4:	d9c14515 	stw	r7,1300(sp)
  8029d8:	38000916 	blt	r7,zero,802a00 <___vfprintf_internal_r+0x12f8>
  8029dc:	d8014615 	stw	zero,1304(sp)
  8029e0:	003deb06 	br	802190 <___vfprintf_internal_r+0xa88>
  8029e4:	b8c00007 	ldb	r3,0(r23)
  8029e8:	003bc606 	br	801904 <___vfprintf_internal_r+0x1fc>
  8029ec:	d9014117 	ldw	r4,1284(sp)
  8029f0:	08084a00 	call	8084a0 <strlen>
  8029f4:	d8814515 	stw	r2,1300(sp)
  8029f8:	100f883a 	mov	r7,r2
  8029fc:	103ff70e 	bge	r2,zero,8029dc <___vfprintf_internal_r+0x12d4>
  802a00:	d8014515 	stw	zero,1300(sp)
  802a04:	d8014615 	stw	zero,1304(sp)
  802a08:	003de106 	br	802190 <___vfprintf_internal_r+0xa88>
  802a0c:	20c03fcc 	andi	r3,r4,255
  802a10:	00800044 	movi	r2,1
  802a14:	18802d26 	beq	r3,r2,802acc <___vfprintf_internal_r+0x13c4>
  802a18:	18800e36 	bltu	r3,r2,802a54 <___vfprintf_internal_r+0x134c>
  802a1c:	00800084 	movi	r2,2
  802a20:	1880fa26 	beq	r3,r2,802e0c <___vfprintf_internal_r+0x1704>
  802a24:	01002074 	movhi	r4,129
  802a28:	2134f604 	addi	r4,r4,-11304
  802a2c:	08084a00 	call	8084a0 <strlen>
  802a30:	100f883a 	mov	r7,r2
  802a34:	dcc14515 	stw	r19,1300(sp)
  802a38:	9880010e 	bge	r19,r2,802a40 <___vfprintf_internal_r+0x1338>
  802a3c:	d8814515 	stw	r2,1300(sp)
  802a40:	00802074 	movhi	r2,129
  802a44:	10b4f604 	addi	r2,r2,-11304
  802a48:	dcc14615 	stw	r19,1304(sp)
  802a4c:	d8814115 	stw	r2,1284(sp)
  802a50:	003dcf06 	br	802190 <___vfprintf_internal_r+0xa88>
  802a54:	d9401904 	addi	r5,sp,100
  802a58:	dd000f04 	addi	r20,sp,60
  802a5c:	d9414115 	stw	r5,1284(sp)
  802a60:	880a977a 	slli	r5,r17,29
  802a64:	d9814117 	ldw	r6,1284(sp)
  802a68:	8004d0fa 	srli	r2,r16,3
  802a6c:	8806d0fa 	srli	r3,r17,3
  802a70:	810001cc 	andi	r4,r16,7
  802a74:	2884b03a 	or	r2,r5,r2
  802a78:	31bfffc4 	addi	r6,r6,-1
  802a7c:	21000c04 	addi	r4,r4,48
  802a80:	d9814115 	stw	r6,1284(sp)
  802a84:	10cab03a 	or	r5,r2,r3
  802a88:	31000005 	stb	r4,0(r6)
  802a8c:	1021883a 	mov	r16,r2
  802a90:	1823883a 	mov	r17,r3
  802a94:	283ff21e 	bne	r5,zero,802a60 <___vfprintf_internal_r+0x1358>
  802a98:	d8c14c17 	ldw	r3,1328(sp)
  802a9c:	1880004c 	andi	r2,r3,1
  802aa0:	1005003a 	cmpeq	r2,r2,zero
  802aa4:	103db31e 	bne	r2,zero,802174 <___vfprintf_internal_r+0xa6c>
  802aa8:	20803fcc 	andi	r2,r4,255
  802aac:	1080201c 	xori	r2,r2,128
  802ab0:	10bfe004 	addi	r2,r2,-128
  802ab4:	00c00c04 	movi	r3,48
  802ab8:	10fdae26 	beq	r2,r3,802174 <___vfprintf_internal_r+0xa6c>
  802abc:	31bfffc4 	addi	r6,r6,-1
  802ac0:	d9814115 	stw	r6,1284(sp)
  802ac4:	30c00005 	stb	r3,0(r6)
  802ac8:	003daa06 	br	802174 <___vfprintf_internal_r+0xa6c>
  802acc:	88800068 	cmpgeui	r2,r17,1
  802ad0:	10002c1e 	bne	r2,zero,802b84 <___vfprintf_internal_r+0x147c>
  802ad4:	8800021e 	bne	r17,zero,802ae0 <___vfprintf_internal_r+0x13d8>
  802ad8:	00800244 	movi	r2,9
  802adc:	14002936 	bltu	r2,r16,802b84 <___vfprintf_internal_r+0x147c>
  802ae0:	d90018c4 	addi	r4,sp,99
  802ae4:	dd000f04 	addi	r20,sp,60
  802ae8:	d9014115 	stw	r4,1284(sp)
  802aec:	d9014117 	ldw	r4,1284(sp)
  802af0:	80800c04 	addi	r2,r16,48
  802af4:	20800005 	stb	r2,0(r4)
  802af8:	003d9e06 	br	802174 <___vfprintf_internal_r+0xa6c>
  802afc:	dc400d17 	ldw	r17,52(sp)
  802b00:	07002074 	movhi	fp,129
  802b04:	e734fd84 	addi	fp,fp,-11274
  802b08:	9425883a 	add	r18,r18,r16
  802b0c:	8c400044 	addi	r17,r17,1
  802b10:	008001c4 	movi	r2,7
  802b14:	1f000015 	stw	fp,0(r3)
  802b18:	1c000115 	stw	r16,4(r3)
  802b1c:	dc800e15 	stw	r18,56(sp)
  802b20:	dc400d15 	stw	r17,52(sp)
  802b24:	147ddc16 	blt	r2,r17,802298 <___vfprintf_internal_r+0xb90>
  802b28:	18c00204 	addi	r3,r3,8
  802b2c:	003c7406 	br	801d00 <___vfprintf_internal_r+0x5f8>
  802b30:	01000084 	movi	r4,2
  802b34:	d8000405 	stb	zero,16(sp)
  802b38:	003d8106 	br	802140 <___vfprintf_internal_r+0xa38>
  802b3c:	d9814c17 	ldw	r6,1328(sp)
  802b40:	30c4703a 	and	r2,r6,r3
  802b44:	1005003a 	cmpeq	r2,r2,zero
  802b48:	103cb326 	beq	r2,zero,801e18 <___vfprintf_internal_r+0x710>
  802b4c:	d9014117 	ldw	r4,1284(sp)
  802b50:	94800044 	addi	r18,r18,1
  802b54:	8c400044 	addi	r17,r17,1
  802b58:	008001c4 	movi	r2,7
  802b5c:	a9000015 	stw	r4,0(r21)
  802b60:	a8c00115 	stw	r3,4(r21)
  802b64:	dc800e15 	stw	r18,56(sp)
  802b68:	dc400d15 	stw	r17,52(sp)
  802b6c:	147e6016 	blt	r2,r17,8024f0 <___vfprintf_internal_r+0xde8>
  802b70:	acc00204 	addi	r19,r21,8
  802b74:	003cd106 	br	801ebc <___vfprintf_internal_r+0x7b4>
  802b78:	07002074 	movhi	fp,129
  802b7c:	e734fd84 	addi	fp,fp,-11274
  802b80:	003c4906 	br	801ca8 <___vfprintf_internal_r+0x5a0>
  802b84:	dd000f04 	addi	r20,sp,60
  802b88:	dc801904 	addi	r18,sp,100
  802b8c:	8009883a 	mov	r4,r16
  802b90:	880b883a 	mov	r5,r17
  802b94:	01800284 	movi	r6,10
  802b98:	000f883a 	mov	r7,zero
  802b9c:	08090280 	call	809028 <__umoddi3>
  802ba0:	12000c04 	addi	r8,r2,48
  802ba4:	94bfffc4 	addi	r18,r18,-1
  802ba8:	8009883a 	mov	r4,r16
  802bac:	880b883a 	mov	r5,r17
  802bb0:	01800284 	movi	r6,10
  802bb4:	000f883a 	mov	r7,zero
  802bb8:	92000005 	stb	r8,0(r18)
  802bbc:	08089bc0 	call	8089bc <__udivdi3>
  802bc0:	1009883a 	mov	r4,r2
  802bc4:	1021883a 	mov	r16,r2
  802bc8:	18800068 	cmpgeui	r2,r3,1
  802bcc:	1823883a 	mov	r17,r3
  802bd0:	103fee1e 	bne	r2,zero,802b8c <___vfprintf_internal_r+0x1484>
  802bd4:	1800021e 	bne	r3,zero,802be0 <___vfprintf_internal_r+0x14d8>
  802bd8:	00800244 	movi	r2,9
  802bdc:	113feb36 	bltu	r2,r4,802b8c <___vfprintf_internal_r+0x1484>
  802be0:	94bfffc4 	addi	r18,r18,-1
  802be4:	dc814115 	stw	r18,1284(sp)
  802be8:	003fc006 	br	802aec <___vfprintf_internal_r+0x13e4>
  802bec:	d9014c17 	ldw	r4,1328(sp)
  802bf0:	2080004c 	andi	r2,r4,1
  802bf4:	10009a1e 	bne	r2,zero,802e60 <___vfprintf_internal_r+0x1758>
  802bf8:	d9401904 	addi	r5,sp,100
  802bfc:	dd000f04 	addi	r20,sp,60
  802c00:	d9414115 	stw	r5,1284(sp)
  802c04:	003d5b06 	br	802174 <___vfprintf_internal_r+0xa6c>
  802c08:	d9014f17 	ldw	r4,1340(sp)
  802c0c:	b00b883a 	mov	r5,r22
  802c10:	d9800c04 	addi	r6,sp,48
  802c14:	08016b00 	call	8016b0 <__sprint_r>
  802c18:	103c731e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802c1c:	dc800e17 	ldw	r18,56(sp)
  802c20:	d8c01904 	addi	r3,sp,100
  802c24:	003cf906 	br	80200c <___vfprintf_internal_r+0x904>
  802c28:	d8c14c17 	ldw	r3,1328(sp)
  802c2c:	1880040c 	andi	r2,r3,16
  802c30:	1000711e 	bne	r2,zero,802df8 <___vfprintf_internal_r+0x16f0>
  802c34:	d9014c17 	ldw	r4,1328(sp)
  802c38:	2080100c 	andi	r2,r4,64
  802c3c:	10006e26 	beq	r2,zero,802df8 <___vfprintf_internal_r+0x16f0>
  802c40:	3c00000b 	ldhu	r16,0(r7)
  802c44:	0023883a 	mov	r17,zero
  802c48:	39c00104 	addi	r7,r7,4
  802c4c:	d9c14015 	stw	r7,1280(sp)
  802c50:	003efa06 	br	80283c <___vfprintf_internal_r+0x1134>
  802c54:	dc400d17 	ldw	r17,52(sp)
  802c58:	07002074 	movhi	fp,129
  802c5c:	e734fd84 	addi	fp,fp,-11274
  802c60:	9425883a 	add	r18,r18,r16
  802c64:	8c400044 	addi	r17,r17,1
  802c68:	008001c4 	movi	r2,7
  802c6c:	1f000015 	stw	fp,0(r3)
  802c70:	1c000115 	stw	r16,4(r3)
  802c74:	dc800e15 	stw	r18,56(sp)
  802c78:	dc400d15 	stw	r17,52(sp)
  802c7c:	147d7016 	blt	r2,r17,802240 <___vfprintf_internal_r+0xb38>
  802c80:	18c00204 	addi	r3,r3,8
  802c84:	003d7506 	br	80225c <___vfprintf_internal_r+0xb54>
  802c88:	dc800e17 	ldw	r18,56(sp)
  802c8c:	dc400d17 	ldw	r17,52(sp)
  802c90:	07002074 	movhi	fp,129
  802c94:	e7350184 	addi	fp,fp,-11258
  802c98:	003bba06 	br	801b84 <___vfprintf_internal_r+0x47c>
  802c9c:	d9014f17 	ldw	r4,1340(sp)
  802ca0:	b00b883a 	mov	r5,r22
  802ca4:	d9800c04 	addi	r6,sp,48
  802ca8:	08016b00 	call	8016b0 <__sprint_r>
  802cac:	103c4e1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802cb0:	dc800e17 	ldw	r18,56(sp)
  802cb4:	d8c01904 	addi	r3,sp,100
  802cb8:	003ce306 	br	802048 <___vfprintf_internal_r+0x940>
  802cbc:	3c000017 	ldw	r16,0(r7)
  802cc0:	0009883a 	mov	r4,zero
  802cc4:	39c00104 	addi	r7,r7,4
  802cc8:	0023883a 	mov	r17,zero
  802ccc:	d9c14015 	stw	r7,1280(sp)
  802cd0:	d8000405 	stb	zero,16(sp)
  802cd4:	003d1a06 	br	802140 <___vfprintf_internal_r+0xa38>
  802cd8:	38800017 	ldw	r2,0(r7)
  802cdc:	39c00104 	addi	r7,r7,4
  802ce0:	d9c14015 	stw	r7,1280(sp)
  802ce4:	1023d7fa 	srai	r17,r2,31
  802ce8:	1021883a 	mov	r16,r2
  802cec:	003d1206 	br	802138 <___vfprintf_internal_r+0xa30>
  802cf0:	3c000017 	ldw	r16,0(r7)
  802cf4:	01000044 	movi	r4,1
  802cf8:	39c00104 	addi	r7,r7,4
  802cfc:	0023883a 	mov	r17,zero
  802d00:	d9c14015 	stw	r7,1280(sp)
  802d04:	d8000405 	stb	zero,16(sp)
  802d08:	003d0d06 	br	802140 <___vfprintf_internal_r+0xa38>
  802d0c:	00802074 	movhi	r2,129
  802d10:	10b4fd04 	addi	r2,r2,-11276
  802d14:	94800044 	addi	r18,r18,1
  802d18:	8c400044 	addi	r17,r17,1
  802d1c:	a8800015 	stw	r2,0(r21)
  802d20:	00c00044 	movi	r3,1
  802d24:	008001c4 	movi	r2,7
  802d28:	a8c00115 	stw	r3,4(r21)
  802d2c:	dc800e15 	stw	r18,56(sp)
  802d30:	dc400d15 	stw	r17,52(sp)
  802d34:	1440ca16 	blt	r2,r17,803060 <___vfprintf_internal_r+0x1958>
  802d38:	a8c00204 	addi	r3,r21,8
  802d3c:	2000061e 	bne	r4,zero,802d58 <___vfprintf_internal_r+0x1650>
  802d40:	d9414717 	ldw	r5,1308(sp)
  802d44:	2800041e 	bne	r5,zero,802d58 <___vfprintf_internal_r+0x1650>
  802d48:	d9814c17 	ldw	r6,1328(sp)
  802d4c:	3080004c 	andi	r2,r6,1
  802d50:	1005003a 	cmpeq	r2,r2,zero
  802d54:	103bea1e 	bne	r2,zero,801d00 <___vfprintf_internal_r+0x5f8>
  802d58:	00800044 	movi	r2,1
  802d5c:	dc400d17 	ldw	r17,52(sp)
  802d60:	18800115 	stw	r2,4(r3)
  802d64:	d8814917 	ldw	r2,1316(sp)
  802d68:	94800044 	addi	r18,r18,1
  802d6c:	8c400044 	addi	r17,r17,1
  802d70:	18800015 	stw	r2,0(r3)
  802d74:	008001c4 	movi	r2,7
  802d78:	dc800e15 	stw	r18,56(sp)
  802d7c:	dc400d15 	stw	r17,52(sp)
  802d80:	1440ca16 	blt	r2,r17,8030ac <___vfprintf_internal_r+0x19a4>
  802d84:	18c00204 	addi	r3,r3,8
  802d88:	0121c83a 	sub	r16,zero,r4
  802d8c:	0400500e 	bge	zero,r16,802ed0 <___vfprintf_internal_r+0x17c8>
  802d90:	00800404 	movi	r2,16
  802d94:	1400800e 	bge	r2,r16,802f98 <___vfprintf_internal_r+0x1890>
  802d98:	1027883a 	mov	r19,r2
  802d9c:	07002074 	movhi	fp,129
  802da0:	e734fd84 	addi	fp,fp,-11274
  802da4:	050001c4 	movi	r20,7
  802da8:	00000306 	br	802db8 <___vfprintf_internal_r+0x16b0>
  802dac:	18c00204 	addi	r3,r3,8
  802db0:	843ffc04 	addi	r16,r16,-16
  802db4:	9c007a0e 	bge	r19,r16,802fa0 <___vfprintf_internal_r+0x1898>
  802db8:	94800404 	addi	r18,r18,16
  802dbc:	8c400044 	addi	r17,r17,1
  802dc0:	1f000015 	stw	fp,0(r3)
  802dc4:	1cc00115 	stw	r19,4(r3)
  802dc8:	dc800e15 	stw	r18,56(sp)
  802dcc:	dc400d15 	stw	r17,52(sp)
  802dd0:	a47ff60e 	bge	r20,r17,802dac <___vfprintf_internal_r+0x16a4>
  802dd4:	d9014f17 	ldw	r4,1340(sp)
  802dd8:	b00b883a 	mov	r5,r22
  802ddc:	d9800c04 	addi	r6,sp,48
  802de0:	08016b00 	call	8016b0 <__sprint_r>
  802de4:	103c001e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802de8:	dc800e17 	ldw	r18,56(sp)
  802dec:	dc400d17 	ldw	r17,52(sp)
  802df0:	d8c01904 	addi	r3,sp,100
  802df4:	003fee06 	br	802db0 <___vfprintf_internal_r+0x16a8>
  802df8:	3c000017 	ldw	r16,0(r7)
  802dfc:	0023883a 	mov	r17,zero
  802e00:	39c00104 	addi	r7,r7,4
  802e04:	d9c14015 	stw	r7,1280(sp)
  802e08:	003e8c06 	br	80283c <___vfprintf_internal_r+0x1134>
  802e0c:	d9401904 	addi	r5,sp,100
  802e10:	dd000f04 	addi	r20,sp,60
  802e14:	d9414115 	stw	r5,1284(sp)
  802e18:	d9814417 	ldw	r6,1296(sp)
  802e1c:	880a973a 	slli	r5,r17,28
  802e20:	8004d13a 	srli	r2,r16,4
  802e24:	810003cc 	andi	r4,r16,15
  802e28:	3109883a 	add	r4,r6,r4
  802e2c:	2884b03a 	or	r2,r5,r2
  802e30:	21400003 	ldbu	r5,0(r4)
  802e34:	d9014117 	ldw	r4,1284(sp)
  802e38:	8806d13a 	srli	r3,r17,4
  802e3c:	1021883a 	mov	r16,r2
  802e40:	213fffc4 	addi	r4,r4,-1
  802e44:	d9014115 	stw	r4,1284(sp)
  802e48:	d9814117 	ldw	r6,1284(sp)
  802e4c:	10c8b03a 	or	r4,r2,r3
  802e50:	1823883a 	mov	r17,r3
  802e54:	31400005 	stb	r5,0(r6)
  802e58:	203fef1e 	bne	r4,zero,802e18 <___vfprintf_internal_r+0x1710>
  802e5c:	003cc506 	br	802174 <___vfprintf_internal_r+0xa6c>
  802e60:	00800c04 	movi	r2,48
  802e64:	d98018c4 	addi	r6,sp,99
  802e68:	dd000f04 	addi	r20,sp,60
  802e6c:	d88018c5 	stb	r2,99(sp)
  802e70:	d9814115 	stw	r6,1284(sp)
  802e74:	003cbf06 	br	802174 <___vfprintf_internal_r+0xa6c>
  802e78:	dc400d17 	ldw	r17,52(sp)
  802e7c:	07002074 	movhi	fp,129
  802e80:	e7350184 	addi	fp,fp,-11258
  802e84:	003bc106 	br	801d8c <___vfprintf_internal_r+0x684>
  802e88:	d9414c17 	ldw	r5,1328(sp)
  802e8c:	2880040c 	andi	r2,r5,16
  802e90:	10007c26 	beq	r2,zero,803084 <___vfprintf_internal_r+0x197c>
  802e94:	38800017 	ldw	r2,0(r7)
  802e98:	39c00104 	addi	r7,r7,4
  802e9c:	d9c14015 	stw	r7,1280(sp)
  802ea0:	d9814b17 	ldw	r6,1324(sp)
  802ea4:	d9c14017 	ldw	r7,1280(sp)
  802ea8:	11800015 	stw	r6,0(r2)
  802eac:	003a7206 	br	801878 <___vfprintf_internal_r+0x170>
  802eb0:	d9014f17 	ldw	r4,1340(sp)
  802eb4:	b00b883a 	mov	r5,r22
  802eb8:	d9800c04 	addi	r6,sp,48
  802ebc:	08016b00 	call	8016b0 <__sprint_r>
  802ec0:	103bc91e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802ec4:	dc800e17 	ldw	r18,56(sp)
  802ec8:	dc400d17 	ldw	r17,52(sp)
  802ecc:	d8c01904 	addi	r3,sp,100
  802ed0:	d9014717 	ldw	r4,1308(sp)
  802ed4:	d9414117 	ldw	r5,1284(sp)
  802ed8:	8c400044 	addi	r17,r17,1
  802edc:	9125883a 	add	r18,r18,r4
  802ee0:	008001c4 	movi	r2,7
  802ee4:	19400015 	stw	r5,0(r3)
  802ee8:	19000115 	stw	r4,4(r3)
  802eec:	dc800e15 	stw	r18,56(sp)
  802ef0:	dc400d15 	stw	r17,52(sp)
  802ef4:	147ce816 	blt	r2,r17,802298 <___vfprintf_internal_r+0xb90>
  802ef8:	18c00204 	addi	r3,r3,8
  802efc:	003b8006 	br	801d00 <___vfprintf_internal_r+0x5f8>
  802f00:	38c00017 	ldw	r3,0(r7)
  802f04:	39000204 	addi	r4,r7,8
  802f08:	d9014015 	stw	r4,1280(sp)
  802f0c:	d8c14215 	stw	r3,1288(sp)
  802f10:	39c00117 	ldw	r7,4(r7)
  802f14:	d9c14315 	stw	r7,1292(sp)
  802f18:	003e1a06 	br	802784 <___vfprintf_internal_r+0x107c>
  802f1c:	0005883a 	mov	r2,zero
  802f20:	1409c83a 	sub	r4,r2,r16
  802f24:	1105803a 	cmpltu	r2,r2,r4
  802f28:	044bc83a 	sub	r5,zero,r17
  802f2c:	2885c83a 	sub	r2,r5,r2
  802f30:	2021883a 	mov	r16,r4
  802f34:	1023883a 	mov	r17,r2
  802f38:	01000044 	movi	r4,1
  802f3c:	00800b44 	movi	r2,45
  802f40:	d8800405 	stb	r2,16(sp)
  802f44:	003c7e06 	br	802140 <___vfprintf_internal_r+0xa38>
  802f48:	d9014f17 	ldw	r4,1340(sp)
  802f4c:	b00b883a 	mov	r5,r22
  802f50:	d9800c04 	addi	r6,sp,48
  802f54:	08016b00 	call	8016b0 <__sprint_r>
  802f58:	103ba31e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802f5c:	dc800e17 	ldw	r18,56(sp)
  802f60:	dc400d17 	ldw	r17,52(sp)
  802f64:	d9000517 	ldw	r4,20(sp)
  802f68:	d9401904 	addi	r5,sp,100
  802f6c:	003da106 	br	8025f4 <___vfprintf_internal_r+0xeec>
  802f70:	d9014f17 	ldw	r4,1340(sp)
  802f74:	b00b883a 	mov	r5,r22
  802f78:	d9800c04 	addi	r6,sp,48
  802f7c:	08016b00 	call	8016b0 <__sprint_r>
  802f80:	103b991e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802f84:	dc800e17 	ldw	r18,56(sp)
  802f88:	dc400d17 	ldw	r17,52(sp)
  802f8c:	d9000517 	ldw	r4,20(sp)
  802f90:	d8c01904 	addi	r3,sp,100
  802f94:	003d8b06 	br	8025c4 <___vfprintf_internal_r+0xebc>
  802f98:	07002074 	movhi	fp,129
  802f9c:	e734fd84 	addi	fp,fp,-11274
  802fa0:	9425883a 	add	r18,r18,r16
  802fa4:	8c400044 	addi	r17,r17,1
  802fa8:	008001c4 	movi	r2,7
  802fac:	1f000015 	stw	fp,0(r3)
  802fb0:	1c000115 	stw	r16,4(r3)
  802fb4:	dc800e15 	stw	r18,56(sp)
  802fb8:	dc400d15 	stw	r17,52(sp)
  802fbc:	147fbc16 	blt	r2,r17,802eb0 <___vfprintf_internal_r+0x17a8>
  802fc0:	18c00204 	addi	r3,r3,8
  802fc4:	003fc206 	br	802ed0 <___vfprintf_internal_r+0x17c8>
  802fc8:	d9014f17 	ldw	r4,1340(sp)
  802fcc:	b00b883a 	mov	r5,r22
  802fd0:	d9800c04 	addi	r6,sp,48
  802fd4:	08016b00 	call	8016b0 <__sprint_r>
  802fd8:	103b831e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  802fdc:	dc800e17 	ldw	r18,56(sp)
  802fe0:	d9000517 	ldw	r4,20(sp)
  802fe4:	d8c01904 	addi	r3,sp,100
  802fe8:	003cfc06 	br	8023dc <___vfprintf_internal_r+0xcd4>
  802fec:	07002074 	movhi	fp,129
  802ff0:	e734fd84 	addi	fp,fp,-11274
  802ff4:	003bde06 	br	801f70 <___vfprintf_internal_r+0x868>
  802ff8:	00802074 	movhi	r2,129
  802ffc:	10b4ec04 	addi	r2,r2,-11344
  803000:	d8814115 	stw	r2,1284(sp)
  803004:	003def06 	br	8027c4 <___vfprintf_internal_r+0x10bc>
  803008:	d9014217 	ldw	r4,1288(sp)
  80300c:	d9414317 	ldw	r5,1292(sp)
  803010:	08081f80 	call	8081f8 <__isnand>
  803014:	10003926 	beq	r2,zero,8030fc <___vfprintf_internal_r+0x19f4>
  803018:	d9414d17 	ldw	r5,1332(sp)
  80301c:	008011c4 	movi	r2,71
  803020:	1140ce16 	blt	r2,r5,80335c <___vfprintf_internal_r+0x1c54>
  803024:	01802074 	movhi	r6,129
  803028:	31b4ed04 	addi	r6,r6,-11340
  80302c:	d9814115 	stw	r6,1284(sp)
  803030:	003de406 	br	8027c4 <___vfprintf_internal_r+0x10bc>
  803034:	d9014c17 	ldw	r4,1328(sp)
  803038:	bdc00044 	addi	r23,r23,1
  80303c:	b8c00007 	ldb	r3,0(r23)
  803040:	21000814 	ori	r4,r4,32
  803044:	d9014c15 	stw	r4,1328(sp)
  803048:	003a2e06 	br	801904 <___vfprintf_internal_r+0x1fc>
  80304c:	dcc14515 	stw	r19,1300(sp)
  803050:	98011016 	blt	r19,zero,803494 <___vfprintf_internal_r+0x1d8c>
  803054:	980f883a 	mov	r7,r19
  803058:	d8014615 	stw	zero,1304(sp)
  80305c:	003c4c06 	br	802190 <___vfprintf_internal_r+0xa88>
  803060:	d9014f17 	ldw	r4,1340(sp)
  803064:	b00b883a 	mov	r5,r22
  803068:	d9800c04 	addi	r6,sp,48
  80306c:	08016b00 	call	8016b0 <__sprint_r>
  803070:	103b5d1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  803074:	dc800e17 	ldw	r18,56(sp)
  803078:	d9000517 	ldw	r4,20(sp)
  80307c:	d8c01904 	addi	r3,sp,100
  803080:	003f2e06 	br	802d3c <___vfprintf_internal_r+0x1634>
  803084:	d8c14c17 	ldw	r3,1328(sp)
  803088:	1880100c 	andi	r2,r3,64
  80308c:	1000a026 	beq	r2,zero,803310 <___vfprintf_internal_r+0x1c08>
  803090:	38800017 	ldw	r2,0(r7)
  803094:	39c00104 	addi	r7,r7,4
  803098:	d9c14015 	stw	r7,1280(sp)
  80309c:	d9014b17 	ldw	r4,1324(sp)
  8030a0:	d9c14017 	ldw	r7,1280(sp)
  8030a4:	1100000d 	sth	r4,0(r2)
  8030a8:	0039f306 	br	801878 <___vfprintf_internal_r+0x170>
  8030ac:	d9014f17 	ldw	r4,1340(sp)
  8030b0:	b00b883a 	mov	r5,r22
  8030b4:	d9800c04 	addi	r6,sp,48
  8030b8:	08016b00 	call	8016b0 <__sprint_r>
  8030bc:	103b4a1e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  8030c0:	dc800e17 	ldw	r18,56(sp)
  8030c4:	dc400d17 	ldw	r17,52(sp)
  8030c8:	d9000517 	ldw	r4,20(sp)
  8030cc:	d8c01904 	addi	r3,sp,100
  8030d0:	003f2d06 	br	802d88 <___vfprintf_internal_r+0x1680>
  8030d4:	00800184 	movi	r2,6
  8030d8:	14c09a36 	bltu	r2,r19,803344 <___vfprintf_internal_r+0x1c3c>
  8030dc:	dcc14515 	stw	r19,1300(sp)
  8030e0:	9800010e 	bge	r19,zero,8030e8 <___vfprintf_internal_r+0x19e0>
  8030e4:	d8014515 	stw	zero,1300(sp)
  8030e8:	00802074 	movhi	r2,129
  8030ec:	10b4ef04 	addi	r2,r2,-11332
  8030f0:	980f883a 	mov	r7,r19
  8030f4:	d8814115 	stw	r2,1284(sp)
  8030f8:	003a7206 	br	801ac4 <___vfprintf_internal_r+0x3bc>
  8030fc:	00bfffc4 	movi	r2,-1
  803100:	9880e226 	beq	r19,r2,80348c <___vfprintf_internal_r+0x1d84>
  803104:	d9414d17 	ldw	r5,1332(sp)
  803108:	008019c4 	movi	r2,103
  80310c:	2880dc26 	beq	r5,r2,803480 <___vfprintf_internal_r+0x1d78>
  803110:	008011c4 	movi	r2,71
  803114:	2880da26 	beq	r5,r2,803480 <___vfprintf_internal_r+0x1d78>
  803118:	d9414c17 	ldw	r5,1328(sp)
  80311c:	d9014317 	ldw	r4,1292(sp)
  803120:	d9814217 	ldw	r6,1288(sp)
  803124:	29404014 	ori	r5,r5,256
  803128:	d9414c15 	stw	r5,1328(sp)
  80312c:	2000cc16 	blt	r4,zero,803460 <___vfprintf_internal_r+0x1d58>
  803130:	3021883a 	mov	r16,r6
  803134:	2023883a 	mov	r17,r4
  803138:	0039883a 	mov	fp,zero
  80313c:	d9414d17 	ldw	r5,1332(sp)
  803140:	00801984 	movi	r2,102
  803144:	2880b726 	beq	r5,r2,803424 <___vfprintf_internal_r+0x1d1c>
  803148:	00801184 	movi	r2,70
  80314c:	2880b526 	beq	r5,r2,803424 <___vfprintf_internal_r+0x1d1c>
  803150:	00801944 	movi	r2,101
  803154:	2880c826 	beq	r5,r2,803478 <___vfprintf_internal_r+0x1d70>
  803158:	00801144 	movi	r2,69
  80315c:	2880c626 	beq	r5,r2,803478 <___vfprintf_internal_r+0x1d70>
  803160:	9829883a 	mov	r20,r19
  803164:	d9014f17 	ldw	r4,1340(sp)
  803168:	d8800504 	addi	r2,sp,20
  80316c:	880d883a 	mov	r6,r17
  803170:	d8800115 	stw	r2,4(sp)
  803174:	d8c00604 	addi	r3,sp,24
  803178:	d8800704 	addi	r2,sp,28
  80317c:	800b883a 	mov	r5,r16
  803180:	01c00084 	movi	r7,2
  803184:	d8c00215 	stw	r3,8(sp)
  803188:	d8800315 	stw	r2,12(sp)
  80318c:	dd000015 	stw	r20,0(sp)
  803190:	08039700 	call	803970 <_dtoa_r>
  803194:	d9814d17 	ldw	r6,1332(sp)
  803198:	d8814115 	stw	r2,1284(sp)
  80319c:	008019c4 	movi	r2,103
  8031a0:	30809526 	beq	r6,r2,8033f8 <___vfprintf_internal_r+0x1cf0>
  8031a4:	d8c14d17 	ldw	r3,1332(sp)
  8031a8:	008011c4 	movi	r2,71
  8031ac:	18809226 	beq	r3,r2,8033f8 <___vfprintf_internal_r+0x1cf0>
  8031b0:	d9414117 	ldw	r5,1284(sp)
  8031b4:	d9814d17 	ldw	r6,1332(sp)
  8031b8:	00801984 	movi	r2,102
  8031bc:	2d25883a 	add	r18,r5,r20
  8031c0:	30808626 	beq	r6,r2,8033dc <___vfprintf_internal_r+0x1cd4>
  8031c4:	00801184 	movi	r2,70
  8031c8:	30808426 	beq	r6,r2,8033dc <___vfprintf_internal_r+0x1cd4>
  8031cc:	000d883a 	mov	r6,zero
  8031d0:	000f883a 	mov	r7,zero
  8031d4:	880b883a 	mov	r5,r17
  8031d8:	8009883a 	mov	r4,r16
  8031dc:	0809f500 	call	809f50 <__eqdf2>
  8031e0:	1000751e 	bne	r2,zero,8033b8 <___vfprintf_internal_r+0x1cb0>
  8031e4:	9005883a 	mov	r2,r18
  8031e8:	dc800715 	stw	r18,28(sp)
  8031ec:	d9014117 	ldw	r4,1284(sp)
  8031f0:	d9414d17 	ldw	r5,1332(sp)
  8031f4:	00c019c4 	movi	r3,103
  8031f8:	1125c83a 	sub	r18,r2,r4
  8031fc:	28c06826 	beq	r5,r3,8033a0 <___vfprintf_internal_r+0x1c98>
  803200:	008011c4 	movi	r2,71
  803204:	28806626 	beq	r5,r2,8033a0 <___vfprintf_internal_r+0x1c98>
  803208:	d9000517 	ldw	r4,20(sp)
  80320c:	d8c14d17 	ldw	r3,1332(sp)
  803210:	00801944 	movi	r2,101
  803214:	10c05516 	blt	r2,r3,80336c <___vfprintf_internal_r+0x1c64>
  803218:	213fffc4 	addi	r4,r4,-1
  80321c:	d9000515 	stw	r4,20(sp)
  803220:	d8c00805 	stb	r3,32(sp)
  803224:	2021883a 	mov	r16,r4
  803228:	2000c116 	blt	r4,zero,803530 <___vfprintf_internal_r+0x1e28>
  80322c:	00800ac4 	movi	r2,43
  803230:	d8800845 	stb	r2,33(sp)
  803234:	00800244 	movi	r2,9
  803238:	1400af0e 	bge	r2,r16,8034f8 <___vfprintf_internal_r+0x1df0>
  80323c:	1027883a 	mov	r19,r2
  803240:	dc400b84 	addi	r17,sp,46
  803244:	8009883a 	mov	r4,r16
  803248:	01400284 	movi	r5,10
  80324c:	0800d780 	call	800d78 <__modsi3>
  803250:	10800c04 	addi	r2,r2,48
  803254:	8c7fffc4 	addi	r17,r17,-1
  803258:	8009883a 	mov	r4,r16
  80325c:	01400284 	movi	r5,10
  803260:	88800005 	stb	r2,0(r17)
  803264:	0800d180 	call	800d18 <__divsi3>
  803268:	1021883a 	mov	r16,r2
  80326c:	98bff516 	blt	r19,r2,803244 <___vfprintf_internal_r+0x1b3c>
  803270:	10c00c04 	addi	r3,r2,48
  803274:	d88009c4 	addi	r2,sp,39
  803278:	108001c4 	addi	r2,r2,7
  80327c:	897fffc4 	addi	r5,r17,-1
  803280:	88ffffc5 	stb	r3,-1(r17)
  803284:	2880a72e 	bgeu	r5,r2,803524 <___vfprintf_internal_r+0x1e1c>
  803288:	1009883a 	mov	r4,r2
  80328c:	d9800804 	addi	r6,sp,32
  803290:	d8c00884 	addi	r3,sp,34
  803294:	28800003 	ldbu	r2,0(r5)
  803298:	29400044 	addi	r5,r5,1
  80329c:	18800005 	stb	r2,0(r3)
  8032a0:	18c00044 	addi	r3,r3,1
  8032a4:	293ffb36 	bltu	r5,r4,803294 <___vfprintf_internal_r+0x1b8c>
  8032a8:	1987c83a 	sub	r3,r3,r6
  8032ac:	00800044 	movi	r2,1
  8032b0:	d8c14815 	stw	r3,1312(sp)
  8032b4:	90cf883a 	add	r7,r18,r3
  8032b8:	1480960e 	bge	r2,r18,803514 <___vfprintf_internal_r+0x1e0c>
  8032bc:	39c00044 	addi	r7,r7,1
  8032c0:	d9c14515 	stw	r7,1300(sp)
  8032c4:	38003416 	blt	r7,zero,803398 <___vfprintf_internal_r+0x1c90>
  8032c8:	e0803fcc 	andi	r2,fp,255
  8032cc:	1080201c 	xori	r2,r2,128
  8032d0:	10bfe004 	addi	r2,r2,-128
  8032d4:	10004e26 	beq	r2,zero,803410 <___vfprintf_internal_r+0x1d08>
  8032d8:	00800b44 	movi	r2,45
  8032dc:	dc814715 	stw	r18,1308(sp)
  8032e0:	d8014615 	stw	zero,1304(sp)
  8032e4:	d8800405 	stb	r2,16(sp)
  8032e8:	003bab06 	br	802198 <___vfprintf_internal_r+0xa90>
  8032ec:	00800b44 	movi	r2,45
  8032f0:	d8800405 	stb	r2,16(sp)
  8032f4:	003d2d06 	br	8027ac <___vfprintf_internal_r+0x10a4>
  8032f8:	d9014f17 	ldw	r4,1340(sp)
  8032fc:	b00b883a 	mov	r5,r22
  803300:	d9800c04 	addi	r6,sp,48
  803304:	08016b00 	call	8016b0 <__sprint_r>
  803308:	103ab71e 	bne	r2,zero,801de8 <___vfprintf_internal_r+0x6e0>
  80330c:	003ab506 	br	801de4 <___vfprintf_internal_r+0x6dc>
  803310:	38800017 	ldw	r2,0(r7)
  803314:	39c00104 	addi	r7,r7,4
  803318:	d9c14015 	stw	r7,1280(sp)
  80331c:	d9414b17 	ldw	r5,1324(sp)
  803320:	d9c14017 	ldw	r7,1280(sp)
  803324:	11400015 	stw	r5,0(r2)
  803328:	00395306 	br	801878 <___vfprintf_internal_r+0x170>
  80332c:	980f883a 	mov	r7,r19
  803330:	dcc14515 	stw	r19,1300(sp)
  803334:	d8014615 	stw	zero,1304(sp)
  803338:	003b9506 	br	802190 <___vfprintf_internal_r+0xa88>
  80333c:	0027883a 	mov	r19,zero
  803340:	00397206 	br	80190c <___vfprintf_internal_r+0x204>
  803344:	00c02074 	movhi	r3,129
  803348:	18f4ef04 	addi	r3,r3,-11332
  80334c:	100f883a 	mov	r7,r2
  803350:	d8814515 	stw	r2,1300(sp)
  803354:	d8c14115 	stw	r3,1284(sp)
  803358:	0039da06 	br	801ac4 <___vfprintf_internal_r+0x3bc>
  80335c:	00802074 	movhi	r2,129
  803360:	10b4ee04 	addi	r2,r2,-11336
  803364:	d8814115 	stw	r2,1284(sp)
  803368:	003d1606 	br	8027c4 <___vfprintf_internal_r+0x10bc>
  80336c:	d9414d17 	ldw	r5,1332(sp)
  803370:	00801984 	movi	r2,102
  803374:	28804926 	beq	r5,r2,80349c <___vfprintf_internal_r+0x1d94>
  803378:	200f883a 	mov	r7,r4
  80337c:	24805716 	blt	r4,r18,8034dc <___vfprintf_internal_r+0x1dd4>
  803380:	d9414c17 	ldw	r5,1328(sp)
  803384:	2880004c 	andi	r2,r5,1
  803388:	10000126 	beq	r2,zero,803390 <___vfprintf_internal_r+0x1c88>
  80338c:	21c00044 	addi	r7,r4,1
  803390:	d9c14515 	stw	r7,1300(sp)
  803394:	383fcc0e 	bge	r7,zero,8032c8 <___vfprintf_internal_r+0x1bc0>
  803398:	d8014515 	stw	zero,1300(sp)
  80339c:	003fca06 	br	8032c8 <___vfprintf_internal_r+0x1bc0>
  8033a0:	d9000517 	ldw	r4,20(sp)
  8033a4:	00bfff04 	movi	r2,-4
  8033a8:	1100480e 	bge	r2,r4,8034cc <___vfprintf_internal_r+0x1dc4>
  8033ac:	99004716 	blt	r19,r4,8034cc <___vfprintf_internal_r+0x1dc4>
  8033b0:	d8c14d15 	stw	r3,1332(sp)
  8033b4:	003ff006 	br	803378 <___vfprintf_internal_r+0x1c70>
  8033b8:	d8800717 	ldw	r2,28(sp)
  8033bc:	14bf8b2e 	bgeu	r2,r18,8031ec <___vfprintf_internal_r+0x1ae4>
  8033c0:	9007883a 	mov	r3,r18
  8033c4:	01000c04 	movi	r4,48
  8033c8:	11000005 	stb	r4,0(r2)
  8033cc:	10800044 	addi	r2,r2,1
  8033d0:	d8800715 	stw	r2,28(sp)
  8033d4:	18bffc1e 	bne	r3,r2,8033c8 <___vfprintf_internal_r+0x1cc0>
  8033d8:	003f8406 	br	8031ec <___vfprintf_internal_r+0x1ae4>
  8033dc:	d8814117 	ldw	r2,1284(sp)
  8033e0:	10c00007 	ldb	r3,0(r2)
  8033e4:	00800c04 	movi	r2,48
  8033e8:	18805b26 	beq	r3,r2,803558 <___vfprintf_internal_r+0x1e50>
  8033ec:	d9000517 	ldw	r4,20(sp)
  8033f0:	9125883a 	add	r18,r18,r4
  8033f4:	003f7506 	br	8031cc <___vfprintf_internal_r+0x1ac4>
  8033f8:	d9014c17 	ldw	r4,1328(sp)
  8033fc:	2080004c 	andi	r2,r4,1
  803400:	1005003a 	cmpeq	r2,r2,zero
  803404:	103f6a26 	beq	r2,zero,8031b0 <___vfprintf_internal_r+0x1aa8>
  803408:	d8800717 	ldw	r2,28(sp)
  80340c:	003f7706 	br	8031ec <___vfprintf_internal_r+0x1ae4>
  803410:	d9c14515 	stw	r7,1300(sp)
  803414:	38004d16 	blt	r7,zero,80354c <___vfprintf_internal_r+0x1e44>
  803418:	dc814715 	stw	r18,1308(sp)
  80341c:	d8014615 	stw	zero,1304(sp)
  803420:	003b5b06 	br	802190 <___vfprintf_internal_r+0xa88>
  803424:	d9014f17 	ldw	r4,1340(sp)
  803428:	d8800504 	addi	r2,sp,20
  80342c:	d8800115 	stw	r2,4(sp)
  803430:	d8c00604 	addi	r3,sp,24
  803434:	d8800704 	addi	r2,sp,28
  803438:	800b883a 	mov	r5,r16
  80343c:	880d883a 	mov	r6,r17
  803440:	01c000c4 	movi	r7,3
  803444:	d8c00215 	stw	r3,8(sp)
  803448:	d8800315 	stw	r2,12(sp)
  80344c:	dcc00015 	stw	r19,0(sp)
  803450:	9829883a 	mov	r20,r19
  803454:	08039700 	call	803970 <_dtoa_r>
  803458:	d8814115 	stw	r2,1284(sp)
  80345c:	003f5106 	br	8031a4 <___vfprintf_internal_r+0x1a9c>
  803460:	d8c14217 	ldw	r3,1288(sp)
  803464:	d9014317 	ldw	r4,1292(sp)
  803468:	07000b44 	movi	fp,45
  80346c:	1821883a 	mov	r16,r3
  803470:	2460003c 	xorhi	r17,r4,32768
  803474:	003f3106 	br	80313c <___vfprintf_internal_r+0x1a34>
  803478:	9d000044 	addi	r20,r19,1
  80347c:	003f3906 	br	803164 <___vfprintf_internal_r+0x1a5c>
  803480:	983f251e 	bne	r19,zero,803118 <___vfprintf_internal_r+0x1a10>
  803484:	04c00044 	movi	r19,1
  803488:	003f2306 	br	803118 <___vfprintf_internal_r+0x1a10>
  80348c:	04c00184 	movi	r19,6
  803490:	003f2106 	br	803118 <___vfprintf_internal_r+0x1a10>
  803494:	d8014515 	stw	zero,1300(sp)
  803498:	003eee06 	br	803054 <___vfprintf_internal_r+0x194c>
  80349c:	200f883a 	mov	r7,r4
  8034a0:	0100370e 	bge	zero,r4,803580 <___vfprintf_internal_r+0x1e78>
  8034a4:	9800031e 	bne	r19,zero,8034b4 <___vfprintf_internal_r+0x1dac>
  8034a8:	d9814c17 	ldw	r6,1328(sp)
  8034ac:	3080004c 	andi	r2,r6,1
  8034b0:	103fb726 	beq	r2,zero,803390 <___vfprintf_internal_r+0x1c88>
  8034b4:	20800044 	addi	r2,r4,1
  8034b8:	98a7883a 	add	r19,r19,r2
  8034bc:	dcc14515 	stw	r19,1300(sp)
  8034c0:	980f883a 	mov	r7,r19
  8034c4:	983f800e 	bge	r19,zero,8032c8 <___vfprintf_internal_r+0x1bc0>
  8034c8:	003fb306 	br	803398 <___vfprintf_internal_r+0x1c90>
  8034cc:	d9814d17 	ldw	r6,1332(sp)
  8034d0:	31bfff84 	addi	r6,r6,-2
  8034d4:	d9814d15 	stw	r6,1332(sp)
  8034d8:	003f4c06 	br	80320c <___vfprintf_internal_r+0x1b04>
  8034dc:	0100180e 	bge	zero,r4,803540 <___vfprintf_internal_r+0x1e38>
  8034e0:	00800044 	movi	r2,1
  8034e4:	1485883a 	add	r2,r2,r18
  8034e8:	d8814515 	stw	r2,1300(sp)
  8034ec:	100f883a 	mov	r7,r2
  8034f0:	103f750e 	bge	r2,zero,8032c8 <___vfprintf_internal_r+0x1bc0>
  8034f4:	003fa806 	br	803398 <___vfprintf_internal_r+0x1c90>
  8034f8:	80c00c04 	addi	r3,r16,48
  8034fc:	00800c04 	movi	r2,48
  803500:	d8c008c5 	stb	r3,35(sp)
  803504:	d9800804 	addi	r6,sp,32
  803508:	d8c00904 	addi	r3,sp,36
  80350c:	d8800885 	stb	r2,34(sp)
  803510:	003f6506 	br	8032a8 <___vfprintf_internal_r+0x1ba0>
  803514:	d9014c17 	ldw	r4,1328(sp)
  803518:	2084703a 	and	r2,r4,r2
  80351c:	103f9c26 	beq	r2,zero,803390 <___vfprintf_internal_r+0x1c88>
  803520:	003f6606 	br	8032bc <___vfprintf_internal_r+0x1bb4>
  803524:	d9800804 	addi	r6,sp,32
  803528:	d8c00884 	addi	r3,sp,34
  80352c:	003f5e06 	br	8032a8 <___vfprintf_internal_r+0x1ba0>
  803530:	00800b44 	movi	r2,45
  803534:	0121c83a 	sub	r16,zero,r4
  803538:	d8800845 	stb	r2,33(sp)
  80353c:	003f3d06 	br	803234 <___vfprintf_internal_r+0x1b2c>
  803540:	00800084 	movi	r2,2
  803544:	1105c83a 	sub	r2,r2,r4
  803548:	003fe606 	br	8034e4 <___vfprintf_internal_r+0x1ddc>
  80354c:	d8014515 	stw	zero,1300(sp)
  803550:	dc814715 	stw	r18,1308(sp)
  803554:	003fb106 	br	80341c <___vfprintf_internal_r+0x1d14>
  803558:	000d883a 	mov	r6,zero
  80355c:	000f883a 	mov	r7,zero
  803560:	8009883a 	mov	r4,r16
  803564:	880b883a 	mov	r5,r17
  803568:	0809fd80 	call	809fd8 <__nedf2>
  80356c:	103f9f26 	beq	r2,zero,8033ec <___vfprintf_internal_r+0x1ce4>
  803570:	00800044 	movi	r2,1
  803574:	1509c83a 	sub	r4,r2,r20
  803578:	d9000515 	stw	r4,20(sp)
  80357c:	003f9b06 	br	8033ec <___vfprintf_internal_r+0x1ce4>
  803580:	98000d1e 	bne	r19,zero,8035b8 <___vfprintf_internal_r+0x1eb0>
  803584:	d8c14c17 	ldw	r3,1328(sp)
  803588:	1880004c 	andi	r2,r3,1
  80358c:	10000a1e 	bne	r2,zero,8035b8 <___vfprintf_internal_r+0x1eb0>
  803590:	01000044 	movi	r4,1
  803594:	200f883a 	mov	r7,r4
  803598:	d9014515 	stw	r4,1300(sp)
  80359c:	003f4a06 	br	8032c8 <___vfprintf_internal_r+0x1bc0>
  8035a0:	3cc00017 	ldw	r19,0(r7)
  8035a4:	39c00104 	addi	r7,r7,4
  8035a8:	983d0e0e 	bge	r19,zero,8029e4 <___vfprintf_internal_r+0x12dc>
  8035ac:	b8c00007 	ldb	r3,0(r23)
  8035b0:	04ffffc4 	movi	r19,-1
  8035b4:	0038d306 	br	801904 <___vfprintf_internal_r+0x1fc>
  8035b8:	9cc00084 	addi	r19,r19,2
  8035bc:	dcc14515 	stw	r19,1300(sp)
  8035c0:	980f883a 	mov	r7,r19
  8035c4:	983f400e 	bge	r19,zero,8032c8 <___vfprintf_internal_r+0x1bc0>
  8035c8:	003f7306 	br	803398 <___vfprintf_internal_r+0x1c90>

008035cc <__vfprintf_internal>:
  8035cc:	00802074 	movhi	r2,129
  8035d0:	10bbf804 	addi	r2,r2,-4128
  8035d4:	2013883a 	mov	r9,r4
  8035d8:	11000017 	ldw	r4,0(r2)
  8035dc:	2805883a 	mov	r2,r5
  8035e0:	300f883a 	mov	r7,r6
  8035e4:	480b883a 	mov	r5,r9
  8035e8:	100d883a 	mov	r6,r2
  8035ec:	08017081 	jmpi	801708 <___vfprintf_internal_r>

008035f0 <__swsetup_r>:
  8035f0:	00802074 	movhi	r2,129
  8035f4:	10bbf804 	addi	r2,r2,-4128
  8035f8:	10c00017 	ldw	r3,0(r2)
  8035fc:	defffd04 	addi	sp,sp,-12
  803600:	dc400115 	stw	r17,4(sp)
  803604:	dc000015 	stw	r16,0(sp)
  803608:	dfc00215 	stw	ra,8(sp)
  80360c:	2023883a 	mov	r17,r4
  803610:	2821883a 	mov	r16,r5
  803614:	18000226 	beq	r3,zero,803620 <__swsetup_r+0x30>
  803618:	18800e17 	ldw	r2,56(r3)
  80361c:	10001f26 	beq	r2,zero,80369c <__swsetup_r+0xac>
  803620:	8100030b 	ldhu	r4,12(r16)
  803624:	2080020c 	andi	r2,r4,8
  803628:	10002826 	beq	r2,zero,8036cc <__swsetup_r+0xdc>
  80362c:	81400417 	ldw	r5,16(r16)
  803630:	28001d26 	beq	r5,zero,8036a8 <__swsetup_r+0xb8>
  803634:	2080004c 	andi	r2,r4,1
  803638:	1005003a 	cmpeq	r2,r2,zero
  80363c:	10000b26 	beq	r2,zero,80366c <__swsetup_r+0x7c>
  803640:	2080008c 	andi	r2,r4,2
  803644:	10001226 	beq	r2,zero,803690 <__swsetup_r+0xa0>
  803648:	0005883a 	mov	r2,zero
  80364c:	80800215 	stw	r2,8(r16)
  803650:	28000b26 	beq	r5,zero,803680 <__swsetup_r+0x90>
  803654:	0005883a 	mov	r2,zero
  803658:	dfc00217 	ldw	ra,8(sp)
  80365c:	dc400117 	ldw	r17,4(sp)
  803660:	dc000017 	ldw	r16,0(sp)
  803664:	dec00304 	addi	sp,sp,12
  803668:	f800283a 	ret
  80366c:	80800517 	ldw	r2,20(r16)
  803670:	80000215 	stw	zero,8(r16)
  803674:	0085c83a 	sub	r2,zero,r2
  803678:	80800615 	stw	r2,24(r16)
  80367c:	283ff51e 	bne	r5,zero,803654 <__swsetup_r+0x64>
  803680:	2080200c 	andi	r2,r4,128
  803684:	103ff326 	beq	r2,zero,803654 <__swsetup_r+0x64>
  803688:	00bfffc4 	movi	r2,-1
  80368c:	003ff206 	br	803658 <__swsetup_r+0x68>
  803690:	80800517 	ldw	r2,20(r16)
  803694:	80800215 	stw	r2,8(r16)
  803698:	003fed06 	br	803650 <__swsetup_r+0x60>
  80369c:	1809883a 	mov	r4,r3
  8036a0:	08051bc0 	call	8051bc <__sinit>
  8036a4:	003fde06 	br	803620 <__swsetup_r+0x30>
  8036a8:	20c0a00c 	andi	r3,r4,640
  8036ac:	00808004 	movi	r2,512
  8036b0:	18bfe026 	beq	r3,r2,803634 <__swsetup_r+0x44>
  8036b4:	8809883a 	mov	r4,r17
  8036b8:	800b883a 	mov	r5,r16
  8036bc:	0805f680 	call	805f68 <__smakebuf_r>
  8036c0:	8100030b 	ldhu	r4,12(r16)
  8036c4:	81400417 	ldw	r5,16(r16)
  8036c8:	003fda06 	br	803634 <__swsetup_r+0x44>
  8036cc:	2080040c 	andi	r2,r4,16
  8036d0:	103fed26 	beq	r2,zero,803688 <__swsetup_r+0x98>
  8036d4:	2080010c 	andi	r2,r4,4
  8036d8:	10001226 	beq	r2,zero,803724 <__swsetup_r+0x134>
  8036dc:	81400c17 	ldw	r5,48(r16)
  8036e0:	28000526 	beq	r5,zero,8036f8 <__swsetup_r+0x108>
  8036e4:	80801004 	addi	r2,r16,64
  8036e8:	28800226 	beq	r5,r2,8036f4 <__swsetup_r+0x104>
  8036ec:	8809883a 	mov	r4,r17
  8036f0:	08055740 	call	805574 <_free_r>
  8036f4:	80000c15 	stw	zero,48(r16)
  8036f8:	8080030b 	ldhu	r2,12(r16)
  8036fc:	81400417 	ldw	r5,16(r16)
  803700:	80000115 	stw	zero,4(r16)
  803704:	10bff6cc 	andi	r2,r2,65499
  803708:	8080030d 	sth	r2,12(r16)
  80370c:	81400015 	stw	r5,0(r16)
  803710:	8080030b 	ldhu	r2,12(r16)
  803714:	10800214 	ori	r2,r2,8
  803718:	113fffcc 	andi	r4,r2,65535
  80371c:	8080030d 	sth	r2,12(r16)
  803720:	003fc306 	br	803630 <__swsetup_r+0x40>
  803724:	81400417 	ldw	r5,16(r16)
  803728:	003ff906 	br	803710 <__swsetup_r+0x120>

0080372c <quorem>:
  80372c:	28c00417 	ldw	r3,16(r5)
  803730:	20800417 	ldw	r2,16(r4)
  803734:	defff104 	addi	sp,sp,-60
  803738:	dfc00e15 	stw	ra,56(sp)
  80373c:	df000d15 	stw	fp,52(sp)
  803740:	ddc00c15 	stw	r23,48(sp)
  803744:	dd800b15 	stw	r22,44(sp)
  803748:	dd400a15 	stw	r21,40(sp)
  80374c:	dd000915 	stw	r20,36(sp)
  803750:	dcc00815 	stw	r19,32(sp)
  803754:	dc800715 	stw	r18,28(sp)
  803758:	dc400615 	stw	r17,24(sp)
  80375c:	dc000515 	stw	r16,20(sp)
  803760:	d9000315 	stw	r4,12(sp)
  803764:	d9400415 	stw	r5,16(sp)
  803768:	10c07f16 	blt	r2,r3,803968 <quorem+0x23c>
  80376c:	1d3fffc4 	addi	r20,r3,-1
  803770:	d8c00417 	ldw	r3,16(sp)
  803774:	d9000317 	ldw	r4,12(sp)
  803778:	a505883a 	add	r2,r20,r20
  80377c:	1085883a 	add	r2,r2,r2
  803780:	1cc00504 	addi	r19,r3,20
  803784:	25c00504 	addi	r23,r4,20
  803788:	98ad883a 	add	r22,r19,r2
  80378c:	15c7883a 	add	r3,r2,r23
  803790:	b1400017 	ldw	r5,0(r22)
  803794:	19000017 	ldw	r4,0(r3)
  803798:	d8c00015 	stw	r3,0(sp)
  80379c:	29400044 	addi	r5,r5,1
  8037a0:	d9000215 	stw	r4,8(sp)
  8037a4:	0800dd80 	call	800dd8 <__udivsi3>
  8037a8:	1039883a 	mov	fp,r2
  8037ac:	10003d1e 	bne	r2,zero,8038a4 <quorem+0x178>
  8037b0:	d9400417 	ldw	r5,16(sp)
  8037b4:	d9000317 	ldw	r4,12(sp)
  8037b8:	0806c940 	call	806c94 <__mcmp>
  8037bc:	10002c16 	blt	r2,zero,803870 <quorem+0x144>
  8037c0:	e7000044 	addi	fp,fp,1
  8037c4:	b80f883a 	mov	r7,r23
  8037c8:	0011883a 	mov	r8,zero
  8037cc:	0009883a 	mov	r4,zero
  8037d0:	99400017 	ldw	r5,0(r19)
  8037d4:	38c00017 	ldw	r3,0(r7)
  8037d8:	9cc00104 	addi	r19,r19,4
  8037dc:	28bfffcc 	andi	r2,r5,65535
  8037e0:	2085883a 	add	r2,r4,r2
  8037e4:	11bfffcc 	andi	r6,r2,65535
  8037e8:	193fffcc 	andi	r4,r3,65535
  8037ec:	1004d43a 	srli	r2,r2,16
  8037f0:	280ad43a 	srli	r5,r5,16
  8037f4:	2189c83a 	sub	r4,r4,r6
  8037f8:	2209883a 	add	r4,r4,r8
  8037fc:	1806d43a 	srli	r3,r3,16
  803800:	288b883a 	add	r5,r5,r2
  803804:	200dd43a 	srai	r6,r4,16
  803808:	28bfffcc 	andi	r2,r5,65535
  80380c:	1887c83a 	sub	r3,r3,r2
  803810:	1987883a 	add	r3,r3,r6
  803814:	3900000d 	sth	r4,0(r7)
  803818:	38c0008d 	sth	r3,2(r7)
  80381c:	2808d43a 	srli	r4,r5,16
  803820:	39c00104 	addi	r7,r7,4
  803824:	1811d43a 	srai	r8,r3,16
  803828:	b4ffe92e 	bgeu	r22,r19,8037d0 <quorem+0xa4>
  80382c:	a505883a 	add	r2,r20,r20
  803830:	1085883a 	add	r2,r2,r2
  803834:	b885883a 	add	r2,r23,r2
  803838:	10c00017 	ldw	r3,0(r2)
  80383c:	18000c1e 	bne	r3,zero,803870 <quorem+0x144>
  803840:	113fff04 	addi	r4,r2,-4
  803844:	b900082e 	bgeu	r23,r4,803868 <quorem+0x13c>
  803848:	10bfff17 	ldw	r2,-4(r2)
  80384c:	10000326 	beq	r2,zero,80385c <quorem+0x130>
  803850:	00000506 	br	803868 <quorem+0x13c>
  803854:	20800017 	ldw	r2,0(r4)
  803858:	1000031e 	bne	r2,zero,803868 <quorem+0x13c>
  80385c:	213fff04 	addi	r4,r4,-4
  803860:	a53fffc4 	addi	r20,r20,-1
  803864:	b93ffb36 	bltu	r23,r4,803854 <quorem+0x128>
  803868:	d9000317 	ldw	r4,12(sp)
  80386c:	25000415 	stw	r20,16(r4)
  803870:	e005883a 	mov	r2,fp
  803874:	dfc00e17 	ldw	ra,56(sp)
  803878:	df000d17 	ldw	fp,52(sp)
  80387c:	ddc00c17 	ldw	r23,48(sp)
  803880:	dd800b17 	ldw	r22,44(sp)
  803884:	dd400a17 	ldw	r21,40(sp)
  803888:	dd000917 	ldw	r20,36(sp)
  80388c:	dcc00817 	ldw	r19,32(sp)
  803890:	dc800717 	ldw	r18,28(sp)
  803894:	dc400617 	ldw	r17,24(sp)
  803898:	dc000517 	ldw	r16,20(sp)
  80389c:	dec00f04 	addi	sp,sp,60
  8038a0:	f800283a 	ret
  8038a4:	b823883a 	mov	r17,r23
  8038a8:	9825883a 	mov	r18,r19
  8038ac:	d8000115 	stw	zero,4(sp)
  8038b0:	002b883a 	mov	r21,zero
  8038b4:	94000017 	ldw	r16,0(r18)
  8038b8:	e009883a 	mov	r4,fp
  8038bc:	94800104 	addi	r18,r18,4
  8038c0:	817fffcc 	andi	r5,r16,65535
  8038c4:	08016000 	call	801600 <__mulsi3>
  8038c8:	800ad43a 	srli	r5,r16,16
  8038cc:	e009883a 	mov	r4,fp
  8038d0:	a8a1883a 	add	r16,r21,r2
  8038d4:	08016000 	call	801600 <__mulsi3>
  8038d8:	89000017 	ldw	r4,0(r17)
  8038dc:	80ffffcc 	andi	r3,r16,65535
  8038e0:	8020d43a 	srli	r16,r16,16
  8038e4:	217fffcc 	andi	r5,r4,65535
  8038e8:	28cbc83a 	sub	r5,r5,r3
  8038ec:	d8c00117 	ldw	r3,4(sp)
  8038f0:	2008d43a 	srli	r4,r4,16
  8038f4:	1405883a 	add	r2,r2,r16
  8038f8:	28cb883a 	add	r5,r5,r3
  8038fc:	280dd43a 	srai	r6,r5,16
  803900:	10ffffcc 	andi	r3,r2,65535
  803904:	20c9c83a 	sub	r4,r4,r3
  803908:	2189883a 	add	r4,r4,r6
  80390c:	8900008d 	sth	r4,2(r17)
  803910:	2009d43a 	srai	r4,r4,16
  803914:	8940000d 	sth	r5,0(r17)
  803918:	102ad43a 	srli	r21,r2,16
  80391c:	8c400104 	addi	r17,r17,4
  803920:	d9000115 	stw	r4,4(sp)
  803924:	b4bfe32e 	bgeu	r22,r18,8038b4 <quorem+0x188>
  803928:	d9000217 	ldw	r4,8(sp)
  80392c:	203fa01e 	bne	r4,zero,8037b0 <quorem+0x84>
  803930:	d8800017 	ldw	r2,0(sp)
  803934:	10ffff04 	addi	r3,r2,-4
  803938:	b8c0082e 	bgeu	r23,r3,80395c <quorem+0x230>
  80393c:	10bfff17 	ldw	r2,-4(r2)
  803940:	10000326 	beq	r2,zero,803950 <quorem+0x224>
  803944:	00000506 	br	80395c <quorem+0x230>
  803948:	18800017 	ldw	r2,0(r3)
  80394c:	1000031e 	bne	r2,zero,80395c <quorem+0x230>
  803950:	18ffff04 	addi	r3,r3,-4
  803954:	a53fffc4 	addi	r20,r20,-1
  803958:	b8fffb36 	bltu	r23,r3,803948 <quorem+0x21c>
  80395c:	d8c00317 	ldw	r3,12(sp)
  803960:	1d000415 	stw	r20,16(r3)
  803964:	003f9206 	br	8037b0 <quorem+0x84>
  803968:	0005883a 	mov	r2,zero
  80396c:	003fc106 	br	803874 <quorem+0x148>

00803970 <_dtoa_r>:
  803970:	22001017 	ldw	r8,64(r4)
  803974:	deffda04 	addi	sp,sp,-152
  803978:	dd402115 	stw	r21,132(sp)
  80397c:	dd002015 	stw	r20,128(sp)
  803980:	dc801e15 	stw	r18,120(sp)
  803984:	dc401d15 	stw	r17,116(sp)
  803988:	dfc02515 	stw	ra,148(sp)
  80398c:	df002415 	stw	fp,144(sp)
  803990:	ddc02315 	stw	r23,140(sp)
  803994:	dd802215 	stw	r22,136(sp)
  803998:	dcc01f15 	stw	r19,124(sp)
  80399c:	dc001c15 	stw	r16,112(sp)
  8039a0:	d9001615 	stw	r4,88(sp)
  8039a4:	3023883a 	mov	r17,r6
  8039a8:	2829883a 	mov	r20,r5
  8039ac:	d9c01715 	stw	r7,92(sp)
  8039b0:	dc802817 	ldw	r18,160(sp)
  8039b4:	302b883a 	mov	r21,r6
  8039b8:	40000a26 	beq	r8,zero,8039e4 <_dtoa_r+0x74>
  8039bc:	20801117 	ldw	r2,68(r4)
  8039c0:	400b883a 	mov	r5,r8
  8039c4:	40800115 	stw	r2,4(r8)
  8039c8:	20c01117 	ldw	r3,68(r4)
  8039cc:	00800044 	movi	r2,1
  8039d0:	10c4983a 	sll	r2,r2,r3
  8039d4:	40800215 	stw	r2,8(r8)
  8039d8:	0806b380 	call	806b38 <_Bfree>
  8039dc:	d8c01617 	ldw	r3,88(sp)
  8039e0:	18001015 	stw	zero,64(r3)
  8039e4:	8800a316 	blt	r17,zero,803c74 <_dtoa_r+0x304>
  8039e8:	90000015 	stw	zero,0(r18)
  8039ec:	a8dffc2c 	andhi	r3,r21,32752
  8039f0:	009ffc34 	movhi	r2,32752
  8039f4:	18809126 	beq	r3,r2,803c3c <_dtoa_r+0x2cc>
  8039f8:	000d883a 	mov	r6,zero
  8039fc:	000f883a 	mov	r7,zero
  803a00:	a009883a 	mov	r4,r20
  803a04:	a80b883a 	mov	r5,r21
  803a08:	dd001215 	stw	r20,72(sp)
  803a0c:	dd401315 	stw	r21,76(sp)
  803a10:	0809fd80 	call	809fd8 <__nedf2>
  803a14:	1000171e 	bne	r2,zero,803a74 <_dtoa_r+0x104>
  803a18:	d9802717 	ldw	r6,156(sp)
  803a1c:	00800044 	movi	r2,1
  803a20:	30800015 	stw	r2,0(r6)
  803a24:	d8802917 	ldw	r2,164(sp)
  803a28:	10029b26 	beq	r2,zero,804498 <_dtoa_r+0xb28>
  803a2c:	d9002917 	ldw	r4,164(sp)
  803a30:	00802074 	movhi	r2,129
  803a34:	10b4fd44 	addi	r2,r2,-11275
  803a38:	10ffffc4 	addi	r3,r2,-1
  803a3c:	20800015 	stw	r2,0(r4)
  803a40:	1805883a 	mov	r2,r3
  803a44:	dfc02517 	ldw	ra,148(sp)
  803a48:	df002417 	ldw	fp,144(sp)
  803a4c:	ddc02317 	ldw	r23,140(sp)
  803a50:	dd802217 	ldw	r22,136(sp)
  803a54:	dd402117 	ldw	r21,132(sp)
  803a58:	dd002017 	ldw	r20,128(sp)
  803a5c:	dcc01f17 	ldw	r19,124(sp)
  803a60:	dc801e17 	ldw	r18,120(sp)
  803a64:	dc401d17 	ldw	r17,116(sp)
  803a68:	dc001c17 	ldw	r16,112(sp)
  803a6c:	dec02604 	addi	sp,sp,152
  803a70:	f800283a 	ret
  803a74:	d9001617 	ldw	r4,88(sp)
  803a78:	d9401217 	ldw	r5,72(sp)
  803a7c:	d8800104 	addi	r2,sp,4
  803a80:	a80d883a 	mov	r6,r21
  803a84:	d9c00204 	addi	r7,sp,8
  803a88:	d8800015 	stw	r2,0(sp)
  803a8c:	08071740 	call	807174 <__d2b>
  803a90:	d8800715 	stw	r2,28(sp)
  803a94:	a804d53a 	srli	r2,r21,20
  803a98:	1101ffcc 	andi	r4,r2,2047
  803a9c:	20008626 	beq	r4,zero,803cb8 <_dtoa_r+0x348>
  803aa0:	d8c01217 	ldw	r3,72(sp)
  803aa4:	00800434 	movhi	r2,16
  803aa8:	10bfffc4 	addi	r2,r2,-1
  803aac:	ddc00117 	ldw	r23,4(sp)
  803ab0:	a884703a 	and	r2,r21,r2
  803ab4:	1811883a 	mov	r8,r3
  803ab8:	124ffc34 	orhi	r9,r2,16368
  803abc:	25bf0044 	addi	r22,r4,-1023
  803ac0:	d8000815 	stw	zero,32(sp)
  803ac4:	0005883a 	mov	r2,zero
  803ac8:	00cffe34 	movhi	r3,16376
  803acc:	480b883a 	mov	r5,r9
  803ad0:	4009883a 	mov	r4,r8
  803ad4:	180f883a 	mov	r7,r3
  803ad8:	100d883a 	mov	r6,r2
  803adc:	0809a980 	call	809a98 <__subdf3>
  803ae0:	0218dbf4 	movhi	r8,25455
  803ae4:	4210d844 	addi	r8,r8,17249
  803ae8:	024ff4f4 	movhi	r9,16339
  803aec:	4a61e9c4 	addi	r9,r9,-30809
  803af0:	480f883a 	mov	r7,r9
  803af4:	400d883a 	mov	r6,r8
  803af8:	180b883a 	mov	r5,r3
  803afc:	1009883a 	mov	r4,r2
  803b00:	0809b8c0 	call	809b8c <__muldf3>
  803b04:	0222d874 	movhi	r8,35681
  803b08:	42322cc4 	addi	r8,r8,-14157
  803b0c:	024ff1f4 	movhi	r9,16327
  803b10:	4a628a04 	addi	r9,r9,-30168
  803b14:	480f883a 	mov	r7,r9
  803b18:	400d883a 	mov	r6,r8
  803b1c:	180b883a 	mov	r5,r3
  803b20:	1009883a 	mov	r4,r2
  803b24:	0809b180 	call	809b18 <__adddf3>
  803b28:	b009883a 	mov	r4,r22
  803b2c:	1021883a 	mov	r16,r2
  803b30:	1823883a 	mov	r17,r3
  803b34:	080a1f80 	call	80a1f8 <__floatsidf>
  803b38:	021427f4 	movhi	r8,20639
  803b3c:	421e7ec4 	addi	r8,r8,31227
  803b40:	024ff4f4 	movhi	r9,16339
  803b44:	4a5104c4 	addi	r9,r9,17427
  803b48:	480f883a 	mov	r7,r9
  803b4c:	400d883a 	mov	r6,r8
  803b50:	180b883a 	mov	r5,r3
  803b54:	1009883a 	mov	r4,r2
  803b58:	0809b8c0 	call	809b8c <__muldf3>
  803b5c:	180f883a 	mov	r7,r3
  803b60:	880b883a 	mov	r5,r17
  803b64:	100d883a 	mov	r6,r2
  803b68:	8009883a 	mov	r4,r16
  803b6c:	0809b180 	call	809b18 <__adddf3>
  803b70:	1009883a 	mov	r4,r2
  803b74:	180b883a 	mov	r5,r3
  803b78:	1021883a 	mov	r16,r2
  803b7c:	1823883a 	mov	r17,r3
  803b80:	080a2f00 	call	80a2f0 <__fixdfsi>
  803b84:	000d883a 	mov	r6,zero
  803b88:	000f883a 	mov	r7,zero
  803b8c:	8009883a 	mov	r4,r16
  803b90:	880b883a 	mov	r5,r17
  803b94:	d8800d15 	stw	r2,52(sp)
  803b98:	080a1700 	call	80a170 <__ltdf2>
  803b9c:	10031716 	blt	r2,zero,8047fc <_dtoa_r+0xe8c>
  803ba0:	d8c00d17 	ldw	r3,52(sp)
  803ba4:	00800584 	movi	r2,22
  803ba8:	10c1482e 	bgeu	r2,r3,8040cc <_dtoa_r+0x75c>
  803bac:	01000044 	movi	r4,1
  803bb0:	d9000c15 	stw	r4,48(sp)
  803bb4:	bd85c83a 	sub	r2,r23,r22
  803bb8:	11bfffc4 	addi	r6,r2,-1
  803bbc:	30030b16 	blt	r6,zero,8047ec <_dtoa_r+0xe7c>
  803bc0:	d9800a15 	stw	r6,40(sp)
  803bc4:	d8001115 	stw	zero,68(sp)
  803bc8:	d8c00d17 	ldw	r3,52(sp)
  803bcc:	1802ff16 	blt	r3,zero,8047cc <_dtoa_r+0xe5c>
  803bd0:	d9000a17 	ldw	r4,40(sp)
  803bd4:	d8c00915 	stw	r3,36(sp)
  803bd8:	d8001015 	stw	zero,64(sp)
  803bdc:	20c9883a 	add	r4,r4,r3
  803be0:	d9000a15 	stw	r4,40(sp)
  803be4:	d9001717 	ldw	r4,92(sp)
  803be8:	00800244 	movi	r2,9
  803bec:	11004636 	bltu	r2,r4,803d08 <_dtoa_r+0x398>
  803bf0:	00800144 	movi	r2,5
  803bf4:	11020416 	blt	r2,r4,804408 <_dtoa_r+0xa98>
  803bf8:	04400044 	movi	r17,1
  803bfc:	d8c01717 	ldw	r3,92(sp)
  803c00:	00800144 	movi	r2,5
  803c04:	10c1ed36 	bltu	r2,r3,8043bc <_dtoa_r+0xa4c>
  803c08:	18c5883a 	add	r2,r3,r3
  803c0c:	1085883a 	add	r2,r2,r2
  803c10:	00c02034 	movhi	r3,128
  803c14:	18cf0904 	addi	r3,r3,15396
  803c18:	10c5883a 	add	r2,r2,r3
  803c1c:	11000017 	ldw	r4,0(r2)
  803c20:	2000683a 	jmp	r4
  803c24:	00803d10 	cmplti	r2,zero,244
  803c28:	00803d10 	cmplti	r2,zero,244
  803c2c:	00804710 	cmplti	r2,zero,284
  803c30:	008046e8 	cmpgeui	r2,zero,283
  803c34:	0080472c 	andhi	r2,zero,284
  803c38:	00804738 	rdprs	r2,zero,284
  803c3c:	d9002717 	ldw	r4,156(sp)
  803c40:	0089c3c4 	movi	r2,9999
  803c44:	20800015 	stw	r2,0(r4)
  803c48:	a0001026 	beq	r20,zero,803c8c <_dtoa_r+0x31c>
  803c4c:	00c02074 	movhi	r3,129
  803c50:	18f50904 	addi	r3,r3,-11228
  803c54:	d9802917 	ldw	r6,164(sp)
  803c58:	303f7926 	beq	r6,zero,803a40 <_dtoa_r+0xd0>
  803c5c:	188000c7 	ldb	r2,3(r3)
  803c60:	190000c4 	addi	r4,r3,3
  803c64:	1000101e 	bne	r2,zero,803ca8 <_dtoa_r+0x338>
  803c68:	d8802917 	ldw	r2,164(sp)
  803c6c:	11000015 	stw	r4,0(r2)
  803c70:	003f7306 	br	803a40 <_dtoa_r+0xd0>
  803c74:	00a00034 	movhi	r2,32768
  803c78:	10bfffc4 	addi	r2,r2,-1
  803c7c:	00c00044 	movi	r3,1
  803c80:	88aa703a 	and	r21,r17,r2
  803c84:	90c00015 	stw	r3,0(r18)
  803c88:	003f5806 	br	8039ec <_dtoa_r+0x7c>
  803c8c:	00800434 	movhi	r2,16
  803c90:	10bfffc4 	addi	r2,r2,-1
  803c94:	a884703a 	and	r2,r21,r2
  803c98:	103fec1e 	bne	r2,zero,803c4c <_dtoa_r+0x2dc>
  803c9c:	00c02074 	movhi	r3,129
  803ca0:	18f50604 	addi	r3,r3,-11240
  803ca4:	003feb06 	br	803c54 <_dtoa_r+0x2e4>
  803ca8:	d8802917 	ldw	r2,164(sp)
  803cac:	19000204 	addi	r4,r3,8
  803cb0:	11000015 	stw	r4,0(r2)
  803cb4:	003f6206 	br	803a40 <_dtoa_r+0xd0>
  803cb8:	ddc00117 	ldw	r23,4(sp)
  803cbc:	d8800217 	ldw	r2,8(sp)
  803cc0:	01000804 	movi	r4,32
  803cc4:	b8c10c84 	addi	r3,r23,1074
  803cc8:	18a3883a 	add	r17,r3,r2
  803ccc:	2441b80e 	bge	r4,r17,8043b0 <_dtoa_r+0xa40>
  803cd0:	00c01004 	movi	r3,64
  803cd4:	1c47c83a 	sub	r3,r3,r17
  803cd8:	88bff804 	addi	r2,r17,-32
  803cdc:	a8c6983a 	sll	r3,r21,r3
  803ce0:	a084d83a 	srl	r2,r20,r2
  803ce4:	1888b03a 	or	r4,r3,r2
  803ce8:	080a3c80 	call	80a3c8 <__floatunsidf>
  803cec:	1011883a 	mov	r8,r2
  803cf0:	00bf8434 	movhi	r2,65040
  803cf4:	01000044 	movi	r4,1
  803cf8:	10d3883a 	add	r9,r2,r3
  803cfc:	8dbef344 	addi	r22,r17,-1075
  803d00:	d9000815 	stw	r4,32(sp)
  803d04:	003f6f06 	br	803ac4 <_dtoa_r+0x154>
  803d08:	d8001715 	stw	zero,92(sp)
  803d0c:	04400044 	movi	r17,1
  803d10:	00bfffc4 	movi	r2,-1
  803d14:	00c00044 	movi	r3,1
  803d18:	d8800e15 	stw	r2,56(sp)
  803d1c:	d8002615 	stw	zero,152(sp)
  803d20:	d8800f15 	stw	r2,60(sp)
  803d24:	d8c00b15 	stw	r3,44(sp)
  803d28:	1021883a 	mov	r16,r2
  803d2c:	d8801617 	ldw	r2,88(sp)
  803d30:	10001115 	stw	zero,68(r2)
  803d34:	d8801617 	ldw	r2,88(sp)
  803d38:	11401117 	ldw	r5,68(r2)
  803d3c:	1009883a 	mov	r4,r2
  803d40:	08070b80 	call	8070b8 <_Balloc>
  803d44:	d8c01617 	ldw	r3,88(sp)
  803d48:	d8800515 	stw	r2,20(sp)
  803d4c:	18801015 	stw	r2,64(r3)
  803d50:	00800384 	movi	r2,14
  803d54:	14006836 	bltu	r2,r16,803ef8 <_dtoa_r+0x588>
  803d58:	8805003a 	cmpeq	r2,r17,zero
  803d5c:	1000661e 	bne	r2,zero,803ef8 <_dtoa_r+0x588>
  803d60:	d9000d17 	ldw	r4,52(sp)
  803d64:	0102300e 	bge	zero,r4,804628 <_dtoa_r+0xcb8>
  803d68:	208003cc 	andi	r2,r4,15
  803d6c:	100490fa 	slli	r2,r2,3
  803d70:	2025d13a 	srai	r18,r4,4
  803d74:	00c02074 	movhi	r3,129
  803d78:	18f51b04 	addi	r3,r3,-11156
  803d7c:	10c5883a 	add	r2,r2,r3
  803d80:	90c0040c 	andi	r3,r18,16
  803d84:	14000017 	ldw	r16,0(r2)
  803d88:	14400117 	ldw	r17,4(r2)
  803d8c:	18036a1e 	bne	r3,zero,804b38 <_dtoa_r+0x11c8>
  803d90:	05800084 	movi	r22,2
  803d94:	90001026 	beq	r18,zero,803dd8 <_dtoa_r+0x468>
  803d98:	04c02074 	movhi	r19,129
  803d9c:	9cf54d04 	addi	r19,r19,-10956
  803da0:	9080004c 	andi	r2,r18,1
  803da4:	1005003a 	cmpeq	r2,r2,zero
  803da8:	1000081e 	bne	r2,zero,803dcc <_dtoa_r+0x45c>
  803dac:	99800017 	ldw	r6,0(r19)
  803db0:	99c00117 	ldw	r7,4(r19)
  803db4:	880b883a 	mov	r5,r17
  803db8:	8009883a 	mov	r4,r16
  803dbc:	0809b8c0 	call	809b8c <__muldf3>
  803dc0:	1021883a 	mov	r16,r2
  803dc4:	b5800044 	addi	r22,r22,1
  803dc8:	1823883a 	mov	r17,r3
  803dcc:	9025d07a 	srai	r18,r18,1
  803dd0:	9cc00204 	addi	r19,r19,8
  803dd4:	903ff21e 	bne	r18,zero,803da0 <_dtoa_r+0x430>
  803dd8:	a80b883a 	mov	r5,r21
  803ddc:	a009883a 	mov	r4,r20
  803de0:	880f883a 	mov	r7,r17
  803de4:	800d883a 	mov	r6,r16
  803de8:	0800a0c0 	call	800a0c <__divdf3>
  803dec:	1029883a 	mov	r20,r2
  803df0:	182b883a 	mov	r21,r3
  803df4:	d8c00c17 	ldw	r3,48(sp)
  803df8:	1805003a 	cmpeq	r2,r3,zero
  803dfc:	1000081e 	bne	r2,zero,803e20 <_dtoa_r+0x4b0>
  803e00:	0005883a 	mov	r2,zero
  803e04:	00cffc34 	movhi	r3,16368
  803e08:	180f883a 	mov	r7,r3
  803e0c:	a009883a 	mov	r4,r20
  803e10:	a80b883a 	mov	r5,r21
  803e14:	100d883a 	mov	r6,r2
  803e18:	080a1700 	call	80a170 <__ltdf2>
  803e1c:	1003fe16 	blt	r2,zero,804e18 <_dtoa_r+0x14a8>
  803e20:	b009883a 	mov	r4,r22
  803e24:	080a1f80 	call	80a1f8 <__floatsidf>
  803e28:	180b883a 	mov	r5,r3
  803e2c:	1009883a 	mov	r4,r2
  803e30:	a00d883a 	mov	r6,r20
  803e34:	a80f883a 	mov	r7,r21
  803e38:	0809b8c0 	call	809b8c <__muldf3>
  803e3c:	0011883a 	mov	r8,zero
  803e40:	02500734 	movhi	r9,16412
  803e44:	1009883a 	mov	r4,r2
  803e48:	180b883a 	mov	r5,r3
  803e4c:	480f883a 	mov	r7,r9
  803e50:	400d883a 	mov	r6,r8
  803e54:	0809b180 	call	809b18 <__adddf3>
  803e58:	d9000f17 	ldw	r4,60(sp)
  803e5c:	102d883a 	mov	r22,r2
  803e60:	00bf3034 	movhi	r2,64704
  803e64:	18b9883a 	add	fp,r3,r2
  803e68:	e02f883a 	mov	r23,fp
  803e6c:	20028f1e 	bne	r4,zero,8048ac <_dtoa_r+0xf3c>
  803e70:	0005883a 	mov	r2,zero
  803e74:	00d00534 	movhi	r3,16404
  803e78:	a009883a 	mov	r4,r20
  803e7c:	a80b883a 	mov	r5,r21
  803e80:	180f883a 	mov	r7,r3
  803e84:	100d883a 	mov	r6,r2
  803e88:	0809a980 	call	809a98 <__subdf3>
  803e8c:	1009883a 	mov	r4,r2
  803e90:	e00f883a 	mov	r7,fp
  803e94:	180b883a 	mov	r5,r3
  803e98:	b00d883a 	mov	r6,r22
  803e9c:	1025883a 	mov	r18,r2
  803ea0:	1827883a 	mov	r19,r3
  803ea4:	080a0600 	call	80a060 <__gtdf2>
  803ea8:	00834f16 	blt	zero,r2,804be8 <_dtoa_r+0x1278>
  803eac:	e0e0003c 	xorhi	r3,fp,32768
  803eb0:	9009883a 	mov	r4,r18
  803eb4:	980b883a 	mov	r5,r19
  803eb8:	180f883a 	mov	r7,r3
  803ebc:	b00d883a 	mov	r6,r22
  803ec0:	080a1700 	call	80a170 <__ltdf2>
  803ec4:	1000080e 	bge	r2,zero,803ee8 <_dtoa_r+0x578>
  803ec8:	0027883a 	mov	r19,zero
  803ecc:	0025883a 	mov	r18,zero
  803ed0:	d8802617 	ldw	r2,152(sp)
  803ed4:	df000517 	ldw	fp,20(sp)
  803ed8:	d8000615 	stw	zero,24(sp)
  803edc:	0084303a 	nor	r2,zero,r2
  803ee0:	d8800d15 	stw	r2,52(sp)
  803ee4:	00019b06 	br	804554 <_dtoa_r+0xbe4>
  803ee8:	d9801217 	ldw	r6,72(sp)
  803eec:	d8801317 	ldw	r2,76(sp)
  803ef0:	3029883a 	mov	r20,r6
  803ef4:	102b883a 	mov	r21,r2
  803ef8:	d8c00217 	ldw	r3,8(sp)
  803efc:	18008516 	blt	r3,zero,804114 <_dtoa_r+0x7a4>
  803f00:	d9000d17 	ldw	r4,52(sp)
  803f04:	00800384 	movi	r2,14
  803f08:	11008216 	blt	r2,r4,804114 <_dtoa_r+0x7a4>
  803f0c:	200490fa 	slli	r2,r4,3
  803f10:	d9802617 	ldw	r6,152(sp)
  803f14:	00c02074 	movhi	r3,129
  803f18:	18f51b04 	addi	r3,r3,-11156
  803f1c:	10c5883a 	add	r2,r2,r3
  803f20:	14800017 	ldw	r18,0(r2)
  803f24:	14c00117 	ldw	r19,4(r2)
  803f28:	30031e16 	blt	r6,zero,804ba4 <_dtoa_r+0x1234>
  803f2c:	d9000517 	ldw	r4,20(sp)
  803f30:	d8c00f17 	ldw	r3,60(sp)
  803f34:	a823883a 	mov	r17,r21
  803f38:	a021883a 	mov	r16,r20
  803f3c:	192b883a 	add	r21,r3,r4
  803f40:	2039883a 	mov	fp,r4
  803f44:	00000f06 	br	803f84 <_dtoa_r+0x614>
  803f48:	0005883a 	mov	r2,zero
  803f4c:	00d00934 	movhi	r3,16420
  803f50:	5009883a 	mov	r4,r10
  803f54:	580b883a 	mov	r5,r11
  803f58:	180f883a 	mov	r7,r3
  803f5c:	100d883a 	mov	r6,r2
  803f60:	0809b8c0 	call	809b8c <__muldf3>
  803f64:	180b883a 	mov	r5,r3
  803f68:	000d883a 	mov	r6,zero
  803f6c:	000f883a 	mov	r7,zero
  803f70:	1009883a 	mov	r4,r2
  803f74:	1021883a 	mov	r16,r2
  803f78:	1823883a 	mov	r17,r3
  803f7c:	0809fd80 	call	809fd8 <__nedf2>
  803f80:	10004526 	beq	r2,zero,804098 <_dtoa_r+0x728>
  803f84:	900d883a 	mov	r6,r18
  803f88:	980f883a 	mov	r7,r19
  803f8c:	8009883a 	mov	r4,r16
  803f90:	880b883a 	mov	r5,r17
  803f94:	0800a0c0 	call	800a0c <__divdf3>
  803f98:	180b883a 	mov	r5,r3
  803f9c:	1009883a 	mov	r4,r2
  803fa0:	080a2f00 	call	80a2f0 <__fixdfsi>
  803fa4:	1009883a 	mov	r4,r2
  803fa8:	1029883a 	mov	r20,r2
  803fac:	080a1f80 	call	80a1f8 <__floatsidf>
  803fb0:	180f883a 	mov	r7,r3
  803fb4:	9009883a 	mov	r4,r18
  803fb8:	980b883a 	mov	r5,r19
  803fbc:	100d883a 	mov	r6,r2
  803fc0:	0809b8c0 	call	809b8c <__muldf3>
  803fc4:	180f883a 	mov	r7,r3
  803fc8:	880b883a 	mov	r5,r17
  803fcc:	8009883a 	mov	r4,r16
  803fd0:	100d883a 	mov	r6,r2
  803fd4:	0809a980 	call	809a98 <__subdf3>
  803fd8:	1015883a 	mov	r10,r2
  803fdc:	a0800c04 	addi	r2,r20,48
  803fe0:	e0800005 	stb	r2,0(fp)
  803fe4:	e7000044 	addi	fp,fp,1
  803fe8:	1817883a 	mov	r11,r3
  803fec:	e57fd61e 	bne	fp,r21,803f48 <_dtoa_r+0x5d8>
  803ff0:	500d883a 	mov	r6,r10
  803ff4:	180f883a 	mov	r7,r3
  803ff8:	5009883a 	mov	r4,r10
  803ffc:	180b883a 	mov	r5,r3
  804000:	0809b180 	call	809b18 <__adddf3>
  804004:	100d883a 	mov	r6,r2
  804008:	9009883a 	mov	r4,r18
  80400c:	980b883a 	mov	r5,r19
  804010:	180f883a 	mov	r7,r3
  804014:	1021883a 	mov	r16,r2
  804018:	1823883a 	mov	r17,r3
  80401c:	080a1700 	call	80a170 <__ltdf2>
  804020:	10000816 	blt	r2,zero,804044 <_dtoa_r+0x6d4>
  804024:	980b883a 	mov	r5,r19
  804028:	800d883a 	mov	r6,r16
  80402c:	880f883a 	mov	r7,r17
  804030:	9009883a 	mov	r4,r18
  804034:	0809f500 	call	809f50 <__eqdf2>
  804038:	1000171e 	bne	r2,zero,804098 <_dtoa_r+0x728>
  80403c:	a080004c 	andi	r2,r20,1
  804040:	10001526 	beq	r2,zero,804098 <_dtoa_r+0x728>
  804044:	d8800d17 	ldw	r2,52(sp)
  804048:	d8800415 	stw	r2,16(sp)
  80404c:	e009883a 	mov	r4,fp
  804050:	213fffc4 	addi	r4,r4,-1
  804054:	20c00007 	ldb	r3,0(r4)
  804058:	00800e44 	movi	r2,57
  80405c:	1880081e 	bne	r3,r2,804080 <_dtoa_r+0x710>
  804060:	d8800517 	ldw	r2,20(sp)
  804064:	113ffa1e 	bne	r2,r4,804050 <_dtoa_r+0x6e0>
  804068:	d8c00417 	ldw	r3,16(sp)
  80406c:	d9800517 	ldw	r6,20(sp)
  804070:	00800c04 	movi	r2,48
  804074:	18c00044 	addi	r3,r3,1
  804078:	d8c00415 	stw	r3,16(sp)
  80407c:	30800005 	stb	r2,0(r6)
  804080:	20800003 	ldbu	r2,0(r4)
  804084:	d8c00417 	ldw	r3,16(sp)
  804088:	27000044 	addi	fp,r4,1
  80408c:	10800044 	addi	r2,r2,1
  804090:	d8c00d15 	stw	r3,52(sp)
  804094:	20800005 	stb	r2,0(r4)
  804098:	d9001617 	ldw	r4,88(sp)
  80409c:	d9400717 	ldw	r5,28(sp)
  8040a0:	0806b380 	call	806b38 <_Bfree>
  8040a4:	e0000005 	stb	zero,0(fp)
  8040a8:	d9800d17 	ldw	r6,52(sp)
  8040ac:	d8c02717 	ldw	r3,156(sp)
  8040b0:	d9002917 	ldw	r4,164(sp)
  8040b4:	30800044 	addi	r2,r6,1
  8040b8:	18800015 	stw	r2,0(r3)
  8040bc:	20029c26 	beq	r4,zero,804b30 <_dtoa_r+0x11c0>
  8040c0:	d8c00517 	ldw	r3,20(sp)
  8040c4:	27000015 	stw	fp,0(r4)
  8040c8:	003e5d06 	br	803a40 <_dtoa_r+0xd0>
  8040cc:	d9800d17 	ldw	r6,52(sp)
  8040d0:	00c02074 	movhi	r3,129
  8040d4:	18f51b04 	addi	r3,r3,-11156
  8040d8:	d9001217 	ldw	r4,72(sp)
  8040dc:	300490fa 	slli	r2,r6,3
  8040e0:	d9401317 	ldw	r5,76(sp)
  8040e4:	10c5883a 	add	r2,r2,r3
  8040e8:	12000017 	ldw	r8,0(r2)
  8040ec:	12400117 	ldw	r9,4(r2)
  8040f0:	400d883a 	mov	r6,r8
  8040f4:	480f883a 	mov	r7,r9
  8040f8:	080a1700 	call	80a170 <__ltdf2>
  8040fc:	1000030e 	bge	r2,zero,80410c <_dtoa_r+0x79c>
  804100:	d8800d17 	ldw	r2,52(sp)
  804104:	10bfffc4 	addi	r2,r2,-1
  804108:	d8800d15 	stw	r2,52(sp)
  80410c:	d8000c15 	stw	zero,48(sp)
  804110:	003ea806 	br	803bb4 <_dtoa_r+0x244>
  804114:	d9000b17 	ldw	r4,44(sp)
  804118:	202cc03a 	cmpne	r22,r4,zero
  80411c:	b000c71e 	bne	r22,zero,80443c <_dtoa_r+0xacc>
  804120:	dc001117 	ldw	r16,68(sp)
  804124:	dc801017 	ldw	r18,64(sp)
  804128:	0027883a 	mov	r19,zero
  80412c:	04000b0e 	bge	zero,r16,80415c <_dtoa_r+0x7ec>
  804130:	d8c00a17 	ldw	r3,40(sp)
  804134:	00c0090e 	bge	zero,r3,80415c <_dtoa_r+0x7ec>
  804138:	8005883a 	mov	r2,r16
  80413c:	1c011316 	blt	r3,r16,80458c <_dtoa_r+0xc1c>
  804140:	d9000a17 	ldw	r4,40(sp)
  804144:	d9801117 	ldw	r6,68(sp)
  804148:	80a1c83a 	sub	r16,r16,r2
  80414c:	2089c83a 	sub	r4,r4,r2
  804150:	308dc83a 	sub	r6,r6,r2
  804154:	d9000a15 	stw	r4,40(sp)
  804158:	d9801115 	stw	r6,68(sp)
  80415c:	d8801017 	ldw	r2,64(sp)
  804160:	0080150e 	bge	zero,r2,8041b8 <_dtoa_r+0x848>
  804164:	d8c00b17 	ldw	r3,44(sp)
  804168:	1805003a 	cmpeq	r2,r3,zero
  80416c:	1001c91e 	bne	r2,zero,804894 <_dtoa_r+0xf24>
  804170:	04800e0e 	bge	zero,r18,8041ac <_dtoa_r+0x83c>
  804174:	d9001617 	ldw	r4,88(sp)
  804178:	980b883a 	mov	r5,r19
  80417c:	900d883a 	mov	r6,r18
  804180:	08079840 	call	807984 <__pow5mult>
  804184:	d9001617 	ldw	r4,88(sp)
  804188:	d9800717 	ldw	r6,28(sp)
  80418c:	100b883a 	mov	r5,r2
  804190:	1027883a 	mov	r19,r2
  804194:	08075c80 	call	8075c8 <__multiply>
  804198:	d9001617 	ldw	r4,88(sp)
  80419c:	d9400717 	ldw	r5,28(sp)
  8041a0:	1023883a 	mov	r17,r2
  8041a4:	0806b380 	call	806b38 <_Bfree>
  8041a8:	dc400715 	stw	r17,28(sp)
  8041ac:	d9001017 	ldw	r4,64(sp)
  8041b0:	248dc83a 	sub	r6,r4,r18
  8041b4:	30010e1e 	bne	r6,zero,8045f0 <_dtoa_r+0xc80>
  8041b8:	d9001617 	ldw	r4,88(sp)
  8041bc:	04400044 	movi	r17,1
  8041c0:	880b883a 	mov	r5,r17
  8041c4:	080781c0 	call	80781c <__i2b>
  8041c8:	d9800917 	ldw	r6,36(sp)
  8041cc:	1025883a 	mov	r18,r2
  8041d0:	0180040e 	bge	zero,r6,8041e4 <_dtoa_r+0x874>
  8041d4:	d9001617 	ldw	r4,88(sp)
  8041d8:	100b883a 	mov	r5,r2
  8041dc:	08079840 	call	807984 <__pow5mult>
  8041e0:	1025883a 	mov	r18,r2
  8041e4:	d8801717 	ldw	r2,92(sp)
  8041e8:	8880f30e 	bge	r17,r2,8045b8 <_dtoa_r+0xc48>
  8041ec:	0023883a 	mov	r17,zero
  8041f0:	d9800917 	ldw	r6,36(sp)
  8041f4:	30019e1e 	bne	r6,zero,804870 <_dtoa_r+0xf00>
  8041f8:	00c00044 	movi	r3,1
  8041fc:	d9000a17 	ldw	r4,40(sp)
  804200:	20c5883a 	add	r2,r4,r3
  804204:	10c007cc 	andi	r3,r2,31
  804208:	1800841e 	bne	r3,zero,80441c <_dtoa_r+0xaac>
  80420c:	00800704 	movi	r2,28
  804210:	d9000a17 	ldw	r4,40(sp)
  804214:	d9801117 	ldw	r6,68(sp)
  804218:	80a1883a 	add	r16,r16,r2
  80421c:	2089883a 	add	r4,r4,r2
  804220:	308d883a 	add	r6,r6,r2
  804224:	d9000a15 	stw	r4,40(sp)
  804228:	d9801115 	stw	r6,68(sp)
  80422c:	d8801117 	ldw	r2,68(sp)
  804230:	0080050e 	bge	zero,r2,804248 <_dtoa_r+0x8d8>
  804234:	d9400717 	ldw	r5,28(sp)
  804238:	d9001617 	ldw	r4,88(sp)
  80423c:	100d883a 	mov	r6,r2
  804240:	080747c0 	call	80747c <__lshift>
  804244:	d8800715 	stw	r2,28(sp)
  804248:	d8c00a17 	ldw	r3,40(sp)
  80424c:	00c0050e 	bge	zero,r3,804264 <_dtoa_r+0x8f4>
  804250:	d9001617 	ldw	r4,88(sp)
  804254:	900b883a 	mov	r5,r18
  804258:	180d883a 	mov	r6,r3
  80425c:	080747c0 	call	80747c <__lshift>
  804260:	1025883a 	mov	r18,r2
  804264:	d9000c17 	ldw	r4,48(sp)
  804268:	2005003a 	cmpeq	r2,r4,zero
  80426c:	10016f26 	beq	r2,zero,80482c <_dtoa_r+0xebc>
  804270:	d9000f17 	ldw	r4,60(sp)
  804274:	0102170e 	bge	zero,r4,804ad4 <_dtoa_r+0x1164>
  804278:	d9800b17 	ldw	r6,44(sp)
  80427c:	3005003a 	cmpeq	r2,r6,zero
  804280:	1000881e 	bne	r2,zero,8044a4 <_dtoa_r+0xb34>
  804284:	0400050e 	bge	zero,r16,80429c <_dtoa_r+0x92c>
  804288:	d9001617 	ldw	r4,88(sp)
  80428c:	980b883a 	mov	r5,r19
  804290:	800d883a 	mov	r6,r16
  804294:	080747c0 	call	80747c <__lshift>
  804298:	1027883a 	mov	r19,r2
  80429c:	8804c03a 	cmpne	r2,r17,zero
  8042a0:	1002541e 	bne	r2,zero,804bf4 <_dtoa_r+0x1284>
  8042a4:	980b883a 	mov	r5,r19
  8042a8:	dd800517 	ldw	r22,20(sp)
  8042ac:	dcc00615 	stw	r19,24(sp)
  8042b0:	a700004c 	andi	fp,r20,1
  8042b4:	2827883a 	mov	r19,r5
  8042b8:	d9000717 	ldw	r4,28(sp)
  8042bc:	900b883a 	mov	r5,r18
  8042c0:	080372c0 	call	80372c <quorem>
  8042c4:	d9000717 	ldw	r4,28(sp)
  8042c8:	d9400617 	ldw	r5,24(sp)
  8042cc:	1023883a 	mov	r17,r2
  8042d0:	8dc00c04 	addi	r23,r17,48
  8042d4:	0806c940 	call	806c94 <__mcmp>
  8042d8:	d9001617 	ldw	r4,88(sp)
  8042dc:	900b883a 	mov	r5,r18
  8042e0:	980d883a 	mov	r6,r19
  8042e4:	1029883a 	mov	r20,r2
  8042e8:	08072f00 	call	8072f0 <__mdiff>
  8042ec:	102b883a 	mov	r21,r2
  8042f0:	10800317 	ldw	r2,12(r2)
  8042f4:	1001281e 	bne	r2,zero,804798 <_dtoa_r+0xe28>
  8042f8:	d9000717 	ldw	r4,28(sp)
  8042fc:	a80b883a 	mov	r5,r21
  804300:	0806c940 	call	806c94 <__mcmp>
  804304:	d9001617 	ldw	r4,88(sp)
  804308:	1021883a 	mov	r16,r2
  80430c:	a80b883a 	mov	r5,r21
  804310:	0806b380 	call	806b38 <_Bfree>
  804314:	8000041e 	bne	r16,zero,804328 <_dtoa_r+0x9b8>
  804318:	d8801717 	ldw	r2,92(sp)
  80431c:	1000021e 	bne	r2,zero,804328 <_dtoa_r+0x9b8>
  804320:	e004c03a 	cmpne	r2,fp,zero
  804324:	10011726 	beq	r2,zero,804784 <_dtoa_r+0xe14>
  804328:	a0010616 	blt	r20,zero,804744 <_dtoa_r+0xdd4>
  80432c:	a000041e 	bne	r20,zero,804340 <_dtoa_r+0x9d0>
  804330:	d8c01717 	ldw	r3,92(sp)
  804334:	1800021e 	bne	r3,zero,804340 <_dtoa_r+0x9d0>
  804338:	e004c03a 	cmpne	r2,fp,zero
  80433c:	10010126 	beq	r2,zero,804744 <_dtoa_r+0xdd4>
  804340:	04023d16 	blt	zero,r16,804c38 <_dtoa_r+0x12c8>
  804344:	b5c00005 	stb	r23,0(r22)
  804348:	d9800517 	ldw	r6,20(sp)
  80434c:	d9000f17 	ldw	r4,60(sp)
  804350:	b5800044 	addi	r22,r22,1
  804354:	3105883a 	add	r2,r6,r4
  804358:	b0806526 	beq	r22,r2,8044f0 <_dtoa_r+0xb80>
  80435c:	d9400717 	ldw	r5,28(sp)
  804360:	d9001617 	ldw	r4,88(sp)
  804364:	01800284 	movi	r6,10
  804368:	000f883a 	mov	r7,zero
  80436c:	08078580 	call	807858 <__multadd>
  804370:	d8800715 	stw	r2,28(sp)
  804374:	d8800617 	ldw	r2,24(sp)
  804378:	14c10c26 	beq	r2,r19,8047ac <_dtoa_r+0xe3c>
  80437c:	d9400617 	ldw	r5,24(sp)
  804380:	d9001617 	ldw	r4,88(sp)
  804384:	01800284 	movi	r6,10
  804388:	000f883a 	mov	r7,zero
  80438c:	08078580 	call	807858 <__multadd>
  804390:	d9001617 	ldw	r4,88(sp)
  804394:	980b883a 	mov	r5,r19
  804398:	01800284 	movi	r6,10
  80439c:	000f883a 	mov	r7,zero
  8043a0:	d8800615 	stw	r2,24(sp)
  8043a4:	08078580 	call	807858 <__multadd>
  8043a8:	1027883a 	mov	r19,r2
  8043ac:	003fc206 	br	8042b8 <_dtoa_r+0x948>
  8043b0:	2445c83a 	sub	r2,r4,r17
  8043b4:	a088983a 	sll	r4,r20,r2
  8043b8:	003e4b06 	br	803ce8 <_dtoa_r+0x378>
  8043bc:	01bfffc4 	movi	r6,-1
  8043c0:	00800044 	movi	r2,1
  8043c4:	d9800e15 	stw	r6,56(sp)
  8043c8:	d9800f15 	stw	r6,60(sp)
  8043cc:	d8800b15 	stw	r2,44(sp)
  8043d0:	d8c01617 	ldw	r3,88(sp)
  8043d4:	008005c4 	movi	r2,23
  8043d8:	18001115 	stw	zero,68(r3)
  8043dc:	1580082e 	bgeu	r2,r22,804400 <_dtoa_r+0xa90>
  8043e0:	00c00104 	movi	r3,4
  8043e4:	0009883a 	mov	r4,zero
  8043e8:	18c7883a 	add	r3,r3,r3
  8043ec:	18800504 	addi	r2,r3,20
  8043f0:	21000044 	addi	r4,r4,1
  8043f4:	b0bffc2e 	bgeu	r22,r2,8043e8 <_dtoa_r+0xa78>
  8043f8:	d9801617 	ldw	r6,88(sp)
  8043fc:	31001115 	stw	r4,68(r6)
  804400:	dc000f17 	ldw	r16,60(sp)
  804404:	003e4b06 	br	803d34 <_dtoa_r+0x3c4>
  804408:	d9801717 	ldw	r6,92(sp)
  80440c:	0023883a 	mov	r17,zero
  804410:	31bfff04 	addi	r6,r6,-4
  804414:	d9801715 	stw	r6,92(sp)
  804418:	003df806 	br	803bfc <_dtoa_r+0x28c>
  80441c:	00800804 	movi	r2,32
  804420:	10c9c83a 	sub	r4,r2,r3
  804424:	00c00104 	movi	r3,4
  804428:	19005a16 	blt	r3,r4,804594 <_dtoa_r+0xc24>
  80442c:	008000c4 	movi	r2,3
  804430:	113f7e16 	blt	r2,r4,80422c <_dtoa_r+0x8bc>
  804434:	20800704 	addi	r2,r4,28
  804438:	003f7506 	br	804210 <_dtoa_r+0x8a0>
  80443c:	d9801717 	ldw	r6,92(sp)
  804440:	00800044 	movi	r2,1
  804444:	1180a10e 	bge	r2,r6,8046cc <_dtoa_r+0xd5c>
  804448:	d9800f17 	ldw	r6,60(sp)
  80444c:	d8c01017 	ldw	r3,64(sp)
  804450:	30bfffc4 	addi	r2,r6,-1
  804454:	1881c616 	blt	r3,r2,804b70 <_dtoa_r+0x1200>
  804458:	18a5c83a 	sub	r18,r3,r2
  80445c:	d8800f17 	ldw	r2,60(sp)
  804460:	10026216 	blt	r2,zero,804dec <_dtoa_r+0x147c>
  804464:	dc001117 	ldw	r16,68(sp)
  804468:	1007883a 	mov	r3,r2
  80446c:	d9800a17 	ldw	r6,40(sp)
  804470:	d8801117 	ldw	r2,68(sp)
  804474:	d9001617 	ldw	r4,88(sp)
  804478:	30cd883a 	add	r6,r6,r3
  80447c:	10c5883a 	add	r2,r2,r3
  804480:	01400044 	movi	r5,1
  804484:	d9800a15 	stw	r6,40(sp)
  804488:	d8801115 	stw	r2,68(sp)
  80448c:	080781c0 	call	80781c <__i2b>
  804490:	1027883a 	mov	r19,r2
  804494:	003f2506 	br	80412c <_dtoa_r+0x7bc>
  804498:	00c02074 	movhi	r3,129
  80449c:	18f4fd04 	addi	r3,r3,-11276
  8044a0:	003d6706 	br	803a40 <_dtoa_r+0xd0>
  8044a4:	dd800517 	ldw	r22,20(sp)
  8044a8:	04000044 	movi	r16,1
  8044ac:	00000706 	br	8044cc <_dtoa_r+0xb5c>
  8044b0:	d9400717 	ldw	r5,28(sp)
  8044b4:	d9001617 	ldw	r4,88(sp)
  8044b8:	01800284 	movi	r6,10
  8044bc:	000f883a 	mov	r7,zero
  8044c0:	08078580 	call	807858 <__multadd>
  8044c4:	d8800715 	stw	r2,28(sp)
  8044c8:	84000044 	addi	r16,r16,1
  8044cc:	d9000717 	ldw	r4,28(sp)
  8044d0:	900b883a 	mov	r5,r18
  8044d4:	080372c0 	call	80372c <quorem>
  8044d8:	15c00c04 	addi	r23,r2,48
  8044dc:	b5c00005 	stb	r23,0(r22)
  8044e0:	d8c00f17 	ldw	r3,60(sp)
  8044e4:	b5800044 	addi	r22,r22,1
  8044e8:	80fff116 	blt	r16,r3,8044b0 <_dtoa_r+0xb40>
  8044ec:	d8000615 	stw	zero,24(sp)
  8044f0:	d9400717 	ldw	r5,28(sp)
  8044f4:	d9001617 	ldw	r4,88(sp)
  8044f8:	01800044 	movi	r6,1
  8044fc:	080747c0 	call	80747c <__lshift>
  804500:	1009883a 	mov	r4,r2
  804504:	900b883a 	mov	r5,r18
  804508:	d8800715 	stw	r2,28(sp)
  80450c:	0806c940 	call	806c94 <__mcmp>
  804510:	00803c0e 	bge	zero,r2,804604 <_dtoa_r+0xc94>
  804514:	b009883a 	mov	r4,r22
  804518:	213fffc4 	addi	r4,r4,-1
  80451c:	21400003 	ldbu	r5,0(r4)
  804520:	00800e44 	movi	r2,57
  804524:	28c03fcc 	andi	r3,r5,255
  804528:	18c0201c 	xori	r3,r3,128
  80452c:	18ffe004 	addi	r3,r3,-128
  804530:	1881981e 	bne	r3,r2,804b94 <_dtoa_r+0x1224>
  804534:	d9800517 	ldw	r6,20(sp)
  804538:	21bff71e 	bne	r4,r6,804518 <_dtoa_r+0xba8>
  80453c:	d8800d17 	ldw	r2,52(sp)
  804540:	37000044 	addi	fp,r6,1
  804544:	10800044 	addi	r2,r2,1
  804548:	d8800d15 	stw	r2,52(sp)
  80454c:	00800c44 	movi	r2,49
  804550:	30800005 	stb	r2,0(r6)
  804554:	d9001617 	ldw	r4,88(sp)
  804558:	900b883a 	mov	r5,r18
  80455c:	0806b380 	call	806b38 <_Bfree>
  804560:	983ecd26 	beq	r19,zero,804098 <_dtoa_r+0x728>
  804564:	d8c00617 	ldw	r3,24(sp)
  804568:	18000426 	beq	r3,zero,80457c <_dtoa_r+0xc0c>
  80456c:	1cc00326 	beq	r3,r19,80457c <_dtoa_r+0xc0c>
  804570:	d9001617 	ldw	r4,88(sp)
  804574:	180b883a 	mov	r5,r3
  804578:	0806b380 	call	806b38 <_Bfree>
  80457c:	d9001617 	ldw	r4,88(sp)
  804580:	980b883a 	mov	r5,r19
  804584:	0806b380 	call	806b38 <_Bfree>
  804588:	003ec306 	br	804098 <_dtoa_r+0x728>
  80458c:	1805883a 	mov	r2,r3
  804590:	003eeb06 	br	804140 <_dtoa_r+0x7d0>
  804594:	d9800a17 	ldw	r6,40(sp)
  804598:	d8c01117 	ldw	r3,68(sp)
  80459c:	20bfff04 	addi	r2,r4,-4
  8045a0:	308d883a 	add	r6,r6,r2
  8045a4:	1887883a 	add	r3,r3,r2
  8045a8:	80a1883a 	add	r16,r16,r2
  8045ac:	d9800a15 	stw	r6,40(sp)
  8045b0:	d8c01115 	stw	r3,68(sp)
  8045b4:	003f1d06 	br	80422c <_dtoa_r+0x8bc>
  8045b8:	a03f0c1e 	bne	r20,zero,8041ec <_dtoa_r+0x87c>
  8045bc:	00800434 	movhi	r2,16
  8045c0:	10bfffc4 	addi	r2,r2,-1
  8045c4:	a884703a 	and	r2,r21,r2
  8045c8:	103f081e 	bne	r2,zero,8041ec <_dtoa_r+0x87c>
  8045cc:	a89ffc2c 	andhi	r2,r21,32752
  8045d0:	103f0626 	beq	r2,zero,8041ec <_dtoa_r+0x87c>
  8045d4:	d8c01117 	ldw	r3,68(sp)
  8045d8:	d9000a17 	ldw	r4,40(sp)
  8045dc:	18c00044 	addi	r3,r3,1
  8045e0:	21000044 	addi	r4,r4,1
  8045e4:	d8c01115 	stw	r3,68(sp)
  8045e8:	d9000a15 	stw	r4,40(sp)
  8045ec:	003f0006 	br	8041f0 <_dtoa_r+0x880>
  8045f0:	d9400717 	ldw	r5,28(sp)
  8045f4:	d9001617 	ldw	r4,88(sp)
  8045f8:	08079840 	call	807984 <__pow5mult>
  8045fc:	d8800715 	stw	r2,28(sp)
  804600:	003eed06 	br	8041b8 <_dtoa_r+0x848>
  804604:	1000021e 	bne	r2,zero,804610 <_dtoa_r+0xca0>
  804608:	b880004c 	andi	r2,r23,1
  80460c:	103fc11e 	bne	r2,zero,804514 <_dtoa_r+0xba4>
  804610:	b5bfffc4 	addi	r22,r22,-1
  804614:	b0c00007 	ldb	r3,0(r22)
  804618:	00800c04 	movi	r2,48
  80461c:	18bffc26 	beq	r3,r2,804610 <_dtoa_r+0xca0>
  804620:	b7000044 	addi	fp,r22,1
  804624:	003fcb06 	br	804554 <_dtoa_r+0xbe4>
  804628:	d9800d17 	ldw	r6,52(sp)
  80462c:	018fc83a 	sub	r7,zero,r6
  804630:	3801f726 	beq	r7,zero,804e10 <_dtoa_r+0x14a0>
  804634:	398003cc 	andi	r6,r7,15
  804638:	300c90fa 	slli	r6,r6,3
  80463c:	01402074 	movhi	r5,129
  804640:	29751b04 	addi	r5,r5,-11156
  804644:	d9001217 	ldw	r4,72(sp)
  804648:	314d883a 	add	r6,r6,r5
  80464c:	30c00117 	ldw	r3,4(r6)
  804650:	30800017 	ldw	r2,0(r6)
  804654:	d9401317 	ldw	r5,76(sp)
  804658:	3821d13a 	srai	r16,r7,4
  80465c:	100d883a 	mov	r6,r2
  804660:	180f883a 	mov	r7,r3
  804664:	0809b8c0 	call	809b8c <__muldf3>
  804668:	1011883a 	mov	r8,r2
  80466c:	1813883a 	mov	r9,r3
  804670:	1029883a 	mov	r20,r2
  804674:	182b883a 	mov	r21,r3
  804678:	8001e526 	beq	r16,zero,804e10 <_dtoa_r+0x14a0>
  80467c:	05800084 	movi	r22,2
  804680:	04402074 	movhi	r17,129
  804684:	8c754d04 	addi	r17,r17,-10956
  804688:	8080004c 	andi	r2,r16,1
  80468c:	1005003a 	cmpeq	r2,r2,zero
  804690:	1000081e 	bne	r2,zero,8046b4 <_dtoa_r+0xd44>
  804694:	89800017 	ldw	r6,0(r17)
  804698:	89c00117 	ldw	r7,4(r17)
  80469c:	480b883a 	mov	r5,r9
  8046a0:	4009883a 	mov	r4,r8
  8046a4:	0809b8c0 	call	809b8c <__muldf3>
  8046a8:	1011883a 	mov	r8,r2
  8046ac:	b5800044 	addi	r22,r22,1
  8046b0:	1813883a 	mov	r9,r3
  8046b4:	8021d07a 	srai	r16,r16,1
  8046b8:	8c400204 	addi	r17,r17,8
  8046bc:	803ff21e 	bne	r16,zero,804688 <_dtoa_r+0xd18>
  8046c0:	4029883a 	mov	r20,r8
  8046c4:	482b883a 	mov	r21,r9
  8046c8:	003dca06 	br	803df4 <_dtoa_r+0x484>
  8046cc:	d9000817 	ldw	r4,32(sp)
  8046d0:	2005003a 	cmpeq	r2,r4,zero
  8046d4:	1001f61e 	bne	r2,zero,804eb0 <_dtoa_r+0x1540>
  8046d8:	dc001117 	ldw	r16,68(sp)
  8046dc:	dc801017 	ldw	r18,64(sp)
  8046e0:	18c10cc4 	addi	r3,r3,1075
  8046e4:	003f6106 	br	80446c <_dtoa_r+0xafc>
  8046e8:	d8000b15 	stw	zero,44(sp)
  8046ec:	d9802617 	ldw	r6,152(sp)
  8046f0:	d8c00d17 	ldw	r3,52(sp)
  8046f4:	30800044 	addi	r2,r6,1
  8046f8:	18ad883a 	add	r22,r3,r2
  8046fc:	b13fffc4 	addi	r4,r22,-1
  804700:	d9000e15 	stw	r4,56(sp)
  804704:	0581f60e 	bge	zero,r22,804ee0 <_dtoa_r+0x1570>
  804708:	dd800f15 	stw	r22,60(sp)
  80470c:	003f3006 	br	8043d0 <_dtoa_r+0xa60>
  804710:	d8000b15 	stw	zero,44(sp)
  804714:	d9002617 	ldw	r4,152(sp)
  804718:	0101eb0e 	bge	zero,r4,804ec8 <_dtoa_r+0x1558>
  80471c:	202d883a 	mov	r22,r4
  804720:	d9000e15 	stw	r4,56(sp)
  804724:	d9000f15 	stw	r4,60(sp)
  804728:	003f2906 	br	8043d0 <_dtoa_r+0xa60>
  80472c:	01800044 	movi	r6,1
  804730:	d9800b15 	stw	r6,44(sp)
  804734:	003ff706 	br	804714 <_dtoa_r+0xda4>
  804738:	01000044 	movi	r4,1
  80473c:	d9000b15 	stw	r4,44(sp)
  804740:	003fea06 	br	8046ec <_dtoa_r+0xd7c>
  804744:	04000c0e 	bge	zero,r16,804778 <_dtoa_r+0xe08>
  804748:	d9400717 	ldw	r5,28(sp)
  80474c:	d9001617 	ldw	r4,88(sp)
  804750:	01800044 	movi	r6,1
  804754:	080747c0 	call	80747c <__lshift>
  804758:	1009883a 	mov	r4,r2
  80475c:	900b883a 	mov	r5,r18
  804760:	d8800715 	stw	r2,28(sp)
  804764:	0806c940 	call	806c94 <__mcmp>
  804768:	0081e00e 	bge	zero,r2,804eec <_dtoa_r+0x157c>
  80476c:	bdc00044 	addi	r23,r23,1
  804770:	00800e84 	movi	r2,58
  804774:	b881a226 	beq	r23,r2,804e00 <_dtoa_r+0x1490>
  804778:	b7000044 	addi	fp,r22,1
  80477c:	b5c00005 	stb	r23,0(r22)
  804780:	003f7406 	br	804554 <_dtoa_r+0xbe4>
  804784:	00800e44 	movi	r2,57
  804788:	b8819d26 	beq	r23,r2,804e00 <_dtoa_r+0x1490>
  80478c:	053ffa0e 	bge	zero,r20,804778 <_dtoa_r+0xe08>
  804790:	8dc00c44 	addi	r23,r17,49
  804794:	003ff806 	br	804778 <_dtoa_r+0xe08>
  804798:	d9001617 	ldw	r4,88(sp)
  80479c:	a80b883a 	mov	r5,r21
  8047a0:	04000044 	movi	r16,1
  8047a4:	0806b380 	call	806b38 <_Bfree>
  8047a8:	003edf06 	br	804328 <_dtoa_r+0x9b8>
  8047ac:	d9001617 	ldw	r4,88(sp)
  8047b0:	980b883a 	mov	r5,r19
  8047b4:	01800284 	movi	r6,10
  8047b8:	000f883a 	mov	r7,zero
  8047bc:	08078580 	call	807858 <__multadd>
  8047c0:	1027883a 	mov	r19,r2
  8047c4:	d8800615 	stw	r2,24(sp)
  8047c8:	003ebb06 	br	8042b8 <_dtoa_r+0x948>
  8047cc:	d9801117 	ldw	r6,68(sp)
  8047d0:	d8800d17 	ldw	r2,52(sp)
  8047d4:	d8000915 	stw	zero,36(sp)
  8047d8:	308dc83a 	sub	r6,r6,r2
  8047dc:	0087c83a 	sub	r3,zero,r2
  8047e0:	d9801115 	stw	r6,68(sp)
  8047e4:	d8c01015 	stw	r3,64(sp)
  8047e8:	003cfe06 	br	803be4 <_dtoa_r+0x274>
  8047ec:	018dc83a 	sub	r6,zero,r6
  8047f0:	d9801115 	stw	r6,68(sp)
  8047f4:	d8000a15 	stw	zero,40(sp)
  8047f8:	003cf306 	br	803bc8 <_dtoa_r+0x258>
  8047fc:	d9000d17 	ldw	r4,52(sp)
  804800:	080a1f80 	call	80a1f8 <__floatsidf>
  804804:	880b883a 	mov	r5,r17
  804808:	8009883a 	mov	r4,r16
  80480c:	180f883a 	mov	r7,r3
  804810:	100d883a 	mov	r6,r2
  804814:	0809fd80 	call	809fd8 <__nedf2>
  804818:	103ce126 	beq	r2,zero,803ba0 <_dtoa_r+0x230>
  80481c:	d9800d17 	ldw	r6,52(sp)
  804820:	31bfffc4 	addi	r6,r6,-1
  804824:	d9800d15 	stw	r6,52(sp)
  804828:	003cdd06 	br	803ba0 <_dtoa_r+0x230>
  80482c:	d9000717 	ldw	r4,28(sp)
  804830:	900b883a 	mov	r5,r18
  804834:	0806c940 	call	806c94 <__mcmp>
  804838:	103e8d0e 	bge	r2,zero,804270 <_dtoa_r+0x900>
  80483c:	d9400717 	ldw	r5,28(sp)
  804840:	d9001617 	ldw	r4,88(sp)
  804844:	01800284 	movi	r6,10
  804848:	000f883a 	mov	r7,zero
  80484c:	08078580 	call	807858 <__multadd>
  804850:	d9800d17 	ldw	r6,52(sp)
  804854:	d8800715 	stw	r2,28(sp)
  804858:	31bfffc4 	addi	r6,r6,-1
  80485c:	d9800d15 	stw	r6,52(sp)
  804860:	b001a71e 	bne	r22,zero,804f00 <_dtoa_r+0x1590>
  804864:	d8800e17 	ldw	r2,56(sp)
  804868:	d8800f15 	stw	r2,60(sp)
  80486c:	003e8006 	br	804270 <_dtoa_r+0x900>
  804870:	90800417 	ldw	r2,16(r18)
  804874:	1085883a 	add	r2,r2,r2
  804878:	1085883a 	add	r2,r2,r2
  80487c:	1485883a 	add	r2,r2,r18
  804880:	11000417 	ldw	r4,16(r2)
  804884:	0806b600 	call	806b60 <__hi0bits>
  804888:	00c00804 	movi	r3,32
  80488c:	1887c83a 	sub	r3,r3,r2
  804890:	003e5a06 	br	8041fc <_dtoa_r+0x88c>
  804894:	d9400717 	ldw	r5,28(sp)
  804898:	d9801017 	ldw	r6,64(sp)
  80489c:	d9001617 	ldw	r4,88(sp)
  8048a0:	08079840 	call	807984 <__pow5mult>
  8048a4:	d8800715 	stw	r2,28(sp)
  8048a8:	003e4306 	br	8041b8 <_dtoa_r+0x848>
  8048ac:	d9800f17 	ldw	r6,60(sp)
  8048b0:	d8800d17 	ldw	r2,52(sp)
  8048b4:	d9800315 	stw	r6,12(sp)
  8048b8:	d8800415 	stw	r2,16(sp)
  8048bc:	d8c00b17 	ldw	r3,44(sp)
  8048c0:	1805003a 	cmpeq	r2,r3,zero
  8048c4:	1000e21e 	bne	r2,zero,804c50 <_dtoa_r+0x12e0>
  8048c8:	d9000317 	ldw	r4,12(sp)
  8048cc:	0005883a 	mov	r2,zero
  8048d0:	00cff834 	movhi	r3,16352
  8048d4:	200c90fa 	slli	r6,r4,3
  8048d8:	01002074 	movhi	r4,129
  8048dc:	21351b04 	addi	r4,r4,-11156
  8048e0:	180b883a 	mov	r5,r3
  8048e4:	310d883a 	add	r6,r6,r4
  8048e8:	327fff17 	ldw	r9,-4(r6)
  8048ec:	323ffe17 	ldw	r8,-8(r6)
  8048f0:	1009883a 	mov	r4,r2
  8048f4:	480f883a 	mov	r7,r9
  8048f8:	400d883a 	mov	r6,r8
  8048fc:	0800a0c0 	call	800a0c <__divdf3>
  804900:	180b883a 	mov	r5,r3
  804904:	b00d883a 	mov	r6,r22
  804908:	b80f883a 	mov	r7,r23
  80490c:	1009883a 	mov	r4,r2
  804910:	0809a980 	call	809a98 <__subdf3>
  804914:	a80b883a 	mov	r5,r21
  804918:	a009883a 	mov	r4,r20
  80491c:	d8c01915 	stw	r3,100(sp)
  804920:	d8801815 	stw	r2,96(sp)
  804924:	080a2f00 	call	80a2f0 <__fixdfsi>
  804928:	1009883a 	mov	r4,r2
  80492c:	1027883a 	mov	r19,r2
  804930:	080a1f80 	call	80a1f8 <__floatsidf>
  804934:	a80b883a 	mov	r5,r21
  804938:	a009883a 	mov	r4,r20
  80493c:	180f883a 	mov	r7,r3
  804940:	100d883a 	mov	r6,r2
  804944:	0809a980 	call	809a98 <__subdf3>
  804948:	d9801817 	ldw	r6,96(sp)
  80494c:	1823883a 	mov	r17,r3
  804950:	d8801415 	stw	r2,80(sp)
  804954:	302d883a 	mov	r22,r6
  804958:	d9800517 	ldw	r6,20(sp)
  80495c:	9cc00c04 	addi	r19,r19,48
  804960:	dc401515 	stw	r17,84(sp)
  804964:	d8c01917 	ldw	r3,100(sp)
  804968:	34c00005 	stb	r19,0(r6)
  80496c:	d8800517 	ldw	r2,20(sp)
  804970:	d9401917 	ldw	r5,100(sp)
  804974:	d9801417 	ldw	r6,80(sp)
  804978:	b009883a 	mov	r4,r22
  80497c:	880f883a 	mov	r7,r17
  804980:	182f883a 	mov	r23,r3
  804984:	17000044 	addi	fp,r2,1
  804988:	080a0600 	call	80a060 <__gtdf2>
  80498c:	00804e16 	blt	zero,r2,804ac8 <_dtoa_r+0x1158>
  804990:	d9801417 	ldw	r6,80(sp)
  804994:	0005883a 	mov	r2,zero
  804998:	00cffc34 	movhi	r3,16368
  80499c:	180b883a 	mov	r5,r3
  8049a0:	880f883a 	mov	r7,r17
  8049a4:	1009883a 	mov	r4,r2
  8049a8:	0809a980 	call	809a98 <__subdf3>
  8049ac:	d9401917 	ldw	r5,100(sp)
  8049b0:	180f883a 	mov	r7,r3
  8049b4:	b009883a 	mov	r4,r22
  8049b8:	100d883a 	mov	r6,r2
  8049bc:	080a0600 	call	80a060 <__gtdf2>
  8049c0:	00bda216 	blt	zero,r2,80404c <_dtoa_r+0x6dc>
  8049c4:	d8c00317 	ldw	r3,12(sp)
  8049c8:	00800044 	movi	r2,1
  8049cc:	10c01216 	blt	r2,r3,804a18 <_dtoa_r+0x10a8>
  8049d0:	003d4506 	br	803ee8 <_dtoa_r+0x578>
  8049d4:	d9801417 	ldw	r6,80(sp)
  8049d8:	0005883a 	mov	r2,zero
  8049dc:	00cffc34 	movhi	r3,16368
  8049e0:	180b883a 	mov	r5,r3
  8049e4:	880f883a 	mov	r7,r17
  8049e8:	1009883a 	mov	r4,r2
  8049ec:	0809a980 	call	809a98 <__subdf3>
  8049f0:	d9c01b17 	ldw	r7,108(sp)
  8049f4:	180b883a 	mov	r5,r3
  8049f8:	1009883a 	mov	r4,r2
  8049fc:	b00d883a 	mov	r6,r22
  804a00:	080a1700 	call	80a170 <__ltdf2>
  804a04:	103d9116 	blt	r2,zero,80404c <_dtoa_r+0x6dc>
  804a08:	d9800517 	ldw	r6,20(sp)
  804a0c:	d9000317 	ldw	r4,12(sp)
  804a10:	3105883a 	add	r2,r6,r4
  804a14:	e0bd3426 	beq	fp,r2,803ee8 <_dtoa_r+0x578>
  804a18:	04500934 	movhi	r17,16420
  804a1c:	0021883a 	mov	r16,zero
  804a20:	b80b883a 	mov	r5,r23
  804a24:	b009883a 	mov	r4,r22
  804a28:	800d883a 	mov	r6,r16
  804a2c:	880f883a 	mov	r7,r17
  804a30:	0809b8c0 	call	809b8c <__muldf3>
  804a34:	d9401517 	ldw	r5,84(sp)
  804a38:	d9001417 	ldw	r4,80(sp)
  804a3c:	880f883a 	mov	r7,r17
  804a40:	000d883a 	mov	r6,zero
  804a44:	d8801a15 	stw	r2,104(sp)
  804a48:	d8c01b15 	stw	r3,108(sp)
  804a4c:	0809b8c0 	call	809b8c <__muldf3>
  804a50:	180b883a 	mov	r5,r3
  804a54:	1009883a 	mov	r4,r2
  804a58:	1823883a 	mov	r17,r3
  804a5c:	1021883a 	mov	r16,r2
  804a60:	080a2f00 	call	80a2f0 <__fixdfsi>
  804a64:	1009883a 	mov	r4,r2
  804a68:	102b883a 	mov	r21,r2
  804a6c:	080a1f80 	call	80a1f8 <__floatsidf>
  804a70:	880b883a 	mov	r5,r17
  804a74:	8009883a 	mov	r4,r16
  804a78:	180f883a 	mov	r7,r3
  804a7c:	100d883a 	mov	r6,r2
  804a80:	0809a980 	call	809a98 <__subdf3>
  804a84:	1021883a 	mov	r16,r2
  804a88:	d9001b17 	ldw	r4,108(sp)
  804a8c:	1823883a 	mov	r17,r3
  804a90:	dc001415 	stw	r16,80(sp)
  804a94:	ad400c04 	addi	r21,r21,48
  804a98:	dc401515 	stw	r17,84(sp)
  804a9c:	d8801a17 	ldw	r2,104(sp)
  804aa0:	e5400005 	stb	r21,0(fp)
  804aa4:	202f883a 	mov	r23,r4
  804aa8:	d9c01b17 	ldw	r7,108(sp)
  804aac:	d9001417 	ldw	r4,80(sp)
  804ab0:	880b883a 	mov	r5,r17
  804ab4:	100d883a 	mov	r6,r2
  804ab8:	102d883a 	mov	r22,r2
  804abc:	e7000044 	addi	fp,fp,1
  804ac0:	080a1700 	call	80a170 <__ltdf2>
  804ac4:	103fc30e 	bge	r2,zero,8049d4 <_dtoa_r+0x1064>
  804ac8:	d9000417 	ldw	r4,16(sp)
  804acc:	d9000d15 	stw	r4,52(sp)
  804ad0:	003d7106 	br	804098 <_dtoa_r+0x728>
  804ad4:	d9801717 	ldw	r6,92(sp)
  804ad8:	00800084 	movi	r2,2
  804adc:	11bde60e 	bge	r2,r6,804278 <_dtoa_r+0x908>
  804ae0:	203cfb1e 	bne	r4,zero,803ed0 <_dtoa_r+0x560>
  804ae4:	d9001617 	ldw	r4,88(sp)
  804ae8:	900b883a 	mov	r5,r18
  804aec:	01800144 	movi	r6,5
  804af0:	000f883a 	mov	r7,zero
  804af4:	08078580 	call	807858 <__multadd>
  804af8:	d9000717 	ldw	r4,28(sp)
  804afc:	100b883a 	mov	r5,r2
  804b00:	1025883a 	mov	r18,r2
  804b04:	0806c940 	call	806c94 <__mcmp>
  804b08:	00bcf10e 	bge	zero,r2,803ed0 <_dtoa_r+0x560>
  804b0c:	d8c00d17 	ldw	r3,52(sp)
  804b10:	d9000517 	ldw	r4,20(sp)
  804b14:	d8000615 	stw	zero,24(sp)
  804b18:	18c00044 	addi	r3,r3,1
  804b1c:	d8c00d15 	stw	r3,52(sp)
  804b20:	00800c44 	movi	r2,49
  804b24:	27000044 	addi	fp,r4,1
  804b28:	20800005 	stb	r2,0(r4)
  804b2c:	003e8906 	br	804554 <_dtoa_r+0xbe4>
  804b30:	d8c00517 	ldw	r3,20(sp)
  804b34:	003bc206 	br	803a40 <_dtoa_r+0xd0>
  804b38:	01802074 	movhi	r6,129
  804b3c:	31b54d04 	addi	r6,r6,-10956
  804b40:	30c00917 	ldw	r3,36(r6)
  804b44:	30800817 	ldw	r2,32(r6)
  804b48:	d9001217 	ldw	r4,72(sp)
  804b4c:	d9401317 	ldw	r5,76(sp)
  804b50:	180f883a 	mov	r7,r3
  804b54:	100d883a 	mov	r6,r2
  804b58:	0800a0c0 	call	800a0c <__divdf3>
  804b5c:	948003cc 	andi	r18,r18,15
  804b60:	058000c4 	movi	r22,3
  804b64:	1029883a 	mov	r20,r2
  804b68:	182b883a 	mov	r21,r3
  804b6c:	003c8906 	br	803d94 <_dtoa_r+0x424>
  804b70:	d9001017 	ldw	r4,64(sp)
  804b74:	d9800917 	ldw	r6,36(sp)
  804b78:	0025883a 	mov	r18,zero
  804b7c:	1105c83a 	sub	r2,r2,r4
  804b80:	2089883a 	add	r4,r4,r2
  804b84:	308d883a 	add	r6,r6,r2
  804b88:	d9001015 	stw	r4,64(sp)
  804b8c:	d9800915 	stw	r6,36(sp)
  804b90:	003e3206 	br	80445c <_dtoa_r+0xaec>
  804b94:	28800044 	addi	r2,r5,1
  804b98:	27000044 	addi	fp,r4,1
  804b9c:	20800005 	stb	r2,0(r4)
  804ba0:	003e6c06 	br	804554 <_dtoa_r+0xbe4>
  804ba4:	d8800f17 	ldw	r2,60(sp)
  804ba8:	00bce016 	blt	zero,r2,803f2c <_dtoa_r+0x5bc>
  804bac:	d9800f17 	ldw	r6,60(sp)
  804bb0:	303cc51e 	bne	r6,zero,803ec8 <_dtoa_r+0x558>
  804bb4:	0005883a 	mov	r2,zero
  804bb8:	00d00534 	movhi	r3,16404
  804bbc:	980b883a 	mov	r5,r19
  804bc0:	180f883a 	mov	r7,r3
  804bc4:	9009883a 	mov	r4,r18
  804bc8:	100d883a 	mov	r6,r2
  804bcc:	0809b8c0 	call	809b8c <__muldf3>
  804bd0:	180b883a 	mov	r5,r3
  804bd4:	a80f883a 	mov	r7,r21
  804bd8:	1009883a 	mov	r4,r2
  804bdc:	a00d883a 	mov	r6,r20
  804be0:	080a0e80 	call	80a0e8 <__gedf2>
  804be4:	103cb80e 	bge	r2,zero,803ec8 <_dtoa_r+0x558>
  804be8:	0027883a 	mov	r19,zero
  804bec:	0025883a 	mov	r18,zero
  804bf0:	003fc606 	br	804b0c <_dtoa_r+0x119c>
  804bf4:	99400117 	ldw	r5,4(r19)
  804bf8:	d9001617 	ldw	r4,88(sp)
  804bfc:	08070b80 	call	8070b8 <_Balloc>
  804c00:	99800417 	ldw	r6,16(r19)
  804c04:	11000304 	addi	r4,r2,12
  804c08:	99400304 	addi	r5,r19,12
  804c0c:	318d883a 	add	r6,r6,r6
  804c10:	318d883a 	add	r6,r6,r6
  804c14:	31800204 	addi	r6,r6,8
  804c18:	1023883a 	mov	r17,r2
  804c1c:	08069200 	call	806920 <memcpy>
  804c20:	d9001617 	ldw	r4,88(sp)
  804c24:	880b883a 	mov	r5,r17
  804c28:	01800044 	movi	r6,1
  804c2c:	080747c0 	call	80747c <__lshift>
  804c30:	100b883a 	mov	r5,r2
  804c34:	003d9c06 	br	8042a8 <_dtoa_r+0x938>
  804c38:	00800e44 	movi	r2,57
  804c3c:	b8807026 	beq	r23,r2,804e00 <_dtoa_r+0x1490>
  804c40:	b8800044 	addi	r2,r23,1
  804c44:	b7000044 	addi	fp,r22,1
  804c48:	b0800005 	stb	r2,0(r22)
  804c4c:	003e4106 	br	804554 <_dtoa_r+0xbe4>
  804c50:	d8800317 	ldw	r2,12(sp)
  804c54:	01802074 	movhi	r6,129
  804c58:	31b51b04 	addi	r6,r6,-11156
  804c5c:	b009883a 	mov	r4,r22
  804c60:	100e90fa 	slli	r7,r2,3
  804c64:	b80b883a 	mov	r5,r23
  804c68:	398f883a 	add	r7,r7,r6
  804c6c:	38bffe17 	ldw	r2,-8(r7)
  804c70:	d9800517 	ldw	r6,20(sp)
  804c74:	38ffff17 	ldw	r3,-4(r7)
  804c78:	37000044 	addi	fp,r6,1
  804c7c:	180f883a 	mov	r7,r3
  804c80:	100d883a 	mov	r6,r2
  804c84:	0809b8c0 	call	809b8c <__muldf3>
  804c88:	a80b883a 	mov	r5,r21
  804c8c:	a009883a 	mov	r4,r20
  804c90:	182f883a 	mov	r23,r3
  804c94:	102d883a 	mov	r22,r2
  804c98:	080a2f00 	call	80a2f0 <__fixdfsi>
  804c9c:	1009883a 	mov	r4,r2
  804ca0:	1027883a 	mov	r19,r2
  804ca4:	080a1f80 	call	80a1f8 <__floatsidf>
  804ca8:	a80b883a 	mov	r5,r21
  804cac:	a009883a 	mov	r4,r20
  804cb0:	180f883a 	mov	r7,r3
  804cb4:	100d883a 	mov	r6,r2
  804cb8:	0809a980 	call	809a98 <__subdf3>
  804cbc:	180b883a 	mov	r5,r3
  804cc0:	d8c00517 	ldw	r3,20(sp)
  804cc4:	9cc00c04 	addi	r19,r19,48
  804cc8:	1009883a 	mov	r4,r2
  804ccc:	1cc00005 	stb	r19,0(r3)
  804cd0:	2021883a 	mov	r16,r4
  804cd4:	d9000317 	ldw	r4,12(sp)
  804cd8:	00800044 	movi	r2,1
  804cdc:	2823883a 	mov	r17,r5
  804ce0:	20802226 	beq	r4,r2,804d6c <_dtoa_r+0x13fc>
  804ce4:	1029883a 	mov	r20,r2
  804ce8:	0005883a 	mov	r2,zero
  804cec:	00d00934 	movhi	r3,16420
  804cf0:	180f883a 	mov	r7,r3
  804cf4:	100d883a 	mov	r6,r2
  804cf8:	880b883a 	mov	r5,r17
  804cfc:	8009883a 	mov	r4,r16
  804d00:	0809b8c0 	call	809b8c <__muldf3>
  804d04:	180b883a 	mov	r5,r3
  804d08:	1009883a 	mov	r4,r2
  804d0c:	1823883a 	mov	r17,r3
  804d10:	1021883a 	mov	r16,r2
  804d14:	080a2f00 	call	80a2f0 <__fixdfsi>
  804d18:	1009883a 	mov	r4,r2
  804d1c:	102b883a 	mov	r21,r2
  804d20:	080a1f80 	call	80a1f8 <__floatsidf>
  804d24:	880b883a 	mov	r5,r17
  804d28:	8009883a 	mov	r4,r16
  804d2c:	180f883a 	mov	r7,r3
  804d30:	100d883a 	mov	r6,r2
  804d34:	0809a980 	call	809a98 <__subdf3>
  804d38:	180b883a 	mov	r5,r3
  804d3c:	d8c00517 	ldw	r3,20(sp)
  804d40:	1009883a 	mov	r4,r2
  804d44:	ad400c04 	addi	r21,r21,48
  804d48:	1d05883a 	add	r2,r3,r20
  804d4c:	15400005 	stb	r21,0(r2)
  804d50:	2021883a 	mov	r16,r4
  804d54:	d9000317 	ldw	r4,12(sp)
  804d58:	a5000044 	addi	r20,r20,1
  804d5c:	2823883a 	mov	r17,r5
  804d60:	a13fe11e 	bne	r20,r4,804ce8 <_dtoa_r+0x1378>
  804d64:	e505883a 	add	r2,fp,r20
  804d68:	173fffc4 	addi	fp,r2,-1
  804d6c:	0025883a 	mov	r18,zero
  804d70:	04cff834 	movhi	r19,16352
  804d74:	b009883a 	mov	r4,r22
  804d78:	b80b883a 	mov	r5,r23
  804d7c:	900d883a 	mov	r6,r18
  804d80:	980f883a 	mov	r7,r19
  804d84:	0809b180 	call	809b18 <__adddf3>
  804d88:	180b883a 	mov	r5,r3
  804d8c:	1009883a 	mov	r4,r2
  804d90:	800d883a 	mov	r6,r16
  804d94:	880f883a 	mov	r7,r17
  804d98:	080a1700 	call	80a170 <__ltdf2>
  804d9c:	103cab16 	blt	r2,zero,80404c <_dtoa_r+0x6dc>
  804da0:	0009883a 	mov	r4,zero
  804da4:	980b883a 	mov	r5,r19
  804da8:	b80f883a 	mov	r7,r23
  804dac:	b00d883a 	mov	r6,r22
  804db0:	0809a980 	call	809a98 <__subdf3>
  804db4:	180b883a 	mov	r5,r3
  804db8:	880f883a 	mov	r7,r17
  804dbc:	1009883a 	mov	r4,r2
  804dc0:	800d883a 	mov	r6,r16
  804dc4:	080a0600 	call	80a060 <__gtdf2>
  804dc8:	00bc470e 	bge	zero,r2,803ee8 <_dtoa_r+0x578>
  804dcc:	00c00c04 	movi	r3,48
  804dd0:	e73fffc4 	addi	fp,fp,-1
  804dd4:	e0800007 	ldb	r2,0(fp)
  804dd8:	10fffd26 	beq	r2,r3,804dd0 <_dtoa_r+0x1460>
  804ddc:	d9800417 	ldw	r6,16(sp)
  804de0:	e7000044 	addi	fp,fp,1
  804de4:	d9800d15 	stw	r6,52(sp)
  804de8:	003cab06 	br	804098 <_dtoa_r+0x728>
  804dec:	d8c00f17 	ldw	r3,60(sp)
  804df0:	d9001117 	ldw	r4,68(sp)
  804df4:	20e1c83a 	sub	r16,r4,r3
  804df8:	0007883a 	mov	r3,zero
  804dfc:	003d9b06 	br	80446c <_dtoa_r+0xafc>
  804e00:	00800e44 	movi	r2,57
  804e04:	b0800005 	stb	r2,0(r22)
  804e08:	b5800044 	addi	r22,r22,1
  804e0c:	003dc106 	br	804514 <_dtoa_r+0xba4>
  804e10:	05800084 	movi	r22,2
  804e14:	003bf706 	br	803df4 <_dtoa_r+0x484>
  804e18:	d9000f17 	ldw	r4,60(sp)
  804e1c:	013c000e 	bge	zero,r4,803e20 <_dtoa_r+0x4b0>
  804e20:	d9800e17 	ldw	r6,56(sp)
  804e24:	01bc300e 	bge	zero,r6,803ee8 <_dtoa_r+0x578>
  804e28:	0005883a 	mov	r2,zero
  804e2c:	00d00934 	movhi	r3,16420
  804e30:	a80b883a 	mov	r5,r21
  804e34:	180f883a 	mov	r7,r3
  804e38:	a009883a 	mov	r4,r20
  804e3c:	100d883a 	mov	r6,r2
  804e40:	0809b8c0 	call	809b8c <__muldf3>
  804e44:	b1000044 	addi	r4,r22,1
  804e48:	1021883a 	mov	r16,r2
  804e4c:	1823883a 	mov	r17,r3
  804e50:	080a1f80 	call	80a1f8 <__floatsidf>
  804e54:	880b883a 	mov	r5,r17
  804e58:	8009883a 	mov	r4,r16
  804e5c:	180f883a 	mov	r7,r3
  804e60:	100d883a 	mov	r6,r2
  804e64:	0809b8c0 	call	809b8c <__muldf3>
  804e68:	0011883a 	mov	r8,zero
  804e6c:	02500734 	movhi	r9,16412
  804e70:	180b883a 	mov	r5,r3
  804e74:	480f883a 	mov	r7,r9
  804e78:	1009883a 	mov	r4,r2
  804e7c:	400d883a 	mov	r6,r8
  804e80:	0809b180 	call	809b18 <__adddf3>
  804e84:	102d883a 	mov	r22,r2
  804e88:	00bf3034 	movhi	r2,64704
  804e8c:	10ef883a 	add	r23,r2,r3
  804e90:	d8800d17 	ldw	r2,52(sp)
  804e94:	d8c00e17 	ldw	r3,56(sp)
  804e98:	8029883a 	mov	r20,r16
  804e9c:	10bfffc4 	addi	r2,r2,-1
  804ea0:	882b883a 	mov	r21,r17
  804ea4:	d8800415 	stw	r2,16(sp)
  804ea8:	d8c00315 	stw	r3,12(sp)
  804eac:	003e8306 	br	8048bc <_dtoa_r+0xf4c>
  804eb0:	d8800117 	ldw	r2,4(sp)
  804eb4:	dc001117 	ldw	r16,68(sp)
  804eb8:	dc801017 	ldw	r18,64(sp)
  804ebc:	00c00d84 	movi	r3,54
  804ec0:	1887c83a 	sub	r3,r3,r2
  804ec4:	003d6906 	br	80446c <_dtoa_r+0xafc>
  804ec8:	01800044 	movi	r6,1
  804ecc:	3021883a 	mov	r16,r6
  804ed0:	d9800f15 	stw	r6,60(sp)
  804ed4:	d9802615 	stw	r6,152(sp)
  804ed8:	d9800e15 	stw	r6,56(sp)
  804edc:	003b9306 	br	803d2c <_dtoa_r+0x3bc>
  804ee0:	b021883a 	mov	r16,r22
  804ee4:	dd800f15 	stw	r22,60(sp)
  804ee8:	003b9006 	br	803d2c <_dtoa_r+0x3bc>
  804eec:	103e221e 	bne	r2,zero,804778 <_dtoa_r+0xe08>
  804ef0:	b880004c 	andi	r2,r23,1
  804ef4:	1005003a 	cmpeq	r2,r2,zero
  804ef8:	103e1f1e 	bne	r2,zero,804778 <_dtoa_r+0xe08>
  804efc:	003e1b06 	br	80476c <_dtoa_r+0xdfc>
  804f00:	d9001617 	ldw	r4,88(sp)
  804f04:	980b883a 	mov	r5,r19
  804f08:	01800284 	movi	r6,10
  804f0c:	000f883a 	mov	r7,zero
  804f10:	08078580 	call	807858 <__multadd>
  804f14:	d8c00e17 	ldw	r3,56(sp)
  804f18:	1027883a 	mov	r19,r2
  804f1c:	d8c00f15 	stw	r3,60(sp)
  804f20:	003cd306 	br	804270 <_dtoa_r+0x900>

00804f24 <_fflush_r>:
  804f24:	defffb04 	addi	sp,sp,-20
  804f28:	dcc00315 	stw	r19,12(sp)
  804f2c:	dc800215 	stw	r18,8(sp)
  804f30:	dfc00415 	stw	ra,16(sp)
  804f34:	dc400115 	stw	r17,4(sp)
  804f38:	dc000015 	stw	r16,0(sp)
  804f3c:	2027883a 	mov	r19,r4
  804f40:	2825883a 	mov	r18,r5
  804f44:	20000226 	beq	r4,zero,804f50 <_fflush_r+0x2c>
  804f48:	20800e17 	ldw	r2,56(r4)
  804f4c:	10005626 	beq	r2,zero,8050a8 <_fflush_r+0x184>
  804f50:	9100030b 	ldhu	r4,12(r18)
  804f54:	20ffffcc 	andi	r3,r4,65535
  804f58:	18e0001c 	xori	r3,r3,32768
  804f5c:	18e00004 	addi	r3,r3,-32768
  804f60:	1880020c 	andi	r2,r3,8
  804f64:	1000261e 	bne	r2,zero,805000 <_fflush_r+0xdc>
  804f68:	90c00117 	ldw	r3,4(r18)
  804f6c:	20820014 	ori	r2,r4,2048
  804f70:	9080030d 	sth	r2,12(r18)
  804f74:	1009883a 	mov	r4,r2
  804f78:	00c0400e 	bge	zero,r3,80507c <_fflush_r+0x158>
  804f7c:	92000a17 	ldw	r8,40(r18)
  804f80:	40004026 	beq	r8,zero,805084 <_fflush_r+0x160>
  804f84:	2084000c 	andi	r2,r4,4096
  804f88:	10005326 	beq	r2,zero,8050d8 <_fflush_r+0x1b4>
  804f8c:	94001417 	ldw	r16,80(r18)
  804f90:	9080030b 	ldhu	r2,12(r18)
  804f94:	1080010c 	andi	r2,r2,4
  804f98:	1000481e 	bne	r2,zero,8050bc <_fflush_r+0x198>
  804f9c:	91400717 	ldw	r5,28(r18)
  804fa0:	9809883a 	mov	r4,r19
  804fa4:	800d883a 	mov	r6,r16
  804fa8:	000f883a 	mov	r7,zero
  804fac:	403ee83a 	callr	r8
  804fb0:	8080261e 	bne	r16,r2,80504c <_fflush_r+0x128>
  804fb4:	9080030b 	ldhu	r2,12(r18)
  804fb8:	91000417 	ldw	r4,16(r18)
  804fbc:	90000115 	stw	zero,4(r18)
  804fc0:	10bdffcc 	andi	r2,r2,63487
  804fc4:	10ffffcc 	andi	r3,r2,65535
  804fc8:	18c4000c 	andi	r3,r3,4096
  804fcc:	9080030d 	sth	r2,12(r18)
  804fd0:	91000015 	stw	r4,0(r18)
  804fd4:	18002b26 	beq	r3,zero,805084 <_fflush_r+0x160>
  804fd8:	0007883a 	mov	r3,zero
  804fdc:	1805883a 	mov	r2,r3
  804fe0:	94001415 	stw	r16,80(r18)
  804fe4:	dfc00417 	ldw	ra,16(sp)
  804fe8:	dcc00317 	ldw	r19,12(sp)
  804fec:	dc800217 	ldw	r18,8(sp)
  804ff0:	dc400117 	ldw	r17,4(sp)
  804ff4:	dc000017 	ldw	r16,0(sp)
  804ff8:	dec00504 	addi	sp,sp,20
  804ffc:	f800283a 	ret
  805000:	94400417 	ldw	r17,16(r18)
  805004:	88001f26 	beq	r17,zero,805084 <_fflush_r+0x160>
  805008:	90800017 	ldw	r2,0(r18)
  80500c:	18c000cc 	andi	r3,r3,3
  805010:	94400015 	stw	r17,0(r18)
  805014:	1461c83a 	sub	r16,r2,r17
  805018:	18002526 	beq	r3,zero,8050b0 <_fflush_r+0x18c>
  80501c:	0005883a 	mov	r2,zero
  805020:	90800215 	stw	r2,8(r18)
  805024:	0400170e 	bge	zero,r16,805084 <_fflush_r+0x160>
  805028:	90c00917 	ldw	r3,36(r18)
  80502c:	91400717 	ldw	r5,28(r18)
  805030:	880d883a 	mov	r6,r17
  805034:	800f883a 	mov	r7,r16
  805038:	9809883a 	mov	r4,r19
  80503c:	183ee83a 	callr	r3
  805040:	88a3883a 	add	r17,r17,r2
  805044:	80a1c83a 	sub	r16,r16,r2
  805048:	00bff616 	blt	zero,r2,805024 <_fflush_r+0x100>
  80504c:	9080030b 	ldhu	r2,12(r18)
  805050:	00ffffc4 	movi	r3,-1
  805054:	10801014 	ori	r2,r2,64
  805058:	9080030d 	sth	r2,12(r18)
  80505c:	1805883a 	mov	r2,r3
  805060:	dfc00417 	ldw	ra,16(sp)
  805064:	dcc00317 	ldw	r19,12(sp)
  805068:	dc800217 	ldw	r18,8(sp)
  80506c:	dc400117 	ldw	r17,4(sp)
  805070:	dc000017 	ldw	r16,0(sp)
  805074:	dec00504 	addi	sp,sp,20
  805078:	f800283a 	ret
  80507c:	90800f17 	ldw	r2,60(r18)
  805080:	00bfbe16 	blt	zero,r2,804f7c <_fflush_r+0x58>
  805084:	0007883a 	mov	r3,zero
  805088:	1805883a 	mov	r2,r3
  80508c:	dfc00417 	ldw	ra,16(sp)
  805090:	dcc00317 	ldw	r19,12(sp)
  805094:	dc800217 	ldw	r18,8(sp)
  805098:	dc400117 	ldw	r17,4(sp)
  80509c:	dc000017 	ldw	r16,0(sp)
  8050a0:	dec00504 	addi	sp,sp,20
  8050a4:	f800283a 	ret
  8050a8:	08051bc0 	call	8051bc <__sinit>
  8050ac:	003fa806 	br	804f50 <_fflush_r+0x2c>
  8050b0:	90800517 	ldw	r2,20(r18)
  8050b4:	90800215 	stw	r2,8(r18)
  8050b8:	003fda06 	br	805024 <_fflush_r+0x100>
  8050bc:	90800117 	ldw	r2,4(r18)
  8050c0:	90c00c17 	ldw	r3,48(r18)
  8050c4:	80a1c83a 	sub	r16,r16,r2
  8050c8:	183fb426 	beq	r3,zero,804f9c <_fflush_r+0x78>
  8050cc:	90800f17 	ldw	r2,60(r18)
  8050d0:	80a1c83a 	sub	r16,r16,r2
  8050d4:	003fb106 	br	804f9c <_fflush_r+0x78>
  8050d8:	91400717 	ldw	r5,28(r18)
  8050dc:	9809883a 	mov	r4,r19
  8050e0:	000d883a 	mov	r6,zero
  8050e4:	01c00044 	movi	r7,1
  8050e8:	403ee83a 	callr	r8
  8050ec:	1021883a 	mov	r16,r2
  8050f0:	00bfffc4 	movi	r2,-1
  8050f4:	80800226 	beq	r16,r2,805100 <_fflush_r+0x1dc>
  8050f8:	92000a17 	ldw	r8,40(r18)
  8050fc:	003fa406 	br	804f90 <_fflush_r+0x6c>
  805100:	98c00017 	ldw	r3,0(r19)
  805104:	00800744 	movi	r2,29
  805108:	18bfde26 	beq	r3,r2,805084 <_fflush_r+0x160>
  80510c:	9080030b 	ldhu	r2,12(r18)
  805110:	8007883a 	mov	r3,r16
  805114:	10801014 	ori	r2,r2,64
  805118:	9080030d 	sth	r2,12(r18)
  80511c:	003fcf06 	br	80505c <_fflush_r+0x138>

00805120 <fflush>:
  805120:	01402034 	movhi	r5,128
  805124:	2953c904 	addi	r5,r5,20260
  805128:	2007883a 	mov	r3,r4
  80512c:	20000526 	beq	r4,zero,805144 <fflush+0x24>
  805130:	00802074 	movhi	r2,129
  805134:	10bbf804 	addi	r2,r2,-4128
  805138:	11000017 	ldw	r4,0(r2)
  80513c:	180b883a 	mov	r5,r3
  805140:	0804f241 	jmpi	804f24 <_fflush_r>
  805144:	00802074 	movhi	r2,129
  805148:	10bbf904 	addi	r2,r2,-4124
  80514c:	11000017 	ldw	r4,0(r2)
  805150:	0805d241 	jmpi	805d24 <_fwalk_reent>

00805154 <std>:
  805154:	00802074 	movhi	r2,129
  805158:	10a0a604 	addi	r2,r2,-32104
  80515c:	20800b15 	stw	r2,44(r4)
  805160:	00802074 	movhi	r2,129
  805164:	10a0e104 	addi	r2,r2,-31868
  805168:	20800815 	stw	r2,32(r4)
  80516c:	00c02074 	movhi	r3,129
  805170:	18e0c204 	addi	r3,r3,-31992
  805174:	00802074 	movhi	r2,129
  805178:	10a0a804 	addi	r2,r2,-32096
  80517c:	2140030d 	sth	r5,12(r4)
  805180:	2180038d 	sth	r6,14(r4)
  805184:	20c00915 	stw	r3,36(r4)
  805188:	20800a15 	stw	r2,40(r4)
  80518c:	20000015 	stw	zero,0(r4)
  805190:	20000115 	stw	zero,4(r4)
  805194:	20000215 	stw	zero,8(r4)
  805198:	20000415 	stw	zero,16(r4)
  80519c:	20000515 	stw	zero,20(r4)
  8051a0:	20000615 	stw	zero,24(r4)
  8051a4:	21000715 	stw	r4,28(r4)
  8051a8:	f800283a 	ret

008051ac <__sfp_lock_acquire>:
  8051ac:	f800283a 	ret

008051b0 <__sfp_lock_release>:
  8051b0:	f800283a 	ret

008051b4 <__sinit_lock_acquire>:
  8051b4:	f800283a 	ret

008051b8 <__sinit_lock_release>:
  8051b8:	f800283a 	ret

008051bc <__sinit>:
  8051bc:	20800e17 	ldw	r2,56(r4)
  8051c0:	defffd04 	addi	sp,sp,-12
  8051c4:	dc400115 	stw	r17,4(sp)
  8051c8:	dc000015 	stw	r16,0(sp)
  8051cc:	dfc00215 	stw	ra,8(sp)
  8051d0:	04400044 	movi	r17,1
  8051d4:	01400104 	movi	r5,4
  8051d8:	000d883a 	mov	r6,zero
  8051dc:	2021883a 	mov	r16,r4
  8051e0:	2200bb04 	addi	r8,r4,748
  8051e4:	200f883a 	mov	r7,r4
  8051e8:	10000526 	beq	r2,zero,805200 <__sinit+0x44>
  8051ec:	dfc00217 	ldw	ra,8(sp)
  8051f0:	dc400117 	ldw	r17,4(sp)
  8051f4:	dc000017 	ldw	r16,0(sp)
  8051f8:	dec00304 	addi	sp,sp,12
  8051fc:	f800283a 	ret
  805200:	21000117 	ldw	r4,4(r4)
  805204:	00802034 	movhi	r2,128
  805208:	1094a804 	addi	r2,r2,21152
  80520c:	00c000c4 	movi	r3,3
  805210:	80800f15 	stw	r2,60(r16)
  805214:	80c0b915 	stw	r3,740(r16)
  805218:	8200ba15 	stw	r8,744(r16)
  80521c:	84400e15 	stw	r17,56(r16)
  805220:	8000b815 	stw	zero,736(r16)
  805224:	08051540 	call	805154 <std>
  805228:	81000217 	ldw	r4,8(r16)
  80522c:	880d883a 	mov	r6,r17
  805230:	800f883a 	mov	r7,r16
  805234:	01400284 	movi	r5,10
  805238:	08051540 	call	805154 <std>
  80523c:	81000317 	ldw	r4,12(r16)
  805240:	800f883a 	mov	r7,r16
  805244:	01400484 	movi	r5,18
  805248:	01800084 	movi	r6,2
  80524c:	dfc00217 	ldw	ra,8(sp)
  805250:	dc400117 	ldw	r17,4(sp)
  805254:	dc000017 	ldw	r16,0(sp)
  805258:	dec00304 	addi	sp,sp,12
  80525c:	08051541 	jmpi	805154 <std>

00805260 <__fp_lock>:
  805260:	0005883a 	mov	r2,zero
  805264:	f800283a 	ret

00805268 <__fp_unlock>:
  805268:	0005883a 	mov	r2,zero
  80526c:	f800283a 	ret

00805270 <__fp_unlock_all>:
  805270:	00802074 	movhi	r2,129
  805274:	10bbf804 	addi	r2,r2,-4128
  805278:	11000017 	ldw	r4,0(r2)
  80527c:	01402034 	movhi	r5,128
  805280:	29549a04 	addi	r5,r5,21096
  805284:	0805dec1 	jmpi	805dec <_fwalk>

00805288 <__fp_lock_all>:
  805288:	00802074 	movhi	r2,129
  80528c:	10bbf804 	addi	r2,r2,-4128
  805290:	11000017 	ldw	r4,0(r2)
  805294:	01402034 	movhi	r5,128
  805298:	29549804 	addi	r5,r5,21088
  80529c:	0805dec1 	jmpi	805dec <_fwalk>

008052a0 <_cleanup_r>:
  8052a0:	01402074 	movhi	r5,129
  8052a4:	2961f504 	addi	r5,r5,-30764
  8052a8:	0805dec1 	jmpi	805dec <_fwalk>

008052ac <_cleanup>:
  8052ac:	00802074 	movhi	r2,129
  8052b0:	10bbf904 	addi	r2,r2,-4124
  8052b4:	11000017 	ldw	r4,0(r2)
  8052b8:	08052a01 	jmpi	8052a0 <_cleanup_r>

008052bc <__sfmoreglue>:
  8052bc:	defffc04 	addi	sp,sp,-16
  8052c0:	dc000015 	stw	r16,0(sp)
  8052c4:	2821883a 	mov	r16,r5
  8052c8:	dc400115 	stw	r17,4(sp)
  8052cc:	01401704 	movi	r5,92
  8052d0:	2023883a 	mov	r17,r4
  8052d4:	8009883a 	mov	r4,r16
  8052d8:	dfc00315 	stw	ra,12(sp)
  8052dc:	dcc00215 	stw	r19,8(sp)
  8052e0:	08016000 	call	801600 <__mulsi3>
  8052e4:	11400304 	addi	r5,r2,12
  8052e8:	8809883a 	mov	r4,r17
  8052ec:	1027883a 	mov	r19,r2
  8052f0:	08060fc0 	call	8060fc <_malloc_r>
  8052f4:	10c00304 	addi	r3,r2,12
  8052f8:	1023883a 	mov	r17,r2
  8052fc:	1809883a 	mov	r4,r3
  805300:	980d883a 	mov	r6,r19
  805304:	000b883a 	mov	r5,zero
  805308:	10000b26 	beq	r2,zero,805338 <__sfmoreglue+0x7c>
  80530c:	14000115 	stw	r16,4(r2)
  805310:	10c00215 	stw	r3,8(r2)
  805314:	10000015 	stw	zero,0(r2)
  805318:	0806aa00 	call	806aa0 <memset>
  80531c:	8805883a 	mov	r2,r17
  805320:	dfc00317 	ldw	ra,12(sp)
  805324:	dcc00217 	ldw	r19,8(sp)
  805328:	dc400117 	ldw	r17,4(sp)
  80532c:	dc000017 	ldw	r16,0(sp)
  805330:	dec00404 	addi	sp,sp,16
  805334:	f800283a 	ret
  805338:	0023883a 	mov	r17,zero
  80533c:	8805883a 	mov	r2,r17
  805340:	dfc00317 	ldw	ra,12(sp)
  805344:	dcc00217 	ldw	r19,8(sp)
  805348:	dc400117 	ldw	r17,4(sp)
  80534c:	dc000017 	ldw	r16,0(sp)
  805350:	dec00404 	addi	sp,sp,16
  805354:	f800283a 	ret

00805358 <__sfp>:
  805358:	defffd04 	addi	sp,sp,-12
  80535c:	00802074 	movhi	r2,129
  805360:	10bbf904 	addi	r2,r2,-4124
  805364:	dc000015 	stw	r16,0(sp)
  805368:	14000017 	ldw	r16,0(r2)
  80536c:	dc400115 	stw	r17,4(sp)
  805370:	dfc00215 	stw	ra,8(sp)
  805374:	80800e17 	ldw	r2,56(r16)
  805378:	2023883a 	mov	r17,r4
  80537c:	10002626 	beq	r2,zero,805418 <__sfp+0xc0>
  805380:	8400b804 	addi	r16,r16,736
  805384:	80800117 	ldw	r2,4(r16)
  805388:	81000217 	ldw	r4,8(r16)
  80538c:	10ffffc4 	addi	r3,r2,-1
  805390:	18000916 	blt	r3,zero,8053b8 <__sfp+0x60>
  805394:	2080030f 	ldh	r2,12(r4)
  805398:	10000b26 	beq	r2,zero,8053c8 <__sfp+0x70>
  80539c:	017fffc4 	movi	r5,-1
  8053a0:	00000206 	br	8053ac <__sfp+0x54>
  8053a4:	2080030f 	ldh	r2,12(r4)
  8053a8:	10000726 	beq	r2,zero,8053c8 <__sfp+0x70>
  8053ac:	18ffffc4 	addi	r3,r3,-1
  8053b0:	21001704 	addi	r4,r4,92
  8053b4:	197ffb1e 	bne	r3,r5,8053a4 <__sfp+0x4c>
  8053b8:	80800017 	ldw	r2,0(r16)
  8053bc:	10001926 	beq	r2,zero,805424 <__sfp+0xcc>
  8053c0:	1021883a 	mov	r16,r2
  8053c4:	003fef06 	br	805384 <__sfp+0x2c>
  8053c8:	00bfffc4 	movi	r2,-1
  8053cc:	00c00044 	movi	r3,1
  8053d0:	2080038d 	sth	r2,14(r4)
  8053d4:	20c0030d 	sth	r3,12(r4)
  8053d8:	20000015 	stw	zero,0(r4)
  8053dc:	20000215 	stw	zero,8(r4)
  8053e0:	20000115 	stw	zero,4(r4)
  8053e4:	20000415 	stw	zero,16(r4)
  8053e8:	20000515 	stw	zero,20(r4)
  8053ec:	20000615 	stw	zero,24(r4)
  8053f0:	20000c15 	stw	zero,48(r4)
  8053f4:	20000d15 	stw	zero,52(r4)
  8053f8:	20001115 	stw	zero,68(r4)
  8053fc:	20001215 	stw	zero,72(r4)
  805400:	2005883a 	mov	r2,r4
  805404:	dfc00217 	ldw	ra,8(sp)
  805408:	dc400117 	ldw	r17,4(sp)
  80540c:	dc000017 	ldw	r16,0(sp)
  805410:	dec00304 	addi	sp,sp,12
  805414:	f800283a 	ret
  805418:	8009883a 	mov	r4,r16
  80541c:	08051bc0 	call	8051bc <__sinit>
  805420:	003fd706 	br	805380 <__sfp+0x28>
  805424:	8809883a 	mov	r4,r17
  805428:	01400104 	movi	r5,4
  80542c:	08052bc0 	call	8052bc <__sfmoreglue>
  805430:	80800015 	stw	r2,0(r16)
  805434:	103fe21e 	bne	r2,zero,8053c0 <__sfp+0x68>
  805438:	00800304 	movi	r2,12
  80543c:	0009883a 	mov	r4,zero
  805440:	88800015 	stw	r2,0(r17)
  805444:	003fee06 	br	805400 <__sfp+0xa8>

00805448 <_malloc_trim_r>:
  805448:	defffb04 	addi	sp,sp,-20
  80544c:	dcc00315 	stw	r19,12(sp)
  805450:	04c02074 	movhi	r19,129
  805454:	9cf67404 	addi	r19,r19,-9776
  805458:	dc800215 	stw	r18,8(sp)
  80545c:	dc400115 	stw	r17,4(sp)
  805460:	dc000015 	stw	r16,0(sp)
  805464:	2823883a 	mov	r17,r5
  805468:	2025883a 	mov	r18,r4
  80546c:	dfc00415 	stw	ra,16(sp)
  805470:	080acb80 	call	80acb8 <__malloc_lock>
  805474:	98800217 	ldw	r2,8(r19)
  805478:	9009883a 	mov	r4,r18
  80547c:	000b883a 	mov	r5,zero
  805480:	10c00117 	ldw	r3,4(r2)
  805484:	00bfff04 	movi	r2,-4
  805488:	18a0703a 	and	r16,r3,r2
  80548c:	8463c83a 	sub	r17,r16,r17
  805490:	8c43fbc4 	addi	r17,r17,4079
  805494:	8822d33a 	srli	r17,r17,12
  805498:	0083ffc4 	movi	r2,4095
  80549c:	8c7fffc4 	addi	r17,r17,-1
  8054a0:	8822933a 	slli	r17,r17,12
  8054a4:	1440060e 	bge	r2,r17,8054c0 <_malloc_trim_r+0x78>
  8054a8:	08082280 	call	808228 <_sbrk_r>
  8054ac:	98c00217 	ldw	r3,8(r19)
  8054b0:	9009883a 	mov	r4,r18
  8054b4:	044bc83a 	sub	r5,zero,r17
  8054b8:	80c7883a 	add	r3,r16,r3
  8054bc:	10c00926 	beq	r2,r3,8054e4 <_malloc_trim_r+0x9c>
  8054c0:	080acd80 	call	80acd8 <__malloc_unlock>
  8054c4:	0005883a 	mov	r2,zero
  8054c8:	dfc00417 	ldw	ra,16(sp)
  8054cc:	dcc00317 	ldw	r19,12(sp)
  8054d0:	dc800217 	ldw	r18,8(sp)
  8054d4:	dc400117 	ldw	r17,4(sp)
  8054d8:	dc000017 	ldw	r16,0(sp)
  8054dc:	dec00504 	addi	sp,sp,20
  8054e0:	f800283a 	ret
  8054e4:	9009883a 	mov	r4,r18
  8054e8:	08082280 	call	808228 <_sbrk_r>
  8054ec:	844dc83a 	sub	r6,r16,r17
  8054f0:	00ffffc4 	movi	r3,-1
  8054f4:	9009883a 	mov	r4,r18
  8054f8:	000b883a 	mov	r5,zero
  8054fc:	01c02074 	movhi	r7,129
  805500:	39c2b204 	addi	r7,r7,2760
  805504:	31800054 	ori	r6,r6,1
  805508:	10c00926 	beq	r2,r3,805530 <_malloc_trim_r+0xe8>
  80550c:	38800017 	ldw	r2,0(r7)
  805510:	98c00217 	ldw	r3,8(r19)
  805514:	9009883a 	mov	r4,r18
  805518:	1445c83a 	sub	r2,r2,r17
  80551c:	38800015 	stw	r2,0(r7)
  805520:	19800115 	stw	r6,4(r3)
  805524:	080acd80 	call	80acd8 <__malloc_unlock>
  805528:	00800044 	movi	r2,1
  80552c:	003fe606 	br	8054c8 <_malloc_trim_r+0x80>
  805530:	08082280 	call	808228 <_sbrk_r>
  805534:	99800217 	ldw	r6,8(r19)
  805538:	100f883a 	mov	r7,r2
  80553c:	9009883a 	mov	r4,r18
  805540:	1187c83a 	sub	r3,r2,r6
  805544:	008003c4 	movi	r2,15
  805548:	19400054 	ori	r5,r3,1
  80554c:	10ffdc0e 	bge	r2,r3,8054c0 <_malloc_trim_r+0x78>
  805550:	00802074 	movhi	r2,129
  805554:	10bbfd04 	addi	r2,r2,-4108
  805558:	10c00017 	ldw	r3,0(r2)
  80555c:	00802074 	movhi	r2,129
  805560:	1082b204 	addi	r2,r2,2760
  805564:	31400115 	stw	r5,4(r6)
  805568:	38c7c83a 	sub	r3,r7,r3
  80556c:	10c00015 	stw	r3,0(r2)
  805570:	003fd306 	br	8054c0 <_malloc_trim_r+0x78>

00805574 <_free_r>:
  805574:	defffd04 	addi	sp,sp,-12
  805578:	dc400115 	stw	r17,4(sp)
  80557c:	dc000015 	stw	r16,0(sp)
  805580:	dfc00215 	stw	ra,8(sp)
  805584:	2821883a 	mov	r16,r5
  805588:	2023883a 	mov	r17,r4
  80558c:	28005a26 	beq	r5,zero,8056f8 <_free_r+0x184>
  805590:	080acb80 	call	80acb8 <__malloc_lock>
  805594:	823ffe04 	addi	r8,r16,-8
  805598:	41400117 	ldw	r5,4(r8)
  80559c:	00bfff84 	movi	r2,-2
  8055a0:	02802074 	movhi	r10,129
  8055a4:	52b67404 	addi	r10,r10,-9776
  8055a8:	288e703a 	and	r7,r5,r2
  8055ac:	41cd883a 	add	r6,r8,r7
  8055b0:	30c00117 	ldw	r3,4(r6)
  8055b4:	51000217 	ldw	r4,8(r10)
  8055b8:	00bfff04 	movi	r2,-4
  8055bc:	1892703a 	and	r9,r3,r2
  8055c0:	5017883a 	mov	r11,r10
  8055c4:	31006726 	beq	r6,r4,805764 <_free_r+0x1f0>
  8055c8:	2880004c 	andi	r2,r5,1
  8055cc:	1005003a 	cmpeq	r2,r2,zero
  8055d0:	32400115 	stw	r9,4(r6)
  8055d4:	10001a1e 	bne	r2,zero,805640 <_free_r+0xcc>
  8055d8:	000b883a 	mov	r5,zero
  8055dc:	3247883a 	add	r3,r6,r9
  8055e0:	18800117 	ldw	r2,4(r3)
  8055e4:	1080004c 	andi	r2,r2,1
  8055e8:	1000231e 	bne	r2,zero,805678 <_free_r+0x104>
  8055ec:	280ac03a 	cmpne	r5,r5,zero
  8055f0:	3a4f883a 	add	r7,r7,r9
  8055f4:	2800451e 	bne	r5,zero,80570c <_free_r+0x198>
  8055f8:	31000217 	ldw	r4,8(r6)
  8055fc:	00802074 	movhi	r2,129
  805600:	10b67604 	addi	r2,r2,-9768
  805604:	20807b26 	beq	r4,r2,8057f4 <_free_r+0x280>
  805608:	30800317 	ldw	r2,12(r6)
  80560c:	3a07883a 	add	r3,r7,r8
  805610:	19c00015 	stw	r7,0(r3)
  805614:	11000215 	stw	r4,8(r2)
  805618:	20800315 	stw	r2,12(r4)
  80561c:	38800054 	ori	r2,r7,1
  805620:	40800115 	stw	r2,4(r8)
  805624:	28001a26 	beq	r5,zero,805690 <_free_r+0x11c>
  805628:	8809883a 	mov	r4,r17
  80562c:	dfc00217 	ldw	ra,8(sp)
  805630:	dc400117 	ldw	r17,4(sp)
  805634:	dc000017 	ldw	r16,0(sp)
  805638:	dec00304 	addi	sp,sp,12
  80563c:	080acd81 	jmpi	80acd8 <__malloc_unlock>
  805640:	80bffe17 	ldw	r2,-8(r16)
  805644:	50c00204 	addi	r3,r10,8
  805648:	4091c83a 	sub	r8,r8,r2
  80564c:	41000217 	ldw	r4,8(r8)
  805650:	388f883a 	add	r7,r7,r2
  805654:	20c06126 	beq	r4,r3,8057dc <_free_r+0x268>
  805658:	40800317 	ldw	r2,12(r8)
  80565c:	3247883a 	add	r3,r6,r9
  805660:	000b883a 	mov	r5,zero
  805664:	11000215 	stw	r4,8(r2)
  805668:	20800315 	stw	r2,12(r4)
  80566c:	18800117 	ldw	r2,4(r3)
  805670:	1080004c 	andi	r2,r2,1
  805674:	103fdd26 	beq	r2,zero,8055ec <_free_r+0x78>
  805678:	38800054 	ori	r2,r7,1
  80567c:	3a07883a 	add	r3,r7,r8
  805680:	280ac03a 	cmpne	r5,r5,zero
  805684:	40800115 	stw	r2,4(r8)
  805688:	19c00015 	stw	r7,0(r3)
  80568c:	283fe61e 	bne	r5,zero,805628 <_free_r+0xb4>
  805690:	00807fc4 	movi	r2,511
  805694:	11c01f2e 	bgeu	r2,r7,805714 <_free_r+0x1a0>
  805698:	3806d27a 	srli	r3,r7,9
  80569c:	1800481e 	bne	r3,zero,8057c0 <_free_r+0x24c>
  8056a0:	3804d0fa 	srli	r2,r7,3
  8056a4:	100690fa 	slli	r3,r2,3
  8056a8:	1acd883a 	add	r6,r3,r11
  8056ac:	31400217 	ldw	r5,8(r6)
  8056b0:	31405926 	beq	r6,r5,805818 <_free_r+0x2a4>
  8056b4:	28800117 	ldw	r2,4(r5)
  8056b8:	00ffff04 	movi	r3,-4
  8056bc:	10c4703a 	and	r2,r2,r3
  8056c0:	3880022e 	bgeu	r7,r2,8056cc <_free_r+0x158>
  8056c4:	29400217 	ldw	r5,8(r5)
  8056c8:	317ffa1e 	bne	r6,r5,8056b4 <_free_r+0x140>
  8056cc:	29800317 	ldw	r6,12(r5)
  8056d0:	41800315 	stw	r6,12(r8)
  8056d4:	41400215 	stw	r5,8(r8)
  8056d8:	8809883a 	mov	r4,r17
  8056dc:	2a000315 	stw	r8,12(r5)
  8056e0:	32000215 	stw	r8,8(r6)
  8056e4:	dfc00217 	ldw	ra,8(sp)
  8056e8:	dc400117 	ldw	r17,4(sp)
  8056ec:	dc000017 	ldw	r16,0(sp)
  8056f0:	dec00304 	addi	sp,sp,12
  8056f4:	080acd81 	jmpi	80acd8 <__malloc_unlock>
  8056f8:	dfc00217 	ldw	ra,8(sp)
  8056fc:	dc400117 	ldw	r17,4(sp)
  805700:	dc000017 	ldw	r16,0(sp)
  805704:	dec00304 	addi	sp,sp,12
  805708:	f800283a 	ret
  80570c:	31000217 	ldw	r4,8(r6)
  805710:	003fbd06 	br	805608 <_free_r+0x94>
  805714:	3806d0fa 	srli	r3,r7,3
  805718:	00800044 	movi	r2,1
  80571c:	51400117 	ldw	r5,4(r10)
  805720:	180890fa 	slli	r4,r3,3
  805724:	1807d0ba 	srai	r3,r3,2
  805728:	22c9883a 	add	r4,r4,r11
  80572c:	21800217 	ldw	r6,8(r4)
  805730:	10c4983a 	sll	r2,r2,r3
  805734:	41000315 	stw	r4,12(r8)
  805738:	41800215 	stw	r6,8(r8)
  80573c:	288ab03a 	or	r5,r5,r2
  805740:	22000215 	stw	r8,8(r4)
  805744:	8809883a 	mov	r4,r17
  805748:	51400115 	stw	r5,4(r10)
  80574c:	32000315 	stw	r8,12(r6)
  805750:	dfc00217 	ldw	ra,8(sp)
  805754:	dc400117 	ldw	r17,4(sp)
  805758:	dc000017 	ldw	r16,0(sp)
  80575c:	dec00304 	addi	sp,sp,12
  805760:	080acd81 	jmpi	80acd8 <__malloc_unlock>
  805764:	2880004c 	andi	r2,r5,1
  805768:	3a4d883a 	add	r6,r7,r9
  80576c:	1000071e 	bne	r2,zero,80578c <_free_r+0x218>
  805770:	80bffe17 	ldw	r2,-8(r16)
  805774:	4091c83a 	sub	r8,r8,r2
  805778:	41000317 	ldw	r4,12(r8)
  80577c:	40c00217 	ldw	r3,8(r8)
  805780:	308d883a 	add	r6,r6,r2
  805784:	20c00215 	stw	r3,8(r4)
  805788:	19000315 	stw	r4,12(r3)
  80578c:	00802074 	movhi	r2,129
  805790:	10bbfc04 	addi	r2,r2,-4112
  805794:	11000017 	ldw	r4,0(r2)
  805798:	30c00054 	ori	r3,r6,1
  80579c:	52000215 	stw	r8,8(r10)
  8057a0:	40c00115 	stw	r3,4(r8)
  8057a4:	313fa036 	bltu	r6,r4,805628 <_free_r+0xb4>
  8057a8:	00802074 	movhi	r2,129
  8057ac:	1082a604 	addi	r2,r2,2712
  8057b0:	11400017 	ldw	r5,0(r2)
  8057b4:	8809883a 	mov	r4,r17
  8057b8:	08054480 	call	805448 <_malloc_trim_r>
  8057bc:	003f9a06 	br	805628 <_free_r+0xb4>
  8057c0:	00800104 	movi	r2,4
  8057c4:	10c0072e 	bgeu	r2,r3,8057e4 <_free_r+0x270>
  8057c8:	00800504 	movi	r2,20
  8057cc:	10c01936 	bltu	r2,r3,805834 <_free_r+0x2c0>
  8057d0:	188016c4 	addi	r2,r3,91
  8057d4:	100690fa 	slli	r3,r2,3
  8057d8:	003fb306 	br	8056a8 <_free_r+0x134>
  8057dc:	01400044 	movi	r5,1
  8057e0:	003f7e06 	br	8055dc <_free_r+0x68>
  8057e4:	3804d1ba 	srli	r2,r7,6
  8057e8:	10800e04 	addi	r2,r2,56
  8057ec:	100690fa 	slli	r3,r2,3
  8057f0:	003fad06 	br	8056a8 <_free_r+0x134>
  8057f4:	22000315 	stw	r8,12(r4)
  8057f8:	22000215 	stw	r8,8(r4)
  8057fc:	3a05883a 	add	r2,r7,r8
  805800:	38c00054 	ori	r3,r7,1
  805804:	11c00015 	stw	r7,0(r2)
  805808:	41000215 	stw	r4,8(r8)
  80580c:	40c00115 	stw	r3,4(r8)
  805810:	41000315 	stw	r4,12(r8)
  805814:	003f8406 	br	805628 <_free_r+0xb4>
  805818:	1005d0ba 	srai	r2,r2,2
  80581c:	00c00044 	movi	r3,1
  805820:	51000117 	ldw	r4,4(r10)
  805824:	1886983a 	sll	r3,r3,r2
  805828:	20c8b03a 	or	r4,r4,r3
  80582c:	51000115 	stw	r4,4(r10)
  805830:	003fa706 	br	8056d0 <_free_r+0x15c>
  805834:	00801504 	movi	r2,84
  805838:	10c00436 	bltu	r2,r3,80584c <_free_r+0x2d8>
  80583c:	3804d33a 	srli	r2,r7,12
  805840:	10801b84 	addi	r2,r2,110
  805844:	100690fa 	slli	r3,r2,3
  805848:	003f9706 	br	8056a8 <_free_r+0x134>
  80584c:	00805504 	movi	r2,340
  805850:	10c00436 	bltu	r2,r3,805864 <_free_r+0x2f0>
  805854:	3804d3fa 	srli	r2,r7,15
  805858:	10801dc4 	addi	r2,r2,119
  80585c:	100690fa 	slli	r3,r2,3
  805860:	003f9106 	br	8056a8 <_free_r+0x134>
  805864:	00815504 	movi	r2,1364
  805868:	10c0032e 	bgeu	r2,r3,805878 <_free_r+0x304>
  80586c:	00801f84 	movi	r2,126
  805870:	00c0fc04 	movi	r3,1008
  805874:	003f8c06 	br	8056a8 <_free_r+0x134>
  805878:	3804d4ba 	srli	r2,r7,18
  80587c:	10801f04 	addi	r2,r2,124
  805880:	100690fa 	slli	r3,r2,3
  805884:	003f8806 	br	8056a8 <_free_r+0x134>

00805888 <__sfvwrite_r>:
  805888:	30800217 	ldw	r2,8(r6)
  80588c:	defff504 	addi	sp,sp,-44
  805890:	df000915 	stw	fp,36(sp)
  805894:	dd800715 	stw	r22,28(sp)
  805898:	dc800315 	stw	r18,12(sp)
  80589c:	dfc00a15 	stw	ra,40(sp)
  8058a0:	ddc00815 	stw	r23,32(sp)
  8058a4:	dd400615 	stw	r21,24(sp)
  8058a8:	dd000515 	stw	r20,20(sp)
  8058ac:	dcc00415 	stw	r19,16(sp)
  8058b0:	dc400215 	stw	r17,8(sp)
  8058b4:	dc000115 	stw	r16,4(sp)
  8058b8:	302d883a 	mov	r22,r6
  8058bc:	2039883a 	mov	fp,r4
  8058c0:	2825883a 	mov	r18,r5
  8058c4:	10001c26 	beq	r2,zero,805938 <__sfvwrite_r+0xb0>
  8058c8:	29c0030b 	ldhu	r7,12(r5)
  8058cc:	3880020c 	andi	r2,r7,8
  8058d0:	10002726 	beq	r2,zero,805970 <__sfvwrite_r+0xe8>
  8058d4:	28800417 	ldw	r2,16(r5)
  8058d8:	10002526 	beq	r2,zero,805970 <__sfvwrite_r+0xe8>
  8058dc:	3880008c 	andi	r2,r7,2
  8058e0:	b5400017 	ldw	r21,0(r22)
  8058e4:	10002826 	beq	r2,zero,805988 <__sfvwrite_r+0x100>
  8058e8:	0021883a 	mov	r16,zero
  8058ec:	0023883a 	mov	r17,zero
  8058f0:	880d883a 	mov	r6,r17
  8058f4:	e009883a 	mov	r4,fp
  8058f8:	00810004 	movi	r2,1024
  8058fc:	80006e26 	beq	r16,zero,805ab8 <__sfvwrite_r+0x230>
  805900:	800f883a 	mov	r7,r16
  805904:	91400717 	ldw	r5,28(r18)
  805908:	1400012e 	bgeu	r2,r16,805910 <__sfvwrite_r+0x88>
  80590c:	100f883a 	mov	r7,r2
  805910:	90c00917 	ldw	r3,36(r18)
  805914:	183ee83a 	callr	r3
  805918:	1007883a 	mov	r3,r2
  80591c:	80a1c83a 	sub	r16,r16,r2
  805920:	88a3883a 	add	r17,r17,r2
  805924:	00806d0e 	bge	zero,r2,805adc <__sfvwrite_r+0x254>
  805928:	b0800217 	ldw	r2,8(r22)
  80592c:	10c5c83a 	sub	r2,r2,r3
  805930:	b0800215 	stw	r2,8(r22)
  805934:	103fee1e 	bne	r2,zero,8058f0 <__sfvwrite_r+0x68>
  805938:	0009883a 	mov	r4,zero
  80593c:	2005883a 	mov	r2,r4
  805940:	dfc00a17 	ldw	ra,40(sp)
  805944:	df000917 	ldw	fp,36(sp)
  805948:	ddc00817 	ldw	r23,32(sp)
  80594c:	dd800717 	ldw	r22,28(sp)
  805950:	dd400617 	ldw	r21,24(sp)
  805954:	dd000517 	ldw	r20,20(sp)
  805958:	dcc00417 	ldw	r19,16(sp)
  80595c:	dc800317 	ldw	r18,12(sp)
  805960:	dc400217 	ldw	r17,8(sp)
  805964:	dc000117 	ldw	r16,4(sp)
  805968:	dec00b04 	addi	sp,sp,44
  80596c:	f800283a 	ret
  805970:	08035f00 	call	8035f0 <__swsetup_r>
  805974:	1000e41e 	bne	r2,zero,805d08 <__sfvwrite_r+0x480>
  805978:	91c0030b 	ldhu	r7,12(r18)
  80597c:	b5400017 	ldw	r21,0(r22)
  805980:	3880008c 	andi	r2,r7,2
  805984:	103fd81e 	bne	r2,zero,8058e8 <__sfvwrite_r+0x60>
  805988:	3880004c 	andi	r2,r7,1
  80598c:	1005003a 	cmpeq	r2,r2,zero
  805990:	10005726 	beq	r2,zero,805af0 <__sfvwrite_r+0x268>
  805994:	0029883a 	mov	r20,zero
  805998:	002f883a 	mov	r23,zero
  80599c:	a0004226 	beq	r20,zero,805aa8 <__sfvwrite_r+0x220>
  8059a0:	3880800c 	andi	r2,r7,512
  8059a4:	94000217 	ldw	r16,8(r18)
  8059a8:	10008b26 	beq	r2,zero,805bd8 <__sfvwrite_r+0x350>
  8059ac:	800d883a 	mov	r6,r16
  8059b0:	a400a536 	bltu	r20,r16,805c48 <__sfvwrite_r+0x3c0>
  8059b4:	3881200c 	andi	r2,r7,1152
  8059b8:	10002726 	beq	r2,zero,805a58 <__sfvwrite_r+0x1d0>
  8059bc:	90800517 	ldw	r2,20(r18)
  8059c0:	92000417 	ldw	r8,16(r18)
  8059c4:	91400017 	ldw	r5,0(r18)
  8059c8:	1087883a 	add	r3,r2,r2
  8059cc:	1887883a 	add	r3,r3,r2
  8059d0:	1808d7fa 	srli	r4,r3,31
  8059d4:	2a21c83a 	sub	r16,r5,r8
  8059d8:	80800044 	addi	r2,r16,1
  8059dc:	20c9883a 	add	r4,r4,r3
  8059e0:	2027d07a 	srai	r19,r4,1
  8059e4:	a085883a 	add	r2,r20,r2
  8059e8:	980d883a 	mov	r6,r19
  8059ec:	9880022e 	bgeu	r19,r2,8059f8 <__sfvwrite_r+0x170>
  8059f0:	1027883a 	mov	r19,r2
  8059f4:	100d883a 	mov	r6,r2
  8059f8:	3881000c 	andi	r2,r7,1024
  8059fc:	1000b826 	beq	r2,zero,805ce0 <__sfvwrite_r+0x458>
  805a00:	300b883a 	mov	r5,r6
  805a04:	e009883a 	mov	r4,fp
  805a08:	08060fc0 	call	8060fc <_malloc_r>
  805a0c:	10003126 	beq	r2,zero,805ad4 <__sfvwrite_r+0x24c>
  805a10:	91400417 	ldw	r5,16(r18)
  805a14:	1009883a 	mov	r4,r2
  805a18:	800d883a 	mov	r6,r16
  805a1c:	1023883a 	mov	r17,r2
  805a20:	08069200 	call	806920 <memcpy>
  805a24:	90c0030b 	ldhu	r3,12(r18)
  805a28:	00beffc4 	movi	r2,-1025
  805a2c:	1886703a 	and	r3,r3,r2
  805a30:	18c02014 	ori	r3,r3,128
  805a34:	90c0030d 	sth	r3,12(r18)
  805a38:	9c07c83a 	sub	r3,r19,r16
  805a3c:	8c05883a 	add	r2,r17,r16
  805a40:	a00d883a 	mov	r6,r20
  805a44:	a021883a 	mov	r16,r20
  805a48:	90800015 	stw	r2,0(r18)
  805a4c:	90c00215 	stw	r3,8(r18)
  805a50:	94400415 	stw	r17,16(r18)
  805a54:	94c00515 	stw	r19,20(r18)
  805a58:	91000017 	ldw	r4,0(r18)
  805a5c:	b80b883a 	mov	r5,r23
  805a60:	a023883a 	mov	r17,r20
  805a64:	08069c00 	call	8069c0 <memmove>
  805a68:	90c00217 	ldw	r3,8(r18)
  805a6c:	90800017 	ldw	r2,0(r18)
  805a70:	a027883a 	mov	r19,r20
  805a74:	1c07c83a 	sub	r3,r3,r16
  805a78:	1405883a 	add	r2,r2,r16
  805a7c:	90c00215 	stw	r3,8(r18)
  805a80:	a021883a 	mov	r16,r20
  805a84:	90800015 	stw	r2,0(r18)
  805a88:	b0800217 	ldw	r2,8(r22)
  805a8c:	1405c83a 	sub	r2,r2,r16
  805a90:	b0800215 	stw	r2,8(r22)
  805a94:	103fa826 	beq	r2,zero,805938 <__sfvwrite_r+0xb0>
  805a98:	a469c83a 	sub	r20,r20,r17
  805a9c:	91c0030b 	ldhu	r7,12(r18)
  805aa0:	bcef883a 	add	r23,r23,r19
  805aa4:	a03fbe1e 	bne	r20,zero,8059a0 <__sfvwrite_r+0x118>
  805aa8:	adc00017 	ldw	r23,0(r21)
  805aac:	ad000117 	ldw	r20,4(r21)
  805ab0:	ad400204 	addi	r21,r21,8
  805ab4:	003fb906 	br	80599c <__sfvwrite_r+0x114>
  805ab8:	ac400017 	ldw	r17,0(r21)
  805abc:	ac000117 	ldw	r16,4(r21)
  805ac0:	ad400204 	addi	r21,r21,8
  805ac4:	003f8a06 	br	8058f0 <__sfvwrite_r+0x68>
  805ac8:	91400417 	ldw	r5,16(r18)
  805acc:	e009883a 	mov	r4,fp
  805ad0:	08055740 	call	805574 <_free_r>
  805ad4:	00800304 	movi	r2,12
  805ad8:	e0800015 	stw	r2,0(fp)
  805adc:	9080030b 	ldhu	r2,12(r18)
  805ae0:	013fffc4 	movi	r4,-1
  805ae4:	10801014 	ori	r2,r2,64
  805ae8:	9080030d 	sth	r2,12(r18)
  805aec:	003f9306 	br	80593c <__sfvwrite_r+0xb4>
  805af0:	0027883a 	mov	r19,zero
  805af4:	002f883a 	mov	r23,zero
  805af8:	d8000015 	stw	zero,0(sp)
  805afc:	0029883a 	mov	r20,zero
  805b00:	98001e26 	beq	r19,zero,805b7c <__sfvwrite_r+0x2f4>
  805b04:	d8c00017 	ldw	r3,0(sp)
  805b08:	1804c03a 	cmpne	r2,r3,zero
  805b0c:	10005e26 	beq	r2,zero,805c88 <__sfvwrite_r+0x400>
  805b10:	9821883a 	mov	r16,r19
  805b14:	a4c0012e 	bgeu	r20,r19,805b1c <__sfvwrite_r+0x294>
  805b18:	a021883a 	mov	r16,r20
  805b1c:	91000017 	ldw	r4,0(r18)
  805b20:	90800417 	ldw	r2,16(r18)
  805b24:	91800217 	ldw	r6,8(r18)
  805b28:	91c00517 	ldw	r7,20(r18)
  805b2c:	1100022e 	bgeu	r2,r4,805b38 <__sfvwrite_r+0x2b0>
  805b30:	31e3883a 	add	r17,r6,r7
  805b34:	8c001616 	blt	r17,r16,805b90 <__sfvwrite_r+0x308>
  805b38:	81c03816 	blt	r16,r7,805c1c <__sfvwrite_r+0x394>
  805b3c:	90c00917 	ldw	r3,36(r18)
  805b40:	91400717 	ldw	r5,28(r18)
  805b44:	e009883a 	mov	r4,fp
  805b48:	b80d883a 	mov	r6,r23
  805b4c:	183ee83a 	callr	r3
  805b50:	1023883a 	mov	r17,r2
  805b54:	00bfe10e 	bge	zero,r2,805adc <__sfvwrite_r+0x254>
  805b58:	a469c83a 	sub	r20,r20,r17
  805b5c:	a0001826 	beq	r20,zero,805bc0 <__sfvwrite_r+0x338>
  805b60:	b0800217 	ldw	r2,8(r22)
  805b64:	1445c83a 	sub	r2,r2,r17
  805b68:	b0800215 	stw	r2,8(r22)
  805b6c:	103f7226 	beq	r2,zero,805938 <__sfvwrite_r+0xb0>
  805b70:	9c67c83a 	sub	r19,r19,r17
  805b74:	bc6f883a 	add	r23,r23,r17
  805b78:	983fe21e 	bne	r19,zero,805b04 <__sfvwrite_r+0x27c>
  805b7c:	adc00017 	ldw	r23,0(r21)
  805b80:	acc00117 	ldw	r19,4(r21)
  805b84:	ad400204 	addi	r21,r21,8
  805b88:	d8000015 	stw	zero,0(sp)
  805b8c:	003fdc06 	br	805b00 <__sfvwrite_r+0x278>
  805b90:	b80b883a 	mov	r5,r23
  805b94:	880d883a 	mov	r6,r17
  805b98:	08069c00 	call	8069c0 <memmove>
  805b9c:	90c00017 	ldw	r3,0(r18)
  805ba0:	e009883a 	mov	r4,fp
  805ba4:	900b883a 	mov	r5,r18
  805ba8:	1c47883a 	add	r3,r3,r17
  805bac:	90c00015 	stw	r3,0(r18)
  805bb0:	0804f240 	call	804f24 <_fflush_r>
  805bb4:	103fc91e 	bne	r2,zero,805adc <__sfvwrite_r+0x254>
  805bb8:	a469c83a 	sub	r20,r20,r17
  805bbc:	a03fe81e 	bne	r20,zero,805b60 <__sfvwrite_r+0x2d8>
  805bc0:	e009883a 	mov	r4,fp
  805bc4:	900b883a 	mov	r5,r18
  805bc8:	0804f240 	call	804f24 <_fflush_r>
  805bcc:	103fc31e 	bne	r2,zero,805adc <__sfvwrite_r+0x254>
  805bd0:	d8000015 	stw	zero,0(sp)
  805bd4:	003fe206 	br	805b60 <__sfvwrite_r+0x2d8>
  805bd8:	91000017 	ldw	r4,0(r18)
  805bdc:	90800417 	ldw	r2,16(r18)
  805be0:	1100022e 	bgeu	r2,r4,805bec <__sfvwrite_r+0x364>
  805be4:	8023883a 	mov	r17,r16
  805be8:	85003136 	bltu	r16,r20,805cb0 <__sfvwrite_r+0x428>
  805bec:	91c00517 	ldw	r7,20(r18)
  805bf0:	a1c01836 	bltu	r20,r7,805c54 <__sfvwrite_r+0x3cc>
  805bf4:	90c00917 	ldw	r3,36(r18)
  805bf8:	91400717 	ldw	r5,28(r18)
  805bfc:	e009883a 	mov	r4,fp
  805c00:	b80d883a 	mov	r6,r23
  805c04:	183ee83a 	callr	r3
  805c08:	1021883a 	mov	r16,r2
  805c0c:	00bfb30e 	bge	zero,r2,805adc <__sfvwrite_r+0x254>
  805c10:	1023883a 	mov	r17,r2
  805c14:	1027883a 	mov	r19,r2
  805c18:	003f9b06 	br	805a88 <__sfvwrite_r+0x200>
  805c1c:	b80b883a 	mov	r5,r23
  805c20:	800d883a 	mov	r6,r16
  805c24:	08069c00 	call	8069c0 <memmove>
  805c28:	90c00217 	ldw	r3,8(r18)
  805c2c:	90800017 	ldw	r2,0(r18)
  805c30:	8023883a 	mov	r17,r16
  805c34:	1c07c83a 	sub	r3,r3,r16
  805c38:	1405883a 	add	r2,r2,r16
  805c3c:	90c00215 	stw	r3,8(r18)
  805c40:	90800015 	stw	r2,0(r18)
  805c44:	003fc406 	br	805b58 <__sfvwrite_r+0x2d0>
  805c48:	a00d883a 	mov	r6,r20
  805c4c:	a021883a 	mov	r16,r20
  805c50:	003f8106 	br	805a58 <__sfvwrite_r+0x1d0>
  805c54:	b80b883a 	mov	r5,r23
  805c58:	a00d883a 	mov	r6,r20
  805c5c:	08069c00 	call	8069c0 <memmove>
  805c60:	90c00217 	ldw	r3,8(r18)
  805c64:	90800017 	ldw	r2,0(r18)
  805c68:	a021883a 	mov	r16,r20
  805c6c:	1d07c83a 	sub	r3,r3,r20
  805c70:	1505883a 	add	r2,r2,r20
  805c74:	a023883a 	mov	r17,r20
  805c78:	a027883a 	mov	r19,r20
  805c7c:	90c00215 	stw	r3,8(r18)
  805c80:	90800015 	stw	r2,0(r18)
  805c84:	003f8006 	br	805a88 <__sfvwrite_r+0x200>
  805c88:	b809883a 	mov	r4,r23
  805c8c:	01400284 	movi	r5,10
  805c90:	980d883a 	mov	r6,r19
  805c94:	080683c0 	call	80683c <memchr>
  805c98:	10001726 	beq	r2,zero,805cf8 <__sfvwrite_r+0x470>
  805c9c:	15c5c83a 	sub	r2,r2,r23
  805ca0:	15000044 	addi	r20,r2,1
  805ca4:	00800044 	movi	r2,1
  805ca8:	d8800015 	stw	r2,0(sp)
  805cac:	003f9806 	br	805b10 <__sfvwrite_r+0x288>
  805cb0:	b80b883a 	mov	r5,r23
  805cb4:	800d883a 	mov	r6,r16
  805cb8:	08069c00 	call	8069c0 <memmove>
  805cbc:	90c00017 	ldw	r3,0(r18)
  805cc0:	e009883a 	mov	r4,fp
  805cc4:	900b883a 	mov	r5,r18
  805cc8:	1c07883a 	add	r3,r3,r16
  805ccc:	90c00015 	stw	r3,0(r18)
  805cd0:	8027883a 	mov	r19,r16
  805cd4:	0804f240 	call	804f24 <_fflush_r>
  805cd8:	103f6b26 	beq	r2,zero,805a88 <__sfvwrite_r+0x200>
  805cdc:	003f7f06 	br	805adc <__sfvwrite_r+0x254>
  805ce0:	400b883a 	mov	r5,r8
  805ce4:	e009883a 	mov	r4,fp
  805ce8:	0807bc40 	call	807bc4 <_realloc_r>
  805cec:	103f7626 	beq	r2,zero,805ac8 <__sfvwrite_r+0x240>
  805cf0:	1023883a 	mov	r17,r2
  805cf4:	003f5006 	br	805a38 <__sfvwrite_r+0x1b0>
  805cf8:	00c00044 	movi	r3,1
  805cfc:	9d000044 	addi	r20,r19,1
  805d00:	d8c00015 	stw	r3,0(sp)
  805d04:	003f8206 	br	805b10 <__sfvwrite_r+0x288>
  805d08:	9080030b 	ldhu	r2,12(r18)
  805d0c:	00c00244 	movi	r3,9
  805d10:	013fffc4 	movi	r4,-1
  805d14:	10801014 	ori	r2,r2,64
  805d18:	9080030d 	sth	r2,12(r18)
  805d1c:	e0c00015 	stw	r3,0(fp)
  805d20:	003f0606 	br	80593c <__sfvwrite_r+0xb4>

00805d24 <_fwalk_reent>:
  805d24:	defff704 	addi	sp,sp,-36
  805d28:	dcc00315 	stw	r19,12(sp)
  805d2c:	24c0b804 	addi	r19,r4,736
  805d30:	dd800615 	stw	r22,24(sp)
  805d34:	dd400515 	stw	r21,20(sp)
  805d38:	dfc00815 	stw	ra,32(sp)
  805d3c:	ddc00715 	stw	r23,28(sp)
  805d40:	dd000415 	stw	r20,16(sp)
  805d44:	dc800215 	stw	r18,8(sp)
  805d48:	dc400115 	stw	r17,4(sp)
  805d4c:	dc000015 	stw	r16,0(sp)
  805d50:	202b883a 	mov	r21,r4
  805d54:	282d883a 	mov	r22,r5
  805d58:	08051ac0 	call	8051ac <__sfp_lock_acquire>
  805d5c:	98002126 	beq	r19,zero,805de4 <_fwalk_reent+0xc0>
  805d60:	002f883a 	mov	r23,zero
  805d64:	9c800117 	ldw	r18,4(r19)
  805d68:	9c000217 	ldw	r16,8(r19)
  805d6c:	90bfffc4 	addi	r2,r18,-1
  805d70:	10000d16 	blt	r2,zero,805da8 <_fwalk_reent+0x84>
  805d74:	0023883a 	mov	r17,zero
  805d78:	053fffc4 	movi	r20,-1
  805d7c:	8080030f 	ldh	r2,12(r16)
  805d80:	8c400044 	addi	r17,r17,1
  805d84:	10000626 	beq	r2,zero,805da0 <_fwalk_reent+0x7c>
  805d88:	8080038f 	ldh	r2,14(r16)
  805d8c:	800b883a 	mov	r5,r16
  805d90:	a809883a 	mov	r4,r21
  805d94:	15000226 	beq	r2,r20,805da0 <_fwalk_reent+0x7c>
  805d98:	b03ee83a 	callr	r22
  805d9c:	b8aeb03a 	or	r23,r23,r2
  805da0:	84001704 	addi	r16,r16,92
  805da4:	947ff51e 	bne	r18,r17,805d7c <_fwalk_reent+0x58>
  805da8:	9cc00017 	ldw	r19,0(r19)
  805dac:	983fed1e 	bne	r19,zero,805d64 <_fwalk_reent+0x40>
  805db0:	08051b00 	call	8051b0 <__sfp_lock_release>
  805db4:	b805883a 	mov	r2,r23
  805db8:	dfc00817 	ldw	ra,32(sp)
  805dbc:	ddc00717 	ldw	r23,28(sp)
  805dc0:	dd800617 	ldw	r22,24(sp)
  805dc4:	dd400517 	ldw	r21,20(sp)
  805dc8:	dd000417 	ldw	r20,16(sp)
  805dcc:	dcc00317 	ldw	r19,12(sp)
  805dd0:	dc800217 	ldw	r18,8(sp)
  805dd4:	dc400117 	ldw	r17,4(sp)
  805dd8:	dc000017 	ldw	r16,0(sp)
  805ddc:	dec00904 	addi	sp,sp,36
  805de0:	f800283a 	ret
  805de4:	002f883a 	mov	r23,zero
  805de8:	003ff106 	br	805db0 <_fwalk_reent+0x8c>

00805dec <_fwalk>:
  805dec:	defff804 	addi	sp,sp,-32
  805df0:	dcc00315 	stw	r19,12(sp)
  805df4:	24c0b804 	addi	r19,r4,736
  805df8:	dd400515 	stw	r21,20(sp)
  805dfc:	dfc00715 	stw	ra,28(sp)
  805e00:	dd800615 	stw	r22,24(sp)
  805e04:	dd000415 	stw	r20,16(sp)
  805e08:	dc800215 	stw	r18,8(sp)
  805e0c:	dc400115 	stw	r17,4(sp)
  805e10:	dc000015 	stw	r16,0(sp)
  805e14:	282b883a 	mov	r21,r5
  805e18:	08051ac0 	call	8051ac <__sfp_lock_acquire>
  805e1c:	98001f26 	beq	r19,zero,805e9c <_fwalk+0xb0>
  805e20:	002d883a 	mov	r22,zero
  805e24:	9c800117 	ldw	r18,4(r19)
  805e28:	9c000217 	ldw	r16,8(r19)
  805e2c:	90bfffc4 	addi	r2,r18,-1
  805e30:	10000c16 	blt	r2,zero,805e64 <_fwalk+0x78>
  805e34:	0023883a 	mov	r17,zero
  805e38:	053fffc4 	movi	r20,-1
  805e3c:	8080030f 	ldh	r2,12(r16)
  805e40:	8c400044 	addi	r17,r17,1
  805e44:	10000526 	beq	r2,zero,805e5c <_fwalk+0x70>
  805e48:	8080038f 	ldh	r2,14(r16)
  805e4c:	8009883a 	mov	r4,r16
  805e50:	15000226 	beq	r2,r20,805e5c <_fwalk+0x70>
  805e54:	a83ee83a 	callr	r21
  805e58:	b0acb03a 	or	r22,r22,r2
  805e5c:	84001704 	addi	r16,r16,92
  805e60:	947ff61e 	bne	r18,r17,805e3c <_fwalk+0x50>
  805e64:	9cc00017 	ldw	r19,0(r19)
  805e68:	983fee1e 	bne	r19,zero,805e24 <_fwalk+0x38>
  805e6c:	08051b00 	call	8051b0 <__sfp_lock_release>
  805e70:	b005883a 	mov	r2,r22
  805e74:	dfc00717 	ldw	ra,28(sp)
  805e78:	dd800617 	ldw	r22,24(sp)
  805e7c:	dd400517 	ldw	r21,20(sp)
  805e80:	dd000417 	ldw	r20,16(sp)
  805e84:	dcc00317 	ldw	r19,12(sp)
  805e88:	dc800217 	ldw	r18,8(sp)
  805e8c:	dc400117 	ldw	r17,4(sp)
  805e90:	dc000017 	ldw	r16,0(sp)
  805e94:	dec00804 	addi	sp,sp,32
  805e98:	f800283a 	ret
  805e9c:	002d883a 	mov	r22,zero
  805ea0:	003ff206 	br	805e6c <_fwalk+0x80>

00805ea4 <__locale_charset>:
  805ea4:	d0a00317 	ldw	r2,-32756(gp)
  805ea8:	f800283a 	ret

00805eac <_localeconv_r>:
  805eac:	00802074 	movhi	r2,129
  805eb0:	10b50f04 	addi	r2,r2,-11204
  805eb4:	f800283a 	ret

00805eb8 <localeconv>:
  805eb8:	00802074 	movhi	r2,129
  805ebc:	10bbf804 	addi	r2,r2,-4128
  805ec0:	11000017 	ldw	r4,0(r2)
  805ec4:	0805eac1 	jmpi	805eac <_localeconv_r>

00805ec8 <_setlocale_r>:
  805ec8:	defffc04 	addi	sp,sp,-16
  805ecc:	00c02074 	movhi	r3,129
  805ed0:	18f50a04 	addi	r3,r3,-11224
  805ed4:	dc800215 	stw	r18,8(sp)
  805ed8:	dc400115 	stw	r17,4(sp)
  805edc:	dc000015 	stw	r16,0(sp)
  805ee0:	2023883a 	mov	r17,r4
  805ee4:	2825883a 	mov	r18,r5
  805ee8:	dfc00315 	stw	ra,12(sp)
  805eec:	3021883a 	mov	r16,r6
  805ef0:	3009883a 	mov	r4,r6
  805ef4:	180b883a 	mov	r5,r3
  805ef8:	30000926 	beq	r6,zero,805f20 <_setlocale_r+0x58>
  805efc:	08083e40 	call	8083e4 <strcmp>
  805f00:	8009883a 	mov	r4,r16
  805f04:	01402074 	movhi	r5,129
  805f08:	2974f504 	addi	r5,r5,-11308
  805f0c:	10000b1e 	bne	r2,zero,805f3c <_setlocale_r+0x74>
  805f10:	8c000d15 	stw	r16,52(r17)
  805f14:	8c800c15 	stw	r18,48(r17)
  805f18:	00c02074 	movhi	r3,129
  805f1c:	18f50a04 	addi	r3,r3,-11224
  805f20:	1805883a 	mov	r2,r3
  805f24:	dfc00317 	ldw	ra,12(sp)
  805f28:	dc800217 	ldw	r18,8(sp)
  805f2c:	dc400117 	ldw	r17,4(sp)
  805f30:	dc000017 	ldw	r16,0(sp)
  805f34:	dec00404 	addi	sp,sp,16
  805f38:	f800283a 	ret
  805f3c:	08083e40 	call	8083e4 <strcmp>
  805f40:	0007883a 	mov	r3,zero
  805f44:	103ff226 	beq	r2,zero,805f10 <_setlocale_r+0x48>
  805f48:	003ff506 	br	805f20 <_setlocale_r+0x58>

00805f4c <setlocale>:
  805f4c:	01802074 	movhi	r6,129
  805f50:	31bbf804 	addi	r6,r6,-4128
  805f54:	2007883a 	mov	r3,r4
  805f58:	31000017 	ldw	r4,0(r6)
  805f5c:	280d883a 	mov	r6,r5
  805f60:	180b883a 	mov	r5,r3
  805f64:	0805ec81 	jmpi	805ec8 <_setlocale_r>

00805f68 <__smakebuf_r>:
  805f68:	2880030b 	ldhu	r2,12(r5)
  805f6c:	deffed04 	addi	sp,sp,-76
  805f70:	dc401015 	stw	r17,64(sp)
  805f74:	1080008c 	andi	r2,r2,2
  805f78:	dc000f15 	stw	r16,60(sp)
  805f7c:	dfc01215 	stw	ra,72(sp)
  805f80:	dc801115 	stw	r18,68(sp)
  805f84:	2821883a 	mov	r16,r5
  805f88:	2023883a 	mov	r17,r4
  805f8c:	10000b26 	beq	r2,zero,805fbc <__smakebuf_r+0x54>
  805f90:	28c010c4 	addi	r3,r5,67
  805f94:	00800044 	movi	r2,1
  805f98:	28800515 	stw	r2,20(r5)
  805f9c:	28c00415 	stw	r3,16(r5)
  805fa0:	28c00015 	stw	r3,0(r5)
  805fa4:	dfc01217 	ldw	ra,72(sp)
  805fa8:	dc801117 	ldw	r18,68(sp)
  805fac:	dc401017 	ldw	r17,64(sp)
  805fb0:	dc000f17 	ldw	r16,60(sp)
  805fb4:	dec01304 	addi	sp,sp,76
  805fb8:	f800283a 	ret
  805fbc:	2940038f 	ldh	r5,14(r5)
  805fc0:	28002116 	blt	r5,zero,806048 <__smakebuf_r+0xe0>
  805fc4:	d80d883a 	mov	r6,sp
  805fc8:	08087e80 	call	8087e8 <_fstat_r>
  805fcc:	10001e16 	blt	r2,zero,806048 <__smakebuf_r+0xe0>
  805fd0:	d8800117 	ldw	r2,4(sp)
  805fd4:	00e00014 	movui	r3,32768
  805fd8:	113c000c 	andi	r4,r2,61440
  805fdc:	20c03126 	beq	r4,r3,8060a4 <__smakebuf_r+0x13c>
  805fe0:	8080030b 	ldhu	r2,12(r16)
  805fe4:	00c80004 	movi	r3,8192
  805fe8:	10820014 	ori	r2,r2,2048
  805fec:	8080030d 	sth	r2,12(r16)
  805ff0:	20c01e26 	beq	r4,r3,80606c <__smakebuf_r+0x104>
  805ff4:	04810004 	movi	r18,1024
  805ff8:	8809883a 	mov	r4,r17
  805ffc:	900b883a 	mov	r5,r18
  806000:	08060fc0 	call	8060fc <_malloc_r>
  806004:	1009883a 	mov	r4,r2
  806008:	10003126 	beq	r2,zero,8060d0 <__smakebuf_r+0x168>
  80600c:	80c0030b 	ldhu	r3,12(r16)
  806010:	00802034 	movhi	r2,128
  806014:	1094a804 	addi	r2,r2,21152
  806018:	88800f15 	stw	r2,60(r17)
  80601c:	18c02014 	ori	r3,r3,128
  806020:	84800515 	stw	r18,20(r16)
  806024:	80c0030d 	sth	r3,12(r16)
  806028:	81000415 	stw	r4,16(r16)
  80602c:	81000015 	stw	r4,0(r16)
  806030:	dfc01217 	ldw	ra,72(sp)
  806034:	dc801117 	ldw	r18,68(sp)
  806038:	dc401017 	ldw	r17,64(sp)
  80603c:	dc000f17 	ldw	r16,60(sp)
  806040:	dec01304 	addi	sp,sp,76
  806044:	f800283a 	ret
  806048:	80c0030b 	ldhu	r3,12(r16)
  80604c:	1880200c 	andi	r2,r3,128
  806050:	10000426 	beq	r2,zero,806064 <__smakebuf_r+0xfc>
  806054:	04801004 	movi	r18,64
  806058:	18820014 	ori	r2,r3,2048
  80605c:	8080030d 	sth	r2,12(r16)
  806060:	003fe506 	br	805ff8 <__smakebuf_r+0x90>
  806064:	04810004 	movi	r18,1024
  806068:	003ffb06 	br	806058 <__smakebuf_r+0xf0>
  80606c:	8140038f 	ldh	r5,14(r16)
  806070:	8809883a 	mov	r4,r17
  806074:	080885c0 	call	80885c <_isatty_r>
  806078:	103fde26 	beq	r2,zero,805ff4 <__smakebuf_r+0x8c>
  80607c:	8080030b 	ldhu	r2,12(r16)
  806080:	80c010c4 	addi	r3,r16,67
  806084:	04810004 	movi	r18,1024
  806088:	10800054 	ori	r2,r2,1
  80608c:	8080030d 	sth	r2,12(r16)
  806090:	00800044 	movi	r2,1
  806094:	80c00415 	stw	r3,16(r16)
  806098:	80800515 	stw	r2,20(r16)
  80609c:	80c00015 	stw	r3,0(r16)
  8060a0:	003fd506 	br	805ff8 <__smakebuf_r+0x90>
  8060a4:	80c00a17 	ldw	r3,40(r16)
  8060a8:	00802074 	movhi	r2,129
  8060ac:	10a0a804 	addi	r2,r2,-32096
  8060b0:	18bfcb1e 	bne	r3,r2,805fe0 <__smakebuf_r+0x78>
  8060b4:	8080030b 	ldhu	r2,12(r16)
  8060b8:	00c10004 	movi	r3,1024
  8060bc:	1825883a 	mov	r18,r3
  8060c0:	10c4b03a 	or	r2,r2,r3
  8060c4:	8080030d 	sth	r2,12(r16)
  8060c8:	80c01315 	stw	r3,76(r16)
  8060cc:	003fca06 	br	805ff8 <__smakebuf_r+0x90>
  8060d0:	8100030b 	ldhu	r4,12(r16)
  8060d4:	2080800c 	andi	r2,r4,512
  8060d8:	103fb21e 	bne	r2,zero,805fa4 <__smakebuf_r+0x3c>
  8060dc:	80c010c4 	addi	r3,r16,67
  8060e0:	21000094 	ori	r4,r4,2
  8060e4:	00800044 	movi	r2,1
  8060e8:	80800515 	stw	r2,20(r16)
  8060ec:	8100030d 	sth	r4,12(r16)
  8060f0:	80c00415 	stw	r3,16(r16)
  8060f4:	80c00015 	stw	r3,0(r16)
  8060f8:	003faa06 	br	805fa4 <__smakebuf_r+0x3c>

008060fc <_malloc_r>:
  8060fc:	defff604 	addi	sp,sp,-40
  806100:	28c002c4 	addi	r3,r5,11
  806104:	00800584 	movi	r2,22
  806108:	dc800215 	stw	r18,8(sp)
  80610c:	dfc00915 	stw	ra,36(sp)
  806110:	df000815 	stw	fp,32(sp)
  806114:	ddc00715 	stw	r23,28(sp)
  806118:	dd800615 	stw	r22,24(sp)
  80611c:	dd400515 	stw	r21,20(sp)
  806120:	dd000415 	stw	r20,16(sp)
  806124:	dcc00315 	stw	r19,12(sp)
  806128:	dc400115 	stw	r17,4(sp)
  80612c:	dc000015 	stw	r16,0(sp)
  806130:	2025883a 	mov	r18,r4
  806134:	10c01236 	bltu	r2,r3,806180 <_malloc_r+0x84>
  806138:	04400404 	movi	r17,16
  80613c:	8940142e 	bgeu	r17,r5,806190 <_malloc_r+0x94>
  806140:	00800304 	movi	r2,12
  806144:	0007883a 	mov	r3,zero
  806148:	90800015 	stw	r2,0(r18)
  80614c:	1805883a 	mov	r2,r3
  806150:	dfc00917 	ldw	ra,36(sp)
  806154:	df000817 	ldw	fp,32(sp)
  806158:	ddc00717 	ldw	r23,28(sp)
  80615c:	dd800617 	ldw	r22,24(sp)
  806160:	dd400517 	ldw	r21,20(sp)
  806164:	dd000417 	ldw	r20,16(sp)
  806168:	dcc00317 	ldw	r19,12(sp)
  80616c:	dc800217 	ldw	r18,8(sp)
  806170:	dc400117 	ldw	r17,4(sp)
  806174:	dc000017 	ldw	r16,0(sp)
  806178:	dec00a04 	addi	sp,sp,40
  80617c:	f800283a 	ret
  806180:	00bffe04 	movi	r2,-8
  806184:	18a2703a 	and	r17,r3,r2
  806188:	883fed16 	blt	r17,zero,806140 <_malloc_r+0x44>
  80618c:	897fec36 	bltu	r17,r5,806140 <_malloc_r+0x44>
  806190:	9009883a 	mov	r4,r18
  806194:	080acb80 	call	80acb8 <__malloc_lock>
  806198:	00807dc4 	movi	r2,503
  80619c:	14402b2e 	bgeu	r2,r17,80624c <_malloc_r+0x150>
  8061a0:	8806d27a 	srli	r3,r17,9
  8061a4:	18003f1e 	bne	r3,zero,8062a4 <_malloc_r+0x1a8>
  8061a8:	880cd0fa 	srli	r6,r17,3
  8061ac:	300490fa 	slli	r2,r6,3
  8061b0:	02c02074 	movhi	r11,129
  8061b4:	5af67404 	addi	r11,r11,-9776
  8061b8:	12cb883a 	add	r5,r2,r11
  8061bc:	2c000317 	ldw	r16,12(r5)
  8061c0:	580f883a 	mov	r7,r11
  8061c4:	2c00041e 	bne	r5,r16,8061d8 <_malloc_r+0xdc>
  8061c8:	00000a06 	br	8061f4 <_malloc_r+0xf8>
  8061cc:	1800860e 	bge	r3,zero,8063e8 <_malloc_r+0x2ec>
  8061d0:	84000317 	ldw	r16,12(r16)
  8061d4:	2c000726 	beq	r5,r16,8061f4 <_malloc_r+0xf8>
  8061d8:	80800117 	ldw	r2,4(r16)
  8061dc:	00ffff04 	movi	r3,-4
  8061e0:	10c8703a 	and	r4,r2,r3
  8061e4:	2447c83a 	sub	r3,r4,r17
  8061e8:	008003c4 	movi	r2,15
  8061ec:	10fff70e 	bge	r2,r3,8061cc <_malloc_r+0xd0>
  8061f0:	31bfffc4 	addi	r6,r6,-1
  8061f4:	32400044 	addi	r9,r6,1
  8061f8:	02802074 	movhi	r10,129
  8061fc:	52b67604 	addi	r10,r10,-9768
  806200:	54000217 	ldw	r16,8(r10)
  806204:	8280a026 	beq	r16,r10,806488 <_malloc_r+0x38c>
  806208:	80800117 	ldw	r2,4(r16)
  80620c:	00ffff04 	movi	r3,-4
  806210:	10ca703a 	and	r5,r2,r3
  806214:	2c4dc83a 	sub	r6,r5,r17
  806218:	008003c4 	movi	r2,15
  80621c:	11808316 	blt	r2,r6,80642c <_malloc_r+0x330>
  806220:	52800315 	stw	r10,12(r10)
  806224:	52800215 	stw	r10,8(r10)
  806228:	30002916 	blt	r6,zero,8062d0 <_malloc_r+0x1d4>
  80622c:	8147883a 	add	r3,r16,r5
  806230:	18800117 	ldw	r2,4(r3)
  806234:	9009883a 	mov	r4,r18
  806238:	10800054 	ori	r2,r2,1
  80623c:	18800115 	stw	r2,4(r3)
  806240:	080acd80 	call	80acd8 <__malloc_unlock>
  806244:	80c00204 	addi	r3,r16,8
  806248:	003fc006 	br	80614c <_malloc_r+0x50>
  80624c:	02c02074 	movhi	r11,129
  806250:	5af67404 	addi	r11,r11,-9776
  806254:	8ac5883a 	add	r2,r17,r11
  806258:	14000317 	ldw	r16,12(r2)
  80625c:	580f883a 	mov	r7,r11
  806260:	8806d0fa 	srli	r3,r17,3
  806264:	14006c26 	beq	r2,r16,806418 <_malloc_r+0x31c>
  806268:	80c00117 	ldw	r3,4(r16)
  80626c:	00bfff04 	movi	r2,-4
  806270:	81800317 	ldw	r6,12(r16)
  806274:	1886703a 	and	r3,r3,r2
  806278:	80c7883a 	add	r3,r16,r3
  80627c:	18800117 	ldw	r2,4(r3)
  806280:	81400217 	ldw	r5,8(r16)
  806284:	9009883a 	mov	r4,r18
  806288:	10800054 	ori	r2,r2,1
  80628c:	18800115 	stw	r2,4(r3)
  806290:	31400215 	stw	r5,8(r6)
  806294:	29800315 	stw	r6,12(r5)
  806298:	080acd80 	call	80acd8 <__malloc_unlock>
  80629c:	80c00204 	addi	r3,r16,8
  8062a0:	003faa06 	br	80614c <_malloc_r+0x50>
  8062a4:	00800104 	movi	r2,4
  8062a8:	10c0052e 	bgeu	r2,r3,8062c0 <_malloc_r+0x1c4>
  8062ac:	00800504 	movi	r2,20
  8062b0:	10c07836 	bltu	r2,r3,806494 <_malloc_r+0x398>
  8062b4:	198016c4 	addi	r6,r3,91
  8062b8:	300490fa 	slli	r2,r6,3
  8062bc:	003fbc06 	br	8061b0 <_malloc_r+0xb4>
  8062c0:	8804d1ba 	srli	r2,r17,6
  8062c4:	11800e04 	addi	r6,r2,56
  8062c8:	300490fa 	slli	r2,r6,3
  8062cc:	003fb806 	br	8061b0 <_malloc_r+0xb4>
  8062d0:	00807fc4 	movi	r2,511
  8062d4:	1140bb36 	bltu	r2,r5,8065c4 <_malloc_r+0x4c8>
  8062d8:	2806d0fa 	srli	r3,r5,3
  8062dc:	573ffe04 	addi	fp,r10,-8
  8062e0:	00800044 	movi	r2,1
  8062e4:	180890fa 	slli	r4,r3,3
  8062e8:	1807d0ba 	srai	r3,r3,2
  8062ec:	e1c00117 	ldw	r7,4(fp)
  8062f0:	5909883a 	add	r4,r11,r4
  8062f4:	21400217 	ldw	r5,8(r4)
  8062f8:	10c4983a 	sll	r2,r2,r3
  8062fc:	81000315 	stw	r4,12(r16)
  806300:	81400215 	stw	r5,8(r16)
  806304:	388eb03a 	or	r7,r7,r2
  806308:	2c000315 	stw	r16,12(r5)
  80630c:	24000215 	stw	r16,8(r4)
  806310:	e1c00115 	stw	r7,4(fp)
  806314:	4807883a 	mov	r3,r9
  806318:	4800cd16 	blt	r9,zero,806650 <_malloc_r+0x554>
  80631c:	1807d0ba 	srai	r3,r3,2
  806320:	00800044 	movi	r2,1
  806324:	10c8983a 	sll	r4,r2,r3
  806328:	39004436 	bltu	r7,r4,80643c <_malloc_r+0x340>
  80632c:	21c4703a 	and	r2,r4,r7
  806330:	10000a1e 	bne	r2,zero,80635c <_malloc_r+0x260>
  806334:	2109883a 	add	r4,r4,r4
  806338:	00bfff04 	movi	r2,-4
  80633c:	4884703a 	and	r2,r9,r2
  806340:	3906703a 	and	r3,r7,r4
  806344:	12400104 	addi	r9,r2,4
  806348:	1800041e 	bne	r3,zero,80635c <_malloc_r+0x260>
  80634c:	2109883a 	add	r4,r4,r4
  806350:	3904703a 	and	r2,r7,r4
  806354:	4a400104 	addi	r9,r9,4
  806358:	103ffc26 	beq	r2,zero,80634c <_malloc_r+0x250>
  80635c:	480490fa 	slli	r2,r9,3
  806360:	4819883a 	mov	r12,r9
  806364:	023fff04 	movi	r8,-4
  806368:	589b883a 	add	r13,r11,r2
  80636c:	6807883a 	mov	r3,r13
  806370:	014003c4 	movi	r5,15
  806374:	1c000317 	ldw	r16,12(r3)
  806378:	1c00041e 	bne	r3,r16,80638c <_malloc_r+0x290>
  80637c:	0000a706 	br	80661c <_malloc_r+0x520>
  806380:	3000ab0e 	bge	r6,zero,806630 <_malloc_r+0x534>
  806384:	84000317 	ldw	r16,12(r16)
  806388:	1c00a426 	beq	r3,r16,80661c <_malloc_r+0x520>
  80638c:	80800117 	ldw	r2,4(r16)
  806390:	1204703a 	and	r2,r2,r8
  806394:	144dc83a 	sub	r6,r2,r17
  806398:	29bff90e 	bge	r5,r6,806380 <_malloc_r+0x284>
  80639c:	81000317 	ldw	r4,12(r16)
  8063a0:	80c00217 	ldw	r3,8(r16)
  8063a4:	89400054 	ori	r5,r17,1
  8063a8:	8445883a 	add	r2,r16,r17
  8063ac:	20c00215 	stw	r3,8(r4)
  8063b0:	19000315 	stw	r4,12(r3)
  8063b4:	81400115 	stw	r5,4(r16)
  8063b8:	1187883a 	add	r3,r2,r6
  8063bc:	31000054 	ori	r4,r6,1
  8063c0:	50800315 	stw	r2,12(r10)
  8063c4:	50800215 	stw	r2,8(r10)
  8063c8:	19800015 	stw	r6,0(r3)
  8063cc:	11000115 	stw	r4,4(r2)
  8063d0:	12800215 	stw	r10,8(r2)
  8063d4:	12800315 	stw	r10,12(r2)
  8063d8:	9009883a 	mov	r4,r18
  8063dc:	080acd80 	call	80acd8 <__malloc_unlock>
  8063e0:	80c00204 	addi	r3,r16,8
  8063e4:	003f5906 	br	80614c <_malloc_r+0x50>
  8063e8:	8109883a 	add	r4,r16,r4
  8063ec:	20800117 	ldw	r2,4(r4)
  8063f0:	80c00217 	ldw	r3,8(r16)
  8063f4:	81400317 	ldw	r5,12(r16)
  8063f8:	10800054 	ori	r2,r2,1
  8063fc:	20800115 	stw	r2,4(r4)
  806400:	28c00215 	stw	r3,8(r5)
  806404:	19400315 	stw	r5,12(r3)
  806408:	9009883a 	mov	r4,r18
  80640c:	080acd80 	call	80acd8 <__malloc_unlock>
  806410:	80c00204 	addi	r3,r16,8
  806414:	003f4d06 	br	80614c <_malloc_r+0x50>
  806418:	80800204 	addi	r2,r16,8
  80641c:	14000317 	ldw	r16,12(r2)
  806420:	143f911e 	bne	r2,r16,806268 <_malloc_r+0x16c>
  806424:	1a400084 	addi	r9,r3,2
  806428:	003f7306 	br	8061f8 <_malloc_r+0xfc>
  80642c:	88c00054 	ori	r3,r17,1
  806430:	8445883a 	add	r2,r16,r17
  806434:	80c00115 	stw	r3,4(r16)
  806438:	003fdf06 	br	8063b8 <_malloc_r+0x2bc>
  80643c:	e4000217 	ldw	r16,8(fp)
  806440:	00bfff04 	movi	r2,-4
  806444:	80c00117 	ldw	r3,4(r16)
  806448:	802d883a 	mov	r22,r16
  80644c:	18aa703a 	and	r21,r3,r2
  806450:	ac401636 	bltu	r21,r17,8064ac <_malloc_r+0x3b0>
  806454:	ac49c83a 	sub	r4,r21,r17
  806458:	008003c4 	movi	r2,15
  80645c:	1100130e 	bge	r2,r4,8064ac <_malloc_r+0x3b0>
  806460:	88800054 	ori	r2,r17,1
  806464:	8447883a 	add	r3,r16,r17
  806468:	80800115 	stw	r2,4(r16)
  80646c:	20800054 	ori	r2,r4,1
  806470:	18800115 	stw	r2,4(r3)
  806474:	e0c00215 	stw	r3,8(fp)
  806478:	9009883a 	mov	r4,r18
  80647c:	080acd80 	call	80acd8 <__malloc_unlock>
  806480:	80c00204 	addi	r3,r16,8
  806484:	003f3106 	br	80614c <_malloc_r+0x50>
  806488:	39c00117 	ldw	r7,4(r7)
  80648c:	573ffe04 	addi	fp,r10,-8
  806490:	003fa006 	br	806314 <_malloc_r+0x218>
  806494:	00801504 	movi	r2,84
  806498:	10c06736 	bltu	r2,r3,806638 <_malloc_r+0x53c>
  80649c:	8804d33a 	srli	r2,r17,12
  8064a0:	11801b84 	addi	r6,r2,110
  8064a4:	300490fa 	slli	r2,r6,3
  8064a8:	003f4106 	br	8061b0 <_malloc_r+0xb4>
  8064ac:	d0a6ae17 	ldw	r2,-25928(gp)
  8064b0:	d0e00517 	ldw	r3,-32748(gp)
  8064b4:	053fffc4 	movi	r20,-1
  8064b8:	10800404 	addi	r2,r2,16
  8064bc:	88a7883a 	add	r19,r17,r2
  8064c0:	1d000326 	beq	r3,r20,8064d0 <_malloc_r+0x3d4>
  8064c4:	98c3ffc4 	addi	r3,r19,4095
  8064c8:	00bc0004 	movi	r2,-4096
  8064cc:	18a6703a 	and	r19,r3,r2
  8064d0:	9009883a 	mov	r4,r18
  8064d4:	980b883a 	mov	r5,r19
  8064d8:	08082280 	call	808228 <_sbrk_r>
  8064dc:	1009883a 	mov	r4,r2
  8064e0:	15000426 	beq	r2,r20,8064f4 <_malloc_r+0x3f8>
  8064e4:	854b883a 	add	r5,r16,r21
  8064e8:	1029883a 	mov	r20,r2
  8064ec:	11405a2e 	bgeu	r2,r5,806658 <_malloc_r+0x55c>
  8064f0:	87000c26 	beq	r16,fp,806524 <_malloc_r+0x428>
  8064f4:	e4000217 	ldw	r16,8(fp)
  8064f8:	80c00117 	ldw	r3,4(r16)
  8064fc:	00bfff04 	movi	r2,-4
  806500:	1884703a 	and	r2,r3,r2
  806504:	14400336 	bltu	r2,r17,806514 <_malloc_r+0x418>
  806508:	1449c83a 	sub	r4,r2,r17
  80650c:	008003c4 	movi	r2,15
  806510:	113fd316 	blt	r2,r4,806460 <_malloc_r+0x364>
  806514:	9009883a 	mov	r4,r18
  806518:	080acd80 	call	80acd8 <__malloc_unlock>
  80651c:	0007883a 	mov	r3,zero
  806520:	003f0a06 	br	80614c <_malloc_r+0x50>
  806524:	05c02074 	movhi	r23,129
  806528:	bdc2b204 	addi	r23,r23,2760
  80652c:	b8800017 	ldw	r2,0(r23)
  806530:	988d883a 	add	r6,r19,r2
  806534:	b9800015 	stw	r6,0(r23)
  806538:	d0e00517 	ldw	r3,-32748(gp)
  80653c:	00bfffc4 	movi	r2,-1
  806540:	18808e26 	beq	r3,r2,80677c <_malloc_r+0x680>
  806544:	2145c83a 	sub	r2,r4,r5
  806548:	3085883a 	add	r2,r6,r2
  80654c:	b8800015 	stw	r2,0(r23)
  806550:	20c001cc 	andi	r3,r4,7
  806554:	18005f1e 	bne	r3,zero,8066d4 <_malloc_r+0x5d8>
  806558:	000b883a 	mov	r5,zero
  80655c:	a4c5883a 	add	r2,r20,r19
  806560:	1083ffcc 	andi	r2,r2,4095
  806564:	00c40004 	movi	r3,4096
  806568:	1887c83a 	sub	r3,r3,r2
  80656c:	28e7883a 	add	r19,r5,r3
  806570:	9009883a 	mov	r4,r18
  806574:	980b883a 	mov	r5,r19
  806578:	08082280 	call	808228 <_sbrk_r>
  80657c:	1007883a 	mov	r3,r2
  806580:	00bfffc4 	movi	r2,-1
  806584:	18807a26 	beq	r3,r2,806770 <_malloc_r+0x674>
  806588:	1d05c83a 	sub	r2,r3,r20
  80658c:	9885883a 	add	r2,r19,r2
  806590:	10c00054 	ori	r3,r2,1
  806594:	b8800017 	ldw	r2,0(r23)
  806598:	a021883a 	mov	r16,r20
  80659c:	a0c00115 	stw	r3,4(r20)
  8065a0:	9885883a 	add	r2,r19,r2
  8065a4:	b8800015 	stw	r2,0(r23)
  8065a8:	e5000215 	stw	r20,8(fp)
  8065ac:	b7003626 	beq	r22,fp,806688 <_malloc_r+0x58c>
  8065b0:	018003c4 	movi	r6,15
  8065b4:	35404b36 	bltu	r6,r21,8066e4 <_malloc_r+0x5e8>
  8065b8:	00800044 	movi	r2,1
  8065bc:	a0800115 	stw	r2,4(r20)
  8065c0:	003fcd06 	br	8064f8 <_malloc_r+0x3fc>
  8065c4:	2808d27a 	srli	r4,r5,9
  8065c8:	2000371e 	bne	r4,zero,8066a8 <_malloc_r+0x5ac>
  8065cc:	2808d0fa 	srli	r4,r5,3
  8065d0:	200690fa 	slli	r3,r4,3
  8065d4:	1ad1883a 	add	r8,r3,r11
  8065d8:	41800217 	ldw	r6,8(r8)
  8065dc:	41805b26 	beq	r8,r6,80674c <_malloc_r+0x650>
  8065e0:	30800117 	ldw	r2,4(r6)
  8065e4:	00ffff04 	movi	r3,-4
  8065e8:	10c4703a 	and	r2,r2,r3
  8065ec:	2880022e 	bgeu	r5,r2,8065f8 <_malloc_r+0x4fc>
  8065f0:	31800217 	ldw	r6,8(r6)
  8065f4:	41bffa1e 	bne	r8,r6,8065e0 <_malloc_r+0x4e4>
  8065f8:	32000317 	ldw	r8,12(r6)
  8065fc:	39c00117 	ldw	r7,4(r7)
  806600:	82000315 	stw	r8,12(r16)
  806604:	81800215 	stw	r6,8(r16)
  806608:	07002074 	movhi	fp,129
  80660c:	e7367404 	addi	fp,fp,-9776
  806610:	34000315 	stw	r16,12(r6)
  806614:	44000215 	stw	r16,8(r8)
  806618:	003f3e06 	br	806314 <_malloc_r+0x218>
  80661c:	63000044 	addi	r12,r12,1
  806620:	608000cc 	andi	r2,r12,3
  806624:	10005d26 	beq	r2,zero,80679c <_malloc_r+0x6a0>
  806628:	18c00204 	addi	r3,r3,8
  80662c:	003f5106 	br	806374 <_malloc_r+0x278>
  806630:	8089883a 	add	r4,r16,r2
  806634:	003f6d06 	br	8063ec <_malloc_r+0x2f0>
  806638:	00805504 	movi	r2,340
  80663c:	10c02036 	bltu	r2,r3,8066c0 <_malloc_r+0x5c4>
  806640:	8804d3fa 	srli	r2,r17,15
  806644:	11801dc4 	addi	r6,r2,119
  806648:	300490fa 	slli	r2,r6,3
  80664c:	003ed806 	br	8061b0 <_malloc_r+0xb4>
  806650:	48c000c4 	addi	r3,r9,3
  806654:	003f3106 	br	80631c <_malloc_r+0x220>
  806658:	05c02074 	movhi	r23,129
  80665c:	bdc2b204 	addi	r23,r23,2760
  806660:	b8800017 	ldw	r2,0(r23)
  806664:	988d883a 	add	r6,r19,r2
  806668:	b9800015 	stw	r6,0(r23)
  80666c:	293fb21e 	bne	r5,r4,806538 <_malloc_r+0x43c>
  806670:	2083ffcc 	andi	r2,r4,4095
  806674:	103fb01e 	bne	r2,zero,806538 <_malloc_r+0x43c>
  806678:	e4000217 	ldw	r16,8(fp)
  80667c:	9d45883a 	add	r2,r19,r21
  806680:	10800054 	ori	r2,r2,1
  806684:	80800115 	stw	r2,4(r16)
  806688:	b8c00017 	ldw	r3,0(r23)
  80668c:	d0a6af17 	ldw	r2,-25924(gp)
  806690:	10c0012e 	bgeu	r2,r3,806698 <_malloc_r+0x59c>
  806694:	d0e6af15 	stw	r3,-25924(gp)
  806698:	d0a6b017 	ldw	r2,-25920(gp)
  80669c:	10ff962e 	bgeu	r2,r3,8064f8 <_malloc_r+0x3fc>
  8066a0:	d0e6b015 	stw	r3,-25920(gp)
  8066a4:	003f9406 	br	8064f8 <_malloc_r+0x3fc>
  8066a8:	00800104 	movi	r2,4
  8066ac:	11001e36 	bltu	r2,r4,806728 <_malloc_r+0x62c>
  8066b0:	2804d1ba 	srli	r2,r5,6
  8066b4:	11000e04 	addi	r4,r2,56
  8066b8:	200690fa 	slli	r3,r4,3
  8066bc:	003fc506 	br	8065d4 <_malloc_r+0x4d8>
  8066c0:	00815504 	movi	r2,1364
  8066c4:	10c01d2e 	bgeu	r2,r3,80673c <_malloc_r+0x640>
  8066c8:	01801f84 	movi	r6,126
  8066cc:	0080fc04 	movi	r2,1008
  8066d0:	003eb706 	br	8061b0 <_malloc_r+0xb4>
  8066d4:	00800204 	movi	r2,8
  8066d8:	10cbc83a 	sub	r5,r2,r3
  8066dc:	2169883a 	add	r20,r4,r5
  8066e0:	003f9e06 	br	80655c <_malloc_r+0x460>
  8066e4:	00bffe04 	movi	r2,-8
  8066e8:	a93ffd04 	addi	r4,r21,-12
  8066ec:	2088703a 	and	r4,r4,r2
  8066f0:	b10b883a 	add	r5,r22,r4
  8066f4:	00c00144 	movi	r3,5
  8066f8:	28c00215 	stw	r3,8(r5)
  8066fc:	28c00115 	stw	r3,4(r5)
  806700:	b0800117 	ldw	r2,4(r22)
  806704:	1080004c 	andi	r2,r2,1
  806708:	2084b03a 	or	r2,r4,r2
  80670c:	b0800115 	stw	r2,4(r22)
  806710:	313fdd2e 	bgeu	r6,r4,806688 <_malloc_r+0x58c>
  806714:	b1400204 	addi	r5,r22,8
  806718:	9009883a 	mov	r4,r18
  80671c:	08055740 	call	805574 <_free_r>
  806720:	e4000217 	ldw	r16,8(fp)
  806724:	003fd806 	br	806688 <_malloc_r+0x58c>
  806728:	00800504 	movi	r2,20
  80672c:	11001536 	bltu	r2,r4,806784 <_malloc_r+0x688>
  806730:	210016c4 	addi	r4,r4,91
  806734:	200690fa 	slli	r3,r4,3
  806738:	003fa606 	br	8065d4 <_malloc_r+0x4d8>
  80673c:	8804d4ba 	srli	r2,r17,18
  806740:	11801f04 	addi	r6,r2,124
  806744:	300490fa 	slli	r2,r6,3
  806748:	003e9906 	br	8061b0 <_malloc_r+0xb4>
  80674c:	2009d0ba 	srai	r4,r4,2
  806750:	01402074 	movhi	r5,129
  806754:	29767404 	addi	r5,r5,-9776
  806758:	00c00044 	movi	r3,1
  80675c:	28800117 	ldw	r2,4(r5)
  806760:	1906983a 	sll	r3,r3,r4
  806764:	10c4b03a 	or	r2,r2,r3
  806768:	28800115 	stw	r2,4(r5)
  80676c:	003fa306 	br	8065fc <_malloc_r+0x500>
  806770:	0027883a 	mov	r19,zero
  806774:	00c00044 	movi	r3,1
  806778:	003f8606 	br	806594 <_malloc_r+0x498>
  80677c:	d1200515 	stw	r4,-32748(gp)
  806780:	003f7306 	br	806550 <_malloc_r+0x454>
  806784:	00801504 	movi	r2,84
  806788:	11001936 	bltu	r2,r4,8067f0 <_malloc_r+0x6f4>
  80678c:	2804d33a 	srli	r2,r5,12
  806790:	11001b84 	addi	r4,r2,110
  806794:	200690fa 	slli	r3,r4,3
  806798:	003f8e06 	br	8065d4 <_malloc_r+0x4d8>
  80679c:	480b883a 	mov	r5,r9
  8067a0:	6807883a 	mov	r3,r13
  8067a4:	288000cc 	andi	r2,r5,3
  8067a8:	18fffe04 	addi	r3,r3,-8
  8067ac:	297fffc4 	addi	r5,r5,-1
  8067b0:	10001526 	beq	r2,zero,806808 <_malloc_r+0x70c>
  8067b4:	18800217 	ldw	r2,8(r3)
  8067b8:	10fffa26 	beq	r2,r3,8067a4 <_malloc_r+0x6a8>
  8067bc:	2109883a 	add	r4,r4,r4
  8067c0:	393f1e36 	bltu	r7,r4,80643c <_malloc_r+0x340>
  8067c4:	203f1d26 	beq	r4,zero,80643c <_malloc_r+0x340>
  8067c8:	21c4703a 	and	r2,r4,r7
  8067cc:	10000226 	beq	r2,zero,8067d8 <_malloc_r+0x6dc>
  8067d0:	6013883a 	mov	r9,r12
  8067d4:	003ee106 	br	80635c <_malloc_r+0x260>
  8067d8:	2109883a 	add	r4,r4,r4
  8067dc:	3904703a 	and	r2,r7,r4
  8067e0:	63000104 	addi	r12,r12,4
  8067e4:	103ffc26 	beq	r2,zero,8067d8 <_malloc_r+0x6dc>
  8067e8:	6013883a 	mov	r9,r12
  8067ec:	003edb06 	br	80635c <_malloc_r+0x260>
  8067f0:	00805504 	movi	r2,340
  8067f4:	11000836 	bltu	r2,r4,806818 <_malloc_r+0x71c>
  8067f8:	2804d3fa 	srli	r2,r5,15
  8067fc:	11001dc4 	addi	r4,r2,119
  806800:	200690fa 	slli	r3,r4,3
  806804:	003f7306 	br	8065d4 <_malloc_r+0x4d8>
  806808:	0104303a 	nor	r2,zero,r4
  80680c:	388e703a 	and	r7,r7,r2
  806810:	e1c00115 	stw	r7,4(fp)
  806814:	003fe906 	br	8067bc <_malloc_r+0x6c0>
  806818:	00815504 	movi	r2,1364
  80681c:	1100032e 	bgeu	r2,r4,80682c <_malloc_r+0x730>
  806820:	01001f84 	movi	r4,126
  806824:	00c0fc04 	movi	r3,1008
  806828:	003f6a06 	br	8065d4 <_malloc_r+0x4d8>
  80682c:	2804d4ba 	srli	r2,r5,18
  806830:	11001f04 	addi	r4,r2,124
  806834:	200690fa 	slli	r3,r4,3
  806838:	003f6606 	br	8065d4 <_malloc_r+0x4d8>

0080683c <memchr>:
  80683c:	008000c4 	movi	r2,3
  806840:	29403fcc 	andi	r5,r5,255
  806844:	2007883a 	mov	r3,r4
  806848:	1180022e 	bgeu	r2,r6,806854 <memchr+0x18>
  80684c:	2084703a 	and	r2,r4,r2
  806850:	10000b26 	beq	r2,zero,806880 <memchr+0x44>
  806854:	313fffc4 	addi	r4,r6,-1
  806858:	3000051e 	bne	r6,zero,806870 <memchr+0x34>
  80685c:	00002c06 	br	806910 <memchr+0xd4>
  806860:	213fffc4 	addi	r4,r4,-1
  806864:	00bfffc4 	movi	r2,-1
  806868:	18c00044 	addi	r3,r3,1
  80686c:	20802826 	beq	r4,r2,806910 <memchr+0xd4>
  806870:	18800003 	ldbu	r2,0(r3)
  806874:	28bffa1e 	bne	r5,r2,806860 <memchr+0x24>
  806878:	1805883a 	mov	r2,r3
  80687c:	f800283a 	ret
  806880:	0011883a 	mov	r8,zero
  806884:	0007883a 	mov	r3,zero
  806888:	01c00104 	movi	r7,4
  80688c:	4004923a 	slli	r2,r8,8
  806890:	18c00044 	addi	r3,r3,1
  806894:	1151883a 	add	r8,r2,r5
  806898:	19fffc1e 	bne	r3,r7,80688c <memchr+0x50>
  80689c:	02bfbff4 	movhi	r10,65279
  8068a0:	52bfbfc4 	addi	r10,r10,-257
  8068a4:	02602074 	movhi	r9,32897
  8068a8:	4a602004 	addi	r9,r9,-32640
  8068ac:	02c000c4 	movi	r11,3
  8068b0:	20800017 	ldw	r2,0(r4)
  8068b4:	31bfff04 	addi	r6,r6,-4
  8068b8:	200f883a 	mov	r7,r4
  8068bc:	1204f03a 	xor	r2,r2,r8
  8068c0:	1287883a 	add	r3,r2,r10
  8068c4:	1a46703a 	and	r3,r3,r9
  8068c8:	0084303a 	nor	r2,zero,r2
  8068cc:	10c4703a 	and	r2,r2,r3
  8068d0:	10000b26 	beq	r2,zero,806900 <memchr+0xc4>
  8068d4:	20800003 	ldbu	r2,0(r4)
  8068d8:	28800f26 	beq	r5,r2,806918 <memchr+0xdc>
  8068dc:	20800043 	ldbu	r2,1(r4)
  8068e0:	21c00044 	addi	r7,r4,1
  8068e4:	28800c26 	beq	r5,r2,806918 <memchr+0xdc>
  8068e8:	20800083 	ldbu	r2,2(r4)
  8068ec:	21c00084 	addi	r7,r4,2
  8068f0:	28800926 	beq	r5,r2,806918 <memchr+0xdc>
  8068f4:	208000c3 	ldbu	r2,3(r4)
  8068f8:	21c000c4 	addi	r7,r4,3
  8068fc:	28800626 	beq	r5,r2,806918 <memchr+0xdc>
  806900:	21000104 	addi	r4,r4,4
  806904:	59bfea36 	bltu	r11,r6,8068b0 <memchr+0x74>
  806908:	2007883a 	mov	r3,r4
  80690c:	003fd106 	br	806854 <memchr+0x18>
  806910:	0005883a 	mov	r2,zero
  806914:	f800283a 	ret
  806918:	3805883a 	mov	r2,r7
  80691c:	f800283a 	ret

00806920 <memcpy>:
  806920:	01c003c4 	movi	r7,15
  806924:	2007883a 	mov	r3,r4
  806928:	3980032e 	bgeu	r7,r6,806938 <memcpy+0x18>
  80692c:	2904b03a 	or	r2,r5,r4
  806930:	108000cc 	andi	r2,r2,3
  806934:	10000926 	beq	r2,zero,80695c <memcpy+0x3c>
  806938:	30000626 	beq	r6,zero,806954 <memcpy+0x34>
  80693c:	30cd883a 	add	r6,r6,r3
  806940:	28800003 	ldbu	r2,0(r5)
  806944:	29400044 	addi	r5,r5,1
  806948:	18800005 	stb	r2,0(r3)
  80694c:	18c00044 	addi	r3,r3,1
  806950:	30fffb1e 	bne	r6,r3,806940 <memcpy+0x20>
  806954:	2005883a 	mov	r2,r4
  806958:	f800283a 	ret
  80695c:	3811883a 	mov	r8,r7
  806960:	200f883a 	mov	r7,r4
  806964:	28c00017 	ldw	r3,0(r5)
  806968:	31bffc04 	addi	r6,r6,-16
  80696c:	38c00015 	stw	r3,0(r7)
  806970:	28800117 	ldw	r2,4(r5)
  806974:	38800115 	stw	r2,4(r7)
  806978:	28c00217 	ldw	r3,8(r5)
  80697c:	38c00215 	stw	r3,8(r7)
  806980:	28800317 	ldw	r2,12(r5)
  806984:	29400404 	addi	r5,r5,16
  806988:	38800315 	stw	r2,12(r7)
  80698c:	39c00404 	addi	r7,r7,16
  806990:	41bff436 	bltu	r8,r6,806964 <memcpy+0x44>
  806994:	008000c4 	movi	r2,3
  806998:	1180072e 	bgeu	r2,r6,8069b8 <memcpy+0x98>
  80699c:	1007883a 	mov	r3,r2
  8069a0:	28800017 	ldw	r2,0(r5)
  8069a4:	31bfff04 	addi	r6,r6,-4
  8069a8:	29400104 	addi	r5,r5,4
  8069ac:	38800015 	stw	r2,0(r7)
  8069b0:	39c00104 	addi	r7,r7,4
  8069b4:	19bffa36 	bltu	r3,r6,8069a0 <memcpy+0x80>
  8069b8:	3807883a 	mov	r3,r7
  8069bc:	003fde06 	br	806938 <memcpy+0x18>

008069c0 <memmove>:
  8069c0:	2807883a 	mov	r3,r5
  8069c4:	2011883a 	mov	r8,r4
  8069c8:	29000c2e 	bgeu	r5,r4,8069fc <memmove+0x3c>
  8069cc:	298f883a 	add	r7,r5,r6
  8069d0:	21c00a2e 	bgeu	r4,r7,8069fc <memmove+0x3c>
  8069d4:	30000726 	beq	r6,zero,8069f4 <memmove+0x34>
  8069d8:	2187883a 	add	r3,r4,r6
  8069dc:	198dc83a 	sub	r6,r3,r6
  8069e0:	39ffffc4 	addi	r7,r7,-1
  8069e4:	38800003 	ldbu	r2,0(r7)
  8069e8:	18ffffc4 	addi	r3,r3,-1
  8069ec:	18800005 	stb	r2,0(r3)
  8069f0:	19bffb1e 	bne	r3,r6,8069e0 <memmove+0x20>
  8069f4:	2005883a 	mov	r2,r4
  8069f8:	f800283a 	ret
  8069fc:	01c003c4 	movi	r7,15
  806a00:	39800a36 	bltu	r7,r6,806a2c <memmove+0x6c>
  806a04:	303ffb26 	beq	r6,zero,8069f4 <memmove+0x34>
  806a08:	400f883a 	mov	r7,r8
  806a0c:	320d883a 	add	r6,r6,r8
  806a10:	28800003 	ldbu	r2,0(r5)
  806a14:	29400044 	addi	r5,r5,1
  806a18:	38800005 	stb	r2,0(r7)
  806a1c:	39c00044 	addi	r7,r7,1
  806a20:	39bffb1e 	bne	r7,r6,806a10 <memmove+0x50>
  806a24:	2005883a 	mov	r2,r4
  806a28:	f800283a 	ret
  806a2c:	1904b03a 	or	r2,r3,r4
  806a30:	108000cc 	andi	r2,r2,3
  806a34:	103ff31e 	bne	r2,zero,806a04 <memmove+0x44>
  806a38:	3811883a 	mov	r8,r7
  806a3c:	180b883a 	mov	r5,r3
  806a40:	200f883a 	mov	r7,r4
  806a44:	28c00017 	ldw	r3,0(r5)
  806a48:	31bffc04 	addi	r6,r6,-16
  806a4c:	38c00015 	stw	r3,0(r7)
  806a50:	28800117 	ldw	r2,4(r5)
  806a54:	38800115 	stw	r2,4(r7)
  806a58:	28c00217 	ldw	r3,8(r5)
  806a5c:	38c00215 	stw	r3,8(r7)
  806a60:	28800317 	ldw	r2,12(r5)
  806a64:	29400404 	addi	r5,r5,16
  806a68:	38800315 	stw	r2,12(r7)
  806a6c:	39c00404 	addi	r7,r7,16
  806a70:	41bff436 	bltu	r8,r6,806a44 <memmove+0x84>
  806a74:	008000c4 	movi	r2,3
  806a78:	1180072e 	bgeu	r2,r6,806a98 <memmove+0xd8>
  806a7c:	1007883a 	mov	r3,r2
  806a80:	28800017 	ldw	r2,0(r5)
  806a84:	31bfff04 	addi	r6,r6,-4
  806a88:	29400104 	addi	r5,r5,4
  806a8c:	38800015 	stw	r2,0(r7)
  806a90:	39c00104 	addi	r7,r7,4
  806a94:	19bffa36 	bltu	r3,r6,806a80 <memmove+0xc0>
  806a98:	3811883a 	mov	r8,r7
  806a9c:	003fd906 	br	806a04 <memmove+0x44>

00806aa0 <memset>:
  806aa0:	008000c4 	movi	r2,3
  806aa4:	29403fcc 	andi	r5,r5,255
  806aa8:	2007883a 	mov	r3,r4
  806aac:	1180022e 	bgeu	r2,r6,806ab8 <memset+0x18>
  806ab0:	2084703a 	and	r2,r4,r2
  806ab4:	10000826 	beq	r2,zero,806ad8 <memset+0x38>
  806ab8:	30000526 	beq	r6,zero,806ad0 <memset+0x30>
  806abc:	2805883a 	mov	r2,r5
  806ac0:	30cd883a 	add	r6,r6,r3
  806ac4:	18800005 	stb	r2,0(r3)
  806ac8:	18c00044 	addi	r3,r3,1
  806acc:	19bffd1e 	bne	r3,r6,806ac4 <memset+0x24>
  806ad0:	2005883a 	mov	r2,r4
  806ad4:	f800283a 	ret
  806ad8:	2804923a 	slli	r2,r5,8
  806adc:	020003c4 	movi	r8,15
  806ae0:	200f883a 	mov	r7,r4
  806ae4:	2884b03a 	or	r2,r5,r2
  806ae8:	1006943a 	slli	r3,r2,16
  806aec:	10c6b03a 	or	r3,r2,r3
  806af0:	41800a2e 	bgeu	r8,r6,806b1c <memset+0x7c>
  806af4:	4005883a 	mov	r2,r8
  806af8:	31bffc04 	addi	r6,r6,-16
  806afc:	38c00015 	stw	r3,0(r7)
  806b00:	38c00115 	stw	r3,4(r7)
  806b04:	38c00215 	stw	r3,8(r7)
  806b08:	38c00315 	stw	r3,12(r7)
  806b0c:	39c00404 	addi	r7,r7,16
  806b10:	11bff936 	bltu	r2,r6,806af8 <memset+0x58>
  806b14:	008000c4 	movi	r2,3
  806b18:	1180052e 	bgeu	r2,r6,806b30 <memset+0x90>
  806b1c:	31bfff04 	addi	r6,r6,-4
  806b20:	008000c4 	movi	r2,3
  806b24:	38c00015 	stw	r3,0(r7)
  806b28:	39c00104 	addi	r7,r7,4
  806b2c:	11bffb36 	bltu	r2,r6,806b1c <memset+0x7c>
  806b30:	3807883a 	mov	r3,r7
  806b34:	003fe006 	br	806ab8 <memset+0x18>

00806b38 <_Bfree>:
  806b38:	28000826 	beq	r5,zero,806b5c <_Bfree+0x24>
  806b3c:	28800117 	ldw	r2,4(r5)
  806b40:	21001317 	ldw	r4,76(r4)
  806b44:	1085883a 	add	r2,r2,r2
  806b48:	1085883a 	add	r2,r2,r2
  806b4c:	1105883a 	add	r2,r2,r4
  806b50:	10c00017 	ldw	r3,0(r2)
  806b54:	28c00015 	stw	r3,0(r5)
  806b58:	11400015 	stw	r5,0(r2)
  806b5c:	f800283a 	ret

00806b60 <__hi0bits>:
  806b60:	20bfffec 	andhi	r2,r4,65535
  806b64:	10001426 	beq	r2,zero,806bb8 <__hi0bits+0x58>
  806b68:	0007883a 	mov	r3,zero
  806b6c:	20bfc02c 	andhi	r2,r4,65280
  806b70:	1000021e 	bne	r2,zero,806b7c <__hi0bits+0x1c>
  806b74:	2008923a 	slli	r4,r4,8
  806b78:	18c00204 	addi	r3,r3,8
  806b7c:	20bc002c 	andhi	r2,r4,61440
  806b80:	1000021e 	bne	r2,zero,806b8c <__hi0bits+0x2c>
  806b84:	2008913a 	slli	r4,r4,4
  806b88:	18c00104 	addi	r3,r3,4
  806b8c:	20b0002c 	andhi	r2,r4,49152
  806b90:	1000031e 	bne	r2,zero,806ba0 <__hi0bits+0x40>
  806b94:	2105883a 	add	r2,r4,r4
  806b98:	18c00084 	addi	r3,r3,2
  806b9c:	1089883a 	add	r4,r2,r2
  806ba0:	20000316 	blt	r4,zero,806bb0 <__hi0bits+0x50>
  806ba4:	2090002c 	andhi	r2,r4,16384
  806ba8:	10000626 	beq	r2,zero,806bc4 <__hi0bits+0x64>
  806bac:	18c00044 	addi	r3,r3,1
  806bb0:	1805883a 	mov	r2,r3
  806bb4:	f800283a 	ret
  806bb8:	2008943a 	slli	r4,r4,16
  806bbc:	00c00404 	movi	r3,16
  806bc0:	003fea06 	br	806b6c <__hi0bits+0xc>
  806bc4:	00c00804 	movi	r3,32
  806bc8:	1805883a 	mov	r2,r3
  806bcc:	f800283a 	ret

00806bd0 <__lo0bits>:
  806bd0:	20c00017 	ldw	r3,0(r4)
  806bd4:	188001cc 	andi	r2,r3,7
  806bd8:	10000a26 	beq	r2,zero,806c04 <__lo0bits+0x34>
  806bdc:	1880004c 	andi	r2,r3,1
  806be0:	1005003a 	cmpeq	r2,r2,zero
  806be4:	10002126 	beq	r2,zero,806c6c <__lo0bits+0x9c>
  806be8:	1880008c 	andi	r2,r3,2
  806bec:	1000251e 	bne	r2,zero,806c84 <__lo0bits+0xb4>
  806bf0:	1804d0ba 	srli	r2,r3,2
  806bf4:	01400084 	movi	r5,2
  806bf8:	20800015 	stw	r2,0(r4)
  806bfc:	2805883a 	mov	r2,r5
  806c00:	f800283a 	ret
  806c04:	18bfffcc 	andi	r2,r3,65535
  806c08:	10001526 	beq	r2,zero,806c60 <__lo0bits+0x90>
  806c0c:	000b883a 	mov	r5,zero
  806c10:	18803fcc 	andi	r2,r3,255
  806c14:	1000021e 	bne	r2,zero,806c20 <__lo0bits+0x50>
  806c18:	1806d23a 	srli	r3,r3,8
  806c1c:	29400204 	addi	r5,r5,8
  806c20:	188003cc 	andi	r2,r3,15
  806c24:	1000021e 	bne	r2,zero,806c30 <__lo0bits+0x60>
  806c28:	1806d13a 	srli	r3,r3,4
  806c2c:	29400104 	addi	r5,r5,4
  806c30:	188000cc 	andi	r2,r3,3
  806c34:	1000021e 	bne	r2,zero,806c40 <__lo0bits+0x70>
  806c38:	1806d0ba 	srli	r3,r3,2
  806c3c:	29400084 	addi	r5,r5,2
  806c40:	1880004c 	andi	r2,r3,1
  806c44:	1000031e 	bne	r2,zero,806c54 <__lo0bits+0x84>
  806c48:	1806d07a 	srli	r3,r3,1
  806c4c:	18000a26 	beq	r3,zero,806c78 <__lo0bits+0xa8>
  806c50:	29400044 	addi	r5,r5,1
  806c54:	2805883a 	mov	r2,r5
  806c58:	20c00015 	stw	r3,0(r4)
  806c5c:	f800283a 	ret
  806c60:	1806d43a 	srli	r3,r3,16
  806c64:	01400404 	movi	r5,16
  806c68:	003fe906 	br	806c10 <__lo0bits+0x40>
  806c6c:	000b883a 	mov	r5,zero
  806c70:	2805883a 	mov	r2,r5
  806c74:	f800283a 	ret
  806c78:	01400804 	movi	r5,32
  806c7c:	2805883a 	mov	r2,r5
  806c80:	f800283a 	ret
  806c84:	1804d07a 	srli	r2,r3,1
  806c88:	01400044 	movi	r5,1
  806c8c:	20800015 	stw	r2,0(r4)
  806c90:	003fda06 	br	806bfc <__lo0bits+0x2c>

00806c94 <__mcmp>:
  806c94:	20800417 	ldw	r2,16(r4)
  806c98:	28c00417 	ldw	r3,16(r5)
  806c9c:	10cfc83a 	sub	r7,r2,r3
  806ca0:	38000c1e 	bne	r7,zero,806cd4 <__mcmp+0x40>
  806ca4:	18c5883a 	add	r2,r3,r3
  806ca8:	1085883a 	add	r2,r2,r2
  806cac:	10c00504 	addi	r3,r2,20
  806cb0:	21000504 	addi	r4,r4,20
  806cb4:	28cb883a 	add	r5,r5,r3
  806cb8:	2085883a 	add	r2,r4,r2
  806cbc:	10bfff04 	addi	r2,r2,-4
  806cc0:	297fff04 	addi	r5,r5,-4
  806cc4:	11800017 	ldw	r6,0(r2)
  806cc8:	28c00017 	ldw	r3,0(r5)
  806ccc:	30c0031e 	bne	r6,r3,806cdc <__mcmp+0x48>
  806cd0:	20bffa36 	bltu	r4,r2,806cbc <__mcmp+0x28>
  806cd4:	3805883a 	mov	r2,r7
  806cd8:	f800283a 	ret
  806cdc:	30c00336 	bltu	r6,r3,806cec <__mcmp+0x58>
  806ce0:	01c00044 	movi	r7,1
  806ce4:	3805883a 	mov	r2,r7
  806ce8:	f800283a 	ret
  806cec:	01ffffc4 	movi	r7,-1
  806cf0:	003ff806 	br	806cd4 <__mcmp+0x40>

00806cf4 <__ulp>:
  806cf4:	295ffc2c 	andhi	r5,r5,32752
  806cf8:	013f3034 	movhi	r4,64704
  806cfc:	290b883a 	add	r5,r5,r4
  806d00:	0145c83a 	sub	r2,zero,r5
  806d04:	1007d53a 	srai	r3,r2,20
  806d08:	000d883a 	mov	r6,zero
  806d0c:	0140040e 	bge	zero,r5,806d20 <__ulp+0x2c>
  806d10:	280f883a 	mov	r7,r5
  806d14:	3807883a 	mov	r3,r7
  806d18:	3005883a 	mov	r2,r6
  806d1c:	f800283a 	ret
  806d20:	008004c4 	movi	r2,19
  806d24:	193ffb04 	addi	r4,r3,-20
  806d28:	10c00c0e 	bge	r2,r3,806d5c <__ulp+0x68>
  806d2c:	008007c4 	movi	r2,31
  806d30:	1107c83a 	sub	r3,r2,r4
  806d34:	00800784 	movi	r2,30
  806d38:	01400044 	movi	r5,1
  806d3c:	11000216 	blt	r2,r4,806d48 <__ulp+0x54>
  806d40:	00800044 	movi	r2,1
  806d44:	10ca983a 	sll	r5,r2,r3
  806d48:	000f883a 	mov	r7,zero
  806d4c:	280d883a 	mov	r6,r5
  806d50:	3807883a 	mov	r3,r7
  806d54:	3005883a 	mov	r2,r6
  806d58:	f800283a 	ret
  806d5c:	00800234 	movhi	r2,8
  806d60:	10cfd83a 	sra	r7,r2,r3
  806d64:	000d883a 	mov	r6,zero
  806d68:	3005883a 	mov	r2,r6
  806d6c:	3807883a 	mov	r3,r7
  806d70:	f800283a 	ret

00806d74 <__b2d>:
  806d74:	20800417 	ldw	r2,16(r4)
  806d78:	defff904 	addi	sp,sp,-28
  806d7c:	dd000415 	stw	r20,16(sp)
  806d80:	1085883a 	add	r2,r2,r2
  806d84:	25000504 	addi	r20,r4,20
  806d88:	1085883a 	add	r2,r2,r2
  806d8c:	dc000015 	stw	r16,0(sp)
  806d90:	a0a1883a 	add	r16,r20,r2
  806d94:	dd400515 	stw	r21,20(sp)
  806d98:	857fff17 	ldw	r21,-4(r16)
  806d9c:	dc400115 	stw	r17,4(sp)
  806da0:	dfc00615 	stw	ra,24(sp)
  806da4:	a809883a 	mov	r4,r21
  806da8:	2823883a 	mov	r17,r5
  806dac:	dcc00315 	stw	r19,12(sp)
  806db0:	dc800215 	stw	r18,8(sp)
  806db4:	0806b600 	call	806b60 <__hi0bits>
  806db8:	100b883a 	mov	r5,r2
  806dbc:	00800804 	movi	r2,32
  806dc0:	1145c83a 	sub	r2,r2,r5
  806dc4:	88800015 	stw	r2,0(r17)
  806dc8:	00800284 	movi	r2,10
  806dcc:	80ffff04 	addi	r3,r16,-4
  806dd0:	11401416 	blt	r2,r5,806e24 <__b2d+0xb0>
  806dd4:	008002c4 	movi	r2,11
  806dd8:	1149c83a 	sub	r4,r2,r5
  806ddc:	a0c02736 	bltu	r20,r3,806e7c <__b2d+0x108>
  806de0:	000d883a 	mov	r6,zero
  806de4:	28800544 	addi	r2,r5,21
  806de8:	a906d83a 	srl	r3,r21,r4
  806dec:	a884983a 	sll	r2,r21,r2
  806df0:	1ccffc34 	orhi	r19,r3,16368
  806df4:	11a4b03a 	or	r18,r2,r6
  806df8:	9005883a 	mov	r2,r18
  806dfc:	9807883a 	mov	r3,r19
  806e00:	dfc00617 	ldw	ra,24(sp)
  806e04:	dd400517 	ldw	r21,20(sp)
  806e08:	dd000417 	ldw	r20,16(sp)
  806e0c:	dcc00317 	ldw	r19,12(sp)
  806e10:	dc800217 	ldw	r18,8(sp)
  806e14:	dc400117 	ldw	r17,4(sp)
  806e18:	dc000017 	ldw	r16,0(sp)
  806e1c:	dec00704 	addi	sp,sp,28
  806e20:	f800283a 	ret
  806e24:	a0c00e36 	bltu	r20,r3,806e60 <__b2d+0xec>
  806e28:	293ffd44 	addi	r4,r5,-11
  806e2c:	000d883a 	mov	r6,zero
  806e30:	20000f26 	beq	r4,zero,806e70 <__b2d+0xfc>
  806e34:	00800804 	movi	r2,32
  806e38:	110bc83a 	sub	r5,r2,r4
  806e3c:	a0c01236 	bltu	r20,r3,806e88 <__b2d+0x114>
  806e40:	000f883a 	mov	r7,zero
  806e44:	a904983a 	sll	r2,r21,r4
  806e48:	3146d83a 	srl	r3,r6,r5
  806e4c:	3108983a 	sll	r4,r6,r4
  806e50:	108ffc34 	orhi	r2,r2,16368
  806e54:	18a6b03a 	or	r19,r3,r2
  806e58:	3924b03a 	or	r18,r7,r4
  806e5c:	003fe606 	br	806df8 <__b2d+0x84>
  806e60:	293ffd44 	addi	r4,r5,-11
  806e64:	81bffe17 	ldw	r6,-8(r16)
  806e68:	80fffe04 	addi	r3,r16,-8
  806e6c:	203ff11e 	bne	r4,zero,806e34 <__b2d+0xc0>
  806e70:	accffc34 	orhi	r19,r21,16368
  806e74:	3025883a 	mov	r18,r6
  806e78:	003fdf06 	br	806df8 <__b2d+0x84>
  806e7c:	18bfff17 	ldw	r2,-4(r3)
  806e80:	110cd83a 	srl	r6,r2,r4
  806e84:	003fd706 	br	806de4 <__b2d+0x70>
  806e88:	18bfff17 	ldw	r2,-4(r3)
  806e8c:	114ed83a 	srl	r7,r2,r5
  806e90:	003fec06 	br	806e44 <__b2d+0xd0>

00806e94 <__ratio>:
  806e94:	defff904 	addi	sp,sp,-28
  806e98:	dc400215 	stw	r17,8(sp)
  806e9c:	2823883a 	mov	r17,r5
  806ea0:	d80b883a 	mov	r5,sp
  806ea4:	dfc00615 	stw	ra,24(sp)
  806ea8:	dd000515 	stw	r20,20(sp)
  806eac:	dcc00415 	stw	r19,16(sp)
  806eb0:	dc800315 	stw	r18,12(sp)
  806eb4:	2025883a 	mov	r18,r4
  806eb8:	0806d740 	call	806d74 <__b2d>
  806ebc:	8809883a 	mov	r4,r17
  806ec0:	d9400104 	addi	r5,sp,4
  806ec4:	1027883a 	mov	r19,r2
  806ec8:	1829883a 	mov	r20,r3
  806ecc:	0806d740 	call	806d74 <__b2d>
  806ed0:	89000417 	ldw	r4,16(r17)
  806ed4:	91c00417 	ldw	r7,16(r18)
  806ed8:	d9800117 	ldw	r6,4(sp)
  806edc:	180b883a 	mov	r5,r3
  806ee0:	390fc83a 	sub	r7,r7,r4
  806ee4:	1009883a 	mov	r4,r2
  806ee8:	d8800017 	ldw	r2,0(sp)
  806eec:	380e917a 	slli	r7,r7,5
  806ef0:	2011883a 	mov	r8,r4
  806ef4:	1185c83a 	sub	r2,r2,r6
  806ef8:	11c5883a 	add	r2,r2,r7
  806efc:	1006953a 	slli	r3,r2,20
  806f00:	2813883a 	mov	r9,r5
  806f04:	00800d0e 	bge	zero,r2,806f3c <__ratio+0xa8>
  806f08:	1d29883a 	add	r20,r3,r20
  806f0c:	a00b883a 	mov	r5,r20
  806f10:	480f883a 	mov	r7,r9
  806f14:	9809883a 	mov	r4,r19
  806f18:	400d883a 	mov	r6,r8
  806f1c:	0800a0c0 	call	800a0c <__divdf3>
  806f20:	dfc00617 	ldw	ra,24(sp)
  806f24:	dd000517 	ldw	r20,20(sp)
  806f28:	dcc00417 	ldw	r19,16(sp)
  806f2c:	dc800317 	ldw	r18,12(sp)
  806f30:	dc400217 	ldw	r17,8(sp)
  806f34:	dec00704 	addi	sp,sp,28
  806f38:	f800283a 	ret
  806f3c:	28d3c83a 	sub	r9,r5,r3
  806f40:	003ff206 	br	806f0c <__ratio+0x78>

00806f44 <_mprec_log10>:
  806f44:	defffe04 	addi	sp,sp,-8
  806f48:	008005c4 	movi	r2,23
  806f4c:	dc000015 	stw	r16,0(sp)
  806f50:	dfc00115 	stw	ra,4(sp)
  806f54:	2021883a 	mov	r16,r4
  806f58:	11000c16 	blt	r2,r4,806f8c <_mprec_log10+0x48>
  806f5c:	200490fa 	slli	r2,r4,3
  806f60:	00c02074 	movhi	r3,129
  806f64:	18f51b04 	addi	r3,r3,-11156
  806f68:	10c5883a 	add	r2,r2,r3
  806f6c:	12400117 	ldw	r9,4(r2)
  806f70:	12000017 	ldw	r8,0(r2)
  806f74:	4807883a 	mov	r3,r9
  806f78:	4005883a 	mov	r2,r8
  806f7c:	dfc00117 	ldw	ra,4(sp)
  806f80:	dc000017 	ldw	r16,0(sp)
  806f84:	dec00204 	addi	sp,sp,8
  806f88:	f800283a 	ret
  806f8c:	0011883a 	mov	r8,zero
  806f90:	024ffc34 	movhi	r9,16368
  806f94:	0005883a 	mov	r2,zero
  806f98:	00d00934 	movhi	r3,16420
  806f9c:	480b883a 	mov	r5,r9
  806fa0:	4009883a 	mov	r4,r8
  806fa4:	180f883a 	mov	r7,r3
  806fa8:	100d883a 	mov	r6,r2
  806fac:	0809b8c0 	call	809b8c <__muldf3>
  806fb0:	843fffc4 	addi	r16,r16,-1
  806fb4:	1011883a 	mov	r8,r2
  806fb8:	1813883a 	mov	r9,r3
  806fbc:	803ff51e 	bne	r16,zero,806f94 <_mprec_log10+0x50>
  806fc0:	4005883a 	mov	r2,r8
  806fc4:	4807883a 	mov	r3,r9
  806fc8:	dfc00117 	ldw	ra,4(sp)
  806fcc:	dc000017 	ldw	r16,0(sp)
  806fd0:	dec00204 	addi	sp,sp,8
  806fd4:	f800283a 	ret

00806fd8 <__copybits>:
  806fd8:	297fffc4 	addi	r5,r5,-1
  806fdc:	30800417 	ldw	r2,16(r6)
  806fe0:	280bd17a 	srai	r5,r5,5
  806fe4:	31800504 	addi	r6,r6,20
  806fe8:	1085883a 	add	r2,r2,r2
  806fec:	294b883a 	add	r5,r5,r5
  806ff0:	294b883a 	add	r5,r5,r5
  806ff4:	1085883a 	add	r2,r2,r2
  806ff8:	290b883a 	add	r5,r5,r4
  806ffc:	3087883a 	add	r3,r6,r2
  807000:	29400104 	addi	r5,r5,4
  807004:	30c0052e 	bgeu	r6,r3,80701c <__copybits+0x44>
  807008:	30800017 	ldw	r2,0(r6)
  80700c:	31800104 	addi	r6,r6,4
  807010:	20800015 	stw	r2,0(r4)
  807014:	21000104 	addi	r4,r4,4
  807018:	30fffb36 	bltu	r6,r3,807008 <__copybits+0x30>
  80701c:	2140032e 	bgeu	r4,r5,80702c <__copybits+0x54>
  807020:	20000015 	stw	zero,0(r4)
  807024:	21000104 	addi	r4,r4,4
  807028:	217ffd36 	bltu	r4,r5,807020 <__copybits+0x48>
  80702c:	f800283a 	ret

00807030 <__any_on>:
  807030:	20800417 	ldw	r2,16(r4)
  807034:	2807d17a 	srai	r3,r5,5
  807038:	21000504 	addi	r4,r4,20
  80703c:	10c00d0e 	bge	r2,r3,807074 <__any_on+0x44>
  807040:	1085883a 	add	r2,r2,r2
  807044:	1085883a 	add	r2,r2,r2
  807048:	208d883a 	add	r6,r4,r2
  80704c:	2180182e 	bgeu	r4,r6,8070b0 <__any_on+0x80>
  807050:	30bfff17 	ldw	r2,-4(r6)
  807054:	30ffff04 	addi	r3,r6,-4
  807058:	1000041e 	bne	r2,zero,80706c <__any_on+0x3c>
  80705c:	20c0142e 	bgeu	r4,r3,8070b0 <__any_on+0x80>
  807060:	18ffff04 	addi	r3,r3,-4
  807064:	18800017 	ldw	r2,0(r3)
  807068:	103ffc26 	beq	r2,zero,80705c <__any_on+0x2c>
  80706c:	00800044 	movi	r2,1
  807070:	f800283a 	ret
  807074:	18800a0e 	bge	r3,r2,8070a0 <__any_on+0x70>
  807078:	294007cc 	andi	r5,r5,31
  80707c:	28000826 	beq	r5,zero,8070a0 <__any_on+0x70>
  807080:	18c5883a 	add	r2,r3,r3
  807084:	1085883a 	add	r2,r2,r2
  807088:	208d883a 	add	r6,r4,r2
  80708c:	30c00017 	ldw	r3,0(r6)
  807090:	1944d83a 	srl	r2,r3,r5
  807094:	1144983a 	sll	r2,r2,r5
  807098:	18bff41e 	bne	r3,r2,80706c <__any_on+0x3c>
  80709c:	003feb06 	br	80704c <__any_on+0x1c>
  8070a0:	18c5883a 	add	r2,r3,r3
  8070a4:	1085883a 	add	r2,r2,r2
  8070a8:	208d883a 	add	r6,r4,r2
  8070ac:	003fe706 	br	80704c <__any_on+0x1c>
  8070b0:	0005883a 	mov	r2,zero
  8070b4:	f800283a 	ret

008070b8 <_Balloc>:
  8070b8:	20c01317 	ldw	r3,76(r4)
  8070bc:	defffb04 	addi	sp,sp,-20
  8070c0:	dcc00315 	stw	r19,12(sp)
  8070c4:	dc800215 	stw	r18,8(sp)
  8070c8:	dfc00415 	stw	ra,16(sp)
  8070cc:	2825883a 	mov	r18,r5
  8070d0:	dc400115 	stw	r17,4(sp)
  8070d4:	dc000015 	stw	r16,0(sp)
  8070d8:	2027883a 	mov	r19,r4
  8070dc:	01800404 	movi	r6,16
  8070e0:	01400104 	movi	r5,4
  8070e4:	18001726 	beq	r3,zero,807144 <_Balloc+0x8c>
  8070e8:	01400044 	movi	r5,1
  8070ec:	9485883a 	add	r2,r18,r18
  8070f0:	2ca2983a 	sll	r17,r5,r18
  8070f4:	1085883a 	add	r2,r2,r2
  8070f8:	10c7883a 	add	r3,r2,r3
  8070fc:	1c000017 	ldw	r16,0(r3)
  807100:	8c4d883a 	add	r6,r17,r17
  807104:	318d883a 	add	r6,r6,r6
  807108:	9809883a 	mov	r4,r19
  80710c:	31800504 	addi	r6,r6,20
  807110:	80001226 	beq	r16,zero,80715c <_Balloc+0xa4>
  807114:	80800017 	ldw	r2,0(r16)
  807118:	18800015 	stw	r2,0(r3)
  80711c:	80000415 	stw	zero,16(r16)
  807120:	80000315 	stw	zero,12(r16)
  807124:	8005883a 	mov	r2,r16
  807128:	dfc00417 	ldw	ra,16(sp)
  80712c:	dcc00317 	ldw	r19,12(sp)
  807130:	dc800217 	ldw	r18,8(sp)
  807134:	dc400117 	ldw	r17,4(sp)
  807138:	dc000017 	ldw	r16,0(sp)
  80713c:	dec00504 	addi	sp,sp,20
  807140:	f800283a 	ret
  807144:	080858c0 	call	80858c <_calloc_r>
  807148:	1007883a 	mov	r3,r2
  80714c:	0021883a 	mov	r16,zero
  807150:	98801315 	stw	r2,76(r19)
  807154:	103fe41e 	bne	r2,zero,8070e8 <_Balloc+0x30>
  807158:	003ff206 	br	807124 <_Balloc+0x6c>
  80715c:	080858c0 	call	80858c <_calloc_r>
  807160:	103ff026 	beq	r2,zero,807124 <_Balloc+0x6c>
  807164:	1021883a 	mov	r16,r2
  807168:	14800115 	stw	r18,4(r2)
  80716c:	14400215 	stw	r17,8(r2)
  807170:	003fea06 	br	80711c <_Balloc+0x64>

00807174 <__d2b>:
  807174:	defff504 	addi	sp,sp,-44
  807178:	dcc00515 	stw	r19,20(sp)
  80717c:	04c00044 	movi	r19,1
  807180:	dc000215 	stw	r16,8(sp)
  807184:	2821883a 	mov	r16,r5
  807188:	980b883a 	mov	r5,r19
  80718c:	ddc00915 	stw	r23,36(sp)
  807190:	dd800815 	stw	r22,32(sp)
  807194:	dd400715 	stw	r21,28(sp)
  807198:	dd000615 	stw	r20,24(sp)
  80719c:	dc800415 	stw	r18,16(sp)
  8071a0:	dc400315 	stw	r17,12(sp)
  8071a4:	dfc00a15 	stw	ra,40(sp)
  8071a8:	3023883a 	mov	r17,r6
  8071ac:	382d883a 	mov	r22,r7
  8071b0:	ddc00b17 	ldw	r23,44(sp)
  8071b4:	08070b80 	call	8070b8 <_Balloc>
  8071b8:	1025883a 	mov	r18,r2
  8071bc:	00a00034 	movhi	r2,32768
  8071c0:	10bfffc4 	addi	r2,r2,-1
  8071c4:	8888703a 	and	r4,r17,r2
  8071c8:	202ad53a 	srli	r21,r4,20
  8071cc:	00800434 	movhi	r2,16
  8071d0:	10bfffc4 	addi	r2,r2,-1
  8071d4:	8886703a 	and	r3,r17,r2
  8071d8:	a829003a 	cmpeq	r20,r21,zero
  8071dc:	800b883a 	mov	r5,r16
  8071e0:	d8c00115 	stw	r3,4(sp)
  8071e4:	94000504 	addi	r16,r18,20
  8071e8:	a000021e 	bne	r20,zero,8071f4 <__d2b+0x80>
  8071ec:	18c00434 	orhi	r3,r3,16
  8071f0:	d8c00115 	stw	r3,4(sp)
  8071f4:	28002726 	beq	r5,zero,807294 <__d2b+0x120>
  8071f8:	d809883a 	mov	r4,sp
  8071fc:	d9400015 	stw	r5,0(sp)
  807200:	0806bd00 	call	806bd0 <__lo0bits>
  807204:	100d883a 	mov	r6,r2
  807208:	10003526 	beq	r2,zero,8072e0 <__d2b+0x16c>
  80720c:	d8c00117 	ldw	r3,4(sp)
  807210:	00800804 	movi	r2,32
  807214:	1185c83a 	sub	r2,r2,r6
  807218:	d9000017 	ldw	r4,0(sp)
  80721c:	1886983a 	sll	r3,r3,r2
  807220:	1906b03a 	or	r3,r3,r4
  807224:	90c00515 	stw	r3,20(r18)
  807228:	d8c00117 	ldw	r3,4(sp)
  80722c:	1986d83a 	srl	r3,r3,r6
  807230:	d8c00115 	stw	r3,4(sp)
  807234:	180b003a 	cmpeq	r5,r3,zero
  807238:	00800084 	movi	r2,2
  80723c:	114bc83a 	sub	r5,r2,r5
  807240:	80c00115 	stw	r3,4(r16)
  807244:	91400415 	stw	r5,16(r18)
  807248:	a0001a1e 	bne	r20,zero,8072b4 <__d2b+0x140>
  80724c:	3545883a 	add	r2,r6,r21
  807250:	10bef344 	addi	r2,r2,-1075
  807254:	00c00d44 	movi	r3,53
  807258:	b0800015 	stw	r2,0(r22)
  80725c:	1987c83a 	sub	r3,r3,r6
  807260:	b8c00015 	stw	r3,0(r23)
  807264:	9005883a 	mov	r2,r18
  807268:	dfc00a17 	ldw	ra,40(sp)
  80726c:	ddc00917 	ldw	r23,36(sp)
  807270:	dd800817 	ldw	r22,32(sp)
  807274:	dd400717 	ldw	r21,28(sp)
  807278:	dd000617 	ldw	r20,24(sp)
  80727c:	dcc00517 	ldw	r19,20(sp)
  807280:	dc800417 	ldw	r18,16(sp)
  807284:	dc400317 	ldw	r17,12(sp)
  807288:	dc000217 	ldw	r16,8(sp)
  80728c:	dec00b04 	addi	sp,sp,44
  807290:	f800283a 	ret
  807294:	d9000104 	addi	r4,sp,4
  807298:	0806bd00 	call	806bd0 <__lo0bits>
  80729c:	11800804 	addi	r6,r2,32
  8072a0:	d8800117 	ldw	r2,4(sp)
  8072a4:	94c00415 	stw	r19,16(r18)
  8072a8:	980b883a 	mov	r5,r19
  8072ac:	90800515 	stw	r2,20(r18)
  8072b0:	a03fe626 	beq	r20,zero,80724c <__d2b+0xd8>
  8072b4:	2945883a 	add	r2,r5,r5
  8072b8:	1085883a 	add	r2,r2,r2
  8072bc:	1405883a 	add	r2,r2,r16
  8072c0:	113fff17 	ldw	r4,-4(r2)
  8072c4:	30fef384 	addi	r3,r6,-1074
  8072c8:	2820917a 	slli	r16,r5,5
  8072cc:	b0c00015 	stw	r3,0(r22)
  8072d0:	0806b600 	call	806b60 <__hi0bits>
  8072d4:	80a1c83a 	sub	r16,r16,r2
  8072d8:	bc000015 	stw	r16,0(r23)
  8072dc:	003fe106 	br	807264 <__d2b+0xf0>
  8072e0:	d8800017 	ldw	r2,0(sp)
  8072e4:	90800515 	stw	r2,20(r18)
  8072e8:	d8c00117 	ldw	r3,4(sp)
  8072ec:	003fd106 	br	807234 <__d2b+0xc0>

008072f0 <__mdiff>:
  8072f0:	defffb04 	addi	sp,sp,-20
  8072f4:	dc000015 	stw	r16,0(sp)
  8072f8:	2821883a 	mov	r16,r5
  8072fc:	dc800215 	stw	r18,8(sp)
  807300:	300b883a 	mov	r5,r6
  807304:	2025883a 	mov	r18,r4
  807308:	8009883a 	mov	r4,r16
  80730c:	dc400115 	stw	r17,4(sp)
  807310:	dfc00415 	stw	ra,16(sp)
  807314:	dcc00315 	stw	r19,12(sp)
  807318:	3023883a 	mov	r17,r6
  80731c:	0806c940 	call	806c94 <__mcmp>
  807320:	10004226 	beq	r2,zero,80742c <__mdiff+0x13c>
  807324:	10005016 	blt	r2,zero,807468 <__mdiff+0x178>
  807328:	0027883a 	mov	r19,zero
  80732c:	81400117 	ldw	r5,4(r16)
  807330:	9009883a 	mov	r4,r18
  807334:	08070b80 	call	8070b8 <_Balloc>
  807338:	1019883a 	mov	r12,r2
  80733c:	82800417 	ldw	r10,16(r16)
  807340:	88800417 	ldw	r2,16(r17)
  807344:	81800504 	addi	r6,r16,20
  807348:	5287883a 	add	r3,r10,r10
  80734c:	1085883a 	add	r2,r2,r2
  807350:	18c7883a 	add	r3,r3,r3
  807354:	1085883a 	add	r2,r2,r2
  807358:	8a000504 	addi	r8,r17,20
  80735c:	64c00315 	stw	r19,12(r12)
  807360:	30db883a 	add	r13,r6,r3
  807364:	4097883a 	add	r11,r8,r2
  807368:	61c00504 	addi	r7,r12,20
  80736c:	0013883a 	mov	r9,zero
  807370:	31000017 	ldw	r4,0(r6)
  807374:	41400017 	ldw	r5,0(r8)
  807378:	42000104 	addi	r8,r8,4
  80737c:	20bfffcc 	andi	r2,r4,65535
  807380:	28ffffcc 	andi	r3,r5,65535
  807384:	10c5c83a 	sub	r2,r2,r3
  807388:	1245883a 	add	r2,r2,r9
  80738c:	2008d43a 	srli	r4,r4,16
  807390:	280ad43a 	srli	r5,r5,16
  807394:	1007d43a 	srai	r3,r2,16
  807398:	3880000d 	sth	r2,0(r7)
  80739c:	2149c83a 	sub	r4,r4,r5
  8073a0:	20c9883a 	add	r4,r4,r3
  8073a4:	3900008d 	sth	r4,2(r7)
  8073a8:	31800104 	addi	r6,r6,4
  8073ac:	39c00104 	addi	r7,r7,4
  8073b0:	2013d43a 	srai	r9,r4,16
  8073b4:	42ffee36 	bltu	r8,r11,807370 <__mdiff+0x80>
  8073b8:	33400c2e 	bgeu	r6,r13,8073ec <__mdiff+0xfc>
  8073bc:	30800017 	ldw	r2,0(r6)
  8073c0:	31800104 	addi	r6,r6,4
  8073c4:	10ffffcc 	andi	r3,r2,65535
  8073c8:	1a47883a 	add	r3,r3,r9
  8073cc:	1004d43a 	srli	r2,r2,16
  8073d0:	1809d43a 	srai	r4,r3,16
  8073d4:	38c0000d 	sth	r3,0(r7)
  8073d8:	1105883a 	add	r2,r2,r4
  8073dc:	3880008d 	sth	r2,2(r7)
  8073e0:	1013d43a 	srai	r9,r2,16
  8073e4:	39c00104 	addi	r7,r7,4
  8073e8:	337ff436 	bltu	r6,r13,8073bc <__mdiff+0xcc>
  8073ec:	38bfff17 	ldw	r2,-4(r7)
  8073f0:	38ffff04 	addi	r3,r7,-4
  8073f4:	1000041e 	bne	r2,zero,807408 <__mdiff+0x118>
  8073f8:	18ffff04 	addi	r3,r3,-4
  8073fc:	18800017 	ldw	r2,0(r3)
  807400:	52bfffc4 	addi	r10,r10,-1
  807404:	103ffc26 	beq	r2,zero,8073f8 <__mdiff+0x108>
  807408:	6005883a 	mov	r2,r12
  80740c:	62800415 	stw	r10,16(r12)
  807410:	dfc00417 	ldw	ra,16(sp)
  807414:	dcc00317 	ldw	r19,12(sp)
  807418:	dc800217 	ldw	r18,8(sp)
  80741c:	dc400117 	ldw	r17,4(sp)
  807420:	dc000017 	ldw	r16,0(sp)
  807424:	dec00504 	addi	sp,sp,20
  807428:	f800283a 	ret
  80742c:	9009883a 	mov	r4,r18
  807430:	000b883a 	mov	r5,zero
  807434:	08070b80 	call	8070b8 <_Balloc>
  807438:	1019883a 	mov	r12,r2
  80743c:	00800044 	movi	r2,1
  807440:	60800415 	stw	r2,16(r12)
  807444:	6005883a 	mov	r2,r12
  807448:	60000515 	stw	zero,20(r12)
  80744c:	dfc00417 	ldw	ra,16(sp)
  807450:	dcc00317 	ldw	r19,12(sp)
  807454:	dc800217 	ldw	r18,8(sp)
  807458:	dc400117 	ldw	r17,4(sp)
  80745c:	dc000017 	ldw	r16,0(sp)
  807460:	dec00504 	addi	sp,sp,20
  807464:	f800283a 	ret
  807468:	880d883a 	mov	r6,r17
  80746c:	04c00044 	movi	r19,1
  807470:	8023883a 	mov	r17,r16
  807474:	3021883a 	mov	r16,r6
  807478:	003fac06 	br	80732c <__mdiff+0x3c>

0080747c <__lshift>:
  80747c:	defff904 	addi	sp,sp,-28
  807480:	28800417 	ldw	r2,16(r5)
  807484:	dc000015 	stw	r16,0(sp)
  807488:	3021d17a 	srai	r16,r6,5
  80748c:	28c00217 	ldw	r3,8(r5)
  807490:	10800044 	addi	r2,r2,1
  807494:	dc400115 	stw	r17,4(sp)
  807498:	80a3883a 	add	r17,r16,r2
  80749c:	dd400515 	stw	r21,20(sp)
  8074a0:	dd000415 	stw	r20,16(sp)
  8074a4:	dc800215 	stw	r18,8(sp)
  8074a8:	dfc00615 	stw	ra,24(sp)
  8074ac:	2825883a 	mov	r18,r5
  8074b0:	dcc00315 	stw	r19,12(sp)
  8074b4:	3029883a 	mov	r20,r6
  8074b8:	202b883a 	mov	r21,r4
  8074bc:	29400117 	ldw	r5,4(r5)
  8074c0:	1c40030e 	bge	r3,r17,8074d0 <__lshift+0x54>
  8074c4:	18c7883a 	add	r3,r3,r3
  8074c8:	29400044 	addi	r5,r5,1
  8074cc:	1c7ffd16 	blt	r3,r17,8074c4 <__lshift+0x48>
  8074d0:	a809883a 	mov	r4,r21
  8074d4:	08070b80 	call	8070b8 <_Balloc>
  8074d8:	1027883a 	mov	r19,r2
  8074dc:	11400504 	addi	r5,r2,20
  8074e0:	0400090e 	bge	zero,r16,807508 <__lshift+0x8c>
  8074e4:	2805883a 	mov	r2,r5
  8074e8:	0007883a 	mov	r3,zero
  8074ec:	18c00044 	addi	r3,r3,1
  8074f0:	10000015 	stw	zero,0(r2)
  8074f4:	10800104 	addi	r2,r2,4
  8074f8:	80fffc1e 	bne	r16,r3,8074ec <__lshift+0x70>
  8074fc:	8405883a 	add	r2,r16,r16
  807500:	1085883a 	add	r2,r2,r2
  807504:	288b883a 	add	r5,r5,r2
  807508:	90800417 	ldw	r2,16(r18)
  80750c:	91000504 	addi	r4,r18,20
  807510:	a18007cc 	andi	r6,r20,31
  807514:	1085883a 	add	r2,r2,r2
  807518:	1085883a 	add	r2,r2,r2
  80751c:	208f883a 	add	r7,r4,r2
  807520:	30001e26 	beq	r6,zero,80759c <__lshift+0x120>
  807524:	00800804 	movi	r2,32
  807528:	1191c83a 	sub	r8,r2,r6
  80752c:	0007883a 	mov	r3,zero
  807530:	20800017 	ldw	r2,0(r4)
  807534:	1184983a 	sll	r2,r2,r6
  807538:	1884b03a 	or	r2,r3,r2
  80753c:	28800015 	stw	r2,0(r5)
  807540:	20c00017 	ldw	r3,0(r4)
  807544:	21000104 	addi	r4,r4,4
  807548:	29400104 	addi	r5,r5,4
  80754c:	1a06d83a 	srl	r3,r3,r8
  807550:	21fff736 	bltu	r4,r7,807530 <__lshift+0xb4>
  807554:	28c00015 	stw	r3,0(r5)
  807558:	18000126 	beq	r3,zero,807560 <__lshift+0xe4>
  80755c:	8c400044 	addi	r17,r17,1
  807560:	88bfffc4 	addi	r2,r17,-1
  807564:	98800415 	stw	r2,16(r19)
  807568:	a809883a 	mov	r4,r21
  80756c:	900b883a 	mov	r5,r18
  807570:	0806b380 	call	806b38 <_Bfree>
  807574:	9805883a 	mov	r2,r19
  807578:	dfc00617 	ldw	ra,24(sp)
  80757c:	dd400517 	ldw	r21,20(sp)
  807580:	dd000417 	ldw	r20,16(sp)
  807584:	dcc00317 	ldw	r19,12(sp)
  807588:	dc800217 	ldw	r18,8(sp)
  80758c:	dc400117 	ldw	r17,4(sp)
  807590:	dc000017 	ldw	r16,0(sp)
  807594:	dec00704 	addi	sp,sp,28
  807598:	f800283a 	ret
  80759c:	20800017 	ldw	r2,0(r4)
  8075a0:	21000104 	addi	r4,r4,4
  8075a4:	28800015 	stw	r2,0(r5)
  8075a8:	29400104 	addi	r5,r5,4
  8075ac:	21ffec2e 	bgeu	r4,r7,807560 <__lshift+0xe4>
  8075b0:	20800017 	ldw	r2,0(r4)
  8075b4:	21000104 	addi	r4,r4,4
  8075b8:	28800015 	stw	r2,0(r5)
  8075bc:	29400104 	addi	r5,r5,4
  8075c0:	21fff636 	bltu	r4,r7,80759c <__lshift+0x120>
  8075c4:	003fe606 	br	807560 <__lshift+0xe4>

008075c8 <__multiply>:
  8075c8:	defff004 	addi	sp,sp,-64
  8075cc:	dc800815 	stw	r18,32(sp)
  8075d0:	dc400715 	stw	r17,28(sp)
  8075d4:	2c800417 	ldw	r18,16(r5)
  8075d8:	34400417 	ldw	r17,16(r6)
  8075dc:	dcc00915 	stw	r19,36(sp)
  8075e0:	dc000615 	stw	r16,24(sp)
  8075e4:	dfc00f15 	stw	ra,60(sp)
  8075e8:	df000e15 	stw	fp,56(sp)
  8075ec:	ddc00d15 	stw	r23,52(sp)
  8075f0:	dd800c15 	stw	r22,48(sp)
  8075f4:	dd400b15 	stw	r21,44(sp)
  8075f8:	dd000a15 	stw	r20,40(sp)
  8075fc:	2821883a 	mov	r16,r5
  807600:	3027883a 	mov	r19,r6
  807604:	9440040e 	bge	r18,r17,807618 <__multiply+0x50>
  807608:	8825883a 	mov	r18,r17
  80760c:	2c400417 	ldw	r17,16(r5)
  807610:	2827883a 	mov	r19,r5
  807614:	3021883a 	mov	r16,r6
  807618:	80800217 	ldw	r2,8(r16)
  80761c:	9447883a 	add	r3,r18,r17
  807620:	d8c00415 	stw	r3,16(sp)
  807624:	81400117 	ldw	r5,4(r16)
  807628:	10c0010e 	bge	r2,r3,807630 <__multiply+0x68>
  80762c:	29400044 	addi	r5,r5,1
  807630:	08070b80 	call	8070b8 <_Balloc>
  807634:	d8800515 	stw	r2,20(sp)
  807638:	d9000417 	ldw	r4,16(sp)
  80763c:	d8c00517 	ldw	r3,20(sp)
  807640:	2105883a 	add	r2,r4,r4
  807644:	1085883a 	add	r2,r2,r2
  807648:	19000504 	addi	r4,r3,20
  80764c:	2085883a 	add	r2,r4,r2
  807650:	d8800315 	stw	r2,12(sp)
  807654:	2080052e 	bgeu	r4,r2,80766c <__multiply+0xa4>
  807658:	2005883a 	mov	r2,r4
  80765c:	d8c00317 	ldw	r3,12(sp)
  807660:	10000015 	stw	zero,0(r2)
  807664:	10800104 	addi	r2,r2,4
  807668:	10fffc36 	bltu	r2,r3,80765c <__multiply+0x94>
  80766c:	8c45883a 	add	r2,r17,r17
  807670:	9487883a 	add	r3,r18,r18
  807674:	9dc00504 	addi	r23,r19,20
  807678:	1085883a 	add	r2,r2,r2
  80767c:	84000504 	addi	r16,r16,20
  807680:	18c7883a 	add	r3,r3,r3
  807684:	b885883a 	add	r2,r23,r2
  807688:	dc000015 	stw	r16,0(sp)
  80768c:	d8800215 	stw	r2,8(sp)
  807690:	80f9883a 	add	fp,r16,r3
  807694:	b880432e 	bgeu	r23,r2,8077a4 <__multiply+0x1dc>
  807698:	d9000115 	stw	r4,4(sp)
  80769c:	b9000017 	ldw	r4,0(r23)
  8076a0:	253fffcc 	andi	r20,r4,65535
  8076a4:	a0001a26 	beq	r20,zero,807710 <__multiply+0x148>
  8076a8:	dcc00017 	ldw	r19,0(sp)
  8076ac:	dc800117 	ldw	r18,4(sp)
  8076b0:	002b883a 	mov	r21,zero
  8076b4:	9c400017 	ldw	r17,0(r19)
  8076b8:	94000017 	ldw	r16,0(r18)
  8076bc:	a009883a 	mov	r4,r20
  8076c0:	897fffcc 	andi	r5,r17,65535
  8076c4:	08016000 	call	801600 <__mulsi3>
  8076c8:	880ad43a 	srli	r5,r17,16
  8076cc:	80ffffcc 	andi	r3,r16,65535
  8076d0:	a8c7883a 	add	r3,r21,r3
  8076d4:	a009883a 	mov	r4,r20
  8076d8:	10e3883a 	add	r17,r2,r3
  8076dc:	8020d43a 	srli	r16,r16,16
  8076e0:	08016000 	call	801600 <__mulsi3>
  8076e4:	8806d43a 	srli	r3,r17,16
  8076e8:	1405883a 	add	r2,r2,r16
  8076ec:	9cc00104 	addi	r19,r19,4
  8076f0:	1887883a 	add	r3,r3,r2
  8076f4:	90c0008d 	sth	r3,2(r18)
  8076f8:	9440000d 	sth	r17,0(r18)
  8076fc:	182ad43a 	srli	r21,r3,16
  807700:	94800104 	addi	r18,r18,4
  807704:	9f3feb36 	bltu	r19,fp,8076b4 <__multiply+0xec>
  807708:	95400015 	stw	r21,0(r18)
  80770c:	b9000017 	ldw	r4,0(r23)
  807710:	202ad43a 	srli	r21,r4,16
  807714:	a8001c26 	beq	r21,zero,807788 <__multiply+0x1c0>
  807718:	d9000117 	ldw	r4,4(sp)
  80771c:	dd000017 	ldw	r20,0(sp)
  807720:	002d883a 	mov	r22,zero
  807724:	24c00017 	ldw	r19,0(r4)
  807728:	2025883a 	mov	r18,r4
  80772c:	9823883a 	mov	r17,r19
  807730:	a4000017 	ldw	r16,0(r20)
  807734:	a809883a 	mov	r4,r21
  807738:	a5000104 	addi	r20,r20,4
  80773c:	817fffcc 	andi	r5,r16,65535
  807740:	08016000 	call	801600 <__mulsi3>
  807744:	8806d43a 	srli	r3,r17,16
  807748:	800ad43a 	srli	r5,r16,16
  80774c:	94c0000d 	sth	r19,0(r18)
  807750:	b0c7883a 	add	r3,r22,r3
  807754:	10e1883a 	add	r16,r2,r3
  807758:	9400008d 	sth	r16,2(r18)
  80775c:	a809883a 	mov	r4,r21
  807760:	94800104 	addi	r18,r18,4
  807764:	08016000 	call	801600 <__mulsi3>
  807768:	94400017 	ldw	r17,0(r18)
  80776c:	8020d43a 	srli	r16,r16,16
  807770:	88ffffcc 	andi	r3,r17,65535
  807774:	10c5883a 	add	r2,r2,r3
  807778:	80a7883a 	add	r19,r16,r2
  80777c:	982cd43a 	srli	r22,r19,16
  807780:	a73feb36 	bltu	r20,fp,807730 <__multiply+0x168>
  807784:	94c00015 	stw	r19,0(r18)
  807788:	d8800217 	ldw	r2,8(sp)
  80778c:	bdc00104 	addi	r23,r23,4
  807790:	b880042e 	bgeu	r23,r2,8077a4 <__multiply+0x1dc>
  807794:	d8c00117 	ldw	r3,4(sp)
  807798:	18c00104 	addi	r3,r3,4
  80779c:	d8c00115 	stw	r3,4(sp)
  8077a0:	003fbe06 	br	80769c <__multiply+0xd4>
  8077a4:	d9000417 	ldw	r4,16(sp)
  8077a8:	01000c0e 	bge	zero,r4,8077dc <__multiply+0x214>
  8077ac:	d8c00317 	ldw	r3,12(sp)
  8077b0:	18bfff17 	ldw	r2,-4(r3)
  8077b4:	18ffff04 	addi	r3,r3,-4
  8077b8:	10000326 	beq	r2,zero,8077c8 <__multiply+0x200>
  8077bc:	00000706 	br	8077dc <__multiply+0x214>
  8077c0:	18800017 	ldw	r2,0(r3)
  8077c4:	1000051e 	bne	r2,zero,8077dc <__multiply+0x214>
  8077c8:	d9000417 	ldw	r4,16(sp)
  8077cc:	18ffff04 	addi	r3,r3,-4
  8077d0:	213fffc4 	addi	r4,r4,-1
  8077d4:	d9000415 	stw	r4,16(sp)
  8077d8:	203ff91e 	bne	r4,zero,8077c0 <__multiply+0x1f8>
  8077dc:	d8800417 	ldw	r2,16(sp)
  8077e0:	d8c00517 	ldw	r3,20(sp)
  8077e4:	18800415 	stw	r2,16(r3)
  8077e8:	1805883a 	mov	r2,r3
  8077ec:	dfc00f17 	ldw	ra,60(sp)
  8077f0:	df000e17 	ldw	fp,56(sp)
  8077f4:	ddc00d17 	ldw	r23,52(sp)
  8077f8:	dd800c17 	ldw	r22,48(sp)
  8077fc:	dd400b17 	ldw	r21,44(sp)
  807800:	dd000a17 	ldw	r20,40(sp)
  807804:	dcc00917 	ldw	r19,36(sp)
  807808:	dc800817 	ldw	r18,32(sp)
  80780c:	dc400717 	ldw	r17,28(sp)
  807810:	dc000617 	ldw	r16,24(sp)
  807814:	dec01004 	addi	sp,sp,64
  807818:	f800283a 	ret

0080781c <__i2b>:
  80781c:	defffd04 	addi	sp,sp,-12
  807820:	dc000015 	stw	r16,0(sp)
  807824:	04000044 	movi	r16,1
  807828:	dc800115 	stw	r18,4(sp)
  80782c:	2825883a 	mov	r18,r5
  807830:	800b883a 	mov	r5,r16
  807834:	dfc00215 	stw	ra,8(sp)
  807838:	08070b80 	call	8070b8 <_Balloc>
  80783c:	14000415 	stw	r16,16(r2)
  807840:	14800515 	stw	r18,20(r2)
  807844:	dfc00217 	ldw	ra,8(sp)
  807848:	dc800117 	ldw	r18,4(sp)
  80784c:	dc000017 	ldw	r16,0(sp)
  807850:	dec00304 	addi	sp,sp,12
  807854:	f800283a 	ret

00807858 <__multadd>:
  807858:	defff604 	addi	sp,sp,-40
  80785c:	dd800615 	stw	r22,24(sp)
  807860:	2d800417 	ldw	r22,16(r5)
  807864:	df000815 	stw	fp,32(sp)
  807868:	ddc00715 	stw	r23,28(sp)
  80786c:	dd400515 	stw	r21,20(sp)
  807870:	dd000415 	stw	r20,16(sp)
  807874:	dcc00315 	stw	r19,12(sp)
  807878:	dc800215 	stw	r18,8(sp)
  80787c:	dfc00915 	stw	ra,36(sp)
  807880:	dc400115 	stw	r17,4(sp)
  807884:	dc000015 	stw	r16,0(sp)
  807888:	282f883a 	mov	r23,r5
  80788c:	2039883a 	mov	fp,r4
  807890:	302b883a 	mov	r21,r6
  807894:	3829883a 	mov	r20,r7
  807898:	2c800504 	addi	r18,r5,20
  80789c:	0027883a 	mov	r19,zero
  8078a0:	94400017 	ldw	r17,0(r18)
  8078a4:	a80b883a 	mov	r5,r21
  8078a8:	9cc00044 	addi	r19,r19,1
  8078ac:	893fffcc 	andi	r4,r17,65535
  8078b0:	08016000 	call	801600 <__mulsi3>
  8078b4:	8808d43a 	srli	r4,r17,16
  8078b8:	1521883a 	add	r16,r2,r20
  8078bc:	a80b883a 	mov	r5,r21
  8078c0:	08016000 	call	801600 <__mulsi3>
  8078c4:	8008d43a 	srli	r4,r16,16
  8078c8:	843fffcc 	andi	r16,r16,65535
  8078cc:	1105883a 	add	r2,r2,r4
  8078d0:	1006943a 	slli	r3,r2,16
  8078d4:	1028d43a 	srli	r20,r2,16
  8078d8:	1c07883a 	add	r3,r3,r16
  8078dc:	90c00015 	stw	r3,0(r18)
  8078e0:	94800104 	addi	r18,r18,4
  8078e4:	9dbfee16 	blt	r19,r22,8078a0 <__multadd+0x48>
  8078e8:	a0000826 	beq	r20,zero,80790c <__multadd+0xb4>
  8078ec:	b8800217 	ldw	r2,8(r23)
  8078f0:	b080130e 	bge	r22,r2,807940 <__multadd+0xe8>
  8078f4:	b585883a 	add	r2,r22,r22
  8078f8:	1085883a 	add	r2,r2,r2
  8078fc:	15c5883a 	add	r2,r2,r23
  807900:	b0c00044 	addi	r3,r22,1
  807904:	15000515 	stw	r20,20(r2)
  807908:	b8c00415 	stw	r3,16(r23)
  80790c:	b805883a 	mov	r2,r23
  807910:	dfc00917 	ldw	ra,36(sp)
  807914:	df000817 	ldw	fp,32(sp)
  807918:	ddc00717 	ldw	r23,28(sp)
  80791c:	dd800617 	ldw	r22,24(sp)
  807920:	dd400517 	ldw	r21,20(sp)
  807924:	dd000417 	ldw	r20,16(sp)
  807928:	dcc00317 	ldw	r19,12(sp)
  80792c:	dc800217 	ldw	r18,8(sp)
  807930:	dc400117 	ldw	r17,4(sp)
  807934:	dc000017 	ldw	r16,0(sp)
  807938:	dec00a04 	addi	sp,sp,40
  80793c:	f800283a 	ret
  807940:	b9400117 	ldw	r5,4(r23)
  807944:	e009883a 	mov	r4,fp
  807948:	29400044 	addi	r5,r5,1
  80794c:	08070b80 	call	8070b8 <_Balloc>
  807950:	b9800417 	ldw	r6,16(r23)
  807954:	b9400304 	addi	r5,r23,12
  807958:	11000304 	addi	r4,r2,12
  80795c:	318d883a 	add	r6,r6,r6
  807960:	318d883a 	add	r6,r6,r6
  807964:	31800204 	addi	r6,r6,8
  807968:	1023883a 	mov	r17,r2
  80796c:	08069200 	call	806920 <memcpy>
  807970:	b80b883a 	mov	r5,r23
  807974:	e009883a 	mov	r4,fp
  807978:	0806b380 	call	806b38 <_Bfree>
  80797c:	882f883a 	mov	r23,r17
  807980:	003fdc06 	br	8078f4 <__multadd+0x9c>

00807984 <__pow5mult>:
  807984:	defffa04 	addi	sp,sp,-24
  807988:	308000cc 	andi	r2,r6,3
  80798c:	dd000415 	stw	r20,16(sp)
  807990:	dcc00315 	stw	r19,12(sp)
  807994:	dc000015 	stw	r16,0(sp)
  807998:	dfc00515 	stw	ra,20(sp)
  80799c:	dc800215 	stw	r18,8(sp)
  8079a0:	dc400115 	stw	r17,4(sp)
  8079a4:	3021883a 	mov	r16,r6
  8079a8:	2027883a 	mov	r19,r4
  8079ac:	2829883a 	mov	r20,r5
  8079b0:	10002b1e 	bne	r2,zero,807a60 <__pow5mult+0xdc>
  8079b4:	8025d0ba 	srai	r18,r16,2
  8079b8:	90001b26 	beq	r18,zero,807a28 <__pow5mult+0xa4>
  8079bc:	9c001217 	ldw	r16,72(r19)
  8079c0:	8000081e 	bne	r16,zero,8079e4 <__pow5mult+0x60>
  8079c4:	00003006 	br	807a88 <__pow5mult+0x104>
  8079c8:	800b883a 	mov	r5,r16
  8079cc:	800d883a 	mov	r6,r16
  8079d0:	9809883a 	mov	r4,r19
  8079d4:	90001426 	beq	r18,zero,807a28 <__pow5mult+0xa4>
  8079d8:	80800017 	ldw	r2,0(r16)
  8079dc:	10001b26 	beq	r2,zero,807a4c <__pow5mult+0xc8>
  8079e0:	1021883a 	mov	r16,r2
  8079e4:	9080004c 	andi	r2,r18,1
  8079e8:	1005003a 	cmpeq	r2,r2,zero
  8079ec:	9025d07a 	srai	r18,r18,1
  8079f0:	800d883a 	mov	r6,r16
  8079f4:	9809883a 	mov	r4,r19
  8079f8:	a00b883a 	mov	r5,r20
  8079fc:	103ff21e 	bne	r2,zero,8079c8 <__pow5mult+0x44>
  807a00:	08075c80 	call	8075c8 <__multiply>
  807a04:	a00b883a 	mov	r5,r20
  807a08:	9809883a 	mov	r4,r19
  807a0c:	1023883a 	mov	r17,r2
  807a10:	0806b380 	call	806b38 <_Bfree>
  807a14:	8829883a 	mov	r20,r17
  807a18:	800b883a 	mov	r5,r16
  807a1c:	800d883a 	mov	r6,r16
  807a20:	9809883a 	mov	r4,r19
  807a24:	903fec1e 	bne	r18,zero,8079d8 <__pow5mult+0x54>
  807a28:	a005883a 	mov	r2,r20
  807a2c:	dfc00517 	ldw	ra,20(sp)
  807a30:	dd000417 	ldw	r20,16(sp)
  807a34:	dcc00317 	ldw	r19,12(sp)
  807a38:	dc800217 	ldw	r18,8(sp)
  807a3c:	dc400117 	ldw	r17,4(sp)
  807a40:	dc000017 	ldw	r16,0(sp)
  807a44:	dec00604 	addi	sp,sp,24
  807a48:	f800283a 	ret
  807a4c:	08075c80 	call	8075c8 <__multiply>
  807a50:	80800015 	stw	r2,0(r16)
  807a54:	1021883a 	mov	r16,r2
  807a58:	10000015 	stw	zero,0(r2)
  807a5c:	003fe106 	br	8079e4 <__pow5mult+0x60>
  807a60:	1085883a 	add	r2,r2,r2
  807a64:	00c02074 	movhi	r3,129
  807a68:	18f56104 	addi	r3,r3,-10876
  807a6c:	1085883a 	add	r2,r2,r2
  807a70:	10c5883a 	add	r2,r2,r3
  807a74:	11bfff17 	ldw	r6,-4(r2)
  807a78:	000f883a 	mov	r7,zero
  807a7c:	08078580 	call	807858 <__multadd>
  807a80:	1029883a 	mov	r20,r2
  807a84:	003fcb06 	br	8079b4 <__pow5mult+0x30>
  807a88:	9809883a 	mov	r4,r19
  807a8c:	01409c44 	movi	r5,625
  807a90:	080781c0 	call	80781c <__i2b>
  807a94:	98801215 	stw	r2,72(r19)
  807a98:	1021883a 	mov	r16,r2
  807a9c:	10000015 	stw	zero,0(r2)
  807aa0:	003fd006 	br	8079e4 <__pow5mult+0x60>

00807aa4 <__s2b>:
  807aa4:	defff904 	addi	sp,sp,-28
  807aa8:	dcc00315 	stw	r19,12(sp)
  807aac:	dc800215 	stw	r18,8(sp)
  807ab0:	2827883a 	mov	r19,r5
  807ab4:	2025883a 	mov	r18,r4
  807ab8:	01400244 	movi	r5,9
  807abc:	39000204 	addi	r4,r7,8
  807ac0:	dd000415 	stw	r20,16(sp)
  807ac4:	dc400115 	stw	r17,4(sp)
  807ac8:	dfc00615 	stw	ra,24(sp)
  807acc:	dd400515 	stw	r21,20(sp)
  807ad0:	dc000015 	stw	r16,0(sp)
  807ad4:	3829883a 	mov	r20,r7
  807ad8:	3023883a 	mov	r17,r6
  807adc:	0800d180 	call	800d18 <__divsi3>
  807ae0:	00c00044 	movi	r3,1
  807ae4:	1880350e 	bge	r3,r2,807bbc <__s2b+0x118>
  807ae8:	000b883a 	mov	r5,zero
  807aec:	18c7883a 	add	r3,r3,r3
  807af0:	29400044 	addi	r5,r5,1
  807af4:	18bffd16 	blt	r3,r2,807aec <__s2b+0x48>
  807af8:	9009883a 	mov	r4,r18
  807afc:	08070b80 	call	8070b8 <_Balloc>
  807b00:	1011883a 	mov	r8,r2
  807b04:	d8800717 	ldw	r2,28(sp)
  807b08:	00c00044 	movi	r3,1
  807b0c:	01800244 	movi	r6,9
  807b10:	40800515 	stw	r2,20(r8)
  807b14:	40c00415 	stw	r3,16(r8)
  807b18:	3440260e 	bge	r6,r17,807bb4 <__s2b+0x110>
  807b1c:	3021883a 	mov	r16,r6
  807b20:	99ab883a 	add	r21,r19,r6
  807b24:	9c05883a 	add	r2,r19,r16
  807b28:	11c00007 	ldb	r7,0(r2)
  807b2c:	400b883a 	mov	r5,r8
  807b30:	9009883a 	mov	r4,r18
  807b34:	39fff404 	addi	r7,r7,-48
  807b38:	01800284 	movi	r6,10
  807b3c:	08078580 	call	807858 <__multadd>
  807b40:	84000044 	addi	r16,r16,1
  807b44:	1011883a 	mov	r8,r2
  807b48:	8c3ff61e 	bne	r17,r16,807b24 <__s2b+0x80>
  807b4c:	ac45883a 	add	r2,r21,r17
  807b50:	117ffe04 	addi	r5,r2,-8
  807b54:	880d883a 	mov	r6,r17
  807b58:	35000c0e 	bge	r6,r20,807b8c <__s2b+0xe8>
  807b5c:	a185c83a 	sub	r2,r20,r6
  807b60:	2821883a 	mov	r16,r5
  807b64:	28a3883a 	add	r17,r5,r2
  807b68:	81c00007 	ldb	r7,0(r16)
  807b6c:	400b883a 	mov	r5,r8
  807b70:	9009883a 	mov	r4,r18
  807b74:	39fff404 	addi	r7,r7,-48
  807b78:	01800284 	movi	r6,10
  807b7c:	08078580 	call	807858 <__multadd>
  807b80:	84000044 	addi	r16,r16,1
  807b84:	1011883a 	mov	r8,r2
  807b88:	847ff71e 	bne	r16,r17,807b68 <__s2b+0xc4>
  807b8c:	4005883a 	mov	r2,r8
  807b90:	dfc00617 	ldw	ra,24(sp)
  807b94:	dd400517 	ldw	r21,20(sp)
  807b98:	dd000417 	ldw	r20,16(sp)
  807b9c:	dcc00317 	ldw	r19,12(sp)
  807ba0:	dc800217 	ldw	r18,8(sp)
  807ba4:	dc400117 	ldw	r17,4(sp)
  807ba8:	dc000017 	ldw	r16,0(sp)
  807bac:	dec00704 	addi	sp,sp,28
  807bb0:	f800283a 	ret
  807bb4:	99400284 	addi	r5,r19,10
  807bb8:	003fe706 	br	807b58 <__s2b+0xb4>
  807bbc:	000b883a 	mov	r5,zero
  807bc0:	003fcd06 	br	807af8 <__s2b+0x54>

00807bc4 <_realloc_r>:
  807bc4:	defff404 	addi	sp,sp,-48
  807bc8:	dd800815 	stw	r22,32(sp)
  807bcc:	dc800415 	stw	r18,16(sp)
  807bd0:	dc400315 	stw	r17,12(sp)
  807bd4:	dfc00b15 	stw	ra,44(sp)
  807bd8:	df000a15 	stw	fp,40(sp)
  807bdc:	ddc00915 	stw	r23,36(sp)
  807be0:	dd400715 	stw	r21,28(sp)
  807be4:	dd000615 	stw	r20,24(sp)
  807be8:	dcc00515 	stw	r19,20(sp)
  807bec:	dc000215 	stw	r16,8(sp)
  807bf0:	2825883a 	mov	r18,r5
  807bf4:	3023883a 	mov	r17,r6
  807bf8:	202d883a 	mov	r22,r4
  807bfc:	2800c926 	beq	r5,zero,807f24 <_realloc_r+0x360>
  807c00:	080acb80 	call	80acb8 <__malloc_lock>
  807c04:	943ffe04 	addi	r16,r18,-8
  807c08:	88c002c4 	addi	r3,r17,11
  807c0c:	00800584 	movi	r2,22
  807c10:	82000117 	ldw	r8,4(r16)
  807c14:	10c01b2e 	bgeu	r2,r3,807c84 <_realloc_r+0xc0>
  807c18:	00bffe04 	movi	r2,-8
  807c1c:	188e703a 	and	r7,r3,r2
  807c20:	3839883a 	mov	fp,r7
  807c24:	38001a16 	blt	r7,zero,807c90 <_realloc_r+0xcc>
  807c28:	e4401936 	bltu	fp,r17,807c90 <_realloc_r+0xcc>
  807c2c:	013fff04 	movi	r4,-4
  807c30:	4126703a 	and	r19,r8,r4
  807c34:	99c02616 	blt	r19,r7,807cd0 <_realloc_r+0x10c>
  807c38:	802b883a 	mov	r21,r16
  807c3c:	9829883a 	mov	r20,r19
  807c40:	84000204 	addi	r16,r16,8
  807c44:	a80f883a 	mov	r7,r21
  807c48:	a70dc83a 	sub	r6,r20,fp
  807c4c:	008003c4 	movi	r2,15
  807c50:	1180c136 	bltu	r2,r6,807f58 <_realloc_r+0x394>
  807c54:	38800117 	ldw	r2,4(r7)
  807c58:	a549883a 	add	r4,r20,r21
  807c5c:	1080004c 	andi	r2,r2,1
  807c60:	a084b03a 	or	r2,r20,r2
  807c64:	38800115 	stw	r2,4(r7)
  807c68:	20c00117 	ldw	r3,4(r4)
  807c6c:	18c00054 	ori	r3,r3,1
  807c70:	20c00115 	stw	r3,4(r4)
  807c74:	b009883a 	mov	r4,r22
  807c78:	080acd80 	call	80acd8 <__malloc_unlock>
  807c7c:	8023883a 	mov	r17,r16
  807c80:	00000606 	br	807c9c <_realloc_r+0xd8>
  807c84:	01c00404 	movi	r7,16
  807c88:	3839883a 	mov	fp,r7
  807c8c:	e47fe72e 	bgeu	fp,r17,807c2c <_realloc_r+0x68>
  807c90:	00800304 	movi	r2,12
  807c94:	0023883a 	mov	r17,zero
  807c98:	b0800015 	stw	r2,0(r22)
  807c9c:	8805883a 	mov	r2,r17
  807ca0:	dfc00b17 	ldw	ra,44(sp)
  807ca4:	df000a17 	ldw	fp,40(sp)
  807ca8:	ddc00917 	ldw	r23,36(sp)
  807cac:	dd800817 	ldw	r22,32(sp)
  807cb0:	dd400717 	ldw	r21,28(sp)
  807cb4:	dd000617 	ldw	r20,24(sp)
  807cb8:	dcc00517 	ldw	r19,20(sp)
  807cbc:	dc800417 	ldw	r18,16(sp)
  807cc0:	dc400317 	ldw	r17,12(sp)
  807cc4:	dc000217 	ldw	r16,8(sp)
  807cc8:	dec00c04 	addi	sp,sp,48
  807ccc:	f800283a 	ret
  807cd0:	00802074 	movhi	r2,129
  807cd4:	10b67404 	addi	r2,r2,-9776
  807cd8:	12400217 	ldw	r9,8(r2)
  807cdc:	84cd883a 	add	r6,r16,r19
  807ce0:	802b883a 	mov	r21,r16
  807ce4:	3240b926 	beq	r6,r9,807fcc <_realloc_r+0x408>
  807ce8:	31400117 	ldw	r5,4(r6)
  807cec:	00bfff84 	movi	r2,-2
  807cf0:	2884703a 	and	r2,r5,r2
  807cf4:	1185883a 	add	r2,r2,r6
  807cf8:	10c00117 	ldw	r3,4(r2)
  807cfc:	18c0004c 	andi	r3,r3,1
  807d00:	1807003a 	cmpeq	r3,r3,zero
  807d04:	1800a326 	beq	r3,zero,807f94 <_realloc_r+0x3d0>
  807d08:	2908703a 	and	r4,r5,r4
  807d0c:	9929883a 	add	r20,r19,r4
  807d10:	a1c0a30e 	bge	r20,r7,807fa0 <_realloc_r+0x3dc>
  807d14:	4080004c 	andi	r2,r8,1
  807d18:	1000551e 	bne	r2,zero,807e70 <_realloc_r+0x2ac>
  807d1c:	80800017 	ldw	r2,0(r16)
  807d20:	80afc83a 	sub	r23,r16,r2
  807d24:	b8c00117 	ldw	r3,4(r23)
  807d28:	00bfff04 	movi	r2,-4
  807d2c:	1884703a 	and	r2,r3,r2
  807d30:	30002e26 	beq	r6,zero,807dec <_realloc_r+0x228>
  807d34:	3240b926 	beq	r6,r9,80801c <_realloc_r+0x458>
  807d38:	98a9883a 	add	r20,r19,r2
  807d3c:	2509883a 	add	r4,r4,r20
  807d40:	d9000015 	stw	r4,0(sp)
  807d44:	21c02a16 	blt	r4,r7,807df0 <_realloc_r+0x22c>
  807d48:	30800317 	ldw	r2,12(r6)
  807d4c:	30c00217 	ldw	r3,8(r6)
  807d50:	01400904 	movi	r5,36
  807d54:	99bfff04 	addi	r6,r19,-4
  807d58:	18800315 	stw	r2,12(r3)
  807d5c:	10c00215 	stw	r3,8(r2)
  807d60:	b9000317 	ldw	r4,12(r23)
  807d64:	b8800217 	ldw	r2,8(r23)
  807d68:	b82b883a 	mov	r21,r23
  807d6c:	bc000204 	addi	r16,r23,8
  807d70:	20800215 	stw	r2,8(r4)
  807d74:	11000315 	stw	r4,12(r2)
  807d78:	2980e436 	bltu	r5,r6,80810c <_realloc_r+0x548>
  807d7c:	008004c4 	movi	r2,19
  807d80:	9009883a 	mov	r4,r18
  807d84:	8011883a 	mov	r8,r16
  807d88:	11800f2e 	bgeu	r2,r6,807dc8 <_realloc_r+0x204>
  807d8c:	90800017 	ldw	r2,0(r18)
  807d90:	ba000404 	addi	r8,r23,16
  807d94:	91000204 	addi	r4,r18,8
  807d98:	b8800215 	stw	r2,8(r23)
  807d9c:	90c00117 	ldw	r3,4(r18)
  807da0:	008006c4 	movi	r2,27
  807da4:	b8c00315 	stw	r3,12(r23)
  807da8:	1180072e 	bgeu	r2,r6,807dc8 <_realloc_r+0x204>
  807dac:	90c00217 	ldw	r3,8(r18)
  807db0:	ba000604 	addi	r8,r23,24
  807db4:	91000404 	addi	r4,r18,16
  807db8:	b8c00415 	stw	r3,16(r23)
  807dbc:	90800317 	ldw	r2,12(r18)
  807dc0:	b8800515 	stw	r2,20(r23)
  807dc4:	3140e726 	beq	r6,r5,808164 <_realloc_r+0x5a0>
  807dc8:	20800017 	ldw	r2,0(r4)
  807dcc:	dd000017 	ldw	r20,0(sp)
  807dd0:	b80f883a 	mov	r7,r23
  807dd4:	40800015 	stw	r2,0(r8)
  807dd8:	20c00117 	ldw	r3,4(r4)
  807ddc:	40c00115 	stw	r3,4(r8)
  807de0:	20800217 	ldw	r2,8(r4)
  807de4:	40800215 	stw	r2,8(r8)
  807de8:	003f9706 	br	807c48 <_realloc_r+0x84>
  807dec:	98a9883a 	add	r20,r19,r2
  807df0:	a1c01f16 	blt	r20,r7,807e70 <_realloc_r+0x2ac>
  807df4:	b8c00317 	ldw	r3,12(r23)
  807df8:	b8800217 	ldw	r2,8(r23)
  807dfc:	99bfff04 	addi	r6,r19,-4
  807e00:	01400904 	movi	r5,36
  807e04:	b82b883a 	mov	r21,r23
  807e08:	18800215 	stw	r2,8(r3)
  807e0c:	10c00315 	stw	r3,12(r2)
  807e10:	bc000204 	addi	r16,r23,8
  807e14:	2980c336 	bltu	r5,r6,808124 <_realloc_r+0x560>
  807e18:	008004c4 	movi	r2,19
  807e1c:	9009883a 	mov	r4,r18
  807e20:	8011883a 	mov	r8,r16
  807e24:	11800f2e 	bgeu	r2,r6,807e64 <_realloc_r+0x2a0>
  807e28:	90800017 	ldw	r2,0(r18)
  807e2c:	ba000404 	addi	r8,r23,16
  807e30:	91000204 	addi	r4,r18,8
  807e34:	b8800215 	stw	r2,8(r23)
  807e38:	90c00117 	ldw	r3,4(r18)
  807e3c:	008006c4 	movi	r2,27
  807e40:	b8c00315 	stw	r3,12(r23)
  807e44:	1180072e 	bgeu	r2,r6,807e64 <_realloc_r+0x2a0>
  807e48:	90c00217 	ldw	r3,8(r18)
  807e4c:	ba000604 	addi	r8,r23,24
  807e50:	91000404 	addi	r4,r18,16
  807e54:	b8c00415 	stw	r3,16(r23)
  807e58:	90800317 	ldw	r2,12(r18)
  807e5c:	b8800515 	stw	r2,20(r23)
  807e60:	3140c726 	beq	r6,r5,808180 <_realloc_r+0x5bc>
  807e64:	20800017 	ldw	r2,0(r4)
  807e68:	b80f883a 	mov	r7,r23
  807e6c:	003fd906 	br	807dd4 <_realloc_r+0x210>
  807e70:	880b883a 	mov	r5,r17
  807e74:	b009883a 	mov	r4,r22
  807e78:	08060fc0 	call	8060fc <_malloc_r>
  807e7c:	1023883a 	mov	r17,r2
  807e80:	10002526 	beq	r2,zero,807f18 <_realloc_r+0x354>
  807e84:	80800117 	ldw	r2,4(r16)
  807e88:	00ffff84 	movi	r3,-2
  807e8c:	893ffe04 	addi	r4,r17,-8
  807e90:	10c4703a 	and	r2,r2,r3
  807e94:	8085883a 	add	r2,r16,r2
  807e98:	20809526 	beq	r4,r2,8080f0 <_realloc_r+0x52c>
  807e9c:	99bfff04 	addi	r6,r19,-4
  807ea0:	01c00904 	movi	r7,36
  807ea4:	39804536 	bltu	r7,r6,807fbc <_realloc_r+0x3f8>
  807ea8:	008004c4 	movi	r2,19
  807eac:	9009883a 	mov	r4,r18
  807eb0:	880b883a 	mov	r5,r17
  807eb4:	11800f2e 	bgeu	r2,r6,807ef4 <_realloc_r+0x330>
  807eb8:	90800017 	ldw	r2,0(r18)
  807ebc:	89400204 	addi	r5,r17,8
  807ec0:	91000204 	addi	r4,r18,8
  807ec4:	88800015 	stw	r2,0(r17)
  807ec8:	90c00117 	ldw	r3,4(r18)
  807ecc:	008006c4 	movi	r2,27
  807ed0:	88c00115 	stw	r3,4(r17)
  807ed4:	1180072e 	bgeu	r2,r6,807ef4 <_realloc_r+0x330>
  807ed8:	90c00217 	ldw	r3,8(r18)
  807edc:	89400404 	addi	r5,r17,16
  807ee0:	91000404 	addi	r4,r18,16
  807ee4:	88c00215 	stw	r3,8(r17)
  807ee8:	90800317 	ldw	r2,12(r18)
  807eec:	88800315 	stw	r2,12(r17)
  807ef0:	31c09126 	beq	r6,r7,808138 <_realloc_r+0x574>
  807ef4:	20800017 	ldw	r2,0(r4)
  807ef8:	28800015 	stw	r2,0(r5)
  807efc:	20c00117 	ldw	r3,4(r4)
  807f00:	28c00115 	stw	r3,4(r5)
  807f04:	20800217 	ldw	r2,8(r4)
  807f08:	28800215 	stw	r2,8(r5)
  807f0c:	900b883a 	mov	r5,r18
  807f10:	b009883a 	mov	r4,r22
  807f14:	08055740 	call	805574 <_free_r>
  807f18:	b009883a 	mov	r4,r22
  807f1c:	080acd80 	call	80acd8 <__malloc_unlock>
  807f20:	003f5e06 	br	807c9c <_realloc_r+0xd8>
  807f24:	300b883a 	mov	r5,r6
  807f28:	dfc00b17 	ldw	ra,44(sp)
  807f2c:	df000a17 	ldw	fp,40(sp)
  807f30:	ddc00917 	ldw	r23,36(sp)
  807f34:	dd800817 	ldw	r22,32(sp)
  807f38:	dd400717 	ldw	r21,28(sp)
  807f3c:	dd000617 	ldw	r20,24(sp)
  807f40:	dcc00517 	ldw	r19,20(sp)
  807f44:	dc800417 	ldw	r18,16(sp)
  807f48:	dc400317 	ldw	r17,12(sp)
  807f4c:	dc000217 	ldw	r16,8(sp)
  807f50:	dec00c04 	addi	sp,sp,48
  807f54:	08060fc1 	jmpi	8060fc <_malloc_r>
  807f58:	38800117 	ldw	r2,4(r7)
  807f5c:	e54b883a 	add	r5,fp,r21
  807f60:	31000054 	ori	r4,r6,1
  807f64:	1080004c 	andi	r2,r2,1
  807f68:	1704b03a 	or	r2,r2,fp
  807f6c:	38800115 	stw	r2,4(r7)
  807f70:	29000115 	stw	r4,4(r5)
  807f74:	2987883a 	add	r3,r5,r6
  807f78:	18800117 	ldw	r2,4(r3)
  807f7c:	29400204 	addi	r5,r5,8
  807f80:	b009883a 	mov	r4,r22
  807f84:	10800054 	ori	r2,r2,1
  807f88:	18800115 	stw	r2,4(r3)
  807f8c:	08055740 	call	805574 <_free_r>
  807f90:	003f3806 	br	807c74 <_realloc_r+0xb0>
  807f94:	000d883a 	mov	r6,zero
  807f98:	0009883a 	mov	r4,zero
  807f9c:	003f5d06 	br	807d14 <_realloc_r+0x150>
  807fa0:	30c00217 	ldw	r3,8(r6)
  807fa4:	30800317 	ldw	r2,12(r6)
  807fa8:	800f883a 	mov	r7,r16
  807fac:	84000204 	addi	r16,r16,8
  807fb0:	10c00215 	stw	r3,8(r2)
  807fb4:	18800315 	stw	r2,12(r3)
  807fb8:	003f2306 	br	807c48 <_realloc_r+0x84>
  807fbc:	8809883a 	mov	r4,r17
  807fc0:	900b883a 	mov	r5,r18
  807fc4:	08069c00 	call	8069c0 <memmove>
  807fc8:	003fd006 	br	807f0c <_realloc_r+0x348>
  807fcc:	30800117 	ldw	r2,4(r6)
  807fd0:	e0c00404 	addi	r3,fp,16
  807fd4:	1108703a 	and	r4,r2,r4
  807fd8:	9905883a 	add	r2,r19,r4
  807fdc:	10ff4d16 	blt	r2,r3,807d14 <_realloc_r+0x150>
  807fe0:	1705c83a 	sub	r2,r2,fp
  807fe4:	870b883a 	add	r5,r16,fp
  807fe8:	10800054 	ori	r2,r2,1
  807fec:	28800115 	stw	r2,4(r5)
  807ff0:	80c00117 	ldw	r3,4(r16)
  807ff4:	00802074 	movhi	r2,129
  807ff8:	10b67404 	addi	r2,r2,-9776
  807ffc:	b009883a 	mov	r4,r22
  808000:	18c0004c 	andi	r3,r3,1
  808004:	e0c6b03a 	or	r3,fp,r3
  808008:	11400215 	stw	r5,8(r2)
  80800c:	80c00115 	stw	r3,4(r16)
  808010:	080acd80 	call	80acd8 <__malloc_unlock>
  808014:	84400204 	addi	r17,r16,8
  808018:	003f2006 	br	807c9c <_realloc_r+0xd8>
  80801c:	98a9883a 	add	r20,r19,r2
  808020:	2509883a 	add	r4,r4,r20
  808024:	e0800404 	addi	r2,fp,16
  808028:	d9000115 	stw	r4,4(sp)
  80802c:	20bf7016 	blt	r4,r2,807df0 <_realloc_r+0x22c>
  808030:	b8c00317 	ldw	r3,12(r23)
  808034:	b8800217 	ldw	r2,8(r23)
  808038:	99bfff04 	addi	r6,r19,-4
  80803c:	01400904 	movi	r5,36
  808040:	18800215 	stw	r2,8(r3)
  808044:	10c00315 	stw	r3,12(r2)
  808048:	bc400204 	addi	r17,r23,8
  80804c:	29804136 	bltu	r5,r6,808154 <_realloc_r+0x590>
  808050:	008004c4 	movi	r2,19
  808054:	9009883a 	mov	r4,r18
  808058:	880f883a 	mov	r7,r17
  80805c:	11800f2e 	bgeu	r2,r6,80809c <_realloc_r+0x4d8>
  808060:	90800017 	ldw	r2,0(r18)
  808064:	b9c00404 	addi	r7,r23,16
  808068:	91000204 	addi	r4,r18,8
  80806c:	b8800215 	stw	r2,8(r23)
  808070:	90c00117 	ldw	r3,4(r18)
  808074:	008006c4 	movi	r2,27
  808078:	b8c00315 	stw	r3,12(r23)
  80807c:	1180072e 	bgeu	r2,r6,80809c <_realloc_r+0x4d8>
  808080:	90c00217 	ldw	r3,8(r18)
  808084:	b9c00604 	addi	r7,r23,24
  808088:	91000404 	addi	r4,r18,16
  80808c:	b8c00415 	stw	r3,16(r23)
  808090:	90800317 	ldw	r2,12(r18)
  808094:	b8800515 	stw	r2,20(r23)
  808098:	31404026 	beq	r6,r5,80819c <_realloc_r+0x5d8>
  80809c:	20800017 	ldw	r2,0(r4)
  8080a0:	38800015 	stw	r2,0(r7)
  8080a4:	20c00117 	ldw	r3,4(r4)
  8080a8:	38c00115 	stw	r3,4(r7)
  8080ac:	20800217 	ldw	r2,8(r4)
  8080b0:	38800215 	stw	r2,8(r7)
  8080b4:	d8c00117 	ldw	r3,4(sp)
  8080b8:	bf0b883a 	add	r5,r23,fp
  8080bc:	b009883a 	mov	r4,r22
  8080c0:	1f05c83a 	sub	r2,r3,fp
  8080c4:	10800054 	ori	r2,r2,1
  8080c8:	28800115 	stw	r2,4(r5)
  8080cc:	b8c00117 	ldw	r3,4(r23)
  8080d0:	00802074 	movhi	r2,129
  8080d4:	10b67404 	addi	r2,r2,-9776
  8080d8:	11400215 	stw	r5,8(r2)
  8080dc:	18c0004c 	andi	r3,r3,1
  8080e0:	e0c6b03a 	or	r3,fp,r3
  8080e4:	b8c00115 	stw	r3,4(r23)
  8080e8:	080acd80 	call	80acd8 <__malloc_unlock>
  8080ec:	003eeb06 	br	807c9c <_realloc_r+0xd8>
  8080f0:	20800117 	ldw	r2,4(r4)
  8080f4:	00ffff04 	movi	r3,-4
  8080f8:	800f883a 	mov	r7,r16
  8080fc:	10c4703a 	and	r2,r2,r3
  808100:	98a9883a 	add	r20,r19,r2
  808104:	84000204 	addi	r16,r16,8
  808108:	003ecf06 	br	807c48 <_realloc_r+0x84>
  80810c:	900b883a 	mov	r5,r18
  808110:	8009883a 	mov	r4,r16
  808114:	08069c00 	call	8069c0 <memmove>
  808118:	dd000017 	ldw	r20,0(sp)
  80811c:	b80f883a 	mov	r7,r23
  808120:	003ec906 	br	807c48 <_realloc_r+0x84>
  808124:	900b883a 	mov	r5,r18
  808128:	8009883a 	mov	r4,r16
  80812c:	08069c00 	call	8069c0 <memmove>
  808130:	b80f883a 	mov	r7,r23
  808134:	003ec406 	br	807c48 <_realloc_r+0x84>
  808138:	90c00417 	ldw	r3,16(r18)
  80813c:	89400604 	addi	r5,r17,24
  808140:	91000604 	addi	r4,r18,24
  808144:	88c00415 	stw	r3,16(r17)
  808148:	90800517 	ldw	r2,20(r18)
  80814c:	88800515 	stw	r2,20(r17)
  808150:	003f6806 	br	807ef4 <_realloc_r+0x330>
  808154:	900b883a 	mov	r5,r18
  808158:	8809883a 	mov	r4,r17
  80815c:	08069c00 	call	8069c0 <memmove>
  808160:	003fd406 	br	8080b4 <_realloc_r+0x4f0>
  808164:	90c00417 	ldw	r3,16(r18)
  808168:	91000604 	addi	r4,r18,24
  80816c:	ba000804 	addi	r8,r23,32
  808170:	b8c00615 	stw	r3,24(r23)
  808174:	90800517 	ldw	r2,20(r18)
  808178:	b8800715 	stw	r2,28(r23)
  80817c:	003f1206 	br	807dc8 <_realloc_r+0x204>
  808180:	90c00417 	ldw	r3,16(r18)
  808184:	91000604 	addi	r4,r18,24
  808188:	ba000804 	addi	r8,r23,32
  80818c:	b8c00615 	stw	r3,24(r23)
  808190:	90800517 	ldw	r2,20(r18)
  808194:	b8800715 	stw	r2,28(r23)
  808198:	003f3206 	br	807e64 <_realloc_r+0x2a0>
  80819c:	90c00417 	ldw	r3,16(r18)
  8081a0:	91000604 	addi	r4,r18,24
  8081a4:	b9c00804 	addi	r7,r23,32
  8081a8:	b8c00615 	stw	r3,24(r23)
  8081ac:	90800517 	ldw	r2,20(r18)
  8081b0:	b8800715 	stw	r2,28(r23)
  8081b4:	003fb906 	br	80809c <_realloc_r+0x4d8>

008081b8 <__isinfd>:
  8081b8:	200d883a 	mov	r6,r4
  8081bc:	0109c83a 	sub	r4,zero,r4
  8081c0:	2188b03a 	or	r4,r4,r6
  8081c4:	2008d7fa 	srli	r4,r4,31
  8081c8:	00a00034 	movhi	r2,32768
  8081cc:	10bfffc4 	addi	r2,r2,-1
  8081d0:	1144703a 	and	r2,r2,r5
  8081d4:	2088b03a 	or	r4,r4,r2
  8081d8:	009ffc34 	movhi	r2,32752
  8081dc:	1105c83a 	sub	r2,r2,r4
  8081e0:	0087c83a 	sub	r3,zero,r2
  8081e4:	10c4b03a 	or	r2,r2,r3
  8081e8:	1004d7fa 	srli	r2,r2,31
  8081ec:	00c00044 	movi	r3,1
  8081f0:	1885c83a 	sub	r2,r3,r2
  8081f4:	f800283a 	ret

008081f8 <__isnand>:
  8081f8:	200d883a 	mov	r6,r4
  8081fc:	0109c83a 	sub	r4,zero,r4
  808200:	2188b03a 	or	r4,r4,r6
  808204:	2008d7fa 	srli	r4,r4,31
  808208:	00a00034 	movhi	r2,32768
  80820c:	10bfffc4 	addi	r2,r2,-1
  808210:	1144703a 	and	r2,r2,r5
  808214:	2088b03a 	or	r4,r4,r2
  808218:	009ffc34 	movhi	r2,32752
  80821c:	1105c83a 	sub	r2,r2,r4
  808220:	1004d7fa 	srli	r2,r2,31
  808224:	f800283a 	ret

00808228 <_sbrk_r>:
  808228:	defffd04 	addi	sp,sp,-12
  80822c:	dc000015 	stw	r16,0(sp)
  808230:	04002074 	movhi	r16,129
  808234:	8402a904 	addi	r16,r16,2724
  808238:	dc400115 	stw	r17,4(sp)
  80823c:	80000015 	stw	zero,0(r16)
  808240:	2023883a 	mov	r17,r4
  808244:	2809883a 	mov	r4,r5
  808248:	dfc00215 	stw	ra,8(sp)
  80824c:	080aef40 	call	80aef4 <sbrk>
  808250:	1007883a 	mov	r3,r2
  808254:	00bfffc4 	movi	r2,-1
  808258:	18800626 	beq	r3,r2,808274 <_sbrk_r+0x4c>
  80825c:	1805883a 	mov	r2,r3
  808260:	dfc00217 	ldw	ra,8(sp)
  808264:	dc400117 	ldw	r17,4(sp)
  808268:	dc000017 	ldw	r16,0(sp)
  80826c:	dec00304 	addi	sp,sp,12
  808270:	f800283a 	ret
  808274:	80800017 	ldw	r2,0(r16)
  808278:	103ff826 	beq	r2,zero,80825c <_sbrk_r+0x34>
  80827c:	88800015 	stw	r2,0(r17)
  808280:	1805883a 	mov	r2,r3
  808284:	dfc00217 	ldw	ra,8(sp)
  808288:	dc400117 	ldw	r17,4(sp)
  80828c:	dc000017 	ldw	r16,0(sp)
  808290:	dec00304 	addi	sp,sp,12
  808294:	f800283a 	ret

00808298 <__sclose>:
  808298:	2940038f 	ldh	r5,14(r5)
  80829c:	08086541 	jmpi	808654 <_close_r>

008082a0 <__sseek>:
  8082a0:	defffe04 	addi	sp,sp,-8
  8082a4:	dc000015 	stw	r16,0(sp)
  8082a8:	2821883a 	mov	r16,r5
  8082ac:	2940038f 	ldh	r5,14(r5)
  8082b0:	dfc00115 	stw	ra,4(sp)
  8082b4:	08088cc0 	call	8088cc <_lseek_r>
  8082b8:	1007883a 	mov	r3,r2
  8082bc:	00bfffc4 	movi	r2,-1
  8082c0:	18800926 	beq	r3,r2,8082e8 <__sseek+0x48>
  8082c4:	8080030b 	ldhu	r2,12(r16)
  8082c8:	80c01415 	stw	r3,80(r16)
  8082cc:	10840014 	ori	r2,r2,4096
  8082d0:	8080030d 	sth	r2,12(r16)
  8082d4:	1805883a 	mov	r2,r3
  8082d8:	dfc00117 	ldw	ra,4(sp)
  8082dc:	dc000017 	ldw	r16,0(sp)
  8082e0:	dec00204 	addi	sp,sp,8
  8082e4:	f800283a 	ret
  8082e8:	8080030b 	ldhu	r2,12(r16)
  8082ec:	10bbffcc 	andi	r2,r2,61439
  8082f0:	8080030d 	sth	r2,12(r16)
  8082f4:	1805883a 	mov	r2,r3
  8082f8:	dfc00117 	ldw	ra,4(sp)
  8082fc:	dc000017 	ldw	r16,0(sp)
  808300:	dec00204 	addi	sp,sp,8
  808304:	f800283a 	ret

00808308 <__swrite>:
  808308:	2880030b 	ldhu	r2,12(r5)
  80830c:	defffb04 	addi	sp,sp,-20
  808310:	dcc00315 	stw	r19,12(sp)
  808314:	1080400c 	andi	r2,r2,256
  808318:	dc800215 	stw	r18,8(sp)
  80831c:	dc400115 	stw	r17,4(sp)
  808320:	dc000015 	stw	r16,0(sp)
  808324:	3027883a 	mov	r19,r6
  808328:	3825883a 	mov	r18,r7
  80832c:	dfc00415 	stw	ra,16(sp)
  808330:	2821883a 	mov	r16,r5
  808334:	000d883a 	mov	r6,zero
  808338:	01c00084 	movi	r7,2
  80833c:	2023883a 	mov	r17,r4
  808340:	10000226 	beq	r2,zero,80834c <__swrite+0x44>
  808344:	2940038f 	ldh	r5,14(r5)
  808348:	08088cc0 	call	8088cc <_lseek_r>
  80834c:	8080030b 	ldhu	r2,12(r16)
  808350:	8140038f 	ldh	r5,14(r16)
  808354:	8809883a 	mov	r4,r17
  808358:	10bbffcc 	andi	r2,r2,61439
  80835c:	980d883a 	mov	r6,r19
  808360:	900f883a 	mov	r7,r18
  808364:	8080030d 	sth	r2,12(r16)
  808368:	dfc00417 	ldw	ra,16(sp)
  80836c:	dcc00317 	ldw	r19,12(sp)
  808370:	dc800217 	ldw	r18,8(sp)
  808374:	dc400117 	ldw	r17,4(sp)
  808378:	dc000017 	ldw	r16,0(sp)
  80837c:	dec00504 	addi	sp,sp,20
  808380:	08085141 	jmpi	808514 <_write_r>

00808384 <__sread>:
  808384:	defffe04 	addi	sp,sp,-8
  808388:	dc000015 	stw	r16,0(sp)
  80838c:	2821883a 	mov	r16,r5
  808390:	2940038f 	ldh	r5,14(r5)
  808394:	dfc00115 	stw	ra,4(sp)
  808398:	08089440 	call	808944 <_read_r>
  80839c:	1007883a 	mov	r3,r2
  8083a0:	10000816 	blt	r2,zero,8083c4 <__sread+0x40>
  8083a4:	80801417 	ldw	r2,80(r16)
  8083a8:	10c5883a 	add	r2,r2,r3
  8083ac:	80801415 	stw	r2,80(r16)
  8083b0:	1805883a 	mov	r2,r3
  8083b4:	dfc00117 	ldw	ra,4(sp)
  8083b8:	dc000017 	ldw	r16,0(sp)
  8083bc:	dec00204 	addi	sp,sp,8
  8083c0:	f800283a 	ret
  8083c4:	8080030b 	ldhu	r2,12(r16)
  8083c8:	10bbffcc 	andi	r2,r2,61439
  8083cc:	8080030d 	sth	r2,12(r16)
  8083d0:	1805883a 	mov	r2,r3
  8083d4:	dfc00117 	ldw	ra,4(sp)
  8083d8:	dc000017 	ldw	r16,0(sp)
  8083dc:	dec00204 	addi	sp,sp,8
  8083e0:	f800283a 	ret

008083e4 <strcmp>:
  8083e4:	2144b03a 	or	r2,r4,r5
  8083e8:	108000cc 	andi	r2,r2,3
  8083ec:	10001d1e 	bne	r2,zero,808464 <strcmp+0x80>
  8083f0:	200f883a 	mov	r7,r4
  8083f4:	28800017 	ldw	r2,0(r5)
  8083f8:	21000017 	ldw	r4,0(r4)
  8083fc:	280d883a 	mov	r6,r5
  808400:	2080161e 	bne	r4,r2,80845c <strcmp+0x78>
  808404:	023fbff4 	movhi	r8,65279
  808408:	423fbfc4 	addi	r8,r8,-257
  80840c:	2207883a 	add	r3,r4,r8
  808410:	01602074 	movhi	r5,32897
  808414:	29602004 	addi	r5,r5,-32640
  808418:	1946703a 	and	r3,r3,r5
  80841c:	0104303a 	nor	r2,zero,r4
  808420:	10c4703a 	and	r2,r2,r3
  808424:	10001c1e 	bne	r2,zero,808498 <strcmp+0xb4>
  808428:	4013883a 	mov	r9,r8
  80842c:	2811883a 	mov	r8,r5
  808430:	00000106 	br	808438 <strcmp+0x54>
  808434:	1800181e 	bne	r3,zero,808498 <strcmp+0xb4>
  808438:	39c00104 	addi	r7,r7,4
  80843c:	39000017 	ldw	r4,0(r7)
  808440:	31800104 	addi	r6,r6,4
  808444:	31400017 	ldw	r5,0(r6)
  808448:	2245883a 	add	r2,r4,r9
  80844c:	1204703a 	and	r2,r2,r8
  808450:	0106303a 	nor	r3,zero,r4
  808454:	1886703a 	and	r3,r3,r2
  808458:	217ff626 	beq	r4,r5,808434 <strcmp+0x50>
  80845c:	3809883a 	mov	r4,r7
  808460:	300b883a 	mov	r5,r6
  808464:	20c00007 	ldb	r3,0(r4)
  808468:	1800051e 	bne	r3,zero,808480 <strcmp+0x9c>
  80846c:	00000606 	br	808488 <strcmp+0xa4>
  808470:	21000044 	addi	r4,r4,1
  808474:	20c00007 	ldb	r3,0(r4)
  808478:	29400044 	addi	r5,r5,1
  80847c:	18000226 	beq	r3,zero,808488 <strcmp+0xa4>
  808480:	28800007 	ldb	r2,0(r5)
  808484:	18bffa26 	beq	r3,r2,808470 <strcmp+0x8c>
  808488:	20c00003 	ldbu	r3,0(r4)
  80848c:	28800003 	ldbu	r2,0(r5)
  808490:	1885c83a 	sub	r2,r3,r2
  808494:	f800283a 	ret
  808498:	0005883a 	mov	r2,zero
  80849c:	f800283a 	ret

008084a0 <strlen>:
  8084a0:	208000cc 	andi	r2,r4,3
  8084a4:	2011883a 	mov	r8,r4
  8084a8:	1000161e 	bne	r2,zero,808504 <strlen+0x64>
  8084ac:	20c00017 	ldw	r3,0(r4)
  8084b0:	017fbff4 	movhi	r5,65279
  8084b4:	297fbfc4 	addi	r5,r5,-257
  8084b8:	01e02074 	movhi	r7,32897
  8084bc:	39e02004 	addi	r7,r7,-32640
  8084c0:	1945883a 	add	r2,r3,r5
  8084c4:	11c4703a 	and	r2,r2,r7
  8084c8:	00c6303a 	nor	r3,zero,r3
  8084cc:	1886703a 	and	r3,r3,r2
  8084d0:	18000c1e 	bne	r3,zero,808504 <strlen+0x64>
  8084d4:	280d883a 	mov	r6,r5
  8084d8:	380b883a 	mov	r5,r7
  8084dc:	21000104 	addi	r4,r4,4
  8084e0:	20800017 	ldw	r2,0(r4)
  8084e4:	1187883a 	add	r3,r2,r6
  8084e8:	1946703a 	and	r3,r3,r5
  8084ec:	0084303a 	nor	r2,zero,r2
  8084f0:	10c4703a 	and	r2,r2,r3
  8084f4:	103ff926 	beq	r2,zero,8084dc <strlen+0x3c>
  8084f8:	20800007 	ldb	r2,0(r4)
  8084fc:	10000326 	beq	r2,zero,80850c <strlen+0x6c>
  808500:	21000044 	addi	r4,r4,1
  808504:	20800007 	ldb	r2,0(r4)
  808508:	103ffd1e 	bne	r2,zero,808500 <strlen+0x60>
  80850c:	2205c83a 	sub	r2,r4,r8
  808510:	f800283a 	ret

00808514 <_write_r>:
  808514:	defffd04 	addi	sp,sp,-12
  808518:	dc000015 	stw	r16,0(sp)
  80851c:	04002074 	movhi	r16,129
  808520:	8402a904 	addi	r16,r16,2724
  808524:	dc400115 	stw	r17,4(sp)
  808528:	80000015 	stw	zero,0(r16)
  80852c:	2023883a 	mov	r17,r4
  808530:	2809883a 	mov	r4,r5
  808534:	300b883a 	mov	r5,r6
  808538:	380d883a 	mov	r6,r7
  80853c:	dfc00215 	stw	ra,8(sp)
  808540:	080afb00 	call	80afb0 <write>
  808544:	1007883a 	mov	r3,r2
  808548:	00bfffc4 	movi	r2,-1
  80854c:	18800626 	beq	r3,r2,808568 <_write_r+0x54>
  808550:	1805883a 	mov	r2,r3
  808554:	dfc00217 	ldw	ra,8(sp)
  808558:	dc400117 	ldw	r17,4(sp)
  80855c:	dc000017 	ldw	r16,0(sp)
  808560:	dec00304 	addi	sp,sp,12
  808564:	f800283a 	ret
  808568:	80800017 	ldw	r2,0(r16)
  80856c:	103ff826 	beq	r2,zero,808550 <_write_r+0x3c>
  808570:	88800015 	stw	r2,0(r17)
  808574:	1805883a 	mov	r2,r3
  808578:	dfc00217 	ldw	ra,8(sp)
  80857c:	dc400117 	ldw	r17,4(sp)
  808580:	dc000017 	ldw	r16,0(sp)
  808584:	dec00304 	addi	sp,sp,12
  808588:	f800283a 	ret

0080858c <_calloc_r>:
  80858c:	defffe04 	addi	sp,sp,-8
  808590:	dc400015 	stw	r17,0(sp)
  808594:	2023883a 	mov	r17,r4
  808598:	2809883a 	mov	r4,r5
  80859c:	300b883a 	mov	r5,r6
  8085a0:	dfc00115 	stw	ra,4(sp)
  8085a4:	08016000 	call	801600 <__mulsi3>
  8085a8:	100b883a 	mov	r5,r2
  8085ac:	8809883a 	mov	r4,r17
  8085b0:	08060fc0 	call	8060fc <_malloc_r>
  8085b4:	1023883a 	mov	r17,r2
  8085b8:	01c00904 	movi	r7,36
  8085bc:	10000d26 	beq	r2,zero,8085f4 <_calloc_r+0x68>
  8085c0:	10ffff17 	ldw	r3,-4(r2)
  8085c4:	1009883a 	mov	r4,r2
  8085c8:	00bfff04 	movi	r2,-4
  8085cc:	1886703a 	and	r3,r3,r2
  8085d0:	1887883a 	add	r3,r3,r2
  8085d4:	180d883a 	mov	r6,r3
  8085d8:	000b883a 	mov	r5,zero
  8085dc:	38c01736 	bltu	r7,r3,80863c <_calloc_r+0xb0>
  8085e0:	008004c4 	movi	r2,19
  8085e4:	10c00836 	bltu	r2,r3,808608 <_calloc_r+0x7c>
  8085e8:	20000215 	stw	zero,8(r4)
  8085ec:	20000015 	stw	zero,0(r4)
  8085f0:	20000115 	stw	zero,4(r4)
  8085f4:	8805883a 	mov	r2,r17
  8085f8:	dfc00117 	ldw	ra,4(sp)
  8085fc:	dc400017 	ldw	r17,0(sp)
  808600:	dec00204 	addi	sp,sp,8
  808604:	f800283a 	ret
  808608:	008006c4 	movi	r2,27
  80860c:	88000015 	stw	zero,0(r17)
  808610:	88000115 	stw	zero,4(r17)
  808614:	89000204 	addi	r4,r17,8
  808618:	10fff32e 	bgeu	r2,r3,8085e8 <_calloc_r+0x5c>
  80861c:	88000215 	stw	zero,8(r17)
  808620:	88000315 	stw	zero,12(r17)
  808624:	89000404 	addi	r4,r17,16
  808628:	19ffef1e 	bne	r3,r7,8085e8 <_calloc_r+0x5c>
  80862c:	89000604 	addi	r4,r17,24
  808630:	88000415 	stw	zero,16(r17)
  808634:	88000515 	stw	zero,20(r17)
  808638:	003feb06 	br	8085e8 <_calloc_r+0x5c>
  80863c:	0806aa00 	call	806aa0 <memset>
  808640:	8805883a 	mov	r2,r17
  808644:	dfc00117 	ldw	ra,4(sp)
  808648:	dc400017 	ldw	r17,0(sp)
  80864c:	dec00204 	addi	sp,sp,8
  808650:	f800283a 	ret

00808654 <_close_r>:
  808654:	defffd04 	addi	sp,sp,-12
  808658:	dc000015 	stw	r16,0(sp)
  80865c:	04002074 	movhi	r16,129
  808660:	8402a904 	addi	r16,r16,2724
  808664:	dc400115 	stw	r17,4(sp)
  808668:	80000015 	stw	zero,0(r16)
  80866c:	2023883a 	mov	r17,r4
  808670:	2809883a 	mov	r4,r5
  808674:	dfc00215 	stw	ra,8(sp)
  808678:	080a6240 	call	80a624 <close>
  80867c:	1007883a 	mov	r3,r2
  808680:	00bfffc4 	movi	r2,-1
  808684:	18800626 	beq	r3,r2,8086a0 <_close_r+0x4c>
  808688:	1805883a 	mov	r2,r3
  80868c:	dfc00217 	ldw	ra,8(sp)
  808690:	dc400117 	ldw	r17,4(sp)
  808694:	dc000017 	ldw	r16,0(sp)
  808698:	dec00304 	addi	sp,sp,12
  80869c:	f800283a 	ret
  8086a0:	80800017 	ldw	r2,0(r16)
  8086a4:	103ff826 	beq	r2,zero,808688 <_close_r+0x34>
  8086a8:	88800015 	stw	r2,0(r17)
  8086ac:	1805883a 	mov	r2,r3
  8086b0:	dfc00217 	ldw	ra,8(sp)
  8086b4:	dc400117 	ldw	r17,4(sp)
  8086b8:	dc000017 	ldw	r16,0(sp)
  8086bc:	dec00304 	addi	sp,sp,12
  8086c0:	f800283a 	ret

008086c4 <_fclose_r>:
  8086c4:	defffc04 	addi	sp,sp,-16
  8086c8:	dc400115 	stw	r17,4(sp)
  8086cc:	dc000015 	stw	r16,0(sp)
  8086d0:	dfc00315 	stw	ra,12(sp)
  8086d4:	dc800215 	stw	r18,8(sp)
  8086d8:	2821883a 	mov	r16,r5
  8086dc:	2023883a 	mov	r17,r4
  8086e0:	28002926 	beq	r5,zero,808788 <_fclose_r+0xc4>
  8086e4:	08051ac0 	call	8051ac <__sfp_lock_acquire>
  8086e8:	88000226 	beq	r17,zero,8086f4 <_fclose_r+0x30>
  8086ec:	88800e17 	ldw	r2,56(r17)
  8086f0:	10002d26 	beq	r2,zero,8087a8 <_fclose_r+0xe4>
  8086f4:	8080030f 	ldh	r2,12(r16)
  8086f8:	10002226 	beq	r2,zero,808784 <_fclose_r+0xc0>
  8086fc:	8809883a 	mov	r4,r17
  808700:	800b883a 	mov	r5,r16
  808704:	0804f240 	call	804f24 <_fflush_r>
  808708:	1025883a 	mov	r18,r2
  80870c:	80800b17 	ldw	r2,44(r16)
  808710:	10000426 	beq	r2,zero,808724 <_fclose_r+0x60>
  808714:	81400717 	ldw	r5,28(r16)
  808718:	8809883a 	mov	r4,r17
  80871c:	103ee83a 	callr	r2
  808720:	10002a16 	blt	r2,zero,8087cc <_fclose_r+0x108>
  808724:	8080030b 	ldhu	r2,12(r16)
  808728:	1080200c 	andi	r2,r2,128
  80872c:	1000231e 	bne	r2,zero,8087bc <_fclose_r+0xf8>
  808730:	81400c17 	ldw	r5,48(r16)
  808734:	28000526 	beq	r5,zero,80874c <_fclose_r+0x88>
  808738:	80801004 	addi	r2,r16,64
  80873c:	28800226 	beq	r5,r2,808748 <_fclose_r+0x84>
  808740:	8809883a 	mov	r4,r17
  808744:	08055740 	call	805574 <_free_r>
  808748:	80000c15 	stw	zero,48(r16)
  80874c:	81401117 	ldw	r5,68(r16)
  808750:	28000326 	beq	r5,zero,808760 <_fclose_r+0x9c>
  808754:	8809883a 	mov	r4,r17
  808758:	08055740 	call	805574 <_free_r>
  80875c:	80001115 	stw	zero,68(r16)
  808760:	8000030d 	sth	zero,12(r16)
  808764:	08051b00 	call	8051b0 <__sfp_lock_release>
  808768:	9005883a 	mov	r2,r18
  80876c:	dfc00317 	ldw	ra,12(sp)
  808770:	dc800217 	ldw	r18,8(sp)
  808774:	dc400117 	ldw	r17,4(sp)
  808778:	dc000017 	ldw	r16,0(sp)
  80877c:	dec00404 	addi	sp,sp,16
  808780:	f800283a 	ret
  808784:	08051b00 	call	8051b0 <__sfp_lock_release>
  808788:	0025883a 	mov	r18,zero
  80878c:	9005883a 	mov	r2,r18
  808790:	dfc00317 	ldw	ra,12(sp)
  808794:	dc800217 	ldw	r18,8(sp)
  808798:	dc400117 	ldw	r17,4(sp)
  80879c:	dc000017 	ldw	r16,0(sp)
  8087a0:	dec00404 	addi	sp,sp,16
  8087a4:	f800283a 	ret
  8087a8:	8809883a 	mov	r4,r17
  8087ac:	08051bc0 	call	8051bc <__sinit>
  8087b0:	8080030f 	ldh	r2,12(r16)
  8087b4:	103fd11e 	bne	r2,zero,8086fc <_fclose_r+0x38>
  8087b8:	003ff206 	br	808784 <_fclose_r+0xc0>
  8087bc:	81400417 	ldw	r5,16(r16)
  8087c0:	8809883a 	mov	r4,r17
  8087c4:	08055740 	call	805574 <_free_r>
  8087c8:	003fd906 	br	808730 <_fclose_r+0x6c>
  8087cc:	04bfffc4 	movi	r18,-1
  8087d0:	003fd406 	br	808724 <_fclose_r+0x60>

008087d4 <fclose>:
  8087d4:	00802074 	movhi	r2,129
  8087d8:	10bbf804 	addi	r2,r2,-4128
  8087dc:	200b883a 	mov	r5,r4
  8087e0:	11000017 	ldw	r4,0(r2)
  8087e4:	08086c41 	jmpi	8086c4 <_fclose_r>

008087e8 <_fstat_r>:
  8087e8:	defffd04 	addi	sp,sp,-12
  8087ec:	dc000015 	stw	r16,0(sp)
  8087f0:	04002074 	movhi	r16,129
  8087f4:	8402a904 	addi	r16,r16,2724
  8087f8:	dc400115 	stw	r17,4(sp)
  8087fc:	80000015 	stw	zero,0(r16)
  808800:	2023883a 	mov	r17,r4
  808804:	2809883a 	mov	r4,r5
  808808:	300b883a 	mov	r5,r6
  80880c:	dfc00215 	stw	ra,8(sp)
  808810:	080a7b00 	call	80a7b0 <fstat>
  808814:	1007883a 	mov	r3,r2
  808818:	00bfffc4 	movi	r2,-1
  80881c:	18800626 	beq	r3,r2,808838 <_fstat_r+0x50>
  808820:	1805883a 	mov	r2,r3
  808824:	dfc00217 	ldw	ra,8(sp)
  808828:	dc400117 	ldw	r17,4(sp)
  80882c:	dc000017 	ldw	r16,0(sp)
  808830:	dec00304 	addi	sp,sp,12
  808834:	f800283a 	ret
  808838:	80800017 	ldw	r2,0(r16)
  80883c:	103ff826 	beq	r2,zero,808820 <_fstat_r+0x38>
  808840:	88800015 	stw	r2,0(r17)
  808844:	1805883a 	mov	r2,r3
  808848:	dfc00217 	ldw	ra,8(sp)
  80884c:	dc400117 	ldw	r17,4(sp)
  808850:	dc000017 	ldw	r16,0(sp)
  808854:	dec00304 	addi	sp,sp,12
  808858:	f800283a 	ret

0080885c <_isatty_r>:
  80885c:	defffd04 	addi	sp,sp,-12
  808860:	dc000015 	stw	r16,0(sp)
  808864:	04002074 	movhi	r16,129
  808868:	8402a904 	addi	r16,r16,2724
  80886c:	dc400115 	stw	r17,4(sp)
  808870:	80000015 	stw	zero,0(r16)
  808874:	2023883a 	mov	r17,r4
  808878:	2809883a 	mov	r4,r5
  80887c:	dfc00215 	stw	ra,8(sp)
  808880:	080a8e80 	call	80a8e8 <isatty>
  808884:	1007883a 	mov	r3,r2
  808888:	00bfffc4 	movi	r2,-1
  80888c:	18800626 	beq	r3,r2,8088a8 <_isatty_r+0x4c>
  808890:	1805883a 	mov	r2,r3
  808894:	dfc00217 	ldw	ra,8(sp)
  808898:	dc400117 	ldw	r17,4(sp)
  80889c:	dc000017 	ldw	r16,0(sp)
  8088a0:	dec00304 	addi	sp,sp,12
  8088a4:	f800283a 	ret
  8088a8:	80800017 	ldw	r2,0(r16)
  8088ac:	103ff826 	beq	r2,zero,808890 <_isatty_r+0x34>
  8088b0:	88800015 	stw	r2,0(r17)
  8088b4:	1805883a 	mov	r2,r3
  8088b8:	dfc00217 	ldw	ra,8(sp)
  8088bc:	dc400117 	ldw	r17,4(sp)
  8088c0:	dc000017 	ldw	r16,0(sp)
  8088c4:	dec00304 	addi	sp,sp,12
  8088c8:	f800283a 	ret

008088cc <_lseek_r>:
  8088cc:	defffd04 	addi	sp,sp,-12
  8088d0:	dc000015 	stw	r16,0(sp)
  8088d4:	04002074 	movhi	r16,129
  8088d8:	8402a904 	addi	r16,r16,2724
  8088dc:	dc400115 	stw	r17,4(sp)
  8088e0:	80000015 	stw	zero,0(r16)
  8088e4:	2023883a 	mov	r17,r4
  8088e8:	2809883a 	mov	r4,r5
  8088ec:	300b883a 	mov	r5,r6
  8088f0:	380d883a 	mov	r6,r7
  8088f4:	dfc00215 	stw	ra,8(sp)
  8088f8:	080aaf80 	call	80aaf8 <lseek>
  8088fc:	1007883a 	mov	r3,r2
  808900:	00bfffc4 	movi	r2,-1
  808904:	18800626 	beq	r3,r2,808920 <_lseek_r+0x54>
  808908:	1805883a 	mov	r2,r3
  80890c:	dfc00217 	ldw	ra,8(sp)
  808910:	dc400117 	ldw	r17,4(sp)
  808914:	dc000017 	ldw	r16,0(sp)
  808918:	dec00304 	addi	sp,sp,12
  80891c:	f800283a 	ret
  808920:	80800017 	ldw	r2,0(r16)
  808924:	103ff826 	beq	r2,zero,808908 <_lseek_r+0x3c>
  808928:	88800015 	stw	r2,0(r17)
  80892c:	1805883a 	mov	r2,r3
  808930:	dfc00217 	ldw	ra,8(sp)
  808934:	dc400117 	ldw	r17,4(sp)
  808938:	dc000017 	ldw	r16,0(sp)
  80893c:	dec00304 	addi	sp,sp,12
  808940:	f800283a 	ret

00808944 <_read_r>:
  808944:	defffd04 	addi	sp,sp,-12
  808948:	dc000015 	stw	r16,0(sp)
  80894c:	04002074 	movhi	r16,129
  808950:	8402a904 	addi	r16,r16,2724
  808954:	dc400115 	stw	r17,4(sp)
  808958:	80000015 	stw	zero,0(r16)
  80895c:	2023883a 	mov	r17,r4
  808960:	2809883a 	mov	r4,r5
  808964:	300b883a 	mov	r5,r6
  808968:	380d883a 	mov	r6,r7
  80896c:	dfc00215 	stw	ra,8(sp)
  808970:	080acf80 	call	80acf8 <read>
  808974:	1007883a 	mov	r3,r2
  808978:	00bfffc4 	movi	r2,-1
  80897c:	18800626 	beq	r3,r2,808998 <_read_r+0x54>
  808980:	1805883a 	mov	r2,r3
  808984:	dfc00217 	ldw	ra,8(sp)
  808988:	dc400117 	ldw	r17,4(sp)
  80898c:	dc000017 	ldw	r16,0(sp)
  808990:	dec00304 	addi	sp,sp,12
  808994:	f800283a 	ret
  808998:	80800017 	ldw	r2,0(r16)
  80899c:	103ff826 	beq	r2,zero,808980 <_read_r+0x3c>
  8089a0:	88800015 	stw	r2,0(r17)
  8089a4:	1805883a 	mov	r2,r3
  8089a8:	dfc00217 	ldw	ra,8(sp)
  8089ac:	dc400117 	ldw	r17,4(sp)
  8089b0:	dc000017 	ldw	r16,0(sp)
  8089b4:	dec00304 	addi	sp,sp,12
  8089b8:	f800283a 	ret

008089bc <__udivdi3>:
  8089bc:	defff104 	addi	sp,sp,-60
  8089c0:	0015883a 	mov	r10,zero
  8089c4:	2005883a 	mov	r2,r4
  8089c8:	3011883a 	mov	r8,r6
  8089cc:	df000d15 	stw	fp,52(sp)
  8089d0:	dd400a15 	stw	r21,40(sp)
  8089d4:	dcc00815 	stw	r19,32(sp)
  8089d8:	dfc00e15 	stw	ra,56(sp)
  8089dc:	ddc00c15 	stw	r23,48(sp)
  8089e0:	dd800b15 	stw	r22,44(sp)
  8089e4:	dd000915 	stw	r20,36(sp)
  8089e8:	dc800715 	stw	r18,28(sp)
  8089ec:	dc400615 	stw	r17,24(sp)
  8089f0:	dc000515 	stw	r16,20(sp)
  8089f4:	da800315 	stw	r10,12(sp)
  8089f8:	4027883a 	mov	r19,r8
  8089fc:	1039883a 	mov	fp,r2
  808a00:	282b883a 	mov	r21,r5
  808a04:	da800415 	stw	r10,16(sp)
  808a08:	3800401e 	bne	r7,zero,808b0c <__udivdi3+0x150>
  808a0c:	2a006536 	bltu	r5,r8,808ba4 <__udivdi3+0x1e8>
  808a10:	4000b526 	beq	r8,zero,808ce8 <__udivdi3+0x32c>
  808a14:	00bfffd4 	movui	r2,65535
  808a18:	14c0ad36 	bltu	r2,r19,808cd0 <__udivdi3+0x314>
  808a1c:	00803fc4 	movi	r2,255
  808a20:	14c15e36 	bltu	r2,r19,808f9c <__udivdi3+0x5e0>
  808a24:	000b883a 	mov	r5,zero
  808a28:	0005883a 	mov	r2,zero
  808a2c:	9884d83a 	srl	r2,r19,r2
  808a30:	01002074 	movhi	r4,129
  808a34:	2134a604 	addi	r4,r4,-11624
  808a38:	01800804 	movi	r6,32
  808a3c:	1105883a 	add	r2,r2,r4
  808a40:	10c00003 	ldbu	r3,0(r2)
  808a44:	28c7883a 	add	r3,r5,r3
  808a48:	30e9c83a 	sub	r20,r6,r3
  808a4c:	a0010a1e 	bne	r20,zero,808e78 <__udivdi3+0x4bc>
  808a50:	982ed43a 	srli	r23,r19,16
  808a54:	acebc83a 	sub	r21,r21,r19
  808a58:	9dbfffcc 	andi	r22,r19,65535
  808a5c:	05000044 	movi	r20,1
  808a60:	a809883a 	mov	r4,r21
  808a64:	b80b883a 	mov	r5,r23
  808a68:	0800dd80 	call	800dd8 <__udivsi3>
  808a6c:	100b883a 	mov	r5,r2
  808a70:	b009883a 	mov	r4,r22
  808a74:	1021883a 	mov	r16,r2
  808a78:	08016000 	call	801600 <__mulsi3>
  808a7c:	a809883a 	mov	r4,r21
  808a80:	b80b883a 	mov	r5,r23
  808a84:	1023883a 	mov	r17,r2
  808a88:	0800de00 	call	800de0 <__umodsi3>
  808a8c:	1004943a 	slli	r2,r2,16
  808a90:	e006d43a 	srli	r3,fp,16
  808a94:	10c4b03a 	or	r2,r2,r3
  808a98:	1440042e 	bgeu	r2,r17,808aac <__udivdi3+0xf0>
  808a9c:	14c5883a 	add	r2,r2,r19
  808aa0:	843fffc4 	addi	r16,r16,-1
  808aa4:	14c00136 	bltu	r2,r19,808aac <__udivdi3+0xf0>
  808aa8:	14415c36 	bltu	r2,r17,80901c <__udivdi3+0x660>
  808aac:	1463c83a 	sub	r17,r2,r17
  808ab0:	8809883a 	mov	r4,r17
  808ab4:	b80b883a 	mov	r5,r23
  808ab8:	0800dd80 	call	800dd8 <__udivsi3>
  808abc:	100b883a 	mov	r5,r2
  808ac0:	b009883a 	mov	r4,r22
  808ac4:	102b883a 	mov	r21,r2
  808ac8:	08016000 	call	801600 <__mulsi3>
  808acc:	8809883a 	mov	r4,r17
  808ad0:	b80b883a 	mov	r5,r23
  808ad4:	1025883a 	mov	r18,r2
  808ad8:	0800de00 	call	800de0 <__umodsi3>
  808adc:	1004943a 	slli	r2,r2,16
  808ae0:	e0ffffcc 	andi	r3,fp,65535
  808ae4:	10c4b03a 	or	r2,r2,r3
  808ae8:	1480042e 	bgeu	r2,r18,808afc <__udivdi3+0x140>
  808aec:	9885883a 	add	r2,r19,r2
  808af0:	ad7fffc4 	addi	r21,r21,-1
  808af4:	14c00136 	bltu	r2,r19,808afc <__udivdi3+0x140>
  808af8:	14813c36 	bltu	r2,r18,808fec <__udivdi3+0x630>
  808afc:	8004943a 	slli	r2,r16,16
  808b00:	a009883a 	mov	r4,r20
  808b04:	a884b03a 	or	r2,r21,r2
  808b08:	00001506 	br	808b60 <__udivdi3+0x1a4>
  808b0c:	380d883a 	mov	r6,r7
  808b10:	29c06c36 	bltu	r5,r7,808cc4 <__udivdi3+0x308>
  808b14:	00bfffd4 	movui	r2,65535
  808b18:	11c06436 	bltu	r2,r7,808cac <__udivdi3+0x2f0>
  808b1c:	00803fc4 	movi	r2,255
  808b20:	11c11836 	bltu	r2,r7,808f84 <__udivdi3+0x5c8>
  808b24:	000b883a 	mov	r5,zero
  808b28:	0005883a 	mov	r2,zero
  808b2c:	3084d83a 	srl	r2,r6,r2
  808b30:	01002074 	movhi	r4,129
  808b34:	2134a604 	addi	r4,r4,-11624
  808b38:	01c00804 	movi	r7,32
  808b3c:	1105883a 	add	r2,r2,r4
  808b40:	10c00003 	ldbu	r3,0(r2)
  808b44:	28c7883a 	add	r3,r5,r3
  808b48:	38edc83a 	sub	r22,r7,r3
  808b4c:	b000731e 	bne	r22,zero,808d1c <__udivdi3+0x360>
  808b50:	35400136 	bltu	r6,r21,808b58 <__udivdi3+0x19c>
  808b54:	e4c05b36 	bltu	fp,r19,808cc4 <__udivdi3+0x308>
  808b58:	00800044 	movi	r2,1
  808b5c:	0009883a 	mov	r4,zero
  808b60:	d8800315 	stw	r2,12(sp)
  808b64:	d9400317 	ldw	r5,12(sp)
  808b68:	2007883a 	mov	r3,r4
  808b6c:	d9000415 	stw	r4,16(sp)
  808b70:	2805883a 	mov	r2,r5
  808b74:	dfc00e17 	ldw	ra,56(sp)
  808b78:	df000d17 	ldw	fp,52(sp)
  808b7c:	ddc00c17 	ldw	r23,48(sp)
  808b80:	dd800b17 	ldw	r22,44(sp)
  808b84:	dd400a17 	ldw	r21,40(sp)
  808b88:	dd000917 	ldw	r20,36(sp)
  808b8c:	dcc00817 	ldw	r19,32(sp)
  808b90:	dc800717 	ldw	r18,28(sp)
  808b94:	dc400617 	ldw	r17,24(sp)
  808b98:	dc000517 	ldw	r16,20(sp)
  808b9c:	dec00f04 	addi	sp,sp,60
  808ba0:	f800283a 	ret
  808ba4:	00bfffd4 	movui	r2,65535
  808ba8:	12005636 	bltu	r2,r8,808d04 <__udivdi3+0x348>
  808bac:	00803fc4 	movi	r2,255
  808bb0:	12010036 	bltu	r2,r8,808fb4 <__udivdi3+0x5f8>
  808bb4:	000b883a 	mov	r5,zero
  808bb8:	0005883a 	mov	r2,zero
  808bbc:	9884d83a 	srl	r2,r19,r2
  808bc0:	01002074 	movhi	r4,129
  808bc4:	2134a604 	addi	r4,r4,-11624
  808bc8:	01800804 	movi	r6,32
  808bcc:	1105883a 	add	r2,r2,r4
  808bd0:	10c00003 	ldbu	r3,0(r2)
  808bd4:	28c7883a 	add	r3,r5,r3
  808bd8:	30cbc83a 	sub	r5,r6,r3
  808bdc:	28000626 	beq	r5,zero,808bf8 <__udivdi3+0x23c>
  808be0:	3145c83a 	sub	r2,r6,r5
  808be4:	e084d83a 	srl	r2,fp,r2
  808be8:	a946983a 	sll	r3,r21,r5
  808bec:	e178983a 	sll	fp,fp,r5
  808bf0:	9966983a 	sll	r19,r19,r5
  808bf4:	18aab03a 	or	r21,r3,r2
  808bf8:	982ed43a 	srli	r23,r19,16
  808bfc:	a809883a 	mov	r4,r21
  808c00:	9cbfffcc 	andi	r18,r19,65535
  808c04:	b80b883a 	mov	r5,r23
  808c08:	0800dd80 	call	800dd8 <__udivsi3>
  808c0c:	100b883a 	mov	r5,r2
  808c10:	9009883a 	mov	r4,r18
  808c14:	1021883a 	mov	r16,r2
  808c18:	08016000 	call	801600 <__mulsi3>
  808c1c:	a809883a 	mov	r4,r21
  808c20:	b80b883a 	mov	r5,r23
  808c24:	1023883a 	mov	r17,r2
  808c28:	0800de00 	call	800de0 <__umodsi3>
  808c2c:	1004943a 	slli	r2,r2,16
  808c30:	e006d43a 	srli	r3,fp,16
  808c34:	10c4b03a 	or	r2,r2,r3
  808c38:	1440042e 	bgeu	r2,r17,808c4c <__udivdi3+0x290>
  808c3c:	14c5883a 	add	r2,r2,r19
  808c40:	843fffc4 	addi	r16,r16,-1
  808c44:	14c00136 	bltu	r2,r19,808c4c <__udivdi3+0x290>
  808c48:	1440ea36 	bltu	r2,r17,808ff4 <__udivdi3+0x638>
  808c4c:	1463c83a 	sub	r17,r2,r17
  808c50:	8809883a 	mov	r4,r17
  808c54:	b80b883a 	mov	r5,r23
  808c58:	0800dd80 	call	800dd8 <__udivsi3>
  808c5c:	100b883a 	mov	r5,r2
  808c60:	9009883a 	mov	r4,r18
  808c64:	102b883a 	mov	r21,r2
  808c68:	08016000 	call	801600 <__mulsi3>
  808c6c:	8809883a 	mov	r4,r17
  808c70:	b80b883a 	mov	r5,r23
  808c74:	1025883a 	mov	r18,r2
  808c78:	0800de00 	call	800de0 <__umodsi3>
  808c7c:	1004943a 	slli	r2,r2,16
  808c80:	e0ffffcc 	andi	r3,fp,65535
  808c84:	10c4b03a 	or	r2,r2,r3
  808c88:	1480042e 	bgeu	r2,r18,808c9c <__udivdi3+0x2e0>
  808c8c:	9885883a 	add	r2,r19,r2
  808c90:	ad7fffc4 	addi	r21,r21,-1
  808c94:	14c00136 	bltu	r2,r19,808c9c <__udivdi3+0x2e0>
  808c98:	1480d936 	bltu	r2,r18,809000 <__udivdi3+0x644>
  808c9c:	8004943a 	slli	r2,r16,16
  808ca0:	0009883a 	mov	r4,zero
  808ca4:	a884b03a 	or	r2,r21,r2
  808ca8:	003fad06 	br	808b60 <__udivdi3+0x1a4>
  808cac:	00804034 	movhi	r2,256
  808cb0:	10bfffc4 	addi	r2,r2,-1
  808cb4:	11c0b636 	bltu	r2,r7,808f90 <__udivdi3+0x5d4>
  808cb8:	01400404 	movi	r5,16
  808cbc:	2805883a 	mov	r2,r5
  808cc0:	003f9a06 	br	808b2c <__udivdi3+0x170>
  808cc4:	0005883a 	mov	r2,zero
  808cc8:	0009883a 	mov	r4,zero
  808ccc:	003fa406 	br	808b60 <__udivdi3+0x1a4>
  808cd0:	00804034 	movhi	r2,256
  808cd4:	10bfffc4 	addi	r2,r2,-1
  808cd8:	14c0b336 	bltu	r2,r19,808fa8 <__udivdi3+0x5ec>
  808cdc:	01400404 	movi	r5,16
  808ce0:	2805883a 	mov	r2,r5
  808ce4:	003f5106 	br	808a2c <__udivdi3+0x70>
  808ce8:	01000044 	movi	r4,1
  808cec:	000b883a 	mov	r5,zero
  808cf0:	0800dd80 	call	800dd8 <__udivsi3>
  808cf4:	1027883a 	mov	r19,r2
  808cf8:	00bfffd4 	movui	r2,65535
  808cfc:	14fff436 	bltu	r2,r19,808cd0 <__udivdi3+0x314>
  808d00:	003f4606 	br	808a1c <__udivdi3+0x60>
  808d04:	00804034 	movhi	r2,256
  808d08:	10bfffc4 	addi	r2,r2,-1
  808d0c:	1200ac36 	bltu	r2,r8,808fc0 <__udivdi3+0x604>
  808d10:	01400404 	movi	r5,16
  808d14:	2805883a 	mov	r2,r5
  808d18:	003fa806 	br	808bbc <__udivdi3+0x200>
  808d1c:	3d85c83a 	sub	r2,r7,r22
  808d20:	3588983a 	sll	r4,r6,r22
  808d24:	9886d83a 	srl	r3,r19,r2
  808d28:	a8a2d83a 	srl	r17,r21,r2
  808d2c:	e084d83a 	srl	r2,fp,r2
  808d30:	20eeb03a 	or	r23,r4,r3
  808d34:	b824d43a 	srli	r18,r23,16
  808d38:	ad86983a 	sll	r3,r21,r22
  808d3c:	8809883a 	mov	r4,r17
  808d40:	900b883a 	mov	r5,r18
  808d44:	1886b03a 	or	r3,r3,r2
  808d48:	d8c00115 	stw	r3,4(sp)
  808d4c:	bc3fffcc 	andi	r16,r23,65535
  808d50:	0800dd80 	call	800dd8 <__udivsi3>
  808d54:	100b883a 	mov	r5,r2
  808d58:	8009883a 	mov	r4,r16
  808d5c:	1029883a 	mov	r20,r2
  808d60:	08016000 	call	801600 <__mulsi3>
  808d64:	900b883a 	mov	r5,r18
  808d68:	8809883a 	mov	r4,r17
  808d6c:	102b883a 	mov	r21,r2
  808d70:	0800de00 	call	800de0 <__umodsi3>
  808d74:	d9400117 	ldw	r5,4(sp)
  808d78:	1004943a 	slli	r2,r2,16
  808d7c:	9da6983a 	sll	r19,r19,r22
  808d80:	2806d43a 	srli	r3,r5,16
  808d84:	10c4b03a 	or	r2,r2,r3
  808d88:	1540032e 	bgeu	r2,r21,808d98 <__udivdi3+0x3dc>
  808d8c:	15c5883a 	add	r2,r2,r23
  808d90:	a53fffc4 	addi	r20,r20,-1
  808d94:	15c0912e 	bgeu	r2,r23,808fdc <__udivdi3+0x620>
  808d98:	1563c83a 	sub	r17,r2,r21
  808d9c:	8809883a 	mov	r4,r17
  808da0:	900b883a 	mov	r5,r18
  808da4:	0800dd80 	call	800dd8 <__udivsi3>
  808da8:	100b883a 	mov	r5,r2
  808dac:	8009883a 	mov	r4,r16
  808db0:	102b883a 	mov	r21,r2
  808db4:	08016000 	call	801600 <__mulsi3>
  808db8:	8809883a 	mov	r4,r17
  808dbc:	900b883a 	mov	r5,r18
  808dc0:	1021883a 	mov	r16,r2
  808dc4:	0800de00 	call	800de0 <__umodsi3>
  808dc8:	da800117 	ldw	r10,4(sp)
  808dcc:	1004943a 	slli	r2,r2,16
  808dd0:	50ffffcc 	andi	r3,r10,65535
  808dd4:	10c6b03a 	or	r3,r2,r3
  808dd8:	1c00032e 	bgeu	r3,r16,808de8 <__udivdi3+0x42c>
  808ddc:	1dc7883a 	add	r3,r3,r23
  808de0:	ad7fffc4 	addi	r21,r21,-1
  808de4:	1dc0792e 	bgeu	r3,r23,808fcc <__udivdi3+0x610>
  808de8:	a004943a 	slli	r2,r20,16
  808dec:	982ed43a 	srli	r23,r19,16
  808df0:	9cffffcc 	andi	r19,r19,65535
  808df4:	a8a4b03a 	or	r18,r21,r2
  808df8:	947fffcc 	andi	r17,r18,65535
  808dfc:	902ad43a 	srli	r21,r18,16
  808e00:	8809883a 	mov	r4,r17
  808e04:	980b883a 	mov	r5,r19
  808e08:	1c21c83a 	sub	r16,r3,r16
  808e0c:	08016000 	call	801600 <__mulsi3>
  808e10:	8809883a 	mov	r4,r17
  808e14:	b80b883a 	mov	r5,r23
  808e18:	1029883a 	mov	r20,r2
  808e1c:	08016000 	call	801600 <__mulsi3>
  808e20:	980b883a 	mov	r5,r19
  808e24:	a809883a 	mov	r4,r21
  808e28:	1023883a 	mov	r17,r2
  808e2c:	08016000 	call	801600 <__mulsi3>
  808e30:	a809883a 	mov	r4,r21
  808e34:	b80b883a 	mov	r5,r23
  808e38:	1027883a 	mov	r19,r2
  808e3c:	08016000 	call	801600 <__mulsi3>
  808e40:	1009883a 	mov	r4,r2
  808e44:	a004d43a 	srli	r2,r20,16
  808e48:	8ce3883a 	add	r17,r17,r19
  808e4c:	1447883a 	add	r3,r2,r17
  808e50:	1cc0022e 	bgeu	r3,r19,808e5c <__udivdi3+0x4a0>
  808e54:	00800074 	movhi	r2,1
  808e58:	2089883a 	add	r4,r4,r2
  808e5c:	1804d43a 	srli	r2,r3,16
  808e60:	2085883a 	add	r2,r4,r2
  808e64:	80804436 	bltu	r16,r2,808f78 <__udivdi3+0x5bc>
  808e68:	80803e26 	beq	r16,r2,808f64 <__udivdi3+0x5a8>
  808e6c:	9005883a 	mov	r2,r18
  808e70:	0009883a 	mov	r4,zero
  808e74:	003f3a06 	br	808b60 <__udivdi3+0x1a4>
  808e78:	9d26983a 	sll	r19,r19,r20
  808e7c:	3505c83a 	sub	r2,r6,r20
  808e80:	a8a2d83a 	srl	r17,r21,r2
  808e84:	982ed43a 	srli	r23,r19,16
  808e88:	e084d83a 	srl	r2,fp,r2
  808e8c:	ad06983a 	sll	r3,r21,r20
  808e90:	8809883a 	mov	r4,r17
  808e94:	b80b883a 	mov	r5,r23
  808e98:	1886b03a 	or	r3,r3,r2
  808e9c:	d8c00015 	stw	r3,0(sp)
  808ea0:	9dbfffcc 	andi	r22,r19,65535
  808ea4:	0800dd80 	call	800dd8 <__udivsi3>
  808ea8:	100b883a 	mov	r5,r2
  808eac:	b009883a 	mov	r4,r22
  808eb0:	d8800215 	stw	r2,8(sp)
  808eb4:	08016000 	call	801600 <__mulsi3>
  808eb8:	8809883a 	mov	r4,r17
  808ebc:	b80b883a 	mov	r5,r23
  808ec0:	102b883a 	mov	r21,r2
  808ec4:	0800de00 	call	800de0 <__umodsi3>
  808ec8:	d9000017 	ldw	r4,0(sp)
  808ecc:	1004943a 	slli	r2,r2,16
  808ed0:	2006d43a 	srli	r3,r4,16
  808ed4:	10c4b03a 	or	r2,r2,r3
  808ed8:	1540052e 	bgeu	r2,r21,808ef0 <__udivdi3+0x534>
  808edc:	d9400217 	ldw	r5,8(sp)
  808ee0:	14c5883a 	add	r2,r2,r19
  808ee4:	297fffc4 	addi	r5,r5,-1
  808ee8:	d9400215 	stw	r5,8(sp)
  808eec:	14c0462e 	bgeu	r2,r19,809008 <__udivdi3+0x64c>
  808ef0:	1563c83a 	sub	r17,r2,r21
  808ef4:	8809883a 	mov	r4,r17
  808ef8:	b80b883a 	mov	r5,r23
  808efc:	0800dd80 	call	800dd8 <__udivsi3>
  808f00:	100b883a 	mov	r5,r2
  808f04:	b009883a 	mov	r4,r22
  808f08:	1025883a 	mov	r18,r2
  808f0c:	08016000 	call	801600 <__mulsi3>
  808f10:	8809883a 	mov	r4,r17
  808f14:	b80b883a 	mov	r5,r23
  808f18:	1021883a 	mov	r16,r2
  808f1c:	0800de00 	call	800de0 <__umodsi3>
  808f20:	da800017 	ldw	r10,0(sp)
  808f24:	1004943a 	slli	r2,r2,16
  808f28:	50ffffcc 	andi	r3,r10,65535
  808f2c:	10c6b03a 	or	r3,r2,r3
  808f30:	1c00062e 	bgeu	r3,r16,808f4c <__udivdi3+0x590>
  808f34:	1cc7883a 	add	r3,r3,r19
  808f38:	94bfffc4 	addi	r18,r18,-1
  808f3c:	1cc00336 	bltu	r3,r19,808f4c <__udivdi3+0x590>
  808f40:	1c00022e 	bgeu	r3,r16,808f4c <__udivdi3+0x590>
  808f44:	94bfffc4 	addi	r18,r18,-1
  808f48:	1cc7883a 	add	r3,r3,r19
  808f4c:	d9000217 	ldw	r4,8(sp)
  808f50:	e538983a 	sll	fp,fp,r20
  808f54:	1c2bc83a 	sub	r21,r3,r16
  808f58:	2004943a 	slli	r2,r4,16
  808f5c:	90a8b03a 	or	r20,r18,r2
  808f60:	003ebf06 	br	808a60 <__udivdi3+0xa4>
  808f64:	1804943a 	slli	r2,r3,16
  808f68:	e588983a 	sll	r4,fp,r22
  808f6c:	a0ffffcc 	andi	r3,r20,65535
  808f70:	10c5883a 	add	r2,r2,r3
  808f74:	20bfbd2e 	bgeu	r4,r2,808e6c <__udivdi3+0x4b0>
  808f78:	90bfffc4 	addi	r2,r18,-1
  808f7c:	0009883a 	mov	r4,zero
  808f80:	003ef706 	br	808b60 <__udivdi3+0x1a4>
  808f84:	01400204 	movi	r5,8
  808f88:	2805883a 	mov	r2,r5
  808f8c:	003ee706 	br	808b2c <__udivdi3+0x170>
  808f90:	01400604 	movi	r5,24
  808f94:	2805883a 	mov	r2,r5
  808f98:	003ee406 	br	808b2c <__udivdi3+0x170>
  808f9c:	01400204 	movi	r5,8
  808fa0:	2805883a 	mov	r2,r5
  808fa4:	003ea106 	br	808a2c <__udivdi3+0x70>
  808fa8:	01400604 	movi	r5,24
  808fac:	2805883a 	mov	r2,r5
  808fb0:	003e9e06 	br	808a2c <__udivdi3+0x70>
  808fb4:	01400204 	movi	r5,8
  808fb8:	2805883a 	mov	r2,r5
  808fbc:	003eff06 	br	808bbc <__udivdi3+0x200>
  808fc0:	01400604 	movi	r5,24
  808fc4:	2805883a 	mov	r2,r5
  808fc8:	003efc06 	br	808bbc <__udivdi3+0x200>
  808fcc:	1c3f862e 	bgeu	r3,r16,808de8 <__udivdi3+0x42c>
  808fd0:	1dc7883a 	add	r3,r3,r23
  808fd4:	ad7fffc4 	addi	r21,r21,-1
  808fd8:	003f8306 	br	808de8 <__udivdi3+0x42c>
  808fdc:	157f6e2e 	bgeu	r2,r21,808d98 <__udivdi3+0x3dc>
  808fe0:	a53fffc4 	addi	r20,r20,-1
  808fe4:	15c5883a 	add	r2,r2,r23
  808fe8:	003f6b06 	br	808d98 <__udivdi3+0x3dc>
  808fec:	ad7fffc4 	addi	r21,r21,-1
  808ff0:	003ec206 	br	808afc <__udivdi3+0x140>
  808ff4:	843fffc4 	addi	r16,r16,-1
  808ff8:	14c5883a 	add	r2,r2,r19
  808ffc:	003f1306 	br	808c4c <__udivdi3+0x290>
  809000:	ad7fffc4 	addi	r21,r21,-1
  809004:	003f2506 	br	808c9c <__udivdi3+0x2e0>
  809008:	157fb92e 	bgeu	r2,r21,808ef0 <__udivdi3+0x534>
  80900c:	297fffc4 	addi	r5,r5,-1
  809010:	14c5883a 	add	r2,r2,r19
  809014:	d9400215 	stw	r5,8(sp)
  809018:	003fb506 	br	808ef0 <__udivdi3+0x534>
  80901c:	843fffc4 	addi	r16,r16,-1
  809020:	14c5883a 	add	r2,r2,r19
  809024:	003ea106 	br	808aac <__udivdi3+0xf0>

00809028 <__umoddi3>:
  809028:	defff004 	addi	sp,sp,-64
  80902c:	3011883a 	mov	r8,r6
  809030:	000d883a 	mov	r6,zero
  809034:	dd400b15 	stw	r21,44(sp)
  809038:	dcc00915 	stw	r19,36(sp)
  80903c:	dc000615 	stw	r16,24(sp)
  809040:	dfc00f15 	stw	ra,60(sp)
  809044:	df000e15 	stw	fp,56(sp)
  809048:	ddc00d15 	stw	r23,52(sp)
  80904c:	dd800c15 	stw	r22,48(sp)
  809050:	dd000a15 	stw	r20,40(sp)
  809054:	dc800815 	stw	r18,32(sp)
  809058:	dc400715 	stw	r17,28(sp)
  80905c:	2817883a 	mov	r11,r5
  809060:	d9800415 	stw	r6,16(sp)
  809064:	4027883a 	mov	r19,r8
  809068:	d9800515 	stw	r6,20(sp)
  80906c:	2021883a 	mov	r16,r4
  809070:	282b883a 	mov	r21,r5
  809074:	38002c1e 	bne	r7,zero,809128 <__umoddi3+0x100>
  809078:	2a005636 	bltu	r5,r8,8091d4 <__umoddi3+0x1ac>
  80907c:	40009a26 	beq	r8,zero,8092e8 <__umoddi3+0x2c0>
  809080:	00bfffd4 	movui	r2,65535
  809084:	14c09236 	bltu	r2,r19,8092d0 <__umoddi3+0x2a8>
  809088:	00803fc4 	movi	r2,255
  80908c:	14c15c36 	bltu	r2,r19,809600 <__umoddi3+0x5d8>
  809090:	000b883a 	mov	r5,zero
  809094:	0005883a 	mov	r2,zero
  809098:	9884d83a 	srl	r2,r19,r2
  80909c:	01002074 	movhi	r4,129
  8090a0:	2134a604 	addi	r4,r4,-11624
  8090a4:	01800804 	movi	r6,32
  8090a8:	1105883a 	add	r2,r2,r4
  8090ac:	10c00003 	ldbu	r3,0(r2)
  8090b0:	28c7883a 	add	r3,r5,r3
  8090b4:	30e5c83a 	sub	r18,r6,r3
  8090b8:	9000a41e 	bne	r18,zero,80934c <__umoddi3+0x324>
  8090bc:	982ed43a 	srli	r23,r19,16
  8090c0:	acebc83a 	sub	r21,r21,r19
  8090c4:	9d3fffcc 	andi	r20,r19,65535
  8090c8:	002d883a 	mov	r22,zero
  8090cc:	a809883a 	mov	r4,r21
  8090d0:	b80b883a 	mov	r5,r23
  8090d4:	0800dd80 	call	800dd8 <__udivsi3>
  8090d8:	100b883a 	mov	r5,r2
  8090dc:	a009883a 	mov	r4,r20
  8090e0:	08016000 	call	801600 <__mulsi3>
  8090e4:	a809883a 	mov	r4,r21
  8090e8:	b80b883a 	mov	r5,r23
  8090ec:	1023883a 	mov	r17,r2
  8090f0:	0800de00 	call	800de0 <__umodsi3>
  8090f4:	1004943a 	slli	r2,r2,16
  8090f8:	8006d43a 	srli	r3,r16,16
  8090fc:	10c4b03a 	or	r2,r2,r3
  809100:	1440032e 	bgeu	r2,r17,809110 <__umoddi3+0xe8>
  809104:	14c5883a 	add	r2,r2,r19
  809108:	14c00136 	bltu	r2,r19,809110 <__umoddi3+0xe8>
  80910c:	14415836 	bltu	r2,r17,809670 <__umoddi3+0x648>
  809110:	1463c83a 	sub	r17,r2,r17
  809114:	8809883a 	mov	r4,r17
  809118:	b80b883a 	mov	r5,r23
  80911c:	0800dd80 	call	800dd8 <__udivsi3>
  809120:	a009883a 	mov	r4,r20
  809124:	00005306 	br	809274 <__umoddi3+0x24c>
  809128:	380d883a 	mov	r6,r7
  80912c:	29c0132e 	bgeu	r5,r7,80917c <__umoddi3+0x154>
  809130:	d9000415 	stw	r4,16(sp)
  809134:	d9400515 	stw	r5,20(sp)
  809138:	d9400417 	ldw	r5,16(sp)
  80913c:	5813883a 	mov	r9,r11
  809140:	2811883a 	mov	r8,r5
  809144:	4005883a 	mov	r2,r8
  809148:	4807883a 	mov	r3,r9
  80914c:	dfc00f17 	ldw	ra,60(sp)
  809150:	df000e17 	ldw	fp,56(sp)
  809154:	ddc00d17 	ldw	r23,52(sp)
  809158:	dd800c17 	ldw	r22,48(sp)
  80915c:	dd400b17 	ldw	r21,44(sp)
  809160:	dd000a17 	ldw	r20,40(sp)
  809164:	dcc00917 	ldw	r19,36(sp)
  809168:	dc800817 	ldw	r18,32(sp)
  80916c:	dc400717 	ldw	r17,28(sp)
  809170:	dc000617 	ldw	r16,24(sp)
  809174:	dec01004 	addi	sp,sp,64
  809178:	f800283a 	ret
  80917c:	00bfffd4 	movui	r2,65535
  809180:	11c06636 	bltu	r2,r7,80931c <__umoddi3+0x2f4>
  809184:	00803fc4 	movi	r2,255
  809188:	11c12036 	bltu	r2,r7,80960c <__umoddi3+0x5e4>
  80918c:	000b883a 	mov	r5,zero
  809190:	0005883a 	mov	r2,zero
  809194:	3084d83a 	srl	r2,r6,r2
  809198:	01002074 	movhi	r4,129
  80919c:	2134a604 	addi	r4,r4,-11624
  8091a0:	01c00804 	movi	r7,32
  8091a4:	1105883a 	add	r2,r2,r4
  8091a8:	10c00003 	ldbu	r3,0(r2)
  8091ac:	28c7883a 	add	r3,r5,r3
  8091b0:	38e5c83a 	sub	r18,r7,r3
  8091b4:	9000941e 	bne	r18,zero,809408 <__umoddi3+0x3e0>
  8091b8:	35405e36 	bltu	r6,r21,809334 <__umoddi3+0x30c>
  8091bc:	84c05d2e 	bgeu	r16,r19,809334 <__umoddi3+0x30c>
  8091c0:	8011883a 	mov	r8,r16
  8091c4:	a813883a 	mov	r9,r21
  8091c8:	dc000415 	stw	r16,16(sp)
  8091cc:	dd400515 	stw	r21,20(sp)
  8091d0:	003fdc06 	br	809144 <__umoddi3+0x11c>
  8091d4:	00bfffd4 	movui	r2,65535
  8091d8:	12004a36 	bltu	r2,r8,809304 <__umoddi3+0x2dc>
  8091dc:	00803fc4 	movi	r2,255
  8091e0:	12010d36 	bltu	r2,r8,809618 <__umoddi3+0x5f0>
  8091e4:	000b883a 	mov	r5,zero
  8091e8:	0005883a 	mov	r2,zero
  8091ec:	9884d83a 	srl	r2,r19,r2
  8091f0:	01002074 	movhi	r4,129
  8091f4:	2134a604 	addi	r4,r4,-11624
  8091f8:	01800804 	movi	r6,32
  8091fc:	1105883a 	add	r2,r2,r4
  809200:	10c00003 	ldbu	r3,0(r2)
  809204:	28c7883a 	add	r3,r5,r3
  809208:	30c7c83a 	sub	r3,r6,r3
  80920c:	1800dc1e 	bne	r3,zero,809580 <__umoddi3+0x558>
  809210:	002d883a 	mov	r22,zero
  809214:	982ed43a 	srli	r23,r19,16
  809218:	a809883a 	mov	r4,r21
  80921c:	9cbfffcc 	andi	r18,r19,65535
  809220:	b80b883a 	mov	r5,r23
  809224:	0800dd80 	call	800dd8 <__udivsi3>
  809228:	100b883a 	mov	r5,r2
  80922c:	9009883a 	mov	r4,r18
  809230:	08016000 	call	801600 <__mulsi3>
  809234:	a809883a 	mov	r4,r21
  809238:	b80b883a 	mov	r5,r23
  80923c:	1023883a 	mov	r17,r2
  809240:	0800de00 	call	800de0 <__umodsi3>
  809244:	1004943a 	slli	r2,r2,16
  809248:	8006d43a 	srli	r3,r16,16
  80924c:	10c4b03a 	or	r2,r2,r3
  809250:	1440032e 	bgeu	r2,r17,809260 <__umoddi3+0x238>
  809254:	14c5883a 	add	r2,r2,r19
  809258:	14c00136 	bltu	r2,r19,809260 <__umoddi3+0x238>
  80925c:	14410236 	bltu	r2,r17,809668 <__umoddi3+0x640>
  809260:	1463c83a 	sub	r17,r2,r17
  809264:	8809883a 	mov	r4,r17
  809268:	b80b883a 	mov	r5,r23
  80926c:	0800dd80 	call	800dd8 <__udivsi3>
  809270:	9009883a 	mov	r4,r18
  809274:	100b883a 	mov	r5,r2
  809278:	08016000 	call	801600 <__mulsi3>
  80927c:	8809883a 	mov	r4,r17
  809280:	b80b883a 	mov	r5,r23
  809284:	102b883a 	mov	r21,r2
  809288:	0800de00 	call	800de0 <__umodsi3>
  80928c:	1004943a 	slli	r2,r2,16
  809290:	80ffffcc 	andi	r3,r16,65535
  809294:	10c4b03a 	or	r2,r2,r3
  809298:	1540042e 	bgeu	r2,r21,8092ac <__umoddi3+0x284>
  80929c:	14c5883a 	add	r2,r2,r19
  8092a0:	14c00236 	bltu	r2,r19,8092ac <__umoddi3+0x284>
  8092a4:	1540012e 	bgeu	r2,r21,8092ac <__umoddi3+0x284>
  8092a8:	14c5883a 	add	r2,r2,r19
  8092ac:	1545c83a 	sub	r2,r2,r21
  8092b0:	1584d83a 	srl	r2,r2,r22
  8092b4:	0013883a 	mov	r9,zero
  8092b8:	d8800415 	stw	r2,16(sp)
  8092bc:	d8c00417 	ldw	r3,16(sp)
  8092c0:	0005883a 	mov	r2,zero
  8092c4:	d8800515 	stw	r2,20(sp)
  8092c8:	1811883a 	mov	r8,r3
  8092cc:	003f9d06 	br	809144 <__umoddi3+0x11c>
  8092d0:	00804034 	movhi	r2,256
  8092d4:	10bfffc4 	addi	r2,r2,-1
  8092d8:	14c0c636 	bltu	r2,r19,8095f4 <__umoddi3+0x5cc>
  8092dc:	01400404 	movi	r5,16
  8092e0:	2805883a 	mov	r2,r5
  8092e4:	003f6c06 	br	809098 <__umoddi3+0x70>
  8092e8:	01000044 	movi	r4,1
  8092ec:	000b883a 	mov	r5,zero
  8092f0:	0800dd80 	call	800dd8 <__udivsi3>
  8092f4:	1027883a 	mov	r19,r2
  8092f8:	00bfffd4 	movui	r2,65535
  8092fc:	14fff436 	bltu	r2,r19,8092d0 <__umoddi3+0x2a8>
  809300:	003f6106 	br	809088 <__umoddi3+0x60>
  809304:	00804034 	movhi	r2,256
  809308:	10bfffc4 	addi	r2,r2,-1
  80930c:	1200c536 	bltu	r2,r8,809624 <__umoddi3+0x5fc>
  809310:	01400404 	movi	r5,16
  809314:	2805883a 	mov	r2,r5
  809318:	003fb406 	br	8091ec <__umoddi3+0x1c4>
  80931c:	00804034 	movhi	r2,256
  809320:	10bfffc4 	addi	r2,r2,-1
  809324:	11c0c236 	bltu	r2,r7,809630 <__umoddi3+0x608>
  809328:	01400404 	movi	r5,16
  80932c:	2805883a 	mov	r2,r5
  809330:	003f9806 	br	809194 <__umoddi3+0x16c>
  809334:	84c9c83a 	sub	r4,r16,r19
  809338:	8105803a 	cmpltu	r2,r16,r4
  80933c:	a987c83a 	sub	r3,r21,r6
  809340:	18abc83a 	sub	r21,r3,r2
  809344:	2021883a 	mov	r16,r4
  809348:	003f9d06 	br	8091c0 <__umoddi3+0x198>
  80934c:	9ca6983a 	sll	r19,r19,r18
  809350:	3485c83a 	sub	r2,r6,r18
  809354:	a8a2d83a 	srl	r17,r21,r2
  809358:	982ed43a 	srli	r23,r19,16
  80935c:	ac86983a 	sll	r3,r21,r18
  809360:	8084d83a 	srl	r2,r16,r2
  809364:	8809883a 	mov	r4,r17
  809368:	b80b883a 	mov	r5,r23
  80936c:	18b8b03a 	or	fp,r3,r2
  809370:	9d3fffcc 	andi	r20,r19,65535
  809374:	0800dd80 	call	800dd8 <__udivsi3>
  809378:	100b883a 	mov	r5,r2
  80937c:	a009883a 	mov	r4,r20
  809380:	08016000 	call	801600 <__mulsi3>
  809384:	8809883a 	mov	r4,r17
  809388:	b80b883a 	mov	r5,r23
  80938c:	102b883a 	mov	r21,r2
  809390:	0800de00 	call	800de0 <__umodsi3>
  809394:	1004943a 	slli	r2,r2,16
  809398:	e006d43a 	srli	r3,fp,16
  80939c:	902d883a 	mov	r22,r18
  8093a0:	10c4b03a 	or	r2,r2,r3
  8093a4:	1540022e 	bgeu	r2,r21,8093b0 <__umoddi3+0x388>
  8093a8:	14c5883a 	add	r2,r2,r19
  8093ac:	14c0ab2e 	bgeu	r2,r19,80965c <__umoddi3+0x634>
  8093b0:	1563c83a 	sub	r17,r2,r21
  8093b4:	8809883a 	mov	r4,r17
  8093b8:	b80b883a 	mov	r5,r23
  8093bc:	0800dd80 	call	800dd8 <__udivsi3>
  8093c0:	100b883a 	mov	r5,r2
  8093c4:	a009883a 	mov	r4,r20
  8093c8:	08016000 	call	801600 <__mulsi3>
  8093cc:	8809883a 	mov	r4,r17
  8093d0:	b80b883a 	mov	r5,r23
  8093d4:	102b883a 	mov	r21,r2
  8093d8:	0800de00 	call	800de0 <__umodsi3>
  8093dc:	1004943a 	slli	r2,r2,16
  8093e0:	e0ffffcc 	andi	r3,fp,65535
  8093e4:	10c4b03a 	or	r2,r2,r3
  8093e8:	1540042e 	bgeu	r2,r21,8093fc <__umoddi3+0x3d4>
  8093ec:	14c5883a 	add	r2,r2,r19
  8093f0:	14c00236 	bltu	r2,r19,8093fc <__umoddi3+0x3d4>
  8093f4:	1540012e 	bgeu	r2,r21,8093fc <__umoddi3+0x3d4>
  8093f8:	14c5883a 	add	r2,r2,r19
  8093fc:	84a0983a 	sll	r16,r16,r18
  809400:	156bc83a 	sub	r21,r2,r21
  809404:	003f3106 	br	8090cc <__umoddi3+0xa4>
  809408:	3c8fc83a 	sub	r7,r7,r18
  80940c:	3486983a 	sll	r3,r6,r18
  809410:	99c4d83a 	srl	r2,r19,r7
  809414:	a9e2d83a 	srl	r17,r21,r7
  809418:	ac8c983a 	sll	r6,r21,r18
  80941c:	18acb03a 	or	r22,r3,r2
  809420:	b02ed43a 	srli	r23,r22,16
  809424:	81c4d83a 	srl	r2,r16,r7
  809428:	8809883a 	mov	r4,r17
  80942c:	b80b883a 	mov	r5,r23
  809430:	308cb03a 	or	r6,r6,r2
  809434:	d9c00315 	stw	r7,12(sp)
  809438:	d9800215 	stw	r6,8(sp)
  80943c:	b53fffcc 	andi	r20,r22,65535
  809440:	0800dd80 	call	800dd8 <__udivsi3>
  809444:	100b883a 	mov	r5,r2
  809448:	a009883a 	mov	r4,r20
  80944c:	1039883a 	mov	fp,r2
  809450:	08016000 	call	801600 <__mulsi3>
  809454:	8809883a 	mov	r4,r17
  809458:	b80b883a 	mov	r5,r23
  80945c:	102b883a 	mov	r21,r2
  809460:	0800de00 	call	800de0 <__umodsi3>
  809464:	d9000217 	ldw	r4,8(sp)
  809468:	1004943a 	slli	r2,r2,16
  80946c:	9ca6983a 	sll	r19,r19,r18
  809470:	2006d43a 	srli	r3,r4,16
  809474:	84a0983a 	sll	r16,r16,r18
  809478:	dcc00015 	stw	r19,0(sp)
  80947c:	10c4b03a 	or	r2,r2,r3
  809480:	dc000115 	stw	r16,4(sp)
  809484:	1540032e 	bgeu	r2,r21,809494 <__umoddi3+0x46c>
  809488:	1585883a 	add	r2,r2,r22
  80948c:	e73fffc4 	addi	fp,fp,-1
  809490:	15806e2e 	bgeu	r2,r22,80964c <__umoddi3+0x624>
  809494:	1563c83a 	sub	r17,r2,r21
  809498:	8809883a 	mov	r4,r17
  80949c:	b80b883a 	mov	r5,r23
  8094a0:	0800dd80 	call	800dd8 <__udivsi3>
  8094a4:	100b883a 	mov	r5,r2
  8094a8:	a009883a 	mov	r4,r20
  8094ac:	1021883a 	mov	r16,r2
  8094b0:	08016000 	call	801600 <__mulsi3>
  8094b4:	b80b883a 	mov	r5,r23
  8094b8:	8809883a 	mov	r4,r17
  8094bc:	1029883a 	mov	r20,r2
  8094c0:	0800de00 	call	800de0 <__umodsi3>
  8094c4:	d9400217 	ldw	r5,8(sp)
  8094c8:	1004943a 	slli	r2,r2,16
  8094cc:	28ffffcc 	andi	r3,r5,65535
  8094d0:	10c4b03a 	or	r2,r2,r3
  8094d4:	1500032e 	bgeu	r2,r20,8094e4 <__umoddi3+0x4bc>
  8094d8:	1585883a 	add	r2,r2,r22
  8094dc:	843fffc4 	addi	r16,r16,-1
  8094e0:	1580562e 	bgeu	r2,r22,80963c <__umoddi3+0x614>
  8094e4:	d9800017 	ldw	r6,0(sp)
  8094e8:	e022943a 	slli	r17,fp,16
  8094ec:	302ed43a 	srli	r23,r6,16
  8094f0:	8462b03a 	or	r17,r16,r17
  8094f4:	34ffffcc 	andi	r19,r6,65535
  8094f8:	882ad43a 	srli	r21,r17,16
  8094fc:	8c7fffcc 	andi	r17,r17,65535
  809500:	8809883a 	mov	r4,r17
  809504:	980b883a 	mov	r5,r19
  809508:	1521c83a 	sub	r16,r2,r20
  80950c:	08016000 	call	801600 <__mulsi3>
  809510:	8809883a 	mov	r4,r17
  809514:	b80b883a 	mov	r5,r23
  809518:	1029883a 	mov	r20,r2
  80951c:	08016000 	call	801600 <__mulsi3>
  809520:	980b883a 	mov	r5,r19
  809524:	a809883a 	mov	r4,r21
  809528:	1023883a 	mov	r17,r2
  80952c:	08016000 	call	801600 <__mulsi3>
  809530:	a809883a 	mov	r4,r21
  809534:	b80b883a 	mov	r5,r23
  809538:	1027883a 	mov	r19,r2
  80953c:	08016000 	call	801600 <__mulsi3>
  809540:	100b883a 	mov	r5,r2
  809544:	a004d43a 	srli	r2,r20,16
  809548:	8ce3883a 	add	r17,r17,r19
  80954c:	1449883a 	add	r4,r2,r17
  809550:	24c0022e 	bgeu	r4,r19,80955c <__umoddi3+0x534>
  809554:	00800074 	movhi	r2,1
  809558:	288b883a 	add	r5,r5,r2
  80955c:	2004d43a 	srli	r2,r4,16
  809560:	2008943a 	slli	r4,r4,16
  809564:	a0ffffcc 	andi	r3,r20,65535
  809568:	288d883a 	add	r6,r5,r2
  80956c:	20c9883a 	add	r4,r4,r3
  809570:	81800b36 	bltu	r16,r6,8095a0 <__umoddi3+0x578>
  809574:	81804026 	beq	r16,r6,809678 <__umoddi3+0x650>
  809578:	818dc83a 	sub	r6,r16,r6
  80957c:	00000f06 	br	8095bc <__umoddi3+0x594>
  809580:	30c5c83a 	sub	r2,r6,r3
  809584:	182d883a 	mov	r22,r3
  809588:	8084d83a 	srl	r2,r16,r2
  80958c:	a8c6983a 	sll	r3,r21,r3
  809590:	9da6983a 	sll	r19,r19,r22
  809594:	85a0983a 	sll	r16,r16,r22
  809598:	18aab03a 	or	r21,r3,r2
  80959c:	003f1d06 	br	809214 <__umoddi3+0x1ec>
  8095a0:	d8c00017 	ldw	r3,0(sp)
  8095a4:	20c5c83a 	sub	r2,r4,r3
  8095a8:	2089803a 	cmpltu	r4,r4,r2
  8095ac:	3587c83a 	sub	r3,r6,r22
  8095b0:	1907c83a 	sub	r3,r3,r4
  8095b4:	80cdc83a 	sub	r6,r16,r3
  8095b8:	1009883a 	mov	r4,r2
  8095bc:	d9400117 	ldw	r5,4(sp)
  8095c0:	2905c83a 	sub	r2,r5,r4
  8095c4:	2887803a 	cmpltu	r3,r5,r2
  8095c8:	30c7c83a 	sub	r3,r6,r3
  8095cc:	d9800317 	ldw	r6,12(sp)
  8095d0:	1484d83a 	srl	r2,r2,r18
  8095d4:	1988983a 	sll	r4,r3,r6
  8095d8:	1c86d83a 	srl	r3,r3,r18
  8095dc:	2088b03a 	or	r4,r4,r2
  8095e0:	2011883a 	mov	r8,r4
  8095e4:	1813883a 	mov	r9,r3
  8095e8:	d9000415 	stw	r4,16(sp)
  8095ec:	d8c00515 	stw	r3,20(sp)
  8095f0:	003ed406 	br	809144 <__umoddi3+0x11c>
  8095f4:	01400604 	movi	r5,24
  8095f8:	2805883a 	mov	r2,r5
  8095fc:	003ea606 	br	809098 <__umoddi3+0x70>
  809600:	01400204 	movi	r5,8
  809604:	2805883a 	mov	r2,r5
  809608:	003ea306 	br	809098 <__umoddi3+0x70>
  80960c:	01400204 	movi	r5,8
  809610:	2805883a 	mov	r2,r5
  809614:	003edf06 	br	809194 <__umoddi3+0x16c>
  809618:	01400204 	movi	r5,8
  80961c:	2805883a 	mov	r2,r5
  809620:	003ef206 	br	8091ec <__umoddi3+0x1c4>
  809624:	01400604 	movi	r5,24
  809628:	2805883a 	mov	r2,r5
  80962c:	003eef06 	br	8091ec <__umoddi3+0x1c4>
  809630:	01400604 	movi	r5,24
  809634:	2805883a 	mov	r2,r5
  809638:	003ed606 	br	809194 <__umoddi3+0x16c>
  80963c:	153fa92e 	bgeu	r2,r20,8094e4 <__umoddi3+0x4bc>
  809640:	843fffc4 	addi	r16,r16,-1
  809644:	1585883a 	add	r2,r2,r22
  809648:	003fa606 	br	8094e4 <__umoddi3+0x4bc>
  80964c:	157f912e 	bgeu	r2,r21,809494 <__umoddi3+0x46c>
  809650:	e73fffc4 	addi	fp,fp,-1
  809654:	1585883a 	add	r2,r2,r22
  809658:	003f8e06 	br	809494 <__umoddi3+0x46c>
  80965c:	157f542e 	bgeu	r2,r21,8093b0 <__umoddi3+0x388>
  809660:	14c5883a 	add	r2,r2,r19
  809664:	003f5206 	br	8093b0 <__umoddi3+0x388>
  809668:	14c5883a 	add	r2,r2,r19
  80966c:	003efc06 	br	809260 <__umoddi3+0x238>
  809670:	14c5883a 	add	r2,r2,r19
  809674:	003ea606 	br	809110 <__umoddi3+0xe8>
  809678:	d8800117 	ldw	r2,4(sp)
  80967c:	113fc836 	bltu	r2,r4,8095a0 <__umoddi3+0x578>
  809680:	000d883a 	mov	r6,zero
  809684:	003fcd06 	br	8095bc <__umoddi3+0x594>

00809688 <_fpadd_parts>:
  809688:	defff804 	addi	sp,sp,-32
  80968c:	dcc00315 	stw	r19,12(sp)
  809690:	2027883a 	mov	r19,r4
  809694:	21000017 	ldw	r4,0(r4)
  809698:	00c00044 	movi	r3,1
  80969c:	dd400515 	stw	r21,20(sp)
  8096a0:	dd000415 	stw	r20,16(sp)
  8096a4:	ddc00715 	stw	r23,28(sp)
  8096a8:	dd800615 	stw	r22,24(sp)
  8096ac:	dc800215 	stw	r18,8(sp)
  8096b0:	dc400115 	stw	r17,4(sp)
  8096b4:	dc000015 	stw	r16,0(sp)
  8096b8:	282b883a 	mov	r21,r5
  8096bc:	3029883a 	mov	r20,r6
  8096c0:	1900632e 	bgeu	r3,r4,809850 <_fpadd_parts+0x1c8>
  8096c4:	28800017 	ldw	r2,0(r5)
  8096c8:	1880812e 	bgeu	r3,r2,8098d0 <_fpadd_parts+0x248>
  8096cc:	00c00104 	movi	r3,4
  8096d0:	20c0dc26 	beq	r4,r3,809a44 <_fpadd_parts+0x3bc>
  8096d4:	10c07e26 	beq	r2,r3,8098d0 <_fpadd_parts+0x248>
  8096d8:	00c00084 	movi	r3,2
  8096dc:	10c06726 	beq	r2,r3,80987c <_fpadd_parts+0x1f4>
  8096e0:	20c07b26 	beq	r4,r3,8098d0 <_fpadd_parts+0x248>
  8096e4:	9dc00217 	ldw	r23,8(r19)
  8096e8:	28c00217 	ldw	r3,8(r5)
  8096ec:	9c400317 	ldw	r17,12(r19)
  8096f0:	2bc00317 	ldw	r15,12(r5)
  8096f4:	b8cdc83a 	sub	r6,r23,r3
  8096f8:	9c800417 	ldw	r18,16(r19)
  8096fc:	2c000417 	ldw	r16,16(r5)
  809700:	3009883a 	mov	r4,r6
  809704:	30009716 	blt	r6,zero,809964 <_fpadd_parts+0x2dc>
  809708:	00800fc4 	movi	r2,63
  80970c:	11806b16 	blt	r2,r6,8098bc <_fpadd_parts+0x234>
  809710:	0100a40e 	bge	zero,r4,8099a4 <_fpadd_parts+0x31c>
  809714:	35bff804 	addi	r22,r6,-32
  809718:	b000bc16 	blt	r22,zero,809a0c <_fpadd_parts+0x384>
  80971c:	8596d83a 	srl	r11,r16,r22
  809720:	0019883a 	mov	r12,zero
  809724:	0013883a 	mov	r9,zero
  809728:	01000044 	movi	r4,1
  80972c:	0015883a 	mov	r10,zero
  809730:	b000be16 	blt	r22,zero,809a2c <_fpadd_parts+0x3a4>
  809734:	2590983a 	sll	r8,r4,r22
  809738:	000f883a 	mov	r7,zero
  80973c:	00bfffc4 	movi	r2,-1
  809740:	3889883a 	add	r4,r7,r2
  809744:	408b883a 	add	r5,r8,r2
  809748:	21cd803a 	cmpltu	r6,r4,r7
  80974c:	314b883a 	add	r5,r6,r5
  809750:	7904703a 	and	r2,r15,r4
  809754:	8146703a 	and	r3,r16,r5
  809758:	10c4b03a 	or	r2,r2,r3
  80975c:	10000226 	beq	r2,zero,809768 <_fpadd_parts+0xe0>
  809760:	02400044 	movi	r9,1
  809764:	0015883a 	mov	r10,zero
  809768:	5a5eb03a 	or	r15,r11,r9
  80976c:	62a0b03a 	or	r16,r12,r10
  809770:	99400117 	ldw	r5,4(r19)
  809774:	a8800117 	ldw	r2,4(r21)
  809778:	28806e26 	beq	r5,r2,809934 <_fpadd_parts+0x2ac>
  80977c:	28006626 	beq	r5,zero,809918 <_fpadd_parts+0x290>
  809780:	7c45c83a 	sub	r2,r15,r17
  809784:	7889803a 	cmpltu	r4,r15,r2
  809788:	8487c83a 	sub	r3,r16,r18
  80978c:	1909c83a 	sub	r4,r3,r4
  809790:	100d883a 	mov	r6,r2
  809794:	200f883a 	mov	r7,r4
  809798:	38007716 	blt	r7,zero,809978 <_fpadd_parts+0x2f0>
  80979c:	a5c00215 	stw	r23,8(r20)
  8097a0:	a1c00415 	stw	r7,16(r20)
  8097a4:	a0000115 	stw	zero,4(r20)
  8097a8:	a1800315 	stw	r6,12(r20)
  8097ac:	a2000317 	ldw	r8,12(r20)
  8097b0:	a2400417 	ldw	r9,16(r20)
  8097b4:	00bfffc4 	movi	r2,-1
  8097b8:	408b883a 	add	r5,r8,r2
  8097bc:	2a09803a 	cmpltu	r4,r5,r8
  8097c0:	488d883a 	add	r6,r9,r2
  8097c4:	01c40034 	movhi	r7,4096
  8097c8:	39ffffc4 	addi	r7,r7,-1
  8097cc:	218d883a 	add	r6,r4,r6
  8097d0:	39801736 	bltu	r7,r6,809830 <_fpadd_parts+0x1a8>
  8097d4:	31c06526 	beq	r6,r7,80996c <_fpadd_parts+0x2e4>
  8097d8:	a3000217 	ldw	r12,8(r20)
  8097dc:	4209883a 	add	r4,r8,r8
  8097e0:	00bfffc4 	movi	r2,-1
  8097e4:	220f803a 	cmpltu	r7,r4,r8
  8097e8:	4a4b883a 	add	r5,r9,r9
  8097ec:	394f883a 	add	r7,r7,r5
  8097f0:	2095883a 	add	r10,r4,r2
  8097f4:	3897883a 	add	r11,r7,r2
  8097f8:	510d803a 	cmpltu	r6,r10,r4
  8097fc:	6099883a 	add	r12,r12,r2
  809800:	32d7883a 	add	r11,r6,r11
  809804:	00840034 	movhi	r2,4096
  809808:	10bfffc4 	addi	r2,r2,-1
  80980c:	2011883a 	mov	r8,r4
  809810:	3813883a 	mov	r9,r7
  809814:	a1000315 	stw	r4,12(r20)
  809818:	a1c00415 	stw	r7,16(r20)
  80981c:	a3000215 	stw	r12,8(r20)
  809820:	12c00336 	bltu	r2,r11,809830 <_fpadd_parts+0x1a8>
  809824:	58bfed1e 	bne	r11,r2,8097dc <_fpadd_parts+0x154>
  809828:	00bfff84 	movi	r2,-2
  80982c:	12bfeb2e 	bgeu	r2,r10,8097dc <_fpadd_parts+0x154>
  809830:	a2800417 	ldw	r10,16(r20)
  809834:	008000c4 	movi	r2,3
  809838:	00c80034 	movhi	r3,8192
  80983c:	18ffffc4 	addi	r3,r3,-1
  809840:	a2400317 	ldw	r9,12(r20)
  809844:	a0800015 	stw	r2,0(r20)
  809848:	1a802336 	bltu	r3,r10,8098d8 <_fpadd_parts+0x250>
  80984c:	a027883a 	mov	r19,r20
  809850:	9805883a 	mov	r2,r19
  809854:	ddc00717 	ldw	r23,28(sp)
  809858:	dd800617 	ldw	r22,24(sp)
  80985c:	dd400517 	ldw	r21,20(sp)
  809860:	dd000417 	ldw	r20,16(sp)
  809864:	dcc00317 	ldw	r19,12(sp)
  809868:	dc800217 	ldw	r18,8(sp)
  80986c:	dc400117 	ldw	r17,4(sp)
  809870:	dc000017 	ldw	r16,0(sp)
  809874:	dec00804 	addi	sp,sp,32
  809878:	f800283a 	ret
  80987c:	20fff41e 	bne	r4,r3,809850 <_fpadd_parts+0x1c8>
  809880:	31000015 	stw	r4,0(r6)
  809884:	98800117 	ldw	r2,4(r19)
  809888:	30800115 	stw	r2,4(r6)
  80988c:	98c00217 	ldw	r3,8(r19)
  809890:	30c00215 	stw	r3,8(r6)
  809894:	98800317 	ldw	r2,12(r19)
  809898:	30800315 	stw	r2,12(r6)
  80989c:	98c00417 	ldw	r3,16(r19)
  8098a0:	30c00415 	stw	r3,16(r6)
  8098a4:	98800117 	ldw	r2,4(r19)
  8098a8:	28c00117 	ldw	r3,4(r5)
  8098ac:	3027883a 	mov	r19,r6
  8098b0:	10c4703a 	and	r2,r2,r3
  8098b4:	30800115 	stw	r2,4(r6)
  8098b8:	003fe506 	br	809850 <_fpadd_parts+0x1c8>
  8098bc:	1dc02616 	blt	r3,r23,809958 <_fpadd_parts+0x2d0>
  8098c0:	0023883a 	mov	r17,zero
  8098c4:	182f883a 	mov	r23,r3
  8098c8:	0025883a 	mov	r18,zero
  8098cc:	003fa806 	br	809770 <_fpadd_parts+0xe8>
  8098d0:	a827883a 	mov	r19,r21
  8098d4:	003fde06 	br	809850 <_fpadd_parts+0x1c8>
  8098d8:	01800044 	movi	r6,1
  8098dc:	500497fa 	slli	r2,r10,31
  8098e0:	4808d07a 	srli	r4,r9,1
  8098e4:	518ad83a 	srl	r5,r10,r6
  8098e8:	a2000217 	ldw	r8,8(r20)
  8098ec:	1108b03a 	or	r4,r2,r4
  8098f0:	0007883a 	mov	r3,zero
  8098f4:	4984703a 	and	r2,r9,r6
  8098f8:	208cb03a 	or	r6,r4,r2
  8098fc:	28ceb03a 	or	r7,r5,r3
  809900:	42000044 	addi	r8,r8,1
  809904:	a027883a 	mov	r19,r20
  809908:	a1c00415 	stw	r7,16(r20)
  80990c:	a2000215 	stw	r8,8(r20)
  809910:	a1800315 	stw	r6,12(r20)
  809914:	003fce06 	br	809850 <_fpadd_parts+0x1c8>
  809918:	8bc5c83a 	sub	r2,r17,r15
  80991c:	8889803a 	cmpltu	r4,r17,r2
  809920:	9407c83a 	sub	r3,r18,r16
  809924:	1909c83a 	sub	r4,r3,r4
  809928:	100d883a 	mov	r6,r2
  80992c:	200f883a 	mov	r7,r4
  809930:	003f9906 	br	809798 <_fpadd_parts+0x110>
  809934:	7c45883a 	add	r2,r15,r17
  809938:	13c9803a 	cmpltu	r4,r2,r15
  80993c:	8487883a 	add	r3,r16,r18
  809940:	20c9883a 	add	r4,r4,r3
  809944:	a1400115 	stw	r5,4(r20)
  809948:	a5c00215 	stw	r23,8(r20)
  80994c:	a0800315 	stw	r2,12(r20)
  809950:	a1000415 	stw	r4,16(r20)
  809954:	003fb606 	br	809830 <_fpadd_parts+0x1a8>
  809958:	001f883a 	mov	r15,zero
  80995c:	0021883a 	mov	r16,zero
  809960:	003f8306 	br	809770 <_fpadd_parts+0xe8>
  809964:	018dc83a 	sub	r6,zero,r6
  809968:	003f6706 	br	809708 <_fpadd_parts+0x80>
  80996c:	00bfff84 	movi	r2,-2
  809970:	117faf36 	bltu	r2,r5,809830 <_fpadd_parts+0x1a8>
  809974:	003f9806 	br	8097d8 <_fpadd_parts+0x150>
  809978:	0005883a 	mov	r2,zero
  80997c:	1189c83a 	sub	r4,r2,r6
  809980:	1105803a 	cmpltu	r2,r2,r4
  809984:	01cbc83a 	sub	r5,zero,r7
  809988:	2885c83a 	sub	r2,r5,r2
  80998c:	01800044 	movi	r6,1
  809990:	a1800115 	stw	r6,4(r20)
  809994:	a5c00215 	stw	r23,8(r20)
  809998:	a1000315 	stw	r4,12(r20)
  80999c:	a0800415 	stw	r2,16(r20)
  8099a0:	003f8206 	br	8097ac <_fpadd_parts+0x124>
  8099a4:	203f7226 	beq	r4,zero,809770 <_fpadd_parts+0xe8>
  8099a8:	35bff804 	addi	r22,r6,-32
  8099ac:	b9af883a 	add	r23,r23,r6
  8099b0:	b0003116 	blt	r22,zero,809a78 <_fpadd_parts+0x3f0>
  8099b4:	959ad83a 	srl	r13,r18,r22
  8099b8:	001d883a 	mov	r14,zero
  8099bc:	000f883a 	mov	r7,zero
  8099c0:	01000044 	movi	r4,1
  8099c4:	0011883a 	mov	r8,zero
  8099c8:	b0002516 	blt	r22,zero,809a60 <_fpadd_parts+0x3d8>
  8099cc:	2594983a 	sll	r10,r4,r22
  8099d0:	0013883a 	mov	r9,zero
  8099d4:	00bfffc4 	movi	r2,-1
  8099d8:	4889883a 	add	r4,r9,r2
  8099dc:	508b883a 	add	r5,r10,r2
  8099e0:	224d803a 	cmpltu	r6,r4,r9
  8099e4:	314b883a 	add	r5,r6,r5
  8099e8:	8904703a 	and	r2,r17,r4
  8099ec:	9146703a 	and	r3,r18,r5
  8099f0:	10c4b03a 	or	r2,r2,r3
  8099f4:	10000226 	beq	r2,zero,809a00 <_fpadd_parts+0x378>
  8099f8:	01c00044 	movi	r7,1
  8099fc:	0011883a 	mov	r8,zero
  809a00:	69e2b03a 	or	r17,r13,r7
  809a04:	7224b03a 	or	r18,r14,r8
  809a08:	003f5906 	br	809770 <_fpadd_parts+0xe8>
  809a0c:	8407883a 	add	r3,r16,r16
  809a10:	008007c4 	movi	r2,31
  809a14:	1185c83a 	sub	r2,r2,r6
  809a18:	1886983a 	sll	r3,r3,r2
  809a1c:	7996d83a 	srl	r11,r15,r6
  809a20:	8198d83a 	srl	r12,r16,r6
  809a24:	1ad6b03a 	or	r11,r3,r11
  809a28:	003f3e06 	br	809724 <_fpadd_parts+0x9c>
  809a2c:	2006d07a 	srli	r3,r4,1
  809a30:	008007c4 	movi	r2,31
  809a34:	1185c83a 	sub	r2,r2,r6
  809a38:	1890d83a 	srl	r8,r3,r2
  809a3c:	218e983a 	sll	r7,r4,r6
  809a40:	003f3e06 	br	80973c <_fpadd_parts+0xb4>
  809a44:	113f821e 	bne	r2,r4,809850 <_fpadd_parts+0x1c8>
  809a48:	28c00117 	ldw	r3,4(r5)
  809a4c:	98800117 	ldw	r2,4(r19)
  809a50:	10ff7f26 	beq	r2,r3,809850 <_fpadd_parts+0x1c8>
  809a54:	04c02074 	movhi	r19,129
  809a58:	9cf4a104 	addi	r19,r19,-11644
  809a5c:	003f7c06 	br	809850 <_fpadd_parts+0x1c8>
  809a60:	2006d07a 	srli	r3,r4,1
  809a64:	008007c4 	movi	r2,31
  809a68:	1185c83a 	sub	r2,r2,r6
  809a6c:	1894d83a 	srl	r10,r3,r2
  809a70:	2192983a 	sll	r9,r4,r6
  809a74:	003fd706 	br	8099d4 <_fpadd_parts+0x34c>
  809a78:	9487883a 	add	r3,r18,r18
  809a7c:	008007c4 	movi	r2,31
  809a80:	1185c83a 	sub	r2,r2,r6
  809a84:	1886983a 	sll	r3,r3,r2
  809a88:	899ad83a 	srl	r13,r17,r6
  809a8c:	919cd83a 	srl	r14,r18,r6
  809a90:	1b5ab03a 	or	r13,r3,r13
  809a94:	003fc906 	br	8099bc <_fpadd_parts+0x334>

00809a98 <__subdf3>:
  809a98:	deffea04 	addi	sp,sp,-88
  809a9c:	dcc01415 	stw	r19,80(sp)
  809aa0:	dcc00404 	addi	r19,sp,16
  809aa4:	2011883a 	mov	r8,r4
  809aa8:	2813883a 	mov	r9,r5
  809aac:	dc401315 	stw	r17,76(sp)
  809ab0:	d809883a 	mov	r4,sp
  809ab4:	980b883a 	mov	r5,r19
  809ab8:	dc400904 	addi	r17,sp,36
  809abc:	dfc01515 	stw	ra,84(sp)
  809ac0:	da400115 	stw	r9,4(sp)
  809ac4:	d9c00315 	stw	r7,12(sp)
  809ac8:	da000015 	stw	r8,0(sp)
  809acc:	d9800215 	stw	r6,8(sp)
  809ad0:	08014c80 	call	8014c8 <__unpack_d>
  809ad4:	d9000204 	addi	r4,sp,8
  809ad8:	880b883a 	mov	r5,r17
  809adc:	08014c80 	call	8014c8 <__unpack_d>
  809ae0:	d8800a17 	ldw	r2,40(sp)
  809ae4:	880b883a 	mov	r5,r17
  809ae8:	9809883a 	mov	r4,r19
  809aec:	d9800e04 	addi	r6,sp,56
  809af0:	1080005c 	xori	r2,r2,1
  809af4:	d8800a15 	stw	r2,40(sp)
  809af8:	08096880 	call	809688 <_fpadd_parts>
  809afc:	1009883a 	mov	r4,r2
  809b00:	08011b40 	call	8011b4 <__pack_d>
  809b04:	dfc01517 	ldw	ra,84(sp)
  809b08:	dcc01417 	ldw	r19,80(sp)
  809b0c:	dc401317 	ldw	r17,76(sp)
  809b10:	dec01604 	addi	sp,sp,88
  809b14:	f800283a 	ret

00809b18 <__adddf3>:
  809b18:	deffea04 	addi	sp,sp,-88
  809b1c:	dcc01415 	stw	r19,80(sp)
  809b20:	dcc00404 	addi	r19,sp,16
  809b24:	2011883a 	mov	r8,r4
  809b28:	2813883a 	mov	r9,r5
  809b2c:	dc401315 	stw	r17,76(sp)
  809b30:	d809883a 	mov	r4,sp
  809b34:	980b883a 	mov	r5,r19
  809b38:	dc400904 	addi	r17,sp,36
  809b3c:	dfc01515 	stw	ra,84(sp)
  809b40:	da400115 	stw	r9,4(sp)
  809b44:	d9c00315 	stw	r7,12(sp)
  809b48:	da000015 	stw	r8,0(sp)
  809b4c:	d9800215 	stw	r6,8(sp)
  809b50:	08014c80 	call	8014c8 <__unpack_d>
  809b54:	d9000204 	addi	r4,sp,8
  809b58:	880b883a 	mov	r5,r17
  809b5c:	08014c80 	call	8014c8 <__unpack_d>
  809b60:	d9800e04 	addi	r6,sp,56
  809b64:	9809883a 	mov	r4,r19
  809b68:	880b883a 	mov	r5,r17
  809b6c:	08096880 	call	809688 <_fpadd_parts>
  809b70:	1009883a 	mov	r4,r2
  809b74:	08011b40 	call	8011b4 <__pack_d>
  809b78:	dfc01517 	ldw	ra,84(sp)
  809b7c:	dcc01417 	ldw	r19,80(sp)
  809b80:	dc401317 	ldw	r17,76(sp)
  809b84:	dec01604 	addi	sp,sp,88
  809b88:	f800283a 	ret

00809b8c <__muldf3>:
  809b8c:	deffe004 	addi	sp,sp,-128
  809b90:	dc401815 	stw	r17,96(sp)
  809b94:	dc400404 	addi	r17,sp,16
  809b98:	2011883a 	mov	r8,r4
  809b9c:	2813883a 	mov	r9,r5
  809ba0:	dc001715 	stw	r16,92(sp)
  809ba4:	d809883a 	mov	r4,sp
  809ba8:	880b883a 	mov	r5,r17
  809bac:	dc000904 	addi	r16,sp,36
  809bb0:	dfc01f15 	stw	ra,124(sp)
  809bb4:	da400115 	stw	r9,4(sp)
  809bb8:	d9c00315 	stw	r7,12(sp)
  809bbc:	da000015 	stw	r8,0(sp)
  809bc0:	d9800215 	stw	r6,8(sp)
  809bc4:	ddc01e15 	stw	r23,120(sp)
  809bc8:	dd801d15 	stw	r22,116(sp)
  809bcc:	dd401c15 	stw	r21,112(sp)
  809bd0:	dd001b15 	stw	r20,108(sp)
  809bd4:	dcc01a15 	stw	r19,104(sp)
  809bd8:	dc801915 	stw	r18,100(sp)
  809bdc:	08014c80 	call	8014c8 <__unpack_d>
  809be0:	d9000204 	addi	r4,sp,8
  809be4:	800b883a 	mov	r5,r16
  809be8:	08014c80 	call	8014c8 <__unpack_d>
  809bec:	d9000417 	ldw	r4,16(sp)
  809bf0:	00800044 	movi	r2,1
  809bf4:	1100102e 	bgeu	r2,r4,809c38 <__muldf3+0xac>
  809bf8:	d8c00917 	ldw	r3,36(sp)
  809bfc:	10c0062e 	bgeu	r2,r3,809c18 <__muldf3+0x8c>
  809c00:	00800104 	movi	r2,4
  809c04:	20800a26 	beq	r4,r2,809c30 <__muldf3+0xa4>
  809c08:	1880cc26 	beq	r3,r2,809f3c <__muldf3+0x3b0>
  809c0c:	00800084 	movi	r2,2
  809c10:	20800926 	beq	r4,r2,809c38 <__muldf3+0xac>
  809c14:	1880191e 	bne	r3,r2,809c7c <__muldf3+0xf0>
  809c18:	d8c00a17 	ldw	r3,40(sp)
  809c1c:	d8800517 	ldw	r2,20(sp)
  809c20:	8009883a 	mov	r4,r16
  809c24:	10c4c03a 	cmpne	r2,r2,r3
  809c28:	d8800a15 	stw	r2,40(sp)
  809c2c:	00000706 	br	809c4c <__muldf3+0xc0>
  809c30:	00800084 	movi	r2,2
  809c34:	1880c326 	beq	r3,r2,809f44 <__muldf3+0x3b8>
  809c38:	d8800517 	ldw	r2,20(sp)
  809c3c:	d8c00a17 	ldw	r3,40(sp)
  809c40:	8809883a 	mov	r4,r17
  809c44:	10c4c03a 	cmpne	r2,r2,r3
  809c48:	d8800515 	stw	r2,20(sp)
  809c4c:	08011b40 	call	8011b4 <__pack_d>
  809c50:	dfc01f17 	ldw	ra,124(sp)
  809c54:	ddc01e17 	ldw	r23,120(sp)
  809c58:	dd801d17 	ldw	r22,116(sp)
  809c5c:	dd401c17 	ldw	r21,112(sp)
  809c60:	dd001b17 	ldw	r20,108(sp)
  809c64:	dcc01a17 	ldw	r19,104(sp)
  809c68:	dc801917 	ldw	r18,100(sp)
  809c6c:	dc401817 	ldw	r17,96(sp)
  809c70:	dc001717 	ldw	r16,92(sp)
  809c74:	dec02004 	addi	sp,sp,128
  809c78:	f800283a 	ret
  809c7c:	dd800717 	ldw	r22,28(sp)
  809c80:	dc800c17 	ldw	r18,48(sp)
  809c84:	002b883a 	mov	r21,zero
  809c88:	0023883a 	mov	r17,zero
  809c8c:	a80b883a 	mov	r5,r21
  809c90:	b00d883a 	mov	r6,r22
  809c94:	880f883a 	mov	r7,r17
  809c98:	ddc00817 	ldw	r23,32(sp)
  809c9c:	dcc00d17 	ldw	r19,52(sp)
  809ca0:	9009883a 	mov	r4,r18
  809ca4:	0800de80 	call	800de8 <__muldi3>
  809ca8:	001b883a 	mov	r13,zero
  809cac:	680f883a 	mov	r7,r13
  809cb0:	b009883a 	mov	r4,r22
  809cb4:	000b883a 	mov	r5,zero
  809cb8:	980d883a 	mov	r6,r19
  809cbc:	b82d883a 	mov	r22,r23
  809cc0:	002f883a 	mov	r23,zero
  809cc4:	db401615 	stw	r13,88(sp)
  809cc8:	d8801315 	stw	r2,76(sp)
  809ccc:	d8c01415 	stw	r3,80(sp)
  809cd0:	dcc01515 	stw	r19,84(sp)
  809cd4:	0800de80 	call	800de8 <__muldi3>
  809cd8:	b00d883a 	mov	r6,r22
  809cdc:	000b883a 	mov	r5,zero
  809ce0:	9009883a 	mov	r4,r18
  809ce4:	b80f883a 	mov	r7,r23
  809ce8:	1021883a 	mov	r16,r2
  809cec:	1823883a 	mov	r17,r3
  809cf0:	0800de80 	call	800de8 <__muldi3>
  809cf4:	8085883a 	add	r2,r16,r2
  809cf8:	140d803a 	cmpltu	r6,r2,r16
  809cfc:	88c7883a 	add	r3,r17,r3
  809d00:	30cd883a 	add	r6,r6,r3
  809d04:	1029883a 	mov	r20,r2
  809d08:	302b883a 	mov	r21,r6
  809d0c:	da801317 	ldw	r10,76(sp)
  809d10:	dac01417 	ldw	r11,80(sp)
  809d14:	db001517 	ldw	r12,84(sp)
  809d18:	db401617 	ldw	r13,88(sp)
  809d1c:	3440612e 	bgeu	r6,r17,809ea4 <__muldf3+0x318>
  809d20:	0009883a 	mov	r4,zero
  809d24:	5105883a 	add	r2,r10,r4
  809d28:	128d803a 	cmpltu	r6,r2,r10
  809d2c:	5d07883a 	add	r3,r11,r20
  809d30:	30cd883a 	add	r6,r6,r3
  809d34:	0021883a 	mov	r16,zero
  809d38:	04400044 	movi	r17,1
  809d3c:	1025883a 	mov	r18,r2
  809d40:	3027883a 	mov	r19,r6
  809d44:	32c06236 	bltu	r6,r11,809ed0 <__muldf3+0x344>
  809d48:	59807a26 	beq	r11,r6,809f34 <__muldf3+0x3a8>
  809d4c:	680b883a 	mov	r5,r13
  809d50:	b80f883a 	mov	r7,r23
  809d54:	6009883a 	mov	r4,r12
  809d58:	b00d883a 	mov	r6,r22
  809d5c:	0800de80 	call	800de8 <__muldi3>
  809d60:	1009883a 	mov	r4,r2
  809d64:	000f883a 	mov	r7,zero
  809d68:	1545883a 	add	r2,r2,r21
  809d6c:	1111803a 	cmpltu	r8,r2,r4
  809d70:	19c7883a 	add	r3,r3,r7
  809d74:	40c7883a 	add	r3,r8,r3
  809d78:	88cb883a 	add	r5,r17,r3
  809d7c:	d8c00617 	ldw	r3,24(sp)
  809d80:	8089883a 	add	r4,r16,r2
  809d84:	d8800b17 	ldw	r2,44(sp)
  809d88:	18c00104 	addi	r3,r3,4
  809d8c:	240d803a 	cmpltu	r6,r4,r16
  809d90:	10c7883a 	add	r3,r2,r3
  809d94:	2013883a 	mov	r9,r4
  809d98:	d8800a17 	ldw	r2,40(sp)
  809d9c:	d9000517 	ldw	r4,20(sp)
  809da0:	314d883a 	add	r6,r6,r5
  809da4:	3015883a 	mov	r10,r6
  809da8:	2088c03a 	cmpne	r4,r4,r2
  809dac:	00880034 	movhi	r2,8192
  809db0:	10bfffc4 	addi	r2,r2,-1
  809db4:	d9000f15 	stw	r4,60(sp)
  809db8:	d8c01015 	stw	r3,64(sp)
  809dbc:	1180162e 	bgeu	r2,r6,809e18 <__muldf3+0x28c>
  809dc0:	1811883a 	mov	r8,r3
  809dc4:	101f883a 	mov	r15,r2
  809dc8:	980497fa 	slli	r2,r19,31
  809dcc:	9016d07a 	srli	r11,r18,1
  809dd0:	500697fa 	slli	r3,r10,31
  809dd4:	480cd07a 	srli	r6,r9,1
  809dd8:	500ed07a 	srli	r7,r10,1
  809ddc:	12d6b03a 	or	r11,r2,r11
  809de0:	00800044 	movi	r2,1
  809de4:	198cb03a 	or	r6,r3,r6
  809de8:	4888703a 	and	r4,r9,r2
  809dec:	9818d07a 	srli	r12,r19,1
  809df0:	001b883a 	mov	r13,zero
  809df4:	03a00034 	movhi	r14,32768
  809df8:	3013883a 	mov	r9,r6
  809dfc:	3815883a 	mov	r10,r7
  809e00:	4091883a 	add	r8,r8,r2
  809e04:	20000226 	beq	r4,zero,809e10 <__muldf3+0x284>
  809e08:	5b64b03a 	or	r18,r11,r13
  809e0c:	63a6b03a 	or	r19,r12,r14
  809e10:	7abfed36 	bltu	r15,r10,809dc8 <__muldf3+0x23c>
  809e14:	da001015 	stw	r8,64(sp)
  809e18:	00840034 	movhi	r2,4096
  809e1c:	10bfffc4 	addi	r2,r2,-1
  809e20:	12801436 	bltu	r2,r10,809e74 <__muldf3+0x2e8>
  809e24:	da001017 	ldw	r8,64(sp)
  809e28:	101f883a 	mov	r15,r2
  809e2c:	4a45883a 	add	r2,r9,r9
  809e30:	124d803a 	cmpltu	r6,r2,r9
  809e34:	5287883a 	add	r3,r10,r10
  809e38:	9497883a 	add	r11,r18,r18
  809e3c:	5c8f803a 	cmpltu	r7,r11,r18
  809e40:	9cd9883a 	add	r12,r19,r19
  809e44:	01000044 	movi	r4,1
  809e48:	30cd883a 	add	r6,r6,r3
  809e4c:	3b0f883a 	add	r7,r7,r12
  809e50:	423fffc4 	addi	r8,r8,-1
  809e54:	1013883a 	mov	r9,r2
  809e58:	3015883a 	mov	r10,r6
  809e5c:	111ab03a 	or	r13,r2,r4
  809e60:	98003016 	blt	r19,zero,809f24 <__muldf3+0x398>
  809e64:	5825883a 	mov	r18,r11
  809e68:	3827883a 	mov	r19,r7
  809e6c:	7abfef2e 	bgeu	r15,r10,809e2c <__muldf3+0x2a0>
  809e70:	da001015 	stw	r8,64(sp)
  809e74:	00803fc4 	movi	r2,255
  809e78:	488e703a 	and	r7,r9,r2
  809e7c:	00802004 	movi	r2,128
  809e80:	0007883a 	mov	r3,zero
  809e84:	0011883a 	mov	r8,zero
  809e88:	38801826 	beq	r7,r2,809eec <__muldf3+0x360>
  809e8c:	008000c4 	movi	r2,3
  809e90:	d9000e04 	addi	r4,sp,56
  809e94:	da801215 	stw	r10,72(sp)
  809e98:	d8800e15 	stw	r2,56(sp)
  809e9c:	da401115 	stw	r9,68(sp)
  809ea0:	003f6a06 	br	809c4c <__muldf3+0xc0>
  809ea4:	89802126 	beq	r17,r6,809f2c <__muldf3+0x3a0>
  809ea8:	0009883a 	mov	r4,zero
  809eac:	5105883a 	add	r2,r10,r4
  809eb0:	128d803a 	cmpltu	r6,r2,r10
  809eb4:	5d07883a 	add	r3,r11,r20
  809eb8:	30cd883a 	add	r6,r6,r3
  809ebc:	0021883a 	mov	r16,zero
  809ec0:	0023883a 	mov	r17,zero
  809ec4:	1025883a 	mov	r18,r2
  809ec8:	3027883a 	mov	r19,r6
  809ecc:	32ff9e2e 	bgeu	r6,r11,809d48 <__muldf3+0x1bc>
  809ed0:	00800044 	movi	r2,1
  809ed4:	8089883a 	add	r4,r16,r2
  809ed8:	240d803a 	cmpltu	r6,r4,r16
  809edc:	344d883a 	add	r6,r6,r17
  809ee0:	2021883a 	mov	r16,r4
  809ee4:	3023883a 	mov	r17,r6
  809ee8:	003f9806 	br	809d4c <__muldf3+0x1c0>
  809eec:	403fe71e 	bne	r8,zero,809e8c <__muldf3+0x300>
  809ef0:	01004004 	movi	r4,256
  809ef4:	4904703a 	and	r2,r9,r4
  809ef8:	10c4b03a 	or	r2,r2,r3
  809efc:	103fe31e 	bne	r2,zero,809e8c <__muldf3+0x300>
  809f00:	94c4b03a 	or	r2,r18,r19
  809f04:	103fe126 	beq	r2,zero,809e8c <__muldf3+0x300>
  809f08:	49c5883a 	add	r2,r9,r7
  809f0c:	1251803a 	cmpltu	r8,r2,r9
  809f10:	4291883a 	add	r8,r8,r10
  809f14:	013fc004 	movi	r4,-256
  809f18:	1112703a 	and	r9,r2,r4
  809f1c:	4015883a 	mov	r10,r8
  809f20:	003fda06 	br	809e8c <__muldf3+0x300>
  809f24:	6813883a 	mov	r9,r13
  809f28:	003fce06 	br	809e64 <__muldf3+0x2d8>
  809f2c:	143f7c36 	bltu	r2,r16,809d20 <__muldf3+0x194>
  809f30:	003fdd06 	br	809ea8 <__muldf3+0x31c>
  809f34:	12bf852e 	bgeu	r2,r10,809d4c <__muldf3+0x1c0>
  809f38:	003fe506 	br	809ed0 <__muldf3+0x344>
  809f3c:	00800084 	movi	r2,2
  809f40:	20bf351e 	bne	r4,r2,809c18 <__muldf3+0x8c>
  809f44:	01002074 	movhi	r4,129
  809f48:	2134a104 	addi	r4,r4,-11644
  809f4c:	003f3f06 	br	809c4c <__muldf3+0xc0>

00809f50 <__eqdf2>:
  809f50:	deffef04 	addi	sp,sp,-68
  809f54:	dc400f15 	stw	r17,60(sp)
  809f58:	dc400404 	addi	r17,sp,16
  809f5c:	2005883a 	mov	r2,r4
  809f60:	2807883a 	mov	r3,r5
  809f64:	dc000e15 	stw	r16,56(sp)
  809f68:	d809883a 	mov	r4,sp
  809f6c:	880b883a 	mov	r5,r17
  809f70:	dc000904 	addi	r16,sp,36
  809f74:	d8c00115 	stw	r3,4(sp)
  809f78:	d8800015 	stw	r2,0(sp)
  809f7c:	d9800215 	stw	r6,8(sp)
  809f80:	dfc01015 	stw	ra,64(sp)
  809f84:	d9c00315 	stw	r7,12(sp)
  809f88:	08014c80 	call	8014c8 <__unpack_d>
  809f8c:	d9000204 	addi	r4,sp,8
  809f90:	800b883a 	mov	r5,r16
  809f94:	08014c80 	call	8014c8 <__unpack_d>
  809f98:	d8800417 	ldw	r2,16(sp)
  809f9c:	00c00044 	movi	r3,1
  809fa0:	180d883a 	mov	r6,r3
  809fa4:	1880062e 	bgeu	r3,r2,809fc0 <__eqdf2+0x70>
  809fa8:	d8800917 	ldw	r2,36(sp)
  809fac:	8809883a 	mov	r4,r17
  809fb0:	800b883a 	mov	r5,r16
  809fb4:	1880022e 	bgeu	r3,r2,809fc0 <__eqdf2+0x70>
  809fb8:	080a55c0 	call	80a55c <__fpcmp_parts_d>
  809fbc:	100d883a 	mov	r6,r2
  809fc0:	3005883a 	mov	r2,r6
  809fc4:	dfc01017 	ldw	ra,64(sp)
  809fc8:	dc400f17 	ldw	r17,60(sp)
  809fcc:	dc000e17 	ldw	r16,56(sp)
  809fd0:	dec01104 	addi	sp,sp,68
  809fd4:	f800283a 	ret

00809fd8 <__nedf2>:
  809fd8:	deffef04 	addi	sp,sp,-68
  809fdc:	dc400f15 	stw	r17,60(sp)
  809fe0:	dc400404 	addi	r17,sp,16
  809fe4:	2005883a 	mov	r2,r4
  809fe8:	2807883a 	mov	r3,r5
  809fec:	dc000e15 	stw	r16,56(sp)
  809ff0:	d809883a 	mov	r4,sp
  809ff4:	880b883a 	mov	r5,r17
  809ff8:	dc000904 	addi	r16,sp,36
  809ffc:	d8c00115 	stw	r3,4(sp)
  80a000:	d8800015 	stw	r2,0(sp)
  80a004:	d9800215 	stw	r6,8(sp)
  80a008:	dfc01015 	stw	ra,64(sp)
  80a00c:	d9c00315 	stw	r7,12(sp)
  80a010:	08014c80 	call	8014c8 <__unpack_d>
  80a014:	d9000204 	addi	r4,sp,8
  80a018:	800b883a 	mov	r5,r16
  80a01c:	08014c80 	call	8014c8 <__unpack_d>
  80a020:	d8800417 	ldw	r2,16(sp)
  80a024:	00c00044 	movi	r3,1
  80a028:	180d883a 	mov	r6,r3
  80a02c:	1880062e 	bgeu	r3,r2,80a048 <__nedf2+0x70>
  80a030:	d8800917 	ldw	r2,36(sp)
  80a034:	8809883a 	mov	r4,r17
  80a038:	800b883a 	mov	r5,r16
  80a03c:	1880022e 	bgeu	r3,r2,80a048 <__nedf2+0x70>
  80a040:	080a55c0 	call	80a55c <__fpcmp_parts_d>
  80a044:	100d883a 	mov	r6,r2
  80a048:	3005883a 	mov	r2,r6
  80a04c:	dfc01017 	ldw	ra,64(sp)
  80a050:	dc400f17 	ldw	r17,60(sp)
  80a054:	dc000e17 	ldw	r16,56(sp)
  80a058:	dec01104 	addi	sp,sp,68
  80a05c:	f800283a 	ret

0080a060 <__gtdf2>:
  80a060:	deffef04 	addi	sp,sp,-68
  80a064:	dc400f15 	stw	r17,60(sp)
  80a068:	dc400404 	addi	r17,sp,16
  80a06c:	2005883a 	mov	r2,r4
  80a070:	2807883a 	mov	r3,r5
  80a074:	dc000e15 	stw	r16,56(sp)
  80a078:	d809883a 	mov	r4,sp
  80a07c:	880b883a 	mov	r5,r17
  80a080:	dc000904 	addi	r16,sp,36
  80a084:	d8c00115 	stw	r3,4(sp)
  80a088:	d8800015 	stw	r2,0(sp)
  80a08c:	d9800215 	stw	r6,8(sp)
  80a090:	dfc01015 	stw	ra,64(sp)
  80a094:	d9c00315 	stw	r7,12(sp)
  80a098:	08014c80 	call	8014c8 <__unpack_d>
  80a09c:	d9000204 	addi	r4,sp,8
  80a0a0:	800b883a 	mov	r5,r16
  80a0a4:	08014c80 	call	8014c8 <__unpack_d>
  80a0a8:	d8800417 	ldw	r2,16(sp)
  80a0ac:	00c00044 	movi	r3,1
  80a0b0:	01bfffc4 	movi	r6,-1
  80a0b4:	1880062e 	bgeu	r3,r2,80a0d0 <__gtdf2+0x70>
  80a0b8:	d8800917 	ldw	r2,36(sp)
  80a0bc:	8809883a 	mov	r4,r17
  80a0c0:	800b883a 	mov	r5,r16
  80a0c4:	1880022e 	bgeu	r3,r2,80a0d0 <__gtdf2+0x70>
  80a0c8:	080a55c0 	call	80a55c <__fpcmp_parts_d>
  80a0cc:	100d883a 	mov	r6,r2
  80a0d0:	3005883a 	mov	r2,r6
  80a0d4:	dfc01017 	ldw	ra,64(sp)
  80a0d8:	dc400f17 	ldw	r17,60(sp)
  80a0dc:	dc000e17 	ldw	r16,56(sp)
  80a0e0:	dec01104 	addi	sp,sp,68
  80a0e4:	f800283a 	ret

0080a0e8 <__gedf2>:
  80a0e8:	deffef04 	addi	sp,sp,-68
  80a0ec:	dc400f15 	stw	r17,60(sp)
  80a0f0:	dc400404 	addi	r17,sp,16
  80a0f4:	2005883a 	mov	r2,r4
  80a0f8:	2807883a 	mov	r3,r5
  80a0fc:	dc000e15 	stw	r16,56(sp)
  80a100:	d809883a 	mov	r4,sp
  80a104:	880b883a 	mov	r5,r17
  80a108:	dc000904 	addi	r16,sp,36
  80a10c:	d8c00115 	stw	r3,4(sp)
  80a110:	d8800015 	stw	r2,0(sp)
  80a114:	d9800215 	stw	r6,8(sp)
  80a118:	dfc01015 	stw	ra,64(sp)
  80a11c:	d9c00315 	stw	r7,12(sp)
  80a120:	08014c80 	call	8014c8 <__unpack_d>
  80a124:	d9000204 	addi	r4,sp,8
  80a128:	800b883a 	mov	r5,r16
  80a12c:	08014c80 	call	8014c8 <__unpack_d>
  80a130:	d8800417 	ldw	r2,16(sp)
  80a134:	00c00044 	movi	r3,1
  80a138:	01bfffc4 	movi	r6,-1
  80a13c:	1880062e 	bgeu	r3,r2,80a158 <__gedf2+0x70>
  80a140:	d8800917 	ldw	r2,36(sp)
  80a144:	8809883a 	mov	r4,r17
  80a148:	800b883a 	mov	r5,r16
  80a14c:	1880022e 	bgeu	r3,r2,80a158 <__gedf2+0x70>
  80a150:	080a55c0 	call	80a55c <__fpcmp_parts_d>
  80a154:	100d883a 	mov	r6,r2
  80a158:	3005883a 	mov	r2,r6
  80a15c:	dfc01017 	ldw	ra,64(sp)
  80a160:	dc400f17 	ldw	r17,60(sp)
  80a164:	dc000e17 	ldw	r16,56(sp)
  80a168:	dec01104 	addi	sp,sp,68
  80a16c:	f800283a 	ret

0080a170 <__ltdf2>:
  80a170:	deffef04 	addi	sp,sp,-68
  80a174:	dc400f15 	stw	r17,60(sp)
  80a178:	dc400404 	addi	r17,sp,16
  80a17c:	2005883a 	mov	r2,r4
  80a180:	2807883a 	mov	r3,r5
  80a184:	dc000e15 	stw	r16,56(sp)
  80a188:	d809883a 	mov	r4,sp
  80a18c:	880b883a 	mov	r5,r17
  80a190:	dc000904 	addi	r16,sp,36
  80a194:	d8c00115 	stw	r3,4(sp)
  80a198:	d8800015 	stw	r2,0(sp)
  80a19c:	d9800215 	stw	r6,8(sp)
  80a1a0:	dfc01015 	stw	ra,64(sp)
  80a1a4:	d9c00315 	stw	r7,12(sp)
  80a1a8:	08014c80 	call	8014c8 <__unpack_d>
  80a1ac:	d9000204 	addi	r4,sp,8
  80a1b0:	800b883a 	mov	r5,r16
  80a1b4:	08014c80 	call	8014c8 <__unpack_d>
  80a1b8:	d8800417 	ldw	r2,16(sp)
  80a1bc:	00c00044 	movi	r3,1
  80a1c0:	180d883a 	mov	r6,r3
  80a1c4:	1880062e 	bgeu	r3,r2,80a1e0 <__ltdf2+0x70>
  80a1c8:	d8800917 	ldw	r2,36(sp)
  80a1cc:	8809883a 	mov	r4,r17
  80a1d0:	800b883a 	mov	r5,r16
  80a1d4:	1880022e 	bgeu	r3,r2,80a1e0 <__ltdf2+0x70>
  80a1d8:	080a55c0 	call	80a55c <__fpcmp_parts_d>
  80a1dc:	100d883a 	mov	r6,r2
  80a1e0:	3005883a 	mov	r2,r6
  80a1e4:	dfc01017 	ldw	ra,64(sp)
  80a1e8:	dc400f17 	ldw	r17,60(sp)
  80a1ec:	dc000e17 	ldw	r16,56(sp)
  80a1f0:	dec01104 	addi	sp,sp,68
  80a1f4:	f800283a 	ret

0080a1f8 <__floatsidf>:
  80a1f8:	2006d7fa 	srli	r3,r4,31
  80a1fc:	defff604 	addi	sp,sp,-40
  80a200:	008000c4 	movi	r2,3
  80a204:	dfc00915 	stw	ra,36(sp)
  80a208:	dcc00815 	stw	r19,32(sp)
  80a20c:	dc800715 	stw	r18,28(sp)
  80a210:	dc400615 	stw	r17,24(sp)
  80a214:	dc000515 	stw	r16,20(sp)
  80a218:	d8800015 	stw	r2,0(sp)
  80a21c:	d8c00115 	stw	r3,4(sp)
  80a220:	20000f1e 	bne	r4,zero,80a260 <__floatsidf+0x68>
  80a224:	00800084 	movi	r2,2
  80a228:	d8800015 	stw	r2,0(sp)
  80a22c:	d809883a 	mov	r4,sp
  80a230:	08011b40 	call	8011b4 <__pack_d>
  80a234:	1009883a 	mov	r4,r2
  80a238:	180b883a 	mov	r5,r3
  80a23c:	2005883a 	mov	r2,r4
  80a240:	2807883a 	mov	r3,r5
  80a244:	dfc00917 	ldw	ra,36(sp)
  80a248:	dcc00817 	ldw	r19,32(sp)
  80a24c:	dc800717 	ldw	r18,28(sp)
  80a250:	dc400617 	ldw	r17,24(sp)
  80a254:	dc000517 	ldw	r16,20(sp)
  80a258:	dec00a04 	addi	sp,sp,40
  80a25c:	f800283a 	ret
  80a260:	00800f04 	movi	r2,60
  80a264:	1807003a 	cmpeq	r3,r3,zero
  80a268:	d8800215 	stw	r2,8(sp)
  80a26c:	18001126 	beq	r3,zero,80a2b4 <__floatsidf+0xbc>
  80a270:	0027883a 	mov	r19,zero
  80a274:	2025883a 	mov	r18,r4
  80a278:	d9000315 	stw	r4,12(sp)
  80a27c:	dcc00415 	stw	r19,16(sp)
  80a280:	0800f0c0 	call	800f0c <__clzsi2>
  80a284:	11000744 	addi	r4,r2,29
  80a288:	013fe80e 	bge	zero,r4,80a22c <__floatsidf+0x34>
  80a28c:	10bfff44 	addi	r2,r2,-3
  80a290:	10000c16 	blt	r2,zero,80a2c4 <__floatsidf+0xcc>
  80a294:	90a2983a 	sll	r17,r18,r2
  80a298:	0021883a 	mov	r16,zero
  80a29c:	d8800217 	ldw	r2,8(sp)
  80a2a0:	dc400415 	stw	r17,16(sp)
  80a2a4:	dc000315 	stw	r16,12(sp)
  80a2a8:	1105c83a 	sub	r2,r2,r4
  80a2ac:	d8800215 	stw	r2,8(sp)
  80a2b0:	003fde06 	br	80a22c <__floatsidf+0x34>
  80a2b4:	00a00034 	movhi	r2,32768
  80a2b8:	20800a26 	beq	r4,r2,80a2e4 <__floatsidf+0xec>
  80a2bc:	0109c83a 	sub	r4,zero,r4
  80a2c0:	003feb06 	br	80a270 <__floatsidf+0x78>
  80a2c4:	9006d07a 	srli	r3,r18,1
  80a2c8:	008007c4 	movi	r2,31
  80a2cc:	1105c83a 	sub	r2,r2,r4
  80a2d0:	1886d83a 	srl	r3,r3,r2
  80a2d4:	9922983a 	sll	r17,r19,r4
  80a2d8:	9120983a 	sll	r16,r18,r4
  80a2dc:	1c62b03a 	or	r17,r3,r17
  80a2e0:	003fee06 	br	80a29c <__floatsidf+0xa4>
  80a2e4:	0009883a 	mov	r4,zero
  80a2e8:	01707834 	movhi	r5,49632
  80a2ec:	003fd306 	br	80a23c <__floatsidf+0x44>

0080a2f0 <__fixdfsi>:
  80a2f0:	defff804 	addi	sp,sp,-32
  80a2f4:	2005883a 	mov	r2,r4
  80a2f8:	2807883a 	mov	r3,r5
  80a2fc:	d809883a 	mov	r4,sp
  80a300:	d9400204 	addi	r5,sp,8
  80a304:	d8c00115 	stw	r3,4(sp)
  80a308:	d8800015 	stw	r2,0(sp)
  80a30c:	dfc00715 	stw	ra,28(sp)
  80a310:	08014c80 	call	8014c8 <__unpack_d>
  80a314:	d8c00217 	ldw	r3,8(sp)
  80a318:	00800084 	movi	r2,2
  80a31c:	1880051e 	bne	r3,r2,80a334 <__fixdfsi+0x44>
  80a320:	0007883a 	mov	r3,zero
  80a324:	1805883a 	mov	r2,r3
  80a328:	dfc00717 	ldw	ra,28(sp)
  80a32c:	dec00804 	addi	sp,sp,32
  80a330:	f800283a 	ret
  80a334:	00800044 	movi	r2,1
  80a338:	10fff92e 	bgeu	r2,r3,80a320 <__fixdfsi+0x30>
  80a33c:	00800104 	movi	r2,4
  80a340:	18800426 	beq	r3,r2,80a354 <__fixdfsi+0x64>
  80a344:	d8c00417 	ldw	r3,16(sp)
  80a348:	183ff516 	blt	r3,zero,80a320 <__fixdfsi+0x30>
  80a34c:	00800784 	movi	r2,30
  80a350:	10c0080e 	bge	r2,r3,80a374 <__fixdfsi+0x84>
  80a354:	d8800317 	ldw	r2,12(sp)
  80a358:	1000121e 	bne	r2,zero,80a3a4 <__fixdfsi+0xb4>
  80a35c:	00e00034 	movhi	r3,32768
  80a360:	18ffffc4 	addi	r3,r3,-1
  80a364:	1805883a 	mov	r2,r3
  80a368:	dfc00717 	ldw	ra,28(sp)
  80a36c:	dec00804 	addi	sp,sp,32
  80a370:	f800283a 	ret
  80a374:	00800f04 	movi	r2,60
  80a378:	10d1c83a 	sub	r8,r2,r3
  80a37c:	40bff804 	addi	r2,r8,-32
  80a380:	d9800517 	ldw	r6,20(sp)
  80a384:	d9c00617 	ldw	r7,24(sp)
  80a388:	10000816 	blt	r2,zero,80a3ac <__fixdfsi+0xbc>
  80a38c:	3888d83a 	srl	r4,r7,r2
  80a390:	d8800317 	ldw	r2,12(sp)
  80a394:	2007883a 	mov	r3,r4
  80a398:	103fe226 	beq	r2,zero,80a324 <__fixdfsi+0x34>
  80a39c:	0107c83a 	sub	r3,zero,r4
  80a3a0:	003fe006 	br	80a324 <__fixdfsi+0x34>
  80a3a4:	00e00034 	movhi	r3,32768
  80a3a8:	003fde06 	br	80a324 <__fixdfsi+0x34>
  80a3ac:	39c7883a 	add	r3,r7,r7
  80a3b0:	008007c4 	movi	r2,31
  80a3b4:	1205c83a 	sub	r2,r2,r8
  80a3b8:	1886983a 	sll	r3,r3,r2
  80a3bc:	3208d83a 	srl	r4,r6,r8
  80a3c0:	1908b03a 	or	r4,r3,r4
  80a3c4:	003ff206 	br	80a390 <__fixdfsi+0xa0>

0080a3c8 <__floatunsidf>:
  80a3c8:	defff204 	addi	sp,sp,-56
  80a3cc:	dfc00d15 	stw	ra,52(sp)
  80a3d0:	ddc00c15 	stw	r23,48(sp)
  80a3d4:	dd800b15 	stw	r22,44(sp)
  80a3d8:	dd400a15 	stw	r21,40(sp)
  80a3dc:	dd000915 	stw	r20,36(sp)
  80a3e0:	dcc00815 	stw	r19,32(sp)
  80a3e4:	dc800715 	stw	r18,28(sp)
  80a3e8:	dc400615 	stw	r17,24(sp)
  80a3ec:	dc000515 	stw	r16,20(sp)
  80a3f0:	d8000115 	stw	zero,4(sp)
  80a3f4:	20000f1e 	bne	r4,zero,80a434 <__floatunsidf+0x6c>
  80a3f8:	00800084 	movi	r2,2
  80a3fc:	d8800015 	stw	r2,0(sp)
  80a400:	d809883a 	mov	r4,sp
  80a404:	08011b40 	call	8011b4 <__pack_d>
  80a408:	dfc00d17 	ldw	ra,52(sp)
  80a40c:	ddc00c17 	ldw	r23,48(sp)
  80a410:	dd800b17 	ldw	r22,44(sp)
  80a414:	dd400a17 	ldw	r21,40(sp)
  80a418:	dd000917 	ldw	r20,36(sp)
  80a41c:	dcc00817 	ldw	r19,32(sp)
  80a420:	dc800717 	ldw	r18,28(sp)
  80a424:	dc400617 	ldw	r17,24(sp)
  80a428:	dc000517 	ldw	r16,20(sp)
  80a42c:	dec00e04 	addi	sp,sp,56
  80a430:	f800283a 	ret
  80a434:	008000c4 	movi	r2,3
  80a438:	00c00f04 	movi	r3,60
  80a43c:	002f883a 	mov	r23,zero
  80a440:	202d883a 	mov	r22,r4
  80a444:	d8800015 	stw	r2,0(sp)
  80a448:	d8c00215 	stw	r3,8(sp)
  80a44c:	d9000315 	stw	r4,12(sp)
  80a450:	ddc00415 	stw	r23,16(sp)
  80a454:	0800f0c0 	call	800f0c <__clzsi2>
  80a458:	12400744 	addi	r9,r2,29
  80a45c:	48000b16 	blt	r9,zero,80a48c <__floatunsidf+0xc4>
  80a460:	483fe726 	beq	r9,zero,80a400 <__floatunsidf+0x38>
  80a464:	10bfff44 	addi	r2,r2,-3
  80a468:	10002e16 	blt	r2,zero,80a524 <__floatunsidf+0x15c>
  80a46c:	b0a2983a 	sll	r17,r22,r2
  80a470:	0021883a 	mov	r16,zero
  80a474:	d8800217 	ldw	r2,8(sp)
  80a478:	dc400415 	stw	r17,16(sp)
  80a47c:	dc000315 	stw	r16,12(sp)
  80a480:	1245c83a 	sub	r2,r2,r9
  80a484:	d8800215 	stw	r2,8(sp)
  80a488:	003fdd06 	br	80a400 <__floatunsidf+0x38>
  80a48c:	0255c83a 	sub	r10,zero,r9
  80a490:	51bff804 	addi	r6,r10,-32
  80a494:	30001b16 	blt	r6,zero,80a504 <__floatunsidf+0x13c>
  80a498:	b9a8d83a 	srl	r20,r23,r6
  80a49c:	002b883a 	mov	r21,zero
  80a4a0:	000f883a 	mov	r7,zero
  80a4a4:	01000044 	movi	r4,1
  80a4a8:	0011883a 	mov	r8,zero
  80a4ac:	30002516 	blt	r6,zero,80a544 <__floatunsidf+0x17c>
  80a4b0:	21a6983a 	sll	r19,r4,r6
  80a4b4:	0025883a 	mov	r18,zero
  80a4b8:	00bfffc4 	movi	r2,-1
  80a4bc:	9089883a 	add	r4,r18,r2
  80a4c0:	988b883a 	add	r5,r19,r2
  80a4c4:	248d803a 	cmpltu	r6,r4,r18
  80a4c8:	314b883a 	add	r5,r6,r5
  80a4cc:	b104703a 	and	r2,r22,r4
  80a4d0:	b946703a 	and	r3,r23,r5
  80a4d4:	10c4b03a 	or	r2,r2,r3
  80a4d8:	10000226 	beq	r2,zero,80a4e4 <__floatunsidf+0x11c>
  80a4dc:	01c00044 	movi	r7,1
  80a4e0:	0011883a 	mov	r8,zero
  80a4e4:	d9000217 	ldw	r4,8(sp)
  80a4e8:	a1c4b03a 	or	r2,r20,r7
  80a4ec:	aa06b03a 	or	r3,r21,r8
  80a4f0:	2249c83a 	sub	r4,r4,r9
  80a4f4:	d8c00415 	stw	r3,16(sp)
  80a4f8:	d9000215 	stw	r4,8(sp)
  80a4fc:	d8800315 	stw	r2,12(sp)
  80a500:	003fbf06 	br	80a400 <__floatunsidf+0x38>
  80a504:	bdc7883a 	add	r3,r23,r23
  80a508:	008007c4 	movi	r2,31
  80a50c:	1285c83a 	sub	r2,r2,r10
  80a510:	1886983a 	sll	r3,r3,r2
  80a514:	b2a8d83a 	srl	r20,r22,r10
  80a518:	baaad83a 	srl	r21,r23,r10
  80a51c:	1d28b03a 	or	r20,r3,r20
  80a520:	003fdf06 	br	80a4a0 <__floatunsidf+0xd8>
  80a524:	b006d07a 	srli	r3,r22,1
  80a528:	008007c4 	movi	r2,31
  80a52c:	1245c83a 	sub	r2,r2,r9
  80a530:	1886d83a 	srl	r3,r3,r2
  80a534:	ba62983a 	sll	r17,r23,r9
  80a538:	b260983a 	sll	r16,r22,r9
  80a53c:	1c62b03a 	or	r17,r3,r17
  80a540:	003fcc06 	br	80a474 <__floatunsidf+0xac>
  80a544:	2006d07a 	srli	r3,r4,1
  80a548:	008007c4 	movi	r2,31
  80a54c:	1285c83a 	sub	r2,r2,r10
  80a550:	18a6d83a 	srl	r19,r3,r2
  80a554:	22a4983a 	sll	r18,r4,r10
  80a558:	003fd706 	br	80a4b8 <__floatunsidf+0xf0>

0080a55c <__fpcmp_parts_d>:
  80a55c:	21800017 	ldw	r6,0(r4)
  80a560:	00c00044 	movi	r3,1
  80a564:	19800a2e 	bgeu	r3,r6,80a590 <__fpcmp_parts_d+0x34>
  80a568:	28800017 	ldw	r2,0(r5)
  80a56c:	1880082e 	bgeu	r3,r2,80a590 <__fpcmp_parts_d+0x34>
  80a570:	00c00104 	movi	r3,4
  80a574:	30c02626 	beq	r6,r3,80a610 <__fpcmp_parts_d+0xb4>
  80a578:	10c02226 	beq	r2,r3,80a604 <__fpcmp_parts_d+0xa8>
  80a57c:	00c00084 	movi	r3,2
  80a580:	30c00526 	beq	r6,r3,80a598 <__fpcmp_parts_d+0x3c>
  80a584:	10c0071e 	bne	r2,r3,80a5a4 <__fpcmp_parts_d+0x48>
  80a588:	20800117 	ldw	r2,4(r4)
  80a58c:	1000091e 	bne	r2,zero,80a5b4 <__fpcmp_parts_d+0x58>
  80a590:	00800044 	movi	r2,1
  80a594:	f800283a 	ret
  80a598:	10c01a1e 	bne	r2,r3,80a604 <__fpcmp_parts_d+0xa8>
  80a59c:	0005883a 	mov	r2,zero
  80a5a0:	f800283a 	ret
  80a5a4:	22000117 	ldw	r8,4(r4)
  80a5a8:	28800117 	ldw	r2,4(r5)
  80a5ac:	40800326 	beq	r8,r2,80a5bc <__fpcmp_parts_d+0x60>
  80a5b0:	403ff726 	beq	r8,zero,80a590 <__fpcmp_parts_d+0x34>
  80a5b4:	00bfffc4 	movi	r2,-1
  80a5b8:	f800283a 	ret
  80a5bc:	20c00217 	ldw	r3,8(r4)
  80a5c0:	28800217 	ldw	r2,8(r5)
  80a5c4:	10fffa16 	blt	r2,r3,80a5b0 <__fpcmp_parts_d+0x54>
  80a5c8:	18800916 	blt	r3,r2,80a5f0 <__fpcmp_parts_d+0x94>
  80a5cc:	21c00417 	ldw	r7,16(r4)
  80a5d0:	28c00417 	ldw	r3,16(r5)
  80a5d4:	21800317 	ldw	r6,12(r4)
  80a5d8:	28800317 	ldw	r2,12(r5)
  80a5dc:	19fff436 	bltu	r3,r7,80a5b0 <__fpcmp_parts_d+0x54>
  80a5e0:	38c00526 	beq	r7,r3,80a5f8 <__fpcmp_parts_d+0x9c>
  80a5e4:	38c00236 	bltu	r7,r3,80a5f0 <__fpcmp_parts_d+0x94>
  80a5e8:	19ffec1e 	bne	r3,r7,80a59c <__fpcmp_parts_d+0x40>
  80a5ec:	30bfeb2e 	bgeu	r6,r2,80a59c <__fpcmp_parts_d+0x40>
  80a5f0:	403fe71e 	bne	r8,zero,80a590 <__fpcmp_parts_d+0x34>
  80a5f4:	003fef06 	br	80a5b4 <__fpcmp_parts_d+0x58>
  80a5f8:	11bffa2e 	bgeu	r2,r6,80a5e4 <__fpcmp_parts_d+0x88>
  80a5fc:	403fe426 	beq	r8,zero,80a590 <__fpcmp_parts_d+0x34>
  80a600:	003fec06 	br	80a5b4 <__fpcmp_parts_d+0x58>
  80a604:	28800117 	ldw	r2,4(r5)
  80a608:	103fe11e 	bne	r2,zero,80a590 <__fpcmp_parts_d+0x34>
  80a60c:	003fe906 	br	80a5b4 <__fpcmp_parts_d+0x58>
  80a610:	11bfdd1e 	bne	r2,r6,80a588 <__fpcmp_parts_d+0x2c>
  80a614:	28c00117 	ldw	r3,4(r5)
  80a618:	20800117 	ldw	r2,4(r4)
  80a61c:	1885c83a 	sub	r2,r3,r2
  80a620:	f800283a 	ret

0080a624 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80a624:	defff804 	addi	sp,sp,-32
  80a628:	dfc00715 	stw	ra,28(sp)
  80a62c:	df000615 	stw	fp,24(sp)
  80a630:	df000604 	addi	fp,sp,24
  80a634:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80a638:	e0bffc17 	ldw	r2,-16(fp)
  80a63c:	1004803a 	cmplt	r2,r2,zero
  80a640:	1000091e 	bne	r2,zero,80a668 <close+0x44>
  80a644:	e13ffc17 	ldw	r4,-16(fp)
  80a648:	01400304 	movi	r5,12
  80a64c:	08016000 	call	801600 <__mulsi3>
  80a650:	1007883a 	mov	r3,r2
  80a654:	00802074 	movhi	r2,129
  80a658:	10b78004 	addi	r2,r2,-8704
  80a65c:	1887883a 	add	r3,r3,r2
  80a660:	e0ffff15 	stw	r3,-4(fp)
  80a664:	00000106 	br	80a66c <close+0x48>
  80a668:	e03fff15 	stw	zero,-4(fp)
  80a66c:	e0bfff17 	ldw	r2,-4(fp)
  80a670:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80a674:	e0bffb17 	ldw	r2,-20(fp)
  80a678:	1005003a 	cmpeq	r2,r2,zero
  80a67c:	10001d1e 	bne	r2,zero,80a6f4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80a680:	e0bffb17 	ldw	r2,-20(fp)
  80a684:	10800017 	ldw	r2,0(r2)
  80a688:	10800417 	ldw	r2,16(r2)
  80a68c:	1005003a 	cmpeq	r2,r2,zero
  80a690:	1000071e 	bne	r2,zero,80a6b0 <close+0x8c>
  80a694:	e0bffb17 	ldw	r2,-20(fp)
  80a698:	10800017 	ldw	r2,0(r2)
  80a69c:	10800417 	ldw	r2,16(r2)
  80a6a0:	e13ffb17 	ldw	r4,-20(fp)
  80a6a4:	103ee83a 	callr	r2
  80a6a8:	e0bffe15 	stw	r2,-8(fp)
  80a6ac:	00000106 	br	80a6b4 <close+0x90>
  80a6b0:	e03ffe15 	stw	zero,-8(fp)
  80a6b4:	e0bffe17 	ldw	r2,-8(fp)
  80a6b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80a6bc:	e13ffc17 	ldw	r4,-16(fp)
  80a6c0:	080ae7c0 	call	80ae7c <alt_release_fd>
    if (rval < 0)
  80a6c4:	e0bffa17 	ldw	r2,-24(fp)
  80a6c8:	1004403a 	cmpge	r2,r2,zero
  80a6cc:	1000071e 	bne	r2,zero,80a6ec <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80a6d0:	080a7240 	call	80a724 <alt_get_errno>
  80a6d4:	e0fffa17 	ldw	r3,-24(fp)
  80a6d8:	00c7c83a 	sub	r3,zero,r3
  80a6dc:	10c00015 	stw	r3,0(r2)
      return -1;
  80a6e0:	00bfffc4 	movi	r2,-1
  80a6e4:	e0bffd15 	stw	r2,-12(fp)
  80a6e8:	00000806 	br	80a70c <close+0xe8>
    }
    return 0;
  80a6ec:	e03ffd15 	stw	zero,-12(fp)
  80a6f0:	00000606 	br	80a70c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a6f4:	080a7240 	call	80a724 <alt_get_errno>
  80a6f8:	1007883a 	mov	r3,r2
  80a6fc:	00801444 	movi	r2,81
  80a700:	18800015 	stw	r2,0(r3)
    return -1;
  80a704:	00bfffc4 	movi	r2,-1
  80a708:	e0bffd15 	stw	r2,-12(fp)
  80a70c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80a710:	e037883a 	mov	sp,fp
  80a714:	dfc00117 	ldw	ra,4(sp)
  80a718:	df000017 	ldw	fp,0(sp)
  80a71c:	dec00204 	addi	sp,sp,8
  80a720:	f800283a 	ret

0080a724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a724:	defffd04 	addi	sp,sp,-12
  80a728:	dfc00215 	stw	ra,8(sp)
  80a72c:	df000115 	stw	fp,4(sp)
  80a730:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a734:	00802074 	movhi	r2,129
  80a738:	10bc0304 	addi	r2,r2,-4084
  80a73c:	10800017 	ldw	r2,0(r2)
  80a740:	1005003a 	cmpeq	r2,r2,zero
  80a744:	1000061e 	bne	r2,zero,80a760 <alt_get_errno+0x3c>
  80a748:	00802074 	movhi	r2,129
  80a74c:	10bc0304 	addi	r2,r2,-4084
  80a750:	10800017 	ldw	r2,0(r2)
  80a754:	103ee83a 	callr	r2
  80a758:	e0bfff15 	stw	r2,-4(fp)
  80a75c:	00000306 	br	80a76c <alt_get_errno+0x48>
  80a760:	00802074 	movhi	r2,129
  80a764:	1082a904 	addi	r2,r2,2724
  80a768:	e0bfff15 	stw	r2,-4(fp)
  80a76c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a770:	e037883a 	mov	sp,fp
  80a774:	dfc00117 	ldw	ra,4(sp)
  80a778:	df000017 	ldw	fp,0(sp)
  80a77c:	dec00204 	addi	sp,sp,8
  80a780:	f800283a 	ret

0080a784 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80a784:	defffc04 	addi	sp,sp,-16
  80a788:	df000315 	stw	fp,12(sp)
  80a78c:	df000304 	addi	fp,sp,12
  80a790:	e13ffd15 	stw	r4,-12(fp)
  80a794:	e17ffe15 	stw	r5,-8(fp)
  80a798:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80a79c:	e0bfff17 	ldw	r2,-4(fp)
}
  80a7a0:	e037883a 	mov	sp,fp
  80a7a4:	df000017 	ldw	fp,0(sp)
  80a7a8:	dec00104 	addi	sp,sp,4
  80a7ac:	f800283a 	ret

0080a7b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80a7b0:	defff904 	addi	sp,sp,-28
  80a7b4:	dfc00615 	stw	ra,24(sp)
  80a7b8:	df000515 	stw	fp,20(sp)
  80a7bc:	df000504 	addi	fp,sp,20
  80a7c0:	e13ffc15 	stw	r4,-16(fp)
  80a7c4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a7c8:	e0bffc17 	ldw	r2,-16(fp)
  80a7cc:	1004803a 	cmplt	r2,r2,zero
  80a7d0:	1000091e 	bne	r2,zero,80a7f8 <fstat+0x48>
  80a7d4:	e13ffc17 	ldw	r4,-16(fp)
  80a7d8:	01400304 	movi	r5,12
  80a7dc:	08016000 	call	801600 <__mulsi3>
  80a7e0:	1007883a 	mov	r3,r2
  80a7e4:	00802074 	movhi	r2,129
  80a7e8:	10b78004 	addi	r2,r2,-8704
  80a7ec:	1887883a 	add	r3,r3,r2
  80a7f0:	e0ffff15 	stw	r3,-4(fp)
  80a7f4:	00000106 	br	80a7fc <fstat+0x4c>
  80a7f8:	e03fff15 	stw	zero,-4(fp)
  80a7fc:	e0bfff17 	ldw	r2,-4(fp)
  80a800:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80a804:	e0bffb17 	ldw	r2,-20(fp)
  80a808:	1005003a 	cmpeq	r2,r2,zero
  80a80c:	1000121e 	bne	r2,zero,80a858 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80a810:	e0bffb17 	ldw	r2,-20(fp)
  80a814:	10800017 	ldw	r2,0(r2)
  80a818:	10800817 	ldw	r2,32(r2)
  80a81c:	1005003a 	cmpeq	r2,r2,zero
  80a820:	1000081e 	bne	r2,zero,80a844 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80a824:	e0bffb17 	ldw	r2,-20(fp)
  80a828:	10800017 	ldw	r2,0(r2)
  80a82c:	10800817 	ldw	r2,32(r2)
  80a830:	e13ffb17 	ldw	r4,-20(fp)
  80a834:	e17ffd17 	ldw	r5,-12(fp)
  80a838:	103ee83a 	callr	r2
  80a83c:	e0bffe15 	stw	r2,-8(fp)
  80a840:	00000b06 	br	80a870 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80a844:	e0fffd17 	ldw	r3,-12(fp)
  80a848:	00880004 	movi	r2,8192
  80a84c:	18800115 	stw	r2,4(r3)
      return 0;
  80a850:	e03ffe15 	stw	zero,-8(fp)
  80a854:	00000606 	br	80a870 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a858:	080a8880 	call	80a888 <alt_get_errno>
  80a85c:	1007883a 	mov	r3,r2
  80a860:	00801444 	movi	r2,81
  80a864:	18800015 	stw	r2,0(r3)
    return -1;
  80a868:	00bfffc4 	movi	r2,-1
  80a86c:	e0bffe15 	stw	r2,-8(fp)
  80a870:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a874:	e037883a 	mov	sp,fp
  80a878:	dfc00117 	ldw	ra,4(sp)
  80a87c:	df000017 	ldw	fp,0(sp)
  80a880:	dec00204 	addi	sp,sp,8
  80a884:	f800283a 	ret

0080a888 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a888:	defffd04 	addi	sp,sp,-12
  80a88c:	dfc00215 	stw	ra,8(sp)
  80a890:	df000115 	stw	fp,4(sp)
  80a894:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a898:	00802074 	movhi	r2,129
  80a89c:	10bc0304 	addi	r2,r2,-4084
  80a8a0:	10800017 	ldw	r2,0(r2)
  80a8a4:	1005003a 	cmpeq	r2,r2,zero
  80a8a8:	1000061e 	bne	r2,zero,80a8c4 <alt_get_errno+0x3c>
  80a8ac:	00802074 	movhi	r2,129
  80a8b0:	10bc0304 	addi	r2,r2,-4084
  80a8b4:	10800017 	ldw	r2,0(r2)
  80a8b8:	103ee83a 	callr	r2
  80a8bc:	e0bfff15 	stw	r2,-4(fp)
  80a8c0:	00000306 	br	80a8d0 <alt_get_errno+0x48>
  80a8c4:	00802074 	movhi	r2,129
  80a8c8:	1082a904 	addi	r2,r2,2724
  80a8cc:	e0bfff15 	stw	r2,-4(fp)
  80a8d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80a8d4:	e037883a 	mov	sp,fp
  80a8d8:	dfc00117 	ldw	ra,4(sp)
  80a8dc:	df000017 	ldw	fp,0(sp)
  80a8e0:	dec00204 	addi	sp,sp,8
  80a8e4:	f800283a 	ret

0080a8e8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80a8e8:	deffeb04 	addi	sp,sp,-84
  80a8ec:	dfc01415 	stw	ra,80(sp)
  80a8f0:	df001315 	stw	fp,76(sp)
  80a8f4:	df001304 	addi	fp,sp,76
  80a8f8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a8fc:	e0bffd17 	ldw	r2,-12(fp)
  80a900:	1004803a 	cmplt	r2,r2,zero
  80a904:	1000091e 	bne	r2,zero,80a92c <isatty+0x44>
  80a908:	e13ffd17 	ldw	r4,-12(fp)
  80a90c:	01400304 	movi	r5,12
  80a910:	08016000 	call	801600 <__mulsi3>
  80a914:	1007883a 	mov	r3,r2
  80a918:	00802074 	movhi	r2,129
  80a91c:	10b78004 	addi	r2,r2,-8704
  80a920:	1887883a 	add	r3,r3,r2
  80a924:	e0ffff15 	stw	r3,-4(fp)
  80a928:	00000106 	br	80a930 <isatty+0x48>
  80a92c:	e03fff15 	stw	zero,-4(fp)
  80a930:	e0bfff17 	ldw	r2,-4(fp)
  80a934:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80a938:	e0bfed17 	ldw	r2,-76(fp)
  80a93c:	1005003a 	cmpeq	r2,r2,zero
  80a940:	10000f1e 	bne	r2,zero,80a980 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80a944:	e0bfed17 	ldw	r2,-76(fp)
  80a948:	10800017 	ldw	r2,0(r2)
  80a94c:	10800817 	ldw	r2,32(r2)
  80a950:	1004c03a 	cmpne	r2,r2,zero
  80a954:	1000031e 	bne	r2,zero,80a964 <isatty+0x7c>
    {
      return 1;
  80a958:	00800044 	movi	r2,1
  80a95c:	e0bffe15 	stw	r2,-8(fp)
  80a960:	00000c06 	br	80a994 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80a964:	e17fee04 	addi	r5,fp,-72
  80a968:	e13ffd17 	ldw	r4,-12(fp)
  80a96c:	080a7b00 	call	80a7b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80a970:	e0bfef17 	ldw	r2,-68(fp)
  80a974:	10880020 	cmpeqi	r2,r2,8192
  80a978:	e0bffe15 	stw	r2,-8(fp)
  80a97c:	00000506 	br	80a994 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80a980:	080a9ac0 	call	80a9ac <alt_get_errno>
  80a984:	1007883a 	mov	r3,r2
  80a988:	00801444 	movi	r2,81
  80a98c:	18800015 	stw	r2,0(r3)
    return 0;
  80a990:	e03ffe15 	stw	zero,-8(fp)
  80a994:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80a998:	e037883a 	mov	sp,fp
  80a99c:	dfc00117 	ldw	ra,4(sp)
  80a9a0:	df000017 	ldw	fp,0(sp)
  80a9a4:	dec00204 	addi	sp,sp,8
  80a9a8:	f800283a 	ret

0080a9ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a9ac:	defffd04 	addi	sp,sp,-12
  80a9b0:	dfc00215 	stw	ra,8(sp)
  80a9b4:	df000115 	stw	fp,4(sp)
  80a9b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a9bc:	00802074 	movhi	r2,129
  80a9c0:	10bc0304 	addi	r2,r2,-4084
  80a9c4:	10800017 	ldw	r2,0(r2)
  80a9c8:	1005003a 	cmpeq	r2,r2,zero
  80a9cc:	1000061e 	bne	r2,zero,80a9e8 <alt_get_errno+0x3c>
  80a9d0:	00802074 	movhi	r2,129
  80a9d4:	10bc0304 	addi	r2,r2,-4084
  80a9d8:	10800017 	ldw	r2,0(r2)
  80a9dc:	103ee83a 	callr	r2
  80a9e0:	e0bfff15 	stw	r2,-4(fp)
  80a9e4:	00000306 	br	80a9f4 <alt_get_errno+0x48>
  80a9e8:	00802074 	movhi	r2,129
  80a9ec:	1082a904 	addi	r2,r2,2724
  80a9f0:	e0bfff15 	stw	r2,-4(fp)
  80a9f4:	e0bfff17 	ldw	r2,-4(fp)
}
  80a9f8:	e037883a 	mov	sp,fp
  80a9fc:	dfc00117 	ldw	ra,4(sp)
  80aa00:	df000017 	ldw	fp,0(sp)
  80aa04:	dec00204 	addi	sp,sp,8
  80aa08:	f800283a 	ret

0080aa0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80aa0c:	defffe04 	addi	sp,sp,-8
  80aa10:	dfc00115 	stw	ra,4(sp)
  80aa14:	df000015 	stw	fp,0(sp)
  80aa18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80aa1c:	01002074 	movhi	r4,129
  80aa20:	213c0804 	addi	r4,r4,-4064
  80aa24:	01402074 	movhi	r5,129
  80aa28:	29757104 	addi	r5,r5,-10812
  80aa2c:	01802074 	movhi	r6,129
  80aa30:	31bc0804 	addi	r6,r6,-4064
  80aa34:	080aa8c0 	call	80aa8c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80aa38:	01002034 	movhi	r4,128
  80aa3c:	21000804 	addi	r4,r4,32
  80aa40:	01402034 	movhi	r5,128
  80aa44:	29400804 	addi	r5,r5,32
  80aa48:	01802034 	movhi	r6,128
  80aa4c:	31806d04 	addi	r6,r6,436
  80aa50:	080aa8c0 	call	80aa8c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80aa54:	01002074 	movhi	r4,129
  80aa58:	21348904 	addi	r4,r4,-11740
  80aa5c:	01402074 	movhi	r5,129
  80aa60:	29748904 	addi	r5,r5,-11740
  80aa64:	01802074 	movhi	r6,129
  80aa68:	31b57104 	addi	r6,r6,-10812
  80aa6c:	080aa8c0 	call	80aa8c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80aa70:	080c0bc0 	call	80c0bc <alt_dcache_flush_all>
  alt_icache_flush_all();
  80aa74:	080c2b40 	call	80c2b4 <alt_icache_flush_all>
}
  80aa78:	e037883a 	mov	sp,fp
  80aa7c:	dfc00117 	ldw	ra,4(sp)
  80aa80:	df000017 	ldw	fp,0(sp)
  80aa84:	dec00204 	addi	sp,sp,8
  80aa88:	f800283a 	ret

0080aa8c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80aa8c:	defffc04 	addi	sp,sp,-16
  80aa90:	df000315 	stw	fp,12(sp)
  80aa94:	df000304 	addi	fp,sp,12
  80aa98:	e13ffd15 	stw	r4,-12(fp)
  80aa9c:	e17ffe15 	stw	r5,-8(fp)
  80aaa0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80aaa4:	e0fffe17 	ldw	r3,-8(fp)
  80aaa8:	e0bffd17 	ldw	r2,-12(fp)
  80aaac:	18800e26 	beq	r3,r2,80aae8 <alt_load_section+0x5c>
  {
    while( to != end )
  80aab0:	00000a06 	br	80aadc <alt_load_section+0x50>
    {
      *to++ = *from++;
  80aab4:	e0bffd17 	ldw	r2,-12(fp)
  80aab8:	10c00017 	ldw	r3,0(r2)
  80aabc:	e0bffe17 	ldw	r2,-8(fp)
  80aac0:	10c00015 	stw	r3,0(r2)
  80aac4:	e0bffe17 	ldw	r2,-8(fp)
  80aac8:	10800104 	addi	r2,r2,4
  80aacc:	e0bffe15 	stw	r2,-8(fp)
  80aad0:	e0bffd17 	ldw	r2,-12(fp)
  80aad4:	10800104 	addi	r2,r2,4
  80aad8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80aadc:	e0fffe17 	ldw	r3,-8(fp)
  80aae0:	e0bfff17 	ldw	r2,-4(fp)
  80aae4:	18bff31e 	bne	r3,r2,80aab4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80aae8:	e037883a 	mov	sp,fp
  80aaec:	df000017 	ldw	fp,0(sp)
  80aaf0:	dec00104 	addi	sp,sp,4
  80aaf4:	f800283a 	ret

0080aaf8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80aaf8:	defff804 	addi	sp,sp,-32
  80aafc:	dfc00715 	stw	ra,28(sp)
  80ab00:	df000615 	stw	fp,24(sp)
  80ab04:	df000604 	addi	fp,sp,24
  80ab08:	e13ffc15 	stw	r4,-16(fp)
  80ab0c:	e17ffd15 	stw	r5,-12(fp)
  80ab10:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80ab14:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ab18:	e0bffc17 	ldw	r2,-16(fp)
  80ab1c:	1004803a 	cmplt	r2,r2,zero
  80ab20:	1000091e 	bne	r2,zero,80ab48 <lseek+0x50>
  80ab24:	e13ffc17 	ldw	r4,-16(fp)
  80ab28:	01400304 	movi	r5,12
  80ab2c:	08016000 	call	801600 <__mulsi3>
  80ab30:	1007883a 	mov	r3,r2
  80ab34:	00802074 	movhi	r2,129
  80ab38:	10b78004 	addi	r2,r2,-8704
  80ab3c:	1887883a 	add	r3,r3,r2
  80ab40:	e0ffff15 	stw	r3,-4(fp)
  80ab44:	00000106 	br	80ab4c <lseek+0x54>
  80ab48:	e03fff15 	stw	zero,-4(fp)
  80ab4c:	e0bfff17 	ldw	r2,-4(fp)
  80ab50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80ab54:	e0bffb17 	ldw	r2,-20(fp)
  80ab58:	1005003a 	cmpeq	r2,r2,zero
  80ab5c:	1000111e 	bne	r2,zero,80aba4 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ab60:	e0bffb17 	ldw	r2,-20(fp)
  80ab64:	10800017 	ldw	r2,0(r2)
  80ab68:	10800717 	ldw	r2,28(r2)
  80ab6c:	1005003a 	cmpeq	r2,r2,zero
  80ab70:	1000091e 	bne	r2,zero,80ab98 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ab74:	e0bffb17 	ldw	r2,-20(fp)
  80ab78:	10800017 	ldw	r2,0(r2)
  80ab7c:	10800717 	ldw	r2,28(r2)
  80ab80:	e13ffb17 	ldw	r4,-20(fp)
  80ab84:	e17ffd17 	ldw	r5,-12(fp)
  80ab88:	e1bffe17 	ldw	r6,-8(fp)
  80ab8c:	103ee83a 	callr	r2
  80ab90:	e0bffa15 	stw	r2,-24(fp)
  80ab94:	00000506 	br	80abac <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ab98:	00bfde84 	movi	r2,-134
  80ab9c:	e0bffa15 	stw	r2,-24(fp)
  80aba0:	00000206 	br	80abac <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80aba4:	00bfebc4 	movi	r2,-81
  80aba8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80abac:	e0bffa17 	ldw	r2,-24(fp)
  80abb0:	1004403a 	cmpge	r2,r2,zero
  80abb4:	1000071e 	bne	r2,zero,80abd4 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80abb8:	080abec0 	call	80abec <alt_get_errno>
  80abbc:	1007883a 	mov	r3,r2
  80abc0:	e0bffa17 	ldw	r2,-24(fp)
  80abc4:	0085c83a 	sub	r2,zero,r2
  80abc8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80abcc:	00bfffc4 	movi	r2,-1
  80abd0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80abd4:	e0bffa17 	ldw	r2,-24(fp)
}
  80abd8:	e037883a 	mov	sp,fp
  80abdc:	dfc00117 	ldw	ra,4(sp)
  80abe0:	df000017 	ldw	fp,0(sp)
  80abe4:	dec00204 	addi	sp,sp,8
  80abe8:	f800283a 	ret

0080abec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80abec:	defffd04 	addi	sp,sp,-12
  80abf0:	dfc00215 	stw	ra,8(sp)
  80abf4:	df000115 	stw	fp,4(sp)
  80abf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80abfc:	00802074 	movhi	r2,129
  80ac00:	10bc0304 	addi	r2,r2,-4084
  80ac04:	10800017 	ldw	r2,0(r2)
  80ac08:	1005003a 	cmpeq	r2,r2,zero
  80ac0c:	1000061e 	bne	r2,zero,80ac28 <alt_get_errno+0x3c>
  80ac10:	00802074 	movhi	r2,129
  80ac14:	10bc0304 	addi	r2,r2,-4084
  80ac18:	10800017 	ldw	r2,0(r2)
  80ac1c:	103ee83a 	callr	r2
  80ac20:	e0bfff15 	stw	r2,-4(fp)
  80ac24:	00000306 	br	80ac34 <alt_get_errno+0x48>
  80ac28:	00802074 	movhi	r2,129
  80ac2c:	1082a904 	addi	r2,r2,2724
  80ac30:	e0bfff15 	stw	r2,-4(fp)
  80ac34:	e0bfff17 	ldw	r2,-4(fp)
}
  80ac38:	e037883a 	mov	sp,fp
  80ac3c:	dfc00117 	ldw	ra,4(sp)
  80ac40:	df000017 	ldw	fp,0(sp)
  80ac44:	dec00204 	addi	sp,sp,8
  80ac48:	f800283a 	ret

0080ac4c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ac4c:	defffd04 	addi	sp,sp,-12
  80ac50:	dfc00215 	stw	ra,8(sp)
  80ac54:	df000115 	stw	fp,4(sp)
  80ac58:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ac5c:	0009883a 	mov	r4,zero
  80ac60:	080b1340 	call	80b134 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80ac64:	080b1680 	call	80b168 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80ac68:	01002074 	movhi	r4,129
  80ac6c:	21356704 	addi	r4,r4,-10852
  80ac70:	01402074 	movhi	r5,129
  80ac74:	29756704 	addi	r5,r5,-10852
  80ac78:	01802074 	movhi	r6,129
  80ac7c:	31b56704 	addi	r6,r6,-10852
  80ac80:	080c6740 	call	80c674 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ac84:	080c1ec0 	call	80c1ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ac88:	01002074 	movhi	r4,129
  80ac8c:	21309404 	addi	r4,r4,-15792
  80ac90:	080ce180 	call	80ce18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ac94:	d126b217 	ldw	r4,-25912(gp)
  80ac98:	d166b317 	ldw	r5,-25908(gp)
  80ac9c:	d1a6b417 	ldw	r6,-25904(gp)
  80aca0:	08002540 	call	800254 <main>
  80aca4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80aca8:	01000044 	movi	r4,1
  80acac:	080a6240 	call	80a624 <close>
  exit (result);
  80acb0:	e13fff17 	ldw	r4,-4(fp)
  80acb4:	080ce2c0 	call	80ce2c <exit>

0080acb8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80acb8:	defffe04 	addi	sp,sp,-8
  80acbc:	df000115 	stw	fp,4(sp)
  80acc0:	df000104 	addi	fp,sp,4
  80acc4:	e13fff15 	stw	r4,-4(fp)
}
  80acc8:	e037883a 	mov	sp,fp
  80accc:	df000017 	ldw	fp,0(sp)
  80acd0:	dec00104 	addi	sp,sp,4
  80acd4:	f800283a 	ret

0080acd8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80acd8:	defffe04 	addi	sp,sp,-8
  80acdc:	df000115 	stw	fp,4(sp)
  80ace0:	df000104 	addi	fp,sp,4
  80ace4:	e13fff15 	stw	r4,-4(fp)
}
  80ace8:	e037883a 	mov	sp,fp
  80acec:	df000017 	ldw	fp,0(sp)
  80acf0:	dec00104 	addi	sp,sp,4
  80acf4:	f800283a 	ret

0080acf8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80acf8:	defff704 	addi	sp,sp,-36
  80acfc:	dfc00815 	stw	ra,32(sp)
  80ad00:	df000715 	stw	fp,28(sp)
  80ad04:	df000704 	addi	fp,sp,28
  80ad08:	e13ffb15 	stw	r4,-20(fp)
  80ad0c:	e17ffc15 	stw	r5,-16(fp)
  80ad10:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ad14:	e0bffb17 	ldw	r2,-20(fp)
  80ad18:	1004803a 	cmplt	r2,r2,zero
  80ad1c:	1000091e 	bne	r2,zero,80ad44 <read+0x4c>
  80ad20:	e13ffb17 	ldw	r4,-20(fp)
  80ad24:	01400304 	movi	r5,12
  80ad28:	08016000 	call	801600 <__mulsi3>
  80ad2c:	1007883a 	mov	r3,r2
  80ad30:	00802074 	movhi	r2,129
  80ad34:	10b78004 	addi	r2,r2,-8704
  80ad38:	1887883a 	add	r3,r3,r2
  80ad3c:	e0ffff15 	stw	r3,-4(fp)
  80ad40:	00000106 	br	80ad48 <read+0x50>
  80ad44:	e03fff15 	stw	zero,-4(fp)
  80ad48:	e0bfff17 	ldw	r2,-4(fp)
  80ad4c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80ad50:	e0bffa17 	ldw	r2,-24(fp)
  80ad54:	1005003a 	cmpeq	r2,r2,zero
  80ad58:	1000241e 	bne	r2,zero,80adec <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80ad5c:	e0bffa17 	ldw	r2,-24(fp)
  80ad60:	10800217 	ldw	r2,8(r2)
  80ad64:	108000cc 	andi	r2,r2,3
  80ad68:	10800060 	cmpeqi	r2,r2,1
  80ad6c:	10001a1e 	bne	r2,zero,80add8 <read+0xe0>
  80ad70:	e0bffa17 	ldw	r2,-24(fp)
  80ad74:	10800017 	ldw	r2,0(r2)
  80ad78:	10800517 	ldw	r2,20(r2)
  80ad7c:	1005003a 	cmpeq	r2,r2,zero
  80ad80:	1000151e 	bne	r2,zero,80add8 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80ad84:	e0bffa17 	ldw	r2,-24(fp)
  80ad88:	10800017 	ldw	r2,0(r2)
  80ad8c:	10800517 	ldw	r2,20(r2)
  80ad90:	e17ffc17 	ldw	r5,-16(fp)
  80ad94:	e1bffd17 	ldw	r6,-12(fp)
  80ad98:	e13ffa17 	ldw	r4,-24(fp)
  80ad9c:	103ee83a 	callr	r2
  80ada0:	e0bff915 	stw	r2,-28(fp)
  80ada4:	e0bff917 	ldw	r2,-28(fp)
  80ada8:	1004403a 	cmpge	r2,r2,zero
  80adac:	1000071e 	bne	r2,zero,80adcc <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80adb0:	080ae1c0 	call	80ae1c <alt_get_errno>
  80adb4:	e0fff917 	ldw	r3,-28(fp)
  80adb8:	00c7c83a 	sub	r3,zero,r3
  80adbc:	10c00015 	stw	r3,0(r2)
          return -1;
  80adc0:	00bfffc4 	movi	r2,-1
  80adc4:	e0bffe15 	stw	r2,-8(fp)
  80adc8:	00000e06 	br	80ae04 <read+0x10c>
        }
        return rval;
  80adcc:	e0bff917 	ldw	r2,-28(fp)
  80add0:	e0bffe15 	stw	r2,-8(fp)
  80add4:	00000b06 	br	80ae04 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80add8:	080ae1c0 	call	80ae1c <alt_get_errno>
  80addc:	1007883a 	mov	r3,r2
  80ade0:	00800344 	movi	r2,13
  80ade4:	18800015 	stw	r2,0(r3)
  80ade8:	00000406 	br	80adfc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80adec:	080ae1c0 	call	80ae1c <alt_get_errno>
  80adf0:	1007883a 	mov	r3,r2
  80adf4:	00801444 	movi	r2,81
  80adf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80adfc:	00bfffc4 	movi	r2,-1
  80ae00:	e0bffe15 	stw	r2,-8(fp)
  80ae04:	e0bffe17 	ldw	r2,-8(fp)
}
  80ae08:	e037883a 	mov	sp,fp
  80ae0c:	dfc00117 	ldw	ra,4(sp)
  80ae10:	df000017 	ldw	fp,0(sp)
  80ae14:	dec00204 	addi	sp,sp,8
  80ae18:	f800283a 	ret

0080ae1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ae1c:	defffd04 	addi	sp,sp,-12
  80ae20:	dfc00215 	stw	ra,8(sp)
  80ae24:	df000115 	stw	fp,4(sp)
  80ae28:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ae2c:	00802074 	movhi	r2,129
  80ae30:	10bc0304 	addi	r2,r2,-4084
  80ae34:	10800017 	ldw	r2,0(r2)
  80ae38:	1005003a 	cmpeq	r2,r2,zero
  80ae3c:	1000061e 	bne	r2,zero,80ae58 <alt_get_errno+0x3c>
  80ae40:	00802074 	movhi	r2,129
  80ae44:	10bc0304 	addi	r2,r2,-4084
  80ae48:	10800017 	ldw	r2,0(r2)
  80ae4c:	103ee83a 	callr	r2
  80ae50:	e0bfff15 	stw	r2,-4(fp)
  80ae54:	00000306 	br	80ae64 <alt_get_errno+0x48>
  80ae58:	00802074 	movhi	r2,129
  80ae5c:	1082a904 	addi	r2,r2,2724
  80ae60:	e0bfff15 	stw	r2,-4(fp)
  80ae64:	e0bfff17 	ldw	r2,-4(fp)
}
  80ae68:	e037883a 	mov	sp,fp
  80ae6c:	dfc00117 	ldw	ra,4(sp)
  80ae70:	df000017 	ldw	fp,0(sp)
  80ae74:	dec00204 	addi	sp,sp,8
  80ae78:	f800283a 	ret

0080ae7c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ae7c:	defffc04 	addi	sp,sp,-16
  80ae80:	dfc00315 	stw	ra,12(sp)
  80ae84:	df000215 	stw	fp,8(sp)
  80ae88:	dc000115 	stw	r16,4(sp)
  80ae8c:	df000104 	addi	fp,sp,4
  80ae90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ae94:	e0bfff17 	ldw	r2,-4(fp)
  80ae98:	108000d0 	cmplti	r2,r2,3
  80ae9c:	10000f1e 	bne	r2,zero,80aedc <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80aea0:	e13fff17 	ldw	r4,-4(fp)
  80aea4:	04002074 	movhi	r16,129
  80aea8:	84378004 	addi	r16,r16,-8704
  80aeac:	01400304 	movi	r5,12
  80aeb0:	08016000 	call	801600 <__mulsi3>
  80aeb4:	1405883a 	add	r2,r2,r16
  80aeb8:	10800204 	addi	r2,r2,8
  80aebc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80aec0:	e13fff17 	ldw	r4,-4(fp)
  80aec4:	04002074 	movhi	r16,129
  80aec8:	84378004 	addi	r16,r16,-8704
  80aecc:	01400304 	movi	r5,12
  80aed0:	08016000 	call	801600 <__mulsi3>
  80aed4:	1405883a 	add	r2,r2,r16
  80aed8:	10000015 	stw	zero,0(r2)
  }
}
  80aedc:	e037883a 	mov	sp,fp
  80aee0:	dfc00217 	ldw	ra,8(sp)
  80aee4:	df000117 	ldw	fp,4(sp)
  80aee8:	dc000017 	ldw	r16,0(sp)
  80aeec:	dec00304 	addi	sp,sp,12
  80aef0:	f800283a 	ret

0080aef4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80aef4:	defff804 	addi	sp,sp,-32
  80aef8:	df000715 	stw	fp,28(sp)
  80aefc:	df000704 	addi	fp,sp,28
  80af00:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80af04:	0005303a 	rdctl	r2,status
  80af08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80af0c:	e0fffb17 	ldw	r3,-20(fp)
  80af10:	00bfff84 	movi	r2,-2
  80af14:	1884703a 	and	r2,r3,r2
  80af18:	1001703a 	wrctl	status,r2
  
  return context;
  80af1c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80af20:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80af24:	d0a00c17 	ldw	r2,-32720(gp)
  80af28:	10c000c4 	addi	r3,r2,3
  80af2c:	00bfff04 	movi	r2,-4
  80af30:	1884703a 	and	r2,r3,r2
  80af34:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80af38:	d0e00c17 	ldw	r3,-32720(gp)
  80af3c:	e0bffe17 	ldw	r2,-8(fp)
  80af40:	1887883a 	add	r3,r3,r2
  80af44:	00804034 	movhi	r2,256
  80af48:	10800004 	addi	r2,r2,0
  80af4c:	10c0072e 	bgeu	r2,r3,80af6c <sbrk+0x78>
  80af50:	e0bffd17 	ldw	r2,-12(fp)
  80af54:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80af58:	e0bffa17 	ldw	r2,-24(fp)
  80af5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80af60:	00bfffc4 	movi	r2,-1
  80af64:	e0bfff15 	stw	r2,-4(fp)
  80af68:	00000c06 	br	80af9c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80af6c:	d0a00c17 	ldw	r2,-32720(gp)
  80af70:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80af74:	d0e00c17 	ldw	r3,-32720(gp)
  80af78:	e0bffe17 	ldw	r2,-8(fp)
  80af7c:	1885883a 	add	r2,r3,r2
  80af80:	d0a00c15 	stw	r2,-32720(gp)
  80af84:	e0bffd17 	ldw	r2,-12(fp)
  80af88:	e0bff915 	stw	r2,-28(fp)
  80af8c:	e0bff917 	ldw	r2,-28(fp)
  80af90:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80af94:	e0bffc17 	ldw	r2,-16(fp)
  80af98:	e0bfff15 	stw	r2,-4(fp)
  80af9c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80afa0:	e037883a 	mov	sp,fp
  80afa4:	df000017 	ldw	fp,0(sp)
  80afa8:	dec00104 	addi	sp,sp,4
  80afac:	f800283a 	ret

0080afb0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80afb0:	defff704 	addi	sp,sp,-36
  80afb4:	dfc00815 	stw	ra,32(sp)
  80afb8:	df000715 	stw	fp,28(sp)
  80afbc:	df000704 	addi	fp,sp,28
  80afc0:	e13ffb15 	stw	r4,-20(fp)
  80afc4:	e17ffc15 	stw	r5,-16(fp)
  80afc8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80afcc:	e0bffb17 	ldw	r2,-20(fp)
  80afd0:	1004803a 	cmplt	r2,r2,zero
  80afd4:	1000091e 	bne	r2,zero,80affc <write+0x4c>
  80afd8:	e13ffb17 	ldw	r4,-20(fp)
  80afdc:	01400304 	movi	r5,12
  80afe0:	08016000 	call	801600 <__mulsi3>
  80afe4:	1007883a 	mov	r3,r2
  80afe8:	00802074 	movhi	r2,129
  80afec:	10b78004 	addi	r2,r2,-8704
  80aff0:	1887883a 	add	r3,r3,r2
  80aff4:	e0ffff15 	stw	r3,-4(fp)
  80aff8:	00000106 	br	80b000 <write+0x50>
  80affc:	e03fff15 	stw	zero,-4(fp)
  80b000:	e0bfff17 	ldw	r2,-4(fp)
  80b004:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b008:	e0bffa17 	ldw	r2,-24(fp)
  80b00c:	1005003a 	cmpeq	r2,r2,zero
  80b010:	1000241e 	bne	r2,zero,80b0a4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80b014:	e0bffa17 	ldw	r2,-24(fp)
  80b018:	10800217 	ldw	r2,8(r2)
  80b01c:	108000cc 	andi	r2,r2,3
  80b020:	1005003a 	cmpeq	r2,r2,zero
  80b024:	10001a1e 	bne	r2,zero,80b090 <write+0xe0>
  80b028:	e0bffa17 	ldw	r2,-24(fp)
  80b02c:	10800017 	ldw	r2,0(r2)
  80b030:	10800617 	ldw	r2,24(r2)
  80b034:	1005003a 	cmpeq	r2,r2,zero
  80b038:	1000151e 	bne	r2,zero,80b090 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80b03c:	e0bffa17 	ldw	r2,-24(fp)
  80b040:	10800017 	ldw	r2,0(r2)
  80b044:	10800617 	ldw	r2,24(r2)
  80b048:	e17ffc17 	ldw	r5,-16(fp)
  80b04c:	e1bffd17 	ldw	r6,-12(fp)
  80b050:	e13ffa17 	ldw	r4,-24(fp)
  80b054:	103ee83a 	callr	r2
  80b058:	e0bff915 	stw	r2,-28(fp)
  80b05c:	e0bff917 	ldw	r2,-28(fp)
  80b060:	1004403a 	cmpge	r2,r2,zero
  80b064:	1000071e 	bne	r2,zero,80b084 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80b068:	080b0d40 	call	80b0d4 <alt_get_errno>
  80b06c:	e0fff917 	ldw	r3,-28(fp)
  80b070:	00c7c83a 	sub	r3,zero,r3
  80b074:	10c00015 	stw	r3,0(r2)
        return -1;
  80b078:	00bfffc4 	movi	r2,-1
  80b07c:	e0bffe15 	stw	r2,-8(fp)
  80b080:	00000e06 	br	80b0bc <write+0x10c>
      }
      return rval;
  80b084:	e0bff917 	ldw	r2,-28(fp)
  80b088:	e0bffe15 	stw	r2,-8(fp)
  80b08c:	00000b06 	br	80b0bc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80b090:	080b0d40 	call	80b0d4 <alt_get_errno>
  80b094:	1007883a 	mov	r3,r2
  80b098:	00800344 	movi	r2,13
  80b09c:	18800015 	stw	r2,0(r3)
  80b0a0:	00000406 	br	80b0b4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80b0a4:	080b0d40 	call	80b0d4 <alt_get_errno>
  80b0a8:	1007883a 	mov	r3,r2
  80b0ac:	00801444 	movi	r2,81
  80b0b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b0b4:	00bfffc4 	movi	r2,-1
  80b0b8:	e0bffe15 	stw	r2,-8(fp)
  80b0bc:	e0bffe17 	ldw	r2,-8(fp)
}
  80b0c0:	e037883a 	mov	sp,fp
  80b0c4:	dfc00117 	ldw	ra,4(sp)
  80b0c8:	df000017 	ldw	fp,0(sp)
  80b0cc:	dec00204 	addi	sp,sp,8
  80b0d0:	f800283a 	ret

0080b0d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b0d4:	defffd04 	addi	sp,sp,-12
  80b0d8:	dfc00215 	stw	ra,8(sp)
  80b0dc:	df000115 	stw	fp,4(sp)
  80b0e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b0e4:	00802074 	movhi	r2,129
  80b0e8:	10bc0304 	addi	r2,r2,-4084
  80b0ec:	10800017 	ldw	r2,0(r2)
  80b0f0:	1005003a 	cmpeq	r2,r2,zero
  80b0f4:	1000061e 	bne	r2,zero,80b110 <alt_get_errno+0x3c>
  80b0f8:	00802074 	movhi	r2,129
  80b0fc:	10bc0304 	addi	r2,r2,-4084
  80b100:	10800017 	ldw	r2,0(r2)
  80b104:	103ee83a 	callr	r2
  80b108:	e0bfff15 	stw	r2,-4(fp)
  80b10c:	00000306 	br	80b11c <alt_get_errno+0x48>
  80b110:	00802074 	movhi	r2,129
  80b114:	1082a904 	addi	r2,r2,2724
  80b118:	e0bfff15 	stw	r2,-4(fp)
  80b11c:	e0bfff17 	ldw	r2,-4(fp)
}
  80b120:	e037883a 	mov	sp,fp
  80b124:	dfc00117 	ldw	ra,4(sp)
  80b128:	df000017 	ldw	fp,0(sp)
  80b12c:	dec00204 	addi	sp,sp,8
  80b130:	f800283a 	ret

0080b134 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80b134:	defffd04 	addi	sp,sp,-12
  80b138:	dfc00215 	stw	ra,8(sp)
  80b13c:	df000115 	stw	fp,4(sp)
  80b140:	df000104 	addi	fp,sp,4
  80b144:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
  80b148:	080cb740 	call	80cb74 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80b14c:	00800044 	movi	r2,1
  80b150:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80b154:	e037883a 	mov	sp,fp
  80b158:	dfc00117 	ldw	ra,4(sp)
  80b15c:	df000017 	ldw	fp,0(sp)
  80b160:	dec00204 	addi	sp,sp,8
  80b164:	f800283a 	ret

0080b168 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80b168:	defffe04 	addi	sp,sp,-8
  80b16c:	dfc00115 	stw	ra,4(sp)
  80b170:	df000015 	stw	fp,0(sp)
  80b174:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80b178:	01004074 	movhi	r4,257
  80b17c:	21042804 	addi	r4,r4,4256
  80b180:	000b883a 	mov	r5,zero
  80b184:	018001c4 	movi	r6,7
  80b188:	01c0fa04 	movi	r7,1000
  80b18c:	080bed80 	call	80bed8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
  80b190:	00c02074 	movhi	r3,129
  80b194:	18c2ad04 	addi	r3,r3,2740
  80b198:	00804074 	movhi	r2,257
  80b19c:	10842004 	addi	r2,r2,4224
  80b1a0:	18800015 	stw	r2,0(r3)
  80b1a4:	00c02074 	movhi	r3,129
  80b1a8:	18c2ae04 	addi	r3,r3,2744
  80b1ac:	0080bef4 	movhi	r2,763
  80b1b0:	10bc2004 	addi	r2,r2,-3968
  80b1b4:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80b1b8:	01002074 	movhi	r4,129
  80b1bc:	2137ea04 	addi	r4,r4,-8280
  80b1c0:	000b883a 	mov	r5,zero
  80b1c4:	01800144 	movi	r6,5
  80b1c8:	080b37c0 	call	80b37c <altera_avalon_jtag_uart_init>
  80b1cc:	01002074 	movhi	r4,129
  80b1d0:	2137e004 	addi	r4,r4,-8320
  80b1d4:	080b1fc0 	call	80b1fc <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
  80b1d8:	00c04074 	movhi	r3,257
  80b1dc:	18c40004 	addi	r3,r3,4096
  80b1e0:	00800044 	movi	r2,1
  80b1e4:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
  80b1e8:	e037883a 	mov	sp,fp
  80b1ec:	dfc00117 	ldw	ra,4(sp)
  80b1f0:	df000017 	ldw	fp,0(sp)
  80b1f4:	dec00204 	addi	sp,sp,8
  80b1f8:	f800283a 	ret

0080b1fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80b1fc:	defffd04 	addi	sp,sp,-12
  80b200:	dfc00215 	stw	ra,8(sp)
  80b204:	df000115 	stw	fp,4(sp)
  80b208:	df000104 	addi	fp,sp,4
  80b20c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80b210:	e13fff17 	ldw	r4,-4(fp)
  80b214:	01402074 	movhi	r5,129
  80b218:	297c0004 	addi	r5,r5,-4096
  80b21c:	080c0d80 	call	80c0d8 <alt_dev_llist_insert>
}
  80b220:	e037883a 	mov	sp,fp
  80b224:	dfc00117 	ldw	ra,4(sp)
  80b228:	df000017 	ldw	fp,0(sp)
  80b22c:	dec00204 	addi	sp,sp,8
  80b230:	f800283a 	ret

0080b234 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80b234:	defffa04 	addi	sp,sp,-24
  80b238:	dfc00515 	stw	ra,20(sp)
  80b23c:	df000415 	stw	fp,16(sp)
  80b240:	df000404 	addi	fp,sp,16
  80b244:	e13ffd15 	stw	r4,-12(fp)
  80b248:	e17ffe15 	stw	r5,-8(fp)
  80b24c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b250:	e0bffd17 	ldw	r2,-12(fp)
  80b254:	10800017 	ldw	r2,0(r2)
  80b258:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80b25c:	e0bffc17 	ldw	r2,-16(fp)
  80b260:	11000a04 	addi	r4,r2,40
  80b264:	e0bffd17 	ldw	r2,-12(fp)
  80b268:	11c00217 	ldw	r7,8(r2)
  80b26c:	e17ffe17 	ldw	r5,-8(fp)
  80b270:	e1bfff17 	ldw	r6,-4(fp)
  80b274:	080b87c0 	call	80b87c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80b278:	e037883a 	mov	sp,fp
  80b27c:	dfc00117 	ldw	ra,4(sp)
  80b280:	df000017 	ldw	fp,0(sp)
  80b284:	dec00204 	addi	sp,sp,8
  80b288:	f800283a 	ret

0080b28c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80b28c:	defffa04 	addi	sp,sp,-24
  80b290:	dfc00515 	stw	ra,20(sp)
  80b294:	df000415 	stw	fp,16(sp)
  80b298:	df000404 	addi	fp,sp,16
  80b29c:	e13ffd15 	stw	r4,-12(fp)
  80b2a0:	e17ffe15 	stw	r5,-8(fp)
  80b2a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b2a8:	e0bffd17 	ldw	r2,-12(fp)
  80b2ac:	10800017 	ldw	r2,0(r2)
  80b2b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80b2b4:	e0bffc17 	ldw	r2,-16(fp)
  80b2b8:	11000a04 	addi	r4,r2,40
  80b2bc:	e0bffd17 	ldw	r2,-12(fp)
  80b2c0:	11c00217 	ldw	r7,8(r2)
  80b2c4:	e17ffe17 	ldw	r5,-8(fp)
  80b2c8:	e1bfff17 	ldw	r6,-4(fp)
  80b2cc:	080baa00 	call	80baa0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80b2d0:	e037883a 	mov	sp,fp
  80b2d4:	dfc00117 	ldw	ra,4(sp)
  80b2d8:	df000017 	ldw	fp,0(sp)
  80b2dc:	dec00204 	addi	sp,sp,8
  80b2e0:	f800283a 	ret

0080b2e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80b2e4:	defffc04 	addi	sp,sp,-16
  80b2e8:	dfc00315 	stw	ra,12(sp)
  80b2ec:	df000215 	stw	fp,8(sp)
  80b2f0:	df000204 	addi	fp,sp,8
  80b2f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80b2f8:	e0bfff17 	ldw	r2,-4(fp)
  80b2fc:	10800017 	ldw	r2,0(r2)
  80b300:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80b304:	e0bffe17 	ldw	r2,-8(fp)
  80b308:	11000a04 	addi	r4,r2,40
  80b30c:	e0bfff17 	ldw	r2,-4(fp)
  80b310:	11400217 	ldw	r5,8(r2)
  80b314:	080b7140 	call	80b714 <altera_avalon_jtag_uart_close>
}
  80b318:	e037883a 	mov	sp,fp
  80b31c:	dfc00117 	ldw	ra,4(sp)
  80b320:	df000017 	ldw	fp,0(sp)
  80b324:	dec00204 	addi	sp,sp,8
  80b328:	f800283a 	ret

0080b32c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80b32c:	defffa04 	addi	sp,sp,-24
  80b330:	dfc00515 	stw	ra,20(sp)
  80b334:	df000415 	stw	fp,16(sp)
  80b338:	df000404 	addi	fp,sp,16
  80b33c:	e13ffd15 	stw	r4,-12(fp)
  80b340:	e17ffe15 	stw	r5,-8(fp)
  80b344:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80b348:	e0bffd17 	ldw	r2,-12(fp)
  80b34c:	10800017 	ldw	r2,0(r2)
  80b350:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80b354:	e0bffc17 	ldw	r2,-16(fp)
  80b358:	11000a04 	addi	r4,r2,40
  80b35c:	e17ffe17 	ldw	r5,-8(fp)
  80b360:	e1bfff17 	ldw	r6,-4(fp)
  80b364:	080b7880 	call	80b788 <altera_avalon_jtag_uart_ioctl>
}
  80b368:	e037883a 	mov	sp,fp
  80b36c:	dfc00117 	ldw	ra,4(sp)
  80b370:	df000017 	ldw	fp,0(sp)
  80b374:	dec00204 	addi	sp,sp,8
  80b378:	f800283a 	ret

0080b37c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80b37c:	defffa04 	addi	sp,sp,-24
  80b380:	dfc00515 	stw	ra,20(sp)
  80b384:	df000415 	stw	fp,16(sp)
  80b388:	df000404 	addi	fp,sp,16
  80b38c:	e13ffd15 	stw	r4,-12(fp)
  80b390:	e17ffe15 	stw	r5,-8(fp)
  80b394:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b398:	e0fffd17 	ldw	r3,-12(fp)
  80b39c:	00800044 	movi	r2,1
  80b3a0:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80b3a4:	e0bffd17 	ldw	r2,-12(fp)
  80b3a8:	10800017 	ldw	r2,0(r2)
  80b3ac:	11000104 	addi	r4,r2,4
  80b3b0:	e0bffd17 	ldw	r2,-12(fp)
  80b3b4:	10800817 	ldw	r2,32(r2)
  80b3b8:	1007883a 	mov	r3,r2
  80b3bc:	2005883a 	mov	r2,r4
  80b3c0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80b3c4:	e13ffe17 	ldw	r4,-8(fp)
  80b3c8:	e17fff17 	ldw	r5,-4(fp)
  80b3cc:	d8000015 	stw	zero,0(sp)
  80b3d0:	01802074 	movhi	r6,129
  80b3d4:	31ad0f04 	addi	r6,r6,-19396
  80b3d8:	e1fffd17 	ldw	r7,-12(fp)
  80b3dc:	080c2d00 	call	80c2d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80b3e0:	e0bffd17 	ldw	r2,-12(fp)
  80b3e4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80b3e8:	e0bffd17 	ldw	r2,-12(fp)
  80b3ec:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80b3f0:	00802074 	movhi	r2,129
  80b3f4:	1082b004 	addi	r2,r2,2752
  80b3f8:	10800017 	ldw	r2,0(r2)
  80b3fc:	100b883a 	mov	r5,r2
  80b400:	01802074 	movhi	r6,129
  80b404:	31ad9904 	addi	r6,r6,-18844
  80b408:	e1fffd17 	ldw	r7,-12(fp)
  80b40c:	080bf680 	call	80bf68 <alt_alarm_start>
  80b410:	1004403a 	cmpge	r2,r2,zero
  80b414:	1000041e 	bne	r2,zero,80b428 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80b418:	e0fffd17 	ldw	r3,-12(fp)
  80b41c:	00a00034 	movhi	r2,32768
  80b420:	10bfffc4 	addi	r2,r2,-1
  80b424:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80b428:	e037883a 	mov	sp,fp
  80b42c:	dfc00117 	ldw	ra,4(sp)
  80b430:	df000017 	ldw	fp,0(sp)
  80b434:	dec00204 	addi	sp,sp,8
  80b438:	f800283a 	ret

0080b43c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80b43c:	defff804 	addi	sp,sp,-32
  80b440:	df000715 	stw	fp,28(sp)
  80b444:	df000704 	addi	fp,sp,28
  80b448:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80b44c:	e0bfff17 	ldw	r2,-4(fp)
  80b450:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80b454:	e0bffe17 	ldw	r2,-8(fp)
  80b458:	10800017 	ldw	r2,0(r2)
  80b45c:	e0bffd15 	stw	r2,-12(fp)
  80b460:	00000006 	br	80b464 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b464:	e0bffd17 	ldw	r2,-12(fp)
  80b468:	10800104 	addi	r2,r2,4
  80b46c:	10800037 	ldwio	r2,0(r2)
  80b470:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80b474:	e0bffc17 	ldw	r2,-16(fp)
  80b478:	1080c00c 	andi	r2,r2,768
  80b47c:	1005003a 	cmpeq	r2,r2,zero
  80b480:	1000741e 	bne	r2,zero,80b654 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80b484:	e0bffc17 	ldw	r2,-16(fp)
  80b488:	1080400c 	andi	r2,r2,256
  80b48c:	1005003a 	cmpeq	r2,r2,zero
  80b490:	1000351e 	bne	r2,zero,80b568 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80b494:	00800074 	movhi	r2,1
  80b498:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b49c:	e0bffe17 	ldw	r2,-8(fp)
  80b4a0:	10800a17 	ldw	r2,40(r2)
  80b4a4:	10800044 	addi	r2,r2,1
  80b4a8:	1081ffcc 	andi	r2,r2,2047
  80b4ac:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80b4b0:	e0bffe17 	ldw	r2,-8(fp)
  80b4b4:	10c00b17 	ldw	r3,44(r2)
  80b4b8:	e0bffa17 	ldw	r2,-24(fp)
  80b4bc:	18801626 	beq	r3,r2,80b518 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80b4c0:	e0bffd17 	ldw	r2,-12(fp)
  80b4c4:	10800037 	ldwio	r2,0(r2)
  80b4c8:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80b4cc:	e0bffb17 	ldw	r2,-20(fp)
  80b4d0:	10a0000c 	andi	r2,r2,32768
  80b4d4:	1005003a 	cmpeq	r2,r2,zero
  80b4d8:	10000f1e 	bne	r2,zero,80b518 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80b4dc:	e0bffe17 	ldw	r2,-8(fp)
  80b4e0:	10c00a17 	ldw	r3,40(r2)
  80b4e4:	e0bffb17 	ldw	r2,-20(fp)
  80b4e8:	1009883a 	mov	r4,r2
  80b4ec:	e0bffe17 	ldw	r2,-8(fp)
  80b4f0:	1885883a 	add	r2,r3,r2
  80b4f4:	10800e04 	addi	r2,r2,56
  80b4f8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b4fc:	e0bffe17 	ldw	r2,-8(fp)
  80b500:	10800a17 	ldw	r2,40(r2)
  80b504:	10800044 	addi	r2,r2,1
  80b508:	10c1ffcc 	andi	r3,r2,2047
  80b50c:	e0bffe17 	ldw	r2,-8(fp)
  80b510:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80b514:	003fe106 	br	80b49c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80b518:	e0bffb17 	ldw	r2,-20(fp)
  80b51c:	10bfffec 	andhi	r2,r2,65535
  80b520:	1005003a 	cmpeq	r2,r2,zero
  80b524:	1000101e 	bne	r2,zero,80b568 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80b528:	e0bffe17 	ldw	r2,-8(fp)
  80b52c:	10c00817 	ldw	r3,32(r2)
  80b530:	00bfff84 	movi	r2,-2
  80b534:	1886703a 	and	r3,r3,r2
  80b538:	e0bffe17 	ldw	r2,-8(fp)
  80b53c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80b540:	e0bffd17 	ldw	r2,-12(fp)
  80b544:	11000104 	addi	r4,r2,4
  80b548:	e0bffe17 	ldw	r2,-8(fp)
  80b54c:	10800817 	ldw	r2,32(r2)
  80b550:	1007883a 	mov	r3,r2
  80b554:	2005883a 	mov	r2,r4
  80b558:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b55c:	e0bffd17 	ldw	r2,-12(fp)
  80b560:	10800104 	addi	r2,r2,4
  80b564:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80b568:	e0bffc17 	ldw	r2,-16(fp)
  80b56c:	1080800c 	andi	r2,r2,512
  80b570:	1005003a 	cmpeq	r2,r2,zero
  80b574:	103fbb1e 	bne	r2,zero,80b464 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80b578:	e0bffc17 	ldw	r2,-16(fp)
  80b57c:	10bfffec 	andhi	r2,r2,65535
  80b580:	1004d43a 	srli	r2,r2,16
  80b584:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b588:	00001506 	br	80b5e0 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80b58c:	e13ffd17 	ldw	r4,-12(fp)
  80b590:	e0bffe17 	ldw	r2,-8(fp)
  80b594:	10c00d17 	ldw	r3,52(r2)
  80b598:	e0bffe17 	ldw	r2,-8(fp)
  80b59c:	1885883a 	add	r2,r3,r2
  80b5a0:	10820e04 	addi	r2,r2,2104
  80b5a4:	10800003 	ldbu	r2,0(r2)
  80b5a8:	10c03fcc 	andi	r3,r2,255
  80b5ac:	18c0201c 	xori	r3,r3,128
  80b5b0:	18ffe004 	addi	r3,r3,-128
  80b5b4:	2005883a 	mov	r2,r4
  80b5b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b5bc:	e0bffe17 	ldw	r2,-8(fp)
  80b5c0:	10800d17 	ldw	r2,52(r2)
  80b5c4:	10800044 	addi	r2,r2,1
  80b5c8:	10c1ffcc 	andi	r3,r2,2047
  80b5cc:	e0bffe17 	ldw	r2,-8(fp)
  80b5d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80b5d4:	e0bff917 	ldw	r2,-28(fp)
  80b5d8:	10bfffc4 	addi	r2,r2,-1
  80b5dc:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80b5e0:	e0bff917 	ldw	r2,-28(fp)
  80b5e4:	1005003a 	cmpeq	r2,r2,zero
  80b5e8:	1000051e 	bne	r2,zero,80b600 <altera_avalon_jtag_uart_irq+0x1c4>
  80b5ec:	e0bffe17 	ldw	r2,-8(fp)
  80b5f0:	10c00d17 	ldw	r3,52(r2)
  80b5f4:	e0bffe17 	ldw	r2,-8(fp)
  80b5f8:	10800c17 	ldw	r2,48(r2)
  80b5fc:	18bfe31e 	bne	r3,r2,80b58c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80b600:	e0bff917 	ldw	r2,-28(fp)
  80b604:	1005003a 	cmpeq	r2,r2,zero
  80b608:	103f961e 	bne	r2,zero,80b464 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80b60c:	e0bffe17 	ldw	r2,-8(fp)
  80b610:	10c00817 	ldw	r3,32(r2)
  80b614:	00bfff44 	movi	r2,-3
  80b618:	1886703a 	and	r3,r3,r2
  80b61c:	e0bffe17 	ldw	r2,-8(fp)
  80b620:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80b624:	e0bffe17 	ldw	r2,-8(fp)
  80b628:	10800017 	ldw	r2,0(r2)
  80b62c:	11000104 	addi	r4,r2,4
  80b630:	e0bffe17 	ldw	r2,-8(fp)
  80b634:	10800817 	ldw	r2,32(r2)
  80b638:	1007883a 	mov	r3,r2
  80b63c:	2005883a 	mov	r2,r4
  80b640:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80b644:	e0bffd17 	ldw	r2,-12(fp)
  80b648:	10800104 	addi	r2,r2,4
  80b64c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80b650:	003f8406 	br	80b464 <altera_avalon_jtag_uart_irq+0x28>
}
  80b654:	e037883a 	mov	sp,fp
  80b658:	df000017 	ldw	fp,0(sp)
  80b65c:	dec00104 	addi	sp,sp,4
  80b660:	f800283a 	ret

0080b664 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80b664:	defffc04 	addi	sp,sp,-16
  80b668:	df000315 	stw	fp,12(sp)
  80b66c:	df000304 	addi	fp,sp,12
  80b670:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80b674:	e0bfff17 	ldw	r2,-4(fp)
  80b678:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80b67c:	e0bffe17 	ldw	r2,-8(fp)
  80b680:	10800017 	ldw	r2,0(r2)
  80b684:	10800104 	addi	r2,r2,4
  80b688:	10800037 	ldwio	r2,0(r2)
  80b68c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80b690:	e0bffd17 	ldw	r2,-12(fp)
  80b694:	1081000c 	andi	r2,r2,1024
  80b698:	1005003a 	cmpeq	r2,r2,zero
  80b69c:	10000c1e 	bne	r2,zero,80b6d0 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80b6a0:	e0bffe17 	ldw	r2,-8(fp)
  80b6a4:	10800017 	ldw	r2,0(r2)
  80b6a8:	11000104 	addi	r4,r2,4
  80b6ac:	e0bffe17 	ldw	r2,-8(fp)
  80b6b0:	10800817 	ldw	r2,32(r2)
  80b6b4:	10810014 	ori	r2,r2,1024
  80b6b8:	1007883a 	mov	r3,r2
  80b6bc:	2005883a 	mov	r2,r4
  80b6c0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80b6c4:	e0bffe17 	ldw	r2,-8(fp)
  80b6c8:	10000915 	stw	zero,36(r2)
  80b6cc:	00000a06 	br	80b6f8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80b6d0:	e0bffe17 	ldw	r2,-8(fp)
  80b6d4:	10c00917 	ldw	r3,36(r2)
  80b6d8:	00a00034 	movhi	r2,32768
  80b6dc:	10bfff04 	addi	r2,r2,-4
  80b6e0:	10c00536 	bltu	r2,r3,80b6f8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80b6e4:	e0bffe17 	ldw	r2,-8(fp)
  80b6e8:	10800917 	ldw	r2,36(r2)
  80b6ec:	10c00044 	addi	r3,r2,1
  80b6f0:	e0bffe17 	ldw	r2,-8(fp)
  80b6f4:	10c00915 	stw	r3,36(r2)
  80b6f8:	00802074 	movhi	r2,129
  80b6fc:	1082b004 	addi	r2,r2,2752
  80b700:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80b704:	e037883a 	mov	sp,fp
  80b708:	df000017 	ldw	fp,0(sp)
  80b70c:	dec00104 	addi	sp,sp,4
  80b710:	f800283a 	ret

0080b714 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80b714:	defffc04 	addi	sp,sp,-16
  80b718:	df000315 	stw	fp,12(sp)
  80b71c:	df000304 	addi	fp,sp,12
  80b720:	e13ffd15 	stw	r4,-12(fp)
  80b724:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b728:	00000706 	br	80b748 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80b72c:	e0bffe17 	ldw	r2,-8(fp)
  80b730:	1090000c 	andi	r2,r2,16384
  80b734:	1005003a 	cmpeq	r2,r2,zero
  80b738:	1000031e 	bne	r2,zero,80b748 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80b73c:	00bffd44 	movi	r2,-11
  80b740:	e0bfff15 	stw	r2,-4(fp)
  80b744:	00000b06 	br	80b774 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80b748:	e0bffd17 	ldw	r2,-12(fp)
  80b74c:	10c00d17 	ldw	r3,52(r2)
  80b750:	e0bffd17 	ldw	r2,-12(fp)
  80b754:	10800c17 	ldw	r2,48(r2)
  80b758:	18800526 	beq	r3,r2,80b770 <altera_avalon_jtag_uart_close+0x5c>
  80b75c:	e0bffd17 	ldw	r2,-12(fp)
  80b760:	10c00917 	ldw	r3,36(r2)
  80b764:	e0bffd17 	ldw	r2,-12(fp)
  80b768:	10800117 	ldw	r2,4(r2)
  80b76c:	18bfef36 	bltu	r3,r2,80b72c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80b770:	e03fff15 	stw	zero,-4(fp)
  80b774:	e0bfff17 	ldw	r2,-4(fp)
}
  80b778:	e037883a 	mov	sp,fp
  80b77c:	df000017 	ldw	fp,0(sp)
  80b780:	dec00104 	addi	sp,sp,4
  80b784:	f800283a 	ret

0080b788 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80b788:	defff804 	addi	sp,sp,-32
  80b78c:	df000715 	stw	fp,28(sp)
  80b790:	df000704 	addi	fp,sp,28
  80b794:	e13ffb15 	stw	r4,-20(fp)
  80b798:	e17ffc15 	stw	r5,-16(fp)
  80b79c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80b7a0:	00bff9c4 	movi	r2,-25
  80b7a4:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80b7a8:	e0bffc17 	ldw	r2,-16(fp)
  80b7ac:	e0bfff15 	stw	r2,-4(fp)
  80b7b0:	e0ffff17 	ldw	r3,-4(fp)
  80b7b4:	189a8060 	cmpeqi	r2,r3,27137
  80b7b8:	1000041e 	bne	r2,zero,80b7cc <altera_avalon_jtag_uart_ioctl+0x44>
  80b7bc:	e0ffff17 	ldw	r3,-4(fp)
  80b7c0:	189a80a0 	cmpeqi	r2,r3,27138
  80b7c4:	10001b1e 	bne	r2,zero,80b834 <altera_avalon_jtag_uart_ioctl+0xac>
  80b7c8:	00002706 	br	80b868 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80b7cc:	e0bffb17 	ldw	r2,-20(fp)
  80b7d0:	10c00117 	ldw	r3,4(r2)
  80b7d4:	00a00034 	movhi	r2,32768
  80b7d8:	10bfffc4 	addi	r2,r2,-1
  80b7dc:	18802226 	beq	r3,r2,80b868 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80b7e0:	e0bffd17 	ldw	r2,-12(fp)
  80b7e4:	10800017 	ldw	r2,0(r2)
  80b7e8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80b7ec:	e0bff917 	ldw	r2,-28(fp)
  80b7f0:	10800090 	cmplti	r2,r2,2
  80b7f4:	1000071e 	bne	r2,zero,80b814 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b7f8:	e0fff917 	ldw	r3,-28(fp)
  80b7fc:	00a00034 	movhi	r2,32768
  80b800:	10bfffc4 	addi	r2,r2,-1
  80b804:	18800326 	beq	r3,r2,80b814 <altera_avalon_jtag_uart_ioctl+0x8c>
  80b808:	e0bff917 	ldw	r2,-28(fp)
  80b80c:	e0bffe15 	stw	r2,-8(fp)
  80b810:	00000306 	br	80b820 <altera_avalon_jtag_uart_ioctl+0x98>
  80b814:	00e00034 	movhi	r3,32768
  80b818:	18ffff84 	addi	r3,r3,-2
  80b81c:	e0fffe15 	stw	r3,-8(fp)
  80b820:	e0bffb17 	ldw	r2,-20(fp)
  80b824:	e0fffe17 	ldw	r3,-8(fp)
  80b828:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80b82c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80b830:	00000d06 	br	80b868 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80b834:	e0bffb17 	ldw	r2,-20(fp)
  80b838:	10c00117 	ldw	r3,4(r2)
  80b83c:	00a00034 	movhi	r2,32768
  80b840:	10bfffc4 	addi	r2,r2,-1
  80b844:	18800826 	beq	r3,r2,80b868 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80b848:	e13ffd17 	ldw	r4,-12(fp)
  80b84c:	e0bffb17 	ldw	r2,-20(fp)
  80b850:	10c00917 	ldw	r3,36(r2)
  80b854:	e0bffb17 	ldw	r2,-20(fp)
  80b858:	10800117 	ldw	r2,4(r2)
  80b85c:	1885803a 	cmpltu	r2,r3,r2
  80b860:	20800015 	stw	r2,0(r4)
      rc = 0;
  80b864:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80b868:	e0bffa17 	ldw	r2,-24(fp)
}
  80b86c:	e037883a 	mov	sp,fp
  80b870:	df000017 	ldw	fp,0(sp)
  80b874:	dec00104 	addi	sp,sp,4
  80b878:	f800283a 	ret

0080b87c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80b87c:	defff204 	addi	sp,sp,-56
  80b880:	dfc00d15 	stw	ra,52(sp)
  80b884:	df000c15 	stw	fp,48(sp)
  80b888:	df000c04 	addi	fp,sp,48
  80b88c:	e13ffb15 	stw	r4,-20(fp)
  80b890:	e17ffc15 	stw	r5,-16(fp)
  80b894:	e1bffd15 	stw	r6,-12(fp)
  80b898:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80b89c:	e0bffc17 	ldw	r2,-16(fp)
  80b8a0:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b8a4:	00004806 	br	80b9c8 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80b8a8:	e0bffb17 	ldw	r2,-20(fp)
  80b8ac:	10800a17 	ldw	r2,40(r2)
  80b8b0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80b8b4:	e0bffb17 	ldw	r2,-20(fp)
  80b8b8:	10800b17 	ldw	r2,44(r2)
  80b8bc:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80b8c0:	e0fff717 	ldw	r3,-36(fp)
  80b8c4:	e0bff617 	ldw	r2,-40(fp)
  80b8c8:	18800536 	bltu	r3,r2,80b8e0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80b8cc:	e0bff717 	ldw	r2,-36(fp)
  80b8d0:	e0fff617 	ldw	r3,-40(fp)
  80b8d4:	10c5c83a 	sub	r2,r2,r3
  80b8d8:	e0bff815 	stw	r2,-32(fp)
  80b8dc:	00000406 	br	80b8f0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80b8e0:	00820004 	movi	r2,2048
  80b8e4:	e0fff617 	ldw	r3,-40(fp)
  80b8e8:	10c5c83a 	sub	r2,r2,r3
  80b8ec:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80b8f0:	e0bff817 	ldw	r2,-32(fp)
  80b8f4:	1005003a 	cmpeq	r2,r2,zero
  80b8f8:	10001f1e 	bne	r2,zero,80b978 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80b8fc:	e0fffd17 	ldw	r3,-12(fp)
  80b900:	e0bff817 	ldw	r2,-32(fp)
  80b904:	1880022e 	bgeu	r3,r2,80b910 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80b908:	e0bffd17 	ldw	r2,-12(fp)
  80b90c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80b910:	e0bffb17 	ldw	r2,-20(fp)
  80b914:	10c00e04 	addi	r3,r2,56
  80b918:	e0bff617 	ldw	r2,-40(fp)
  80b91c:	1887883a 	add	r3,r3,r2
  80b920:	e0bffa17 	ldw	r2,-24(fp)
  80b924:	1009883a 	mov	r4,r2
  80b928:	180b883a 	mov	r5,r3
  80b92c:	e1bff817 	ldw	r6,-32(fp)
  80b930:	08069200 	call	806920 <memcpy>
      ptr   += n;
  80b934:	e0fff817 	ldw	r3,-32(fp)
  80b938:	e0bffa17 	ldw	r2,-24(fp)
  80b93c:	10c5883a 	add	r2,r2,r3
  80b940:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80b944:	e0fffd17 	ldw	r3,-12(fp)
  80b948:	e0bff817 	ldw	r2,-32(fp)
  80b94c:	1885c83a 	sub	r2,r3,r2
  80b950:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80b954:	e0fff617 	ldw	r3,-40(fp)
  80b958:	e0bff817 	ldw	r2,-32(fp)
  80b95c:	1885883a 	add	r2,r3,r2
  80b960:	10c1ffcc 	andi	r3,r2,2047
  80b964:	e0bffb17 	ldw	r2,-20(fp)
  80b968:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80b96c:	e0bffd17 	ldw	r2,-12(fp)
  80b970:	10800048 	cmpgei	r2,r2,1
  80b974:	103fcc1e 	bne	r2,zero,80b8a8 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80b978:	e0fffa17 	ldw	r3,-24(fp)
  80b97c:	e0bffc17 	ldw	r2,-16(fp)
  80b980:	1880141e 	bne	r3,r2,80b9d4 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80b984:	e0bffe17 	ldw	r2,-8(fp)
  80b988:	1090000c 	andi	r2,r2,16384
  80b98c:	1004c03a 	cmpne	r2,r2,zero
  80b990:	1000101e 	bne	r2,zero,80b9d4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80b994:	e0bffb17 	ldw	r2,-20(fp)
  80b998:	10c00a17 	ldw	r3,40(r2)
  80b99c:	e0bff717 	ldw	r2,-36(fp)
  80b9a0:	1880051e 	bne	r3,r2,80b9b8 <altera_avalon_jtag_uart_read+0x13c>
  80b9a4:	e0bffb17 	ldw	r2,-20(fp)
  80b9a8:	10c00917 	ldw	r3,36(r2)
  80b9ac:	e0bffb17 	ldw	r2,-20(fp)
  80b9b0:	10800117 	ldw	r2,4(r2)
  80b9b4:	18bff736 	bltu	r3,r2,80b994 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80b9b8:	e0bffb17 	ldw	r2,-20(fp)
  80b9bc:	10c00a17 	ldw	r3,40(r2)
  80b9c0:	e0bff717 	ldw	r2,-36(fp)
  80b9c4:	18800326 	beq	r3,r2,80b9d4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80b9c8:	e0bffd17 	ldw	r2,-12(fp)
  80b9cc:	10800048 	cmpgei	r2,r2,1
  80b9d0:	103fb51e 	bne	r2,zero,80b8a8 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80b9d4:	e0fffa17 	ldw	r3,-24(fp)
  80b9d8:	e0bffc17 	ldw	r2,-16(fp)
  80b9dc:	18801926 	beq	r3,r2,80ba44 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b9e0:	0005303a 	rdctl	r2,status
  80b9e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b9e8:	e0fff517 	ldw	r3,-44(fp)
  80b9ec:	00bfff84 	movi	r2,-2
  80b9f0:	1884703a 	and	r2,r3,r2
  80b9f4:	1001703a 	wrctl	status,r2
  
  return context;
  80b9f8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80b9fc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80ba00:	e0bffb17 	ldw	r2,-20(fp)
  80ba04:	10800817 	ldw	r2,32(r2)
  80ba08:	10c00054 	ori	r3,r2,1
  80ba0c:	e0bffb17 	ldw	r2,-20(fp)
  80ba10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ba14:	e0bffb17 	ldw	r2,-20(fp)
  80ba18:	10800017 	ldw	r2,0(r2)
  80ba1c:	11000104 	addi	r4,r2,4
  80ba20:	e0bffb17 	ldw	r2,-20(fp)
  80ba24:	10800817 	ldw	r2,32(r2)
  80ba28:	1007883a 	mov	r3,r2
  80ba2c:	2005883a 	mov	r2,r4
  80ba30:	10c00035 	stwio	r3,0(r2)
  80ba34:	e0bff917 	ldw	r2,-28(fp)
  80ba38:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba3c:	e0bff417 	ldw	r2,-48(fp)
  80ba40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80ba44:	e0fffa17 	ldw	r3,-24(fp)
  80ba48:	e0bffc17 	ldw	r2,-16(fp)
  80ba4c:	18800526 	beq	r3,r2,80ba64 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80ba50:	e0fffa17 	ldw	r3,-24(fp)
  80ba54:	e0bffc17 	ldw	r2,-16(fp)
  80ba58:	1887c83a 	sub	r3,r3,r2
  80ba5c:	e0ffff15 	stw	r3,-4(fp)
  80ba60:	00000906 	br	80ba88 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80ba64:	e0bffe17 	ldw	r2,-8(fp)
  80ba68:	1090000c 	andi	r2,r2,16384
  80ba6c:	1005003a 	cmpeq	r2,r2,zero
  80ba70:	1000031e 	bne	r2,zero,80ba80 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80ba74:	00bffd44 	movi	r2,-11
  80ba78:	e0bfff15 	stw	r2,-4(fp)
  80ba7c:	00000206 	br	80ba88 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80ba80:	00bffec4 	movi	r2,-5
  80ba84:	e0bfff15 	stw	r2,-4(fp)
  80ba88:	e0bfff17 	ldw	r2,-4(fp)
}
  80ba8c:	e037883a 	mov	sp,fp
  80ba90:	dfc00117 	ldw	ra,4(sp)
  80ba94:	df000017 	ldw	fp,0(sp)
  80ba98:	dec00204 	addi	sp,sp,8
  80ba9c:	f800283a 	ret

0080baa0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80baa0:	defff204 	addi	sp,sp,-56
  80baa4:	dfc00d15 	stw	ra,52(sp)
  80baa8:	df000c15 	stw	fp,48(sp)
  80baac:	df000c04 	addi	fp,sp,48
  80bab0:	e13ffb15 	stw	r4,-20(fp)
  80bab4:	e17ffc15 	stw	r5,-16(fp)
  80bab8:	e1bffd15 	stw	r6,-12(fp)
  80babc:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80bac0:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80bac4:	e0bffc17 	ldw	r2,-16(fp)
  80bac8:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80bacc:	00003a06 	br	80bbb8 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80bad0:	e0bffb17 	ldw	r2,-20(fp)
  80bad4:	10800c17 	ldw	r2,48(r2)
  80bad8:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80badc:	e0bffb17 	ldw	r2,-20(fp)
  80bae0:	10800d17 	ldw	r2,52(r2)
  80bae4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80bae8:	e0fffa17 	ldw	r3,-24(fp)
  80baec:	e0bff917 	ldw	r2,-28(fp)
  80baf0:	1880062e 	bgeu	r3,r2,80bb0c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80baf4:	e0fff917 	ldw	r3,-28(fp)
  80baf8:	e0bffa17 	ldw	r2,-24(fp)
  80bafc:	1885c83a 	sub	r2,r3,r2
  80bb00:	10bfffc4 	addi	r2,r2,-1
  80bb04:	e0bff815 	stw	r2,-32(fp)
  80bb08:	00000c06 	br	80bb3c <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80bb0c:	e0bff917 	ldw	r2,-28(fp)
  80bb10:	1005003a 	cmpeq	r2,r2,zero
  80bb14:	1000051e 	bne	r2,zero,80bb2c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80bb18:	00820004 	movi	r2,2048
  80bb1c:	e0fffa17 	ldw	r3,-24(fp)
  80bb20:	10c5c83a 	sub	r2,r2,r3
  80bb24:	e0bff815 	stw	r2,-32(fp)
  80bb28:	00000406 	br	80bb3c <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80bb2c:	0081ffc4 	movi	r2,2047
  80bb30:	e0fffa17 	ldw	r3,-24(fp)
  80bb34:	10c5c83a 	sub	r2,r2,r3
  80bb38:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80bb3c:	e0bff817 	ldw	r2,-32(fp)
  80bb40:	1005003a 	cmpeq	r2,r2,zero
  80bb44:	10001f1e 	bne	r2,zero,80bbc4 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80bb48:	e0fffd17 	ldw	r3,-12(fp)
  80bb4c:	e0bff817 	ldw	r2,-32(fp)
  80bb50:	1880022e 	bgeu	r3,r2,80bb5c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80bb54:	e0bffd17 	ldw	r2,-12(fp)
  80bb58:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80bb5c:	e0bffb17 	ldw	r2,-20(fp)
  80bb60:	10c20e04 	addi	r3,r2,2104
  80bb64:	e0bffa17 	ldw	r2,-24(fp)
  80bb68:	1885883a 	add	r2,r3,r2
  80bb6c:	e0fffc17 	ldw	r3,-16(fp)
  80bb70:	1009883a 	mov	r4,r2
  80bb74:	180b883a 	mov	r5,r3
  80bb78:	e1bff817 	ldw	r6,-32(fp)
  80bb7c:	08069200 	call	806920 <memcpy>
      ptr   += n;
  80bb80:	e0fff817 	ldw	r3,-32(fp)
  80bb84:	e0bffc17 	ldw	r2,-16(fp)
  80bb88:	10c5883a 	add	r2,r2,r3
  80bb8c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80bb90:	e0fffd17 	ldw	r3,-12(fp)
  80bb94:	e0bff817 	ldw	r2,-32(fp)
  80bb98:	1885c83a 	sub	r2,r3,r2
  80bb9c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bba0:	e0fffa17 	ldw	r3,-24(fp)
  80bba4:	e0bff817 	ldw	r2,-32(fp)
  80bba8:	1885883a 	add	r2,r3,r2
  80bbac:	10c1ffcc 	andi	r3,r2,2047
  80bbb0:	e0bffb17 	ldw	r2,-20(fp)
  80bbb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80bbb8:	e0bffd17 	ldw	r2,-12(fp)
  80bbbc:	10800048 	cmpgei	r2,r2,1
  80bbc0:	103fc31e 	bne	r2,zero,80bad0 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bbc4:	0005303a 	rdctl	r2,status
  80bbc8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bbcc:	e0fff517 	ldw	r3,-44(fp)
  80bbd0:	00bfff84 	movi	r2,-2
  80bbd4:	1884703a 	and	r2,r3,r2
  80bbd8:	1001703a 	wrctl	status,r2
  
  return context;
  80bbdc:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80bbe0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bbe4:	e0bffb17 	ldw	r2,-20(fp)
  80bbe8:	10800817 	ldw	r2,32(r2)
  80bbec:	10c00094 	ori	r3,r2,2
  80bbf0:	e0bffb17 	ldw	r2,-20(fp)
  80bbf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bbf8:	e0bffb17 	ldw	r2,-20(fp)
  80bbfc:	10800017 	ldw	r2,0(r2)
  80bc00:	11000104 	addi	r4,r2,4
  80bc04:	e0bffb17 	ldw	r2,-20(fp)
  80bc08:	10800817 	ldw	r2,32(r2)
  80bc0c:	1007883a 	mov	r3,r2
  80bc10:	2005883a 	mov	r2,r4
  80bc14:	10c00035 	stwio	r3,0(r2)
  80bc18:	e0bff717 	ldw	r2,-36(fp)
  80bc1c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bc20:	e0bff417 	ldw	r2,-48(fp)
  80bc24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80bc28:	e0bffd17 	ldw	r2,-12(fp)
  80bc2c:	10800050 	cmplti	r2,r2,1
  80bc30:	1000111e 	bne	r2,zero,80bc78 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80bc34:	e0bffe17 	ldw	r2,-8(fp)
  80bc38:	1090000c 	andi	r2,r2,16384
  80bc3c:	1004c03a 	cmpne	r2,r2,zero
  80bc40:	1000101e 	bne	r2,zero,80bc84 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80bc44:	e0bffb17 	ldw	r2,-20(fp)
  80bc48:	10c00d17 	ldw	r3,52(r2)
  80bc4c:	e0bff917 	ldw	r2,-28(fp)
  80bc50:	1880051e 	bne	r3,r2,80bc68 <altera_avalon_jtag_uart_write+0x1c8>
  80bc54:	e0bffb17 	ldw	r2,-20(fp)
  80bc58:	10c00917 	ldw	r3,36(r2)
  80bc5c:	e0bffb17 	ldw	r2,-20(fp)
  80bc60:	10800117 	ldw	r2,4(r2)
  80bc64:	18bff736 	bltu	r3,r2,80bc44 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80bc68:	e0bffb17 	ldw	r2,-20(fp)
  80bc6c:	10c00d17 	ldw	r3,52(r2)
  80bc70:	e0bff917 	ldw	r2,-28(fp)
  80bc74:	18800326 	beq	r3,r2,80bc84 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80bc78:	e0bffd17 	ldw	r2,-12(fp)
  80bc7c:	10800048 	cmpgei	r2,r2,1
  80bc80:	103fcd1e 	bne	r2,zero,80bbb8 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80bc84:	e0fffc17 	ldw	r3,-16(fp)
  80bc88:	e0bff617 	ldw	r2,-40(fp)
  80bc8c:	18800526 	beq	r3,r2,80bca4 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80bc90:	e0fffc17 	ldw	r3,-16(fp)
  80bc94:	e0bff617 	ldw	r2,-40(fp)
  80bc98:	1887c83a 	sub	r3,r3,r2
  80bc9c:	e0ffff15 	stw	r3,-4(fp)
  80bca0:	00000906 	br	80bcc8 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80bca4:	e0bffe17 	ldw	r2,-8(fp)
  80bca8:	1090000c 	andi	r2,r2,16384
  80bcac:	1005003a 	cmpeq	r2,r2,zero
  80bcb0:	1000031e 	bne	r2,zero,80bcc0 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80bcb4:	00bffd44 	movi	r2,-11
  80bcb8:	e0bfff15 	stw	r2,-4(fp)
  80bcbc:	00000206 	br	80bcc8 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80bcc0:	00bffec4 	movi	r2,-5
  80bcc4:	e0bfff15 	stw	r2,-4(fp)
  80bcc8:	e0bfff17 	ldw	r2,-4(fp)
}
  80bccc:	e037883a 	mov	sp,fp
  80bcd0:	dfc00117 	ldw	ra,4(sp)
  80bcd4:	df000017 	ldw	fp,0(sp)
  80bcd8:	dec00204 	addi	sp,sp,8
  80bcdc:	f800283a 	ret

0080bce0 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
  80bce0:	defff904 	addi	sp,sp,-28
  80bce4:	df000615 	stw	fp,24(sp)
  80bce8:	df000604 	addi	fp,sp,24
  80bcec:	e13ffe15 	stw	r4,-8(fp)
  80bcf0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
  80bcf4:	e03ffa15 	stw	zero,-24(fp)
  80bcf8:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
  80bcfc:	e0bffe17 	ldw	r2,-8(fp)
  80bd00:	10000035 	stwio	zero,0(r2)
  lo = IORD(hw_base_address, ( which_section*4   ));
  80bd04:	e0bfff17 	ldw	r2,-4(fp)
  80bd08:	1004913a 	slli	r2,r2,4
  80bd0c:	1007883a 	mov	r3,r2
  80bd10:	e0bffe17 	ldw	r2,-8(fp)
  80bd14:	1885883a 	add	r2,r3,r2
  80bd18:	10800037 	ldwio	r2,0(r2)
  80bd1c:	e0bffd15 	stw	r2,-12(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  80bd20:	e0bfff17 	ldw	r2,-4(fp)
  80bd24:	1004913a 	slli	r2,r2,4
  80bd28:	1007883a 	mov	r3,r2
  80bd2c:	e0bffe17 	ldw	r2,-8(fp)
  80bd30:	1885883a 	add	r2,r3,r2
  80bd34:	10800104 	addi	r2,r2,4
  80bd38:	10800037 	ldwio	r2,0(r2)
  80bd3c:	e0bffc15 	stw	r2,-16(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
  80bd40:	e0bffc17 	ldw	r2,-16(fp)
  80bd44:	0007883a 	mov	r3,zero
  80bd48:	100a983a 	sll	r5,r2,zero
  80bd4c:	0009883a 	mov	r4,zero
  80bd50:	e0bffd17 	ldw	r2,-12(fp)
  80bd54:	0007883a 	mov	r3,zero
  80bd58:	208cb03a 	or	r6,r4,r2
  80bd5c:	e1bffa15 	stw	r6,-24(fp)
  80bd60:	28c4b03a 	or	r2,r5,r3
  80bd64:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
  80bd68:	e17ffa17 	ldw	r5,-24(fp)
  80bd6c:	e1bffb17 	ldw	r6,-20(fp)
  80bd70:	2807883a 	mov	r3,r5
  80bd74:	3009883a 	mov	r4,r6
}
  80bd78:	1805883a 	mov	r2,r3
  80bd7c:	2007883a 	mov	r3,r4
  80bd80:	e037883a 	mov	sp,fp
  80bd84:	df000017 	ldw	fp,0(sp)
  80bd88:	dec00104 	addi	sp,sp,4
  80bd8c:	f800283a 	ret

0080bd90 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  80bd90:	defffd04 	addi	sp,sp,-12
  80bd94:	dfc00215 	stw	ra,8(sp)
  80bd98:	df000115 	stw	fp,4(sp)
  80bd9c:	df000104 	addi	fp,sp,4
  80bda0:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
  80bda4:	e13fff17 	ldw	r4,-4(fp)
  80bda8:	000b883a 	mov	r5,zero
  80bdac:	080bce00 	call	80bce0 <perf_get_section_time>
  80bdb0:	1009883a 	mov	r4,r2
  80bdb4:	180b883a 	mov	r5,r3
  80bdb8:	200d883a 	mov	r6,r4
  80bdbc:	280f883a 	mov	r7,r5
  80bdc0:	3007883a 	mov	r3,r6
  80bdc4:	3809883a 	mov	r4,r7
}
  80bdc8:	1805883a 	mov	r2,r3
  80bdcc:	2007883a 	mov	r3,r4
  80bdd0:	e037883a 	mov	sp,fp
  80bdd4:	dfc00117 	ldw	ra,4(sp)
  80bdd8:	df000017 	ldw	fp,0(sp)
  80bddc:	dec00204 	addi	sp,sp,8
  80bde0:	f800283a 	ret

0080bde4 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  80bde4:	defffd04 	addi	sp,sp,-12
  80bde8:	df000215 	stw	fp,8(sp)
  80bdec:	df000204 	addi	fp,sp,8
  80bdf0:	e13ffe15 	stw	r4,-8(fp)
  80bdf4:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
  80bdf8:	e0bfff17 	ldw	r2,-4(fp)
  80bdfc:	1004913a 	slli	r2,r2,4
  80be00:	1007883a 	mov	r3,r2
  80be04:	e0bffe17 	ldw	r2,-8(fp)
  80be08:	1885883a 	add	r2,r3,r2
  80be0c:	10800204 	addi	r2,r2,8
  80be10:	10800037 	ldwio	r2,0(r2)
}
  80be14:	e037883a 	mov	sp,fp
  80be18:	df000017 	ldw	fp,0(sp)
  80be1c:	dec00104 	addi	sp,sp,4
  80be20:	f800283a 	ret

0080be24 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
  80be24:	deffff04 	addi	sp,sp,-4
  80be28:	df000015 	stw	fp,0(sp)
  80be2c:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
  80be30:	0005883a 	mov	r2,zero
#endif
}
  80be34:	e037883a 	mov	sp,fp
  80be38:	df000017 	ldw	fp,0(sp)
  80be3c:	dec00104 	addi	sp,sp,4
  80be40:	f800283a 	ret

0080be44 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
  80be44:	deffff04 	addi	sp,sp,-4
  80be48:	df000015 	stw	fp,0(sp)
  80be4c:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
  80be50:	0080bef4 	movhi	r2,763
  80be54:	10bc2004 	addi	r2,r2,-3968
}
  80be58:	e037883a 	mov	sp,fp
  80be5c:	df000017 	ldw	fp,0(sp)
  80be60:	dec00104 	addi	sp,sp,4
  80be64:	f800283a 	ret

0080be68 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80be68:	defffa04 	addi	sp,sp,-24
  80be6c:	dfc00515 	stw	ra,20(sp)
  80be70:	df000415 	stw	fp,16(sp)
  80be74:	df000404 	addi	fp,sp,16
  80be78:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80be7c:	e0bfff17 	ldw	r2,-4(fp)
  80be80:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80be84:	e0bfff17 	ldw	r2,-4(fp)
  80be88:	10800104 	addi	r2,r2,4
  80be8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80be90:	0005303a 	rdctl	r2,status
  80be94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80be98:	e0fffd17 	ldw	r3,-12(fp)
  80be9c:	00bfff84 	movi	r2,-2
  80bea0:	1884703a 	and	r2,r3,r2
  80bea4:	1001703a 	wrctl	status,r2
  
  return context;
  80bea8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80beac:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80beb0:	080ca680 	call	80ca68 <alt_tick>
  80beb4:	e0bffe17 	ldw	r2,-8(fp)
  80beb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80bebc:	e0bffc17 	ldw	r2,-16(fp)
  80bec0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80bec4:	e037883a 	mov	sp,fp
  80bec8:	dfc00117 	ldw	ra,4(sp)
  80becc:	df000017 	ldw	fp,0(sp)
  80bed0:	dec00204 	addi	sp,sp,8
  80bed4:	f800283a 	ret

0080bed8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80bed8:	defff804 	addi	sp,sp,-32
  80bedc:	dfc00715 	stw	ra,28(sp)
  80bee0:	df000615 	stw	fp,24(sp)
  80bee4:	df000604 	addi	fp,sp,24
  80bee8:	e13ffc15 	stw	r4,-16(fp)
  80beec:	e17ffd15 	stw	r5,-12(fp)
  80bef0:	e1bffe15 	stw	r6,-8(fp)
  80bef4:	e1ffff15 	stw	r7,-4(fp)
  80bef8:	e0bfff17 	ldw	r2,-4(fp)
  80befc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80bf00:	00802074 	movhi	r2,129
  80bf04:	1082b004 	addi	r2,r2,2752
  80bf08:	10800017 	ldw	r2,0(r2)
  80bf0c:	1004c03a 	cmpne	r2,r2,zero
  80bf10:	1000041e 	bne	r2,zero,80bf24 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80bf14:	00c02074 	movhi	r3,129
  80bf18:	18c2b004 	addi	r3,r3,2752
  80bf1c:	e0bffb17 	ldw	r2,-20(fp)
  80bf20:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80bf24:	e0bffc17 	ldw	r2,-16(fp)
  80bf28:	10800104 	addi	r2,r2,4
  80bf2c:	1007883a 	mov	r3,r2
  80bf30:	008001c4 	movi	r2,7
  80bf34:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80bf38:	d8000015 	stw	zero,0(sp)
  80bf3c:	e13ffd17 	ldw	r4,-12(fp)
  80bf40:	e17ffe17 	ldw	r5,-8(fp)
  80bf44:	01802074 	movhi	r6,129
  80bf48:	31af9a04 	addi	r6,r6,-16792
  80bf4c:	e1fffc17 	ldw	r7,-16(fp)
  80bf50:	080c2d00 	call	80c2d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80bf54:	e037883a 	mov	sp,fp
  80bf58:	dfc00117 	ldw	ra,4(sp)
  80bf5c:	df000017 	ldw	fp,0(sp)
  80bf60:	dec00204 	addi	sp,sp,8
  80bf64:	f800283a 	ret

0080bf68 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80bf68:	defff404 	addi	sp,sp,-48
  80bf6c:	df000b15 	stw	fp,44(sp)
  80bf70:	df000b04 	addi	fp,sp,44
  80bf74:	e13ffb15 	stw	r4,-20(fp)
  80bf78:	e17ffc15 	stw	r5,-16(fp)
  80bf7c:	e1bffd15 	stw	r6,-12(fp)
  80bf80:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80bf84:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80bf88:	00802074 	movhi	r2,129
  80bf8c:	1082b004 	addi	r2,r2,2752
  80bf90:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80bf94:	1005003a 	cmpeq	r2,r2,zero
  80bf98:	1000411e 	bne	r2,zero,80c0a0 <alt_alarm_start+0x138>
  {
    if (alarm)
  80bf9c:	e0bffb17 	ldw	r2,-20(fp)
  80bfa0:	1005003a 	cmpeq	r2,r2,zero
  80bfa4:	10003b1e 	bne	r2,zero,80c094 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80bfa8:	e0fffb17 	ldw	r3,-20(fp)
  80bfac:	e0bffd17 	ldw	r2,-12(fp)
  80bfb0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80bfb4:	e0fffb17 	ldw	r3,-20(fp)
  80bfb8:	e0bffe17 	ldw	r2,-8(fp)
  80bfbc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80bfc0:	0005303a 	rdctl	r2,status
  80bfc4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80bfc8:	e0fff817 	ldw	r3,-32(fp)
  80bfcc:	00bfff84 	movi	r2,-2
  80bfd0:	1884703a 	and	r2,r3,r2
  80bfd4:	1001703a 	wrctl	status,r2
  
  return context;
  80bfd8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80bfdc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80bfe0:	00802074 	movhi	r2,129
  80bfe4:	1082b104 	addi	r2,r2,2756
  80bfe8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80bfec:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80bff0:	e0fffc17 	ldw	r3,-16(fp)
  80bff4:	e0bff917 	ldw	r2,-28(fp)
  80bff8:	1885883a 	add	r2,r3,r2
  80bffc:	10c00044 	addi	r3,r2,1
  80c000:	e0bffb17 	ldw	r2,-20(fp)
  80c004:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80c008:	e0bffb17 	ldw	r2,-20(fp)
  80c00c:	10c00217 	ldw	r3,8(r2)
  80c010:	e0bff917 	ldw	r2,-28(fp)
  80c014:	1880042e 	bgeu	r3,r2,80c028 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80c018:	e0fffb17 	ldw	r3,-20(fp)
  80c01c:	00800044 	movi	r2,1
  80c020:	18800405 	stb	r2,16(r3)
  80c024:	00000206 	br	80c030 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80c028:	e0bffb17 	ldw	r2,-20(fp)
  80c02c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80c030:	e0fffb17 	ldw	r3,-20(fp)
  80c034:	00802074 	movhi	r2,129
  80c038:	10bc0604 	addi	r2,r2,-4072
  80c03c:	e0bff615 	stw	r2,-40(fp)
  80c040:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c044:	e0fff717 	ldw	r3,-36(fp)
  80c048:	e0bff617 	ldw	r2,-40(fp)
  80c04c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80c050:	e0bff617 	ldw	r2,-40(fp)
  80c054:	10c00017 	ldw	r3,0(r2)
  80c058:	e0bff717 	ldw	r2,-36(fp)
  80c05c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c060:	e0bff617 	ldw	r2,-40(fp)
  80c064:	10c00017 	ldw	r3,0(r2)
  80c068:	e0bff717 	ldw	r2,-36(fp)
  80c06c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80c070:	e0fff617 	ldw	r3,-40(fp)
  80c074:	e0bff717 	ldw	r2,-36(fp)
  80c078:	18800015 	stw	r2,0(r3)
  80c07c:	e0bffa17 	ldw	r2,-24(fp)
  80c080:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c084:	e0bff517 	ldw	r2,-44(fp)
  80c088:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80c08c:	e03fff15 	stw	zero,-4(fp)
  80c090:	00000506 	br	80c0a8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80c094:	00bffa84 	movi	r2,-22
  80c098:	e0bfff15 	stw	r2,-4(fp)
  80c09c:	00000206 	br	80c0a8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80c0a0:	00bfde84 	movi	r2,-134
  80c0a4:	e0bfff15 	stw	r2,-4(fp)
  80c0a8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80c0ac:	e037883a 	mov	sp,fp
  80c0b0:	df000017 	ldw	fp,0(sp)
  80c0b4:	dec00104 	addi	sp,sp,4
  80c0b8:	f800283a 	ret

0080c0bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80c0bc:	deffff04 	addi	sp,sp,-4
  80c0c0:	df000015 	stw	fp,0(sp)
  80c0c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80c0c8:	e037883a 	mov	sp,fp
  80c0cc:	df000017 	ldw	fp,0(sp)
  80c0d0:	dec00104 	addi	sp,sp,4
  80c0d4:	f800283a 	ret

0080c0d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80c0d8:	defff904 	addi	sp,sp,-28
  80c0dc:	dfc00615 	stw	ra,24(sp)
  80c0e0:	df000515 	stw	fp,20(sp)
  80c0e4:	df000504 	addi	fp,sp,20
  80c0e8:	e13ffd15 	stw	r4,-12(fp)
  80c0ec:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80c0f0:	e0bffd17 	ldw	r2,-12(fp)
  80c0f4:	1005003a 	cmpeq	r2,r2,zero
  80c0f8:	1000041e 	bne	r2,zero,80c10c <alt_dev_llist_insert+0x34>
  80c0fc:	e0bffd17 	ldw	r2,-12(fp)
  80c100:	10800217 	ldw	r2,8(r2)
  80c104:	1004c03a 	cmpne	r2,r2,zero
  80c108:	1000071e 	bne	r2,zero,80c128 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80c10c:	080c18c0 	call	80c18c <alt_get_errno>
  80c110:	1007883a 	mov	r3,r2
  80c114:	00800584 	movi	r2,22
  80c118:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80c11c:	00bffa84 	movi	r2,-22
  80c120:	e0bfff15 	stw	r2,-4(fp)
  80c124:	00001306 	br	80c174 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80c128:	e0fffd17 	ldw	r3,-12(fp)
  80c12c:	e0bffe17 	ldw	r2,-8(fp)
  80c130:	e0bffb15 	stw	r2,-20(fp)
  80c134:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c138:	e0fffc17 	ldw	r3,-16(fp)
  80c13c:	e0bffb17 	ldw	r2,-20(fp)
  80c140:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80c144:	e0bffb17 	ldw	r2,-20(fp)
  80c148:	10c00017 	ldw	r3,0(r2)
  80c14c:	e0bffc17 	ldw	r2,-16(fp)
  80c150:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c154:	e0bffb17 	ldw	r2,-20(fp)
  80c158:	10c00017 	ldw	r3,0(r2)
  80c15c:	e0bffc17 	ldw	r2,-16(fp)
  80c160:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80c164:	e0fffb17 	ldw	r3,-20(fp)
  80c168:	e0bffc17 	ldw	r2,-16(fp)
  80c16c:	18800015 	stw	r2,0(r3)

  return 0;  
  80c170:	e03fff15 	stw	zero,-4(fp)
  80c174:	e0bfff17 	ldw	r2,-4(fp)
}
  80c178:	e037883a 	mov	sp,fp
  80c17c:	dfc00117 	ldw	ra,4(sp)
  80c180:	df000017 	ldw	fp,0(sp)
  80c184:	dec00204 	addi	sp,sp,8
  80c188:	f800283a 	ret

0080c18c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c18c:	defffd04 	addi	sp,sp,-12
  80c190:	dfc00215 	stw	ra,8(sp)
  80c194:	df000115 	stw	fp,4(sp)
  80c198:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c19c:	00802074 	movhi	r2,129
  80c1a0:	10bc0304 	addi	r2,r2,-4084
  80c1a4:	10800017 	ldw	r2,0(r2)
  80c1a8:	1005003a 	cmpeq	r2,r2,zero
  80c1ac:	1000061e 	bne	r2,zero,80c1c8 <alt_get_errno+0x3c>
  80c1b0:	00802074 	movhi	r2,129
  80c1b4:	10bc0304 	addi	r2,r2,-4084
  80c1b8:	10800017 	ldw	r2,0(r2)
  80c1bc:	103ee83a 	callr	r2
  80c1c0:	e0bfff15 	stw	r2,-4(fp)
  80c1c4:	00000306 	br	80c1d4 <alt_get_errno+0x48>
  80c1c8:	00802074 	movhi	r2,129
  80c1cc:	1082a904 	addi	r2,r2,2724
  80c1d0:	e0bfff15 	stw	r2,-4(fp)
  80c1d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c1d8:	e037883a 	mov	sp,fp
  80c1dc:	dfc00117 	ldw	ra,4(sp)
  80c1e0:	df000017 	ldw	fp,0(sp)
  80c1e4:	dec00204 	addi	sp,sp,8
  80c1e8:	f800283a 	ret

0080c1ec <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80c1ec:	defffd04 	addi	sp,sp,-12
  80c1f0:	dfc00215 	stw	ra,8(sp)
  80c1f4:	df000115 	stw	fp,4(sp)
  80c1f8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c1fc:	00bfff04 	movi	r2,-4
  80c200:	00c02074 	movhi	r3,129
  80c204:	18f48904 	addi	r3,r3,-11740
  80c208:	1885883a 	add	r2,r3,r2
  80c20c:	e0bfff15 	stw	r2,-4(fp)
  80c210:	00000606 	br	80c22c <_do_ctors+0x40>
        (*ctor) (); 
  80c214:	e0bfff17 	ldw	r2,-4(fp)
  80c218:	10800017 	ldw	r2,0(r2)
  80c21c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80c220:	e0bfff17 	ldw	r2,-4(fp)
  80c224:	10bfff04 	addi	r2,r2,-4
  80c228:	e0bfff15 	stw	r2,-4(fp)
  80c22c:	e0ffff17 	ldw	r3,-4(fp)
  80c230:	00802074 	movhi	r2,129
  80c234:	10b48804 	addi	r2,r2,-11744
  80c238:	18bff62e 	bgeu	r3,r2,80c214 <_do_ctors+0x28>
        (*ctor) (); 
}
  80c23c:	e037883a 	mov	sp,fp
  80c240:	dfc00117 	ldw	ra,4(sp)
  80c244:	df000017 	ldw	fp,0(sp)
  80c248:	dec00204 	addi	sp,sp,8
  80c24c:	f800283a 	ret

0080c250 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80c250:	defffd04 	addi	sp,sp,-12
  80c254:	dfc00215 	stw	ra,8(sp)
  80c258:	df000115 	stw	fp,4(sp)
  80c25c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c260:	00bfff04 	movi	r2,-4
  80c264:	00c02074 	movhi	r3,129
  80c268:	18f48904 	addi	r3,r3,-11740
  80c26c:	1885883a 	add	r2,r3,r2
  80c270:	e0bfff15 	stw	r2,-4(fp)
  80c274:	00000606 	br	80c290 <_do_dtors+0x40>
        (*dtor) (); 
  80c278:	e0bfff17 	ldw	r2,-4(fp)
  80c27c:	10800017 	ldw	r2,0(r2)
  80c280:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80c284:	e0bfff17 	ldw	r2,-4(fp)
  80c288:	10bfff04 	addi	r2,r2,-4
  80c28c:	e0bfff15 	stw	r2,-4(fp)
  80c290:	e0ffff17 	ldw	r3,-4(fp)
  80c294:	00802074 	movhi	r2,129
  80c298:	10b48904 	addi	r2,r2,-11740
  80c29c:	18bff62e 	bgeu	r3,r2,80c278 <_do_dtors+0x28>
        (*dtor) (); 
}
  80c2a0:	e037883a 	mov	sp,fp
  80c2a4:	dfc00117 	ldw	ra,4(sp)
  80c2a8:	df000017 	ldw	fp,0(sp)
  80c2ac:	dec00204 	addi	sp,sp,8
  80c2b0:	f800283a 	ret

0080c2b4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80c2b4:	deffff04 	addi	sp,sp,-4
  80c2b8:	df000015 	stw	fp,0(sp)
  80c2bc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80c2c0:	e037883a 	mov	sp,fp
  80c2c4:	df000017 	ldw	fp,0(sp)
  80c2c8:	dec00104 	addi	sp,sp,4
  80c2cc:	f800283a 	ret

0080c2d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c2d0:	defff904 	addi	sp,sp,-28
  80c2d4:	dfc00615 	stw	ra,24(sp)
  80c2d8:	df000515 	stw	fp,20(sp)
  80c2dc:	df000504 	addi	fp,sp,20
  80c2e0:	e13ffc15 	stw	r4,-16(fp)
  80c2e4:	e17ffd15 	stw	r5,-12(fp)
  80c2e8:	e1bffe15 	stw	r6,-8(fp)
  80c2ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80c2f0:	e0800217 	ldw	r2,8(fp)
  80c2f4:	d8800015 	stw	r2,0(sp)
  80c2f8:	e13ffc17 	ldw	r4,-16(fp)
  80c2fc:	e17ffd17 	ldw	r5,-12(fp)
  80c300:	e1bffe17 	ldw	r6,-8(fp)
  80c304:	e1ffff17 	ldw	r7,-4(fp)
  80c308:	080c4a40 	call	80c4a4 <alt_iic_isr_register>
}  
  80c30c:	e037883a 	mov	sp,fp
  80c310:	dfc00117 	ldw	ra,4(sp)
  80c314:	df000017 	ldw	fp,0(sp)
  80c318:	dec00204 	addi	sp,sp,8
  80c31c:	f800283a 	ret

0080c320 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80c320:	defff904 	addi	sp,sp,-28
  80c324:	df000615 	stw	fp,24(sp)
  80c328:	df000604 	addi	fp,sp,24
  80c32c:	e13ffe15 	stw	r4,-8(fp)
  80c330:	e17fff15 	stw	r5,-4(fp)
  80c334:	e0bfff17 	ldw	r2,-4(fp)
  80c338:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c33c:	0005303a 	rdctl	r2,status
  80c340:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c344:	e0fffb17 	ldw	r3,-20(fp)
  80c348:	00bfff84 	movi	r2,-2
  80c34c:	1884703a 	and	r2,r3,r2
  80c350:	1001703a 	wrctl	status,r2
  
  return context;
  80c354:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80c358:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80c35c:	e0fffc17 	ldw	r3,-16(fp)
  80c360:	00800044 	movi	r2,1
  80c364:	10c4983a 	sll	r2,r2,r3
  80c368:	1007883a 	mov	r3,r2
  80c36c:	00802074 	movhi	r2,129
  80c370:	1082af04 	addi	r2,r2,2748
  80c374:	10800017 	ldw	r2,0(r2)
  80c378:	1886b03a 	or	r3,r3,r2
  80c37c:	00802074 	movhi	r2,129
  80c380:	1082af04 	addi	r2,r2,2748
  80c384:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c388:	00802074 	movhi	r2,129
  80c38c:	1082af04 	addi	r2,r2,2748
  80c390:	10800017 	ldw	r2,0(r2)
  80c394:	100170fa 	wrctl	ienable,r2
  80c398:	e0bffd17 	ldw	r2,-12(fp)
  80c39c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c3a0:	e0bffa17 	ldw	r2,-24(fp)
  80c3a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80c3a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80c3ac:	e037883a 	mov	sp,fp
  80c3b0:	df000017 	ldw	fp,0(sp)
  80c3b4:	dec00104 	addi	sp,sp,4
  80c3b8:	f800283a 	ret

0080c3bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80c3bc:	defff904 	addi	sp,sp,-28
  80c3c0:	df000615 	stw	fp,24(sp)
  80c3c4:	df000604 	addi	fp,sp,24
  80c3c8:	e13ffe15 	stw	r4,-8(fp)
  80c3cc:	e17fff15 	stw	r5,-4(fp)
  80c3d0:	e0bfff17 	ldw	r2,-4(fp)
  80c3d4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c3d8:	0005303a 	rdctl	r2,status
  80c3dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c3e0:	e0fffb17 	ldw	r3,-20(fp)
  80c3e4:	00bfff84 	movi	r2,-2
  80c3e8:	1884703a 	and	r2,r3,r2
  80c3ec:	1001703a 	wrctl	status,r2
  
  return context;
  80c3f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80c3f4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80c3f8:	e0fffc17 	ldw	r3,-16(fp)
  80c3fc:	00800044 	movi	r2,1
  80c400:	10c4983a 	sll	r2,r2,r3
  80c404:	0084303a 	nor	r2,zero,r2
  80c408:	1007883a 	mov	r3,r2
  80c40c:	00802074 	movhi	r2,129
  80c410:	1082af04 	addi	r2,r2,2748
  80c414:	10800017 	ldw	r2,0(r2)
  80c418:	1886703a 	and	r3,r3,r2
  80c41c:	00802074 	movhi	r2,129
  80c420:	1082af04 	addi	r2,r2,2748
  80c424:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80c428:	00802074 	movhi	r2,129
  80c42c:	1082af04 	addi	r2,r2,2748
  80c430:	10800017 	ldw	r2,0(r2)
  80c434:	100170fa 	wrctl	ienable,r2
  80c438:	e0bffd17 	ldw	r2,-12(fp)
  80c43c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c440:	e0bffa17 	ldw	r2,-24(fp)
  80c444:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80c448:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80c44c:	e037883a 	mov	sp,fp
  80c450:	df000017 	ldw	fp,0(sp)
  80c454:	dec00104 	addi	sp,sp,4
  80c458:	f800283a 	ret

0080c45c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80c45c:	defffc04 	addi	sp,sp,-16
  80c460:	df000315 	stw	fp,12(sp)
  80c464:	df000304 	addi	fp,sp,12
  80c468:	e13ffe15 	stw	r4,-8(fp)
  80c46c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80c470:	000530fa 	rdctl	r2,ienable
  80c474:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80c478:	e0ffff17 	ldw	r3,-4(fp)
  80c47c:	00800044 	movi	r2,1
  80c480:	10c4983a 	sll	r2,r2,r3
  80c484:	1007883a 	mov	r3,r2
  80c488:	e0bffd17 	ldw	r2,-12(fp)
  80c48c:	1884703a 	and	r2,r3,r2
  80c490:	1004c03a 	cmpne	r2,r2,zero
}
  80c494:	e037883a 	mov	sp,fp
  80c498:	df000017 	ldw	fp,0(sp)
  80c49c:	dec00104 	addi	sp,sp,4
  80c4a0:	f800283a 	ret

0080c4a4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80c4a4:	defff404 	addi	sp,sp,-48
  80c4a8:	dfc00b15 	stw	ra,44(sp)
  80c4ac:	df000a15 	stw	fp,40(sp)
  80c4b0:	df000a04 	addi	fp,sp,40
  80c4b4:	e13ffb15 	stw	r4,-20(fp)
  80c4b8:	e17ffc15 	stw	r5,-16(fp)
  80c4bc:	e1bffd15 	stw	r6,-12(fp)
  80c4c0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80c4c4:	00bffa84 	movi	r2,-22
  80c4c8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80c4cc:	e0bffc17 	ldw	r2,-16(fp)
  80c4d0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80c4d4:	e0bff917 	ldw	r2,-28(fp)
  80c4d8:	10800808 	cmpgei	r2,r2,32
  80c4dc:	1000291e 	bne	r2,zero,80c584 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4e0:	0005303a 	rdctl	r2,status
  80c4e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c4e8:	e0fff717 	ldw	r3,-36(fp)
  80c4ec:	00bfff84 	movi	r2,-2
  80c4f0:	1884703a 	and	r2,r3,r2
  80c4f4:	1001703a 	wrctl	status,r2
  
  return context;
  80c4f8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80c4fc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80c500:	e0bff917 	ldw	r2,-28(fp)
  80c504:	00c02074 	movhi	r3,129
  80c508:	18d2bc04 	addi	r3,r3,19184
  80c50c:	100490fa 	slli	r2,r2,3
  80c510:	10c7883a 	add	r3,r2,r3
  80c514:	e0bffd17 	ldw	r2,-12(fp)
  80c518:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80c51c:	e0bff917 	ldw	r2,-28(fp)
  80c520:	00c02074 	movhi	r3,129
  80c524:	18d2bc04 	addi	r3,r3,19184
  80c528:	100490fa 	slli	r2,r2,3
  80c52c:	10c5883a 	add	r2,r2,r3
  80c530:	10c00104 	addi	r3,r2,4
  80c534:	e0bffe17 	ldw	r2,-8(fp)
  80c538:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80c53c:	e0bffd17 	ldw	r2,-12(fp)
  80c540:	1005003a 	cmpeq	r2,r2,zero
  80c544:	1000051e 	bne	r2,zero,80c55c <alt_iic_isr_register+0xb8>
  80c548:	e17ff917 	ldw	r5,-28(fp)
  80c54c:	e13ffb17 	ldw	r4,-20(fp)
  80c550:	080c3200 	call	80c320 <alt_ic_irq_enable>
  80c554:	e0bfff15 	stw	r2,-4(fp)
  80c558:	00000406 	br	80c56c <alt_iic_isr_register+0xc8>
  80c55c:	e17ff917 	ldw	r5,-28(fp)
  80c560:	e13ffb17 	ldw	r4,-20(fp)
  80c564:	080c3bc0 	call	80c3bc <alt_ic_irq_disable>
  80c568:	e0bfff15 	stw	r2,-4(fp)
  80c56c:	e0bfff17 	ldw	r2,-4(fp)
  80c570:	e0bffa15 	stw	r2,-24(fp)
  80c574:	e0bff817 	ldw	r2,-32(fp)
  80c578:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c57c:	e0bff617 	ldw	r2,-40(fp)
  80c580:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80c584:	e0bffa17 	ldw	r2,-24(fp)
}
  80c588:	e037883a 	mov	sp,fp
  80c58c:	dfc00117 	ldw	ra,4(sp)
  80c590:	df000017 	ldw	fp,0(sp)
  80c594:	dec00204 	addi	sp,sp,8
  80c598:	f800283a 	ret

0080c59c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80c59c:	defff804 	addi	sp,sp,-32
  80c5a0:	dfc00715 	stw	ra,28(sp)
  80c5a4:	df000615 	stw	fp,24(sp)
  80c5a8:	dc000515 	stw	r16,20(sp)
  80c5ac:	df000504 	addi	fp,sp,20
  80c5b0:	e13ffc15 	stw	r4,-16(fp)
  80c5b4:	e17ffd15 	stw	r5,-12(fp)
  80c5b8:	e1bffe15 	stw	r6,-8(fp)
  80c5bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80c5c0:	e13ffd17 	ldw	r4,-12(fp)
  80c5c4:	e17ffe17 	ldw	r5,-8(fp)
  80c5c8:	e1bfff17 	ldw	r6,-4(fp)
  80c5cc:	080c7e40 	call	80c7e4 <open>
  80c5d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80c5d4:	e0bffb17 	ldw	r2,-20(fp)
  80c5d8:	1004803a 	cmplt	r2,r2,zero
  80c5dc:	10001f1e 	bne	r2,zero,80c65c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80c5e0:	e13ffb17 	ldw	r4,-20(fp)
  80c5e4:	04002074 	movhi	r16,129
  80c5e8:	84378004 	addi	r16,r16,-8704
  80c5ec:	01400304 	movi	r5,12
  80c5f0:	08016000 	call	801600 <__mulsi3>
  80c5f4:	1405883a 	add	r2,r2,r16
  80c5f8:	10c00017 	ldw	r3,0(r2)
  80c5fc:	e0bffc17 	ldw	r2,-16(fp)
  80c600:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80c604:	e13ffb17 	ldw	r4,-20(fp)
  80c608:	04002074 	movhi	r16,129
  80c60c:	84378004 	addi	r16,r16,-8704
  80c610:	01400304 	movi	r5,12
  80c614:	08016000 	call	801600 <__mulsi3>
  80c618:	1405883a 	add	r2,r2,r16
  80c61c:	10800104 	addi	r2,r2,4
  80c620:	10c00017 	ldw	r3,0(r2)
  80c624:	e0bffc17 	ldw	r2,-16(fp)
  80c628:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80c62c:	e13ffb17 	ldw	r4,-20(fp)
  80c630:	04002074 	movhi	r16,129
  80c634:	84378004 	addi	r16,r16,-8704
  80c638:	01400304 	movi	r5,12
  80c63c:	08016000 	call	801600 <__mulsi3>
  80c640:	1405883a 	add	r2,r2,r16
  80c644:	10800204 	addi	r2,r2,8
  80c648:	10c00017 	ldw	r3,0(r2)
  80c64c:	e0bffc17 	ldw	r2,-16(fp)
  80c650:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80c654:	e13ffb17 	ldw	r4,-20(fp)
  80c658:	080ae7c0 	call	80ae7c <alt_release_fd>
  }
} 
  80c65c:	e037883a 	mov	sp,fp
  80c660:	dfc00217 	ldw	ra,8(sp)
  80c664:	df000117 	ldw	fp,4(sp)
  80c668:	dc000017 	ldw	r16,0(sp)
  80c66c:	dec00304 	addi	sp,sp,12
  80c670:	f800283a 	ret

0080c674 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80c674:	defffb04 	addi	sp,sp,-20
  80c678:	dfc00415 	stw	ra,16(sp)
  80c67c:	df000315 	stw	fp,12(sp)
  80c680:	df000304 	addi	fp,sp,12
  80c684:	e13ffd15 	stw	r4,-12(fp)
  80c688:	e17ffe15 	stw	r5,-8(fp)
  80c68c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80c690:	01002074 	movhi	r4,129
  80c694:	21378304 	addi	r4,r4,-8692
  80c698:	e17ffd17 	ldw	r5,-12(fp)
  80c69c:	01800044 	movi	r6,1
  80c6a0:	01c07fc4 	movi	r7,511
  80c6a4:	080c59c0 	call	80c59c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80c6a8:	01002074 	movhi	r4,129
  80c6ac:	21378004 	addi	r4,r4,-8704
  80c6b0:	e17ffe17 	ldw	r5,-8(fp)
  80c6b4:	000d883a 	mov	r6,zero
  80c6b8:	01c07fc4 	movi	r7,511
  80c6bc:	080c59c0 	call	80c59c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80c6c0:	01002074 	movhi	r4,129
  80c6c4:	21378604 	addi	r4,r4,-8680
  80c6c8:	e17fff17 	ldw	r5,-4(fp)
  80c6cc:	01800044 	movi	r6,1
  80c6d0:	01c07fc4 	movi	r7,511
  80c6d4:	080c59c0 	call	80c59c <alt_open_fd>
}  
  80c6d8:	e037883a 	mov	sp,fp
  80c6dc:	dfc00117 	ldw	ra,4(sp)
  80c6e0:	df000017 	ldw	fp,0(sp)
  80c6e4:	dec00204 	addi	sp,sp,8
  80c6e8:	f800283a 	ret

0080c6ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80c6ec:	defffa04 	addi	sp,sp,-24
  80c6f0:	dfc00515 	stw	ra,20(sp)
  80c6f4:	df000415 	stw	fp,16(sp)
  80c6f8:	dc000315 	stw	r16,12(sp)
  80c6fc:	df000304 	addi	fp,sp,12
  80c700:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80c704:	e0bffe17 	ldw	r2,-8(fp)
  80c708:	10800217 	ldw	r2,8(r2)
  80c70c:	10d00034 	orhi	r3,r2,16384
  80c710:	e0bffe17 	ldw	r2,-8(fp)
  80c714:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c718:	e03ffd15 	stw	zero,-12(fp)
  80c71c:	00002306 	br	80c7ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80c720:	e13ffd17 	ldw	r4,-12(fp)
  80c724:	04002074 	movhi	r16,129
  80c728:	84378004 	addi	r16,r16,-8704
  80c72c:	01400304 	movi	r5,12
  80c730:	08016000 	call	801600 <__mulsi3>
  80c734:	1405883a 	add	r2,r2,r16
  80c738:	10c00017 	ldw	r3,0(r2)
  80c73c:	e0bffe17 	ldw	r2,-8(fp)
  80c740:	10800017 	ldw	r2,0(r2)
  80c744:	1880161e 	bne	r3,r2,80c7a0 <alt_file_locked+0xb4>
  80c748:	e13ffd17 	ldw	r4,-12(fp)
  80c74c:	04002074 	movhi	r16,129
  80c750:	84378004 	addi	r16,r16,-8704
  80c754:	01400304 	movi	r5,12
  80c758:	08016000 	call	801600 <__mulsi3>
  80c75c:	1405883a 	add	r2,r2,r16
  80c760:	10800204 	addi	r2,r2,8
  80c764:	10800017 	ldw	r2,0(r2)
  80c768:	1004403a 	cmpge	r2,r2,zero
  80c76c:	10000c1e 	bne	r2,zero,80c7a0 <alt_file_locked+0xb4>
  80c770:	e13ffd17 	ldw	r4,-12(fp)
  80c774:	01400304 	movi	r5,12
  80c778:	08016000 	call	801600 <__mulsi3>
  80c77c:	1007883a 	mov	r3,r2
  80c780:	00802074 	movhi	r2,129
  80c784:	10b78004 	addi	r2,r2,-8704
  80c788:	1887883a 	add	r3,r3,r2
  80c78c:	e0bffe17 	ldw	r2,-8(fp)
  80c790:	18800326 	beq	r3,r2,80c7a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80c794:	00bffcc4 	movi	r2,-13
  80c798:	e0bfff15 	stw	r2,-4(fp)
  80c79c:	00000a06 	br	80c7c8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80c7a0:	e0bffd17 	ldw	r2,-12(fp)
  80c7a4:	10800044 	addi	r2,r2,1
  80c7a8:	e0bffd15 	stw	r2,-12(fp)
  80c7ac:	00802074 	movhi	r2,129
  80c7b0:	10bc0204 	addi	r2,r2,-4088
  80c7b4:	10800017 	ldw	r2,0(r2)
  80c7b8:	1007883a 	mov	r3,r2
  80c7bc:	e0bffd17 	ldw	r2,-12(fp)
  80c7c0:	18bfd72e 	bgeu	r3,r2,80c720 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80c7c4:	e03fff15 	stw	zero,-4(fp)
  80c7c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80c7cc:	e037883a 	mov	sp,fp
  80c7d0:	dfc00217 	ldw	ra,8(sp)
  80c7d4:	df000117 	ldw	fp,4(sp)
  80c7d8:	dc000017 	ldw	r16,0(sp)
  80c7dc:	dec00304 	addi	sp,sp,12
  80c7e0:	f800283a 	ret

0080c7e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80c7e4:	defff404 	addi	sp,sp,-48
  80c7e8:	dfc00b15 	stw	ra,44(sp)
  80c7ec:	df000a15 	stw	fp,40(sp)
  80c7f0:	df000a04 	addi	fp,sp,40
  80c7f4:	e13ffb15 	stw	r4,-20(fp)
  80c7f8:	e17ffc15 	stw	r5,-16(fp)
  80c7fc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80c800:	00bfffc4 	movi	r2,-1
  80c804:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80c808:	00bffb44 	movi	r2,-19
  80c80c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80c810:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80c814:	e13ffb17 	ldw	r4,-20(fp)
  80c818:	01402074 	movhi	r5,129
  80c81c:	297c0004 	addi	r5,r5,-4096
  80c820:	080cb940 	call	80cb94 <alt_find_dev>
  80c824:	e0bffa15 	stw	r2,-24(fp)
  80c828:	e0bffa17 	ldw	r2,-24(fp)
  80c82c:	1004c03a 	cmpne	r2,r2,zero
  80c830:	1000051e 	bne	r2,zero,80c848 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80c834:	e13ffb17 	ldw	r4,-20(fp)
  80c838:	080cc280 	call	80cc28 <alt_find_file>
  80c83c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80c840:	00800044 	movi	r2,1
  80c844:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80c848:	e0bffa17 	ldw	r2,-24(fp)
  80c84c:	1005003a 	cmpeq	r2,r2,zero
  80c850:	1000311e 	bne	r2,zero,80c918 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80c854:	e13ffa17 	ldw	r4,-24(fp)
  80c858:	080cd480 	call	80cd48 <alt_get_fd>
  80c85c:	e0bff815 	stw	r2,-32(fp)
  80c860:	e0bff817 	ldw	r2,-32(fp)
  80c864:	1004403a 	cmpge	r2,r2,zero
  80c868:	1000031e 	bne	r2,zero,80c878 <open+0x94>
    {
      status = index;
  80c86c:	e0bff817 	ldw	r2,-32(fp)
  80c870:	e0bff715 	stw	r2,-36(fp)
  80c874:	00002a06 	br	80c920 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80c878:	e13ff817 	ldw	r4,-32(fp)
  80c87c:	01400304 	movi	r5,12
  80c880:	08016000 	call	801600 <__mulsi3>
  80c884:	1007883a 	mov	r3,r2
  80c888:	00802074 	movhi	r2,129
  80c88c:	10b78004 	addi	r2,r2,-8704
  80c890:	1885883a 	add	r2,r3,r2
  80c894:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80c898:	e0fffc17 	ldw	r3,-16(fp)
  80c89c:	00900034 	movhi	r2,16384
  80c8a0:	10bfffc4 	addi	r2,r2,-1
  80c8a4:	1886703a 	and	r3,r3,r2
  80c8a8:	e0bff917 	ldw	r2,-28(fp)
  80c8ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80c8b0:	e0bff617 	ldw	r2,-40(fp)
  80c8b4:	1004c03a 	cmpne	r2,r2,zero
  80c8b8:	1000061e 	bne	r2,zero,80c8d4 <open+0xf0>
  80c8bc:	e13ff917 	ldw	r4,-28(fp)
  80c8c0:	080c6ec0 	call	80c6ec <alt_file_locked>
  80c8c4:	e0bff715 	stw	r2,-36(fp)
  80c8c8:	e0bff717 	ldw	r2,-36(fp)
  80c8cc:	1004803a 	cmplt	r2,r2,zero
  80c8d0:	1000131e 	bne	r2,zero,80c920 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80c8d4:	e0bffa17 	ldw	r2,-24(fp)
  80c8d8:	10800317 	ldw	r2,12(r2)
  80c8dc:	1005003a 	cmpeq	r2,r2,zero
  80c8e0:	1000091e 	bne	r2,zero,80c908 <open+0x124>
  80c8e4:	e0bffa17 	ldw	r2,-24(fp)
  80c8e8:	10800317 	ldw	r2,12(r2)
  80c8ec:	e13ff917 	ldw	r4,-28(fp)
  80c8f0:	e17ffb17 	ldw	r5,-20(fp)
  80c8f4:	e1bffc17 	ldw	r6,-16(fp)
  80c8f8:	e1fffd17 	ldw	r7,-12(fp)
  80c8fc:	103ee83a 	callr	r2
  80c900:	e0bfff15 	stw	r2,-4(fp)
  80c904:	00000106 	br	80c90c <open+0x128>
  80c908:	e03fff15 	stw	zero,-4(fp)
  80c90c:	e0bfff17 	ldw	r2,-4(fp)
  80c910:	e0bff715 	stw	r2,-36(fp)
  80c914:	00000206 	br	80c920 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80c918:	00bffb44 	movi	r2,-19
  80c91c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80c920:	e0bff717 	ldw	r2,-36(fp)
  80c924:	1004403a 	cmpge	r2,r2,zero
  80c928:	1000091e 	bne	r2,zero,80c950 <open+0x16c>
  {
    alt_release_fd (index);  
  80c92c:	e13ff817 	ldw	r4,-32(fp)
  80c930:	080ae7c0 	call	80ae7c <alt_release_fd>
    ALT_ERRNO = -status;
  80c934:	080c9700 	call	80c970 <alt_get_errno>
  80c938:	e0fff717 	ldw	r3,-36(fp)
  80c93c:	00c7c83a 	sub	r3,zero,r3
  80c940:	10c00015 	stw	r3,0(r2)
    return -1;
  80c944:	00bfffc4 	movi	r2,-1
  80c948:	e0bffe15 	stw	r2,-8(fp)
  80c94c:	00000206 	br	80c958 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80c950:	e0bff817 	ldw	r2,-32(fp)
  80c954:	e0bffe15 	stw	r2,-8(fp)
  80c958:	e0bffe17 	ldw	r2,-8(fp)
}
  80c95c:	e037883a 	mov	sp,fp
  80c960:	dfc00117 	ldw	ra,4(sp)
  80c964:	df000017 	ldw	fp,0(sp)
  80c968:	dec00204 	addi	sp,sp,8
  80c96c:	f800283a 	ret

0080c970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c970:	defffd04 	addi	sp,sp,-12
  80c974:	dfc00215 	stw	ra,8(sp)
  80c978:	df000115 	stw	fp,4(sp)
  80c97c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c980:	00802074 	movhi	r2,129
  80c984:	10bc0304 	addi	r2,r2,-4084
  80c988:	10800017 	ldw	r2,0(r2)
  80c98c:	1005003a 	cmpeq	r2,r2,zero
  80c990:	1000061e 	bne	r2,zero,80c9ac <alt_get_errno+0x3c>
  80c994:	00802074 	movhi	r2,129
  80c998:	10bc0304 	addi	r2,r2,-4084
  80c99c:	10800017 	ldw	r2,0(r2)
  80c9a0:	103ee83a 	callr	r2
  80c9a4:	e0bfff15 	stw	r2,-4(fp)
  80c9a8:	00000306 	br	80c9b8 <alt_get_errno+0x48>
  80c9ac:	00802074 	movhi	r2,129
  80c9b0:	1082a904 	addi	r2,r2,2724
  80c9b4:	e0bfff15 	stw	r2,-4(fp)
  80c9b8:	e0bfff17 	ldw	r2,-4(fp)
}
  80c9bc:	e037883a 	mov	sp,fp
  80c9c0:	dfc00117 	ldw	ra,4(sp)
  80c9c4:	df000017 	ldw	fp,0(sp)
  80c9c8:	dec00204 	addi	sp,sp,8
  80c9cc:	f800283a 	ret

0080c9d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80c9d0:	defffa04 	addi	sp,sp,-24
  80c9d4:	df000515 	stw	fp,20(sp)
  80c9d8:	df000504 	addi	fp,sp,20
  80c9dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c9e0:	0005303a 	rdctl	r2,status
  80c9e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c9e8:	e0fffd17 	ldw	r3,-12(fp)
  80c9ec:	00bfff84 	movi	r2,-2
  80c9f0:	1884703a 	and	r2,r3,r2
  80c9f4:	1001703a 	wrctl	status,r2
  
  return context;
  80c9f8:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80c9fc:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80ca00:	e0bfff17 	ldw	r2,-4(fp)
  80ca04:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80ca08:	e0bffc17 	ldw	r2,-16(fp)
  80ca0c:	10c00017 	ldw	r3,0(r2)
  80ca10:	e0bffc17 	ldw	r2,-16(fp)
  80ca14:	10800117 	ldw	r2,4(r2)
  80ca18:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80ca1c:	e0bffc17 	ldw	r2,-16(fp)
  80ca20:	10c00117 	ldw	r3,4(r2)
  80ca24:	e0bffc17 	ldw	r2,-16(fp)
  80ca28:	10800017 	ldw	r2,0(r2)
  80ca2c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80ca30:	e0fffc17 	ldw	r3,-16(fp)
  80ca34:	e0bffc17 	ldw	r2,-16(fp)
  80ca38:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80ca3c:	e0fffc17 	ldw	r3,-16(fp)
  80ca40:	e0bffc17 	ldw	r2,-16(fp)
  80ca44:	18800015 	stw	r2,0(r3)
  80ca48:	e0bffe17 	ldw	r2,-8(fp)
  80ca4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ca50:	e0bffb17 	ldw	r2,-20(fp)
  80ca54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80ca58:	e037883a 	mov	sp,fp
  80ca5c:	df000017 	ldw	fp,0(sp)
  80ca60:	dec00104 	addi	sp,sp,4
  80ca64:	f800283a 	ret

0080ca68 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80ca68:	defffb04 	addi	sp,sp,-20
  80ca6c:	dfc00415 	stw	ra,16(sp)
  80ca70:	df000315 	stw	fp,12(sp)
  80ca74:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80ca78:	d0a00e17 	ldw	r2,-32712(gp)
  80ca7c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80ca80:	d0a6b917 	ldw	r2,-25884(gp)
  80ca84:	10800044 	addi	r2,r2,1
  80ca88:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80ca8c:	00003106 	br	80cb54 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80ca90:	e0bffe17 	ldw	r2,-8(fp)
  80ca94:	10800017 	ldw	r2,0(r2)
  80ca98:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80ca9c:	e0bffe17 	ldw	r2,-8(fp)
  80caa0:	10800403 	ldbu	r2,16(r2)
  80caa4:	10803fcc 	andi	r2,r2,255
  80caa8:	1005003a 	cmpeq	r2,r2,zero
  80caac:	1000051e 	bne	r2,zero,80cac4 <alt_tick+0x5c>
  80cab0:	d0a6b917 	ldw	r2,-25884(gp)
  80cab4:	1004c03a 	cmpne	r2,r2,zero
  80cab8:	1000021e 	bne	r2,zero,80cac4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80cabc:	e0bffe17 	ldw	r2,-8(fp)
  80cac0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80cac4:	e0bffe17 	ldw	r2,-8(fp)
  80cac8:	10c00217 	ldw	r3,8(r2)
  80cacc:	d0a6b917 	ldw	r2,-25884(gp)
  80cad0:	10c01e36 	bltu	r2,r3,80cb4c <alt_tick+0xe4>
  80cad4:	e0bffe17 	ldw	r2,-8(fp)
  80cad8:	10800403 	ldbu	r2,16(r2)
  80cadc:	10803fcc 	andi	r2,r2,255
  80cae0:	1004c03a 	cmpne	r2,r2,zero
  80cae4:	1000191e 	bne	r2,zero,80cb4c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80cae8:	e0bffe17 	ldw	r2,-8(fp)
  80caec:	10c00317 	ldw	r3,12(r2)
  80caf0:	e0bffe17 	ldw	r2,-8(fp)
  80caf4:	11000517 	ldw	r4,20(r2)
  80caf8:	183ee83a 	callr	r3
  80cafc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80cb00:	e0bffd17 	ldw	r2,-12(fp)
  80cb04:	1004c03a 	cmpne	r2,r2,zero
  80cb08:	1000031e 	bne	r2,zero,80cb18 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80cb0c:	e13ffe17 	ldw	r4,-8(fp)
  80cb10:	080c9d00 	call	80c9d0 <alt_alarm_stop>
  80cb14:	00000d06 	br	80cb4c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80cb18:	e0bffe17 	ldw	r2,-8(fp)
  80cb1c:	10c00217 	ldw	r3,8(r2)
  80cb20:	e0bffd17 	ldw	r2,-12(fp)
  80cb24:	1887883a 	add	r3,r3,r2
  80cb28:	e0bffe17 	ldw	r2,-8(fp)
  80cb2c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80cb30:	e0bffe17 	ldw	r2,-8(fp)
  80cb34:	10c00217 	ldw	r3,8(r2)
  80cb38:	d0a6b917 	ldw	r2,-25884(gp)
  80cb3c:	1880032e 	bgeu	r3,r2,80cb4c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80cb40:	e0fffe17 	ldw	r3,-8(fp)
  80cb44:	00800044 	movi	r2,1
  80cb48:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80cb4c:	e0bfff17 	ldw	r2,-4(fp)
  80cb50:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80cb54:	d0e00e04 	addi	r3,gp,-32712
  80cb58:	e0bffe17 	ldw	r2,-8(fp)
  80cb5c:	10ffcc1e 	bne	r2,r3,80ca90 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80cb60:	e037883a 	mov	sp,fp
  80cb64:	dfc00117 	ldw	ra,4(sp)
  80cb68:	df000017 	ldw	fp,0(sp)
  80cb6c:	dec00204 	addi	sp,sp,8
  80cb70:	f800283a 	ret

0080cb74 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80cb74:	deffff04 	addi	sp,sp,-4
  80cb78:	df000015 	stw	fp,0(sp)
  80cb7c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80cb80:	000170fa 	wrctl	ienable,zero
}
  80cb84:	e037883a 	mov	sp,fp
  80cb88:	df000017 	ldw	fp,0(sp)
  80cb8c:	dec00104 	addi	sp,sp,4
  80cb90:	f800283a 	ret

0080cb94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80cb94:	defff904 	addi	sp,sp,-28
  80cb98:	dfc00615 	stw	ra,24(sp)
  80cb9c:	df000515 	stw	fp,20(sp)
  80cba0:	df000504 	addi	fp,sp,20
  80cba4:	e13ffd15 	stw	r4,-12(fp)
  80cba8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80cbac:	e0bffe17 	ldw	r2,-8(fp)
  80cbb0:	10800017 	ldw	r2,0(r2)
  80cbb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80cbb8:	e13ffd17 	ldw	r4,-12(fp)
  80cbbc:	08084a00 	call	8084a0 <strlen>
  80cbc0:	10800044 	addi	r2,r2,1
  80cbc4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80cbc8:	00000d06 	br	80cc00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80cbcc:	e0bffc17 	ldw	r2,-16(fp)
  80cbd0:	11000217 	ldw	r4,8(r2)
  80cbd4:	e1bffb17 	ldw	r6,-20(fp)
  80cbd8:	e17ffd17 	ldw	r5,-12(fp)
  80cbdc:	080ce640 	call	80ce64 <memcmp>
  80cbe0:	1004c03a 	cmpne	r2,r2,zero
  80cbe4:	1000031e 	bne	r2,zero,80cbf4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80cbe8:	e0bffc17 	ldw	r2,-16(fp)
  80cbec:	e0bfff15 	stw	r2,-4(fp)
  80cbf0:	00000706 	br	80cc10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80cbf4:	e0bffc17 	ldw	r2,-16(fp)
  80cbf8:	10800017 	ldw	r2,0(r2)
  80cbfc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80cc00:	e0fffe17 	ldw	r3,-8(fp)
  80cc04:	e0bffc17 	ldw	r2,-16(fp)
  80cc08:	10fff01e 	bne	r2,r3,80cbcc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80cc0c:	e03fff15 	stw	zero,-4(fp)
  80cc10:	e0bfff17 	ldw	r2,-4(fp)
}
  80cc14:	e037883a 	mov	sp,fp
  80cc18:	dfc00117 	ldw	ra,4(sp)
  80cc1c:	df000017 	ldw	fp,0(sp)
  80cc20:	dec00204 	addi	sp,sp,8
  80cc24:	f800283a 	ret

0080cc28 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80cc28:	defffa04 	addi	sp,sp,-24
  80cc2c:	dfc00515 	stw	ra,20(sp)
  80cc30:	df000415 	stw	fp,16(sp)
  80cc34:	df000404 	addi	fp,sp,16
  80cc38:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80cc3c:	00802074 	movhi	r2,129
  80cc40:	10bbfe04 	addi	r2,r2,-4104
  80cc44:	10800017 	ldw	r2,0(r2)
  80cc48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cc4c:	00003306 	br	80cd1c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80cc50:	e0bffd17 	ldw	r2,-12(fp)
  80cc54:	11000217 	ldw	r4,8(r2)
  80cc58:	08084a00 	call	8084a0 <strlen>
  80cc5c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80cc60:	e0bffd17 	ldw	r2,-12(fp)
  80cc64:	10c00217 	ldw	r3,8(r2)
  80cc68:	e0bffc17 	ldw	r2,-16(fp)
  80cc6c:	1885883a 	add	r2,r3,r2
  80cc70:	10bfffc4 	addi	r2,r2,-1
  80cc74:	10800003 	ldbu	r2,0(r2)
  80cc78:	10803fcc 	andi	r2,r2,255
  80cc7c:	1080201c 	xori	r2,r2,128
  80cc80:	10bfe004 	addi	r2,r2,-128
  80cc84:	10800bd8 	cmpnei	r2,r2,47
  80cc88:	1000031e 	bne	r2,zero,80cc98 <alt_find_file+0x70>
    {
      len -= 1;
  80cc8c:	e0bffc17 	ldw	r2,-16(fp)
  80cc90:	10bfffc4 	addi	r2,r2,-1
  80cc94:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80cc98:	e0bffc17 	ldw	r2,-16(fp)
  80cc9c:	1007883a 	mov	r3,r2
  80cca0:	e0bffe17 	ldw	r2,-8(fp)
  80cca4:	1885883a 	add	r2,r3,r2
  80cca8:	10800003 	ldbu	r2,0(r2)
  80ccac:	10803fcc 	andi	r2,r2,255
  80ccb0:	1080201c 	xori	r2,r2,128
  80ccb4:	10bfe004 	addi	r2,r2,-128
  80ccb8:	10800be0 	cmpeqi	r2,r2,47
  80ccbc:	10000a1e 	bne	r2,zero,80cce8 <alt_find_file+0xc0>
  80ccc0:	e0bffc17 	ldw	r2,-16(fp)
  80ccc4:	1007883a 	mov	r3,r2
  80ccc8:	e0bffe17 	ldw	r2,-8(fp)
  80cccc:	1885883a 	add	r2,r3,r2
  80ccd0:	10800003 	ldbu	r2,0(r2)
  80ccd4:	10803fcc 	andi	r2,r2,255
  80ccd8:	1080201c 	xori	r2,r2,128
  80ccdc:	10bfe004 	addi	r2,r2,-128
  80cce0:	1004c03a 	cmpne	r2,r2,zero
  80cce4:	10000a1e 	bne	r2,zero,80cd10 <alt_find_file+0xe8>
  80cce8:	e0bffd17 	ldw	r2,-12(fp)
  80ccec:	11000217 	ldw	r4,8(r2)
  80ccf0:	e1bffc17 	ldw	r6,-16(fp)
  80ccf4:	e17ffe17 	ldw	r5,-8(fp)
  80ccf8:	080ce640 	call	80ce64 <memcmp>
  80ccfc:	1004c03a 	cmpne	r2,r2,zero
  80cd00:	1000031e 	bne	r2,zero,80cd10 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80cd04:	e0bffd17 	ldw	r2,-12(fp)
  80cd08:	e0bfff15 	stw	r2,-4(fp)
  80cd0c:	00000806 	br	80cd30 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80cd10:	e0bffd17 	ldw	r2,-12(fp)
  80cd14:	10800017 	ldw	r2,0(r2)
  80cd18:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cd1c:	00c02074 	movhi	r3,129
  80cd20:	18fbfe04 	addi	r3,r3,-4104
  80cd24:	e0bffd17 	ldw	r2,-12(fp)
  80cd28:	10ffc91e 	bne	r2,r3,80cc50 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80cd2c:	e03fff15 	stw	zero,-4(fp)
  80cd30:	e0bfff17 	ldw	r2,-4(fp)
}
  80cd34:	e037883a 	mov	sp,fp
  80cd38:	dfc00117 	ldw	ra,4(sp)
  80cd3c:	df000017 	ldw	fp,0(sp)
  80cd40:	dec00204 	addi	sp,sp,8
  80cd44:	f800283a 	ret

0080cd48 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80cd48:	defffa04 	addi	sp,sp,-24
  80cd4c:	dfc00515 	stw	ra,20(sp)
  80cd50:	df000415 	stw	fp,16(sp)
  80cd54:	dc000315 	stw	r16,12(sp)
  80cd58:	df000304 	addi	fp,sp,12
  80cd5c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80cd60:	00bffa04 	movi	r2,-24
  80cd64:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80cd68:	e03ffe15 	stw	zero,-8(fp)
  80cd6c:	00002006 	br	80cdf0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80cd70:	e13ffe17 	ldw	r4,-8(fp)
  80cd74:	04002074 	movhi	r16,129
  80cd78:	84378004 	addi	r16,r16,-8704
  80cd7c:	01400304 	movi	r5,12
  80cd80:	08016000 	call	801600 <__mulsi3>
  80cd84:	1405883a 	add	r2,r2,r16
  80cd88:	10800017 	ldw	r2,0(r2)
  80cd8c:	1004c03a 	cmpne	r2,r2,zero
  80cd90:	1000141e 	bne	r2,zero,80cde4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  80cd94:	e13ffe17 	ldw	r4,-8(fp)
  80cd98:	04002074 	movhi	r16,129
  80cd9c:	84378004 	addi	r16,r16,-8704
  80cda0:	01400304 	movi	r5,12
  80cda4:	08016000 	call	801600 <__mulsi3>
  80cda8:	1407883a 	add	r3,r2,r16
  80cdac:	e0bfff17 	ldw	r2,-4(fp)
  80cdb0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80cdb4:	00802074 	movhi	r2,129
  80cdb8:	10bc0204 	addi	r2,r2,-4088
  80cdbc:	10c00017 	ldw	r3,0(r2)
  80cdc0:	e0bffe17 	ldw	r2,-8(fp)
  80cdc4:	1880040e 	bge	r3,r2,80cdd8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  80cdc8:	00c02074 	movhi	r3,129
  80cdcc:	18fc0204 	addi	r3,r3,-4088
  80cdd0:	e0bffe17 	ldw	r2,-8(fp)
  80cdd4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80cdd8:	e0bffe17 	ldw	r2,-8(fp)
  80cddc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80cde0:	00000606 	br	80cdfc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80cde4:	e0bffe17 	ldw	r2,-8(fp)
  80cde8:	10800044 	addi	r2,r2,1
  80cdec:	e0bffe15 	stw	r2,-8(fp)
  80cdf0:	e0bffe17 	ldw	r2,-8(fp)
  80cdf4:	10800810 	cmplti	r2,r2,32
  80cdf8:	103fdd1e 	bne	r2,zero,80cd70 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80cdfc:	e0bffd17 	ldw	r2,-12(fp)
}
  80ce00:	e037883a 	mov	sp,fp
  80ce04:	dfc00217 	ldw	ra,8(sp)
  80ce08:	df000117 	ldw	fp,4(sp)
  80ce0c:	dc000017 	ldw	r16,0(sp)
  80ce10:	dec00304 	addi	sp,sp,12
  80ce14:	f800283a 	ret

0080ce18 <atexit>:
  80ce18:	200b883a 	mov	r5,r4
  80ce1c:	000d883a 	mov	r6,zero
  80ce20:	0009883a 	mov	r4,zero
  80ce24:	000f883a 	mov	r7,zero
  80ce28:	080ced81 	jmpi	80ced8 <__register_exitproc>

0080ce2c <exit>:
  80ce2c:	defffe04 	addi	sp,sp,-8
  80ce30:	000b883a 	mov	r5,zero
  80ce34:	dc000015 	stw	r16,0(sp)
  80ce38:	dfc00115 	stw	ra,4(sp)
  80ce3c:	2021883a 	mov	r16,r4
  80ce40:	080d0100 	call	80d010 <__call_exitprocs>
  80ce44:	00802074 	movhi	r2,129
  80ce48:	10bbf904 	addi	r2,r2,-4124
  80ce4c:	11000017 	ldw	r4,0(r2)
  80ce50:	20800f17 	ldw	r2,60(r4)
  80ce54:	10000126 	beq	r2,zero,80ce5c <exit+0x30>
  80ce58:	103ee83a 	callr	r2
  80ce5c:	8009883a 	mov	r4,r16
  80ce60:	080d2000 	call	80d200 <_exit>

0080ce64 <memcmp>:
  80ce64:	00c000c4 	movi	r3,3
  80ce68:	1980032e 	bgeu	r3,r6,80ce78 <memcmp+0x14>
  80ce6c:	2144b03a 	or	r2,r4,r5
  80ce70:	10c4703a 	and	r2,r2,r3
  80ce74:	10000f26 	beq	r2,zero,80ceb4 <memcmp+0x50>
  80ce78:	31ffffc4 	addi	r7,r6,-1
  80ce7c:	3000061e 	bne	r6,zero,80ce98 <memcmp+0x34>
  80ce80:	00000a06 	br	80ceac <memcmp+0x48>
  80ce84:	39ffffc4 	addi	r7,r7,-1
  80ce88:	00bfffc4 	movi	r2,-1
  80ce8c:	21000044 	addi	r4,r4,1
  80ce90:	29400044 	addi	r5,r5,1
  80ce94:	38800526 	beq	r7,r2,80ceac <memcmp+0x48>
  80ce98:	20c00003 	ldbu	r3,0(r4)
  80ce9c:	28800003 	ldbu	r2,0(r5)
  80cea0:	18bff826 	beq	r3,r2,80ce84 <memcmp+0x20>
  80cea4:	1885c83a 	sub	r2,r3,r2
  80cea8:	f800283a 	ret
  80ceac:	0005883a 	mov	r2,zero
  80ceb0:	f800283a 	ret
  80ceb4:	180f883a 	mov	r7,r3
  80ceb8:	20c00017 	ldw	r3,0(r4)
  80cebc:	28800017 	ldw	r2,0(r5)
  80cec0:	18bfed1e 	bne	r3,r2,80ce78 <memcmp+0x14>
  80cec4:	31bfff04 	addi	r6,r6,-4
  80cec8:	21000104 	addi	r4,r4,4
  80cecc:	29400104 	addi	r5,r5,4
  80ced0:	39bff936 	bltu	r7,r6,80ceb8 <memcmp+0x54>
  80ced4:	003fe806 	br	80ce78 <memcmp+0x14>

0080ced8 <__register_exitproc>:
  80ced8:	defffa04 	addi	sp,sp,-24
  80cedc:	00802074 	movhi	r2,129
  80cee0:	10bbf904 	addi	r2,r2,-4124
  80cee4:	dc000015 	stw	r16,0(sp)
  80cee8:	14000017 	ldw	r16,0(r2)
  80ceec:	dd000415 	stw	r20,16(sp)
  80cef0:	2829883a 	mov	r20,r5
  80cef4:	81405217 	ldw	r5,328(r16)
  80cef8:	dcc00315 	stw	r19,12(sp)
  80cefc:	dc800215 	stw	r18,8(sp)
  80cf00:	dc400115 	stw	r17,4(sp)
  80cf04:	dfc00515 	stw	ra,20(sp)
  80cf08:	2023883a 	mov	r17,r4
  80cf0c:	3027883a 	mov	r19,r6
  80cf10:	3825883a 	mov	r18,r7
  80cf14:	28002526 	beq	r5,zero,80cfac <__register_exitproc+0xd4>
  80cf18:	29000117 	ldw	r4,4(r5)
  80cf1c:	008007c4 	movi	r2,31
  80cf20:	11002716 	blt	r2,r4,80cfc0 <__register_exitproc+0xe8>
  80cf24:	8800101e 	bne	r17,zero,80cf68 <__register_exitproc+0x90>
  80cf28:	2105883a 	add	r2,r4,r4
  80cf2c:	1085883a 	add	r2,r2,r2
  80cf30:	20c00044 	addi	r3,r4,1
  80cf34:	1145883a 	add	r2,r2,r5
  80cf38:	0009883a 	mov	r4,zero
  80cf3c:	15000215 	stw	r20,8(r2)
  80cf40:	28c00115 	stw	r3,4(r5)
  80cf44:	2005883a 	mov	r2,r4
  80cf48:	dfc00517 	ldw	ra,20(sp)
  80cf4c:	dd000417 	ldw	r20,16(sp)
  80cf50:	dcc00317 	ldw	r19,12(sp)
  80cf54:	dc800217 	ldw	r18,8(sp)
  80cf58:	dc400117 	ldw	r17,4(sp)
  80cf5c:	dc000017 	ldw	r16,0(sp)
  80cf60:	dec00604 	addi	sp,sp,24
  80cf64:	f800283a 	ret
  80cf68:	29802204 	addi	r6,r5,136
  80cf6c:	00800044 	movi	r2,1
  80cf70:	110e983a 	sll	r7,r2,r4
  80cf74:	30c04017 	ldw	r3,256(r6)
  80cf78:	2105883a 	add	r2,r4,r4
  80cf7c:	1085883a 	add	r2,r2,r2
  80cf80:	1185883a 	add	r2,r2,r6
  80cf84:	19c6b03a 	or	r3,r3,r7
  80cf88:	14802015 	stw	r18,128(r2)
  80cf8c:	14c00015 	stw	r19,0(r2)
  80cf90:	00800084 	movi	r2,2
  80cf94:	30c04015 	stw	r3,256(r6)
  80cf98:	88bfe31e 	bne	r17,r2,80cf28 <__register_exitproc+0x50>
  80cf9c:	30804117 	ldw	r2,260(r6)
  80cfa0:	11c4b03a 	or	r2,r2,r7
  80cfa4:	30804115 	stw	r2,260(r6)
  80cfa8:	003fdf06 	br	80cf28 <__register_exitproc+0x50>
  80cfac:	00802074 	movhi	r2,129
  80cfb0:	1092fc04 	addi	r2,r2,19440
  80cfb4:	100b883a 	mov	r5,r2
  80cfb8:	80805215 	stw	r2,328(r16)
  80cfbc:	003fd606 	br	80cf18 <__register_exitproc+0x40>
  80cfc0:	00800034 	movhi	r2,0
  80cfc4:	10800004 	addi	r2,r2,0
  80cfc8:	1000021e 	bne	r2,zero,80cfd4 <__register_exitproc+0xfc>
  80cfcc:	013fffc4 	movi	r4,-1
  80cfd0:	003fdc06 	br	80cf44 <__register_exitproc+0x6c>
  80cfd4:	01006404 	movi	r4,400
  80cfd8:	103ee83a 	callr	r2
  80cfdc:	1007883a 	mov	r3,r2
  80cfe0:	103ffa26 	beq	r2,zero,80cfcc <__register_exitproc+0xf4>
  80cfe4:	80805217 	ldw	r2,328(r16)
  80cfe8:	180b883a 	mov	r5,r3
  80cfec:	18000115 	stw	zero,4(r3)
  80cff0:	18800015 	stw	r2,0(r3)
  80cff4:	80c05215 	stw	r3,328(r16)
  80cff8:	18006215 	stw	zero,392(r3)
  80cffc:	18006315 	stw	zero,396(r3)
  80d000:	0009883a 	mov	r4,zero
  80d004:	883fc826 	beq	r17,zero,80cf28 <__register_exitproc+0x50>
  80d008:	003fd706 	br	80cf68 <__register_exitproc+0x90>

0080d00c <register_fini>:
  80d00c:	f800283a 	ret

0080d010 <__call_exitprocs>:
  80d010:	00802074 	movhi	r2,129
  80d014:	10bbf904 	addi	r2,r2,-4124
  80d018:	10800017 	ldw	r2,0(r2)
  80d01c:	defff304 	addi	sp,sp,-52
  80d020:	df000b15 	stw	fp,44(sp)
  80d024:	d8800115 	stw	r2,4(sp)
  80d028:	00800034 	movhi	r2,0
  80d02c:	10800004 	addi	r2,r2,0
  80d030:	1005003a 	cmpeq	r2,r2,zero
  80d034:	d8800215 	stw	r2,8(sp)
  80d038:	d8800117 	ldw	r2,4(sp)
  80d03c:	dd400815 	stw	r21,32(sp)
  80d040:	dd000715 	stw	r20,28(sp)
  80d044:	10805204 	addi	r2,r2,328
  80d048:	dfc00c15 	stw	ra,48(sp)
  80d04c:	ddc00a15 	stw	r23,40(sp)
  80d050:	dd800915 	stw	r22,36(sp)
  80d054:	dcc00615 	stw	r19,24(sp)
  80d058:	dc800515 	stw	r18,20(sp)
  80d05c:	dc400415 	stw	r17,16(sp)
  80d060:	dc000315 	stw	r16,12(sp)
  80d064:	282b883a 	mov	r21,r5
  80d068:	2039883a 	mov	fp,r4
  80d06c:	d8800015 	stw	r2,0(sp)
  80d070:	2829003a 	cmpeq	r20,r5,zero
  80d074:	d8800117 	ldw	r2,4(sp)
  80d078:	14405217 	ldw	r17,328(r2)
  80d07c:	88001026 	beq	r17,zero,80d0c0 <__call_exitprocs+0xb0>
  80d080:	ddc00017 	ldw	r23,0(sp)
  80d084:	88800117 	ldw	r2,4(r17)
  80d088:	8c802204 	addi	r18,r17,136
  80d08c:	143fffc4 	addi	r16,r2,-1
  80d090:	80000916 	blt	r16,zero,80d0b8 <__call_exitprocs+0xa8>
  80d094:	05bfffc4 	movi	r22,-1
  80d098:	a000151e 	bne	r20,zero,80d0f0 <__call_exitprocs+0xe0>
  80d09c:	8409883a 	add	r4,r16,r16
  80d0a0:	2105883a 	add	r2,r4,r4
  80d0a4:	1485883a 	add	r2,r2,r18
  80d0a8:	10c02017 	ldw	r3,128(r2)
  80d0ac:	a8c01126 	beq	r21,r3,80d0f4 <__call_exitprocs+0xe4>
  80d0b0:	843fffc4 	addi	r16,r16,-1
  80d0b4:	85bff81e 	bne	r16,r22,80d098 <__call_exitprocs+0x88>
  80d0b8:	d8800217 	ldw	r2,8(sp)
  80d0bc:	10003126 	beq	r2,zero,80d184 <__call_exitprocs+0x174>
  80d0c0:	dfc00c17 	ldw	ra,48(sp)
  80d0c4:	df000b17 	ldw	fp,44(sp)
  80d0c8:	ddc00a17 	ldw	r23,40(sp)
  80d0cc:	dd800917 	ldw	r22,36(sp)
  80d0d0:	dd400817 	ldw	r21,32(sp)
  80d0d4:	dd000717 	ldw	r20,28(sp)
  80d0d8:	dcc00617 	ldw	r19,24(sp)
  80d0dc:	dc800517 	ldw	r18,20(sp)
  80d0e0:	dc400417 	ldw	r17,16(sp)
  80d0e4:	dc000317 	ldw	r16,12(sp)
  80d0e8:	dec00d04 	addi	sp,sp,52
  80d0ec:	f800283a 	ret
  80d0f0:	8409883a 	add	r4,r16,r16
  80d0f4:	88c00117 	ldw	r3,4(r17)
  80d0f8:	2105883a 	add	r2,r4,r4
  80d0fc:	1445883a 	add	r2,r2,r17
  80d100:	18ffffc4 	addi	r3,r3,-1
  80d104:	11800217 	ldw	r6,8(r2)
  80d108:	1c001526 	beq	r3,r16,80d160 <__call_exitprocs+0x150>
  80d10c:	10000215 	stw	zero,8(r2)
  80d110:	303fe726 	beq	r6,zero,80d0b0 <__call_exitprocs+0xa0>
  80d114:	00c00044 	movi	r3,1
  80d118:	1c06983a 	sll	r3,r3,r16
  80d11c:	90804017 	ldw	r2,256(r18)
  80d120:	8cc00117 	ldw	r19,4(r17)
  80d124:	1884703a 	and	r2,r3,r2
  80d128:	10001426 	beq	r2,zero,80d17c <__call_exitprocs+0x16c>
  80d12c:	90804117 	ldw	r2,260(r18)
  80d130:	1884703a 	and	r2,r3,r2
  80d134:	10000c1e 	bne	r2,zero,80d168 <__call_exitprocs+0x158>
  80d138:	2105883a 	add	r2,r4,r4
  80d13c:	1485883a 	add	r2,r2,r18
  80d140:	11400017 	ldw	r5,0(r2)
  80d144:	e009883a 	mov	r4,fp
  80d148:	303ee83a 	callr	r6
  80d14c:	88800117 	ldw	r2,4(r17)
  80d150:	98bfc81e 	bne	r19,r2,80d074 <__call_exitprocs+0x64>
  80d154:	b8800017 	ldw	r2,0(r23)
  80d158:	147fd526 	beq	r2,r17,80d0b0 <__call_exitprocs+0xa0>
  80d15c:	003fc506 	br	80d074 <__call_exitprocs+0x64>
  80d160:	8c000115 	stw	r16,4(r17)
  80d164:	003fea06 	br	80d110 <__call_exitprocs+0x100>
  80d168:	2105883a 	add	r2,r4,r4
  80d16c:	1485883a 	add	r2,r2,r18
  80d170:	11000017 	ldw	r4,0(r2)
  80d174:	303ee83a 	callr	r6
  80d178:	003ff406 	br	80d14c <__call_exitprocs+0x13c>
  80d17c:	303ee83a 	callr	r6
  80d180:	003ff206 	br	80d14c <__call_exitprocs+0x13c>
  80d184:	88800117 	ldw	r2,4(r17)
  80d188:	1000081e 	bne	r2,zero,80d1ac <__call_exitprocs+0x19c>
  80d18c:	89000017 	ldw	r4,0(r17)
  80d190:	20000726 	beq	r4,zero,80d1b0 <__call_exitprocs+0x1a0>
  80d194:	b9000015 	stw	r4,0(r23)
  80d198:	8809883a 	mov	r4,r17
  80d19c:	00000000 	call	0 <__alt_mem_sram>
  80d1a0:	bc400017 	ldw	r17,0(r23)
  80d1a4:	883fb71e 	bne	r17,zero,80d084 <__call_exitprocs+0x74>
  80d1a8:	003fc506 	br	80d0c0 <__call_exitprocs+0xb0>
  80d1ac:	89000017 	ldw	r4,0(r17)
  80d1b0:	882f883a 	mov	r23,r17
  80d1b4:	2023883a 	mov	r17,r4
  80d1b8:	883fb21e 	bne	r17,zero,80d084 <__call_exitprocs+0x74>
  80d1bc:	003fc006 	br	80d0c0 <__call_exitprocs+0xb0>

0080d1c0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80d1c0:	defffd04 	addi	sp,sp,-12
  80d1c4:	df000215 	stw	fp,8(sp)
  80d1c8:	df000204 	addi	fp,sp,8
  80d1cc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80d1d0:	e0bfff17 	ldw	r2,-4(fp)
  80d1d4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80d1d8:	e0bffe17 	ldw	r2,-8(fp)
  80d1dc:	1005003a 	cmpeq	r2,r2,zero
  80d1e0:	1000021e 	bne	r2,zero,80d1ec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80d1e4:	002af070 	cmpltui	zero,zero,43969
  80d1e8:	00000106 	br	80d1f0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80d1ec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80d1f0:	e037883a 	mov	sp,fp
  80d1f4:	df000017 	ldw	fp,0(sp)
  80d1f8:	dec00104 	addi	sp,sp,4
  80d1fc:	f800283a 	ret

0080d200 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80d200:	defffd04 	addi	sp,sp,-12
  80d204:	dfc00215 	stw	ra,8(sp)
  80d208:	df000115 	stw	fp,4(sp)
  80d20c:	df000104 	addi	fp,sp,4
  80d210:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80d214:	e13fff17 	ldw	r4,-4(fp)
  80d218:	080d1c00 	call	80d1c0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80d21c:	003fff06 	br	80d21c <_exit+0x1c>
  80d220:	0080d00c 	andi	r2,zero,832
