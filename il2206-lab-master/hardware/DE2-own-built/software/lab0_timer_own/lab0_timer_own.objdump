
lab0_timer_own.elf:     file format elf32-littlenios2
lab0_timer_own.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000d938 memsz 0x0000d938 flags r-x
    LOAD off    0x0000e958 vaddr 0x0080d958 paddr 0x0080f3c8 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x00010e38 vaddr 0x00810e38 paddr 0x00810e38 align 2**12
         filesz 0x00000000 memsz 0x00000308 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d41c  008001b4  008001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000388  0080d5d0  0080d5d0  0000e5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  0080d958  0080f3c8  0000e958  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  00810e38  00810e38  00010e38  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000df8  00000000  00000000  000103f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000152d  00000000  00000000  000111e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002694a  00000000  00000000  00012715  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000851e  00000000  00000000  0003905f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000156c4  00000000  00000000  0004157d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001ad8  00000000  00000000  00056c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000265c  00000000  00000000  0005871c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c7b0  00000000  00000000  0005ad78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00067528  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a08  00000000  00000000  00067538  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006b247  2**0
                  CONTENTS, READONLY
 18 .cpu          00000019  00000000  00000000  0006b24a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006b263  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006b264  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006b265  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006b269  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006b26d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006b271  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006b27c  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006b287  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000019  00000000  00000000  0006b292  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000051  00000000  00000000  0006b2ab  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000712d3  00000000  00000000  0006b2fc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
008001b4 l    d  .text	00000000 .text
0080d5d0 l    d  .rodata	00000000 .rodata
0080d958 l    d  .rwdata	00000000 .rwdata
00810e38 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00800314 l     F .text	00000064 init_button_pio
00810e70 l     O .bss	00000018 alarm
00800378 l     F .text	000000dc key_InterruptHandler
00000000 l    df *ABS*	00000000 puthex.c
00000000 l    df *ABS*	00000000 puttime.c
00000000 l    df *ABS*	00000000 tick.c
0000035c l       *ABS*	00000000 delaycount
00800920 l       .text	00000000 fin
0080090c l       .text	00000000 inner
00800918 l       .text	00000000 outer
00800938 l       .text	00000000 AtoF
0080093c l       .text	00000000 fin
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 dp-bit.c
00800d74 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00801a9c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0080d958 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00802674 l     F .text	00000058 __sprint_r
0080d79e l     O .rodata	00000010 blanks.3452
0080d78e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0080483c l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806264 l     F .text	00000058 std
00806370 l     F .text	00000008 __fp_lock
00806378 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
0080f394 l     O .rwdata	00000004 charset
0080d7d0 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0080d918 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080add4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ae34 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080af38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080b328 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080b408 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080b568 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080b798 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0080f3bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080bbf4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080e314 l     O .rwdata	00001060 jtag_uart_0
0080bcf4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080bf34 l     F .text	00000228 altera_avalon_jtag_uart_irq
0080c15c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080c7d8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080c9a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080caec l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0080cc3c l     F .text	000000f8 alt_file_locked
0080cec0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0080d3b8 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0080d56c l     F .text	00000040 alt_sim_halt
00808054 g     F .text	00000094 _mprec_log10
00808140 g     F .text	00000088 __any_on
008098c8 g     F .text	00000070 _isatty_r
0080d8f0 g     O .rodata	00000028 __mprec_tinytens
0080b5c8 g     F .text	0000006c alt_main
0080023c g     F .text	0000004c my_alarm_callback
0080254c g     F .text	000000a0 _puts_r
00810eb0 g     O .bss	00000100 alt_irq
00809938 g     F .text	00000078 _lseek_r
00800944 g     F .text	00000130 sqrt
0080f3c8 g       *ABS*	00000000 __flash_rwdata_start
0080a6f4 g     F .text	00000088 __eqdf2
00811140 g       *ABS*	00000000 __alt_heap_start
008022e8 g     F .text	00000044 printf
00000000 g       *ABS*	00000000 __alt_mem_sram
00809380 g     F .text	00000068 __sseek
008062cc g     F .text	000000a4 __sinit
008045b4 g     F .text	00000130 __swbuf_r
00806fd8 g     F .text	00000084 _setlocale_r
008063cc g     F .text	0000009c __sfmoreglue
0080b654 g     F .text	00000020 __malloc_unlock
00807ad0 g     F .text	000000e0 memmove
008063bc g     F .text	00000010 _cleanup
008081c8 g     F .text	000000bc _Balloc
0080051c g     F .text	00000050 nextPrime
0080a804 g     F .text	00000088 __gtdf2
008022d8 g     F .text	00000010 __errno
00800000 g     F .entry	0000000c __reset
00810e38 g     O .bss	00000004 edge_capture
00800020 g       *ABS*	00000000 __flash_exceptions_start
00809854 g     F .text	00000074 _fstat_r
00810e54 g     O .bss	00000004 errno
00810e60 g     O .bss	00000004 alt_argv
00817374 g       *ABS*	00000000 _gp
0080e194 g     O .rwdata	00000180 alt_fd_list
0080cf40 g     F .text	00000094 alt_find_dev
00807a30 g     F .text	000000a0 memcpy
008063b0 g     F .text	0000000c _cleanup_r
008019a4 g     F .text	000000f8 __floatsidf
0080cbc4 g     F .text	00000078 alt_io_redirect
00801894 g     F .text	00000088 __ltdf2
0080d5d0 g       *ABS*	00000000 __DTOR_END__
008025ec g     F .text	00000014 puts
00807fa4 g     F .text	000000b0 __ratio
0080c374 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080232c g     F .text	00000034 _printf_r
00801bd8 g     F .text	00000008 __udivsi3
0080b264 g     F .text	000000c4 isatty
0080d800 g     O .rodata	000000c8 __mprec_tens
008006c4 g     F .text	000000a4 puthex
00806fb4 g     F .text	00000008 __locale_charset
00810e48 g     O .bss	00000004 __malloc_top_pad
0080f390 g     O .rwdata	00000004 __mb_cur_max
008001f0 g     F .text	0000004c actualiseDisplay
00806fbc g     F .text	0000000c _localeconv_r
0080892c g     F .text	0000003c __i2b
00806998 g     F .text	0000049c __sfvwrite_r
00809308 g     F .text	00000070 _sbrk_r
008099b0 g     F .text	00000078 _read_r
0080dd58 g     O .rwdata	0000000c __lc_ctype
0080f3b0 g     O .rwdata	00000004 alt_max_fd
008020d8 g     F .text	00000138 __unpack_d
00809730 g     F .text	00000110 _fclose_r
00806230 g     F .text	00000034 fflush
00810e4c g     O .bss	00000004 __malloc_max_sbrked_mem
00801204 g     F .text	00000074 __adddf3
00807e84 g     F .text	00000120 __b2d
0080a094 g     F .text	00000660 __umoddi3
0080b474 g     F .text	000000f4 lseek
0080f384 g     O .rwdata	00000004 __fdlib_version
0080056c g     F .text	00000158 bcd2sevenSeg
0080f38c g     O .rwdata	00000004 _global_impure_ptr
00808cd4 g     F .text	000005f4 _realloc_r
00811140 g       *ABS*	00000000 __bss_end
0080b16c g     F .text	000000f8 alt_iic_isr_register
0080b9c4 g     F .text	0000010c alt_tick
00809a28 g     F .text	0000066c __udivdi3
0080d8c8 g     O .rodata	00000028 __mprec_bigtens
00808bb4 g     F .text	00000120 __s2b
0080a9ec g     F .text	00000194 __floatunsidf
00807da4 g     F .text	00000060 __mcmp
00806398 g     F .text	00000018 __fp_lock_all
0080b124 g     F .text	00000048 alt_ic_irq_enabled
0080b92c g     F .text	00000098 alt_alarm_stop
00810e58 g     O .bss	00000004 alt_irq_active
008000ec g     F .exceptions	000000c8 alt_irq_handler
0080e16c g     O .rwdata	00000028 alt_dev_null
0080c8d8 g     F .text	0000001c alt_dcache_flush_all
00807c70 g     F .text	00000070 __hi0bits
0080a914 g     F .text	000000d8 __fixdfsi
0080f3c8 g       *ABS*	00000000 __ram_rwdata_end
01008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0080f3a8 g     O .rwdata	00000008 alt_dev_list
0080bad0 g     F .text	00000124 write
00802464 g     F .text	000000e8 _putc_r
0080d958 g       *ABS*	00000000 __ram_rodata_end
0080ae60 g     F .text	000000d8 fstat
0080191c g     F .text	00000088 __ledf2
00808a94 g     F .text	00000120 __pow5mult
00810e3c g     O .bss	00000004 __nlocale_changed
00801be0 g     F .text	00000008 __umodsi3
00811140 g       *ABS*	00000000 end
0080be74 g     F .text	000000c0 altera_avalon_jtag_uart_init
0080d5cc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080c848 g     F .text	00000090 alt_avalon_timer_sc_init
00801d44 g     F .text	00000080 __clzsi2
0080c598 g     F .text	00000240 altera_avalon_jtag_uart_write
008062bc g     F .text	00000004 __sfp_lock_acquire
0080794c g     F .text	000000e4 memchr
008026cc g     F .text	00001ec4 ___vfprintf_internal_r
00806684 g     F .text	00000314 _free_r
0080d3bc g     F .text	000001b0 __call_exitprocs
00810e40 g     O .bss	00000004 __mlocale_changed
0080f39c g     O .rwdata	00000004 __malloc_sbrk_base
008001b4 g     F .text	0000003c _start
00810e68 g     O .bss	00000004 _alt_tick_rate
0080858c g     F .text	0000014c __lshift
00810e6c g     O .bss	00000004 _alt_nticks
0080b674 g     F .text	00000124 read
0080bc88 g     F .text	0000006c alt_sys_init
0080d284 g     F .text	00000134 __register_exitproc
008086d8 g     F .text	00000254 __multiply
0080c20c g     F .text	00000074 altera_avalon_jtag_uart_close
00801be8 g     F .text	00000038 __mulsi3
0080d958 g       *ABS*	00000000 __ram_rwdata_start
0080d5d0 g       *ABS*	00000000 __ram_rodata_start
00810e88 g     O .bss	00000028 __malloc_current_mallinfo
00808284 g     F .text	0000017c __d2b
0080f37c g     O .rwdata	00000004 next_prime
00800924 g       .text	00000000 hexasc
0080bd2c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0080d0f4 g     F .text	000000d0 alt_get_fd
00802210 g     F .text	000000c8 __fpcmp_parts_d
008096c0 g     F .text	00000070 _close_r
0080d210 g     F .text	00000074 memcmp
0080bddc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00811140 g       *ABS*	00000000 __alt_stack_base
0080be24 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00804700 g     F .text	0000013c __swsetup_r
00800858 g     F .text	000000ac tick
0080163c g     F .text	00000258 __divdf3
00806468 g     F .text	000000f0 __sfp
008080e8 g     F .text	00000058 __copybits
0080dd64 g     O .rwdata	00000408 __malloc_av_
008062c8 g     F .text	00000004 __sinit_lock_release
00801278 g     F .text	000003c4 __muldf3
00809464 g     F .text	00000060 __sread
0080cfd4 g     F .text	00000120 alt_find_file
0080c8f4 g     F .text	000000b4 alt_dev_llist_insert
0080b634 g     F .text	00000020 __malloc_lock
0080b870 g     F .text	000000bc sbrk
00806034 g     F .text	000001fc _fflush_r
008095f8 g     F .text	000000c8 _calloc_r
00810e38 g       *ABS*	00000000 __bss_start
00807bb0 g     F .text	00000098 memset
00800288 g     F .text	0000008c main
00800768 g     F .text	000000f0 puttime
00810e64 g     O .bss	00000004 alt_envp
00810e50 g     O .bss	00000004 __malloc_max_total_mem
0080bd84 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
008046e4 g     F .text	0000001c __swbuf
00809378 g     F .text	00000008 __sclose
00800d6c g     F .text	00000008 matherr
01000000 g       *ABS*	00000000 __alt_heap_limit
00809840 g     F .text	00000014 fclose
00810fb0 g     O .bss	00000190 _atexit0
00804a80 g     F .text	000015b4 _dtoa_r
0080720c g     F .text	00000740 _malloc_r
00800454 g     F .text	000000c8 isPrime
0080f3b4 g     O .rwdata	00000004 alt_errno
00806efc g     F .text	000000b8 _fwalk
00802360 g     F .text	00000104 putc
00801b18 g     F .text	00000060 __divsi3
0080d614 g     O .rodata	00000014 __thenan_df
00806558 g     F .text	0000012c _malloc_trim_r
0080d5d0 g       *ABS*	00000000 __CTOR_END__
008094c4 g     F .text	000000bc strcmp
0080d5d0 g       *ABS*	00000000 __flash_rodata_start
0080d5d0 g       *ABS*	00000000 __DTOR_LIST__
00800904 g       .text	00000000 delay
0080a77c g     F .text	00000088 __nedf2
0080bc54 g     F .text	00000034 alt_irq_init
0080b7f8 g     F .text	00000078 alt_release_fd
0080d628 g     O .rodata	00000100 __clz_tab
00810e44 g     O .bss	00000004 _PathLocale
0080d1c4 g     F .text	00000014 atexit
00809580 g     F .text	00000078 _write_r
0080705c g     F .text	0000001c setlocale
0080f388 g     O .rwdata	00000004 _impure_ptr
00810e5c g     O .bss	00000004 alt_argc
0080ca6c g     F .text	00000064 _do_dtors
00800020 g       .exceptions	00000000 alt_irq_entry
00807e04 g     F .text	00000080 __ulp
008092c8 g     F .text	00000040 __isinfd
00806380 g     F .text	00000018 __fp_unlock_all
0080f3a0 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00806fc8 g     F .text	00000010 localeconv
00800a74 g     F .text	000002c8 __ieee754_sqrt
0080af98 g     F .text	00000050 alt_ic_isr_register
0080f3c8 g       *ABS*	00000000 _edata
00811140 g       *ABS*	00000000 _end
008001b4 g       *ABS*	00000000 __ram_exceptions_end
0080c280 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0080b084 g     F .text	000000a0 alt_ic_irq_disable
008093e8 g     F .text	0000007c __swrite
0080f398 g     O .rwdata	00000004 __malloc_trim_threshold
0080cf20 g     F .text	00000020 altera_nios2_qsys_irq_init
0080d1d8 g     F .text	00000038 exit
00806e34 g     F .text	000000c8 _fwalk_reent
00808400 g     F .text	0000018c __mdiff
00801b78 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008062c0 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080d5ac g     F .text	00000020 _exit
00800d3c g     F .text	00000030 __isnand
0080ab80 g     F .text	00000154 alt_alarm_start
00801c20 g     F .text	00000124 __muldi3
00807078 g     F .text	00000194 __smakebuf_r
00802600 g     F .text	00000074 strlen
0080cd34 g     F .text	0000018c open
0080a88c g     F .text	00000088 __gedf2
0080f378 g     O .rwdata	00000004 is_counting
0080cad0 g     F .text	0000001c alt_icache_flush_all
0080f3b8 g     O .rwdata	00000004 alt_priority_mask
0080afe8 g     F .text	0000009c alt_ic_irq_enable
00804590 g     F .text	00000024 __vfprintf_internal
00801184 g     F .text	00000080 __subdf3
0080f380 g     O .rwdata	00000004 curr_prime
00807ce0 g     F .text	000000c4 __lo0bits
0080f3c0 g     O .rwdata	00000008 alt_alarm_list
0080ca08 g     F .text	00000064 _do_ctors
0080f374 g     O .rwdata	00000004 timeloc
0080acd4 g     F .text	00000100 close
0080b388 g     F .text	00000080 alt_load
00801dc4 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
008062c4 g     F .text	00000004 __sinit_lock_acquire
00808968 g     F .text	0000012c __multadd
00807c48 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08406d14 	ori	at,at,436
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	defff904 	addi	sp,sp,-28
  8000f0:	dfc00615 	stw	ra,24(sp)
  8000f4:	df000515 	stw	fp,20(sp)
  8000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000fc:	0005313a 	rdctl	r2,ipending
  800100:	e0bffc15 	stw	r2,-16(fp)

  return active;
  800104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  800108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
  80010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800110:	00800044 	movi	r2,1
  800114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800118:	e0ffff17 	ldw	r3,-4(fp)
  80011c:	e0bffe17 	ldw	r2,-8(fp)
  800120:	1884703a 	and	r2,r3,r2
  800124:	1005003a 	cmpeq	r2,r2,zero
  800128:	1000161e 	bne	r2,zero,800184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80012c:	e0bffd17 	ldw	r2,-12(fp)
  800130:	00c02074 	movhi	r3,129
  800134:	18c3ac04 	addi	r3,r3,3760
  800138:	100490fa 	slli	r2,r2,3
  80013c:	10c5883a 	add	r2,r2,r3
  800140:	11400017 	ldw	r5,0(r2)
  800144:	e0bffd17 	ldw	r2,-12(fp)
  800148:	00c02074 	movhi	r3,129
  80014c:	18c3ac04 	addi	r3,r3,3760
  800150:	100490fa 	slli	r2,r2,3
  800154:	10c5883a 	add	r2,r2,r3
  800158:	10800104 	addi	r2,r2,4
  80015c:	11000017 	ldw	r4,0(r2)
  800160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800164:	0005313a 	rdctl	r2,ipending
  800168:	e0bffb15 	stw	r2,-20(fp)

  return active;
  80016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  800170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
  800174:	e0bfff17 	ldw	r2,-4(fp)
  800178:	1004c03a 	cmpne	r2,r2,zero
  80017c:	103fe31e 	bne	r2,zero,80010c <alt_irq_handler+0x20>
  800180:	00000706 	br	8001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  800184:	e0bffe17 	ldw	r2,-8(fp)
  800188:	1085883a 	add	r2,r2,r2
  80018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
  800190:	e0bffd17 	ldw	r2,-12(fp)
  800194:	10800044 	addi	r2,r2,1
  800198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  80019c:	003fde06 	br	800118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  8001a0:	e037883a 	mov	sp,fp
  8001a4:	dfc00117 	ldw	ra,4(sp)
  8001a8:	df000017 	ldw	fp,0(sp)
  8001ac:	dec00204 	addi	sp,sp,8
  8001b0:	f800283a 	ret

Disassembly of section .text:

008001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001b4:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001bc:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001c0:	d69cdd14 	ori	gp,gp,29556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001c4:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c8:	10838e14 	ori	r2,r2,3640

    movhi r3, %hi(__bss_end)
  8001cc:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001d0:	18c45014 	ori	r3,r3,4416

    beq r2, r3, 1f
  8001d4:	10c00326 	beq	r2,r3,8001e4 <_start+0x30>

0:
    stw zero, (r2)
  8001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001e0:	10fffd36 	bltu	r2,r3,8001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001e4:	080b3880 	call	80b388 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e8:	080b5c80 	call	80b5c8 <alt_main>

008001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001ec:	003fff06 	br	8001ec <alt_after_alt_main>

008001f0 <actualiseDisplay>:
volatile int edge_capture;

int next_prime = 1;
int curr_prime = 1;

void actualiseDisplay(){
  8001f0:	defffe04 	addi	sp,sp,-8
  8001f4:	dfc00115 	stw	ra,4(sp)
  8001f8:	df000015 	stw	fp,0(sp)
  8001fc:	d839883a 	mov	fp,sp
	puttime(&timeloc);
  800200:	d1200004 	addi	r4,gp,-32768
  800204:	08007680 	call	800768 <puttime>
	puthex(timeloc);
  800208:	d1200017 	ldw	r4,-32768(gp)
  80020c:	08006c40 	call	8006c4 <puthex>

	printf(" %d", next_prime);
  800210:	d1600217 	ldw	r5,-32760(gp)
  800214:	01002074 	movhi	r4,129
  800218:	21357404 	addi	r4,r4,-10800
  80021c:	08022e80 	call	8022e8 <printf>
	curr_prime = next_prime;
  800220:	d0a00217 	ldw	r2,-32760(gp)
  800224:	d0a00315 	stw	r2,-32756(gp)
}
  800228:	e037883a 	mov	sp,fp
  80022c:	dfc00117 	ldw	ra,4(sp)
  800230:	df000017 	ldw	fp,0(sp)
  800234:	dec00204 	addi	sp,sp,8
  800238:	f800283a 	ret

0080023c <my_alarm_callback>:


alt_u32 my_alarm_callback (void* context) {
  80023c:	defffd04 	addi	sp,sp,-12
  800240:	dfc00215 	stw	ra,8(sp)
  800244:	df000115 	stw	fp,4(sp)
  800248:	df000104 	addi	fp,sp,4
  80024c:	e13fff15 	stw	r4,-4(fp)
	/* This function is called once per second */
	if(is_counting){
  800250:	d0a00117 	ldw	r2,-32764(gp)
  800254:	1005003a 	cmpeq	r2,r2,zero
  800258:	1000031e 	bne	r2,zero,800268 <my_alarm_callback+0x2c>
		tick(&timeloc);
  80025c:	d1200004 	addi	r4,gp,-32768
  800260:	08008580 	call	800858 <tick>
		actualiseDisplay();
  800264:	08001f00 	call	8001f0 <actualiseDisplay>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800268:	00802074 	movhi	r2,129
  80026c:	10839a04 	addi	r2,r2,3688
  800270:	10800017 	ldw	r2,0(r2)
	}
	return alt_ticks_per_second();
}
  800274:	e037883a 	mov	sp,fp
  800278:	dfc00117 	ldw	ra,4(sp)
  80027c:	df000017 	ldw	fp,0(sp)
  800280:	dec00204 	addi	sp,sp,8
  800284:	f800283a 	ret

00800288 <main>:

int isPrime(int inval);
int nextPrime(int inval);


int main() {
  800288:	defffd04 	addi	sp,sp,-12
  80028c:	dfc00215 	stw	ra,8(sp)
  800290:	df000115 	stw	fp,4(sp)
  800294:	df000104 	addi	fp,sp,4
	int count = 0;
  800298:	e03fff15 	stw	zero,-4(fp)
	printf("Hello from Nios II !! !! !!\n");
  80029c:	01002074 	movhi	r4,129
  8002a0:	21357504 	addi	r4,r4,-10796
  8002a4:	08025ec0 	call	8025ec <puts>

	init_button_pio();
  8002a8:	08003140 	call	800314 <init_button_pio>
  8002ac:	00802074 	movhi	r2,129
  8002b0:	10839a04 	addi	r2,r2,3688
  8002b4:	10800017 	ldw	r2,0(r2)
  8002b8:	100b883a 	mov	r5,r2

	if (alt_alarm_start (&alarm, alt_ticks_per_second(), my_alarm_callback, NULL) < 0) {
  8002bc:	01002074 	movhi	r4,129
  8002c0:	21039c04 	addi	r4,r4,3696
  8002c4:	01802034 	movhi	r6,128
  8002c8:	31808f04 	addi	r6,r6,572
  8002cc:	000f883a 	mov	r7,zero
  8002d0:	080ab800 	call	80ab80 <alt_alarm_start>
  8002d4:	1004403a 	cmpge	r2,r2,zero
  8002d8:	1000031e 	bne	r2,zero,8002e8 <main+0x60>
		printf ("No system clock available\n");
  8002dc:	01002074 	movhi	r4,129
  8002e0:	21357c04 	addi	r4,r4,-10768
  8002e4:	08025ec0 	call	8025ec <puts>
	}

	while(TRUE){
		IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE, ++count);
  8002e8:	e0bfff17 	ldw	r2,-4(fp)
  8002ec:	10800044 	addi	r2,r2,1
  8002f0:	e0bfff15 	stw	r2,-4(fp)
  8002f4:	00c04074 	movhi	r3,257
  8002f8:	18c43c04 	addi	r3,r3,4336
  8002fc:	e0bfff17 	ldw	r2,-4(fp)
  800300:	18800035 	stwio	r2,0(r3)
		next_prime = nextPrime(curr_prime);
  800304:	d1200317 	ldw	r4,-32756(gp)
  800308:	080051c0 	call	80051c <nextPrime>
  80030c:	d0a00215 	stw	r2,-32760(gp)
		//delay(1000);
	}
  800310:	003ff506 	br	8002e8 <main+0x60>

00800314 <init_button_pio>:
}



static void init_button_pio()
	{
  800314:	defffc04 	addi	sp,sp,-16
  800318:	dfc00315 	stw	ra,12(sp)
  80031c:	df000215 	stw	fp,8(sp)
  800320:	df000204 	addi	fp,sp,8
	/* Recast the edge_capture pointer to match the
	alt_irq_register() function prototype. */
	void* edge_capture_ptr = (void*) &edge_capture;
  800324:	d0a6b104 	addi	r2,gp,-25916
  800328:	e0bfff15 	stw	r2,-4(fp)

	/* Enable all 4 button interrupts. */
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(DE2_PIO_KEYS4_BASE, 0xf);
  80032c:	00c04074 	movhi	r3,257
  800330:	18c44204 	addi	r3,r3,4360
  800334:	008003c4 	movi	r2,15
  800338:	18800035 	stwio	r2,0(r3)

	/* Reset the edge capture register. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(DE2_PIO_KEYS4_BASE, 0x0);
  80033c:	00804074 	movhi	r2,257
  800340:	10844304 	addi	r2,r2,4364
  800344:	10000035 	stwio	zero,0(r2)

	/* Register the ISR. */
	#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
		alt_ic_isr_register(DE2_PIO_KEYS4_IRQ_INTERRUPT_CONTROLLER_ID,
  800348:	d8000015 	stw	zero,0(sp)
  80034c:	0009883a 	mov	r4,zero
  800350:	01400204 	movi	r5,8
  800354:	01802034 	movhi	r6,128
  800358:	3180de04 	addi	r6,r6,888
  80035c:	e1ffff17 	ldw	r7,-4(fp)
  800360:	080af980 	call	80af98 <alt_ic_isr_register>
	#else
		alt_irq_register(DE2_PIO_KEYS4_IRQ,
						 edge_capture_ptr,
						 key_InterruptHandler);
	#endif
}
  800364:	e037883a 	mov	sp,fp
  800368:	dfc00117 	ldw	ra,4(sp)
  80036c:	df000017 	ldw	fp,0(sp)
  800370:	dec00204 	addi	sp,sp,8
  800374:	f800283a 	ret

00800378 <key_InterruptHandler>:



static void key_InterruptHandler(void* context)
{
  800378:	defffc04 	addi	sp,sp,-16
  80037c:	dfc00315 	stw	ra,12(sp)
  800380:	df000215 	stw	fp,8(sp)
  800384:	df000204 	addi	fp,sp,8
  800388:	e13fff15 	stw	r4,-4(fp)
	/* Cast context to edge_capture's type. It is important that this
	be declared volatile to avoid unwanted compiler optimization. */
	volatile int* edge_capture_ptr = (volatile int*) context;
  80038c:	e0bfff17 	ldw	r2,-4(fp)
  800390:	e0bffe15 	stw	r2,-8(fp)


	/* Read the edge capture register on the button PIO.
	* Store value.
	*/
	*edge_capture_ptr =
  800394:	00804074 	movhi	r2,257
  800398:	10844304 	addi	r2,r2,4364
  80039c:	10c00037 	ldwio	r3,0(r2)
  8003a0:	e0bffe17 	ldw	r2,-8(fp)
  8003a4:	10c00015 	stw	r3,0(r2)
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(DE2_PIO_KEYS4_BASE);

	/* Write to the edge capture register to reset it. */
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(DE2_PIO_KEYS4_BASE, 0);
  8003a8:	00804074 	movhi	r2,257
  8003ac:	10844304 	addi	r2,r2,4364
  8003b0:	10000035 	stwio	zero,0(r2)

	// Definition of  ISR

	if(*edge_capture_ptr & 0x1)
  8003b4:	e0bffe17 	ldw	r2,-8(fp)
  8003b8:	10800017 	ldw	r2,0(r2)
  8003bc:	1080004c 	andi	r2,r2,1
  8003c0:	10803fcc 	andi	r2,r2,255
  8003c4:	1005003a 	cmpeq	r2,r2,zero
  8003c8:	1000031e 	bne	r2,zero,8003d8 <key_InterruptHandler+0x60>
		is_counting = !is_counting;
  8003cc:	d0a00117 	ldw	r2,-32764(gp)
  8003d0:	1005003a 	cmpeq	r2,r2,zero
  8003d4:	d0a00115 	stw	r2,-32764(gp)

	if(*edge_capture_ptr & 0x2){
  8003d8:	e0bffe17 	ldw	r2,-8(fp)
  8003dc:	10800017 	ldw	r2,0(r2)
  8003e0:	1080008c 	andi	r2,r2,2
  8003e4:	1005003a 	cmpeq	r2,r2,zero
  8003e8:	1000031e 	bne	r2,zero,8003f8 <key_InterruptHandler+0x80>
		tick(&timeloc);
  8003ec:	d1200004 	addi	r4,gp,-32768
  8003f0:	08008580 	call	800858 <tick>
		actualiseDisplay();
  8003f4:	08001f00 	call	8001f0 <actualiseDisplay>
	}

	if(*edge_capture_ptr & 0x4){
  8003f8:	e0bffe17 	ldw	r2,-8(fp)
  8003fc:	10800017 	ldw	r2,0(r2)
  800400:	1080010c 	andi	r2,r2,4
  800404:	1005003a 	cmpeq	r2,r2,zero
  800408:	1000021e 	bne	r2,zero,800414 <key_InterruptHandler+0x9c>
		timeloc = 0x0000;
  80040c:	d0200015 	stw	zero,-32768(gp)
		actualiseDisplay();
  800410:	08001f00 	call	8001f0 <actualiseDisplay>
	}

	if(*edge_capture_ptr & 0x8){
  800414:	e0bffe17 	ldw	r2,-8(fp)
  800418:	10800017 	ldw	r2,0(r2)
  80041c:	1080020c 	andi	r2,r2,8
  800420:	1005003a 	cmpeq	r2,r2,zero
  800424:	1000031e 	bne	r2,zero,800434 <key_InterruptHandler+0xbc>
		timeloc = 0x5957;
  800428:	009655c4 	movi	r2,22871
  80042c:	d0a00015 	stw	r2,-32768(gp)
		actualiseDisplay();
  800430:	08001f00 	call	8001f0 <actualiseDisplay>
	}

	/* Read the PIO to delay ISR exit. This is done to prevent a
	spurious interrupt in systems with high processor -> pio
	latency and fast interrupts. */
	IORD_ALTERA_AVALON_PIO_EDGE_CAP(DE2_PIO_KEYS4_BASE);
  800434:	00804074 	movhi	r2,257
  800438:	10844304 	addi	r2,r2,4364
  80043c:	10800037 	ldwio	r2,0(r2)
}
  800440:	e037883a 	mov	sp,fp
  800444:	dfc00117 	ldw	ra,4(sp)
  800448:	df000017 	ldw	fp,0(sp)
  80044c:	dec00204 	addi	sp,sp,8
  800450:	f800283a 	ret

00800454 <isPrime>:


int isPrime(int inval){
  800454:	defff904 	addi	sp,sp,-28
  800458:	dfc00615 	stw	ra,24(sp)
  80045c:	df000515 	stw	fp,20(sp)
  800460:	dc400415 	stw	r17,16(sp)
  800464:	dc000315 	stw	r16,12(sp)
  800468:	df000304 	addi	fp,sp,12
  80046c:	e13fff15 	stw	r4,-4(fp)
	int i;
	int is_prime = 1;
  800470:	00800044 	movi	r2,1
  800474:	e0bffd15 	stw	r2,-12(fp)
	for(i=2; i <=  sqrt(inval); i++){
  800478:	00800084 	movi	r2,2
  80047c:	e0bffe15 	stw	r2,-8(fp)
  800480:	00000a06 	br	8004ac <isPrime+0x58>
		if(inval % i == 0){
  800484:	e13fff17 	ldw	r4,-4(fp)
  800488:	e17ffe17 	ldw	r5,-8(fp)
  80048c:	0801b780 	call	801b78 <__modsi3>
  800490:	1004c03a 	cmpne	r2,r2,zero
  800494:	1000021e 	bne	r2,zero,8004a0 <isPrime+0x4c>
			is_prime = 0;
  800498:	e03ffd15 	stw	zero,-12(fp)
			break;
  80049c:	00001706 	br	8004fc <isPrime+0xa8>


int isPrime(int inval){
	int i;
	int is_prime = 1;
	for(i=2; i <=  sqrt(inval); i++){
  8004a0:	e0bffe17 	ldw	r2,-8(fp)
  8004a4:	10800044 	addi	r2,r2,1
  8004a8:	e0bffe15 	stw	r2,-8(fp)
  8004ac:	e13ffe17 	ldw	r4,-8(fp)
  8004b0:	08019a40 	call	8019a4 <__floatsidf>
  8004b4:	1021883a 	mov	r16,r2
  8004b8:	1823883a 	mov	r17,r3
  8004bc:	e13fff17 	ldw	r4,-4(fp)
  8004c0:	08019a40 	call	8019a4 <__floatsidf>
  8004c4:	100b883a 	mov	r5,r2
  8004c8:	180d883a 	mov	r6,r3
  8004cc:	2809883a 	mov	r4,r5
  8004d0:	300b883a 	mov	r5,r6
  8004d4:	08009440 	call	800944 <sqrt>
  8004d8:	100f883a 	mov	r7,r2
  8004dc:	1811883a 	mov	r8,r3
  8004e0:	8009883a 	mov	r4,r16
  8004e4:	880b883a 	mov	r5,r17
  8004e8:	380d883a 	mov	r6,r7
  8004ec:	400f883a 	mov	r7,r8
  8004f0:	080191c0 	call	80191c <__ledf2>
  8004f4:	10800050 	cmplti	r2,r2,1
  8004f8:	103fe21e 	bne	r2,zero,800484 <isPrime+0x30>
		if(inval % i == 0){
			is_prime = 0;
			break;
		}
	}
	return is_prime;
  8004fc:	e0bffd17 	ldw	r2,-12(fp)
}
  800500:	e037883a 	mov	sp,fp
  800504:	dfc00317 	ldw	ra,12(sp)
  800508:	df000217 	ldw	fp,8(sp)
  80050c:	dc400117 	ldw	r17,4(sp)
  800510:	dc000017 	ldw	r16,0(sp)
  800514:	dec00404 	addi	sp,sp,16
  800518:	f800283a 	ret

0080051c <nextPrime>:

int nextPrime(int inval){
  80051c:	defffc04 	addi	sp,sp,-16
  800520:	dfc00315 	stw	ra,12(sp)
  800524:	df000215 	stw	fp,8(sp)
  800528:	df000204 	addi	fp,sp,8
  80052c:	e13fff15 	stw	r4,-4(fp)
	int i = inval;
  800530:	e0bfff17 	ldw	r2,-4(fp)
  800534:	e0bffe15 	stw	r2,-8(fp)
	while(!isPrime(++i));
  800538:	e0bffe17 	ldw	r2,-8(fp)
  80053c:	10800044 	addi	r2,r2,1
  800540:	e0bffe15 	stw	r2,-8(fp)
  800544:	e13ffe17 	ldw	r4,-8(fp)
  800548:	08004540 	call	800454 <isPrime>
  80054c:	1005003a 	cmpeq	r2,r2,zero
  800550:	103ff91e 	bne	r2,zero,800538 <nextPrime+0x1c>
	return i;
  800554:	e0bffe17 	ldw	r2,-8(fp)
}
  800558:	e037883a 	mov	sp,fp
  80055c:	dfc00117 	ldw	ra,4(sp)
  800560:	df000017 	ldw	fp,0(sp)
  800564:	dec00204 	addi	sp,sp,8
  800568:	f800283a 	ret

0080056c <bcd2sevenSeg>:
/*
 * puttime - read time from memory and print on console
 *
 * Parameter (only one): the address of the time variable.
 */
int bcd2sevenSeg(int intval){
  80056c:	defffd04 	addi	sp,sp,-12
  800570:	df000215 	stw	fp,8(sp)
  800574:	df000204 	addi	fp,sp,8
  800578:	e13fff15 	stw	r4,-4(fp)
	// mask to keep only the four least significant bits
	intval = intval & 15;
  80057c:	e0bfff17 	ldw	r2,-4(fp)
  800580:	108003cc 	andi	r2,r2,15
  800584:	e0bfff15 	stw	r2,-4(fp)

	// initialise vector to be returned
	int r;

	// look up table
	switch(intval){
  800588:	e0bfff17 	ldw	r2,-4(fp)
  80058c:	10800428 	cmpgeui	r2,r2,16
  800590:	1000461e 	bne	r2,zero,8006ac <bcd2sevenSeg+0x140>
  800594:	e0bfff17 	ldw	r2,-4(fp)
  800598:	1085883a 	add	r2,r2,r2
  80059c:	1087883a 	add	r3,r2,r2
  8005a0:	00802034 	movhi	r2,128
  8005a4:	10816d04 	addi	r2,r2,1460
  8005a8:	1885883a 	add	r2,r3,r2
  8005ac:	10800017 	ldw	r2,0(r2)
  8005b0:	1000683a 	jmp	r2
  8005b4:	008005f4 	movhi	r2,23
  8005b8:	00800600 	call	80060 <delaycount+0x7fd04>
  8005bc:	0080060c 	andi	r2,zero,24
  8005c0:	00800618 	cmpnei	r2,zero,24
  8005c4:	00800624 	muli	r2,zero,24
  8005c8:	00800630 	cmpltui	r2,zero,24
  8005cc:	0080063c 	xorhi	r2,zero,24
  8005d0:	00800648 	cmpgei	r2,zero,25
  8005d4:	00800654 	movui	r2,25
  8005d8:	0080065c 	xori	r2,zero,25
  8005dc:	00800668 	cmpgeui	r2,zero,25
  8005e0:	00800674 	movhi	r2,25
  8005e4:	00800680 	call	80068 <delaycount+0x7fd0c>
  8005e8:	0080068c 	andi	r2,zero,26
  8005ec:	00800698 	cmpnei	r2,zero,26
  8005f0:	008006a4 	muli	r2,zero,26
		case  0:	r = 0x40;		break;
  8005f4:	00801004 	movi	r2,64
  8005f8:	e0bffe15 	stw	r2,-8(fp)
  8005fc:	00002b06 	br	8006ac <bcd2sevenSeg+0x140>
		case  1:	r = 0x79;		break;
  800600:	00801e44 	movi	r2,121
  800604:	e0bffe15 	stw	r2,-8(fp)
  800608:	00002806 	br	8006ac <bcd2sevenSeg+0x140>
		case  2:	r = 0x24;		break;
  80060c:	00800904 	movi	r2,36
  800610:	e0bffe15 	stw	r2,-8(fp)
  800614:	00002506 	br	8006ac <bcd2sevenSeg+0x140>
		case  3:	r = 0x30;		break;
  800618:	00800c04 	movi	r2,48
  80061c:	e0bffe15 	stw	r2,-8(fp)
  800620:	00002206 	br	8006ac <bcd2sevenSeg+0x140>
		case  4:	r = 0x19;		break;
  800624:	00800644 	movi	r2,25
  800628:	e0bffe15 	stw	r2,-8(fp)
  80062c:	00001f06 	br	8006ac <bcd2sevenSeg+0x140>
		case  5:	r = 0x12;		break;
  800630:	00800484 	movi	r2,18
  800634:	e0bffe15 	stw	r2,-8(fp)
  800638:	00001c06 	br	8006ac <bcd2sevenSeg+0x140>
		case  6:	r = 0x02;		break;
  80063c:	00800084 	movi	r2,2
  800640:	e0bffe15 	stw	r2,-8(fp)
  800644:	00001906 	br	8006ac <bcd2sevenSeg+0x140>
		case  7:	r = 0x78;		break;
  800648:	00801e04 	movi	r2,120
  80064c:	e0bffe15 	stw	r2,-8(fp)
  800650:	00001606 	br	8006ac <bcd2sevenSeg+0x140>
		case  8:	r = 0x00;		break;
  800654:	e03ffe15 	stw	zero,-8(fp)
  800658:	00001406 	br	8006ac <bcd2sevenSeg+0x140>
		case  9:	r = 0x10;		break;
  80065c:	00800404 	movi	r2,16
  800660:	e0bffe15 	stw	r2,-8(fp)
  800664:	00001106 	br	8006ac <bcd2sevenSeg+0x140>
		case 10:	r = 0x08;		break;
  800668:	00800204 	movi	r2,8
  80066c:	e0bffe15 	stw	r2,-8(fp)
  800670:	00000e06 	br	8006ac <bcd2sevenSeg+0x140>
		case 11:	r = 0x03;		break;
  800674:	008000c4 	movi	r2,3
  800678:	e0bffe15 	stw	r2,-8(fp)
  80067c:	00000b06 	br	8006ac <bcd2sevenSeg+0x140>
		case 12:	r = 0x27;		break;
  800680:	008009c4 	movi	r2,39
  800684:	e0bffe15 	stw	r2,-8(fp)
  800688:	00000806 	br	8006ac <bcd2sevenSeg+0x140>
		case 13:	r = 0x21;		break;
  80068c:	00800844 	movi	r2,33
  800690:	e0bffe15 	stw	r2,-8(fp)
  800694:	00000506 	br	8006ac <bcd2sevenSeg+0x140>
		case 14:	r = 0x06;		break;
  800698:	00800184 	movi	r2,6
  80069c:	e0bffe15 	stw	r2,-8(fp)
  8006a0:	00000206 	br	8006ac <bcd2sevenSeg+0x140>
		case 15:	r = 0x0E;		break;
  8006a4:	00800384 	movi	r2,14
  8006a8:	e0bffe15 	stw	r2,-8(fp)
	}

	return r & 127;
  8006ac:	e0bffe17 	ldw	r2,-8(fp)
  8006b0:	10801fcc 	andi	r2,r2,127
}
  8006b4:	e037883a 	mov	sp,fp
  8006b8:	df000017 	ldw	fp,0(sp)
  8006bc:	dec00104 	addi	sp,sp,4
  8006c0:	f800283a 	ret

008006c4 <puthex>:
			printseg
		);
	}
}
*/
void puthex(int intval) {
  8006c4:	defffa04 	addi	sp,sp,-24
  8006c8:	dfc00515 	stw	ra,20(sp)
  8006cc:	df000415 	stw	fp,16(sp)
  8006d0:	dc000315 	stw	r16,12(sp)
  8006d4:	df000304 	addi	fp,sp,12
  8006d8:	e13fff15 	stw	r4,-4(fp)
	int i, printseg = 0;
  8006dc:	e03ffd15 	stw	zero,-12(fp)
	for(i = 3; i >= 0; i--){
  8006e0:	008000c4 	movi	r2,3
  8006e4:	e0bffe15 	stw	r2,-8(fp)
  8006e8:	00001206 	br	800734 <puthex+0x70>
		printseg = printseg | (bcd2sevenSeg(intval >> 4*i) << 7*i);
  8006ec:	e0bffe17 	ldw	r2,-8(fp)
  8006f0:	1085883a 	add	r2,r2,r2
  8006f4:	1085883a 	add	r2,r2,r2
  8006f8:	1007883a 	mov	r3,r2
  8006fc:	e0bfff17 	ldw	r2,-4(fp)
  800700:	10c9d83a 	sra	r4,r2,r3
  800704:	080056c0 	call	80056c <bcd2sevenSeg>
  800708:	1021883a 	mov	r16,r2
  80070c:	e13ffe17 	ldw	r4,-8(fp)
  800710:	014001c4 	movi	r5,7
  800714:	0801be80 	call	801be8 <__mulsi3>
  800718:	8086983a 	sll	r3,r16,r2
  80071c:	e0bffd17 	ldw	r2,-12(fp)
  800720:	10c4b03a 	or	r2,r2,r3
  800724:	e0bffd15 	stw	r2,-12(fp)
	}
}
*/
void puthex(int intval) {
	int i, printseg = 0;
	for(i = 3; i >= 0; i--){
  800728:	e0bffe17 	ldw	r2,-8(fp)
  80072c:	10bfffc4 	addi	r2,r2,-1
  800730:	e0bffe15 	stw	r2,-8(fp)
  800734:	e0bffe17 	ldw	r2,-8(fp)
  800738:	1004403a 	cmpge	r2,r2,zero
  80073c:	103feb1e 	bne	r2,zero,8006ec <puthex+0x28>
		printseg = printseg | (bcd2sevenSeg(intval >> 4*i) << 7*i);
	}
	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_LOW28_BASE, printseg);
  800740:	00c04074 	movhi	r3,257
  800744:	18c43004 	addi	r3,r3,4288
  800748:	e0bffd17 	ldw	r2,-12(fp)
  80074c:	18800035 	stwio	r2,0(r3)
}
  800750:	e037883a 	mov	sp,fp
  800754:	dfc00217 	ldw	ra,8(sp)
  800758:	df000117 	ldw	fp,4(sp)
  80075c:	dc000017 	ldw	r16,0(sp)
  800760:	dec00304 	addi	sp,sp,12
  800764:	f800283a 	ret

00800768 <puttime>:
 * puttime - read time from memory and print on console
 * 
 * Parameter (only one): the address of the time variable.
 */
void puttime( int * timeloc )
{
  800768:	defffc04 	addi	sp,sp,-16
  80076c:	dfc00315 	stw	ra,12(sp)
  800770:	df000215 	stw	fp,8(sp)
  800774:	df000204 	addi	fp,sp,8
  800778:	e13fff15 	stw	r4,-4(fp)
  /* Read time variable. */
  int tmp = * timeloc;
  80077c:	e0bfff17 	ldw	r2,-4(fp)
  800780:	10800017 	ldw	r2,0(r2)
  800784:	e0bffe15 	stw	r2,-8(fp)
  
  /* Send Newline character. */
  putchar( '\n' );
  800788:	00802074 	movhi	r2,129
  80078c:	10bce204 	addi	r2,r2,-3192
  800790:	10800017 	ldw	r2,0(r2)
  800794:	11400217 	ldw	r5,8(r2)
  800798:	01000284 	movi	r4,10
  80079c:	08023600 	call	802360 <putc>

  /* Send time to console. */
  putchar( hexasc( tmp >> 12 ) ); /* First digit */
  8007a0:	e0bffe17 	ldw	r2,-8(fp)
  8007a4:	1009d33a 	srai	r4,r2,12
  8007a8:	08009240 	call	800924 <hexasc>
  8007ac:	1009883a 	mov	r4,r2
  8007b0:	00802074 	movhi	r2,129
  8007b4:	10bce204 	addi	r2,r2,-3192
  8007b8:	10800017 	ldw	r2,0(r2)
  8007bc:	11400217 	ldw	r5,8(r2)
  8007c0:	08023600 	call	802360 <putc>
  putchar( hexasc( tmp >>  8 ) ); /* Second digit */
  8007c4:	e0bffe17 	ldw	r2,-8(fp)
  8007c8:	1009d23a 	srai	r4,r2,8
  8007cc:	08009240 	call	800924 <hexasc>
  8007d0:	1009883a 	mov	r4,r2
  8007d4:	00802074 	movhi	r2,129
  8007d8:	10bce204 	addi	r2,r2,-3192
  8007dc:	10800017 	ldw	r2,0(r2)
  8007e0:	11400217 	ldw	r5,8(r2)
  8007e4:	08023600 	call	802360 <putc>
  putchar( ':' );                 /* Colon */
  8007e8:	00802074 	movhi	r2,129
  8007ec:	10bce204 	addi	r2,r2,-3192
  8007f0:	10800017 	ldw	r2,0(r2)
  8007f4:	11400217 	ldw	r5,8(r2)
  8007f8:	01000e84 	movi	r4,58
  8007fc:	08023600 	call	802360 <putc>
  putchar( hexasc( tmp >>  4 ) ); /* Third digit */
  800800:	e0bffe17 	ldw	r2,-8(fp)
  800804:	1009d13a 	srai	r4,r2,4
  800808:	08009240 	call	800924 <hexasc>
  80080c:	1009883a 	mov	r4,r2
  800810:	00802074 	movhi	r2,129
  800814:	10bce204 	addi	r2,r2,-3192
  800818:	10800017 	ldw	r2,0(r2)
  80081c:	11400217 	ldw	r5,8(r2)
  800820:	08023600 	call	802360 <putc>
  putchar( hexasc( tmp       ) ); /* Last digit */
  800824:	e13ffe17 	ldw	r4,-8(fp)
  800828:	08009240 	call	800924 <hexasc>
  80082c:	1009883a 	mov	r4,r2
  800830:	00802074 	movhi	r2,129
  800834:	10bce204 	addi	r2,r2,-3192
  800838:	10800017 	ldw	r2,0(r2)
  80083c:	11400217 	ldw	r5,8(r2)
  800840:	08023600 	call	802360 <putc>
}
  800844:	e037883a 	mov	sp,fp
  800848:	dfc00117 	ldw	ra,4(sp)
  80084c:	df000017 	ldw	fp,0(sp)
  800850:	dec00204 	addi	sp,sp,8
  800854:	f800283a 	ret

00800858 <tick>:
 * tick - update the time by adding one second
 * 
 * Parameter (only one): the address of the time variable.
 */
void tick( int * timeloc )
{
  800858:	defffd04 	addi	sp,sp,-12
  80085c:	df000215 	stw	fp,8(sp)
  800860:	df000204 	addi	fp,sp,8
  800864:	e13fff15 	stw	r4,-4(fp)
  /* Read time variable. */
  int tmp = * timeloc;
  800868:	e0bfff17 	ldw	r2,-4(fp)
  80086c:	10800017 	ldw	r2,0(r2)
  800870:	e0bffe15 	stw	r2,-8(fp)
  
  tmp = tmp + 1; /* try a tick */
  800874:	e0bffe17 	ldw	r2,-8(fp)
  800878:	10800044 	addi	r2,r2,1
  80087c:	e0bffe15 	stw	r2,-8(fp)
  
  /* if we ticked from 9 seconds to 10, adjust time properly */
  if( (tmp & 0x000f) == 0x000a ) tmp = tmp - 0x000a + 0x0010;
  800880:	e0bffe17 	ldw	r2,-8(fp)
  800884:	108003cc 	andi	r2,r2,15
  800888:	10800298 	cmpnei	r2,r2,10
  80088c:	1000031e 	bne	r2,zero,80089c <tick+0x44>
  800890:	e0bffe17 	ldw	r2,-8(fp)
  800894:	10800184 	addi	r2,r2,6
  800898:	e0bffe15 	stw	r2,-8(fp)
  
  /* if we ticked from 59 seconds to 60, adjust time properly */
  if( (tmp & 0x00f0) == 0x0060 ) tmp = tmp - 0x0060 + 0x0100;
  80089c:	e0bffe17 	ldw	r2,-8(fp)
  8008a0:	10803c0c 	andi	r2,r2,240
  8008a4:	10801818 	cmpnei	r2,r2,96
  8008a8:	1000031e 	bne	r2,zero,8008b8 <tick+0x60>
  8008ac:	e0bffe17 	ldw	r2,-8(fp)
  8008b0:	10802804 	addi	r2,r2,160
  8008b4:	e0bffe15 	stw	r2,-8(fp)
  
  /* if we ticked from 9 minutes to 10, adjust time properly */
  if( (tmp & 0x0f00) == 0x0a00 ) tmp = tmp - 0x0a00 + 0x1000;
  8008b8:	e0bffe17 	ldw	r2,-8(fp)
  8008bc:	1083c00c 	andi	r2,r2,3840
  8008c0:	10828018 	cmpnei	r2,r2,2560
  8008c4:	1000031e 	bne	r2,zero,8008d4 <tick+0x7c>
  8008c8:	e0bffe17 	ldw	r2,-8(fp)
  8008cc:	10818004 	addi	r2,r2,1536
  8008d0:	e0bffe15 	stw	r2,-8(fp)
  
  /* if we ticked from 59 minutes to 60, adjust time properly */
  if( (tmp & 0xf000) == 0x6000 ) tmp = 0x0000;
  8008d4:	e0bffe17 	ldw	r2,-8(fp)
  8008d8:	10bc000c 	andi	r2,r2,61440
  8008dc:	10980018 	cmpnei	r2,r2,24576
  8008e0:	1000011e 	bne	r2,zero,8008e8 <tick+0x90>
  8008e4:	e03ffe15 	stw	zero,-8(fp)
  
  *timeloc = tmp;      /* update memory with new time value */
  8008e8:	e0ffff17 	ldw	r3,-4(fp)
  8008ec:	e0bffe17 	ldw	r2,-8(fp)
  8008f0:	18800015 	stw	r2,0(r3)
}
  8008f4:	e037883a 	mov	sp,fp
  8008f8:	df000017 	ldw	fp,0(sp)
  8008fc:	dec00104 	addi	sp,sp,4
  800900:	f800283a 	ret

00800904 <delay>:

        .equ    delaycount,     860 #set right delay value here!
        .text                   # Instructions follow
        .global delay           # Makes "main" globally known

delay:	beq     r4,r0,fin       # exit outer loop
  800904:	20000626 	beq	r4,zero,800920 <fin>

        movi    r8,delaycount   # delay estimation for 1ms
  800908:	0200d704 	movi	r8,860

0080090c <inner>:

inner:  beq     r8,r0,outer     # exit from inner loop
  80090c:	40000226 	beq	r8,zero,800918 <outer>

        subi    r8,r8,1         # decrement inner counter
  800910:	423fffc4 	addi	r8,r8,-1
        
        br      inner
  800914:	003ffd06 	br	80090c <inner>

00800918 <outer>:
        
outer:  subi    r4,r4,1         # decrement outer counter
  800918:	213fffc4 	addi	r4,r4,-1
        br      delay
  80091c:	003ff906 	br	800904 <delay>

00800920 <fin>:


fin:    ret
  800920:	f800283a 	ret

00800924 <hexasc>:
        
        .text                   # Instructions follow

        .global hexasc          # makes label "main" globally known

hexasc: andi    r4,r4,0xF       # only consider lower 4 bits
  800924:	210003cc 	andi	r4,r4,15

        movi    r8,0xA          # #10
  800928:	02000284 	movi	r8,10
        bge     r4,r8,AtoF      # if the input is in 10-15 range
  80092c:	2200020e 	bge	r4,r8,800938 <AtoF>
        
        movi    r8,0x30         # ascii code for '0'        
  800930:	02000c04 	movi	r8,48
        br      fin
  800934:	00000106 	br	80093c <fin>

00800938 <AtoF>:
AtoF:        
        movi    r8,0x41-0xA     # ascii code for 'A'
  800938:	02000dc4 	movi	r8,55

0080093c <fin>:
fin:
        add     r2,r4,r8        # ascii code for input
  80093c:	2205883a 	add	r2,r4,r8
        
        ret
  800940:	f800283a 	ret

00800944 <sqrt>:
  800944:	defff104 	addi	sp,sp,-60
  800948:	dd000d15 	stw	r20,52(sp)
  80094c:	05002074 	movhi	r20,129
  800950:	a53ce104 	addi	r20,r20,-3196
  800954:	dcc00c15 	stw	r19,48(sp)
  800958:	dc800b15 	stw	r18,44(sp)
  80095c:	dc400a15 	stw	r17,40(sp)
  800960:	dc000915 	stw	r16,36(sp)
  800964:	2025883a 	mov	r18,r4
  800968:	dfc00e15 	stw	ra,56(sp)
  80096c:	2827883a 	mov	r19,r5
  800970:	0800a740 	call	800a74 <__ieee754_sqrt>
  800974:	a1000017 	ldw	r4,0(r20)
  800978:	1021883a 	mov	r16,r2
  80097c:	00bfffc4 	movi	r2,-1
  800980:	1823883a 	mov	r17,r3
  800984:	20800a26 	beq	r4,r2,8009b0 <sqrt+0x6c>
  800988:	9009883a 	mov	r4,r18
  80098c:	980b883a 	mov	r5,r19
  800990:	0800d3c0 	call	800d3c <__isnand>
  800994:	1000061e 	bne	r2,zero,8009b0 <sqrt+0x6c>
  800998:	000d883a 	mov	r6,zero
  80099c:	000f883a 	mov	r7,zero
  8009a0:	9009883a 	mov	r4,r18
  8009a4:	980b883a 	mov	r5,r19
  8009a8:	08018940 	call	801894 <__ltdf2>
  8009ac:	10000a16 	blt	r2,zero,8009d8 <sqrt+0x94>
  8009b0:	8005883a 	mov	r2,r16
  8009b4:	8807883a 	mov	r3,r17
  8009b8:	dfc00e17 	ldw	ra,56(sp)
  8009bc:	dd000d17 	ldw	r20,52(sp)
  8009c0:	dcc00c17 	ldw	r19,48(sp)
  8009c4:	dc800b17 	ldw	r18,44(sp)
  8009c8:	dc400a17 	ldw	r17,40(sp)
  8009cc:	dc000917 	ldw	r16,36(sp)
  8009d0:	dec00f04 	addi	sp,sp,60
  8009d4:	f800283a 	ret
  8009d8:	a4000017 	ldw	r16,0(r20)
  8009dc:	00800044 	movi	r2,1
  8009e0:	00c02074 	movhi	r3,129
  8009e4:	18f58304 	addi	r3,r3,-10740
  8009e8:	d8800015 	stw	r2,0(sp)
  8009ec:	d8c00115 	stw	r3,4(sp)
  8009f0:	dcc00315 	stw	r19,12(sp)
  8009f4:	d8000815 	stw	zero,32(sp)
  8009f8:	dc800415 	stw	r18,16(sp)
  8009fc:	dcc00515 	stw	r19,20(sp)
  800a00:	dc800215 	stw	r18,8(sp)
  800a04:	80000a1e 	bne	r16,zero,800a30 <sqrt+0xec>
  800a08:	d8000615 	stw	zero,24(sp)
  800a0c:	d8000715 	stw	zero,28(sp)
  800a10:	d809883a 	mov	r4,sp
  800a14:	0800d6c0 	call	800d6c <matherr>
  800a18:	10000e26 	beq	r2,zero,800a54 <sqrt+0x110>
  800a1c:	d8800817 	ldw	r2,32(sp)
  800a20:	1000101e 	bne	r2,zero,800a64 <sqrt+0x120>
  800a24:	dc000617 	ldw	r16,24(sp)
  800a28:	dc400717 	ldw	r17,28(sp)
  800a2c:	003fe006 	br	8009b0 <sqrt+0x6c>
  800a30:	0009883a 	mov	r4,zero
  800a34:	000d883a 	mov	r6,zero
  800a38:	000b883a 	mov	r5,zero
  800a3c:	000f883a 	mov	r7,zero
  800a40:	080163c0 	call	80163c <__divdf3>
  800a44:	d8800615 	stw	r2,24(sp)
  800a48:	00800084 	movi	r2,2
  800a4c:	d8c00715 	stw	r3,28(sp)
  800a50:	80bfef1e 	bne	r16,r2,800a10 <sqrt+0xcc>
  800a54:	08022d80 	call	8022d8 <__errno>
  800a58:	00c00844 	movi	r3,33
  800a5c:	10c00015 	stw	r3,0(r2)
  800a60:	003fee06 	br	800a1c <sqrt+0xd8>
  800a64:	08022d80 	call	8022d8 <__errno>
  800a68:	d8c00817 	ldw	r3,32(sp)
  800a6c:	10c00015 	stw	r3,0(r2)
  800a70:	003fec06 	br	800a24 <sqrt+0xe0>

00800a74 <__ieee754_sqrt>:
  800a74:	defffd04 	addi	sp,sp,-12
  800a78:	dc000015 	stw	r16,0(sp)
  800a7c:	009ffc34 	movhi	r2,32752
  800a80:	2021883a 	mov	r16,r4
  800a84:	291ffc2c 	andhi	r4,r5,32752
  800a88:	dc400115 	stw	r17,4(sp)
  800a8c:	dfc00215 	stw	ra,8(sp)
  800a90:	2823883a 	mov	r17,r5
  800a94:	280f883a 	mov	r7,r5
  800a98:	2807883a 	mov	r3,r5
  800a9c:	8011883a 	mov	r8,r16
  800aa0:	20807d26 	beq	r4,r2,800c98 <__ieee754_sqrt+0x224>
  800aa4:	01408d0e 	bge	zero,r5,800cdc <__ieee754_sqrt+0x268>
  800aa8:	380dd53a 	srai	r6,r7,20
  800aac:	3000131e 	bne	r6,zero,800afc <__ieee754_sqrt+0x88>
  800ab0:	1800041e 	bne	r3,zero,800ac4 <__ieee754_sqrt+0x50>
  800ab4:	400ed2fa 	srli	r7,r8,11
  800ab8:	31bffac4 	addi	r6,r6,-21
  800abc:	4010957a 	slli	r8,r8,21
  800ac0:	383ffc26 	beq	r7,zero,800ab4 <__ieee754_sqrt+0x40>
  800ac4:	3880042c 	andhi	r2,r7,16
  800ac8:	1000991e 	bne	r2,zero,800d30 <__ieee754_sqrt+0x2bc>
  800acc:	0009883a 	mov	r4,zero
  800ad0:	39cf883a 	add	r7,r7,r7
  800ad4:	3880042c 	andhi	r2,r7,16
  800ad8:	21000044 	addi	r4,r4,1
  800adc:	103ffc26 	beq	r2,zero,800ad0 <__ieee754_sqrt+0x5c>
  800ae0:	00800804 	movi	r2,32
  800ae4:	1105c83a 	sub	r2,r2,r4
  800ae8:	4086d83a 	srl	r3,r8,r2
  800aec:	4110983a 	sll	r8,r8,r4
  800af0:	3105c83a 	sub	r2,r6,r4
  800af4:	38ceb03a 	or	r7,r7,r3
  800af8:	11800044 	addi	r6,r2,1
  800afc:	31bf0044 	addi	r6,r6,-1023
  800b00:	30c0004c 	andi	r3,r6,1
  800b04:	00800434 	movhi	r2,16
  800b08:	10bfffc4 	addi	r2,r2,-1
  800b0c:	3884703a 	and	r2,r7,r2
  800b10:	1807003a 	cmpeq	r3,r3,zero
  800b14:	11000434 	orhi	r4,r2,16
  800b18:	18005426 	beq	r3,zero,800c6c <__ieee754_sqrt+0x1f8>
  800b1c:	4004d7fa 	srli	r2,r8,31
  800b20:	4207883a 	add	r3,r8,r8
  800b24:	02800834 	movhi	r10,32
  800b28:	1105883a 	add	r2,r2,r4
  800b2c:	2089883a 	add	r4,r4,r2
  800b30:	0011883a 	mov	r8,zero
  800b34:	000b883a 	mov	r5,zero
  800b38:	0013883a 	mov	r9,zero
  800b3c:	02c00584 	movi	r11,22
  800b40:	520f883a 	add	r7,r10,r8
  800b44:	1804d7fa 	srli	r2,r3,31
  800b48:	4a400044 	addi	r9,r9,1
  800b4c:	18c7883a 	add	r3,r3,r3
  800b50:	21c00316 	blt	r4,r7,800b60 <__ieee754_sqrt+0xec>
  800b54:	21c9c83a 	sub	r4,r4,r7
  800b58:	2a8b883a 	add	r5,r5,r10
  800b5c:	51d1883a 	add	r8,r10,r7
  800b60:	1105883a 	add	r2,r2,r4
  800b64:	5014d07a 	srli	r10,r10,1
  800b68:	2089883a 	add	r4,r4,r2
  800b6c:	4afff41e 	bne	r9,r11,800b40 <__ieee754_sqrt+0xcc>
  800b70:	02600034 	movhi	r9,32768
  800b74:	0017883a 	mov	r11,zero
  800b78:	0019883a 	mov	r12,zero
  800b7c:	0015883a 	mov	r10,zero
  800b80:	4821883a 	mov	r16,r9
  800b84:	03c00804 	movi	r15,32
  800b88:	00000806 	br	800bac <__ieee754_sqrt+0x138>
  800b8c:	22003426 	beq	r4,r8,800c60 <__ieee754_sqrt+0x1ec>
  800b90:	1804d7fa 	srli	r2,r3,31
  800b94:	52800044 	addi	r10,r10,1
  800b98:	18c7883a 	add	r3,r3,r3
  800b9c:	1105883a 	add	r2,r2,r4
  800ba0:	2089883a 	add	r4,r4,r2
  800ba4:	4812d07a 	srli	r9,r9,1
  800ba8:	53c01326 	beq	r10,r15,800bf8 <__ieee754_sqrt+0x184>
  800bac:	4acf883a 	add	r7,r9,r11
  800bb0:	413ff60e 	bge	r8,r4,800b8c <__ieee754_sqrt+0x118>
  800bb4:	38a0002c 	andhi	r2,r7,32768
  800bb8:	3a57883a 	add	r11,r7,r9
  800bbc:	14002426 	beq	r2,r16,800c50 <__ieee754_sqrt+0x1dc>
  800bc0:	4005883a 	mov	r2,r8
  800bc4:	2209c83a 	sub	r4,r4,r8
  800bc8:	19c0012e 	bgeu	r3,r7,800bd0 <__ieee754_sqrt+0x15c>
  800bcc:	213fffc4 	addi	r4,r4,-1
  800bd0:	19c7c83a 	sub	r3,r3,r7
  800bd4:	1011883a 	mov	r8,r2
  800bd8:	1804d7fa 	srli	r2,r3,31
  800bdc:	52800044 	addi	r10,r10,1
  800be0:	6259883a 	add	r12,r12,r9
  800be4:	1105883a 	add	r2,r2,r4
  800be8:	18c7883a 	add	r3,r3,r3
  800bec:	2089883a 	add	r4,r4,r2
  800bf0:	4812d07a 	srli	r9,r9,1
  800bf4:	53ffed1e 	bne	r10,r15,800bac <__ieee754_sqrt+0x138>
  800bf8:	20c4b03a 	or	r2,r4,r3
  800bfc:	1000201e 	bne	r2,zero,800c80 <__ieee754_sqrt+0x20c>
  800c00:	600ed07a 	srli	r7,r12,1
  800c04:	2880004c 	andi	r2,r5,1
  800c08:	1005003a 	cmpeq	r2,r2,zero
  800c0c:	1000011e 	bne	r2,zero,800c14 <__ieee754_sqrt+0x1a0>
  800c10:	39e00034 	orhi	r7,r7,32768
  800c14:	300dd07a 	srai	r6,r6,1
  800c18:	280bd07a 	srai	r5,r5,1
  800c1c:	010ff834 	movhi	r4,16352
  800c20:	300c953a 	slli	r6,r6,20
  800c24:	290b883a 	add	r5,r5,r4
  800c28:	3821883a 	mov	r16,r7
  800c2c:	299d883a 	add	r14,r5,r6
  800c30:	7023883a 	mov	r17,r14
  800c34:	8005883a 	mov	r2,r16
  800c38:	8807883a 	mov	r3,r17
  800c3c:	dfc00217 	ldw	ra,8(sp)
  800c40:	dc400117 	ldw	r17,4(sp)
  800c44:	dc000017 	ldw	r16,0(sp)
  800c48:	dec00304 	addi	sp,sp,12
  800c4c:	f800283a 	ret
  800c50:	5884703a 	and	r2,r11,r2
  800c54:	103fda1e 	bne	r2,zero,800bc0 <__ieee754_sqrt+0x14c>
  800c58:	40800044 	addi	r2,r8,1
  800c5c:	003fd906 	br	800bc4 <__ieee754_sqrt+0x150>
  800c60:	19ffd42e 	bgeu	r3,r7,800bb4 <__ieee754_sqrt+0x140>
  800c64:	2011883a 	mov	r8,r4
  800c68:	003fc906 	br	800b90 <__ieee754_sqrt+0x11c>
  800c6c:	4004d7fa 	srli	r2,r8,31
  800c70:	4211883a 	add	r8,r8,r8
  800c74:	1105883a 	add	r2,r2,r4
  800c78:	2089883a 	add	r4,r4,r2
  800c7c:	003fa706 	br	800b1c <__ieee754_sqrt+0xa8>
  800c80:	00bfffc4 	movi	r2,-1
  800c84:	60802726 	beq	r12,r2,800d24 <__ieee754_sqrt+0x2b0>
  800c88:	6080004c 	andi	r2,r12,1
  800c8c:	6085883a 	add	r2,r12,r2
  800c90:	100ed07a 	srli	r7,r2,1
  800c94:	003fdb06 	br	800c04 <__ieee754_sqrt+0x190>
  800c98:	8009883a 	mov	r4,r16
  800c9c:	800d883a 	mov	r6,r16
  800ca0:	08012780 	call	801278 <__muldf3>
  800ca4:	180f883a 	mov	r7,r3
  800ca8:	880b883a 	mov	r5,r17
  800cac:	8009883a 	mov	r4,r16
  800cb0:	100d883a 	mov	r6,r2
  800cb4:	08012040 	call	801204 <__adddf3>
  800cb8:	1021883a 	mov	r16,r2
  800cbc:	1823883a 	mov	r17,r3
  800cc0:	8005883a 	mov	r2,r16
  800cc4:	8807883a 	mov	r3,r17
  800cc8:	dfc00217 	ldw	ra,8(sp)
  800ccc:	dc400117 	ldw	r17,4(sp)
  800cd0:	dc000017 	ldw	r16,0(sp)
  800cd4:	dec00304 	addi	sp,sp,12
  800cd8:	f800283a 	ret
  800cdc:	00a00034 	movhi	r2,32768
  800ce0:	10bfffc4 	addi	r2,r2,-1
  800ce4:	2884703a 	and	r2,r5,r2
  800ce8:	8084b03a 	or	r2,r16,r2
  800cec:	103fd126 	beq	r2,zero,800c34 <__ieee754_sqrt+0x1c0>
  800cf0:	283f6d26 	beq	r5,zero,800aa8 <__ieee754_sqrt+0x34>
  800cf4:	280f883a 	mov	r7,r5
  800cf8:	8009883a 	mov	r4,r16
  800cfc:	800d883a 	mov	r6,r16
  800d00:	08011840 	call	801184 <__subdf3>
  800d04:	1009883a 	mov	r4,r2
  800d08:	180b883a 	mov	r5,r3
  800d0c:	100d883a 	mov	r6,r2
  800d10:	180f883a 	mov	r7,r3
  800d14:	080163c0 	call	80163c <__divdf3>
  800d18:	1021883a 	mov	r16,r2
  800d1c:	1823883a 	mov	r17,r3
  800d20:	003fc406 	br	800c34 <__ieee754_sqrt+0x1c0>
  800d24:	29400044 	addi	r5,r5,1
  800d28:	000f883a 	mov	r7,zero
  800d2c:	003fb506 	br	800c04 <__ieee754_sqrt+0x190>
  800d30:	0009883a 	mov	r4,zero
  800d34:	00800804 	movi	r2,32
  800d38:	003f6b06 	br	800ae8 <__ieee754_sqrt+0x74>

00800d3c <__isnand>:
  800d3c:	200d883a 	mov	r6,r4
  800d40:	0109c83a 	sub	r4,zero,r4
  800d44:	2188b03a 	or	r4,r4,r6
  800d48:	2008d7fa 	srli	r4,r4,31
  800d4c:	00a00034 	movhi	r2,32768
  800d50:	10bfffc4 	addi	r2,r2,-1
  800d54:	1144703a 	and	r2,r2,r5
  800d58:	2088b03a 	or	r4,r4,r2
  800d5c:	009ffc34 	movhi	r2,32752
  800d60:	1105c83a 	sub	r2,r2,r4
  800d64:	1004d7fa 	srli	r2,r2,31
  800d68:	f800283a 	ret

00800d6c <matherr>:
  800d6c:	0005883a 	mov	r2,zero
  800d70:	f800283a 	ret

00800d74 <_fpadd_parts>:
  800d74:	defff804 	addi	sp,sp,-32
  800d78:	dcc00315 	stw	r19,12(sp)
  800d7c:	2027883a 	mov	r19,r4
  800d80:	21000017 	ldw	r4,0(r4)
  800d84:	00c00044 	movi	r3,1
  800d88:	dd400515 	stw	r21,20(sp)
  800d8c:	dd000415 	stw	r20,16(sp)
  800d90:	ddc00715 	stw	r23,28(sp)
  800d94:	dd800615 	stw	r22,24(sp)
  800d98:	dc800215 	stw	r18,8(sp)
  800d9c:	dc400115 	stw	r17,4(sp)
  800da0:	dc000015 	stw	r16,0(sp)
  800da4:	282b883a 	mov	r21,r5
  800da8:	3029883a 	mov	r20,r6
  800dac:	1900632e 	bgeu	r3,r4,800f3c <_fpadd_parts+0x1c8>
  800db0:	28800017 	ldw	r2,0(r5)
  800db4:	1880812e 	bgeu	r3,r2,800fbc <_fpadd_parts+0x248>
  800db8:	00c00104 	movi	r3,4
  800dbc:	20c0dc26 	beq	r4,r3,801130 <_fpadd_parts+0x3bc>
  800dc0:	10c07e26 	beq	r2,r3,800fbc <_fpadd_parts+0x248>
  800dc4:	00c00084 	movi	r3,2
  800dc8:	10c06726 	beq	r2,r3,800f68 <_fpadd_parts+0x1f4>
  800dcc:	20c07b26 	beq	r4,r3,800fbc <_fpadd_parts+0x248>
  800dd0:	9dc00217 	ldw	r23,8(r19)
  800dd4:	28c00217 	ldw	r3,8(r5)
  800dd8:	9c400317 	ldw	r17,12(r19)
  800ddc:	2bc00317 	ldw	r15,12(r5)
  800de0:	b8cdc83a 	sub	r6,r23,r3
  800de4:	9c800417 	ldw	r18,16(r19)
  800de8:	2c000417 	ldw	r16,16(r5)
  800dec:	3009883a 	mov	r4,r6
  800df0:	30009716 	blt	r6,zero,801050 <_fpadd_parts+0x2dc>
  800df4:	00800fc4 	movi	r2,63
  800df8:	11806b16 	blt	r2,r6,800fa8 <_fpadd_parts+0x234>
  800dfc:	0100a40e 	bge	zero,r4,801090 <_fpadd_parts+0x31c>
  800e00:	35bff804 	addi	r22,r6,-32
  800e04:	b000bc16 	blt	r22,zero,8010f8 <_fpadd_parts+0x384>
  800e08:	8596d83a 	srl	r11,r16,r22
  800e0c:	0019883a 	mov	r12,zero
  800e10:	0013883a 	mov	r9,zero
  800e14:	01000044 	movi	r4,1
  800e18:	0015883a 	mov	r10,zero
  800e1c:	b000be16 	blt	r22,zero,801118 <_fpadd_parts+0x3a4>
  800e20:	2590983a 	sll	r8,r4,r22
  800e24:	000f883a 	mov	r7,zero
  800e28:	00bfffc4 	movi	r2,-1
  800e2c:	3889883a 	add	r4,r7,r2
  800e30:	408b883a 	add	r5,r8,r2
  800e34:	21cd803a 	cmpltu	r6,r4,r7
  800e38:	314b883a 	add	r5,r6,r5
  800e3c:	7904703a 	and	r2,r15,r4
  800e40:	8146703a 	and	r3,r16,r5
  800e44:	10c4b03a 	or	r2,r2,r3
  800e48:	10000226 	beq	r2,zero,800e54 <_fpadd_parts+0xe0>
  800e4c:	02400044 	movi	r9,1
  800e50:	0015883a 	mov	r10,zero
  800e54:	5a5eb03a 	or	r15,r11,r9
  800e58:	62a0b03a 	or	r16,r12,r10
  800e5c:	99400117 	ldw	r5,4(r19)
  800e60:	a8800117 	ldw	r2,4(r21)
  800e64:	28806e26 	beq	r5,r2,801020 <_fpadd_parts+0x2ac>
  800e68:	28006626 	beq	r5,zero,801004 <_fpadd_parts+0x290>
  800e6c:	7c45c83a 	sub	r2,r15,r17
  800e70:	7889803a 	cmpltu	r4,r15,r2
  800e74:	8487c83a 	sub	r3,r16,r18
  800e78:	1909c83a 	sub	r4,r3,r4
  800e7c:	100d883a 	mov	r6,r2
  800e80:	200f883a 	mov	r7,r4
  800e84:	38007716 	blt	r7,zero,801064 <_fpadd_parts+0x2f0>
  800e88:	a5c00215 	stw	r23,8(r20)
  800e8c:	a1c00415 	stw	r7,16(r20)
  800e90:	a0000115 	stw	zero,4(r20)
  800e94:	a1800315 	stw	r6,12(r20)
  800e98:	a2000317 	ldw	r8,12(r20)
  800e9c:	a2400417 	ldw	r9,16(r20)
  800ea0:	00bfffc4 	movi	r2,-1
  800ea4:	408b883a 	add	r5,r8,r2
  800ea8:	2a09803a 	cmpltu	r4,r5,r8
  800eac:	488d883a 	add	r6,r9,r2
  800eb0:	01c40034 	movhi	r7,4096
  800eb4:	39ffffc4 	addi	r7,r7,-1
  800eb8:	218d883a 	add	r6,r4,r6
  800ebc:	39801736 	bltu	r7,r6,800f1c <_fpadd_parts+0x1a8>
  800ec0:	31c06526 	beq	r6,r7,801058 <_fpadd_parts+0x2e4>
  800ec4:	a3000217 	ldw	r12,8(r20)
  800ec8:	4209883a 	add	r4,r8,r8
  800ecc:	00bfffc4 	movi	r2,-1
  800ed0:	220f803a 	cmpltu	r7,r4,r8
  800ed4:	4a4b883a 	add	r5,r9,r9
  800ed8:	394f883a 	add	r7,r7,r5
  800edc:	2095883a 	add	r10,r4,r2
  800ee0:	3897883a 	add	r11,r7,r2
  800ee4:	510d803a 	cmpltu	r6,r10,r4
  800ee8:	6099883a 	add	r12,r12,r2
  800eec:	32d7883a 	add	r11,r6,r11
  800ef0:	00840034 	movhi	r2,4096
  800ef4:	10bfffc4 	addi	r2,r2,-1
  800ef8:	2011883a 	mov	r8,r4
  800efc:	3813883a 	mov	r9,r7
  800f00:	a1000315 	stw	r4,12(r20)
  800f04:	a1c00415 	stw	r7,16(r20)
  800f08:	a3000215 	stw	r12,8(r20)
  800f0c:	12c00336 	bltu	r2,r11,800f1c <_fpadd_parts+0x1a8>
  800f10:	58bfed1e 	bne	r11,r2,800ec8 <_fpadd_parts+0x154>
  800f14:	00bfff84 	movi	r2,-2
  800f18:	12bfeb2e 	bgeu	r2,r10,800ec8 <_fpadd_parts+0x154>
  800f1c:	a2800417 	ldw	r10,16(r20)
  800f20:	008000c4 	movi	r2,3
  800f24:	00c80034 	movhi	r3,8192
  800f28:	18ffffc4 	addi	r3,r3,-1
  800f2c:	a2400317 	ldw	r9,12(r20)
  800f30:	a0800015 	stw	r2,0(r20)
  800f34:	1a802336 	bltu	r3,r10,800fc4 <_fpadd_parts+0x250>
  800f38:	a027883a 	mov	r19,r20
  800f3c:	9805883a 	mov	r2,r19
  800f40:	ddc00717 	ldw	r23,28(sp)
  800f44:	dd800617 	ldw	r22,24(sp)
  800f48:	dd400517 	ldw	r21,20(sp)
  800f4c:	dd000417 	ldw	r20,16(sp)
  800f50:	dcc00317 	ldw	r19,12(sp)
  800f54:	dc800217 	ldw	r18,8(sp)
  800f58:	dc400117 	ldw	r17,4(sp)
  800f5c:	dc000017 	ldw	r16,0(sp)
  800f60:	dec00804 	addi	sp,sp,32
  800f64:	f800283a 	ret
  800f68:	20fff41e 	bne	r4,r3,800f3c <_fpadd_parts+0x1c8>
  800f6c:	31000015 	stw	r4,0(r6)
  800f70:	98800117 	ldw	r2,4(r19)
  800f74:	30800115 	stw	r2,4(r6)
  800f78:	98c00217 	ldw	r3,8(r19)
  800f7c:	30c00215 	stw	r3,8(r6)
  800f80:	98800317 	ldw	r2,12(r19)
  800f84:	30800315 	stw	r2,12(r6)
  800f88:	98c00417 	ldw	r3,16(r19)
  800f8c:	30c00415 	stw	r3,16(r6)
  800f90:	98800117 	ldw	r2,4(r19)
  800f94:	28c00117 	ldw	r3,4(r5)
  800f98:	3027883a 	mov	r19,r6
  800f9c:	10c4703a 	and	r2,r2,r3
  800fa0:	30800115 	stw	r2,4(r6)
  800fa4:	003fe506 	br	800f3c <_fpadd_parts+0x1c8>
  800fa8:	1dc02616 	blt	r3,r23,801044 <_fpadd_parts+0x2d0>
  800fac:	0023883a 	mov	r17,zero
  800fb0:	182f883a 	mov	r23,r3
  800fb4:	0025883a 	mov	r18,zero
  800fb8:	003fa806 	br	800e5c <_fpadd_parts+0xe8>
  800fbc:	a827883a 	mov	r19,r21
  800fc0:	003fde06 	br	800f3c <_fpadd_parts+0x1c8>
  800fc4:	01800044 	movi	r6,1
  800fc8:	500497fa 	slli	r2,r10,31
  800fcc:	4808d07a 	srli	r4,r9,1
  800fd0:	518ad83a 	srl	r5,r10,r6
  800fd4:	a2000217 	ldw	r8,8(r20)
  800fd8:	1108b03a 	or	r4,r2,r4
  800fdc:	0007883a 	mov	r3,zero
  800fe0:	4984703a 	and	r2,r9,r6
  800fe4:	208cb03a 	or	r6,r4,r2
  800fe8:	28ceb03a 	or	r7,r5,r3
  800fec:	42000044 	addi	r8,r8,1
  800ff0:	a027883a 	mov	r19,r20
  800ff4:	a1c00415 	stw	r7,16(r20)
  800ff8:	a2000215 	stw	r8,8(r20)
  800ffc:	a1800315 	stw	r6,12(r20)
  801000:	003fce06 	br	800f3c <_fpadd_parts+0x1c8>
  801004:	8bc5c83a 	sub	r2,r17,r15
  801008:	8889803a 	cmpltu	r4,r17,r2
  80100c:	9407c83a 	sub	r3,r18,r16
  801010:	1909c83a 	sub	r4,r3,r4
  801014:	100d883a 	mov	r6,r2
  801018:	200f883a 	mov	r7,r4
  80101c:	003f9906 	br	800e84 <_fpadd_parts+0x110>
  801020:	7c45883a 	add	r2,r15,r17
  801024:	13c9803a 	cmpltu	r4,r2,r15
  801028:	8487883a 	add	r3,r16,r18
  80102c:	20c9883a 	add	r4,r4,r3
  801030:	a1400115 	stw	r5,4(r20)
  801034:	a5c00215 	stw	r23,8(r20)
  801038:	a0800315 	stw	r2,12(r20)
  80103c:	a1000415 	stw	r4,16(r20)
  801040:	003fb606 	br	800f1c <_fpadd_parts+0x1a8>
  801044:	001f883a 	mov	r15,zero
  801048:	0021883a 	mov	r16,zero
  80104c:	003f8306 	br	800e5c <_fpadd_parts+0xe8>
  801050:	018dc83a 	sub	r6,zero,r6
  801054:	003f6706 	br	800df4 <_fpadd_parts+0x80>
  801058:	00bfff84 	movi	r2,-2
  80105c:	117faf36 	bltu	r2,r5,800f1c <_fpadd_parts+0x1a8>
  801060:	003f9806 	br	800ec4 <_fpadd_parts+0x150>
  801064:	0005883a 	mov	r2,zero
  801068:	1189c83a 	sub	r4,r2,r6
  80106c:	1105803a 	cmpltu	r2,r2,r4
  801070:	01cbc83a 	sub	r5,zero,r7
  801074:	2885c83a 	sub	r2,r5,r2
  801078:	01800044 	movi	r6,1
  80107c:	a1800115 	stw	r6,4(r20)
  801080:	a5c00215 	stw	r23,8(r20)
  801084:	a1000315 	stw	r4,12(r20)
  801088:	a0800415 	stw	r2,16(r20)
  80108c:	003f8206 	br	800e98 <_fpadd_parts+0x124>
  801090:	203f7226 	beq	r4,zero,800e5c <_fpadd_parts+0xe8>
  801094:	35bff804 	addi	r22,r6,-32
  801098:	b9af883a 	add	r23,r23,r6
  80109c:	b0003116 	blt	r22,zero,801164 <_fpadd_parts+0x3f0>
  8010a0:	959ad83a 	srl	r13,r18,r22
  8010a4:	001d883a 	mov	r14,zero
  8010a8:	000f883a 	mov	r7,zero
  8010ac:	01000044 	movi	r4,1
  8010b0:	0011883a 	mov	r8,zero
  8010b4:	b0002516 	blt	r22,zero,80114c <_fpadd_parts+0x3d8>
  8010b8:	2594983a 	sll	r10,r4,r22
  8010bc:	0013883a 	mov	r9,zero
  8010c0:	00bfffc4 	movi	r2,-1
  8010c4:	4889883a 	add	r4,r9,r2
  8010c8:	508b883a 	add	r5,r10,r2
  8010cc:	224d803a 	cmpltu	r6,r4,r9
  8010d0:	314b883a 	add	r5,r6,r5
  8010d4:	8904703a 	and	r2,r17,r4
  8010d8:	9146703a 	and	r3,r18,r5
  8010dc:	10c4b03a 	or	r2,r2,r3
  8010e0:	10000226 	beq	r2,zero,8010ec <_fpadd_parts+0x378>
  8010e4:	01c00044 	movi	r7,1
  8010e8:	0011883a 	mov	r8,zero
  8010ec:	69e2b03a 	or	r17,r13,r7
  8010f0:	7224b03a 	or	r18,r14,r8
  8010f4:	003f5906 	br	800e5c <_fpadd_parts+0xe8>
  8010f8:	8407883a 	add	r3,r16,r16
  8010fc:	008007c4 	movi	r2,31
  801100:	1185c83a 	sub	r2,r2,r6
  801104:	1886983a 	sll	r3,r3,r2
  801108:	7996d83a 	srl	r11,r15,r6
  80110c:	8198d83a 	srl	r12,r16,r6
  801110:	1ad6b03a 	or	r11,r3,r11
  801114:	003f3e06 	br	800e10 <_fpadd_parts+0x9c>
  801118:	2006d07a 	srli	r3,r4,1
  80111c:	008007c4 	movi	r2,31
  801120:	1185c83a 	sub	r2,r2,r6
  801124:	1890d83a 	srl	r8,r3,r2
  801128:	218e983a 	sll	r7,r4,r6
  80112c:	003f3e06 	br	800e28 <_fpadd_parts+0xb4>
  801130:	113f821e 	bne	r2,r4,800f3c <_fpadd_parts+0x1c8>
  801134:	28c00117 	ldw	r3,4(r5)
  801138:	98800117 	ldw	r2,4(r19)
  80113c:	10ff7f26 	beq	r2,r3,800f3c <_fpadd_parts+0x1c8>
  801140:	04c02074 	movhi	r19,129
  801144:	9cf58504 	addi	r19,r19,-10732
  801148:	003f7c06 	br	800f3c <_fpadd_parts+0x1c8>
  80114c:	2006d07a 	srli	r3,r4,1
  801150:	008007c4 	movi	r2,31
  801154:	1185c83a 	sub	r2,r2,r6
  801158:	1894d83a 	srl	r10,r3,r2
  80115c:	2192983a 	sll	r9,r4,r6
  801160:	003fd706 	br	8010c0 <_fpadd_parts+0x34c>
  801164:	9487883a 	add	r3,r18,r18
  801168:	008007c4 	movi	r2,31
  80116c:	1185c83a 	sub	r2,r2,r6
  801170:	1886983a 	sll	r3,r3,r2
  801174:	899ad83a 	srl	r13,r17,r6
  801178:	919cd83a 	srl	r14,r18,r6
  80117c:	1b5ab03a 	or	r13,r3,r13
  801180:	003fc906 	br	8010a8 <_fpadd_parts+0x334>

00801184 <__subdf3>:
  801184:	deffea04 	addi	sp,sp,-88
  801188:	dcc01415 	stw	r19,80(sp)
  80118c:	dcc00404 	addi	r19,sp,16
  801190:	2011883a 	mov	r8,r4
  801194:	2813883a 	mov	r9,r5
  801198:	dc401315 	stw	r17,76(sp)
  80119c:	d809883a 	mov	r4,sp
  8011a0:	980b883a 	mov	r5,r19
  8011a4:	dc400904 	addi	r17,sp,36
  8011a8:	dfc01515 	stw	ra,84(sp)
  8011ac:	da400115 	stw	r9,4(sp)
  8011b0:	d9c00315 	stw	r7,12(sp)
  8011b4:	da000015 	stw	r8,0(sp)
  8011b8:	d9800215 	stw	r6,8(sp)
  8011bc:	08020d80 	call	8020d8 <__unpack_d>
  8011c0:	d9000204 	addi	r4,sp,8
  8011c4:	880b883a 	mov	r5,r17
  8011c8:	08020d80 	call	8020d8 <__unpack_d>
  8011cc:	d8800a17 	ldw	r2,40(sp)
  8011d0:	880b883a 	mov	r5,r17
  8011d4:	9809883a 	mov	r4,r19
  8011d8:	d9800e04 	addi	r6,sp,56
  8011dc:	1080005c 	xori	r2,r2,1
  8011e0:	d8800a15 	stw	r2,40(sp)
  8011e4:	0800d740 	call	800d74 <_fpadd_parts>
  8011e8:	1009883a 	mov	r4,r2
  8011ec:	0801dc40 	call	801dc4 <__pack_d>
  8011f0:	dfc01517 	ldw	ra,84(sp)
  8011f4:	dcc01417 	ldw	r19,80(sp)
  8011f8:	dc401317 	ldw	r17,76(sp)
  8011fc:	dec01604 	addi	sp,sp,88
  801200:	f800283a 	ret

00801204 <__adddf3>:
  801204:	deffea04 	addi	sp,sp,-88
  801208:	dcc01415 	stw	r19,80(sp)
  80120c:	dcc00404 	addi	r19,sp,16
  801210:	2011883a 	mov	r8,r4
  801214:	2813883a 	mov	r9,r5
  801218:	dc401315 	stw	r17,76(sp)
  80121c:	d809883a 	mov	r4,sp
  801220:	980b883a 	mov	r5,r19
  801224:	dc400904 	addi	r17,sp,36
  801228:	dfc01515 	stw	ra,84(sp)
  80122c:	da400115 	stw	r9,4(sp)
  801230:	d9c00315 	stw	r7,12(sp)
  801234:	da000015 	stw	r8,0(sp)
  801238:	d9800215 	stw	r6,8(sp)
  80123c:	08020d80 	call	8020d8 <__unpack_d>
  801240:	d9000204 	addi	r4,sp,8
  801244:	880b883a 	mov	r5,r17
  801248:	08020d80 	call	8020d8 <__unpack_d>
  80124c:	d9800e04 	addi	r6,sp,56
  801250:	9809883a 	mov	r4,r19
  801254:	880b883a 	mov	r5,r17
  801258:	0800d740 	call	800d74 <_fpadd_parts>
  80125c:	1009883a 	mov	r4,r2
  801260:	0801dc40 	call	801dc4 <__pack_d>
  801264:	dfc01517 	ldw	ra,84(sp)
  801268:	dcc01417 	ldw	r19,80(sp)
  80126c:	dc401317 	ldw	r17,76(sp)
  801270:	dec01604 	addi	sp,sp,88
  801274:	f800283a 	ret

00801278 <__muldf3>:
  801278:	deffe004 	addi	sp,sp,-128
  80127c:	dc401815 	stw	r17,96(sp)
  801280:	dc400404 	addi	r17,sp,16
  801284:	2011883a 	mov	r8,r4
  801288:	2813883a 	mov	r9,r5
  80128c:	dc001715 	stw	r16,92(sp)
  801290:	d809883a 	mov	r4,sp
  801294:	880b883a 	mov	r5,r17
  801298:	dc000904 	addi	r16,sp,36
  80129c:	dfc01f15 	stw	ra,124(sp)
  8012a0:	da400115 	stw	r9,4(sp)
  8012a4:	d9c00315 	stw	r7,12(sp)
  8012a8:	da000015 	stw	r8,0(sp)
  8012ac:	d9800215 	stw	r6,8(sp)
  8012b0:	ddc01e15 	stw	r23,120(sp)
  8012b4:	dd801d15 	stw	r22,116(sp)
  8012b8:	dd401c15 	stw	r21,112(sp)
  8012bc:	dd001b15 	stw	r20,108(sp)
  8012c0:	dcc01a15 	stw	r19,104(sp)
  8012c4:	dc801915 	stw	r18,100(sp)
  8012c8:	08020d80 	call	8020d8 <__unpack_d>
  8012cc:	d9000204 	addi	r4,sp,8
  8012d0:	800b883a 	mov	r5,r16
  8012d4:	08020d80 	call	8020d8 <__unpack_d>
  8012d8:	d9000417 	ldw	r4,16(sp)
  8012dc:	00800044 	movi	r2,1
  8012e0:	1100102e 	bgeu	r2,r4,801324 <__muldf3+0xac>
  8012e4:	d8c00917 	ldw	r3,36(sp)
  8012e8:	10c0062e 	bgeu	r2,r3,801304 <__muldf3+0x8c>
  8012ec:	00800104 	movi	r2,4
  8012f0:	20800a26 	beq	r4,r2,80131c <__muldf3+0xa4>
  8012f4:	1880cc26 	beq	r3,r2,801628 <__muldf3+0x3b0>
  8012f8:	00800084 	movi	r2,2
  8012fc:	20800926 	beq	r4,r2,801324 <__muldf3+0xac>
  801300:	1880191e 	bne	r3,r2,801368 <__muldf3+0xf0>
  801304:	d8c00a17 	ldw	r3,40(sp)
  801308:	d8800517 	ldw	r2,20(sp)
  80130c:	8009883a 	mov	r4,r16
  801310:	10c4c03a 	cmpne	r2,r2,r3
  801314:	d8800a15 	stw	r2,40(sp)
  801318:	00000706 	br	801338 <__muldf3+0xc0>
  80131c:	00800084 	movi	r2,2
  801320:	1880c326 	beq	r3,r2,801630 <__muldf3+0x3b8>
  801324:	d8800517 	ldw	r2,20(sp)
  801328:	d8c00a17 	ldw	r3,40(sp)
  80132c:	8809883a 	mov	r4,r17
  801330:	10c4c03a 	cmpne	r2,r2,r3
  801334:	d8800515 	stw	r2,20(sp)
  801338:	0801dc40 	call	801dc4 <__pack_d>
  80133c:	dfc01f17 	ldw	ra,124(sp)
  801340:	ddc01e17 	ldw	r23,120(sp)
  801344:	dd801d17 	ldw	r22,116(sp)
  801348:	dd401c17 	ldw	r21,112(sp)
  80134c:	dd001b17 	ldw	r20,108(sp)
  801350:	dcc01a17 	ldw	r19,104(sp)
  801354:	dc801917 	ldw	r18,100(sp)
  801358:	dc401817 	ldw	r17,96(sp)
  80135c:	dc001717 	ldw	r16,92(sp)
  801360:	dec02004 	addi	sp,sp,128
  801364:	f800283a 	ret
  801368:	dd800717 	ldw	r22,28(sp)
  80136c:	dc800c17 	ldw	r18,48(sp)
  801370:	002b883a 	mov	r21,zero
  801374:	0023883a 	mov	r17,zero
  801378:	a80b883a 	mov	r5,r21
  80137c:	b00d883a 	mov	r6,r22
  801380:	880f883a 	mov	r7,r17
  801384:	ddc00817 	ldw	r23,32(sp)
  801388:	dcc00d17 	ldw	r19,52(sp)
  80138c:	9009883a 	mov	r4,r18
  801390:	0801c200 	call	801c20 <__muldi3>
  801394:	001b883a 	mov	r13,zero
  801398:	680f883a 	mov	r7,r13
  80139c:	b009883a 	mov	r4,r22
  8013a0:	000b883a 	mov	r5,zero
  8013a4:	980d883a 	mov	r6,r19
  8013a8:	b82d883a 	mov	r22,r23
  8013ac:	002f883a 	mov	r23,zero
  8013b0:	db401615 	stw	r13,88(sp)
  8013b4:	d8801315 	stw	r2,76(sp)
  8013b8:	d8c01415 	stw	r3,80(sp)
  8013bc:	dcc01515 	stw	r19,84(sp)
  8013c0:	0801c200 	call	801c20 <__muldi3>
  8013c4:	b00d883a 	mov	r6,r22
  8013c8:	000b883a 	mov	r5,zero
  8013cc:	9009883a 	mov	r4,r18
  8013d0:	b80f883a 	mov	r7,r23
  8013d4:	1021883a 	mov	r16,r2
  8013d8:	1823883a 	mov	r17,r3
  8013dc:	0801c200 	call	801c20 <__muldi3>
  8013e0:	8085883a 	add	r2,r16,r2
  8013e4:	140d803a 	cmpltu	r6,r2,r16
  8013e8:	88c7883a 	add	r3,r17,r3
  8013ec:	30cd883a 	add	r6,r6,r3
  8013f0:	1029883a 	mov	r20,r2
  8013f4:	302b883a 	mov	r21,r6
  8013f8:	da801317 	ldw	r10,76(sp)
  8013fc:	dac01417 	ldw	r11,80(sp)
  801400:	db001517 	ldw	r12,84(sp)
  801404:	db401617 	ldw	r13,88(sp)
  801408:	3440612e 	bgeu	r6,r17,801590 <__muldf3+0x318>
  80140c:	0009883a 	mov	r4,zero
  801410:	5105883a 	add	r2,r10,r4
  801414:	128d803a 	cmpltu	r6,r2,r10
  801418:	5d07883a 	add	r3,r11,r20
  80141c:	30cd883a 	add	r6,r6,r3
  801420:	0021883a 	mov	r16,zero
  801424:	04400044 	movi	r17,1
  801428:	1025883a 	mov	r18,r2
  80142c:	3027883a 	mov	r19,r6
  801430:	32c06236 	bltu	r6,r11,8015bc <__muldf3+0x344>
  801434:	59807a26 	beq	r11,r6,801620 <__muldf3+0x3a8>
  801438:	680b883a 	mov	r5,r13
  80143c:	b80f883a 	mov	r7,r23
  801440:	6009883a 	mov	r4,r12
  801444:	b00d883a 	mov	r6,r22
  801448:	0801c200 	call	801c20 <__muldi3>
  80144c:	1009883a 	mov	r4,r2
  801450:	000f883a 	mov	r7,zero
  801454:	1545883a 	add	r2,r2,r21
  801458:	1111803a 	cmpltu	r8,r2,r4
  80145c:	19c7883a 	add	r3,r3,r7
  801460:	40c7883a 	add	r3,r8,r3
  801464:	88cb883a 	add	r5,r17,r3
  801468:	d8c00617 	ldw	r3,24(sp)
  80146c:	8089883a 	add	r4,r16,r2
  801470:	d8800b17 	ldw	r2,44(sp)
  801474:	18c00104 	addi	r3,r3,4
  801478:	240d803a 	cmpltu	r6,r4,r16
  80147c:	10c7883a 	add	r3,r2,r3
  801480:	2013883a 	mov	r9,r4
  801484:	d8800a17 	ldw	r2,40(sp)
  801488:	d9000517 	ldw	r4,20(sp)
  80148c:	314d883a 	add	r6,r6,r5
  801490:	3015883a 	mov	r10,r6
  801494:	2088c03a 	cmpne	r4,r4,r2
  801498:	00880034 	movhi	r2,8192
  80149c:	10bfffc4 	addi	r2,r2,-1
  8014a0:	d9000f15 	stw	r4,60(sp)
  8014a4:	d8c01015 	stw	r3,64(sp)
  8014a8:	1180162e 	bgeu	r2,r6,801504 <__muldf3+0x28c>
  8014ac:	1811883a 	mov	r8,r3
  8014b0:	101f883a 	mov	r15,r2
  8014b4:	980497fa 	slli	r2,r19,31
  8014b8:	9016d07a 	srli	r11,r18,1
  8014bc:	500697fa 	slli	r3,r10,31
  8014c0:	480cd07a 	srli	r6,r9,1
  8014c4:	500ed07a 	srli	r7,r10,1
  8014c8:	12d6b03a 	or	r11,r2,r11
  8014cc:	00800044 	movi	r2,1
  8014d0:	198cb03a 	or	r6,r3,r6
  8014d4:	4888703a 	and	r4,r9,r2
  8014d8:	9818d07a 	srli	r12,r19,1
  8014dc:	001b883a 	mov	r13,zero
  8014e0:	03a00034 	movhi	r14,32768
  8014e4:	3013883a 	mov	r9,r6
  8014e8:	3815883a 	mov	r10,r7
  8014ec:	4091883a 	add	r8,r8,r2
  8014f0:	20000226 	beq	r4,zero,8014fc <__muldf3+0x284>
  8014f4:	5b64b03a 	or	r18,r11,r13
  8014f8:	63a6b03a 	or	r19,r12,r14
  8014fc:	7abfed36 	bltu	r15,r10,8014b4 <__muldf3+0x23c>
  801500:	da001015 	stw	r8,64(sp)
  801504:	00840034 	movhi	r2,4096
  801508:	10bfffc4 	addi	r2,r2,-1
  80150c:	12801436 	bltu	r2,r10,801560 <__muldf3+0x2e8>
  801510:	da001017 	ldw	r8,64(sp)
  801514:	101f883a 	mov	r15,r2
  801518:	4a45883a 	add	r2,r9,r9
  80151c:	124d803a 	cmpltu	r6,r2,r9
  801520:	5287883a 	add	r3,r10,r10
  801524:	9497883a 	add	r11,r18,r18
  801528:	5c8f803a 	cmpltu	r7,r11,r18
  80152c:	9cd9883a 	add	r12,r19,r19
  801530:	01000044 	movi	r4,1
  801534:	30cd883a 	add	r6,r6,r3
  801538:	3b0f883a 	add	r7,r7,r12
  80153c:	423fffc4 	addi	r8,r8,-1
  801540:	1013883a 	mov	r9,r2
  801544:	3015883a 	mov	r10,r6
  801548:	111ab03a 	or	r13,r2,r4
  80154c:	98003016 	blt	r19,zero,801610 <__muldf3+0x398>
  801550:	5825883a 	mov	r18,r11
  801554:	3827883a 	mov	r19,r7
  801558:	7abfef2e 	bgeu	r15,r10,801518 <__muldf3+0x2a0>
  80155c:	da001015 	stw	r8,64(sp)
  801560:	00803fc4 	movi	r2,255
  801564:	488e703a 	and	r7,r9,r2
  801568:	00802004 	movi	r2,128
  80156c:	0007883a 	mov	r3,zero
  801570:	0011883a 	mov	r8,zero
  801574:	38801826 	beq	r7,r2,8015d8 <__muldf3+0x360>
  801578:	008000c4 	movi	r2,3
  80157c:	d9000e04 	addi	r4,sp,56
  801580:	da801215 	stw	r10,72(sp)
  801584:	d8800e15 	stw	r2,56(sp)
  801588:	da401115 	stw	r9,68(sp)
  80158c:	003f6a06 	br	801338 <__muldf3+0xc0>
  801590:	89802126 	beq	r17,r6,801618 <__muldf3+0x3a0>
  801594:	0009883a 	mov	r4,zero
  801598:	5105883a 	add	r2,r10,r4
  80159c:	128d803a 	cmpltu	r6,r2,r10
  8015a0:	5d07883a 	add	r3,r11,r20
  8015a4:	30cd883a 	add	r6,r6,r3
  8015a8:	0021883a 	mov	r16,zero
  8015ac:	0023883a 	mov	r17,zero
  8015b0:	1025883a 	mov	r18,r2
  8015b4:	3027883a 	mov	r19,r6
  8015b8:	32ff9e2e 	bgeu	r6,r11,801434 <__muldf3+0x1bc>
  8015bc:	00800044 	movi	r2,1
  8015c0:	8089883a 	add	r4,r16,r2
  8015c4:	240d803a 	cmpltu	r6,r4,r16
  8015c8:	344d883a 	add	r6,r6,r17
  8015cc:	2021883a 	mov	r16,r4
  8015d0:	3023883a 	mov	r17,r6
  8015d4:	003f9806 	br	801438 <__muldf3+0x1c0>
  8015d8:	403fe71e 	bne	r8,zero,801578 <__muldf3+0x300>
  8015dc:	01004004 	movi	r4,256
  8015e0:	4904703a 	and	r2,r9,r4
  8015e4:	10c4b03a 	or	r2,r2,r3
  8015e8:	103fe31e 	bne	r2,zero,801578 <__muldf3+0x300>
  8015ec:	94c4b03a 	or	r2,r18,r19
  8015f0:	103fe126 	beq	r2,zero,801578 <__muldf3+0x300>
  8015f4:	49c5883a 	add	r2,r9,r7
  8015f8:	1251803a 	cmpltu	r8,r2,r9
  8015fc:	4291883a 	add	r8,r8,r10
  801600:	013fc004 	movi	r4,-256
  801604:	1112703a 	and	r9,r2,r4
  801608:	4015883a 	mov	r10,r8
  80160c:	003fda06 	br	801578 <__muldf3+0x300>
  801610:	6813883a 	mov	r9,r13
  801614:	003fce06 	br	801550 <__muldf3+0x2d8>
  801618:	143f7c36 	bltu	r2,r16,80140c <__muldf3+0x194>
  80161c:	003fdd06 	br	801594 <__muldf3+0x31c>
  801620:	12bf852e 	bgeu	r2,r10,801438 <__muldf3+0x1c0>
  801624:	003fe506 	br	8015bc <__muldf3+0x344>
  801628:	00800084 	movi	r2,2
  80162c:	20bf351e 	bne	r4,r2,801304 <__muldf3+0x8c>
  801630:	01002074 	movhi	r4,129
  801634:	21358504 	addi	r4,r4,-10732
  801638:	003f3f06 	br	801338 <__muldf3+0xc0>

0080163c <__divdf3>:
  80163c:	deffed04 	addi	sp,sp,-76
  801640:	dcc01115 	stw	r19,68(sp)
  801644:	dcc00404 	addi	r19,sp,16
  801648:	2011883a 	mov	r8,r4
  80164c:	2813883a 	mov	r9,r5
  801650:	dc000e15 	stw	r16,56(sp)
  801654:	d809883a 	mov	r4,sp
  801658:	980b883a 	mov	r5,r19
  80165c:	dc000904 	addi	r16,sp,36
  801660:	dfc01215 	stw	ra,72(sp)
  801664:	da400115 	stw	r9,4(sp)
  801668:	d9c00315 	stw	r7,12(sp)
  80166c:	da000015 	stw	r8,0(sp)
  801670:	d9800215 	stw	r6,8(sp)
  801674:	dc801015 	stw	r18,64(sp)
  801678:	dc400f15 	stw	r17,60(sp)
  80167c:	08020d80 	call	8020d8 <__unpack_d>
  801680:	d9000204 	addi	r4,sp,8
  801684:	800b883a 	mov	r5,r16
  801688:	08020d80 	call	8020d8 <__unpack_d>
  80168c:	d9000417 	ldw	r4,16(sp)
  801690:	00800044 	movi	r2,1
  801694:	11000b2e 	bgeu	r2,r4,8016c4 <__divdf3+0x88>
  801698:	d9400917 	ldw	r5,36(sp)
  80169c:	1140762e 	bgeu	r2,r5,801878 <__divdf3+0x23c>
  8016a0:	d8800517 	ldw	r2,20(sp)
  8016a4:	d8c00a17 	ldw	r3,40(sp)
  8016a8:	01800104 	movi	r6,4
  8016ac:	10c4f03a 	xor	r2,r2,r3
  8016b0:	d8800515 	stw	r2,20(sp)
  8016b4:	21800226 	beq	r4,r6,8016c0 <__divdf3+0x84>
  8016b8:	00800084 	movi	r2,2
  8016bc:	2080141e 	bne	r4,r2,801710 <__divdf3+0xd4>
  8016c0:	29000926 	beq	r5,r4,8016e8 <__divdf3+0xac>
  8016c4:	9809883a 	mov	r4,r19
  8016c8:	0801dc40 	call	801dc4 <__pack_d>
  8016cc:	dfc01217 	ldw	ra,72(sp)
  8016d0:	dcc01117 	ldw	r19,68(sp)
  8016d4:	dc801017 	ldw	r18,64(sp)
  8016d8:	dc400f17 	ldw	r17,60(sp)
  8016dc:	dc000e17 	ldw	r16,56(sp)
  8016e0:	dec01304 	addi	sp,sp,76
  8016e4:	f800283a 	ret
  8016e8:	01002074 	movhi	r4,129
  8016ec:	21358504 	addi	r4,r4,-10732
  8016f0:	0801dc40 	call	801dc4 <__pack_d>
  8016f4:	dfc01217 	ldw	ra,72(sp)
  8016f8:	dcc01117 	ldw	r19,68(sp)
  8016fc:	dc801017 	ldw	r18,64(sp)
  801700:	dc400f17 	ldw	r17,60(sp)
  801704:	dc000e17 	ldw	r16,56(sp)
  801708:	dec01304 	addi	sp,sp,76
  80170c:	f800283a 	ret
  801710:	29805b26 	beq	r5,r6,801880 <__divdf3+0x244>
  801714:	28802d26 	beq	r5,r2,8017cc <__divdf3+0x190>
  801718:	d8c00617 	ldw	r3,24(sp)
  80171c:	d8800b17 	ldw	r2,44(sp)
  801720:	d9c00817 	ldw	r7,32(sp)
  801724:	dc400d17 	ldw	r17,52(sp)
  801728:	188bc83a 	sub	r5,r3,r2
  80172c:	d9800717 	ldw	r6,28(sp)
  801730:	dc000c17 	ldw	r16,48(sp)
  801734:	d9400615 	stw	r5,24(sp)
  801738:	3c403836 	bltu	r7,r17,80181c <__divdf3+0x1e0>
  80173c:	89c03626 	beq	r17,r7,801818 <__divdf3+0x1dc>
  801740:	0015883a 	mov	r10,zero
  801744:	001d883a 	mov	r14,zero
  801748:	02c40034 	movhi	r11,4096
  80174c:	001f883a 	mov	r15,zero
  801750:	003f883a 	mov	ra,zero
  801754:	04800f44 	movi	r18,61
  801758:	00000f06 	br	801798 <__divdf3+0x15c>
  80175c:	601d883a 	mov	r14,r12
  801760:	681f883a 	mov	r15,r13
  801764:	400d883a 	mov	r6,r8
  801768:	100f883a 	mov	r7,r2
  80176c:	3191883a 	add	r8,r6,r6
  801770:	5808d07a 	srli	r4,r11,1
  801774:	4185803a 	cmpltu	r2,r8,r6
  801778:	39d3883a 	add	r9,r7,r7
  80177c:	28c6b03a 	or	r3,r5,r3
  801780:	1245883a 	add	r2,r2,r9
  801784:	1815883a 	mov	r10,r3
  801788:	2017883a 	mov	r11,r4
  80178c:	400d883a 	mov	r6,r8
  801790:	100f883a 	mov	r7,r2
  801794:	fc801726 	beq	ra,r18,8017f4 <__divdf3+0x1b8>
  801798:	580a97fa 	slli	r5,r11,31
  80179c:	5006d07a 	srli	r3,r10,1
  8017a0:	ffc00044 	addi	ra,ra,1
  8017a4:	3c7ff136 	bltu	r7,r17,80176c <__divdf3+0x130>
  8017a8:	3411c83a 	sub	r8,r6,r16
  8017ac:	3205803a 	cmpltu	r2,r6,r8
  8017b0:	3c53c83a 	sub	r9,r7,r17
  8017b4:	7298b03a 	or	r12,r14,r10
  8017b8:	7adab03a 	or	r13,r15,r11
  8017bc:	4885c83a 	sub	r2,r9,r2
  8017c0:	89ffe61e 	bne	r17,r7,80175c <__divdf3+0x120>
  8017c4:	343fe936 	bltu	r6,r16,80176c <__divdf3+0x130>
  8017c8:	003fe406 	br	80175c <__divdf3+0x120>
  8017cc:	9809883a 	mov	r4,r19
  8017d0:	d9800415 	stw	r6,16(sp)
  8017d4:	0801dc40 	call	801dc4 <__pack_d>
  8017d8:	dfc01217 	ldw	ra,72(sp)
  8017dc:	dcc01117 	ldw	r19,68(sp)
  8017e0:	dc801017 	ldw	r18,64(sp)
  8017e4:	dc400f17 	ldw	r17,60(sp)
  8017e8:	dc000e17 	ldw	r16,56(sp)
  8017ec:	dec01304 	addi	sp,sp,76
  8017f0:	f800283a 	ret
  8017f4:	00803fc4 	movi	r2,255
  8017f8:	7090703a 	and	r8,r14,r2
  8017fc:	00802004 	movi	r2,128
  801800:	0007883a 	mov	r3,zero
  801804:	0013883a 	mov	r9,zero
  801808:	40800d26 	beq	r8,r2,801840 <__divdf3+0x204>
  80180c:	dbc00815 	stw	r15,32(sp)
  801810:	db800715 	stw	r14,28(sp)
  801814:	003fab06 	br	8016c4 <__divdf3+0x88>
  801818:	343fc92e 	bgeu	r6,r16,801740 <__divdf3+0x104>
  80181c:	3185883a 	add	r2,r6,r6
  801820:	1189803a 	cmpltu	r4,r2,r6
  801824:	39c7883a 	add	r3,r7,r7
  801828:	20c9883a 	add	r4,r4,r3
  80182c:	297fffc4 	addi	r5,r5,-1
  801830:	100d883a 	mov	r6,r2
  801834:	200f883a 	mov	r7,r4
  801838:	d9400615 	stw	r5,24(sp)
  80183c:	003fc006 	br	801740 <__divdf3+0x104>
  801840:	483ff21e 	bne	r9,zero,80180c <__divdf3+0x1d0>
  801844:	01004004 	movi	r4,256
  801848:	7104703a 	and	r2,r14,r4
  80184c:	10c4b03a 	or	r2,r2,r3
  801850:	103fee1e 	bne	r2,zero,80180c <__divdf3+0x1d0>
  801854:	31c4b03a 	or	r2,r6,r7
  801858:	103fec26 	beq	r2,zero,80180c <__divdf3+0x1d0>
  80185c:	7205883a 	add	r2,r14,r8
  801860:	1391803a 	cmpltu	r8,r2,r14
  801864:	43d1883a 	add	r8,r8,r15
  801868:	013fc004 	movi	r4,-256
  80186c:	111c703a 	and	r14,r2,r4
  801870:	401f883a 	mov	r15,r8
  801874:	003fe506 	br	80180c <__divdf3+0x1d0>
  801878:	8009883a 	mov	r4,r16
  80187c:	003f9206 	br	8016c8 <__divdf3+0x8c>
  801880:	9809883a 	mov	r4,r19
  801884:	d8000715 	stw	zero,28(sp)
  801888:	d8000815 	stw	zero,32(sp)
  80188c:	d8000615 	stw	zero,24(sp)
  801890:	003f8d06 	br	8016c8 <__divdf3+0x8c>

00801894 <__ltdf2>:
  801894:	deffef04 	addi	sp,sp,-68
  801898:	dc400f15 	stw	r17,60(sp)
  80189c:	dc400404 	addi	r17,sp,16
  8018a0:	2005883a 	mov	r2,r4
  8018a4:	2807883a 	mov	r3,r5
  8018a8:	dc000e15 	stw	r16,56(sp)
  8018ac:	d809883a 	mov	r4,sp
  8018b0:	880b883a 	mov	r5,r17
  8018b4:	dc000904 	addi	r16,sp,36
  8018b8:	d8c00115 	stw	r3,4(sp)
  8018bc:	d8800015 	stw	r2,0(sp)
  8018c0:	d9800215 	stw	r6,8(sp)
  8018c4:	dfc01015 	stw	ra,64(sp)
  8018c8:	d9c00315 	stw	r7,12(sp)
  8018cc:	08020d80 	call	8020d8 <__unpack_d>
  8018d0:	d9000204 	addi	r4,sp,8
  8018d4:	800b883a 	mov	r5,r16
  8018d8:	08020d80 	call	8020d8 <__unpack_d>
  8018dc:	d8800417 	ldw	r2,16(sp)
  8018e0:	00c00044 	movi	r3,1
  8018e4:	180d883a 	mov	r6,r3
  8018e8:	1880062e 	bgeu	r3,r2,801904 <__ltdf2+0x70>
  8018ec:	d8800917 	ldw	r2,36(sp)
  8018f0:	8809883a 	mov	r4,r17
  8018f4:	800b883a 	mov	r5,r16
  8018f8:	1880022e 	bgeu	r3,r2,801904 <__ltdf2+0x70>
  8018fc:	08022100 	call	802210 <__fpcmp_parts_d>
  801900:	100d883a 	mov	r6,r2
  801904:	3005883a 	mov	r2,r6
  801908:	dfc01017 	ldw	ra,64(sp)
  80190c:	dc400f17 	ldw	r17,60(sp)
  801910:	dc000e17 	ldw	r16,56(sp)
  801914:	dec01104 	addi	sp,sp,68
  801918:	f800283a 	ret

0080191c <__ledf2>:
  80191c:	deffef04 	addi	sp,sp,-68
  801920:	dc400f15 	stw	r17,60(sp)
  801924:	dc400404 	addi	r17,sp,16
  801928:	2005883a 	mov	r2,r4
  80192c:	2807883a 	mov	r3,r5
  801930:	dc000e15 	stw	r16,56(sp)
  801934:	d809883a 	mov	r4,sp
  801938:	880b883a 	mov	r5,r17
  80193c:	dc000904 	addi	r16,sp,36
  801940:	d8c00115 	stw	r3,4(sp)
  801944:	d8800015 	stw	r2,0(sp)
  801948:	d9800215 	stw	r6,8(sp)
  80194c:	dfc01015 	stw	ra,64(sp)
  801950:	d9c00315 	stw	r7,12(sp)
  801954:	08020d80 	call	8020d8 <__unpack_d>
  801958:	d9000204 	addi	r4,sp,8
  80195c:	800b883a 	mov	r5,r16
  801960:	08020d80 	call	8020d8 <__unpack_d>
  801964:	d8800417 	ldw	r2,16(sp)
  801968:	00c00044 	movi	r3,1
  80196c:	180d883a 	mov	r6,r3
  801970:	1880062e 	bgeu	r3,r2,80198c <__ledf2+0x70>
  801974:	d8800917 	ldw	r2,36(sp)
  801978:	8809883a 	mov	r4,r17
  80197c:	800b883a 	mov	r5,r16
  801980:	1880022e 	bgeu	r3,r2,80198c <__ledf2+0x70>
  801984:	08022100 	call	802210 <__fpcmp_parts_d>
  801988:	100d883a 	mov	r6,r2
  80198c:	3005883a 	mov	r2,r6
  801990:	dfc01017 	ldw	ra,64(sp)
  801994:	dc400f17 	ldw	r17,60(sp)
  801998:	dc000e17 	ldw	r16,56(sp)
  80199c:	dec01104 	addi	sp,sp,68
  8019a0:	f800283a 	ret

008019a4 <__floatsidf>:
  8019a4:	2006d7fa 	srli	r3,r4,31
  8019a8:	defff604 	addi	sp,sp,-40
  8019ac:	008000c4 	movi	r2,3
  8019b0:	dfc00915 	stw	ra,36(sp)
  8019b4:	dcc00815 	stw	r19,32(sp)
  8019b8:	dc800715 	stw	r18,28(sp)
  8019bc:	dc400615 	stw	r17,24(sp)
  8019c0:	dc000515 	stw	r16,20(sp)
  8019c4:	d8800015 	stw	r2,0(sp)
  8019c8:	d8c00115 	stw	r3,4(sp)
  8019cc:	20000f1e 	bne	r4,zero,801a0c <__floatsidf+0x68>
  8019d0:	00800084 	movi	r2,2
  8019d4:	d8800015 	stw	r2,0(sp)
  8019d8:	d809883a 	mov	r4,sp
  8019dc:	0801dc40 	call	801dc4 <__pack_d>
  8019e0:	1009883a 	mov	r4,r2
  8019e4:	180b883a 	mov	r5,r3
  8019e8:	2005883a 	mov	r2,r4
  8019ec:	2807883a 	mov	r3,r5
  8019f0:	dfc00917 	ldw	ra,36(sp)
  8019f4:	dcc00817 	ldw	r19,32(sp)
  8019f8:	dc800717 	ldw	r18,28(sp)
  8019fc:	dc400617 	ldw	r17,24(sp)
  801a00:	dc000517 	ldw	r16,20(sp)
  801a04:	dec00a04 	addi	sp,sp,40
  801a08:	f800283a 	ret
  801a0c:	00800f04 	movi	r2,60
  801a10:	1807003a 	cmpeq	r3,r3,zero
  801a14:	d8800215 	stw	r2,8(sp)
  801a18:	18001126 	beq	r3,zero,801a60 <__floatsidf+0xbc>
  801a1c:	0027883a 	mov	r19,zero
  801a20:	2025883a 	mov	r18,r4
  801a24:	d9000315 	stw	r4,12(sp)
  801a28:	dcc00415 	stw	r19,16(sp)
  801a2c:	0801d440 	call	801d44 <__clzsi2>
  801a30:	11000744 	addi	r4,r2,29
  801a34:	013fe80e 	bge	zero,r4,8019d8 <__floatsidf+0x34>
  801a38:	10bfff44 	addi	r2,r2,-3
  801a3c:	10000c16 	blt	r2,zero,801a70 <__floatsidf+0xcc>
  801a40:	90a2983a 	sll	r17,r18,r2
  801a44:	0021883a 	mov	r16,zero
  801a48:	d8800217 	ldw	r2,8(sp)
  801a4c:	dc400415 	stw	r17,16(sp)
  801a50:	dc000315 	stw	r16,12(sp)
  801a54:	1105c83a 	sub	r2,r2,r4
  801a58:	d8800215 	stw	r2,8(sp)
  801a5c:	003fde06 	br	8019d8 <__floatsidf+0x34>
  801a60:	00a00034 	movhi	r2,32768
  801a64:	20800a26 	beq	r4,r2,801a90 <__floatsidf+0xec>
  801a68:	0109c83a 	sub	r4,zero,r4
  801a6c:	003feb06 	br	801a1c <__floatsidf+0x78>
  801a70:	9006d07a 	srli	r3,r18,1
  801a74:	008007c4 	movi	r2,31
  801a78:	1105c83a 	sub	r2,r2,r4
  801a7c:	1886d83a 	srl	r3,r3,r2
  801a80:	9922983a 	sll	r17,r19,r4
  801a84:	9120983a 	sll	r16,r18,r4
  801a88:	1c62b03a 	or	r17,r3,r17
  801a8c:	003fee06 	br	801a48 <__floatsidf+0xa4>
  801a90:	0009883a 	mov	r4,zero
  801a94:	01707834 	movhi	r5,49632
  801a98:	003fd306 	br	8019e8 <__floatsidf+0x44>

00801a9c <udivmodsi4>:
  801a9c:	29001b2e 	bgeu	r5,r4,801b0c <udivmodsi4+0x70>
  801aa0:	28001a16 	blt	r5,zero,801b0c <udivmodsi4+0x70>
  801aa4:	00800044 	movi	r2,1
  801aa8:	0007883a 	mov	r3,zero
  801aac:	01c007c4 	movi	r7,31
  801ab0:	00000306 	br	801ac0 <udivmodsi4+0x24>
  801ab4:	19c01326 	beq	r3,r7,801b04 <udivmodsi4+0x68>
  801ab8:	18c00044 	addi	r3,r3,1
  801abc:	28000416 	blt	r5,zero,801ad0 <udivmodsi4+0x34>
  801ac0:	294b883a 	add	r5,r5,r5
  801ac4:	1085883a 	add	r2,r2,r2
  801ac8:	293ffa36 	bltu	r5,r4,801ab4 <udivmodsi4+0x18>
  801acc:	10000d26 	beq	r2,zero,801b04 <udivmodsi4+0x68>
  801ad0:	0007883a 	mov	r3,zero
  801ad4:	21400236 	bltu	r4,r5,801ae0 <udivmodsi4+0x44>
  801ad8:	2149c83a 	sub	r4,r4,r5
  801adc:	1886b03a 	or	r3,r3,r2
  801ae0:	1004d07a 	srli	r2,r2,1
  801ae4:	280ad07a 	srli	r5,r5,1
  801ae8:	103ffa1e 	bne	r2,zero,801ad4 <udivmodsi4+0x38>
  801aec:	30000226 	beq	r6,zero,801af8 <udivmodsi4+0x5c>
  801af0:	2005883a 	mov	r2,r4
  801af4:	f800283a 	ret
  801af8:	1809883a 	mov	r4,r3
  801afc:	2005883a 	mov	r2,r4
  801b00:	f800283a 	ret
  801b04:	0007883a 	mov	r3,zero
  801b08:	003ff806 	br	801aec <udivmodsi4+0x50>
  801b0c:	00800044 	movi	r2,1
  801b10:	0007883a 	mov	r3,zero
  801b14:	003fef06 	br	801ad4 <udivmodsi4+0x38>

00801b18 <__divsi3>:
  801b18:	defffe04 	addi	sp,sp,-8
  801b1c:	dc000015 	stw	r16,0(sp)
  801b20:	dfc00115 	stw	ra,4(sp)
  801b24:	0021883a 	mov	r16,zero
  801b28:	20000c16 	blt	r4,zero,801b5c <__divsi3+0x44>
  801b2c:	000d883a 	mov	r6,zero
  801b30:	28000e16 	blt	r5,zero,801b6c <__divsi3+0x54>
  801b34:	0801a9c0 	call	801a9c <udivmodsi4>
  801b38:	1007883a 	mov	r3,r2
  801b3c:	8005003a 	cmpeq	r2,r16,zero
  801b40:	1000011e 	bne	r2,zero,801b48 <__divsi3+0x30>
  801b44:	00c7c83a 	sub	r3,zero,r3
  801b48:	1805883a 	mov	r2,r3
  801b4c:	dfc00117 	ldw	ra,4(sp)
  801b50:	dc000017 	ldw	r16,0(sp)
  801b54:	dec00204 	addi	sp,sp,8
  801b58:	f800283a 	ret
  801b5c:	0109c83a 	sub	r4,zero,r4
  801b60:	04000044 	movi	r16,1
  801b64:	000d883a 	mov	r6,zero
  801b68:	283ff20e 	bge	r5,zero,801b34 <__divsi3+0x1c>
  801b6c:	014bc83a 	sub	r5,zero,r5
  801b70:	8021003a 	cmpeq	r16,r16,zero
  801b74:	003fef06 	br	801b34 <__divsi3+0x1c>

00801b78 <__modsi3>:
  801b78:	deffff04 	addi	sp,sp,-4
  801b7c:	dfc00015 	stw	ra,0(sp)
  801b80:	01800044 	movi	r6,1
  801b84:	2807883a 	mov	r3,r5
  801b88:	20000416 	blt	r4,zero,801b9c <__modsi3+0x24>
  801b8c:	28000c16 	blt	r5,zero,801bc0 <__modsi3+0x48>
  801b90:	dfc00017 	ldw	ra,0(sp)
  801b94:	dec00104 	addi	sp,sp,4
  801b98:	0801a9c1 	jmpi	801a9c <udivmodsi4>
  801b9c:	0109c83a 	sub	r4,zero,r4
  801ba0:	28000b16 	blt	r5,zero,801bd0 <__modsi3+0x58>
  801ba4:	180b883a 	mov	r5,r3
  801ba8:	01800044 	movi	r6,1
  801bac:	0801a9c0 	call	801a9c <udivmodsi4>
  801bb0:	0085c83a 	sub	r2,zero,r2
  801bb4:	dfc00017 	ldw	ra,0(sp)
  801bb8:	dec00104 	addi	sp,sp,4
  801bbc:	f800283a 	ret
  801bc0:	014bc83a 	sub	r5,zero,r5
  801bc4:	dfc00017 	ldw	ra,0(sp)
  801bc8:	dec00104 	addi	sp,sp,4
  801bcc:	0801a9c1 	jmpi	801a9c <udivmodsi4>
  801bd0:	0147c83a 	sub	r3,zero,r5
  801bd4:	003ff306 	br	801ba4 <__modsi3+0x2c>

00801bd8 <__udivsi3>:
  801bd8:	000d883a 	mov	r6,zero
  801bdc:	0801a9c1 	jmpi	801a9c <udivmodsi4>

00801be0 <__umodsi3>:
  801be0:	01800044 	movi	r6,1
  801be4:	0801a9c1 	jmpi	801a9c <udivmodsi4>

00801be8 <__mulsi3>:
  801be8:	20000a26 	beq	r4,zero,801c14 <__mulsi3+0x2c>
  801bec:	0007883a 	mov	r3,zero
  801bf0:	2080004c 	andi	r2,r4,1
  801bf4:	1005003a 	cmpeq	r2,r2,zero
  801bf8:	2008d07a 	srli	r4,r4,1
  801bfc:	1000011e 	bne	r2,zero,801c04 <__mulsi3+0x1c>
  801c00:	1947883a 	add	r3,r3,r5
  801c04:	294b883a 	add	r5,r5,r5
  801c08:	203ff91e 	bne	r4,zero,801bf0 <__mulsi3+0x8>
  801c0c:	1805883a 	mov	r2,r3
  801c10:	f800283a 	ret
  801c14:	0007883a 	mov	r3,zero
  801c18:	1805883a 	mov	r2,r3
  801c1c:	f800283a 	ret

00801c20 <__muldi3>:
  801c20:	defff204 	addi	sp,sp,-56
  801c24:	df000c15 	stw	fp,48(sp)
  801c28:	3038d43a 	srli	fp,r6,16
  801c2c:	dd000815 	stw	r20,32(sp)
  801c30:	dc400515 	stw	r17,20(sp)
  801c34:	2028d43a 	srli	r20,r4,16
  801c38:	247fffcc 	andi	r17,r4,65535
  801c3c:	dc000415 	stw	r16,16(sp)
  801c40:	343fffcc 	andi	r16,r6,65535
  801c44:	dcc00715 	stw	r19,28(sp)
  801c48:	d9000015 	stw	r4,0(sp)
  801c4c:	2827883a 	mov	r19,r5
  801c50:	8809883a 	mov	r4,r17
  801c54:	d9400115 	stw	r5,4(sp)
  801c58:	800b883a 	mov	r5,r16
  801c5c:	d9800215 	stw	r6,8(sp)
  801c60:	dfc00d15 	stw	ra,52(sp)
  801c64:	d9c00315 	stw	r7,12(sp)
  801c68:	dd800a15 	stw	r22,40(sp)
  801c6c:	dd400915 	stw	r21,36(sp)
  801c70:	302d883a 	mov	r22,r6
  801c74:	ddc00b15 	stw	r23,44(sp)
  801c78:	dc800615 	stw	r18,24(sp)
  801c7c:	0801be80 	call	801be8 <__mulsi3>
  801c80:	8809883a 	mov	r4,r17
  801c84:	e00b883a 	mov	r5,fp
  801c88:	102b883a 	mov	r21,r2
  801c8c:	0801be80 	call	801be8 <__mulsi3>
  801c90:	800b883a 	mov	r5,r16
  801c94:	a009883a 	mov	r4,r20
  801c98:	1023883a 	mov	r17,r2
  801c9c:	0801be80 	call	801be8 <__mulsi3>
  801ca0:	a009883a 	mov	r4,r20
  801ca4:	e00b883a 	mov	r5,fp
  801ca8:	1021883a 	mov	r16,r2
  801cac:	0801be80 	call	801be8 <__mulsi3>
  801cb0:	a8ffffcc 	andi	r3,r21,65535
  801cb4:	a82ad43a 	srli	r21,r21,16
  801cb8:	8c23883a 	add	r17,r17,r16
  801cbc:	1011883a 	mov	r8,r2
  801cc0:	ac6b883a 	add	r21,r21,r17
  801cc4:	a804943a 	slli	r2,r21,16
  801cc8:	b009883a 	mov	r4,r22
  801ccc:	980b883a 	mov	r5,r19
  801cd0:	10c7883a 	add	r3,r2,r3
  801cd4:	a812d43a 	srli	r9,r21,16
  801cd8:	180d883a 	mov	r6,r3
  801cdc:	ac00022e 	bgeu	r21,r16,801ce8 <__muldi3+0xc8>
  801ce0:	00800074 	movhi	r2,1
  801ce4:	4091883a 	add	r8,r8,r2
  801ce8:	4267883a 	add	r19,r8,r9
  801cec:	302d883a 	mov	r22,r6
  801cf0:	0801be80 	call	801be8 <__mulsi3>
  801cf4:	d9400317 	ldw	r5,12(sp)
  801cf8:	d9000017 	ldw	r4,0(sp)
  801cfc:	1023883a 	mov	r17,r2
  801d00:	0801be80 	call	801be8 <__mulsi3>
  801d04:	14cb883a 	add	r5,r2,r19
  801d08:	894b883a 	add	r5,r17,r5
  801d0c:	b005883a 	mov	r2,r22
  801d10:	2807883a 	mov	r3,r5
  801d14:	dfc00d17 	ldw	ra,52(sp)
  801d18:	df000c17 	ldw	fp,48(sp)
  801d1c:	ddc00b17 	ldw	r23,44(sp)
  801d20:	dd800a17 	ldw	r22,40(sp)
  801d24:	dd400917 	ldw	r21,36(sp)
  801d28:	dd000817 	ldw	r20,32(sp)
  801d2c:	dcc00717 	ldw	r19,28(sp)
  801d30:	dc800617 	ldw	r18,24(sp)
  801d34:	dc400517 	ldw	r17,20(sp)
  801d38:	dc000417 	ldw	r16,16(sp)
  801d3c:	dec00e04 	addi	sp,sp,56
  801d40:	f800283a 	ret

00801d44 <__clzsi2>:
  801d44:	00bfffd4 	movui	r2,65535
  801d48:	11000e36 	bltu	r2,r4,801d84 <__clzsi2+0x40>
  801d4c:	00803fc4 	movi	r2,255
  801d50:	01400204 	movi	r5,8
  801d54:	0007883a 	mov	r3,zero
  801d58:	11001036 	bltu	r2,r4,801d9c <__clzsi2+0x58>
  801d5c:	000b883a 	mov	r5,zero
  801d60:	20c6d83a 	srl	r3,r4,r3
  801d64:	00802074 	movhi	r2,129
  801d68:	10b58a04 	addi	r2,r2,-10712
  801d6c:	1887883a 	add	r3,r3,r2
  801d70:	18800003 	ldbu	r2,0(r3)
  801d74:	00c00804 	movi	r3,32
  801d78:	2885883a 	add	r2,r5,r2
  801d7c:	1885c83a 	sub	r2,r3,r2
  801d80:	f800283a 	ret
  801d84:	01400404 	movi	r5,16
  801d88:	00804034 	movhi	r2,256
  801d8c:	10bfffc4 	addi	r2,r2,-1
  801d90:	2807883a 	mov	r3,r5
  801d94:	113ff22e 	bgeu	r2,r4,801d60 <__clzsi2+0x1c>
  801d98:	01400604 	movi	r5,24
  801d9c:	2807883a 	mov	r3,r5
  801da0:	20c6d83a 	srl	r3,r4,r3
  801da4:	00802074 	movhi	r2,129
  801da8:	10b58a04 	addi	r2,r2,-10712
  801dac:	1887883a 	add	r3,r3,r2
  801db0:	18800003 	ldbu	r2,0(r3)
  801db4:	00c00804 	movi	r3,32
  801db8:	2885883a 	add	r2,r5,r2
  801dbc:	1885c83a 	sub	r2,r3,r2
  801dc0:	f800283a 	ret

00801dc4 <__pack_d>:
  801dc4:	20c00017 	ldw	r3,0(r4)
  801dc8:	defffd04 	addi	sp,sp,-12
  801dcc:	dc000015 	stw	r16,0(sp)
  801dd0:	dc800215 	stw	r18,8(sp)
  801dd4:	dc400115 	stw	r17,4(sp)
  801dd8:	00800044 	movi	r2,1
  801ddc:	22000317 	ldw	r8,12(r4)
  801de0:	001f883a 	mov	r15,zero
  801de4:	22400417 	ldw	r9,16(r4)
  801de8:	24000117 	ldw	r16,4(r4)
  801dec:	10c0552e 	bgeu	r2,r3,801f44 <__pack_d+0x180>
  801df0:	00800104 	movi	r2,4
  801df4:	18804f26 	beq	r3,r2,801f34 <__pack_d+0x170>
  801df8:	00800084 	movi	r2,2
  801dfc:	18800226 	beq	r3,r2,801e08 <__pack_d+0x44>
  801e00:	4244b03a 	or	r2,r8,r9
  801e04:	10001a1e 	bne	r2,zero,801e70 <__pack_d+0xac>
  801e08:	000d883a 	mov	r6,zero
  801e0c:	000f883a 	mov	r7,zero
  801e10:	0011883a 	mov	r8,zero
  801e14:	00800434 	movhi	r2,16
  801e18:	10bfffc4 	addi	r2,r2,-1
  801e1c:	301d883a 	mov	r14,r6
  801e20:	3884703a 	and	r2,r7,r2
  801e24:	400a953a 	slli	r5,r8,20
  801e28:	79bffc2c 	andhi	r6,r15,65520
  801e2c:	308cb03a 	or	r6,r6,r2
  801e30:	00e00434 	movhi	r3,32784
  801e34:	18ffffc4 	addi	r3,r3,-1
  801e38:	800497fa 	slli	r2,r16,31
  801e3c:	30c6703a 	and	r3,r6,r3
  801e40:	1946b03a 	or	r3,r3,r5
  801e44:	01600034 	movhi	r5,32768
  801e48:	297fffc4 	addi	r5,r5,-1
  801e4c:	194a703a 	and	r5,r3,r5
  801e50:	288ab03a 	or	r5,r5,r2
  801e54:	2807883a 	mov	r3,r5
  801e58:	7005883a 	mov	r2,r14
  801e5c:	dc800217 	ldw	r18,8(sp)
  801e60:	dc400117 	ldw	r17,4(sp)
  801e64:	dc000017 	ldw	r16,0(sp)
  801e68:	dec00304 	addi	sp,sp,12
  801e6c:	f800283a 	ret
  801e70:	21000217 	ldw	r4,8(r4)
  801e74:	00bf0084 	movi	r2,-1022
  801e78:	20803f16 	blt	r4,r2,801f78 <__pack_d+0x1b4>
  801e7c:	0080ffc4 	movi	r2,1023
  801e80:	11002c16 	blt	r2,r4,801f34 <__pack_d+0x170>
  801e84:	00803fc4 	movi	r2,255
  801e88:	408c703a 	and	r6,r8,r2
  801e8c:	00802004 	movi	r2,128
  801e90:	0007883a 	mov	r3,zero
  801e94:	000f883a 	mov	r7,zero
  801e98:	2280ffc4 	addi	r10,r4,1023
  801e9c:	30801e26 	beq	r6,r2,801f18 <__pack_d+0x154>
  801ea0:	00801fc4 	movi	r2,127
  801ea4:	4089883a 	add	r4,r8,r2
  801ea8:	220d803a 	cmpltu	r6,r4,r8
  801eac:	324d883a 	add	r6,r6,r9
  801eb0:	2011883a 	mov	r8,r4
  801eb4:	3013883a 	mov	r9,r6
  801eb8:	00880034 	movhi	r2,8192
  801ebc:	10bfffc4 	addi	r2,r2,-1
  801ec0:	12400d36 	bltu	r2,r9,801ef8 <__pack_d+0x134>
  801ec4:	4804963a 	slli	r2,r9,24
  801ec8:	400cd23a 	srli	r6,r8,8
  801ecc:	480ed23a 	srli	r7,r9,8
  801ed0:	013fffc4 	movi	r4,-1
  801ed4:	118cb03a 	or	r6,r2,r6
  801ed8:	01400434 	movhi	r5,16
  801edc:	297fffc4 	addi	r5,r5,-1
  801ee0:	3104703a 	and	r2,r6,r4
  801ee4:	3946703a 	and	r3,r7,r5
  801ee8:	5201ffcc 	andi	r8,r10,2047
  801eec:	100d883a 	mov	r6,r2
  801ef0:	180f883a 	mov	r7,r3
  801ef4:	003fc706 	br	801e14 <__pack_d+0x50>
  801ef8:	480897fa 	slli	r4,r9,31
  801efc:	4004d07a 	srli	r2,r8,1
  801f00:	4806d07a 	srli	r3,r9,1
  801f04:	52800044 	addi	r10,r10,1
  801f08:	2084b03a 	or	r2,r4,r2
  801f0c:	1011883a 	mov	r8,r2
  801f10:	1813883a 	mov	r9,r3
  801f14:	003feb06 	br	801ec4 <__pack_d+0x100>
  801f18:	383fe11e 	bne	r7,zero,801ea0 <__pack_d+0xdc>
  801f1c:	01004004 	movi	r4,256
  801f20:	4104703a 	and	r2,r8,r4
  801f24:	10c4b03a 	or	r2,r2,r3
  801f28:	103fe326 	beq	r2,zero,801eb8 <__pack_d+0xf4>
  801f2c:	3005883a 	mov	r2,r6
  801f30:	003fdc06 	br	801ea4 <__pack_d+0xe0>
  801f34:	000d883a 	mov	r6,zero
  801f38:	000f883a 	mov	r7,zero
  801f3c:	0201ffc4 	movi	r8,2047
  801f40:	003fb406 	br	801e14 <__pack_d+0x50>
  801f44:	0005883a 	mov	r2,zero
  801f48:	00c00234 	movhi	r3,8
  801f4c:	408cb03a 	or	r6,r8,r2
  801f50:	48ceb03a 	or	r7,r9,r3
  801f54:	013fffc4 	movi	r4,-1
  801f58:	01400434 	movhi	r5,16
  801f5c:	297fffc4 	addi	r5,r5,-1
  801f60:	3104703a 	and	r2,r6,r4
  801f64:	3946703a 	and	r3,r7,r5
  801f68:	100d883a 	mov	r6,r2
  801f6c:	180f883a 	mov	r7,r3
  801f70:	0201ffc4 	movi	r8,2047
  801f74:	003fa706 	br	801e14 <__pack_d+0x50>
  801f78:	1109c83a 	sub	r4,r2,r4
  801f7c:	00800e04 	movi	r2,56
  801f80:	11004316 	blt	r2,r4,802090 <__pack_d+0x2cc>
  801f84:	21fff804 	addi	r7,r4,-32
  801f88:	38004516 	blt	r7,zero,8020a0 <__pack_d+0x2dc>
  801f8c:	49d8d83a 	srl	r12,r9,r7
  801f90:	001b883a 	mov	r13,zero
  801f94:	0023883a 	mov	r17,zero
  801f98:	01400044 	movi	r5,1
  801f9c:	0025883a 	mov	r18,zero
  801fa0:	38004716 	blt	r7,zero,8020c0 <__pack_d+0x2fc>
  801fa4:	29d6983a 	sll	r11,r5,r7
  801fa8:	0015883a 	mov	r10,zero
  801fac:	00bfffc4 	movi	r2,-1
  801fb0:	5089883a 	add	r4,r10,r2
  801fb4:	588b883a 	add	r5,r11,r2
  801fb8:	228d803a 	cmpltu	r6,r4,r10
  801fbc:	314b883a 	add	r5,r6,r5
  801fc0:	4104703a 	and	r2,r8,r4
  801fc4:	4946703a 	and	r3,r9,r5
  801fc8:	10c4b03a 	or	r2,r2,r3
  801fcc:	10000226 	beq	r2,zero,801fd8 <__pack_d+0x214>
  801fd0:	04400044 	movi	r17,1
  801fd4:	0025883a 	mov	r18,zero
  801fd8:	00803fc4 	movi	r2,255
  801fdc:	644eb03a 	or	r7,r12,r17
  801fe0:	3892703a 	and	r9,r7,r2
  801fe4:	00802004 	movi	r2,128
  801fe8:	6c90b03a 	or	r8,r13,r18
  801fec:	0015883a 	mov	r10,zero
  801ff0:	48801626 	beq	r9,r2,80204c <__pack_d+0x288>
  801ff4:	01001fc4 	movi	r4,127
  801ff8:	3905883a 	add	r2,r7,r4
  801ffc:	11cd803a 	cmpltu	r6,r2,r7
  802000:	320d883a 	add	r6,r6,r8
  802004:	100f883a 	mov	r7,r2
  802008:	00840034 	movhi	r2,4096
  80200c:	10bfffc4 	addi	r2,r2,-1
  802010:	3011883a 	mov	r8,r6
  802014:	0007883a 	mov	r3,zero
  802018:	11801b36 	bltu	r2,r6,802088 <__pack_d+0x2c4>
  80201c:	4004963a 	slli	r2,r8,24
  802020:	3808d23a 	srli	r4,r7,8
  802024:	400ad23a 	srli	r5,r8,8
  802028:	1813883a 	mov	r9,r3
  80202c:	1108b03a 	or	r4,r2,r4
  802030:	00bfffc4 	movi	r2,-1
  802034:	00c00434 	movhi	r3,16
  802038:	18ffffc4 	addi	r3,r3,-1
  80203c:	208c703a 	and	r6,r4,r2
  802040:	28ce703a 	and	r7,r5,r3
  802044:	4a01ffcc 	andi	r8,r9,2047
  802048:	003f7206 	br	801e14 <__pack_d+0x50>
  80204c:	503fe91e 	bne	r10,zero,801ff4 <__pack_d+0x230>
  802050:	01004004 	movi	r4,256
  802054:	3904703a 	and	r2,r7,r4
  802058:	0007883a 	mov	r3,zero
  80205c:	10c4b03a 	or	r2,r2,r3
  802060:	10000626 	beq	r2,zero,80207c <__pack_d+0x2b8>
  802064:	3a45883a 	add	r2,r7,r9
  802068:	11cd803a 	cmpltu	r6,r2,r7
  80206c:	320d883a 	add	r6,r6,r8
  802070:	100f883a 	mov	r7,r2
  802074:	3011883a 	mov	r8,r6
  802078:	0007883a 	mov	r3,zero
  80207c:	00840034 	movhi	r2,4096
  802080:	10bfffc4 	addi	r2,r2,-1
  802084:	123fe52e 	bgeu	r2,r8,80201c <__pack_d+0x258>
  802088:	00c00044 	movi	r3,1
  80208c:	003fe306 	br	80201c <__pack_d+0x258>
  802090:	0009883a 	mov	r4,zero
  802094:	0013883a 	mov	r9,zero
  802098:	000b883a 	mov	r5,zero
  80209c:	003fe406 	br	802030 <__pack_d+0x26c>
  8020a0:	4a47883a 	add	r3,r9,r9
  8020a4:	008007c4 	movi	r2,31
  8020a8:	1105c83a 	sub	r2,r2,r4
  8020ac:	1886983a 	sll	r3,r3,r2
  8020b0:	4118d83a 	srl	r12,r8,r4
  8020b4:	491ad83a 	srl	r13,r9,r4
  8020b8:	1b18b03a 	or	r12,r3,r12
  8020bc:	003fb506 	br	801f94 <__pack_d+0x1d0>
  8020c0:	2806d07a 	srli	r3,r5,1
  8020c4:	008007c4 	movi	r2,31
  8020c8:	1105c83a 	sub	r2,r2,r4
  8020cc:	1896d83a 	srl	r11,r3,r2
  8020d0:	2914983a 	sll	r10,r5,r4
  8020d4:	003fb506 	br	801fac <__pack_d+0x1e8>

008020d8 <__unpack_d>:
  8020d8:	20c00117 	ldw	r3,4(r4)
  8020dc:	22400017 	ldw	r9,0(r4)
  8020e0:	00800434 	movhi	r2,16
  8020e4:	10bfffc4 	addi	r2,r2,-1
  8020e8:	1808d53a 	srli	r4,r3,20
  8020ec:	180cd7fa 	srli	r6,r3,31
  8020f0:	1894703a 	and	r10,r3,r2
  8020f4:	2201ffcc 	andi	r8,r4,2047
  8020f8:	281b883a 	mov	r13,r5
  8020fc:	4817883a 	mov	r11,r9
  802100:	29800115 	stw	r6,4(r5)
  802104:	5019883a 	mov	r12,r10
  802108:	40001e1e 	bne	r8,zero,802184 <__unpack_d+0xac>
  80210c:	4a84b03a 	or	r2,r9,r10
  802110:	10001926 	beq	r2,zero,802178 <__unpack_d+0xa0>
  802114:	4804d63a 	srli	r2,r9,24
  802118:	500c923a 	slli	r6,r10,8
  80211c:	013f0084 	movi	r4,-1022
  802120:	00c40034 	movhi	r3,4096
  802124:	18ffffc4 	addi	r3,r3,-1
  802128:	118cb03a 	or	r6,r2,r6
  80212c:	008000c4 	movi	r2,3
  802130:	480a923a 	slli	r5,r9,8
  802134:	68800015 	stw	r2,0(r13)
  802138:	69000215 	stw	r4,8(r13)
  80213c:	19800b36 	bltu	r3,r6,80216c <__unpack_d+0x94>
  802140:	200f883a 	mov	r7,r4
  802144:	1811883a 	mov	r8,r3
  802148:	2945883a 	add	r2,r5,r5
  80214c:	1149803a 	cmpltu	r4,r2,r5
  802150:	3187883a 	add	r3,r6,r6
  802154:	20c9883a 	add	r4,r4,r3
  802158:	100b883a 	mov	r5,r2
  80215c:	200d883a 	mov	r6,r4
  802160:	39ffffc4 	addi	r7,r7,-1
  802164:	413ff82e 	bgeu	r8,r4,802148 <__unpack_d+0x70>
  802168:	69c00215 	stw	r7,8(r13)
  80216c:	69800415 	stw	r6,16(r13)
  802170:	69400315 	stw	r5,12(r13)
  802174:	f800283a 	ret
  802178:	00800084 	movi	r2,2
  80217c:	28800015 	stw	r2,0(r5)
  802180:	f800283a 	ret
  802184:	0081ffc4 	movi	r2,2047
  802188:	40800f26 	beq	r8,r2,8021c8 <__unpack_d+0xf0>
  80218c:	480cd63a 	srli	r6,r9,24
  802190:	5006923a 	slli	r3,r10,8
  802194:	4804923a 	slli	r2,r9,8
  802198:	0009883a 	mov	r4,zero
  80219c:	30c6b03a 	or	r3,r6,r3
  8021a0:	01440034 	movhi	r5,4096
  8021a4:	110cb03a 	or	r6,r2,r4
  8021a8:	423f0044 	addi	r8,r8,-1023
  8021ac:	194eb03a 	or	r7,r3,r5
  8021b0:	008000c4 	movi	r2,3
  8021b4:	69c00415 	stw	r7,16(r13)
  8021b8:	6a000215 	stw	r8,8(r13)
  8021bc:	68800015 	stw	r2,0(r13)
  8021c0:	69800315 	stw	r6,12(r13)
  8021c4:	f800283a 	ret
  8021c8:	4a84b03a 	or	r2,r9,r10
  8021cc:	1000031e 	bne	r2,zero,8021dc <__unpack_d+0x104>
  8021d0:	00800104 	movi	r2,4
  8021d4:	28800015 	stw	r2,0(r5)
  8021d8:	f800283a 	ret
  8021dc:	0009883a 	mov	r4,zero
  8021e0:	01400234 	movhi	r5,8
  8021e4:	4904703a 	and	r2,r9,r4
  8021e8:	5146703a 	and	r3,r10,r5
  8021ec:	10c4b03a 	or	r2,r2,r3
  8021f0:	10000526 	beq	r2,zero,802208 <__unpack_d+0x130>
  8021f4:	00800044 	movi	r2,1
  8021f8:	68800015 	stw	r2,0(r13)
  8021fc:	6b000415 	stw	r12,16(r13)
  802200:	6ac00315 	stw	r11,12(r13)
  802204:	f800283a 	ret
  802208:	68000015 	stw	zero,0(r13)
  80220c:	003ffb06 	br	8021fc <__unpack_d+0x124>

00802210 <__fpcmp_parts_d>:
  802210:	21800017 	ldw	r6,0(r4)
  802214:	00c00044 	movi	r3,1
  802218:	19800a2e 	bgeu	r3,r6,802244 <__fpcmp_parts_d+0x34>
  80221c:	28800017 	ldw	r2,0(r5)
  802220:	1880082e 	bgeu	r3,r2,802244 <__fpcmp_parts_d+0x34>
  802224:	00c00104 	movi	r3,4
  802228:	30c02626 	beq	r6,r3,8022c4 <__fpcmp_parts_d+0xb4>
  80222c:	10c02226 	beq	r2,r3,8022b8 <__fpcmp_parts_d+0xa8>
  802230:	00c00084 	movi	r3,2
  802234:	30c00526 	beq	r6,r3,80224c <__fpcmp_parts_d+0x3c>
  802238:	10c0071e 	bne	r2,r3,802258 <__fpcmp_parts_d+0x48>
  80223c:	20800117 	ldw	r2,4(r4)
  802240:	1000091e 	bne	r2,zero,802268 <__fpcmp_parts_d+0x58>
  802244:	00800044 	movi	r2,1
  802248:	f800283a 	ret
  80224c:	10c01a1e 	bne	r2,r3,8022b8 <__fpcmp_parts_d+0xa8>
  802250:	0005883a 	mov	r2,zero
  802254:	f800283a 	ret
  802258:	22000117 	ldw	r8,4(r4)
  80225c:	28800117 	ldw	r2,4(r5)
  802260:	40800326 	beq	r8,r2,802270 <__fpcmp_parts_d+0x60>
  802264:	403ff726 	beq	r8,zero,802244 <__fpcmp_parts_d+0x34>
  802268:	00bfffc4 	movi	r2,-1
  80226c:	f800283a 	ret
  802270:	20c00217 	ldw	r3,8(r4)
  802274:	28800217 	ldw	r2,8(r5)
  802278:	10fffa16 	blt	r2,r3,802264 <__fpcmp_parts_d+0x54>
  80227c:	18800916 	blt	r3,r2,8022a4 <__fpcmp_parts_d+0x94>
  802280:	21c00417 	ldw	r7,16(r4)
  802284:	28c00417 	ldw	r3,16(r5)
  802288:	21800317 	ldw	r6,12(r4)
  80228c:	28800317 	ldw	r2,12(r5)
  802290:	19fff436 	bltu	r3,r7,802264 <__fpcmp_parts_d+0x54>
  802294:	38c00526 	beq	r7,r3,8022ac <__fpcmp_parts_d+0x9c>
  802298:	38c00236 	bltu	r7,r3,8022a4 <__fpcmp_parts_d+0x94>
  80229c:	19ffec1e 	bne	r3,r7,802250 <__fpcmp_parts_d+0x40>
  8022a0:	30bfeb2e 	bgeu	r6,r2,802250 <__fpcmp_parts_d+0x40>
  8022a4:	403fe71e 	bne	r8,zero,802244 <__fpcmp_parts_d+0x34>
  8022a8:	003fef06 	br	802268 <__fpcmp_parts_d+0x58>
  8022ac:	11bffa2e 	bgeu	r2,r6,802298 <__fpcmp_parts_d+0x88>
  8022b0:	403fe426 	beq	r8,zero,802244 <__fpcmp_parts_d+0x34>
  8022b4:	003fec06 	br	802268 <__fpcmp_parts_d+0x58>
  8022b8:	28800117 	ldw	r2,4(r5)
  8022bc:	103fe11e 	bne	r2,zero,802244 <__fpcmp_parts_d+0x34>
  8022c0:	003fe906 	br	802268 <__fpcmp_parts_d+0x58>
  8022c4:	11bfdd1e 	bne	r2,r6,80223c <__fpcmp_parts_d+0x2c>
  8022c8:	28c00117 	ldw	r3,4(r5)
  8022cc:	20800117 	ldw	r2,4(r4)
  8022d0:	1885c83a 	sub	r2,r3,r2
  8022d4:	f800283a 	ret

008022d8 <__errno>:
  8022d8:	00c02074 	movhi	r3,129
  8022dc:	18fce204 	addi	r3,r3,-3192
  8022e0:	18800017 	ldw	r2,0(r3)
  8022e4:	f800283a 	ret

008022e8 <printf>:
  8022e8:	defffb04 	addi	sp,sp,-20
  8022ec:	dfc00115 	stw	ra,4(sp)
  8022f0:	d9400215 	stw	r5,8(sp)
  8022f4:	d9800315 	stw	r6,12(sp)
  8022f8:	d9c00415 	stw	r7,16(sp)
  8022fc:	00802074 	movhi	r2,129
  802300:	10bce204 	addi	r2,r2,-3192
  802304:	10c00017 	ldw	r3,0(r2)
  802308:	200b883a 	mov	r5,r4
  80230c:	d8800204 	addi	r2,sp,8
  802310:	19000217 	ldw	r4,8(r3)
  802314:	100d883a 	mov	r6,r2
  802318:	d8800015 	stw	r2,0(sp)
  80231c:	08045900 	call	804590 <__vfprintf_internal>
  802320:	dfc00117 	ldw	ra,4(sp)
  802324:	dec00504 	addi	sp,sp,20
  802328:	f800283a 	ret

0080232c <_printf_r>:
  80232c:	defffc04 	addi	sp,sp,-16
  802330:	dfc00115 	stw	ra,4(sp)
  802334:	d9800215 	stw	r6,8(sp)
  802338:	d9c00315 	stw	r7,12(sp)
  80233c:	280d883a 	mov	r6,r5
  802340:	21400217 	ldw	r5,8(r4)
  802344:	d8c00204 	addi	r3,sp,8
  802348:	180f883a 	mov	r7,r3
  80234c:	d8c00015 	stw	r3,0(sp)
  802350:	08026cc0 	call	8026cc <___vfprintf_internal_r>
  802354:	dfc00117 	ldw	ra,4(sp)
  802358:	dec00404 	addi	sp,sp,16
  80235c:	f800283a 	ret

00802360 <putc>:
  802360:	defffc04 	addi	sp,sp,-16
  802364:	dc800215 	stw	r18,8(sp)
  802368:	04802074 	movhi	r18,129
  80236c:	94bce204 	addi	r18,r18,-3192
  802370:	90c00017 	ldw	r3,0(r18)
  802374:	dc400115 	stw	r17,4(sp)
  802378:	dc000015 	stw	r16,0(sp)
  80237c:	dfc00315 	stw	ra,12(sp)
  802380:	2023883a 	mov	r17,r4
  802384:	2821883a 	mov	r16,r5
  802388:	18000226 	beq	r3,zero,802394 <putc+0x34>
  80238c:	18800e17 	ldw	r2,56(r3)
  802390:	10001126 	beq	r2,zero,8023d8 <putc+0x78>
  802394:	80800217 	ldw	r2,8(r16)
  802398:	10ffffc4 	addi	r3,r2,-1
  80239c:	80c00215 	stw	r3,8(r16)
  8023a0:	18001316 	blt	r3,zero,8023f0 <putc+0x90>
  8023a4:	80800017 	ldw	r2,0(r16)
  8023a8:	14400005 	stb	r17,0(r2)
  8023ac:	80c00017 	ldw	r3,0(r16)
  8023b0:	18800044 	addi	r2,r3,1
  8023b4:	18c00003 	ldbu	r3,0(r3)
  8023b8:	80800015 	stw	r2,0(r16)
  8023bc:	1805883a 	mov	r2,r3
  8023c0:	dfc00317 	ldw	ra,12(sp)
  8023c4:	dc800217 	ldw	r18,8(sp)
  8023c8:	dc400117 	ldw	r17,4(sp)
  8023cc:	dc000017 	ldw	r16,0(sp)
  8023d0:	dec00404 	addi	sp,sp,16
  8023d4:	f800283a 	ret
  8023d8:	1809883a 	mov	r4,r3
  8023dc:	08062cc0 	call	8062cc <__sinit>
  8023e0:	80800217 	ldw	r2,8(r16)
  8023e4:	10ffffc4 	addi	r3,r2,-1
  8023e8:	80c00215 	stw	r3,8(r16)
  8023ec:	183fed0e 	bge	r3,zero,8023a4 <putc+0x44>
  8023f0:	80800617 	ldw	r2,24(r16)
  8023f4:	18800f16 	blt	r3,r2,802434 <putc+0xd4>
  8023f8:	80800017 	ldw	r2,0(r16)
  8023fc:	14400005 	stb	r17,0(r2)
  802400:	81000017 	ldw	r4,0(r16)
  802404:	00800284 	movi	r2,10
  802408:	20c00003 	ldbu	r3,0(r4)
  80240c:	18801226 	beq	r3,r2,802458 <putc+0xf8>
  802410:	20800044 	addi	r2,r4,1
  802414:	80800015 	stw	r2,0(r16)
  802418:	1805883a 	mov	r2,r3
  80241c:	dfc00317 	ldw	ra,12(sp)
  802420:	dc800217 	ldw	r18,8(sp)
  802424:	dc400117 	ldw	r17,4(sp)
  802428:	dc000017 	ldw	r16,0(sp)
  80242c:	dec00404 	addi	sp,sp,16
  802430:	f800283a 	ret
  802434:	91000017 	ldw	r4,0(r18)
  802438:	880b883a 	mov	r5,r17
  80243c:	800d883a 	mov	r6,r16
  802440:	dfc00317 	ldw	ra,12(sp)
  802444:	dc800217 	ldw	r18,8(sp)
  802448:	dc400117 	ldw	r17,4(sp)
  80244c:	dc000017 	ldw	r16,0(sp)
  802450:	dec00404 	addi	sp,sp,16
  802454:	08045b41 	jmpi	8045b4 <__swbuf_r>
  802458:	91000017 	ldw	r4,0(r18)
  80245c:	180b883a 	mov	r5,r3
  802460:	003ff606 	br	80243c <putc+0xdc>

00802464 <_putc_r>:
  802464:	defffc04 	addi	sp,sp,-16
  802468:	dc400215 	stw	r17,8(sp)
  80246c:	dc000115 	stw	r16,4(sp)
  802470:	dfc00315 	stw	ra,12(sp)
  802474:	2021883a 	mov	r16,r4
  802478:	2823883a 	mov	r17,r5
  80247c:	20000226 	beq	r4,zero,802488 <_putc_r+0x24>
  802480:	20800e17 	ldw	r2,56(r4)
  802484:	10001026 	beq	r2,zero,8024c8 <_putc_r+0x64>
  802488:	30800217 	ldw	r2,8(r6)
  80248c:	10ffffc4 	addi	r3,r2,-1
  802490:	30c00215 	stw	r3,8(r6)
  802494:	18001316 	blt	r3,zero,8024e4 <_putc_r+0x80>
  802498:	30800017 	ldw	r2,0(r6)
  80249c:	14400005 	stb	r17,0(r2)
  8024a0:	30c00017 	ldw	r3,0(r6)
  8024a4:	18800044 	addi	r2,r3,1
  8024a8:	18c00003 	ldbu	r3,0(r3)
  8024ac:	30800015 	stw	r2,0(r6)
  8024b0:	1805883a 	mov	r2,r3
  8024b4:	dfc00317 	ldw	ra,12(sp)
  8024b8:	dc400217 	ldw	r17,8(sp)
  8024bc:	dc000117 	ldw	r16,4(sp)
  8024c0:	dec00404 	addi	sp,sp,16
  8024c4:	f800283a 	ret
  8024c8:	d9800015 	stw	r6,0(sp)
  8024cc:	08062cc0 	call	8062cc <__sinit>
  8024d0:	d9800017 	ldw	r6,0(sp)
  8024d4:	30800217 	ldw	r2,8(r6)
  8024d8:	10ffffc4 	addi	r3,r2,-1
  8024dc:	30c00215 	stw	r3,8(r6)
  8024e0:	183fed0e 	bge	r3,zero,802498 <_putc_r+0x34>
  8024e4:	30800617 	ldw	r2,24(r6)
  8024e8:	18800e16 	blt	r3,r2,802524 <_putc_r+0xc0>
  8024ec:	30800017 	ldw	r2,0(r6)
  8024f0:	14400005 	stb	r17,0(r2)
  8024f4:	31000017 	ldw	r4,0(r6)
  8024f8:	00800284 	movi	r2,10
  8024fc:	20c00003 	ldbu	r3,0(r4)
  802500:	18800f26 	beq	r3,r2,802540 <_putc_r+0xdc>
  802504:	20800044 	addi	r2,r4,1
  802508:	30800015 	stw	r2,0(r6)
  80250c:	1805883a 	mov	r2,r3
  802510:	dfc00317 	ldw	ra,12(sp)
  802514:	dc400217 	ldw	r17,8(sp)
  802518:	dc000117 	ldw	r16,4(sp)
  80251c:	dec00404 	addi	sp,sp,16
  802520:	f800283a 	ret
  802524:	8009883a 	mov	r4,r16
  802528:	880b883a 	mov	r5,r17
  80252c:	dfc00317 	ldw	ra,12(sp)
  802530:	dc400217 	ldw	r17,8(sp)
  802534:	dc000117 	ldw	r16,4(sp)
  802538:	dec00404 	addi	sp,sp,16
  80253c:	08045b41 	jmpi	8045b4 <__swbuf_r>
  802540:	8009883a 	mov	r4,r16
  802544:	180b883a 	mov	r5,r3
  802548:	003ff806 	br	80252c <_putc_r+0xc8>

0080254c <_puts_r>:
  80254c:	defff604 	addi	sp,sp,-40
  802550:	dc400715 	stw	r17,28(sp)
  802554:	2023883a 	mov	r17,r4
  802558:	2809883a 	mov	r4,r5
  80255c:	dfc00915 	stw	ra,36(sp)
  802560:	dcc00815 	stw	r19,32(sp)
  802564:	2827883a 	mov	r19,r5
  802568:	08026000 	call	802600 <strlen>
  80256c:	89400217 	ldw	r5,8(r17)
  802570:	00c02074 	movhi	r3,129
  802574:	18f5cb04 	addi	r3,r3,-10452
  802578:	01c00044 	movi	r7,1
  80257c:	12000044 	addi	r8,r2,1
  802580:	d8c00515 	stw	r3,20(sp)
  802584:	d9c00615 	stw	r7,24(sp)
  802588:	d8c00304 	addi	r3,sp,12
  80258c:	01c00084 	movi	r7,2
  802590:	8809883a 	mov	r4,r17
  802594:	d80d883a 	mov	r6,sp
  802598:	d8c00015 	stw	r3,0(sp)
  80259c:	dcc00315 	stw	r19,12(sp)
  8025a0:	da000215 	stw	r8,8(sp)
  8025a4:	d9c00115 	stw	r7,4(sp)
  8025a8:	d8800415 	stw	r2,16(sp)
  8025ac:	08069980 	call	806998 <__sfvwrite_r>
  8025b0:	00ffffc4 	movi	r3,-1
  8025b4:	10000626 	beq	r2,zero,8025d0 <_puts_r+0x84>
  8025b8:	1805883a 	mov	r2,r3
  8025bc:	dfc00917 	ldw	ra,36(sp)
  8025c0:	dcc00817 	ldw	r19,32(sp)
  8025c4:	dc400717 	ldw	r17,28(sp)
  8025c8:	dec00a04 	addi	sp,sp,40
  8025cc:	f800283a 	ret
  8025d0:	00c00284 	movi	r3,10
  8025d4:	1805883a 	mov	r2,r3
  8025d8:	dfc00917 	ldw	ra,36(sp)
  8025dc:	dcc00817 	ldw	r19,32(sp)
  8025e0:	dc400717 	ldw	r17,28(sp)
  8025e4:	dec00a04 	addi	sp,sp,40
  8025e8:	f800283a 	ret

008025ec <puts>:
  8025ec:	00802074 	movhi	r2,129
  8025f0:	10bce204 	addi	r2,r2,-3192
  8025f4:	200b883a 	mov	r5,r4
  8025f8:	11000017 	ldw	r4,0(r2)
  8025fc:	080254c1 	jmpi	80254c <_puts_r>

00802600 <strlen>:
  802600:	208000cc 	andi	r2,r4,3
  802604:	2011883a 	mov	r8,r4
  802608:	1000161e 	bne	r2,zero,802664 <strlen+0x64>
  80260c:	20c00017 	ldw	r3,0(r4)
  802610:	017fbff4 	movhi	r5,65279
  802614:	297fbfc4 	addi	r5,r5,-257
  802618:	01e02074 	movhi	r7,32897
  80261c:	39e02004 	addi	r7,r7,-32640
  802620:	1945883a 	add	r2,r3,r5
  802624:	11c4703a 	and	r2,r2,r7
  802628:	00c6303a 	nor	r3,zero,r3
  80262c:	1886703a 	and	r3,r3,r2
  802630:	18000c1e 	bne	r3,zero,802664 <strlen+0x64>
  802634:	280d883a 	mov	r6,r5
  802638:	380b883a 	mov	r5,r7
  80263c:	21000104 	addi	r4,r4,4
  802640:	20800017 	ldw	r2,0(r4)
  802644:	1187883a 	add	r3,r2,r6
  802648:	1946703a 	and	r3,r3,r5
  80264c:	0084303a 	nor	r2,zero,r2
  802650:	10c4703a 	and	r2,r2,r3
  802654:	103ff926 	beq	r2,zero,80263c <strlen+0x3c>
  802658:	20800007 	ldb	r2,0(r4)
  80265c:	10000326 	beq	r2,zero,80266c <strlen+0x6c>
  802660:	21000044 	addi	r4,r4,1
  802664:	20800007 	ldb	r2,0(r4)
  802668:	103ffd1e 	bne	r2,zero,802660 <strlen+0x60>
  80266c:	2205c83a 	sub	r2,r4,r8
  802670:	f800283a 	ret

00802674 <__sprint_r>:
  802674:	30800217 	ldw	r2,8(r6)
  802678:	defffe04 	addi	sp,sp,-8
  80267c:	dc000015 	stw	r16,0(sp)
  802680:	dfc00115 	stw	ra,4(sp)
  802684:	3021883a 	mov	r16,r6
  802688:	0007883a 	mov	r3,zero
  80268c:	1000061e 	bne	r2,zero,8026a8 <__sprint_r+0x34>
  802690:	1805883a 	mov	r2,r3
  802694:	30000115 	stw	zero,4(r6)
  802698:	dfc00117 	ldw	ra,4(sp)
  80269c:	dc000017 	ldw	r16,0(sp)
  8026a0:	dec00204 	addi	sp,sp,8
  8026a4:	f800283a 	ret
  8026a8:	08069980 	call	806998 <__sfvwrite_r>
  8026ac:	1007883a 	mov	r3,r2
  8026b0:	1805883a 	mov	r2,r3
  8026b4:	80000115 	stw	zero,4(r16)
  8026b8:	80000215 	stw	zero,8(r16)
  8026bc:	dfc00117 	ldw	ra,4(sp)
  8026c0:	dc000017 	ldw	r16,0(sp)
  8026c4:	dec00204 	addi	sp,sp,8
  8026c8:	f800283a 	ret

008026cc <___vfprintf_internal_r>:
  8026cc:	defea404 	addi	sp,sp,-1392
  8026d0:	dd815815 	stw	r22,1376(sp)
  8026d4:	dc015215 	stw	r16,1352(sp)
  8026d8:	d9c15115 	stw	r7,1348(sp)
  8026dc:	dfc15b15 	stw	ra,1388(sp)
  8026e0:	df015a15 	stw	fp,1384(sp)
  8026e4:	ddc15915 	stw	r23,1380(sp)
  8026e8:	dd415715 	stw	r21,1372(sp)
  8026ec:	dd015615 	stw	r20,1368(sp)
  8026f0:	dcc15515 	stw	r19,1364(sp)
  8026f4:	dc815415 	stw	r18,1360(sp)
  8026f8:	dc415315 	stw	r17,1356(sp)
  8026fc:	282d883a 	mov	r22,r5
  802700:	3021883a 	mov	r16,r6
  802704:	d9014f15 	stw	r4,1340(sp)
  802708:	0806fbc0 	call	806fbc <_localeconv_r>
  80270c:	10800017 	ldw	r2,0(r2)
  802710:	d9c15117 	ldw	r7,1348(sp)
  802714:	d8814915 	stw	r2,1316(sp)
  802718:	d8814f17 	ldw	r2,1340(sp)
  80271c:	10000226 	beq	r2,zero,802728 <___vfprintf_internal_r+0x5c>
  802720:	10800e17 	ldw	r2,56(r2)
  802724:	10020d26 	beq	r2,zero,802f5c <___vfprintf_internal_r+0x890>
  802728:	b080030b 	ldhu	r2,12(r22)
  80272c:	1080020c 	andi	r2,r2,8
  802730:	10020e26 	beq	r2,zero,802f6c <___vfprintf_internal_r+0x8a0>
  802734:	b0800417 	ldw	r2,16(r22)
  802738:	10020c26 	beq	r2,zero,802f6c <___vfprintf_internal_r+0x8a0>
  80273c:	b200030b 	ldhu	r8,12(r22)
  802740:	00800284 	movi	r2,10
  802744:	40c0068c 	andi	r3,r8,26
  802748:	18802f1e 	bne	r3,r2,802808 <___vfprintf_internal_r+0x13c>
  80274c:	b080038f 	ldh	r2,14(r22)
  802750:	10002d16 	blt	r2,zero,802808 <___vfprintf_internal_r+0x13c>
  802754:	b240038b 	ldhu	r9,14(r22)
  802758:	b2800717 	ldw	r10,28(r22)
  80275c:	b2c00917 	ldw	r11,36(r22)
  802760:	d9014f17 	ldw	r4,1340(sp)
  802764:	dc402904 	addi	r17,sp,164
  802768:	d8804004 	addi	r2,sp,256
  80276c:	00c10004 	movi	r3,1024
  802770:	423fff4c 	andi	r8,r8,65533
  802774:	800d883a 	mov	r6,r16
  802778:	880b883a 	mov	r5,r17
  80277c:	da002c0d 	sth	r8,176(sp)
  802780:	da402c8d 	sth	r9,178(sp)
  802784:	da803015 	stw	r10,192(sp)
  802788:	dac03215 	stw	r11,200(sp)
  80278c:	d8802d15 	stw	r2,180(sp)
  802790:	d8c02e15 	stw	r3,184(sp)
  802794:	d8802915 	stw	r2,164(sp)
  802798:	d8c02b15 	stw	r3,172(sp)
  80279c:	d8002f15 	stw	zero,188(sp)
  8027a0:	08026cc0 	call	8026cc <___vfprintf_internal_r>
  8027a4:	d8814b15 	stw	r2,1324(sp)
  8027a8:	10000416 	blt	r2,zero,8027bc <___vfprintf_internal_r+0xf0>
  8027ac:	d9014f17 	ldw	r4,1340(sp)
  8027b0:	880b883a 	mov	r5,r17
  8027b4:	08060340 	call	806034 <_fflush_r>
  8027b8:	1002321e 	bne	r2,zero,803084 <___vfprintf_internal_r+0x9b8>
  8027bc:	d8802c0b 	ldhu	r2,176(sp)
  8027c0:	1080100c 	andi	r2,r2,64
  8027c4:	10000326 	beq	r2,zero,8027d4 <___vfprintf_internal_r+0x108>
  8027c8:	b080030b 	ldhu	r2,12(r22)
  8027cc:	10801014 	ori	r2,r2,64
  8027d0:	b080030d 	sth	r2,12(r22)
  8027d4:	d8814b17 	ldw	r2,1324(sp)
  8027d8:	dfc15b17 	ldw	ra,1388(sp)
  8027dc:	df015a17 	ldw	fp,1384(sp)
  8027e0:	ddc15917 	ldw	r23,1380(sp)
  8027e4:	dd815817 	ldw	r22,1376(sp)
  8027e8:	dd415717 	ldw	r21,1372(sp)
  8027ec:	dd015617 	ldw	r20,1368(sp)
  8027f0:	dcc15517 	ldw	r19,1364(sp)
  8027f4:	dc815417 	ldw	r18,1360(sp)
  8027f8:	dc415317 	ldw	r17,1356(sp)
  8027fc:	dc015217 	ldw	r16,1352(sp)
  802800:	dec15c04 	addi	sp,sp,1392
  802804:	f800283a 	ret
  802808:	0005883a 	mov	r2,zero
  80280c:	0007883a 	mov	r3,zero
  802810:	dd401904 	addi	r21,sp,100
  802814:	d8814215 	stw	r2,1288(sp)
  802818:	802f883a 	mov	r23,r16
  80281c:	d8c14315 	stw	r3,1292(sp)
  802820:	d8014b15 	stw	zero,1324(sp)
  802824:	d8014815 	stw	zero,1312(sp)
  802828:	d8014415 	stw	zero,1296(sp)
  80282c:	d8014715 	stw	zero,1308(sp)
  802830:	dd400c15 	stw	r21,48(sp)
  802834:	d8000e15 	stw	zero,56(sp)
  802838:	d8000d15 	stw	zero,52(sp)
  80283c:	b8800007 	ldb	r2,0(r23)
  802840:	10001926 	beq	r2,zero,8028a8 <___vfprintf_internal_r+0x1dc>
  802844:	00c00944 	movi	r3,37
  802848:	10c01726 	beq	r2,r3,8028a8 <___vfprintf_internal_r+0x1dc>
  80284c:	b821883a 	mov	r16,r23
  802850:	00000106 	br	802858 <___vfprintf_internal_r+0x18c>
  802854:	10c00326 	beq	r2,r3,802864 <___vfprintf_internal_r+0x198>
  802858:	84000044 	addi	r16,r16,1
  80285c:	80800007 	ldb	r2,0(r16)
  802860:	103ffc1e 	bne	r2,zero,802854 <___vfprintf_internal_r+0x188>
  802864:	85e7c83a 	sub	r19,r16,r23
  802868:	98000e26 	beq	r19,zero,8028a4 <___vfprintf_internal_r+0x1d8>
  80286c:	dc800e17 	ldw	r18,56(sp)
  802870:	dc400d17 	ldw	r17,52(sp)
  802874:	008001c4 	movi	r2,7
  802878:	94e5883a 	add	r18,r18,r19
  80287c:	8c400044 	addi	r17,r17,1
  802880:	adc00015 	stw	r23,0(r21)
  802884:	dc800e15 	stw	r18,56(sp)
  802888:	acc00115 	stw	r19,4(r21)
  80288c:	dc400d15 	stw	r17,52(sp)
  802890:	14428b16 	blt	r2,r17,8032c0 <___vfprintf_internal_r+0xbf4>
  802894:	ad400204 	addi	r21,r21,8
  802898:	d9014b17 	ldw	r4,1324(sp)
  80289c:	24c9883a 	add	r4,r4,r19
  8028a0:	d9014b15 	stw	r4,1324(sp)
  8028a4:	802f883a 	mov	r23,r16
  8028a8:	b8800007 	ldb	r2,0(r23)
  8028ac:	10013c26 	beq	r2,zero,802da0 <___vfprintf_internal_r+0x6d4>
  8028b0:	bdc00044 	addi	r23,r23,1
  8028b4:	d8000405 	stb	zero,16(sp)
  8028b8:	b8c00007 	ldb	r3,0(r23)
  8028bc:	04ffffc4 	movi	r19,-1
  8028c0:	d8014c15 	stw	zero,1328(sp)
  8028c4:	d8014a15 	stw	zero,1320(sp)
  8028c8:	d8c14d15 	stw	r3,1332(sp)
  8028cc:	bdc00044 	addi	r23,r23,1
  8028d0:	d9414d17 	ldw	r5,1332(sp)
  8028d4:	00801604 	movi	r2,88
  8028d8:	28fff804 	addi	r3,r5,-32
  8028dc:	10c06036 	bltu	r2,r3,802a60 <___vfprintf_internal_r+0x394>
  8028e0:	18c5883a 	add	r2,r3,r3
  8028e4:	1085883a 	add	r2,r2,r2
  8028e8:	00c02034 	movhi	r3,128
  8028ec:	18ca3f04 	addi	r3,r3,10492
  8028f0:	10c5883a 	add	r2,r2,r3
  8028f4:	11000017 	ldw	r4,0(r2)
  8028f8:	2000683a 	jmp	r4
  8028fc:	00803870 	cmpltui	r2,zero,225
  802900:	00802a60 	cmpeqi	r2,zero,169
  802904:	00802a60 	cmpeqi	r2,zero,169
  802908:	0080385c 	xori	r2,zero,225
  80290c:	00802a60 	cmpeqi	r2,zero,169
  802910:	00802a60 	cmpeqi	r2,zero,169
  802914:	00802a60 	cmpeqi	r2,zero,169
  802918:	00802a60 	cmpeqi	r2,zero,169
  80291c:	00802a60 	cmpeqi	r2,zero,169
  802920:	00802a60 	cmpeqi	r2,zero,169
  802924:	0080363c 	xorhi	r2,zero,216
  802928:	0080384c 	andi	r2,zero,225
  80292c:	00802a60 	cmpeqi	r2,zero,169
  802930:	00803654 	movui	r2,217
  802934:	008038f4 	movhi	r2,227
  802938:	00802a60 	cmpeqi	r2,zero,169
  80293c:	008038e0 	cmpeqi	r2,zero,227
  802940:	0080389c 	xori	r2,zero,226
  802944:	0080389c 	xori	r2,zero,226
  802948:	0080389c 	xori	r2,zero,226
  80294c:	0080389c 	xori	r2,zero,226
  802950:	0080389c 	xori	r2,zero,226
  802954:	0080389c 	xori	r2,zero,226
  802958:	0080389c 	xori	r2,zero,226
  80295c:	0080389c 	xori	r2,zero,226
  802960:	0080389c 	xori	r2,zero,226
  802964:	00802a60 	cmpeqi	r2,zero,169
  802968:	00802a60 	cmpeqi	r2,zero,169
  80296c:	00802a60 	cmpeqi	r2,zero,169
  802970:	00802a60 	cmpeqi	r2,zero,169
  802974:	00802a60 	cmpeqi	r2,zero,169
  802978:	00802a60 	cmpeqi	r2,zero,169
  80297c:	00802a60 	cmpeqi	r2,zero,169
  802980:	00802a60 	cmpeqi	r2,zero,169
  802984:	00802a60 	cmpeqi	r2,zero,169
  802988:	00802a60 	cmpeqi	r2,zero,169
  80298c:	008030b8 	rdprs	r2,zero,194
  802990:	00803724 	muli	r2,zero,220
  802994:	00802a60 	cmpeqi	r2,zero,169
  802998:	00803724 	muli	r2,zero,220
  80299c:	00802a60 	cmpeqi	r2,zero,169
  8029a0:	00802a60 	cmpeqi	r2,zero,169
  8029a4:	00802a60 	cmpeqi	r2,zero,169
  8029a8:	00802a60 	cmpeqi	r2,zero,169
  8029ac:	00803888 	cmpgei	r2,zero,226
  8029b0:	00802a60 	cmpeqi	r2,zero,169
  8029b4:	00802a60 	cmpeqi	r2,zero,169
  8029b8:	0080316c 	andhi	r2,zero,197
  8029bc:	00802a60 	cmpeqi	r2,zero,169
  8029c0:	00802a60 	cmpeqi	r2,zero,169
  8029c4:	00802a60 	cmpeqi	r2,zero,169
  8029c8:	00802a60 	cmpeqi	r2,zero,169
  8029cc:	00802a60 	cmpeqi	r2,zero,169
  8029d0:	008031b8 	rdprs	r2,zero,198
  8029d4:	00802a60 	cmpeqi	r2,zero,169
  8029d8:	00802a60 	cmpeqi	r2,zero,169
  8029dc:	008037d8 	cmpnei	r2,zero,223
  8029e0:	00802a60 	cmpeqi	r2,zero,169
  8029e4:	00802a60 	cmpeqi	r2,zero,169
  8029e8:	00802a60 	cmpeqi	r2,zero,169
  8029ec:	00802a60 	cmpeqi	r2,zero,169
  8029f0:	00802a60 	cmpeqi	r2,zero,169
  8029f4:	00802a60 	cmpeqi	r2,zero,169
  8029f8:	00802a60 	cmpeqi	r2,zero,169
  8029fc:	00802a60 	cmpeqi	r2,zero,169
  802a00:	00802a60 	cmpeqi	r2,zero,169
  802a04:	00802a60 	cmpeqi	r2,zero,169
  802a08:	008037ac 	andhi	r2,zero,222
  802a0c:	008030c4 	movi	r2,195
  802a10:	00803724 	muli	r2,zero,220
  802a14:	00803724 	muli	r2,zero,220
  802a18:	00803724 	muli	r2,zero,220
  802a1c:	00803710 	cmplti	r2,zero,220
  802a20:	008030c4 	movi	r2,195
  802a24:	00802a60 	cmpeqi	r2,zero,169
  802a28:	00802a60 	cmpeqi	r2,zero,169
  802a2c:	00803698 	cmpnei	r2,zero,218
  802a30:	00802a60 	cmpeqi	r2,zero,169
  802a34:	00803668 	cmpgeui	r2,zero,217
  802a38:	00803178 	rdprs	r2,zero,197
  802a3c:	008036c8 	cmpgei	r2,zero,219
  802a40:	008036b4 	movhi	r2,218
  802a44:	00802a60 	cmpeqi	r2,zero,169
  802a48:	0080395c 	xori	r2,zero,229
  802a4c:	00802a60 	cmpeqi	r2,zero,169
  802a50:	008031c4 	movi	r2,199
  802a54:	00802a60 	cmpeqi	r2,zero,169
  802a58:	00802a60 	cmpeqi	r2,zero,169
  802a5c:	0080383c 	xorhi	r2,zero,224
  802a60:	d9014d17 	ldw	r4,1332(sp)
  802a64:	2000ce26 	beq	r4,zero,802da0 <___vfprintf_internal_r+0x6d4>
  802a68:	01400044 	movi	r5,1
  802a6c:	d9800f04 	addi	r6,sp,60
  802a70:	d9c14015 	stw	r7,1280(sp)
  802a74:	d9414515 	stw	r5,1300(sp)
  802a78:	d9814115 	stw	r6,1284(sp)
  802a7c:	280f883a 	mov	r7,r5
  802a80:	d9000f05 	stb	r4,60(sp)
  802a84:	d8000405 	stb	zero,16(sp)
  802a88:	d8014615 	stw	zero,1304(sp)
  802a8c:	d8c14c17 	ldw	r3,1328(sp)
  802a90:	1880008c 	andi	r2,r3,2
  802a94:	1005003a 	cmpeq	r2,r2,zero
  802a98:	d8815015 	stw	r2,1344(sp)
  802a9c:	1000031e 	bne	r2,zero,802aac <___vfprintf_internal_r+0x3e0>
  802aa0:	d9014517 	ldw	r4,1300(sp)
  802aa4:	21000084 	addi	r4,r4,2
  802aa8:	d9014515 	stw	r4,1300(sp)
  802aac:	d9414c17 	ldw	r5,1328(sp)
  802ab0:	2940210c 	andi	r5,r5,132
  802ab4:	d9414e15 	stw	r5,1336(sp)
  802ab8:	28002d1e 	bne	r5,zero,802b70 <___vfprintf_internal_r+0x4a4>
  802abc:	d9814a17 	ldw	r6,1320(sp)
  802ac0:	d8814517 	ldw	r2,1300(sp)
  802ac4:	30a1c83a 	sub	r16,r6,r2
  802ac8:	0400290e 	bge	zero,r16,802b70 <___vfprintf_internal_r+0x4a4>
  802acc:	00800404 	movi	r2,16
  802ad0:	14045e0e 	bge	r2,r16,803c4c <___vfprintf_internal_r+0x1580>
  802ad4:	dc800e17 	ldw	r18,56(sp)
  802ad8:	dc400d17 	ldw	r17,52(sp)
  802adc:	1027883a 	mov	r19,r2
  802ae0:	07002074 	movhi	fp,129
  802ae4:	e735e784 	addi	fp,fp,-10338
  802ae8:	050001c4 	movi	r20,7
  802aec:	00000306 	br	802afc <___vfprintf_internal_r+0x430>
  802af0:	843ffc04 	addi	r16,r16,-16
  802af4:	ad400204 	addi	r21,r21,8
  802af8:	9c00130e 	bge	r19,r16,802b48 <___vfprintf_internal_r+0x47c>
  802afc:	94800404 	addi	r18,r18,16
  802b00:	8c400044 	addi	r17,r17,1
  802b04:	af000015 	stw	fp,0(r21)
  802b08:	acc00115 	stw	r19,4(r21)
  802b0c:	dc800e15 	stw	r18,56(sp)
  802b10:	dc400d15 	stw	r17,52(sp)
  802b14:	a47ff60e 	bge	r20,r17,802af0 <___vfprintf_internal_r+0x424>
  802b18:	d9014f17 	ldw	r4,1340(sp)
  802b1c:	b00b883a 	mov	r5,r22
  802b20:	d9800c04 	addi	r6,sp,48
  802b24:	d9c15115 	stw	r7,1348(sp)
  802b28:	08026740 	call	802674 <__sprint_r>
  802b2c:	d9c15117 	ldw	r7,1348(sp)
  802b30:	10009e1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  802b34:	843ffc04 	addi	r16,r16,-16
  802b38:	dc800e17 	ldw	r18,56(sp)
  802b3c:	dc400d17 	ldw	r17,52(sp)
  802b40:	dd401904 	addi	r21,sp,100
  802b44:	9c3fed16 	blt	r19,r16,802afc <___vfprintf_internal_r+0x430>
  802b48:	9425883a 	add	r18,r18,r16
  802b4c:	8c400044 	addi	r17,r17,1
  802b50:	008001c4 	movi	r2,7
  802b54:	af000015 	stw	fp,0(r21)
  802b58:	ac000115 	stw	r16,4(r21)
  802b5c:	dc800e15 	stw	r18,56(sp)
  802b60:	dc400d15 	stw	r17,52(sp)
  802b64:	1441f516 	blt	r2,r17,80333c <___vfprintf_internal_r+0xc70>
  802b68:	ad400204 	addi	r21,r21,8
  802b6c:	00000206 	br	802b78 <___vfprintf_internal_r+0x4ac>
  802b70:	dc800e17 	ldw	r18,56(sp)
  802b74:	dc400d17 	ldw	r17,52(sp)
  802b78:	d8800407 	ldb	r2,16(sp)
  802b7c:	10000b26 	beq	r2,zero,802bac <___vfprintf_internal_r+0x4e0>
  802b80:	00800044 	movi	r2,1
  802b84:	94800044 	addi	r18,r18,1
  802b88:	8c400044 	addi	r17,r17,1
  802b8c:	a8800115 	stw	r2,4(r21)
  802b90:	d8c00404 	addi	r3,sp,16
  802b94:	008001c4 	movi	r2,7
  802b98:	a8c00015 	stw	r3,0(r21)
  802b9c:	dc800e15 	stw	r18,56(sp)
  802ba0:	dc400d15 	stw	r17,52(sp)
  802ba4:	1441da16 	blt	r2,r17,803310 <___vfprintf_internal_r+0xc44>
  802ba8:	ad400204 	addi	r21,r21,8
  802bac:	d9015017 	ldw	r4,1344(sp)
  802bb0:	20000b1e 	bne	r4,zero,802be0 <___vfprintf_internal_r+0x514>
  802bb4:	d8800444 	addi	r2,sp,17
  802bb8:	94800084 	addi	r18,r18,2
  802bbc:	8c400044 	addi	r17,r17,1
  802bc0:	a8800015 	stw	r2,0(r21)
  802bc4:	00c00084 	movi	r3,2
  802bc8:	008001c4 	movi	r2,7
  802bcc:	a8c00115 	stw	r3,4(r21)
  802bd0:	dc800e15 	stw	r18,56(sp)
  802bd4:	dc400d15 	stw	r17,52(sp)
  802bd8:	1441c216 	blt	r2,r17,8032e4 <___vfprintf_internal_r+0xc18>
  802bdc:	ad400204 	addi	r21,r21,8
  802be0:	d9414e17 	ldw	r5,1336(sp)
  802be4:	00802004 	movi	r2,128
  802be8:	2880b126 	beq	r5,r2,802eb0 <___vfprintf_internal_r+0x7e4>
  802bec:	d8c14617 	ldw	r3,1304(sp)
  802bf0:	19e1c83a 	sub	r16,r3,r7
  802bf4:	0400260e 	bge	zero,r16,802c90 <___vfprintf_internal_r+0x5c4>
  802bf8:	00800404 	movi	r2,16
  802bfc:	1403cf0e 	bge	r2,r16,803b3c <___vfprintf_internal_r+0x1470>
  802c00:	1027883a 	mov	r19,r2
  802c04:	07002074 	movhi	fp,129
  802c08:	e735e384 	addi	fp,fp,-10354
  802c0c:	050001c4 	movi	r20,7
  802c10:	00000306 	br	802c20 <___vfprintf_internal_r+0x554>
  802c14:	843ffc04 	addi	r16,r16,-16
  802c18:	ad400204 	addi	r21,r21,8
  802c1c:	9c00130e 	bge	r19,r16,802c6c <___vfprintf_internal_r+0x5a0>
  802c20:	94800404 	addi	r18,r18,16
  802c24:	8c400044 	addi	r17,r17,1
  802c28:	af000015 	stw	fp,0(r21)
  802c2c:	acc00115 	stw	r19,4(r21)
  802c30:	dc800e15 	stw	r18,56(sp)
  802c34:	dc400d15 	stw	r17,52(sp)
  802c38:	a47ff60e 	bge	r20,r17,802c14 <___vfprintf_internal_r+0x548>
  802c3c:	d9014f17 	ldw	r4,1340(sp)
  802c40:	b00b883a 	mov	r5,r22
  802c44:	d9800c04 	addi	r6,sp,48
  802c48:	d9c15115 	stw	r7,1348(sp)
  802c4c:	08026740 	call	802674 <__sprint_r>
  802c50:	d9c15117 	ldw	r7,1348(sp)
  802c54:	1000551e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  802c58:	843ffc04 	addi	r16,r16,-16
  802c5c:	dc800e17 	ldw	r18,56(sp)
  802c60:	dc400d17 	ldw	r17,52(sp)
  802c64:	dd401904 	addi	r21,sp,100
  802c68:	9c3fed16 	blt	r19,r16,802c20 <___vfprintf_internal_r+0x554>
  802c6c:	9425883a 	add	r18,r18,r16
  802c70:	8c400044 	addi	r17,r17,1
  802c74:	008001c4 	movi	r2,7
  802c78:	af000015 	stw	fp,0(r21)
  802c7c:	ac000115 	stw	r16,4(r21)
  802c80:	dc800e15 	stw	r18,56(sp)
  802c84:	dc400d15 	stw	r17,52(sp)
  802c88:	14418216 	blt	r2,r17,803294 <___vfprintf_internal_r+0xbc8>
  802c8c:	ad400204 	addi	r21,r21,8
  802c90:	d9014c17 	ldw	r4,1328(sp)
  802c94:	2080400c 	andi	r2,r4,256
  802c98:	10004a1e 	bne	r2,zero,802dc4 <___vfprintf_internal_r+0x6f8>
  802c9c:	d9414117 	ldw	r5,1284(sp)
  802ca0:	91e5883a 	add	r18,r18,r7
  802ca4:	8c400044 	addi	r17,r17,1
  802ca8:	008001c4 	movi	r2,7
  802cac:	a9400015 	stw	r5,0(r21)
  802cb0:	a9c00115 	stw	r7,4(r21)
  802cb4:	dc800e15 	stw	r18,56(sp)
  802cb8:	dc400d15 	stw	r17,52(sp)
  802cbc:	14416716 	blt	r2,r17,80325c <___vfprintf_internal_r+0xb90>
  802cc0:	a8c00204 	addi	r3,r21,8
  802cc4:	d9814c17 	ldw	r6,1328(sp)
  802cc8:	3080010c 	andi	r2,r6,4
  802ccc:	10002826 	beq	r2,zero,802d70 <___vfprintf_internal_r+0x6a4>
  802cd0:	d8814a17 	ldw	r2,1320(sp)
  802cd4:	d9014517 	ldw	r4,1300(sp)
  802cd8:	1121c83a 	sub	r16,r2,r4
  802cdc:	0400240e 	bge	zero,r16,802d70 <___vfprintf_internal_r+0x6a4>
  802ce0:	00800404 	movi	r2,16
  802ce4:	1404550e 	bge	r2,r16,803e3c <___vfprintf_internal_r+0x1770>
  802ce8:	dc400d17 	ldw	r17,52(sp)
  802cec:	1027883a 	mov	r19,r2
  802cf0:	07002074 	movhi	fp,129
  802cf4:	e735e784 	addi	fp,fp,-10338
  802cf8:	050001c4 	movi	r20,7
  802cfc:	00000306 	br	802d0c <___vfprintf_internal_r+0x640>
  802d00:	843ffc04 	addi	r16,r16,-16
  802d04:	18c00204 	addi	r3,r3,8
  802d08:	9c00110e 	bge	r19,r16,802d50 <___vfprintf_internal_r+0x684>
  802d0c:	94800404 	addi	r18,r18,16
  802d10:	8c400044 	addi	r17,r17,1
  802d14:	1f000015 	stw	fp,0(r3)
  802d18:	1cc00115 	stw	r19,4(r3)
  802d1c:	dc800e15 	stw	r18,56(sp)
  802d20:	dc400d15 	stw	r17,52(sp)
  802d24:	a47ff60e 	bge	r20,r17,802d00 <___vfprintf_internal_r+0x634>
  802d28:	d9014f17 	ldw	r4,1340(sp)
  802d2c:	b00b883a 	mov	r5,r22
  802d30:	d9800c04 	addi	r6,sp,48
  802d34:	08026740 	call	802674 <__sprint_r>
  802d38:	10001c1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  802d3c:	843ffc04 	addi	r16,r16,-16
  802d40:	dc800e17 	ldw	r18,56(sp)
  802d44:	dc400d17 	ldw	r17,52(sp)
  802d48:	d8c01904 	addi	r3,sp,100
  802d4c:	9c3fef16 	blt	r19,r16,802d0c <___vfprintf_internal_r+0x640>
  802d50:	9425883a 	add	r18,r18,r16
  802d54:	8c400044 	addi	r17,r17,1
  802d58:	008001c4 	movi	r2,7
  802d5c:	1f000015 	stw	fp,0(r3)
  802d60:	1c000115 	stw	r16,4(r3)
  802d64:	dc800e15 	stw	r18,56(sp)
  802d68:	dc400d15 	stw	r17,52(sp)
  802d6c:	1440cb16 	blt	r2,r17,80309c <___vfprintf_internal_r+0x9d0>
  802d70:	d8814a17 	ldw	r2,1320(sp)
  802d74:	d9414517 	ldw	r5,1300(sp)
  802d78:	1140010e 	bge	r2,r5,802d80 <___vfprintf_internal_r+0x6b4>
  802d7c:	2805883a 	mov	r2,r5
  802d80:	d9814b17 	ldw	r6,1324(sp)
  802d84:	308d883a 	add	r6,r6,r2
  802d88:	d9814b15 	stw	r6,1324(sp)
  802d8c:	90013b1e 	bne	r18,zero,80327c <___vfprintf_internal_r+0xbb0>
  802d90:	d9c14017 	ldw	r7,1280(sp)
  802d94:	dd401904 	addi	r21,sp,100
  802d98:	d8000d15 	stw	zero,52(sp)
  802d9c:	003ea706 	br	80283c <___vfprintf_internal_r+0x170>
  802da0:	d8800e17 	ldw	r2,56(sp)
  802da4:	1005451e 	bne	r2,zero,8042bc <___vfprintf_internal_r+0x1bf0>
  802da8:	d8000d15 	stw	zero,52(sp)
  802dac:	b080030b 	ldhu	r2,12(r22)
  802db0:	1080100c 	andi	r2,r2,64
  802db4:	103e8726 	beq	r2,zero,8027d4 <___vfprintf_internal_r+0x108>
  802db8:	00bfffc4 	movi	r2,-1
  802dbc:	d8814b15 	stw	r2,1324(sp)
  802dc0:	003e8406 	br	8027d4 <___vfprintf_internal_r+0x108>
  802dc4:	d9814d17 	ldw	r6,1332(sp)
  802dc8:	00801944 	movi	r2,101
  802dcc:	11806e16 	blt	r2,r6,802f88 <___vfprintf_internal_r+0x8bc>
  802dd0:	d9414717 	ldw	r5,1308(sp)
  802dd4:	00c00044 	movi	r3,1
  802dd8:	1943490e 	bge	r3,r5,803b00 <___vfprintf_internal_r+0x1434>
  802ddc:	d8814117 	ldw	r2,1284(sp)
  802de0:	94800044 	addi	r18,r18,1
  802de4:	8c400044 	addi	r17,r17,1
  802de8:	a8800015 	stw	r2,0(r21)
  802dec:	008001c4 	movi	r2,7
  802df0:	a8c00115 	stw	r3,4(r21)
  802df4:	dc800e15 	stw	r18,56(sp)
  802df8:	dc400d15 	stw	r17,52(sp)
  802dfc:	1441ca16 	blt	r2,r17,803528 <___vfprintf_internal_r+0xe5c>
  802e00:	a8c00204 	addi	r3,r21,8
  802e04:	d9014917 	ldw	r4,1316(sp)
  802e08:	00800044 	movi	r2,1
  802e0c:	94800044 	addi	r18,r18,1
  802e10:	8c400044 	addi	r17,r17,1
  802e14:	18800115 	stw	r2,4(r3)
  802e18:	008001c4 	movi	r2,7
  802e1c:	19000015 	stw	r4,0(r3)
  802e20:	dc800e15 	stw	r18,56(sp)
  802e24:	dc400d15 	stw	r17,52(sp)
  802e28:	1441b616 	blt	r2,r17,803504 <___vfprintf_internal_r+0xe38>
  802e2c:	1cc00204 	addi	r19,r3,8
  802e30:	d9014217 	ldw	r4,1288(sp)
  802e34:	d9414317 	ldw	r5,1292(sp)
  802e38:	000d883a 	mov	r6,zero
  802e3c:	000f883a 	mov	r7,zero
  802e40:	080a77c0 	call	80a77c <__nedf2>
  802e44:	10017426 	beq	r2,zero,803418 <___vfprintf_internal_r+0xd4c>
  802e48:	d9414717 	ldw	r5,1308(sp)
  802e4c:	d9814117 	ldw	r6,1284(sp)
  802e50:	8c400044 	addi	r17,r17,1
  802e54:	2c85883a 	add	r2,r5,r18
  802e58:	14bfffc4 	addi	r18,r2,-1
  802e5c:	28bfffc4 	addi	r2,r5,-1
  802e60:	30c00044 	addi	r3,r6,1
  802e64:	98800115 	stw	r2,4(r19)
  802e68:	008001c4 	movi	r2,7
  802e6c:	98c00015 	stw	r3,0(r19)
  802e70:	dc800e15 	stw	r18,56(sp)
  802e74:	dc400d15 	stw	r17,52(sp)
  802e78:	14418e16 	blt	r2,r17,8034b4 <___vfprintf_internal_r+0xde8>
  802e7c:	9cc00204 	addi	r19,r19,8
  802e80:	d9414817 	ldw	r5,1312(sp)
  802e84:	d8800804 	addi	r2,sp,32
  802e88:	8c400044 	addi	r17,r17,1
  802e8c:	9165883a 	add	r18,r18,r5
  802e90:	98800015 	stw	r2,0(r19)
  802e94:	008001c4 	movi	r2,7
  802e98:	99400115 	stw	r5,4(r19)
  802e9c:	dc800e15 	stw	r18,56(sp)
  802ea0:	dc400d15 	stw	r17,52(sp)
  802ea4:	1440ed16 	blt	r2,r17,80325c <___vfprintf_internal_r+0xb90>
  802ea8:	98c00204 	addi	r3,r19,8
  802eac:	003f8506 	br	802cc4 <___vfprintf_internal_r+0x5f8>
  802eb0:	d9814a17 	ldw	r6,1320(sp)
  802eb4:	d8814517 	ldw	r2,1300(sp)
  802eb8:	30a1c83a 	sub	r16,r6,r2
  802ebc:	043f4b0e 	bge	zero,r16,802bec <___vfprintf_internal_r+0x520>
  802ec0:	00800404 	movi	r2,16
  802ec4:	14043a0e 	bge	r2,r16,803fb0 <___vfprintf_internal_r+0x18e4>
  802ec8:	1027883a 	mov	r19,r2
  802ecc:	07002074 	movhi	fp,129
  802ed0:	e735e384 	addi	fp,fp,-10354
  802ed4:	050001c4 	movi	r20,7
  802ed8:	00000306 	br	802ee8 <___vfprintf_internal_r+0x81c>
  802edc:	843ffc04 	addi	r16,r16,-16
  802ee0:	ad400204 	addi	r21,r21,8
  802ee4:	9c00130e 	bge	r19,r16,802f34 <___vfprintf_internal_r+0x868>
  802ee8:	94800404 	addi	r18,r18,16
  802eec:	8c400044 	addi	r17,r17,1
  802ef0:	af000015 	stw	fp,0(r21)
  802ef4:	acc00115 	stw	r19,4(r21)
  802ef8:	dc800e15 	stw	r18,56(sp)
  802efc:	dc400d15 	stw	r17,52(sp)
  802f00:	a47ff60e 	bge	r20,r17,802edc <___vfprintf_internal_r+0x810>
  802f04:	d9014f17 	ldw	r4,1340(sp)
  802f08:	b00b883a 	mov	r5,r22
  802f0c:	d9800c04 	addi	r6,sp,48
  802f10:	d9c15115 	stw	r7,1348(sp)
  802f14:	08026740 	call	802674 <__sprint_r>
  802f18:	d9c15117 	ldw	r7,1348(sp)
  802f1c:	103fa31e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  802f20:	843ffc04 	addi	r16,r16,-16
  802f24:	dc800e17 	ldw	r18,56(sp)
  802f28:	dc400d17 	ldw	r17,52(sp)
  802f2c:	dd401904 	addi	r21,sp,100
  802f30:	9c3fed16 	blt	r19,r16,802ee8 <___vfprintf_internal_r+0x81c>
  802f34:	9425883a 	add	r18,r18,r16
  802f38:	8c400044 	addi	r17,r17,1
  802f3c:	008001c4 	movi	r2,7
  802f40:	af000015 	stw	fp,0(r21)
  802f44:	ac000115 	stw	r16,4(r21)
  802f48:	dc800e15 	stw	r18,56(sp)
  802f4c:	dc400d15 	stw	r17,52(sp)
  802f50:	14416116 	blt	r2,r17,8034d8 <___vfprintf_internal_r+0xe0c>
  802f54:	ad400204 	addi	r21,r21,8
  802f58:	003f2406 	br	802bec <___vfprintf_internal_r+0x520>
  802f5c:	d9014f17 	ldw	r4,1340(sp)
  802f60:	08062cc0 	call	8062cc <__sinit>
  802f64:	d9c15117 	ldw	r7,1348(sp)
  802f68:	003def06 	br	802728 <___vfprintf_internal_r+0x5c>
  802f6c:	d9014f17 	ldw	r4,1340(sp)
  802f70:	b00b883a 	mov	r5,r22
  802f74:	d9c15115 	stw	r7,1348(sp)
  802f78:	08047000 	call	804700 <__swsetup_r>
  802f7c:	d9c15117 	ldw	r7,1348(sp)
  802f80:	103dee26 	beq	r2,zero,80273c <___vfprintf_internal_r+0x70>
  802f84:	003f8c06 	br	802db8 <___vfprintf_internal_r+0x6ec>
  802f88:	d9014217 	ldw	r4,1288(sp)
  802f8c:	d9414317 	ldw	r5,1292(sp)
  802f90:	000d883a 	mov	r6,zero
  802f94:	000f883a 	mov	r7,zero
  802f98:	080a6f40 	call	80a6f4 <__eqdf2>
  802f9c:	1000f21e 	bne	r2,zero,803368 <___vfprintf_internal_r+0xc9c>
  802fa0:	00802074 	movhi	r2,129
  802fa4:	10b5e304 	addi	r2,r2,-10356
  802fa8:	94800044 	addi	r18,r18,1
  802fac:	8c400044 	addi	r17,r17,1
  802fb0:	a8800015 	stw	r2,0(r21)
  802fb4:	00c00044 	movi	r3,1
  802fb8:	008001c4 	movi	r2,7
  802fbc:	a8c00115 	stw	r3,4(r21)
  802fc0:	dc800e15 	stw	r18,56(sp)
  802fc4:	dc400d15 	stw	r17,52(sp)
  802fc8:	14430016 	blt	r2,r17,803bcc <___vfprintf_internal_r+0x1500>
  802fcc:	a8c00204 	addi	r3,r21,8
  802fd0:	d8800517 	ldw	r2,20(sp)
  802fd4:	d9014717 	ldw	r4,1308(sp)
  802fd8:	11015c0e 	bge	r2,r4,80354c <___vfprintf_internal_r+0xe80>
  802fdc:	dc400d17 	ldw	r17,52(sp)
  802fe0:	d9814917 	ldw	r6,1316(sp)
  802fe4:	00800044 	movi	r2,1
  802fe8:	94800044 	addi	r18,r18,1
  802fec:	8c400044 	addi	r17,r17,1
  802ff0:	18800115 	stw	r2,4(r3)
  802ff4:	008001c4 	movi	r2,7
  802ff8:	19800015 	stw	r6,0(r3)
  802ffc:	dc800e15 	stw	r18,56(sp)
  803000:	dc400d15 	stw	r17,52(sp)
  803004:	14431616 	blt	r2,r17,803c60 <___vfprintf_internal_r+0x1594>
  803008:	18c00204 	addi	r3,r3,8
  80300c:	d8814717 	ldw	r2,1308(sp)
  803010:	143fffc4 	addi	r16,r2,-1
  803014:	043f2b0e 	bge	zero,r16,802cc4 <___vfprintf_internal_r+0x5f8>
  803018:	00800404 	movi	r2,16
  80301c:	1402a80e 	bge	r2,r16,803ac0 <___vfprintf_internal_r+0x13f4>
  803020:	dc400d17 	ldw	r17,52(sp)
  803024:	1027883a 	mov	r19,r2
  803028:	07002074 	movhi	fp,129
  80302c:	e735e384 	addi	fp,fp,-10354
  803030:	050001c4 	movi	r20,7
  803034:	00000306 	br	803044 <___vfprintf_internal_r+0x978>
  803038:	18c00204 	addi	r3,r3,8
  80303c:	843ffc04 	addi	r16,r16,-16
  803040:	9c02a20e 	bge	r19,r16,803acc <___vfprintf_internal_r+0x1400>
  803044:	94800404 	addi	r18,r18,16
  803048:	8c400044 	addi	r17,r17,1
  80304c:	1f000015 	stw	fp,0(r3)
  803050:	1cc00115 	stw	r19,4(r3)
  803054:	dc800e15 	stw	r18,56(sp)
  803058:	dc400d15 	stw	r17,52(sp)
  80305c:	a47ff60e 	bge	r20,r17,803038 <___vfprintf_internal_r+0x96c>
  803060:	d9014f17 	ldw	r4,1340(sp)
  803064:	b00b883a 	mov	r5,r22
  803068:	d9800c04 	addi	r6,sp,48
  80306c:	08026740 	call	802674 <__sprint_r>
  803070:	103f4e1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803074:	dc800e17 	ldw	r18,56(sp)
  803078:	dc400d17 	ldw	r17,52(sp)
  80307c:	d8c01904 	addi	r3,sp,100
  803080:	003fee06 	br	80303c <___vfprintf_internal_r+0x970>
  803084:	d8802c0b 	ldhu	r2,176(sp)
  803088:	00ffffc4 	movi	r3,-1
  80308c:	d8c14b15 	stw	r3,1324(sp)
  803090:	1080100c 	andi	r2,r2,64
  803094:	103dcc1e 	bne	r2,zero,8027c8 <___vfprintf_internal_r+0xfc>
  803098:	003dce06 	br	8027d4 <___vfprintf_internal_r+0x108>
  80309c:	d9014f17 	ldw	r4,1340(sp)
  8030a0:	b00b883a 	mov	r5,r22
  8030a4:	d9800c04 	addi	r6,sp,48
  8030a8:	08026740 	call	802674 <__sprint_r>
  8030ac:	103f3f1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  8030b0:	dc800e17 	ldw	r18,56(sp)
  8030b4:	003f2e06 	br	802d70 <___vfprintf_internal_r+0x6a4>
  8030b8:	d9414c17 	ldw	r5,1328(sp)
  8030bc:	29400414 	ori	r5,r5,16
  8030c0:	d9414c15 	stw	r5,1328(sp)
  8030c4:	d9814c17 	ldw	r6,1328(sp)
  8030c8:	3080080c 	andi	r2,r6,32
  8030cc:	10014f1e 	bne	r2,zero,80360c <___vfprintf_internal_r+0xf40>
  8030d0:	d8c14c17 	ldw	r3,1328(sp)
  8030d4:	1880040c 	andi	r2,r3,16
  8030d8:	1002f01e 	bne	r2,zero,803c9c <___vfprintf_internal_r+0x15d0>
  8030dc:	d9014c17 	ldw	r4,1328(sp)
  8030e0:	2080100c 	andi	r2,r4,64
  8030e4:	1002ed26 	beq	r2,zero,803c9c <___vfprintf_internal_r+0x15d0>
  8030e8:	3880000f 	ldh	r2,0(r7)
  8030ec:	39c00104 	addi	r7,r7,4
  8030f0:	d9c14015 	stw	r7,1280(sp)
  8030f4:	1023d7fa 	srai	r17,r2,31
  8030f8:	1021883a 	mov	r16,r2
  8030fc:	88037816 	blt	r17,zero,803ee0 <___vfprintf_internal_r+0x1814>
  803100:	01000044 	movi	r4,1
  803104:	98000416 	blt	r19,zero,803118 <___vfprintf_internal_r+0xa4c>
  803108:	d8c14c17 	ldw	r3,1328(sp)
  80310c:	00bfdfc4 	movi	r2,-129
  803110:	1886703a 	and	r3,r3,r2
  803114:	d8c14c15 	stw	r3,1328(sp)
  803118:	8444b03a 	or	r2,r16,r17
  80311c:	10022c1e 	bne	r2,zero,8039d0 <___vfprintf_internal_r+0x1304>
  803120:	98022b1e 	bne	r19,zero,8039d0 <___vfprintf_internal_r+0x1304>
  803124:	20803fcc 	andi	r2,r4,255
  803128:	1002a126 	beq	r2,zero,803bb0 <___vfprintf_internal_r+0x14e4>
  80312c:	d8c01904 	addi	r3,sp,100
  803130:	dd000f04 	addi	r20,sp,60
  803134:	d8c14115 	stw	r3,1284(sp)
  803138:	d8c14117 	ldw	r3,1284(sp)
  80313c:	dcc14515 	stw	r19,1300(sp)
  803140:	a0c5c83a 	sub	r2,r20,r3
  803144:	11c00a04 	addi	r7,r2,40
  803148:	99c0010e 	bge	r19,r7,803150 <___vfprintf_internal_r+0xa84>
  80314c:	d9c14515 	stw	r7,1300(sp)
  803150:	dcc14615 	stw	r19,1304(sp)
  803154:	d8800407 	ldb	r2,16(sp)
  803158:	103e4c26 	beq	r2,zero,802a8c <___vfprintf_internal_r+0x3c0>
  80315c:	d8814517 	ldw	r2,1300(sp)
  803160:	10800044 	addi	r2,r2,1
  803164:	d8814515 	stw	r2,1300(sp)
  803168:	003e4806 	br	802a8c <___vfprintf_internal_r+0x3c0>
  80316c:	d9814c17 	ldw	r6,1328(sp)
  803170:	31800414 	ori	r6,r6,16
  803174:	d9814c15 	stw	r6,1328(sp)
  803178:	d8c14c17 	ldw	r3,1328(sp)
  80317c:	1880080c 	andi	r2,r3,32
  803180:	1001271e 	bne	r2,zero,803620 <___vfprintf_internal_r+0xf54>
  803184:	d9414c17 	ldw	r5,1328(sp)
  803188:	2880040c 	andi	r2,r5,16
  80318c:	1002bc1e 	bne	r2,zero,803c80 <___vfprintf_internal_r+0x15b4>
  803190:	d9814c17 	ldw	r6,1328(sp)
  803194:	3080100c 	andi	r2,r6,64
  803198:	1002b926 	beq	r2,zero,803c80 <___vfprintf_internal_r+0x15b4>
  80319c:	3c00000b 	ldhu	r16,0(r7)
  8031a0:	0009883a 	mov	r4,zero
  8031a4:	39c00104 	addi	r7,r7,4
  8031a8:	0023883a 	mov	r17,zero
  8031ac:	d9c14015 	stw	r7,1280(sp)
  8031b0:	d8000405 	stb	zero,16(sp)
  8031b4:	003fd306 	br	803104 <___vfprintf_internal_r+0xa38>
  8031b8:	d9014c17 	ldw	r4,1328(sp)
  8031bc:	21000414 	ori	r4,r4,16
  8031c0:	d9014c15 	stw	r4,1328(sp)
  8031c4:	d9414c17 	ldw	r5,1328(sp)
  8031c8:	2880080c 	andi	r2,r5,32
  8031cc:	1001081e 	bne	r2,zero,8035f0 <___vfprintf_internal_r+0xf24>
  8031d0:	d8c14c17 	ldw	r3,1328(sp)
  8031d4:	1880040c 	andi	r2,r3,16
  8031d8:	1002b61e 	bne	r2,zero,803cb4 <___vfprintf_internal_r+0x15e8>
  8031dc:	d9014c17 	ldw	r4,1328(sp)
  8031e0:	2080100c 	andi	r2,r4,64
  8031e4:	1002b326 	beq	r2,zero,803cb4 <___vfprintf_internal_r+0x15e8>
  8031e8:	3c00000b 	ldhu	r16,0(r7)
  8031ec:	01000044 	movi	r4,1
  8031f0:	39c00104 	addi	r7,r7,4
  8031f4:	0023883a 	mov	r17,zero
  8031f8:	d9c14015 	stw	r7,1280(sp)
  8031fc:	d8000405 	stb	zero,16(sp)
  803200:	003fc006 	br	803104 <___vfprintf_internal_r+0xa38>
  803204:	d9014f17 	ldw	r4,1340(sp)
  803208:	b00b883a 	mov	r5,r22
  80320c:	d9800c04 	addi	r6,sp,48
  803210:	08026740 	call	802674 <__sprint_r>
  803214:	103ee51e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803218:	dc800e17 	ldw	r18,56(sp)
  80321c:	d8c01904 	addi	r3,sp,100
  803220:	d9814c17 	ldw	r6,1328(sp)
  803224:	3080004c 	andi	r2,r6,1
  803228:	1005003a 	cmpeq	r2,r2,zero
  80322c:	103ea51e 	bne	r2,zero,802cc4 <___vfprintf_internal_r+0x5f8>
  803230:	00800044 	movi	r2,1
  803234:	dc400d17 	ldw	r17,52(sp)
  803238:	18800115 	stw	r2,4(r3)
  80323c:	d8814917 	ldw	r2,1316(sp)
  803240:	94800044 	addi	r18,r18,1
  803244:	8c400044 	addi	r17,r17,1
  803248:	18800015 	stw	r2,0(r3)
  80324c:	008001c4 	movi	r2,7
  803250:	dc800e15 	stw	r18,56(sp)
  803254:	dc400d15 	stw	r17,52(sp)
  803258:	1442240e 	bge	r2,r17,803aec <___vfprintf_internal_r+0x1420>
  80325c:	d9014f17 	ldw	r4,1340(sp)
  803260:	b00b883a 	mov	r5,r22
  803264:	d9800c04 	addi	r6,sp,48
  803268:	08026740 	call	802674 <__sprint_r>
  80326c:	103ecf1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803270:	dc800e17 	ldw	r18,56(sp)
  803274:	d8c01904 	addi	r3,sp,100
  803278:	003e9206 	br	802cc4 <___vfprintf_internal_r+0x5f8>
  80327c:	d9014f17 	ldw	r4,1340(sp)
  803280:	b00b883a 	mov	r5,r22
  803284:	d9800c04 	addi	r6,sp,48
  803288:	08026740 	call	802674 <__sprint_r>
  80328c:	103ec026 	beq	r2,zero,802d90 <___vfprintf_internal_r+0x6c4>
  803290:	003ec606 	br	802dac <___vfprintf_internal_r+0x6e0>
  803294:	d9014f17 	ldw	r4,1340(sp)
  803298:	b00b883a 	mov	r5,r22
  80329c:	d9800c04 	addi	r6,sp,48
  8032a0:	d9c15115 	stw	r7,1348(sp)
  8032a4:	08026740 	call	802674 <__sprint_r>
  8032a8:	d9c15117 	ldw	r7,1348(sp)
  8032ac:	103ebf1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  8032b0:	dc800e17 	ldw	r18,56(sp)
  8032b4:	dc400d17 	ldw	r17,52(sp)
  8032b8:	dd401904 	addi	r21,sp,100
  8032bc:	003e7406 	br	802c90 <___vfprintf_internal_r+0x5c4>
  8032c0:	d9014f17 	ldw	r4,1340(sp)
  8032c4:	b00b883a 	mov	r5,r22
  8032c8:	d9800c04 	addi	r6,sp,48
  8032cc:	d9c15115 	stw	r7,1348(sp)
  8032d0:	08026740 	call	802674 <__sprint_r>
  8032d4:	d9c15117 	ldw	r7,1348(sp)
  8032d8:	103eb41e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  8032dc:	dd401904 	addi	r21,sp,100
  8032e0:	003d6d06 	br	802898 <___vfprintf_internal_r+0x1cc>
  8032e4:	d9014f17 	ldw	r4,1340(sp)
  8032e8:	b00b883a 	mov	r5,r22
  8032ec:	d9800c04 	addi	r6,sp,48
  8032f0:	d9c15115 	stw	r7,1348(sp)
  8032f4:	08026740 	call	802674 <__sprint_r>
  8032f8:	d9c15117 	ldw	r7,1348(sp)
  8032fc:	103eab1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803300:	dc800e17 	ldw	r18,56(sp)
  803304:	dc400d17 	ldw	r17,52(sp)
  803308:	dd401904 	addi	r21,sp,100
  80330c:	003e3406 	br	802be0 <___vfprintf_internal_r+0x514>
  803310:	d9014f17 	ldw	r4,1340(sp)
  803314:	b00b883a 	mov	r5,r22
  803318:	d9800c04 	addi	r6,sp,48
  80331c:	d9c15115 	stw	r7,1348(sp)
  803320:	08026740 	call	802674 <__sprint_r>
  803324:	d9c15117 	ldw	r7,1348(sp)
  803328:	103ea01e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  80332c:	dc800e17 	ldw	r18,56(sp)
  803330:	dc400d17 	ldw	r17,52(sp)
  803334:	dd401904 	addi	r21,sp,100
  803338:	003e1c06 	br	802bac <___vfprintf_internal_r+0x4e0>
  80333c:	d9014f17 	ldw	r4,1340(sp)
  803340:	b00b883a 	mov	r5,r22
  803344:	d9800c04 	addi	r6,sp,48
  803348:	d9c15115 	stw	r7,1348(sp)
  80334c:	08026740 	call	802674 <__sprint_r>
  803350:	d9c15117 	ldw	r7,1348(sp)
  803354:	103e951e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803358:	dc800e17 	ldw	r18,56(sp)
  80335c:	dc400d17 	ldw	r17,52(sp)
  803360:	dd401904 	addi	r21,sp,100
  803364:	003e0406 	br	802b78 <___vfprintf_internal_r+0x4ac>
  803368:	d9000517 	ldw	r4,20(sp)
  80336c:	0102580e 	bge	zero,r4,803cd0 <___vfprintf_internal_r+0x1604>
  803370:	d9814717 	ldw	r6,1308(sp)
  803374:	21807a16 	blt	r4,r6,803560 <___vfprintf_internal_r+0xe94>
  803378:	d8814117 	ldw	r2,1284(sp)
  80337c:	91a5883a 	add	r18,r18,r6
  803380:	8c400044 	addi	r17,r17,1
  803384:	a8800015 	stw	r2,0(r21)
  803388:	008001c4 	movi	r2,7
  80338c:	a9800115 	stw	r6,4(r21)
  803390:	dc800e15 	stw	r18,56(sp)
  803394:	dc400d15 	stw	r17,52(sp)
  803398:	1442fc16 	blt	r2,r17,803f8c <___vfprintf_internal_r+0x18c0>
  80339c:	a8c00204 	addi	r3,r21,8
  8033a0:	d9414717 	ldw	r5,1308(sp)
  8033a4:	2161c83a 	sub	r16,r4,r5
  8033a8:	043f9d0e 	bge	zero,r16,803220 <___vfprintf_internal_r+0xb54>
  8033ac:	00800404 	movi	r2,16
  8033b0:	1402190e 	bge	r2,r16,803c18 <___vfprintf_internal_r+0x154c>
  8033b4:	dc400d17 	ldw	r17,52(sp)
  8033b8:	1027883a 	mov	r19,r2
  8033bc:	07002074 	movhi	fp,129
  8033c0:	e735e384 	addi	fp,fp,-10354
  8033c4:	050001c4 	movi	r20,7
  8033c8:	00000306 	br	8033d8 <___vfprintf_internal_r+0xd0c>
  8033cc:	18c00204 	addi	r3,r3,8
  8033d0:	843ffc04 	addi	r16,r16,-16
  8033d4:	9c02130e 	bge	r19,r16,803c24 <___vfprintf_internal_r+0x1558>
  8033d8:	94800404 	addi	r18,r18,16
  8033dc:	8c400044 	addi	r17,r17,1
  8033e0:	1f000015 	stw	fp,0(r3)
  8033e4:	1cc00115 	stw	r19,4(r3)
  8033e8:	dc800e15 	stw	r18,56(sp)
  8033ec:	dc400d15 	stw	r17,52(sp)
  8033f0:	a47ff60e 	bge	r20,r17,8033cc <___vfprintf_internal_r+0xd00>
  8033f4:	d9014f17 	ldw	r4,1340(sp)
  8033f8:	b00b883a 	mov	r5,r22
  8033fc:	d9800c04 	addi	r6,sp,48
  803400:	08026740 	call	802674 <__sprint_r>
  803404:	103e691e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803408:	dc800e17 	ldw	r18,56(sp)
  80340c:	dc400d17 	ldw	r17,52(sp)
  803410:	d8c01904 	addi	r3,sp,100
  803414:	003fee06 	br	8033d0 <___vfprintf_internal_r+0xd04>
  803418:	d8814717 	ldw	r2,1308(sp)
  80341c:	143fffc4 	addi	r16,r2,-1
  803420:	043e970e 	bge	zero,r16,802e80 <___vfprintf_internal_r+0x7b4>
  803424:	00800404 	movi	r2,16
  803428:	1400180e 	bge	r2,r16,80348c <___vfprintf_internal_r+0xdc0>
  80342c:	1029883a 	mov	r20,r2
  803430:	07002074 	movhi	fp,129
  803434:	e735e384 	addi	fp,fp,-10354
  803438:	054001c4 	movi	r21,7
  80343c:	00000306 	br	80344c <___vfprintf_internal_r+0xd80>
  803440:	9cc00204 	addi	r19,r19,8
  803444:	843ffc04 	addi	r16,r16,-16
  803448:	a400120e 	bge	r20,r16,803494 <___vfprintf_internal_r+0xdc8>
  80344c:	94800404 	addi	r18,r18,16
  803450:	8c400044 	addi	r17,r17,1
  803454:	9f000015 	stw	fp,0(r19)
  803458:	9d000115 	stw	r20,4(r19)
  80345c:	dc800e15 	stw	r18,56(sp)
  803460:	dc400d15 	stw	r17,52(sp)
  803464:	ac7ff60e 	bge	r21,r17,803440 <___vfprintf_internal_r+0xd74>
  803468:	d9014f17 	ldw	r4,1340(sp)
  80346c:	b00b883a 	mov	r5,r22
  803470:	d9800c04 	addi	r6,sp,48
  803474:	08026740 	call	802674 <__sprint_r>
  803478:	103e4c1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  80347c:	dc800e17 	ldw	r18,56(sp)
  803480:	dc400d17 	ldw	r17,52(sp)
  803484:	dcc01904 	addi	r19,sp,100
  803488:	003fee06 	br	803444 <___vfprintf_internal_r+0xd78>
  80348c:	07002074 	movhi	fp,129
  803490:	e735e384 	addi	fp,fp,-10354
  803494:	9425883a 	add	r18,r18,r16
  803498:	8c400044 	addi	r17,r17,1
  80349c:	008001c4 	movi	r2,7
  8034a0:	9f000015 	stw	fp,0(r19)
  8034a4:	9c000115 	stw	r16,4(r19)
  8034a8:	dc800e15 	stw	r18,56(sp)
  8034ac:	dc400d15 	stw	r17,52(sp)
  8034b0:	147e720e 	bge	r2,r17,802e7c <___vfprintf_internal_r+0x7b0>
  8034b4:	d9014f17 	ldw	r4,1340(sp)
  8034b8:	b00b883a 	mov	r5,r22
  8034bc:	d9800c04 	addi	r6,sp,48
  8034c0:	08026740 	call	802674 <__sprint_r>
  8034c4:	103e391e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  8034c8:	dc800e17 	ldw	r18,56(sp)
  8034cc:	dc400d17 	ldw	r17,52(sp)
  8034d0:	dcc01904 	addi	r19,sp,100
  8034d4:	003e6a06 	br	802e80 <___vfprintf_internal_r+0x7b4>
  8034d8:	d9014f17 	ldw	r4,1340(sp)
  8034dc:	b00b883a 	mov	r5,r22
  8034e0:	d9800c04 	addi	r6,sp,48
  8034e4:	d9c15115 	stw	r7,1348(sp)
  8034e8:	08026740 	call	802674 <__sprint_r>
  8034ec:	d9c15117 	ldw	r7,1348(sp)
  8034f0:	103e2e1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  8034f4:	dc800e17 	ldw	r18,56(sp)
  8034f8:	dc400d17 	ldw	r17,52(sp)
  8034fc:	dd401904 	addi	r21,sp,100
  803500:	003dba06 	br	802bec <___vfprintf_internal_r+0x520>
  803504:	d9014f17 	ldw	r4,1340(sp)
  803508:	b00b883a 	mov	r5,r22
  80350c:	d9800c04 	addi	r6,sp,48
  803510:	08026740 	call	802674 <__sprint_r>
  803514:	103e251e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803518:	dc800e17 	ldw	r18,56(sp)
  80351c:	dc400d17 	ldw	r17,52(sp)
  803520:	dcc01904 	addi	r19,sp,100
  803524:	003e4206 	br	802e30 <___vfprintf_internal_r+0x764>
  803528:	d9014f17 	ldw	r4,1340(sp)
  80352c:	b00b883a 	mov	r5,r22
  803530:	d9800c04 	addi	r6,sp,48
  803534:	08026740 	call	802674 <__sprint_r>
  803538:	103e1c1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  80353c:	dc800e17 	ldw	r18,56(sp)
  803540:	dc400d17 	ldw	r17,52(sp)
  803544:	d8c01904 	addi	r3,sp,100
  803548:	003e2e06 	br	802e04 <___vfprintf_internal_r+0x738>
  80354c:	d9414c17 	ldw	r5,1328(sp)
  803550:	2880004c 	andi	r2,r5,1
  803554:	1005003a 	cmpeq	r2,r2,zero
  803558:	103dda1e 	bne	r2,zero,802cc4 <___vfprintf_internal_r+0x5f8>
  80355c:	003e9f06 	br	802fdc <___vfprintf_internal_r+0x910>
  803560:	d8c14117 	ldw	r3,1284(sp)
  803564:	9125883a 	add	r18,r18,r4
  803568:	8c400044 	addi	r17,r17,1
  80356c:	008001c4 	movi	r2,7
  803570:	a8c00015 	stw	r3,0(r21)
  803574:	a9000115 	stw	r4,4(r21)
  803578:	dc800e15 	stw	r18,56(sp)
  80357c:	dc400d15 	stw	r17,52(sp)
  803580:	14426c16 	blt	r2,r17,803f34 <___vfprintf_internal_r+0x1868>
  803584:	a8c00204 	addi	r3,r21,8
  803588:	d9414917 	ldw	r5,1316(sp)
  80358c:	00800044 	movi	r2,1
  803590:	94800044 	addi	r18,r18,1
  803594:	8c400044 	addi	r17,r17,1
  803598:	18800115 	stw	r2,4(r3)
  80359c:	008001c4 	movi	r2,7
  8035a0:	19400015 	stw	r5,0(r3)
  8035a4:	dc800e15 	stw	r18,56(sp)
  8035a8:	dc400d15 	stw	r17,52(sp)
  8035ac:	2021883a 	mov	r16,r4
  8035b0:	14425616 	blt	r2,r17,803f0c <___vfprintf_internal_r+0x1840>
  8035b4:	19400204 	addi	r5,r3,8
  8035b8:	d9814717 	ldw	r6,1308(sp)
  8035bc:	8c400044 	addi	r17,r17,1
  8035c0:	dc400d15 	stw	r17,52(sp)
  8035c4:	3107c83a 	sub	r3,r6,r4
  8035c8:	d9014117 	ldw	r4,1284(sp)
  8035cc:	90e5883a 	add	r18,r18,r3
  8035d0:	28c00115 	stw	r3,4(r5)
  8035d4:	8105883a 	add	r2,r16,r4
  8035d8:	28800015 	stw	r2,0(r5)
  8035dc:	008001c4 	movi	r2,7
  8035e0:	dc800e15 	stw	r18,56(sp)
  8035e4:	147f1d16 	blt	r2,r17,80325c <___vfprintf_internal_r+0xb90>
  8035e8:	28c00204 	addi	r3,r5,8
  8035ec:	003db506 	br	802cc4 <___vfprintf_internal_r+0x5f8>
  8035f0:	3c000017 	ldw	r16,0(r7)
  8035f4:	3c400117 	ldw	r17,4(r7)
  8035f8:	39800204 	addi	r6,r7,8
  8035fc:	01000044 	movi	r4,1
  803600:	d9814015 	stw	r6,1280(sp)
  803604:	d8000405 	stb	zero,16(sp)
  803608:	003ebe06 	br	803104 <___vfprintf_internal_r+0xa38>
  80360c:	3c000017 	ldw	r16,0(r7)
  803610:	3c400117 	ldw	r17,4(r7)
  803614:	38800204 	addi	r2,r7,8
  803618:	d8814015 	stw	r2,1280(sp)
  80361c:	003eb706 	br	8030fc <___vfprintf_internal_r+0xa30>
  803620:	3c000017 	ldw	r16,0(r7)
  803624:	3c400117 	ldw	r17,4(r7)
  803628:	39000204 	addi	r4,r7,8
  80362c:	d9014015 	stw	r4,1280(sp)
  803630:	0009883a 	mov	r4,zero
  803634:	d8000405 	stb	zero,16(sp)
  803638:	003eb206 	br	803104 <___vfprintf_internal_r+0xa38>
  80363c:	38c00017 	ldw	r3,0(r7)
  803640:	39c00104 	addi	r7,r7,4
  803644:	d8c14a15 	stw	r3,1320(sp)
  803648:	1800d70e 	bge	r3,zero,8039a8 <___vfprintf_internal_r+0x12dc>
  80364c:	00c7c83a 	sub	r3,zero,r3
  803650:	d8c14a15 	stw	r3,1320(sp)
  803654:	d9014c17 	ldw	r4,1328(sp)
  803658:	b8c00007 	ldb	r3,0(r23)
  80365c:	21000114 	ori	r4,r4,4
  803660:	d9014c15 	stw	r4,1328(sp)
  803664:	003c9806 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  803668:	d9814c17 	ldw	r6,1328(sp)
  80366c:	3080080c 	andi	r2,r6,32
  803670:	1001f626 	beq	r2,zero,803e4c <___vfprintf_internal_r+0x1780>
  803674:	d9014b17 	ldw	r4,1324(sp)
  803678:	38800017 	ldw	r2,0(r7)
  80367c:	39c00104 	addi	r7,r7,4
  803680:	d9c14015 	stw	r7,1280(sp)
  803684:	2007d7fa 	srai	r3,r4,31
  803688:	d9c14017 	ldw	r7,1280(sp)
  80368c:	11000015 	stw	r4,0(r2)
  803690:	10c00115 	stw	r3,4(r2)
  803694:	003c6906 	br	80283c <___vfprintf_internal_r+0x170>
  803698:	b8c00007 	ldb	r3,0(r23)
  80369c:	00801b04 	movi	r2,108
  8036a0:	18825526 	beq	r3,r2,803ff8 <___vfprintf_internal_r+0x192c>
  8036a4:	d9414c17 	ldw	r5,1328(sp)
  8036a8:	29400414 	ori	r5,r5,16
  8036ac:	d9414c15 	stw	r5,1328(sp)
  8036b0:	003c8506 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  8036b4:	d9814c17 	ldw	r6,1328(sp)
  8036b8:	b8c00007 	ldb	r3,0(r23)
  8036bc:	31800814 	ori	r6,r6,32
  8036c0:	d9814c15 	stw	r6,1328(sp)
  8036c4:	003c8006 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  8036c8:	d8814c17 	ldw	r2,1328(sp)
  8036cc:	3c000017 	ldw	r16,0(r7)
  8036d0:	00c01e04 	movi	r3,120
  8036d4:	10800094 	ori	r2,r2,2
  8036d8:	d8814c15 	stw	r2,1328(sp)
  8036dc:	39c00104 	addi	r7,r7,4
  8036e0:	01402074 	movhi	r5,129
  8036e4:	2975cc04 	addi	r5,r5,-10448
  8036e8:	00800c04 	movi	r2,48
  8036ec:	0023883a 	mov	r17,zero
  8036f0:	01000084 	movi	r4,2
  8036f4:	d9c14015 	stw	r7,1280(sp)
  8036f8:	d8c14d15 	stw	r3,1332(sp)
  8036fc:	d9414415 	stw	r5,1296(sp)
  803700:	d8800445 	stb	r2,17(sp)
  803704:	d8c00485 	stb	r3,18(sp)
  803708:	d8000405 	stb	zero,16(sp)
  80370c:	003e7d06 	br	803104 <___vfprintf_internal_r+0xa38>
  803710:	d8814c17 	ldw	r2,1328(sp)
  803714:	b8c00007 	ldb	r3,0(r23)
  803718:	10801014 	ori	r2,r2,64
  80371c:	d8814c15 	stw	r2,1328(sp)
  803720:	003c6906 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  803724:	d9414c17 	ldw	r5,1328(sp)
  803728:	2880020c 	andi	r2,r5,8
  80372c:	1001e526 	beq	r2,zero,803ec4 <___vfprintf_internal_r+0x17f8>
  803730:	39800017 	ldw	r6,0(r7)
  803734:	38800204 	addi	r2,r7,8
  803738:	d8814015 	stw	r2,1280(sp)
  80373c:	d9814215 	stw	r6,1288(sp)
  803740:	39c00117 	ldw	r7,4(r7)
  803744:	d9c14315 	stw	r7,1292(sp)
  803748:	d9014217 	ldw	r4,1288(sp)
  80374c:	d9414317 	ldw	r5,1292(sp)
  803750:	08092c80 	call	8092c8 <__isinfd>
  803754:	10021d26 	beq	r2,zero,803fcc <___vfprintf_internal_r+0x1900>
  803758:	d9014217 	ldw	r4,1288(sp)
  80375c:	d9414317 	ldw	r5,1292(sp)
  803760:	000d883a 	mov	r6,zero
  803764:	000f883a 	mov	r7,zero
  803768:	08018940 	call	801894 <__ltdf2>
  80376c:	1002d016 	blt	r2,zero,8042b0 <___vfprintf_internal_r+0x1be4>
  803770:	d9414d17 	ldw	r5,1332(sp)
  803774:	008011c4 	movi	r2,71
  803778:	11421016 	blt	r2,r5,803fbc <___vfprintf_internal_r+0x18f0>
  80377c:	01802074 	movhi	r6,129
  803780:	31b5d104 	addi	r6,r6,-10428
  803784:	d9814115 	stw	r6,1284(sp)
  803788:	d9014c17 	ldw	r4,1328(sp)
  80378c:	00c000c4 	movi	r3,3
  803790:	00bfdfc4 	movi	r2,-129
  803794:	2088703a 	and	r4,r4,r2
  803798:	180f883a 	mov	r7,r3
  80379c:	d8c14515 	stw	r3,1300(sp)
  8037a0:	d9014c15 	stw	r4,1328(sp)
  8037a4:	d8014615 	stw	zero,1304(sp)
  8037a8:	003e6a06 	br	803154 <___vfprintf_internal_r+0xa88>
  8037ac:	38800017 	ldw	r2,0(r7)
  8037b0:	00c00044 	movi	r3,1
  8037b4:	39c00104 	addi	r7,r7,4
  8037b8:	d9c14015 	stw	r7,1280(sp)
  8037bc:	d9000f04 	addi	r4,sp,60
  8037c0:	180f883a 	mov	r7,r3
  8037c4:	d8c14515 	stw	r3,1300(sp)
  8037c8:	d9014115 	stw	r4,1284(sp)
  8037cc:	d8800f05 	stb	r2,60(sp)
  8037d0:	d8000405 	stb	zero,16(sp)
  8037d4:	003cac06 	br	802a88 <___vfprintf_internal_r+0x3bc>
  8037d8:	01402074 	movhi	r5,129
  8037dc:	2975d704 	addi	r5,r5,-10404
  8037e0:	d9414415 	stw	r5,1296(sp)
  8037e4:	d9814c17 	ldw	r6,1328(sp)
  8037e8:	3080080c 	andi	r2,r6,32
  8037ec:	1000ff26 	beq	r2,zero,803bec <___vfprintf_internal_r+0x1520>
  8037f0:	3c000017 	ldw	r16,0(r7)
  8037f4:	3c400117 	ldw	r17,4(r7)
  8037f8:	38800204 	addi	r2,r7,8
  8037fc:	d8814015 	stw	r2,1280(sp)
  803800:	d9414c17 	ldw	r5,1328(sp)
  803804:	2880004c 	andi	r2,r5,1
  803808:	1005003a 	cmpeq	r2,r2,zero
  80380c:	1000b91e 	bne	r2,zero,803af4 <___vfprintf_internal_r+0x1428>
  803810:	8444b03a 	or	r2,r16,r17
  803814:	1000b726 	beq	r2,zero,803af4 <___vfprintf_internal_r+0x1428>
  803818:	d9814d17 	ldw	r6,1332(sp)
  80381c:	29400094 	ori	r5,r5,2
  803820:	00800c04 	movi	r2,48
  803824:	01000084 	movi	r4,2
  803828:	d9414c15 	stw	r5,1328(sp)
  80382c:	d8800445 	stb	r2,17(sp)
  803830:	d9800485 	stb	r6,18(sp)
  803834:	d8000405 	stb	zero,16(sp)
  803838:	003e3206 	br	803104 <___vfprintf_internal_r+0xa38>
  80383c:	01802074 	movhi	r6,129
  803840:	31b5cc04 	addi	r6,r6,-10448
  803844:	d9814415 	stw	r6,1296(sp)
  803848:	003fe606 	br	8037e4 <___vfprintf_internal_r+0x1118>
  80384c:	00800ac4 	movi	r2,43
  803850:	d8800405 	stb	r2,16(sp)
  803854:	b8c00007 	ldb	r3,0(r23)
  803858:	003c1b06 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  80385c:	d8814c17 	ldw	r2,1328(sp)
  803860:	b8c00007 	ldb	r3,0(r23)
  803864:	10800054 	ori	r2,r2,1
  803868:	d8814c15 	stw	r2,1328(sp)
  80386c:	003c1606 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  803870:	d8800407 	ldb	r2,16(sp)
  803874:	10004c1e 	bne	r2,zero,8039a8 <___vfprintf_internal_r+0x12dc>
  803878:	00800804 	movi	r2,32
  80387c:	d8800405 	stb	r2,16(sp)
  803880:	b8c00007 	ldb	r3,0(r23)
  803884:	003c1006 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  803888:	d9814c17 	ldw	r6,1328(sp)
  80388c:	b8c00007 	ldb	r3,0(r23)
  803890:	31800214 	ori	r6,r6,8
  803894:	d9814c15 	stw	r6,1328(sp)
  803898:	003c0b06 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  80389c:	0009883a 	mov	r4,zero
  8038a0:	04000244 	movi	r16,9
  8038a4:	01400284 	movi	r5,10
  8038a8:	d9c15115 	stw	r7,1348(sp)
  8038ac:	0801be80 	call	801be8 <__mulsi3>
  8038b0:	b9000007 	ldb	r4,0(r23)
  8038b4:	d8c14d17 	ldw	r3,1332(sp)
  8038b8:	bdc00044 	addi	r23,r23,1
  8038bc:	d9014d15 	stw	r4,1332(sp)
  8038c0:	d9414d17 	ldw	r5,1332(sp)
  8038c4:	1885883a 	add	r2,r3,r2
  8038c8:	113ff404 	addi	r4,r2,-48
  8038cc:	28bff404 	addi	r2,r5,-48
  8038d0:	d9c15117 	ldw	r7,1348(sp)
  8038d4:	80bff32e 	bgeu	r16,r2,8038a4 <___vfprintf_internal_r+0x11d8>
  8038d8:	d9014a15 	stw	r4,1320(sp)
  8038dc:	003bfc06 	br	8028d0 <___vfprintf_internal_r+0x204>
  8038e0:	d8814c17 	ldw	r2,1328(sp)
  8038e4:	b8c00007 	ldb	r3,0(r23)
  8038e8:	10802014 	ori	r2,r2,128
  8038ec:	d8814c15 	stw	r2,1328(sp)
  8038f0:	003bf506 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  8038f4:	b8c00007 	ldb	r3,0(r23)
  8038f8:	00800a84 	movi	r2,42
  8038fc:	bdc00044 	addi	r23,r23,1
  803900:	18831826 	beq	r3,r2,804564 <___vfprintf_internal_r+0x1e98>
  803904:	d8c14d15 	stw	r3,1332(sp)
  803908:	18bff404 	addi	r2,r3,-48
  80390c:	00c00244 	movi	r3,9
  803910:	18827b36 	bltu	r3,r2,804300 <___vfprintf_internal_r+0x1c34>
  803914:	1821883a 	mov	r16,r3
  803918:	0009883a 	mov	r4,zero
  80391c:	01400284 	movi	r5,10
  803920:	d9c15115 	stw	r7,1348(sp)
  803924:	0801be80 	call	801be8 <__mulsi3>
  803928:	d9414d17 	ldw	r5,1332(sp)
  80392c:	b9800007 	ldb	r6,0(r23)
  803930:	d9c15117 	ldw	r7,1348(sp)
  803934:	1145883a 	add	r2,r2,r5
  803938:	113ff404 	addi	r4,r2,-48
  80393c:	30bff404 	addi	r2,r6,-48
  803940:	d9814d15 	stw	r6,1332(sp)
  803944:	bdc00044 	addi	r23,r23,1
  803948:	80bff42e 	bgeu	r16,r2,80391c <___vfprintf_internal_r+0x1250>
  80394c:	2027883a 	mov	r19,r4
  803950:	203bdf0e 	bge	r4,zero,8028d0 <___vfprintf_internal_r+0x204>
  803954:	04ffffc4 	movi	r19,-1
  803958:	003bdd06 	br	8028d0 <___vfprintf_internal_r+0x204>
  80395c:	d8000405 	stb	zero,16(sp)
  803960:	39800017 	ldw	r6,0(r7)
  803964:	39c00104 	addi	r7,r7,4
  803968:	d9c14015 	stw	r7,1280(sp)
  80396c:	d9814115 	stw	r6,1284(sp)
  803970:	3001c926 	beq	r6,zero,804098 <___vfprintf_internal_r+0x19cc>
  803974:	98000e16 	blt	r19,zero,8039b0 <___vfprintf_internal_r+0x12e4>
  803978:	d9014117 	ldw	r4,1284(sp)
  80397c:	000b883a 	mov	r5,zero
  803980:	980d883a 	mov	r6,r19
  803984:	080794c0 	call	80794c <memchr>
  803988:	10025926 	beq	r2,zero,8042f0 <___vfprintf_internal_r+0x1c24>
  80398c:	d8c14117 	ldw	r3,1284(sp)
  803990:	10cfc83a 	sub	r7,r2,r3
  803994:	99c19e16 	blt	r19,r7,804010 <___vfprintf_internal_r+0x1944>
  803998:	d9c14515 	stw	r7,1300(sp)
  80399c:	38000916 	blt	r7,zero,8039c4 <___vfprintf_internal_r+0x12f8>
  8039a0:	d8014615 	stw	zero,1304(sp)
  8039a4:	003deb06 	br	803154 <___vfprintf_internal_r+0xa88>
  8039a8:	b8c00007 	ldb	r3,0(r23)
  8039ac:	003bc606 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  8039b0:	d9014117 	ldw	r4,1284(sp)
  8039b4:	08026000 	call	802600 <strlen>
  8039b8:	d8814515 	stw	r2,1300(sp)
  8039bc:	100f883a 	mov	r7,r2
  8039c0:	103ff70e 	bge	r2,zero,8039a0 <___vfprintf_internal_r+0x12d4>
  8039c4:	d8014515 	stw	zero,1300(sp)
  8039c8:	d8014615 	stw	zero,1304(sp)
  8039cc:	003de106 	br	803154 <___vfprintf_internal_r+0xa88>
  8039d0:	20c03fcc 	andi	r3,r4,255
  8039d4:	00800044 	movi	r2,1
  8039d8:	18802d26 	beq	r3,r2,803a90 <___vfprintf_internal_r+0x13c4>
  8039dc:	18800e36 	bltu	r3,r2,803a18 <___vfprintf_internal_r+0x134c>
  8039e0:	00800084 	movi	r2,2
  8039e4:	1880fa26 	beq	r3,r2,803dd0 <___vfprintf_internal_r+0x1704>
  8039e8:	01002074 	movhi	r4,129
  8039ec:	2135dc04 	addi	r4,r4,-10384
  8039f0:	08026000 	call	802600 <strlen>
  8039f4:	100f883a 	mov	r7,r2
  8039f8:	dcc14515 	stw	r19,1300(sp)
  8039fc:	9880010e 	bge	r19,r2,803a04 <___vfprintf_internal_r+0x1338>
  803a00:	d8814515 	stw	r2,1300(sp)
  803a04:	00802074 	movhi	r2,129
  803a08:	10b5dc04 	addi	r2,r2,-10384
  803a0c:	dcc14615 	stw	r19,1304(sp)
  803a10:	d8814115 	stw	r2,1284(sp)
  803a14:	003dcf06 	br	803154 <___vfprintf_internal_r+0xa88>
  803a18:	d9401904 	addi	r5,sp,100
  803a1c:	dd000f04 	addi	r20,sp,60
  803a20:	d9414115 	stw	r5,1284(sp)
  803a24:	880a977a 	slli	r5,r17,29
  803a28:	d9814117 	ldw	r6,1284(sp)
  803a2c:	8004d0fa 	srli	r2,r16,3
  803a30:	8806d0fa 	srli	r3,r17,3
  803a34:	810001cc 	andi	r4,r16,7
  803a38:	2884b03a 	or	r2,r5,r2
  803a3c:	31bfffc4 	addi	r6,r6,-1
  803a40:	21000c04 	addi	r4,r4,48
  803a44:	d9814115 	stw	r6,1284(sp)
  803a48:	10cab03a 	or	r5,r2,r3
  803a4c:	31000005 	stb	r4,0(r6)
  803a50:	1021883a 	mov	r16,r2
  803a54:	1823883a 	mov	r17,r3
  803a58:	283ff21e 	bne	r5,zero,803a24 <___vfprintf_internal_r+0x1358>
  803a5c:	d8c14c17 	ldw	r3,1328(sp)
  803a60:	1880004c 	andi	r2,r3,1
  803a64:	1005003a 	cmpeq	r2,r2,zero
  803a68:	103db31e 	bne	r2,zero,803138 <___vfprintf_internal_r+0xa6c>
  803a6c:	20803fcc 	andi	r2,r4,255
  803a70:	1080201c 	xori	r2,r2,128
  803a74:	10bfe004 	addi	r2,r2,-128
  803a78:	00c00c04 	movi	r3,48
  803a7c:	10fdae26 	beq	r2,r3,803138 <___vfprintf_internal_r+0xa6c>
  803a80:	31bfffc4 	addi	r6,r6,-1
  803a84:	d9814115 	stw	r6,1284(sp)
  803a88:	30c00005 	stb	r3,0(r6)
  803a8c:	003daa06 	br	803138 <___vfprintf_internal_r+0xa6c>
  803a90:	88800068 	cmpgeui	r2,r17,1
  803a94:	10002c1e 	bne	r2,zero,803b48 <___vfprintf_internal_r+0x147c>
  803a98:	8800021e 	bne	r17,zero,803aa4 <___vfprintf_internal_r+0x13d8>
  803a9c:	00800244 	movi	r2,9
  803aa0:	14002936 	bltu	r2,r16,803b48 <___vfprintf_internal_r+0x147c>
  803aa4:	d90018c4 	addi	r4,sp,99
  803aa8:	dd000f04 	addi	r20,sp,60
  803aac:	d9014115 	stw	r4,1284(sp)
  803ab0:	d9014117 	ldw	r4,1284(sp)
  803ab4:	80800c04 	addi	r2,r16,48
  803ab8:	20800005 	stb	r2,0(r4)
  803abc:	003d9e06 	br	803138 <___vfprintf_internal_r+0xa6c>
  803ac0:	dc400d17 	ldw	r17,52(sp)
  803ac4:	07002074 	movhi	fp,129
  803ac8:	e735e384 	addi	fp,fp,-10354
  803acc:	9425883a 	add	r18,r18,r16
  803ad0:	8c400044 	addi	r17,r17,1
  803ad4:	008001c4 	movi	r2,7
  803ad8:	1f000015 	stw	fp,0(r3)
  803adc:	1c000115 	stw	r16,4(r3)
  803ae0:	dc800e15 	stw	r18,56(sp)
  803ae4:	dc400d15 	stw	r17,52(sp)
  803ae8:	147ddc16 	blt	r2,r17,80325c <___vfprintf_internal_r+0xb90>
  803aec:	18c00204 	addi	r3,r3,8
  803af0:	003c7406 	br	802cc4 <___vfprintf_internal_r+0x5f8>
  803af4:	01000084 	movi	r4,2
  803af8:	d8000405 	stb	zero,16(sp)
  803afc:	003d8106 	br	803104 <___vfprintf_internal_r+0xa38>
  803b00:	d9814c17 	ldw	r6,1328(sp)
  803b04:	30c4703a 	and	r2,r6,r3
  803b08:	1005003a 	cmpeq	r2,r2,zero
  803b0c:	103cb326 	beq	r2,zero,802ddc <___vfprintf_internal_r+0x710>
  803b10:	d9014117 	ldw	r4,1284(sp)
  803b14:	94800044 	addi	r18,r18,1
  803b18:	8c400044 	addi	r17,r17,1
  803b1c:	008001c4 	movi	r2,7
  803b20:	a9000015 	stw	r4,0(r21)
  803b24:	a8c00115 	stw	r3,4(r21)
  803b28:	dc800e15 	stw	r18,56(sp)
  803b2c:	dc400d15 	stw	r17,52(sp)
  803b30:	147e6016 	blt	r2,r17,8034b4 <___vfprintf_internal_r+0xde8>
  803b34:	acc00204 	addi	r19,r21,8
  803b38:	003cd106 	br	802e80 <___vfprintf_internal_r+0x7b4>
  803b3c:	07002074 	movhi	fp,129
  803b40:	e735e384 	addi	fp,fp,-10354
  803b44:	003c4906 	br	802c6c <___vfprintf_internal_r+0x5a0>
  803b48:	dd000f04 	addi	r20,sp,60
  803b4c:	dc801904 	addi	r18,sp,100
  803b50:	8009883a 	mov	r4,r16
  803b54:	880b883a 	mov	r5,r17
  803b58:	01800284 	movi	r6,10
  803b5c:	000f883a 	mov	r7,zero
  803b60:	080a0940 	call	80a094 <__umoddi3>
  803b64:	12000c04 	addi	r8,r2,48
  803b68:	94bfffc4 	addi	r18,r18,-1
  803b6c:	8009883a 	mov	r4,r16
  803b70:	880b883a 	mov	r5,r17
  803b74:	01800284 	movi	r6,10
  803b78:	000f883a 	mov	r7,zero
  803b7c:	92000005 	stb	r8,0(r18)
  803b80:	0809a280 	call	809a28 <__udivdi3>
  803b84:	1009883a 	mov	r4,r2
  803b88:	1021883a 	mov	r16,r2
  803b8c:	18800068 	cmpgeui	r2,r3,1
  803b90:	1823883a 	mov	r17,r3
  803b94:	103fee1e 	bne	r2,zero,803b50 <___vfprintf_internal_r+0x1484>
  803b98:	1800021e 	bne	r3,zero,803ba4 <___vfprintf_internal_r+0x14d8>
  803b9c:	00800244 	movi	r2,9
  803ba0:	113feb36 	bltu	r2,r4,803b50 <___vfprintf_internal_r+0x1484>
  803ba4:	94bfffc4 	addi	r18,r18,-1
  803ba8:	dc814115 	stw	r18,1284(sp)
  803bac:	003fc006 	br	803ab0 <___vfprintf_internal_r+0x13e4>
  803bb0:	d9014c17 	ldw	r4,1328(sp)
  803bb4:	2080004c 	andi	r2,r4,1
  803bb8:	10009a1e 	bne	r2,zero,803e24 <___vfprintf_internal_r+0x1758>
  803bbc:	d9401904 	addi	r5,sp,100
  803bc0:	dd000f04 	addi	r20,sp,60
  803bc4:	d9414115 	stw	r5,1284(sp)
  803bc8:	003d5b06 	br	803138 <___vfprintf_internal_r+0xa6c>
  803bcc:	d9014f17 	ldw	r4,1340(sp)
  803bd0:	b00b883a 	mov	r5,r22
  803bd4:	d9800c04 	addi	r6,sp,48
  803bd8:	08026740 	call	802674 <__sprint_r>
  803bdc:	103c731e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803be0:	dc800e17 	ldw	r18,56(sp)
  803be4:	d8c01904 	addi	r3,sp,100
  803be8:	003cf906 	br	802fd0 <___vfprintf_internal_r+0x904>
  803bec:	d8c14c17 	ldw	r3,1328(sp)
  803bf0:	1880040c 	andi	r2,r3,16
  803bf4:	1000711e 	bne	r2,zero,803dbc <___vfprintf_internal_r+0x16f0>
  803bf8:	d9014c17 	ldw	r4,1328(sp)
  803bfc:	2080100c 	andi	r2,r4,64
  803c00:	10006e26 	beq	r2,zero,803dbc <___vfprintf_internal_r+0x16f0>
  803c04:	3c00000b 	ldhu	r16,0(r7)
  803c08:	0023883a 	mov	r17,zero
  803c0c:	39c00104 	addi	r7,r7,4
  803c10:	d9c14015 	stw	r7,1280(sp)
  803c14:	003efa06 	br	803800 <___vfprintf_internal_r+0x1134>
  803c18:	dc400d17 	ldw	r17,52(sp)
  803c1c:	07002074 	movhi	fp,129
  803c20:	e735e384 	addi	fp,fp,-10354
  803c24:	9425883a 	add	r18,r18,r16
  803c28:	8c400044 	addi	r17,r17,1
  803c2c:	008001c4 	movi	r2,7
  803c30:	1f000015 	stw	fp,0(r3)
  803c34:	1c000115 	stw	r16,4(r3)
  803c38:	dc800e15 	stw	r18,56(sp)
  803c3c:	dc400d15 	stw	r17,52(sp)
  803c40:	147d7016 	blt	r2,r17,803204 <___vfprintf_internal_r+0xb38>
  803c44:	18c00204 	addi	r3,r3,8
  803c48:	003d7506 	br	803220 <___vfprintf_internal_r+0xb54>
  803c4c:	dc800e17 	ldw	r18,56(sp)
  803c50:	dc400d17 	ldw	r17,52(sp)
  803c54:	07002074 	movhi	fp,129
  803c58:	e735e784 	addi	fp,fp,-10338
  803c5c:	003bba06 	br	802b48 <___vfprintf_internal_r+0x47c>
  803c60:	d9014f17 	ldw	r4,1340(sp)
  803c64:	b00b883a 	mov	r5,r22
  803c68:	d9800c04 	addi	r6,sp,48
  803c6c:	08026740 	call	802674 <__sprint_r>
  803c70:	103c4e1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803c74:	dc800e17 	ldw	r18,56(sp)
  803c78:	d8c01904 	addi	r3,sp,100
  803c7c:	003ce306 	br	80300c <___vfprintf_internal_r+0x940>
  803c80:	3c000017 	ldw	r16,0(r7)
  803c84:	0009883a 	mov	r4,zero
  803c88:	39c00104 	addi	r7,r7,4
  803c8c:	0023883a 	mov	r17,zero
  803c90:	d9c14015 	stw	r7,1280(sp)
  803c94:	d8000405 	stb	zero,16(sp)
  803c98:	003d1a06 	br	803104 <___vfprintf_internal_r+0xa38>
  803c9c:	38800017 	ldw	r2,0(r7)
  803ca0:	39c00104 	addi	r7,r7,4
  803ca4:	d9c14015 	stw	r7,1280(sp)
  803ca8:	1023d7fa 	srai	r17,r2,31
  803cac:	1021883a 	mov	r16,r2
  803cb0:	003d1206 	br	8030fc <___vfprintf_internal_r+0xa30>
  803cb4:	3c000017 	ldw	r16,0(r7)
  803cb8:	01000044 	movi	r4,1
  803cbc:	39c00104 	addi	r7,r7,4
  803cc0:	0023883a 	mov	r17,zero
  803cc4:	d9c14015 	stw	r7,1280(sp)
  803cc8:	d8000405 	stb	zero,16(sp)
  803ccc:	003d0d06 	br	803104 <___vfprintf_internal_r+0xa38>
  803cd0:	00802074 	movhi	r2,129
  803cd4:	10b5e304 	addi	r2,r2,-10356
  803cd8:	94800044 	addi	r18,r18,1
  803cdc:	8c400044 	addi	r17,r17,1
  803ce0:	a8800015 	stw	r2,0(r21)
  803ce4:	00c00044 	movi	r3,1
  803ce8:	008001c4 	movi	r2,7
  803cec:	a8c00115 	stw	r3,4(r21)
  803cf0:	dc800e15 	stw	r18,56(sp)
  803cf4:	dc400d15 	stw	r17,52(sp)
  803cf8:	1440ca16 	blt	r2,r17,804024 <___vfprintf_internal_r+0x1958>
  803cfc:	a8c00204 	addi	r3,r21,8
  803d00:	2000061e 	bne	r4,zero,803d1c <___vfprintf_internal_r+0x1650>
  803d04:	d9414717 	ldw	r5,1308(sp)
  803d08:	2800041e 	bne	r5,zero,803d1c <___vfprintf_internal_r+0x1650>
  803d0c:	d9814c17 	ldw	r6,1328(sp)
  803d10:	3080004c 	andi	r2,r6,1
  803d14:	1005003a 	cmpeq	r2,r2,zero
  803d18:	103bea1e 	bne	r2,zero,802cc4 <___vfprintf_internal_r+0x5f8>
  803d1c:	00800044 	movi	r2,1
  803d20:	dc400d17 	ldw	r17,52(sp)
  803d24:	18800115 	stw	r2,4(r3)
  803d28:	d8814917 	ldw	r2,1316(sp)
  803d2c:	94800044 	addi	r18,r18,1
  803d30:	8c400044 	addi	r17,r17,1
  803d34:	18800015 	stw	r2,0(r3)
  803d38:	008001c4 	movi	r2,7
  803d3c:	dc800e15 	stw	r18,56(sp)
  803d40:	dc400d15 	stw	r17,52(sp)
  803d44:	1440ca16 	blt	r2,r17,804070 <___vfprintf_internal_r+0x19a4>
  803d48:	18c00204 	addi	r3,r3,8
  803d4c:	0121c83a 	sub	r16,zero,r4
  803d50:	0400500e 	bge	zero,r16,803e94 <___vfprintf_internal_r+0x17c8>
  803d54:	00800404 	movi	r2,16
  803d58:	1400800e 	bge	r2,r16,803f5c <___vfprintf_internal_r+0x1890>
  803d5c:	1027883a 	mov	r19,r2
  803d60:	07002074 	movhi	fp,129
  803d64:	e735e384 	addi	fp,fp,-10354
  803d68:	050001c4 	movi	r20,7
  803d6c:	00000306 	br	803d7c <___vfprintf_internal_r+0x16b0>
  803d70:	18c00204 	addi	r3,r3,8
  803d74:	843ffc04 	addi	r16,r16,-16
  803d78:	9c007a0e 	bge	r19,r16,803f64 <___vfprintf_internal_r+0x1898>
  803d7c:	94800404 	addi	r18,r18,16
  803d80:	8c400044 	addi	r17,r17,1
  803d84:	1f000015 	stw	fp,0(r3)
  803d88:	1cc00115 	stw	r19,4(r3)
  803d8c:	dc800e15 	stw	r18,56(sp)
  803d90:	dc400d15 	stw	r17,52(sp)
  803d94:	a47ff60e 	bge	r20,r17,803d70 <___vfprintf_internal_r+0x16a4>
  803d98:	d9014f17 	ldw	r4,1340(sp)
  803d9c:	b00b883a 	mov	r5,r22
  803da0:	d9800c04 	addi	r6,sp,48
  803da4:	08026740 	call	802674 <__sprint_r>
  803da8:	103c001e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803dac:	dc800e17 	ldw	r18,56(sp)
  803db0:	dc400d17 	ldw	r17,52(sp)
  803db4:	d8c01904 	addi	r3,sp,100
  803db8:	003fee06 	br	803d74 <___vfprintf_internal_r+0x16a8>
  803dbc:	3c000017 	ldw	r16,0(r7)
  803dc0:	0023883a 	mov	r17,zero
  803dc4:	39c00104 	addi	r7,r7,4
  803dc8:	d9c14015 	stw	r7,1280(sp)
  803dcc:	003e8c06 	br	803800 <___vfprintf_internal_r+0x1134>
  803dd0:	d9401904 	addi	r5,sp,100
  803dd4:	dd000f04 	addi	r20,sp,60
  803dd8:	d9414115 	stw	r5,1284(sp)
  803ddc:	d9814417 	ldw	r6,1296(sp)
  803de0:	880a973a 	slli	r5,r17,28
  803de4:	8004d13a 	srli	r2,r16,4
  803de8:	810003cc 	andi	r4,r16,15
  803dec:	3109883a 	add	r4,r6,r4
  803df0:	2884b03a 	or	r2,r5,r2
  803df4:	21400003 	ldbu	r5,0(r4)
  803df8:	d9014117 	ldw	r4,1284(sp)
  803dfc:	8806d13a 	srli	r3,r17,4
  803e00:	1021883a 	mov	r16,r2
  803e04:	213fffc4 	addi	r4,r4,-1
  803e08:	d9014115 	stw	r4,1284(sp)
  803e0c:	d9814117 	ldw	r6,1284(sp)
  803e10:	10c8b03a 	or	r4,r2,r3
  803e14:	1823883a 	mov	r17,r3
  803e18:	31400005 	stb	r5,0(r6)
  803e1c:	203fef1e 	bne	r4,zero,803ddc <___vfprintf_internal_r+0x1710>
  803e20:	003cc506 	br	803138 <___vfprintf_internal_r+0xa6c>
  803e24:	00800c04 	movi	r2,48
  803e28:	d98018c4 	addi	r6,sp,99
  803e2c:	dd000f04 	addi	r20,sp,60
  803e30:	d88018c5 	stb	r2,99(sp)
  803e34:	d9814115 	stw	r6,1284(sp)
  803e38:	003cbf06 	br	803138 <___vfprintf_internal_r+0xa6c>
  803e3c:	dc400d17 	ldw	r17,52(sp)
  803e40:	07002074 	movhi	fp,129
  803e44:	e735e784 	addi	fp,fp,-10338
  803e48:	003bc106 	br	802d50 <___vfprintf_internal_r+0x684>
  803e4c:	d9414c17 	ldw	r5,1328(sp)
  803e50:	2880040c 	andi	r2,r5,16
  803e54:	10007c26 	beq	r2,zero,804048 <___vfprintf_internal_r+0x197c>
  803e58:	38800017 	ldw	r2,0(r7)
  803e5c:	39c00104 	addi	r7,r7,4
  803e60:	d9c14015 	stw	r7,1280(sp)
  803e64:	d9814b17 	ldw	r6,1324(sp)
  803e68:	d9c14017 	ldw	r7,1280(sp)
  803e6c:	11800015 	stw	r6,0(r2)
  803e70:	003a7206 	br	80283c <___vfprintf_internal_r+0x170>
  803e74:	d9014f17 	ldw	r4,1340(sp)
  803e78:	b00b883a 	mov	r5,r22
  803e7c:	d9800c04 	addi	r6,sp,48
  803e80:	08026740 	call	802674 <__sprint_r>
  803e84:	103bc91e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803e88:	dc800e17 	ldw	r18,56(sp)
  803e8c:	dc400d17 	ldw	r17,52(sp)
  803e90:	d8c01904 	addi	r3,sp,100
  803e94:	d9014717 	ldw	r4,1308(sp)
  803e98:	d9414117 	ldw	r5,1284(sp)
  803e9c:	8c400044 	addi	r17,r17,1
  803ea0:	9125883a 	add	r18,r18,r4
  803ea4:	008001c4 	movi	r2,7
  803ea8:	19400015 	stw	r5,0(r3)
  803eac:	19000115 	stw	r4,4(r3)
  803eb0:	dc800e15 	stw	r18,56(sp)
  803eb4:	dc400d15 	stw	r17,52(sp)
  803eb8:	147ce816 	blt	r2,r17,80325c <___vfprintf_internal_r+0xb90>
  803ebc:	18c00204 	addi	r3,r3,8
  803ec0:	003b8006 	br	802cc4 <___vfprintf_internal_r+0x5f8>
  803ec4:	38c00017 	ldw	r3,0(r7)
  803ec8:	39000204 	addi	r4,r7,8
  803ecc:	d9014015 	stw	r4,1280(sp)
  803ed0:	d8c14215 	stw	r3,1288(sp)
  803ed4:	39c00117 	ldw	r7,4(r7)
  803ed8:	d9c14315 	stw	r7,1292(sp)
  803edc:	003e1a06 	br	803748 <___vfprintf_internal_r+0x107c>
  803ee0:	0005883a 	mov	r2,zero
  803ee4:	1409c83a 	sub	r4,r2,r16
  803ee8:	1105803a 	cmpltu	r2,r2,r4
  803eec:	044bc83a 	sub	r5,zero,r17
  803ef0:	2885c83a 	sub	r2,r5,r2
  803ef4:	2021883a 	mov	r16,r4
  803ef8:	1023883a 	mov	r17,r2
  803efc:	01000044 	movi	r4,1
  803f00:	00800b44 	movi	r2,45
  803f04:	d8800405 	stb	r2,16(sp)
  803f08:	003c7e06 	br	803104 <___vfprintf_internal_r+0xa38>
  803f0c:	d9014f17 	ldw	r4,1340(sp)
  803f10:	b00b883a 	mov	r5,r22
  803f14:	d9800c04 	addi	r6,sp,48
  803f18:	08026740 	call	802674 <__sprint_r>
  803f1c:	103ba31e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803f20:	dc800e17 	ldw	r18,56(sp)
  803f24:	dc400d17 	ldw	r17,52(sp)
  803f28:	d9000517 	ldw	r4,20(sp)
  803f2c:	d9401904 	addi	r5,sp,100
  803f30:	003da106 	br	8035b8 <___vfprintf_internal_r+0xeec>
  803f34:	d9014f17 	ldw	r4,1340(sp)
  803f38:	b00b883a 	mov	r5,r22
  803f3c:	d9800c04 	addi	r6,sp,48
  803f40:	08026740 	call	802674 <__sprint_r>
  803f44:	103b991e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803f48:	dc800e17 	ldw	r18,56(sp)
  803f4c:	dc400d17 	ldw	r17,52(sp)
  803f50:	d9000517 	ldw	r4,20(sp)
  803f54:	d8c01904 	addi	r3,sp,100
  803f58:	003d8b06 	br	803588 <___vfprintf_internal_r+0xebc>
  803f5c:	07002074 	movhi	fp,129
  803f60:	e735e384 	addi	fp,fp,-10354
  803f64:	9425883a 	add	r18,r18,r16
  803f68:	8c400044 	addi	r17,r17,1
  803f6c:	008001c4 	movi	r2,7
  803f70:	1f000015 	stw	fp,0(r3)
  803f74:	1c000115 	stw	r16,4(r3)
  803f78:	dc800e15 	stw	r18,56(sp)
  803f7c:	dc400d15 	stw	r17,52(sp)
  803f80:	147fbc16 	blt	r2,r17,803e74 <___vfprintf_internal_r+0x17a8>
  803f84:	18c00204 	addi	r3,r3,8
  803f88:	003fc206 	br	803e94 <___vfprintf_internal_r+0x17c8>
  803f8c:	d9014f17 	ldw	r4,1340(sp)
  803f90:	b00b883a 	mov	r5,r22
  803f94:	d9800c04 	addi	r6,sp,48
  803f98:	08026740 	call	802674 <__sprint_r>
  803f9c:	103b831e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  803fa0:	dc800e17 	ldw	r18,56(sp)
  803fa4:	d9000517 	ldw	r4,20(sp)
  803fa8:	d8c01904 	addi	r3,sp,100
  803fac:	003cfc06 	br	8033a0 <___vfprintf_internal_r+0xcd4>
  803fb0:	07002074 	movhi	fp,129
  803fb4:	e735e384 	addi	fp,fp,-10354
  803fb8:	003bde06 	br	802f34 <___vfprintf_internal_r+0x868>
  803fbc:	00802074 	movhi	r2,129
  803fc0:	10b5d204 	addi	r2,r2,-10424
  803fc4:	d8814115 	stw	r2,1284(sp)
  803fc8:	003def06 	br	803788 <___vfprintf_internal_r+0x10bc>
  803fcc:	d9014217 	ldw	r4,1288(sp)
  803fd0:	d9414317 	ldw	r5,1292(sp)
  803fd4:	0800d3c0 	call	800d3c <__isnand>
  803fd8:	10003926 	beq	r2,zero,8040c0 <___vfprintf_internal_r+0x19f4>
  803fdc:	d9414d17 	ldw	r5,1332(sp)
  803fe0:	008011c4 	movi	r2,71
  803fe4:	1140ce16 	blt	r2,r5,804320 <___vfprintf_internal_r+0x1c54>
  803fe8:	01802074 	movhi	r6,129
  803fec:	31b5d304 	addi	r6,r6,-10420
  803ff0:	d9814115 	stw	r6,1284(sp)
  803ff4:	003de406 	br	803788 <___vfprintf_internal_r+0x10bc>
  803ff8:	d9014c17 	ldw	r4,1328(sp)
  803ffc:	bdc00044 	addi	r23,r23,1
  804000:	b8c00007 	ldb	r3,0(r23)
  804004:	21000814 	ori	r4,r4,32
  804008:	d9014c15 	stw	r4,1328(sp)
  80400c:	003a2e06 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  804010:	dcc14515 	stw	r19,1300(sp)
  804014:	98011016 	blt	r19,zero,804458 <___vfprintf_internal_r+0x1d8c>
  804018:	980f883a 	mov	r7,r19
  80401c:	d8014615 	stw	zero,1304(sp)
  804020:	003c4c06 	br	803154 <___vfprintf_internal_r+0xa88>
  804024:	d9014f17 	ldw	r4,1340(sp)
  804028:	b00b883a 	mov	r5,r22
  80402c:	d9800c04 	addi	r6,sp,48
  804030:	08026740 	call	802674 <__sprint_r>
  804034:	103b5d1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  804038:	dc800e17 	ldw	r18,56(sp)
  80403c:	d9000517 	ldw	r4,20(sp)
  804040:	d8c01904 	addi	r3,sp,100
  804044:	003f2e06 	br	803d00 <___vfprintf_internal_r+0x1634>
  804048:	d8c14c17 	ldw	r3,1328(sp)
  80404c:	1880100c 	andi	r2,r3,64
  804050:	1000a026 	beq	r2,zero,8042d4 <___vfprintf_internal_r+0x1c08>
  804054:	38800017 	ldw	r2,0(r7)
  804058:	39c00104 	addi	r7,r7,4
  80405c:	d9c14015 	stw	r7,1280(sp)
  804060:	d9014b17 	ldw	r4,1324(sp)
  804064:	d9c14017 	ldw	r7,1280(sp)
  804068:	1100000d 	sth	r4,0(r2)
  80406c:	0039f306 	br	80283c <___vfprintf_internal_r+0x170>
  804070:	d9014f17 	ldw	r4,1340(sp)
  804074:	b00b883a 	mov	r5,r22
  804078:	d9800c04 	addi	r6,sp,48
  80407c:	08026740 	call	802674 <__sprint_r>
  804080:	103b4a1e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  804084:	dc800e17 	ldw	r18,56(sp)
  804088:	dc400d17 	ldw	r17,52(sp)
  80408c:	d9000517 	ldw	r4,20(sp)
  804090:	d8c01904 	addi	r3,sp,100
  804094:	003f2d06 	br	803d4c <___vfprintf_internal_r+0x1680>
  804098:	00800184 	movi	r2,6
  80409c:	14c09a36 	bltu	r2,r19,804308 <___vfprintf_internal_r+0x1c3c>
  8040a0:	dcc14515 	stw	r19,1300(sp)
  8040a4:	9800010e 	bge	r19,zero,8040ac <___vfprintf_internal_r+0x19e0>
  8040a8:	d8014515 	stw	zero,1300(sp)
  8040ac:	00802074 	movhi	r2,129
  8040b0:	10b5d504 	addi	r2,r2,-10412
  8040b4:	980f883a 	mov	r7,r19
  8040b8:	d8814115 	stw	r2,1284(sp)
  8040bc:	003a7206 	br	802a88 <___vfprintf_internal_r+0x3bc>
  8040c0:	00bfffc4 	movi	r2,-1
  8040c4:	9880e226 	beq	r19,r2,804450 <___vfprintf_internal_r+0x1d84>
  8040c8:	d9414d17 	ldw	r5,1332(sp)
  8040cc:	008019c4 	movi	r2,103
  8040d0:	2880dc26 	beq	r5,r2,804444 <___vfprintf_internal_r+0x1d78>
  8040d4:	008011c4 	movi	r2,71
  8040d8:	2880da26 	beq	r5,r2,804444 <___vfprintf_internal_r+0x1d78>
  8040dc:	d9414c17 	ldw	r5,1328(sp)
  8040e0:	d9014317 	ldw	r4,1292(sp)
  8040e4:	d9814217 	ldw	r6,1288(sp)
  8040e8:	29404014 	ori	r5,r5,256
  8040ec:	d9414c15 	stw	r5,1328(sp)
  8040f0:	2000cc16 	blt	r4,zero,804424 <___vfprintf_internal_r+0x1d58>
  8040f4:	3021883a 	mov	r16,r6
  8040f8:	2023883a 	mov	r17,r4
  8040fc:	0039883a 	mov	fp,zero
  804100:	d9414d17 	ldw	r5,1332(sp)
  804104:	00801984 	movi	r2,102
  804108:	2880b726 	beq	r5,r2,8043e8 <___vfprintf_internal_r+0x1d1c>
  80410c:	00801184 	movi	r2,70
  804110:	2880b526 	beq	r5,r2,8043e8 <___vfprintf_internal_r+0x1d1c>
  804114:	00801944 	movi	r2,101
  804118:	2880c826 	beq	r5,r2,80443c <___vfprintf_internal_r+0x1d70>
  80411c:	00801144 	movi	r2,69
  804120:	2880c626 	beq	r5,r2,80443c <___vfprintf_internal_r+0x1d70>
  804124:	9829883a 	mov	r20,r19
  804128:	d9014f17 	ldw	r4,1340(sp)
  80412c:	d8800504 	addi	r2,sp,20
  804130:	880d883a 	mov	r6,r17
  804134:	d8800115 	stw	r2,4(sp)
  804138:	d8c00604 	addi	r3,sp,24
  80413c:	d8800704 	addi	r2,sp,28
  804140:	800b883a 	mov	r5,r16
  804144:	01c00084 	movi	r7,2
  804148:	d8c00215 	stw	r3,8(sp)
  80414c:	d8800315 	stw	r2,12(sp)
  804150:	dd000015 	stw	r20,0(sp)
  804154:	0804a800 	call	804a80 <_dtoa_r>
  804158:	d9814d17 	ldw	r6,1332(sp)
  80415c:	d8814115 	stw	r2,1284(sp)
  804160:	008019c4 	movi	r2,103
  804164:	30809526 	beq	r6,r2,8043bc <___vfprintf_internal_r+0x1cf0>
  804168:	d8c14d17 	ldw	r3,1332(sp)
  80416c:	008011c4 	movi	r2,71
  804170:	18809226 	beq	r3,r2,8043bc <___vfprintf_internal_r+0x1cf0>
  804174:	d9414117 	ldw	r5,1284(sp)
  804178:	d9814d17 	ldw	r6,1332(sp)
  80417c:	00801984 	movi	r2,102
  804180:	2d25883a 	add	r18,r5,r20
  804184:	30808626 	beq	r6,r2,8043a0 <___vfprintf_internal_r+0x1cd4>
  804188:	00801184 	movi	r2,70
  80418c:	30808426 	beq	r6,r2,8043a0 <___vfprintf_internal_r+0x1cd4>
  804190:	000d883a 	mov	r6,zero
  804194:	000f883a 	mov	r7,zero
  804198:	880b883a 	mov	r5,r17
  80419c:	8009883a 	mov	r4,r16
  8041a0:	080a6f40 	call	80a6f4 <__eqdf2>
  8041a4:	1000751e 	bne	r2,zero,80437c <___vfprintf_internal_r+0x1cb0>
  8041a8:	9005883a 	mov	r2,r18
  8041ac:	dc800715 	stw	r18,28(sp)
  8041b0:	d9014117 	ldw	r4,1284(sp)
  8041b4:	d9414d17 	ldw	r5,1332(sp)
  8041b8:	00c019c4 	movi	r3,103
  8041bc:	1125c83a 	sub	r18,r2,r4
  8041c0:	28c06826 	beq	r5,r3,804364 <___vfprintf_internal_r+0x1c98>
  8041c4:	008011c4 	movi	r2,71
  8041c8:	28806626 	beq	r5,r2,804364 <___vfprintf_internal_r+0x1c98>
  8041cc:	d9000517 	ldw	r4,20(sp)
  8041d0:	d8c14d17 	ldw	r3,1332(sp)
  8041d4:	00801944 	movi	r2,101
  8041d8:	10c05516 	blt	r2,r3,804330 <___vfprintf_internal_r+0x1c64>
  8041dc:	213fffc4 	addi	r4,r4,-1
  8041e0:	d9000515 	stw	r4,20(sp)
  8041e4:	d8c00805 	stb	r3,32(sp)
  8041e8:	2021883a 	mov	r16,r4
  8041ec:	2000c116 	blt	r4,zero,8044f4 <___vfprintf_internal_r+0x1e28>
  8041f0:	00800ac4 	movi	r2,43
  8041f4:	d8800845 	stb	r2,33(sp)
  8041f8:	00800244 	movi	r2,9
  8041fc:	1400af0e 	bge	r2,r16,8044bc <___vfprintf_internal_r+0x1df0>
  804200:	1027883a 	mov	r19,r2
  804204:	dc400b84 	addi	r17,sp,46
  804208:	8009883a 	mov	r4,r16
  80420c:	01400284 	movi	r5,10
  804210:	0801b780 	call	801b78 <__modsi3>
  804214:	10800c04 	addi	r2,r2,48
  804218:	8c7fffc4 	addi	r17,r17,-1
  80421c:	8009883a 	mov	r4,r16
  804220:	01400284 	movi	r5,10
  804224:	88800005 	stb	r2,0(r17)
  804228:	0801b180 	call	801b18 <__divsi3>
  80422c:	1021883a 	mov	r16,r2
  804230:	98bff516 	blt	r19,r2,804208 <___vfprintf_internal_r+0x1b3c>
  804234:	10c00c04 	addi	r3,r2,48
  804238:	d88009c4 	addi	r2,sp,39
  80423c:	108001c4 	addi	r2,r2,7
  804240:	897fffc4 	addi	r5,r17,-1
  804244:	88ffffc5 	stb	r3,-1(r17)
  804248:	2880a72e 	bgeu	r5,r2,8044e8 <___vfprintf_internal_r+0x1e1c>
  80424c:	1009883a 	mov	r4,r2
  804250:	d9800804 	addi	r6,sp,32
  804254:	d8c00884 	addi	r3,sp,34
  804258:	28800003 	ldbu	r2,0(r5)
  80425c:	29400044 	addi	r5,r5,1
  804260:	18800005 	stb	r2,0(r3)
  804264:	18c00044 	addi	r3,r3,1
  804268:	293ffb36 	bltu	r5,r4,804258 <___vfprintf_internal_r+0x1b8c>
  80426c:	1987c83a 	sub	r3,r3,r6
  804270:	00800044 	movi	r2,1
  804274:	d8c14815 	stw	r3,1312(sp)
  804278:	90cf883a 	add	r7,r18,r3
  80427c:	1480960e 	bge	r2,r18,8044d8 <___vfprintf_internal_r+0x1e0c>
  804280:	39c00044 	addi	r7,r7,1
  804284:	d9c14515 	stw	r7,1300(sp)
  804288:	38003416 	blt	r7,zero,80435c <___vfprintf_internal_r+0x1c90>
  80428c:	e0803fcc 	andi	r2,fp,255
  804290:	1080201c 	xori	r2,r2,128
  804294:	10bfe004 	addi	r2,r2,-128
  804298:	10004e26 	beq	r2,zero,8043d4 <___vfprintf_internal_r+0x1d08>
  80429c:	00800b44 	movi	r2,45
  8042a0:	dc814715 	stw	r18,1308(sp)
  8042a4:	d8014615 	stw	zero,1304(sp)
  8042a8:	d8800405 	stb	r2,16(sp)
  8042ac:	003bab06 	br	80315c <___vfprintf_internal_r+0xa90>
  8042b0:	00800b44 	movi	r2,45
  8042b4:	d8800405 	stb	r2,16(sp)
  8042b8:	003d2d06 	br	803770 <___vfprintf_internal_r+0x10a4>
  8042bc:	d9014f17 	ldw	r4,1340(sp)
  8042c0:	b00b883a 	mov	r5,r22
  8042c4:	d9800c04 	addi	r6,sp,48
  8042c8:	08026740 	call	802674 <__sprint_r>
  8042cc:	103ab71e 	bne	r2,zero,802dac <___vfprintf_internal_r+0x6e0>
  8042d0:	003ab506 	br	802da8 <___vfprintf_internal_r+0x6dc>
  8042d4:	38800017 	ldw	r2,0(r7)
  8042d8:	39c00104 	addi	r7,r7,4
  8042dc:	d9c14015 	stw	r7,1280(sp)
  8042e0:	d9414b17 	ldw	r5,1324(sp)
  8042e4:	d9c14017 	ldw	r7,1280(sp)
  8042e8:	11400015 	stw	r5,0(r2)
  8042ec:	00395306 	br	80283c <___vfprintf_internal_r+0x170>
  8042f0:	980f883a 	mov	r7,r19
  8042f4:	dcc14515 	stw	r19,1300(sp)
  8042f8:	d8014615 	stw	zero,1304(sp)
  8042fc:	003b9506 	br	803154 <___vfprintf_internal_r+0xa88>
  804300:	0027883a 	mov	r19,zero
  804304:	00397206 	br	8028d0 <___vfprintf_internal_r+0x204>
  804308:	00c02074 	movhi	r3,129
  80430c:	18f5d504 	addi	r3,r3,-10412
  804310:	100f883a 	mov	r7,r2
  804314:	d8814515 	stw	r2,1300(sp)
  804318:	d8c14115 	stw	r3,1284(sp)
  80431c:	0039da06 	br	802a88 <___vfprintf_internal_r+0x3bc>
  804320:	00802074 	movhi	r2,129
  804324:	10b5d404 	addi	r2,r2,-10416
  804328:	d8814115 	stw	r2,1284(sp)
  80432c:	003d1606 	br	803788 <___vfprintf_internal_r+0x10bc>
  804330:	d9414d17 	ldw	r5,1332(sp)
  804334:	00801984 	movi	r2,102
  804338:	28804926 	beq	r5,r2,804460 <___vfprintf_internal_r+0x1d94>
  80433c:	200f883a 	mov	r7,r4
  804340:	24805716 	blt	r4,r18,8044a0 <___vfprintf_internal_r+0x1dd4>
  804344:	d9414c17 	ldw	r5,1328(sp)
  804348:	2880004c 	andi	r2,r5,1
  80434c:	10000126 	beq	r2,zero,804354 <___vfprintf_internal_r+0x1c88>
  804350:	21c00044 	addi	r7,r4,1
  804354:	d9c14515 	stw	r7,1300(sp)
  804358:	383fcc0e 	bge	r7,zero,80428c <___vfprintf_internal_r+0x1bc0>
  80435c:	d8014515 	stw	zero,1300(sp)
  804360:	003fca06 	br	80428c <___vfprintf_internal_r+0x1bc0>
  804364:	d9000517 	ldw	r4,20(sp)
  804368:	00bfff04 	movi	r2,-4
  80436c:	1100480e 	bge	r2,r4,804490 <___vfprintf_internal_r+0x1dc4>
  804370:	99004716 	blt	r19,r4,804490 <___vfprintf_internal_r+0x1dc4>
  804374:	d8c14d15 	stw	r3,1332(sp)
  804378:	003ff006 	br	80433c <___vfprintf_internal_r+0x1c70>
  80437c:	d8800717 	ldw	r2,28(sp)
  804380:	14bf8b2e 	bgeu	r2,r18,8041b0 <___vfprintf_internal_r+0x1ae4>
  804384:	9007883a 	mov	r3,r18
  804388:	01000c04 	movi	r4,48
  80438c:	11000005 	stb	r4,0(r2)
  804390:	10800044 	addi	r2,r2,1
  804394:	d8800715 	stw	r2,28(sp)
  804398:	18bffc1e 	bne	r3,r2,80438c <___vfprintf_internal_r+0x1cc0>
  80439c:	003f8406 	br	8041b0 <___vfprintf_internal_r+0x1ae4>
  8043a0:	d8814117 	ldw	r2,1284(sp)
  8043a4:	10c00007 	ldb	r3,0(r2)
  8043a8:	00800c04 	movi	r2,48
  8043ac:	18805b26 	beq	r3,r2,80451c <___vfprintf_internal_r+0x1e50>
  8043b0:	d9000517 	ldw	r4,20(sp)
  8043b4:	9125883a 	add	r18,r18,r4
  8043b8:	003f7506 	br	804190 <___vfprintf_internal_r+0x1ac4>
  8043bc:	d9014c17 	ldw	r4,1328(sp)
  8043c0:	2080004c 	andi	r2,r4,1
  8043c4:	1005003a 	cmpeq	r2,r2,zero
  8043c8:	103f6a26 	beq	r2,zero,804174 <___vfprintf_internal_r+0x1aa8>
  8043cc:	d8800717 	ldw	r2,28(sp)
  8043d0:	003f7706 	br	8041b0 <___vfprintf_internal_r+0x1ae4>
  8043d4:	d9c14515 	stw	r7,1300(sp)
  8043d8:	38004d16 	blt	r7,zero,804510 <___vfprintf_internal_r+0x1e44>
  8043dc:	dc814715 	stw	r18,1308(sp)
  8043e0:	d8014615 	stw	zero,1304(sp)
  8043e4:	003b5b06 	br	803154 <___vfprintf_internal_r+0xa88>
  8043e8:	d9014f17 	ldw	r4,1340(sp)
  8043ec:	d8800504 	addi	r2,sp,20
  8043f0:	d8800115 	stw	r2,4(sp)
  8043f4:	d8c00604 	addi	r3,sp,24
  8043f8:	d8800704 	addi	r2,sp,28
  8043fc:	800b883a 	mov	r5,r16
  804400:	880d883a 	mov	r6,r17
  804404:	01c000c4 	movi	r7,3
  804408:	d8c00215 	stw	r3,8(sp)
  80440c:	d8800315 	stw	r2,12(sp)
  804410:	dcc00015 	stw	r19,0(sp)
  804414:	9829883a 	mov	r20,r19
  804418:	0804a800 	call	804a80 <_dtoa_r>
  80441c:	d8814115 	stw	r2,1284(sp)
  804420:	003f5106 	br	804168 <___vfprintf_internal_r+0x1a9c>
  804424:	d8c14217 	ldw	r3,1288(sp)
  804428:	d9014317 	ldw	r4,1292(sp)
  80442c:	07000b44 	movi	fp,45
  804430:	1821883a 	mov	r16,r3
  804434:	2460003c 	xorhi	r17,r4,32768
  804438:	003f3106 	br	804100 <___vfprintf_internal_r+0x1a34>
  80443c:	9d000044 	addi	r20,r19,1
  804440:	003f3906 	br	804128 <___vfprintf_internal_r+0x1a5c>
  804444:	983f251e 	bne	r19,zero,8040dc <___vfprintf_internal_r+0x1a10>
  804448:	04c00044 	movi	r19,1
  80444c:	003f2306 	br	8040dc <___vfprintf_internal_r+0x1a10>
  804450:	04c00184 	movi	r19,6
  804454:	003f2106 	br	8040dc <___vfprintf_internal_r+0x1a10>
  804458:	d8014515 	stw	zero,1300(sp)
  80445c:	003eee06 	br	804018 <___vfprintf_internal_r+0x194c>
  804460:	200f883a 	mov	r7,r4
  804464:	0100370e 	bge	zero,r4,804544 <___vfprintf_internal_r+0x1e78>
  804468:	9800031e 	bne	r19,zero,804478 <___vfprintf_internal_r+0x1dac>
  80446c:	d9814c17 	ldw	r6,1328(sp)
  804470:	3080004c 	andi	r2,r6,1
  804474:	103fb726 	beq	r2,zero,804354 <___vfprintf_internal_r+0x1c88>
  804478:	20800044 	addi	r2,r4,1
  80447c:	98a7883a 	add	r19,r19,r2
  804480:	dcc14515 	stw	r19,1300(sp)
  804484:	980f883a 	mov	r7,r19
  804488:	983f800e 	bge	r19,zero,80428c <___vfprintf_internal_r+0x1bc0>
  80448c:	003fb306 	br	80435c <___vfprintf_internal_r+0x1c90>
  804490:	d9814d17 	ldw	r6,1332(sp)
  804494:	31bfff84 	addi	r6,r6,-2
  804498:	d9814d15 	stw	r6,1332(sp)
  80449c:	003f4c06 	br	8041d0 <___vfprintf_internal_r+0x1b04>
  8044a0:	0100180e 	bge	zero,r4,804504 <___vfprintf_internal_r+0x1e38>
  8044a4:	00800044 	movi	r2,1
  8044a8:	1485883a 	add	r2,r2,r18
  8044ac:	d8814515 	stw	r2,1300(sp)
  8044b0:	100f883a 	mov	r7,r2
  8044b4:	103f750e 	bge	r2,zero,80428c <___vfprintf_internal_r+0x1bc0>
  8044b8:	003fa806 	br	80435c <___vfprintf_internal_r+0x1c90>
  8044bc:	80c00c04 	addi	r3,r16,48
  8044c0:	00800c04 	movi	r2,48
  8044c4:	d8c008c5 	stb	r3,35(sp)
  8044c8:	d9800804 	addi	r6,sp,32
  8044cc:	d8c00904 	addi	r3,sp,36
  8044d0:	d8800885 	stb	r2,34(sp)
  8044d4:	003f6506 	br	80426c <___vfprintf_internal_r+0x1ba0>
  8044d8:	d9014c17 	ldw	r4,1328(sp)
  8044dc:	2084703a 	and	r2,r4,r2
  8044e0:	103f9c26 	beq	r2,zero,804354 <___vfprintf_internal_r+0x1c88>
  8044e4:	003f6606 	br	804280 <___vfprintf_internal_r+0x1bb4>
  8044e8:	d9800804 	addi	r6,sp,32
  8044ec:	d8c00884 	addi	r3,sp,34
  8044f0:	003f5e06 	br	80426c <___vfprintf_internal_r+0x1ba0>
  8044f4:	00800b44 	movi	r2,45
  8044f8:	0121c83a 	sub	r16,zero,r4
  8044fc:	d8800845 	stb	r2,33(sp)
  804500:	003f3d06 	br	8041f8 <___vfprintf_internal_r+0x1b2c>
  804504:	00800084 	movi	r2,2
  804508:	1105c83a 	sub	r2,r2,r4
  80450c:	003fe606 	br	8044a8 <___vfprintf_internal_r+0x1ddc>
  804510:	d8014515 	stw	zero,1300(sp)
  804514:	dc814715 	stw	r18,1308(sp)
  804518:	003fb106 	br	8043e0 <___vfprintf_internal_r+0x1d14>
  80451c:	000d883a 	mov	r6,zero
  804520:	000f883a 	mov	r7,zero
  804524:	8009883a 	mov	r4,r16
  804528:	880b883a 	mov	r5,r17
  80452c:	080a77c0 	call	80a77c <__nedf2>
  804530:	103f9f26 	beq	r2,zero,8043b0 <___vfprintf_internal_r+0x1ce4>
  804534:	00800044 	movi	r2,1
  804538:	1509c83a 	sub	r4,r2,r20
  80453c:	d9000515 	stw	r4,20(sp)
  804540:	003f9b06 	br	8043b0 <___vfprintf_internal_r+0x1ce4>
  804544:	98000d1e 	bne	r19,zero,80457c <___vfprintf_internal_r+0x1eb0>
  804548:	d8c14c17 	ldw	r3,1328(sp)
  80454c:	1880004c 	andi	r2,r3,1
  804550:	10000a1e 	bne	r2,zero,80457c <___vfprintf_internal_r+0x1eb0>
  804554:	01000044 	movi	r4,1
  804558:	200f883a 	mov	r7,r4
  80455c:	d9014515 	stw	r4,1300(sp)
  804560:	003f4a06 	br	80428c <___vfprintf_internal_r+0x1bc0>
  804564:	3cc00017 	ldw	r19,0(r7)
  804568:	39c00104 	addi	r7,r7,4
  80456c:	983d0e0e 	bge	r19,zero,8039a8 <___vfprintf_internal_r+0x12dc>
  804570:	b8c00007 	ldb	r3,0(r23)
  804574:	04ffffc4 	movi	r19,-1
  804578:	0038d306 	br	8028c8 <___vfprintf_internal_r+0x1fc>
  80457c:	9cc00084 	addi	r19,r19,2
  804580:	dcc14515 	stw	r19,1300(sp)
  804584:	980f883a 	mov	r7,r19
  804588:	983f400e 	bge	r19,zero,80428c <___vfprintf_internal_r+0x1bc0>
  80458c:	003f7306 	br	80435c <___vfprintf_internal_r+0x1c90>

00804590 <__vfprintf_internal>:
  804590:	00802074 	movhi	r2,129
  804594:	10bce204 	addi	r2,r2,-3192
  804598:	2013883a 	mov	r9,r4
  80459c:	11000017 	ldw	r4,0(r2)
  8045a0:	2805883a 	mov	r2,r5
  8045a4:	300f883a 	mov	r7,r6
  8045a8:	480b883a 	mov	r5,r9
  8045ac:	100d883a 	mov	r6,r2
  8045b0:	08026cc1 	jmpi	8026cc <___vfprintf_internal_r>

008045b4 <__swbuf_r>:
  8045b4:	defffc04 	addi	sp,sp,-16
  8045b8:	dc400215 	stw	r17,8(sp)
  8045bc:	dc000115 	stw	r16,4(sp)
  8045c0:	dfc00315 	stw	ra,12(sp)
  8045c4:	2023883a 	mov	r17,r4
  8045c8:	2821883a 	mov	r16,r5
  8045cc:	20000226 	beq	r4,zero,8045d8 <__swbuf_r+0x24>
  8045d0:	20800e17 	ldw	r2,56(r4)
  8045d4:	10002f26 	beq	r2,zero,804694 <__swbuf_r+0xe0>
  8045d8:	3080030b 	ldhu	r2,12(r6)
  8045dc:	30c00617 	ldw	r3,24(r6)
  8045e0:	1080020c 	andi	r2,r2,8
  8045e4:	30c00215 	stw	r3,8(r6)
  8045e8:	10002226 	beq	r2,zero,804674 <__swbuf_r+0xc0>
  8045ec:	30c00417 	ldw	r3,16(r6)
  8045f0:	18002026 	beq	r3,zero,804674 <__swbuf_r+0xc0>
  8045f4:	31000017 	ldw	r4,0(r6)
  8045f8:	30800517 	ldw	r2,20(r6)
  8045fc:	20c7c83a 	sub	r3,r4,r3
  804600:	18802f0e 	bge	r3,r2,8046c0 <__swbuf_r+0x10c>
  804604:	19400044 	addi	r5,r3,1
  804608:	30800217 	ldw	r2,8(r6)
  80460c:	84003fcc 	andi	r16,r16,255
  804610:	20c00044 	addi	r3,r4,1
  804614:	10bfffc4 	addi	r2,r2,-1
  804618:	30800215 	stw	r2,8(r6)
  80461c:	24000005 	stb	r16,0(r4)
  804620:	30800517 	ldw	r2,20(r6)
  804624:	30c00015 	stw	r3,0(r6)
  804628:	11400c26 	beq	r2,r5,80465c <__swbuf_r+0xa8>
  80462c:	3080030b 	ldhu	r2,12(r6)
  804630:	1080004c 	andi	r2,r2,1
  804634:	1005003a 	cmpeq	r2,r2,zero
  804638:	10000626 	beq	r2,zero,804654 <__swbuf_r+0xa0>
  80463c:	8005883a 	mov	r2,r16
  804640:	dfc00317 	ldw	ra,12(sp)
  804644:	dc400217 	ldw	r17,8(sp)
  804648:	dc000117 	ldw	r16,4(sp)
  80464c:	dec00404 	addi	sp,sp,16
  804650:	f800283a 	ret
  804654:	00800284 	movi	r2,10
  804658:	80bff81e 	bne	r16,r2,80463c <__swbuf_r+0x88>
  80465c:	8809883a 	mov	r4,r17
  804660:	300b883a 	mov	r5,r6
  804664:	08060340 	call	806034 <_fflush_r>
  804668:	103ff426 	beq	r2,zero,80463c <__swbuf_r+0x88>
  80466c:	043fffc4 	movi	r16,-1
  804670:	003ff206 	br	80463c <__swbuf_r+0x88>
  804674:	300b883a 	mov	r5,r6
  804678:	8809883a 	mov	r4,r17
  80467c:	d9800015 	stw	r6,0(sp)
  804680:	08047000 	call	804700 <__swsetup_r>
  804684:	d9800017 	ldw	r6,0(sp)
  804688:	1000061e 	bne	r2,zero,8046a4 <__swbuf_r+0xf0>
  80468c:	30c00417 	ldw	r3,16(r6)
  804690:	003fd806 	br	8045f4 <__swbuf_r+0x40>
  804694:	d9800015 	stw	r6,0(sp)
  804698:	08062cc0 	call	8062cc <__sinit>
  80469c:	d9800017 	ldw	r6,0(sp)
  8046a0:	003fcd06 	br	8045d8 <__swbuf_r+0x24>
  8046a4:	3080030b 	ldhu	r2,12(r6)
  8046a8:	00c00244 	movi	r3,9
  8046ac:	043fffc4 	movi	r16,-1
  8046b0:	10801014 	ori	r2,r2,64
  8046b4:	3080030d 	sth	r2,12(r6)
  8046b8:	88c00015 	stw	r3,0(r17)
  8046bc:	003fdf06 	br	80463c <__swbuf_r+0x88>
  8046c0:	300b883a 	mov	r5,r6
  8046c4:	8809883a 	mov	r4,r17
  8046c8:	d9800015 	stw	r6,0(sp)
  8046cc:	08060340 	call	806034 <_fflush_r>
  8046d0:	d9800017 	ldw	r6,0(sp)
  8046d4:	103fe51e 	bne	r2,zero,80466c <__swbuf_r+0xb8>
  8046d8:	31000017 	ldw	r4,0(r6)
  8046dc:	01400044 	movi	r5,1
  8046e0:	003fc906 	br	804608 <__swbuf_r+0x54>

008046e4 <__swbuf>:
  8046e4:	01802074 	movhi	r6,129
  8046e8:	31bce204 	addi	r6,r6,-3192
  8046ec:	2007883a 	mov	r3,r4
  8046f0:	31000017 	ldw	r4,0(r6)
  8046f4:	280d883a 	mov	r6,r5
  8046f8:	180b883a 	mov	r5,r3
  8046fc:	08045b41 	jmpi	8045b4 <__swbuf_r>

00804700 <__swsetup_r>:
  804700:	00802074 	movhi	r2,129
  804704:	10bce204 	addi	r2,r2,-3192
  804708:	10c00017 	ldw	r3,0(r2)
  80470c:	defffd04 	addi	sp,sp,-12
  804710:	dc400115 	stw	r17,4(sp)
  804714:	dc000015 	stw	r16,0(sp)
  804718:	dfc00215 	stw	ra,8(sp)
  80471c:	2023883a 	mov	r17,r4
  804720:	2821883a 	mov	r16,r5
  804724:	18000226 	beq	r3,zero,804730 <__swsetup_r+0x30>
  804728:	18800e17 	ldw	r2,56(r3)
  80472c:	10001f26 	beq	r2,zero,8047ac <__swsetup_r+0xac>
  804730:	8100030b 	ldhu	r4,12(r16)
  804734:	2080020c 	andi	r2,r4,8
  804738:	10002826 	beq	r2,zero,8047dc <__swsetup_r+0xdc>
  80473c:	81400417 	ldw	r5,16(r16)
  804740:	28001d26 	beq	r5,zero,8047b8 <__swsetup_r+0xb8>
  804744:	2080004c 	andi	r2,r4,1
  804748:	1005003a 	cmpeq	r2,r2,zero
  80474c:	10000b26 	beq	r2,zero,80477c <__swsetup_r+0x7c>
  804750:	2080008c 	andi	r2,r4,2
  804754:	10001226 	beq	r2,zero,8047a0 <__swsetup_r+0xa0>
  804758:	0005883a 	mov	r2,zero
  80475c:	80800215 	stw	r2,8(r16)
  804760:	28000b26 	beq	r5,zero,804790 <__swsetup_r+0x90>
  804764:	0005883a 	mov	r2,zero
  804768:	dfc00217 	ldw	ra,8(sp)
  80476c:	dc400117 	ldw	r17,4(sp)
  804770:	dc000017 	ldw	r16,0(sp)
  804774:	dec00304 	addi	sp,sp,12
  804778:	f800283a 	ret
  80477c:	80800517 	ldw	r2,20(r16)
  804780:	80000215 	stw	zero,8(r16)
  804784:	0085c83a 	sub	r2,zero,r2
  804788:	80800615 	stw	r2,24(r16)
  80478c:	283ff51e 	bne	r5,zero,804764 <__swsetup_r+0x64>
  804790:	2080200c 	andi	r2,r4,128
  804794:	103ff326 	beq	r2,zero,804764 <__swsetup_r+0x64>
  804798:	00bfffc4 	movi	r2,-1
  80479c:	003ff206 	br	804768 <__swsetup_r+0x68>
  8047a0:	80800517 	ldw	r2,20(r16)
  8047a4:	80800215 	stw	r2,8(r16)
  8047a8:	003fed06 	br	804760 <__swsetup_r+0x60>
  8047ac:	1809883a 	mov	r4,r3
  8047b0:	08062cc0 	call	8062cc <__sinit>
  8047b4:	003fde06 	br	804730 <__swsetup_r+0x30>
  8047b8:	20c0a00c 	andi	r3,r4,640
  8047bc:	00808004 	movi	r2,512
  8047c0:	18bfe026 	beq	r3,r2,804744 <__swsetup_r+0x44>
  8047c4:	8809883a 	mov	r4,r17
  8047c8:	800b883a 	mov	r5,r16
  8047cc:	08070780 	call	807078 <__smakebuf_r>
  8047d0:	8100030b 	ldhu	r4,12(r16)
  8047d4:	81400417 	ldw	r5,16(r16)
  8047d8:	003fda06 	br	804744 <__swsetup_r+0x44>
  8047dc:	2080040c 	andi	r2,r4,16
  8047e0:	103fed26 	beq	r2,zero,804798 <__swsetup_r+0x98>
  8047e4:	2080010c 	andi	r2,r4,4
  8047e8:	10001226 	beq	r2,zero,804834 <__swsetup_r+0x134>
  8047ec:	81400c17 	ldw	r5,48(r16)
  8047f0:	28000526 	beq	r5,zero,804808 <__swsetup_r+0x108>
  8047f4:	80801004 	addi	r2,r16,64
  8047f8:	28800226 	beq	r5,r2,804804 <__swsetup_r+0x104>
  8047fc:	8809883a 	mov	r4,r17
  804800:	08066840 	call	806684 <_free_r>
  804804:	80000c15 	stw	zero,48(r16)
  804808:	8080030b 	ldhu	r2,12(r16)
  80480c:	81400417 	ldw	r5,16(r16)
  804810:	80000115 	stw	zero,4(r16)
  804814:	10bff6cc 	andi	r2,r2,65499
  804818:	8080030d 	sth	r2,12(r16)
  80481c:	81400015 	stw	r5,0(r16)
  804820:	8080030b 	ldhu	r2,12(r16)
  804824:	10800214 	ori	r2,r2,8
  804828:	113fffcc 	andi	r4,r2,65535
  80482c:	8080030d 	sth	r2,12(r16)
  804830:	003fc306 	br	804740 <__swsetup_r+0x40>
  804834:	81400417 	ldw	r5,16(r16)
  804838:	003ff906 	br	804820 <__swsetup_r+0x120>

0080483c <quorem>:
  80483c:	28c00417 	ldw	r3,16(r5)
  804840:	20800417 	ldw	r2,16(r4)
  804844:	defff104 	addi	sp,sp,-60
  804848:	dfc00e15 	stw	ra,56(sp)
  80484c:	df000d15 	stw	fp,52(sp)
  804850:	ddc00c15 	stw	r23,48(sp)
  804854:	dd800b15 	stw	r22,44(sp)
  804858:	dd400a15 	stw	r21,40(sp)
  80485c:	dd000915 	stw	r20,36(sp)
  804860:	dcc00815 	stw	r19,32(sp)
  804864:	dc800715 	stw	r18,28(sp)
  804868:	dc400615 	stw	r17,24(sp)
  80486c:	dc000515 	stw	r16,20(sp)
  804870:	d9000315 	stw	r4,12(sp)
  804874:	d9400415 	stw	r5,16(sp)
  804878:	10c07f16 	blt	r2,r3,804a78 <quorem+0x23c>
  80487c:	1d3fffc4 	addi	r20,r3,-1
  804880:	d8c00417 	ldw	r3,16(sp)
  804884:	d9000317 	ldw	r4,12(sp)
  804888:	a505883a 	add	r2,r20,r20
  80488c:	1085883a 	add	r2,r2,r2
  804890:	1cc00504 	addi	r19,r3,20
  804894:	25c00504 	addi	r23,r4,20
  804898:	98ad883a 	add	r22,r19,r2
  80489c:	15c7883a 	add	r3,r2,r23
  8048a0:	b1400017 	ldw	r5,0(r22)
  8048a4:	19000017 	ldw	r4,0(r3)
  8048a8:	d8c00015 	stw	r3,0(sp)
  8048ac:	29400044 	addi	r5,r5,1
  8048b0:	d9000215 	stw	r4,8(sp)
  8048b4:	0801bd80 	call	801bd8 <__udivsi3>
  8048b8:	1039883a 	mov	fp,r2
  8048bc:	10003d1e 	bne	r2,zero,8049b4 <quorem+0x178>
  8048c0:	d9400417 	ldw	r5,16(sp)
  8048c4:	d9000317 	ldw	r4,12(sp)
  8048c8:	0807da40 	call	807da4 <__mcmp>
  8048cc:	10002c16 	blt	r2,zero,804980 <quorem+0x144>
  8048d0:	e7000044 	addi	fp,fp,1
  8048d4:	b80f883a 	mov	r7,r23
  8048d8:	0011883a 	mov	r8,zero
  8048dc:	0009883a 	mov	r4,zero
  8048e0:	99400017 	ldw	r5,0(r19)
  8048e4:	38c00017 	ldw	r3,0(r7)
  8048e8:	9cc00104 	addi	r19,r19,4
  8048ec:	28bfffcc 	andi	r2,r5,65535
  8048f0:	2085883a 	add	r2,r4,r2
  8048f4:	11bfffcc 	andi	r6,r2,65535
  8048f8:	193fffcc 	andi	r4,r3,65535
  8048fc:	1004d43a 	srli	r2,r2,16
  804900:	280ad43a 	srli	r5,r5,16
  804904:	2189c83a 	sub	r4,r4,r6
  804908:	2209883a 	add	r4,r4,r8
  80490c:	1806d43a 	srli	r3,r3,16
  804910:	288b883a 	add	r5,r5,r2
  804914:	200dd43a 	srai	r6,r4,16
  804918:	28bfffcc 	andi	r2,r5,65535
  80491c:	1887c83a 	sub	r3,r3,r2
  804920:	1987883a 	add	r3,r3,r6
  804924:	3900000d 	sth	r4,0(r7)
  804928:	38c0008d 	sth	r3,2(r7)
  80492c:	2808d43a 	srli	r4,r5,16
  804930:	39c00104 	addi	r7,r7,4
  804934:	1811d43a 	srai	r8,r3,16
  804938:	b4ffe92e 	bgeu	r22,r19,8048e0 <quorem+0xa4>
  80493c:	a505883a 	add	r2,r20,r20
  804940:	1085883a 	add	r2,r2,r2
  804944:	b885883a 	add	r2,r23,r2
  804948:	10c00017 	ldw	r3,0(r2)
  80494c:	18000c1e 	bne	r3,zero,804980 <quorem+0x144>
  804950:	113fff04 	addi	r4,r2,-4
  804954:	b900082e 	bgeu	r23,r4,804978 <quorem+0x13c>
  804958:	10bfff17 	ldw	r2,-4(r2)
  80495c:	10000326 	beq	r2,zero,80496c <quorem+0x130>
  804960:	00000506 	br	804978 <quorem+0x13c>
  804964:	20800017 	ldw	r2,0(r4)
  804968:	1000031e 	bne	r2,zero,804978 <quorem+0x13c>
  80496c:	213fff04 	addi	r4,r4,-4
  804970:	a53fffc4 	addi	r20,r20,-1
  804974:	b93ffb36 	bltu	r23,r4,804964 <quorem+0x128>
  804978:	d9000317 	ldw	r4,12(sp)
  80497c:	25000415 	stw	r20,16(r4)
  804980:	e005883a 	mov	r2,fp
  804984:	dfc00e17 	ldw	ra,56(sp)
  804988:	df000d17 	ldw	fp,52(sp)
  80498c:	ddc00c17 	ldw	r23,48(sp)
  804990:	dd800b17 	ldw	r22,44(sp)
  804994:	dd400a17 	ldw	r21,40(sp)
  804998:	dd000917 	ldw	r20,36(sp)
  80499c:	dcc00817 	ldw	r19,32(sp)
  8049a0:	dc800717 	ldw	r18,28(sp)
  8049a4:	dc400617 	ldw	r17,24(sp)
  8049a8:	dc000517 	ldw	r16,20(sp)
  8049ac:	dec00f04 	addi	sp,sp,60
  8049b0:	f800283a 	ret
  8049b4:	b823883a 	mov	r17,r23
  8049b8:	9825883a 	mov	r18,r19
  8049bc:	d8000115 	stw	zero,4(sp)
  8049c0:	002b883a 	mov	r21,zero
  8049c4:	94000017 	ldw	r16,0(r18)
  8049c8:	e009883a 	mov	r4,fp
  8049cc:	94800104 	addi	r18,r18,4
  8049d0:	817fffcc 	andi	r5,r16,65535
  8049d4:	0801be80 	call	801be8 <__mulsi3>
  8049d8:	800ad43a 	srli	r5,r16,16
  8049dc:	e009883a 	mov	r4,fp
  8049e0:	a8a1883a 	add	r16,r21,r2
  8049e4:	0801be80 	call	801be8 <__mulsi3>
  8049e8:	89000017 	ldw	r4,0(r17)
  8049ec:	80ffffcc 	andi	r3,r16,65535
  8049f0:	8020d43a 	srli	r16,r16,16
  8049f4:	217fffcc 	andi	r5,r4,65535
  8049f8:	28cbc83a 	sub	r5,r5,r3
  8049fc:	d8c00117 	ldw	r3,4(sp)
  804a00:	2008d43a 	srli	r4,r4,16
  804a04:	1405883a 	add	r2,r2,r16
  804a08:	28cb883a 	add	r5,r5,r3
  804a0c:	280dd43a 	srai	r6,r5,16
  804a10:	10ffffcc 	andi	r3,r2,65535
  804a14:	20c9c83a 	sub	r4,r4,r3
  804a18:	2189883a 	add	r4,r4,r6
  804a1c:	8900008d 	sth	r4,2(r17)
  804a20:	2009d43a 	srai	r4,r4,16
  804a24:	8940000d 	sth	r5,0(r17)
  804a28:	102ad43a 	srli	r21,r2,16
  804a2c:	8c400104 	addi	r17,r17,4
  804a30:	d9000115 	stw	r4,4(sp)
  804a34:	b4bfe32e 	bgeu	r22,r18,8049c4 <quorem+0x188>
  804a38:	d9000217 	ldw	r4,8(sp)
  804a3c:	203fa01e 	bne	r4,zero,8048c0 <quorem+0x84>
  804a40:	d8800017 	ldw	r2,0(sp)
  804a44:	10ffff04 	addi	r3,r2,-4
  804a48:	b8c0082e 	bgeu	r23,r3,804a6c <quorem+0x230>
  804a4c:	10bfff17 	ldw	r2,-4(r2)
  804a50:	10000326 	beq	r2,zero,804a60 <quorem+0x224>
  804a54:	00000506 	br	804a6c <quorem+0x230>
  804a58:	18800017 	ldw	r2,0(r3)
  804a5c:	1000031e 	bne	r2,zero,804a6c <quorem+0x230>
  804a60:	18ffff04 	addi	r3,r3,-4
  804a64:	a53fffc4 	addi	r20,r20,-1
  804a68:	b8fffb36 	bltu	r23,r3,804a58 <quorem+0x21c>
  804a6c:	d8c00317 	ldw	r3,12(sp)
  804a70:	1d000415 	stw	r20,16(r3)
  804a74:	003f9206 	br	8048c0 <quorem+0x84>
  804a78:	0005883a 	mov	r2,zero
  804a7c:	003fc106 	br	804984 <quorem+0x148>

00804a80 <_dtoa_r>:
  804a80:	22001017 	ldw	r8,64(r4)
  804a84:	deffda04 	addi	sp,sp,-152
  804a88:	dd402115 	stw	r21,132(sp)
  804a8c:	dd002015 	stw	r20,128(sp)
  804a90:	dc801e15 	stw	r18,120(sp)
  804a94:	dc401d15 	stw	r17,116(sp)
  804a98:	dfc02515 	stw	ra,148(sp)
  804a9c:	df002415 	stw	fp,144(sp)
  804aa0:	ddc02315 	stw	r23,140(sp)
  804aa4:	dd802215 	stw	r22,136(sp)
  804aa8:	dcc01f15 	stw	r19,124(sp)
  804aac:	dc001c15 	stw	r16,112(sp)
  804ab0:	d9001615 	stw	r4,88(sp)
  804ab4:	3023883a 	mov	r17,r6
  804ab8:	2829883a 	mov	r20,r5
  804abc:	d9c01715 	stw	r7,92(sp)
  804ac0:	dc802817 	ldw	r18,160(sp)
  804ac4:	302b883a 	mov	r21,r6
  804ac8:	40000a26 	beq	r8,zero,804af4 <_dtoa_r+0x74>
  804acc:	20801117 	ldw	r2,68(r4)
  804ad0:	400b883a 	mov	r5,r8
  804ad4:	40800115 	stw	r2,4(r8)
  804ad8:	20c01117 	ldw	r3,68(r4)
  804adc:	00800044 	movi	r2,1
  804ae0:	10c4983a 	sll	r2,r2,r3
  804ae4:	40800215 	stw	r2,8(r8)
  804ae8:	0807c480 	call	807c48 <_Bfree>
  804aec:	d8c01617 	ldw	r3,88(sp)
  804af0:	18001015 	stw	zero,64(r3)
  804af4:	8800a316 	blt	r17,zero,804d84 <_dtoa_r+0x304>
  804af8:	90000015 	stw	zero,0(r18)
  804afc:	a8dffc2c 	andhi	r3,r21,32752
  804b00:	009ffc34 	movhi	r2,32752
  804b04:	18809126 	beq	r3,r2,804d4c <_dtoa_r+0x2cc>
  804b08:	000d883a 	mov	r6,zero
  804b0c:	000f883a 	mov	r7,zero
  804b10:	a009883a 	mov	r4,r20
  804b14:	a80b883a 	mov	r5,r21
  804b18:	dd001215 	stw	r20,72(sp)
  804b1c:	dd401315 	stw	r21,76(sp)
  804b20:	080a77c0 	call	80a77c <__nedf2>
  804b24:	1000171e 	bne	r2,zero,804b84 <_dtoa_r+0x104>
  804b28:	d9802717 	ldw	r6,156(sp)
  804b2c:	00800044 	movi	r2,1
  804b30:	30800015 	stw	r2,0(r6)
  804b34:	d8802917 	ldw	r2,164(sp)
  804b38:	10029b26 	beq	r2,zero,8055a8 <_dtoa_r+0xb28>
  804b3c:	d9002917 	ldw	r4,164(sp)
  804b40:	00802074 	movhi	r2,129
  804b44:	10b5e344 	addi	r2,r2,-10355
  804b48:	10ffffc4 	addi	r3,r2,-1
  804b4c:	20800015 	stw	r2,0(r4)
  804b50:	1805883a 	mov	r2,r3
  804b54:	dfc02517 	ldw	ra,148(sp)
  804b58:	df002417 	ldw	fp,144(sp)
  804b5c:	ddc02317 	ldw	r23,140(sp)
  804b60:	dd802217 	ldw	r22,136(sp)
  804b64:	dd402117 	ldw	r21,132(sp)
  804b68:	dd002017 	ldw	r20,128(sp)
  804b6c:	dcc01f17 	ldw	r19,124(sp)
  804b70:	dc801e17 	ldw	r18,120(sp)
  804b74:	dc401d17 	ldw	r17,116(sp)
  804b78:	dc001c17 	ldw	r16,112(sp)
  804b7c:	dec02604 	addi	sp,sp,152
  804b80:	f800283a 	ret
  804b84:	d9001617 	ldw	r4,88(sp)
  804b88:	d9401217 	ldw	r5,72(sp)
  804b8c:	d8800104 	addi	r2,sp,4
  804b90:	a80d883a 	mov	r6,r21
  804b94:	d9c00204 	addi	r7,sp,8
  804b98:	d8800015 	stw	r2,0(sp)
  804b9c:	08082840 	call	808284 <__d2b>
  804ba0:	d8800715 	stw	r2,28(sp)
  804ba4:	a804d53a 	srli	r2,r21,20
  804ba8:	1101ffcc 	andi	r4,r2,2047
  804bac:	20008626 	beq	r4,zero,804dc8 <_dtoa_r+0x348>
  804bb0:	d8c01217 	ldw	r3,72(sp)
  804bb4:	00800434 	movhi	r2,16
  804bb8:	10bfffc4 	addi	r2,r2,-1
  804bbc:	ddc00117 	ldw	r23,4(sp)
  804bc0:	a884703a 	and	r2,r21,r2
  804bc4:	1811883a 	mov	r8,r3
  804bc8:	124ffc34 	orhi	r9,r2,16368
  804bcc:	25bf0044 	addi	r22,r4,-1023
  804bd0:	d8000815 	stw	zero,32(sp)
  804bd4:	0005883a 	mov	r2,zero
  804bd8:	00cffe34 	movhi	r3,16376
  804bdc:	480b883a 	mov	r5,r9
  804be0:	4009883a 	mov	r4,r8
  804be4:	180f883a 	mov	r7,r3
  804be8:	100d883a 	mov	r6,r2
  804bec:	08011840 	call	801184 <__subdf3>
  804bf0:	0218dbf4 	movhi	r8,25455
  804bf4:	4210d844 	addi	r8,r8,17249
  804bf8:	024ff4f4 	movhi	r9,16339
  804bfc:	4a61e9c4 	addi	r9,r9,-30809
  804c00:	480f883a 	mov	r7,r9
  804c04:	400d883a 	mov	r6,r8
  804c08:	180b883a 	mov	r5,r3
  804c0c:	1009883a 	mov	r4,r2
  804c10:	08012780 	call	801278 <__muldf3>
  804c14:	0222d874 	movhi	r8,35681
  804c18:	42322cc4 	addi	r8,r8,-14157
  804c1c:	024ff1f4 	movhi	r9,16327
  804c20:	4a628a04 	addi	r9,r9,-30168
  804c24:	480f883a 	mov	r7,r9
  804c28:	400d883a 	mov	r6,r8
  804c2c:	180b883a 	mov	r5,r3
  804c30:	1009883a 	mov	r4,r2
  804c34:	08012040 	call	801204 <__adddf3>
  804c38:	b009883a 	mov	r4,r22
  804c3c:	1021883a 	mov	r16,r2
  804c40:	1823883a 	mov	r17,r3
  804c44:	08019a40 	call	8019a4 <__floatsidf>
  804c48:	021427f4 	movhi	r8,20639
  804c4c:	421e7ec4 	addi	r8,r8,31227
  804c50:	024ff4f4 	movhi	r9,16339
  804c54:	4a5104c4 	addi	r9,r9,17427
  804c58:	480f883a 	mov	r7,r9
  804c5c:	400d883a 	mov	r6,r8
  804c60:	180b883a 	mov	r5,r3
  804c64:	1009883a 	mov	r4,r2
  804c68:	08012780 	call	801278 <__muldf3>
  804c6c:	180f883a 	mov	r7,r3
  804c70:	880b883a 	mov	r5,r17
  804c74:	100d883a 	mov	r6,r2
  804c78:	8009883a 	mov	r4,r16
  804c7c:	08012040 	call	801204 <__adddf3>
  804c80:	1009883a 	mov	r4,r2
  804c84:	180b883a 	mov	r5,r3
  804c88:	1021883a 	mov	r16,r2
  804c8c:	1823883a 	mov	r17,r3
  804c90:	080a9140 	call	80a914 <__fixdfsi>
  804c94:	000d883a 	mov	r6,zero
  804c98:	000f883a 	mov	r7,zero
  804c9c:	8009883a 	mov	r4,r16
  804ca0:	880b883a 	mov	r5,r17
  804ca4:	d8800d15 	stw	r2,52(sp)
  804ca8:	08018940 	call	801894 <__ltdf2>
  804cac:	10031716 	blt	r2,zero,80590c <_dtoa_r+0xe8c>
  804cb0:	d8c00d17 	ldw	r3,52(sp)
  804cb4:	00800584 	movi	r2,22
  804cb8:	10c1482e 	bgeu	r2,r3,8051dc <_dtoa_r+0x75c>
  804cbc:	01000044 	movi	r4,1
  804cc0:	d9000c15 	stw	r4,48(sp)
  804cc4:	bd85c83a 	sub	r2,r23,r22
  804cc8:	11bfffc4 	addi	r6,r2,-1
  804ccc:	30030b16 	blt	r6,zero,8058fc <_dtoa_r+0xe7c>
  804cd0:	d9800a15 	stw	r6,40(sp)
  804cd4:	d8001115 	stw	zero,68(sp)
  804cd8:	d8c00d17 	ldw	r3,52(sp)
  804cdc:	1802ff16 	blt	r3,zero,8058dc <_dtoa_r+0xe5c>
  804ce0:	d9000a17 	ldw	r4,40(sp)
  804ce4:	d8c00915 	stw	r3,36(sp)
  804ce8:	d8001015 	stw	zero,64(sp)
  804cec:	20c9883a 	add	r4,r4,r3
  804cf0:	d9000a15 	stw	r4,40(sp)
  804cf4:	d9001717 	ldw	r4,92(sp)
  804cf8:	00800244 	movi	r2,9
  804cfc:	11004636 	bltu	r2,r4,804e18 <_dtoa_r+0x398>
  804d00:	00800144 	movi	r2,5
  804d04:	11020416 	blt	r2,r4,805518 <_dtoa_r+0xa98>
  804d08:	04400044 	movi	r17,1
  804d0c:	d8c01717 	ldw	r3,92(sp)
  804d10:	00800144 	movi	r2,5
  804d14:	10c1ed36 	bltu	r2,r3,8054cc <_dtoa_r+0xa4c>
  804d18:	18c5883a 	add	r2,r3,r3
  804d1c:	1085883a 	add	r2,r2,r2
  804d20:	00c02034 	movhi	r3,128
  804d24:	18d34d04 	addi	r3,r3,19764
  804d28:	10c5883a 	add	r2,r2,r3
  804d2c:	11000017 	ldw	r4,0(r2)
  804d30:	2000683a 	jmp	r4
  804d34:	00804e20 	cmpeqi	r2,zero,312
  804d38:	00804e20 	cmpeqi	r2,zero,312
  804d3c:	00805820 	cmpeqi	r2,zero,352
  804d40:	008057f8 	rdprs	r2,zero,351
  804d44:	0080583c 	xorhi	r2,zero,352
  804d48:	00805848 	cmpgei	r2,zero,353
  804d4c:	d9002717 	ldw	r4,156(sp)
  804d50:	0089c3c4 	movi	r2,9999
  804d54:	20800015 	stw	r2,0(r4)
  804d58:	a0001026 	beq	r20,zero,804d9c <_dtoa_r+0x31c>
  804d5c:	00c02074 	movhi	r3,129
  804d60:	18f5ef04 	addi	r3,r3,-10308
  804d64:	d9802917 	ldw	r6,164(sp)
  804d68:	303f7926 	beq	r6,zero,804b50 <_dtoa_r+0xd0>
  804d6c:	188000c7 	ldb	r2,3(r3)
  804d70:	190000c4 	addi	r4,r3,3
  804d74:	1000101e 	bne	r2,zero,804db8 <_dtoa_r+0x338>
  804d78:	d8802917 	ldw	r2,164(sp)
  804d7c:	11000015 	stw	r4,0(r2)
  804d80:	003f7306 	br	804b50 <_dtoa_r+0xd0>
  804d84:	00a00034 	movhi	r2,32768
  804d88:	10bfffc4 	addi	r2,r2,-1
  804d8c:	00c00044 	movi	r3,1
  804d90:	88aa703a 	and	r21,r17,r2
  804d94:	90c00015 	stw	r3,0(r18)
  804d98:	003f5806 	br	804afc <_dtoa_r+0x7c>
  804d9c:	00800434 	movhi	r2,16
  804da0:	10bfffc4 	addi	r2,r2,-1
  804da4:	a884703a 	and	r2,r21,r2
  804da8:	103fec1e 	bne	r2,zero,804d5c <_dtoa_r+0x2dc>
  804dac:	00c02074 	movhi	r3,129
  804db0:	18f5ec04 	addi	r3,r3,-10320
  804db4:	003feb06 	br	804d64 <_dtoa_r+0x2e4>
  804db8:	d8802917 	ldw	r2,164(sp)
  804dbc:	19000204 	addi	r4,r3,8
  804dc0:	11000015 	stw	r4,0(r2)
  804dc4:	003f6206 	br	804b50 <_dtoa_r+0xd0>
  804dc8:	ddc00117 	ldw	r23,4(sp)
  804dcc:	d8800217 	ldw	r2,8(sp)
  804dd0:	01000804 	movi	r4,32
  804dd4:	b8c10c84 	addi	r3,r23,1074
  804dd8:	18a3883a 	add	r17,r3,r2
  804ddc:	2441b80e 	bge	r4,r17,8054c0 <_dtoa_r+0xa40>
  804de0:	00c01004 	movi	r3,64
  804de4:	1c47c83a 	sub	r3,r3,r17
  804de8:	88bff804 	addi	r2,r17,-32
  804dec:	a8c6983a 	sll	r3,r21,r3
  804df0:	a084d83a 	srl	r2,r20,r2
  804df4:	1888b03a 	or	r4,r3,r2
  804df8:	080a9ec0 	call	80a9ec <__floatunsidf>
  804dfc:	1011883a 	mov	r8,r2
  804e00:	00bf8434 	movhi	r2,65040
  804e04:	01000044 	movi	r4,1
  804e08:	10d3883a 	add	r9,r2,r3
  804e0c:	8dbef344 	addi	r22,r17,-1075
  804e10:	d9000815 	stw	r4,32(sp)
  804e14:	003f6f06 	br	804bd4 <_dtoa_r+0x154>
  804e18:	d8001715 	stw	zero,92(sp)
  804e1c:	04400044 	movi	r17,1
  804e20:	00bfffc4 	movi	r2,-1
  804e24:	00c00044 	movi	r3,1
  804e28:	d8800e15 	stw	r2,56(sp)
  804e2c:	d8002615 	stw	zero,152(sp)
  804e30:	d8800f15 	stw	r2,60(sp)
  804e34:	d8c00b15 	stw	r3,44(sp)
  804e38:	1021883a 	mov	r16,r2
  804e3c:	d8801617 	ldw	r2,88(sp)
  804e40:	10001115 	stw	zero,68(r2)
  804e44:	d8801617 	ldw	r2,88(sp)
  804e48:	11401117 	ldw	r5,68(r2)
  804e4c:	1009883a 	mov	r4,r2
  804e50:	08081c80 	call	8081c8 <_Balloc>
  804e54:	d8c01617 	ldw	r3,88(sp)
  804e58:	d8800515 	stw	r2,20(sp)
  804e5c:	18801015 	stw	r2,64(r3)
  804e60:	00800384 	movi	r2,14
  804e64:	14006836 	bltu	r2,r16,805008 <_dtoa_r+0x588>
  804e68:	8805003a 	cmpeq	r2,r17,zero
  804e6c:	1000661e 	bne	r2,zero,805008 <_dtoa_r+0x588>
  804e70:	d9000d17 	ldw	r4,52(sp)
  804e74:	0102300e 	bge	zero,r4,805738 <_dtoa_r+0xcb8>
  804e78:	208003cc 	andi	r2,r4,15
  804e7c:	100490fa 	slli	r2,r2,3
  804e80:	2025d13a 	srai	r18,r4,4
  804e84:	00c02074 	movhi	r3,129
  804e88:	18f60004 	addi	r3,r3,-10240
  804e8c:	10c5883a 	add	r2,r2,r3
  804e90:	90c0040c 	andi	r3,r18,16
  804e94:	14000017 	ldw	r16,0(r2)
  804e98:	14400117 	ldw	r17,4(r2)
  804e9c:	18036a1e 	bne	r3,zero,805c48 <_dtoa_r+0x11c8>
  804ea0:	05800084 	movi	r22,2
  804ea4:	90001026 	beq	r18,zero,804ee8 <_dtoa_r+0x468>
  804ea8:	04c02074 	movhi	r19,129
  804eac:	9cf63204 	addi	r19,r19,-10040
  804eb0:	9080004c 	andi	r2,r18,1
  804eb4:	1005003a 	cmpeq	r2,r2,zero
  804eb8:	1000081e 	bne	r2,zero,804edc <_dtoa_r+0x45c>
  804ebc:	99800017 	ldw	r6,0(r19)
  804ec0:	99c00117 	ldw	r7,4(r19)
  804ec4:	880b883a 	mov	r5,r17
  804ec8:	8009883a 	mov	r4,r16
  804ecc:	08012780 	call	801278 <__muldf3>
  804ed0:	1021883a 	mov	r16,r2
  804ed4:	b5800044 	addi	r22,r22,1
  804ed8:	1823883a 	mov	r17,r3
  804edc:	9025d07a 	srai	r18,r18,1
  804ee0:	9cc00204 	addi	r19,r19,8
  804ee4:	903ff21e 	bne	r18,zero,804eb0 <_dtoa_r+0x430>
  804ee8:	a80b883a 	mov	r5,r21
  804eec:	a009883a 	mov	r4,r20
  804ef0:	880f883a 	mov	r7,r17
  804ef4:	800d883a 	mov	r6,r16
  804ef8:	080163c0 	call	80163c <__divdf3>
  804efc:	1029883a 	mov	r20,r2
  804f00:	182b883a 	mov	r21,r3
  804f04:	d8c00c17 	ldw	r3,48(sp)
  804f08:	1805003a 	cmpeq	r2,r3,zero
  804f0c:	1000081e 	bne	r2,zero,804f30 <_dtoa_r+0x4b0>
  804f10:	0005883a 	mov	r2,zero
  804f14:	00cffc34 	movhi	r3,16368
  804f18:	180f883a 	mov	r7,r3
  804f1c:	a009883a 	mov	r4,r20
  804f20:	a80b883a 	mov	r5,r21
  804f24:	100d883a 	mov	r6,r2
  804f28:	08018940 	call	801894 <__ltdf2>
  804f2c:	1003fe16 	blt	r2,zero,805f28 <_dtoa_r+0x14a8>
  804f30:	b009883a 	mov	r4,r22
  804f34:	08019a40 	call	8019a4 <__floatsidf>
  804f38:	180b883a 	mov	r5,r3
  804f3c:	1009883a 	mov	r4,r2
  804f40:	a00d883a 	mov	r6,r20
  804f44:	a80f883a 	mov	r7,r21
  804f48:	08012780 	call	801278 <__muldf3>
  804f4c:	0011883a 	mov	r8,zero
  804f50:	02500734 	movhi	r9,16412
  804f54:	1009883a 	mov	r4,r2
  804f58:	180b883a 	mov	r5,r3
  804f5c:	480f883a 	mov	r7,r9
  804f60:	400d883a 	mov	r6,r8
  804f64:	08012040 	call	801204 <__adddf3>
  804f68:	d9000f17 	ldw	r4,60(sp)
  804f6c:	102d883a 	mov	r22,r2
  804f70:	00bf3034 	movhi	r2,64704
  804f74:	18b9883a 	add	fp,r3,r2
  804f78:	e02f883a 	mov	r23,fp
  804f7c:	20028f1e 	bne	r4,zero,8059bc <_dtoa_r+0xf3c>
  804f80:	0005883a 	mov	r2,zero
  804f84:	00d00534 	movhi	r3,16404
  804f88:	a009883a 	mov	r4,r20
  804f8c:	a80b883a 	mov	r5,r21
  804f90:	180f883a 	mov	r7,r3
  804f94:	100d883a 	mov	r6,r2
  804f98:	08011840 	call	801184 <__subdf3>
  804f9c:	1009883a 	mov	r4,r2
  804fa0:	e00f883a 	mov	r7,fp
  804fa4:	180b883a 	mov	r5,r3
  804fa8:	b00d883a 	mov	r6,r22
  804fac:	1025883a 	mov	r18,r2
  804fb0:	1827883a 	mov	r19,r3
  804fb4:	080a8040 	call	80a804 <__gtdf2>
  804fb8:	00834f16 	blt	zero,r2,805cf8 <_dtoa_r+0x1278>
  804fbc:	e0e0003c 	xorhi	r3,fp,32768
  804fc0:	9009883a 	mov	r4,r18
  804fc4:	980b883a 	mov	r5,r19
  804fc8:	180f883a 	mov	r7,r3
  804fcc:	b00d883a 	mov	r6,r22
  804fd0:	08018940 	call	801894 <__ltdf2>
  804fd4:	1000080e 	bge	r2,zero,804ff8 <_dtoa_r+0x578>
  804fd8:	0027883a 	mov	r19,zero
  804fdc:	0025883a 	mov	r18,zero
  804fe0:	d8802617 	ldw	r2,152(sp)
  804fe4:	df000517 	ldw	fp,20(sp)
  804fe8:	d8000615 	stw	zero,24(sp)
  804fec:	0084303a 	nor	r2,zero,r2
  804ff0:	d8800d15 	stw	r2,52(sp)
  804ff4:	00019b06 	br	805664 <_dtoa_r+0xbe4>
  804ff8:	d9801217 	ldw	r6,72(sp)
  804ffc:	d8801317 	ldw	r2,76(sp)
  805000:	3029883a 	mov	r20,r6
  805004:	102b883a 	mov	r21,r2
  805008:	d8c00217 	ldw	r3,8(sp)
  80500c:	18008516 	blt	r3,zero,805224 <_dtoa_r+0x7a4>
  805010:	d9000d17 	ldw	r4,52(sp)
  805014:	00800384 	movi	r2,14
  805018:	11008216 	blt	r2,r4,805224 <_dtoa_r+0x7a4>
  80501c:	200490fa 	slli	r2,r4,3
  805020:	d9802617 	ldw	r6,152(sp)
  805024:	00c02074 	movhi	r3,129
  805028:	18f60004 	addi	r3,r3,-10240
  80502c:	10c5883a 	add	r2,r2,r3
  805030:	14800017 	ldw	r18,0(r2)
  805034:	14c00117 	ldw	r19,4(r2)
  805038:	30031e16 	blt	r6,zero,805cb4 <_dtoa_r+0x1234>
  80503c:	d9000517 	ldw	r4,20(sp)
  805040:	d8c00f17 	ldw	r3,60(sp)
  805044:	a823883a 	mov	r17,r21
  805048:	a021883a 	mov	r16,r20
  80504c:	192b883a 	add	r21,r3,r4
  805050:	2039883a 	mov	fp,r4
  805054:	00000f06 	br	805094 <_dtoa_r+0x614>
  805058:	0005883a 	mov	r2,zero
  80505c:	00d00934 	movhi	r3,16420
  805060:	5009883a 	mov	r4,r10
  805064:	580b883a 	mov	r5,r11
  805068:	180f883a 	mov	r7,r3
  80506c:	100d883a 	mov	r6,r2
  805070:	08012780 	call	801278 <__muldf3>
  805074:	180b883a 	mov	r5,r3
  805078:	000d883a 	mov	r6,zero
  80507c:	000f883a 	mov	r7,zero
  805080:	1009883a 	mov	r4,r2
  805084:	1021883a 	mov	r16,r2
  805088:	1823883a 	mov	r17,r3
  80508c:	080a77c0 	call	80a77c <__nedf2>
  805090:	10004526 	beq	r2,zero,8051a8 <_dtoa_r+0x728>
  805094:	900d883a 	mov	r6,r18
  805098:	980f883a 	mov	r7,r19
  80509c:	8009883a 	mov	r4,r16
  8050a0:	880b883a 	mov	r5,r17
  8050a4:	080163c0 	call	80163c <__divdf3>
  8050a8:	180b883a 	mov	r5,r3
  8050ac:	1009883a 	mov	r4,r2
  8050b0:	080a9140 	call	80a914 <__fixdfsi>
  8050b4:	1009883a 	mov	r4,r2
  8050b8:	1029883a 	mov	r20,r2
  8050bc:	08019a40 	call	8019a4 <__floatsidf>
  8050c0:	180f883a 	mov	r7,r3
  8050c4:	9009883a 	mov	r4,r18
  8050c8:	980b883a 	mov	r5,r19
  8050cc:	100d883a 	mov	r6,r2
  8050d0:	08012780 	call	801278 <__muldf3>
  8050d4:	180f883a 	mov	r7,r3
  8050d8:	880b883a 	mov	r5,r17
  8050dc:	8009883a 	mov	r4,r16
  8050e0:	100d883a 	mov	r6,r2
  8050e4:	08011840 	call	801184 <__subdf3>
  8050e8:	1015883a 	mov	r10,r2
  8050ec:	a0800c04 	addi	r2,r20,48
  8050f0:	e0800005 	stb	r2,0(fp)
  8050f4:	e7000044 	addi	fp,fp,1
  8050f8:	1817883a 	mov	r11,r3
  8050fc:	e57fd61e 	bne	fp,r21,805058 <_dtoa_r+0x5d8>
  805100:	500d883a 	mov	r6,r10
  805104:	180f883a 	mov	r7,r3
  805108:	5009883a 	mov	r4,r10
  80510c:	180b883a 	mov	r5,r3
  805110:	08012040 	call	801204 <__adddf3>
  805114:	100d883a 	mov	r6,r2
  805118:	9009883a 	mov	r4,r18
  80511c:	980b883a 	mov	r5,r19
  805120:	180f883a 	mov	r7,r3
  805124:	1021883a 	mov	r16,r2
  805128:	1823883a 	mov	r17,r3
  80512c:	08018940 	call	801894 <__ltdf2>
  805130:	10000816 	blt	r2,zero,805154 <_dtoa_r+0x6d4>
  805134:	980b883a 	mov	r5,r19
  805138:	800d883a 	mov	r6,r16
  80513c:	880f883a 	mov	r7,r17
  805140:	9009883a 	mov	r4,r18
  805144:	080a6f40 	call	80a6f4 <__eqdf2>
  805148:	1000171e 	bne	r2,zero,8051a8 <_dtoa_r+0x728>
  80514c:	a080004c 	andi	r2,r20,1
  805150:	10001526 	beq	r2,zero,8051a8 <_dtoa_r+0x728>
  805154:	d8800d17 	ldw	r2,52(sp)
  805158:	d8800415 	stw	r2,16(sp)
  80515c:	e009883a 	mov	r4,fp
  805160:	213fffc4 	addi	r4,r4,-1
  805164:	20c00007 	ldb	r3,0(r4)
  805168:	00800e44 	movi	r2,57
  80516c:	1880081e 	bne	r3,r2,805190 <_dtoa_r+0x710>
  805170:	d8800517 	ldw	r2,20(sp)
  805174:	113ffa1e 	bne	r2,r4,805160 <_dtoa_r+0x6e0>
  805178:	d8c00417 	ldw	r3,16(sp)
  80517c:	d9800517 	ldw	r6,20(sp)
  805180:	00800c04 	movi	r2,48
  805184:	18c00044 	addi	r3,r3,1
  805188:	d8c00415 	stw	r3,16(sp)
  80518c:	30800005 	stb	r2,0(r6)
  805190:	20800003 	ldbu	r2,0(r4)
  805194:	d8c00417 	ldw	r3,16(sp)
  805198:	27000044 	addi	fp,r4,1
  80519c:	10800044 	addi	r2,r2,1
  8051a0:	d8c00d15 	stw	r3,52(sp)
  8051a4:	20800005 	stb	r2,0(r4)
  8051a8:	d9001617 	ldw	r4,88(sp)
  8051ac:	d9400717 	ldw	r5,28(sp)
  8051b0:	0807c480 	call	807c48 <_Bfree>
  8051b4:	e0000005 	stb	zero,0(fp)
  8051b8:	d9800d17 	ldw	r6,52(sp)
  8051bc:	d8c02717 	ldw	r3,156(sp)
  8051c0:	d9002917 	ldw	r4,164(sp)
  8051c4:	30800044 	addi	r2,r6,1
  8051c8:	18800015 	stw	r2,0(r3)
  8051cc:	20029c26 	beq	r4,zero,805c40 <_dtoa_r+0x11c0>
  8051d0:	d8c00517 	ldw	r3,20(sp)
  8051d4:	27000015 	stw	fp,0(r4)
  8051d8:	003e5d06 	br	804b50 <_dtoa_r+0xd0>
  8051dc:	d9800d17 	ldw	r6,52(sp)
  8051e0:	00c02074 	movhi	r3,129
  8051e4:	18f60004 	addi	r3,r3,-10240
  8051e8:	d9001217 	ldw	r4,72(sp)
  8051ec:	300490fa 	slli	r2,r6,3
  8051f0:	d9401317 	ldw	r5,76(sp)
  8051f4:	10c5883a 	add	r2,r2,r3
  8051f8:	12000017 	ldw	r8,0(r2)
  8051fc:	12400117 	ldw	r9,4(r2)
  805200:	400d883a 	mov	r6,r8
  805204:	480f883a 	mov	r7,r9
  805208:	08018940 	call	801894 <__ltdf2>
  80520c:	1000030e 	bge	r2,zero,80521c <_dtoa_r+0x79c>
  805210:	d8800d17 	ldw	r2,52(sp)
  805214:	10bfffc4 	addi	r2,r2,-1
  805218:	d8800d15 	stw	r2,52(sp)
  80521c:	d8000c15 	stw	zero,48(sp)
  805220:	003ea806 	br	804cc4 <_dtoa_r+0x244>
  805224:	d9000b17 	ldw	r4,44(sp)
  805228:	202cc03a 	cmpne	r22,r4,zero
  80522c:	b000c71e 	bne	r22,zero,80554c <_dtoa_r+0xacc>
  805230:	dc001117 	ldw	r16,68(sp)
  805234:	dc801017 	ldw	r18,64(sp)
  805238:	0027883a 	mov	r19,zero
  80523c:	04000b0e 	bge	zero,r16,80526c <_dtoa_r+0x7ec>
  805240:	d8c00a17 	ldw	r3,40(sp)
  805244:	00c0090e 	bge	zero,r3,80526c <_dtoa_r+0x7ec>
  805248:	8005883a 	mov	r2,r16
  80524c:	1c011316 	blt	r3,r16,80569c <_dtoa_r+0xc1c>
  805250:	d9000a17 	ldw	r4,40(sp)
  805254:	d9801117 	ldw	r6,68(sp)
  805258:	80a1c83a 	sub	r16,r16,r2
  80525c:	2089c83a 	sub	r4,r4,r2
  805260:	308dc83a 	sub	r6,r6,r2
  805264:	d9000a15 	stw	r4,40(sp)
  805268:	d9801115 	stw	r6,68(sp)
  80526c:	d8801017 	ldw	r2,64(sp)
  805270:	0080150e 	bge	zero,r2,8052c8 <_dtoa_r+0x848>
  805274:	d8c00b17 	ldw	r3,44(sp)
  805278:	1805003a 	cmpeq	r2,r3,zero
  80527c:	1001c91e 	bne	r2,zero,8059a4 <_dtoa_r+0xf24>
  805280:	04800e0e 	bge	zero,r18,8052bc <_dtoa_r+0x83c>
  805284:	d9001617 	ldw	r4,88(sp)
  805288:	980b883a 	mov	r5,r19
  80528c:	900d883a 	mov	r6,r18
  805290:	0808a940 	call	808a94 <__pow5mult>
  805294:	d9001617 	ldw	r4,88(sp)
  805298:	d9800717 	ldw	r6,28(sp)
  80529c:	100b883a 	mov	r5,r2
  8052a0:	1027883a 	mov	r19,r2
  8052a4:	08086d80 	call	8086d8 <__multiply>
  8052a8:	d9001617 	ldw	r4,88(sp)
  8052ac:	d9400717 	ldw	r5,28(sp)
  8052b0:	1023883a 	mov	r17,r2
  8052b4:	0807c480 	call	807c48 <_Bfree>
  8052b8:	dc400715 	stw	r17,28(sp)
  8052bc:	d9001017 	ldw	r4,64(sp)
  8052c0:	248dc83a 	sub	r6,r4,r18
  8052c4:	30010e1e 	bne	r6,zero,805700 <_dtoa_r+0xc80>
  8052c8:	d9001617 	ldw	r4,88(sp)
  8052cc:	04400044 	movi	r17,1
  8052d0:	880b883a 	mov	r5,r17
  8052d4:	080892c0 	call	80892c <__i2b>
  8052d8:	d9800917 	ldw	r6,36(sp)
  8052dc:	1025883a 	mov	r18,r2
  8052e0:	0180040e 	bge	zero,r6,8052f4 <_dtoa_r+0x874>
  8052e4:	d9001617 	ldw	r4,88(sp)
  8052e8:	100b883a 	mov	r5,r2
  8052ec:	0808a940 	call	808a94 <__pow5mult>
  8052f0:	1025883a 	mov	r18,r2
  8052f4:	d8801717 	ldw	r2,92(sp)
  8052f8:	8880f30e 	bge	r17,r2,8056c8 <_dtoa_r+0xc48>
  8052fc:	0023883a 	mov	r17,zero
  805300:	d9800917 	ldw	r6,36(sp)
  805304:	30019e1e 	bne	r6,zero,805980 <_dtoa_r+0xf00>
  805308:	00c00044 	movi	r3,1
  80530c:	d9000a17 	ldw	r4,40(sp)
  805310:	20c5883a 	add	r2,r4,r3
  805314:	10c007cc 	andi	r3,r2,31
  805318:	1800841e 	bne	r3,zero,80552c <_dtoa_r+0xaac>
  80531c:	00800704 	movi	r2,28
  805320:	d9000a17 	ldw	r4,40(sp)
  805324:	d9801117 	ldw	r6,68(sp)
  805328:	80a1883a 	add	r16,r16,r2
  80532c:	2089883a 	add	r4,r4,r2
  805330:	308d883a 	add	r6,r6,r2
  805334:	d9000a15 	stw	r4,40(sp)
  805338:	d9801115 	stw	r6,68(sp)
  80533c:	d8801117 	ldw	r2,68(sp)
  805340:	0080050e 	bge	zero,r2,805358 <_dtoa_r+0x8d8>
  805344:	d9400717 	ldw	r5,28(sp)
  805348:	d9001617 	ldw	r4,88(sp)
  80534c:	100d883a 	mov	r6,r2
  805350:	080858c0 	call	80858c <__lshift>
  805354:	d8800715 	stw	r2,28(sp)
  805358:	d8c00a17 	ldw	r3,40(sp)
  80535c:	00c0050e 	bge	zero,r3,805374 <_dtoa_r+0x8f4>
  805360:	d9001617 	ldw	r4,88(sp)
  805364:	900b883a 	mov	r5,r18
  805368:	180d883a 	mov	r6,r3
  80536c:	080858c0 	call	80858c <__lshift>
  805370:	1025883a 	mov	r18,r2
  805374:	d9000c17 	ldw	r4,48(sp)
  805378:	2005003a 	cmpeq	r2,r4,zero
  80537c:	10016f26 	beq	r2,zero,80593c <_dtoa_r+0xebc>
  805380:	d9000f17 	ldw	r4,60(sp)
  805384:	0102170e 	bge	zero,r4,805be4 <_dtoa_r+0x1164>
  805388:	d9800b17 	ldw	r6,44(sp)
  80538c:	3005003a 	cmpeq	r2,r6,zero
  805390:	1000881e 	bne	r2,zero,8055b4 <_dtoa_r+0xb34>
  805394:	0400050e 	bge	zero,r16,8053ac <_dtoa_r+0x92c>
  805398:	d9001617 	ldw	r4,88(sp)
  80539c:	980b883a 	mov	r5,r19
  8053a0:	800d883a 	mov	r6,r16
  8053a4:	080858c0 	call	80858c <__lshift>
  8053a8:	1027883a 	mov	r19,r2
  8053ac:	8804c03a 	cmpne	r2,r17,zero
  8053b0:	1002541e 	bne	r2,zero,805d04 <_dtoa_r+0x1284>
  8053b4:	980b883a 	mov	r5,r19
  8053b8:	dd800517 	ldw	r22,20(sp)
  8053bc:	dcc00615 	stw	r19,24(sp)
  8053c0:	a700004c 	andi	fp,r20,1
  8053c4:	2827883a 	mov	r19,r5
  8053c8:	d9000717 	ldw	r4,28(sp)
  8053cc:	900b883a 	mov	r5,r18
  8053d0:	080483c0 	call	80483c <quorem>
  8053d4:	d9000717 	ldw	r4,28(sp)
  8053d8:	d9400617 	ldw	r5,24(sp)
  8053dc:	1023883a 	mov	r17,r2
  8053e0:	8dc00c04 	addi	r23,r17,48
  8053e4:	0807da40 	call	807da4 <__mcmp>
  8053e8:	d9001617 	ldw	r4,88(sp)
  8053ec:	900b883a 	mov	r5,r18
  8053f0:	980d883a 	mov	r6,r19
  8053f4:	1029883a 	mov	r20,r2
  8053f8:	08084000 	call	808400 <__mdiff>
  8053fc:	102b883a 	mov	r21,r2
  805400:	10800317 	ldw	r2,12(r2)
  805404:	1001281e 	bne	r2,zero,8058a8 <_dtoa_r+0xe28>
  805408:	d9000717 	ldw	r4,28(sp)
  80540c:	a80b883a 	mov	r5,r21
  805410:	0807da40 	call	807da4 <__mcmp>
  805414:	d9001617 	ldw	r4,88(sp)
  805418:	1021883a 	mov	r16,r2
  80541c:	a80b883a 	mov	r5,r21
  805420:	0807c480 	call	807c48 <_Bfree>
  805424:	8000041e 	bne	r16,zero,805438 <_dtoa_r+0x9b8>
  805428:	d8801717 	ldw	r2,92(sp)
  80542c:	1000021e 	bne	r2,zero,805438 <_dtoa_r+0x9b8>
  805430:	e004c03a 	cmpne	r2,fp,zero
  805434:	10011726 	beq	r2,zero,805894 <_dtoa_r+0xe14>
  805438:	a0010616 	blt	r20,zero,805854 <_dtoa_r+0xdd4>
  80543c:	a000041e 	bne	r20,zero,805450 <_dtoa_r+0x9d0>
  805440:	d8c01717 	ldw	r3,92(sp)
  805444:	1800021e 	bne	r3,zero,805450 <_dtoa_r+0x9d0>
  805448:	e004c03a 	cmpne	r2,fp,zero
  80544c:	10010126 	beq	r2,zero,805854 <_dtoa_r+0xdd4>
  805450:	04023d16 	blt	zero,r16,805d48 <_dtoa_r+0x12c8>
  805454:	b5c00005 	stb	r23,0(r22)
  805458:	d9800517 	ldw	r6,20(sp)
  80545c:	d9000f17 	ldw	r4,60(sp)
  805460:	b5800044 	addi	r22,r22,1
  805464:	3105883a 	add	r2,r6,r4
  805468:	b0806526 	beq	r22,r2,805600 <_dtoa_r+0xb80>
  80546c:	d9400717 	ldw	r5,28(sp)
  805470:	d9001617 	ldw	r4,88(sp)
  805474:	01800284 	movi	r6,10
  805478:	000f883a 	mov	r7,zero
  80547c:	08089680 	call	808968 <__multadd>
  805480:	d8800715 	stw	r2,28(sp)
  805484:	d8800617 	ldw	r2,24(sp)
  805488:	14c10c26 	beq	r2,r19,8058bc <_dtoa_r+0xe3c>
  80548c:	d9400617 	ldw	r5,24(sp)
  805490:	d9001617 	ldw	r4,88(sp)
  805494:	01800284 	movi	r6,10
  805498:	000f883a 	mov	r7,zero
  80549c:	08089680 	call	808968 <__multadd>
  8054a0:	d9001617 	ldw	r4,88(sp)
  8054a4:	980b883a 	mov	r5,r19
  8054a8:	01800284 	movi	r6,10
  8054ac:	000f883a 	mov	r7,zero
  8054b0:	d8800615 	stw	r2,24(sp)
  8054b4:	08089680 	call	808968 <__multadd>
  8054b8:	1027883a 	mov	r19,r2
  8054bc:	003fc206 	br	8053c8 <_dtoa_r+0x948>
  8054c0:	2445c83a 	sub	r2,r4,r17
  8054c4:	a088983a 	sll	r4,r20,r2
  8054c8:	003e4b06 	br	804df8 <_dtoa_r+0x378>
  8054cc:	01bfffc4 	movi	r6,-1
  8054d0:	00800044 	movi	r2,1
  8054d4:	d9800e15 	stw	r6,56(sp)
  8054d8:	d9800f15 	stw	r6,60(sp)
  8054dc:	d8800b15 	stw	r2,44(sp)
  8054e0:	d8c01617 	ldw	r3,88(sp)
  8054e4:	008005c4 	movi	r2,23
  8054e8:	18001115 	stw	zero,68(r3)
  8054ec:	1580082e 	bgeu	r2,r22,805510 <_dtoa_r+0xa90>
  8054f0:	00c00104 	movi	r3,4
  8054f4:	0009883a 	mov	r4,zero
  8054f8:	18c7883a 	add	r3,r3,r3
  8054fc:	18800504 	addi	r2,r3,20
  805500:	21000044 	addi	r4,r4,1
  805504:	b0bffc2e 	bgeu	r22,r2,8054f8 <_dtoa_r+0xa78>
  805508:	d9801617 	ldw	r6,88(sp)
  80550c:	31001115 	stw	r4,68(r6)
  805510:	dc000f17 	ldw	r16,60(sp)
  805514:	003e4b06 	br	804e44 <_dtoa_r+0x3c4>
  805518:	d9801717 	ldw	r6,92(sp)
  80551c:	0023883a 	mov	r17,zero
  805520:	31bfff04 	addi	r6,r6,-4
  805524:	d9801715 	stw	r6,92(sp)
  805528:	003df806 	br	804d0c <_dtoa_r+0x28c>
  80552c:	00800804 	movi	r2,32
  805530:	10c9c83a 	sub	r4,r2,r3
  805534:	00c00104 	movi	r3,4
  805538:	19005a16 	blt	r3,r4,8056a4 <_dtoa_r+0xc24>
  80553c:	008000c4 	movi	r2,3
  805540:	113f7e16 	blt	r2,r4,80533c <_dtoa_r+0x8bc>
  805544:	20800704 	addi	r2,r4,28
  805548:	003f7506 	br	805320 <_dtoa_r+0x8a0>
  80554c:	d9801717 	ldw	r6,92(sp)
  805550:	00800044 	movi	r2,1
  805554:	1180a10e 	bge	r2,r6,8057dc <_dtoa_r+0xd5c>
  805558:	d9800f17 	ldw	r6,60(sp)
  80555c:	d8c01017 	ldw	r3,64(sp)
  805560:	30bfffc4 	addi	r2,r6,-1
  805564:	1881c616 	blt	r3,r2,805c80 <_dtoa_r+0x1200>
  805568:	18a5c83a 	sub	r18,r3,r2
  80556c:	d8800f17 	ldw	r2,60(sp)
  805570:	10026216 	blt	r2,zero,805efc <_dtoa_r+0x147c>
  805574:	dc001117 	ldw	r16,68(sp)
  805578:	1007883a 	mov	r3,r2
  80557c:	d9800a17 	ldw	r6,40(sp)
  805580:	d8801117 	ldw	r2,68(sp)
  805584:	d9001617 	ldw	r4,88(sp)
  805588:	30cd883a 	add	r6,r6,r3
  80558c:	10c5883a 	add	r2,r2,r3
  805590:	01400044 	movi	r5,1
  805594:	d9800a15 	stw	r6,40(sp)
  805598:	d8801115 	stw	r2,68(sp)
  80559c:	080892c0 	call	80892c <__i2b>
  8055a0:	1027883a 	mov	r19,r2
  8055a4:	003f2506 	br	80523c <_dtoa_r+0x7bc>
  8055a8:	00c02074 	movhi	r3,129
  8055ac:	18f5e304 	addi	r3,r3,-10356
  8055b0:	003d6706 	br	804b50 <_dtoa_r+0xd0>
  8055b4:	dd800517 	ldw	r22,20(sp)
  8055b8:	04000044 	movi	r16,1
  8055bc:	00000706 	br	8055dc <_dtoa_r+0xb5c>
  8055c0:	d9400717 	ldw	r5,28(sp)
  8055c4:	d9001617 	ldw	r4,88(sp)
  8055c8:	01800284 	movi	r6,10
  8055cc:	000f883a 	mov	r7,zero
  8055d0:	08089680 	call	808968 <__multadd>
  8055d4:	d8800715 	stw	r2,28(sp)
  8055d8:	84000044 	addi	r16,r16,1
  8055dc:	d9000717 	ldw	r4,28(sp)
  8055e0:	900b883a 	mov	r5,r18
  8055e4:	080483c0 	call	80483c <quorem>
  8055e8:	15c00c04 	addi	r23,r2,48
  8055ec:	b5c00005 	stb	r23,0(r22)
  8055f0:	d8c00f17 	ldw	r3,60(sp)
  8055f4:	b5800044 	addi	r22,r22,1
  8055f8:	80fff116 	blt	r16,r3,8055c0 <_dtoa_r+0xb40>
  8055fc:	d8000615 	stw	zero,24(sp)
  805600:	d9400717 	ldw	r5,28(sp)
  805604:	d9001617 	ldw	r4,88(sp)
  805608:	01800044 	movi	r6,1
  80560c:	080858c0 	call	80858c <__lshift>
  805610:	1009883a 	mov	r4,r2
  805614:	900b883a 	mov	r5,r18
  805618:	d8800715 	stw	r2,28(sp)
  80561c:	0807da40 	call	807da4 <__mcmp>
  805620:	00803c0e 	bge	zero,r2,805714 <_dtoa_r+0xc94>
  805624:	b009883a 	mov	r4,r22
  805628:	213fffc4 	addi	r4,r4,-1
  80562c:	21400003 	ldbu	r5,0(r4)
  805630:	00800e44 	movi	r2,57
  805634:	28c03fcc 	andi	r3,r5,255
  805638:	18c0201c 	xori	r3,r3,128
  80563c:	18ffe004 	addi	r3,r3,-128
  805640:	1881981e 	bne	r3,r2,805ca4 <_dtoa_r+0x1224>
  805644:	d9800517 	ldw	r6,20(sp)
  805648:	21bff71e 	bne	r4,r6,805628 <_dtoa_r+0xba8>
  80564c:	d8800d17 	ldw	r2,52(sp)
  805650:	37000044 	addi	fp,r6,1
  805654:	10800044 	addi	r2,r2,1
  805658:	d8800d15 	stw	r2,52(sp)
  80565c:	00800c44 	movi	r2,49
  805660:	30800005 	stb	r2,0(r6)
  805664:	d9001617 	ldw	r4,88(sp)
  805668:	900b883a 	mov	r5,r18
  80566c:	0807c480 	call	807c48 <_Bfree>
  805670:	983ecd26 	beq	r19,zero,8051a8 <_dtoa_r+0x728>
  805674:	d8c00617 	ldw	r3,24(sp)
  805678:	18000426 	beq	r3,zero,80568c <_dtoa_r+0xc0c>
  80567c:	1cc00326 	beq	r3,r19,80568c <_dtoa_r+0xc0c>
  805680:	d9001617 	ldw	r4,88(sp)
  805684:	180b883a 	mov	r5,r3
  805688:	0807c480 	call	807c48 <_Bfree>
  80568c:	d9001617 	ldw	r4,88(sp)
  805690:	980b883a 	mov	r5,r19
  805694:	0807c480 	call	807c48 <_Bfree>
  805698:	003ec306 	br	8051a8 <_dtoa_r+0x728>
  80569c:	1805883a 	mov	r2,r3
  8056a0:	003eeb06 	br	805250 <_dtoa_r+0x7d0>
  8056a4:	d9800a17 	ldw	r6,40(sp)
  8056a8:	d8c01117 	ldw	r3,68(sp)
  8056ac:	20bfff04 	addi	r2,r4,-4
  8056b0:	308d883a 	add	r6,r6,r2
  8056b4:	1887883a 	add	r3,r3,r2
  8056b8:	80a1883a 	add	r16,r16,r2
  8056bc:	d9800a15 	stw	r6,40(sp)
  8056c0:	d8c01115 	stw	r3,68(sp)
  8056c4:	003f1d06 	br	80533c <_dtoa_r+0x8bc>
  8056c8:	a03f0c1e 	bne	r20,zero,8052fc <_dtoa_r+0x87c>
  8056cc:	00800434 	movhi	r2,16
  8056d0:	10bfffc4 	addi	r2,r2,-1
  8056d4:	a884703a 	and	r2,r21,r2
  8056d8:	103f081e 	bne	r2,zero,8052fc <_dtoa_r+0x87c>
  8056dc:	a89ffc2c 	andhi	r2,r21,32752
  8056e0:	103f0626 	beq	r2,zero,8052fc <_dtoa_r+0x87c>
  8056e4:	d8c01117 	ldw	r3,68(sp)
  8056e8:	d9000a17 	ldw	r4,40(sp)
  8056ec:	18c00044 	addi	r3,r3,1
  8056f0:	21000044 	addi	r4,r4,1
  8056f4:	d8c01115 	stw	r3,68(sp)
  8056f8:	d9000a15 	stw	r4,40(sp)
  8056fc:	003f0006 	br	805300 <_dtoa_r+0x880>
  805700:	d9400717 	ldw	r5,28(sp)
  805704:	d9001617 	ldw	r4,88(sp)
  805708:	0808a940 	call	808a94 <__pow5mult>
  80570c:	d8800715 	stw	r2,28(sp)
  805710:	003eed06 	br	8052c8 <_dtoa_r+0x848>
  805714:	1000021e 	bne	r2,zero,805720 <_dtoa_r+0xca0>
  805718:	b880004c 	andi	r2,r23,1
  80571c:	103fc11e 	bne	r2,zero,805624 <_dtoa_r+0xba4>
  805720:	b5bfffc4 	addi	r22,r22,-1
  805724:	b0c00007 	ldb	r3,0(r22)
  805728:	00800c04 	movi	r2,48
  80572c:	18bffc26 	beq	r3,r2,805720 <_dtoa_r+0xca0>
  805730:	b7000044 	addi	fp,r22,1
  805734:	003fcb06 	br	805664 <_dtoa_r+0xbe4>
  805738:	d9800d17 	ldw	r6,52(sp)
  80573c:	018fc83a 	sub	r7,zero,r6
  805740:	3801f726 	beq	r7,zero,805f20 <_dtoa_r+0x14a0>
  805744:	398003cc 	andi	r6,r7,15
  805748:	300c90fa 	slli	r6,r6,3
  80574c:	01402074 	movhi	r5,129
  805750:	29760004 	addi	r5,r5,-10240
  805754:	d9001217 	ldw	r4,72(sp)
  805758:	314d883a 	add	r6,r6,r5
  80575c:	30c00117 	ldw	r3,4(r6)
  805760:	30800017 	ldw	r2,0(r6)
  805764:	d9401317 	ldw	r5,76(sp)
  805768:	3821d13a 	srai	r16,r7,4
  80576c:	100d883a 	mov	r6,r2
  805770:	180f883a 	mov	r7,r3
  805774:	08012780 	call	801278 <__muldf3>
  805778:	1011883a 	mov	r8,r2
  80577c:	1813883a 	mov	r9,r3
  805780:	1029883a 	mov	r20,r2
  805784:	182b883a 	mov	r21,r3
  805788:	8001e526 	beq	r16,zero,805f20 <_dtoa_r+0x14a0>
  80578c:	05800084 	movi	r22,2
  805790:	04402074 	movhi	r17,129
  805794:	8c763204 	addi	r17,r17,-10040
  805798:	8080004c 	andi	r2,r16,1
  80579c:	1005003a 	cmpeq	r2,r2,zero
  8057a0:	1000081e 	bne	r2,zero,8057c4 <_dtoa_r+0xd44>
  8057a4:	89800017 	ldw	r6,0(r17)
  8057a8:	89c00117 	ldw	r7,4(r17)
  8057ac:	480b883a 	mov	r5,r9
  8057b0:	4009883a 	mov	r4,r8
  8057b4:	08012780 	call	801278 <__muldf3>
  8057b8:	1011883a 	mov	r8,r2
  8057bc:	b5800044 	addi	r22,r22,1
  8057c0:	1813883a 	mov	r9,r3
  8057c4:	8021d07a 	srai	r16,r16,1
  8057c8:	8c400204 	addi	r17,r17,8
  8057cc:	803ff21e 	bne	r16,zero,805798 <_dtoa_r+0xd18>
  8057d0:	4029883a 	mov	r20,r8
  8057d4:	482b883a 	mov	r21,r9
  8057d8:	003dca06 	br	804f04 <_dtoa_r+0x484>
  8057dc:	d9000817 	ldw	r4,32(sp)
  8057e0:	2005003a 	cmpeq	r2,r4,zero
  8057e4:	1001f61e 	bne	r2,zero,805fc0 <_dtoa_r+0x1540>
  8057e8:	dc001117 	ldw	r16,68(sp)
  8057ec:	dc801017 	ldw	r18,64(sp)
  8057f0:	18c10cc4 	addi	r3,r3,1075
  8057f4:	003f6106 	br	80557c <_dtoa_r+0xafc>
  8057f8:	d8000b15 	stw	zero,44(sp)
  8057fc:	d9802617 	ldw	r6,152(sp)
  805800:	d8c00d17 	ldw	r3,52(sp)
  805804:	30800044 	addi	r2,r6,1
  805808:	18ad883a 	add	r22,r3,r2
  80580c:	b13fffc4 	addi	r4,r22,-1
  805810:	d9000e15 	stw	r4,56(sp)
  805814:	0581f60e 	bge	zero,r22,805ff0 <_dtoa_r+0x1570>
  805818:	dd800f15 	stw	r22,60(sp)
  80581c:	003f3006 	br	8054e0 <_dtoa_r+0xa60>
  805820:	d8000b15 	stw	zero,44(sp)
  805824:	d9002617 	ldw	r4,152(sp)
  805828:	0101eb0e 	bge	zero,r4,805fd8 <_dtoa_r+0x1558>
  80582c:	202d883a 	mov	r22,r4
  805830:	d9000e15 	stw	r4,56(sp)
  805834:	d9000f15 	stw	r4,60(sp)
  805838:	003f2906 	br	8054e0 <_dtoa_r+0xa60>
  80583c:	01800044 	movi	r6,1
  805840:	d9800b15 	stw	r6,44(sp)
  805844:	003ff706 	br	805824 <_dtoa_r+0xda4>
  805848:	01000044 	movi	r4,1
  80584c:	d9000b15 	stw	r4,44(sp)
  805850:	003fea06 	br	8057fc <_dtoa_r+0xd7c>
  805854:	04000c0e 	bge	zero,r16,805888 <_dtoa_r+0xe08>
  805858:	d9400717 	ldw	r5,28(sp)
  80585c:	d9001617 	ldw	r4,88(sp)
  805860:	01800044 	movi	r6,1
  805864:	080858c0 	call	80858c <__lshift>
  805868:	1009883a 	mov	r4,r2
  80586c:	900b883a 	mov	r5,r18
  805870:	d8800715 	stw	r2,28(sp)
  805874:	0807da40 	call	807da4 <__mcmp>
  805878:	0081e00e 	bge	zero,r2,805ffc <_dtoa_r+0x157c>
  80587c:	bdc00044 	addi	r23,r23,1
  805880:	00800e84 	movi	r2,58
  805884:	b881a226 	beq	r23,r2,805f10 <_dtoa_r+0x1490>
  805888:	b7000044 	addi	fp,r22,1
  80588c:	b5c00005 	stb	r23,0(r22)
  805890:	003f7406 	br	805664 <_dtoa_r+0xbe4>
  805894:	00800e44 	movi	r2,57
  805898:	b8819d26 	beq	r23,r2,805f10 <_dtoa_r+0x1490>
  80589c:	053ffa0e 	bge	zero,r20,805888 <_dtoa_r+0xe08>
  8058a0:	8dc00c44 	addi	r23,r17,49
  8058a4:	003ff806 	br	805888 <_dtoa_r+0xe08>
  8058a8:	d9001617 	ldw	r4,88(sp)
  8058ac:	a80b883a 	mov	r5,r21
  8058b0:	04000044 	movi	r16,1
  8058b4:	0807c480 	call	807c48 <_Bfree>
  8058b8:	003edf06 	br	805438 <_dtoa_r+0x9b8>
  8058bc:	d9001617 	ldw	r4,88(sp)
  8058c0:	980b883a 	mov	r5,r19
  8058c4:	01800284 	movi	r6,10
  8058c8:	000f883a 	mov	r7,zero
  8058cc:	08089680 	call	808968 <__multadd>
  8058d0:	1027883a 	mov	r19,r2
  8058d4:	d8800615 	stw	r2,24(sp)
  8058d8:	003ebb06 	br	8053c8 <_dtoa_r+0x948>
  8058dc:	d9801117 	ldw	r6,68(sp)
  8058e0:	d8800d17 	ldw	r2,52(sp)
  8058e4:	d8000915 	stw	zero,36(sp)
  8058e8:	308dc83a 	sub	r6,r6,r2
  8058ec:	0087c83a 	sub	r3,zero,r2
  8058f0:	d9801115 	stw	r6,68(sp)
  8058f4:	d8c01015 	stw	r3,64(sp)
  8058f8:	003cfe06 	br	804cf4 <_dtoa_r+0x274>
  8058fc:	018dc83a 	sub	r6,zero,r6
  805900:	d9801115 	stw	r6,68(sp)
  805904:	d8000a15 	stw	zero,40(sp)
  805908:	003cf306 	br	804cd8 <_dtoa_r+0x258>
  80590c:	d9000d17 	ldw	r4,52(sp)
  805910:	08019a40 	call	8019a4 <__floatsidf>
  805914:	880b883a 	mov	r5,r17
  805918:	8009883a 	mov	r4,r16
  80591c:	180f883a 	mov	r7,r3
  805920:	100d883a 	mov	r6,r2
  805924:	080a77c0 	call	80a77c <__nedf2>
  805928:	103ce126 	beq	r2,zero,804cb0 <_dtoa_r+0x230>
  80592c:	d9800d17 	ldw	r6,52(sp)
  805930:	31bfffc4 	addi	r6,r6,-1
  805934:	d9800d15 	stw	r6,52(sp)
  805938:	003cdd06 	br	804cb0 <_dtoa_r+0x230>
  80593c:	d9000717 	ldw	r4,28(sp)
  805940:	900b883a 	mov	r5,r18
  805944:	0807da40 	call	807da4 <__mcmp>
  805948:	103e8d0e 	bge	r2,zero,805380 <_dtoa_r+0x900>
  80594c:	d9400717 	ldw	r5,28(sp)
  805950:	d9001617 	ldw	r4,88(sp)
  805954:	01800284 	movi	r6,10
  805958:	000f883a 	mov	r7,zero
  80595c:	08089680 	call	808968 <__multadd>
  805960:	d9800d17 	ldw	r6,52(sp)
  805964:	d8800715 	stw	r2,28(sp)
  805968:	31bfffc4 	addi	r6,r6,-1
  80596c:	d9800d15 	stw	r6,52(sp)
  805970:	b001a71e 	bne	r22,zero,806010 <_dtoa_r+0x1590>
  805974:	d8800e17 	ldw	r2,56(sp)
  805978:	d8800f15 	stw	r2,60(sp)
  80597c:	003e8006 	br	805380 <_dtoa_r+0x900>
  805980:	90800417 	ldw	r2,16(r18)
  805984:	1085883a 	add	r2,r2,r2
  805988:	1085883a 	add	r2,r2,r2
  80598c:	1485883a 	add	r2,r2,r18
  805990:	11000417 	ldw	r4,16(r2)
  805994:	0807c700 	call	807c70 <__hi0bits>
  805998:	00c00804 	movi	r3,32
  80599c:	1887c83a 	sub	r3,r3,r2
  8059a0:	003e5a06 	br	80530c <_dtoa_r+0x88c>
  8059a4:	d9400717 	ldw	r5,28(sp)
  8059a8:	d9801017 	ldw	r6,64(sp)
  8059ac:	d9001617 	ldw	r4,88(sp)
  8059b0:	0808a940 	call	808a94 <__pow5mult>
  8059b4:	d8800715 	stw	r2,28(sp)
  8059b8:	003e4306 	br	8052c8 <_dtoa_r+0x848>
  8059bc:	d9800f17 	ldw	r6,60(sp)
  8059c0:	d8800d17 	ldw	r2,52(sp)
  8059c4:	d9800315 	stw	r6,12(sp)
  8059c8:	d8800415 	stw	r2,16(sp)
  8059cc:	d8c00b17 	ldw	r3,44(sp)
  8059d0:	1805003a 	cmpeq	r2,r3,zero
  8059d4:	1000e21e 	bne	r2,zero,805d60 <_dtoa_r+0x12e0>
  8059d8:	d9000317 	ldw	r4,12(sp)
  8059dc:	0005883a 	mov	r2,zero
  8059e0:	00cff834 	movhi	r3,16352
  8059e4:	200c90fa 	slli	r6,r4,3
  8059e8:	01002074 	movhi	r4,129
  8059ec:	21360004 	addi	r4,r4,-10240
  8059f0:	180b883a 	mov	r5,r3
  8059f4:	310d883a 	add	r6,r6,r4
  8059f8:	327fff17 	ldw	r9,-4(r6)
  8059fc:	323ffe17 	ldw	r8,-8(r6)
  805a00:	1009883a 	mov	r4,r2
  805a04:	480f883a 	mov	r7,r9
  805a08:	400d883a 	mov	r6,r8
  805a0c:	080163c0 	call	80163c <__divdf3>
  805a10:	180b883a 	mov	r5,r3
  805a14:	b00d883a 	mov	r6,r22
  805a18:	b80f883a 	mov	r7,r23
  805a1c:	1009883a 	mov	r4,r2
  805a20:	08011840 	call	801184 <__subdf3>
  805a24:	a80b883a 	mov	r5,r21
  805a28:	a009883a 	mov	r4,r20
  805a2c:	d8c01915 	stw	r3,100(sp)
  805a30:	d8801815 	stw	r2,96(sp)
  805a34:	080a9140 	call	80a914 <__fixdfsi>
  805a38:	1009883a 	mov	r4,r2
  805a3c:	1027883a 	mov	r19,r2
  805a40:	08019a40 	call	8019a4 <__floatsidf>
  805a44:	a80b883a 	mov	r5,r21
  805a48:	a009883a 	mov	r4,r20
  805a4c:	180f883a 	mov	r7,r3
  805a50:	100d883a 	mov	r6,r2
  805a54:	08011840 	call	801184 <__subdf3>
  805a58:	d9801817 	ldw	r6,96(sp)
  805a5c:	1823883a 	mov	r17,r3
  805a60:	d8801415 	stw	r2,80(sp)
  805a64:	302d883a 	mov	r22,r6
  805a68:	d9800517 	ldw	r6,20(sp)
  805a6c:	9cc00c04 	addi	r19,r19,48
  805a70:	dc401515 	stw	r17,84(sp)
  805a74:	d8c01917 	ldw	r3,100(sp)
  805a78:	34c00005 	stb	r19,0(r6)
  805a7c:	d8800517 	ldw	r2,20(sp)
  805a80:	d9401917 	ldw	r5,100(sp)
  805a84:	d9801417 	ldw	r6,80(sp)
  805a88:	b009883a 	mov	r4,r22
  805a8c:	880f883a 	mov	r7,r17
  805a90:	182f883a 	mov	r23,r3
  805a94:	17000044 	addi	fp,r2,1
  805a98:	080a8040 	call	80a804 <__gtdf2>
  805a9c:	00804e16 	blt	zero,r2,805bd8 <_dtoa_r+0x1158>
  805aa0:	d9801417 	ldw	r6,80(sp)
  805aa4:	0005883a 	mov	r2,zero
  805aa8:	00cffc34 	movhi	r3,16368
  805aac:	180b883a 	mov	r5,r3
  805ab0:	880f883a 	mov	r7,r17
  805ab4:	1009883a 	mov	r4,r2
  805ab8:	08011840 	call	801184 <__subdf3>
  805abc:	d9401917 	ldw	r5,100(sp)
  805ac0:	180f883a 	mov	r7,r3
  805ac4:	b009883a 	mov	r4,r22
  805ac8:	100d883a 	mov	r6,r2
  805acc:	080a8040 	call	80a804 <__gtdf2>
  805ad0:	00bda216 	blt	zero,r2,80515c <_dtoa_r+0x6dc>
  805ad4:	d8c00317 	ldw	r3,12(sp)
  805ad8:	00800044 	movi	r2,1
  805adc:	10c01216 	blt	r2,r3,805b28 <_dtoa_r+0x10a8>
  805ae0:	003d4506 	br	804ff8 <_dtoa_r+0x578>
  805ae4:	d9801417 	ldw	r6,80(sp)
  805ae8:	0005883a 	mov	r2,zero
  805aec:	00cffc34 	movhi	r3,16368
  805af0:	180b883a 	mov	r5,r3
  805af4:	880f883a 	mov	r7,r17
  805af8:	1009883a 	mov	r4,r2
  805afc:	08011840 	call	801184 <__subdf3>
  805b00:	d9c01b17 	ldw	r7,108(sp)
  805b04:	180b883a 	mov	r5,r3
  805b08:	1009883a 	mov	r4,r2
  805b0c:	b00d883a 	mov	r6,r22
  805b10:	08018940 	call	801894 <__ltdf2>
  805b14:	103d9116 	blt	r2,zero,80515c <_dtoa_r+0x6dc>
  805b18:	d9800517 	ldw	r6,20(sp)
  805b1c:	d9000317 	ldw	r4,12(sp)
  805b20:	3105883a 	add	r2,r6,r4
  805b24:	e0bd3426 	beq	fp,r2,804ff8 <_dtoa_r+0x578>
  805b28:	04500934 	movhi	r17,16420
  805b2c:	0021883a 	mov	r16,zero
  805b30:	b80b883a 	mov	r5,r23
  805b34:	b009883a 	mov	r4,r22
  805b38:	800d883a 	mov	r6,r16
  805b3c:	880f883a 	mov	r7,r17
  805b40:	08012780 	call	801278 <__muldf3>
  805b44:	d9401517 	ldw	r5,84(sp)
  805b48:	d9001417 	ldw	r4,80(sp)
  805b4c:	880f883a 	mov	r7,r17
  805b50:	000d883a 	mov	r6,zero
  805b54:	d8801a15 	stw	r2,104(sp)
  805b58:	d8c01b15 	stw	r3,108(sp)
  805b5c:	08012780 	call	801278 <__muldf3>
  805b60:	180b883a 	mov	r5,r3
  805b64:	1009883a 	mov	r4,r2
  805b68:	1823883a 	mov	r17,r3
  805b6c:	1021883a 	mov	r16,r2
  805b70:	080a9140 	call	80a914 <__fixdfsi>
  805b74:	1009883a 	mov	r4,r2
  805b78:	102b883a 	mov	r21,r2
  805b7c:	08019a40 	call	8019a4 <__floatsidf>
  805b80:	880b883a 	mov	r5,r17
  805b84:	8009883a 	mov	r4,r16
  805b88:	180f883a 	mov	r7,r3
  805b8c:	100d883a 	mov	r6,r2
  805b90:	08011840 	call	801184 <__subdf3>
  805b94:	1021883a 	mov	r16,r2
  805b98:	d9001b17 	ldw	r4,108(sp)
  805b9c:	1823883a 	mov	r17,r3
  805ba0:	dc001415 	stw	r16,80(sp)
  805ba4:	ad400c04 	addi	r21,r21,48
  805ba8:	dc401515 	stw	r17,84(sp)
  805bac:	d8801a17 	ldw	r2,104(sp)
  805bb0:	e5400005 	stb	r21,0(fp)
  805bb4:	202f883a 	mov	r23,r4
  805bb8:	d9c01b17 	ldw	r7,108(sp)
  805bbc:	d9001417 	ldw	r4,80(sp)
  805bc0:	880b883a 	mov	r5,r17
  805bc4:	100d883a 	mov	r6,r2
  805bc8:	102d883a 	mov	r22,r2
  805bcc:	e7000044 	addi	fp,fp,1
  805bd0:	08018940 	call	801894 <__ltdf2>
  805bd4:	103fc30e 	bge	r2,zero,805ae4 <_dtoa_r+0x1064>
  805bd8:	d9000417 	ldw	r4,16(sp)
  805bdc:	d9000d15 	stw	r4,52(sp)
  805be0:	003d7106 	br	8051a8 <_dtoa_r+0x728>
  805be4:	d9801717 	ldw	r6,92(sp)
  805be8:	00800084 	movi	r2,2
  805bec:	11bde60e 	bge	r2,r6,805388 <_dtoa_r+0x908>
  805bf0:	203cfb1e 	bne	r4,zero,804fe0 <_dtoa_r+0x560>
  805bf4:	d9001617 	ldw	r4,88(sp)
  805bf8:	900b883a 	mov	r5,r18
  805bfc:	01800144 	movi	r6,5
  805c00:	000f883a 	mov	r7,zero
  805c04:	08089680 	call	808968 <__multadd>
  805c08:	d9000717 	ldw	r4,28(sp)
  805c0c:	100b883a 	mov	r5,r2
  805c10:	1025883a 	mov	r18,r2
  805c14:	0807da40 	call	807da4 <__mcmp>
  805c18:	00bcf10e 	bge	zero,r2,804fe0 <_dtoa_r+0x560>
  805c1c:	d8c00d17 	ldw	r3,52(sp)
  805c20:	d9000517 	ldw	r4,20(sp)
  805c24:	d8000615 	stw	zero,24(sp)
  805c28:	18c00044 	addi	r3,r3,1
  805c2c:	d8c00d15 	stw	r3,52(sp)
  805c30:	00800c44 	movi	r2,49
  805c34:	27000044 	addi	fp,r4,1
  805c38:	20800005 	stb	r2,0(r4)
  805c3c:	003e8906 	br	805664 <_dtoa_r+0xbe4>
  805c40:	d8c00517 	ldw	r3,20(sp)
  805c44:	003bc206 	br	804b50 <_dtoa_r+0xd0>
  805c48:	01802074 	movhi	r6,129
  805c4c:	31b63204 	addi	r6,r6,-10040
  805c50:	30c00917 	ldw	r3,36(r6)
  805c54:	30800817 	ldw	r2,32(r6)
  805c58:	d9001217 	ldw	r4,72(sp)
  805c5c:	d9401317 	ldw	r5,76(sp)
  805c60:	180f883a 	mov	r7,r3
  805c64:	100d883a 	mov	r6,r2
  805c68:	080163c0 	call	80163c <__divdf3>
  805c6c:	948003cc 	andi	r18,r18,15
  805c70:	058000c4 	movi	r22,3
  805c74:	1029883a 	mov	r20,r2
  805c78:	182b883a 	mov	r21,r3
  805c7c:	003c8906 	br	804ea4 <_dtoa_r+0x424>
  805c80:	d9001017 	ldw	r4,64(sp)
  805c84:	d9800917 	ldw	r6,36(sp)
  805c88:	0025883a 	mov	r18,zero
  805c8c:	1105c83a 	sub	r2,r2,r4
  805c90:	2089883a 	add	r4,r4,r2
  805c94:	308d883a 	add	r6,r6,r2
  805c98:	d9001015 	stw	r4,64(sp)
  805c9c:	d9800915 	stw	r6,36(sp)
  805ca0:	003e3206 	br	80556c <_dtoa_r+0xaec>
  805ca4:	28800044 	addi	r2,r5,1
  805ca8:	27000044 	addi	fp,r4,1
  805cac:	20800005 	stb	r2,0(r4)
  805cb0:	003e6c06 	br	805664 <_dtoa_r+0xbe4>
  805cb4:	d8800f17 	ldw	r2,60(sp)
  805cb8:	00bce016 	blt	zero,r2,80503c <_dtoa_r+0x5bc>
  805cbc:	d9800f17 	ldw	r6,60(sp)
  805cc0:	303cc51e 	bne	r6,zero,804fd8 <_dtoa_r+0x558>
  805cc4:	0005883a 	mov	r2,zero
  805cc8:	00d00534 	movhi	r3,16404
  805ccc:	980b883a 	mov	r5,r19
  805cd0:	180f883a 	mov	r7,r3
  805cd4:	9009883a 	mov	r4,r18
  805cd8:	100d883a 	mov	r6,r2
  805cdc:	08012780 	call	801278 <__muldf3>
  805ce0:	180b883a 	mov	r5,r3
  805ce4:	a80f883a 	mov	r7,r21
  805ce8:	1009883a 	mov	r4,r2
  805cec:	a00d883a 	mov	r6,r20
  805cf0:	080a88c0 	call	80a88c <__gedf2>
  805cf4:	103cb80e 	bge	r2,zero,804fd8 <_dtoa_r+0x558>
  805cf8:	0027883a 	mov	r19,zero
  805cfc:	0025883a 	mov	r18,zero
  805d00:	003fc606 	br	805c1c <_dtoa_r+0x119c>
  805d04:	99400117 	ldw	r5,4(r19)
  805d08:	d9001617 	ldw	r4,88(sp)
  805d0c:	08081c80 	call	8081c8 <_Balloc>
  805d10:	99800417 	ldw	r6,16(r19)
  805d14:	11000304 	addi	r4,r2,12
  805d18:	99400304 	addi	r5,r19,12
  805d1c:	318d883a 	add	r6,r6,r6
  805d20:	318d883a 	add	r6,r6,r6
  805d24:	31800204 	addi	r6,r6,8
  805d28:	1023883a 	mov	r17,r2
  805d2c:	0807a300 	call	807a30 <memcpy>
  805d30:	d9001617 	ldw	r4,88(sp)
  805d34:	880b883a 	mov	r5,r17
  805d38:	01800044 	movi	r6,1
  805d3c:	080858c0 	call	80858c <__lshift>
  805d40:	100b883a 	mov	r5,r2
  805d44:	003d9c06 	br	8053b8 <_dtoa_r+0x938>
  805d48:	00800e44 	movi	r2,57
  805d4c:	b8807026 	beq	r23,r2,805f10 <_dtoa_r+0x1490>
  805d50:	b8800044 	addi	r2,r23,1
  805d54:	b7000044 	addi	fp,r22,1
  805d58:	b0800005 	stb	r2,0(r22)
  805d5c:	003e4106 	br	805664 <_dtoa_r+0xbe4>
  805d60:	d8800317 	ldw	r2,12(sp)
  805d64:	01802074 	movhi	r6,129
  805d68:	31b60004 	addi	r6,r6,-10240
  805d6c:	b009883a 	mov	r4,r22
  805d70:	100e90fa 	slli	r7,r2,3
  805d74:	b80b883a 	mov	r5,r23
  805d78:	398f883a 	add	r7,r7,r6
  805d7c:	38bffe17 	ldw	r2,-8(r7)
  805d80:	d9800517 	ldw	r6,20(sp)
  805d84:	38ffff17 	ldw	r3,-4(r7)
  805d88:	37000044 	addi	fp,r6,1
  805d8c:	180f883a 	mov	r7,r3
  805d90:	100d883a 	mov	r6,r2
  805d94:	08012780 	call	801278 <__muldf3>
  805d98:	a80b883a 	mov	r5,r21
  805d9c:	a009883a 	mov	r4,r20
  805da0:	182f883a 	mov	r23,r3
  805da4:	102d883a 	mov	r22,r2
  805da8:	080a9140 	call	80a914 <__fixdfsi>
  805dac:	1009883a 	mov	r4,r2
  805db0:	1027883a 	mov	r19,r2
  805db4:	08019a40 	call	8019a4 <__floatsidf>
  805db8:	a80b883a 	mov	r5,r21
  805dbc:	a009883a 	mov	r4,r20
  805dc0:	180f883a 	mov	r7,r3
  805dc4:	100d883a 	mov	r6,r2
  805dc8:	08011840 	call	801184 <__subdf3>
  805dcc:	180b883a 	mov	r5,r3
  805dd0:	d8c00517 	ldw	r3,20(sp)
  805dd4:	9cc00c04 	addi	r19,r19,48
  805dd8:	1009883a 	mov	r4,r2
  805ddc:	1cc00005 	stb	r19,0(r3)
  805de0:	2021883a 	mov	r16,r4
  805de4:	d9000317 	ldw	r4,12(sp)
  805de8:	00800044 	movi	r2,1
  805dec:	2823883a 	mov	r17,r5
  805df0:	20802226 	beq	r4,r2,805e7c <_dtoa_r+0x13fc>
  805df4:	1029883a 	mov	r20,r2
  805df8:	0005883a 	mov	r2,zero
  805dfc:	00d00934 	movhi	r3,16420
  805e00:	180f883a 	mov	r7,r3
  805e04:	100d883a 	mov	r6,r2
  805e08:	880b883a 	mov	r5,r17
  805e0c:	8009883a 	mov	r4,r16
  805e10:	08012780 	call	801278 <__muldf3>
  805e14:	180b883a 	mov	r5,r3
  805e18:	1009883a 	mov	r4,r2
  805e1c:	1823883a 	mov	r17,r3
  805e20:	1021883a 	mov	r16,r2
  805e24:	080a9140 	call	80a914 <__fixdfsi>
  805e28:	1009883a 	mov	r4,r2
  805e2c:	102b883a 	mov	r21,r2
  805e30:	08019a40 	call	8019a4 <__floatsidf>
  805e34:	880b883a 	mov	r5,r17
  805e38:	8009883a 	mov	r4,r16
  805e3c:	180f883a 	mov	r7,r3
  805e40:	100d883a 	mov	r6,r2
  805e44:	08011840 	call	801184 <__subdf3>
  805e48:	180b883a 	mov	r5,r3
  805e4c:	d8c00517 	ldw	r3,20(sp)
  805e50:	1009883a 	mov	r4,r2
  805e54:	ad400c04 	addi	r21,r21,48
  805e58:	1d05883a 	add	r2,r3,r20
  805e5c:	15400005 	stb	r21,0(r2)
  805e60:	2021883a 	mov	r16,r4
  805e64:	d9000317 	ldw	r4,12(sp)
  805e68:	a5000044 	addi	r20,r20,1
  805e6c:	2823883a 	mov	r17,r5
  805e70:	a13fe11e 	bne	r20,r4,805df8 <_dtoa_r+0x1378>
  805e74:	e505883a 	add	r2,fp,r20
  805e78:	173fffc4 	addi	fp,r2,-1
  805e7c:	0025883a 	mov	r18,zero
  805e80:	04cff834 	movhi	r19,16352
  805e84:	b009883a 	mov	r4,r22
  805e88:	b80b883a 	mov	r5,r23
  805e8c:	900d883a 	mov	r6,r18
  805e90:	980f883a 	mov	r7,r19
  805e94:	08012040 	call	801204 <__adddf3>
  805e98:	180b883a 	mov	r5,r3
  805e9c:	1009883a 	mov	r4,r2
  805ea0:	800d883a 	mov	r6,r16
  805ea4:	880f883a 	mov	r7,r17
  805ea8:	08018940 	call	801894 <__ltdf2>
  805eac:	103cab16 	blt	r2,zero,80515c <_dtoa_r+0x6dc>
  805eb0:	0009883a 	mov	r4,zero
  805eb4:	980b883a 	mov	r5,r19
  805eb8:	b80f883a 	mov	r7,r23
  805ebc:	b00d883a 	mov	r6,r22
  805ec0:	08011840 	call	801184 <__subdf3>
  805ec4:	180b883a 	mov	r5,r3
  805ec8:	880f883a 	mov	r7,r17
  805ecc:	1009883a 	mov	r4,r2
  805ed0:	800d883a 	mov	r6,r16
  805ed4:	080a8040 	call	80a804 <__gtdf2>
  805ed8:	00bc470e 	bge	zero,r2,804ff8 <_dtoa_r+0x578>
  805edc:	00c00c04 	movi	r3,48
  805ee0:	e73fffc4 	addi	fp,fp,-1
  805ee4:	e0800007 	ldb	r2,0(fp)
  805ee8:	10fffd26 	beq	r2,r3,805ee0 <_dtoa_r+0x1460>
  805eec:	d9800417 	ldw	r6,16(sp)
  805ef0:	e7000044 	addi	fp,fp,1
  805ef4:	d9800d15 	stw	r6,52(sp)
  805ef8:	003cab06 	br	8051a8 <_dtoa_r+0x728>
  805efc:	d8c00f17 	ldw	r3,60(sp)
  805f00:	d9001117 	ldw	r4,68(sp)
  805f04:	20e1c83a 	sub	r16,r4,r3
  805f08:	0007883a 	mov	r3,zero
  805f0c:	003d9b06 	br	80557c <_dtoa_r+0xafc>
  805f10:	00800e44 	movi	r2,57
  805f14:	b0800005 	stb	r2,0(r22)
  805f18:	b5800044 	addi	r22,r22,1
  805f1c:	003dc106 	br	805624 <_dtoa_r+0xba4>
  805f20:	05800084 	movi	r22,2
  805f24:	003bf706 	br	804f04 <_dtoa_r+0x484>
  805f28:	d9000f17 	ldw	r4,60(sp)
  805f2c:	013c000e 	bge	zero,r4,804f30 <_dtoa_r+0x4b0>
  805f30:	d9800e17 	ldw	r6,56(sp)
  805f34:	01bc300e 	bge	zero,r6,804ff8 <_dtoa_r+0x578>
  805f38:	0005883a 	mov	r2,zero
  805f3c:	00d00934 	movhi	r3,16420
  805f40:	a80b883a 	mov	r5,r21
  805f44:	180f883a 	mov	r7,r3
  805f48:	a009883a 	mov	r4,r20
  805f4c:	100d883a 	mov	r6,r2
  805f50:	08012780 	call	801278 <__muldf3>
  805f54:	b1000044 	addi	r4,r22,1
  805f58:	1021883a 	mov	r16,r2
  805f5c:	1823883a 	mov	r17,r3
  805f60:	08019a40 	call	8019a4 <__floatsidf>
  805f64:	880b883a 	mov	r5,r17
  805f68:	8009883a 	mov	r4,r16
  805f6c:	180f883a 	mov	r7,r3
  805f70:	100d883a 	mov	r6,r2
  805f74:	08012780 	call	801278 <__muldf3>
  805f78:	0011883a 	mov	r8,zero
  805f7c:	02500734 	movhi	r9,16412
  805f80:	180b883a 	mov	r5,r3
  805f84:	480f883a 	mov	r7,r9
  805f88:	1009883a 	mov	r4,r2
  805f8c:	400d883a 	mov	r6,r8
  805f90:	08012040 	call	801204 <__adddf3>
  805f94:	102d883a 	mov	r22,r2
  805f98:	00bf3034 	movhi	r2,64704
  805f9c:	10ef883a 	add	r23,r2,r3
  805fa0:	d8800d17 	ldw	r2,52(sp)
  805fa4:	d8c00e17 	ldw	r3,56(sp)
  805fa8:	8029883a 	mov	r20,r16
  805fac:	10bfffc4 	addi	r2,r2,-1
  805fb0:	882b883a 	mov	r21,r17
  805fb4:	d8800415 	stw	r2,16(sp)
  805fb8:	d8c00315 	stw	r3,12(sp)
  805fbc:	003e8306 	br	8059cc <_dtoa_r+0xf4c>
  805fc0:	d8800117 	ldw	r2,4(sp)
  805fc4:	dc001117 	ldw	r16,68(sp)
  805fc8:	dc801017 	ldw	r18,64(sp)
  805fcc:	00c00d84 	movi	r3,54
  805fd0:	1887c83a 	sub	r3,r3,r2
  805fd4:	003d6906 	br	80557c <_dtoa_r+0xafc>
  805fd8:	01800044 	movi	r6,1
  805fdc:	3021883a 	mov	r16,r6
  805fe0:	d9800f15 	stw	r6,60(sp)
  805fe4:	d9802615 	stw	r6,152(sp)
  805fe8:	d9800e15 	stw	r6,56(sp)
  805fec:	003b9306 	br	804e3c <_dtoa_r+0x3bc>
  805ff0:	b021883a 	mov	r16,r22
  805ff4:	dd800f15 	stw	r22,60(sp)
  805ff8:	003b9006 	br	804e3c <_dtoa_r+0x3bc>
  805ffc:	103e221e 	bne	r2,zero,805888 <_dtoa_r+0xe08>
  806000:	b880004c 	andi	r2,r23,1
  806004:	1005003a 	cmpeq	r2,r2,zero
  806008:	103e1f1e 	bne	r2,zero,805888 <_dtoa_r+0xe08>
  80600c:	003e1b06 	br	80587c <_dtoa_r+0xdfc>
  806010:	d9001617 	ldw	r4,88(sp)
  806014:	980b883a 	mov	r5,r19
  806018:	01800284 	movi	r6,10
  80601c:	000f883a 	mov	r7,zero
  806020:	08089680 	call	808968 <__multadd>
  806024:	d8c00e17 	ldw	r3,56(sp)
  806028:	1027883a 	mov	r19,r2
  80602c:	d8c00f15 	stw	r3,60(sp)
  806030:	003cd306 	br	805380 <_dtoa_r+0x900>

00806034 <_fflush_r>:
  806034:	defffb04 	addi	sp,sp,-20
  806038:	dcc00315 	stw	r19,12(sp)
  80603c:	dc800215 	stw	r18,8(sp)
  806040:	dfc00415 	stw	ra,16(sp)
  806044:	dc400115 	stw	r17,4(sp)
  806048:	dc000015 	stw	r16,0(sp)
  80604c:	2027883a 	mov	r19,r4
  806050:	2825883a 	mov	r18,r5
  806054:	20000226 	beq	r4,zero,806060 <_fflush_r+0x2c>
  806058:	20800e17 	ldw	r2,56(r4)
  80605c:	10005626 	beq	r2,zero,8061b8 <_fflush_r+0x184>
  806060:	9100030b 	ldhu	r4,12(r18)
  806064:	20ffffcc 	andi	r3,r4,65535
  806068:	18e0001c 	xori	r3,r3,32768
  80606c:	18e00004 	addi	r3,r3,-32768
  806070:	1880020c 	andi	r2,r3,8
  806074:	1000261e 	bne	r2,zero,806110 <_fflush_r+0xdc>
  806078:	90c00117 	ldw	r3,4(r18)
  80607c:	20820014 	ori	r2,r4,2048
  806080:	9080030d 	sth	r2,12(r18)
  806084:	1009883a 	mov	r4,r2
  806088:	00c0400e 	bge	zero,r3,80618c <_fflush_r+0x158>
  80608c:	92000a17 	ldw	r8,40(r18)
  806090:	40004026 	beq	r8,zero,806194 <_fflush_r+0x160>
  806094:	2084000c 	andi	r2,r4,4096
  806098:	10005326 	beq	r2,zero,8061e8 <_fflush_r+0x1b4>
  80609c:	94001417 	ldw	r16,80(r18)
  8060a0:	9080030b 	ldhu	r2,12(r18)
  8060a4:	1080010c 	andi	r2,r2,4
  8060a8:	1000481e 	bne	r2,zero,8061cc <_fflush_r+0x198>
  8060ac:	91400717 	ldw	r5,28(r18)
  8060b0:	9809883a 	mov	r4,r19
  8060b4:	800d883a 	mov	r6,r16
  8060b8:	000f883a 	mov	r7,zero
  8060bc:	403ee83a 	callr	r8
  8060c0:	8080261e 	bne	r16,r2,80615c <_fflush_r+0x128>
  8060c4:	9080030b 	ldhu	r2,12(r18)
  8060c8:	91000417 	ldw	r4,16(r18)
  8060cc:	90000115 	stw	zero,4(r18)
  8060d0:	10bdffcc 	andi	r2,r2,63487
  8060d4:	10ffffcc 	andi	r3,r2,65535
  8060d8:	18c4000c 	andi	r3,r3,4096
  8060dc:	9080030d 	sth	r2,12(r18)
  8060e0:	91000015 	stw	r4,0(r18)
  8060e4:	18002b26 	beq	r3,zero,806194 <_fflush_r+0x160>
  8060e8:	0007883a 	mov	r3,zero
  8060ec:	1805883a 	mov	r2,r3
  8060f0:	94001415 	stw	r16,80(r18)
  8060f4:	dfc00417 	ldw	ra,16(sp)
  8060f8:	dcc00317 	ldw	r19,12(sp)
  8060fc:	dc800217 	ldw	r18,8(sp)
  806100:	dc400117 	ldw	r17,4(sp)
  806104:	dc000017 	ldw	r16,0(sp)
  806108:	dec00504 	addi	sp,sp,20
  80610c:	f800283a 	ret
  806110:	94400417 	ldw	r17,16(r18)
  806114:	88001f26 	beq	r17,zero,806194 <_fflush_r+0x160>
  806118:	90800017 	ldw	r2,0(r18)
  80611c:	18c000cc 	andi	r3,r3,3
  806120:	94400015 	stw	r17,0(r18)
  806124:	1461c83a 	sub	r16,r2,r17
  806128:	18002526 	beq	r3,zero,8061c0 <_fflush_r+0x18c>
  80612c:	0005883a 	mov	r2,zero
  806130:	90800215 	stw	r2,8(r18)
  806134:	0400170e 	bge	zero,r16,806194 <_fflush_r+0x160>
  806138:	90c00917 	ldw	r3,36(r18)
  80613c:	91400717 	ldw	r5,28(r18)
  806140:	880d883a 	mov	r6,r17
  806144:	800f883a 	mov	r7,r16
  806148:	9809883a 	mov	r4,r19
  80614c:	183ee83a 	callr	r3
  806150:	88a3883a 	add	r17,r17,r2
  806154:	80a1c83a 	sub	r16,r16,r2
  806158:	00bff616 	blt	zero,r2,806134 <_fflush_r+0x100>
  80615c:	9080030b 	ldhu	r2,12(r18)
  806160:	00ffffc4 	movi	r3,-1
  806164:	10801014 	ori	r2,r2,64
  806168:	9080030d 	sth	r2,12(r18)
  80616c:	1805883a 	mov	r2,r3
  806170:	dfc00417 	ldw	ra,16(sp)
  806174:	dcc00317 	ldw	r19,12(sp)
  806178:	dc800217 	ldw	r18,8(sp)
  80617c:	dc400117 	ldw	r17,4(sp)
  806180:	dc000017 	ldw	r16,0(sp)
  806184:	dec00504 	addi	sp,sp,20
  806188:	f800283a 	ret
  80618c:	90800f17 	ldw	r2,60(r18)
  806190:	00bfbe16 	blt	zero,r2,80608c <_fflush_r+0x58>
  806194:	0007883a 	mov	r3,zero
  806198:	1805883a 	mov	r2,r3
  80619c:	dfc00417 	ldw	ra,16(sp)
  8061a0:	dcc00317 	ldw	r19,12(sp)
  8061a4:	dc800217 	ldw	r18,8(sp)
  8061a8:	dc400117 	ldw	r17,4(sp)
  8061ac:	dc000017 	ldw	r16,0(sp)
  8061b0:	dec00504 	addi	sp,sp,20
  8061b4:	f800283a 	ret
  8061b8:	08062cc0 	call	8062cc <__sinit>
  8061bc:	003fa806 	br	806060 <_fflush_r+0x2c>
  8061c0:	90800517 	ldw	r2,20(r18)
  8061c4:	90800215 	stw	r2,8(r18)
  8061c8:	003fda06 	br	806134 <_fflush_r+0x100>
  8061cc:	90800117 	ldw	r2,4(r18)
  8061d0:	90c00c17 	ldw	r3,48(r18)
  8061d4:	80a1c83a 	sub	r16,r16,r2
  8061d8:	183fb426 	beq	r3,zero,8060ac <_fflush_r+0x78>
  8061dc:	90800f17 	ldw	r2,60(r18)
  8061e0:	80a1c83a 	sub	r16,r16,r2
  8061e4:	003fb106 	br	8060ac <_fflush_r+0x78>
  8061e8:	91400717 	ldw	r5,28(r18)
  8061ec:	9809883a 	mov	r4,r19
  8061f0:	000d883a 	mov	r6,zero
  8061f4:	01c00044 	movi	r7,1
  8061f8:	403ee83a 	callr	r8
  8061fc:	1021883a 	mov	r16,r2
  806200:	00bfffc4 	movi	r2,-1
  806204:	80800226 	beq	r16,r2,806210 <_fflush_r+0x1dc>
  806208:	92000a17 	ldw	r8,40(r18)
  80620c:	003fa406 	br	8060a0 <_fflush_r+0x6c>
  806210:	98c00017 	ldw	r3,0(r19)
  806214:	00800744 	movi	r2,29
  806218:	18bfde26 	beq	r3,r2,806194 <_fflush_r+0x160>
  80621c:	9080030b 	ldhu	r2,12(r18)
  806220:	8007883a 	mov	r3,r16
  806224:	10801014 	ori	r2,r2,64
  806228:	9080030d 	sth	r2,12(r18)
  80622c:	003fcf06 	br	80616c <_fflush_r+0x138>

00806230 <fflush>:
  806230:	01402034 	movhi	r5,128
  806234:	29580d04 	addi	r5,r5,24628
  806238:	2007883a 	mov	r3,r4
  80623c:	20000526 	beq	r4,zero,806254 <fflush+0x24>
  806240:	00802074 	movhi	r2,129
  806244:	10bce204 	addi	r2,r2,-3192
  806248:	11000017 	ldw	r4,0(r2)
  80624c:	180b883a 	mov	r5,r3
  806250:	08060341 	jmpi	806034 <_fflush_r>
  806254:	00802074 	movhi	r2,129
  806258:	10bce304 	addi	r2,r2,-3188
  80625c:	11000017 	ldw	r4,0(r2)
  806260:	0806e341 	jmpi	806e34 <_fwalk_reent>

00806264 <std>:
  806264:	00802074 	movhi	r2,129
  806268:	10a4de04 	addi	r2,r2,-27784
  80626c:	20800b15 	stw	r2,44(r4)
  806270:	00802074 	movhi	r2,129
  806274:	10a51904 	addi	r2,r2,-27548
  806278:	20800815 	stw	r2,32(r4)
  80627c:	00c02074 	movhi	r3,129
  806280:	18e4fa04 	addi	r3,r3,-27672
  806284:	00802074 	movhi	r2,129
  806288:	10a4e004 	addi	r2,r2,-27776
  80628c:	2140030d 	sth	r5,12(r4)
  806290:	2180038d 	sth	r6,14(r4)
  806294:	20c00915 	stw	r3,36(r4)
  806298:	20800a15 	stw	r2,40(r4)
  80629c:	20000015 	stw	zero,0(r4)
  8062a0:	20000115 	stw	zero,4(r4)
  8062a4:	20000215 	stw	zero,8(r4)
  8062a8:	20000415 	stw	zero,16(r4)
  8062ac:	20000515 	stw	zero,20(r4)
  8062b0:	20000615 	stw	zero,24(r4)
  8062b4:	21000715 	stw	r4,28(r4)
  8062b8:	f800283a 	ret

008062bc <__sfp_lock_acquire>:
  8062bc:	f800283a 	ret

008062c0 <__sfp_lock_release>:
  8062c0:	f800283a 	ret

008062c4 <__sinit_lock_acquire>:
  8062c4:	f800283a 	ret

008062c8 <__sinit_lock_release>:
  8062c8:	f800283a 	ret

008062cc <__sinit>:
  8062cc:	20800e17 	ldw	r2,56(r4)
  8062d0:	defffd04 	addi	sp,sp,-12
  8062d4:	dc400115 	stw	r17,4(sp)
  8062d8:	dc000015 	stw	r16,0(sp)
  8062dc:	dfc00215 	stw	ra,8(sp)
  8062e0:	04400044 	movi	r17,1
  8062e4:	01400104 	movi	r5,4
  8062e8:	000d883a 	mov	r6,zero
  8062ec:	2021883a 	mov	r16,r4
  8062f0:	2200bb04 	addi	r8,r4,748
  8062f4:	200f883a 	mov	r7,r4
  8062f8:	10000526 	beq	r2,zero,806310 <__sinit+0x44>
  8062fc:	dfc00217 	ldw	ra,8(sp)
  806300:	dc400117 	ldw	r17,4(sp)
  806304:	dc000017 	ldw	r16,0(sp)
  806308:	dec00304 	addi	sp,sp,12
  80630c:	f800283a 	ret
  806310:	21000117 	ldw	r4,4(r4)
  806314:	00802034 	movhi	r2,128
  806318:	1098ec04 	addi	r2,r2,25520
  80631c:	00c000c4 	movi	r3,3
  806320:	80800f15 	stw	r2,60(r16)
  806324:	80c0b915 	stw	r3,740(r16)
  806328:	8200ba15 	stw	r8,744(r16)
  80632c:	84400e15 	stw	r17,56(r16)
  806330:	8000b815 	stw	zero,736(r16)
  806334:	08062640 	call	806264 <std>
  806338:	81000217 	ldw	r4,8(r16)
  80633c:	880d883a 	mov	r6,r17
  806340:	800f883a 	mov	r7,r16
  806344:	01400284 	movi	r5,10
  806348:	08062640 	call	806264 <std>
  80634c:	81000317 	ldw	r4,12(r16)
  806350:	800f883a 	mov	r7,r16
  806354:	01400484 	movi	r5,18
  806358:	01800084 	movi	r6,2
  80635c:	dfc00217 	ldw	ra,8(sp)
  806360:	dc400117 	ldw	r17,4(sp)
  806364:	dc000017 	ldw	r16,0(sp)
  806368:	dec00304 	addi	sp,sp,12
  80636c:	08062641 	jmpi	806264 <std>

00806370 <__fp_lock>:
  806370:	0005883a 	mov	r2,zero
  806374:	f800283a 	ret

00806378 <__fp_unlock>:
  806378:	0005883a 	mov	r2,zero
  80637c:	f800283a 	ret

00806380 <__fp_unlock_all>:
  806380:	00802074 	movhi	r2,129
  806384:	10bce204 	addi	r2,r2,-3192
  806388:	11000017 	ldw	r4,0(r2)
  80638c:	01402034 	movhi	r5,128
  806390:	2958de04 	addi	r5,r5,25464
  806394:	0806efc1 	jmpi	806efc <_fwalk>

00806398 <__fp_lock_all>:
  806398:	00802074 	movhi	r2,129
  80639c:	10bce204 	addi	r2,r2,-3192
  8063a0:	11000017 	ldw	r4,0(r2)
  8063a4:	01402034 	movhi	r5,128
  8063a8:	2958dc04 	addi	r5,r5,25456
  8063ac:	0806efc1 	jmpi	806efc <_fwalk>

008063b0 <_cleanup_r>:
  8063b0:	01402074 	movhi	r5,129
  8063b4:	29661004 	addi	r5,r5,-26560
  8063b8:	0806efc1 	jmpi	806efc <_fwalk>

008063bc <_cleanup>:
  8063bc:	00802074 	movhi	r2,129
  8063c0:	10bce304 	addi	r2,r2,-3188
  8063c4:	11000017 	ldw	r4,0(r2)
  8063c8:	08063b01 	jmpi	8063b0 <_cleanup_r>

008063cc <__sfmoreglue>:
  8063cc:	defffc04 	addi	sp,sp,-16
  8063d0:	dc000015 	stw	r16,0(sp)
  8063d4:	2821883a 	mov	r16,r5
  8063d8:	dc400115 	stw	r17,4(sp)
  8063dc:	01401704 	movi	r5,92
  8063e0:	2023883a 	mov	r17,r4
  8063e4:	8009883a 	mov	r4,r16
  8063e8:	dfc00315 	stw	ra,12(sp)
  8063ec:	dcc00215 	stw	r19,8(sp)
  8063f0:	0801be80 	call	801be8 <__mulsi3>
  8063f4:	11400304 	addi	r5,r2,12
  8063f8:	8809883a 	mov	r4,r17
  8063fc:	1027883a 	mov	r19,r2
  806400:	080720c0 	call	80720c <_malloc_r>
  806404:	10c00304 	addi	r3,r2,12
  806408:	1023883a 	mov	r17,r2
  80640c:	1809883a 	mov	r4,r3
  806410:	980d883a 	mov	r6,r19
  806414:	000b883a 	mov	r5,zero
  806418:	10000b26 	beq	r2,zero,806448 <__sfmoreglue+0x7c>
  80641c:	14000115 	stw	r16,4(r2)
  806420:	10c00215 	stw	r3,8(r2)
  806424:	10000015 	stw	zero,0(r2)
  806428:	0807bb00 	call	807bb0 <memset>
  80642c:	8805883a 	mov	r2,r17
  806430:	dfc00317 	ldw	ra,12(sp)
  806434:	dcc00217 	ldw	r19,8(sp)
  806438:	dc400117 	ldw	r17,4(sp)
  80643c:	dc000017 	ldw	r16,0(sp)
  806440:	dec00404 	addi	sp,sp,16
  806444:	f800283a 	ret
  806448:	0023883a 	mov	r17,zero
  80644c:	8805883a 	mov	r2,r17
  806450:	dfc00317 	ldw	ra,12(sp)
  806454:	dcc00217 	ldw	r19,8(sp)
  806458:	dc400117 	ldw	r17,4(sp)
  80645c:	dc000017 	ldw	r16,0(sp)
  806460:	dec00404 	addi	sp,sp,16
  806464:	f800283a 	ret

00806468 <__sfp>:
  806468:	defffd04 	addi	sp,sp,-12
  80646c:	00802074 	movhi	r2,129
  806470:	10bce304 	addi	r2,r2,-3188
  806474:	dc000015 	stw	r16,0(sp)
  806478:	14000017 	ldw	r16,0(r2)
  80647c:	dc400115 	stw	r17,4(sp)
  806480:	dfc00215 	stw	ra,8(sp)
  806484:	80800e17 	ldw	r2,56(r16)
  806488:	2023883a 	mov	r17,r4
  80648c:	10002626 	beq	r2,zero,806528 <__sfp+0xc0>
  806490:	8400b804 	addi	r16,r16,736
  806494:	80800117 	ldw	r2,4(r16)
  806498:	81000217 	ldw	r4,8(r16)
  80649c:	10ffffc4 	addi	r3,r2,-1
  8064a0:	18000916 	blt	r3,zero,8064c8 <__sfp+0x60>
  8064a4:	2080030f 	ldh	r2,12(r4)
  8064a8:	10000b26 	beq	r2,zero,8064d8 <__sfp+0x70>
  8064ac:	017fffc4 	movi	r5,-1
  8064b0:	00000206 	br	8064bc <__sfp+0x54>
  8064b4:	2080030f 	ldh	r2,12(r4)
  8064b8:	10000726 	beq	r2,zero,8064d8 <__sfp+0x70>
  8064bc:	18ffffc4 	addi	r3,r3,-1
  8064c0:	21001704 	addi	r4,r4,92
  8064c4:	197ffb1e 	bne	r3,r5,8064b4 <__sfp+0x4c>
  8064c8:	80800017 	ldw	r2,0(r16)
  8064cc:	10001926 	beq	r2,zero,806534 <__sfp+0xcc>
  8064d0:	1021883a 	mov	r16,r2
  8064d4:	003fef06 	br	806494 <__sfp+0x2c>
  8064d8:	00bfffc4 	movi	r2,-1
  8064dc:	00c00044 	movi	r3,1
  8064e0:	2080038d 	sth	r2,14(r4)
  8064e4:	20c0030d 	sth	r3,12(r4)
  8064e8:	20000015 	stw	zero,0(r4)
  8064ec:	20000215 	stw	zero,8(r4)
  8064f0:	20000115 	stw	zero,4(r4)
  8064f4:	20000415 	stw	zero,16(r4)
  8064f8:	20000515 	stw	zero,20(r4)
  8064fc:	20000615 	stw	zero,24(r4)
  806500:	20000c15 	stw	zero,48(r4)
  806504:	20000d15 	stw	zero,52(r4)
  806508:	20001115 	stw	zero,68(r4)
  80650c:	20001215 	stw	zero,72(r4)
  806510:	2005883a 	mov	r2,r4
  806514:	dfc00217 	ldw	ra,8(sp)
  806518:	dc400117 	ldw	r17,4(sp)
  80651c:	dc000017 	ldw	r16,0(sp)
  806520:	dec00304 	addi	sp,sp,12
  806524:	f800283a 	ret
  806528:	8009883a 	mov	r4,r16
  80652c:	08062cc0 	call	8062cc <__sinit>
  806530:	003fd706 	br	806490 <__sfp+0x28>
  806534:	8809883a 	mov	r4,r17
  806538:	01400104 	movi	r5,4
  80653c:	08063cc0 	call	8063cc <__sfmoreglue>
  806540:	80800015 	stw	r2,0(r16)
  806544:	103fe21e 	bne	r2,zero,8064d0 <__sfp+0x68>
  806548:	00800304 	movi	r2,12
  80654c:	0009883a 	mov	r4,zero
  806550:	88800015 	stw	r2,0(r17)
  806554:	003fee06 	br	806510 <__sfp+0xa8>

00806558 <_malloc_trim_r>:
  806558:	defffb04 	addi	sp,sp,-20
  80655c:	dcc00315 	stw	r19,12(sp)
  806560:	04c02074 	movhi	r19,129
  806564:	9cf75904 	addi	r19,r19,-8860
  806568:	dc800215 	stw	r18,8(sp)
  80656c:	dc400115 	stw	r17,4(sp)
  806570:	dc000015 	stw	r16,0(sp)
  806574:	2823883a 	mov	r17,r5
  806578:	2025883a 	mov	r18,r4
  80657c:	dfc00415 	stw	ra,16(sp)
  806580:	080b6340 	call	80b634 <__malloc_lock>
  806584:	98800217 	ldw	r2,8(r19)
  806588:	9009883a 	mov	r4,r18
  80658c:	000b883a 	mov	r5,zero
  806590:	10c00117 	ldw	r3,4(r2)
  806594:	00bfff04 	movi	r2,-4
  806598:	18a0703a 	and	r16,r3,r2
  80659c:	8463c83a 	sub	r17,r16,r17
  8065a0:	8c43fbc4 	addi	r17,r17,4079
  8065a4:	8822d33a 	srli	r17,r17,12
  8065a8:	0083ffc4 	movi	r2,4095
  8065ac:	8c7fffc4 	addi	r17,r17,-1
  8065b0:	8822933a 	slli	r17,r17,12
  8065b4:	1440060e 	bge	r2,r17,8065d0 <_malloc_trim_r+0x78>
  8065b8:	08093080 	call	809308 <_sbrk_r>
  8065bc:	98c00217 	ldw	r3,8(r19)
  8065c0:	9009883a 	mov	r4,r18
  8065c4:	044bc83a 	sub	r5,zero,r17
  8065c8:	80c7883a 	add	r3,r16,r3
  8065cc:	10c00926 	beq	r2,r3,8065f4 <_malloc_trim_r+0x9c>
  8065d0:	080b6540 	call	80b654 <__malloc_unlock>
  8065d4:	0005883a 	mov	r2,zero
  8065d8:	dfc00417 	ldw	ra,16(sp)
  8065dc:	dcc00317 	ldw	r19,12(sp)
  8065e0:	dc800217 	ldw	r18,8(sp)
  8065e4:	dc400117 	ldw	r17,4(sp)
  8065e8:	dc000017 	ldw	r16,0(sp)
  8065ec:	dec00504 	addi	sp,sp,20
  8065f0:	f800283a 	ret
  8065f4:	9009883a 	mov	r4,r18
  8065f8:	08093080 	call	809308 <_sbrk_r>
  8065fc:	844dc83a 	sub	r6,r16,r17
  806600:	00ffffc4 	movi	r3,-1
  806604:	9009883a 	mov	r4,r18
  806608:	000b883a 	mov	r5,zero
  80660c:	01c02074 	movhi	r7,129
  806610:	39c3a204 	addi	r7,r7,3720
  806614:	31800054 	ori	r6,r6,1
  806618:	10c00926 	beq	r2,r3,806640 <_malloc_trim_r+0xe8>
  80661c:	38800017 	ldw	r2,0(r7)
  806620:	98c00217 	ldw	r3,8(r19)
  806624:	9009883a 	mov	r4,r18
  806628:	1445c83a 	sub	r2,r2,r17
  80662c:	38800015 	stw	r2,0(r7)
  806630:	19800115 	stw	r6,4(r3)
  806634:	080b6540 	call	80b654 <__malloc_unlock>
  806638:	00800044 	movi	r2,1
  80663c:	003fe606 	br	8065d8 <_malloc_trim_r+0x80>
  806640:	08093080 	call	809308 <_sbrk_r>
  806644:	99800217 	ldw	r6,8(r19)
  806648:	100f883a 	mov	r7,r2
  80664c:	9009883a 	mov	r4,r18
  806650:	1187c83a 	sub	r3,r2,r6
  806654:	008003c4 	movi	r2,15
  806658:	19400054 	ori	r5,r3,1
  80665c:	10ffdc0e 	bge	r2,r3,8065d0 <_malloc_trim_r+0x78>
  806660:	00802074 	movhi	r2,129
  806664:	10bce704 	addi	r2,r2,-3172
  806668:	10c00017 	ldw	r3,0(r2)
  80666c:	00802074 	movhi	r2,129
  806670:	1083a204 	addi	r2,r2,3720
  806674:	31400115 	stw	r5,4(r6)
  806678:	38c7c83a 	sub	r3,r7,r3
  80667c:	10c00015 	stw	r3,0(r2)
  806680:	003fd306 	br	8065d0 <_malloc_trim_r+0x78>

00806684 <_free_r>:
  806684:	defffd04 	addi	sp,sp,-12
  806688:	dc400115 	stw	r17,4(sp)
  80668c:	dc000015 	stw	r16,0(sp)
  806690:	dfc00215 	stw	ra,8(sp)
  806694:	2821883a 	mov	r16,r5
  806698:	2023883a 	mov	r17,r4
  80669c:	28005a26 	beq	r5,zero,806808 <_free_r+0x184>
  8066a0:	080b6340 	call	80b634 <__malloc_lock>
  8066a4:	823ffe04 	addi	r8,r16,-8
  8066a8:	41400117 	ldw	r5,4(r8)
  8066ac:	00bfff84 	movi	r2,-2
  8066b0:	02802074 	movhi	r10,129
  8066b4:	52b75904 	addi	r10,r10,-8860
  8066b8:	288e703a 	and	r7,r5,r2
  8066bc:	41cd883a 	add	r6,r8,r7
  8066c0:	30c00117 	ldw	r3,4(r6)
  8066c4:	51000217 	ldw	r4,8(r10)
  8066c8:	00bfff04 	movi	r2,-4
  8066cc:	1892703a 	and	r9,r3,r2
  8066d0:	5017883a 	mov	r11,r10
  8066d4:	31006726 	beq	r6,r4,806874 <_free_r+0x1f0>
  8066d8:	2880004c 	andi	r2,r5,1
  8066dc:	1005003a 	cmpeq	r2,r2,zero
  8066e0:	32400115 	stw	r9,4(r6)
  8066e4:	10001a1e 	bne	r2,zero,806750 <_free_r+0xcc>
  8066e8:	000b883a 	mov	r5,zero
  8066ec:	3247883a 	add	r3,r6,r9
  8066f0:	18800117 	ldw	r2,4(r3)
  8066f4:	1080004c 	andi	r2,r2,1
  8066f8:	1000231e 	bne	r2,zero,806788 <_free_r+0x104>
  8066fc:	280ac03a 	cmpne	r5,r5,zero
  806700:	3a4f883a 	add	r7,r7,r9
  806704:	2800451e 	bne	r5,zero,80681c <_free_r+0x198>
  806708:	31000217 	ldw	r4,8(r6)
  80670c:	00802074 	movhi	r2,129
  806710:	10b75b04 	addi	r2,r2,-8852
  806714:	20807b26 	beq	r4,r2,806904 <_free_r+0x280>
  806718:	30800317 	ldw	r2,12(r6)
  80671c:	3a07883a 	add	r3,r7,r8
  806720:	19c00015 	stw	r7,0(r3)
  806724:	11000215 	stw	r4,8(r2)
  806728:	20800315 	stw	r2,12(r4)
  80672c:	38800054 	ori	r2,r7,1
  806730:	40800115 	stw	r2,4(r8)
  806734:	28001a26 	beq	r5,zero,8067a0 <_free_r+0x11c>
  806738:	8809883a 	mov	r4,r17
  80673c:	dfc00217 	ldw	ra,8(sp)
  806740:	dc400117 	ldw	r17,4(sp)
  806744:	dc000017 	ldw	r16,0(sp)
  806748:	dec00304 	addi	sp,sp,12
  80674c:	080b6541 	jmpi	80b654 <__malloc_unlock>
  806750:	80bffe17 	ldw	r2,-8(r16)
  806754:	50c00204 	addi	r3,r10,8
  806758:	4091c83a 	sub	r8,r8,r2
  80675c:	41000217 	ldw	r4,8(r8)
  806760:	388f883a 	add	r7,r7,r2
  806764:	20c06126 	beq	r4,r3,8068ec <_free_r+0x268>
  806768:	40800317 	ldw	r2,12(r8)
  80676c:	3247883a 	add	r3,r6,r9
  806770:	000b883a 	mov	r5,zero
  806774:	11000215 	stw	r4,8(r2)
  806778:	20800315 	stw	r2,12(r4)
  80677c:	18800117 	ldw	r2,4(r3)
  806780:	1080004c 	andi	r2,r2,1
  806784:	103fdd26 	beq	r2,zero,8066fc <_free_r+0x78>
  806788:	38800054 	ori	r2,r7,1
  80678c:	3a07883a 	add	r3,r7,r8
  806790:	280ac03a 	cmpne	r5,r5,zero
  806794:	40800115 	stw	r2,4(r8)
  806798:	19c00015 	stw	r7,0(r3)
  80679c:	283fe61e 	bne	r5,zero,806738 <_free_r+0xb4>
  8067a0:	00807fc4 	movi	r2,511
  8067a4:	11c01f2e 	bgeu	r2,r7,806824 <_free_r+0x1a0>
  8067a8:	3806d27a 	srli	r3,r7,9
  8067ac:	1800481e 	bne	r3,zero,8068d0 <_free_r+0x24c>
  8067b0:	3804d0fa 	srli	r2,r7,3
  8067b4:	100690fa 	slli	r3,r2,3
  8067b8:	1acd883a 	add	r6,r3,r11
  8067bc:	31400217 	ldw	r5,8(r6)
  8067c0:	31405926 	beq	r6,r5,806928 <_free_r+0x2a4>
  8067c4:	28800117 	ldw	r2,4(r5)
  8067c8:	00ffff04 	movi	r3,-4
  8067cc:	10c4703a 	and	r2,r2,r3
  8067d0:	3880022e 	bgeu	r7,r2,8067dc <_free_r+0x158>
  8067d4:	29400217 	ldw	r5,8(r5)
  8067d8:	317ffa1e 	bne	r6,r5,8067c4 <_free_r+0x140>
  8067dc:	29800317 	ldw	r6,12(r5)
  8067e0:	41800315 	stw	r6,12(r8)
  8067e4:	41400215 	stw	r5,8(r8)
  8067e8:	8809883a 	mov	r4,r17
  8067ec:	2a000315 	stw	r8,12(r5)
  8067f0:	32000215 	stw	r8,8(r6)
  8067f4:	dfc00217 	ldw	ra,8(sp)
  8067f8:	dc400117 	ldw	r17,4(sp)
  8067fc:	dc000017 	ldw	r16,0(sp)
  806800:	dec00304 	addi	sp,sp,12
  806804:	080b6541 	jmpi	80b654 <__malloc_unlock>
  806808:	dfc00217 	ldw	ra,8(sp)
  80680c:	dc400117 	ldw	r17,4(sp)
  806810:	dc000017 	ldw	r16,0(sp)
  806814:	dec00304 	addi	sp,sp,12
  806818:	f800283a 	ret
  80681c:	31000217 	ldw	r4,8(r6)
  806820:	003fbd06 	br	806718 <_free_r+0x94>
  806824:	3806d0fa 	srli	r3,r7,3
  806828:	00800044 	movi	r2,1
  80682c:	51400117 	ldw	r5,4(r10)
  806830:	180890fa 	slli	r4,r3,3
  806834:	1807d0ba 	srai	r3,r3,2
  806838:	22c9883a 	add	r4,r4,r11
  80683c:	21800217 	ldw	r6,8(r4)
  806840:	10c4983a 	sll	r2,r2,r3
  806844:	41000315 	stw	r4,12(r8)
  806848:	41800215 	stw	r6,8(r8)
  80684c:	288ab03a 	or	r5,r5,r2
  806850:	22000215 	stw	r8,8(r4)
  806854:	8809883a 	mov	r4,r17
  806858:	51400115 	stw	r5,4(r10)
  80685c:	32000315 	stw	r8,12(r6)
  806860:	dfc00217 	ldw	ra,8(sp)
  806864:	dc400117 	ldw	r17,4(sp)
  806868:	dc000017 	ldw	r16,0(sp)
  80686c:	dec00304 	addi	sp,sp,12
  806870:	080b6541 	jmpi	80b654 <__malloc_unlock>
  806874:	2880004c 	andi	r2,r5,1
  806878:	3a4d883a 	add	r6,r7,r9
  80687c:	1000071e 	bne	r2,zero,80689c <_free_r+0x218>
  806880:	80bffe17 	ldw	r2,-8(r16)
  806884:	4091c83a 	sub	r8,r8,r2
  806888:	41000317 	ldw	r4,12(r8)
  80688c:	40c00217 	ldw	r3,8(r8)
  806890:	308d883a 	add	r6,r6,r2
  806894:	20c00215 	stw	r3,8(r4)
  806898:	19000315 	stw	r4,12(r3)
  80689c:	00802074 	movhi	r2,129
  8068a0:	10bce604 	addi	r2,r2,-3176
  8068a4:	11000017 	ldw	r4,0(r2)
  8068a8:	30c00054 	ori	r3,r6,1
  8068ac:	52000215 	stw	r8,8(r10)
  8068b0:	40c00115 	stw	r3,4(r8)
  8068b4:	313fa036 	bltu	r6,r4,806738 <_free_r+0xb4>
  8068b8:	00802074 	movhi	r2,129
  8068bc:	10839204 	addi	r2,r2,3656
  8068c0:	11400017 	ldw	r5,0(r2)
  8068c4:	8809883a 	mov	r4,r17
  8068c8:	08065580 	call	806558 <_malloc_trim_r>
  8068cc:	003f9a06 	br	806738 <_free_r+0xb4>
  8068d0:	00800104 	movi	r2,4
  8068d4:	10c0072e 	bgeu	r2,r3,8068f4 <_free_r+0x270>
  8068d8:	00800504 	movi	r2,20
  8068dc:	10c01936 	bltu	r2,r3,806944 <_free_r+0x2c0>
  8068e0:	188016c4 	addi	r2,r3,91
  8068e4:	100690fa 	slli	r3,r2,3
  8068e8:	003fb306 	br	8067b8 <_free_r+0x134>
  8068ec:	01400044 	movi	r5,1
  8068f0:	003f7e06 	br	8066ec <_free_r+0x68>
  8068f4:	3804d1ba 	srli	r2,r7,6
  8068f8:	10800e04 	addi	r2,r2,56
  8068fc:	100690fa 	slli	r3,r2,3
  806900:	003fad06 	br	8067b8 <_free_r+0x134>
  806904:	22000315 	stw	r8,12(r4)
  806908:	22000215 	stw	r8,8(r4)
  80690c:	3a05883a 	add	r2,r7,r8
  806910:	38c00054 	ori	r3,r7,1
  806914:	11c00015 	stw	r7,0(r2)
  806918:	41000215 	stw	r4,8(r8)
  80691c:	40c00115 	stw	r3,4(r8)
  806920:	41000315 	stw	r4,12(r8)
  806924:	003f8406 	br	806738 <_free_r+0xb4>
  806928:	1005d0ba 	srai	r2,r2,2
  80692c:	00c00044 	movi	r3,1
  806930:	51000117 	ldw	r4,4(r10)
  806934:	1886983a 	sll	r3,r3,r2
  806938:	20c8b03a 	or	r4,r4,r3
  80693c:	51000115 	stw	r4,4(r10)
  806940:	003fa706 	br	8067e0 <_free_r+0x15c>
  806944:	00801504 	movi	r2,84
  806948:	10c00436 	bltu	r2,r3,80695c <_free_r+0x2d8>
  80694c:	3804d33a 	srli	r2,r7,12
  806950:	10801b84 	addi	r2,r2,110
  806954:	100690fa 	slli	r3,r2,3
  806958:	003f9706 	br	8067b8 <_free_r+0x134>
  80695c:	00805504 	movi	r2,340
  806960:	10c00436 	bltu	r2,r3,806974 <_free_r+0x2f0>
  806964:	3804d3fa 	srli	r2,r7,15
  806968:	10801dc4 	addi	r2,r2,119
  80696c:	100690fa 	slli	r3,r2,3
  806970:	003f9106 	br	8067b8 <_free_r+0x134>
  806974:	00815504 	movi	r2,1364
  806978:	10c0032e 	bgeu	r2,r3,806988 <_free_r+0x304>
  80697c:	00801f84 	movi	r2,126
  806980:	00c0fc04 	movi	r3,1008
  806984:	003f8c06 	br	8067b8 <_free_r+0x134>
  806988:	3804d4ba 	srli	r2,r7,18
  80698c:	10801f04 	addi	r2,r2,124
  806990:	100690fa 	slli	r3,r2,3
  806994:	003f8806 	br	8067b8 <_free_r+0x134>

00806998 <__sfvwrite_r>:
  806998:	30800217 	ldw	r2,8(r6)
  80699c:	defff504 	addi	sp,sp,-44
  8069a0:	df000915 	stw	fp,36(sp)
  8069a4:	dd800715 	stw	r22,28(sp)
  8069a8:	dc800315 	stw	r18,12(sp)
  8069ac:	dfc00a15 	stw	ra,40(sp)
  8069b0:	ddc00815 	stw	r23,32(sp)
  8069b4:	dd400615 	stw	r21,24(sp)
  8069b8:	dd000515 	stw	r20,20(sp)
  8069bc:	dcc00415 	stw	r19,16(sp)
  8069c0:	dc400215 	stw	r17,8(sp)
  8069c4:	dc000115 	stw	r16,4(sp)
  8069c8:	302d883a 	mov	r22,r6
  8069cc:	2039883a 	mov	fp,r4
  8069d0:	2825883a 	mov	r18,r5
  8069d4:	10001c26 	beq	r2,zero,806a48 <__sfvwrite_r+0xb0>
  8069d8:	29c0030b 	ldhu	r7,12(r5)
  8069dc:	3880020c 	andi	r2,r7,8
  8069e0:	10002726 	beq	r2,zero,806a80 <__sfvwrite_r+0xe8>
  8069e4:	28800417 	ldw	r2,16(r5)
  8069e8:	10002526 	beq	r2,zero,806a80 <__sfvwrite_r+0xe8>
  8069ec:	3880008c 	andi	r2,r7,2
  8069f0:	b5400017 	ldw	r21,0(r22)
  8069f4:	10002826 	beq	r2,zero,806a98 <__sfvwrite_r+0x100>
  8069f8:	0021883a 	mov	r16,zero
  8069fc:	0023883a 	mov	r17,zero
  806a00:	880d883a 	mov	r6,r17
  806a04:	e009883a 	mov	r4,fp
  806a08:	00810004 	movi	r2,1024
  806a0c:	80006e26 	beq	r16,zero,806bc8 <__sfvwrite_r+0x230>
  806a10:	800f883a 	mov	r7,r16
  806a14:	91400717 	ldw	r5,28(r18)
  806a18:	1400012e 	bgeu	r2,r16,806a20 <__sfvwrite_r+0x88>
  806a1c:	100f883a 	mov	r7,r2
  806a20:	90c00917 	ldw	r3,36(r18)
  806a24:	183ee83a 	callr	r3
  806a28:	1007883a 	mov	r3,r2
  806a2c:	80a1c83a 	sub	r16,r16,r2
  806a30:	88a3883a 	add	r17,r17,r2
  806a34:	00806d0e 	bge	zero,r2,806bec <__sfvwrite_r+0x254>
  806a38:	b0800217 	ldw	r2,8(r22)
  806a3c:	10c5c83a 	sub	r2,r2,r3
  806a40:	b0800215 	stw	r2,8(r22)
  806a44:	103fee1e 	bne	r2,zero,806a00 <__sfvwrite_r+0x68>
  806a48:	0009883a 	mov	r4,zero
  806a4c:	2005883a 	mov	r2,r4
  806a50:	dfc00a17 	ldw	ra,40(sp)
  806a54:	df000917 	ldw	fp,36(sp)
  806a58:	ddc00817 	ldw	r23,32(sp)
  806a5c:	dd800717 	ldw	r22,28(sp)
  806a60:	dd400617 	ldw	r21,24(sp)
  806a64:	dd000517 	ldw	r20,20(sp)
  806a68:	dcc00417 	ldw	r19,16(sp)
  806a6c:	dc800317 	ldw	r18,12(sp)
  806a70:	dc400217 	ldw	r17,8(sp)
  806a74:	dc000117 	ldw	r16,4(sp)
  806a78:	dec00b04 	addi	sp,sp,44
  806a7c:	f800283a 	ret
  806a80:	08047000 	call	804700 <__swsetup_r>
  806a84:	1000e41e 	bne	r2,zero,806e18 <__sfvwrite_r+0x480>
  806a88:	91c0030b 	ldhu	r7,12(r18)
  806a8c:	b5400017 	ldw	r21,0(r22)
  806a90:	3880008c 	andi	r2,r7,2
  806a94:	103fd81e 	bne	r2,zero,8069f8 <__sfvwrite_r+0x60>
  806a98:	3880004c 	andi	r2,r7,1
  806a9c:	1005003a 	cmpeq	r2,r2,zero
  806aa0:	10005726 	beq	r2,zero,806c00 <__sfvwrite_r+0x268>
  806aa4:	0029883a 	mov	r20,zero
  806aa8:	002f883a 	mov	r23,zero
  806aac:	a0004226 	beq	r20,zero,806bb8 <__sfvwrite_r+0x220>
  806ab0:	3880800c 	andi	r2,r7,512
  806ab4:	94000217 	ldw	r16,8(r18)
  806ab8:	10008b26 	beq	r2,zero,806ce8 <__sfvwrite_r+0x350>
  806abc:	800d883a 	mov	r6,r16
  806ac0:	a400a536 	bltu	r20,r16,806d58 <__sfvwrite_r+0x3c0>
  806ac4:	3881200c 	andi	r2,r7,1152
  806ac8:	10002726 	beq	r2,zero,806b68 <__sfvwrite_r+0x1d0>
  806acc:	90800517 	ldw	r2,20(r18)
  806ad0:	92000417 	ldw	r8,16(r18)
  806ad4:	91400017 	ldw	r5,0(r18)
  806ad8:	1087883a 	add	r3,r2,r2
  806adc:	1887883a 	add	r3,r3,r2
  806ae0:	1808d7fa 	srli	r4,r3,31
  806ae4:	2a21c83a 	sub	r16,r5,r8
  806ae8:	80800044 	addi	r2,r16,1
  806aec:	20c9883a 	add	r4,r4,r3
  806af0:	2027d07a 	srai	r19,r4,1
  806af4:	a085883a 	add	r2,r20,r2
  806af8:	980d883a 	mov	r6,r19
  806afc:	9880022e 	bgeu	r19,r2,806b08 <__sfvwrite_r+0x170>
  806b00:	1027883a 	mov	r19,r2
  806b04:	100d883a 	mov	r6,r2
  806b08:	3881000c 	andi	r2,r7,1024
  806b0c:	1000b826 	beq	r2,zero,806df0 <__sfvwrite_r+0x458>
  806b10:	300b883a 	mov	r5,r6
  806b14:	e009883a 	mov	r4,fp
  806b18:	080720c0 	call	80720c <_malloc_r>
  806b1c:	10003126 	beq	r2,zero,806be4 <__sfvwrite_r+0x24c>
  806b20:	91400417 	ldw	r5,16(r18)
  806b24:	1009883a 	mov	r4,r2
  806b28:	800d883a 	mov	r6,r16
  806b2c:	1023883a 	mov	r17,r2
  806b30:	0807a300 	call	807a30 <memcpy>
  806b34:	90c0030b 	ldhu	r3,12(r18)
  806b38:	00beffc4 	movi	r2,-1025
  806b3c:	1886703a 	and	r3,r3,r2
  806b40:	18c02014 	ori	r3,r3,128
  806b44:	90c0030d 	sth	r3,12(r18)
  806b48:	9c07c83a 	sub	r3,r19,r16
  806b4c:	8c05883a 	add	r2,r17,r16
  806b50:	a00d883a 	mov	r6,r20
  806b54:	a021883a 	mov	r16,r20
  806b58:	90800015 	stw	r2,0(r18)
  806b5c:	90c00215 	stw	r3,8(r18)
  806b60:	94400415 	stw	r17,16(r18)
  806b64:	94c00515 	stw	r19,20(r18)
  806b68:	91000017 	ldw	r4,0(r18)
  806b6c:	b80b883a 	mov	r5,r23
  806b70:	a023883a 	mov	r17,r20
  806b74:	0807ad00 	call	807ad0 <memmove>
  806b78:	90c00217 	ldw	r3,8(r18)
  806b7c:	90800017 	ldw	r2,0(r18)
  806b80:	a027883a 	mov	r19,r20
  806b84:	1c07c83a 	sub	r3,r3,r16
  806b88:	1405883a 	add	r2,r2,r16
  806b8c:	90c00215 	stw	r3,8(r18)
  806b90:	a021883a 	mov	r16,r20
  806b94:	90800015 	stw	r2,0(r18)
  806b98:	b0800217 	ldw	r2,8(r22)
  806b9c:	1405c83a 	sub	r2,r2,r16
  806ba0:	b0800215 	stw	r2,8(r22)
  806ba4:	103fa826 	beq	r2,zero,806a48 <__sfvwrite_r+0xb0>
  806ba8:	a469c83a 	sub	r20,r20,r17
  806bac:	91c0030b 	ldhu	r7,12(r18)
  806bb0:	bcef883a 	add	r23,r23,r19
  806bb4:	a03fbe1e 	bne	r20,zero,806ab0 <__sfvwrite_r+0x118>
  806bb8:	adc00017 	ldw	r23,0(r21)
  806bbc:	ad000117 	ldw	r20,4(r21)
  806bc0:	ad400204 	addi	r21,r21,8
  806bc4:	003fb906 	br	806aac <__sfvwrite_r+0x114>
  806bc8:	ac400017 	ldw	r17,0(r21)
  806bcc:	ac000117 	ldw	r16,4(r21)
  806bd0:	ad400204 	addi	r21,r21,8
  806bd4:	003f8a06 	br	806a00 <__sfvwrite_r+0x68>
  806bd8:	91400417 	ldw	r5,16(r18)
  806bdc:	e009883a 	mov	r4,fp
  806be0:	08066840 	call	806684 <_free_r>
  806be4:	00800304 	movi	r2,12
  806be8:	e0800015 	stw	r2,0(fp)
  806bec:	9080030b 	ldhu	r2,12(r18)
  806bf0:	013fffc4 	movi	r4,-1
  806bf4:	10801014 	ori	r2,r2,64
  806bf8:	9080030d 	sth	r2,12(r18)
  806bfc:	003f9306 	br	806a4c <__sfvwrite_r+0xb4>
  806c00:	0027883a 	mov	r19,zero
  806c04:	002f883a 	mov	r23,zero
  806c08:	d8000015 	stw	zero,0(sp)
  806c0c:	0029883a 	mov	r20,zero
  806c10:	98001e26 	beq	r19,zero,806c8c <__sfvwrite_r+0x2f4>
  806c14:	d8c00017 	ldw	r3,0(sp)
  806c18:	1804c03a 	cmpne	r2,r3,zero
  806c1c:	10005e26 	beq	r2,zero,806d98 <__sfvwrite_r+0x400>
  806c20:	9821883a 	mov	r16,r19
  806c24:	a4c0012e 	bgeu	r20,r19,806c2c <__sfvwrite_r+0x294>
  806c28:	a021883a 	mov	r16,r20
  806c2c:	91000017 	ldw	r4,0(r18)
  806c30:	90800417 	ldw	r2,16(r18)
  806c34:	91800217 	ldw	r6,8(r18)
  806c38:	91c00517 	ldw	r7,20(r18)
  806c3c:	1100022e 	bgeu	r2,r4,806c48 <__sfvwrite_r+0x2b0>
  806c40:	31e3883a 	add	r17,r6,r7
  806c44:	8c001616 	blt	r17,r16,806ca0 <__sfvwrite_r+0x308>
  806c48:	81c03816 	blt	r16,r7,806d2c <__sfvwrite_r+0x394>
  806c4c:	90c00917 	ldw	r3,36(r18)
  806c50:	91400717 	ldw	r5,28(r18)
  806c54:	e009883a 	mov	r4,fp
  806c58:	b80d883a 	mov	r6,r23
  806c5c:	183ee83a 	callr	r3
  806c60:	1023883a 	mov	r17,r2
  806c64:	00bfe10e 	bge	zero,r2,806bec <__sfvwrite_r+0x254>
  806c68:	a469c83a 	sub	r20,r20,r17
  806c6c:	a0001826 	beq	r20,zero,806cd0 <__sfvwrite_r+0x338>
  806c70:	b0800217 	ldw	r2,8(r22)
  806c74:	1445c83a 	sub	r2,r2,r17
  806c78:	b0800215 	stw	r2,8(r22)
  806c7c:	103f7226 	beq	r2,zero,806a48 <__sfvwrite_r+0xb0>
  806c80:	9c67c83a 	sub	r19,r19,r17
  806c84:	bc6f883a 	add	r23,r23,r17
  806c88:	983fe21e 	bne	r19,zero,806c14 <__sfvwrite_r+0x27c>
  806c8c:	adc00017 	ldw	r23,0(r21)
  806c90:	acc00117 	ldw	r19,4(r21)
  806c94:	ad400204 	addi	r21,r21,8
  806c98:	d8000015 	stw	zero,0(sp)
  806c9c:	003fdc06 	br	806c10 <__sfvwrite_r+0x278>
  806ca0:	b80b883a 	mov	r5,r23
  806ca4:	880d883a 	mov	r6,r17
  806ca8:	0807ad00 	call	807ad0 <memmove>
  806cac:	90c00017 	ldw	r3,0(r18)
  806cb0:	e009883a 	mov	r4,fp
  806cb4:	900b883a 	mov	r5,r18
  806cb8:	1c47883a 	add	r3,r3,r17
  806cbc:	90c00015 	stw	r3,0(r18)
  806cc0:	08060340 	call	806034 <_fflush_r>
  806cc4:	103fc91e 	bne	r2,zero,806bec <__sfvwrite_r+0x254>
  806cc8:	a469c83a 	sub	r20,r20,r17
  806ccc:	a03fe81e 	bne	r20,zero,806c70 <__sfvwrite_r+0x2d8>
  806cd0:	e009883a 	mov	r4,fp
  806cd4:	900b883a 	mov	r5,r18
  806cd8:	08060340 	call	806034 <_fflush_r>
  806cdc:	103fc31e 	bne	r2,zero,806bec <__sfvwrite_r+0x254>
  806ce0:	d8000015 	stw	zero,0(sp)
  806ce4:	003fe206 	br	806c70 <__sfvwrite_r+0x2d8>
  806ce8:	91000017 	ldw	r4,0(r18)
  806cec:	90800417 	ldw	r2,16(r18)
  806cf0:	1100022e 	bgeu	r2,r4,806cfc <__sfvwrite_r+0x364>
  806cf4:	8023883a 	mov	r17,r16
  806cf8:	85003136 	bltu	r16,r20,806dc0 <__sfvwrite_r+0x428>
  806cfc:	91c00517 	ldw	r7,20(r18)
  806d00:	a1c01836 	bltu	r20,r7,806d64 <__sfvwrite_r+0x3cc>
  806d04:	90c00917 	ldw	r3,36(r18)
  806d08:	91400717 	ldw	r5,28(r18)
  806d0c:	e009883a 	mov	r4,fp
  806d10:	b80d883a 	mov	r6,r23
  806d14:	183ee83a 	callr	r3
  806d18:	1021883a 	mov	r16,r2
  806d1c:	00bfb30e 	bge	zero,r2,806bec <__sfvwrite_r+0x254>
  806d20:	1023883a 	mov	r17,r2
  806d24:	1027883a 	mov	r19,r2
  806d28:	003f9b06 	br	806b98 <__sfvwrite_r+0x200>
  806d2c:	b80b883a 	mov	r5,r23
  806d30:	800d883a 	mov	r6,r16
  806d34:	0807ad00 	call	807ad0 <memmove>
  806d38:	90c00217 	ldw	r3,8(r18)
  806d3c:	90800017 	ldw	r2,0(r18)
  806d40:	8023883a 	mov	r17,r16
  806d44:	1c07c83a 	sub	r3,r3,r16
  806d48:	1405883a 	add	r2,r2,r16
  806d4c:	90c00215 	stw	r3,8(r18)
  806d50:	90800015 	stw	r2,0(r18)
  806d54:	003fc406 	br	806c68 <__sfvwrite_r+0x2d0>
  806d58:	a00d883a 	mov	r6,r20
  806d5c:	a021883a 	mov	r16,r20
  806d60:	003f8106 	br	806b68 <__sfvwrite_r+0x1d0>
  806d64:	b80b883a 	mov	r5,r23
  806d68:	a00d883a 	mov	r6,r20
  806d6c:	0807ad00 	call	807ad0 <memmove>
  806d70:	90c00217 	ldw	r3,8(r18)
  806d74:	90800017 	ldw	r2,0(r18)
  806d78:	a021883a 	mov	r16,r20
  806d7c:	1d07c83a 	sub	r3,r3,r20
  806d80:	1505883a 	add	r2,r2,r20
  806d84:	a023883a 	mov	r17,r20
  806d88:	a027883a 	mov	r19,r20
  806d8c:	90c00215 	stw	r3,8(r18)
  806d90:	90800015 	stw	r2,0(r18)
  806d94:	003f8006 	br	806b98 <__sfvwrite_r+0x200>
  806d98:	b809883a 	mov	r4,r23
  806d9c:	01400284 	movi	r5,10
  806da0:	980d883a 	mov	r6,r19
  806da4:	080794c0 	call	80794c <memchr>
  806da8:	10001726 	beq	r2,zero,806e08 <__sfvwrite_r+0x470>
  806dac:	15c5c83a 	sub	r2,r2,r23
  806db0:	15000044 	addi	r20,r2,1
  806db4:	00800044 	movi	r2,1
  806db8:	d8800015 	stw	r2,0(sp)
  806dbc:	003f9806 	br	806c20 <__sfvwrite_r+0x288>
  806dc0:	b80b883a 	mov	r5,r23
  806dc4:	800d883a 	mov	r6,r16
  806dc8:	0807ad00 	call	807ad0 <memmove>
  806dcc:	90c00017 	ldw	r3,0(r18)
  806dd0:	e009883a 	mov	r4,fp
  806dd4:	900b883a 	mov	r5,r18
  806dd8:	1c07883a 	add	r3,r3,r16
  806ddc:	90c00015 	stw	r3,0(r18)
  806de0:	8027883a 	mov	r19,r16
  806de4:	08060340 	call	806034 <_fflush_r>
  806de8:	103f6b26 	beq	r2,zero,806b98 <__sfvwrite_r+0x200>
  806dec:	003f7f06 	br	806bec <__sfvwrite_r+0x254>
  806df0:	400b883a 	mov	r5,r8
  806df4:	e009883a 	mov	r4,fp
  806df8:	0808cd40 	call	808cd4 <_realloc_r>
  806dfc:	103f7626 	beq	r2,zero,806bd8 <__sfvwrite_r+0x240>
  806e00:	1023883a 	mov	r17,r2
  806e04:	003f5006 	br	806b48 <__sfvwrite_r+0x1b0>
  806e08:	00c00044 	movi	r3,1
  806e0c:	9d000044 	addi	r20,r19,1
  806e10:	d8c00015 	stw	r3,0(sp)
  806e14:	003f8206 	br	806c20 <__sfvwrite_r+0x288>
  806e18:	9080030b 	ldhu	r2,12(r18)
  806e1c:	00c00244 	movi	r3,9
  806e20:	013fffc4 	movi	r4,-1
  806e24:	10801014 	ori	r2,r2,64
  806e28:	9080030d 	sth	r2,12(r18)
  806e2c:	e0c00015 	stw	r3,0(fp)
  806e30:	003f0606 	br	806a4c <__sfvwrite_r+0xb4>

00806e34 <_fwalk_reent>:
  806e34:	defff704 	addi	sp,sp,-36
  806e38:	dcc00315 	stw	r19,12(sp)
  806e3c:	24c0b804 	addi	r19,r4,736
  806e40:	dd800615 	stw	r22,24(sp)
  806e44:	dd400515 	stw	r21,20(sp)
  806e48:	dfc00815 	stw	ra,32(sp)
  806e4c:	ddc00715 	stw	r23,28(sp)
  806e50:	dd000415 	stw	r20,16(sp)
  806e54:	dc800215 	stw	r18,8(sp)
  806e58:	dc400115 	stw	r17,4(sp)
  806e5c:	dc000015 	stw	r16,0(sp)
  806e60:	202b883a 	mov	r21,r4
  806e64:	282d883a 	mov	r22,r5
  806e68:	08062bc0 	call	8062bc <__sfp_lock_acquire>
  806e6c:	98002126 	beq	r19,zero,806ef4 <_fwalk_reent+0xc0>
  806e70:	002f883a 	mov	r23,zero
  806e74:	9c800117 	ldw	r18,4(r19)
  806e78:	9c000217 	ldw	r16,8(r19)
  806e7c:	90bfffc4 	addi	r2,r18,-1
  806e80:	10000d16 	blt	r2,zero,806eb8 <_fwalk_reent+0x84>
  806e84:	0023883a 	mov	r17,zero
  806e88:	053fffc4 	movi	r20,-1
  806e8c:	8080030f 	ldh	r2,12(r16)
  806e90:	8c400044 	addi	r17,r17,1
  806e94:	10000626 	beq	r2,zero,806eb0 <_fwalk_reent+0x7c>
  806e98:	8080038f 	ldh	r2,14(r16)
  806e9c:	800b883a 	mov	r5,r16
  806ea0:	a809883a 	mov	r4,r21
  806ea4:	15000226 	beq	r2,r20,806eb0 <_fwalk_reent+0x7c>
  806ea8:	b03ee83a 	callr	r22
  806eac:	b8aeb03a 	or	r23,r23,r2
  806eb0:	84001704 	addi	r16,r16,92
  806eb4:	947ff51e 	bne	r18,r17,806e8c <_fwalk_reent+0x58>
  806eb8:	9cc00017 	ldw	r19,0(r19)
  806ebc:	983fed1e 	bne	r19,zero,806e74 <_fwalk_reent+0x40>
  806ec0:	08062c00 	call	8062c0 <__sfp_lock_release>
  806ec4:	b805883a 	mov	r2,r23
  806ec8:	dfc00817 	ldw	ra,32(sp)
  806ecc:	ddc00717 	ldw	r23,28(sp)
  806ed0:	dd800617 	ldw	r22,24(sp)
  806ed4:	dd400517 	ldw	r21,20(sp)
  806ed8:	dd000417 	ldw	r20,16(sp)
  806edc:	dcc00317 	ldw	r19,12(sp)
  806ee0:	dc800217 	ldw	r18,8(sp)
  806ee4:	dc400117 	ldw	r17,4(sp)
  806ee8:	dc000017 	ldw	r16,0(sp)
  806eec:	dec00904 	addi	sp,sp,36
  806ef0:	f800283a 	ret
  806ef4:	002f883a 	mov	r23,zero
  806ef8:	003ff106 	br	806ec0 <_fwalk_reent+0x8c>

00806efc <_fwalk>:
  806efc:	defff804 	addi	sp,sp,-32
  806f00:	dcc00315 	stw	r19,12(sp)
  806f04:	24c0b804 	addi	r19,r4,736
  806f08:	dd400515 	stw	r21,20(sp)
  806f0c:	dfc00715 	stw	ra,28(sp)
  806f10:	dd800615 	stw	r22,24(sp)
  806f14:	dd000415 	stw	r20,16(sp)
  806f18:	dc800215 	stw	r18,8(sp)
  806f1c:	dc400115 	stw	r17,4(sp)
  806f20:	dc000015 	stw	r16,0(sp)
  806f24:	282b883a 	mov	r21,r5
  806f28:	08062bc0 	call	8062bc <__sfp_lock_acquire>
  806f2c:	98001f26 	beq	r19,zero,806fac <_fwalk+0xb0>
  806f30:	002d883a 	mov	r22,zero
  806f34:	9c800117 	ldw	r18,4(r19)
  806f38:	9c000217 	ldw	r16,8(r19)
  806f3c:	90bfffc4 	addi	r2,r18,-1
  806f40:	10000c16 	blt	r2,zero,806f74 <_fwalk+0x78>
  806f44:	0023883a 	mov	r17,zero
  806f48:	053fffc4 	movi	r20,-1
  806f4c:	8080030f 	ldh	r2,12(r16)
  806f50:	8c400044 	addi	r17,r17,1
  806f54:	10000526 	beq	r2,zero,806f6c <_fwalk+0x70>
  806f58:	8080038f 	ldh	r2,14(r16)
  806f5c:	8009883a 	mov	r4,r16
  806f60:	15000226 	beq	r2,r20,806f6c <_fwalk+0x70>
  806f64:	a83ee83a 	callr	r21
  806f68:	b0acb03a 	or	r22,r22,r2
  806f6c:	84001704 	addi	r16,r16,92
  806f70:	947ff61e 	bne	r18,r17,806f4c <_fwalk+0x50>
  806f74:	9cc00017 	ldw	r19,0(r19)
  806f78:	983fee1e 	bne	r19,zero,806f34 <_fwalk+0x38>
  806f7c:	08062c00 	call	8062c0 <__sfp_lock_release>
  806f80:	b005883a 	mov	r2,r22
  806f84:	dfc00717 	ldw	ra,28(sp)
  806f88:	dd800617 	ldw	r22,24(sp)
  806f8c:	dd400517 	ldw	r21,20(sp)
  806f90:	dd000417 	ldw	r20,16(sp)
  806f94:	dcc00317 	ldw	r19,12(sp)
  806f98:	dc800217 	ldw	r18,8(sp)
  806f9c:	dc400117 	ldw	r17,4(sp)
  806fa0:	dc000017 	ldw	r16,0(sp)
  806fa4:	dec00804 	addi	sp,sp,32
  806fa8:	f800283a 	ret
  806fac:	002d883a 	mov	r22,zero
  806fb0:	003ff206 	br	806f7c <_fwalk+0x80>

00806fb4 <__locale_charset>:
  806fb4:	d0a00817 	ldw	r2,-32736(gp)
  806fb8:	f800283a 	ret

00806fbc <_localeconv_r>:
  806fbc:	00802074 	movhi	r2,129
  806fc0:	10b5f404 	addi	r2,r2,-10288
  806fc4:	f800283a 	ret

00806fc8 <localeconv>:
  806fc8:	00802074 	movhi	r2,129
  806fcc:	10bce204 	addi	r2,r2,-3192
  806fd0:	11000017 	ldw	r4,0(r2)
  806fd4:	0806fbc1 	jmpi	806fbc <_localeconv_r>

00806fd8 <_setlocale_r>:
  806fd8:	defffc04 	addi	sp,sp,-16
  806fdc:	00c02074 	movhi	r3,129
  806fe0:	18f5ca04 	addi	r3,r3,-10456
  806fe4:	dc800215 	stw	r18,8(sp)
  806fe8:	dc400115 	stw	r17,4(sp)
  806fec:	dc000015 	stw	r16,0(sp)
  806ff0:	2023883a 	mov	r17,r4
  806ff4:	2825883a 	mov	r18,r5
  806ff8:	dfc00315 	stw	ra,12(sp)
  806ffc:	3021883a 	mov	r16,r6
  807000:	3009883a 	mov	r4,r6
  807004:	180b883a 	mov	r5,r3
  807008:	30000926 	beq	r6,zero,807030 <_setlocale_r+0x58>
  80700c:	08094c40 	call	8094c4 <strcmp>
  807010:	8009883a 	mov	r4,r16
  807014:	01402074 	movhi	r5,129
  807018:	2975db04 	addi	r5,r5,-10388
  80701c:	10000b1e 	bne	r2,zero,80704c <_setlocale_r+0x74>
  807020:	8c000d15 	stw	r16,52(r17)
  807024:	8c800c15 	stw	r18,48(r17)
  807028:	00c02074 	movhi	r3,129
  80702c:	18f5ca04 	addi	r3,r3,-10456
  807030:	1805883a 	mov	r2,r3
  807034:	dfc00317 	ldw	ra,12(sp)
  807038:	dc800217 	ldw	r18,8(sp)
  80703c:	dc400117 	ldw	r17,4(sp)
  807040:	dc000017 	ldw	r16,0(sp)
  807044:	dec00404 	addi	sp,sp,16
  807048:	f800283a 	ret
  80704c:	08094c40 	call	8094c4 <strcmp>
  807050:	0007883a 	mov	r3,zero
  807054:	103ff226 	beq	r2,zero,807020 <_setlocale_r+0x48>
  807058:	003ff506 	br	807030 <_setlocale_r+0x58>

0080705c <setlocale>:
  80705c:	01802074 	movhi	r6,129
  807060:	31bce204 	addi	r6,r6,-3192
  807064:	2007883a 	mov	r3,r4
  807068:	31000017 	ldw	r4,0(r6)
  80706c:	280d883a 	mov	r6,r5
  807070:	180b883a 	mov	r5,r3
  807074:	0806fd81 	jmpi	806fd8 <_setlocale_r>

00807078 <__smakebuf_r>:
  807078:	2880030b 	ldhu	r2,12(r5)
  80707c:	deffed04 	addi	sp,sp,-76
  807080:	dc401015 	stw	r17,64(sp)
  807084:	1080008c 	andi	r2,r2,2
  807088:	dc000f15 	stw	r16,60(sp)
  80708c:	dfc01215 	stw	ra,72(sp)
  807090:	dc801115 	stw	r18,68(sp)
  807094:	2821883a 	mov	r16,r5
  807098:	2023883a 	mov	r17,r4
  80709c:	10000b26 	beq	r2,zero,8070cc <__smakebuf_r+0x54>
  8070a0:	28c010c4 	addi	r3,r5,67
  8070a4:	00800044 	movi	r2,1
  8070a8:	28800515 	stw	r2,20(r5)
  8070ac:	28c00415 	stw	r3,16(r5)
  8070b0:	28c00015 	stw	r3,0(r5)
  8070b4:	dfc01217 	ldw	ra,72(sp)
  8070b8:	dc801117 	ldw	r18,68(sp)
  8070bc:	dc401017 	ldw	r17,64(sp)
  8070c0:	dc000f17 	ldw	r16,60(sp)
  8070c4:	dec01304 	addi	sp,sp,76
  8070c8:	f800283a 	ret
  8070cc:	2940038f 	ldh	r5,14(r5)
  8070d0:	28002116 	blt	r5,zero,807158 <__smakebuf_r+0xe0>
  8070d4:	d80d883a 	mov	r6,sp
  8070d8:	08098540 	call	809854 <_fstat_r>
  8070dc:	10001e16 	blt	r2,zero,807158 <__smakebuf_r+0xe0>
  8070e0:	d8800117 	ldw	r2,4(sp)
  8070e4:	00e00014 	movui	r3,32768
  8070e8:	113c000c 	andi	r4,r2,61440
  8070ec:	20c03126 	beq	r4,r3,8071b4 <__smakebuf_r+0x13c>
  8070f0:	8080030b 	ldhu	r2,12(r16)
  8070f4:	00c80004 	movi	r3,8192
  8070f8:	10820014 	ori	r2,r2,2048
  8070fc:	8080030d 	sth	r2,12(r16)
  807100:	20c01e26 	beq	r4,r3,80717c <__smakebuf_r+0x104>
  807104:	04810004 	movi	r18,1024
  807108:	8809883a 	mov	r4,r17
  80710c:	900b883a 	mov	r5,r18
  807110:	080720c0 	call	80720c <_malloc_r>
  807114:	1009883a 	mov	r4,r2
  807118:	10003126 	beq	r2,zero,8071e0 <__smakebuf_r+0x168>
  80711c:	80c0030b 	ldhu	r3,12(r16)
  807120:	00802034 	movhi	r2,128
  807124:	1098ec04 	addi	r2,r2,25520
  807128:	88800f15 	stw	r2,60(r17)
  80712c:	18c02014 	ori	r3,r3,128
  807130:	84800515 	stw	r18,20(r16)
  807134:	80c0030d 	sth	r3,12(r16)
  807138:	81000415 	stw	r4,16(r16)
  80713c:	81000015 	stw	r4,0(r16)
  807140:	dfc01217 	ldw	ra,72(sp)
  807144:	dc801117 	ldw	r18,68(sp)
  807148:	dc401017 	ldw	r17,64(sp)
  80714c:	dc000f17 	ldw	r16,60(sp)
  807150:	dec01304 	addi	sp,sp,76
  807154:	f800283a 	ret
  807158:	80c0030b 	ldhu	r3,12(r16)
  80715c:	1880200c 	andi	r2,r3,128
  807160:	10000426 	beq	r2,zero,807174 <__smakebuf_r+0xfc>
  807164:	04801004 	movi	r18,64
  807168:	18820014 	ori	r2,r3,2048
  80716c:	8080030d 	sth	r2,12(r16)
  807170:	003fe506 	br	807108 <__smakebuf_r+0x90>
  807174:	04810004 	movi	r18,1024
  807178:	003ffb06 	br	807168 <__smakebuf_r+0xf0>
  80717c:	8140038f 	ldh	r5,14(r16)
  807180:	8809883a 	mov	r4,r17
  807184:	08098c80 	call	8098c8 <_isatty_r>
  807188:	103fde26 	beq	r2,zero,807104 <__smakebuf_r+0x8c>
  80718c:	8080030b 	ldhu	r2,12(r16)
  807190:	80c010c4 	addi	r3,r16,67
  807194:	04810004 	movi	r18,1024
  807198:	10800054 	ori	r2,r2,1
  80719c:	8080030d 	sth	r2,12(r16)
  8071a0:	00800044 	movi	r2,1
  8071a4:	80c00415 	stw	r3,16(r16)
  8071a8:	80800515 	stw	r2,20(r16)
  8071ac:	80c00015 	stw	r3,0(r16)
  8071b0:	003fd506 	br	807108 <__smakebuf_r+0x90>
  8071b4:	80c00a17 	ldw	r3,40(r16)
  8071b8:	00802074 	movhi	r2,129
  8071bc:	10a4e004 	addi	r2,r2,-27776
  8071c0:	18bfcb1e 	bne	r3,r2,8070f0 <__smakebuf_r+0x78>
  8071c4:	8080030b 	ldhu	r2,12(r16)
  8071c8:	00c10004 	movi	r3,1024
  8071cc:	1825883a 	mov	r18,r3
  8071d0:	10c4b03a 	or	r2,r2,r3
  8071d4:	8080030d 	sth	r2,12(r16)
  8071d8:	80c01315 	stw	r3,76(r16)
  8071dc:	003fca06 	br	807108 <__smakebuf_r+0x90>
  8071e0:	8100030b 	ldhu	r4,12(r16)
  8071e4:	2080800c 	andi	r2,r4,512
  8071e8:	103fb21e 	bne	r2,zero,8070b4 <__smakebuf_r+0x3c>
  8071ec:	80c010c4 	addi	r3,r16,67
  8071f0:	21000094 	ori	r4,r4,2
  8071f4:	00800044 	movi	r2,1
  8071f8:	80800515 	stw	r2,20(r16)
  8071fc:	8100030d 	sth	r4,12(r16)
  807200:	80c00415 	stw	r3,16(r16)
  807204:	80c00015 	stw	r3,0(r16)
  807208:	003faa06 	br	8070b4 <__smakebuf_r+0x3c>

0080720c <_malloc_r>:
  80720c:	defff604 	addi	sp,sp,-40
  807210:	28c002c4 	addi	r3,r5,11
  807214:	00800584 	movi	r2,22
  807218:	dc800215 	stw	r18,8(sp)
  80721c:	dfc00915 	stw	ra,36(sp)
  807220:	df000815 	stw	fp,32(sp)
  807224:	ddc00715 	stw	r23,28(sp)
  807228:	dd800615 	stw	r22,24(sp)
  80722c:	dd400515 	stw	r21,20(sp)
  807230:	dd000415 	stw	r20,16(sp)
  807234:	dcc00315 	stw	r19,12(sp)
  807238:	dc400115 	stw	r17,4(sp)
  80723c:	dc000015 	stw	r16,0(sp)
  807240:	2025883a 	mov	r18,r4
  807244:	10c01236 	bltu	r2,r3,807290 <_malloc_r+0x84>
  807248:	04400404 	movi	r17,16
  80724c:	8940142e 	bgeu	r17,r5,8072a0 <_malloc_r+0x94>
  807250:	00800304 	movi	r2,12
  807254:	0007883a 	mov	r3,zero
  807258:	90800015 	stw	r2,0(r18)
  80725c:	1805883a 	mov	r2,r3
  807260:	dfc00917 	ldw	ra,36(sp)
  807264:	df000817 	ldw	fp,32(sp)
  807268:	ddc00717 	ldw	r23,28(sp)
  80726c:	dd800617 	ldw	r22,24(sp)
  807270:	dd400517 	ldw	r21,20(sp)
  807274:	dd000417 	ldw	r20,16(sp)
  807278:	dcc00317 	ldw	r19,12(sp)
  80727c:	dc800217 	ldw	r18,8(sp)
  807280:	dc400117 	ldw	r17,4(sp)
  807284:	dc000017 	ldw	r16,0(sp)
  807288:	dec00a04 	addi	sp,sp,40
  80728c:	f800283a 	ret
  807290:	00bffe04 	movi	r2,-8
  807294:	18a2703a 	and	r17,r3,r2
  807298:	883fed16 	blt	r17,zero,807250 <_malloc_r+0x44>
  80729c:	897fec36 	bltu	r17,r5,807250 <_malloc_r+0x44>
  8072a0:	9009883a 	mov	r4,r18
  8072a4:	080b6340 	call	80b634 <__malloc_lock>
  8072a8:	00807dc4 	movi	r2,503
  8072ac:	14402b2e 	bgeu	r2,r17,80735c <_malloc_r+0x150>
  8072b0:	8806d27a 	srli	r3,r17,9
  8072b4:	18003f1e 	bne	r3,zero,8073b4 <_malloc_r+0x1a8>
  8072b8:	880cd0fa 	srli	r6,r17,3
  8072bc:	300490fa 	slli	r2,r6,3
  8072c0:	02c02074 	movhi	r11,129
  8072c4:	5af75904 	addi	r11,r11,-8860
  8072c8:	12cb883a 	add	r5,r2,r11
  8072cc:	2c000317 	ldw	r16,12(r5)
  8072d0:	580f883a 	mov	r7,r11
  8072d4:	2c00041e 	bne	r5,r16,8072e8 <_malloc_r+0xdc>
  8072d8:	00000a06 	br	807304 <_malloc_r+0xf8>
  8072dc:	1800860e 	bge	r3,zero,8074f8 <_malloc_r+0x2ec>
  8072e0:	84000317 	ldw	r16,12(r16)
  8072e4:	2c000726 	beq	r5,r16,807304 <_malloc_r+0xf8>
  8072e8:	80800117 	ldw	r2,4(r16)
  8072ec:	00ffff04 	movi	r3,-4
  8072f0:	10c8703a 	and	r4,r2,r3
  8072f4:	2447c83a 	sub	r3,r4,r17
  8072f8:	008003c4 	movi	r2,15
  8072fc:	10fff70e 	bge	r2,r3,8072dc <_malloc_r+0xd0>
  807300:	31bfffc4 	addi	r6,r6,-1
  807304:	32400044 	addi	r9,r6,1
  807308:	02802074 	movhi	r10,129
  80730c:	52b75b04 	addi	r10,r10,-8852
  807310:	54000217 	ldw	r16,8(r10)
  807314:	8280a026 	beq	r16,r10,807598 <_malloc_r+0x38c>
  807318:	80800117 	ldw	r2,4(r16)
  80731c:	00ffff04 	movi	r3,-4
  807320:	10ca703a 	and	r5,r2,r3
  807324:	2c4dc83a 	sub	r6,r5,r17
  807328:	008003c4 	movi	r2,15
  80732c:	11808316 	blt	r2,r6,80753c <_malloc_r+0x330>
  807330:	52800315 	stw	r10,12(r10)
  807334:	52800215 	stw	r10,8(r10)
  807338:	30002916 	blt	r6,zero,8073e0 <_malloc_r+0x1d4>
  80733c:	8147883a 	add	r3,r16,r5
  807340:	18800117 	ldw	r2,4(r3)
  807344:	9009883a 	mov	r4,r18
  807348:	10800054 	ori	r2,r2,1
  80734c:	18800115 	stw	r2,4(r3)
  807350:	080b6540 	call	80b654 <__malloc_unlock>
  807354:	80c00204 	addi	r3,r16,8
  807358:	003fc006 	br	80725c <_malloc_r+0x50>
  80735c:	02c02074 	movhi	r11,129
  807360:	5af75904 	addi	r11,r11,-8860
  807364:	8ac5883a 	add	r2,r17,r11
  807368:	14000317 	ldw	r16,12(r2)
  80736c:	580f883a 	mov	r7,r11
  807370:	8806d0fa 	srli	r3,r17,3
  807374:	14006c26 	beq	r2,r16,807528 <_malloc_r+0x31c>
  807378:	80c00117 	ldw	r3,4(r16)
  80737c:	00bfff04 	movi	r2,-4
  807380:	81800317 	ldw	r6,12(r16)
  807384:	1886703a 	and	r3,r3,r2
  807388:	80c7883a 	add	r3,r16,r3
  80738c:	18800117 	ldw	r2,4(r3)
  807390:	81400217 	ldw	r5,8(r16)
  807394:	9009883a 	mov	r4,r18
  807398:	10800054 	ori	r2,r2,1
  80739c:	18800115 	stw	r2,4(r3)
  8073a0:	31400215 	stw	r5,8(r6)
  8073a4:	29800315 	stw	r6,12(r5)
  8073a8:	080b6540 	call	80b654 <__malloc_unlock>
  8073ac:	80c00204 	addi	r3,r16,8
  8073b0:	003faa06 	br	80725c <_malloc_r+0x50>
  8073b4:	00800104 	movi	r2,4
  8073b8:	10c0052e 	bgeu	r2,r3,8073d0 <_malloc_r+0x1c4>
  8073bc:	00800504 	movi	r2,20
  8073c0:	10c07836 	bltu	r2,r3,8075a4 <_malloc_r+0x398>
  8073c4:	198016c4 	addi	r6,r3,91
  8073c8:	300490fa 	slli	r2,r6,3
  8073cc:	003fbc06 	br	8072c0 <_malloc_r+0xb4>
  8073d0:	8804d1ba 	srli	r2,r17,6
  8073d4:	11800e04 	addi	r6,r2,56
  8073d8:	300490fa 	slli	r2,r6,3
  8073dc:	003fb806 	br	8072c0 <_malloc_r+0xb4>
  8073e0:	00807fc4 	movi	r2,511
  8073e4:	1140bb36 	bltu	r2,r5,8076d4 <_malloc_r+0x4c8>
  8073e8:	2806d0fa 	srli	r3,r5,3
  8073ec:	573ffe04 	addi	fp,r10,-8
  8073f0:	00800044 	movi	r2,1
  8073f4:	180890fa 	slli	r4,r3,3
  8073f8:	1807d0ba 	srai	r3,r3,2
  8073fc:	e1c00117 	ldw	r7,4(fp)
  807400:	5909883a 	add	r4,r11,r4
  807404:	21400217 	ldw	r5,8(r4)
  807408:	10c4983a 	sll	r2,r2,r3
  80740c:	81000315 	stw	r4,12(r16)
  807410:	81400215 	stw	r5,8(r16)
  807414:	388eb03a 	or	r7,r7,r2
  807418:	2c000315 	stw	r16,12(r5)
  80741c:	24000215 	stw	r16,8(r4)
  807420:	e1c00115 	stw	r7,4(fp)
  807424:	4807883a 	mov	r3,r9
  807428:	4800cd16 	blt	r9,zero,807760 <_malloc_r+0x554>
  80742c:	1807d0ba 	srai	r3,r3,2
  807430:	00800044 	movi	r2,1
  807434:	10c8983a 	sll	r4,r2,r3
  807438:	39004436 	bltu	r7,r4,80754c <_malloc_r+0x340>
  80743c:	21c4703a 	and	r2,r4,r7
  807440:	10000a1e 	bne	r2,zero,80746c <_malloc_r+0x260>
  807444:	2109883a 	add	r4,r4,r4
  807448:	00bfff04 	movi	r2,-4
  80744c:	4884703a 	and	r2,r9,r2
  807450:	3906703a 	and	r3,r7,r4
  807454:	12400104 	addi	r9,r2,4
  807458:	1800041e 	bne	r3,zero,80746c <_malloc_r+0x260>
  80745c:	2109883a 	add	r4,r4,r4
  807460:	3904703a 	and	r2,r7,r4
  807464:	4a400104 	addi	r9,r9,4
  807468:	103ffc26 	beq	r2,zero,80745c <_malloc_r+0x250>
  80746c:	480490fa 	slli	r2,r9,3
  807470:	4819883a 	mov	r12,r9
  807474:	023fff04 	movi	r8,-4
  807478:	589b883a 	add	r13,r11,r2
  80747c:	6807883a 	mov	r3,r13
  807480:	014003c4 	movi	r5,15
  807484:	1c000317 	ldw	r16,12(r3)
  807488:	1c00041e 	bne	r3,r16,80749c <_malloc_r+0x290>
  80748c:	0000a706 	br	80772c <_malloc_r+0x520>
  807490:	3000ab0e 	bge	r6,zero,807740 <_malloc_r+0x534>
  807494:	84000317 	ldw	r16,12(r16)
  807498:	1c00a426 	beq	r3,r16,80772c <_malloc_r+0x520>
  80749c:	80800117 	ldw	r2,4(r16)
  8074a0:	1204703a 	and	r2,r2,r8
  8074a4:	144dc83a 	sub	r6,r2,r17
  8074a8:	29bff90e 	bge	r5,r6,807490 <_malloc_r+0x284>
  8074ac:	81000317 	ldw	r4,12(r16)
  8074b0:	80c00217 	ldw	r3,8(r16)
  8074b4:	89400054 	ori	r5,r17,1
  8074b8:	8445883a 	add	r2,r16,r17
  8074bc:	20c00215 	stw	r3,8(r4)
  8074c0:	19000315 	stw	r4,12(r3)
  8074c4:	81400115 	stw	r5,4(r16)
  8074c8:	1187883a 	add	r3,r2,r6
  8074cc:	31000054 	ori	r4,r6,1
  8074d0:	50800315 	stw	r2,12(r10)
  8074d4:	50800215 	stw	r2,8(r10)
  8074d8:	19800015 	stw	r6,0(r3)
  8074dc:	11000115 	stw	r4,4(r2)
  8074e0:	12800215 	stw	r10,8(r2)
  8074e4:	12800315 	stw	r10,12(r2)
  8074e8:	9009883a 	mov	r4,r18
  8074ec:	080b6540 	call	80b654 <__malloc_unlock>
  8074f0:	80c00204 	addi	r3,r16,8
  8074f4:	003f5906 	br	80725c <_malloc_r+0x50>
  8074f8:	8109883a 	add	r4,r16,r4
  8074fc:	20800117 	ldw	r2,4(r4)
  807500:	80c00217 	ldw	r3,8(r16)
  807504:	81400317 	ldw	r5,12(r16)
  807508:	10800054 	ori	r2,r2,1
  80750c:	20800115 	stw	r2,4(r4)
  807510:	28c00215 	stw	r3,8(r5)
  807514:	19400315 	stw	r5,12(r3)
  807518:	9009883a 	mov	r4,r18
  80751c:	080b6540 	call	80b654 <__malloc_unlock>
  807520:	80c00204 	addi	r3,r16,8
  807524:	003f4d06 	br	80725c <_malloc_r+0x50>
  807528:	80800204 	addi	r2,r16,8
  80752c:	14000317 	ldw	r16,12(r2)
  807530:	143f911e 	bne	r2,r16,807378 <_malloc_r+0x16c>
  807534:	1a400084 	addi	r9,r3,2
  807538:	003f7306 	br	807308 <_malloc_r+0xfc>
  80753c:	88c00054 	ori	r3,r17,1
  807540:	8445883a 	add	r2,r16,r17
  807544:	80c00115 	stw	r3,4(r16)
  807548:	003fdf06 	br	8074c8 <_malloc_r+0x2bc>
  80754c:	e4000217 	ldw	r16,8(fp)
  807550:	00bfff04 	movi	r2,-4
  807554:	80c00117 	ldw	r3,4(r16)
  807558:	802d883a 	mov	r22,r16
  80755c:	18aa703a 	and	r21,r3,r2
  807560:	ac401636 	bltu	r21,r17,8075bc <_malloc_r+0x3b0>
  807564:	ac49c83a 	sub	r4,r21,r17
  807568:	008003c4 	movi	r2,15
  80756c:	1100130e 	bge	r2,r4,8075bc <_malloc_r+0x3b0>
  807570:	88800054 	ori	r2,r17,1
  807574:	8447883a 	add	r3,r16,r17
  807578:	80800115 	stw	r2,4(r16)
  80757c:	20800054 	ori	r2,r4,1
  807580:	18800115 	stw	r2,4(r3)
  807584:	e0c00215 	stw	r3,8(fp)
  807588:	9009883a 	mov	r4,r18
  80758c:	080b6540 	call	80b654 <__malloc_unlock>
  807590:	80c00204 	addi	r3,r16,8
  807594:	003f3106 	br	80725c <_malloc_r+0x50>
  807598:	39c00117 	ldw	r7,4(r7)
  80759c:	573ffe04 	addi	fp,r10,-8
  8075a0:	003fa006 	br	807424 <_malloc_r+0x218>
  8075a4:	00801504 	movi	r2,84
  8075a8:	10c06736 	bltu	r2,r3,807748 <_malloc_r+0x53c>
  8075ac:	8804d33a 	srli	r2,r17,12
  8075b0:	11801b84 	addi	r6,r2,110
  8075b4:	300490fa 	slli	r2,r6,3
  8075b8:	003f4106 	br	8072c0 <_malloc_r+0xb4>
  8075bc:	d0a6b517 	ldw	r2,-25900(gp)
  8075c0:	d0e00a17 	ldw	r3,-32728(gp)
  8075c4:	053fffc4 	movi	r20,-1
  8075c8:	10800404 	addi	r2,r2,16
  8075cc:	88a7883a 	add	r19,r17,r2
  8075d0:	1d000326 	beq	r3,r20,8075e0 <_malloc_r+0x3d4>
  8075d4:	98c3ffc4 	addi	r3,r19,4095
  8075d8:	00bc0004 	movi	r2,-4096
  8075dc:	18a6703a 	and	r19,r3,r2
  8075e0:	9009883a 	mov	r4,r18
  8075e4:	980b883a 	mov	r5,r19
  8075e8:	08093080 	call	809308 <_sbrk_r>
  8075ec:	1009883a 	mov	r4,r2
  8075f0:	15000426 	beq	r2,r20,807604 <_malloc_r+0x3f8>
  8075f4:	854b883a 	add	r5,r16,r21
  8075f8:	1029883a 	mov	r20,r2
  8075fc:	11405a2e 	bgeu	r2,r5,807768 <_malloc_r+0x55c>
  807600:	87000c26 	beq	r16,fp,807634 <_malloc_r+0x428>
  807604:	e4000217 	ldw	r16,8(fp)
  807608:	80c00117 	ldw	r3,4(r16)
  80760c:	00bfff04 	movi	r2,-4
  807610:	1884703a 	and	r2,r3,r2
  807614:	14400336 	bltu	r2,r17,807624 <_malloc_r+0x418>
  807618:	1449c83a 	sub	r4,r2,r17
  80761c:	008003c4 	movi	r2,15
  807620:	113fd316 	blt	r2,r4,807570 <_malloc_r+0x364>
  807624:	9009883a 	mov	r4,r18
  807628:	080b6540 	call	80b654 <__malloc_unlock>
  80762c:	0007883a 	mov	r3,zero
  807630:	003f0a06 	br	80725c <_malloc_r+0x50>
  807634:	05c02074 	movhi	r23,129
  807638:	bdc3a204 	addi	r23,r23,3720
  80763c:	b8800017 	ldw	r2,0(r23)
  807640:	988d883a 	add	r6,r19,r2
  807644:	b9800015 	stw	r6,0(r23)
  807648:	d0e00a17 	ldw	r3,-32728(gp)
  80764c:	00bfffc4 	movi	r2,-1
  807650:	18808e26 	beq	r3,r2,80788c <_malloc_r+0x680>
  807654:	2145c83a 	sub	r2,r4,r5
  807658:	3085883a 	add	r2,r6,r2
  80765c:	b8800015 	stw	r2,0(r23)
  807660:	20c001cc 	andi	r3,r4,7
  807664:	18005f1e 	bne	r3,zero,8077e4 <_malloc_r+0x5d8>
  807668:	000b883a 	mov	r5,zero
  80766c:	a4c5883a 	add	r2,r20,r19
  807670:	1083ffcc 	andi	r2,r2,4095
  807674:	00c40004 	movi	r3,4096
  807678:	1887c83a 	sub	r3,r3,r2
  80767c:	28e7883a 	add	r19,r5,r3
  807680:	9009883a 	mov	r4,r18
  807684:	980b883a 	mov	r5,r19
  807688:	08093080 	call	809308 <_sbrk_r>
  80768c:	1007883a 	mov	r3,r2
  807690:	00bfffc4 	movi	r2,-1
  807694:	18807a26 	beq	r3,r2,807880 <_malloc_r+0x674>
  807698:	1d05c83a 	sub	r2,r3,r20
  80769c:	9885883a 	add	r2,r19,r2
  8076a0:	10c00054 	ori	r3,r2,1
  8076a4:	b8800017 	ldw	r2,0(r23)
  8076a8:	a021883a 	mov	r16,r20
  8076ac:	a0c00115 	stw	r3,4(r20)
  8076b0:	9885883a 	add	r2,r19,r2
  8076b4:	b8800015 	stw	r2,0(r23)
  8076b8:	e5000215 	stw	r20,8(fp)
  8076bc:	b7003626 	beq	r22,fp,807798 <_malloc_r+0x58c>
  8076c0:	018003c4 	movi	r6,15
  8076c4:	35404b36 	bltu	r6,r21,8077f4 <_malloc_r+0x5e8>
  8076c8:	00800044 	movi	r2,1
  8076cc:	a0800115 	stw	r2,4(r20)
  8076d0:	003fcd06 	br	807608 <_malloc_r+0x3fc>
  8076d4:	2808d27a 	srli	r4,r5,9
  8076d8:	2000371e 	bne	r4,zero,8077b8 <_malloc_r+0x5ac>
  8076dc:	2808d0fa 	srli	r4,r5,3
  8076e0:	200690fa 	slli	r3,r4,3
  8076e4:	1ad1883a 	add	r8,r3,r11
  8076e8:	41800217 	ldw	r6,8(r8)
  8076ec:	41805b26 	beq	r8,r6,80785c <_malloc_r+0x650>
  8076f0:	30800117 	ldw	r2,4(r6)
  8076f4:	00ffff04 	movi	r3,-4
  8076f8:	10c4703a 	and	r2,r2,r3
  8076fc:	2880022e 	bgeu	r5,r2,807708 <_malloc_r+0x4fc>
  807700:	31800217 	ldw	r6,8(r6)
  807704:	41bffa1e 	bne	r8,r6,8076f0 <_malloc_r+0x4e4>
  807708:	32000317 	ldw	r8,12(r6)
  80770c:	39c00117 	ldw	r7,4(r7)
  807710:	82000315 	stw	r8,12(r16)
  807714:	81800215 	stw	r6,8(r16)
  807718:	07002074 	movhi	fp,129
  80771c:	e7375904 	addi	fp,fp,-8860
  807720:	34000315 	stw	r16,12(r6)
  807724:	44000215 	stw	r16,8(r8)
  807728:	003f3e06 	br	807424 <_malloc_r+0x218>
  80772c:	63000044 	addi	r12,r12,1
  807730:	608000cc 	andi	r2,r12,3
  807734:	10005d26 	beq	r2,zero,8078ac <_malloc_r+0x6a0>
  807738:	18c00204 	addi	r3,r3,8
  80773c:	003f5106 	br	807484 <_malloc_r+0x278>
  807740:	8089883a 	add	r4,r16,r2
  807744:	003f6d06 	br	8074fc <_malloc_r+0x2f0>
  807748:	00805504 	movi	r2,340
  80774c:	10c02036 	bltu	r2,r3,8077d0 <_malloc_r+0x5c4>
  807750:	8804d3fa 	srli	r2,r17,15
  807754:	11801dc4 	addi	r6,r2,119
  807758:	300490fa 	slli	r2,r6,3
  80775c:	003ed806 	br	8072c0 <_malloc_r+0xb4>
  807760:	48c000c4 	addi	r3,r9,3
  807764:	003f3106 	br	80742c <_malloc_r+0x220>
  807768:	05c02074 	movhi	r23,129
  80776c:	bdc3a204 	addi	r23,r23,3720
  807770:	b8800017 	ldw	r2,0(r23)
  807774:	988d883a 	add	r6,r19,r2
  807778:	b9800015 	stw	r6,0(r23)
  80777c:	293fb21e 	bne	r5,r4,807648 <_malloc_r+0x43c>
  807780:	2083ffcc 	andi	r2,r4,4095
  807784:	103fb01e 	bne	r2,zero,807648 <_malloc_r+0x43c>
  807788:	e4000217 	ldw	r16,8(fp)
  80778c:	9d45883a 	add	r2,r19,r21
  807790:	10800054 	ori	r2,r2,1
  807794:	80800115 	stw	r2,4(r16)
  807798:	b8c00017 	ldw	r3,0(r23)
  80779c:	d0a6b617 	ldw	r2,-25896(gp)
  8077a0:	10c0012e 	bgeu	r2,r3,8077a8 <_malloc_r+0x59c>
  8077a4:	d0e6b615 	stw	r3,-25896(gp)
  8077a8:	d0a6b717 	ldw	r2,-25892(gp)
  8077ac:	10ff962e 	bgeu	r2,r3,807608 <_malloc_r+0x3fc>
  8077b0:	d0e6b715 	stw	r3,-25892(gp)
  8077b4:	003f9406 	br	807608 <_malloc_r+0x3fc>
  8077b8:	00800104 	movi	r2,4
  8077bc:	11001e36 	bltu	r2,r4,807838 <_malloc_r+0x62c>
  8077c0:	2804d1ba 	srli	r2,r5,6
  8077c4:	11000e04 	addi	r4,r2,56
  8077c8:	200690fa 	slli	r3,r4,3
  8077cc:	003fc506 	br	8076e4 <_malloc_r+0x4d8>
  8077d0:	00815504 	movi	r2,1364
  8077d4:	10c01d2e 	bgeu	r2,r3,80784c <_malloc_r+0x640>
  8077d8:	01801f84 	movi	r6,126
  8077dc:	0080fc04 	movi	r2,1008
  8077e0:	003eb706 	br	8072c0 <_malloc_r+0xb4>
  8077e4:	00800204 	movi	r2,8
  8077e8:	10cbc83a 	sub	r5,r2,r3
  8077ec:	2169883a 	add	r20,r4,r5
  8077f0:	003f9e06 	br	80766c <_malloc_r+0x460>
  8077f4:	00bffe04 	movi	r2,-8
  8077f8:	a93ffd04 	addi	r4,r21,-12
  8077fc:	2088703a 	and	r4,r4,r2
  807800:	b10b883a 	add	r5,r22,r4
  807804:	00c00144 	movi	r3,5
  807808:	28c00215 	stw	r3,8(r5)
  80780c:	28c00115 	stw	r3,4(r5)
  807810:	b0800117 	ldw	r2,4(r22)
  807814:	1080004c 	andi	r2,r2,1
  807818:	2084b03a 	or	r2,r4,r2
  80781c:	b0800115 	stw	r2,4(r22)
  807820:	313fdd2e 	bgeu	r6,r4,807798 <_malloc_r+0x58c>
  807824:	b1400204 	addi	r5,r22,8
  807828:	9009883a 	mov	r4,r18
  80782c:	08066840 	call	806684 <_free_r>
  807830:	e4000217 	ldw	r16,8(fp)
  807834:	003fd806 	br	807798 <_malloc_r+0x58c>
  807838:	00800504 	movi	r2,20
  80783c:	11001536 	bltu	r2,r4,807894 <_malloc_r+0x688>
  807840:	210016c4 	addi	r4,r4,91
  807844:	200690fa 	slli	r3,r4,3
  807848:	003fa606 	br	8076e4 <_malloc_r+0x4d8>
  80784c:	8804d4ba 	srli	r2,r17,18
  807850:	11801f04 	addi	r6,r2,124
  807854:	300490fa 	slli	r2,r6,3
  807858:	003e9906 	br	8072c0 <_malloc_r+0xb4>
  80785c:	2009d0ba 	srai	r4,r4,2
  807860:	01402074 	movhi	r5,129
  807864:	29775904 	addi	r5,r5,-8860
  807868:	00c00044 	movi	r3,1
  80786c:	28800117 	ldw	r2,4(r5)
  807870:	1906983a 	sll	r3,r3,r4
  807874:	10c4b03a 	or	r2,r2,r3
  807878:	28800115 	stw	r2,4(r5)
  80787c:	003fa306 	br	80770c <_malloc_r+0x500>
  807880:	0027883a 	mov	r19,zero
  807884:	00c00044 	movi	r3,1
  807888:	003f8606 	br	8076a4 <_malloc_r+0x498>
  80788c:	d1200a15 	stw	r4,-32728(gp)
  807890:	003f7306 	br	807660 <_malloc_r+0x454>
  807894:	00801504 	movi	r2,84
  807898:	11001936 	bltu	r2,r4,807900 <_malloc_r+0x6f4>
  80789c:	2804d33a 	srli	r2,r5,12
  8078a0:	11001b84 	addi	r4,r2,110
  8078a4:	200690fa 	slli	r3,r4,3
  8078a8:	003f8e06 	br	8076e4 <_malloc_r+0x4d8>
  8078ac:	480b883a 	mov	r5,r9
  8078b0:	6807883a 	mov	r3,r13
  8078b4:	288000cc 	andi	r2,r5,3
  8078b8:	18fffe04 	addi	r3,r3,-8
  8078bc:	297fffc4 	addi	r5,r5,-1
  8078c0:	10001526 	beq	r2,zero,807918 <_malloc_r+0x70c>
  8078c4:	18800217 	ldw	r2,8(r3)
  8078c8:	10fffa26 	beq	r2,r3,8078b4 <_malloc_r+0x6a8>
  8078cc:	2109883a 	add	r4,r4,r4
  8078d0:	393f1e36 	bltu	r7,r4,80754c <_malloc_r+0x340>
  8078d4:	203f1d26 	beq	r4,zero,80754c <_malloc_r+0x340>
  8078d8:	21c4703a 	and	r2,r4,r7
  8078dc:	10000226 	beq	r2,zero,8078e8 <_malloc_r+0x6dc>
  8078e0:	6013883a 	mov	r9,r12
  8078e4:	003ee106 	br	80746c <_malloc_r+0x260>
  8078e8:	2109883a 	add	r4,r4,r4
  8078ec:	3904703a 	and	r2,r7,r4
  8078f0:	63000104 	addi	r12,r12,4
  8078f4:	103ffc26 	beq	r2,zero,8078e8 <_malloc_r+0x6dc>
  8078f8:	6013883a 	mov	r9,r12
  8078fc:	003edb06 	br	80746c <_malloc_r+0x260>
  807900:	00805504 	movi	r2,340
  807904:	11000836 	bltu	r2,r4,807928 <_malloc_r+0x71c>
  807908:	2804d3fa 	srli	r2,r5,15
  80790c:	11001dc4 	addi	r4,r2,119
  807910:	200690fa 	slli	r3,r4,3
  807914:	003f7306 	br	8076e4 <_malloc_r+0x4d8>
  807918:	0104303a 	nor	r2,zero,r4
  80791c:	388e703a 	and	r7,r7,r2
  807920:	e1c00115 	stw	r7,4(fp)
  807924:	003fe906 	br	8078cc <_malloc_r+0x6c0>
  807928:	00815504 	movi	r2,1364
  80792c:	1100032e 	bgeu	r2,r4,80793c <_malloc_r+0x730>
  807930:	01001f84 	movi	r4,126
  807934:	00c0fc04 	movi	r3,1008
  807938:	003f6a06 	br	8076e4 <_malloc_r+0x4d8>
  80793c:	2804d4ba 	srli	r2,r5,18
  807940:	11001f04 	addi	r4,r2,124
  807944:	200690fa 	slli	r3,r4,3
  807948:	003f6606 	br	8076e4 <_malloc_r+0x4d8>

0080794c <memchr>:
  80794c:	008000c4 	movi	r2,3
  807950:	29403fcc 	andi	r5,r5,255
  807954:	2007883a 	mov	r3,r4
  807958:	1180022e 	bgeu	r2,r6,807964 <memchr+0x18>
  80795c:	2084703a 	and	r2,r4,r2
  807960:	10000b26 	beq	r2,zero,807990 <memchr+0x44>
  807964:	313fffc4 	addi	r4,r6,-1
  807968:	3000051e 	bne	r6,zero,807980 <memchr+0x34>
  80796c:	00002c06 	br	807a20 <memchr+0xd4>
  807970:	213fffc4 	addi	r4,r4,-1
  807974:	00bfffc4 	movi	r2,-1
  807978:	18c00044 	addi	r3,r3,1
  80797c:	20802826 	beq	r4,r2,807a20 <memchr+0xd4>
  807980:	18800003 	ldbu	r2,0(r3)
  807984:	28bffa1e 	bne	r5,r2,807970 <memchr+0x24>
  807988:	1805883a 	mov	r2,r3
  80798c:	f800283a 	ret
  807990:	0011883a 	mov	r8,zero
  807994:	0007883a 	mov	r3,zero
  807998:	01c00104 	movi	r7,4
  80799c:	4004923a 	slli	r2,r8,8
  8079a0:	18c00044 	addi	r3,r3,1
  8079a4:	1151883a 	add	r8,r2,r5
  8079a8:	19fffc1e 	bne	r3,r7,80799c <memchr+0x50>
  8079ac:	02bfbff4 	movhi	r10,65279
  8079b0:	52bfbfc4 	addi	r10,r10,-257
  8079b4:	02602074 	movhi	r9,32897
  8079b8:	4a602004 	addi	r9,r9,-32640
  8079bc:	02c000c4 	movi	r11,3
  8079c0:	20800017 	ldw	r2,0(r4)
  8079c4:	31bfff04 	addi	r6,r6,-4
  8079c8:	200f883a 	mov	r7,r4
  8079cc:	1204f03a 	xor	r2,r2,r8
  8079d0:	1287883a 	add	r3,r2,r10
  8079d4:	1a46703a 	and	r3,r3,r9
  8079d8:	0084303a 	nor	r2,zero,r2
  8079dc:	10c4703a 	and	r2,r2,r3
  8079e0:	10000b26 	beq	r2,zero,807a10 <memchr+0xc4>
  8079e4:	20800003 	ldbu	r2,0(r4)
  8079e8:	28800f26 	beq	r5,r2,807a28 <memchr+0xdc>
  8079ec:	20800043 	ldbu	r2,1(r4)
  8079f0:	21c00044 	addi	r7,r4,1
  8079f4:	28800c26 	beq	r5,r2,807a28 <memchr+0xdc>
  8079f8:	20800083 	ldbu	r2,2(r4)
  8079fc:	21c00084 	addi	r7,r4,2
  807a00:	28800926 	beq	r5,r2,807a28 <memchr+0xdc>
  807a04:	208000c3 	ldbu	r2,3(r4)
  807a08:	21c000c4 	addi	r7,r4,3
  807a0c:	28800626 	beq	r5,r2,807a28 <memchr+0xdc>
  807a10:	21000104 	addi	r4,r4,4
  807a14:	59bfea36 	bltu	r11,r6,8079c0 <memchr+0x74>
  807a18:	2007883a 	mov	r3,r4
  807a1c:	003fd106 	br	807964 <memchr+0x18>
  807a20:	0005883a 	mov	r2,zero
  807a24:	f800283a 	ret
  807a28:	3805883a 	mov	r2,r7
  807a2c:	f800283a 	ret

00807a30 <memcpy>:
  807a30:	01c003c4 	movi	r7,15
  807a34:	2007883a 	mov	r3,r4
  807a38:	3980032e 	bgeu	r7,r6,807a48 <memcpy+0x18>
  807a3c:	2904b03a 	or	r2,r5,r4
  807a40:	108000cc 	andi	r2,r2,3
  807a44:	10000926 	beq	r2,zero,807a6c <memcpy+0x3c>
  807a48:	30000626 	beq	r6,zero,807a64 <memcpy+0x34>
  807a4c:	30cd883a 	add	r6,r6,r3
  807a50:	28800003 	ldbu	r2,0(r5)
  807a54:	29400044 	addi	r5,r5,1
  807a58:	18800005 	stb	r2,0(r3)
  807a5c:	18c00044 	addi	r3,r3,1
  807a60:	30fffb1e 	bne	r6,r3,807a50 <memcpy+0x20>
  807a64:	2005883a 	mov	r2,r4
  807a68:	f800283a 	ret
  807a6c:	3811883a 	mov	r8,r7
  807a70:	200f883a 	mov	r7,r4
  807a74:	28c00017 	ldw	r3,0(r5)
  807a78:	31bffc04 	addi	r6,r6,-16
  807a7c:	38c00015 	stw	r3,0(r7)
  807a80:	28800117 	ldw	r2,4(r5)
  807a84:	38800115 	stw	r2,4(r7)
  807a88:	28c00217 	ldw	r3,8(r5)
  807a8c:	38c00215 	stw	r3,8(r7)
  807a90:	28800317 	ldw	r2,12(r5)
  807a94:	29400404 	addi	r5,r5,16
  807a98:	38800315 	stw	r2,12(r7)
  807a9c:	39c00404 	addi	r7,r7,16
  807aa0:	41bff436 	bltu	r8,r6,807a74 <memcpy+0x44>
  807aa4:	008000c4 	movi	r2,3
  807aa8:	1180072e 	bgeu	r2,r6,807ac8 <memcpy+0x98>
  807aac:	1007883a 	mov	r3,r2
  807ab0:	28800017 	ldw	r2,0(r5)
  807ab4:	31bfff04 	addi	r6,r6,-4
  807ab8:	29400104 	addi	r5,r5,4
  807abc:	38800015 	stw	r2,0(r7)
  807ac0:	39c00104 	addi	r7,r7,4
  807ac4:	19bffa36 	bltu	r3,r6,807ab0 <memcpy+0x80>
  807ac8:	3807883a 	mov	r3,r7
  807acc:	003fde06 	br	807a48 <memcpy+0x18>

00807ad0 <memmove>:
  807ad0:	2807883a 	mov	r3,r5
  807ad4:	2011883a 	mov	r8,r4
  807ad8:	29000c2e 	bgeu	r5,r4,807b0c <memmove+0x3c>
  807adc:	298f883a 	add	r7,r5,r6
  807ae0:	21c00a2e 	bgeu	r4,r7,807b0c <memmove+0x3c>
  807ae4:	30000726 	beq	r6,zero,807b04 <memmove+0x34>
  807ae8:	2187883a 	add	r3,r4,r6
  807aec:	198dc83a 	sub	r6,r3,r6
  807af0:	39ffffc4 	addi	r7,r7,-1
  807af4:	38800003 	ldbu	r2,0(r7)
  807af8:	18ffffc4 	addi	r3,r3,-1
  807afc:	18800005 	stb	r2,0(r3)
  807b00:	19bffb1e 	bne	r3,r6,807af0 <memmove+0x20>
  807b04:	2005883a 	mov	r2,r4
  807b08:	f800283a 	ret
  807b0c:	01c003c4 	movi	r7,15
  807b10:	39800a36 	bltu	r7,r6,807b3c <memmove+0x6c>
  807b14:	303ffb26 	beq	r6,zero,807b04 <memmove+0x34>
  807b18:	400f883a 	mov	r7,r8
  807b1c:	320d883a 	add	r6,r6,r8
  807b20:	28800003 	ldbu	r2,0(r5)
  807b24:	29400044 	addi	r5,r5,1
  807b28:	38800005 	stb	r2,0(r7)
  807b2c:	39c00044 	addi	r7,r7,1
  807b30:	39bffb1e 	bne	r7,r6,807b20 <memmove+0x50>
  807b34:	2005883a 	mov	r2,r4
  807b38:	f800283a 	ret
  807b3c:	1904b03a 	or	r2,r3,r4
  807b40:	108000cc 	andi	r2,r2,3
  807b44:	103ff31e 	bne	r2,zero,807b14 <memmove+0x44>
  807b48:	3811883a 	mov	r8,r7
  807b4c:	180b883a 	mov	r5,r3
  807b50:	200f883a 	mov	r7,r4
  807b54:	28c00017 	ldw	r3,0(r5)
  807b58:	31bffc04 	addi	r6,r6,-16
  807b5c:	38c00015 	stw	r3,0(r7)
  807b60:	28800117 	ldw	r2,4(r5)
  807b64:	38800115 	stw	r2,4(r7)
  807b68:	28c00217 	ldw	r3,8(r5)
  807b6c:	38c00215 	stw	r3,8(r7)
  807b70:	28800317 	ldw	r2,12(r5)
  807b74:	29400404 	addi	r5,r5,16
  807b78:	38800315 	stw	r2,12(r7)
  807b7c:	39c00404 	addi	r7,r7,16
  807b80:	41bff436 	bltu	r8,r6,807b54 <memmove+0x84>
  807b84:	008000c4 	movi	r2,3
  807b88:	1180072e 	bgeu	r2,r6,807ba8 <memmove+0xd8>
  807b8c:	1007883a 	mov	r3,r2
  807b90:	28800017 	ldw	r2,0(r5)
  807b94:	31bfff04 	addi	r6,r6,-4
  807b98:	29400104 	addi	r5,r5,4
  807b9c:	38800015 	stw	r2,0(r7)
  807ba0:	39c00104 	addi	r7,r7,4
  807ba4:	19bffa36 	bltu	r3,r6,807b90 <memmove+0xc0>
  807ba8:	3811883a 	mov	r8,r7
  807bac:	003fd906 	br	807b14 <memmove+0x44>

00807bb0 <memset>:
  807bb0:	008000c4 	movi	r2,3
  807bb4:	29403fcc 	andi	r5,r5,255
  807bb8:	2007883a 	mov	r3,r4
  807bbc:	1180022e 	bgeu	r2,r6,807bc8 <memset+0x18>
  807bc0:	2084703a 	and	r2,r4,r2
  807bc4:	10000826 	beq	r2,zero,807be8 <memset+0x38>
  807bc8:	30000526 	beq	r6,zero,807be0 <memset+0x30>
  807bcc:	2805883a 	mov	r2,r5
  807bd0:	30cd883a 	add	r6,r6,r3
  807bd4:	18800005 	stb	r2,0(r3)
  807bd8:	18c00044 	addi	r3,r3,1
  807bdc:	19bffd1e 	bne	r3,r6,807bd4 <memset+0x24>
  807be0:	2005883a 	mov	r2,r4
  807be4:	f800283a 	ret
  807be8:	2804923a 	slli	r2,r5,8
  807bec:	020003c4 	movi	r8,15
  807bf0:	200f883a 	mov	r7,r4
  807bf4:	2884b03a 	or	r2,r5,r2
  807bf8:	1006943a 	slli	r3,r2,16
  807bfc:	10c6b03a 	or	r3,r2,r3
  807c00:	41800a2e 	bgeu	r8,r6,807c2c <memset+0x7c>
  807c04:	4005883a 	mov	r2,r8
  807c08:	31bffc04 	addi	r6,r6,-16
  807c0c:	38c00015 	stw	r3,0(r7)
  807c10:	38c00115 	stw	r3,4(r7)
  807c14:	38c00215 	stw	r3,8(r7)
  807c18:	38c00315 	stw	r3,12(r7)
  807c1c:	39c00404 	addi	r7,r7,16
  807c20:	11bff936 	bltu	r2,r6,807c08 <memset+0x58>
  807c24:	008000c4 	movi	r2,3
  807c28:	1180052e 	bgeu	r2,r6,807c40 <memset+0x90>
  807c2c:	31bfff04 	addi	r6,r6,-4
  807c30:	008000c4 	movi	r2,3
  807c34:	38c00015 	stw	r3,0(r7)
  807c38:	39c00104 	addi	r7,r7,4
  807c3c:	11bffb36 	bltu	r2,r6,807c2c <memset+0x7c>
  807c40:	3807883a 	mov	r3,r7
  807c44:	003fe006 	br	807bc8 <memset+0x18>

00807c48 <_Bfree>:
  807c48:	28000826 	beq	r5,zero,807c6c <_Bfree+0x24>
  807c4c:	28800117 	ldw	r2,4(r5)
  807c50:	21001317 	ldw	r4,76(r4)
  807c54:	1085883a 	add	r2,r2,r2
  807c58:	1085883a 	add	r2,r2,r2
  807c5c:	1105883a 	add	r2,r2,r4
  807c60:	10c00017 	ldw	r3,0(r2)
  807c64:	28c00015 	stw	r3,0(r5)
  807c68:	11400015 	stw	r5,0(r2)
  807c6c:	f800283a 	ret

00807c70 <__hi0bits>:
  807c70:	20bfffec 	andhi	r2,r4,65535
  807c74:	10001426 	beq	r2,zero,807cc8 <__hi0bits+0x58>
  807c78:	0007883a 	mov	r3,zero
  807c7c:	20bfc02c 	andhi	r2,r4,65280
  807c80:	1000021e 	bne	r2,zero,807c8c <__hi0bits+0x1c>
  807c84:	2008923a 	slli	r4,r4,8
  807c88:	18c00204 	addi	r3,r3,8
  807c8c:	20bc002c 	andhi	r2,r4,61440
  807c90:	1000021e 	bne	r2,zero,807c9c <__hi0bits+0x2c>
  807c94:	2008913a 	slli	r4,r4,4
  807c98:	18c00104 	addi	r3,r3,4
  807c9c:	20b0002c 	andhi	r2,r4,49152
  807ca0:	1000031e 	bne	r2,zero,807cb0 <__hi0bits+0x40>
  807ca4:	2105883a 	add	r2,r4,r4
  807ca8:	18c00084 	addi	r3,r3,2
  807cac:	1089883a 	add	r4,r2,r2
  807cb0:	20000316 	blt	r4,zero,807cc0 <__hi0bits+0x50>
  807cb4:	2090002c 	andhi	r2,r4,16384
  807cb8:	10000626 	beq	r2,zero,807cd4 <__hi0bits+0x64>
  807cbc:	18c00044 	addi	r3,r3,1
  807cc0:	1805883a 	mov	r2,r3
  807cc4:	f800283a 	ret
  807cc8:	2008943a 	slli	r4,r4,16
  807ccc:	00c00404 	movi	r3,16
  807cd0:	003fea06 	br	807c7c <__hi0bits+0xc>
  807cd4:	00c00804 	movi	r3,32
  807cd8:	1805883a 	mov	r2,r3
  807cdc:	f800283a 	ret

00807ce0 <__lo0bits>:
  807ce0:	20c00017 	ldw	r3,0(r4)
  807ce4:	188001cc 	andi	r2,r3,7
  807ce8:	10000a26 	beq	r2,zero,807d14 <__lo0bits+0x34>
  807cec:	1880004c 	andi	r2,r3,1
  807cf0:	1005003a 	cmpeq	r2,r2,zero
  807cf4:	10002126 	beq	r2,zero,807d7c <__lo0bits+0x9c>
  807cf8:	1880008c 	andi	r2,r3,2
  807cfc:	1000251e 	bne	r2,zero,807d94 <__lo0bits+0xb4>
  807d00:	1804d0ba 	srli	r2,r3,2
  807d04:	01400084 	movi	r5,2
  807d08:	20800015 	stw	r2,0(r4)
  807d0c:	2805883a 	mov	r2,r5
  807d10:	f800283a 	ret
  807d14:	18bfffcc 	andi	r2,r3,65535
  807d18:	10001526 	beq	r2,zero,807d70 <__lo0bits+0x90>
  807d1c:	000b883a 	mov	r5,zero
  807d20:	18803fcc 	andi	r2,r3,255
  807d24:	1000021e 	bne	r2,zero,807d30 <__lo0bits+0x50>
  807d28:	1806d23a 	srli	r3,r3,8
  807d2c:	29400204 	addi	r5,r5,8
  807d30:	188003cc 	andi	r2,r3,15
  807d34:	1000021e 	bne	r2,zero,807d40 <__lo0bits+0x60>
  807d38:	1806d13a 	srli	r3,r3,4
  807d3c:	29400104 	addi	r5,r5,4
  807d40:	188000cc 	andi	r2,r3,3
  807d44:	1000021e 	bne	r2,zero,807d50 <__lo0bits+0x70>
  807d48:	1806d0ba 	srli	r3,r3,2
  807d4c:	29400084 	addi	r5,r5,2
  807d50:	1880004c 	andi	r2,r3,1
  807d54:	1000031e 	bne	r2,zero,807d64 <__lo0bits+0x84>
  807d58:	1806d07a 	srli	r3,r3,1
  807d5c:	18000a26 	beq	r3,zero,807d88 <__lo0bits+0xa8>
  807d60:	29400044 	addi	r5,r5,1
  807d64:	2805883a 	mov	r2,r5
  807d68:	20c00015 	stw	r3,0(r4)
  807d6c:	f800283a 	ret
  807d70:	1806d43a 	srli	r3,r3,16
  807d74:	01400404 	movi	r5,16
  807d78:	003fe906 	br	807d20 <__lo0bits+0x40>
  807d7c:	000b883a 	mov	r5,zero
  807d80:	2805883a 	mov	r2,r5
  807d84:	f800283a 	ret
  807d88:	01400804 	movi	r5,32
  807d8c:	2805883a 	mov	r2,r5
  807d90:	f800283a 	ret
  807d94:	1804d07a 	srli	r2,r3,1
  807d98:	01400044 	movi	r5,1
  807d9c:	20800015 	stw	r2,0(r4)
  807da0:	003fda06 	br	807d0c <__lo0bits+0x2c>

00807da4 <__mcmp>:
  807da4:	20800417 	ldw	r2,16(r4)
  807da8:	28c00417 	ldw	r3,16(r5)
  807dac:	10cfc83a 	sub	r7,r2,r3
  807db0:	38000c1e 	bne	r7,zero,807de4 <__mcmp+0x40>
  807db4:	18c5883a 	add	r2,r3,r3
  807db8:	1085883a 	add	r2,r2,r2
  807dbc:	10c00504 	addi	r3,r2,20
  807dc0:	21000504 	addi	r4,r4,20
  807dc4:	28cb883a 	add	r5,r5,r3
  807dc8:	2085883a 	add	r2,r4,r2
  807dcc:	10bfff04 	addi	r2,r2,-4
  807dd0:	297fff04 	addi	r5,r5,-4
  807dd4:	11800017 	ldw	r6,0(r2)
  807dd8:	28c00017 	ldw	r3,0(r5)
  807ddc:	30c0031e 	bne	r6,r3,807dec <__mcmp+0x48>
  807de0:	20bffa36 	bltu	r4,r2,807dcc <__mcmp+0x28>
  807de4:	3805883a 	mov	r2,r7
  807de8:	f800283a 	ret
  807dec:	30c00336 	bltu	r6,r3,807dfc <__mcmp+0x58>
  807df0:	01c00044 	movi	r7,1
  807df4:	3805883a 	mov	r2,r7
  807df8:	f800283a 	ret
  807dfc:	01ffffc4 	movi	r7,-1
  807e00:	003ff806 	br	807de4 <__mcmp+0x40>

00807e04 <__ulp>:
  807e04:	295ffc2c 	andhi	r5,r5,32752
  807e08:	013f3034 	movhi	r4,64704
  807e0c:	290b883a 	add	r5,r5,r4
  807e10:	0145c83a 	sub	r2,zero,r5
  807e14:	1007d53a 	srai	r3,r2,20
  807e18:	000d883a 	mov	r6,zero
  807e1c:	0140040e 	bge	zero,r5,807e30 <__ulp+0x2c>
  807e20:	280f883a 	mov	r7,r5
  807e24:	3807883a 	mov	r3,r7
  807e28:	3005883a 	mov	r2,r6
  807e2c:	f800283a 	ret
  807e30:	008004c4 	movi	r2,19
  807e34:	193ffb04 	addi	r4,r3,-20
  807e38:	10c00c0e 	bge	r2,r3,807e6c <__ulp+0x68>
  807e3c:	008007c4 	movi	r2,31
  807e40:	1107c83a 	sub	r3,r2,r4
  807e44:	00800784 	movi	r2,30
  807e48:	01400044 	movi	r5,1
  807e4c:	11000216 	blt	r2,r4,807e58 <__ulp+0x54>
  807e50:	00800044 	movi	r2,1
  807e54:	10ca983a 	sll	r5,r2,r3
  807e58:	000f883a 	mov	r7,zero
  807e5c:	280d883a 	mov	r6,r5
  807e60:	3807883a 	mov	r3,r7
  807e64:	3005883a 	mov	r2,r6
  807e68:	f800283a 	ret
  807e6c:	00800234 	movhi	r2,8
  807e70:	10cfd83a 	sra	r7,r2,r3
  807e74:	000d883a 	mov	r6,zero
  807e78:	3005883a 	mov	r2,r6
  807e7c:	3807883a 	mov	r3,r7
  807e80:	f800283a 	ret

00807e84 <__b2d>:
  807e84:	20800417 	ldw	r2,16(r4)
  807e88:	defff904 	addi	sp,sp,-28
  807e8c:	dd000415 	stw	r20,16(sp)
  807e90:	1085883a 	add	r2,r2,r2
  807e94:	25000504 	addi	r20,r4,20
  807e98:	1085883a 	add	r2,r2,r2
  807e9c:	dc000015 	stw	r16,0(sp)
  807ea0:	a0a1883a 	add	r16,r20,r2
  807ea4:	dd400515 	stw	r21,20(sp)
  807ea8:	857fff17 	ldw	r21,-4(r16)
  807eac:	dc400115 	stw	r17,4(sp)
  807eb0:	dfc00615 	stw	ra,24(sp)
  807eb4:	a809883a 	mov	r4,r21
  807eb8:	2823883a 	mov	r17,r5
  807ebc:	dcc00315 	stw	r19,12(sp)
  807ec0:	dc800215 	stw	r18,8(sp)
  807ec4:	0807c700 	call	807c70 <__hi0bits>
  807ec8:	100b883a 	mov	r5,r2
  807ecc:	00800804 	movi	r2,32
  807ed0:	1145c83a 	sub	r2,r2,r5
  807ed4:	88800015 	stw	r2,0(r17)
  807ed8:	00800284 	movi	r2,10
  807edc:	80ffff04 	addi	r3,r16,-4
  807ee0:	11401416 	blt	r2,r5,807f34 <__b2d+0xb0>
  807ee4:	008002c4 	movi	r2,11
  807ee8:	1149c83a 	sub	r4,r2,r5
  807eec:	a0c02736 	bltu	r20,r3,807f8c <__b2d+0x108>
  807ef0:	000d883a 	mov	r6,zero
  807ef4:	28800544 	addi	r2,r5,21
  807ef8:	a906d83a 	srl	r3,r21,r4
  807efc:	a884983a 	sll	r2,r21,r2
  807f00:	1ccffc34 	orhi	r19,r3,16368
  807f04:	11a4b03a 	or	r18,r2,r6
  807f08:	9005883a 	mov	r2,r18
  807f0c:	9807883a 	mov	r3,r19
  807f10:	dfc00617 	ldw	ra,24(sp)
  807f14:	dd400517 	ldw	r21,20(sp)
  807f18:	dd000417 	ldw	r20,16(sp)
  807f1c:	dcc00317 	ldw	r19,12(sp)
  807f20:	dc800217 	ldw	r18,8(sp)
  807f24:	dc400117 	ldw	r17,4(sp)
  807f28:	dc000017 	ldw	r16,0(sp)
  807f2c:	dec00704 	addi	sp,sp,28
  807f30:	f800283a 	ret
  807f34:	a0c00e36 	bltu	r20,r3,807f70 <__b2d+0xec>
  807f38:	293ffd44 	addi	r4,r5,-11
  807f3c:	000d883a 	mov	r6,zero
  807f40:	20000f26 	beq	r4,zero,807f80 <__b2d+0xfc>
  807f44:	00800804 	movi	r2,32
  807f48:	110bc83a 	sub	r5,r2,r4
  807f4c:	a0c01236 	bltu	r20,r3,807f98 <__b2d+0x114>
  807f50:	000f883a 	mov	r7,zero
  807f54:	a904983a 	sll	r2,r21,r4
  807f58:	3146d83a 	srl	r3,r6,r5
  807f5c:	3108983a 	sll	r4,r6,r4
  807f60:	108ffc34 	orhi	r2,r2,16368
  807f64:	18a6b03a 	or	r19,r3,r2
  807f68:	3924b03a 	or	r18,r7,r4
  807f6c:	003fe606 	br	807f08 <__b2d+0x84>
  807f70:	293ffd44 	addi	r4,r5,-11
  807f74:	81bffe17 	ldw	r6,-8(r16)
  807f78:	80fffe04 	addi	r3,r16,-8
  807f7c:	203ff11e 	bne	r4,zero,807f44 <__b2d+0xc0>
  807f80:	accffc34 	orhi	r19,r21,16368
  807f84:	3025883a 	mov	r18,r6
  807f88:	003fdf06 	br	807f08 <__b2d+0x84>
  807f8c:	18bfff17 	ldw	r2,-4(r3)
  807f90:	110cd83a 	srl	r6,r2,r4
  807f94:	003fd706 	br	807ef4 <__b2d+0x70>
  807f98:	18bfff17 	ldw	r2,-4(r3)
  807f9c:	114ed83a 	srl	r7,r2,r5
  807fa0:	003fec06 	br	807f54 <__b2d+0xd0>

00807fa4 <__ratio>:
  807fa4:	defff904 	addi	sp,sp,-28
  807fa8:	dc400215 	stw	r17,8(sp)
  807fac:	2823883a 	mov	r17,r5
  807fb0:	d80b883a 	mov	r5,sp
  807fb4:	dfc00615 	stw	ra,24(sp)
  807fb8:	dd000515 	stw	r20,20(sp)
  807fbc:	dcc00415 	stw	r19,16(sp)
  807fc0:	dc800315 	stw	r18,12(sp)
  807fc4:	2025883a 	mov	r18,r4
  807fc8:	0807e840 	call	807e84 <__b2d>
  807fcc:	8809883a 	mov	r4,r17
  807fd0:	d9400104 	addi	r5,sp,4
  807fd4:	1027883a 	mov	r19,r2
  807fd8:	1829883a 	mov	r20,r3
  807fdc:	0807e840 	call	807e84 <__b2d>
  807fe0:	89000417 	ldw	r4,16(r17)
  807fe4:	91c00417 	ldw	r7,16(r18)
  807fe8:	d9800117 	ldw	r6,4(sp)
  807fec:	180b883a 	mov	r5,r3
  807ff0:	390fc83a 	sub	r7,r7,r4
  807ff4:	1009883a 	mov	r4,r2
  807ff8:	d8800017 	ldw	r2,0(sp)
  807ffc:	380e917a 	slli	r7,r7,5
  808000:	2011883a 	mov	r8,r4
  808004:	1185c83a 	sub	r2,r2,r6
  808008:	11c5883a 	add	r2,r2,r7
  80800c:	1006953a 	slli	r3,r2,20
  808010:	2813883a 	mov	r9,r5
  808014:	00800d0e 	bge	zero,r2,80804c <__ratio+0xa8>
  808018:	1d29883a 	add	r20,r3,r20
  80801c:	a00b883a 	mov	r5,r20
  808020:	480f883a 	mov	r7,r9
  808024:	9809883a 	mov	r4,r19
  808028:	400d883a 	mov	r6,r8
  80802c:	080163c0 	call	80163c <__divdf3>
  808030:	dfc00617 	ldw	ra,24(sp)
  808034:	dd000517 	ldw	r20,20(sp)
  808038:	dcc00417 	ldw	r19,16(sp)
  80803c:	dc800317 	ldw	r18,12(sp)
  808040:	dc400217 	ldw	r17,8(sp)
  808044:	dec00704 	addi	sp,sp,28
  808048:	f800283a 	ret
  80804c:	28d3c83a 	sub	r9,r5,r3
  808050:	003ff206 	br	80801c <__ratio+0x78>

00808054 <_mprec_log10>:
  808054:	defffe04 	addi	sp,sp,-8
  808058:	008005c4 	movi	r2,23
  80805c:	dc000015 	stw	r16,0(sp)
  808060:	dfc00115 	stw	ra,4(sp)
  808064:	2021883a 	mov	r16,r4
  808068:	11000c16 	blt	r2,r4,80809c <_mprec_log10+0x48>
  80806c:	200490fa 	slli	r2,r4,3
  808070:	00c02074 	movhi	r3,129
  808074:	18f60004 	addi	r3,r3,-10240
  808078:	10c5883a 	add	r2,r2,r3
  80807c:	12400117 	ldw	r9,4(r2)
  808080:	12000017 	ldw	r8,0(r2)
  808084:	4807883a 	mov	r3,r9
  808088:	4005883a 	mov	r2,r8
  80808c:	dfc00117 	ldw	ra,4(sp)
  808090:	dc000017 	ldw	r16,0(sp)
  808094:	dec00204 	addi	sp,sp,8
  808098:	f800283a 	ret
  80809c:	0011883a 	mov	r8,zero
  8080a0:	024ffc34 	movhi	r9,16368
  8080a4:	0005883a 	mov	r2,zero
  8080a8:	00d00934 	movhi	r3,16420
  8080ac:	480b883a 	mov	r5,r9
  8080b0:	4009883a 	mov	r4,r8
  8080b4:	180f883a 	mov	r7,r3
  8080b8:	100d883a 	mov	r6,r2
  8080bc:	08012780 	call	801278 <__muldf3>
  8080c0:	843fffc4 	addi	r16,r16,-1
  8080c4:	1011883a 	mov	r8,r2
  8080c8:	1813883a 	mov	r9,r3
  8080cc:	803ff51e 	bne	r16,zero,8080a4 <_mprec_log10+0x50>
  8080d0:	4005883a 	mov	r2,r8
  8080d4:	4807883a 	mov	r3,r9
  8080d8:	dfc00117 	ldw	ra,4(sp)
  8080dc:	dc000017 	ldw	r16,0(sp)
  8080e0:	dec00204 	addi	sp,sp,8
  8080e4:	f800283a 	ret

008080e8 <__copybits>:
  8080e8:	297fffc4 	addi	r5,r5,-1
  8080ec:	30800417 	ldw	r2,16(r6)
  8080f0:	280bd17a 	srai	r5,r5,5
  8080f4:	31800504 	addi	r6,r6,20
  8080f8:	1085883a 	add	r2,r2,r2
  8080fc:	294b883a 	add	r5,r5,r5
  808100:	294b883a 	add	r5,r5,r5
  808104:	1085883a 	add	r2,r2,r2
  808108:	290b883a 	add	r5,r5,r4
  80810c:	3087883a 	add	r3,r6,r2
  808110:	29400104 	addi	r5,r5,4
  808114:	30c0052e 	bgeu	r6,r3,80812c <__copybits+0x44>
  808118:	30800017 	ldw	r2,0(r6)
  80811c:	31800104 	addi	r6,r6,4
  808120:	20800015 	stw	r2,0(r4)
  808124:	21000104 	addi	r4,r4,4
  808128:	30fffb36 	bltu	r6,r3,808118 <__copybits+0x30>
  80812c:	2140032e 	bgeu	r4,r5,80813c <__copybits+0x54>
  808130:	20000015 	stw	zero,0(r4)
  808134:	21000104 	addi	r4,r4,4
  808138:	217ffd36 	bltu	r4,r5,808130 <__copybits+0x48>
  80813c:	f800283a 	ret

00808140 <__any_on>:
  808140:	20800417 	ldw	r2,16(r4)
  808144:	2807d17a 	srai	r3,r5,5
  808148:	21000504 	addi	r4,r4,20
  80814c:	10c00d0e 	bge	r2,r3,808184 <__any_on+0x44>
  808150:	1085883a 	add	r2,r2,r2
  808154:	1085883a 	add	r2,r2,r2
  808158:	208d883a 	add	r6,r4,r2
  80815c:	2180182e 	bgeu	r4,r6,8081c0 <__any_on+0x80>
  808160:	30bfff17 	ldw	r2,-4(r6)
  808164:	30ffff04 	addi	r3,r6,-4
  808168:	1000041e 	bne	r2,zero,80817c <__any_on+0x3c>
  80816c:	20c0142e 	bgeu	r4,r3,8081c0 <__any_on+0x80>
  808170:	18ffff04 	addi	r3,r3,-4
  808174:	18800017 	ldw	r2,0(r3)
  808178:	103ffc26 	beq	r2,zero,80816c <__any_on+0x2c>
  80817c:	00800044 	movi	r2,1
  808180:	f800283a 	ret
  808184:	18800a0e 	bge	r3,r2,8081b0 <__any_on+0x70>
  808188:	294007cc 	andi	r5,r5,31
  80818c:	28000826 	beq	r5,zero,8081b0 <__any_on+0x70>
  808190:	18c5883a 	add	r2,r3,r3
  808194:	1085883a 	add	r2,r2,r2
  808198:	208d883a 	add	r6,r4,r2
  80819c:	30c00017 	ldw	r3,0(r6)
  8081a0:	1944d83a 	srl	r2,r3,r5
  8081a4:	1144983a 	sll	r2,r2,r5
  8081a8:	18bff41e 	bne	r3,r2,80817c <__any_on+0x3c>
  8081ac:	003feb06 	br	80815c <__any_on+0x1c>
  8081b0:	18c5883a 	add	r2,r3,r3
  8081b4:	1085883a 	add	r2,r2,r2
  8081b8:	208d883a 	add	r6,r4,r2
  8081bc:	003fe706 	br	80815c <__any_on+0x1c>
  8081c0:	0005883a 	mov	r2,zero
  8081c4:	f800283a 	ret

008081c8 <_Balloc>:
  8081c8:	20c01317 	ldw	r3,76(r4)
  8081cc:	defffb04 	addi	sp,sp,-20
  8081d0:	dcc00315 	stw	r19,12(sp)
  8081d4:	dc800215 	stw	r18,8(sp)
  8081d8:	dfc00415 	stw	ra,16(sp)
  8081dc:	2825883a 	mov	r18,r5
  8081e0:	dc400115 	stw	r17,4(sp)
  8081e4:	dc000015 	stw	r16,0(sp)
  8081e8:	2027883a 	mov	r19,r4
  8081ec:	01800404 	movi	r6,16
  8081f0:	01400104 	movi	r5,4
  8081f4:	18001726 	beq	r3,zero,808254 <_Balloc+0x8c>
  8081f8:	01400044 	movi	r5,1
  8081fc:	9485883a 	add	r2,r18,r18
  808200:	2ca2983a 	sll	r17,r5,r18
  808204:	1085883a 	add	r2,r2,r2
  808208:	10c7883a 	add	r3,r2,r3
  80820c:	1c000017 	ldw	r16,0(r3)
  808210:	8c4d883a 	add	r6,r17,r17
  808214:	318d883a 	add	r6,r6,r6
  808218:	9809883a 	mov	r4,r19
  80821c:	31800504 	addi	r6,r6,20
  808220:	80001226 	beq	r16,zero,80826c <_Balloc+0xa4>
  808224:	80800017 	ldw	r2,0(r16)
  808228:	18800015 	stw	r2,0(r3)
  80822c:	80000415 	stw	zero,16(r16)
  808230:	80000315 	stw	zero,12(r16)
  808234:	8005883a 	mov	r2,r16
  808238:	dfc00417 	ldw	ra,16(sp)
  80823c:	dcc00317 	ldw	r19,12(sp)
  808240:	dc800217 	ldw	r18,8(sp)
  808244:	dc400117 	ldw	r17,4(sp)
  808248:	dc000017 	ldw	r16,0(sp)
  80824c:	dec00504 	addi	sp,sp,20
  808250:	f800283a 	ret
  808254:	08095f80 	call	8095f8 <_calloc_r>
  808258:	1007883a 	mov	r3,r2
  80825c:	0021883a 	mov	r16,zero
  808260:	98801315 	stw	r2,76(r19)
  808264:	103fe41e 	bne	r2,zero,8081f8 <_Balloc+0x30>
  808268:	003ff206 	br	808234 <_Balloc+0x6c>
  80826c:	08095f80 	call	8095f8 <_calloc_r>
  808270:	103ff026 	beq	r2,zero,808234 <_Balloc+0x6c>
  808274:	1021883a 	mov	r16,r2
  808278:	14800115 	stw	r18,4(r2)
  80827c:	14400215 	stw	r17,8(r2)
  808280:	003fea06 	br	80822c <_Balloc+0x64>

00808284 <__d2b>:
  808284:	defff504 	addi	sp,sp,-44
  808288:	dcc00515 	stw	r19,20(sp)
  80828c:	04c00044 	movi	r19,1
  808290:	dc000215 	stw	r16,8(sp)
  808294:	2821883a 	mov	r16,r5
  808298:	980b883a 	mov	r5,r19
  80829c:	ddc00915 	stw	r23,36(sp)
  8082a0:	dd800815 	stw	r22,32(sp)
  8082a4:	dd400715 	stw	r21,28(sp)
  8082a8:	dd000615 	stw	r20,24(sp)
  8082ac:	dc800415 	stw	r18,16(sp)
  8082b0:	dc400315 	stw	r17,12(sp)
  8082b4:	dfc00a15 	stw	ra,40(sp)
  8082b8:	3023883a 	mov	r17,r6
  8082bc:	382d883a 	mov	r22,r7
  8082c0:	ddc00b17 	ldw	r23,44(sp)
  8082c4:	08081c80 	call	8081c8 <_Balloc>
  8082c8:	1025883a 	mov	r18,r2
  8082cc:	00a00034 	movhi	r2,32768
  8082d0:	10bfffc4 	addi	r2,r2,-1
  8082d4:	8888703a 	and	r4,r17,r2
  8082d8:	202ad53a 	srli	r21,r4,20
  8082dc:	00800434 	movhi	r2,16
  8082e0:	10bfffc4 	addi	r2,r2,-1
  8082e4:	8886703a 	and	r3,r17,r2
  8082e8:	a829003a 	cmpeq	r20,r21,zero
  8082ec:	800b883a 	mov	r5,r16
  8082f0:	d8c00115 	stw	r3,4(sp)
  8082f4:	94000504 	addi	r16,r18,20
  8082f8:	a000021e 	bne	r20,zero,808304 <__d2b+0x80>
  8082fc:	18c00434 	orhi	r3,r3,16
  808300:	d8c00115 	stw	r3,4(sp)
  808304:	28002726 	beq	r5,zero,8083a4 <__d2b+0x120>
  808308:	d809883a 	mov	r4,sp
  80830c:	d9400015 	stw	r5,0(sp)
  808310:	0807ce00 	call	807ce0 <__lo0bits>
  808314:	100d883a 	mov	r6,r2
  808318:	10003526 	beq	r2,zero,8083f0 <__d2b+0x16c>
  80831c:	d8c00117 	ldw	r3,4(sp)
  808320:	00800804 	movi	r2,32
  808324:	1185c83a 	sub	r2,r2,r6
  808328:	d9000017 	ldw	r4,0(sp)
  80832c:	1886983a 	sll	r3,r3,r2
  808330:	1906b03a 	or	r3,r3,r4
  808334:	90c00515 	stw	r3,20(r18)
  808338:	d8c00117 	ldw	r3,4(sp)
  80833c:	1986d83a 	srl	r3,r3,r6
  808340:	d8c00115 	stw	r3,4(sp)
  808344:	180b003a 	cmpeq	r5,r3,zero
  808348:	00800084 	movi	r2,2
  80834c:	114bc83a 	sub	r5,r2,r5
  808350:	80c00115 	stw	r3,4(r16)
  808354:	91400415 	stw	r5,16(r18)
  808358:	a0001a1e 	bne	r20,zero,8083c4 <__d2b+0x140>
  80835c:	3545883a 	add	r2,r6,r21
  808360:	10bef344 	addi	r2,r2,-1075
  808364:	00c00d44 	movi	r3,53
  808368:	b0800015 	stw	r2,0(r22)
  80836c:	1987c83a 	sub	r3,r3,r6
  808370:	b8c00015 	stw	r3,0(r23)
  808374:	9005883a 	mov	r2,r18
  808378:	dfc00a17 	ldw	ra,40(sp)
  80837c:	ddc00917 	ldw	r23,36(sp)
  808380:	dd800817 	ldw	r22,32(sp)
  808384:	dd400717 	ldw	r21,28(sp)
  808388:	dd000617 	ldw	r20,24(sp)
  80838c:	dcc00517 	ldw	r19,20(sp)
  808390:	dc800417 	ldw	r18,16(sp)
  808394:	dc400317 	ldw	r17,12(sp)
  808398:	dc000217 	ldw	r16,8(sp)
  80839c:	dec00b04 	addi	sp,sp,44
  8083a0:	f800283a 	ret
  8083a4:	d9000104 	addi	r4,sp,4
  8083a8:	0807ce00 	call	807ce0 <__lo0bits>
  8083ac:	11800804 	addi	r6,r2,32
  8083b0:	d8800117 	ldw	r2,4(sp)
  8083b4:	94c00415 	stw	r19,16(r18)
  8083b8:	980b883a 	mov	r5,r19
  8083bc:	90800515 	stw	r2,20(r18)
  8083c0:	a03fe626 	beq	r20,zero,80835c <__d2b+0xd8>
  8083c4:	2945883a 	add	r2,r5,r5
  8083c8:	1085883a 	add	r2,r2,r2
  8083cc:	1405883a 	add	r2,r2,r16
  8083d0:	113fff17 	ldw	r4,-4(r2)
  8083d4:	30fef384 	addi	r3,r6,-1074
  8083d8:	2820917a 	slli	r16,r5,5
  8083dc:	b0c00015 	stw	r3,0(r22)
  8083e0:	0807c700 	call	807c70 <__hi0bits>
  8083e4:	80a1c83a 	sub	r16,r16,r2
  8083e8:	bc000015 	stw	r16,0(r23)
  8083ec:	003fe106 	br	808374 <__d2b+0xf0>
  8083f0:	d8800017 	ldw	r2,0(sp)
  8083f4:	90800515 	stw	r2,20(r18)
  8083f8:	d8c00117 	ldw	r3,4(sp)
  8083fc:	003fd106 	br	808344 <__d2b+0xc0>

00808400 <__mdiff>:
  808400:	defffb04 	addi	sp,sp,-20
  808404:	dc000015 	stw	r16,0(sp)
  808408:	2821883a 	mov	r16,r5
  80840c:	dc800215 	stw	r18,8(sp)
  808410:	300b883a 	mov	r5,r6
  808414:	2025883a 	mov	r18,r4
  808418:	8009883a 	mov	r4,r16
  80841c:	dc400115 	stw	r17,4(sp)
  808420:	dfc00415 	stw	ra,16(sp)
  808424:	dcc00315 	stw	r19,12(sp)
  808428:	3023883a 	mov	r17,r6
  80842c:	0807da40 	call	807da4 <__mcmp>
  808430:	10004226 	beq	r2,zero,80853c <__mdiff+0x13c>
  808434:	10005016 	blt	r2,zero,808578 <__mdiff+0x178>
  808438:	0027883a 	mov	r19,zero
  80843c:	81400117 	ldw	r5,4(r16)
  808440:	9009883a 	mov	r4,r18
  808444:	08081c80 	call	8081c8 <_Balloc>
  808448:	1019883a 	mov	r12,r2
  80844c:	82800417 	ldw	r10,16(r16)
  808450:	88800417 	ldw	r2,16(r17)
  808454:	81800504 	addi	r6,r16,20
  808458:	5287883a 	add	r3,r10,r10
  80845c:	1085883a 	add	r2,r2,r2
  808460:	18c7883a 	add	r3,r3,r3
  808464:	1085883a 	add	r2,r2,r2
  808468:	8a000504 	addi	r8,r17,20
  80846c:	64c00315 	stw	r19,12(r12)
  808470:	30db883a 	add	r13,r6,r3
  808474:	4097883a 	add	r11,r8,r2
  808478:	61c00504 	addi	r7,r12,20
  80847c:	0013883a 	mov	r9,zero
  808480:	31000017 	ldw	r4,0(r6)
  808484:	41400017 	ldw	r5,0(r8)
  808488:	42000104 	addi	r8,r8,4
  80848c:	20bfffcc 	andi	r2,r4,65535
  808490:	28ffffcc 	andi	r3,r5,65535
  808494:	10c5c83a 	sub	r2,r2,r3
  808498:	1245883a 	add	r2,r2,r9
  80849c:	2008d43a 	srli	r4,r4,16
  8084a0:	280ad43a 	srli	r5,r5,16
  8084a4:	1007d43a 	srai	r3,r2,16
  8084a8:	3880000d 	sth	r2,0(r7)
  8084ac:	2149c83a 	sub	r4,r4,r5
  8084b0:	20c9883a 	add	r4,r4,r3
  8084b4:	3900008d 	sth	r4,2(r7)
  8084b8:	31800104 	addi	r6,r6,4
  8084bc:	39c00104 	addi	r7,r7,4
  8084c0:	2013d43a 	srai	r9,r4,16
  8084c4:	42ffee36 	bltu	r8,r11,808480 <__mdiff+0x80>
  8084c8:	33400c2e 	bgeu	r6,r13,8084fc <__mdiff+0xfc>
  8084cc:	30800017 	ldw	r2,0(r6)
  8084d0:	31800104 	addi	r6,r6,4
  8084d4:	10ffffcc 	andi	r3,r2,65535
  8084d8:	1a47883a 	add	r3,r3,r9
  8084dc:	1004d43a 	srli	r2,r2,16
  8084e0:	1809d43a 	srai	r4,r3,16
  8084e4:	38c0000d 	sth	r3,0(r7)
  8084e8:	1105883a 	add	r2,r2,r4
  8084ec:	3880008d 	sth	r2,2(r7)
  8084f0:	1013d43a 	srai	r9,r2,16
  8084f4:	39c00104 	addi	r7,r7,4
  8084f8:	337ff436 	bltu	r6,r13,8084cc <__mdiff+0xcc>
  8084fc:	38bfff17 	ldw	r2,-4(r7)
  808500:	38ffff04 	addi	r3,r7,-4
  808504:	1000041e 	bne	r2,zero,808518 <__mdiff+0x118>
  808508:	18ffff04 	addi	r3,r3,-4
  80850c:	18800017 	ldw	r2,0(r3)
  808510:	52bfffc4 	addi	r10,r10,-1
  808514:	103ffc26 	beq	r2,zero,808508 <__mdiff+0x108>
  808518:	6005883a 	mov	r2,r12
  80851c:	62800415 	stw	r10,16(r12)
  808520:	dfc00417 	ldw	ra,16(sp)
  808524:	dcc00317 	ldw	r19,12(sp)
  808528:	dc800217 	ldw	r18,8(sp)
  80852c:	dc400117 	ldw	r17,4(sp)
  808530:	dc000017 	ldw	r16,0(sp)
  808534:	dec00504 	addi	sp,sp,20
  808538:	f800283a 	ret
  80853c:	9009883a 	mov	r4,r18
  808540:	000b883a 	mov	r5,zero
  808544:	08081c80 	call	8081c8 <_Balloc>
  808548:	1019883a 	mov	r12,r2
  80854c:	00800044 	movi	r2,1
  808550:	60800415 	stw	r2,16(r12)
  808554:	6005883a 	mov	r2,r12
  808558:	60000515 	stw	zero,20(r12)
  80855c:	dfc00417 	ldw	ra,16(sp)
  808560:	dcc00317 	ldw	r19,12(sp)
  808564:	dc800217 	ldw	r18,8(sp)
  808568:	dc400117 	ldw	r17,4(sp)
  80856c:	dc000017 	ldw	r16,0(sp)
  808570:	dec00504 	addi	sp,sp,20
  808574:	f800283a 	ret
  808578:	880d883a 	mov	r6,r17
  80857c:	04c00044 	movi	r19,1
  808580:	8023883a 	mov	r17,r16
  808584:	3021883a 	mov	r16,r6
  808588:	003fac06 	br	80843c <__mdiff+0x3c>

0080858c <__lshift>:
  80858c:	defff904 	addi	sp,sp,-28
  808590:	28800417 	ldw	r2,16(r5)
  808594:	dc000015 	stw	r16,0(sp)
  808598:	3021d17a 	srai	r16,r6,5
  80859c:	28c00217 	ldw	r3,8(r5)
  8085a0:	10800044 	addi	r2,r2,1
  8085a4:	dc400115 	stw	r17,4(sp)
  8085a8:	80a3883a 	add	r17,r16,r2
  8085ac:	dd400515 	stw	r21,20(sp)
  8085b0:	dd000415 	stw	r20,16(sp)
  8085b4:	dc800215 	stw	r18,8(sp)
  8085b8:	dfc00615 	stw	ra,24(sp)
  8085bc:	2825883a 	mov	r18,r5
  8085c0:	dcc00315 	stw	r19,12(sp)
  8085c4:	3029883a 	mov	r20,r6
  8085c8:	202b883a 	mov	r21,r4
  8085cc:	29400117 	ldw	r5,4(r5)
  8085d0:	1c40030e 	bge	r3,r17,8085e0 <__lshift+0x54>
  8085d4:	18c7883a 	add	r3,r3,r3
  8085d8:	29400044 	addi	r5,r5,1
  8085dc:	1c7ffd16 	blt	r3,r17,8085d4 <__lshift+0x48>
  8085e0:	a809883a 	mov	r4,r21
  8085e4:	08081c80 	call	8081c8 <_Balloc>
  8085e8:	1027883a 	mov	r19,r2
  8085ec:	11400504 	addi	r5,r2,20
  8085f0:	0400090e 	bge	zero,r16,808618 <__lshift+0x8c>
  8085f4:	2805883a 	mov	r2,r5
  8085f8:	0007883a 	mov	r3,zero
  8085fc:	18c00044 	addi	r3,r3,1
  808600:	10000015 	stw	zero,0(r2)
  808604:	10800104 	addi	r2,r2,4
  808608:	80fffc1e 	bne	r16,r3,8085fc <__lshift+0x70>
  80860c:	8405883a 	add	r2,r16,r16
  808610:	1085883a 	add	r2,r2,r2
  808614:	288b883a 	add	r5,r5,r2
  808618:	90800417 	ldw	r2,16(r18)
  80861c:	91000504 	addi	r4,r18,20
  808620:	a18007cc 	andi	r6,r20,31
  808624:	1085883a 	add	r2,r2,r2
  808628:	1085883a 	add	r2,r2,r2
  80862c:	208f883a 	add	r7,r4,r2
  808630:	30001e26 	beq	r6,zero,8086ac <__lshift+0x120>
  808634:	00800804 	movi	r2,32
  808638:	1191c83a 	sub	r8,r2,r6
  80863c:	0007883a 	mov	r3,zero
  808640:	20800017 	ldw	r2,0(r4)
  808644:	1184983a 	sll	r2,r2,r6
  808648:	1884b03a 	or	r2,r3,r2
  80864c:	28800015 	stw	r2,0(r5)
  808650:	20c00017 	ldw	r3,0(r4)
  808654:	21000104 	addi	r4,r4,4
  808658:	29400104 	addi	r5,r5,4
  80865c:	1a06d83a 	srl	r3,r3,r8
  808660:	21fff736 	bltu	r4,r7,808640 <__lshift+0xb4>
  808664:	28c00015 	stw	r3,0(r5)
  808668:	18000126 	beq	r3,zero,808670 <__lshift+0xe4>
  80866c:	8c400044 	addi	r17,r17,1
  808670:	88bfffc4 	addi	r2,r17,-1
  808674:	98800415 	stw	r2,16(r19)
  808678:	a809883a 	mov	r4,r21
  80867c:	900b883a 	mov	r5,r18
  808680:	0807c480 	call	807c48 <_Bfree>
  808684:	9805883a 	mov	r2,r19
  808688:	dfc00617 	ldw	ra,24(sp)
  80868c:	dd400517 	ldw	r21,20(sp)
  808690:	dd000417 	ldw	r20,16(sp)
  808694:	dcc00317 	ldw	r19,12(sp)
  808698:	dc800217 	ldw	r18,8(sp)
  80869c:	dc400117 	ldw	r17,4(sp)
  8086a0:	dc000017 	ldw	r16,0(sp)
  8086a4:	dec00704 	addi	sp,sp,28
  8086a8:	f800283a 	ret
  8086ac:	20800017 	ldw	r2,0(r4)
  8086b0:	21000104 	addi	r4,r4,4
  8086b4:	28800015 	stw	r2,0(r5)
  8086b8:	29400104 	addi	r5,r5,4
  8086bc:	21ffec2e 	bgeu	r4,r7,808670 <__lshift+0xe4>
  8086c0:	20800017 	ldw	r2,0(r4)
  8086c4:	21000104 	addi	r4,r4,4
  8086c8:	28800015 	stw	r2,0(r5)
  8086cc:	29400104 	addi	r5,r5,4
  8086d0:	21fff636 	bltu	r4,r7,8086ac <__lshift+0x120>
  8086d4:	003fe606 	br	808670 <__lshift+0xe4>

008086d8 <__multiply>:
  8086d8:	defff004 	addi	sp,sp,-64
  8086dc:	dc800815 	stw	r18,32(sp)
  8086e0:	dc400715 	stw	r17,28(sp)
  8086e4:	2c800417 	ldw	r18,16(r5)
  8086e8:	34400417 	ldw	r17,16(r6)
  8086ec:	dcc00915 	stw	r19,36(sp)
  8086f0:	dc000615 	stw	r16,24(sp)
  8086f4:	dfc00f15 	stw	ra,60(sp)
  8086f8:	df000e15 	stw	fp,56(sp)
  8086fc:	ddc00d15 	stw	r23,52(sp)
  808700:	dd800c15 	stw	r22,48(sp)
  808704:	dd400b15 	stw	r21,44(sp)
  808708:	dd000a15 	stw	r20,40(sp)
  80870c:	2821883a 	mov	r16,r5
  808710:	3027883a 	mov	r19,r6
  808714:	9440040e 	bge	r18,r17,808728 <__multiply+0x50>
  808718:	8825883a 	mov	r18,r17
  80871c:	2c400417 	ldw	r17,16(r5)
  808720:	2827883a 	mov	r19,r5
  808724:	3021883a 	mov	r16,r6
  808728:	80800217 	ldw	r2,8(r16)
  80872c:	9447883a 	add	r3,r18,r17
  808730:	d8c00415 	stw	r3,16(sp)
  808734:	81400117 	ldw	r5,4(r16)
  808738:	10c0010e 	bge	r2,r3,808740 <__multiply+0x68>
  80873c:	29400044 	addi	r5,r5,1
  808740:	08081c80 	call	8081c8 <_Balloc>
  808744:	d8800515 	stw	r2,20(sp)
  808748:	d9000417 	ldw	r4,16(sp)
  80874c:	d8c00517 	ldw	r3,20(sp)
  808750:	2105883a 	add	r2,r4,r4
  808754:	1085883a 	add	r2,r2,r2
  808758:	19000504 	addi	r4,r3,20
  80875c:	2085883a 	add	r2,r4,r2
  808760:	d8800315 	stw	r2,12(sp)
  808764:	2080052e 	bgeu	r4,r2,80877c <__multiply+0xa4>
  808768:	2005883a 	mov	r2,r4
  80876c:	d8c00317 	ldw	r3,12(sp)
  808770:	10000015 	stw	zero,0(r2)
  808774:	10800104 	addi	r2,r2,4
  808778:	10fffc36 	bltu	r2,r3,80876c <__multiply+0x94>
  80877c:	8c45883a 	add	r2,r17,r17
  808780:	9487883a 	add	r3,r18,r18
  808784:	9dc00504 	addi	r23,r19,20
  808788:	1085883a 	add	r2,r2,r2
  80878c:	84000504 	addi	r16,r16,20
  808790:	18c7883a 	add	r3,r3,r3
  808794:	b885883a 	add	r2,r23,r2
  808798:	dc000015 	stw	r16,0(sp)
  80879c:	d8800215 	stw	r2,8(sp)
  8087a0:	80f9883a 	add	fp,r16,r3
  8087a4:	b880432e 	bgeu	r23,r2,8088b4 <__multiply+0x1dc>
  8087a8:	d9000115 	stw	r4,4(sp)
  8087ac:	b9000017 	ldw	r4,0(r23)
  8087b0:	253fffcc 	andi	r20,r4,65535
  8087b4:	a0001a26 	beq	r20,zero,808820 <__multiply+0x148>
  8087b8:	dcc00017 	ldw	r19,0(sp)
  8087bc:	dc800117 	ldw	r18,4(sp)
  8087c0:	002b883a 	mov	r21,zero
  8087c4:	9c400017 	ldw	r17,0(r19)
  8087c8:	94000017 	ldw	r16,0(r18)
  8087cc:	a009883a 	mov	r4,r20
  8087d0:	897fffcc 	andi	r5,r17,65535
  8087d4:	0801be80 	call	801be8 <__mulsi3>
  8087d8:	880ad43a 	srli	r5,r17,16
  8087dc:	80ffffcc 	andi	r3,r16,65535
  8087e0:	a8c7883a 	add	r3,r21,r3
  8087e4:	a009883a 	mov	r4,r20
  8087e8:	10e3883a 	add	r17,r2,r3
  8087ec:	8020d43a 	srli	r16,r16,16
  8087f0:	0801be80 	call	801be8 <__mulsi3>
  8087f4:	8806d43a 	srli	r3,r17,16
  8087f8:	1405883a 	add	r2,r2,r16
  8087fc:	9cc00104 	addi	r19,r19,4
  808800:	1887883a 	add	r3,r3,r2
  808804:	90c0008d 	sth	r3,2(r18)
  808808:	9440000d 	sth	r17,0(r18)
  80880c:	182ad43a 	srli	r21,r3,16
  808810:	94800104 	addi	r18,r18,4
  808814:	9f3feb36 	bltu	r19,fp,8087c4 <__multiply+0xec>
  808818:	95400015 	stw	r21,0(r18)
  80881c:	b9000017 	ldw	r4,0(r23)
  808820:	202ad43a 	srli	r21,r4,16
  808824:	a8001c26 	beq	r21,zero,808898 <__multiply+0x1c0>
  808828:	d9000117 	ldw	r4,4(sp)
  80882c:	dd000017 	ldw	r20,0(sp)
  808830:	002d883a 	mov	r22,zero
  808834:	24c00017 	ldw	r19,0(r4)
  808838:	2025883a 	mov	r18,r4
  80883c:	9823883a 	mov	r17,r19
  808840:	a4000017 	ldw	r16,0(r20)
  808844:	a809883a 	mov	r4,r21
  808848:	a5000104 	addi	r20,r20,4
  80884c:	817fffcc 	andi	r5,r16,65535
  808850:	0801be80 	call	801be8 <__mulsi3>
  808854:	8806d43a 	srli	r3,r17,16
  808858:	800ad43a 	srli	r5,r16,16
  80885c:	94c0000d 	sth	r19,0(r18)
  808860:	b0c7883a 	add	r3,r22,r3
  808864:	10e1883a 	add	r16,r2,r3
  808868:	9400008d 	sth	r16,2(r18)
  80886c:	a809883a 	mov	r4,r21
  808870:	94800104 	addi	r18,r18,4
  808874:	0801be80 	call	801be8 <__mulsi3>
  808878:	94400017 	ldw	r17,0(r18)
  80887c:	8020d43a 	srli	r16,r16,16
  808880:	88ffffcc 	andi	r3,r17,65535
  808884:	10c5883a 	add	r2,r2,r3
  808888:	80a7883a 	add	r19,r16,r2
  80888c:	982cd43a 	srli	r22,r19,16
  808890:	a73feb36 	bltu	r20,fp,808840 <__multiply+0x168>
  808894:	94c00015 	stw	r19,0(r18)
  808898:	d8800217 	ldw	r2,8(sp)
  80889c:	bdc00104 	addi	r23,r23,4
  8088a0:	b880042e 	bgeu	r23,r2,8088b4 <__multiply+0x1dc>
  8088a4:	d8c00117 	ldw	r3,4(sp)
  8088a8:	18c00104 	addi	r3,r3,4
  8088ac:	d8c00115 	stw	r3,4(sp)
  8088b0:	003fbe06 	br	8087ac <__multiply+0xd4>
  8088b4:	d9000417 	ldw	r4,16(sp)
  8088b8:	01000c0e 	bge	zero,r4,8088ec <__multiply+0x214>
  8088bc:	d8c00317 	ldw	r3,12(sp)
  8088c0:	18bfff17 	ldw	r2,-4(r3)
  8088c4:	18ffff04 	addi	r3,r3,-4
  8088c8:	10000326 	beq	r2,zero,8088d8 <__multiply+0x200>
  8088cc:	00000706 	br	8088ec <__multiply+0x214>
  8088d0:	18800017 	ldw	r2,0(r3)
  8088d4:	1000051e 	bne	r2,zero,8088ec <__multiply+0x214>
  8088d8:	d9000417 	ldw	r4,16(sp)
  8088dc:	18ffff04 	addi	r3,r3,-4
  8088e0:	213fffc4 	addi	r4,r4,-1
  8088e4:	d9000415 	stw	r4,16(sp)
  8088e8:	203ff91e 	bne	r4,zero,8088d0 <__multiply+0x1f8>
  8088ec:	d8800417 	ldw	r2,16(sp)
  8088f0:	d8c00517 	ldw	r3,20(sp)
  8088f4:	18800415 	stw	r2,16(r3)
  8088f8:	1805883a 	mov	r2,r3
  8088fc:	dfc00f17 	ldw	ra,60(sp)
  808900:	df000e17 	ldw	fp,56(sp)
  808904:	ddc00d17 	ldw	r23,52(sp)
  808908:	dd800c17 	ldw	r22,48(sp)
  80890c:	dd400b17 	ldw	r21,44(sp)
  808910:	dd000a17 	ldw	r20,40(sp)
  808914:	dcc00917 	ldw	r19,36(sp)
  808918:	dc800817 	ldw	r18,32(sp)
  80891c:	dc400717 	ldw	r17,28(sp)
  808920:	dc000617 	ldw	r16,24(sp)
  808924:	dec01004 	addi	sp,sp,64
  808928:	f800283a 	ret

0080892c <__i2b>:
  80892c:	defffd04 	addi	sp,sp,-12
  808930:	dc000015 	stw	r16,0(sp)
  808934:	04000044 	movi	r16,1
  808938:	dc800115 	stw	r18,4(sp)
  80893c:	2825883a 	mov	r18,r5
  808940:	800b883a 	mov	r5,r16
  808944:	dfc00215 	stw	ra,8(sp)
  808948:	08081c80 	call	8081c8 <_Balloc>
  80894c:	14000415 	stw	r16,16(r2)
  808950:	14800515 	stw	r18,20(r2)
  808954:	dfc00217 	ldw	ra,8(sp)
  808958:	dc800117 	ldw	r18,4(sp)
  80895c:	dc000017 	ldw	r16,0(sp)
  808960:	dec00304 	addi	sp,sp,12
  808964:	f800283a 	ret

00808968 <__multadd>:
  808968:	defff604 	addi	sp,sp,-40
  80896c:	dd800615 	stw	r22,24(sp)
  808970:	2d800417 	ldw	r22,16(r5)
  808974:	df000815 	stw	fp,32(sp)
  808978:	ddc00715 	stw	r23,28(sp)
  80897c:	dd400515 	stw	r21,20(sp)
  808980:	dd000415 	stw	r20,16(sp)
  808984:	dcc00315 	stw	r19,12(sp)
  808988:	dc800215 	stw	r18,8(sp)
  80898c:	dfc00915 	stw	ra,36(sp)
  808990:	dc400115 	stw	r17,4(sp)
  808994:	dc000015 	stw	r16,0(sp)
  808998:	282f883a 	mov	r23,r5
  80899c:	2039883a 	mov	fp,r4
  8089a0:	302b883a 	mov	r21,r6
  8089a4:	3829883a 	mov	r20,r7
  8089a8:	2c800504 	addi	r18,r5,20
  8089ac:	0027883a 	mov	r19,zero
  8089b0:	94400017 	ldw	r17,0(r18)
  8089b4:	a80b883a 	mov	r5,r21
  8089b8:	9cc00044 	addi	r19,r19,1
  8089bc:	893fffcc 	andi	r4,r17,65535
  8089c0:	0801be80 	call	801be8 <__mulsi3>
  8089c4:	8808d43a 	srli	r4,r17,16
  8089c8:	1521883a 	add	r16,r2,r20
  8089cc:	a80b883a 	mov	r5,r21
  8089d0:	0801be80 	call	801be8 <__mulsi3>
  8089d4:	8008d43a 	srli	r4,r16,16
  8089d8:	843fffcc 	andi	r16,r16,65535
  8089dc:	1105883a 	add	r2,r2,r4
  8089e0:	1006943a 	slli	r3,r2,16
  8089e4:	1028d43a 	srli	r20,r2,16
  8089e8:	1c07883a 	add	r3,r3,r16
  8089ec:	90c00015 	stw	r3,0(r18)
  8089f0:	94800104 	addi	r18,r18,4
  8089f4:	9dbfee16 	blt	r19,r22,8089b0 <__multadd+0x48>
  8089f8:	a0000826 	beq	r20,zero,808a1c <__multadd+0xb4>
  8089fc:	b8800217 	ldw	r2,8(r23)
  808a00:	b080130e 	bge	r22,r2,808a50 <__multadd+0xe8>
  808a04:	b585883a 	add	r2,r22,r22
  808a08:	1085883a 	add	r2,r2,r2
  808a0c:	15c5883a 	add	r2,r2,r23
  808a10:	b0c00044 	addi	r3,r22,1
  808a14:	15000515 	stw	r20,20(r2)
  808a18:	b8c00415 	stw	r3,16(r23)
  808a1c:	b805883a 	mov	r2,r23
  808a20:	dfc00917 	ldw	ra,36(sp)
  808a24:	df000817 	ldw	fp,32(sp)
  808a28:	ddc00717 	ldw	r23,28(sp)
  808a2c:	dd800617 	ldw	r22,24(sp)
  808a30:	dd400517 	ldw	r21,20(sp)
  808a34:	dd000417 	ldw	r20,16(sp)
  808a38:	dcc00317 	ldw	r19,12(sp)
  808a3c:	dc800217 	ldw	r18,8(sp)
  808a40:	dc400117 	ldw	r17,4(sp)
  808a44:	dc000017 	ldw	r16,0(sp)
  808a48:	dec00a04 	addi	sp,sp,40
  808a4c:	f800283a 	ret
  808a50:	b9400117 	ldw	r5,4(r23)
  808a54:	e009883a 	mov	r4,fp
  808a58:	29400044 	addi	r5,r5,1
  808a5c:	08081c80 	call	8081c8 <_Balloc>
  808a60:	b9800417 	ldw	r6,16(r23)
  808a64:	b9400304 	addi	r5,r23,12
  808a68:	11000304 	addi	r4,r2,12
  808a6c:	318d883a 	add	r6,r6,r6
  808a70:	318d883a 	add	r6,r6,r6
  808a74:	31800204 	addi	r6,r6,8
  808a78:	1023883a 	mov	r17,r2
  808a7c:	0807a300 	call	807a30 <memcpy>
  808a80:	b80b883a 	mov	r5,r23
  808a84:	e009883a 	mov	r4,fp
  808a88:	0807c480 	call	807c48 <_Bfree>
  808a8c:	882f883a 	mov	r23,r17
  808a90:	003fdc06 	br	808a04 <__multadd+0x9c>

00808a94 <__pow5mult>:
  808a94:	defffa04 	addi	sp,sp,-24
  808a98:	308000cc 	andi	r2,r6,3
  808a9c:	dd000415 	stw	r20,16(sp)
  808aa0:	dcc00315 	stw	r19,12(sp)
  808aa4:	dc000015 	stw	r16,0(sp)
  808aa8:	dfc00515 	stw	ra,20(sp)
  808aac:	dc800215 	stw	r18,8(sp)
  808ab0:	dc400115 	stw	r17,4(sp)
  808ab4:	3021883a 	mov	r16,r6
  808ab8:	2027883a 	mov	r19,r4
  808abc:	2829883a 	mov	r20,r5
  808ac0:	10002b1e 	bne	r2,zero,808b70 <__pow5mult+0xdc>
  808ac4:	8025d0ba 	srai	r18,r16,2
  808ac8:	90001b26 	beq	r18,zero,808b38 <__pow5mult+0xa4>
  808acc:	9c001217 	ldw	r16,72(r19)
  808ad0:	8000081e 	bne	r16,zero,808af4 <__pow5mult+0x60>
  808ad4:	00003006 	br	808b98 <__pow5mult+0x104>
  808ad8:	800b883a 	mov	r5,r16
  808adc:	800d883a 	mov	r6,r16
  808ae0:	9809883a 	mov	r4,r19
  808ae4:	90001426 	beq	r18,zero,808b38 <__pow5mult+0xa4>
  808ae8:	80800017 	ldw	r2,0(r16)
  808aec:	10001b26 	beq	r2,zero,808b5c <__pow5mult+0xc8>
  808af0:	1021883a 	mov	r16,r2
  808af4:	9080004c 	andi	r2,r18,1
  808af8:	1005003a 	cmpeq	r2,r2,zero
  808afc:	9025d07a 	srai	r18,r18,1
  808b00:	800d883a 	mov	r6,r16
  808b04:	9809883a 	mov	r4,r19
  808b08:	a00b883a 	mov	r5,r20
  808b0c:	103ff21e 	bne	r2,zero,808ad8 <__pow5mult+0x44>
  808b10:	08086d80 	call	8086d8 <__multiply>
  808b14:	a00b883a 	mov	r5,r20
  808b18:	9809883a 	mov	r4,r19
  808b1c:	1023883a 	mov	r17,r2
  808b20:	0807c480 	call	807c48 <_Bfree>
  808b24:	8829883a 	mov	r20,r17
  808b28:	800b883a 	mov	r5,r16
  808b2c:	800d883a 	mov	r6,r16
  808b30:	9809883a 	mov	r4,r19
  808b34:	903fec1e 	bne	r18,zero,808ae8 <__pow5mult+0x54>
  808b38:	a005883a 	mov	r2,r20
  808b3c:	dfc00517 	ldw	ra,20(sp)
  808b40:	dd000417 	ldw	r20,16(sp)
  808b44:	dcc00317 	ldw	r19,12(sp)
  808b48:	dc800217 	ldw	r18,8(sp)
  808b4c:	dc400117 	ldw	r17,4(sp)
  808b50:	dc000017 	ldw	r16,0(sp)
  808b54:	dec00604 	addi	sp,sp,24
  808b58:	f800283a 	ret
  808b5c:	08086d80 	call	8086d8 <__multiply>
  808b60:	80800015 	stw	r2,0(r16)
  808b64:	1021883a 	mov	r16,r2
  808b68:	10000015 	stw	zero,0(r2)
  808b6c:	003fe106 	br	808af4 <__pow5mult+0x60>
  808b70:	1085883a 	add	r2,r2,r2
  808b74:	00c02074 	movhi	r3,129
  808b78:	18f64604 	addi	r3,r3,-9960
  808b7c:	1085883a 	add	r2,r2,r2
  808b80:	10c5883a 	add	r2,r2,r3
  808b84:	11bfff17 	ldw	r6,-4(r2)
  808b88:	000f883a 	mov	r7,zero
  808b8c:	08089680 	call	808968 <__multadd>
  808b90:	1029883a 	mov	r20,r2
  808b94:	003fcb06 	br	808ac4 <__pow5mult+0x30>
  808b98:	9809883a 	mov	r4,r19
  808b9c:	01409c44 	movi	r5,625
  808ba0:	080892c0 	call	80892c <__i2b>
  808ba4:	98801215 	stw	r2,72(r19)
  808ba8:	1021883a 	mov	r16,r2
  808bac:	10000015 	stw	zero,0(r2)
  808bb0:	003fd006 	br	808af4 <__pow5mult+0x60>

00808bb4 <__s2b>:
  808bb4:	defff904 	addi	sp,sp,-28
  808bb8:	dcc00315 	stw	r19,12(sp)
  808bbc:	dc800215 	stw	r18,8(sp)
  808bc0:	2827883a 	mov	r19,r5
  808bc4:	2025883a 	mov	r18,r4
  808bc8:	01400244 	movi	r5,9
  808bcc:	39000204 	addi	r4,r7,8
  808bd0:	dd000415 	stw	r20,16(sp)
  808bd4:	dc400115 	stw	r17,4(sp)
  808bd8:	dfc00615 	stw	ra,24(sp)
  808bdc:	dd400515 	stw	r21,20(sp)
  808be0:	dc000015 	stw	r16,0(sp)
  808be4:	3829883a 	mov	r20,r7
  808be8:	3023883a 	mov	r17,r6
  808bec:	0801b180 	call	801b18 <__divsi3>
  808bf0:	00c00044 	movi	r3,1
  808bf4:	1880350e 	bge	r3,r2,808ccc <__s2b+0x118>
  808bf8:	000b883a 	mov	r5,zero
  808bfc:	18c7883a 	add	r3,r3,r3
  808c00:	29400044 	addi	r5,r5,1
  808c04:	18bffd16 	blt	r3,r2,808bfc <__s2b+0x48>
  808c08:	9009883a 	mov	r4,r18
  808c0c:	08081c80 	call	8081c8 <_Balloc>
  808c10:	1011883a 	mov	r8,r2
  808c14:	d8800717 	ldw	r2,28(sp)
  808c18:	00c00044 	movi	r3,1
  808c1c:	01800244 	movi	r6,9
  808c20:	40800515 	stw	r2,20(r8)
  808c24:	40c00415 	stw	r3,16(r8)
  808c28:	3440260e 	bge	r6,r17,808cc4 <__s2b+0x110>
  808c2c:	3021883a 	mov	r16,r6
  808c30:	99ab883a 	add	r21,r19,r6
  808c34:	9c05883a 	add	r2,r19,r16
  808c38:	11c00007 	ldb	r7,0(r2)
  808c3c:	400b883a 	mov	r5,r8
  808c40:	9009883a 	mov	r4,r18
  808c44:	39fff404 	addi	r7,r7,-48
  808c48:	01800284 	movi	r6,10
  808c4c:	08089680 	call	808968 <__multadd>
  808c50:	84000044 	addi	r16,r16,1
  808c54:	1011883a 	mov	r8,r2
  808c58:	8c3ff61e 	bne	r17,r16,808c34 <__s2b+0x80>
  808c5c:	ac45883a 	add	r2,r21,r17
  808c60:	117ffe04 	addi	r5,r2,-8
  808c64:	880d883a 	mov	r6,r17
  808c68:	35000c0e 	bge	r6,r20,808c9c <__s2b+0xe8>
  808c6c:	a185c83a 	sub	r2,r20,r6
  808c70:	2821883a 	mov	r16,r5
  808c74:	28a3883a 	add	r17,r5,r2
  808c78:	81c00007 	ldb	r7,0(r16)
  808c7c:	400b883a 	mov	r5,r8
  808c80:	9009883a 	mov	r4,r18
  808c84:	39fff404 	addi	r7,r7,-48
  808c88:	01800284 	movi	r6,10
  808c8c:	08089680 	call	808968 <__multadd>
  808c90:	84000044 	addi	r16,r16,1
  808c94:	1011883a 	mov	r8,r2
  808c98:	847ff71e 	bne	r16,r17,808c78 <__s2b+0xc4>
  808c9c:	4005883a 	mov	r2,r8
  808ca0:	dfc00617 	ldw	ra,24(sp)
  808ca4:	dd400517 	ldw	r21,20(sp)
  808ca8:	dd000417 	ldw	r20,16(sp)
  808cac:	dcc00317 	ldw	r19,12(sp)
  808cb0:	dc800217 	ldw	r18,8(sp)
  808cb4:	dc400117 	ldw	r17,4(sp)
  808cb8:	dc000017 	ldw	r16,0(sp)
  808cbc:	dec00704 	addi	sp,sp,28
  808cc0:	f800283a 	ret
  808cc4:	99400284 	addi	r5,r19,10
  808cc8:	003fe706 	br	808c68 <__s2b+0xb4>
  808ccc:	000b883a 	mov	r5,zero
  808cd0:	003fcd06 	br	808c08 <__s2b+0x54>

00808cd4 <_realloc_r>:
  808cd4:	defff404 	addi	sp,sp,-48
  808cd8:	dd800815 	stw	r22,32(sp)
  808cdc:	dc800415 	stw	r18,16(sp)
  808ce0:	dc400315 	stw	r17,12(sp)
  808ce4:	dfc00b15 	stw	ra,44(sp)
  808ce8:	df000a15 	stw	fp,40(sp)
  808cec:	ddc00915 	stw	r23,36(sp)
  808cf0:	dd400715 	stw	r21,28(sp)
  808cf4:	dd000615 	stw	r20,24(sp)
  808cf8:	dcc00515 	stw	r19,20(sp)
  808cfc:	dc000215 	stw	r16,8(sp)
  808d00:	2825883a 	mov	r18,r5
  808d04:	3023883a 	mov	r17,r6
  808d08:	202d883a 	mov	r22,r4
  808d0c:	2800c926 	beq	r5,zero,809034 <_realloc_r+0x360>
  808d10:	080b6340 	call	80b634 <__malloc_lock>
  808d14:	943ffe04 	addi	r16,r18,-8
  808d18:	88c002c4 	addi	r3,r17,11
  808d1c:	00800584 	movi	r2,22
  808d20:	82000117 	ldw	r8,4(r16)
  808d24:	10c01b2e 	bgeu	r2,r3,808d94 <_realloc_r+0xc0>
  808d28:	00bffe04 	movi	r2,-8
  808d2c:	188e703a 	and	r7,r3,r2
  808d30:	3839883a 	mov	fp,r7
  808d34:	38001a16 	blt	r7,zero,808da0 <_realloc_r+0xcc>
  808d38:	e4401936 	bltu	fp,r17,808da0 <_realloc_r+0xcc>
  808d3c:	013fff04 	movi	r4,-4
  808d40:	4126703a 	and	r19,r8,r4
  808d44:	99c02616 	blt	r19,r7,808de0 <_realloc_r+0x10c>
  808d48:	802b883a 	mov	r21,r16
  808d4c:	9829883a 	mov	r20,r19
  808d50:	84000204 	addi	r16,r16,8
  808d54:	a80f883a 	mov	r7,r21
  808d58:	a70dc83a 	sub	r6,r20,fp
  808d5c:	008003c4 	movi	r2,15
  808d60:	1180c136 	bltu	r2,r6,809068 <_realloc_r+0x394>
  808d64:	38800117 	ldw	r2,4(r7)
  808d68:	a549883a 	add	r4,r20,r21
  808d6c:	1080004c 	andi	r2,r2,1
  808d70:	a084b03a 	or	r2,r20,r2
  808d74:	38800115 	stw	r2,4(r7)
  808d78:	20c00117 	ldw	r3,4(r4)
  808d7c:	18c00054 	ori	r3,r3,1
  808d80:	20c00115 	stw	r3,4(r4)
  808d84:	b009883a 	mov	r4,r22
  808d88:	080b6540 	call	80b654 <__malloc_unlock>
  808d8c:	8023883a 	mov	r17,r16
  808d90:	00000606 	br	808dac <_realloc_r+0xd8>
  808d94:	01c00404 	movi	r7,16
  808d98:	3839883a 	mov	fp,r7
  808d9c:	e47fe72e 	bgeu	fp,r17,808d3c <_realloc_r+0x68>
  808da0:	00800304 	movi	r2,12
  808da4:	0023883a 	mov	r17,zero
  808da8:	b0800015 	stw	r2,0(r22)
  808dac:	8805883a 	mov	r2,r17
  808db0:	dfc00b17 	ldw	ra,44(sp)
  808db4:	df000a17 	ldw	fp,40(sp)
  808db8:	ddc00917 	ldw	r23,36(sp)
  808dbc:	dd800817 	ldw	r22,32(sp)
  808dc0:	dd400717 	ldw	r21,28(sp)
  808dc4:	dd000617 	ldw	r20,24(sp)
  808dc8:	dcc00517 	ldw	r19,20(sp)
  808dcc:	dc800417 	ldw	r18,16(sp)
  808dd0:	dc400317 	ldw	r17,12(sp)
  808dd4:	dc000217 	ldw	r16,8(sp)
  808dd8:	dec00c04 	addi	sp,sp,48
  808ddc:	f800283a 	ret
  808de0:	00802074 	movhi	r2,129
  808de4:	10b75904 	addi	r2,r2,-8860
  808de8:	12400217 	ldw	r9,8(r2)
  808dec:	84cd883a 	add	r6,r16,r19
  808df0:	802b883a 	mov	r21,r16
  808df4:	3240b926 	beq	r6,r9,8090dc <_realloc_r+0x408>
  808df8:	31400117 	ldw	r5,4(r6)
  808dfc:	00bfff84 	movi	r2,-2
  808e00:	2884703a 	and	r2,r5,r2
  808e04:	1185883a 	add	r2,r2,r6
  808e08:	10c00117 	ldw	r3,4(r2)
  808e0c:	18c0004c 	andi	r3,r3,1
  808e10:	1807003a 	cmpeq	r3,r3,zero
  808e14:	1800a326 	beq	r3,zero,8090a4 <_realloc_r+0x3d0>
  808e18:	2908703a 	and	r4,r5,r4
  808e1c:	9929883a 	add	r20,r19,r4
  808e20:	a1c0a30e 	bge	r20,r7,8090b0 <_realloc_r+0x3dc>
  808e24:	4080004c 	andi	r2,r8,1
  808e28:	1000551e 	bne	r2,zero,808f80 <_realloc_r+0x2ac>
  808e2c:	80800017 	ldw	r2,0(r16)
  808e30:	80afc83a 	sub	r23,r16,r2
  808e34:	b8c00117 	ldw	r3,4(r23)
  808e38:	00bfff04 	movi	r2,-4
  808e3c:	1884703a 	and	r2,r3,r2
  808e40:	30002e26 	beq	r6,zero,808efc <_realloc_r+0x228>
  808e44:	3240b926 	beq	r6,r9,80912c <_realloc_r+0x458>
  808e48:	98a9883a 	add	r20,r19,r2
  808e4c:	2509883a 	add	r4,r4,r20
  808e50:	d9000015 	stw	r4,0(sp)
  808e54:	21c02a16 	blt	r4,r7,808f00 <_realloc_r+0x22c>
  808e58:	30800317 	ldw	r2,12(r6)
  808e5c:	30c00217 	ldw	r3,8(r6)
  808e60:	01400904 	movi	r5,36
  808e64:	99bfff04 	addi	r6,r19,-4
  808e68:	18800315 	stw	r2,12(r3)
  808e6c:	10c00215 	stw	r3,8(r2)
  808e70:	b9000317 	ldw	r4,12(r23)
  808e74:	b8800217 	ldw	r2,8(r23)
  808e78:	b82b883a 	mov	r21,r23
  808e7c:	bc000204 	addi	r16,r23,8
  808e80:	20800215 	stw	r2,8(r4)
  808e84:	11000315 	stw	r4,12(r2)
  808e88:	2980e436 	bltu	r5,r6,80921c <_realloc_r+0x548>
  808e8c:	008004c4 	movi	r2,19
  808e90:	9009883a 	mov	r4,r18
  808e94:	8011883a 	mov	r8,r16
  808e98:	11800f2e 	bgeu	r2,r6,808ed8 <_realloc_r+0x204>
  808e9c:	90800017 	ldw	r2,0(r18)
  808ea0:	ba000404 	addi	r8,r23,16
  808ea4:	91000204 	addi	r4,r18,8
  808ea8:	b8800215 	stw	r2,8(r23)
  808eac:	90c00117 	ldw	r3,4(r18)
  808eb0:	008006c4 	movi	r2,27
  808eb4:	b8c00315 	stw	r3,12(r23)
  808eb8:	1180072e 	bgeu	r2,r6,808ed8 <_realloc_r+0x204>
  808ebc:	90c00217 	ldw	r3,8(r18)
  808ec0:	ba000604 	addi	r8,r23,24
  808ec4:	91000404 	addi	r4,r18,16
  808ec8:	b8c00415 	stw	r3,16(r23)
  808ecc:	90800317 	ldw	r2,12(r18)
  808ed0:	b8800515 	stw	r2,20(r23)
  808ed4:	3140e726 	beq	r6,r5,809274 <_realloc_r+0x5a0>
  808ed8:	20800017 	ldw	r2,0(r4)
  808edc:	dd000017 	ldw	r20,0(sp)
  808ee0:	b80f883a 	mov	r7,r23
  808ee4:	40800015 	stw	r2,0(r8)
  808ee8:	20c00117 	ldw	r3,4(r4)
  808eec:	40c00115 	stw	r3,4(r8)
  808ef0:	20800217 	ldw	r2,8(r4)
  808ef4:	40800215 	stw	r2,8(r8)
  808ef8:	003f9706 	br	808d58 <_realloc_r+0x84>
  808efc:	98a9883a 	add	r20,r19,r2
  808f00:	a1c01f16 	blt	r20,r7,808f80 <_realloc_r+0x2ac>
  808f04:	b8c00317 	ldw	r3,12(r23)
  808f08:	b8800217 	ldw	r2,8(r23)
  808f0c:	99bfff04 	addi	r6,r19,-4
  808f10:	01400904 	movi	r5,36
  808f14:	b82b883a 	mov	r21,r23
  808f18:	18800215 	stw	r2,8(r3)
  808f1c:	10c00315 	stw	r3,12(r2)
  808f20:	bc000204 	addi	r16,r23,8
  808f24:	2980c336 	bltu	r5,r6,809234 <_realloc_r+0x560>
  808f28:	008004c4 	movi	r2,19
  808f2c:	9009883a 	mov	r4,r18
  808f30:	8011883a 	mov	r8,r16
  808f34:	11800f2e 	bgeu	r2,r6,808f74 <_realloc_r+0x2a0>
  808f38:	90800017 	ldw	r2,0(r18)
  808f3c:	ba000404 	addi	r8,r23,16
  808f40:	91000204 	addi	r4,r18,8
  808f44:	b8800215 	stw	r2,8(r23)
  808f48:	90c00117 	ldw	r3,4(r18)
  808f4c:	008006c4 	movi	r2,27
  808f50:	b8c00315 	stw	r3,12(r23)
  808f54:	1180072e 	bgeu	r2,r6,808f74 <_realloc_r+0x2a0>
  808f58:	90c00217 	ldw	r3,8(r18)
  808f5c:	ba000604 	addi	r8,r23,24
  808f60:	91000404 	addi	r4,r18,16
  808f64:	b8c00415 	stw	r3,16(r23)
  808f68:	90800317 	ldw	r2,12(r18)
  808f6c:	b8800515 	stw	r2,20(r23)
  808f70:	3140c726 	beq	r6,r5,809290 <_realloc_r+0x5bc>
  808f74:	20800017 	ldw	r2,0(r4)
  808f78:	b80f883a 	mov	r7,r23
  808f7c:	003fd906 	br	808ee4 <_realloc_r+0x210>
  808f80:	880b883a 	mov	r5,r17
  808f84:	b009883a 	mov	r4,r22
  808f88:	080720c0 	call	80720c <_malloc_r>
  808f8c:	1023883a 	mov	r17,r2
  808f90:	10002526 	beq	r2,zero,809028 <_realloc_r+0x354>
  808f94:	80800117 	ldw	r2,4(r16)
  808f98:	00ffff84 	movi	r3,-2
  808f9c:	893ffe04 	addi	r4,r17,-8
  808fa0:	10c4703a 	and	r2,r2,r3
  808fa4:	8085883a 	add	r2,r16,r2
  808fa8:	20809526 	beq	r4,r2,809200 <_realloc_r+0x52c>
  808fac:	99bfff04 	addi	r6,r19,-4
  808fb0:	01c00904 	movi	r7,36
  808fb4:	39804536 	bltu	r7,r6,8090cc <_realloc_r+0x3f8>
  808fb8:	008004c4 	movi	r2,19
  808fbc:	9009883a 	mov	r4,r18
  808fc0:	880b883a 	mov	r5,r17
  808fc4:	11800f2e 	bgeu	r2,r6,809004 <_realloc_r+0x330>
  808fc8:	90800017 	ldw	r2,0(r18)
  808fcc:	89400204 	addi	r5,r17,8
  808fd0:	91000204 	addi	r4,r18,8
  808fd4:	88800015 	stw	r2,0(r17)
  808fd8:	90c00117 	ldw	r3,4(r18)
  808fdc:	008006c4 	movi	r2,27
  808fe0:	88c00115 	stw	r3,4(r17)
  808fe4:	1180072e 	bgeu	r2,r6,809004 <_realloc_r+0x330>
  808fe8:	90c00217 	ldw	r3,8(r18)
  808fec:	89400404 	addi	r5,r17,16
  808ff0:	91000404 	addi	r4,r18,16
  808ff4:	88c00215 	stw	r3,8(r17)
  808ff8:	90800317 	ldw	r2,12(r18)
  808ffc:	88800315 	stw	r2,12(r17)
  809000:	31c09126 	beq	r6,r7,809248 <_realloc_r+0x574>
  809004:	20800017 	ldw	r2,0(r4)
  809008:	28800015 	stw	r2,0(r5)
  80900c:	20c00117 	ldw	r3,4(r4)
  809010:	28c00115 	stw	r3,4(r5)
  809014:	20800217 	ldw	r2,8(r4)
  809018:	28800215 	stw	r2,8(r5)
  80901c:	900b883a 	mov	r5,r18
  809020:	b009883a 	mov	r4,r22
  809024:	08066840 	call	806684 <_free_r>
  809028:	b009883a 	mov	r4,r22
  80902c:	080b6540 	call	80b654 <__malloc_unlock>
  809030:	003f5e06 	br	808dac <_realloc_r+0xd8>
  809034:	300b883a 	mov	r5,r6
  809038:	dfc00b17 	ldw	ra,44(sp)
  80903c:	df000a17 	ldw	fp,40(sp)
  809040:	ddc00917 	ldw	r23,36(sp)
  809044:	dd800817 	ldw	r22,32(sp)
  809048:	dd400717 	ldw	r21,28(sp)
  80904c:	dd000617 	ldw	r20,24(sp)
  809050:	dcc00517 	ldw	r19,20(sp)
  809054:	dc800417 	ldw	r18,16(sp)
  809058:	dc400317 	ldw	r17,12(sp)
  80905c:	dc000217 	ldw	r16,8(sp)
  809060:	dec00c04 	addi	sp,sp,48
  809064:	080720c1 	jmpi	80720c <_malloc_r>
  809068:	38800117 	ldw	r2,4(r7)
  80906c:	e54b883a 	add	r5,fp,r21
  809070:	31000054 	ori	r4,r6,1
  809074:	1080004c 	andi	r2,r2,1
  809078:	1704b03a 	or	r2,r2,fp
  80907c:	38800115 	stw	r2,4(r7)
  809080:	29000115 	stw	r4,4(r5)
  809084:	2987883a 	add	r3,r5,r6
  809088:	18800117 	ldw	r2,4(r3)
  80908c:	29400204 	addi	r5,r5,8
  809090:	b009883a 	mov	r4,r22
  809094:	10800054 	ori	r2,r2,1
  809098:	18800115 	stw	r2,4(r3)
  80909c:	08066840 	call	806684 <_free_r>
  8090a0:	003f3806 	br	808d84 <_realloc_r+0xb0>
  8090a4:	000d883a 	mov	r6,zero
  8090a8:	0009883a 	mov	r4,zero
  8090ac:	003f5d06 	br	808e24 <_realloc_r+0x150>
  8090b0:	30c00217 	ldw	r3,8(r6)
  8090b4:	30800317 	ldw	r2,12(r6)
  8090b8:	800f883a 	mov	r7,r16
  8090bc:	84000204 	addi	r16,r16,8
  8090c0:	10c00215 	stw	r3,8(r2)
  8090c4:	18800315 	stw	r2,12(r3)
  8090c8:	003f2306 	br	808d58 <_realloc_r+0x84>
  8090cc:	8809883a 	mov	r4,r17
  8090d0:	900b883a 	mov	r5,r18
  8090d4:	0807ad00 	call	807ad0 <memmove>
  8090d8:	003fd006 	br	80901c <_realloc_r+0x348>
  8090dc:	30800117 	ldw	r2,4(r6)
  8090e0:	e0c00404 	addi	r3,fp,16
  8090e4:	1108703a 	and	r4,r2,r4
  8090e8:	9905883a 	add	r2,r19,r4
  8090ec:	10ff4d16 	blt	r2,r3,808e24 <_realloc_r+0x150>
  8090f0:	1705c83a 	sub	r2,r2,fp
  8090f4:	870b883a 	add	r5,r16,fp
  8090f8:	10800054 	ori	r2,r2,1
  8090fc:	28800115 	stw	r2,4(r5)
  809100:	80c00117 	ldw	r3,4(r16)
  809104:	00802074 	movhi	r2,129
  809108:	10b75904 	addi	r2,r2,-8860
  80910c:	b009883a 	mov	r4,r22
  809110:	18c0004c 	andi	r3,r3,1
  809114:	e0c6b03a 	or	r3,fp,r3
  809118:	11400215 	stw	r5,8(r2)
  80911c:	80c00115 	stw	r3,4(r16)
  809120:	080b6540 	call	80b654 <__malloc_unlock>
  809124:	84400204 	addi	r17,r16,8
  809128:	003f2006 	br	808dac <_realloc_r+0xd8>
  80912c:	98a9883a 	add	r20,r19,r2
  809130:	2509883a 	add	r4,r4,r20
  809134:	e0800404 	addi	r2,fp,16
  809138:	d9000115 	stw	r4,4(sp)
  80913c:	20bf7016 	blt	r4,r2,808f00 <_realloc_r+0x22c>
  809140:	b8c00317 	ldw	r3,12(r23)
  809144:	b8800217 	ldw	r2,8(r23)
  809148:	99bfff04 	addi	r6,r19,-4
  80914c:	01400904 	movi	r5,36
  809150:	18800215 	stw	r2,8(r3)
  809154:	10c00315 	stw	r3,12(r2)
  809158:	bc400204 	addi	r17,r23,8
  80915c:	29804136 	bltu	r5,r6,809264 <_realloc_r+0x590>
  809160:	008004c4 	movi	r2,19
  809164:	9009883a 	mov	r4,r18
  809168:	880f883a 	mov	r7,r17
  80916c:	11800f2e 	bgeu	r2,r6,8091ac <_realloc_r+0x4d8>
  809170:	90800017 	ldw	r2,0(r18)
  809174:	b9c00404 	addi	r7,r23,16
  809178:	91000204 	addi	r4,r18,8
  80917c:	b8800215 	stw	r2,8(r23)
  809180:	90c00117 	ldw	r3,4(r18)
  809184:	008006c4 	movi	r2,27
  809188:	b8c00315 	stw	r3,12(r23)
  80918c:	1180072e 	bgeu	r2,r6,8091ac <_realloc_r+0x4d8>
  809190:	90c00217 	ldw	r3,8(r18)
  809194:	b9c00604 	addi	r7,r23,24
  809198:	91000404 	addi	r4,r18,16
  80919c:	b8c00415 	stw	r3,16(r23)
  8091a0:	90800317 	ldw	r2,12(r18)
  8091a4:	b8800515 	stw	r2,20(r23)
  8091a8:	31404026 	beq	r6,r5,8092ac <_realloc_r+0x5d8>
  8091ac:	20800017 	ldw	r2,0(r4)
  8091b0:	38800015 	stw	r2,0(r7)
  8091b4:	20c00117 	ldw	r3,4(r4)
  8091b8:	38c00115 	stw	r3,4(r7)
  8091bc:	20800217 	ldw	r2,8(r4)
  8091c0:	38800215 	stw	r2,8(r7)
  8091c4:	d8c00117 	ldw	r3,4(sp)
  8091c8:	bf0b883a 	add	r5,r23,fp
  8091cc:	b009883a 	mov	r4,r22
  8091d0:	1f05c83a 	sub	r2,r3,fp
  8091d4:	10800054 	ori	r2,r2,1
  8091d8:	28800115 	stw	r2,4(r5)
  8091dc:	b8c00117 	ldw	r3,4(r23)
  8091e0:	00802074 	movhi	r2,129
  8091e4:	10b75904 	addi	r2,r2,-8860
  8091e8:	11400215 	stw	r5,8(r2)
  8091ec:	18c0004c 	andi	r3,r3,1
  8091f0:	e0c6b03a 	or	r3,fp,r3
  8091f4:	b8c00115 	stw	r3,4(r23)
  8091f8:	080b6540 	call	80b654 <__malloc_unlock>
  8091fc:	003eeb06 	br	808dac <_realloc_r+0xd8>
  809200:	20800117 	ldw	r2,4(r4)
  809204:	00ffff04 	movi	r3,-4
  809208:	800f883a 	mov	r7,r16
  80920c:	10c4703a 	and	r2,r2,r3
  809210:	98a9883a 	add	r20,r19,r2
  809214:	84000204 	addi	r16,r16,8
  809218:	003ecf06 	br	808d58 <_realloc_r+0x84>
  80921c:	900b883a 	mov	r5,r18
  809220:	8009883a 	mov	r4,r16
  809224:	0807ad00 	call	807ad0 <memmove>
  809228:	dd000017 	ldw	r20,0(sp)
  80922c:	b80f883a 	mov	r7,r23
  809230:	003ec906 	br	808d58 <_realloc_r+0x84>
  809234:	900b883a 	mov	r5,r18
  809238:	8009883a 	mov	r4,r16
  80923c:	0807ad00 	call	807ad0 <memmove>
  809240:	b80f883a 	mov	r7,r23
  809244:	003ec406 	br	808d58 <_realloc_r+0x84>
  809248:	90c00417 	ldw	r3,16(r18)
  80924c:	89400604 	addi	r5,r17,24
  809250:	91000604 	addi	r4,r18,24
  809254:	88c00415 	stw	r3,16(r17)
  809258:	90800517 	ldw	r2,20(r18)
  80925c:	88800515 	stw	r2,20(r17)
  809260:	003f6806 	br	809004 <_realloc_r+0x330>
  809264:	900b883a 	mov	r5,r18
  809268:	8809883a 	mov	r4,r17
  80926c:	0807ad00 	call	807ad0 <memmove>
  809270:	003fd406 	br	8091c4 <_realloc_r+0x4f0>
  809274:	90c00417 	ldw	r3,16(r18)
  809278:	91000604 	addi	r4,r18,24
  80927c:	ba000804 	addi	r8,r23,32
  809280:	b8c00615 	stw	r3,24(r23)
  809284:	90800517 	ldw	r2,20(r18)
  809288:	b8800715 	stw	r2,28(r23)
  80928c:	003f1206 	br	808ed8 <_realloc_r+0x204>
  809290:	90c00417 	ldw	r3,16(r18)
  809294:	91000604 	addi	r4,r18,24
  809298:	ba000804 	addi	r8,r23,32
  80929c:	b8c00615 	stw	r3,24(r23)
  8092a0:	90800517 	ldw	r2,20(r18)
  8092a4:	b8800715 	stw	r2,28(r23)
  8092a8:	003f3206 	br	808f74 <_realloc_r+0x2a0>
  8092ac:	90c00417 	ldw	r3,16(r18)
  8092b0:	91000604 	addi	r4,r18,24
  8092b4:	b9c00804 	addi	r7,r23,32
  8092b8:	b8c00615 	stw	r3,24(r23)
  8092bc:	90800517 	ldw	r2,20(r18)
  8092c0:	b8800715 	stw	r2,28(r23)
  8092c4:	003fb906 	br	8091ac <_realloc_r+0x4d8>

008092c8 <__isinfd>:
  8092c8:	200d883a 	mov	r6,r4
  8092cc:	0109c83a 	sub	r4,zero,r4
  8092d0:	2188b03a 	or	r4,r4,r6
  8092d4:	2008d7fa 	srli	r4,r4,31
  8092d8:	00a00034 	movhi	r2,32768
  8092dc:	10bfffc4 	addi	r2,r2,-1
  8092e0:	1144703a 	and	r2,r2,r5
  8092e4:	2088b03a 	or	r4,r4,r2
  8092e8:	009ffc34 	movhi	r2,32752
  8092ec:	1105c83a 	sub	r2,r2,r4
  8092f0:	0087c83a 	sub	r3,zero,r2
  8092f4:	10c4b03a 	or	r2,r2,r3
  8092f8:	1004d7fa 	srli	r2,r2,31
  8092fc:	00c00044 	movi	r3,1
  809300:	1885c83a 	sub	r2,r3,r2
  809304:	f800283a 	ret

00809308 <_sbrk_r>:
  809308:	defffd04 	addi	sp,sp,-12
  80930c:	dc000015 	stw	r16,0(sp)
  809310:	04002074 	movhi	r16,129
  809314:	84039504 	addi	r16,r16,3668
  809318:	dc400115 	stw	r17,4(sp)
  80931c:	80000015 	stw	zero,0(r16)
  809320:	2023883a 	mov	r17,r4
  809324:	2809883a 	mov	r4,r5
  809328:	dfc00215 	stw	ra,8(sp)
  80932c:	080b8700 	call	80b870 <sbrk>
  809330:	1007883a 	mov	r3,r2
  809334:	00bfffc4 	movi	r2,-1
  809338:	18800626 	beq	r3,r2,809354 <_sbrk_r+0x4c>
  80933c:	1805883a 	mov	r2,r3
  809340:	dfc00217 	ldw	ra,8(sp)
  809344:	dc400117 	ldw	r17,4(sp)
  809348:	dc000017 	ldw	r16,0(sp)
  80934c:	dec00304 	addi	sp,sp,12
  809350:	f800283a 	ret
  809354:	80800017 	ldw	r2,0(r16)
  809358:	103ff826 	beq	r2,zero,80933c <_sbrk_r+0x34>
  80935c:	88800015 	stw	r2,0(r17)
  809360:	1805883a 	mov	r2,r3
  809364:	dfc00217 	ldw	ra,8(sp)
  809368:	dc400117 	ldw	r17,4(sp)
  80936c:	dc000017 	ldw	r16,0(sp)
  809370:	dec00304 	addi	sp,sp,12
  809374:	f800283a 	ret

00809378 <__sclose>:
  809378:	2940038f 	ldh	r5,14(r5)
  80937c:	08096c01 	jmpi	8096c0 <_close_r>

00809380 <__sseek>:
  809380:	defffe04 	addi	sp,sp,-8
  809384:	dc000015 	stw	r16,0(sp)
  809388:	2821883a 	mov	r16,r5
  80938c:	2940038f 	ldh	r5,14(r5)
  809390:	dfc00115 	stw	ra,4(sp)
  809394:	08099380 	call	809938 <_lseek_r>
  809398:	1007883a 	mov	r3,r2
  80939c:	00bfffc4 	movi	r2,-1
  8093a0:	18800926 	beq	r3,r2,8093c8 <__sseek+0x48>
  8093a4:	8080030b 	ldhu	r2,12(r16)
  8093a8:	80c01415 	stw	r3,80(r16)
  8093ac:	10840014 	ori	r2,r2,4096
  8093b0:	8080030d 	sth	r2,12(r16)
  8093b4:	1805883a 	mov	r2,r3
  8093b8:	dfc00117 	ldw	ra,4(sp)
  8093bc:	dc000017 	ldw	r16,0(sp)
  8093c0:	dec00204 	addi	sp,sp,8
  8093c4:	f800283a 	ret
  8093c8:	8080030b 	ldhu	r2,12(r16)
  8093cc:	10bbffcc 	andi	r2,r2,61439
  8093d0:	8080030d 	sth	r2,12(r16)
  8093d4:	1805883a 	mov	r2,r3
  8093d8:	dfc00117 	ldw	ra,4(sp)
  8093dc:	dc000017 	ldw	r16,0(sp)
  8093e0:	dec00204 	addi	sp,sp,8
  8093e4:	f800283a 	ret

008093e8 <__swrite>:
  8093e8:	2880030b 	ldhu	r2,12(r5)
  8093ec:	defffb04 	addi	sp,sp,-20
  8093f0:	dcc00315 	stw	r19,12(sp)
  8093f4:	1080400c 	andi	r2,r2,256
  8093f8:	dc800215 	stw	r18,8(sp)
  8093fc:	dc400115 	stw	r17,4(sp)
  809400:	dc000015 	stw	r16,0(sp)
  809404:	3027883a 	mov	r19,r6
  809408:	3825883a 	mov	r18,r7
  80940c:	dfc00415 	stw	ra,16(sp)
  809410:	2821883a 	mov	r16,r5
  809414:	000d883a 	mov	r6,zero
  809418:	01c00084 	movi	r7,2
  80941c:	2023883a 	mov	r17,r4
  809420:	10000226 	beq	r2,zero,80942c <__swrite+0x44>
  809424:	2940038f 	ldh	r5,14(r5)
  809428:	08099380 	call	809938 <_lseek_r>
  80942c:	8080030b 	ldhu	r2,12(r16)
  809430:	8140038f 	ldh	r5,14(r16)
  809434:	8809883a 	mov	r4,r17
  809438:	10bbffcc 	andi	r2,r2,61439
  80943c:	980d883a 	mov	r6,r19
  809440:	900f883a 	mov	r7,r18
  809444:	8080030d 	sth	r2,12(r16)
  809448:	dfc00417 	ldw	ra,16(sp)
  80944c:	dcc00317 	ldw	r19,12(sp)
  809450:	dc800217 	ldw	r18,8(sp)
  809454:	dc400117 	ldw	r17,4(sp)
  809458:	dc000017 	ldw	r16,0(sp)
  80945c:	dec00504 	addi	sp,sp,20
  809460:	08095801 	jmpi	809580 <_write_r>

00809464 <__sread>:
  809464:	defffe04 	addi	sp,sp,-8
  809468:	dc000015 	stw	r16,0(sp)
  80946c:	2821883a 	mov	r16,r5
  809470:	2940038f 	ldh	r5,14(r5)
  809474:	dfc00115 	stw	ra,4(sp)
  809478:	08099b00 	call	8099b0 <_read_r>
  80947c:	1007883a 	mov	r3,r2
  809480:	10000816 	blt	r2,zero,8094a4 <__sread+0x40>
  809484:	80801417 	ldw	r2,80(r16)
  809488:	10c5883a 	add	r2,r2,r3
  80948c:	80801415 	stw	r2,80(r16)
  809490:	1805883a 	mov	r2,r3
  809494:	dfc00117 	ldw	ra,4(sp)
  809498:	dc000017 	ldw	r16,0(sp)
  80949c:	dec00204 	addi	sp,sp,8
  8094a0:	f800283a 	ret
  8094a4:	8080030b 	ldhu	r2,12(r16)
  8094a8:	10bbffcc 	andi	r2,r2,61439
  8094ac:	8080030d 	sth	r2,12(r16)
  8094b0:	1805883a 	mov	r2,r3
  8094b4:	dfc00117 	ldw	ra,4(sp)
  8094b8:	dc000017 	ldw	r16,0(sp)
  8094bc:	dec00204 	addi	sp,sp,8
  8094c0:	f800283a 	ret

008094c4 <strcmp>:
  8094c4:	2144b03a 	or	r2,r4,r5
  8094c8:	108000cc 	andi	r2,r2,3
  8094cc:	10001d1e 	bne	r2,zero,809544 <strcmp+0x80>
  8094d0:	200f883a 	mov	r7,r4
  8094d4:	28800017 	ldw	r2,0(r5)
  8094d8:	21000017 	ldw	r4,0(r4)
  8094dc:	280d883a 	mov	r6,r5
  8094e0:	2080161e 	bne	r4,r2,80953c <strcmp+0x78>
  8094e4:	023fbff4 	movhi	r8,65279
  8094e8:	423fbfc4 	addi	r8,r8,-257
  8094ec:	2207883a 	add	r3,r4,r8
  8094f0:	01602074 	movhi	r5,32897
  8094f4:	29602004 	addi	r5,r5,-32640
  8094f8:	1946703a 	and	r3,r3,r5
  8094fc:	0104303a 	nor	r2,zero,r4
  809500:	10c4703a 	and	r2,r2,r3
  809504:	10001c1e 	bne	r2,zero,809578 <strcmp+0xb4>
  809508:	4013883a 	mov	r9,r8
  80950c:	2811883a 	mov	r8,r5
  809510:	00000106 	br	809518 <strcmp+0x54>
  809514:	1800181e 	bne	r3,zero,809578 <strcmp+0xb4>
  809518:	39c00104 	addi	r7,r7,4
  80951c:	39000017 	ldw	r4,0(r7)
  809520:	31800104 	addi	r6,r6,4
  809524:	31400017 	ldw	r5,0(r6)
  809528:	2245883a 	add	r2,r4,r9
  80952c:	1204703a 	and	r2,r2,r8
  809530:	0106303a 	nor	r3,zero,r4
  809534:	1886703a 	and	r3,r3,r2
  809538:	217ff626 	beq	r4,r5,809514 <strcmp+0x50>
  80953c:	3809883a 	mov	r4,r7
  809540:	300b883a 	mov	r5,r6
  809544:	20c00007 	ldb	r3,0(r4)
  809548:	1800051e 	bne	r3,zero,809560 <strcmp+0x9c>
  80954c:	00000606 	br	809568 <strcmp+0xa4>
  809550:	21000044 	addi	r4,r4,1
  809554:	20c00007 	ldb	r3,0(r4)
  809558:	29400044 	addi	r5,r5,1
  80955c:	18000226 	beq	r3,zero,809568 <strcmp+0xa4>
  809560:	28800007 	ldb	r2,0(r5)
  809564:	18bffa26 	beq	r3,r2,809550 <strcmp+0x8c>
  809568:	20c00003 	ldbu	r3,0(r4)
  80956c:	28800003 	ldbu	r2,0(r5)
  809570:	1885c83a 	sub	r2,r3,r2
  809574:	f800283a 	ret
  809578:	0005883a 	mov	r2,zero
  80957c:	f800283a 	ret

00809580 <_write_r>:
  809580:	defffd04 	addi	sp,sp,-12
  809584:	dc000015 	stw	r16,0(sp)
  809588:	04002074 	movhi	r16,129
  80958c:	84039504 	addi	r16,r16,3668
  809590:	dc400115 	stw	r17,4(sp)
  809594:	80000015 	stw	zero,0(r16)
  809598:	2023883a 	mov	r17,r4
  80959c:	2809883a 	mov	r4,r5
  8095a0:	300b883a 	mov	r5,r6
  8095a4:	380d883a 	mov	r6,r7
  8095a8:	dfc00215 	stw	ra,8(sp)
  8095ac:	080bad00 	call	80bad0 <write>
  8095b0:	1007883a 	mov	r3,r2
  8095b4:	00bfffc4 	movi	r2,-1
  8095b8:	18800626 	beq	r3,r2,8095d4 <_write_r+0x54>
  8095bc:	1805883a 	mov	r2,r3
  8095c0:	dfc00217 	ldw	ra,8(sp)
  8095c4:	dc400117 	ldw	r17,4(sp)
  8095c8:	dc000017 	ldw	r16,0(sp)
  8095cc:	dec00304 	addi	sp,sp,12
  8095d0:	f800283a 	ret
  8095d4:	80800017 	ldw	r2,0(r16)
  8095d8:	103ff826 	beq	r2,zero,8095bc <_write_r+0x3c>
  8095dc:	88800015 	stw	r2,0(r17)
  8095e0:	1805883a 	mov	r2,r3
  8095e4:	dfc00217 	ldw	ra,8(sp)
  8095e8:	dc400117 	ldw	r17,4(sp)
  8095ec:	dc000017 	ldw	r16,0(sp)
  8095f0:	dec00304 	addi	sp,sp,12
  8095f4:	f800283a 	ret

008095f8 <_calloc_r>:
  8095f8:	defffe04 	addi	sp,sp,-8
  8095fc:	dc400015 	stw	r17,0(sp)
  809600:	2023883a 	mov	r17,r4
  809604:	2809883a 	mov	r4,r5
  809608:	300b883a 	mov	r5,r6
  80960c:	dfc00115 	stw	ra,4(sp)
  809610:	0801be80 	call	801be8 <__mulsi3>
  809614:	100b883a 	mov	r5,r2
  809618:	8809883a 	mov	r4,r17
  80961c:	080720c0 	call	80720c <_malloc_r>
  809620:	1023883a 	mov	r17,r2
  809624:	01c00904 	movi	r7,36
  809628:	10000d26 	beq	r2,zero,809660 <_calloc_r+0x68>
  80962c:	10ffff17 	ldw	r3,-4(r2)
  809630:	1009883a 	mov	r4,r2
  809634:	00bfff04 	movi	r2,-4
  809638:	1886703a 	and	r3,r3,r2
  80963c:	1887883a 	add	r3,r3,r2
  809640:	180d883a 	mov	r6,r3
  809644:	000b883a 	mov	r5,zero
  809648:	38c01736 	bltu	r7,r3,8096a8 <_calloc_r+0xb0>
  80964c:	008004c4 	movi	r2,19
  809650:	10c00836 	bltu	r2,r3,809674 <_calloc_r+0x7c>
  809654:	20000215 	stw	zero,8(r4)
  809658:	20000015 	stw	zero,0(r4)
  80965c:	20000115 	stw	zero,4(r4)
  809660:	8805883a 	mov	r2,r17
  809664:	dfc00117 	ldw	ra,4(sp)
  809668:	dc400017 	ldw	r17,0(sp)
  80966c:	dec00204 	addi	sp,sp,8
  809670:	f800283a 	ret
  809674:	008006c4 	movi	r2,27
  809678:	88000015 	stw	zero,0(r17)
  80967c:	88000115 	stw	zero,4(r17)
  809680:	89000204 	addi	r4,r17,8
  809684:	10fff32e 	bgeu	r2,r3,809654 <_calloc_r+0x5c>
  809688:	88000215 	stw	zero,8(r17)
  80968c:	88000315 	stw	zero,12(r17)
  809690:	89000404 	addi	r4,r17,16
  809694:	19ffef1e 	bne	r3,r7,809654 <_calloc_r+0x5c>
  809698:	89000604 	addi	r4,r17,24
  80969c:	88000415 	stw	zero,16(r17)
  8096a0:	88000515 	stw	zero,20(r17)
  8096a4:	003feb06 	br	809654 <_calloc_r+0x5c>
  8096a8:	0807bb00 	call	807bb0 <memset>
  8096ac:	8805883a 	mov	r2,r17
  8096b0:	dfc00117 	ldw	ra,4(sp)
  8096b4:	dc400017 	ldw	r17,0(sp)
  8096b8:	dec00204 	addi	sp,sp,8
  8096bc:	f800283a 	ret

008096c0 <_close_r>:
  8096c0:	defffd04 	addi	sp,sp,-12
  8096c4:	dc000015 	stw	r16,0(sp)
  8096c8:	04002074 	movhi	r16,129
  8096cc:	84039504 	addi	r16,r16,3668
  8096d0:	dc400115 	stw	r17,4(sp)
  8096d4:	80000015 	stw	zero,0(r16)
  8096d8:	2023883a 	mov	r17,r4
  8096dc:	2809883a 	mov	r4,r5
  8096e0:	dfc00215 	stw	ra,8(sp)
  8096e4:	080acd40 	call	80acd4 <close>
  8096e8:	1007883a 	mov	r3,r2
  8096ec:	00bfffc4 	movi	r2,-1
  8096f0:	18800626 	beq	r3,r2,80970c <_close_r+0x4c>
  8096f4:	1805883a 	mov	r2,r3
  8096f8:	dfc00217 	ldw	ra,8(sp)
  8096fc:	dc400117 	ldw	r17,4(sp)
  809700:	dc000017 	ldw	r16,0(sp)
  809704:	dec00304 	addi	sp,sp,12
  809708:	f800283a 	ret
  80970c:	80800017 	ldw	r2,0(r16)
  809710:	103ff826 	beq	r2,zero,8096f4 <_close_r+0x34>
  809714:	88800015 	stw	r2,0(r17)
  809718:	1805883a 	mov	r2,r3
  80971c:	dfc00217 	ldw	ra,8(sp)
  809720:	dc400117 	ldw	r17,4(sp)
  809724:	dc000017 	ldw	r16,0(sp)
  809728:	dec00304 	addi	sp,sp,12
  80972c:	f800283a 	ret

00809730 <_fclose_r>:
  809730:	defffc04 	addi	sp,sp,-16
  809734:	dc400115 	stw	r17,4(sp)
  809738:	dc000015 	stw	r16,0(sp)
  80973c:	dfc00315 	stw	ra,12(sp)
  809740:	dc800215 	stw	r18,8(sp)
  809744:	2821883a 	mov	r16,r5
  809748:	2023883a 	mov	r17,r4
  80974c:	28002926 	beq	r5,zero,8097f4 <_fclose_r+0xc4>
  809750:	08062bc0 	call	8062bc <__sfp_lock_acquire>
  809754:	88000226 	beq	r17,zero,809760 <_fclose_r+0x30>
  809758:	88800e17 	ldw	r2,56(r17)
  80975c:	10002d26 	beq	r2,zero,809814 <_fclose_r+0xe4>
  809760:	8080030f 	ldh	r2,12(r16)
  809764:	10002226 	beq	r2,zero,8097f0 <_fclose_r+0xc0>
  809768:	8809883a 	mov	r4,r17
  80976c:	800b883a 	mov	r5,r16
  809770:	08060340 	call	806034 <_fflush_r>
  809774:	1025883a 	mov	r18,r2
  809778:	80800b17 	ldw	r2,44(r16)
  80977c:	10000426 	beq	r2,zero,809790 <_fclose_r+0x60>
  809780:	81400717 	ldw	r5,28(r16)
  809784:	8809883a 	mov	r4,r17
  809788:	103ee83a 	callr	r2
  80978c:	10002a16 	blt	r2,zero,809838 <_fclose_r+0x108>
  809790:	8080030b 	ldhu	r2,12(r16)
  809794:	1080200c 	andi	r2,r2,128
  809798:	1000231e 	bne	r2,zero,809828 <_fclose_r+0xf8>
  80979c:	81400c17 	ldw	r5,48(r16)
  8097a0:	28000526 	beq	r5,zero,8097b8 <_fclose_r+0x88>
  8097a4:	80801004 	addi	r2,r16,64
  8097a8:	28800226 	beq	r5,r2,8097b4 <_fclose_r+0x84>
  8097ac:	8809883a 	mov	r4,r17
  8097b0:	08066840 	call	806684 <_free_r>
  8097b4:	80000c15 	stw	zero,48(r16)
  8097b8:	81401117 	ldw	r5,68(r16)
  8097bc:	28000326 	beq	r5,zero,8097cc <_fclose_r+0x9c>
  8097c0:	8809883a 	mov	r4,r17
  8097c4:	08066840 	call	806684 <_free_r>
  8097c8:	80001115 	stw	zero,68(r16)
  8097cc:	8000030d 	sth	zero,12(r16)
  8097d0:	08062c00 	call	8062c0 <__sfp_lock_release>
  8097d4:	9005883a 	mov	r2,r18
  8097d8:	dfc00317 	ldw	ra,12(sp)
  8097dc:	dc800217 	ldw	r18,8(sp)
  8097e0:	dc400117 	ldw	r17,4(sp)
  8097e4:	dc000017 	ldw	r16,0(sp)
  8097e8:	dec00404 	addi	sp,sp,16
  8097ec:	f800283a 	ret
  8097f0:	08062c00 	call	8062c0 <__sfp_lock_release>
  8097f4:	0025883a 	mov	r18,zero
  8097f8:	9005883a 	mov	r2,r18
  8097fc:	dfc00317 	ldw	ra,12(sp)
  809800:	dc800217 	ldw	r18,8(sp)
  809804:	dc400117 	ldw	r17,4(sp)
  809808:	dc000017 	ldw	r16,0(sp)
  80980c:	dec00404 	addi	sp,sp,16
  809810:	f800283a 	ret
  809814:	8809883a 	mov	r4,r17
  809818:	08062cc0 	call	8062cc <__sinit>
  80981c:	8080030f 	ldh	r2,12(r16)
  809820:	103fd11e 	bne	r2,zero,809768 <_fclose_r+0x38>
  809824:	003ff206 	br	8097f0 <_fclose_r+0xc0>
  809828:	81400417 	ldw	r5,16(r16)
  80982c:	8809883a 	mov	r4,r17
  809830:	08066840 	call	806684 <_free_r>
  809834:	003fd906 	br	80979c <_fclose_r+0x6c>
  809838:	04bfffc4 	movi	r18,-1
  80983c:	003fd406 	br	809790 <_fclose_r+0x60>

00809840 <fclose>:
  809840:	00802074 	movhi	r2,129
  809844:	10bce204 	addi	r2,r2,-3192
  809848:	200b883a 	mov	r5,r4
  80984c:	11000017 	ldw	r4,0(r2)
  809850:	08097301 	jmpi	809730 <_fclose_r>

00809854 <_fstat_r>:
  809854:	defffd04 	addi	sp,sp,-12
  809858:	dc000015 	stw	r16,0(sp)
  80985c:	04002074 	movhi	r16,129
  809860:	84039504 	addi	r16,r16,3668
  809864:	dc400115 	stw	r17,4(sp)
  809868:	80000015 	stw	zero,0(r16)
  80986c:	2023883a 	mov	r17,r4
  809870:	2809883a 	mov	r4,r5
  809874:	300b883a 	mov	r5,r6
  809878:	dfc00215 	stw	ra,8(sp)
  80987c:	080ae600 	call	80ae60 <fstat>
  809880:	1007883a 	mov	r3,r2
  809884:	00bfffc4 	movi	r2,-1
  809888:	18800626 	beq	r3,r2,8098a4 <_fstat_r+0x50>
  80988c:	1805883a 	mov	r2,r3
  809890:	dfc00217 	ldw	ra,8(sp)
  809894:	dc400117 	ldw	r17,4(sp)
  809898:	dc000017 	ldw	r16,0(sp)
  80989c:	dec00304 	addi	sp,sp,12
  8098a0:	f800283a 	ret
  8098a4:	80800017 	ldw	r2,0(r16)
  8098a8:	103ff826 	beq	r2,zero,80988c <_fstat_r+0x38>
  8098ac:	88800015 	stw	r2,0(r17)
  8098b0:	1805883a 	mov	r2,r3
  8098b4:	dfc00217 	ldw	ra,8(sp)
  8098b8:	dc400117 	ldw	r17,4(sp)
  8098bc:	dc000017 	ldw	r16,0(sp)
  8098c0:	dec00304 	addi	sp,sp,12
  8098c4:	f800283a 	ret

008098c8 <_isatty_r>:
  8098c8:	defffd04 	addi	sp,sp,-12
  8098cc:	dc000015 	stw	r16,0(sp)
  8098d0:	04002074 	movhi	r16,129
  8098d4:	84039504 	addi	r16,r16,3668
  8098d8:	dc400115 	stw	r17,4(sp)
  8098dc:	80000015 	stw	zero,0(r16)
  8098e0:	2023883a 	mov	r17,r4
  8098e4:	2809883a 	mov	r4,r5
  8098e8:	dfc00215 	stw	ra,8(sp)
  8098ec:	080b2640 	call	80b264 <isatty>
  8098f0:	1007883a 	mov	r3,r2
  8098f4:	00bfffc4 	movi	r2,-1
  8098f8:	18800626 	beq	r3,r2,809914 <_isatty_r+0x4c>
  8098fc:	1805883a 	mov	r2,r3
  809900:	dfc00217 	ldw	ra,8(sp)
  809904:	dc400117 	ldw	r17,4(sp)
  809908:	dc000017 	ldw	r16,0(sp)
  80990c:	dec00304 	addi	sp,sp,12
  809910:	f800283a 	ret
  809914:	80800017 	ldw	r2,0(r16)
  809918:	103ff826 	beq	r2,zero,8098fc <_isatty_r+0x34>
  80991c:	88800015 	stw	r2,0(r17)
  809920:	1805883a 	mov	r2,r3
  809924:	dfc00217 	ldw	ra,8(sp)
  809928:	dc400117 	ldw	r17,4(sp)
  80992c:	dc000017 	ldw	r16,0(sp)
  809930:	dec00304 	addi	sp,sp,12
  809934:	f800283a 	ret

00809938 <_lseek_r>:
  809938:	defffd04 	addi	sp,sp,-12
  80993c:	dc000015 	stw	r16,0(sp)
  809940:	04002074 	movhi	r16,129
  809944:	84039504 	addi	r16,r16,3668
  809948:	dc400115 	stw	r17,4(sp)
  80994c:	80000015 	stw	zero,0(r16)
  809950:	2023883a 	mov	r17,r4
  809954:	2809883a 	mov	r4,r5
  809958:	300b883a 	mov	r5,r6
  80995c:	380d883a 	mov	r6,r7
  809960:	dfc00215 	stw	ra,8(sp)
  809964:	080b4740 	call	80b474 <lseek>
  809968:	1007883a 	mov	r3,r2
  80996c:	00bfffc4 	movi	r2,-1
  809970:	18800626 	beq	r3,r2,80998c <_lseek_r+0x54>
  809974:	1805883a 	mov	r2,r3
  809978:	dfc00217 	ldw	ra,8(sp)
  80997c:	dc400117 	ldw	r17,4(sp)
  809980:	dc000017 	ldw	r16,0(sp)
  809984:	dec00304 	addi	sp,sp,12
  809988:	f800283a 	ret
  80998c:	80800017 	ldw	r2,0(r16)
  809990:	103ff826 	beq	r2,zero,809974 <_lseek_r+0x3c>
  809994:	88800015 	stw	r2,0(r17)
  809998:	1805883a 	mov	r2,r3
  80999c:	dfc00217 	ldw	ra,8(sp)
  8099a0:	dc400117 	ldw	r17,4(sp)
  8099a4:	dc000017 	ldw	r16,0(sp)
  8099a8:	dec00304 	addi	sp,sp,12
  8099ac:	f800283a 	ret

008099b0 <_read_r>:
  8099b0:	defffd04 	addi	sp,sp,-12
  8099b4:	dc000015 	stw	r16,0(sp)
  8099b8:	04002074 	movhi	r16,129
  8099bc:	84039504 	addi	r16,r16,3668
  8099c0:	dc400115 	stw	r17,4(sp)
  8099c4:	80000015 	stw	zero,0(r16)
  8099c8:	2023883a 	mov	r17,r4
  8099cc:	2809883a 	mov	r4,r5
  8099d0:	300b883a 	mov	r5,r6
  8099d4:	380d883a 	mov	r6,r7
  8099d8:	dfc00215 	stw	ra,8(sp)
  8099dc:	080b6740 	call	80b674 <read>
  8099e0:	1007883a 	mov	r3,r2
  8099e4:	00bfffc4 	movi	r2,-1
  8099e8:	18800626 	beq	r3,r2,809a04 <_read_r+0x54>
  8099ec:	1805883a 	mov	r2,r3
  8099f0:	dfc00217 	ldw	ra,8(sp)
  8099f4:	dc400117 	ldw	r17,4(sp)
  8099f8:	dc000017 	ldw	r16,0(sp)
  8099fc:	dec00304 	addi	sp,sp,12
  809a00:	f800283a 	ret
  809a04:	80800017 	ldw	r2,0(r16)
  809a08:	103ff826 	beq	r2,zero,8099ec <_read_r+0x3c>
  809a0c:	88800015 	stw	r2,0(r17)
  809a10:	1805883a 	mov	r2,r3
  809a14:	dfc00217 	ldw	ra,8(sp)
  809a18:	dc400117 	ldw	r17,4(sp)
  809a1c:	dc000017 	ldw	r16,0(sp)
  809a20:	dec00304 	addi	sp,sp,12
  809a24:	f800283a 	ret

00809a28 <__udivdi3>:
  809a28:	defff104 	addi	sp,sp,-60
  809a2c:	0015883a 	mov	r10,zero
  809a30:	2005883a 	mov	r2,r4
  809a34:	3011883a 	mov	r8,r6
  809a38:	df000d15 	stw	fp,52(sp)
  809a3c:	dd400a15 	stw	r21,40(sp)
  809a40:	dcc00815 	stw	r19,32(sp)
  809a44:	dfc00e15 	stw	ra,56(sp)
  809a48:	ddc00c15 	stw	r23,48(sp)
  809a4c:	dd800b15 	stw	r22,44(sp)
  809a50:	dd000915 	stw	r20,36(sp)
  809a54:	dc800715 	stw	r18,28(sp)
  809a58:	dc400615 	stw	r17,24(sp)
  809a5c:	dc000515 	stw	r16,20(sp)
  809a60:	da800315 	stw	r10,12(sp)
  809a64:	4027883a 	mov	r19,r8
  809a68:	1039883a 	mov	fp,r2
  809a6c:	282b883a 	mov	r21,r5
  809a70:	da800415 	stw	r10,16(sp)
  809a74:	3800401e 	bne	r7,zero,809b78 <__udivdi3+0x150>
  809a78:	2a006536 	bltu	r5,r8,809c10 <__udivdi3+0x1e8>
  809a7c:	4000b526 	beq	r8,zero,809d54 <__udivdi3+0x32c>
  809a80:	00bfffd4 	movui	r2,65535
  809a84:	14c0ad36 	bltu	r2,r19,809d3c <__udivdi3+0x314>
  809a88:	00803fc4 	movi	r2,255
  809a8c:	14c15e36 	bltu	r2,r19,80a008 <__udivdi3+0x5e0>
  809a90:	000b883a 	mov	r5,zero
  809a94:	0005883a 	mov	r2,zero
  809a98:	9884d83a 	srl	r2,r19,r2
  809a9c:	01002074 	movhi	r4,129
  809aa0:	21358a04 	addi	r4,r4,-10712
  809aa4:	01800804 	movi	r6,32
  809aa8:	1105883a 	add	r2,r2,r4
  809aac:	10c00003 	ldbu	r3,0(r2)
  809ab0:	28c7883a 	add	r3,r5,r3
  809ab4:	30e9c83a 	sub	r20,r6,r3
  809ab8:	a0010a1e 	bne	r20,zero,809ee4 <__udivdi3+0x4bc>
  809abc:	982ed43a 	srli	r23,r19,16
  809ac0:	acebc83a 	sub	r21,r21,r19
  809ac4:	9dbfffcc 	andi	r22,r19,65535
  809ac8:	05000044 	movi	r20,1
  809acc:	a809883a 	mov	r4,r21
  809ad0:	b80b883a 	mov	r5,r23
  809ad4:	0801bd80 	call	801bd8 <__udivsi3>
  809ad8:	100b883a 	mov	r5,r2
  809adc:	b009883a 	mov	r4,r22
  809ae0:	1021883a 	mov	r16,r2
  809ae4:	0801be80 	call	801be8 <__mulsi3>
  809ae8:	a809883a 	mov	r4,r21
  809aec:	b80b883a 	mov	r5,r23
  809af0:	1023883a 	mov	r17,r2
  809af4:	0801be00 	call	801be0 <__umodsi3>
  809af8:	1004943a 	slli	r2,r2,16
  809afc:	e006d43a 	srli	r3,fp,16
  809b00:	10c4b03a 	or	r2,r2,r3
  809b04:	1440042e 	bgeu	r2,r17,809b18 <__udivdi3+0xf0>
  809b08:	14c5883a 	add	r2,r2,r19
  809b0c:	843fffc4 	addi	r16,r16,-1
  809b10:	14c00136 	bltu	r2,r19,809b18 <__udivdi3+0xf0>
  809b14:	14415c36 	bltu	r2,r17,80a088 <__udivdi3+0x660>
  809b18:	1463c83a 	sub	r17,r2,r17
  809b1c:	8809883a 	mov	r4,r17
  809b20:	b80b883a 	mov	r5,r23
  809b24:	0801bd80 	call	801bd8 <__udivsi3>
  809b28:	100b883a 	mov	r5,r2
  809b2c:	b009883a 	mov	r4,r22
  809b30:	102b883a 	mov	r21,r2
  809b34:	0801be80 	call	801be8 <__mulsi3>
  809b38:	8809883a 	mov	r4,r17
  809b3c:	b80b883a 	mov	r5,r23
  809b40:	1025883a 	mov	r18,r2
  809b44:	0801be00 	call	801be0 <__umodsi3>
  809b48:	1004943a 	slli	r2,r2,16
  809b4c:	e0ffffcc 	andi	r3,fp,65535
  809b50:	10c4b03a 	or	r2,r2,r3
  809b54:	1480042e 	bgeu	r2,r18,809b68 <__udivdi3+0x140>
  809b58:	9885883a 	add	r2,r19,r2
  809b5c:	ad7fffc4 	addi	r21,r21,-1
  809b60:	14c00136 	bltu	r2,r19,809b68 <__udivdi3+0x140>
  809b64:	14813c36 	bltu	r2,r18,80a058 <__udivdi3+0x630>
  809b68:	8004943a 	slli	r2,r16,16
  809b6c:	a009883a 	mov	r4,r20
  809b70:	a884b03a 	or	r2,r21,r2
  809b74:	00001506 	br	809bcc <__udivdi3+0x1a4>
  809b78:	380d883a 	mov	r6,r7
  809b7c:	29c06c36 	bltu	r5,r7,809d30 <__udivdi3+0x308>
  809b80:	00bfffd4 	movui	r2,65535
  809b84:	11c06436 	bltu	r2,r7,809d18 <__udivdi3+0x2f0>
  809b88:	00803fc4 	movi	r2,255
  809b8c:	11c11836 	bltu	r2,r7,809ff0 <__udivdi3+0x5c8>
  809b90:	000b883a 	mov	r5,zero
  809b94:	0005883a 	mov	r2,zero
  809b98:	3084d83a 	srl	r2,r6,r2
  809b9c:	01002074 	movhi	r4,129
  809ba0:	21358a04 	addi	r4,r4,-10712
  809ba4:	01c00804 	movi	r7,32
  809ba8:	1105883a 	add	r2,r2,r4
  809bac:	10c00003 	ldbu	r3,0(r2)
  809bb0:	28c7883a 	add	r3,r5,r3
  809bb4:	38edc83a 	sub	r22,r7,r3
  809bb8:	b000731e 	bne	r22,zero,809d88 <__udivdi3+0x360>
  809bbc:	35400136 	bltu	r6,r21,809bc4 <__udivdi3+0x19c>
  809bc0:	e4c05b36 	bltu	fp,r19,809d30 <__udivdi3+0x308>
  809bc4:	00800044 	movi	r2,1
  809bc8:	0009883a 	mov	r4,zero
  809bcc:	d8800315 	stw	r2,12(sp)
  809bd0:	d9400317 	ldw	r5,12(sp)
  809bd4:	2007883a 	mov	r3,r4
  809bd8:	d9000415 	stw	r4,16(sp)
  809bdc:	2805883a 	mov	r2,r5
  809be0:	dfc00e17 	ldw	ra,56(sp)
  809be4:	df000d17 	ldw	fp,52(sp)
  809be8:	ddc00c17 	ldw	r23,48(sp)
  809bec:	dd800b17 	ldw	r22,44(sp)
  809bf0:	dd400a17 	ldw	r21,40(sp)
  809bf4:	dd000917 	ldw	r20,36(sp)
  809bf8:	dcc00817 	ldw	r19,32(sp)
  809bfc:	dc800717 	ldw	r18,28(sp)
  809c00:	dc400617 	ldw	r17,24(sp)
  809c04:	dc000517 	ldw	r16,20(sp)
  809c08:	dec00f04 	addi	sp,sp,60
  809c0c:	f800283a 	ret
  809c10:	00bfffd4 	movui	r2,65535
  809c14:	12005636 	bltu	r2,r8,809d70 <__udivdi3+0x348>
  809c18:	00803fc4 	movi	r2,255
  809c1c:	12010036 	bltu	r2,r8,80a020 <__udivdi3+0x5f8>
  809c20:	000b883a 	mov	r5,zero
  809c24:	0005883a 	mov	r2,zero
  809c28:	9884d83a 	srl	r2,r19,r2
  809c2c:	01002074 	movhi	r4,129
  809c30:	21358a04 	addi	r4,r4,-10712
  809c34:	01800804 	movi	r6,32
  809c38:	1105883a 	add	r2,r2,r4
  809c3c:	10c00003 	ldbu	r3,0(r2)
  809c40:	28c7883a 	add	r3,r5,r3
  809c44:	30cbc83a 	sub	r5,r6,r3
  809c48:	28000626 	beq	r5,zero,809c64 <__udivdi3+0x23c>
  809c4c:	3145c83a 	sub	r2,r6,r5
  809c50:	e084d83a 	srl	r2,fp,r2
  809c54:	a946983a 	sll	r3,r21,r5
  809c58:	e178983a 	sll	fp,fp,r5
  809c5c:	9966983a 	sll	r19,r19,r5
  809c60:	18aab03a 	or	r21,r3,r2
  809c64:	982ed43a 	srli	r23,r19,16
  809c68:	a809883a 	mov	r4,r21
  809c6c:	9cbfffcc 	andi	r18,r19,65535
  809c70:	b80b883a 	mov	r5,r23
  809c74:	0801bd80 	call	801bd8 <__udivsi3>
  809c78:	100b883a 	mov	r5,r2
  809c7c:	9009883a 	mov	r4,r18
  809c80:	1021883a 	mov	r16,r2
  809c84:	0801be80 	call	801be8 <__mulsi3>
  809c88:	a809883a 	mov	r4,r21
  809c8c:	b80b883a 	mov	r5,r23
  809c90:	1023883a 	mov	r17,r2
  809c94:	0801be00 	call	801be0 <__umodsi3>
  809c98:	1004943a 	slli	r2,r2,16
  809c9c:	e006d43a 	srli	r3,fp,16
  809ca0:	10c4b03a 	or	r2,r2,r3
  809ca4:	1440042e 	bgeu	r2,r17,809cb8 <__udivdi3+0x290>
  809ca8:	14c5883a 	add	r2,r2,r19
  809cac:	843fffc4 	addi	r16,r16,-1
  809cb0:	14c00136 	bltu	r2,r19,809cb8 <__udivdi3+0x290>
  809cb4:	1440ea36 	bltu	r2,r17,80a060 <__udivdi3+0x638>
  809cb8:	1463c83a 	sub	r17,r2,r17
  809cbc:	8809883a 	mov	r4,r17
  809cc0:	b80b883a 	mov	r5,r23
  809cc4:	0801bd80 	call	801bd8 <__udivsi3>
  809cc8:	100b883a 	mov	r5,r2
  809ccc:	9009883a 	mov	r4,r18
  809cd0:	102b883a 	mov	r21,r2
  809cd4:	0801be80 	call	801be8 <__mulsi3>
  809cd8:	8809883a 	mov	r4,r17
  809cdc:	b80b883a 	mov	r5,r23
  809ce0:	1025883a 	mov	r18,r2
  809ce4:	0801be00 	call	801be0 <__umodsi3>
  809ce8:	1004943a 	slli	r2,r2,16
  809cec:	e0ffffcc 	andi	r3,fp,65535
  809cf0:	10c4b03a 	or	r2,r2,r3
  809cf4:	1480042e 	bgeu	r2,r18,809d08 <__udivdi3+0x2e0>
  809cf8:	9885883a 	add	r2,r19,r2
  809cfc:	ad7fffc4 	addi	r21,r21,-1
  809d00:	14c00136 	bltu	r2,r19,809d08 <__udivdi3+0x2e0>
  809d04:	1480d936 	bltu	r2,r18,80a06c <__udivdi3+0x644>
  809d08:	8004943a 	slli	r2,r16,16
  809d0c:	0009883a 	mov	r4,zero
  809d10:	a884b03a 	or	r2,r21,r2
  809d14:	003fad06 	br	809bcc <__udivdi3+0x1a4>
  809d18:	00804034 	movhi	r2,256
  809d1c:	10bfffc4 	addi	r2,r2,-1
  809d20:	11c0b636 	bltu	r2,r7,809ffc <__udivdi3+0x5d4>
  809d24:	01400404 	movi	r5,16
  809d28:	2805883a 	mov	r2,r5
  809d2c:	003f9a06 	br	809b98 <__udivdi3+0x170>
  809d30:	0005883a 	mov	r2,zero
  809d34:	0009883a 	mov	r4,zero
  809d38:	003fa406 	br	809bcc <__udivdi3+0x1a4>
  809d3c:	00804034 	movhi	r2,256
  809d40:	10bfffc4 	addi	r2,r2,-1
  809d44:	14c0b336 	bltu	r2,r19,80a014 <__udivdi3+0x5ec>
  809d48:	01400404 	movi	r5,16
  809d4c:	2805883a 	mov	r2,r5
  809d50:	003f5106 	br	809a98 <__udivdi3+0x70>
  809d54:	01000044 	movi	r4,1
  809d58:	000b883a 	mov	r5,zero
  809d5c:	0801bd80 	call	801bd8 <__udivsi3>
  809d60:	1027883a 	mov	r19,r2
  809d64:	00bfffd4 	movui	r2,65535
  809d68:	14fff436 	bltu	r2,r19,809d3c <__udivdi3+0x314>
  809d6c:	003f4606 	br	809a88 <__udivdi3+0x60>
  809d70:	00804034 	movhi	r2,256
  809d74:	10bfffc4 	addi	r2,r2,-1
  809d78:	1200ac36 	bltu	r2,r8,80a02c <__udivdi3+0x604>
  809d7c:	01400404 	movi	r5,16
  809d80:	2805883a 	mov	r2,r5
  809d84:	003fa806 	br	809c28 <__udivdi3+0x200>
  809d88:	3d85c83a 	sub	r2,r7,r22
  809d8c:	3588983a 	sll	r4,r6,r22
  809d90:	9886d83a 	srl	r3,r19,r2
  809d94:	a8a2d83a 	srl	r17,r21,r2
  809d98:	e084d83a 	srl	r2,fp,r2
  809d9c:	20eeb03a 	or	r23,r4,r3
  809da0:	b824d43a 	srli	r18,r23,16
  809da4:	ad86983a 	sll	r3,r21,r22
  809da8:	8809883a 	mov	r4,r17
  809dac:	900b883a 	mov	r5,r18
  809db0:	1886b03a 	or	r3,r3,r2
  809db4:	d8c00115 	stw	r3,4(sp)
  809db8:	bc3fffcc 	andi	r16,r23,65535
  809dbc:	0801bd80 	call	801bd8 <__udivsi3>
  809dc0:	100b883a 	mov	r5,r2
  809dc4:	8009883a 	mov	r4,r16
  809dc8:	1029883a 	mov	r20,r2
  809dcc:	0801be80 	call	801be8 <__mulsi3>
  809dd0:	900b883a 	mov	r5,r18
  809dd4:	8809883a 	mov	r4,r17
  809dd8:	102b883a 	mov	r21,r2
  809ddc:	0801be00 	call	801be0 <__umodsi3>
  809de0:	d9400117 	ldw	r5,4(sp)
  809de4:	1004943a 	slli	r2,r2,16
  809de8:	9da6983a 	sll	r19,r19,r22
  809dec:	2806d43a 	srli	r3,r5,16
  809df0:	10c4b03a 	or	r2,r2,r3
  809df4:	1540032e 	bgeu	r2,r21,809e04 <__udivdi3+0x3dc>
  809df8:	15c5883a 	add	r2,r2,r23
  809dfc:	a53fffc4 	addi	r20,r20,-1
  809e00:	15c0912e 	bgeu	r2,r23,80a048 <__udivdi3+0x620>
  809e04:	1563c83a 	sub	r17,r2,r21
  809e08:	8809883a 	mov	r4,r17
  809e0c:	900b883a 	mov	r5,r18
  809e10:	0801bd80 	call	801bd8 <__udivsi3>
  809e14:	100b883a 	mov	r5,r2
  809e18:	8009883a 	mov	r4,r16
  809e1c:	102b883a 	mov	r21,r2
  809e20:	0801be80 	call	801be8 <__mulsi3>
  809e24:	8809883a 	mov	r4,r17
  809e28:	900b883a 	mov	r5,r18
  809e2c:	1021883a 	mov	r16,r2
  809e30:	0801be00 	call	801be0 <__umodsi3>
  809e34:	da800117 	ldw	r10,4(sp)
  809e38:	1004943a 	slli	r2,r2,16
  809e3c:	50ffffcc 	andi	r3,r10,65535
  809e40:	10c6b03a 	or	r3,r2,r3
  809e44:	1c00032e 	bgeu	r3,r16,809e54 <__udivdi3+0x42c>
  809e48:	1dc7883a 	add	r3,r3,r23
  809e4c:	ad7fffc4 	addi	r21,r21,-1
  809e50:	1dc0792e 	bgeu	r3,r23,80a038 <__udivdi3+0x610>
  809e54:	a004943a 	slli	r2,r20,16
  809e58:	982ed43a 	srli	r23,r19,16
  809e5c:	9cffffcc 	andi	r19,r19,65535
  809e60:	a8a4b03a 	or	r18,r21,r2
  809e64:	947fffcc 	andi	r17,r18,65535
  809e68:	902ad43a 	srli	r21,r18,16
  809e6c:	8809883a 	mov	r4,r17
  809e70:	980b883a 	mov	r5,r19
  809e74:	1c21c83a 	sub	r16,r3,r16
  809e78:	0801be80 	call	801be8 <__mulsi3>
  809e7c:	8809883a 	mov	r4,r17
  809e80:	b80b883a 	mov	r5,r23
  809e84:	1029883a 	mov	r20,r2
  809e88:	0801be80 	call	801be8 <__mulsi3>
  809e8c:	980b883a 	mov	r5,r19
  809e90:	a809883a 	mov	r4,r21
  809e94:	1023883a 	mov	r17,r2
  809e98:	0801be80 	call	801be8 <__mulsi3>
  809e9c:	a809883a 	mov	r4,r21
  809ea0:	b80b883a 	mov	r5,r23
  809ea4:	1027883a 	mov	r19,r2
  809ea8:	0801be80 	call	801be8 <__mulsi3>
  809eac:	1009883a 	mov	r4,r2
  809eb0:	a004d43a 	srli	r2,r20,16
  809eb4:	8ce3883a 	add	r17,r17,r19
  809eb8:	1447883a 	add	r3,r2,r17
  809ebc:	1cc0022e 	bgeu	r3,r19,809ec8 <__udivdi3+0x4a0>
  809ec0:	00800074 	movhi	r2,1
  809ec4:	2089883a 	add	r4,r4,r2
  809ec8:	1804d43a 	srli	r2,r3,16
  809ecc:	2085883a 	add	r2,r4,r2
  809ed0:	80804436 	bltu	r16,r2,809fe4 <__udivdi3+0x5bc>
  809ed4:	80803e26 	beq	r16,r2,809fd0 <__udivdi3+0x5a8>
  809ed8:	9005883a 	mov	r2,r18
  809edc:	0009883a 	mov	r4,zero
  809ee0:	003f3a06 	br	809bcc <__udivdi3+0x1a4>
  809ee4:	9d26983a 	sll	r19,r19,r20
  809ee8:	3505c83a 	sub	r2,r6,r20
  809eec:	a8a2d83a 	srl	r17,r21,r2
  809ef0:	982ed43a 	srli	r23,r19,16
  809ef4:	e084d83a 	srl	r2,fp,r2
  809ef8:	ad06983a 	sll	r3,r21,r20
  809efc:	8809883a 	mov	r4,r17
  809f00:	b80b883a 	mov	r5,r23
  809f04:	1886b03a 	or	r3,r3,r2
  809f08:	d8c00015 	stw	r3,0(sp)
  809f0c:	9dbfffcc 	andi	r22,r19,65535
  809f10:	0801bd80 	call	801bd8 <__udivsi3>
  809f14:	100b883a 	mov	r5,r2
  809f18:	b009883a 	mov	r4,r22
  809f1c:	d8800215 	stw	r2,8(sp)
  809f20:	0801be80 	call	801be8 <__mulsi3>
  809f24:	8809883a 	mov	r4,r17
  809f28:	b80b883a 	mov	r5,r23
  809f2c:	102b883a 	mov	r21,r2
  809f30:	0801be00 	call	801be0 <__umodsi3>
  809f34:	d9000017 	ldw	r4,0(sp)
  809f38:	1004943a 	slli	r2,r2,16
  809f3c:	2006d43a 	srli	r3,r4,16
  809f40:	10c4b03a 	or	r2,r2,r3
  809f44:	1540052e 	bgeu	r2,r21,809f5c <__udivdi3+0x534>
  809f48:	d9400217 	ldw	r5,8(sp)
  809f4c:	14c5883a 	add	r2,r2,r19
  809f50:	297fffc4 	addi	r5,r5,-1
  809f54:	d9400215 	stw	r5,8(sp)
  809f58:	14c0462e 	bgeu	r2,r19,80a074 <__udivdi3+0x64c>
  809f5c:	1563c83a 	sub	r17,r2,r21
  809f60:	8809883a 	mov	r4,r17
  809f64:	b80b883a 	mov	r5,r23
  809f68:	0801bd80 	call	801bd8 <__udivsi3>
  809f6c:	100b883a 	mov	r5,r2
  809f70:	b009883a 	mov	r4,r22
  809f74:	1025883a 	mov	r18,r2
  809f78:	0801be80 	call	801be8 <__mulsi3>
  809f7c:	8809883a 	mov	r4,r17
  809f80:	b80b883a 	mov	r5,r23
  809f84:	1021883a 	mov	r16,r2
  809f88:	0801be00 	call	801be0 <__umodsi3>
  809f8c:	da800017 	ldw	r10,0(sp)
  809f90:	1004943a 	slli	r2,r2,16
  809f94:	50ffffcc 	andi	r3,r10,65535
  809f98:	10c6b03a 	or	r3,r2,r3
  809f9c:	1c00062e 	bgeu	r3,r16,809fb8 <__udivdi3+0x590>
  809fa0:	1cc7883a 	add	r3,r3,r19
  809fa4:	94bfffc4 	addi	r18,r18,-1
  809fa8:	1cc00336 	bltu	r3,r19,809fb8 <__udivdi3+0x590>
  809fac:	1c00022e 	bgeu	r3,r16,809fb8 <__udivdi3+0x590>
  809fb0:	94bfffc4 	addi	r18,r18,-1
  809fb4:	1cc7883a 	add	r3,r3,r19
  809fb8:	d9000217 	ldw	r4,8(sp)
  809fbc:	e538983a 	sll	fp,fp,r20
  809fc0:	1c2bc83a 	sub	r21,r3,r16
  809fc4:	2004943a 	slli	r2,r4,16
  809fc8:	90a8b03a 	or	r20,r18,r2
  809fcc:	003ebf06 	br	809acc <__udivdi3+0xa4>
  809fd0:	1804943a 	slli	r2,r3,16
  809fd4:	e588983a 	sll	r4,fp,r22
  809fd8:	a0ffffcc 	andi	r3,r20,65535
  809fdc:	10c5883a 	add	r2,r2,r3
  809fe0:	20bfbd2e 	bgeu	r4,r2,809ed8 <__udivdi3+0x4b0>
  809fe4:	90bfffc4 	addi	r2,r18,-1
  809fe8:	0009883a 	mov	r4,zero
  809fec:	003ef706 	br	809bcc <__udivdi3+0x1a4>
  809ff0:	01400204 	movi	r5,8
  809ff4:	2805883a 	mov	r2,r5
  809ff8:	003ee706 	br	809b98 <__udivdi3+0x170>
  809ffc:	01400604 	movi	r5,24
  80a000:	2805883a 	mov	r2,r5
  80a004:	003ee406 	br	809b98 <__udivdi3+0x170>
  80a008:	01400204 	movi	r5,8
  80a00c:	2805883a 	mov	r2,r5
  80a010:	003ea106 	br	809a98 <__udivdi3+0x70>
  80a014:	01400604 	movi	r5,24
  80a018:	2805883a 	mov	r2,r5
  80a01c:	003e9e06 	br	809a98 <__udivdi3+0x70>
  80a020:	01400204 	movi	r5,8
  80a024:	2805883a 	mov	r2,r5
  80a028:	003eff06 	br	809c28 <__udivdi3+0x200>
  80a02c:	01400604 	movi	r5,24
  80a030:	2805883a 	mov	r2,r5
  80a034:	003efc06 	br	809c28 <__udivdi3+0x200>
  80a038:	1c3f862e 	bgeu	r3,r16,809e54 <__udivdi3+0x42c>
  80a03c:	1dc7883a 	add	r3,r3,r23
  80a040:	ad7fffc4 	addi	r21,r21,-1
  80a044:	003f8306 	br	809e54 <__udivdi3+0x42c>
  80a048:	157f6e2e 	bgeu	r2,r21,809e04 <__udivdi3+0x3dc>
  80a04c:	a53fffc4 	addi	r20,r20,-1
  80a050:	15c5883a 	add	r2,r2,r23
  80a054:	003f6b06 	br	809e04 <__udivdi3+0x3dc>
  80a058:	ad7fffc4 	addi	r21,r21,-1
  80a05c:	003ec206 	br	809b68 <__udivdi3+0x140>
  80a060:	843fffc4 	addi	r16,r16,-1
  80a064:	14c5883a 	add	r2,r2,r19
  80a068:	003f1306 	br	809cb8 <__udivdi3+0x290>
  80a06c:	ad7fffc4 	addi	r21,r21,-1
  80a070:	003f2506 	br	809d08 <__udivdi3+0x2e0>
  80a074:	157fb92e 	bgeu	r2,r21,809f5c <__udivdi3+0x534>
  80a078:	297fffc4 	addi	r5,r5,-1
  80a07c:	14c5883a 	add	r2,r2,r19
  80a080:	d9400215 	stw	r5,8(sp)
  80a084:	003fb506 	br	809f5c <__udivdi3+0x534>
  80a088:	843fffc4 	addi	r16,r16,-1
  80a08c:	14c5883a 	add	r2,r2,r19
  80a090:	003ea106 	br	809b18 <__udivdi3+0xf0>

0080a094 <__umoddi3>:
  80a094:	defff004 	addi	sp,sp,-64
  80a098:	3011883a 	mov	r8,r6
  80a09c:	000d883a 	mov	r6,zero
  80a0a0:	dd400b15 	stw	r21,44(sp)
  80a0a4:	dcc00915 	stw	r19,36(sp)
  80a0a8:	dc000615 	stw	r16,24(sp)
  80a0ac:	dfc00f15 	stw	ra,60(sp)
  80a0b0:	df000e15 	stw	fp,56(sp)
  80a0b4:	ddc00d15 	stw	r23,52(sp)
  80a0b8:	dd800c15 	stw	r22,48(sp)
  80a0bc:	dd000a15 	stw	r20,40(sp)
  80a0c0:	dc800815 	stw	r18,32(sp)
  80a0c4:	dc400715 	stw	r17,28(sp)
  80a0c8:	2817883a 	mov	r11,r5
  80a0cc:	d9800415 	stw	r6,16(sp)
  80a0d0:	4027883a 	mov	r19,r8
  80a0d4:	d9800515 	stw	r6,20(sp)
  80a0d8:	2021883a 	mov	r16,r4
  80a0dc:	282b883a 	mov	r21,r5
  80a0e0:	38002c1e 	bne	r7,zero,80a194 <__umoddi3+0x100>
  80a0e4:	2a005636 	bltu	r5,r8,80a240 <__umoddi3+0x1ac>
  80a0e8:	40009a26 	beq	r8,zero,80a354 <__umoddi3+0x2c0>
  80a0ec:	00bfffd4 	movui	r2,65535
  80a0f0:	14c09236 	bltu	r2,r19,80a33c <__umoddi3+0x2a8>
  80a0f4:	00803fc4 	movi	r2,255
  80a0f8:	14c15c36 	bltu	r2,r19,80a66c <__umoddi3+0x5d8>
  80a0fc:	000b883a 	mov	r5,zero
  80a100:	0005883a 	mov	r2,zero
  80a104:	9884d83a 	srl	r2,r19,r2
  80a108:	01002074 	movhi	r4,129
  80a10c:	21358a04 	addi	r4,r4,-10712
  80a110:	01800804 	movi	r6,32
  80a114:	1105883a 	add	r2,r2,r4
  80a118:	10c00003 	ldbu	r3,0(r2)
  80a11c:	28c7883a 	add	r3,r5,r3
  80a120:	30e5c83a 	sub	r18,r6,r3
  80a124:	9000a41e 	bne	r18,zero,80a3b8 <__umoddi3+0x324>
  80a128:	982ed43a 	srli	r23,r19,16
  80a12c:	acebc83a 	sub	r21,r21,r19
  80a130:	9d3fffcc 	andi	r20,r19,65535
  80a134:	002d883a 	mov	r22,zero
  80a138:	a809883a 	mov	r4,r21
  80a13c:	b80b883a 	mov	r5,r23
  80a140:	0801bd80 	call	801bd8 <__udivsi3>
  80a144:	100b883a 	mov	r5,r2
  80a148:	a009883a 	mov	r4,r20
  80a14c:	0801be80 	call	801be8 <__mulsi3>
  80a150:	a809883a 	mov	r4,r21
  80a154:	b80b883a 	mov	r5,r23
  80a158:	1023883a 	mov	r17,r2
  80a15c:	0801be00 	call	801be0 <__umodsi3>
  80a160:	1004943a 	slli	r2,r2,16
  80a164:	8006d43a 	srli	r3,r16,16
  80a168:	10c4b03a 	or	r2,r2,r3
  80a16c:	1440032e 	bgeu	r2,r17,80a17c <__umoddi3+0xe8>
  80a170:	14c5883a 	add	r2,r2,r19
  80a174:	14c00136 	bltu	r2,r19,80a17c <__umoddi3+0xe8>
  80a178:	14415836 	bltu	r2,r17,80a6dc <__umoddi3+0x648>
  80a17c:	1463c83a 	sub	r17,r2,r17
  80a180:	8809883a 	mov	r4,r17
  80a184:	b80b883a 	mov	r5,r23
  80a188:	0801bd80 	call	801bd8 <__udivsi3>
  80a18c:	a009883a 	mov	r4,r20
  80a190:	00005306 	br	80a2e0 <__umoddi3+0x24c>
  80a194:	380d883a 	mov	r6,r7
  80a198:	29c0132e 	bgeu	r5,r7,80a1e8 <__umoddi3+0x154>
  80a19c:	d9000415 	stw	r4,16(sp)
  80a1a0:	d9400515 	stw	r5,20(sp)
  80a1a4:	d9400417 	ldw	r5,16(sp)
  80a1a8:	5813883a 	mov	r9,r11
  80a1ac:	2811883a 	mov	r8,r5
  80a1b0:	4005883a 	mov	r2,r8
  80a1b4:	4807883a 	mov	r3,r9
  80a1b8:	dfc00f17 	ldw	ra,60(sp)
  80a1bc:	df000e17 	ldw	fp,56(sp)
  80a1c0:	ddc00d17 	ldw	r23,52(sp)
  80a1c4:	dd800c17 	ldw	r22,48(sp)
  80a1c8:	dd400b17 	ldw	r21,44(sp)
  80a1cc:	dd000a17 	ldw	r20,40(sp)
  80a1d0:	dcc00917 	ldw	r19,36(sp)
  80a1d4:	dc800817 	ldw	r18,32(sp)
  80a1d8:	dc400717 	ldw	r17,28(sp)
  80a1dc:	dc000617 	ldw	r16,24(sp)
  80a1e0:	dec01004 	addi	sp,sp,64
  80a1e4:	f800283a 	ret
  80a1e8:	00bfffd4 	movui	r2,65535
  80a1ec:	11c06636 	bltu	r2,r7,80a388 <__umoddi3+0x2f4>
  80a1f0:	00803fc4 	movi	r2,255
  80a1f4:	11c12036 	bltu	r2,r7,80a678 <__umoddi3+0x5e4>
  80a1f8:	000b883a 	mov	r5,zero
  80a1fc:	0005883a 	mov	r2,zero
  80a200:	3084d83a 	srl	r2,r6,r2
  80a204:	01002074 	movhi	r4,129
  80a208:	21358a04 	addi	r4,r4,-10712
  80a20c:	01c00804 	movi	r7,32
  80a210:	1105883a 	add	r2,r2,r4
  80a214:	10c00003 	ldbu	r3,0(r2)
  80a218:	28c7883a 	add	r3,r5,r3
  80a21c:	38e5c83a 	sub	r18,r7,r3
  80a220:	9000941e 	bne	r18,zero,80a474 <__umoddi3+0x3e0>
  80a224:	35405e36 	bltu	r6,r21,80a3a0 <__umoddi3+0x30c>
  80a228:	84c05d2e 	bgeu	r16,r19,80a3a0 <__umoddi3+0x30c>
  80a22c:	8011883a 	mov	r8,r16
  80a230:	a813883a 	mov	r9,r21
  80a234:	dc000415 	stw	r16,16(sp)
  80a238:	dd400515 	stw	r21,20(sp)
  80a23c:	003fdc06 	br	80a1b0 <__umoddi3+0x11c>
  80a240:	00bfffd4 	movui	r2,65535
  80a244:	12004a36 	bltu	r2,r8,80a370 <__umoddi3+0x2dc>
  80a248:	00803fc4 	movi	r2,255
  80a24c:	12010d36 	bltu	r2,r8,80a684 <__umoddi3+0x5f0>
  80a250:	000b883a 	mov	r5,zero
  80a254:	0005883a 	mov	r2,zero
  80a258:	9884d83a 	srl	r2,r19,r2
  80a25c:	01002074 	movhi	r4,129
  80a260:	21358a04 	addi	r4,r4,-10712
  80a264:	01800804 	movi	r6,32
  80a268:	1105883a 	add	r2,r2,r4
  80a26c:	10c00003 	ldbu	r3,0(r2)
  80a270:	28c7883a 	add	r3,r5,r3
  80a274:	30c7c83a 	sub	r3,r6,r3
  80a278:	1800dc1e 	bne	r3,zero,80a5ec <__umoddi3+0x558>
  80a27c:	002d883a 	mov	r22,zero
  80a280:	982ed43a 	srli	r23,r19,16
  80a284:	a809883a 	mov	r4,r21
  80a288:	9cbfffcc 	andi	r18,r19,65535
  80a28c:	b80b883a 	mov	r5,r23
  80a290:	0801bd80 	call	801bd8 <__udivsi3>
  80a294:	100b883a 	mov	r5,r2
  80a298:	9009883a 	mov	r4,r18
  80a29c:	0801be80 	call	801be8 <__mulsi3>
  80a2a0:	a809883a 	mov	r4,r21
  80a2a4:	b80b883a 	mov	r5,r23
  80a2a8:	1023883a 	mov	r17,r2
  80a2ac:	0801be00 	call	801be0 <__umodsi3>
  80a2b0:	1004943a 	slli	r2,r2,16
  80a2b4:	8006d43a 	srli	r3,r16,16
  80a2b8:	10c4b03a 	or	r2,r2,r3
  80a2bc:	1440032e 	bgeu	r2,r17,80a2cc <__umoddi3+0x238>
  80a2c0:	14c5883a 	add	r2,r2,r19
  80a2c4:	14c00136 	bltu	r2,r19,80a2cc <__umoddi3+0x238>
  80a2c8:	14410236 	bltu	r2,r17,80a6d4 <__umoddi3+0x640>
  80a2cc:	1463c83a 	sub	r17,r2,r17
  80a2d0:	8809883a 	mov	r4,r17
  80a2d4:	b80b883a 	mov	r5,r23
  80a2d8:	0801bd80 	call	801bd8 <__udivsi3>
  80a2dc:	9009883a 	mov	r4,r18
  80a2e0:	100b883a 	mov	r5,r2
  80a2e4:	0801be80 	call	801be8 <__mulsi3>
  80a2e8:	8809883a 	mov	r4,r17
  80a2ec:	b80b883a 	mov	r5,r23
  80a2f0:	102b883a 	mov	r21,r2
  80a2f4:	0801be00 	call	801be0 <__umodsi3>
  80a2f8:	1004943a 	slli	r2,r2,16
  80a2fc:	80ffffcc 	andi	r3,r16,65535
  80a300:	10c4b03a 	or	r2,r2,r3
  80a304:	1540042e 	bgeu	r2,r21,80a318 <__umoddi3+0x284>
  80a308:	14c5883a 	add	r2,r2,r19
  80a30c:	14c00236 	bltu	r2,r19,80a318 <__umoddi3+0x284>
  80a310:	1540012e 	bgeu	r2,r21,80a318 <__umoddi3+0x284>
  80a314:	14c5883a 	add	r2,r2,r19
  80a318:	1545c83a 	sub	r2,r2,r21
  80a31c:	1584d83a 	srl	r2,r2,r22
  80a320:	0013883a 	mov	r9,zero
  80a324:	d8800415 	stw	r2,16(sp)
  80a328:	d8c00417 	ldw	r3,16(sp)
  80a32c:	0005883a 	mov	r2,zero
  80a330:	d8800515 	stw	r2,20(sp)
  80a334:	1811883a 	mov	r8,r3
  80a338:	003f9d06 	br	80a1b0 <__umoddi3+0x11c>
  80a33c:	00804034 	movhi	r2,256
  80a340:	10bfffc4 	addi	r2,r2,-1
  80a344:	14c0c636 	bltu	r2,r19,80a660 <__umoddi3+0x5cc>
  80a348:	01400404 	movi	r5,16
  80a34c:	2805883a 	mov	r2,r5
  80a350:	003f6c06 	br	80a104 <__umoddi3+0x70>
  80a354:	01000044 	movi	r4,1
  80a358:	000b883a 	mov	r5,zero
  80a35c:	0801bd80 	call	801bd8 <__udivsi3>
  80a360:	1027883a 	mov	r19,r2
  80a364:	00bfffd4 	movui	r2,65535
  80a368:	14fff436 	bltu	r2,r19,80a33c <__umoddi3+0x2a8>
  80a36c:	003f6106 	br	80a0f4 <__umoddi3+0x60>
  80a370:	00804034 	movhi	r2,256
  80a374:	10bfffc4 	addi	r2,r2,-1
  80a378:	1200c536 	bltu	r2,r8,80a690 <__umoddi3+0x5fc>
  80a37c:	01400404 	movi	r5,16
  80a380:	2805883a 	mov	r2,r5
  80a384:	003fb406 	br	80a258 <__umoddi3+0x1c4>
  80a388:	00804034 	movhi	r2,256
  80a38c:	10bfffc4 	addi	r2,r2,-1
  80a390:	11c0c236 	bltu	r2,r7,80a69c <__umoddi3+0x608>
  80a394:	01400404 	movi	r5,16
  80a398:	2805883a 	mov	r2,r5
  80a39c:	003f9806 	br	80a200 <__umoddi3+0x16c>
  80a3a0:	84c9c83a 	sub	r4,r16,r19
  80a3a4:	8105803a 	cmpltu	r2,r16,r4
  80a3a8:	a987c83a 	sub	r3,r21,r6
  80a3ac:	18abc83a 	sub	r21,r3,r2
  80a3b0:	2021883a 	mov	r16,r4
  80a3b4:	003f9d06 	br	80a22c <__umoddi3+0x198>
  80a3b8:	9ca6983a 	sll	r19,r19,r18
  80a3bc:	3485c83a 	sub	r2,r6,r18
  80a3c0:	a8a2d83a 	srl	r17,r21,r2
  80a3c4:	982ed43a 	srli	r23,r19,16
  80a3c8:	ac86983a 	sll	r3,r21,r18
  80a3cc:	8084d83a 	srl	r2,r16,r2
  80a3d0:	8809883a 	mov	r4,r17
  80a3d4:	b80b883a 	mov	r5,r23
  80a3d8:	18b8b03a 	or	fp,r3,r2
  80a3dc:	9d3fffcc 	andi	r20,r19,65535
  80a3e0:	0801bd80 	call	801bd8 <__udivsi3>
  80a3e4:	100b883a 	mov	r5,r2
  80a3e8:	a009883a 	mov	r4,r20
  80a3ec:	0801be80 	call	801be8 <__mulsi3>
  80a3f0:	8809883a 	mov	r4,r17
  80a3f4:	b80b883a 	mov	r5,r23
  80a3f8:	102b883a 	mov	r21,r2
  80a3fc:	0801be00 	call	801be0 <__umodsi3>
  80a400:	1004943a 	slli	r2,r2,16
  80a404:	e006d43a 	srli	r3,fp,16
  80a408:	902d883a 	mov	r22,r18
  80a40c:	10c4b03a 	or	r2,r2,r3
  80a410:	1540022e 	bgeu	r2,r21,80a41c <__umoddi3+0x388>
  80a414:	14c5883a 	add	r2,r2,r19
  80a418:	14c0ab2e 	bgeu	r2,r19,80a6c8 <__umoddi3+0x634>
  80a41c:	1563c83a 	sub	r17,r2,r21
  80a420:	8809883a 	mov	r4,r17
  80a424:	b80b883a 	mov	r5,r23
  80a428:	0801bd80 	call	801bd8 <__udivsi3>
  80a42c:	100b883a 	mov	r5,r2
  80a430:	a009883a 	mov	r4,r20
  80a434:	0801be80 	call	801be8 <__mulsi3>
  80a438:	8809883a 	mov	r4,r17
  80a43c:	b80b883a 	mov	r5,r23
  80a440:	102b883a 	mov	r21,r2
  80a444:	0801be00 	call	801be0 <__umodsi3>
  80a448:	1004943a 	slli	r2,r2,16
  80a44c:	e0ffffcc 	andi	r3,fp,65535
  80a450:	10c4b03a 	or	r2,r2,r3
  80a454:	1540042e 	bgeu	r2,r21,80a468 <__umoddi3+0x3d4>
  80a458:	14c5883a 	add	r2,r2,r19
  80a45c:	14c00236 	bltu	r2,r19,80a468 <__umoddi3+0x3d4>
  80a460:	1540012e 	bgeu	r2,r21,80a468 <__umoddi3+0x3d4>
  80a464:	14c5883a 	add	r2,r2,r19
  80a468:	84a0983a 	sll	r16,r16,r18
  80a46c:	156bc83a 	sub	r21,r2,r21
  80a470:	003f3106 	br	80a138 <__umoddi3+0xa4>
  80a474:	3c8fc83a 	sub	r7,r7,r18
  80a478:	3486983a 	sll	r3,r6,r18
  80a47c:	99c4d83a 	srl	r2,r19,r7
  80a480:	a9e2d83a 	srl	r17,r21,r7
  80a484:	ac8c983a 	sll	r6,r21,r18
  80a488:	18acb03a 	or	r22,r3,r2
  80a48c:	b02ed43a 	srli	r23,r22,16
  80a490:	81c4d83a 	srl	r2,r16,r7
  80a494:	8809883a 	mov	r4,r17
  80a498:	b80b883a 	mov	r5,r23
  80a49c:	308cb03a 	or	r6,r6,r2
  80a4a0:	d9c00315 	stw	r7,12(sp)
  80a4a4:	d9800215 	stw	r6,8(sp)
  80a4a8:	b53fffcc 	andi	r20,r22,65535
  80a4ac:	0801bd80 	call	801bd8 <__udivsi3>
  80a4b0:	100b883a 	mov	r5,r2
  80a4b4:	a009883a 	mov	r4,r20
  80a4b8:	1039883a 	mov	fp,r2
  80a4bc:	0801be80 	call	801be8 <__mulsi3>
  80a4c0:	8809883a 	mov	r4,r17
  80a4c4:	b80b883a 	mov	r5,r23
  80a4c8:	102b883a 	mov	r21,r2
  80a4cc:	0801be00 	call	801be0 <__umodsi3>
  80a4d0:	d9000217 	ldw	r4,8(sp)
  80a4d4:	1004943a 	slli	r2,r2,16
  80a4d8:	9ca6983a 	sll	r19,r19,r18
  80a4dc:	2006d43a 	srli	r3,r4,16
  80a4e0:	84a0983a 	sll	r16,r16,r18
  80a4e4:	dcc00015 	stw	r19,0(sp)
  80a4e8:	10c4b03a 	or	r2,r2,r3
  80a4ec:	dc000115 	stw	r16,4(sp)
  80a4f0:	1540032e 	bgeu	r2,r21,80a500 <__umoddi3+0x46c>
  80a4f4:	1585883a 	add	r2,r2,r22
  80a4f8:	e73fffc4 	addi	fp,fp,-1
  80a4fc:	15806e2e 	bgeu	r2,r22,80a6b8 <__umoddi3+0x624>
  80a500:	1563c83a 	sub	r17,r2,r21
  80a504:	8809883a 	mov	r4,r17
  80a508:	b80b883a 	mov	r5,r23
  80a50c:	0801bd80 	call	801bd8 <__udivsi3>
  80a510:	100b883a 	mov	r5,r2
  80a514:	a009883a 	mov	r4,r20
  80a518:	1021883a 	mov	r16,r2
  80a51c:	0801be80 	call	801be8 <__mulsi3>
  80a520:	b80b883a 	mov	r5,r23
  80a524:	8809883a 	mov	r4,r17
  80a528:	1029883a 	mov	r20,r2
  80a52c:	0801be00 	call	801be0 <__umodsi3>
  80a530:	d9400217 	ldw	r5,8(sp)
  80a534:	1004943a 	slli	r2,r2,16
  80a538:	28ffffcc 	andi	r3,r5,65535
  80a53c:	10c4b03a 	or	r2,r2,r3
  80a540:	1500032e 	bgeu	r2,r20,80a550 <__umoddi3+0x4bc>
  80a544:	1585883a 	add	r2,r2,r22
  80a548:	843fffc4 	addi	r16,r16,-1
  80a54c:	1580562e 	bgeu	r2,r22,80a6a8 <__umoddi3+0x614>
  80a550:	d9800017 	ldw	r6,0(sp)
  80a554:	e022943a 	slli	r17,fp,16
  80a558:	302ed43a 	srli	r23,r6,16
  80a55c:	8462b03a 	or	r17,r16,r17
  80a560:	34ffffcc 	andi	r19,r6,65535
  80a564:	882ad43a 	srli	r21,r17,16
  80a568:	8c7fffcc 	andi	r17,r17,65535
  80a56c:	8809883a 	mov	r4,r17
  80a570:	980b883a 	mov	r5,r19
  80a574:	1521c83a 	sub	r16,r2,r20
  80a578:	0801be80 	call	801be8 <__mulsi3>
  80a57c:	8809883a 	mov	r4,r17
  80a580:	b80b883a 	mov	r5,r23
  80a584:	1029883a 	mov	r20,r2
  80a588:	0801be80 	call	801be8 <__mulsi3>
  80a58c:	980b883a 	mov	r5,r19
  80a590:	a809883a 	mov	r4,r21
  80a594:	1023883a 	mov	r17,r2
  80a598:	0801be80 	call	801be8 <__mulsi3>
  80a59c:	a809883a 	mov	r4,r21
  80a5a0:	b80b883a 	mov	r5,r23
  80a5a4:	1027883a 	mov	r19,r2
  80a5a8:	0801be80 	call	801be8 <__mulsi3>
  80a5ac:	100b883a 	mov	r5,r2
  80a5b0:	a004d43a 	srli	r2,r20,16
  80a5b4:	8ce3883a 	add	r17,r17,r19
  80a5b8:	1449883a 	add	r4,r2,r17
  80a5bc:	24c0022e 	bgeu	r4,r19,80a5c8 <__umoddi3+0x534>
  80a5c0:	00800074 	movhi	r2,1
  80a5c4:	288b883a 	add	r5,r5,r2
  80a5c8:	2004d43a 	srli	r2,r4,16
  80a5cc:	2008943a 	slli	r4,r4,16
  80a5d0:	a0ffffcc 	andi	r3,r20,65535
  80a5d4:	288d883a 	add	r6,r5,r2
  80a5d8:	20c9883a 	add	r4,r4,r3
  80a5dc:	81800b36 	bltu	r16,r6,80a60c <__umoddi3+0x578>
  80a5e0:	81804026 	beq	r16,r6,80a6e4 <__umoddi3+0x650>
  80a5e4:	818dc83a 	sub	r6,r16,r6
  80a5e8:	00000f06 	br	80a628 <__umoddi3+0x594>
  80a5ec:	30c5c83a 	sub	r2,r6,r3
  80a5f0:	182d883a 	mov	r22,r3
  80a5f4:	8084d83a 	srl	r2,r16,r2
  80a5f8:	a8c6983a 	sll	r3,r21,r3
  80a5fc:	9da6983a 	sll	r19,r19,r22
  80a600:	85a0983a 	sll	r16,r16,r22
  80a604:	18aab03a 	or	r21,r3,r2
  80a608:	003f1d06 	br	80a280 <__umoddi3+0x1ec>
  80a60c:	d8c00017 	ldw	r3,0(sp)
  80a610:	20c5c83a 	sub	r2,r4,r3
  80a614:	2089803a 	cmpltu	r4,r4,r2
  80a618:	3587c83a 	sub	r3,r6,r22
  80a61c:	1907c83a 	sub	r3,r3,r4
  80a620:	80cdc83a 	sub	r6,r16,r3
  80a624:	1009883a 	mov	r4,r2
  80a628:	d9400117 	ldw	r5,4(sp)
  80a62c:	2905c83a 	sub	r2,r5,r4
  80a630:	2887803a 	cmpltu	r3,r5,r2
  80a634:	30c7c83a 	sub	r3,r6,r3
  80a638:	d9800317 	ldw	r6,12(sp)
  80a63c:	1484d83a 	srl	r2,r2,r18
  80a640:	1988983a 	sll	r4,r3,r6
  80a644:	1c86d83a 	srl	r3,r3,r18
  80a648:	2088b03a 	or	r4,r4,r2
  80a64c:	2011883a 	mov	r8,r4
  80a650:	1813883a 	mov	r9,r3
  80a654:	d9000415 	stw	r4,16(sp)
  80a658:	d8c00515 	stw	r3,20(sp)
  80a65c:	003ed406 	br	80a1b0 <__umoddi3+0x11c>
  80a660:	01400604 	movi	r5,24
  80a664:	2805883a 	mov	r2,r5
  80a668:	003ea606 	br	80a104 <__umoddi3+0x70>
  80a66c:	01400204 	movi	r5,8
  80a670:	2805883a 	mov	r2,r5
  80a674:	003ea306 	br	80a104 <__umoddi3+0x70>
  80a678:	01400204 	movi	r5,8
  80a67c:	2805883a 	mov	r2,r5
  80a680:	003edf06 	br	80a200 <__umoddi3+0x16c>
  80a684:	01400204 	movi	r5,8
  80a688:	2805883a 	mov	r2,r5
  80a68c:	003ef206 	br	80a258 <__umoddi3+0x1c4>
  80a690:	01400604 	movi	r5,24
  80a694:	2805883a 	mov	r2,r5
  80a698:	003eef06 	br	80a258 <__umoddi3+0x1c4>
  80a69c:	01400604 	movi	r5,24
  80a6a0:	2805883a 	mov	r2,r5
  80a6a4:	003ed606 	br	80a200 <__umoddi3+0x16c>
  80a6a8:	153fa92e 	bgeu	r2,r20,80a550 <__umoddi3+0x4bc>
  80a6ac:	843fffc4 	addi	r16,r16,-1
  80a6b0:	1585883a 	add	r2,r2,r22
  80a6b4:	003fa606 	br	80a550 <__umoddi3+0x4bc>
  80a6b8:	157f912e 	bgeu	r2,r21,80a500 <__umoddi3+0x46c>
  80a6bc:	e73fffc4 	addi	fp,fp,-1
  80a6c0:	1585883a 	add	r2,r2,r22
  80a6c4:	003f8e06 	br	80a500 <__umoddi3+0x46c>
  80a6c8:	157f542e 	bgeu	r2,r21,80a41c <__umoddi3+0x388>
  80a6cc:	14c5883a 	add	r2,r2,r19
  80a6d0:	003f5206 	br	80a41c <__umoddi3+0x388>
  80a6d4:	14c5883a 	add	r2,r2,r19
  80a6d8:	003efc06 	br	80a2cc <__umoddi3+0x238>
  80a6dc:	14c5883a 	add	r2,r2,r19
  80a6e0:	003ea606 	br	80a17c <__umoddi3+0xe8>
  80a6e4:	d8800117 	ldw	r2,4(sp)
  80a6e8:	113fc836 	bltu	r2,r4,80a60c <__umoddi3+0x578>
  80a6ec:	000d883a 	mov	r6,zero
  80a6f0:	003fcd06 	br	80a628 <__umoddi3+0x594>

0080a6f4 <__eqdf2>:
  80a6f4:	deffef04 	addi	sp,sp,-68
  80a6f8:	dc400f15 	stw	r17,60(sp)
  80a6fc:	dc400404 	addi	r17,sp,16
  80a700:	2005883a 	mov	r2,r4
  80a704:	2807883a 	mov	r3,r5
  80a708:	dc000e15 	stw	r16,56(sp)
  80a70c:	d809883a 	mov	r4,sp
  80a710:	880b883a 	mov	r5,r17
  80a714:	dc000904 	addi	r16,sp,36
  80a718:	d8c00115 	stw	r3,4(sp)
  80a71c:	d8800015 	stw	r2,0(sp)
  80a720:	d9800215 	stw	r6,8(sp)
  80a724:	dfc01015 	stw	ra,64(sp)
  80a728:	d9c00315 	stw	r7,12(sp)
  80a72c:	08020d80 	call	8020d8 <__unpack_d>
  80a730:	d9000204 	addi	r4,sp,8
  80a734:	800b883a 	mov	r5,r16
  80a738:	08020d80 	call	8020d8 <__unpack_d>
  80a73c:	d8800417 	ldw	r2,16(sp)
  80a740:	00c00044 	movi	r3,1
  80a744:	180d883a 	mov	r6,r3
  80a748:	1880062e 	bgeu	r3,r2,80a764 <__eqdf2+0x70>
  80a74c:	d8800917 	ldw	r2,36(sp)
  80a750:	8809883a 	mov	r4,r17
  80a754:	800b883a 	mov	r5,r16
  80a758:	1880022e 	bgeu	r3,r2,80a764 <__eqdf2+0x70>
  80a75c:	08022100 	call	802210 <__fpcmp_parts_d>
  80a760:	100d883a 	mov	r6,r2
  80a764:	3005883a 	mov	r2,r6
  80a768:	dfc01017 	ldw	ra,64(sp)
  80a76c:	dc400f17 	ldw	r17,60(sp)
  80a770:	dc000e17 	ldw	r16,56(sp)
  80a774:	dec01104 	addi	sp,sp,68
  80a778:	f800283a 	ret

0080a77c <__nedf2>:
  80a77c:	deffef04 	addi	sp,sp,-68
  80a780:	dc400f15 	stw	r17,60(sp)
  80a784:	dc400404 	addi	r17,sp,16
  80a788:	2005883a 	mov	r2,r4
  80a78c:	2807883a 	mov	r3,r5
  80a790:	dc000e15 	stw	r16,56(sp)
  80a794:	d809883a 	mov	r4,sp
  80a798:	880b883a 	mov	r5,r17
  80a79c:	dc000904 	addi	r16,sp,36
  80a7a0:	d8c00115 	stw	r3,4(sp)
  80a7a4:	d8800015 	stw	r2,0(sp)
  80a7a8:	d9800215 	stw	r6,8(sp)
  80a7ac:	dfc01015 	stw	ra,64(sp)
  80a7b0:	d9c00315 	stw	r7,12(sp)
  80a7b4:	08020d80 	call	8020d8 <__unpack_d>
  80a7b8:	d9000204 	addi	r4,sp,8
  80a7bc:	800b883a 	mov	r5,r16
  80a7c0:	08020d80 	call	8020d8 <__unpack_d>
  80a7c4:	d8800417 	ldw	r2,16(sp)
  80a7c8:	00c00044 	movi	r3,1
  80a7cc:	180d883a 	mov	r6,r3
  80a7d0:	1880062e 	bgeu	r3,r2,80a7ec <__nedf2+0x70>
  80a7d4:	d8800917 	ldw	r2,36(sp)
  80a7d8:	8809883a 	mov	r4,r17
  80a7dc:	800b883a 	mov	r5,r16
  80a7e0:	1880022e 	bgeu	r3,r2,80a7ec <__nedf2+0x70>
  80a7e4:	08022100 	call	802210 <__fpcmp_parts_d>
  80a7e8:	100d883a 	mov	r6,r2
  80a7ec:	3005883a 	mov	r2,r6
  80a7f0:	dfc01017 	ldw	ra,64(sp)
  80a7f4:	dc400f17 	ldw	r17,60(sp)
  80a7f8:	dc000e17 	ldw	r16,56(sp)
  80a7fc:	dec01104 	addi	sp,sp,68
  80a800:	f800283a 	ret

0080a804 <__gtdf2>:
  80a804:	deffef04 	addi	sp,sp,-68
  80a808:	dc400f15 	stw	r17,60(sp)
  80a80c:	dc400404 	addi	r17,sp,16
  80a810:	2005883a 	mov	r2,r4
  80a814:	2807883a 	mov	r3,r5
  80a818:	dc000e15 	stw	r16,56(sp)
  80a81c:	d809883a 	mov	r4,sp
  80a820:	880b883a 	mov	r5,r17
  80a824:	dc000904 	addi	r16,sp,36
  80a828:	d8c00115 	stw	r3,4(sp)
  80a82c:	d8800015 	stw	r2,0(sp)
  80a830:	d9800215 	stw	r6,8(sp)
  80a834:	dfc01015 	stw	ra,64(sp)
  80a838:	d9c00315 	stw	r7,12(sp)
  80a83c:	08020d80 	call	8020d8 <__unpack_d>
  80a840:	d9000204 	addi	r4,sp,8
  80a844:	800b883a 	mov	r5,r16
  80a848:	08020d80 	call	8020d8 <__unpack_d>
  80a84c:	d8800417 	ldw	r2,16(sp)
  80a850:	00c00044 	movi	r3,1
  80a854:	01bfffc4 	movi	r6,-1
  80a858:	1880062e 	bgeu	r3,r2,80a874 <__gtdf2+0x70>
  80a85c:	d8800917 	ldw	r2,36(sp)
  80a860:	8809883a 	mov	r4,r17
  80a864:	800b883a 	mov	r5,r16
  80a868:	1880022e 	bgeu	r3,r2,80a874 <__gtdf2+0x70>
  80a86c:	08022100 	call	802210 <__fpcmp_parts_d>
  80a870:	100d883a 	mov	r6,r2
  80a874:	3005883a 	mov	r2,r6
  80a878:	dfc01017 	ldw	ra,64(sp)
  80a87c:	dc400f17 	ldw	r17,60(sp)
  80a880:	dc000e17 	ldw	r16,56(sp)
  80a884:	dec01104 	addi	sp,sp,68
  80a888:	f800283a 	ret

0080a88c <__gedf2>:
  80a88c:	deffef04 	addi	sp,sp,-68
  80a890:	dc400f15 	stw	r17,60(sp)
  80a894:	dc400404 	addi	r17,sp,16
  80a898:	2005883a 	mov	r2,r4
  80a89c:	2807883a 	mov	r3,r5
  80a8a0:	dc000e15 	stw	r16,56(sp)
  80a8a4:	d809883a 	mov	r4,sp
  80a8a8:	880b883a 	mov	r5,r17
  80a8ac:	dc000904 	addi	r16,sp,36
  80a8b0:	d8c00115 	stw	r3,4(sp)
  80a8b4:	d8800015 	stw	r2,0(sp)
  80a8b8:	d9800215 	stw	r6,8(sp)
  80a8bc:	dfc01015 	stw	ra,64(sp)
  80a8c0:	d9c00315 	stw	r7,12(sp)
  80a8c4:	08020d80 	call	8020d8 <__unpack_d>
  80a8c8:	d9000204 	addi	r4,sp,8
  80a8cc:	800b883a 	mov	r5,r16
  80a8d0:	08020d80 	call	8020d8 <__unpack_d>
  80a8d4:	d8800417 	ldw	r2,16(sp)
  80a8d8:	00c00044 	movi	r3,1
  80a8dc:	01bfffc4 	movi	r6,-1
  80a8e0:	1880062e 	bgeu	r3,r2,80a8fc <__gedf2+0x70>
  80a8e4:	d8800917 	ldw	r2,36(sp)
  80a8e8:	8809883a 	mov	r4,r17
  80a8ec:	800b883a 	mov	r5,r16
  80a8f0:	1880022e 	bgeu	r3,r2,80a8fc <__gedf2+0x70>
  80a8f4:	08022100 	call	802210 <__fpcmp_parts_d>
  80a8f8:	100d883a 	mov	r6,r2
  80a8fc:	3005883a 	mov	r2,r6
  80a900:	dfc01017 	ldw	ra,64(sp)
  80a904:	dc400f17 	ldw	r17,60(sp)
  80a908:	dc000e17 	ldw	r16,56(sp)
  80a90c:	dec01104 	addi	sp,sp,68
  80a910:	f800283a 	ret

0080a914 <__fixdfsi>:
  80a914:	defff804 	addi	sp,sp,-32
  80a918:	2005883a 	mov	r2,r4
  80a91c:	2807883a 	mov	r3,r5
  80a920:	d809883a 	mov	r4,sp
  80a924:	d9400204 	addi	r5,sp,8
  80a928:	d8c00115 	stw	r3,4(sp)
  80a92c:	d8800015 	stw	r2,0(sp)
  80a930:	dfc00715 	stw	ra,28(sp)
  80a934:	08020d80 	call	8020d8 <__unpack_d>
  80a938:	d8c00217 	ldw	r3,8(sp)
  80a93c:	00800084 	movi	r2,2
  80a940:	1880051e 	bne	r3,r2,80a958 <__fixdfsi+0x44>
  80a944:	0007883a 	mov	r3,zero
  80a948:	1805883a 	mov	r2,r3
  80a94c:	dfc00717 	ldw	ra,28(sp)
  80a950:	dec00804 	addi	sp,sp,32
  80a954:	f800283a 	ret
  80a958:	00800044 	movi	r2,1
  80a95c:	10fff92e 	bgeu	r2,r3,80a944 <__fixdfsi+0x30>
  80a960:	00800104 	movi	r2,4
  80a964:	18800426 	beq	r3,r2,80a978 <__fixdfsi+0x64>
  80a968:	d8c00417 	ldw	r3,16(sp)
  80a96c:	183ff516 	blt	r3,zero,80a944 <__fixdfsi+0x30>
  80a970:	00800784 	movi	r2,30
  80a974:	10c0080e 	bge	r2,r3,80a998 <__fixdfsi+0x84>
  80a978:	d8800317 	ldw	r2,12(sp)
  80a97c:	1000121e 	bne	r2,zero,80a9c8 <__fixdfsi+0xb4>
  80a980:	00e00034 	movhi	r3,32768
  80a984:	18ffffc4 	addi	r3,r3,-1
  80a988:	1805883a 	mov	r2,r3
  80a98c:	dfc00717 	ldw	ra,28(sp)
  80a990:	dec00804 	addi	sp,sp,32
  80a994:	f800283a 	ret
  80a998:	00800f04 	movi	r2,60
  80a99c:	10d1c83a 	sub	r8,r2,r3
  80a9a0:	40bff804 	addi	r2,r8,-32
  80a9a4:	d9800517 	ldw	r6,20(sp)
  80a9a8:	d9c00617 	ldw	r7,24(sp)
  80a9ac:	10000816 	blt	r2,zero,80a9d0 <__fixdfsi+0xbc>
  80a9b0:	3888d83a 	srl	r4,r7,r2
  80a9b4:	d8800317 	ldw	r2,12(sp)
  80a9b8:	2007883a 	mov	r3,r4
  80a9bc:	103fe226 	beq	r2,zero,80a948 <__fixdfsi+0x34>
  80a9c0:	0107c83a 	sub	r3,zero,r4
  80a9c4:	003fe006 	br	80a948 <__fixdfsi+0x34>
  80a9c8:	00e00034 	movhi	r3,32768
  80a9cc:	003fde06 	br	80a948 <__fixdfsi+0x34>
  80a9d0:	39c7883a 	add	r3,r7,r7
  80a9d4:	008007c4 	movi	r2,31
  80a9d8:	1205c83a 	sub	r2,r2,r8
  80a9dc:	1886983a 	sll	r3,r3,r2
  80a9e0:	3208d83a 	srl	r4,r6,r8
  80a9e4:	1908b03a 	or	r4,r3,r4
  80a9e8:	003ff206 	br	80a9b4 <__fixdfsi+0xa0>

0080a9ec <__floatunsidf>:
  80a9ec:	defff204 	addi	sp,sp,-56
  80a9f0:	dfc00d15 	stw	ra,52(sp)
  80a9f4:	ddc00c15 	stw	r23,48(sp)
  80a9f8:	dd800b15 	stw	r22,44(sp)
  80a9fc:	dd400a15 	stw	r21,40(sp)
  80aa00:	dd000915 	stw	r20,36(sp)
  80aa04:	dcc00815 	stw	r19,32(sp)
  80aa08:	dc800715 	stw	r18,28(sp)
  80aa0c:	dc400615 	stw	r17,24(sp)
  80aa10:	dc000515 	stw	r16,20(sp)
  80aa14:	d8000115 	stw	zero,4(sp)
  80aa18:	20000f1e 	bne	r4,zero,80aa58 <__floatunsidf+0x6c>
  80aa1c:	00800084 	movi	r2,2
  80aa20:	d8800015 	stw	r2,0(sp)
  80aa24:	d809883a 	mov	r4,sp
  80aa28:	0801dc40 	call	801dc4 <__pack_d>
  80aa2c:	dfc00d17 	ldw	ra,52(sp)
  80aa30:	ddc00c17 	ldw	r23,48(sp)
  80aa34:	dd800b17 	ldw	r22,44(sp)
  80aa38:	dd400a17 	ldw	r21,40(sp)
  80aa3c:	dd000917 	ldw	r20,36(sp)
  80aa40:	dcc00817 	ldw	r19,32(sp)
  80aa44:	dc800717 	ldw	r18,28(sp)
  80aa48:	dc400617 	ldw	r17,24(sp)
  80aa4c:	dc000517 	ldw	r16,20(sp)
  80aa50:	dec00e04 	addi	sp,sp,56
  80aa54:	f800283a 	ret
  80aa58:	008000c4 	movi	r2,3
  80aa5c:	00c00f04 	movi	r3,60
  80aa60:	002f883a 	mov	r23,zero
  80aa64:	202d883a 	mov	r22,r4
  80aa68:	d8800015 	stw	r2,0(sp)
  80aa6c:	d8c00215 	stw	r3,8(sp)
  80aa70:	d9000315 	stw	r4,12(sp)
  80aa74:	ddc00415 	stw	r23,16(sp)
  80aa78:	0801d440 	call	801d44 <__clzsi2>
  80aa7c:	12400744 	addi	r9,r2,29
  80aa80:	48000b16 	blt	r9,zero,80aab0 <__floatunsidf+0xc4>
  80aa84:	483fe726 	beq	r9,zero,80aa24 <__floatunsidf+0x38>
  80aa88:	10bfff44 	addi	r2,r2,-3
  80aa8c:	10002e16 	blt	r2,zero,80ab48 <__floatunsidf+0x15c>
  80aa90:	b0a2983a 	sll	r17,r22,r2
  80aa94:	0021883a 	mov	r16,zero
  80aa98:	d8800217 	ldw	r2,8(sp)
  80aa9c:	dc400415 	stw	r17,16(sp)
  80aaa0:	dc000315 	stw	r16,12(sp)
  80aaa4:	1245c83a 	sub	r2,r2,r9
  80aaa8:	d8800215 	stw	r2,8(sp)
  80aaac:	003fdd06 	br	80aa24 <__floatunsidf+0x38>
  80aab0:	0255c83a 	sub	r10,zero,r9
  80aab4:	51bff804 	addi	r6,r10,-32
  80aab8:	30001b16 	blt	r6,zero,80ab28 <__floatunsidf+0x13c>
  80aabc:	b9a8d83a 	srl	r20,r23,r6
  80aac0:	002b883a 	mov	r21,zero
  80aac4:	000f883a 	mov	r7,zero
  80aac8:	01000044 	movi	r4,1
  80aacc:	0011883a 	mov	r8,zero
  80aad0:	30002516 	blt	r6,zero,80ab68 <__floatunsidf+0x17c>
  80aad4:	21a6983a 	sll	r19,r4,r6
  80aad8:	0025883a 	mov	r18,zero
  80aadc:	00bfffc4 	movi	r2,-1
  80aae0:	9089883a 	add	r4,r18,r2
  80aae4:	988b883a 	add	r5,r19,r2
  80aae8:	248d803a 	cmpltu	r6,r4,r18
  80aaec:	314b883a 	add	r5,r6,r5
  80aaf0:	b104703a 	and	r2,r22,r4
  80aaf4:	b946703a 	and	r3,r23,r5
  80aaf8:	10c4b03a 	or	r2,r2,r3
  80aafc:	10000226 	beq	r2,zero,80ab08 <__floatunsidf+0x11c>
  80ab00:	01c00044 	movi	r7,1
  80ab04:	0011883a 	mov	r8,zero
  80ab08:	d9000217 	ldw	r4,8(sp)
  80ab0c:	a1c4b03a 	or	r2,r20,r7
  80ab10:	aa06b03a 	or	r3,r21,r8
  80ab14:	2249c83a 	sub	r4,r4,r9
  80ab18:	d8c00415 	stw	r3,16(sp)
  80ab1c:	d9000215 	stw	r4,8(sp)
  80ab20:	d8800315 	stw	r2,12(sp)
  80ab24:	003fbf06 	br	80aa24 <__floatunsidf+0x38>
  80ab28:	bdc7883a 	add	r3,r23,r23
  80ab2c:	008007c4 	movi	r2,31
  80ab30:	1285c83a 	sub	r2,r2,r10
  80ab34:	1886983a 	sll	r3,r3,r2
  80ab38:	b2a8d83a 	srl	r20,r22,r10
  80ab3c:	baaad83a 	srl	r21,r23,r10
  80ab40:	1d28b03a 	or	r20,r3,r20
  80ab44:	003fdf06 	br	80aac4 <__floatunsidf+0xd8>
  80ab48:	b006d07a 	srli	r3,r22,1
  80ab4c:	008007c4 	movi	r2,31
  80ab50:	1245c83a 	sub	r2,r2,r9
  80ab54:	1886d83a 	srl	r3,r3,r2
  80ab58:	ba62983a 	sll	r17,r23,r9
  80ab5c:	b260983a 	sll	r16,r22,r9
  80ab60:	1c62b03a 	or	r17,r3,r17
  80ab64:	003fcc06 	br	80aa98 <__floatunsidf+0xac>
  80ab68:	2006d07a 	srli	r3,r4,1
  80ab6c:	008007c4 	movi	r2,31
  80ab70:	1285c83a 	sub	r2,r2,r10
  80ab74:	18a6d83a 	srl	r19,r3,r2
  80ab78:	22a4983a 	sll	r18,r4,r10
  80ab7c:	003fd706 	br	80aadc <__floatunsidf+0xf0>

0080ab80 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80ab80:	defff404 	addi	sp,sp,-48
  80ab84:	df000b15 	stw	fp,44(sp)
  80ab88:	df000b04 	addi	fp,sp,44
  80ab8c:	e13ffb15 	stw	r4,-20(fp)
  80ab90:	e17ffc15 	stw	r5,-16(fp)
  80ab94:	e1bffd15 	stw	r6,-12(fp)
  80ab98:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80ab9c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80aba0:	00802074 	movhi	r2,129
  80aba4:	10839a04 	addi	r2,r2,3688
  80aba8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80abac:	1005003a 	cmpeq	r2,r2,zero
  80abb0:	1000411e 	bne	r2,zero,80acb8 <alt_alarm_start+0x138>
  {
    if (alarm)
  80abb4:	e0bffb17 	ldw	r2,-20(fp)
  80abb8:	1005003a 	cmpeq	r2,r2,zero
  80abbc:	10003b1e 	bne	r2,zero,80acac <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  80abc0:	e0fffb17 	ldw	r3,-20(fp)
  80abc4:	e0bffd17 	ldw	r2,-12(fp)
  80abc8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80abcc:	e0fffb17 	ldw	r3,-20(fp)
  80abd0:	e0bffe17 	ldw	r2,-8(fp)
  80abd4:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80abd8:	0005303a 	rdctl	r2,status
  80abdc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80abe0:	e0fff817 	ldw	r3,-32(fp)
  80abe4:	00bfff84 	movi	r2,-2
  80abe8:	1884703a 	and	r2,r3,r2
  80abec:	1001703a 	wrctl	status,r2
  
  return context;
  80abf0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  80abf4:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80abf8:	00802074 	movhi	r2,129
  80abfc:	10839b04 	addi	r2,r2,3692
  80ac00:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  80ac04:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80ac08:	e0fffc17 	ldw	r3,-16(fp)
  80ac0c:	e0bff917 	ldw	r2,-28(fp)
  80ac10:	1885883a 	add	r2,r3,r2
  80ac14:	10c00044 	addi	r3,r2,1
  80ac18:	e0bffb17 	ldw	r2,-20(fp)
  80ac1c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80ac20:	e0bffb17 	ldw	r2,-20(fp)
  80ac24:	10c00217 	ldw	r3,8(r2)
  80ac28:	e0bff917 	ldw	r2,-28(fp)
  80ac2c:	1880042e 	bgeu	r3,r2,80ac40 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  80ac30:	e0fffb17 	ldw	r3,-20(fp)
  80ac34:	00800044 	movi	r2,1
  80ac38:	18800405 	stb	r2,16(r3)
  80ac3c:	00000206 	br	80ac48 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  80ac40:	e0bffb17 	ldw	r2,-20(fp)
  80ac44:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80ac48:	e0fffb17 	ldw	r3,-20(fp)
  80ac4c:	00802074 	movhi	r2,129
  80ac50:	10bcf004 	addi	r2,r2,-3136
  80ac54:	e0bff615 	stw	r2,-40(fp)
  80ac58:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80ac5c:	e0fff717 	ldw	r3,-36(fp)
  80ac60:	e0bff617 	ldw	r2,-40(fp)
  80ac64:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80ac68:	e0bff617 	ldw	r2,-40(fp)
  80ac6c:	10c00017 	ldw	r3,0(r2)
  80ac70:	e0bff717 	ldw	r2,-36(fp)
  80ac74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80ac78:	e0bff617 	ldw	r2,-40(fp)
  80ac7c:	10c00017 	ldw	r3,0(r2)
  80ac80:	e0bff717 	ldw	r2,-36(fp)
  80ac84:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80ac88:	e0fff617 	ldw	r3,-40(fp)
  80ac8c:	e0bff717 	ldw	r2,-36(fp)
  80ac90:	18800015 	stw	r2,0(r3)
  80ac94:	e0bffa17 	ldw	r2,-24(fp)
  80ac98:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ac9c:	e0bff517 	ldw	r2,-44(fp)
  80aca0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80aca4:	e03fff15 	stw	zero,-4(fp)
  80aca8:	00000506 	br	80acc0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  80acac:	00bffa84 	movi	r2,-22
  80acb0:	e0bfff15 	stw	r2,-4(fp)
  80acb4:	00000206 	br	80acc0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  80acb8:	00bfde84 	movi	r2,-134
  80acbc:	e0bfff15 	stw	r2,-4(fp)
  80acc0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  80acc4:	e037883a 	mov	sp,fp
  80acc8:	df000017 	ldw	fp,0(sp)
  80accc:	dec00104 	addi	sp,sp,4
  80acd0:	f800283a 	ret

0080acd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80acd4:	defff804 	addi	sp,sp,-32
  80acd8:	dfc00715 	stw	ra,28(sp)
  80acdc:	df000615 	stw	fp,24(sp)
  80ace0:	df000604 	addi	fp,sp,24
  80ace4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80ace8:	e0bffc17 	ldw	r2,-16(fp)
  80acec:	1004803a 	cmplt	r2,r2,zero
  80acf0:	1000091e 	bne	r2,zero,80ad18 <close+0x44>
  80acf4:	e13ffc17 	ldw	r4,-16(fp)
  80acf8:	01400304 	movi	r5,12
  80acfc:	0801be80 	call	801be8 <__mulsi3>
  80ad00:	1007883a 	mov	r3,r2
  80ad04:	00802074 	movhi	r2,129
  80ad08:	10b86504 	addi	r2,r2,-7788
  80ad0c:	1887883a 	add	r3,r3,r2
  80ad10:	e0ffff15 	stw	r3,-4(fp)
  80ad14:	00000106 	br	80ad1c <close+0x48>
  80ad18:	e03fff15 	stw	zero,-4(fp)
  80ad1c:	e0bfff17 	ldw	r2,-4(fp)
  80ad20:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80ad24:	e0bffb17 	ldw	r2,-20(fp)
  80ad28:	1005003a 	cmpeq	r2,r2,zero
  80ad2c:	10001d1e 	bne	r2,zero,80ada4 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ad30:	e0bffb17 	ldw	r2,-20(fp)
  80ad34:	10800017 	ldw	r2,0(r2)
  80ad38:	10800417 	ldw	r2,16(r2)
  80ad3c:	1005003a 	cmpeq	r2,r2,zero
  80ad40:	1000071e 	bne	r2,zero,80ad60 <close+0x8c>
  80ad44:	e0bffb17 	ldw	r2,-20(fp)
  80ad48:	10800017 	ldw	r2,0(r2)
  80ad4c:	10800417 	ldw	r2,16(r2)
  80ad50:	e13ffb17 	ldw	r4,-20(fp)
  80ad54:	103ee83a 	callr	r2
  80ad58:	e0bffe15 	stw	r2,-8(fp)
  80ad5c:	00000106 	br	80ad64 <close+0x90>
  80ad60:	e03ffe15 	stw	zero,-8(fp)
  80ad64:	e0bffe17 	ldw	r2,-8(fp)
  80ad68:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ad6c:	e13ffc17 	ldw	r4,-16(fp)
  80ad70:	080b7f80 	call	80b7f8 <alt_release_fd>
    if (rval < 0)
  80ad74:	e0bffa17 	ldw	r2,-24(fp)
  80ad78:	1004403a 	cmpge	r2,r2,zero
  80ad7c:	1000071e 	bne	r2,zero,80ad9c <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80ad80:	080add40 	call	80add4 <alt_get_errno>
  80ad84:	e0fffa17 	ldw	r3,-24(fp)
  80ad88:	00c7c83a 	sub	r3,zero,r3
  80ad8c:	10c00015 	stw	r3,0(r2)
      return -1;
  80ad90:	00bfffc4 	movi	r2,-1
  80ad94:	e0bffd15 	stw	r2,-12(fp)
  80ad98:	00000806 	br	80adbc <close+0xe8>
    }
    return 0;
  80ad9c:	e03ffd15 	stw	zero,-12(fp)
  80ada0:	00000606 	br	80adbc <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ada4:	080add40 	call	80add4 <alt_get_errno>
  80ada8:	1007883a 	mov	r3,r2
  80adac:	00801444 	movi	r2,81
  80adb0:	18800015 	stw	r2,0(r3)
    return -1;
  80adb4:	00bfffc4 	movi	r2,-1
  80adb8:	e0bffd15 	stw	r2,-12(fp)
  80adbc:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80adc0:	e037883a 	mov	sp,fp
  80adc4:	dfc00117 	ldw	ra,4(sp)
  80adc8:	df000017 	ldw	fp,0(sp)
  80adcc:	dec00204 	addi	sp,sp,8
  80add0:	f800283a 	ret

0080add4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80add4:	defffd04 	addi	sp,sp,-12
  80add8:	dfc00215 	stw	ra,8(sp)
  80addc:	df000115 	stw	fp,4(sp)
  80ade0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ade4:	00802074 	movhi	r2,129
  80ade8:	10bced04 	addi	r2,r2,-3148
  80adec:	10800017 	ldw	r2,0(r2)
  80adf0:	1005003a 	cmpeq	r2,r2,zero
  80adf4:	1000061e 	bne	r2,zero,80ae10 <alt_get_errno+0x3c>
  80adf8:	00802074 	movhi	r2,129
  80adfc:	10bced04 	addi	r2,r2,-3148
  80ae00:	10800017 	ldw	r2,0(r2)
  80ae04:	103ee83a 	callr	r2
  80ae08:	e0bfff15 	stw	r2,-4(fp)
  80ae0c:	00000306 	br	80ae1c <alt_get_errno+0x48>
  80ae10:	00802074 	movhi	r2,129
  80ae14:	10839504 	addi	r2,r2,3668
  80ae18:	e0bfff15 	stw	r2,-4(fp)
  80ae1c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ae20:	e037883a 	mov	sp,fp
  80ae24:	dfc00117 	ldw	ra,4(sp)
  80ae28:	df000017 	ldw	fp,0(sp)
  80ae2c:	dec00204 	addi	sp,sp,8
  80ae30:	f800283a 	ret

0080ae34 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ae34:	defffc04 	addi	sp,sp,-16
  80ae38:	df000315 	stw	fp,12(sp)
  80ae3c:	df000304 	addi	fp,sp,12
  80ae40:	e13ffd15 	stw	r4,-12(fp)
  80ae44:	e17ffe15 	stw	r5,-8(fp)
  80ae48:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ae4c:	e0bfff17 	ldw	r2,-4(fp)
}
  80ae50:	e037883a 	mov	sp,fp
  80ae54:	df000017 	ldw	fp,0(sp)
  80ae58:	dec00104 	addi	sp,sp,4
  80ae5c:	f800283a 	ret

0080ae60 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ae60:	defff904 	addi	sp,sp,-28
  80ae64:	dfc00615 	stw	ra,24(sp)
  80ae68:	df000515 	stw	fp,20(sp)
  80ae6c:	df000504 	addi	fp,sp,20
  80ae70:	e13ffc15 	stw	r4,-16(fp)
  80ae74:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ae78:	e0bffc17 	ldw	r2,-16(fp)
  80ae7c:	1004803a 	cmplt	r2,r2,zero
  80ae80:	1000091e 	bne	r2,zero,80aea8 <fstat+0x48>
  80ae84:	e13ffc17 	ldw	r4,-16(fp)
  80ae88:	01400304 	movi	r5,12
  80ae8c:	0801be80 	call	801be8 <__mulsi3>
  80ae90:	1007883a 	mov	r3,r2
  80ae94:	00802074 	movhi	r2,129
  80ae98:	10b86504 	addi	r2,r2,-7788
  80ae9c:	1887883a 	add	r3,r3,r2
  80aea0:	e0ffff15 	stw	r3,-4(fp)
  80aea4:	00000106 	br	80aeac <fstat+0x4c>
  80aea8:	e03fff15 	stw	zero,-4(fp)
  80aeac:	e0bfff17 	ldw	r2,-4(fp)
  80aeb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80aeb4:	e0bffb17 	ldw	r2,-20(fp)
  80aeb8:	1005003a 	cmpeq	r2,r2,zero
  80aebc:	1000121e 	bne	r2,zero,80af08 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80aec0:	e0bffb17 	ldw	r2,-20(fp)
  80aec4:	10800017 	ldw	r2,0(r2)
  80aec8:	10800817 	ldw	r2,32(r2)
  80aecc:	1005003a 	cmpeq	r2,r2,zero
  80aed0:	1000081e 	bne	r2,zero,80aef4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80aed4:	e0bffb17 	ldw	r2,-20(fp)
  80aed8:	10800017 	ldw	r2,0(r2)
  80aedc:	10800817 	ldw	r2,32(r2)
  80aee0:	e13ffb17 	ldw	r4,-20(fp)
  80aee4:	e17ffd17 	ldw	r5,-12(fp)
  80aee8:	103ee83a 	callr	r2
  80aeec:	e0bffe15 	stw	r2,-8(fp)
  80aef0:	00000b06 	br	80af20 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80aef4:	e0fffd17 	ldw	r3,-12(fp)
  80aef8:	00880004 	movi	r2,8192
  80aefc:	18800115 	stw	r2,4(r3)
      return 0;
  80af00:	e03ffe15 	stw	zero,-8(fp)
  80af04:	00000606 	br	80af20 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80af08:	080af380 	call	80af38 <alt_get_errno>
  80af0c:	1007883a 	mov	r3,r2
  80af10:	00801444 	movi	r2,81
  80af14:	18800015 	stw	r2,0(r3)
    return -1;
  80af18:	00bfffc4 	movi	r2,-1
  80af1c:	e0bffe15 	stw	r2,-8(fp)
  80af20:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80af24:	e037883a 	mov	sp,fp
  80af28:	dfc00117 	ldw	ra,4(sp)
  80af2c:	df000017 	ldw	fp,0(sp)
  80af30:	dec00204 	addi	sp,sp,8
  80af34:	f800283a 	ret

0080af38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80af38:	defffd04 	addi	sp,sp,-12
  80af3c:	dfc00215 	stw	ra,8(sp)
  80af40:	df000115 	stw	fp,4(sp)
  80af44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80af48:	00802074 	movhi	r2,129
  80af4c:	10bced04 	addi	r2,r2,-3148
  80af50:	10800017 	ldw	r2,0(r2)
  80af54:	1005003a 	cmpeq	r2,r2,zero
  80af58:	1000061e 	bne	r2,zero,80af74 <alt_get_errno+0x3c>
  80af5c:	00802074 	movhi	r2,129
  80af60:	10bced04 	addi	r2,r2,-3148
  80af64:	10800017 	ldw	r2,0(r2)
  80af68:	103ee83a 	callr	r2
  80af6c:	e0bfff15 	stw	r2,-4(fp)
  80af70:	00000306 	br	80af80 <alt_get_errno+0x48>
  80af74:	00802074 	movhi	r2,129
  80af78:	10839504 	addi	r2,r2,3668
  80af7c:	e0bfff15 	stw	r2,-4(fp)
  80af80:	e0bfff17 	ldw	r2,-4(fp)
}
  80af84:	e037883a 	mov	sp,fp
  80af88:	dfc00117 	ldw	ra,4(sp)
  80af8c:	df000017 	ldw	fp,0(sp)
  80af90:	dec00204 	addi	sp,sp,8
  80af94:	f800283a 	ret

0080af98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80af98:	defff904 	addi	sp,sp,-28
  80af9c:	dfc00615 	stw	ra,24(sp)
  80afa0:	df000515 	stw	fp,20(sp)
  80afa4:	df000504 	addi	fp,sp,20
  80afa8:	e13ffc15 	stw	r4,-16(fp)
  80afac:	e17ffd15 	stw	r5,-12(fp)
  80afb0:	e1bffe15 	stw	r6,-8(fp)
  80afb4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80afb8:	e0800217 	ldw	r2,8(fp)
  80afbc:	d8800015 	stw	r2,0(sp)
  80afc0:	e13ffc17 	ldw	r4,-16(fp)
  80afc4:	e17ffd17 	ldw	r5,-12(fp)
  80afc8:	e1bffe17 	ldw	r6,-8(fp)
  80afcc:	e1ffff17 	ldw	r7,-4(fp)
  80afd0:	080b16c0 	call	80b16c <alt_iic_isr_register>
}  
  80afd4:	e037883a 	mov	sp,fp
  80afd8:	dfc00117 	ldw	ra,4(sp)
  80afdc:	df000017 	ldw	fp,0(sp)
  80afe0:	dec00204 	addi	sp,sp,8
  80afe4:	f800283a 	ret

0080afe8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80afe8:	defff904 	addi	sp,sp,-28
  80afec:	df000615 	stw	fp,24(sp)
  80aff0:	df000604 	addi	fp,sp,24
  80aff4:	e13ffe15 	stw	r4,-8(fp)
  80aff8:	e17fff15 	stw	r5,-4(fp)
  80affc:	e0bfff17 	ldw	r2,-4(fp)
  80b000:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b004:	0005303a 	rdctl	r2,status
  80b008:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b00c:	e0fffb17 	ldw	r3,-20(fp)
  80b010:	00bfff84 	movi	r2,-2
  80b014:	1884703a 	and	r2,r3,r2
  80b018:	1001703a 	wrctl	status,r2
  
  return context;
  80b01c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b020:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  80b024:	e0fffc17 	ldw	r3,-16(fp)
  80b028:	00800044 	movi	r2,1
  80b02c:	10c4983a 	sll	r2,r2,r3
  80b030:	1007883a 	mov	r3,r2
  80b034:	00802074 	movhi	r2,129
  80b038:	10839604 	addi	r2,r2,3672
  80b03c:	10800017 	ldw	r2,0(r2)
  80b040:	1886b03a 	or	r3,r3,r2
  80b044:	00802074 	movhi	r2,129
  80b048:	10839604 	addi	r2,r2,3672
  80b04c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b050:	00802074 	movhi	r2,129
  80b054:	10839604 	addi	r2,r2,3672
  80b058:	10800017 	ldw	r2,0(r2)
  80b05c:	100170fa 	wrctl	ienable,r2
  80b060:	e0bffd17 	ldw	r2,-12(fp)
  80b064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b068:	e0bffa17 	ldw	r2,-24(fp)
  80b06c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b070:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  80b074:	e037883a 	mov	sp,fp
  80b078:	df000017 	ldw	fp,0(sp)
  80b07c:	dec00104 	addi	sp,sp,4
  80b080:	f800283a 	ret

0080b084 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80b084:	defff904 	addi	sp,sp,-28
  80b088:	df000615 	stw	fp,24(sp)
  80b08c:	df000604 	addi	fp,sp,24
  80b090:	e13ffe15 	stw	r4,-8(fp)
  80b094:	e17fff15 	stw	r5,-4(fp)
  80b098:	e0bfff17 	ldw	r2,-4(fp)
  80b09c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b0a0:	0005303a 	rdctl	r2,status
  80b0a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b0a8:	e0fffb17 	ldw	r3,-20(fp)
  80b0ac:	00bfff84 	movi	r2,-2
  80b0b0:	1884703a 	and	r2,r3,r2
  80b0b4:	1001703a 	wrctl	status,r2
  
  return context;
  80b0b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80b0bc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  80b0c0:	e0fffc17 	ldw	r3,-16(fp)
  80b0c4:	00800044 	movi	r2,1
  80b0c8:	10c4983a 	sll	r2,r2,r3
  80b0cc:	0084303a 	nor	r2,zero,r2
  80b0d0:	1007883a 	mov	r3,r2
  80b0d4:	00802074 	movhi	r2,129
  80b0d8:	10839604 	addi	r2,r2,3672
  80b0dc:	10800017 	ldw	r2,0(r2)
  80b0e0:	1886703a 	and	r3,r3,r2
  80b0e4:	00802074 	movhi	r2,129
  80b0e8:	10839604 	addi	r2,r2,3672
  80b0ec:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80b0f0:	00802074 	movhi	r2,129
  80b0f4:	10839604 	addi	r2,r2,3672
  80b0f8:	10800017 	ldw	r2,0(r2)
  80b0fc:	100170fa 	wrctl	ienable,r2
  80b100:	e0bffd17 	ldw	r2,-12(fp)
  80b104:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b108:	e0bffa17 	ldw	r2,-24(fp)
  80b10c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80b110:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  80b114:	e037883a 	mov	sp,fp
  80b118:	df000017 	ldw	fp,0(sp)
  80b11c:	dec00104 	addi	sp,sp,4
  80b120:	f800283a 	ret

0080b124 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80b124:	defffc04 	addi	sp,sp,-16
  80b128:	df000315 	stw	fp,12(sp)
  80b12c:	df000304 	addi	fp,sp,12
  80b130:	e13ffe15 	stw	r4,-8(fp)
  80b134:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80b138:	000530fa 	rdctl	r2,ienable
  80b13c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80b140:	e0ffff17 	ldw	r3,-4(fp)
  80b144:	00800044 	movi	r2,1
  80b148:	10c4983a 	sll	r2,r2,r3
  80b14c:	1007883a 	mov	r3,r2
  80b150:	e0bffd17 	ldw	r2,-12(fp)
  80b154:	1884703a 	and	r2,r3,r2
  80b158:	1004c03a 	cmpne	r2,r2,zero
}
  80b15c:	e037883a 	mov	sp,fp
  80b160:	df000017 	ldw	fp,0(sp)
  80b164:	dec00104 	addi	sp,sp,4
  80b168:	f800283a 	ret

0080b16c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80b16c:	defff404 	addi	sp,sp,-48
  80b170:	dfc00b15 	stw	ra,44(sp)
  80b174:	df000a15 	stw	fp,40(sp)
  80b178:	df000a04 	addi	fp,sp,40
  80b17c:	e13ffb15 	stw	r4,-20(fp)
  80b180:	e17ffc15 	stw	r5,-16(fp)
  80b184:	e1bffd15 	stw	r6,-12(fp)
  80b188:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  80b18c:	00bffa84 	movi	r2,-22
  80b190:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80b194:	e0bffc17 	ldw	r2,-16(fp)
  80b198:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80b19c:	e0bff917 	ldw	r2,-28(fp)
  80b1a0:	10800808 	cmpgei	r2,r2,32
  80b1a4:	1000291e 	bne	r2,zero,80b24c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b1a8:	0005303a 	rdctl	r2,status
  80b1ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b1b0:	e0fff717 	ldw	r3,-36(fp)
  80b1b4:	00bfff84 	movi	r2,-2
  80b1b8:	1884703a 	and	r2,r3,r2
  80b1bc:	1001703a 	wrctl	status,r2
  
  return context;
  80b1c0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80b1c4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  80b1c8:	e0bff917 	ldw	r2,-28(fp)
  80b1cc:	00c02074 	movhi	r3,129
  80b1d0:	18c3ac04 	addi	r3,r3,3760
  80b1d4:	100490fa 	slli	r2,r2,3
  80b1d8:	10c7883a 	add	r3,r2,r3
  80b1dc:	e0bffd17 	ldw	r2,-12(fp)
  80b1e0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  80b1e4:	e0bff917 	ldw	r2,-28(fp)
  80b1e8:	00c02074 	movhi	r3,129
  80b1ec:	18c3ac04 	addi	r3,r3,3760
  80b1f0:	100490fa 	slli	r2,r2,3
  80b1f4:	10c5883a 	add	r2,r2,r3
  80b1f8:	10c00104 	addi	r3,r2,4
  80b1fc:	e0bffe17 	ldw	r2,-8(fp)
  80b200:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80b204:	e0bffd17 	ldw	r2,-12(fp)
  80b208:	1005003a 	cmpeq	r2,r2,zero
  80b20c:	1000051e 	bne	r2,zero,80b224 <alt_iic_isr_register+0xb8>
  80b210:	e17ff917 	ldw	r5,-28(fp)
  80b214:	e13ffb17 	ldw	r4,-20(fp)
  80b218:	080afe80 	call	80afe8 <alt_ic_irq_enable>
  80b21c:	e0bfff15 	stw	r2,-4(fp)
  80b220:	00000406 	br	80b234 <alt_iic_isr_register+0xc8>
  80b224:	e17ff917 	ldw	r5,-28(fp)
  80b228:	e13ffb17 	ldw	r4,-20(fp)
  80b22c:	080b0840 	call	80b084 <alt_ic_irq_disable>
  80b230:	e0bfff15 	stw	r2,-4(fp)
  80b234:	e0bfff17 	ldw	r2,-4(fp)
  80b238:	e0bffa15 	stw	r2,-24(fp)
  80b23c:	e0bff817 	ldw	r2,-32(fp)
  80b240:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b244:	e0bff617 	ldw	r2,-40(fp)
  80b248:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80b24c:	e0bffa17 	ldw	r2,-24(fp)
}
  80b250:	e037883a 	mov	sp,fp
  80b254:	dfc00117 	ldw	ra,4(sp)
  80b258:	df000017 	ldw	fp,0(sp)
  80b25c:	dec00204 	addi	sp,sp,8
  80b260:	f800283a 	ret

0080b264 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80b264:	deffeb04 	addi	sp,sp,-84
  80b268:	dfc01415 	stw	ra,80(sp)
  80b26c:	df001315 	stw	fp,76(sp)
  80b270:	df001304 	addi	fp,sp,76
  80b274:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b278:	e0bffd17 	ldw	r2,-12(fp)
  80b27c:	1004803a 	cmplt	r2,r2,zero
  80b280:	1000091e 	bne	r2,zero,80b2a8 <isatty+0x44>
  80b284:	e13ffd17 	ldw	r4,-12(fp)
  80b288:	01400304 	movi	r5,12
  80b28c:	0801be80 	call	801be8 <__mulsi3>
  80b290:	1007883a 	mov	r3,r2
  80b294:	00802074 	movhi	r2,129
  80b298:	10b86504 	addi	r2,r2,-7788
  80b29c:	1887883a 	add	r3,r3,r2
  80b2a0:	e0ffff15 	stw	r3,-4(fp)
  80b2a4:	00000106 	br	80b2ac <isatty+0x48>
  80b2a8:	e03fff15 	stw	zero,-4(fp)
  80b2ac:	e0bfff17 	ldw	r2,-4(fp)
  80b2b0:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80b2b4:	e0bfed17 	ldw	r2,-76(fp)
  80b2b8:	1005003a 	cmpeq	r2,r2,zero
  80b2bc:	10000f1e 	bne	r2,zero,80b2fc <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80b2c0:	e0bfed17 	ldw	r2,-76(fp)
  80b2c4:	10800017 	ldw	r2,0(r2)
  80b2c8:	10800817 	ldw	r2,32(r2)
  80b2cc:	1004c03a 	cmpne	r2,r2,zero
  80b2d0:	1000031e 	bne	r2,zero,80b2e0 <isatty+0x7c>
    {
      return 1;
  80b2d4:	00800044 	movi	r2,1
  80b2d8:	e0bffe15 	stw	r2,-8(fp)
  80b2dc:	00000c06 	br	80b310 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80b2e0:	e17fee04 	addi	r5,fp,-72
  80b2e4:	e13ffd17 	ldw	r4,-12(fp)
  80b2e8:	080ae600 	call	80ae60 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80b2ec:	e0bfef17 	ldw	r2,-68(fp)
  80b2f0:	10880020 	cmpeqi	r2,r2,8192
  80b2f4:	e0bffe15 	stw	r2,-8(fp)
  80b2f8:	00000506 	br	80b310 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80b2fc:	080b3280 	call	80b328 <alt_get_errno>
  80b300:	1007883a 	mov	r3,r2
  80b304:	00801444 	movi	r2,81
  80b308:	18800015 	stw	r2,0(r3)
    return 0;
  80b30c:	e03ffe15 	stw	zero,-8(fp)
  80b310:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80b314:	e037883a 	mov	sp,fp
  80b318:	dfc00117 	ldw	ra,4(sp)
  80b31c:	df000017 	ldw	fp,0(sp)
  80b320:	dec00204 	addi	sp,sp,8
  80b324:	f800283a 	ret

0080b328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b328:	defffd04 	addi	sp,sp,-12
  80b32c:	dfc00215 	stw	ra,8(sp)
  80b330:	df000115 	stw	fp,4(sp)
  80b334:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b338:	00802074 	movhi	r2,129
  80b33c:	10bced04 	addi	r2,r2,-3148
  80b340:	10800017 	ldw	r2,0(r2)
  80b344:	1005003a 	cmpeq	r2,r2,zero
  80b348:	1000061e 	bne	r2,zero,80b364 <alt_get_errno+0x3c>
  80b34c:	00802074 	movhi	r2,129
  80b350:	10bced04 	addi	r2,r2,-3148
  80b354:	10800017 	ldw	r2,0(r2)
  80b358:	103ee83a 	callr	r2
  80b35c:	e0bfff15 	stw	r2,-4(fp)
  80b360:	00000306 	br	80b370 <alt_get_errno+0x48>
  80b364:	00802074 	movhi	r2,129
  80b368:	10839504 	addi	r2,r2,3668
  80b36c:	e0bfff15 	stw	r2,-4(fp)
  80b370:	e0bfff17 	ldw	r2,-4(fp)
}
  80b374:	e037883a 	mov	sp,fp
  80b378:	dfc00117 	ldw	ra,4(sp)
  80b37c:	df000017 	ldw	fp,0(sp)
  80b380:	dec00204 	addi	sp,sp,8
  80b384:	f800283a 	ret

0080b388 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80b388:	defffe04 	addi	sp,sp,-8
  80b38c:	dfc00115 	stw	ra,4(sp)
  80b390:	df000015 	stw	fp,0(sp)
  80b394:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80b398:	01002074 	movhi	r4,129
  80b39c:	213cf204 	addi	r4,r4,-3128
  80b3a0:	01402074 	movhi	r5,129
  80b3a4:	29765604 	addi	r5,r5,-9896
  80b3a8:	01802074 	movhi	r6,129
  80b3ac:	31bcf204 	addi	r6,r6,-3128
  80b3b0:	080b4080 	call	80b408 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80b3b4:	01002034 	movhi	r4,128
  80b3b8:	21000804 	addi	r4,r4,32
  80b3bc:	01402034 	movhi	r5,128
  80b3c0:	29400804 	addi	r5,r5,32
  80b3c4:	01802034 	movhi	r6,128
  80b3c8:	31806d04 	addi	r6,r6,436
  80b3cc:	080b4080 	call	80b408 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80b3d0:	01002074 	movhi	r4,129
  80b3d4:	21357404 	addi	r4,r4,-10800
  80b3d8:	01402074 	movhi	r5,129
  80b3dc:	29757404 	addi	r5,r5,-10800
  80b3e0:	01802074 	movhi	r6,129
  80b3e4:	31b65604 	addi	r6,r6,-9896
  80b3e8:	080b4080 	call	80b408 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80b3ec:	080c8d80 	call	80c8d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80b3f0:	080cad00 	call	80cad0 <alt_icache_flush_all>
}
  80b3f4:	e037883a 	mov	sp,fp
  80b3f8:	dfc00117 	ldw	ra,4(sp)
  80b3fc:	df000017 	ldw	fp,0(sp)
  80b400:	dec00204 	addi	sp,sp,8
  80b404:	f800283a 	ret

0080b408 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80b408:	defffc04 	addi	sp,sp,-16
  80b40c:	df000315 	stw	fp,12(sp)
  80b410:	df000304 	addi	fp,sp,12
  80b414:	e13ffd15 	stw	r4,-12(fp)
  80b418:	e17ffe15 	stw	r5,-8(fp)
  80b41c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80b420:	e0fffe17 	ldw	r3,-8(fp)
  80b424:	e0bffd17 	ldw	r2,-12(fp)
  80b428:	18800e26 	beq	r3,r2,80b464 <alt_load_section+0x5c>
  {
    while( to != end )
  80b42c:	00000a06 	br	80b458 <alt_load_section+0x50>
    {
      *to++ = *from++;
  80b430:	e0bffd17 	ldw	r2,-12(fp)
  80b434:	10c00017 	ldw	r3,0(r2)
  80b438:	e0bffe17 	ldw	r2,-8(fp)
  80b43c:	10c00015 	stw	r3,0(r2)
  80b440:	e0bffe17 	ldw	r2,-8(fp)
  80b444:	10800104 	addi	r2,r2,4
  80b448:	e0bffe15 	stw	r2,-8(fp)
  80b44c:	e0bffd17 	ldw	r2,-12(fp)
  80b450:	10800104 	addi	r2,r2,4
  80b454:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80b458:	e0fffe17 	ldw	r3,-8(fp)
  80b45c:	e0bfff17 	ldw	r2,-4(fp)
  80b460:	18bff31e 	bne	r3,r2,80b430 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80b464:	e037883a 	mov	sp,fp
  80b468:	df000017 	ldw	fp,0(sp)
  80b46c:	dec00104 	addi	sp,sp,4
  80b470:	f800283a 	ret

0080b474 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80b474:	defff804 	addi	sp,sp,-32
  80b478:	dfc00715 	stw	ra,28(sp)
  80b47c:	df000615 	stw	fp,24(sp)
  80b480:	df000604 	addi	fp,sp,24
  80b484:	e13ffc15 	stw	r4,-16(fp)
  80b488:	e17ffd15 	stw	r5,-12(fp)
  80b48c:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80b490:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b494:	e0bffc17 	ldw	r2,-16(fp)
  80b498:	1004803a 	cmplt	r2,r2,zero
  80b49c:	1000091e 	bne	r2,zero,80b4c4 <lseek+0x50>
  80b4a0:	e13ffc17 	ldw	r4,-16(fp)
  80b4a4:	01400304 	movi	r5,12
  80b4a8:	0801be80 	call	801be8 <__mulsi3>
  80b4ac:	1007883a 	mov	r3,r2
  80b4b0:	00802074 	movhi	r2,129
  80b4b4:	10b86504 	addi	r2,r2,-7788
  80b4b8:	1887883a 	add	r3,r3,r2
  80b4bc:	e0ffff15 	stw	r3,-4(fp)
  80b4c0:	00000106 	br	80b4c8 <lseek+0x54>
  80b4c4:	e03fff15 	stw	zero,-4(fp)
  80b4c8:	e0bfff17 	ldw	r2,-4(fp)
  80b4cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80b4d0:	e0bffb17 	ldw	r2,-20(fp)
  80b4d4:	1005003a 	cmpeq	r2,r2,zero
  80b4d8:	1000111e 	bne	r2,zero,80b520 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80b4dc:	e0bffb17 	ldw	r2,-20(fp)
  80b4e0:	10800017 	ldw	r2,0(r2)
  80b4e4:	10800717 	ldw	r2,28(r2)
  80b4e8:	1005003a 	cmpeq	r2,r2,zero
  80b4ec:	1000091e 	bne	r2,zero,80b514 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80b4f0:	e0bffb17 	ldw	r2,-20(fp)
  80b4f4:	10800017 	ldw	r2,0(r2)
  80b4f8:	10800717 	ldw	r2,28(r2)
  80b4fc:	e13ffb17 	ldw	r4,-20(fp)
  80b500:	e17ffd17 	ldw	r5,-12(fp)
  80b504:	e1bffe17 	ldw	r6,-8(fp)
  80b508:	103ee83a 	callr	r2
  80b50c:	e0bffa15 	stw	r2,-24(fp)
  80b510:	00000506 	br	80b528 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80b514:	00bfde84 	movi	r2,-134
  80b518:	e0bffa15 	stw	r2,-24(fp)
  80b51c:	00000206 	br	80b528 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80b520:	00bfebc4 	movi	r2,-81
  80b524:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80b528:	e0bffa17 	ldw	r2,-24(fp)
  80b52c:	1004403a 	cmpge	r2,r2,zero
  80b530:	1000071e 	bne	r2,zero,80b550 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80b534:	080b5680 	call	80b568 <alt_get_errno>
  80b538:	1007883a 	mov	r3,r2
  80b53c:	e0bffa17 	ldw	r2,-24(fp)
  80b540:	0085c83a 	sub	r2,zero,r2
  80b544:	18800015 	stw	r2,0(r3)
    rc = -1;
  80b548:	00bfffc4 	movi	r2,-1
  80b54c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80b550:	e0bffa17 	ldw	r2,-24(fp)
}
  80b554:	e037883a 	mov	sp,fp
  80b558:	dfc00117 	ldw	ra,4(sp)
  80b55c:	df000017 	ldw	fp,0(sp)
  80b560:	dec00204 	addi	sp,sp,8
  80b564:	f800283a 	ret

0080b568 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b568:	defffd04 	addi	sp,sp,-12
  80b56c:	dfc00215 	stw	ra,8(sp)
  80b570:	df000115 	stw	fp,4(sp)
  80b574:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b578:	00802074 	movhi	r2,129
  80b57c:	10bced04 	addi	r2,r2,-3148
  80b580:	10800017 	ldw	r2,0(r2)
  80b584:	1005003a 	cmpeq	r2,r2,zero
  80b588:	1000061e 	bne	r2,zero,80b5a4 <alt_get_errno+0x3c>
  80b58c:	00802074 	movhi	r2,129
  80b590:	10bced04 	addi	r2,r2,-3148
  80b594:	10800017 	ldw	r2,0(r2)
  80b598:	103ee83a 	callr	r2
  80b59c:	e0bfff15 	stw	r2,-4(fp)
  80b5a0:	00000306 	br	80b5b0 <alt_get_errno+0x48>
  80b5a4:	00802074 	movhi	r2,129
  80b5a8:	10839504 	addi	r2,r2,3668
  80b5ac:	e0bfff15 	stw	r2,-4(fp)
  80b5b0:	e0bfff17 	ldw	r2,-4(fp)
}
  80b5b4:	e037883a 	mov	sp,fp
  80b5b8:	dfc00117 	ldw	ra,4(sp)
  80b5bc:	df000017 	ldw	fp,0(sp)
  80b5c0:	dec00204 	addi	sp,sp,8
  80b5c4:	f800283a 	ret

0080b5c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b5c8:	defffd04 	addi	sp,sp,-12
  80b5cc:	dfc00215 	stw	ra,8(sp)
  80b5d0:	df000115 	stw	fp,4(sp)
  80b5d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b5d8:	0009883a 	mov	r4,zero
  80b5dc:	080bc540 	call	80bc54 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b5e0:	080bc880 	call	80bc88 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b5e4:	01002074 	movhi	r4,129
  80b5e8:	21364c04 	addi	r4,r4,-9936
  80b5ec:	01402074 	movhi	r5,129
  80b5f0:	29764c04 	addi	r5,r5,-9936
  80b5f4:	01802074 	movhi	r6,129
  80b5f8:	31b64c04 	addi	r6,r6,-9936
  80b5fc:	080cbc40 	call	80cbc4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b600:	080ca080 	call	80ca08 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b604:	01002074 	movhi	r4,129
  80b608:	21329b04 	addi	r4,r4,-13716
  80b60c:	080d1c40 	call	80d1c4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b610:	d126ba17 	ldw	r4,-25880(gp)
  80b614:	d166bb17 	ldw	r5,-25876(gp)
  80b618:	d1a6bc17 	ldw	r6,-25872(gp)
  80b61c:	08002880 	call	800288 <main>
  80b620:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80b624:	01000044 	movi	r4,1
  80b628:	080acd40 	call	80acd4 <close>
  exit (result);
  80b62c:	e13fff17 	ldw	r4,-4(fp)
  80b630:	080d1d80 	call	80d1d8 <exit>

0080b634 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80b634:	defffe04 	addi	sp,sp,-8
  80b638:	df000115 	stw	fp,4(sp)
  80b63c:	df000104 	addi	fp,sp,4
  80b640:	e13fff15 	stw	r4,-4(fp)
}
  80b644:	e037883a 	mov	sp,fp
  80b648:	df000017 	ldw	fp,0(sp)
  80b64c:	dec00104 	addi	sp,sp,4
  80b650:	f800283a 	ret

0080b654 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b654:	defffe04 	addi	sp,sp,-8
  80b658:	df000115 	stw	fp,4(sp)
  80b65c:	df000104 	addi	fp,sp,4
  80b660:	e13fff15 	stw	r4,-4(fp)
}
  80b664:	e037883a 	mov	sp,fp
  80b668:	df000017 	ldw	fp,0(sp)
  80b66c:	dec00104 	addi	sp,sp,4
  80b670:	f800283a 	ret

0080b674 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80b674:	defff704 	addi	sp,sp,-36
  80b678:	dfc00815 	stw	ra,32(sp)
  80b67c:	df000715 	stw	fp,28(sp)
  80b680:	df000704 	addi	fp,sp,28
  80b684:	e13ffb15 	stw	r4,-20(fp)
  80b688:	e17ffc15 	stw	r5,-16(fp)
  80b68c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80b690:	e0bffb17 	ldw	r2,-20(fp)
  80b694:	1004803a 	cmplt	r2,r2,zero
  80b698:	1000091e 	bne	r2,zero,80b6c0 <read+0x4c>
  80b69c:	e13ffb17 	ldw	r4,-20(fp)
  80b6a0:	01400304 	movi	r5,12
  80b6a4:	0801be80 	call	801be8 <__mulsi3>
  80b6a8:	1007883a 	mov	r3,r2
  80b6ac:	00802074 	movhi	r2,129
  80b6b0:	10b86504 	addi	r2,r2,-7788
  80b6b4:	1887883a 	add	r3,r3,r2
  80b6b8:	e0ffff15 	stw	r3,-4(fp)
  80b6bc:	00000106 	br	80b6c4 <read+0x50>
  80b6c0:	e03fff15 	stw	zero,-4(fp)
  80b6c4:	e0bfff17 	ldw	r2,-4(fp)
  80b6c8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80b6cc:	e0bffa17 	ldw	r2,-24(fp)
  80b6d0:	1005003a 	cmpeq	r2,r2,zero
  80b6d4:	1000241e 	bne	r2,zero,80b768 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80b6d8:	e0bffa17 	ldw	r2,-24(fp)
  80b6dc:	10800217 	ldw	r2,8(r2)
  80b6e0:	108000cc 	andi	r2,r2,3
  80b6e4:	10800060 	cmpeqi	r2,r2,1
  80b6e8:	10001a1e 	bne	r2,zero,80b754 <read+0xe0>
  80b6ec:	e0bffa17 	ldw	r2,-24(fp)
  80b6f0:	10800017 	ldw	r2,0(r2)
  80b6f4:	10800517 	ldw	r2,20(r2)
  80b6f8:	1005003a 	cmpeq	r2,r2,zero
  80b6fc:	1000151e 	bne	r2,zero,80b754 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80b700:	e0bffa17 	ldw	r2,-24(fp)
  80b704:	10800017 	ldw	r2,0(r2)
  80b708:	10800517 	ldw	r2,20(r2)
  80b70c:	e17ffc17 	ldw	r5,-16(fp)
  80b710:	e1bffd17 	ldw	r6,-12(fp)
  80b714:	e13ffa17 	ldw	r4,-24(fp)
  80b718:	103ee83a 	callr	r2
  80b71c:	e0bff915 	stw	r2,-28(fp)
  80b720:	e0bff917 	ldw	r2,-28(fp)
  80b724:	1004403a 	cmpge	r2,r2,zero
  80b728:	1000071e 	bne	r2,zero,80b748 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80b72c:	080b7980 	call	80b798 <alt_get_errno>
  80b730:	e0fff917 	ldw	r3,-28(fp)
  80b734:	00c7c83a 	sub	r3,zero,r3
  80b738:	10c00015 	stw	r3,0(r2)
          return -1;
  80b73c:	00bfffc4 	movi	r2,-1
  80b740:	e0bffe15 	stw	r2,-8(fp)
  80b744:	00000e06 	br	80b780 <read+0x10c>
        }
        return rval;
  80b748:	e0bff917 	ldw	r2,-28(fp)
  80b74c:	e0bffe15 	stw	r2,-8(fp)
  80b750:	00000b06 	br	80b780 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80b754:	080b7980 	call	80b798 <alt_get_errno>
  80b758:	1007883a 	mov	r3,r2
  80b75c:	00800344 	movi	r2,13
  80b760:	18800015 	stw	r2,0(r3)
  80b764:	00000406 	br	80b778 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80b768:	080b7980 	call	80b798 <alt_get_errno>
  80b76c:	1007883a 	mov	r3,r2
  80b770:	00801444 	movi	r2,81
  80b774:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80b778:	00bfffc4 	movi	r2,-1
  80b77c:	e0bffe15 	stw	r2,-8(fp)
  80b780:	e0bffe17 	ldw	r2,-8(fp)
}
  80b784:	e037883a 	mov	sp,fp
  80b788:	dfc00117 	ldw	ra,4(sp)
  80b78c:	df000017 	ldw	fp,0(sp)
  80b790:	dec00204 	addi	sp,sp,8
  80b794:	f800283a 	ret

0080b798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80b798:	defffd04 	addi	sp,sp,-12
  80b79c:	dfc00215 	stw	ra,8(sp)
  80b7a0:	df000115 	stw	fp,4(sp)
  80b7a4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80b7a8:	00802074 	movhi	r2,129
  80b7ac:	10bced04 	addi	r2,r2,-3148
  80b7b0:	10800017 	ldw	r2,0(r2)
  80b7b4:	1005003a 	cmpeq	r2,r2,zero
  80b7b8:	1000061e 	bne	r2,zero,80b7d4 <alt_get_errno+0x3c>
  80b7bc:	00802074 	movhi	r2,129
  80b7c0:	10bced04 	addi	r2,r2,-3148
  80b7c4:	10800017 	ldw	r2,0(r2)
  80b7c8:	103ee83a 	callr	r2
  80b7cc:	e0bfff15 	stw	r2,-4(fp)
  80b7d0:	00000306 	br	80b7e0 <alt_get_errno+0x48>
  80b7d4:	00802074 	movhi	r2,129
  80b7d8:	10839504 	addi	r2,r2,3668
  80b7dc:	e0bfff15 	stw	r2,-4(fp)
  80b7e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80b7e4:	e037883a 	mov	sp,fp
  80b7e8:	dfc00117 	ldw	ra,4(sp)
  80b7ec:	df000017 	ldw	fp,0(sp)
  80b7f0:	dec00204 	addi	sp,sp,8
  80b7f4:	f800283a 	ret

0080b7f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80b7f8:	defffc04 	addi	sp,sp,-16
  80b7fc:	dfc00315 	stw	ra,12(sp)
  80b800:	df000215 	stw	fp,8(sp)
  80b804:	dc000115 	stw	r16,4(sp)
  80b808:	df000104 	addi	fp,sp,4
  80b80c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80b810:	e0bfff17 	ldw	r2,-4(fp)
  80b814:	108000d0 	cmplti	r2,r2,3
  80b818:	10000f1e 	bne	r2,zero,80b858 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80b81c:	e13fff17 	ldw	r4,-4(fp)
  80b820:	04002074 	movhi	r16,129
  80b824:	84386504 	addi	r16,r16,-7788
  80b828:	01400304 	movi	r5,12
  80b82c:	0801be80 	call	801be8 <__mulsi3>
  80b830:	1405883a 	add	r2,r2,r16
  80b834:	10800204 	addi	r2,r2,8
  80b838:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80b83c:	e13fff17 	ldw	r4,-4(fp)
  80b840:	04002074 	movhi	r16,129
  80b844:	84386504 	addi	r16,r16,-7788
  80b848:	01400304 	movi	r5,12
  80b84c:	0801be80 	call	801be8 <__mulsi3>
  80b850:	1405883a 	add	r2,r2,r16
  80b854:	10000015 	stw	zero,0(r2)
  }
}
  80b858:	e037883a 	mov	sp,fp
  80b85c:	dfc00217 	ldw	ra,8(sp)
  80b860:	df000117 	ldw	fp,4(sp)
  80b864:	dc000017 	ldw	r16,0(sp)
  80b868:	dec00304 	addi	sp,sp,12
  80b86c:	f800283a 	ret

0080b870 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80b870:	defff804 	addi	sp,sp,-32
  80b874:	df000715 	stw	fp,28(sp)
  80b878:	df000704 	addi	fp,sp,28
  80b87c:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b880:	0005303a 	rdctl	r2,status
  80b884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b888:	e0fffb17 	ldw	r3,-20(fp)
  80b88c:	00bfff84 	movi	r2,-2
  80b890:	1884703a 	and	r2,r3,r2
  80b894:	1001703a 	wrctl	status,r2
  
  return context;
  80b898:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80b89c:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b8a0:	d0a01217 	ldw	r2,-32696(gp)
  80b8a4:	10c000c4 	addi	r3,r2,3
  80b8a8:	00bfff04 	movi	r2,-4
  80b8ac:	1884703a 	and	r2,r3,r2
  80b8b0:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80b8b4:	d0e01217 	ldw	r3,-32696(gp)
  80b8b8:	e0bffe17 	ldw	r2,-8(fp)
  80b8bc:	1887883a 	add	r3,r3,r2
  80b8c0:	00804034 	movhi	r2,256
  80b8c4:	10800004 	addi	r2,r2,0
  80b8c8:	10c0072e 	bgeu	r2,r3,80b8e8 <sbrk+0x78>
  80b8cc:	e0bffd17 	ldw	r2,-12(fp)
  80b8d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b8d4:	e0bffa17 	ldw	r2,-24(fp)
  80b8d8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80b8dc:	00bfffc4 	movi	r2,-1
  80b8e0:	e0bfff15 	stw	r2,-4(fp)
  80b8e4:	00000c06 	br	80b918 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80b8e8:	d0a01217 	ldw	r2,-32696(gp)
  80b8ec:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80b8f0:	d0e01217 	ldw	r3,-32696(gp)
  80b8f4:	e0bffe17 	ldw	r2,-8(fp)
  80b8f8:	1885883a 	add	r2,r3,r2
  80b8fc:	d0a01215 	stw	r2,-32696(gp)
  80b900:	e0bffd17 	ldw	r2,-12(fp)
  80b904:	e0bff915 	stw	r2,-28(fp)
  80b908:	e0bff917 	ldw	r2,-28(fp)
  80b90c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80b910:	e0bffc17 	ldw	r2,-16(fp)
  80b914:	e0bfff15 	stw	r2,-4(fp)
  80b918:	e0bfff17 	ldw	r2,-4(fp)
} 
  80b91c:	e037883a 	mov	sp,fp
  80b920:	df000017 	ldw	fp,0(sp)
  80b924:	dec00104 	addi	sp,sp,4
  80b928:	f800283a 	ret

0080b92c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80b92c:	defffa04 	addi	sp,sp,-24
  80b930:	df000515 	stw	fp,20(sp)
  80b934:	df000504 	addi	fp,sp,20
  80b938:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b93c:	0005303a 	rdctl	r2,status
  80b940:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b944:	e0fffd17 	ldw	r3,-12(fp)
  80b948:	00bfff84 	movi	r2,-2
  80b94c:	1884703a 	and	r2,r3,r2
  80b950:	1001703a 	wrctl	status,r2
  
  return context;
  80b954:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80b958:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  80b95c:	e0bfff17 	ldw	r2,-4(fp)
  80b960:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80b964:	e0bffc17 	ldw	r2,-16(fp)
  80b968:	10c00017 	ldw	r3,0(r2)
  80b96c:	e0bffc17 	ldw	r2,-16(fp)
  80b970:	10800117 	ldw	r2,4(r2)
  80b974:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  80b978:	e0bffc17 	ldw	r2,-16(fp)
  80b97c:	10c00117 	ldw	r3,4(r2)
  80b980:	e0bffc17 	ldw	r2,-16(fp)
  80b984:	10800017 	ldw	r2,0(r2)
  80b988:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80b98c:	e0fffc17 	ldw	r3,-16(fp)
  80b990:	e0bffc17 	ldw	r2,-16(fp)
  80b994:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  80b998:	e0fffc17 	ldw	r3,-16(fp)
  80b99c:	e0bffc17 	ldw	r2,-16(fp)
  80b9a0:	18800015 	stw	r2,0(r3)
  80b9a4:	e0bffe17 	ldw	r2,-8(fp)
  80b9a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b9ac:	e0bffb17 	ldw	r2,-20(fp)
  80b9b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80b9b4:	e037883a 	mov	sp,fp
  80b9b8:	df000017 	ldw	fp,0(sp)
  80b9bc:	dec00104 	addi	sp,sp,4
  80b9c0:	f800283a 	ret

0080b9c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80b9c4:	defffb04 	addi	sp,sp,-20
  80b9c8:	dfc00415 	stw	ra,16(sp)
  80b9cc:	df000315 	stw	fp,12(sp)
  80b9d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80b9d4:	d0a01317 	ldw	r2,-32692(gp)
  80b9d8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80b9dc:	d0a6be17 	ldw	r2,-25864(gp)
  80b9e0:	10800044 	addi	r2,r2,1
  80b9e4:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80b9e8:	00003106 	br	80bab0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  80b9ec:	e0bffe17 	ldw	r2,-8(fp)
  80b9f0:	10800017 	ldw	r2,0(r2)
  80b9f4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80b9f8:	e0bffe17 	ldw	r2,-8(fp)
  80b9fc:	10800403 	ldbu	r2,16(r2)
  80ba00:	10803fcc 	andi	r2,r2,255
  80ba04:	1005003a 	cmpeq	r2,r2,zero
  80ba08:	1000051e 	bne	r2,zero,80ba20 <alt_tick+0x5c>
  80ba0c:	d0a6be17 	ldw	r2,-25864(gp)
  80ba10:	1004c03a 	cmpne	r2,r2,zero
  80ba14:	1000021e 	bne	r2,zero,80ba20 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  80ba18:	e0bffe17 	ldw	r2,-8(fp)
  80ba1c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80ba20:	e0bffe17 	ldw	r2,-8(fp)
  80ba24:	10c00217 	ldw	r3,8(r2)
  80ba28:	d0a6be17 	ldw	r2,-25864(gp)
  80ba2c:	10c01e36 	bltu	r2,r3,80baa8 <alt_tick+0xe4>
  80ba30:	e0bffe17 	ldw	r2,-8(fp)
  80ba34:	10800403 	ldbu	r2,16(r2)
  80ba38:	10803fcc 	andi	r2,r2,255
  80ba3c:	1004c03a 	cmpne	r2,r2,zero
  80ba40:	1000191e 	bne	r2,zero,80baa8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80ba44:	e0bffe17 	ldw	r2,-8(fp)
  80ba48:	10c00317 	ldw	r3,12(r2)
  80ba4c:	e0bffe17 	ldw	r2,-8(fp)
  80ba50:	11000517 	ldw	r4,20(r2)
  80ba54:	183ee83a 	callr	r3
  80ba58:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80ba5c:	e0bffd17 	ldw	r2,-12(fp)
  80ba60:	1004c03a 	cmpne	r2,r2,zero
  80ba64:	1000031e 	bne	r2,zero,80ba74 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80ba68:	e13ffe17 	ldw	r4,-8(fp)
  80ba6c:	080b92c0 	call	80b92c <alt_alarm_stop>
  80ba70:	00000d06 	br	80baa8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80ba74:	e0bffe17 	ldw	r2,-8(fp)
  80ba78:	10c00217 	ldw	r3,8(r2)
  80ba7c:	e0bffd17 	ldw	r2,-12(fp)
  80ba80:	1887883a 	add	r3,r3,r2
  80ba84:	e0bffe17 	ldw	r2,-8(fp)
  80ba88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80ba8c:	e0bffe17 	ldw	r2,-8(fp)
  80ba90:	10c00217 	ldw	r3,8(r2)
  80ba94:	d0a6be17 	ldw	r2,-25864(gp)
  80ba98:	1880032e 	bgeu	r3,r2,80baa8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80ba9c:	e0fffe17 	ldw	r3,-8(fp)
  80baa0:	00800044 	movi	r2,1
  80baa4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80baa8:	e0bfff17 	ldw	r2,-4(fp)
  80baac:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80bab0:	d0e01304 	addi	r3,gp,-32692
  80bab4:	e0bffe17 	ldw	r2,-8(fp)
  80bab8:	10ffcc1e 	bne	r2,r3,80b9ec <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80babc:	e037883a 	mov	sp,fp
  80bac0:	dfc00117 	ldw	ra,4(sp)
  80bac4:	df000017 	ldw	fp,0(sp)
  80bac8:	dec00204 	addi	sp,sp,8
  80bacc:	f800283a 	ret

0080bad0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80bad0:	defff704 	addi	sp,sp,-36
  80bad4:	dfc00815 	stw	ra,32(sp)
  80bad8:	df000715 	stw	fp,28(sp)
  80badc:	df000704 	addi	fp,sp,28
  80bae0:	e13ffb15 	stw	r4,-20(fp)
  80bae4:	e17ffc15 	stw	r5,-16(fp)
  80bae8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80baec:	e0bffb17 	ldw	r2,-20(fp)
  80baf0:	1004803a 	cmplt	r2,r2,zero
  80baf4:	1000091e 	bne	r2,zero,80bb1c <write+0x4c>
  80baf8:	e13ffb17 	ldw	r4,-20(fp)
  80bafc:	01400304 	movi	r5,12
  80bb00:	0801be80 	call	801be8 <__mulsi3>
  80bb04:	1007883a 	mov	r3,r2
  80bb08:	00802074 	movhi	r2,129
  80bb0c:	10b86504 	addi	r2,r2,-7788
  80bb10:	1887883a 	add	r3,r3,r2
  80bb14:	e0ffff15 	stw	r3,-4(fp)
  80bb18:	00000106 	br	80bb20 <write+0x50>
  80bb1c:	e03fff15 	stw	zero,-4(fp)
  80bb20:	e0bfff17 	ldw	r2,-4(fp)
  80bb24:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80bb28:	e0bffa17 	ldw	r2,-24(fp)
  80bb2c:	1005003a 	cmpeq	r2,r2,zero
  80bb30:	1000241e 	bne	r2,zero,80bbc4 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80bb34:	e0bffa17 	ldw	r2,-24(fp)
  80bb38:	10800217 	ldw	r2,8(r2)
  80bb3c:	108000cc 	andi	r2,r2,3
  80bb40:	1005003a 	cmpeq	r2,r2,zero
  80bb44:	10001a1e 	bne	r2,zero,80bbb0 <write+0xe0>
  80bb48:	e0bffa17 	ldw	r2,-24(fp)
  80bb4c:	10800017 	ldw	r2,0(r2)
  80bb50:	10800617 	ldw	r2,24(r2)
  80bb54:	1005003a 	cmpeq	r2,r2,zero
  80bb58:	1000151e 	bne	r2,zero,80bbb0 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80bb5c:	e0bffa17 	ldw	r2,-24(fp)
  80bb60:	10800017 	ldw	r2,0(r2)
  80bb64:	10800617 	ldw	r2,24(r2)
  80bb68:	e17ffc17 	ldw	r5,-16(fp)
  80bb6c:	e1bffd17 	ldw	r6,-12(fp)
  80bb70:	e13ffa17 	ldw	r4,-24(fp)
  80bb74:	103ee83a 	callr	r2
  80bb78:	e0bff915 	stw	r2,-28(fp)
  80bb7c:	e0bff917 	ldw	r2,-28(fp)
  80bb80:	1004403a 	cmpge	r2,r2,zero
  80bb84:	1000071e 	bne	r2,zero,80bba4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80bb88:	080bbf40 	call	80bbf4 <alt_get_errno>
  80bb8c:	e0fff917 	ldw	r3,-28(fp)
  80bb90:	00c7c83a 	sub	r3,zero,r3
  80bb94:	10c00015 	stw	r3,0(r2)
        return -1;
  80bb98:	00bfffc4 	movi	r2,-1
  80bb9c:	e0bffe15 	stw	r2,-8(fp)
  80bba0:	00000e06 	br	80bbdc <write+0x10c>
      }
      return rval;
  80bba4:	e0bff917 	ldw	r2,-28(fp)
  80bba8:	e0bffe15 	stw	r2,-8(fp)
  80bbac:	00000b06 	br	80bbdc <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80bbb0:	080bbf40 	call	80bbf4 <alt_get_errno>
  80bbb4:	1007883a 	mov	r3,r2
  80bbb8:	00800344 	movi	r2,13
  80bbbc:	18800015 	stw	r2,0(r3)
  80bbc0:	00000406 	br	80bbd4 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80bbc4:	080bbf40 	call	80bbf4 <alt_get_errno>
  80bbc8:	1007883a 	mov	r3,r2
  80bbcc:	00801444 	movi	r2,81
  80bbd0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80bbd4:	00bfffc4 	movi	r2,-1
  80bbd8:	e0bffe15 	stw	r2,-8(fp)
  80bbdc:	e0bffe17 	ldw	r2,-8(fp)
}
  80bbe0:	e037883a 	mov	sp,fp
  80bbe4:	dfc00117 	ldw	ra,4(sp)
  80bbe8:	df000017 	ldw	fp,0(sp)
  80bbec:	dec00204 	addi	sp,sp,8
  80bbf0:	f800283a 	ret

0080bbf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80bbf4:	defffd04 	addi	sp,sp,-12
  80bbf8:	dfc00215 	stw	ra,8(sp)
  80bbfc:	df000115 	stw	fp,4(sp)
  80bc00:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80bc04:	00802074 	movhi	r2,129
  80bc08:	10bced04 	addi	r2,r2,-3148
  80bc0c:	10800017 	ldw	r2,0(r2)
  80bc10:	1005003a 	cmpeq	r2,r2,zero
  80bc14:	1000061e 	bne	r2,zero,80bc30 <alt_get_errno+0x3c>
  80bc18:	00802074 	movhi	r2,129
  80bc1c:	10bced04 	addi	r2,r2,-3148
  80bc20:	10800017 	ldw	r2,0(r2)
  80bc24:	103ee83a 	callr	r2
  80bc28:	e0bfff15 	stw	r2,-4(fp)
  80bc2c:	00000306 	br	80bc3c <alt_get_errno+0x48>
  80bc30:	00802074 	movhi	r2,129
  80bc34:	10839504 	addi	r2,r2,3668
  80bc38:	e0bfff15 	stw	r2,-4(fp)
  80bc3c:	e0bfff17 	ldw	r2,-4(fp)
}
  80bc40:	e037883a 	mov	sp,fp
  80bc44:	dfc00117 	ldw	ra,4(sp)
  80bc48:	df000017 	ldw	fp,0(sp)
  80bc4c:	dec00204 	addi	sp,sp,8
  80bc50:	f800283a 	ret

0080bc54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80bc54:	defffd04 	addi	sp,sp,-12
  80bc58:	dfc00215 	stw	ra,8(sp)
  80bc5c:	df000115 	stw	fp,4(sp)
  80bc60:	df000104 	addi	fp,sp,4
  80bc64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
  80bc68:	080cf200 	call	80cf20 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80bc6c:	00800044 	movi	r2,1
  80bc70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80bc74:	e037883a 	mov	sp,fp
  80bc78:	dfc00117 	ldw	ra,4(sp)
  80bc7c:	df000017 	ldw	fp,0(sp)
  80bc80:	dec00204 	addi	sp,sp,8
  80bc84:	f800283a 	ret

0080bc88 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80bc88:	defffe04 	addi	sp,sp,-8
  80bc8c:	dfc00115 	stw	ra,4(sp)
  80bc90:	df000015 	stw	fp,0(sp)
  80bc94:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80bc98:	01004074 	movhi	r4,257
  80bc9c:	21042804 	addi	r4,r4,4256
  80bca0:	000b883a 	mov	r5,zero
  80bca4:	018001c4 	movi	r6,7
  80bca8:	01c0fa04 	movi	r7,1000
  80bcac:	080c8480 	call	80c848 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80bcb0:	01002074 	movhi	r4,129
  80bcb4:	2138cf04 	addi	r4,r4,-7364
  80bcb8:	000b883a 	mov	r5,zero
  80bcbc:	01800144 	movi	r6,5
  80bcc0:	080be740 	call	80be74 <altera_avalon_jtag_uart_init>
  80bcc4:	01002074 	movhi	r4,129
  80bcc8:	2138c504 	addi	r4,r4,-7404
  80bccc:	080bcf40 	call	80bcf4 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
  80bcd0:	00c04074 	movhi	r3,257
  80bcd4:	18c40004 	addi	r3,r3,4096
  80bcd8:	00800044 	movi	r2,1
  80bcdc:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
  80bce0:	e037883a 	mov	sp,fp
  80bce4:	dfc00117 	ldw	ra,4(sp)
  80bce8:	df000017 	ldw	fp,0(sp)
  80bcec:	dec00204 	addi	sp,sp,8
  80bcf0:	f800283a 	ret

0080bcf4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80bcf4:	defffd04 	addi	sp,sp,-12
  80bcf8:	dfc00215 	stw	ra,8(sp)
  80bcfc:	df000115 	stw	fp,4(sp)
  80bd00:	df000104 	addi	fp,sp,4
  80bd04:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80bd08:	e13fff17 	ldw	r4,-4(fp)
  80bd0c:	01402074 	movhi	r5,129
  80bd10:	297cea04 	addi	r5,r5,-3160
  80bd14:	080c8f40 	call	80c8f4 <alt_dev_llist_insert>
}
  80bd18:	e037883a 	mov	sp,fp
  80bd1c:	dfc00117 	ldw	ra,4(sp)
  80bd20:	df000017 	ldw	fp,0(sp)
  80bd24:	dec00204 	addi	sp,sp,8
  80bd28:	f800283a 	ret

0080bd2c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80bd2c:	defffa04 	addi	sp,sp,-24
  80bd30:	dfc00515 	stw	ra,20(sp)
  80bd34:	df000415 	stw	fp,16(sp)
  80bd38:	df000404 	addi	fp,sp,16
  80bd3c:	e13ffd15 	stw	r4,-12(fp)
  80bd40:	e17ffe15 	stw	r5,-8(fp)
  80bd44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bd48:	e0bffd17 	ldw	r2,-12(fp)
  80bd4c:	10800017 	ldw	r2,0(r2)
  80bd50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80bd54:	e0bffc17 	ldw	r2,-16(fp)
  80bd58:	11000a04 	addi	r4,r2,40
  80bd5c:	e0bffd17 	ldw	r2,-12(fp)
  80bd60:	11c00217 	ldw	r7,8(r2)
  80bd64:	e17ffe17 	ldw	r5,-8(fp)
  80bd68:	e1bfff17 	ldw	r6,-4(fp)
  80bd6c:	080c3740 	call	80c374 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80bd70:	e037883a 	mov	sp,fp
  80bd74:	dfc00117 	ldw	ra,4(sp)
  80bd78:	df000017 	ldw	fp,0(sp)
  80bd7c:	dec00204 	addi	sp,sp,8
  80bd80:	f800283a 	ret

0080bd84 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80bd84:	defffa04 	addi	sp,sp,-24
  80bd88:	dfc00515 	stw	ra,20(sp)
  80bd8c:	df000415 	stw	fp,16(sp)
  80bd90:	df000404 	addi	fp,sp,16
  80bd94:	e13ffd15 	stw	r4,-12(fp)
  80bd98:	e17ffe15 	stw	r5,-8(fp)
  80bd9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bda0:	e0bffd17 	ldw	r2,-12(fp)
  80bda4:	10800017 	ldw	r2,0(r2)
  80bda8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80bdac:	e0bffc17 	ldw	r2,-16(fp)
  80bdb0:	11000a04 	addi	r4,r2,40
  80bdb4:	e0bffd17 	ldw	r2,-12(fp)
  80bdb8:	11c00217 	ldw	r7,8(r2)
  80bdbc:	e17ffe17 	ldw	r5,-8(fp)
  80bdc0:	e1bfff17 	ldw	r6,-4(fp)
  80bdc4:	080c5980 	call	80c598 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80bdc8:	e037883a 	mov	sp,fp
  80bdcc:	dfc00117 	ldw	ra,4(sp)
  80bdd0:	df000017 	ldw	fp,0(sp)
  80bdd4:	dec00204 	addi	sp,sp,8
  80bdd8:	f800283a 	ret

0080bddc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80bddc:	defffc04 	addi	sp,sp,-16
  80bde0:	dfc00315 	stw	ra,12(sp)
  80bde4:	df000215 	stw	fp,8(sp)
  80bde8:	df000204 	addi	fp,sp,8
  80bdec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bdf0:	e0bfff17 	ldw	r2,-4(fp)
  80bdf4:	10800017 	ldw	r2,0(r2)
  80bdf8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80bdfc:	e0bffe17 	ldw	r2,-8(fp)
  80be00:	11000a04 	addi	r4,r2,40
  80be04:	e0bfff17 	ldw	r2,-4(fp)
  80be08:	11400217 	ldw	r5,8(r2)
  80be0c:	080c20c0 	call	80c20c <altera_avalon_jtag_uart_close>
}
  80be10:	e037883a 	mov	sp,fp
  80be14:	dfc00117 	ldw	ra,4(sp)
  80be18:	df000017 	ldw	fp,0(sp)
  80be1c:	dec00204 	addi	sp,sp,8
  80be20:	f800283a 	ret

0080be24 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80be24:	defffa04 	addi	sp,sp,-24
  80be28:	dfc00515 	stw	ra,20(sp)
  80be2c:	df000415 	stw	fp,16(sp)
  80be30:	df000404 	addi	fp,sp,16
  80be34:	e13ffd15 	stw	r4,-12(fp)
  80be38:	e17ffe15 	stw	r5,-8(fp)
  80be3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80be40:	e0bffd17 	ldw	r2,-12(fp)
  80be44:	10800017 	ldw	r2,0(r2)
  80be48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80be4c:	e0bffc17 	ldw	r2,-16(fp)
  80be50:	11000a04 	addi	r4,r2,40
  80be54:	e17ffe17 	ldw	r5,-8(fp)
  80be58:	e1bfff17 	ldw	r6,-4(fp)
  80be5c:	080c2800 	call	80c280 <altera_avalon_jtag_uart_ioctl>
}
  80be60:	e037883a 	mov	sp,fp
  80be64:	dfc00117 	ldw	ra,4(sp)
  80be68:	df000017 	ldw	fp,0(sp)
  80be6c:	dec00204 	addi	sp,sp,8
  80be70:	f800283a 	ret

0080be74 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80be74:	defffa04 	addi	sp,sp,-24
  80be78:	dfc00515 	stw	ra,20(sp)
  80be7c:	df000415 	stw	fp,16(sp)
  80be80:	df000404 	addi	fp,sp,16
  80be84:	e13ffd15 	stw	r4,-12(fp)
  80be88:	e17ffe15 	stw	r5,-8(fp)
  80be8c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80be90:	e0fffd17 	ldw	r3,-12(fp)
  80be94:	00800044 	movi	r2,1
  80be98:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80be9c:	e0bffd17 	ldw	r2,-12(fp)
  80bea0:	10800017 	ldw	r2,0(r2)
  80bea4:	11000104 	addi	r4,r2,4
  80bea8:	e0bffd17 	ldw	r2,-12(fp)
  80beac:	10800817 	ldw	r2,32(r2)
  80beb0:	1007883a 	mov	r3,r2
  80beb4:	2005883a 	mov	r2,r4
  80beb8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80bebc:	e13ffe17 	ldw	r4,-8(fp)
  80bec0:	e17fff17 	ldw	r5,-4(fp)
  80bec4:	d8000015 	stw	zero,0(sp)
  80bec8:	01802074 	movhi	r6,129
  80becc:	31afcd04 	addi	r6,r6,-16588
  80bed0:	e1fffd17 	ldw	r7,-12(fp)
  80bed4:	080af980 	call	80af98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80bed8:	e0bffd17 	ldw	r2,-12(fp)
  80bedc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80bee0:	e0bffd17 	ldw	r2,-12(fp)
  80bee4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80bee8:	00802074 	movhi	r2,129
  80beec:	10839a04 	addi	r2,r2,3688
  80bef0:	10800017 	ldw	r2,0(r2)
  80bef4:	100b883a 	mov	r5,r2
  80bef8:	01802074 	movhi	r6,129
  80befc:	31b05704 	addi	r6,r6,-16036
  80bf00:	e1fffd17 	ldw	r7,-12(fp)
  80bf04:	080ab800 	call	80ab80 <alt_alarm_start>
  80bf08:	1004403a 	cmpge	r2,r2,zero
  80bf0c:	1000041e 	bne	r2,zero,80bf20 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80bf10:	e0fffd17 	ldw	r3,-12(fp)
  80bf14:	00a00034 	movhi	r2,32768
  80bf18:	10bfffc4 	addi	r2,r2,-1
  80bf1c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80bf20:	e037883a 	mov	sp,fp
  80bf24:	dfc00117 	ldw	ra,4(sp)
  80bf28:	df000017 	ldw	fp,0(sp)
  80bf2c:	dec00204 	addi	sp,sp,8
  80bf30:	f800283a 	ret

0080bf34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80bf34:	defff804 	addi	sp,sp,-32
  80bf38:	df000715 	stw	fp,28(sp)
  80bf3c:	df000704 	addi	fp,sp,28
  80bf40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80bf44:	e0bfff17 	ldw	r2,-4(fp)
  80bf48:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
  80bf4c:	e0bffe17 	ldw	r2,-8(fp)
  80bf50:	10800017 	ldw	r2,0(r2)
  80bf54:	e0bffd15 	stw	r2,-12(fp)
  80bf58:	00000006 	br	80bf5c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bf5c:	e0bffd17 	ldw	r2,-12(fp)
  80bf60:	10800104 	addi	r2,r2,4
  80bf64:	10800037 	ldwio	r2,0(r2)
  80bf68:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80bf6c:	e0bffc17 	ldw	r2,-16(fp)
  80bf70:	1080c00c 	andi	r2,r2,768
  80bf74:	1005003a 	cmpeq	r2,r2,zero
  80bf78:	1000741e 	bne	r2,zero,80c14c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80bf7c:	e0bffc17 	ldw	r2,-16(fp)
  80bf80:	1080400c 	andi	r2,r2,256
  80bf84:	1005003a 	cmpeq	r2,r2,zero
  80bf88:	1000351e 	bne	r2,zero,80c060 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80bf8c:	00800074 	movhi	r2,1
  80bf90:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bf94:	e0bffe17 	ldw	r2,-8(fp)
  80bf98:	10800a17 	ldw	r2,40(r2)
  80bf9c:	10800044 	addi	r2,r2,1
  80bfa0:	1081ffcc 	andi	r2,r2,2047
  80bfa4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
  80bfa8:	e0bffe17 	ldw	r2,-8(fp)
  80bfac:	10c00b17 	ldw	r3,44(r2)
  80bfb0:	e0bffa17 	ldw	r2,-24(fp)
  80bfb4:	18801626 	beq	r3,r2,80c010 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80bfb8:	e0bffd17 	ldw	r2,-12(fp)
  80bfbc:	10800037 	ldwio	r2,0(r2)
  80bfc0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80bfc4:	e0bffb17 	ldw	r2,-20(fp)
  80bfc8:	10a0000c 	andi	r2,r2,32768
  80bfcc:	1005003a 	cmpeq	r2,r2,zero
  80bfd0:	10000f1e 	bne	r2,zero,80c010 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80bfd4:	e0bffe17 	ldw	r2,-8(fp)
  80bfd8:	10c00a17 	ldw	r3,40(r2)
  80bfdc:	e0bffb17 	ldw	r2,-20(fp)
  80bfe0:	1009883a 	mov	r4,r2
  80bfe4:	e0bffe17 	ldw	r2,-8(fp)
  80bfe8:	1885883a 	add	r2,r3,r2
  80bfec:	10800e04 	addi	r2,r2,56
  80bff0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bff4:	e0bffe17 	ldw	r2,-8(fp)
  80bff8:	10800a17 	ldw	r2,40(r2)
  80bffc:	10800044 	addi	r2,r2,1
  80c000:	10c1ffcc 	andi	r3,r2,2047
  80c004:	e0bffe17 	ldw	r2,-8(fp)
  80c008:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80c00c:	003fe106 	br	80bf94 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80c010:	e0bffb17 	ldw	r2,-20(fp)
  80c014:	10bfffec 	andhi	r2,r2,65535
  80c018:	1005003a 	cmpeq	r2,r2,zero
  80c01c:	1000101e 	bne	r2,zero,80c060 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c020:	e0bffe17 	ldw	r2,-8(fp)
  80c024:	10c00817 	ldw	r3,32(r2)
  80c028:	00bfff84 	movi	r2,-2
  80c02c:	1886703a 	and	r3,r3,r2
  80c030:	e0bffe17 	ldw	r2,-8(fp)
  80c034:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80c038:	e0bffd17 	ldw	r2,-12(fp)
  80c03c:	11000104 	addi	r4,r2,4
  80c040:	e0bffe17 	ldw	r2,-8(fp)
  80c044:	10800817 	ldw	r2,32(r2)
  80c048:	1007883a 	mov	r3,r2
  80c04c:	2005883a 	mov	r2,r4
  80c050:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c054:	e0bffd17 	ldw	r2,-12(fp)
  80c058:	10800104 	addi	r2,r2,4
  80c05c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80c060:	e0bffc17 	ldw	r2,-16(fp)
  80c064:	1080800c 	andi	r2,r2,512
  80c068:	1005003a 	cmpeq	r2,r2,zero
  80c06c:	103fbb1e 	bne	r2,zero,80bf5c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80c070:	e0bffc17 	ldw	r2,-16(fp)
  80c074:	10bfffec 	andhi	r2,r2,65535
  80c078:	1004d43a 	srli	r2,r2,16
  80c07c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c080:	00001506 	br	80c0d8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80c084:	e13ffd17 	ldw	r4,-12(fp)
  80c088:	e0bffe17 	ldw	r2,-8(fp)
  80c08c:	10c00d17 	ldw	r3,52(r2)
  80c090:	e0bffe17 	ldw	r2,-8(fp)
  80c094:	1885883a 	add	r2,r3,r2
  80c098:	10820e04 	addi	r2,r2,2104
  80c09c:	10800003 	ldbu	r2,0(r2)
  80c0a0:	10c03fcc 	andi	r3,r2,255
  80c0a4:	18c0201c 	xori	r3,r3,128
  80c0a8:	18ffe004 	addi	r3,r3,-128
  80c0ac:	2005883a 	mov	r2,r4
  80c0b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c0b4:	e0bffe17 	ldw	r2,-8(fp)
  80c0b8:	10800d17 	ldw	r2,52(r2)
  80c0bc:	10800044 	addi	r2,r2,1
  80c0c0:	10c1ffcc 	andi	r3,r2,2047
  80c0c4:	e0bffe17 	ldw	r2,-8(fp)
  80c0c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80c0cc:	e0bff917 	ldw	r2,-28(fp)
  80c0d0:	10bfffc4 	addi	r2,r2,-1
  80c0d4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80c0d8:	e0bff917 	ldw	r2,-28(fp)
  80c0dc:	1005003a 	cmpeq	r2,r2,zero
  80c0e0:	1000051e 	bne	r2,zero,80c0f8 <altera_avalon_jtag_uart_irq+0x1c4>
  80c0e4:	e0bffe17 	ldw	r2,-8(fp)
  80c0e8:	10c00d17 	ldw	r3,52(r2)
  80c0ec:	e0bffe17 	ldw	r2,-8(fp)
  80c0f0:	10800c17 	ldw	r2,48(r2)
  80c0f4:	18bfe31e 	bne	r3,r2,80c084 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80c0f8:	e0bff917 	ldw	r2,-28(fp)
  80c0fc:	1005003a 	cmpeq	r2,r2,zero
  80c100:	103f961e 	bne	r2,zero,80bf5c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c104:	e0bffe17 	ldw	r2,-8(fp)
  80c108:	10c00817 	ldw	r3,32(r2)
  80c10c:	00bfff44 	movi	r2,-3
  80c110:	1886703a 	and	r3,r3,r2
  80c114:	e0bffe17 	ldw	r2,-8(fp)
  80c118:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c11c:	e0bffe17 	ldw	r2,-8(fp)
  80c120:	10800017 	ldw	r2,0(r2)
  80c124:	11000104 	addi	r4,r2,4
  80c128:	e0bffe17 	ldw	r2,-8(fp)
  80c12c:	10800817 	ldw	r2,32(r2)
  80c130:	1007883a 	mov	r3,r2
  80c134:	2005883a 	mov	r2,r4
  80c138:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80c13c:	e0bffd17 	ldw	r2,-12(fp)
  80c140:	10800104 	addi	r2,r2,4
  80c144:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80c148:	003f8406 	br	80bf5c <altera_avalon_jtag_uart_irq+0x28>
}
  80c14c:	e037883a 	mov	sp,fp
  80c150:	df000017 	ldw	fp,0(sp)
  80c154:	dec00104 	addi	sp,sp,4
  80c158:	f800283a 	ret

0080c15c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80c15c:	defffc04 	addi	sp,sp,-16
  80c160:	df000315 	stw	fp,12(sp)
  80c164:	df000304 	addi	fp,sp,12
  80c168:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80c16c:	e0bfff17 	ldw	r2,-4(fp)
  80c170:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80c174:	e0bffe17 	ldw	r2,-8(fp)
  80c178:	10800017 	ldw	r2,0(r2)
  80c17c:	10800104 	addi	r2,r2,4
  80c180:	10800037 	ldwio	r2,0(r2)
  80c184:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80c188:	e0bffd17 	ldw	r2,-12(fp)
  80c18c:	1081000c 	andi	r2,r2,1024
  80c190:	1005003a 	cmpeq	r2,r2,zero
  80c194:	10000c1e 	bne	r2,zero,80c1c8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80c198:	e0bffe17 	ldw	r2,-8(fp)
  80c19c:	10800017 	ldw	r2,0(r2)
  80c1a0:	11000104 	addi	r4,r2,4
  80c1a4:	e0bffe17 	ldw	r2,-8(fp)
  80c1a8:	10800817 	ldw	r2,32(r2)
  80c1ac:	10810014 	ori	r2,r2,1024
  80c1b0:	1007883a 	mov	r3,r2
  80c1b4:	2005883a 	mov	r2,r4
  80c1b8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  80c1bc:	e0bffe17 	ldw	r2,-8(fp)
  80c1c0:	10000915 	stw	zero,36(r2)
  80c1c4:	00000a06 	br	80c1f0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80c1c8:	e0bffe17 	ldw	r2,-8(fp)
  80c1cc:	10c00917 	ldw	r3,36(r2)
  80c1d0:	00a00034 	movhi	r2,32768
  80c1d4:	10bfff04 	addi	r2,r2,-4
  80c1d8:	10c00536 	bltu	r2,r3,80c1f0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
  80c1dc:	e0bffe17 	ldw	r2,-8(fp)
  80c1e0:	10800917 	ldw	r2,36(r2)
  80c1e4:	10c00044 	addi	r3,r2,1
  80c1e8:	e0bffe17 	ldw	r2,-8(fp)
  80c1ec:	10c00915 	stw	r3,36(r2)
  80c1f0:	00802074 	movhi	r2,129
  80c1f4:	10839a04 	addi	r2,r2,3688
  80c1f8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80c1fc:	e037883a 	mov	sp,fp
  80c200:	df000017 	ldw	fp,0(sp)
  80c204:	dec00104 	addi	sp,sp,4
  80c208:	f800283a 	ret

0080c20c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c20c:	defffc04 	addi	sp,sp,-16
  80c210:	df000315 	stw	fp,12(sp)
  80c214:	df000304 	addi	fp,sp,12
  80c218:	e13ffd15 	stw	r4,-12(fp)
  80c21c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c220:	00000706 	br	80c240 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  80c224:	e0bffe17 	ldw	r2,-8(fp)
  80c228:	1090000c 	andi	r2,r2,16384
  80c22c:	1005003a 	cmpeq	r2,r2,zero
  80c230:	1000031e 	bne	r2,zero,80c240 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  80c234:	00bffd44 	movi	r2,-11
  80c238:	e0bfff15 	stw	r2,-4(fp)
  80c23c:	00000b06 	br	80c26c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c240:	e0bffd17 	ldw	r2,-12(fp)
  80c244:	10c00d17 	ldw	r3,52(r2)
  80c248:	e0bffd17 	ldw	r2,-12(fp)
  80c24c:	10800c17 	ldw	r2,48(r2)
  80c250:	18800526 	beq	r3,r2,80c268 <altera_avalon_jtag_uart_close+0x5c>
  80c254:	e0bffd17 	ldw	r2,-12(fp)
  80c258:	10c00917 	ldw	r3,36(r2)
  80c25c:	e0bffd17 	ldw	r2,-12(fp)
  80c260:	10800117 	ldw	r2,4(r2)
  80c264:	18bfef36 	bltu	r3,r2,80c224 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c268:	e03fff15 	stw	zero,-4(fp)
  80c26c:	e0bfff17 	ldw	r2,-4(fp)
}
  80c270:	e037883a 	mov	sp,fp
  80c274:	df000017 	ldw	fp,0(sp)
  80c278:	dec00104 	addi	sp,sp,4
  80c27c:	f800283a 	ret

0080c280 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c280:	defff804 	addi	sp,sp,-32
  80c284:	df000715 	stw	fp,28(sp)
  80c288:	df000704 	addi	fp,sp,28
  80c28c:	e13ffb15 	stw	r4,-20(fp)
  80c290:	e17ffc15 	stw	r5,-16(fp)
  80c294:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  80c298:	00bff9c4 	movi	r2,-25
  80c29c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  80c2a0:	e0bffc17 	ldw	r2,-16(fp)
  80c2a4:	e0bfff15 	stw	r2,-4(fp)
  80c2a8:	e0ffff17 	ldw	r3,-4(fp)
  80c2ac:	189a8060 	cmpeqi	r2,r3,27137
  80c2b0:	1000041e 	bne	r2,zero,80c2c4 <altera_avalon_jtag_uart_ioctl+0x44>
  80c2b4:	e0ffff17 	ldw	r3,-4(fp)
  80c2b8:	189a80a0 	cmpeqi	r2,r3,27138
  80c2bc:	10001b1e 	bne	r2,zero,80c32c <altera_avalon_jtag_uart_ioctl+0xac>
  80c2c0:	00002706 	br	80c360 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c2c4:	e0bffb17 	ldw	r2,-20(fp)
  80c2c8:	10c00117 	ldw	r3,4(r2)
  80c2cc:	00a00034 	movhi	r2,32768
  80c2d0:	10bfffc4 	addi	r2,r2,-1
  80c2d4:	18802226 	beq	r3,r2,80c360 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  80c2d8:	e0bffd17 	ldw	r2,-12(fp)
  80c2dc:	10800017 	ldw	r2,0(r2)
  80c2e0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c2e4:	e0bff917 	ldw	r2,-28(fp)
  80c2e8:	10800090 	cmplti	r2,r2,2
  80c2ec:	1000071e 	bne	r2,zero,80c30c <altera_avalon_jtag_uart_ioctl+0x8c>
  80c2f0:	e0fff917 	ldw	r3,-28(fp)
  80c2f4:	00a00034 	movhi	r2,32768
  80c2f8:	10bfffc4 	addi	r2,r2,-1
  80c2fc:	18800326 	beq	r3,r2,80c30c <altera_avalon_jtag_uart_ioctl+0x8c>
  80c300:	e0bff917 	ldw	r2,-28(fp)
  80c304:	e0bffe15 	stw	r2,-8(fp)
  80c308:	00000306 	br	80c318 <altera_avalon_jtag_uart_ioctl+0x98>
  80c30c:	00e00034 	movhi	r3,32768
  80c310:	18ffff84 	addi	r3,r3,-2
  80c314:	e0fffe15 	stw	r3,-8(fp)
  80c318:	e0bffb17 	ldw	r2,-20(fp)
  80c31c:	e0fffe17 	ldw	r3,-8(fp)
  80c320:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80c324:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  80c328:	00000d06 	br	80c360 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c32c:	e0bffb17 	ldw	r2,-20(fp)
  80c330:	10c00117 	ldw	r3,4(r2)
  80c334:	00a00034 	movhi	r2,32768
  80c338:	10bfffc4 	addi	r2,r2,-1
  80c33c:	18800826 	beq	r3,r2,80c360 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c340:	e13ffd17 	ldw	r4,-12(fp)
  80c344:	e0bffb17 	ldw	r2,-20(fp)
  80c348:	10c00917 	ldw	r3,36(r2)
  80c34c:	e0bffb17 	ldw	r2,-20(fp)
  80c350:	10800117 	ldw	r2,4(r2)
  80c354:	1885803a 	cmpltu	r2,r3,r2
  80c358:	20800015 	stw	r2,0(r4)
      rc = 0;
  80c35c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  80c360:	e0bffa17 	ldw	r2,-24(fp)
}
  80c364:	e037883a 	mov	sp,fp
  80c368:	df000017 	ldw	fp,0(sp)
  80c36c:	dec00104 	addi	sp,sp,4
  80c370:	f800283a 	ret

0080c374 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c374:	defff204 	addi	sp,sp,-56
  80c378:	dfc00d15 	stw	ra,52(sp)
  80c37c:	df000c15 	stw	fp,48(sp)
  80c380:	df000c04 	addi	fp,sp,48
  80c384:	e13ffb15 	stw	r4,-20(fp)
  80c388:	e17ffc15 	stw	r5,-16(fp)
  80c38c:	e1bffd15 	stw	r6,-12(fp)
  80c390:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  80c394:	e0bffc17 	ldw	r2,-16(fp)
  80c398:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c39c:	00004806 	br	80c4c0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c3a0:	e0bffb17 	ldw	r2,-20(fp)
  80c3a4:	10800a17 	ldw	r2,40(r2)
  80c3a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80c3ac:	e0bffb17 	ldw	r2,-20(fp)
  80c3b0:	10800b17 	ldw	r2,44(r2)
  80c3b4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
  80c3b8:	e0fff717 	ldw	r3,-36(fp)
  80c3bc:	e0bff617 	ldw	r2,-40(fp)
  80c3c0:	18800536 	bltu	r3,r2,80c3d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80c3c4:	e0bff717 	ldw	r2,-36(fp)
  80c3c8:	e0fff617 	ldw	r3,-40(fp)
  80c3cc:	10c5c83a 	sub	r2,r2,r3
  80c3d0:	e0bff815 	stw	r2,-32(fp)
  80c3d4:	00000406 	br	80c3e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c3d8:	00820004 	movi	r2,2048
  80c3dc:	e0fff617 	ldw	r3,-40(fp)
  80c3e0:	10c5c83a 	sub	r2,r2,r3
  80c3e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c3e8:	e0bff817 	ldw	r2,-32(fp)
  80c3ec:	1005003a 	cmpeq	r2,r2,zero
  80c3f0:	10001f1e 	bne	r2,zero,80c470 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
  80c3f4:	e0fffd17 	ldw	r3,-12(fp)
  80c3f8:	e0bff817 	ldw	r2,-32(fp)
  80c3fc:	1880022e 	bgeu	r3,r2,80c408 <altera_avalon_jtag_uart_read+0x94>
        n = space;
  80c400:	e0bffd17 	ldw	r2,-12(fp)
  80c404:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c408:	e0bffb17 	ldw	r2,-20(fp)
  80c40c:	10c00e04 	addi	r3,r2,56
  80c410:	e0bff617 	ldw	r2,-40(fp)
  80c414:	1887883a 	add	r3,r3,r2
  80c418:	e0bffa17 	ldw	r2,-24(fp)
  80c41c:	1009883a 	mov	r4,r2
  80c420:	180b883a 	mov	r5,r3
  80c424:	e1bff817 	ldw	r6,-32(fp)
  80c428:	0807a300 	call	807a30 <memcpy>
      ptr   += n;
  80c42c:	e0fff817 	ldw	r3,-32(fp)
  80c430:	e0bffa17 	ldw	r2,-24(fp)
  80c434:	10c5883a 	add	r2,r2,r3
  80c438:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
  80c43c:	e0fffd17 	ldw	r3,-12(fp)
  80c440:	e0bff817 	ldw	r2,-32(fp)
  80c444:	1885c83a 	sub	r2,r3,r2
  80c448:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c44c:	e0fff617 	ldw	r3,-40(fp)
  80c450:	e0bff817 	ldw	r2,-32(fp)
  80c454:	1885883a 	add	r2,r3,r2
  80c458:	10c1ffcc 	andi	r3,r2,2047
  80c45c:	e0bffb17 	ldw	r2,-20(fp)
  80c460:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80c464:	e0bffd17 	ldw	r2,-12(fp)
  80c468:	10800048 	cmpgei	r2,r2,1
  80c46c:	103fcc1e 	bne	r2,zero,80c3a0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
  80c470:	e0fffa17 	ldw	r3,-24(fp)
  80c474:	e0bffc17 	ldw	r2,-16(fp)
  80c478:	1880141e 	bne	r3,r2,80c4cc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c47c:	e0bffe17 	ldw	r2,-8(fp)
  80c480:	1090000c 	andi	r2,r2,16384
  80c484:	1004c03a 	cmpne	r2,r2,zero
  80c488:	1000101e 	bne	r2,zero,80c4cc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c48c:	e0bffb17 	ldw	r2,-20(fp)
  80c490:	10c00a17 	ldw	r3,40(r2)
  80c494:	e0bff717 	ldw	r2,-36(fp)
  80c498:	1880051e 	bne	r3,r2,80c4b0 <altera_avalon_jtag_uart_read+0x13c>
  80c49c:	e0bffb17 	ldw	r2,-20(fp)
  80c4a0:	10c00917 	ldw	r3,36(r2)
  80c4a4:	e0bffb17 	ldw	r2,-20(fp)
  80c4a8:	10800117 	ldw	r2,4(r2)
  80c4ac:	18bff736 	bltu	r3,r2,80c48c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c4b0:	e0bffb17 	ldw	r2,-20(fp)
  80c4b4:	10c00a17 	ldw	r3,40(r2)
  80c4b8:	e0bff717 	ldw	r2,-36(fp)
  80c4bc:	18800326 	beq	r3,r2,80c4cc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c4c0:	e0bffd17 	ldw	r2,-12(fp)
  80c4c4:	10800048 	cmpgei	r2,r2,1
  80c4c8:	103fb51e 	bne	r2,zero,80c3a0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80c4cc:	e0fffa17 	ldw	r3,-24(fp)
  80c4d0:	e0bffc17 	ldw	r2,-16(fp)
  80c4d4:	18801926 	beq	r3,r2,80c53c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c4d8:	0005303a 	rdctl	r2,status
  80c4dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c4e0:	e0fff517 	ldw	r3,-44(fp)
  80c4e4:	00bfff84 	movi	r2,-2
  80c4e8:	1884703a 	and	r2,r3,r2
  80c4ec:	1001703a 	wrctl	status,r2
  
  return context;
  80c4f0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c4f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c4f8:	e0bffb17 	ldw	r2,-20(fp)
  80c4fc:	10800817 	ldw	r2,32(r2)
  80c500:	10c00054 	ori	r3,r2,1
  80c504:	e0bffb17 	ldw	r2,-20(fp)
  80c508:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c50c:	e0bffb17 	ldw	r2,-20(fp)
  80c510:	10800017 	ldw	r2,0(r2)
  80c514:	11000104 	addi	r4,r2,4
  80c518:	e0bffb17 	ldw	r2,-20(fp)
  80c51c:	10800817 	ldw	r2,32(r2)
  80c520:	1007883a 	mov	r3,r2
  80c524:	2005883a 	mov	r2,r4
  80c528:	10c00035 	stwio	r3,0(r2)
  80c52c:	e0bff917 	ldw	r2,-28(fp)
  80c530:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c534:	e0bff417 	ldw	r2,-48(fp)
  80c538:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c53c:	e0fffa17 	ldw	r3,-24(fp)
  80c540:	e0bffc17 	ldw	r2,-16(fp)
  80c544:	18800526 	beq	r3,r2,80c55c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
  80c548:	e0fffa17 	ldw	r3,-24(fp)
  80c54c:	e0bffc17 	ldw	r2,-16(fp)
  80c550:	1887c83a 	sub	r3,r3,r2
  80c554:	e0ffff15 	stw	r3,-4(fp)
  80c558:	00000906 	br	80c580 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
  80c55c:	e0bffe17 	ldw	r2,-8(fp)
  80c560:	1090000c 	andi	r2,r2,16384
  80c564:	1005003a 	cmpeq	r2,r2,zero
  80c568:	1000031e 	bne	r2,zero,80c578 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c56c:	00bffd44 	movi	r2,-11
  80c570:	e0bfff15 	stw	r2,-4(fp)
  80c574:	00000206 	br	80c580 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
  80c578:	00bffec4 	movi	r2,-5
  80c57c:	e0bfff15 	stw	r2,-4(fp)
  80c580:	e0bfff17 	ldw	r2,-4(fp)
}
  80c584:	e037883a 	mov	sp,fp
  80c588:	dfc00117 	ldw	ra,4(sp)
  80c58c:	df000017 	ldw	fp,0(sp)
  80c590:	dec00204 	addi	sp,sp,8
  80c594:	f800283a 	ret

0080c598 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c598:	defff204 	addi	sp,sp,-56
  80c59c:	dfc00d15 	stw	ra,52(sp)
  80c5a0:	df000c15 	stw	fp,48(sp)
  80c5a4:	df000c04 	addi	fp,sp,48
  80c5a8:	e13ffb15 	stw	r4,-20(fp)
  80c5ac:	e17ffc15 	stw	r5,-16(fp)
  80c5b0:	e1bffd15 	stw	r6,-12(fp)
  80c5b4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c5b8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c5bc:	e0bffc17 	ldw	r2,-16(fp)
  80c5c0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c5c4:	00003a06 	br	80c6b0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c5c8:	e0bffb17 	ldw	r2,-20(fp)
  80c5cc:	10800c17 	ldw	r2,48(r2)
  80c5d0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
  80c5d4:	e0bffb17 	ldw	r2,-20(fp)
  80c5d8:	10800d17 	ldw	r2,52(r2)
  80c5dc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
  80c5e0:	e0fffa17 	ldw	r3,-24(fp)
  80c5e4:	e0bff917 	ldw	r2,-28(fp)
  80c5e8:	1880062e 	bgeu	r3,r2,80c604 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c5ec:	e0fff917 	ldw	r3,-28(fp)
  80c5f0:	e0bffa17 	ldw	r2,-24(fp)
  80c5f4:	1885c83a 	sub	r2,r3,r2
  80c5f8:	10bfffc4 	addi	r2,r2,-1
  80c5fc:	e0bff815 	stw	r2,-32(fp)
  80c600:	00000c06 	br	80c634 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
  80c604:	e0bff917 	ldw	r2,-28(fp)
  80c608:	1005003a 	cmpeq	r2,r2,zero
  80c60c:	1000051e 	bne	r2,zero,80c624 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c610:	00820004 	movi	r2,2048
  80c614:	e0fffa17 	ldw	r3,-24(fp)
  80c618:	10c5c83a 	sub	r2,r2,r3
  80c61c:	e0bff815 	stw	r2,-32(fp)
  80c620:	00000406 	br	80c634 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c624:	0081ffc4 	movi	r2,2047
  80c628:	e0fffa17 	ldw	r3,-24(fp)
  80c62c:	10c5c83a 	sub	r2,r2,r3
  80c630:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
  80c634:	e0bff817 	ldw	r2,-32(fp)
  80c638:	1005003a 	cmpeq	r2,r2,zero
  80c63c:	10001f1e 	bne	r2,zero,80c6bc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
  80c640:	e0fffd17 	ldw	r3,-12(fp)
  80c644:	e0bff817 	ldw	r2,-32(fp)
  80c648:	1880022e 	bgeu	r3,r2,80c654 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
  80c64c:	e0bffd17 	ldw	r2,-12(fp)
  80c650:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c654:	e0bffb17 	ldw	r2,-20(fp)
  80c658:	10c20e04 	addi	r3,r2,2104
  80c65c:	e0bffa17 	ldw	r2,-24(fp)
  80c660:	1885883a 	add	r2,r3,r2
  80c664:	e0fffc17 	ldw	r3,-16(fp)
  80c668:	1009883a 	mov	r4,r2
  80c66c:	180b883a 	mov	r5,r3
  80c670:	e1bff817 	ldw	r6,-32(fp)
  80c674:	0807a300 	call	807a30 <memcpy>
      ptr   += n;
  80c678:	e0fff817 	ldw	r3,-32(fp)
  80c67c:	e0bffc17 	ldw	r2,-16(fp)
  80c680:	10c5883a 	add	r2,r2,r3
  80c684:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  80c688:	e0fffd17 	ldw	r3,-12(fp)
  80c68c:	e0bff817 	ldw	r2,-32(fp)
  80c690:	1885c83a 	sub	r2,r3,r2
  80c694:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c698:	e0fffa17 	ldw	r3,-24(fp)
  80c69c:	e0bff817 	ldw	r2,-32(fp)
  80c6a0:	1885883a 	add	r2,r3,r2
  80c6a4:	10c1ffcc 	andi	r3,r2,2047
  80c6a8:	e0bffb17 	ldw	r2,-20(fp)
  80c6ac:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c6b0:	e0bffd17 	ldw	r2,-12(fp)
  80c6b4:	10800048 	cmpgei	r2,r2,1
  80c6b8:	103fc31e 	bne	r2,zero,80c5c8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c6bc:	0005303a 	rdctl	r2,status
  80c6c0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c6c4:	e0fff517 	ldw	r3,-44(fp)
  80c6c8:	00bfff84 	movi	r2,-2
  80c6cc:	1884703a 	and	r2,r3,r2
  80c6d0:	1001703a 	wrctl	status,r2
  
  return context;
  80c6d4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c6d8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c6dc:	e0bffb17 	ldw	r2,-20(fp)
  80c6e0:	10800817 	ldw	r2,32(r2)
  80c6e4:	10c00094 	ori	r3,r2,2
  80c6e8:	e0bffb17 	ldw	r2,-20(fp)
  80c6ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c6f0:	e0bffb17 	ldw	r2,-20(fp)
  80c6f4:	10800017 	ldw	r2,0(r2)
  80c6f8:	11000104 	addi	r4,r2,4
  80c6fc:	e0bffb17 	ldw	r2,-20(fp)
  80c700:	10800817 	ldw	r2,32(r2)
  80c704:	1007883a 	mov	r3,r2
  80c708:	2005883a 	mov	r2,r4
  80c70c:	10c00035 	stwio	r3,0(r2)
  80c710:	e0bff717 	ldw	r2,-36(fp)
  80c714:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c718:	e0bff417 	ldw	r2,-48(fp)
  80c71c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80c720:	e0bffd17 	ldw	r2,-12(fp)
  80c724:	10800050 	cmplti	r2,r2,1
  80c728:	1000111e 	bne	r2,zero,80c770 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
  80c72c:	e0bffe17 	ldw	r2,-8(fp)
  80c730:	1090000c 	andi	r2,r2,16384
  80c734:	1004c03a 	cmpne	r2,r2,zero
  80c738:	1000101e 	bne	r2,zero,80c77c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80c73c:	e0bffb17 	ldw	r2,-20(fp)
  80c740:	10c00d17 	ldw	r3,52(r2)
  80c744:	e0bff917 	ldw	r2,-28(fp)
  80c748:	1880051e 	bne	r3,r2,80c760 <altera_avalon_jtag_uart_write+0x1c8>
  80c74c:	e0bffb17 	ldw	r2,-20(fp)
  80c750:	10c00917 	ldw	r3,36(r2)
  80c754:	e0bffb17 	ldw	r2,-20(fp)
  80c758:	10800117 	ldw	r2,4(r2)
  80c75c:	18bff736 	bltu	r3,r2,80c73c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80c760:	e0bffb17 	ldw	r2,-20(fp)
  80c764:	10c00d17 	ldw	r3,52(r2)
  80c768:	e0bff917 	ldw	r2,-28(fp)
  80c76c:	18800326 	beq	r3,r2,80c77c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
  80c770:	e0bffd17 	ldw	r2,-12(fp)
  80c774:	10800048 	cmpgei	r2,r2,1
  80c778:	103fcd1e 	bne	r2,zero,80c6b0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80c77c:	e0fffc17 	ldw	r3,-16(fp)
  80c780:	e0bff617 	ldw	r2,-40(fp)
  80c784:	18800526 	beq	r3,r2,80c79c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
  80c788:	e0fffc17 	ldw	r3,-16(fp)
  80c78c:	e0bff617 	ldw	r2,-40(fp)
  80c790:	1887c83a 	sub	r3,r3,r2
  80c794:	e0ffff15 	stw	r3,-4(fp)
  80c798:	00000906 	br	80c7c0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
  80c79c:	e0bffe17 	ldw	r2,-8(fp)
  80c7a0:	1090000c 	andi	r2,r2,16384
  80c7a4:	1005003a 	cmpeq	r2,r2,zero
  80c7a8:	1000031e 	bne	r2,zero,80c7b8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
  80c7ac:	00bffd44 	movi	r2,-11
  80c7b0:	e0bfff15 	stw	r2,-4(fp)
  80c7b4:	00000206 	br	80c7c0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80c7b8:	00bffec4 	movi	r2,-5
  80c7bc:	e0bfff15 	stw	r2,-4(fp)
  80c7c0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c7c4:	e037883a 	mov	sp,fp
  80c7c8:	dfc00117 	ldw	ra,4(sp)
  80c7cc:	df000017 	ldw	fp,0(sp)
  80c7d0:	dec00204 	addi	sp,sp,8
  80c7d4:	f800283a 	ret

0080c7d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80c7d8:	defffa04 	addi	sp,sp,-24
  80c7dc:	dfc00515 	stw	ra,20(sp)
  80c7e0:	df000415 	stw	fp,16(sp)
  80c7e4:	df000404 	addi	fp,sp,16
  80c7e8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80c7ec:	e0bfff17 	ldw	r2,-4(fp)
  80c7f0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80c7f4:	e0bfff17 	ldw	r2,-4(fp)
  80c7f8:	10800104 	addi	r2,r2,4
  80c7fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c800:	0005303a 	rdctl	r2,status
  80c804:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c808:	e0fffd17 	ldw	r3,-12(fp)
  80c80c:	00bfff84 	movi	r2,-2
  80c810:	1884703a 	and	r2,r3,r2
  80c814:	1001703a 	wrctl	status,r2
  
  return context;
  80c818:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80c81c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  80c820:	080b9c40 	call	80b9c4 <alt_tick>
  80c824:	e0bffe17 	ldw	r2,-8(fp)
  80c828:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c82c:	e0bffc17 	ldw	r2,-16(fp)
  80c830:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80c834:	e037883a 	mov	sp,fp
  80c838:	dfc00117 	ldw	ra,4(sp)
  80c83c:	df000017 	ldw	fp,0(sp)
  80c840:	dec00204 	addi	sp,sp,8
  80c844:	f800283a 	ret

0080c848 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80c848:	defff804 	addi	sp,sp,-32
  80c84c:	dfc00715 	stw	ra,28(sp)
  80c850:	df000615 	stw	fp,24(sp)
  80c854:	df000604 	addi	fp,sp,24
  80c858:	e13ffc15 	stw	r4,-16(fp)
  80c85c:	e17ffd15 	stw	r5,-12(fp)
  80c860:	e1bffe15 	stw	r6,-8(fp)
  80c864:	e1ffff15 	stw	r7,-4(fp)
  80c868:	e0bfff17 	ldw	r2,-4(fp)
  80c86c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80c870:	00802074 	movhi	r2,129
  80c874:	10839a04 	addi	r2,r2,3688
  80c878:	10800017 	ldw	r2,0(r2)
  80c87c:	1004c03a 	cmpne	r2,r2,zero
  80c880:	1000041e 	bne	r2,zero,80c894 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  80c884:	00c02074 	movhi	r3,129
  80c888:	18c39a04 	addi	r3,r3,3688
  80c88c:	e0bffb17 	ldw	r2,-20(fp)
  80c890:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80c894:	e0bffc17 	ldw	r2,-16(fp)
  80c898:	10800104 	addi	r2,r2,4
  80c89c:	1007883a 	mov	r3,r2
  80c8a0:	008001c4 	movi	r2,7
  80c8a4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80c8a8:	d8000015 	stw	zero,0(sp)
  80c8ac:	e13ffd17 	ldw	r4,-12(fp)
  80c8b0:	e17ffe17 	ldw	r5,-8(fp)
  80c8b4:	01802074 	movhi	r6,129
  80c8b8:	31b1f604 	addi	r6,r6,-14376
  80c8bc:	e1fffc17 	ldw	r7,-16(fp)
  80c8c0:	080af980 	call	80af98 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80c8c4:	e037883a 	mov	sp,fp
  80c8c8:	dfc00117 	ldw	ra,4(sp)
  80c8cc:	df000017 	ldw	fp,0(sp)
  80c8d0:	dec00204 	addi	sp,sp,8
  80c8d4:	f800283a 	ret

0080c8d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80c8d8:	deffff04 	addi	sp,sp,-4
  80c8dc:	df000015 	stw	fp,0(sp)
  80c8e0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80c8e4:	e037883a 	mov	sp,fp
  80c8e8:	df000017 	ldw	fp,0(sp)
  80c8ec:	dec00104 	addi	sp,sp,4
  80c8f0:	f800283a 	ret

0080c8f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80c8f4:	defff904 	addi	sp,sp,-28
  80c8f8:	dfc00615 	stw	ra,24(sp)
  80c8fc:	df000515 	stw	fp,20(sp)
  80c900:	df000504 	addi	fp,sp,20
  80c904:	e13ffd15 	stw	r4,-12(fp)
  80c908:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80c90c:	e0bffd17 	ldw	r2,-12(fp)
  80c910:	1005003a 	cmpeq	r2,r2,zero
  80c914:	1000041e 	bne	r2,zero,80c928 <alt_dev_llist_insert+0x34>
  80c918:	e0bffd17 	ldw	r2,-12(fp)
  80c91c:	10800217 	ldw	r2,8(r2)
  80c920:	1004c03a 	cmpne	r2,r2,zero
  80c924:	1000071e 	bne	r2,zero,80c944 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80c928:	080c9a80 	call	80c9a8 <alt_get_errno>
  80c92c:	1007883a 	mov	r3,r2
  80c930:	00800584 	movi	r2,22
  80c934:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80c938:	00bffa84 	movi	r2,-22
  80c93c:	e0bfff15 	stw	r2,-4(fp)
  80c940:	00001306 	br	80c990 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80c944:	e0fffd17 	ldw	r3,-12(fp)
  80c948:	e0bffe17 	ldw	r2,-8(fp)
  80c94c:	e0bffb15 	stw	r2,-20(fp)
  80c950:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c954:	e0fffc17 	ldw	r3,-16(fp)
  80c958:	e0bffb17 	ldw	r2,-20(fp)
  80c95c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  80c960:	e0bffb17 	ldw	r2,-20(fp)
  80c964:	10c00017 	ldw	r3,0(r2)
  80c968:	e0bffc17 	ldw	r2,-16(fp)
  80c96c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c970:	e0bffb17 	ldw	r2,-20(fp)
  80c974:	10c00017 	ldw	r3,0(r2)
  80c978:	e0bffc17 	ldw	r2,-16(fp)
  80c97c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  80c980:	e0fffb17 	ldw	r3,-20(fp)
  80c984:	e0bffc17 	ldw	r2,-16(fp)
  80c988:	18800015 	stw	r2,0(r3)

  return 0;  
  80c98c:	e03fff15 	stw	zero,-4(fp)
  80c990:	e0bfff17 	ldw	r2,-4(fp)
}
  80c994:	e037883a 	mov	sp,fp
  80c998:	dfc00117 	ldw	ra,4(sp)
  80c99c:	df000017 	ldw	fp,0(sp)
  80c9a0:	dec00204 	addi	sp,sp,8
  80c9a4:	f800283a 	ret

0080c9a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c9a8:	defffd04 	addi	sp,sp,-12
  80c9ac:	dfc00215 	stw	ra,8(sp)
  80c9b0:	df000115 	stw	fp,4(sp)
  80c9b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c9b8:	00802074 	movhi	r2,129
  80c9bc:	10bced04 	addi	r2,r2,-3148
  80c9c0:	10800017 	ldw	r2,0(r2)
  80c9c4:	1005003a 	cmpeq	r2,r2,zero
  80c9c8:	1000061e 	bne	r2,zero,80c9e4 <alt_get_errno+0x3c>
  80c9cc:	00802074 	movhi	r2,129
  80c9d0:	10bced04 	addi	r2,r2,-3148
  80c9d4:	10800017 	ldw	r2,0(r2)
  80c9d8:	103ee83a 	callr	r2
  80c9dc:	e0bfff15 	stw	r2,-4(fp)
  80c9e0:	00000306 	br	80c9f0 <alt_get_errno+0x48>
  80c9e4:	00802074 	movhi	r2,129
  80c9e8:	10839504 	addi	r2,r2,3668
  80c9ec:	e0bfff15 	stw	r2,-4(fp)
  80c9f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c9f4:	e037883a 	mov	sp,fp
  80c9f8:	dfc00117 	ldw	ra,4(sp)
  80c9fc:	df000017 	ldw	fp,0(sp)
  80ca00:	dec00204 	addi	sp,sp,8
  80ca04:	f800283a 	ret

0080ca08 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ca08:	defffd04 	addi	sp,sp,-12
  80ca0c:	dfc00215 	stw	ra,8(sp)
  80ca10:	df000115 	stw	fp,4(sp)
  80ca14:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ca18:	00bfff04 	movi	r2,-4
  80ca1c:	00c02074 	movhi	r3,129
  80ca20:	18f57404 	addi	r3,r3,-10800
  80ca24:	1885883a 	add	r2,r3,r2
  80ca28:	e0bfff15 	stw	r2,-4(fp)
  80ca2c:	00000606 	br	80ca48 <_do_ctors+0x40>
        (*ctor) (); 
  80ca30:	e0bfff17 	ldw	r2,-4(fp)
  80ca34:	10800017 	ldw	r2,0(r2)
  80ca38:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ca3c:	e0bfff17 	ldw	r2,-4(fp)
  80ca40:	10bfff04 	addi	r2,r2,-4
  80ca44:	e0bfff15 	stw	r2,-4(fp)
  80ca48:	e0ffff17 	ldw	r3,-4(fp)
  80ca4c:	00802074 	movhi	r2,129
  80ca50:	10b57304 	addi	r2,r2,-10804
  80ca54:	18bff62e 	bgeu	r3,r2,80ca30 <_do_ctors+0x28>
        (*ctor) (); 
}
  80ca58:	e037883a 	mov	sp,fp
  80ca5c:	dfc00117 	ldw	ra,4(sp)
  80ca60:	df000017 	ldw	fp,0(sp)
  80ca64:	dec00204 	addi	sp,sp,8
  80ca68:	f800283a 	ret

0080ca6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ca6c:	defffd04 	addi	sp,sp,-12
  80ca70:	dfc00215 	stw	ra,8(sp)
  80ca74:	df000115 	stw	fp,4(sp)
  80ca78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ca7c:	00bfff04 	movi	r2,-4
  80ca80:	00c02074 	movhi	r3,129
  80ca84:	18f57404 	addi	r3,r3,-10800
  80ca88:	1885883a 	add	r2,r3,r2
  80ca8c:	e0bfff15 	stw	r2,-4(fp)
  80ca90:	00000606 	br	80caac <_do_dtors+0x40>
        (*dtor) (); 
  80ca94:	e0bfff17 	ldw	r2,-4(fp)
  80ca98:	10800017 	ldw	r2,0(r2)
  80ca9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80caa0:	e0bfff17 	ldw	r2,-4(fp)
  80caa4:	10bfff04 	addi	r2,r2,-4
  80caa8:	e0bfff15 	stw	r2,-4(fp)
  80caac:	e0ffff17 	ldw	r3,-4(fp)
  80cab0:	00802074 	movhi	r2,129
  80cab4:	10b57404 	addi	r2,r2,-10800
  80cab8:	18bff62e 	bgeu	r3,r2,80ca94 <_do_dtors+0x28>
        (*dtor) (); 
}
  80cabc:	e037883a 	mov	sp,fp
  80cac0:	dfc00117 	ldw	ra,4(sp)
  80cac4:	df000017 	ldw	fp,0(sp)
  80cac8:	dec00204 	addi	sp,sp,8
  80cacc:	f800283a 	ret

0080cad0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80cad0:	deffff04 	addi	sp,sp,-4
  80cad4:	df000015 	stw	fp,0(sp)
  80cad8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  80cadc:	e037883a 	mov	sp,fp
  80cae0:	df000017 	ldw	fp,0(sp)
  80cae4:	dec00104 	addi	sp,sp,4
  80cae8:	f800283a 	ret

0080caec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80caec:	defff804 	addi	sp,sp,-32
  80caf0:	dfc00715 	stw	ra,28(sp)
  80caf4:	df000615 	stw	fp,24(sp)
  80caf8:	dc000515 	stw	r16,20(sp)
  80cafc:	df000504 	addi	fp,sp,20
  80cb00:	e13ffc15 	stw	r4,-16(fp)
  80cb04:	e17ffd15 	stw	r5,-12(fp)
  80cb08:	e1bffe15 	stw	r6,-8(fp)
  80cb0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80cb10:	e13ffd17 	ldw	r4,-12(fp)
  80cb14:	e17ffe17 	ldw	r5,-8(fp)
  80cb18:	e1bfff17 	ldw	r6,-4(fp)
  80cb1c:	080cd340 	call	80cd34 <open>
  80cb20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80cb24:	e0bffb17 	ldw	r2,-20(fp)
  80cb28:	1004803a 	cmplt	r2,r2,zero
  80cb2c:	10001f1e 	bne	r2,zero,80cbac <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  80cb30:	e13ffb17 	ldw	r4,-20(fp)
  80cb34:	04002074 	movhi	r16,129
  80cb38:	84386504 	addi	r16,r16,-7788
  80cb3c:	01400304 	movi	r5,12
  80cb40:	0801be80 	call	801be8 <__mulsi3>
  80cb44:	1405883a 	add	r2,r2,r16
  80cb48:	10c00017 	ldw	r3,0(r2)
  80cb4c:	e0bffc17 	ldw	r2,-16(fp)
  80cb50:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80cb54:	e13ffb17 	ldw	r4,-20(fp)
  80cb58:	04002074 	movhi	r16,129
  80cb5c:	84386504 	addi	r16,r16,-7788
  80cb60:	01400304 	movi	r5,12
  80cb64:	0801be80 	call	801be8 <__mulsi3>
  80cb68:	1405883a 	add	r2,r2,r16
  80cb6c:	10800104 	addi	r2,r2,4
  80cb70:	10c00017 	ldw	r3,0(r2)
  80cb74:	e0bffc17 	ldw	r2,-16(fp)
  80cb78:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80cb7c:	e13ffb17 	ldw	r4,-20(fp)
  80cb80:	04002074 	movhi	r16,129
  80cb84:	84386504 	addi	r16,r16,-7788
  80cb88:	01400304 	movi	r5,12
  80cb8c:	0801be80 	call	801be8 <__mulsi3>
  80cb90:	1405883a 	add	r2,r2,r16
  80cb94:	10800204 	addi	r2,r2,8
  80cb98:	10c00017 	ldw	r3,0(r2)
  80cb9c:	e0bffc17 	ldw	r2,-16(fp)
  80cba0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80cba4:	e13ffb17 	ldw	r4,-20(fp)
  80cba8:	080b7f80 	call	80b7f8 <alt_release_fd>
  }
} 
  80cbac:	e037883a 	mov	sp,fp
  80cbb0:	dfc00217 	ldw	ra,8(sp)
  80cbb4:	df000117 	ldw	fp,4(sp)
  80cbb8:	dc000017 	ldw	r16,0(sp)
  80cbbc:	dec00304 	addi	sp,sp,12
  80cbc0:	f800283a 	ret

0080cbc4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80cbc4:	defffb04 	addi	sp,sp,-20
  80cbc8:	dfc00415 	stw	ra,16(sp)
  80cbcc:	df000315 	stw	fp,12(sp)
  80cbd0:	df000304 	addi	fp,sp,12
  80cbd4:	e13ffd15 	stw	r4,-12(fp)
  80cbd8:	e17ffe15 	stw	r5,-8(fp)
  80cbdc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80cbe0:	01002074 	movhi	r4,129
  80cbe4:	21386804 	addi	r4,r4,-7776
  80cbe8:	e17ffd17 	ldw	r5,-12(fp)
  80cbec:	01800044 	movi	r6,1
  80cbf0:	01c07fc4 	movi	r7,511
  80cbf4:	080caec0 	call	80caec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80cbf8:	01002074 	movhi	r4,129
  80cbfc:	21386504 	addi	r4,r4,-7788
  80cc00:	e17ffe17 	ldw	r5,-8(fp)
  80cc04:	000d883a 	mov	r6,zero
  80cc08:	01c07fc4 	movi	r7,511
  80cc0c:	080caec0 	call	80caec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80cc10:	01002074 	movhi	r4,129
  80cc14:	21386b04 	addi	r4,r4,-7764
  80cc18:	e17fff17 	ldw	r5,-4(fp)
  80cc1c:	01800044 	movi	r6,1
  80cc20:	01c07fc4 	movi	r7,511
  80cc24:	080caec0 	call	80caec <alt_open_fd>
}  
  80cc28:	e037883a 	mov	sp,fp
  80cc2c:	dfc00117 	ldw	ra,4(sp)
  80cc30:	df000017 	ldw	fp,0(sp)
  80cc34:	dec00204 	addi	sp,sp,8
  80cc38:	f800283a 	ret

0080cc3c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80cc3c:	defffa04 	addi	sp,sp,-24
  80cc40:	dfc00515 	stw	ra,20(sp)
  80cc44:	df000415 	stw	fp,16(sp)
  80cc48:	dc000315 	stw	r16,12(sp)
  80cc4c:	df000304 	addi	fp,sp,12
  80cc50:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80cc54:	e0bffe17 	ldw	r2,-8(fp)
  80cc58:	10800217 	ldw	r2,8(r2)
  80cc5c:	10d00034 	orhi	r3,r2,16384
  80cc60:	e0bffe17 	ldw	r2,-8(fp)
  80cc64:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80cc68:	e03ffd15 	stw	zero,-12(fp)
  80cc6c:	00002306 	br	80ccfc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80cc70:	e13ffd17 	ldw	r4,-12(fp)
  80cc74:	04002074 	movhi	r16,129
  80cc78:	84386504 	addi	r16,r16,-7788
  80cc7c:	01400304 	movi	r5,12
  80cc80:	0801be80 	call	801be8 <__mulsi3>
  80cc84:	1405883a 	add	r2,r2,r16
  80cc88:	10c00017 	ldw	r3,0(r2)
  80cc8c:	e0bffe17 	ldw	r2,-8(fp)
  80cc90:	10800017 	ldw	r2,0(r2)
  80cc94:	1880161e 	bne	r3,r2,80ccf0 <alt_file_locked+0xb4>
  80cc98:	e13ffd17 	ldw	r4,-12(fp)
  80cc9c:	04002074 	movhi	r16,129
  80cca0:	84386504 	addi	r16,r16,-7788
  80cca4:	01400304 	movi	r5,12
  80cca8:	0801be80 	call	801be8 <__mulsi3>
  80ccac:	1405883a 	add	r2,r2,r16
  80ccb0:	10800204 	addi	r2,r2,8
  80ccb4:	10800017 	ldw	r2,0(r2)
  80ccb8:	1004403a 	cmpge	r2,r2,zero
  80ccbc:	10000c1e 	bne	r2,zero,80ccf0 <alt_file_locked+0xb4>
  80ccc0:	e13ffd17 	ldw	r4,-12(fp)
  80ccc4:	01400304 	movi	r5,12
  80ccc8:	0801be80 	call	801be8 <__mulsi3>
  80cccc:	1007883a 	mov	r3,r2
  80ccd0:	00802074 	movhi	r2,129
  80ccd4:	10b86504 	addi	r2,r2,-7788
  80ccd8:	1887883a 	add	r3,r3,r2
  80ccdc:	e0bffe17 	ldw	r2,-8(fp)
  80cce0:	18800326 	beq	r3,r2,80ccf0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80cce4:	00bffcc4 	movi	r2,-13
  80cce8:	e0bfff15 	stw	r2,-4(fp)
  80ccec:	00000a06 	br	80cd18 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ccf0:	e0bffd17 	ldw	r2,-12(fp)
  80ccf4:	10800044 	addi	r2,r2,1
  80ccf8:	e0bffd15 	stw	r2,-12(fp)
  80ccfc:	00802074 	movhi	r2,129
  80cd00:	10bcec04 	addi	r2,r2,-3152
  80cd04:	10800017 	ldw	r2,0(r2)
  80cd08:	1007883a 	mov	r3,r2
  80cd0c:	e0bffd17 	ldw	r2,-12(fp)
  80cd10:	18bfd72e 	bgeu	r3,r2,80cc70 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80cd14:	e03fff15 	stw	zero,-4(fp)
  80cd18:	e0bfff17 	ldw	r2,-4(fp)
}
  80cd1c:	e037883a 	mov	sp,fp
  80cd20:	dfc00217 	ldw	ra,8(sp)
  80cd24:	df000117 	ldw	fp,4(sp)
  80cd28:	dc000017 	ldw	r16,0(sp)
  80cd2c:	dec00304 	addi	sp,sp,12
  80cd30:	f800283a 	ret

0080cd34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80cd34:	defff404 	addi	sp,sp,-48
  80cd38:	dfc00b15 	stw	ra,44(sp)
  80cd3c:	df000a15 	stw	fp,40(sp)
  80cd40:	df000a04 	addi	fp,sp,40
  80cd44:	e13ffb15 	stw	r4,-20(fp)
  80cd48:	e17ffc15 	stw	r5,-16(fp)
  80cd4c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80cd50:	00bfffc4 	movi	r2,-1
  80cd54:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  80cd58:	00bffb44 	movi	r2,-19
  80cd5c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  80cd60:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80cd64:	e13ffb17 	ldw	r4,-20(fp)
  80cd68:	01402074 	movhi	r5,129
  80cd6c:	297cea04 	addi	r5,r5,-3160
  80cd70:	080cf400 	call	80cf40 <alt_find_dev>
  80cd74:	e0bffa15 	stw	r2,-24(fp)
  80cd78:	e0bffa17 	ldw	r2,-24(fp)
  80cd7c:	1004c03a 	cmpne	r2,r2,zero
  80cd80:	1000051e 	bne	r2,zero,80cd98 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80cd84:	e13ffb17 	ldw	r4,-20(fp)
  80cd88:	080cfd40 	call	80cfd4 <alt_find_file>
  80cd8c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  80cd90:	00800044 	movi	r2,1
  80cd94:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80cd98:	e0bffa17 	ldw	r2,-24(fp)
  80cd9c:	1005003a 	cmpeq	r2,r2,zero
  80cda0:	1000311e 	bne	r2,zero,80ce68 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80cda4:	e13ffa17 	ldw	r4,-24(fp)
  80cda8:	080d0f40 	call	80d0f4 <alt_get_fd>
  80cdac:	e0bff815 	stw	r2,-32(fp)
  80cdb0:	e0bff817 	ldw	r2,-32(fp)
  80cdb4:	1004403a 	cmpge	r2,r2,zero
  80cdb8:	1000031e 	bne	r2,zero,80cdc8 <open+0x94>
    {
      status = index;
  80cdbc:	e0bff817 	ldw	r2,-32(fp)
  80cdc0:	e0bff715 	stw	r2,-36(fp)
  80cdc4:	00002a06 	br	80ce70 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80cdc8:	e13ff817 	ldw	r4,-32(fp)
  80cdcc:	01400304 	movi	r5,12
  80cdd0:	0801be80 	call	801be8 <__mulsi3>
  80cdd4:	1007883a 	mov	r3,r2
  80cdd8:	00802074 	movhi	r2,129
  80cddc:	10b86504 	addi	r2,r2,-7788
  80cde0:	1885883a 	add	r2,r3,r2
  80cde4:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80cde8:	e0fffc17 	ldw	r3,-16(fp)
  80cdec:	00900034 	movhi	r2,16384
  80cdf0:	10bfffc4 	addi	r2,r2,-1
  80cdf4:	1886703a 	and	r3,r3,r2
  80cdf8:	e0bff917 	ldw	r2,-28(fp)
  80cdfc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80ce00:	e0bff617 	ldw	r2,-40(fp)
  80ce04:	1004c03a 	cmpne	r2,r2,zero
  80ce08:	1000061e 	bne	r2,zero,80ce24 <open+0xf0>
  80ce0c:	e13ff917 	ldw	r4,-28(fp)
  80ce10:	080cc3c0 	call	80cc3c <alt_file_locked>
  80ce14:	e0bff715 	stw	r2,-36(fp)
  80ce18:	e0bff717 	ldw	r2,-36(fp)
  80ce1c:	1004803a 	cmplt	r2,r2,zero
  80ce20:	1000131e 	bne	r2,zero,80ce70 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80ce24:	e0bffa17 	ldw	r2,-24(fp)
  80ce28:	10800317 	ldw	r2,12(r2)
  80ce2c:	1005003a 	cmpeq	r2,r2,zero
  80ce30:	1000091e 	bne	r2,zero,80ce58 <open+0x124>
  80ce34:	e0bffa17 	ldw	r2,-24(fp)
  80ce38:	10800317 	ldw	r2,12(r2)
  80ce3c:	e13ff917 	ldw	r4,-28(fp)
  80ce40:	e17ffb17 	ldw	r5,-20(fp)
  80ce44:	e1bffc17 	ldw	r6,-16(fp)
  80ce48:	e1fffd17 	ldw	r7,-12(fp)
  80ce4c:	103ee83a 	callr	r2
  80ce50:	e0bfff15 	stw	r2,-4(fp)
  80ce54:	00000106 	br	80ce5c <open+0x128>
  80ce58:	e03fff15 	stw	zero,-4(fp)
  80ce5c:	e0bfff17 	ldw	r2,-4(fp)
  80ce60:	e0bff715 	stw	r2,-36(fp)
  80ce64:	00000206 	br	80ce70 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80ce68:	00bffb44 	movi	r2,-19
  80ce6c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80ce70:	e0bff717 	ldw	r2,-36(fp)
  80ce74:	1004403a 	cmpge	r2,r2,zero
  80ce78:	1000091e 	bne	r2,zero,80cea0 <open+0x16c>
  {
    alt_release_fd (index);  
  80ce7c:	e13ff817 	ldw	r4,-32(fp)
  80ce80:	080b7f80 	call	80b7f8 <alt_release_fd>
    ALT_ERRNO = -status;
  80ce84:	080cec00 	call	80cec0 <alt_get_errno>
  80ce88:	e0fff717 	ldw	r3,-36(fp)
  80ce8c:	00c7c83a 	sub	r3,zero,r3
  80ce90:	10c00015 	stw	r3,0(r2)
    return -1;
  80ce94:	00bfffc4 	movi	r2,-1
  80ce98:	e0bffe15 	stw	r2,-8(fp)
  80ce9c:	00000206 	br	80cea8 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80cea0:	e0bff817 	ldw	r2,-32(fp)
  80cea4:	e0bffe15 	stw	r2,-8(fp)
  80cea8:	e0bffe17 	ldw	r2,-8(fp)
}
  80ceac:	e037883a 	mov	sp,fp
  80ceb0:	dfc00117 	ldw	ra,4(sp)
  80ceb4:	df000017 	ldw	fp,0(sp)
  80ceb8:	dec00204 	addi	sp,sp,8
  80cebc:	f800283a 	ret

0080cec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cec0:	defffd04 	addi	sp,sp,-12
  80cec4:	dfc00215 	stw	ra,8(sp)
  80cec8:	df000115 	stw	fp,4(sp)
  80cecc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ced0:	00802074 	movhi	r2,129
  80ced4:	10bced04 	addi	r2,r2,-3148
  80ced8:	10800017 	ldw	r2,0(r2)
  80cedc:	1005003a 	cmpeq	r2,r2,zero
  80cee0:	1000061e 	bne	r2,zero,80cefc <alt_get_errno+0x3c>
  80cee4:	00802074 	movhi	r2,129
  80cee8:	10bced04 	addi	r2,r2,-3148
  80ceec:	10800017 	ldw	r2,0(r2)
  80cef0:	103ee83a 	callr	r2
  80cef4:	e0bfff15 	stw	r2,-4(fp)
  80cef8:	00000306 	br	80cf08 <alt_get_errno+0x48>
  80cefc:	00802074 	movhi	r2,129
  80cf00:	10839504 	addi	r2,r2,3668
  80cf04:	e0bfff15 	stw	r2,-4(fp)
  80cf08:	e0bfff17 	ldw	r2,-4(fp)
}
  80cf0c:	e037883a 	mov	sp,fp
  80cf10:	dfc00117 	ldw	ra,4(sp)
  80cf14:	df000017 	ldw	fp,0(sp)
  80cf18:	dec00204 	addi	sp,sp,8
  80cf1c:	f800283a 	ret

0080cf20 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  80cf20:	deffff04 	addi	sp,sp,-4
  80cf24:	df000015 	stw	fp,0(sp)
  80cf28:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80cf2c:	000170fa 	wrctl	ienable,zero
}
  80cf30:	e037883a 	mov	sp,fp
  80cf34:	df000017 	ldw	fp,0(sp)
  80cf38:	dec00104 	addi	sp,sp,4
  80cf3c:	f800283a 	ret

0080cf40 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80cf40:	defff904 	addi	sp,sp,-28
  80cf44:	dfc00615 	stw	ra,24(sp)
  80cf48:	df000515 	stw	fp,20(sp)
  80cf4c:	df000504 	addi	fp,sp,20
  80cf50:	e13ffd15 	stw	r4,-12(fp)
  80cf54:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80cf58:	e0bffe17 	ldw	r2,-8(fp)
  80cf5c:	10800017 	ldw	r2,0(r2)
  80cf60:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80cf64:	e13ffd17 	ldw	r4,-12(fp)
  80cf68:	08026000 	call	802600 <strlen>
  80cf6c:	10800044 	addi	r2,r2,1
  80cf70:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80cf74:	00000d06 	br	80cfac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80cf78:	e0bffc17 	ldw	r2,-16(fp)
  80cf7c:	11000217 	ldw	r4,8(r2)
  80cf80:	e1bffb17 	ldw	r6,-20(fp)
  80cf84:	e17ffd17 	ldw	r5,-12(fp)
  80cf88:	080d2100 	call	80d210 <memcmp>
  80cf8c:	1004c03a 	cmpne	r2,r2,zero
  80cf90:	1000031e 	bne	r2,zero,80cfa0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80cf94:	e0bffc17 	ldw	r2,-16(fp)
  80cf98:	e0bfff15 	stw	r2,-4(fp)
  80cf9c:	00000706 	br	80cfbc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80cfa0:	e0bffc17 	ldw	r2,-16(fp)
  80cfa4:	10800017 	ldw	r2,0(r2)
  80cfa8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80cfac:	e0fffe17 	ldw	r3,-8(fp)
  80cfb0:	e0bffc17 	ldw	r2,-16(fp)
  80cfb4:	10fff01e 	bne	r2,r3,80cf78 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80cfb8:	e03fff15 	stw	zero,-4(fp)
  80cfbc:	e0bfff17 	ldw	r2,-4(fp)
}
  80cfc0:	e037883a 	mov	sp,fp
  80cfc4:	dfc00117 	ldw	ra,4(sp)
  80cfc8:	df000017 	ldw	fp,0(sp)
  80cfcc:	dec00204 	addi	sp,sp,8
  80cfd0:	f800283a 	ret

0080cfd4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80cfd4:	defffa04 	addi	sp,sp,-24
  80cfd8:	dfc00515 	stw	ra,20(sp)
  80cfdc:	df000415 	stw	fp,16(sp)
  80cfe0:	df000404 	addi	fp,sp,16
  80cfe4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80cfe8:	00802074 	movhi	r2,129
  80cfec:	10bce804 	addi	r2,r2,-3168
  80cff0:	10800017 	ldw	r2,0(r2)
  80cff4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80cff8:	00003306 	br	80d0c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  80cffc:	e0bffd17 	ldw	r2,-12(fp)
  80d000:	11000217 	ldw	r4,8(r2)
  80d004:	08026000 	call	802600 <strlen>
  80d008:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  80d00c:	e0bffd17 	ldw	r2,-12(fp)
  80d010:	10c00217 	ldw	r3,8(r2)
  80d014:	e0bffc17 	ldw	r2,-16(fp)
  80d018:	1885883a 	add	r2,r3,r2
  80d01c:	10bfffc4 	addi	r2,r2,-1
  80d020:	10800003 	ldbu	r2,0(r2)
  80d024:	10803fcc 	andi	r2,r2,255
  80d028:	1080201c 	xori	r2,r2,128
  80d02c:	10bfe004 	addi	r2,r2,-128
  80d030:	10800bd8 	cmpnei	r2,r2,47
  80d034:	1000031e 	bne	r2,zero,80d044 <alt_find_file+0x70>
    {
      len -= 1;
  80d038:	e0bffc17 	ldw	r2,-16(fp)
  80d03c:	10bfffc4 	addi	r2,r2,-1
  80d040:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d044:	e0bffc17 	ldw	r2,-16(fp)
  80d048:	1007883a 	mov	r3,r2
  80d04c:	e0bffe17 	ldw	r2,-8(fp)
  80d050:	1885883a 	add	r2,r3,r2
  80d054:	10800003 	ldbu	r2,0(r2)
  80d058:	10803fcc 	andi	r2,r2,255
  80d05c:	1080201c 	xori	r2,r2,128
  80d060:	10bfe004 	addi	r2,r2,-128
  80d064:	10800be0 	cmpeqi	r2,r2,47
  80d068:	10000a1e 	bne	r2,zero,80d094 <alt_find_file+0xc0>
  80d06c:	e0bffc17 	ldw	r2,-16(fp)
  80d070:	1007883a 	mov	r3,r2
  80d074:	e0bffe17 	ldw	r2,-8(fp)
  80d078:	1885883a 	add	r2,r3,r2
  80d07c:	10800003 	ldbu	r2,0(r2)
  80d080:	10803fcc 	andi	r2,r2,255
  80d084:	1080201c 	xori	r2,r2,128
  80d088:	10bfe004 	addi	r2,r2,-128
  80d08c:	1004c03a 	cmpne	r2,r2,zero
  80d090:	10000a1e 	bne	r2,zero,80d0bc <alt_find_file+0xe8>
  80d094:	e0bffd17 	ldw	r2,-12(fp)
  80d098:	11000217 	ldw	r4,8(r2)
  80d09c:	e1bffc17 	ldw	r6,-16(fp)
  80d0a0:	e17ffe17 	ldw	r5,-8(fp)
  80d0a4:	080d2100 	call	80d210 <memcmp>
  80d0a8:	1004c03a 	cmpne	r2,r2,zero
  80d0ac:	1000031e 	bne	r2,zero,80d0bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80d0b0:	e0bffd17 	ldw	r2,-12(fp)
  80d0b4:	e0bfff15 	stw	r2,-4(fp)
  80d0b8:	00000806 	br	80d0dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  80d0bc:	e0bffd17 	ldw	r2,-12(fp)
  80d0c0:	10800017 	ldw	r2,0(r2)
  80d0c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d0c8:	00c02074 	movhi	r3,129
  80d0cc:	18fce804 	addi	r3,r3,-3168
  80d0d0:	e0bffd17 	ldw	r2,-12(fp)
  80d0d4:	10ffc91e 	bne	r2,r3,80cffc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80d0d8:	e03fff15 	stw	zero,-4(fp)
  80d0dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80d0e0:	e037883a 	mov	sp,fp
  80d0e4:	dfc00117 	ldw	ra,4(sp)
  80d0e8:	df000017 	ldw	fp,0(sp)
  80d0ec:	dec00204 	addi	sp,sp,8
  80d0f0:	f800283a 	ret

0080d0f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80d0f4:	defffa04 	addi	sp,sp,-24
  80d0f8:	dfc00515 	stw	ra,20(sp)
  80d0fc:	df000415 	stw	fp,16(sp)
  80d100:	dc000315 	stw	r16,12(sp)
  80d104:	df000304 	addi	fp,sp,12
  80d108:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80d10c:	00bffa04 	movi	r2,-24
  80d110:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d114:	e03ffe15 	stw	zero,-8(fp)
  80d118:	00002006 	br	80d19c <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80d11c:	e13ffe17 	ldw	r4,-8(fp)
  80d120:	04002074 	movhi	r16,129
  80d124:	84386504 	addi	r16,r16,-7788
  80d128:	01400304 	movi	r5,12
  80d12c:	0801be80 	call	801be8 <__mulsi3>
  80d130:	1405883a 	add	r2,r2,r16
  80d134:	10800017 	ldw	r2,0(r2)
  80d138:	1004c03a 	cmpne	r2,r2,zero
  80d13c:	1000141e 	bne	r2,zero,80d190 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
  80d140:	e13ffe17 	ldw	r4,-8(fp)
  80d144:	04002074 	movhi	r16,129
  80d148:	84386504 	addi	r16,r16,-7788
  80d14c:	01400304 	movi	r5,12
  80d150:	0801be80 	call	801be8 <__mulsi3>
  80d154:	1407883a 	add	r3,r2,r16
  80d158:	e0bfff17 	ldw	r2,-4(fp)
  80d15c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80d160:	00802074 	movhi	r2,129
  80d164:	10bcec04 	addi	r2,r2,-3152
  80d168:	10c00017 	ldw	r3,0(r2)
  80d16c:	e0bffe17 	ldw	r2,-8(fp)
  80d170:	1880040e 	bge	r3,r2,80d184 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
  80d174:	00c02074 	movhi	r3,129
  80d178:	18fcec04 	addi	r3,r3,-3152
  80d17c:	e0bffe17 	ldw	r2,-8(fp)
  80d180:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  80d184:	e0bffe17 	ldw	r2,-8(fp)
  80d188:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80d18c:	00000606 	br	80d1a8 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d190:	e0bffe17 	ldw	r2,-8(fp)
  80d194:	10800044 	addi	r2,r2,1
  80d198:	e0bffe15 	stw	r2,-8(fp)
  80d19c:	e0bffe17 	ldw	r2,-8(fp)
  80d1a0:	10800810 	cmplti	r2,r2,32
  80d1a4:	103fdd1e 	bne	r2,zero,80d11c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80d1a8:	e0bffd17 	ldw	r2,-12(fp)
}
  80d1ac:	e037883a 	mov	sp,fp
  80d1b0:	dfc00217 	ldw	ra,8(sp)
  80d1b4:	df000117 	ldw	fp,4(sp)
  80d1b8:	dc000017 	ldw	r16,0(sp)
  80d1bc:	dec00304 	addi	sp,sp,12
  80d1c0:	f800283a 	ret

0080d1c4 <atexit>:
  80d1c4:	200b883a 	mov	r5,r4
  80d1c8:	000d883a 	mov	r6,zero
  80d1cc:	0009883a 	mov	r4,zero
  80d1d0:	000f883a 	mov	r7,zero
  80d1d4:	080d2841 	jmpi	80d284 <__register_exitproc>

0080d1d8 <exit>:
  80d1d8:	defffe04 	addi	sp,sp,-8
  80d1dc:	000b883a 	mov	r5,zero
  80d1e0:	dc000015 	stw	r16,0(sp)
  80d1e4:	dfc00115 	stw	ra,4(sp)
  80d1e8:	2021883a 	mov	r16,r4
  80d1ec:	080d3bc0 	call	80d3bc <__call_exitprocs>
  80d1f0:	00802074 	movhi	r2,129
  80d1f4:	10bce304 	addi	r2,r2,-3188
  80d1f8:	11000017 	ldw	r4,0(r2)
  80d1fc:	20800f17 	ldw	r2,60(r4)
  80d200:	10000126 	beq	r2,zero,80d208 <exit+0x30>
  80d204:	103ee83a 	callr	r2
  80d208:	8009883a 	mov	r4,r16
  80d20c:	080d5ac0 	call	80d5ac <_exit>

0080d210 <memcmp>:
  80d210:	00c000c4 	movi	r3,3
  80d214:	1980032e 	bgeu	r3,r6,80d224 <memcmp+0x14>
  80d218:	2144b03a 	or	r2,r4,r5
  80d21c:	10c4703a 	and	r2,r2,r3
  80d220:	10000f26 	beq	r2,zero,80d260 <memcmp+0x50>
  80d224:	31ffffc4 	addi	r7,r6,-1
  80d228:	3000061e 	bne	r6,zero,80d244 <memcmp+0x34>
  80d22c:	00000a06 	br	80d258 <memcmp+0x48>
  80d230:	39ffffc4 	addi	r7,r7,-1
  80d234:	00bfffc4 	movi	r2,-1
  80d238:	21000044 	addi	r4,r4,1
  80d23c:	29400044 	addi	r5,r5,1
  80d240:	38800526 	beq	r7,r2,80d258 <memcmp+0x48>
  80d244:	20c00003 	ldbu	r3,0(r4)
  80d248:	28800003 	ldbu	r2,0(r5)
  80d24c:	18bff826 	beq	r3,r2,80d230 <memcmp+0x20>
  80d250:	1885c83a 	sub	r2,r3,r2
  80d254:	f800283a 	ret
  80d258:	0005883a 	mov	r2,zero
  80d25c:	f800283a 	ret
  80d260:	180f883a 	mov	r7,r3
  80d264:	20c00017 	ldw	r3,0(r4)
  80d268:	28800017 	ldw	r2,0(r5)
  80d26c:	18bfed1e 	bne	r3,r2,80d224 <memcmp+0x14>
  80d270:	31bfff04 	addi	r6,r6,-4
  80d274:	21000104 	addi	r4,r4,4
  80d278:	29400104 	addi	r5,r5,4
  80d27c:	39bff936 	bltu	r7,r6,80d264 <memcmp+0x54>
  80d280:	003fe806 	br	80d224 <memcmp+0x14>

0080d284 <__register_exitproc>:
  80d284:	defffa04 	addi	sp,sp,-24
  80d288:	00802074 	movhi	r2,129
  80d28c:	10bce304 	addi	r2,r2,-3188
  80d290:	dc000015 	stw	r16,0(sp)
  80d294:	14000017 	ldw	r16,0(r2)
  80d298:	dd000415 	stw	r20,16(sp)
  80d29c:	2829883a 	mov	r20,r5
  80d2a0:	81405217 	ldw	r5,328(r16)
  80d2a4:	dcc00315 	stw	r19,12(sp)
  80d2a8:	dc800215 	stw	r18,8(sp)
  80d2ac:	dc400115 	stw	r17,4(sp)
  80d2b0:	dfc00515 	stw	ra,20(sp)
  80d2b4:	2023883a 	mov	r17,r4
  80d2b8:	3027883a 	mov	r19,r6
  80d2bc:	3825883a 	mov	r18,r7
  80d2c0:	28002526 	beq	r5,zero,80d358 <__register_exitproc+0xd4>
  80d2c4:	29000117 	ldw	r4,4(r5)
  80d2c8:	008007c4 	movi	r2,31
  80d2cc:	11002716 	blt	r2,r4,80d36c <__register_exitproc+0xe8>
  80d2d0:	8800101e 	bne	r17,zero,80d314 <__register_exitproc+0x90>
  80d2d4:	2105883a 	add	r2,r4,r4
  80d2d8:	1085883a 	add	r2,r2,r2
  80d2dc:	20c00044 	addi	r3,r4,1
  80d2e0:	1145883a 	add	r2,r2,r5
  80d2e4:	0009883a 	mov	r4,zero
  80d2e8:	15000215 	stw	r20,8(r2)
  80d2ec:	28c00115 	stw	r3,4(r5)
  80d2f0:	2005883a 	mov	r2,r4
  80d2f4:	dfc00517 	ldw	ra,20(sp)
  80d2f8:	dd000417 	ldw	r20,16(sp)
  80d2fc:	dcc00317 	ldw	r19,12(sp)
  80d300:	dc800217 	ldw	r18,8(sp)
  80d304:	dc400117 	ldw	r17,4(sp)
  80d308:	dc000017 	ldw	r16,0(sp)
  80d30c:	dec00604 	addi	sp,sp,24
  80d310:	f800283a 	ret
  80d314:	29802204 	addi	r6,r5,136
  80d318:	00800044 	movi	r2,1
  80d31c:	110e983a 	sll	r7,r2,r4
  80d320:	30c04017 	ldw	r3,256(r6)
  80d324:	2105883a 	add	r2,r4,r4
  80d328:	1085883a 	add	r2,r2,r2
  80d32c:	1185883a 	add	r2,r2,r6
  80d330:	19c6b03a 	or	r3,r3,r7
  80d334:	14802015 	stw	r18,128(r2)
  80d338:	14c00015 	stw	r19,0(r2)
  80d33c:	00800084 	movi	r2,2
  80d340:	30c04015 	stw	r3,256(r6)
  80d344:	88bfe31e 	bne	r17,r2,80d2d4 <__register_exitproc+0x50>
  80d348:	30804117 	ldw	r2,260(r6)
  80d34c:	11c4b03a 	or	r2,r2,r7
  80d350:	30804115 	stw	r2,260(r6)
  80d354:	003fdf06 	br	80d2d4 <__register_exitproc+0x50>
  80d358:	00802074 	movhi	r2,129
  80d35c:	1083ec04 	addi	r2,r2,4016
  80d360:	100b883a 	mov	r5,r2
  80d364:	80805215 	stw	r2,328(r16)
  80d368:	003fd606 	br	80d2c4 <__register_exitproc+0x40>
  80d36c:	00800034 	movhi	r2,0
  80d370:	10800004 	addi	r2,r2,0
  80d374:	1000021e 	bne	r2,zero,80d380 <__register_exitproc+0xfc>
  80d378:	013fffc4 	movi	r4,-1
  80d37c:	003fdc06 	br	80d2f0 <__register_exitproc+0x6c>
  80d380:	01006404 	movi	r4,400
  80d384:	103ee83a 	callr	r2
  80d388:	1007883a 	mov	r3,r2
  80d38c:	103ffa26 	beq	r2,zero,80d378 <__register_exitproc+0xf4>
  80d390:	80805217 	ldw	r2,328(r16)
  80d394:	180b883a 	mov	r5,r3
  80d398:	18000115 	stw	zero,4(r3)
  80d39c:	18800015 	stw	r2,0(r3)
  80d3a0:	80c05215 	stw	r3,328(r16)
  80d3a4:	18006215 	stw	zero,392(r3)
  80d3a8:	18006315 	stw	zero,396(r3)
  80d3ac:	0009883a 	mov	r4,zero
  80d3b0:	883fc826 	beq	r17,zero,80d2d4 <__register_exitproc+0x50>
  80d3b4:	003fd706 	br	80d314 <__register_exitproc+0x90>

0080d3b8 <register_fini>:
  80d3b8:	f800283a 	ret

0080d3bc <__call_exitprocs>:
  80d3bc:	00802074 	movhi	r2,129
  80d3c0:	10bce304 	addi	r2,r2,-3188
  80d3c4:	10800017 	ldw	r2,0(r2)
  80d3c8:	defff304 	addi	sp,sp,-52
  80d3cc:	df000b15 	stw	fp,44(sp)
  80d3d0:	d8800115 	stw	r2,4(sp)
  80d3d4:	00800034 	movhi	r2,0
  80d3d8:	10800004 	addi	r2,r2,0
  80d3dc:	1005003a 	cmpeq	r2,r2,zero
  80d3e0:	d8800215 	stw	r2,8(sp)
  80d3e4:	d8800117 	ldw	r2,4(sp)
  80d3e8:	dd400815 	stw	r21,32(sp)
  80d3ec:	dd000715 	stw	r20,28(sp)
  80d3f0:	10805204 	addi	r2,r2,328
  80d3f4:	dfc00c15 	stw	ra,48(sp)
  80d3f8:	ddc00a15 	stw	r23,40(sp)
  80d3fc:	dd800915 	stw	r22,36(sp)
  80d400:	dcc00615 	stw	r19,24(sp)
  80d404:	dc800515 	stw	r18,20(sp)
  80d408:	dc400415 	stw	r17,16(sp)
  80d40c:	dc000315 	stw	r16,12(sp)
  80d410:	282b883a 	mov	r21,r5
  80d414:	2039883a 	mov	fp,r4
  80d418:	d8800015 	stw	r2,0(sp)
  80d41c:	2829003a 	cmpeq	r20,r5,zero
  80d420:	d8800117 	ldw	r2,4(sp)
  80d424:	14405217 	ldw	r17,328(r2)
  80d428:	88001026 	beq	r17,zero,80d46c <__call_exitprocs+0xb0>
  80d42c:	ddc00017 	ldw	r23,0(sp)
  80d430:	88800117 	ldw	r2,4(r17)
  80d434:	8c802204 	addi	r18,r17,136
  80d438:	143fffc4 	addi	r16,r2,-1
  80d43c:	80000916 	blt	r16,zero,80d464 <__call_exitprocs+0xa8>
  80d440:	05bfffc4 	movi	r22,-1
  80d444:	a000151e 	bne	r20,zero,80d49c <__call_exitprocs+0xe0>
  80d448:	8409883a 	add	r4,r16,r16
  80d44c:	2105883a 	add	r2,r4,r4
  80d450:	1485883a 	add	r2,r2,r18
  80d454:	10c02017 	ldw	r3,128(r2)
  80d458:	a8c01126 	beq	r21,r3,80d4a0 <__call_exitprocs+0xe4>
  80d45c:	843fffc4 	addi	r16,r16,-1
  80d460:	85bff81e 	bne	r16,r22,80d444 <__call_exitprocs+0x88>
  80d464:	d8800217 	ldw	r2,8(sp)
  80d468:	10003126 	beq	r2,zero,80d530 <__call_exitprocs+0x174>
  80d46c:	dfc00c17 	ldw	ra,48(sp)
  80d470:	df000b17 	ldw	fp,44(sp)
  80d474:	ddc00a17 	ldw	r23,40(sp)
  80d478:	dd800917 	ldw	r22,36(sp)
  80d47c:	dd400817 	ldw	r21,32(sp)
  80d480:	dd000717 	ldw	r20,28(sp)
  80d484:	dcc00617 	ldw	r19,24(sp)
  80d488:	dc800517 	ldw	r18,20(sp)
  80d48c:	dc400417 	ldw	r17,16(sp)
  80d490:	dc000317 	ldw	r16,12(sp)
  80d494:	dec00d04 	addi	sp,sp,52
  80d498:	f800283a 	ret
  80d49c:	8409883a 	add	r4,r16,r16
  80d4a0:	88c00117 	ldw	r3,4(r17)
  80d4a4:	2105883a 	add	r2,r4,r4
  80d4a8:	1445883a 	add	r2,r2,r17
  80d4ac:	18ffffc4 	addi	r3,r3,-1
  80d4b0:	11800217 	ldw	r6,8(r2)
  80d4b4:	1c001526 	beq	r3,r16,80d50c <__call_exitprocs+0x150>
  80d4b8:	10000215 	stw	zero,8(r2)
  80d4bc:	303fe726 	beq	r6,zero,80d45c <__call_exitprocs+0xa0>
  80d4c0:	00c00044 	movi	r3,1
  80d4c4:	1c06983a 	sll	r3,r3,r16
  80d4c8:	90804017 	ldw	r2,256(r18)
  80d4cc:	8cc00117 	ldw	r19,4(r17)
  80d4d0:	1884703a 	and	r2,r3,r2
  80d4d4:	10001426 	beq	r2,zero,80d528 <__call_exitprocs+0x16c>
  80d4d8:	90804117 	ldw	r2,260(r18)
  80d4dc:	1884703a 	and	r2,r3,r2
  80d4e0:	10000c1e 	bne	r2,zero,80d514 <__call_exitprocs+0x158>
  80d4e4:	2105883a 	add	r2,r4,r4
  80d4e8:	1485883a 	add	r2,r2,r18
  80d4ec:	11400017 	ldw	r5,0(r2)
  80d4f0:	e009883a 	mov	r4,fp
  80d4f4:	303ee83a 	callr	r6
  80d4f8:	88800117 	ldw	r2,4(r17)
  80d4fc:	98bfc81e 	bne	r19,r2,80d420 <__call_exitprocs+0x64>
  80d500:	b8800017 	ldw	r2,0(r23)
  80d504:	147fd526 	beq	r2,r17,80d45c <__call_exitprocs+0xa0>
  80d508:	003fc506 	br	80d420 <__call_exitprocs+0x64>
  80d50c:	8c000115 	stw	r16,4(r17)
  80d510:	003fea06 	br	80d4bc <__call_exitprocs+0x100>
  80d514:	2105883a 	add	r2,r4,r4
  80d518:	1485883a 	add	r2,r2,r18
  80d51c:	11000017 	ldw	r4,0(r2)
  80d520:	303ee83a 	callr	r6
  80d524:	003ff406 	br	80d4f8 <__call_exitprocs+0x13c>
  80d528:	303ee83a 	callr	r6
  80d52c:	003ff206 	br	80d4f8 <__call_exitprocs+0x13c>
  80d530:	88800117 	ldw	r2,4(r17)
  80d534:	1000081e 	bne	r2,zero,80d558 <__call_exitprocs+0x19c>
  80d538:	89000017 	ldw	r4,0(r17)
  80d53c:	20000726 	beq	r4,zero,80d55c <__call_exitprocs+0x1a0>
  80d540:	b9000015 	stw	r4,0(r23)
  80d544:	8809883a 	mov	r4,r17
  80d548:	00000000 	call	0 <__alt_mem_sram>
  80d54c:	bc400017 	ldw	r17,0(r23)
  80d550:	883fb71e 	bne	r17,zero,80d430 <__call_exitprocs+0x74>
  80d554:	003fc506 	br	80d46c <__call_exitprocs+0xb0>
  80d558:	89000017 	ldw	r4,0(r17)
  80d55c:	882f883a 	mov	r23,r17
  80d560:	2023883a 	mov	r17,r4
  80d564:	883fb21e 	bne	r17,zero,80d430 <__call_exitprocs+0x74>
  80d568:	003fc006 	br	80d46c <__call_exitprocs+0xb0>

0080d56c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80d56c:	defffd04 	addi	sp,sp,-12
  80d570:	df000215 	stw	fp,8(sp)
  80d574:	df000204 	addi	fp,sp,8
  80d578:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80d57c:	e0bfff17 	ldw	r2,-4(fp)
  80d580:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80d584:	e0bffe17 	ldw	r2,-8(fp)
  80d588:	1005003a 	cmpeq	r2,r2,zero
  80d58c:	1000021e 	bne	r2,zero,80d598 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80d590:	002af070 	cmpltui	zero,zero,43969
  80d594:	00000106 	br	80d59c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80d598:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80d59c:	e037883a 	mov	sp,fp
  80d5a0:	df000017 	ldw	fp,0(sp)
  80d5a4:	dec00104 	addi	sp,sp,4
  80d5a8:	f800283a 	ret

0080d5ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80d5ac:	defffd04 	addi	sp,sp,-12
  80d5b0:	dfc00215 	stw	ra,8(sp)
  80d5b4:	df000115 	stw	fp,4(sp)
  80d5b8:	df000104 	addi	fp,sp,4
  80d5bc:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80d5c0:	e13fff17 	ldw	r4,-4(fp)
  80d5c4:	080d56c0 	call	80d56c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80d5c8:	003fff06 	br	80d5c8 <_exit+0x1c>
  80d5cc:	0080d3b8 	rdprs	r2,zero,846
