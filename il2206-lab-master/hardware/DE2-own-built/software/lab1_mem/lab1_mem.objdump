
lab1_mem.elf:     file format elf32-littlenios2
lab1_mem.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x000015c4 memsz 0x000015c4 flags r-x
    LOAD off    0x000025c4 vaddr 0x000015c4 paddr 0x00001898 align 2**12
         filesz 0x000002d4 memsz 0x000002d4 flags rw-
    LOAD off    0x00002b6c vaddr 0x00001b6c paddr 0x00001b6c align 2**12
         filesz 0x00000000 memsz 0x0000109c flags rw-
    LOAD off    0x00003000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00001590  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  00001590  00001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000002d4  000015c4  00001898  000025c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000109c  00001b6c  00001b6c  00002b6c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000004e8  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000706  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000073f1  00000000  00000000  00003c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000232f  00000000  00000000  0000b027  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00005d6b  00000000  00000000  0000d356  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000718  00000000  00000000  000130c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000159e  00000000  00000000  000137dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001404  00000000  00000000  00014d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00016180  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  00016190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00017a7a  2**0
                  CONTENTS, READONLY
 17 .cpu          00000019  00000000  00000000  00017a7d  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00017a96  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00017a97  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00017a98  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00017a9c  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00017aa0  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  00017aa4  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  00017aaf  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  00017aba  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000019  00000000  00000000  00017ac5  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  00017ade  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000712d3  00000000  00000000  00017b2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00000000 l    d  .text	00000000 .text
00001590 l    d  .rodata	00000000 .rodata
000015c4 l    d  .rwdata	00000000 .rwdata
00001b6c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000035c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
000004d4 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000015c4 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_close.c
00000880 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00000940 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000a3c l     F .text	00000088 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00001798 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00001178 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
000014b8 l     F .text	00000020 alt_get_errno
00000560 g     F .text	00000060 alt_main
00001898 g       *ABS*	00000000 __flash_rwdata_start
00000000 g       *ABS*	00000000 __alt_mem_sram
0000082c g     F .text	0000000c alt_get_cpu_freq
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00001b78 g     O .bss	00000004 errno
00001b70 g     O .bss	00000004 alt_argv
00009878 g       *ABS*	00000000 _gp
00001618 g     O .rwdata	00000180 alt_fd_list
00000d30 g     F .text	00000070 alt_find_dev
000004a8 g     F .text	0000002c memcpy
00000ac4 g     F .text	0000008c alt_io_redirect
00001590 g       *ABS*	00000000 __DTOR_END__
00000790 g     F .text	00000060 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000498 g     F .text	00000008 __udivsi3
00000838 g     F .text	00000010 perf_get_num_starts
00001888 g     O .rwdata	00000004 alt_max_fd
00001894 g     O .rwdata	00000004 _global_impure_ptr
00002c08 g       *ABS*	00000000 __bss_end
000015f0 g     O .rwdata	00000028 alt_dev_null
0000093c g     F .text	00000004 alt_dcache_flush_all
00001898 g       *ABS*	00000000 __ram_rwdata_end
01008000 g       *ABS*	00000000 __alt_mem_onchip_memory
00001880 g     O .rwdata	00000008 alt_dev_list
000014d8 g     F .text	000000b4 write
00000f78 g     F .text	00000074 _putc_r
000015c4 g       *ABS*	00000000 __ram_rodata_end
000004a0 g     F .text	00000008 __umodsi3
00002c08 g       *ABS*	00000000 end
0000158c g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
000007f0 g     F .text	00000034 altera_avalon_jtag_uart_write
000005c0 g     F .text	00000144 alt_printf
0000117c g     F .text	000001bc __call_exitprocs
00000000 g     F .text	0000003c _start
00000718 g     F .text	00000038 alt_sys_init
0000100c g     F .text	0000016c __register_exitproc
0000146c g     F .text	00000038 __mulsi3
000015c4 g       *ABS*	00000000 __ram_rwdata_start
00001590 g       *ABS*	00000000 __ram_rodata_start
00000780 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00000e3c g     F .text	0000005c alt_get_fd
00000848 g     F .text	00000030 perf_get_section_time
00000ecc g     F .text	0000003c memcmp
00002c08 g       *ABS*	00000000 __alt_stack_base
00000878 g     F .text	00000008 perf_get_total_time
00000da0 g     F .text	0000009c alt_find_file
00000948 g     F .text	00000070 alt_dev_llist_insert
00001338 g     F .text	000000bc __sfvwrite_small_dev
00001b6c g       *ABS*	00000000 __bss_start
0000003c g     F .text	00000320 main
00001b74 g     O .bss	00000004 alt_envp
00000770 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00002b7c g     O .bss	0000008c _atexit0
00001b7c g     O .bss	00001000 y
0000188c g     O .rwdata	00000004 alt_errno
00000f08 g     F .text	00000070 putc
000003d8 g     F .text	00000060 __divsi3
00001590 g       *ABS*	00000000 __CTOR_END__
00001590 g       *ABS*	00000000 __flash_rodata_start
00001590 g       *ABS*	00000000 __DTOR_LIST__
00000750 g     F .text	00000020 alt_irq_init
00000ccc g     F .text	0000005c alt_release_fd
00000e98 g     F .text	00000014 atexit
000013f4 g     F .text	00000078 _write_r
00001890 g     O .rwdata	00000004 _impure_ptr
00001b6c g     O .bss	00000004 alt_argc
000009f8 g     F .text	00000040 _do_dtors
00001878 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00001898 g       *ABS*	00000000 _edata
00002c08 g       *ABS*	00000000 _end
00800020 g       *ABS*	00000000 __ram_exceptions_end
00000824 g     F .text	00000008 alt_get_performance_counter_base
00000d28 g     F .text	00000008 altera_nios2_qsys_irq_init
00000eac g     F .text	00000020 exit
00000438 g     F .text	00000060 __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00800000 g       *ABS*	00000000 __alt_mem_sdram
000014a4 g     F .text	00000014 _exit
00000fec g     F .text	00000020 strlen
00000b50 g     F .text	0000017c open
00000704 g     F .text	00000014 alt_putchar
00000a38 g     F .text	00000004 alt_icache_flush_all
000009b8 g     F .text	00000040 _do_ctors
000008a0 g     F .text	0000009c close
000004f4 g     F .text	0000006c alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  800004:	08400014 	ori	at,at,0
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00000000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
       0:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
       4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
       8:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
       c:	d6a61e14 	ori	gp,gp,39032
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
      10:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
      14:	1086db14 	ori	r2,r2,7020

    movhi r3, %hi(__bss_end)
      18:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
      1c:	18cb0214 	ori	r3,r3,11272

    beq r2, r3, 1f
      20:	10c00326 	beq	r2,r3,30 <_start+0x30>

0:
    stw zero, (r2)
      24:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
      28:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
      2c:	10fffd36 	bltu	r2,r3,24 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
      30:	00004f40 	call	4f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
      34:	00005600 	call	560 <alt_main>

00000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
      38:	003fff06 	br	38 <alt_after_alt_main>

0000003c <main>:
#define MAX 512

alt_u64 y[MAX];

int main()
{
      3c:	deffea04 	addi	sp,sp,-88
      40:	dfc01515 	stw	ra,84(sp)
      44:	df001415 	stw	fp,80(sp)
      48:	dc001315 	stw	r16,76(sp)
      4c:	df001304 	addi	fp,sp,76
	alt_u64* memories;
	memories[0] = ONCHIP_MEMORY_BASE;
      50:	e0fff517 	ldw	r3,-44(fp)
      54:	00804074 	movhi	r2,257
      58:	10a00004 	addi	r2,r2,-32768
      5c:	18800015 	stw	r2,0(r3)
      60:	18000115 	stw	zero,4(r3)
	memories[1] = SDRAM_BASE;
      64:	e0bff517 	ldw	r2,-44(fp)
      68:	10c00204 	addi	r3,r2,8
      6c:	00802034 	movhi	r2,128
      70:	18800015 	stw	r2,0(r3)
      74:	18000115 	stw	zero,4(r3)
	memories[2] = SRAM_BASE;
      78:	e0bff517 	ldw	r2,-44(fp)
      7c:	10800404 	addi	r2,r2,16
      80:	10000015 	stw	zero,0(r2)
      84:	10000115 	stw	zero,4(r2)
	alt_u64 text = 16384;
      88:	00900004 	movi	r2,16384
      8c:	e0bff315 	stw	r2,-52(fp)
      90:	e03ff415 	stw	zero,-48(fp)
	char hextmp[20];
	char hexstr[20];
	long hexconv;
	int  hexlen;

	for(i=0;i<3;i++){
      94:	e03ff215 	stw	zero,-56(fp)
      98:	0000a606 	br	334 <main+0x2f8>
		for(j=0;j<3;j++){
      9c:	e03ff115 	stw	zero,-60(fp)
      a0:	00009e06 	br	31c <main+0x2e0>
			if(j!=i){
      a4:	e0fff117 	ldw	r3,-60(fp)
      a8:	e0bff217 	ldw	r2,-56(fp)
      ac:	18809826 	beq	r3,r2,310 <main+0x2d4>
				alt_printf("[");
      b0:	01000034 	movhi	r4,0
      b4:	21056404 	addi	r4,r4,5520
      b8:	00005c00 	call	5c0 <alt_printf>
				for(k=1;k<=MAX;k++){
      bc:	00800044 	movi	r2,1
      c0:	e0bff015 	stw	r2,-64(fp)
      c4:	00008f06 	br	304 <main+0x2c8>
					PERF_RESET(P_COUNTER_BASE);
      c8:	00c04074 	movhi	r3,257
      cc:	18c40004 	addi	r3,r3,4096
      d0:	00800044 	movi	r2,1
      d4:	18800035 	stwio	r2,0(r3)
					PERF_BEGIN(P_COUNTER_BASE, 0);
      d8:	00804074 	movhi	r2,257
      dc:	10840104 	addi	r2,r2,4100
      e0:	10000035 	stwio	zero,0(r2)
					memcpy((void*) (memories[j] + text), (const void*) (memories[i] + text),k);
      e4:	e0bff117 	ldw	r2,-60(fp)
      e8:	100490fa 	slli	r2,r2,3
      ec:	1007883a 	mov	r3,r2
      f0:	e0bff517 	ldw	r2,-44(fp)
      f4:	1885883a 	add	r2,r3,r2
      f8:	11000017 	ldw	r4,0(r2)
      fc:	11400117 	ldw	r5,4(r2)
     100:	e1bff317 	ldw	r6,-52(fp)
     104:	e1fff417 	ldw	r7,-48(fp)
     108:	2185883a 	add	r2,r4,r6
     10c:	1111803a 	cmpltu	r8,r2,r4
     110:	29c7883a 	add	r3,r5,r7
     114:	40c9883a 	add	r4,r8,r3
     118:	2007883a 	mov	r3,r4
     11c:	1009883a 	mov	r4,r2
     120:	180b883a 	mov	r5,r3
     124:	2005883a 	mov	r2,r4
     128:	1013883a 	mov	r9,r2
     12c:	e0bff217 	ldw	r2,-56(fp)
     130:	100490fa 	slli	r2,r2,3
     134:	1007883a 	mov	r3,r2
     138:	e0bff517 	ldw	r2,-44(fp)
     13c:	1885883a 	add	r2,r3,r2
     140:	11000017 	ldw	r4,0(r2)
     144:	11400117 	ldw	r5,4(r2)
     148:	e1bff317 	ldw	r6,-52(fp)
     14c:	e1fff417 	ldw	r7,-48(fp)
     150:	2185883a 	add	r2,r4,r6
     154:	1111803a 	cmpltu	r8,r2,r4
     158:	29c7883a 	add	r3,r5,r7
     15c:	40c9883a 	add	r4,r8,r3
     160:	2007883a 	mov	r3,r4
     164:	1009883a 	mov	r4,r2
     168:	180b883a 	mov	r5,r3
     16c:	2005883a 	mov	r2,r4
     170:	e0fff017 	ldw	r3,-64(fp)
     174:	4809883a 	mov	r4,r9
     178:	100b883a 	mov	r5,r2
     17c:	180d883a 	mov	r6,r3
     180:	00004a80 	call	4a8 <memcpy>
					PERF_END(P_COUNTER_BASE, 0);
     184:	00804074 	movhi	r2,257
     188:	10840004 	addi	r2,r2,4096
     18c:	10000035 	stwio	zero,0(r2)
					y[k] = (long)perf_get_section_time(P_COUNTER_BASE, 0);
     190:	e43ff017 	ldw	r16,-64(fp)
     194:	01004074 	movhi	r4,257
     198:	21040004 	addi	r4,r4,4096
     19c:	000b883a 	mov	r5,zero
     1a0:	00008480 	call	848 <perf_get_section_time>
     1a4:	1009883a 	mov	r4,r2
     1a8:	180b883a 	mov	r5,r3
     1ac:	200bd7fa 	srai	r5,r4,31
     1b0:	2005883a 	mov	r2,r4
     1b4:	2807883a 	mov	r3,r5
     1b8:	01400034 	movhi	r5,0
     1bc:	2946df04 	addi	r5,r5,7036
     1c0:	800890fa 	slli	r4,r16,3
     1c4:	2149883a 	add	r4,r4,r5
     1c8:	20800015 	stw	r2,0(r4)
     1cc:	20c00115 	stw	r3,4(r4)
					hexconv = y[k];
     1d0:	e0bff017 	ldw	r2,-64(fp)
     1d4:	00c00034 	movhi	r3,0
     1d8:	18c6df04 	addi	r3,r3,7036
     1dc:	100490fa 	slli	r2,r2,3
     1e0:	10c9883a 	add	r4,r2,r3
     1e4:	20800017 	ldw	r2,0(r4)
     1e8:	20c00117 	ldw	r3,4(r4)
     1ec:	e0bfee15 	stw	r2,-72(fp)
					if(hexconv <= 0) hexconv = 1;
     1f0:	e0bfee17 	ldw	r2,-72(fp)
     1f4:	10800048 	cmpgei	r2,r2,1
     1f8:	1000021e 	bne	r2,zero,204 <main+0x1c8>
     1fc:	00800044 	movi	r2,1
     200:	e0bfee15 	stw	r2,-72(fp)
					h = 0;
     204:	e03fef15 	stw	zero,-68(fp)
					while(hexconv > 0){
     208:	00001406 	br	25c <main+0x220>
						hextmp[h++] = (hexconv%10) + 0x30/*shift to ascii number*/;
     20c:	e43fef17 	ldw	r16,-68(fp)
     210:	e13fee17 	ldw	r4,-72(fp)
     214:	01400284 	movi	r5,10
     218:	00004380 	call	438 <__modsi3>
     21c:	10800c04 	addi	r2,r2,48
     220:	1007883a 	mov	r3,r2
     224:	e0bff604 	addi	r2,fp,-40
     228:	1405883a 	add	r2,r2,r16
     22c:	10c00005 	stb	r3,0(r2)
     230:	e0bfef17 	ldw	r2,-68(fp)
     234:	10800044 	addi	r2,r2,1
     238:	e0bfef15 	stw	r2,-68(fp)
						hextmp[h]   = 0;
     23c:	e0ffef17 	ldw	r3,-68(fp)
     240:	e0bff604 	addi	r2,fp,-40
     244:	10c5883a 	add	r2,r2,r3
     248:	10000005 	stb	zero,0(r2)
						hexconv    /= 10;
     24c:	e13fee17 	ldw	r4,-72(fp)
     250:	01400284 	movi	r5,10
     254:	00003d80 	call	3d8 <__divsi3>
     258:	e0bfee15 	stw	r2,-72(fp)
					PERF_END(P_COUNTER_BASE, 0);
					y[k] = (long)perf_get_section_time(P_COUNTER_BASE, 0);
					hexconv = y[k];
					if(hexconv <= 0) hexconv = 1;
					h = 0;
					while(hexconv > 0){
     25c:	e0bfee17 	ldw	r2,-72(fp)
     260:	10800048 	cmpgei	r2,r2,1
     264:	103fe91e 	bne	r2,zero,20c <main+0x1d0>
						hextmp[h++] = (hexconv%10) + 0x30/*shift to ascii number*/;
						hextmp[h]   = 0;
						hexconv    /= 10;
					}
					hexlen = h;
     268:	e0bfef17 	ldw	r2,-68(fp)
     26c:	e0bfed15 	stw	r2,-76(fp)
					while(h--){
     270:	00000b06 	br	2a0 <main+0x264>
						hexstr[h] = hextmp[hexlen-h-1];
     274:	e13fef17 	ldw	r4,-68(fp)
     278:	e0ffed17 	ldw	r3,-76(fp)
     27c:	e0bfef17 	ldw	r2,-68(fp)
     280:	1885c83a 	sub	r2,r3,r2
     284:	10ffffc4 	addi	r3,r2,-1
     288:	e0bff604 	addi	r2,fp,-40
     28c:	10c5883a 	add	r2,r2,r3
     290:	10c00003 	ldbu	r3,0(r2)
     294:	e0bffb04 	addi	r2,fp,-20
     298:	1105883a 	add	r2,r2,r4
     29c:	10c00005 	stb	r3,0(r2)
						hextmp[h++] = (hexconv%10) + 0x30/*shift to ascii number*/;
						hextmp[h]   = 0;
						hexconv    /= 10;
					}
					hexlen = h;
					while(h--){
     2a0:	e0bfef17 	ldw	r2,-68(fp)
     2a4:	10bfffc4 	addi	r2,r2,-1
     2a8:	e0bfef15 	stw	r2,-68(fp)
     2ac:	e0bfef17 	ldw	r2,-68(fp)
     2b0:	10bfffd8 	cmpnei	r2,r2,-1
     2b4:	103fef1e 	bne	r2,zero,274 <main+0x238>
						hexstr[h] = hextmp[hexlen-h-1];
					}
					hexstr[hexlen] = 0;
     2b8:	e0ffed17 	ldw	r3,-76(fp)
     2bc:	e0bffb04 	addi	r2,fp,-20
     2c0:	10c5883a 	add	r2,r2,r3
     2c4:	10000005 	stb	zero,0(r2)
					if(k==MAX) alt_printf("%s];\n", hexstr);
     2c8:	e0bff017 	ldw	r2,-64(fp)
     2cc:	10808018 	cmpnei	r2,r2,512
     2d0:	1000051e 	bne	r2,zero,2e8 <main+0x2ac>
     2d4:	e17ffb04 	addi	r5,fp,-20
     2d8:	01000034 	movhi	r4,0
     2dc:	21056504 	addi	r4,r4,5524
     2e0:	00005c00 	call	5c0 <alt_printf>
     2e4:	00000406 	br	2f8 <main+0x2bc>
					else alt_printf("%s, ",hexstr);
     2e8:	e17ffb04 	addi	r5,fp,-20
     2ec:	01000034 	movhi	r4,0
     2f0:	21056704 	addi	r4,r4,5532
     2f4:	00005c00 	call	5c0 <alt_printf>

	for(i=0;i<3;i++){
		for(j=0;j<3;j++){
			if(j!=i){
				alt_printf("[");
				for(k=1;k<=MAX;k++){
     2f8:	e0bff017 	ldw	r2,-64(fp)
     2fc:	10800044 	addi	r2,r2,1
     300:	e0bff015 	stw	r2,-64(fp)
     304:	e0bff017 	ldw	r2,-64(fp)
     308:	10808050 	cmplti	r2,r2,513
     30c:	103f6e1e 	bne	r2,zero,c8 <main+0x8c>
	char hexstr[20];
	long hexconv;
	int  hexlen;

	for(i=0;i<3;i++){
		for(j=0;j<3;j++){
     310:	e0bff117 	ldw	r2,-60(fp)
     314:	10800044 	addi	r2,r2,1
     318:	e0bff115 	stw	r2,-60(fp)
     31c:	e0bff117 	ldw	r2,-60(fp)
     320:	108000d0 	cmplti	r2,r2,3
     324:	103f5f1e 	bne	r2,zero,a4 <main+0x68>
	char hextmp[20];
	char hexstr[20];
	long hexconv;
	int  hexlen;

	for(i=0;i<3;i++){
     328:	e0bff217 	ldw	r2,-56(fp)
     32c:	10800044 	addi	r2,r2,1
     330:	e0bff215 	stw	r2,-56(fp)
     334:	e0bff217 	ldw	r2,-56(fp)
     338:	108000d0 	cmplti	r2,r2,3
     33c:	103f571e 	bne	r2,zero,9c <main+0x60>
				}
			}
		}
	}

	return 0;
     340:	0005883a 	mov	r2,zero
}
     344:	e037883a 	mov	sp,fp
     348:	dfc00217 	ldw	ra,8(sp)
     34c:	df000117 	ldw	fp,4(sp)
     350:	dc000017 	ldw	r16,0(sp)
     354:	dec00304 	addi	sp,sp,12
     358:	f800283a 	ret

0000035c <udivmodsi4>:
     35c:	29001b2e 	bgeu	r5,r4,3cc <udivmodsi4+0x70>
     360:	28001a16 	blt	r5,zero,3cc <udivmodsi4+0x70>
     364:	00800044 	movi	r2,1
     368:	0007883a 	mov	r3,zero
     36c:	01c007c4 	movi	r7,31
     370:	00000306 	br	380 <udivmodsi4+0x24>
     374:	19c01326 	beq	r3,r7,3c4 <udivmodsi4+0x68>
     378:	18c00044 	addi	r3,r3,1
     37c:	28000416 	blt	r5,zero,390 <udivmodsi4+0x34>
     380:	294b883a 	add	r5,r5,r5
     384:	1085883a 	add	r2,r2,r2
     388:	293ffa36 	bltu	r5,r4,374 <udivmodsi4+0x18>
     38c:	10000d26 	beq	r2,zero,3c4 <udivmodsi4+0x68>
     390:	0007883a 	mov	r3,zero
     394:	21400236 	bltu	r4,r5,3a0 <udivmodsi4+0x44>
     398:	2149c83a 	sub	r4,r4,r5
     39c:	1886b03a 	or	r3,r3,r2
     3a0:	1004d07a 	srli	r2,r2,1
     3a4:	280ad07a 	srli	r5,r5,1
     3a8:	103ffa1e 	bne	r2,zero,394 <udivmodsi4+0x38>
     3ac:	30000226 	beq	r6,zero,3b8 <udivmodsi4+0x5c>
     3b0:	2005883a 	mov	r2,r4
     3b4:	f800283a 	ret
     3b8:	1809883a 	mov	r4,r3
     3bc:	2005883a 	mov	r2,r4
     3c0:	f800283a 	ret
     3c4:	0007883a 	mov	r3,zero
     3c8:	003ff806 	br	3ac <udivmodsi4+0x50>
     3cc:	00800044 	movi	r2,1
     3d0:	0007883a 	mov	r3,zero
     3d4:	003fef06 	br	394 <udivmodsi4+0x38>

000003d8 <__divsi3>:
     3d8:	defffe04 	addi	sp,sp,-8
     3dc:	dc000015 	stw	r16,0(sp)
     3e0:	dfc00115 	stw	ra,4(sp)
     3e4:	0021883a 	mov	r16,zero
     3e8:	20000c16 	blt	r4,zero,41c <__divsi3+0x44>
     3ec:	000d883a 	mov	r6,zero
     3f0:	28000e16 	blt	r5,zero,42c <__divsi3+0x54>
     3f4:	000035c0 	call	35c <udivmodsi4>
     3f8:	1007883a 	mov	r3,r2
     3fc:	8005003a 	cmpeq	r2,r16,zero
     400:	1000011e 	bne	r2,zero,408 <__divsi3+0x30>
     404:	00c7c83a 	sub	r3,zero,r3
     408:	1805883a 	mov	r2,r3
     40c:	dfc00117 	ldw	ra,4(sp)
     410:	dc000017 	ldw	r16,0(sp)
     414:	dec00204 	addi	sp,sp,8
     418:	f800283a 	ret
     41c:	0109c83a 	sub	r4,zero,r4
     420:	04000044 	movi	r16,1
     424:	000d883a 	mov	r6,zero
     428:	283ff20e 	bge	r5,zero,3f4 <__divsi3+0x1c>
     42c:	014bc83a 	sub	r5,zero,r5
     430:	8021003a 	cmpeq	r16,r16,zero
     434:	003fef06 	br	3f4 <__divsi3+0x1c>

00000438 <__modsi3>:
     438:	deffff04 	addi	sp,sp,-4
     43c:	dfc00015 	stw	ra,0(sp)
     440:	01800044 	movi	r6,1
     444:	2807883a 	mov	r3,r5
     448:	20000416 	blt	r4,zero,45c <__modsi3+0x24>
     44c:	28000c16 	blt	r5,zero,480 <__modsi3+0x48>
     450:	dfc00017 	ldw	ra,0(sp)
     454:	dec00104 	addi	sp,sp,4
     458:	000035c1 	jmpi	35c <udivmodsi4>
     45c:	0109c83a 	sub	r4,zero,r4
     460:	28000b16 	blt	r5,zero,490 <__modsi3+0x58>
     464:	180b883a 	mov	r5,r3
     468:	01800044 	movi	r6,1
     46c:	000035c0 	call	35c <udivmodsi4>
     470:	0085c83a 	sub	r2,zero,r2
     474:	dfc00017 	ldw	ra,0(sp)
     478:	dec00104 	addi	sp,sp,4
     47c:	f800283a 	ret
     480:	014bc83a 	sub	r5,zero,r5
     484:	dfc00017 	ldw	ra,0(sp)
     488:	dec00104 	addi	sp,sp,4
     48c:	000035c1 	jmpi	35c <udivmodsi4>
     490:	0147c83a 	sub	r3,zero,r5
     494:	003ff306 	br	464 <__modsi3+0x2c>

00000498 <__udivsi3>:
     498:	000d883a 	mov	r6,zero
     49c:	000035c1 	jmpi	35c <udivmodsi4>

000004a0 <__umodsi3>:
     4a0:	01800044 	movi	r6,1
     4a4:	000035c1 	jmpi	35c <udivmodsi4>

000004a8 <memcpy>:
     4a8:	2011883a 	mov	r8,r4
     4ac:	30000726 	beq	r6,zero,4cc <memcpy+0x24>
     4b0:	000f883a 	mov	r7,zero
     4b4:	29c5883a 	add	r2,r5,r7
     4b8:	11000003 	ldbu	r4,0(r2)
     4bc:	41c7883a 	add	r3,r8,r7
     4c0:	39c00044 	addi	r7,r7,1
     4c4:	19000005 	stb	r4,0(r3)
     4c8:	39bffa1e 	bne	r7,r6,4b4 <memcpy+0xc>
     4cc:	4005883a 	mov	r2,r8
     4d0:	f800283a 	ret

000004d4 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     4d4:	2900051e 	bne	r5,r4,4ec <alt_load_section+0x18>
     4d8:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
     4dc:	20800017 	ldw	r2,0(r4)
     4e0:	21000104 	addi	r4,r4,4
     4e4:	28800015 	stw	r2,0(r5)
     4e8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     4ec:	29bffb1e 	bne	r5,r6,4dc <alt_load_section+0x8>
     4f0:	f800283a 	ret

000004f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     4f4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     4f8:	01000034 	movhi	r4,0
     4fc:	21062604 	addi	r4,r4,6296
     500:	01400034 	movhi	r5,0
     504:	29457104 	addi	r5,r5,5572
     508:	01800034 	movhi	r6,0
     50c:	31862604 	addi	r6,r6,6296
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     510:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     514:	00004d40 	call	4d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     518:	01002034 	movhi	r4,128
     51c:	21000804 	addi	r4,r4,32
     520:	01402034 	movhi	r5,128
     524:	29400804 	addi	r5,r5,32
     528:	01802034 	movhi	r6,128
     52c:	31800804 	addi	r6,r6,32
     530:	00004d40 	call	4d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     534:	01000034 	movhi	r4,0
     538:	21056404 	addi	r4,r4,5520
     53c:	01400034 	movhi	r5,0
     540:	29456404 	addi	r5,r5,5520
     544:	01800034 	movhi	r6,0
     548:	31857104 	addi	r6,r6,5572
     54c:	00004d40 	call	4d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     550:	000093c0 	call	93c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
     554:	dfc00017 	ldw	ra,0(sp)
     558:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
     55c:	0000a381 	jmpi	a38 <alt_icache_flush_all>

00000560 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     560:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     564:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     568:	dfc00115 	stw	ra,4(sp)
     56c:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     570:	00007500 	call	750 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     574:	00007180 	call	718 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     578:	01000034 	movhi	r4,0
     57c:	21056904 	addi	r4,r4,5540
     580:	200b883a 	mov	r5,r4
     584:	200d883a 	mov	r6,r4
     588:	0000ac40 	call	ac4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     58c:	00009b80 	call	9b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     590:	01000034 	movhi	r4,0
     594:	21027e04 	addi	r4,r4,2552
     598:	0000e980 	call	e98 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     59c:	d120bd17 	ldw	r4,-32012(gp)
     5a0:	d160be17 	ldw	r5,-32008(gp)
     5a4:	d1a0bf17 	ldw	r6,-32004(gp)
     5a8:	000003c0 	call	3c <main>
     5ac:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     5b0:	01000044 	movi	r4,1
     5b4:	00008a00 	call	8a0 <close>
  exit (result);
     5b8:	8009883a 	mov	r4,r16
     5bc:	0000eac0 	call	eac <exit>

000005c0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     5c0:	defff804 	addi	sp,sp,-32
     5c4:	dfc00415 	stw	ra,16(sp)
     5c8:	dc800315 	stw	r18,12(sp)
     5cc:	dc400215 	stw	r17,8(sp)
     5d0:	dc000115 	stw	r16,4(sp)
     5d4:	d9400515 	stw	r5,20(sp)
     5d8:	d9800615 	stw	r6,24(sp)
     5dc:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
     5e0:	d8800504 	addi	r2,sp,20
     5e4:	2025883a 	mov	r18,r4
     5e8:	d8800015 	stw	r2,0(sp)
     5ec:	00003d06 	br	6e4 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     5f0:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     5f4:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     5f8:	18800226 	beq	r3,r2,604 <alt_printf+0x44>
        {
            alt_putchar(c);
     5fc:	1809883a 	mov	r4,r3
     600:	00000a06 	br	62c <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     604:	91000007 	ldb	r4,0(r18)
     608:	94800044 	addi	r18,r18,1
     60c:	20003726 	beq	r4,zero,6ec <alt_printf+0x12c>
            {
                if (c == '%')
     610:	20c00626 	beq	r4,r3,62c <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
     614:	008018c4 	movi	r2,99
     618:	2080061e 	bne	r4,r2,634 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
     61c:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
     620:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
     624:	10800104 	addi	r2,r2,4
     628:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
     62c:	00007040 	call	704 <alt_putchar>
     630:	00002c06 	br	6e4 <alt_printf+0x124>
                }
                else if (c == 'x')
     634:	00801e04 	movi	r2,120
     638:	20801e1e 	bne	r4,r2,6b4 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     63c:	d8800017 	ldw	r2,0(sp)
     640:	14400017 	ldw	r17,0(r2)
     644:	10800104 	addi	r2,r2,4
     648:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     64c:	88000226 	beq	r17,zero,658 <alt_printf+0x98>
     650:	04000704 	movi	r16,28
     654:	00000306 	br	664 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
     658:	01000c04 	movi	r4,48
     65c:	003ff306 	br	62c <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
     660:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     664:	008003c4 	movi	r2,15
     668:	1404983a 	sll	r2,r2,r16
     66c:	8884703a 	and	r2,r17,r2
     670:	103ffb26 	beq	r2,zero,660 <alt_printf+0xa0>
     674:	00000b06 	br	6a4 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     678:	8884703a 	and	r2,r17,r2
     67c:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
     680:	00800244 	movi	r2,9
                            c = '0' + digit;
     684:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
     688:	10c0012e 	bgeu	r2,r3,690 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
     68c:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
     690:	21003fcc 	andi	r4,r4,255
     694:	2100201c 	xori	r4,r4,128
     698:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     69c:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
     6a0:	00007040 	call	704 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     6a4:	008003c4 	movi	r2,15
     6a8:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     6ac:	803ff20e 	bge	r16,zero,678 <alt_printf+0xb8>
     6b0:	00000c06 	br	6e4 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     6b4:	00801cc4 	movi	r2,115
     6b8:	20800a1e 	bne	r4,r2,6e4 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     6bc:	d8800017 	ldw	r2,0(sp)
     6c0:	14000017 	ldw	r16,0(r2)
     6c4:	10800104 	addi	r2,r2,4
     6c8:	d8800015 	stw	r2,0(sp)
     6cc:	00000106 	br	6d4 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
     6d0:	00007040 	call	704 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     6d4:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
     6d8:	84000044 	addi	r16,r16,1
     6dc:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     6e0:	103ffb1e 	bne	r2,zero,6d0 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     6e4:	90c00007 	ldb	r3,0(r18)
     6e8:	183fc11e 	bne	r3,zero,5f0 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
     6ec:	dfc00417 	ldw	ra,16(sp)
     6f0:	dc800317 	ldw	r18,12(sp)
     6f4:	dc400217 	ldw	r17,8(sp)
     6f8:	dc000117 	ldw	r16,4(sp)
     6fc:	dec00804 	addi	sp,sp,32
     700:	f800283a 	ret

00000704 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     704:	00800034 	movhi	r2,0
     708:	10862404 	addi	r2,r2,6288
     70c:	10800017 	ldw	r2,0(r2)
     710:	11400217 	ldw	r5,8(r2)
     714:	0000f081 	jmpi	f08 <putc>

00000718 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     718:	deffff04 	addi	sp,sp,-4

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     71c:	01000034 	movhi	r4,0
     720:	21057104 	addi	r4,r4,5572
     724:	01400034 	movhi	r5,0
     728:	29462004 	addi	r5,r5,6272
     72c:	dfc00015 	stw	ra,0(sp)
     730:	00009480 	call	948 <alt_dev_llist_insert>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
     734:	00c00044 	movi	r3,1
     738:	00804074 	movhi	r2,257
     73c:	10840004 	addi	r2,r2,4096
     740:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
     744:	dfc00017 	ldw	ra,0(sp)
     748:	dec00104 	addi	sp,sp,4
     74c:	f800283a 	ret

00000750 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     750:	deffff04 	addi	sp,sp,-4
     754:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
     758:	0000d280 	call	d28 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     75c:	00800044 	movi	r2,1
     760:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     764:	dfc00017 	ldw	ra,0(sp)
     768:	dec00104 	addi	sp,sp,4
     76c:	f800283a 	ret

00000770 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     770:	20800017 	ldw	r2,0(r4)
     774:	21c00217 	ldw	r7,8(r4)
     778:	11000a04 	addi	r4,r2,40
     77c:	00007f01 	jmpi	7f0 <altera_avalon_jtag_uart_write>

00000780 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     780:	20800017 	ldw	r2,0(r4)
     784:	21c00217 	ldw	r7,8(r4)
     788:	11000a04 	addi	r4,r2,40
     78c:	00007901 	jmpi	790 <altera_avalon_jtag_uart_read>

00000790 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
     790:	21000017 	ldw	r4,0(r4)
     794:	3890000c 	andi	r2,r7,16384

  char * ptr = buffer;
  char * end = buffer + space;
     798:	2993883a 	add	r9,r5,r6
     79c:	1010c03a 	cmpne	r8,r2,zero
     7a0:	2807883a 	mov	r3,r5
     7a4:	00000806 	br	7c8 <altera_avalon_jtag_uart_read+0x38>

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     7a8:	21800037 	ldwio	r6,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
     7ac:	30a0000c 	andi	r2,r6,32768
     7b0:	10000326 	beq	r2,zero,7c0 <altera_avalon_jtag_uart_read+0x30>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     7b4:	19800005 	stb	r6,0(r3)
     7b8:	18c00044 	addi	r3,r3,1
     7bc:	00000206 	br	7c8 <altera_avalon_jtag_uart_read+0x38>
    else if (ptr != buffer)
     7c0:	1940031e 	bne	r3,r5,7d0 <altera_avalon_jtag_uart_read+0x40>
      break;
    else if(flags & O_NONBLOCK)
     7c4:	4000081e 	bne	r8,zero,7e8 <altera_avalon_jtag_uart_read+0x58>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
     7c8:	1a7ff736 	bltu	r3,r9,7a8 <altera_avalon_jtag_uart_read+0x18>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
     7cc:	19400226 	beq	r3,r5,7d8 <altera_avalon_jtag_uart_read+0x48>
    return ptr - buffer;
     7d0:	1945c83a 	sub	r2,r3,r5
     7d4:	f800283a 	ret
  else if (flags & O_NONBLOCK)
     7d8:	3890000c 	andi	r2,r7,16384
     7dc:	1000021e 	bne	r2,zero,7e8 <altera_avalon_jtag_uart_read+0x58>
     7e0:	00bffec4 	movi	r2,-5
     7e4:	f800283a 	ret
     7e8:	00bffd44 	movi	r2,-11
    return -EWOULDBLOCK;
  else
    return -EIO;
}
     7ec:	f800283a 	ret

000007f0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
     7f0:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
     7f4:	298f883a 	add	r7,r5,r6
     7f8:	20c00104 	addi	r3,r4,4
     7fc:	00000606 	br	818 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
     800:	18800037 	ldwio	r2,0(r3)
     804:	10bfffec 	andhi	r2,r2,65535
     808:	10000326 	beq	r2,zero,818 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
     80c:	28800007 	ldb	r2,0(r5)
     810:	29400044 	addi	r5,r5,1
     814:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
     818:	29fff936 	bltu	r5,r7,800 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
     81c:	3005883a 	mov	r2,r6
     820:	f800283a 	ret

00000824 <alt_get_performance_counter_base>:
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
#endif
}
     824:	0005883a 	mov	r2,zero
     828:	f800283a 	ret

0000082c <alt_get_cpu_freq>:
 */
alt_u32 
alt_get_cpu_freq()
{
    return ALT_CPU_FREQ;
}
     82c:	0080bef4 	movhi	r2,763
     830:	10bc2004 	addi	r2,r2,-3968
     834:	f800283a 	ret

00000838 <perf_get_num_starts>:
  return perf_get_section_time (hw_base_address, 0);
}

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  return IORD(hw_base_address, ((which_section*4)+2));
     838:	280a913a 	slli	r5,r5,4
     83c:	2149883a 	add	r4,r4,r5
}
     840:	20800237 	ldwio	r2,8(r4)
     844:	f800283a 	ret

00000848 <perf_get_section_time>:
{
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;

  PERF_STOP_MEASURING(hw_base_address);
     848:	20000035 	stwio	zero,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
     84c:	280a913a 	slli	r5,r5,4
     850:	2149883a 	add	r4,r4,r5
     854:	23400037 	ldwio	r13,0(r4)
  hi = IORD(hw_base_address, ((which_section*4)+1));
     858:	23000137 	ldwio	r12,4(r4)
     85c:	0015883a 	mov	r10,zero
     860:	0013883a 	mov	r9,zero
     864:	5348b03a 	or	r4,r10,r13
     868:	624ab03a 	or	r5,r12,r9
     86c:	2005883a 	mov	r2,r4
     870:	2807883a 	mov	r3,r5

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
}
     874:	f800283a 	ret

00000878 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  return perf_get_section_time (hw_base_address, 0);
     878:	000b883a 	mov	r5,zero
     87c:	00008481 	jmpi	848 <perf_get_section_time>

00000880 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     880:	00800034 	movhi	r2,0
     884:	10862304 	addi	r2,r2,6284
     888:	10c00017 	ldw	r3,0(r2)
}
     88c:	00800034 	movhi	r2,0
     890:	1086de04 	addi	r2,r2,7032

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     894:	18000126 	beq	r3,zero,89c <alt_get_errno+0x1c>
     898:	1800683a 	jmp	r3
}
     89c:	f800283a 	ret

000008a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     8a0:	defffd04 	addi	sp,sp,-12
     8a4:	dc000015 	stw	r16,0(sp)
     8a8:	dfc00215 	stw	ra,8(sp)
     8ac:	dc400115 	stw	r17,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     8b0:	01400304 	movi	r5,12
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
     8b4:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
     8b8:	20001216 	blt	r4,zero,904 <close+0x64>
     8bc:	000146c0 	call	146c <__mulsi3>
     8c0:	00c00034 	movhi	r3,0
     8c4:	18c58604 	addi	r3,r3,5656
     8c8:	10c9883a 	add	r4,r2,r3

  if (fd)
     8cc:	20000d26 	beq	r4,zero,904 <close+0x64>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
     8d0:	20800017 	ldw	r2,0(r4)
     8d4:	10800417 	ldw	r2,16(r2)
     8d8:	10000f26 	beq	r2,zero,918 <close+0x78>
     8dc:	103ee83a 	callr	r2
     8e0:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     8e4:	8009883a 	mov	r4,r16
     8e8:	0000ccc0 	call	ccc <alt_release_fd>
    if (rval < 0)
     8ec:	0009883a 	mov	r4,zero
     8f0:	88000c0e 	bge	r17,zero,924 <close+0x84>
    {
      ALT_ERRNO = -rval;
     8f4:	00008800 	call	880 <alt_get_errno>
     8f8:	0447c83a 	sub	r3,zero,r17
     8fc:	013fffc4 	movi	r4,-1
     900:	00000306 	br	910 <close+0x70>
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
     904:	00008800 	call	880 <alt_get_errno>
     908:	013fffc4 	movi	r4,-1
     90c:	00c01444 	movi	r3,81
     910:	10c00015 	stw	r3,0(r2)
     914:	00000306 	br	924 <close+0x84>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
     918:	8009883a 	mov	r4,r16
     91c:	0000ccc0 	call	ccc <alt_release_fd>
     920:	0009883a 	mov	r4,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
     924:	2005883a 	mov	r2,r4
     928:	dfc00217 	ldw	ra,8(sp)
     92c:	dc400117 	ldw	r17,4(sp)
     930:	dc000017 	ldw	r16,0(sp)
     934:	dec00304 	addi	sp,sp,12
     938:	f800283a 	ret

0000093c <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     93c:	f800283a 	ret

00000940 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
     940:	3005883a 	mov	r2,r6
     944:	f800283a 	ret

00000948 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
     948:	deffff04 	addi	sp,sp,-4
     94c:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
     950:	20000326 	beq	r4,zero,960 <alt_dev_llist_insert+0x18>
     954:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
     958:	000d883a 	mov	r6,zero
     95c:	10000c1e 	bne	r2,zero,990 <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
     960:	00800034 	movhi	r2,0
     964:	10862304 	addi	r2,r2,6284
     968:	10800017 	ldw	r2,0(r2)
     96c:	00c00034 	movhi	r3,0
     970:	18c6de04 	addi	r3,r3,7032
     974:	10000226 	beq	r2,zero,980 <alt_dev_llist_insert+0x38>
     978:	103ee83a 	callr	r2
     97c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
     980:	00800584 	movi	r2,22
     984:	01bffa84 	movi	r6,-22
     988:	18800015 	stw	r2,0(r3)
     98c:	00000606 	br	9a8 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
     990:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
     994:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
     998:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
     99c:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
     9a0:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
     9a4:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
     9a8:	3005883a 	mov	r2,r6
     9ac:	dfc00017 	ldw	ra,0(sp)
     9b0:	dec00104 	addi	sp,sp,4
     9b4:	f800283a 	ret

000009b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
     9b8:	defffe04 	addi	sp,sp,-8
     9bc:	dc000015 	stw	r16,0(sp)
     9c0:	04000034 	movhi	r16,0
     9c4:	84056304 	addi	r16,r16,5516
     9c8:	dfc00115 	stw	ra,4(sp)
     9cc:	00000306 	br	9dc <_do_ctors+0x24>
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
        (*ctor) (); 
     9d0:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     9d4:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
     9d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
     9dc:	00800034 	movhi	r2,0
     9e0:	10856304 	addi	r2,r2,5516
     9e4:	80bffa2e 	bgeu	r16,r2,9d0 <_do_ctors+0x18>
        (*ctor) (); 
}
     9e8:	dfc00117 	ldw	ra,4(sp)
     9ec:	dc000017 	ldw	r16,0(sp)
     9f0:	dec00204 	addi	sp,sp,8
     9f4:	f800283a 	ret

000009f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
     9f8:	defffe04 	addi	sp,sp,-8
     9fc:	dc000015 	stw	r16,0(sp)
     a00:	04000034 	movhi	r16,0
     a04:	84056304 	addi	r16,r16,5516
     a08:	dfc00115 	stw	ra,4(sp)
     a0c:	00000306 	br	a1c <_do_dtors+0x24>
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
        (*dtor) (); 
     a10:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     a14:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
     a18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
     a1c:	00800034 	movhi	r2,0
     a20:	10856404 	addi	r2,r2,5520
     a24:	80bffa2e 	bgeu	r16,r2,a10 <_do_dtors+0x18>
        (*dtor) (); 
}
     a28:	dfc00117 	ldw	ra,4(sp)
     a2c:	dc000017 	ldw	r16,0(sp)
     a30:	dec00204 	addi	sp,sp,8
     a34:	f800283a 	ret

00000a38 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
     a38:	f800283a 	ret

00000a3c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
     a3c:	defffd04 	addi	sp,sp,-12
     a40:	dc400115 	stw	r17,4(sp)
     a44:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
     a48:	2809883a 	mov	r4,r5
     a4c:	300b883a 	mov	r5,r6
     a50:	380d883a 	mov	r6,r7
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
     a54:	dc000015 	stw	r16,0(sp)
     a58:	dfc00215 	stw	ra,8(sp)
  int old;

  old = open (name, flags, mode);
     a5c:	0000b500 	call	b50 <open>
     a60:	1021883a 	mov	r16,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
     a64:	1009883a 	mov	r4,r2
     a68:	01400304 	movi	r5,12
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
     a6c:	10001016 	blt	r2,zero,ab0 <alt_open_fd+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
     a70:	000146c0 	call	146c <__mulsi3>
     a74:	00c00034 	movhi	r3,0
     a78:	18c58604 	addi	r3,r3,5656
     a7c:	10c5883a 	add	r2,r2,r3
     a80:	11000017 	ldw	r4,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
     a84:	10c00217 	ldw	r3,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
     a88:	10800117 	ldw	r2,4(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
     a8c:	89000015 	stw	r4,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
     a90:	8009883a 	mov	r4,r16

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
     a94:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
     a98:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
     a9c:	dfc00217 	ldw	ra,8(sp)
     aa0:	dc400117 	ldw	r17,4(sp)
     aa4:	dc000017 	ldw	r16,0(sp)
     aa8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
     aac:	0000ccc1 	jmpi	ccc <alt_release_fd>
  }
} 
     ab0:	dfc00217 	ldw	ra,8(sp)
     ab4:	dc400117 	ldw	r17,4(sp)
     ab8:	dc000017 	ldw	r16,0(sp)
     abc:	dec00304 	addi	sp,sp,12
     ac0:	f800283a 	ret

00000ac4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     ac4:	defffa04 	addi	sp,sp,-24
     ac8:	dcc00315 	stw	r19,12(sp)
     acc:	dc400115 	stw	r17,4(sp)
     ad0:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     ad4:	04407fc4 	movi	r17,511
     ad8:	04000034 	movhi	r16,0
     adc:	84058904 	addi	r16,r16,5668
     ae0:	04c00044 	movi	r19,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     ae4:	dd000415 	stw	r20,16(sp)
     ae8:	dc800215 	stw	r18,8(sp)
     aec:	3029883a 	mov	r20,r6
     af0:	2825883a 	mov	r18,r5
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     af4:	980d883a 	mov	r6,r19
     af8:	200b883a 	mov	r5,r4
     afc:	880f883a 	mov	r7,r17
     b00:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
     b04:	dfc00515 	stw	ra,20(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
     b08:	0000a3c0 	call	a3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
     b0c:	900b883a 	mov	r5,r18
     b10:	813ffd04 	addi	r4,r16,-12
     b14:	880f883a 	mov	r7,r17
     b18:	000d883a 	mov	r6,zero
     b1c:	0000a3c0 	call	a3c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     b20:	81000304 	addi	r4,r16,12
     b24:	a00b883a 	mov	r5,r20
     b28:	980d883a 	mov	r6,r19
     b2c:	880f883a 	mov	r7,r17
}  
     b30:	dfc00517 	ldw	ra,20(sp)
     b34:	dd000417 	ldw	r20,16(sp)
     b38:	dcc00317 	ldw	r19,12(sp)
     b3c:	dc800217 	ldw	r18,8(sp)
     b40:	dc400117 	ldw	r17,4(sp)
     b44:	dc000017 	ldw	r16,0(sp)
     b48:	dec00604 	addi	sp,sp,24
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
     b4c:	0000a3c1 	jmpi	a3c <alt_open_fd>

00000b50 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     b50:	defff904 	addi	sp,sp,-28
     b54:	dd000415 	stw	r20,16(sp)
     b58:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     b5c:	01400034 	movhi	r5,0
     b60:	29462004 	addi	r5,r5,6272
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
     b64:	dd400515 	stw	r21,20(sp)
     b68:	dcc00315 	stw	r19,12(sp)
     b6c:	dc000015 	stw	r16,0(sp)
     b70:	dfc00615 	stw	ra,24(sp)
     b74:	dc800215 	stw	r18,8(sp)
     b78:	dc400115 	stw	r17,4(sp)
     b7c:	302b883a 	mov	r21,r6
     b80:	2027883a 	mov	r19,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
     b84:	0000d300 	call	d30 <alt_find_dev>
     b88:	1021883a 	mov	r16,r2
     b8c:	10000226 	beq	r2,zero,b98 <open+0x48>
     b90:	0025883a 	mov	r18,zero
     b94:	00000a06 	br	bc0 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
     b98:	9809883a 	mov	r4,r19
     b9c:	0000da00 	call	da0 <alt_find_file>
     ba0:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
     ba4:	1000051e 	bne	r2,zero,bbc <open+0x6c>
     ba8:	047fffc4 	movi	r17,-1
     bac:	043ffb44 	movi	r16,-19
     bb0:	00002b06 	br	c60 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     bb4:	043ffcc4 	movi	r16,-13
     bb8:	00002906 	br	c60 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
     bbc:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
     bc0:	8009883a 	mov	r4,r16
     bc4:	0000e3c0 	call	e3c <alt_get_fd>
     bc8:	1023883a 	mov	r17,r2
     bcc:	10003316 	blt	r2,zero,c9c <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
     bd0:	1009883a 	mov	r4,r2
     bd4:	01400304 	movi	r5,12
     bd8:	000146c0 	call	146c <__mulsi3>
     bdc:	01400034 	movhi	r5,0
     be0:	29458604 	addi	r5,r5,5656
     be4:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
     be8:	00900034 	movhi	r2,16384
     bec:	10bfffc4 	addi	r2,r2,-1
     bf0:	a086703a 	and	r3,r20,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
     bf4:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
     bf8:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
     bfc:	1000101e 	bne	r2,zero,c40 <open+0xf0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     c00:	00800034 	movhi	r2,0
     c04:	10862204 	addi	r2,r2,6280
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     c08:	21800017 	ldw	r6,0(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     c0c:	11c00017 	ldw	r7,0(r2)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
     c10:	18900034 	orhi	r2,r3,16384
     c14:	20800215 	stw	r2,8(r4)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     c18:	2807883a 	mov	r3,r5
     c1c:	000b883a 	mov	r5,zero
     c20:	18800017 	ldw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     c24:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
     c28:	1180031e 	bne	r2,r6,c38 <open+0xe8>
     c2c:	18800217 	ldw	r2,8(r3)
     c30:	1000010e 	bge	r2,zero,c38 <open+0xe8>
     c34:	193fdf1e 	bne	r3,r4,bb4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
     c38:	18c00304 	addi	r3,r3,12
     c3c:	397ff82e 	bgeu	r7,r5,c20 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
     c40:	80800317 	ldw	r2,12(r16)
     c44:	10001726 	beq	r2,zero,ca4 <open+0x154>
     c48:	980b883a 	mov	r5,r19
     c4c:	a00d883a 	mov	r6,r20
     c50:	a80f883a 	mov	r7,r21
     c54:	103ee83a 	callr	r2
     c58:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
     c5c:	1000110e 	bge	r2,zero,ca4 <open+0x154>
  {
    alt_release_fd (index);  
     c60:	8809883a 	mov	r4,r17
     c64:	0000ccc0 	call	ccc <alt_release_fd>
     c68:	00800034 	movhi	r2,0
     c6c:	10862304 	addi	r2,r2,6284
     c70:	10800017 	ldw	r2,0(r2)
     c74:	1000031e 	bne	r2,zero,c84 <open+0x134>
     c78:	00c00034 	movhi	r3,0
     c7c:	18c6de04 	addi	r3,r3,7032
     c80:	00000206 	br	c8c <open+0x13c>
     c84:	103ee83a 	callr	r2
     c88:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
     c8c:	0405c83a 	sub	r2,zero,r16
     c90:	047fffc4 	movi	r17,-1
     c94:	18800015 	stw	r2,0(r3)
     c98:	00000206 	br	ca4 <open+0x154>
     c9c:	1021883a 	mov	r16,r2
     ca0:	003fef06 	br	c60 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
     ca4:	8805883a 	mov	r2,r17
     ca8:	dfc00617 	ldw	ra,24(sp)
     cac:	dd400517 	ldw	r21,20(sp)
     cb0:	dd000417 	ldw	r20,16(sp)
     cb4:	dcc00317 	ldw	r19,12(sp)
     cb8:	dc800217 	ldw	r18,8(sp)
     cbc:	dc400117 	ldw	r17,4(sp)
     cc0:	dc000017 	ldw	r16,0(sp)
     cc4:	dec00704 	addi	sp,sp,28
     cc8:	f800283a 	ret

00000ccc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     ccc:	defffd04 	addi	sp,sp,-12
  if (fd > 2)
     cd0:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     cd4:	dc400115 	stw	r17,4(sp)
     cd8:	dc000015 	stw	r16,0(sp)
     cdc:	dfc00215 	stw	ra,8(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     ce0:	01400304 	movi	r5,12
     ce4:	04400034 	movhi	r17,0
     ce8:	8c458604 	addi	r17,r17,5656
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
     cec:	2021883a 	mov	r16,r4
  if (fd > 2)
     cf0:	1100080e 	bge	r2,r4,d14 <alt_release_fd+0x48>
  {
    alt_fd_list[fd].fd_flags = 0;
     cf4:	000146c0 	call	146c <__mulsi3>
     cf8:	1445883a 	add	r2,r2,r17
    alt_fd_list[fd].dev      = 0;
     cfc:	8009883a 	mov	r4,r16
     d00:	01400304 	movi	r5,12

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
     d04:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
     d08:	000146c0 	call	146c <__mulsi3>
     d0c:	1445883a 	add	r2,r2,r17
     d10:	10000015 	stw	zero,0(r2)
  }
}
     d14:	dfc00217 	ldw	ra,8(sp)
     d18:	dc400117 	ldw	r17,4(sp)
     d1c:	dc000017 	ldw	r16,0(sp)
     d20:	dec00304 	addi	sp,sp,12
     d24:	f800283a 	ret

00000d28 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
     d28:	000170fa 	wrctl	ienable,zero
}
     d2c:	f800283a 	ret

00000d30 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     d30:	defffb04 	addi	sp,sp,-20
     d34:	dcc00315 	stw	r19,12(sp)
     d38:	dc800215 	stw	r18,8(sp)
     d3c:	dc400115 	stw	r17,4(sp)
     d40:	dc000015 	stw	r16,0(sp)
     d44:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
     d48:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
     d4c:	2823883a 	mov	r17,r5
     d50:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
     d54:	0000fec0 	call	fec <strlen>
     d58:	14800044 	addi	r18,r2,1
     d5c:	00000406 	br	d70 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
     d60:	81000217 	ldw	r4,8(r16)
     d64:	0000ecc0 	call	ecc <memcmp>
     d68:	10000526 	beq	r2,zero,d80 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
     d6c:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
     d70:	980b883a 	mov	r5,r19
     d74:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
     d78:	847ff91e 	bne	r16,r17,d60 <alt_find_dev+0x30>
     d7c:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
     d80:	8005883a 	mov	r2,r16
     d84:	dfc00417 	ldw	ra,16(sp)
     d88:	dcc00317 	ldw	r19,12(sp)
     d8c:	dc800217 	ldw	r18,8(sp)
     d90:	dc400117 	ldw	r17,4(sp)
     d94:	dc000017 	ldw	r16,0(sp)
     d98:	dec00504 	addi	sp,sp,20
     d9c:	f800283a 	ret

00000da0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
     da0:	defffc04 	addi	sp,sp,-16
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
     da4:	00800034 	movhi	r2,0
     da8:	10861e04 	addi	r2,r2,6264
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
     dac:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
     db0:	14400017 	ldw	r17,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
     db4:	dc800215 	stw	r18,8(sp)
     db8:	2025883a 	mov	r18,r4
     dbc:	dfc00315 	stw	ra,12(sp)
     dc0:	dc000015 	stw	r16,0(sp)
     dc4:	00001206 	br	e10 <alt_find_file+0x70>
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
     dc8:	8c000217 	ldw	r16,8(r17)
     dcc:	8009883a 	mov	r4,r16
     dd0:	0000fec0 	call	fec <strlen>
     dd4:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
     dd8:	8085883a 	add	r2,r16,r2
     ddc:	10bfffc7 	ldb	r2,-1(r2)
     de0:	00c00bc4 	movi	r3,47
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
     de4:	8009883a 	mov	r4,r16
     de8:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
     dec:	10c0011e 	bne	r2,r3,df4 <alt_find_file+0x54>
    {
      len -= 1;
     df0:	31bfffc4 	addi	r6,r6,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
     df4:	9185883a 	add	r2,r18,r6
     df8:	10800007 	ldb	r2,0(r2)
     dfc:	10c00126 	beq	r2,r3,e04 <alt_find_file+0x64>
     e00:	1000021e 	bne	r2,zero,e0c <alt_find_file+0x6c>
     e04:	0000ecc0 	call	ecc <memcmp>
     e08:	10000526 	beq	r2,zero,e20 <alt_find_file+0x80>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
     e0c:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
     e10:	00800034 	movhi	r2,0
     e14:	10861e04 	addi	r2,r2,6264
     e18:	88bfeb1e 	bne	r17,r2,dc8 <alt_find_file+0x28>
     e1c:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
     e20:	8805883a 	mov	r2,r17
     e24:	dfc00317 	ldw	ra,12(sp)
     e28:	dc800217 	ldw	r18,8(sp)
     e2c:	dc400117 	ldw	r17,4(sp)
     e30:	dc000017 	ldw	r16,0(sp)
     e34:	dec00404 	addi	sp,sp,16
     e38:	f800283a 	ret

00000e3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
     e3c:	01400034 	movhi	r5,0
     e40:	29458604 	addi	r5,r5,5656
     e44:	0007883a 	mov	r3,zero
     e48:	280d883a 	mov	r6,r5
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
     e4c:	28800017 	ldw	r2,0(r5)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
     e50:	29400304 	addi	r5,r5,12
  {
    if (!alt_fd_list[i].dev)
     e54:	10000a1e 	bne	r2,zero,e80 <alt_get_fd+0x44>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
     e58:	01400034 	movhi	r5,0
     e5c:	29462204 	addi	r5,r5,6280
     e60:	28800017 	ldw	r2,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
     e64:	31000015 	stw	r4,0(r6)
      if (i > alt_max_fd)
     e68:	10c00216 	blt	r2,r3,e74 <alt_get_fd+0x38>
     e6c:	1805883a 	mov	r2,r3
     e70:	f800283a 	ret
      {
        alt_max_fd = i;
     e74:	1805883a 	mov	r2,r3
     e78:	28c00015 	stw	r3,0(r5)
     e7c:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
     e80:	18c00044 	addi	r3,r3,1
     e84:	00800804 	movi	r2,32
     e88:	31800304 	addi	r6,r6,12
     e8c:	18bfef1e 	bne	r3,r2,e4c <alt_get_fd+0x10>
     e90:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
     e94:	f800283a 	ret

00000e98 <atexit>:
     e98:	200b883a 	mov	r5,r4
     e9c:	000d883a 	mov	r6,zero
     ea0:	0009883a 	mov	r4,zero
     ea4:	000f883a 	mov	r7,zero
     ea8:	000100c1 	jmpi	100c <__register_exitproc>

00000eac <exit>:
     eac:	defffe04 	addi	sp,sp,-8
     eb0:	dc400015 	stw	r17,0(sp)
     eb4:	000b883a 	mov	r5,zero
     eb8:	2023883a 	mov	r17,r4
     ebc:	dfc00115 	stw	ra,4(sp)
     ec0:	000117c0 	call	117c <__call_exitprocs>
     ec4:	8809883a 	mov	r4,r17
     ec8:	00014a40 	call	14a4 <_exit>

00000ecc <memcmp>:
     ecc:	31ffffc4 	addi	r7,r6,-1
     ed0:	3000061e 	bne	r6,zero,eec <memcmp+0x20>
     ed4:	00000a06 	br	f00 <memcmp+0x34>
     ed8:	39ffffc4 	addi	r7,r7,-1
     edc:	00bfffc4 	movi	r2,-1
     ee0:	21000044 	addi	r4,r4,1
     ee4:	29400044 	addi	r5,r5,1
     ee8:	38800526 	beq	r7,r2,f00 <memcmp+0x34>
     eec:	20c00003 	ldbu	r3,0(r4)
     ef0:	28800003 	ldbu	r2,0(r5)
     ef4:	18bff826 	beq	r3,r2,ed8 <memcmp+0xc>
     ef8:	1885c83a 	sub	r2,r3,r2
     efc:	f800283a 	ret
     f00:	0005883a 	mov	r2,zero
     f04:	f800283a 	ret

00000f08 <putc>:
     f08:	defffd04 	addi	sp,sp,-12
     f0c:	00800034 	movhi	r2,0
     f10:	10862404 	addi	r2,r2,6288
     f14:	dc000115 	stw	r16,4(sp)
     f18:	2021883a 	mov	r16,r4
     f1c:	11000017 	ldw	r4,0(r2)
     f20:	dc000005 	stb	r16,0(sp)
     f24:	00800034 	movhi	r2,0
     f28:	1084ce04 	addi	r2,r2,4920
     f2c:	dfc00215 	stw	ra,8(sp)
     f30:	28800115 	stw	r2,4(r5)
     f34:	d80d883a 	mov	r6,sp
     f38:	01c00044 	movi	r7,1
     f3c:	103ee83a 	callr	r2
     f40:	1007883a 	mov	r3,r2
     f44:	00bfffc4 	movi	r2,-1
     f48:	18800526 	beq	r3,r2,f60 <putc+0x58>
     f4c:	8005883a 	mov	r2,r16
     f50:	dfc00217 	ldw	ra,8(sp)
     f54:	dc000117 	ldw	r16,4(sp)
     f58:	dec00304 	addi	sp,sp,12
     f5c:	f800283a 	ret
     f60:	1821883a 	mov	r16,r3
     f64:	8005883a 	mov	r2,r16
     f68:	dfc00217 	ldw	ra,8(sp)
     f6c:	dc000117 	ldw	r16,4(sp)
     f70:	dec00304 	addi	sp,sp,12
     f74:	f800283a 	ret

00000f78 <_putc_r>:
     f78:	00800034 	movhi	r2,0
     f7c:	10862404 	addi	r2,r2,6288
     f80:	defffd04 	addi	sp,sp,-12
     f84:	11000017 	ldw	r4,0(r2)
     f88:	00800034 	movhi	r2,0
     f8c:	1084ce04 	addi	r2,r2,4920
     f90:	30800115 	stw	r2,4(r6)
     f94:	dc000115 	stw	r16,4(sp)
     f98:	2821883a 	mov	r16,r5
     f9c:	dfc00215 	stw	ra,8(sp)
     fa0:	300b883a 	mov	r5,r6
     fa4:	01c00044 	movi	r7,1
     fa8:	d80d883a 	mov	r6,sp
     fac:	dc000005 	stb	r16,0(sp)
     fb0:	103ee83a 	callr	r2
     fb4:	1007883a 	mov	r3,r2
     fb8:	00bfffc4 	movi	r2,-1
     fbc:	18800526 	beq	r3,r2,fd4 <_putc_r+0x5c>
     fc0:	8005883a 	mov	r2,r16
     fc4:	dfc00217 	ldw	ra,8(sp)
     fc8:	dc000117 	ldw	r16,4(sp)
     fcc:	dec00304 	addi	sp,sp,12
     fd0:	f800283a 	ret
     fd4:	1821883a 	mov	r16,r3
     fd8:	8005883a 	mov	r2,r16
     fdc:	dfc00217 	ldw	ra,8(sp)
     fe0:	dc000117 	ldw	r16,4(sp)
     fe4:	dec00304 	addi	sp,sp,12
     fe8:	f800283a 	ret

00000fec <strlen>:
     fec:	20800007 	ldb	r2,0(r4)
     ff0:	10000526 	beq	r2,zero,1008 <strlen+0x1c>
     ff4:	2007883a 	mov	r3,r4
     ff8:	18c00044 	addi	r3,r3,1
     ffc:	18800007 	ldb	r2,0(r3)
    1000:	103ffd1e 	bne	r2,zero,ff8 <strlen+0xc>
    1004:	1905c83a 	sub	r2,r3,r4
    1008:	f800283a 	ret

0000100c <__register_exitproc>:
    100c:	defff904 	addi	sp,sp,-28
    1010:	00800034 	movhi	r2,0
    1014:	10862504 	addi	r2,r2,6292
    1018:	dc400115 	stw	r17,4(sp)
    101c:	14400017 	ldw	r17,0(r2)
    1020:	dc000015 	stw	r16,0(sp)
    1024:	dd400515 	stw	r21,20(sp)
    1028:	8c000c17 	ldw	r16,48(r17)
    102c:	dd000415 	stw	r20,16(sp)
    1030:	dcc00315 	stw	r19,12(sp)
    1034:	dc800215 	stw	r18,8(sp)
    1038:	dfc00615 	stw	ra,24(sp)
    103c:	2025883a 	mov	r18,r4
    1040:	282b883a 	mov	r21,r5
    1044:	3029883a 	mov	r20,r6
    1048:	3827883a 	mov	r19,r7
    104c:	80002626 	beq	r16,zero,10e8 <__register_exitproc+0xdc>
    1050:	81400117 	ldw	r5,4(r16)
    1054:	008007c4 	movi	r2,31
    1058:	11403716 	blt	r2,r5,1138 <__register_exitproc+0x12c>
    105c:	90002026 	beq	r18,zero,10e0 <__register_exitproc+0xd4>
    1060:	81802217 	ldw	r6,136(r16)
    1064:	30002926 	beq	r6,zero,110c <__register_exitproc+0x100>
    1068:	81400117 	ldw	r5,4(r16)
    106c:	00c00044 	movi	r3,1
    1070:	31004017 	ldw	r4,256(r6)
    1074:	1946983a 	sll	r3,r3,r5
    1078:	2945883a 	add	r2,r5,r5
    107c:	1085883a 	add	r2,r2,r2
    1080:	1185883a 	add	r2,r2,r6
    1084:	20c8b03a 	or	r4,r4,r3
    1088:	14c02015 	stw	r19,128(r2)
    108c:	15000015 	stw	r20,0(r2)
    1090:	00800084 	movi	r2,2
    1094:	31004015 	stw	r4,256(r6)
    1098:	90801826 	beq	r18,r2,10fc <__register_exitproc+0xf0>
    109c:	2945883a 	add	r2,r5,r5
    10a0:	1085883a 	add	r2,r2,r2
    10a4:	1405883a 	add	r2,r2,r16
    10a8:	28c00044 	addi	r3,r5,1
    10ac:	0009883a 	mov	r4,zero
    10b0:	15400215 	stw	r21,8(r2)
    10b4:	80c00115 	stw	r3,4(r16)
    10b8:	2005883a 	mov	r2,r4
    10bc:	dfc00617 	ldw	ra,24(sp)
    10c0:	dd400517 	ldw	r21,20(sp)
    10c4:	dd000417 	ldw	r20,16(sp)
    10c8:	dcc00317 	ldw	r19,12(sp)
    10cc:	dc800217 	ldw	r18,8(sp)
    10d0:	dc400117 	ldw	r17,4(sp)
    10d4:	dc000017 	ldw	r16,0(sp)
    10d8:	dec00704 	addi	sp,sp,28
    10dc:	f800283a 	ret
    10e0:	81400117 	ldw	r5,4(r16)
    10e4:	003fed06 	br	109c <__register_exitproc+0x90>
    10e8:	00800034 	movhi	r2,0
    10ec:	108adf04 	addi	r2,r2,11132
    10f0:	1021883a 	mov	r16,r2
    10f4:	88800c15 	stw	r2,48(r17)
    10f8:	003fd506 	br	1050 <__register_exitproc+0x44>
    10fc:	30804117 	ldw	r2,260(r6)
    1100:	10c4b03a 	or	r2,r2,r3
    1104:	30804115 	stw	r2,260(r6)
    1108:	003fe406 	br	109c <__register_exitproc+0x90>
    110c:	00800034 	movhi	r2,0
    1110:	10800004 	addi	r2,r2,0
    1114:	10000b26 	beq	r2,zero,1144 <__register_exitproc+0x138>
    1118:	01004204 	movi	r4,264
    111c:	103ee83a 	callr	r2
    1120:	10000826 	beq	r2,zero,1144 <__register_exitproc+0x138>
    1124:	100d883a 	mov	r6,r2
    1128:	10004015 	stw	zero,256(r2)
    112c:	10004115 	stw	zero,260(r2)
    1130:	80802215 	stw	r2,136(r16)
    1134:	003fcc06 	br	1068 <__register_exitproc+0x5c>
    1138:	00800034 	movhi	r2,0
    113c:	10800004 	addi	r2,r2,0
    1140:	1000021e 	bne	r2,zero,114c <__register_exitproc+0x140>
    1144:	013fffc4 	movi	r4,-1
    1148:	003fdb06 	br	10b8 <__register_exitproc+0xac>
    114c:	01002304 	movi	r4,140
    1150:	103ee83a 	callr	r2
    1154:	1007883a 	mov	r3,r2
    1158:	103ffa26 	beq	r2,zero,1144 <__register_exitproc+0x138>
    115c:	88800c17 	ldw	r2,48(r17)
    1160:	1821883a 	mov	r16,r3
    1164:	18000115 	stw	zero,4(r3)
    1168:	18800015 	stw	r2,0(r3)
    116c:	88c00c15 	stw	r3,48(r17)
    1170:	903fdb26 	beq	r18,zero,10e0 <__register_exitproc+0xd4>
    1174:	003fba06 	br	1060 <__register_exitproc+0x54>

00001178 <register_fini>:
    1178:	f800283a 	ret

0000117c <__call_exitprocs>:
    117c:	defff304 	addi	sp,sp,-52
    1180:	00800034 	movhi	r2,0
    1184:	10862504 	addi	r2,r2,6292
    1188:	df000b15 	stw	fp,44(sp)
    118c:	17000017 	ldw	fp,0(r2)
    1190:	00800034 	movhi	r2,0
    1194:	10800004 	addi	r2,r2,0
    1198:	1005003a 	cmpeq	r2,r2,zero
    119c:	d8800215 	stw	r2,8(sp)
    11a0:	e0800c04 	addi	r2,fp,48
    11a4:	dd800915 	stw	r22,36(sp)
    11a8:	dd400815 	stw	r21,32(sp)
    11ac:	dfc00c15 	stw	ra,48(sp)
    11b0:	ddc00a15 	stw	r23,40(sp)
    11b4:	dd000715 	stw	r20,28(sp)
    11b8:	dcc00615 	stw	r19,24(sp)
    11bc:	dc800515 	stw	r18,20(sp)
    11c0:	dc400415 	stw	r17,16(sp)
    11c4:	dc000315 	stw	r16,12(sp)
    11c8:	282d883a 	mov	r22,r5
    11cc:	d9000115 	stw	r4,4(sp)
    11d0:	d8800015 	stw	r2,0(sp)
    11d4:	282b003a 	cmpeq	r21,r5,zero
    11d8:	e4400c17 	ldw	r17,48(fp)
    11dc:	88001226 	beq	r17,zero,1228 <__call_exitprocs+0xac>
    11e0:	ddc00017 	ldw	r23,0(sp)
    11e4:	88800117 	ldw	r2,4(r17)
    11e8:	8c802217 	ldw	r18,136(r17)
    11ec:	143fffc4 	addi	r16,r2,-1
    11f0:	80000b16 	blt	r16,zero,1220 <__call_exitprocs+0xa4>
    11f4:	9027003a 	cmpeq	r19,r18,zero
    11f8:	a800171e 	bne	r21,zero,1258 <__call_exitprocs+0xdc>
    11fc:	9800051e 	bne	r19,zero,1214 <__call_exitprocs+0x98>
    1200:	8409883a 	add	r4,r16,r16
    1204:	2105883a 	add	r2,r4,r4
    1208:	1485883a 	add	r2,r2,r18
    120c:	10c02017 	ldw	r3,128(r2)
    1210:	b0c01226 	beq	r22,r3,125c <__call_exitprocs+0xe0>
    1214:	843fffc4 	addi	r16,r16,-1
    1218:	00bfffc4 	movi	r2,-1
    121c:	80bff61e 	bne	r16,r2,11f8 <__call_exitprocs+0x7c>
    1220:	d8800217 	ldw	r2,8(sp)
    1224:	10003226 	beq	r2,zero,12f0 <__call_exitprocs+0x174>
    1228:	dfc00c17 	ldw	ra,48(sp)
    122c:	df000b17 	ldw	fp,44(sp)
    1230:	ddc00a17 	ldw	r23,40(sp)
    1234:	dd800917 	ldw	r22,36(sp)
    1238:	dd400817 	ldw	r21,32(sp)
    123c:	dd000717 	ldw	r20,28(sp)
    1240:	dcc00617 	ldw	r19,24(sp)
    1244:	dc800517 	ldw	r18,20(sp)
    1248:	dc400417 	ldw	r17,16(sp)
    124c:	dc000317 	ldw	r16,12(sp)
    1250:	dec00d04 	addi	sp,sp,52
    1254:	f800283a 	ret
    1258:	8409883a 	add	r4,r16,r16
    125c:	88c00117 	ldw	r3,4(r17)
    1260:	2105883a 	add	r2,r4,r4
    1264:	1445883a 	add	r2,r2,r17
    1268:	18ffffc4 	addi	r3,r3,-1
    126c:	11800217 	ldw	r6,8(r2)
    1270:	1c001826 	beq	r3,r16,12d4 <__call_exitprocs+0x158>
    1274:	10000215 	stw	zero,8(r2)
    1278:	303fe626 	beq	r6,zero,1214 <__call_exitprocs+0x98>
    127c:	8d000117 	ldw	r20,4(r17)
    1280:	9800121e 	bne	r19,zero,12cc <__call_exitprocs+0x150>
    1284:	00c00044 	movi	r3,1
    1288:	1c06983a 	sll	r3,r3,r16
    128c:	90804017 	ldw	r2,256(r18)
    1290:	1884703a 	and	r2,r3,r2
    1294:	10000d26 	beq	r2,zero,12cc <__call_exitprocs+0x150>
    1298:	90804117 	ldw	r2,260(r18)
    129c:	1884703a 	and	r2,r3,r2
    12a0:	10000e1e 	bne	r2,zero,12dc <__call_exitprocs+0x160>
    12a4:	2105883a 	add	r2,r4,r4
    12a8:	1485883a 	add	r2,r2,r18
    12ac:	11400017 	ldw	r5,0(r2)
    12b0:	d9000117 	ldw	r4,4(sp)
    12b4:	303ee83a 	callr	r6
    12b8:	88800117 	ldw	r2,4(r17)
    12bc:	a0bfc61e 	bne	r20,r2,11d8 <__call_exitprocs+0x5c>
    12c0:	b8800017 	ldw	r2,0(r23)
    12c4:	147fd326 	beq	r2,r17,1214 <__call_exitprocs+0x98>
    12c8:	003fc306 	br	11d8 <__call_exitprocs+0x5c>
    12cc:	303ee83a 	callr	r6
    12d0:	003ff906 	br	12b8 <__call_exitprocs+0x13c>
    12d4:	8c000115 	stw	r16,4(r17)
    12d8:	003fe706 	br	1278 <__call_exitprocs+0xfc>
    12dc:	2105883a 	add	r2,r4,r4
    12e0:	1485883a 	add	r2,r2,r18
    12e4:	11000017 	ldw	r4,0(r2)
    12e8:	303ee83a 	callr	r6
    12ec:	003ff206 	br	12b8 <__call_exitprocs+0x13c>
    12f0:	88800117 	ldw	r2,4(r17)
    12f4:	10000b1e 	bne	r2,zero,1324 <__call_exitprocs+0x1a8>
    12f8:	89000017 	ldw	r4,0(r17)
    12fc:	20000a26 	beq	r4,zero,1328 <__call_exitprocs+0x1ac>
    1300:	b9000015 	stw	r4,0(r23)
    1304:	90000226 	beq	r18,zero,1310 <__call_exitprocs+0x194>
    1308:	9009883a 	mov	r4,r18
    130c:	00000000 	call	0 <_start>
    1310:	8809883a 	mov	r4,r17
    1314:	00000000 	call	0 <_start>
    1318:	bc400017 	ldw	r17,0(r23)
    131c:	883fb11e 	bne	r17,zero,11e4 <__call_exitprocs+0x68>
    1320:	003fc106 	br	1228 <__call_exitprocs+0xac>
    1324:	89000017 	ldw	r4,0(r17)
    1328:	882f883a 	mov	r23,r17
    132c:	2023883a 	mov	r17,r4
    1330:	883fac1e 	bne	r17,zero,11e4 <__call_exitprocs+0x68>
    1334:	003fbc06 	br	1228 <__call_exitprocs+0xac>

00001338 <__sfvwrite_small_dev>:
    1338:	2880000b 	ldhu	r2,0(r5)
    133c:	defffa04 	addi	sp,sp,-24
    1340:	dcc00315 	stw	r19,12(sp)
    1344:	1080020c 	andi	r2,r2,8
    1348:	dc800215 	stw	r18,8(sp)
    134c:	dc400115 	stw	r17,4(sp)
    1350:	dfc00515 	stw	ra,20(sp)
    1354:	dd000415 	stw	r20,16(sp)
    1358:	dc000015 	stw	r16,0(sp)
    135c:	2825883a 	mov	r18,r5
    1360:	2027883a 	mov	r19,r4
    1364:	3023883a 	mov	r17,r6
    1368:	10002026 	beq	r2,zero,13ec <__sfvwrite_small_dev+0xb4>
    136c:	2940008f 	ldh	r5,2(r5)
    1370:	28000f16 	blt	r5,zero,13b0 <__sfvwrite_small_dev+0x78>
    1374:	01c01b0e 	bge	zero,r7,13e4 <__sfvwrite_small_dev+0xac>
    1378:	3821883a 	mov	r16,r7
    137c:	05010004 	movi	r20,1024
    1380:	00000206 	br	138c <__sfvwrite_small_dev+0x54>
    1384:	0400170e 	bge	zero,r16,13e4 <__sfvwrite_small_dev+0xac>
    1388:	9140008f 	ldh	r5,2(r18)
    138c:	880d883a 	mov	r6,r17
    1390:	9809883a 	mov	r4,r19
    1394:	800f883a 	mov	r7,r16
    1398:	a400010e 	bge	r20,r16,13a0 <__sfvwrite_small_dev+0x68>
    139c:	01c10004 	movi	r7,1024
    13a0:	00013f40 	call	13f4 <_write_r>
    13a4:	88a3883a 	add	r17,r17,r2
    13a8:	80a1c83a 	sub	r16,r16,r2
    13ac:	00bff516 	blt	zero,r2,1384 <__sfvwrite_small_dev+0x4c>
    13b0:	9080000b 	ldhu	r2,0(r18)
    13b4:	00ffffc4 	movi	r3,-1
    13b8:	10801014 	ori	r2,r2,64
    13bc:	9080000d 	sth	r2,0(r18)
    13c0:	1805883a 	mov	r2,r3
    13c4:	dfc00517 	ldw	ra,20(sp)
    13c8:	dd000417 	ldw	r20,16(sp)
    13cc:	dcc00317 	ldw	r19,12(sp)
    13d0:	dc800217 	ldw	r18,8(sp)
    13d4:	dc400117 	ldw	r17,4(sp)
    13d8:	dc000017 	ldw	r16,0(sp)
    13dc:	dec00604 	addi	sp,sp,24
    13e0:	f800283a 	ret
    13e4:	0007883a 	mov	r3,zero
    13e8:	003ff506 	br	13c0 <__sfvwrite_small_dev+0x88>
    13ec:	00ffffc4 	movi	r3,-1
    13f0:	003ff306 	br	13c0 <__sfvwrite_small_dev+0x88>

000013f4 <_write_r>:
    13f4:	defffd04 	addi	sp,sp,-12
    13f8:	dc000015 	stw	r16,0(sp)
    13fc:	04000034 	movhi	r16,0
    1400:	8406de04 	addi	r16,r16,7032
    1404:	dc400115 	stw	r17,4(sp)
    1408:	80000015 	stw	zero,0(r16)
    140c:	2023883a 	mov	r17,r4
    1410:	2809883a 	mov	r4,r5
    1414:	300b883a 	mov	r5,r6
    1418:	380d883a 	mov	r6,r7
    141c:	dfc00215 	stw	ra,8(sp)
    1420:	00014d80 	call	14d8 <write>
    1424:	1007883a 	mov	r3,r2
    1428:	00bfffc4 	movi	r2,-1
    142c:	18800626 	beq	r3,r2,1448 <_write_r+0x54>
    1430:	1805883a 	mov	r2,r3
    1434:	dfc00217 	ldw	ra,8(sp)
    1438:	dc400117 	ldw	r17,4(sp)
    143c:	dc000017 	ldw	r16,0(sp)
    1440:	dec00304 	addi	sp,sp,12
    1444:	f800283a 	ret
    1448:	80800017 	ldw	r2,0(r16)
    144c:	103ff826 	beq	r2,zero,1430 <_write_r+0x3c>
    1450:	88800015 	stw	r2,0(r17)
    1454:	1805883a 	mov	r2,r3
    1458:	dfc00217 	ldw	ra,8(sp)
    145c:	dc400117 	ldw	r17,4(sp)
    1460:	dc000017 	ldw	r16,0(sp)
    1464:	dec00304 	addi	sp,sp,12
    1468:	f800283a 	ret

0000146c <__mulsi3>:
    146c:	20000a26 	beq	r4,zero,1498 <__mulsi3+0x2c>
    1470:	0007883a 	mov	r3,zero
    1474:	2080004c 	andi	r2,r4,1
    1478:	1005003a 	cmpeq	r2,r2,zero
    147c:	2008d07a 	srli	r4,r4,1
    1480:	1000011e 	bne	r2,zero,1488 <__mulsi3+0x1c>
    1484:	1947883a 	add	r3,r3,r5
    1488:	294b883a 	add	r5,r5,r5
    148c:	203ff91e 	bne	r4,zero,1474 <__mulsi3+0x8>
    1490:	1805883a 	mov	r2,r3
    1494:	f800283a 	ret
    1498:	0007883a 	mov	r3,zero
    149c:	1805883a 	mov	r2,r3
    14a0:	f800283a 	ret

000014a4 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    14a4:	20000226 	beq	r4,zero,14b0 <_exit+0xc>
    ALT_SIM_FAIL();
    14a8:	002af070 	cmpltui	zero,zero,43969
    14ac:	00000106 	br	14b4 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    14b0:	002af0b0 	cmpltui	zero,zero,43970
    14b4:	003fff06 	br	14b4 <_exit+0x10>

000014b8 <alt_get_errno>:
    14b8:	00800034 	movhi	r2,0
    14bc:	10862304 	addi	r2,r2,6284
    14c0:	10c00017 	ldw	r3,0(r2)
}
    14c4:	00800034 	movhi	r2,0
    14c8:	1086de04 	addi	r2,r2,7032

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    14cc:	18000126 	beq	r3,zero,14d4 <alt_get_errno+0x1c>
    14d0:	1800683a 	jmp	r3
}
    14d4:	f800283a 	ret

000014d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    14d8:	defffc04 	addi	sp,sp,-16
    14dc:	dc800215 	stw	r18,8(sp)
    14e0:	dc400115 	stw	r17,4(sp)
    14e4:	dfc00315 	stw	ra,12(sp)
    14e8:	2823883a 	mov	r17,r5
    14ec:	dc000015 	stw	r16,0(sp)
    14f0:	3025883a 	mov	r18,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    14f4:	01400304 	movi	r5,12
    14f8:	20001916 	blt	r4,zero,1560 <write+0x88>
    14fc:	000146c0 	call	146c <__mulsi3>
    1500:	00c00034 	movhi	r3,0
    1504:	18c58604 	addi	r3,r3,5656
    1508:	10c9883a 	add	r4,r2,r3
  
  if (fd)
    150c:	20001426 	beq	r4,zero,1560 <write+0x88>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1510:	20800217 	ldw	r2,8(r4)
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    1514:	043fffc4 	movi	r16,-1
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    1518:	108000cc 	andi	r2,r2,3
    151c:	10000c26 	beq	r2,zero,1550 <write+0x78>
    1520:	20800017 	ldw	r2,0(r4)
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    1524:	880b883a 	mov	r5,r17
    1528:	900d883a 	mov	r6,r18
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    152c:	10800617 	ldw	r2,24(r2)
    1530:	10000726 	beq	r2,zero,1550 <write+0x78>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    1534:	103ee83a 	callr	r2
    1538:	1021883a 	mov	r16,r2
    153c:	10000c0e 	bge	r2,zero,1570 <write+0x98>
      {
        ALT_ERRNO = -rval;
    1540:	00014b80 	call	14b8 <alt_get_errno>
    1544:	0407c83a 	sub	r3,zero,r16
    1548:	043fffc4 	movi	r16,-1
    154c:	00000206 	br	1558 <write+0x80>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    1550:	00014b80 	call	14b8 <alt_get_errno>
    1554:	00c00344 	movi	r3,13
    1558:	10c00015 	stw	r3,0(r2)
    155c:	00000406 	br	1570 <write+0x98>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    1560:	00014b80 	call	14b8 <alt_get_errno>
    1564:	00c01444 	movi	r3,81
    1568:	10c00015 	stw	r3,0(r2)
    156c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
    1570:	8005883a 	mov	r2,r16
    1574:	dfc00317 	ldw	ra,12(sp)
    1578:	dc800217 	ldw	r18,8(sp)
    157c:	dc400117 	ldw	r17,4(sp)
    1580:	dc000017 	ldw	r16,0(sp)
    1584:	dec00404 	addi	sp,sp,16
    1588:	f800283a 	ret
    158c:	00001178 	rdprs	zero,zero,69
