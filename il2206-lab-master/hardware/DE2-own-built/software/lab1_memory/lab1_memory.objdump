
lab1_memory.elf:     file format elf32-littlenios2
lab1_memory.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800020

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000004dc memsz 0x000004dc flags r-x
    LOAD off    0x000014fc vaddr 0x008004fc paddr 0x00800500 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001504 vaddr 0x00800504 paddr 0x00800504 align 2**12
         filesz 0x00000000 memsz 0x0000100c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000004d4  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  008004f4  008004f4  000014f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  008004fc  00800500  000014fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000100c  00800504  00800504  00001504  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c8  00000000  00000000  00001528  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000029a  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000db5  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000784  00000000  00000000  0000273f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001aeb  00000000  00000000  00002ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000248  00000000  00000000  000049b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000782  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000036c  00000000  00000000  0000537a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  000056e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  000056f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00006679  2**0
                  CONTENTS, READONLY
 17 .cpu          00000019  00000000  00000000  0000667c  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00006695  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00006696  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00006697  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0000669b  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0000669f  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000066a3  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000066ae  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000066b9  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000019  00000000  00000000  000066c4  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000051  00000000  00000000  000066dd  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000712d3  00000000  00000000  0000672e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .text	00000000 .text
008004f4 l    d  .rodata	00000000 .rodata
008004fc l    d  .rwdata	00000000 .rwdata
00800504 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
008001d4 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00800260 g     F .text	0000002c alt_main
00800500 g       *ABS*	00000000 __flash_rwdata_start
00000000 g       *ABS*	00000000 __alt_mem_sram
00800490 g     F .text	0000000c alt_get_cpu_freq
00800000 g     F .entry	0000000c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00800508 g     O .bss	00000004 alt_argv
008084fc g       *ABS*	00000000 _gp
008001a8 g     F .text	0000002c memcpy
0080049c g     F .text	00000010 perf_get_num_starts
00801510 g       *ABS*	00000000 __bss_end
008004e4 g     F .text	00000004 alt_dcache_flush_all
00800500 g       *ABS*	00000000 __ram_rwdata_end
01008000 g       *ABS*	00000000 __alt_mem_onchip_memory
008004fc g       *ABS*	00000000 __ram_rodata_end
008004fc g     O .rwdata	00000004 jtag_uart_0
00801510 g       *ABS*	00000000 end
01000000 g       *ABS*	00000000 __alt_stack_pointer
00800454 g     F .text	00000034 altera_avalon_jtag_uart_write
0080028c g     F .text	00000144 alt_printf
00800020 g     F .text	0000003c _start
00800420 g     F .text	00000014 alt_sys_init
00800170 g     F .text	00000038 __mulsi3
008004fc g       *ABS*	00000000 __ram_rwdata_start
008004f4 g       *ABS*	00000000 __ram_rodata_start
008004ac g     F .text	00000030 perf_get_section_time
00801510 g       *ABS*	00000000 __alt_stack_base
008004dc g     F .text	00000008 perf_get_total_time
00800504 g       *ABS*	00000000 __bss_start
0080005c g     F .text	00000114 main
0080050c g     O .bss	00000004 alt_envp
00800510 g     O .bss	00001000 y
008004f4 g       *ABS*	00000000 __flash_rodata_start
00800434 g     F .text	00000020 alt_irq_init
00800504 g     O .bss	00000004 alt_argc
00800020 g       *ABS*	00000000 __ram_exceptions_start
00800500 g       *ABS*	00000000 _edata
00801510 g       *ABS*	00000000 _end
00800020 g       *ABS*	00000000 __ram_exceptions_end
00800488 g     F .text	00000008 alt_get_performance_counter_base
008004ec g     F .text	00000008 altera_nios2_qsys_irq_init
0080000c g       .entry	00000000 exit
01000000 g       *ABS*	00000000 __alt_data_end
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080000c g       .entry	00000000 _exit
008003d0 g     F .text	00000050 alt_putchar
008004e8 g     F .text	00000004 alt_icache_flush_all
008001f4 g     F .text	0000006c alt_load



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08400814 	ori	at,at,32
    jmp r1
  800008:	0800683a 	jmp	at

0080000c <_exit>:
	...

Disassembly of section .text:

00800020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800020:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800028:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  80002c:	d6a13f14 	ori	gp,gp,34044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800030:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800034:	10814114 	ori	r2,r2,1284

    movhi r3, %hi(__bss_end)
  800038:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  80003c:	18c54414 	ori	r3,r3,5392

    beq r2, r3, 1f
  800040:	10c00326 	beq	r2,r3,800050 <_start+0x30>

0:
    stw zero, (r2)
  800044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80004c:	10fffd36 	bltu	r2,r3,800044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800050:	08001f40 	call	8001f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800054:	08002600 	call	800260 <alt_main>

00800058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800058:	003fff06 	br	800058 <alt_after_alt_main>

0080005c <main>:
#define MAX 512

alt_u64 y[MAX];

int main()
{
  80005c:	defff804 	addi	sp,sp,-32
  800060:	dd800615 	stw	r22,24(sp)
  800064:	dd400515 	stw	r21,20(sp)
  800068:	05804074 	movhi	r22,257
  80006c:	b5a00004 	addi	r22,r22,-32768
  800070:	002b883a 	mov	r21,zero
  800074:	dfc00715 	stw	ra,28(sp)
  800078:	dd000415 	stw	r20,16(sp)
  80007c:	dcc00315 	stw	r19,12(sp)
  800080:	dc800215 	stw	r18,8(sp)
  800084:	dc400115 	stw	r17,4(sp)
  800088:	dc000015 	stw	r16,0(sp)
  80008c:	00002906 	br	800134 <main+0xd8>

	int i, j, k;

	for(i=0;i<3;i++){
		for(j=0;j<3;j++){
			if(j!=i){
  800090:	8d401e26 	beq	r17,r21,80010c <main+0xb0>
  800094:	05000044 	movi	r20,1
  800098:	04c02034 	movhi	r19,128
  80009c:	9cc14604 	addi	r19,r19,1304
				for(k=1;k<=MAX;k++){
					PERF_RESET(P_COUNTER_BASE);
  8000a0:	04004074 	movhi	r16,257
  8000a4:	84040004 	addi	r16,r16,4096
  8000a8:	00800044 	movi	r2,1
  8000ac:	80800035 	stwio	r2,0(r16)
					PERF_BEGIN(P_COUNTER_BASE, 0);
  8000b0:	00804074 	movhi	r2,257
  8000b4:	10840104 	addi	r2,r2,4100
  8000b8:	10000035 	stwio	zero,0(r2)
					memcpy(memories[j], memories[i],k);
  8000bc:	91000017 	ldw	r4,0(r18)
  8000c0:	b1400017 	ldw	r5,0(r22)
  8000c4:	a00d883a 	mov	r6,r20
  8000c8:	08001a80 	call	8001a8 <memcpy>
					PERF_END(P_COUNTER_BASE, 0);
  8000cc:	80000035 	stwio	zero,0(r16)
					y[k] = (long)perf_get_section_time(P_COUNTER_BASE, 0);
  8000d0:	8009883a 	mov	r4,r16
  8000d4:	000b883a 	mov	r5,zero
  8000d8:	08004ac0 	call	8004ac <perf_get_section_time>
  8000dc:	100fd7fa 	srai	r7,r2,31
					alt_printf("%x,",y[k]);
  8000e0:	100b883a 	mov	r5,r2
  8000e4:	01002034 	movhi	r4,128
  8000e8:	21013d04 	addi	r4,r4,1268
  8000ec:	380d883a 	mov	r6,r7
				for(k=1;k<=MAX;k++){
					PERF_RESET(P_COUNTER_BASE);
					PERF_BEGIN(P_COUNTER_BASE, 0);
					memcpy(memories[j], memories[i],k);
					PERF_END(P_COUNTER_BASE, 0);
					y[k] = (long)perf_get_section_time(P_COUNTER_BASE, 0);
  8000f0:	98800015 	stw	r2,0(r19)
  8000f4:	99c00115 	stw	r7,4(r19)
					alt_printf("%x,",y[k]);
  8000f8:	080028c0 	call	80028c <alt_printf>
	int i, j, k;

	for(i=0;i<3;i++){
		for(j=0;j<3;j++){
			if(j!=i){
				for(k=1;k<=MAX;k++){
  8000fc:	a5000044 	addi	r20,r20,1
  800100:	00808044 	movi	r2,513
  800104:	9cc00204 	addi	r19,r19,8
  800108:	a0bfe51e 	bne	r20,r2,8000a0 <main+0x44>
					y[k] = (long)perf_get_section_time(P_COUNTER_BASE, 0);
					alt_printf("%x,",y[k]);

				}
			}
			alt_printf("\n");
  80010c:	01002034 	movhi	r4,128
  800110:	21013e04 	addi	r4,r4,1272
  800114:	080028c0 	call	80028c <alt_printf>
	alt_u64* memories = {ONCHIP_MEMORY_BASE, SDRAM_BASE, SRAM_BASE};

	int i, j, k;

	for(i=0;i<3;i++){
		for(j=0;j<3;j++){
  800118:	8c400044 	addi	r17,r17,1
  80011c:	008000c4 	movi	r2,3
  800120:	94800204 	addi	r18,r18,8
  800124:	88bfda1e 	bne	r17,r2,800090 <main+0x34>
{
	alt_u64* memories = {ONCHIP_MEMORY_BASE, SDRAM_BASE, SRAM_BASE};

	int i, j, k;

	for(i=0;i<3;i++){
  800128:	ad400044 	addi	r21,r21,1
  80012c:	b5800204 	addi	r22,r22,8
  800130:	ac400426 	beq	r21,r17,800144 <main+0xe8>
  800134:	0023883a 	mov	r17,zero
  800138:	04804074 	movhi	r18,257
  80013c:	94a00004 	addi	r18,r18,-32768
  800140:	003fd306 	br	800090 <main+0x34>
			alt_printf("\n");
		}
	}

	return 0;
}
  800144:	0005883a 	mov	r2,zero
  800148:	dfc00717 	ldw	ra,28(sp)
  80014c:	dd800617 	ldw	r22,24(sp)
  800150:	dd400517 	ldw	r21,20(sp)
  800154:	dd000417 	ldw	r20,16(sp)
  800158:	dcc00317 	ldw	r19,12(sp)
  80015c:	dc800217 	ldw	r18,8(sp)
  800160:	dc400117 	ldw	r17,4(sp)
  800164:	dc000017 	ldw	r16,0(sp)
  800168:	dec00804 	addi	sp,sp,32
  80016c:	f800283a 	ret

00800170 <__mulsi3>:
  800170:	20000a26 	beq	r4,zero,80019c <__mulsi3+0x2c>
  800174:	0007883a 	mov	r3,zero
  800178:	2080004c 	andi	r2,r4,1
  80017c:	1005003a 	cmpeq	r2,r2,zero
  800180:	2008d07a 	srli	r4,r4,1
  800184:	1000011e 	bne	r2,zero,80018c <__mulsi3+0x1c>
  800188:	1947883a 	add	r3,r3,r5
  80018c:	294b883a 	add	r5,r5,r5
  800190:	203ff91e 	bne	r4,zero,800178 <__mulsi3+0x8>
  800194:	1805883a 	mov	r2,r3
  800198:	f800283a 	ret
  80019c:	0007883a 	mov	r3,zero
  8001a0:	1805883a 	mov	r2,r3
  8001a4:	f800283a 	ret

008001a8 <memcpy>:
  8001a8:	2011883a 	mov	r8,r4
  8001ac:	30000726 	beq	r6,zero,8001cc <memcpy+0x24>
  8001b0:	000f883a 	mov	r7,zero
  8001b4:	29c5883a 	add	r2,r5,r7
  8001b8:	11000003 	ldbu	r4,0(r2)
  8001bc:	41c7883a 	add	r3,r8,r7
  8001c0:	39c00044 	addi	r7,r7,1
  8001c4:	19000005 	stb	r4,0(r3)
  8001c8:	39bffa1e 	bne	r7,r6,8001b4 <memcpy+0xc>
  8001cc:	4005883a 	mov	r2,r8
  8001d0:	f800283a 	ret

008001d4 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  8001d4:	2900051e 	bne	r5,r4,8001ec <alt_load_section+0x18>
  8001d8:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
  8001dc:	20800017 	ldw	r2,0(r4)
  8001e0:	21000104 	addi	r4,r4,4
  8001e4:	28800015 	stw	r2,0(r5)
  8001e8:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8001ec:	29bffb1e 	bne	r5,r6,8001dc <alt_load_section+0x8>
  8001f0:	f800283a 	ret

008001f4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8001f4:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8001f8:	01002034 	movhi	r4,128
  8001fc:	21014004 	addi	r4,r4,1280
  800200:	01402034 	movhi	r5,128
  800204:	29413f04 	addi	r5,r5,1276
  800208:	01802034 	movhi	r6,128
  80020c:	31814004 	addi	r6,r6,1280
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800210:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800214:	08001d40 	call	8001d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800218:	01002034 	movhi	r4,128
  80021c:	21000804 	addi	r4,r4,32
  800220:	01402034 	movhi	r5,128
  800224:	29400804 	addi	r5,r5,32
  800228:	01802034 	movhi	r6,128
  80022c:	31800804 	addi	r6,r6,32
  800230:	08001d40 	call	8001d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  800234:	01002034 	movhi	r4,128
  800238:	21013d04 	addi	r4,r4,1268
  80023c:	01402034 	movhi	r5,128
  800240:	29413d04 	addi	r5,r5,1268
  800244:	01802034 	movhi	r6,128
  800248:	31813f04 	addi	r6,r6,1276
  80024c:	08001d40 	call	8001d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800250:	08004e40 	call	8004e4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  800254:	dfc00017 	ldw	ra,0(sp)
  800258:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  80025c:	08004e81 	jmpi	8004e8 <alt_icache_flush_all>

00800260 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800260:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  800264:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  800268:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80026c:	08004340 	call	800434 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  800270:	08004200 	call	800420 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  800274:	d1200217 	ldw	r4,-32760(gp)
  800278:	d1600317 	ldw	r5,-32756(gp)
  80027c:	d1a00417 	ldw	r6,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  800280:	dfc00017 	ldw	ra,0(sp)
  800284:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  800288:	080005c1 	jmpi	80005c <main>

0080028c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  80028c:	defff804 	addi	sp,sp,-32
  800290:	dfc00415 	stw	ra,16(sp)
  800294:	dc800315 	stw	r18,12(sp)
  800298:	dc400215 	stw	r17,8(sp)
  80029c:	dc000115 	stw	r16,4(sp)
  8002a0:	d9400515 	stw	r5,20(sp)
  8002a4:	d9800615 	stw	r6,24(sp)
  8002a8:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
  8002ac:	d8800504 	addi	r2,sp,20
  8002b0:	2025883a 	mov	r18,r4
  8002b4:	d8800015 	stw	r2,0(sp)
  8002b8:	00003d06 	br	8003b0 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8002bc:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8002c0:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  8002c4:	18800226 	beq	r3,r2,8002d0 <alt_printf+0x44>
        {
            alt_putchar(c);
  8002c8:	1809883a 	mov	r4,r3
  8002cc:	00000a06 	br	8002f8 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  8002d0:	91000007 	ldb	r4,0(r18)
  8002d4:	94800044 	addi	r18,r18,1
  8002d8:	20003726 	beq	r4,zero,8003b8 <alt_printf+0x12c>
            {
                if (c == '%')
  8002dc:	20c00626 	beq	r4,r3,8002f8 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  8002e0:	008018c4 	movi	r2,99
  8002e4:	2080061e 	bne	r4,r2,800300 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
  8002e8:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
  8002ec:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  8002f0:	10800104 	addi	r2,r2,4
  8002f4:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
  8002f8:	08003d00 	call	8003d0 <alt_putchar>
  8002fc:	00002c06 	br	8003b0 <alt_printf+0x124>
                }
                else if (c == 'x')
  800300:	00801e04 	movi	r2,120
  800304:	20801e1e 	bne	r4,r2,800380 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  800308:	d8800017 	ldw	r2,0(sp)
  80030c:	14400017 	ldw	r17,0(r2)
  800310:	10800104 	addi	r2,r2,4
  800314:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  800318:	88000226 	beq	r17,zero,800324 <alt_printf+0x98>
  80031c:	04000704 	movi	r16,28
  800320:	00000306 	br	800330 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
  800324:	01000c04 	movi	r4,48
  800328:	003ff306 	br	8002f8 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
  80032c:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  800330:	008003c4 	movi	r2,15
  800334:	1404983a 	sll	r2,r2,r16
  800338:	8884703a 	and	r2,r17,r2
  80033c:	103ffb26 	beq	r2,zero,80032c <alt_printf+0xa0>
  800340:	00000b06 	br	800370 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  800344:	8884703a 	and	r2,r17,r2
  800348:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
  80034c:	00800244 	movi	r2,9
                            c = '0' + digit;
  800350:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
  800354:	10c0012e 	bgeu	r2,r3,80035c <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
  800358:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
  80035c:	21003fcc 	andi	r4,r4,255
  800360:	2100201c 	xori	r4,r4,128
  800364:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  800368:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
  80036c:	08003d00 	call	8003d0 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  800370:	008003c4 	movi	r2,15
  800374:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  800378:	803ff20e 	bge	r16,zero,800344 <alt_printf+0xb8>
  80037c:	00000c06 	br	8003b0 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  800380:	00801cc4 	movi	r2,115
  800384:	20800a1e 	bne	r4,r2,8003b0 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  800388:	d8800017 	ldw	r2,0(sp)
  80038c:	14000017 	ldw	r16,0(r2)
  800390:	10800104 	addi	r2,r2,4
  800394:	d8800015 	stw	r2,0(sp)
  800398:	00000106 	br	8003a0 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
  80039c:	08003d00 	call	8003d0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  8003a0:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
  8003a4:	84000044 	addi	r16,r16,1
  8003a8:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  8003ac:	103ffb1e 	bne	r2,zero,80039c <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8003b0:	90c00007 	ldb	r3,0(r18)
  8003b4:	183fc11e 	bne	r3,zero,8002bc <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
  8003b8:	dfc00417 	ldw	ra,16(sp)
  8003bc:	dc800317 	ldw	r18,12(sp)
  8003c0:	dc400217 	ldw	r17,8(sp)
  8003c4:	dc000117 	ldw	r16,4(sp)
  8003c8:	dec00804 	addi	sp,sp,32
  8003cc:	f800283a 	ret

008003d0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8003d0:	defffd04 	addi	sp,sp,-12
  8003d4:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  8003d8:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8003dc:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  8003e0:	01800044 	movi	r6,1
  8003e4:	01002034 	movhi	r4,128
  8003e8:	21013f04 	addi	r4,r4,1276
  8003ec:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  8003f0:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
  8003f4:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
  8003f8:	08004540 	call	800454 <altera_avalon_jtag_uart_write>
  8003fc:	1009883a 	mov	r4,r2
  800400:	00bfffc4 	movi	r2,-1
  800404:	2080011e 	bne	r4,r2,80040c <alt_putchar+0x3c>
  800408:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
  80040c:	8005883a 	mov	r2,r16
  800410:	dfc00217 	ldw	ra,8(sp)
  800414:	dc000117 	ldw	r16,4(sp)
  800418:	dec00304 	addi	sp,sp,12
  80041c:	f800283a 	ret

00800420 <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
  800420:	00c00044 	movi	r3,1
  800424:	00804074 	movhi	r2,257
  800428:	10840004 	addi	r2,r2,4096
  80042c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
  800430:	f800283a 	ret

00800434 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800434:	deffff04 	addi	sp,sp,-4
  800438:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
  80043c:	08004ec0 	call	8004ec <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  800440:	00800044 	movi	r2,1
  800444:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800448:	dfc00017 	ldw	ra,0(sp)
  80044c:	dec00104 	addi	sp,sp,4
  800450:	f800283a 	ret

00800454 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  800454:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
  800458:	298f883a 	add	r7,r5,r6
  80045c:	20c00104 	addi	r3,r4,4
  800460:	00000606 	br	80047c <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  800464:	18800037 	ldwio	r2,0(r3)
  800468:	10bfffec 	andhi	r2,r2,65535
  80046c:	10000326 	beq	r2,zero,80047c <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  800470:	28800007 	ldb	r2,0(r5)
  800474:	29400044 	addi	r5,r5,1
  800478:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  80047c:	29fff936 	bltu	r5,r7,800464 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
  800480:	3005883a 	mov	r2,r6
  800484:	f800283a 	ret

00800488 <alt_get_performance_counter_base>:
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
#endif
}
  800488:	0005883a 	mov	r2,zero
  80048c:	f800283a 	ret

00800490 <alt_get_cpu_freq>:
 */
alt_u32 
alt_get_cpu_freq()
{
    return ALT_CPU_FREQ;
}
  800490:	0080bef4 	movhi	r2,763
  800494:	10bc2004 	addi	r2,r2,-3968
  800498:	f800283a 	ret

0080049c <perf_get_num_starts>:
  return perf_get_section_time (hw_base_address, 0);
}

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
  return IORD(hw_base_address, ((which_section*4)+2));
  80049c:	280a913a 	slli	r5,r5,4
  8004a0:	2149883a 	add	r4,r4,r5
}
  8004a4:	20800237 	ldwio	r2,8(r4)
  8004a8:	f800283a 	ret

008004ac <perf_get_section_time>:
{
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;

  PERF_STOP_MEASURING(hw_base_address);
  8004ac:	20000035 	stwio	zero,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
  8004b0:	280a913a 	slli	r5,r5,4
  8004b4:	2149883a 	add	r4,r4,r5
  8004b8:	23400037 	ldwio	r13,0(r4)
  hi = IORD(hw_base_address, ((which_section*4)+1));
  8004bc:	23000137 	ldwio	r12,4(r4)
  8004c0:	0015883a 	mov	r10,zero
  8004c4:	0013883a 	mov	r9,zero
  8004c8:	5348b03a 	or	r4,r10,r13
  8004cc:	624ab03a 	or	r5,r12,r9
  8004d0:	2005883a 	mov	r2,r4
  8004d4:	2807883a 	mov	r3,r5

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
}
  8004d8:	f800283a 	ret

008004dc <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
  return perf_get_section_time (hw_base_address, 0);
  8004dc:	000b883a 	mov	r5,zero
  8004e0:	08004ac1 	jmpi	8004ac <perf_get_section_time>

008004e4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8004e4:	f800283a 	ret

008004e8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  8004e8:	f800283a 	ret

008004ec <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  8004ec:	000170fa 	wrctl	ienable,zero
}
  8004f0:	f800283a 	ret
