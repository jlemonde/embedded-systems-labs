
lab2_cruisecontroloptimized.elf:     file format elf32-littlenios2
lab2_cruisecontroloptimized.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000004ec memsz 0x000004ec flags r-x
    LOAD off    0x00002000 vaddr 0x01008000 paddr 0x01008000 align 2**12
         filesz 0x00007490 memsz 0x00007490 flags r-x
    LOAD off    0x0000950c vaddr 0x0080050c paddr 0x0100f490 align 2**12
         filesz 0x00000394 memsz 0x0001149c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000124  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007490  01008000  01008000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c8  00800144  00800144  00001144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000394  0080050c  0100f490  0000950c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00011108  008008a0  0100f824  000098a0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000098a0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000918  00000000  00000000  000098c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001ae6  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001311c  00000000  00000000  0000bcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000572b  00000000  00000000  0001ede2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e82b  00000000  00000000  0002450d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001524  00000000  00000000  00032d38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029cf  00000000  00000000  0003425c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000050e9  00000000  00000000  00036c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003bd14  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000458  00000000  00000000  0003bd28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0003fd9f  2**0
                  CONTENTS, READONLY
 18 .cpu          00000019  00000000  00000000  0003fda5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003fdbe  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003fdbf  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003fdc0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003fdc4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003fdc8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0003fdcc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0003fdd7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0003fde2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000019  00000000  00000000  0003fded  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000051  00000000  00000000  0003fe06  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000712d3  00000000  00000000  0003fe57  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
01008000 l    d  .text	00000000 .text
00800144 l    d  .rodata	00000000 .rodata
0080050c l    d  .rwdata	00000000 .rwdata
008008a0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01008038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cruise_opti.c
0080050c l     O .rwdata	0000002c b2sLUT
00800990 l     O .bss	00000018 alarm.2578
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100974c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0100a0b0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
0100a9b8 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 os_core.c
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0100bbf8 l     F .text	000000b8 OS_FlagBlock
0100bcec l     F .text	00000090 OS_FlagTaskRdy
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
0100d734 l     F .text	00000068 OSTmr_Free
0100d79c l     F .text	000000a0 OSTmr_Link
0100d83c l     F .text	00000064 OSTmr_Unlink
0100da3c l     F .text	000000c0 OSTmr_Task
0100da00 l     F .text	0000002c OSTmr_Lock
0100da2c l     F .text	00000010 OSTmr_Unlock
00000000 l    df *ABS*	00000000 alt_sys_init.c
00800538 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100e370 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
0100e3ac l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0100e46c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100e670 l     F .text	00000088 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000038 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00800988 l     O .bss	00000002 OSTmrCtr
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0080070c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100ef54 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_write.c
0100f3b8 l     F .text	00000020 alt_get_errno
008008b4 g     O .bss	00000004 SemSwitches
00800852 g     O .rwdata	00000002 OSTaskNameSize
0100aa44 g     F .text	000000a8 alt_main
008008b8 g     O .bss	00000004 p_sem_data_vehicle
00800924 g     O .bss	00000004 OSTmrFreeList
0081181c g     O .bss	00000100 alt_irq
008009a8 g     O .bss	00002000 SwitchIO_Stack
0100f490 g       *ABS*	00000000 __flash_rwdata_start
0080e9a8 g     O .bss	00000010 OSTmrWheelTbl
008007f8 g     O .rwdata	00000004 engine
008008bc g     O .bss	00000004 Mbox_Throttle
0100b420 g     F .text	000002d4 OSEventPendMulti
0100ea48 g     F .text	00000004 OSTaskCreateHook
0080082a g     O .rwdata	00000002 OSMboxEn
0100b6f4 g     F .text	0000003c OSIntEnter
00000000 g       *ABS*	00000000 __alt_mem_sram
0080083a g     O .rwdata	00000002 OSQEn
01008190 g     F .text	00000034 CallbackOverload
0100ad30 g     F .text	00000004 __malloc_unlock
0100ea54 g     F .text	00000004 OSTaskStatHook
008008ad g     O .bss	00000001 TOP_GEAR
00800928 g     O .bss	00000001 OSLockNesting
0080092c g     O .bss	00000004 OSTmrSemSignal
00800878 g     O .rwdata	00000002 OSDataSize
00800930 g     O .bss	00000001 OSRunning
008008c0 g     O .bss	00000004 SemExtraload
0100ea58 g     F .text	00000008 OSInitHookBegin
00800870 g     O .rwdata	00000002 OSTmrSize
010081f8 g     F .text	0000002c CallbackExtraload
00800934 g     O .bss	00000004 OSIdleCtr
0100ea00 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0100b91c g     F .text	00000170 OS_TCBInit
01008224 g     F .text	00000038 CallbackWatchdog
00800000 g     F .entry	0000000c __reset
00800938 g     O .bss	00000002 OSTmrUsed
010086ec g     F .text	000002bc VehicleTask
00800876 g     O .rwdata	00000002 OSTmrWheelTblSize
00800020 g       *ABS*	00000000 __flash_exceptions_start
00800816 g     O .rwdata	00000002 OSEventSize
0080093a g     O .bss	00000001 OSPrioHighRdy
0100ea4c g     F .text	00000004 OSTaskDelHook
010084a0 g     F .text	0000010c adjust_position
0080098c g     O .bss	00000004 errno
0100a078 g     F .text	00000038 __make_dp
0100e9e0 g       .text	00000000 OSStartHighRdy
0100cffc g     F .text	00000120 OSTaskCreateExt
0100c580 g     F .text	0000002c OSFlagPendGetFlagsRdy
00800856 g     O .rwdata	00000002 OSTaskStatStkSize
0100be30 g     F .text	00000154 OSFlagAccept
0080090c g     O .bss	00000004 alt_argv
008087ec g       *ABS*	00000000 _gp
01008d9c g     F .text	000000c4 SwitchIO
00800920 g     O .bss	00000004 alt_heapsem
0100bbf4 g     F .text	00000004 OSDebugInit
0100d11c g     F .text	0000022c OSTaskDel
0080058c g     O .rwdata	00000180 alt_fd_list
0080e9b8 g     O .bss	00000370 OSFlagTbl
008008ae g     O .bss	00000001 GAS_PEDAL
0100ae64 g     F .text	0000004c OS_EventTaskRemove
0100eac4 g     F .text	00000070 alt_find_dev
008008c4 g     O .bss	00000004 Mbox_Velocity
00800840 g     O .rwdata	00000002 OSRdyTblSize
0080ed28 g     O .bss	00000340 OSTmrTbl
01009ea8 g     F .text	000000f8 __floatsidf
0100e6f8 g     F .text	0000008c alt_io_redirect
0100f490 g       *ABS*	00000000 __DTOR_END__
008008af g     O .bss	00000001 BRAKE_PEDAL
008029a8 g     O .bss	00002000 ControlTask_Stack
0100b394 g     F .text	0000008c OSEventNameGet
00800824 g     O .rwdata	00000002 OSFlagMax
0100ba8c g     F .text	000000c8 OSIntExit
008008c8 g     O .bss	00000004 TimerVehicle
008008cc g     O .bss	00000004 SemControl
0080085e g     O .rwdata	00000002 OSTCBSize
0080093b g     O .bss	00000001 OSPrioCur
0100e28c g     F .text	00000060 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0100a1ec g     F .text	00000008 __udivsi3
00800844 g     O .rwdata	00000002 OSStkWidth
00800838 g     O .rwdata	00000002 OSPtrSize
008008d0 g     O .bss	00000004 TimerWatchdog
0100815c g     F .text	00000034 CallbackSwitches
00800818 g     O .rwdata	00000002 OSEventTblSize
008007ec g     O .rwdata	00000004 gas_pedal
0100e964 g       .text	00000000 OSCtxSw
0080093c g     O .bss	00000004 OSTCBList
01008f7c g     F .text	00000168 Extraload
0100dfbc g     F .text	00000028 OSTmrSignal
00800980 g     O .bss	00000004 alt_fd_list_lock
010080f4 g     F .text	00000034 CallbackControl
00800940 g     O .bss	00000001 OSTickStepState
0080083c g     O .rwdata	00000002 OSQMax
0080f068 g     O .bss	00000800 OSTaskStatStk
010085ac g     F .text	00000140 adjust_velocity
0080081c g     O .rwdata	00000002 OSFlagEn
00800862 g     O .rwdata	00000002 OSTimeTickHookEn
0100bcb0 g     F .text	0000003c OS_FlagUnlink
010081c4 g     F .text	00000034 CallbackExtraloadTask
01008128 g     F .text	00000034 CallbackButtons
0080088c g     O .rwdata	00000004 alt_max_fd
0100b038 g     F .text	00000024 OS_MemCopy
0100b0a8 g     F .text	000000ac OS_Sched
0100a7f0 g     F .text	00000138 __unpack_d
0100d4bc g     F .text	000000ec OSTaskNameSet
00800944 g     O .bss	00000004 OSCtxSwCtr
0100ea6c g     F .text	00000058 OSTimeTickHook
008008a8 g     O .bss	00000004 led_red
008008ac g     O .bss	00000001 ENGINE
00800826 g     O .rwdata	00000002 OSFlagNameSize
010096f8 g     F .text	00000054 __extendsfdf2
0100aeb0 g     F .text	0000005c OS_EventTaskRemoveMulti
01009bdc g     F .text	00000074 __adddf3
0100adc4 g     F .text	000000a0 OS_EventTaskWaitMulti
0080083e g     O .rwdata	00000002 OSQSize
0100ccc4 g     F .text	00000158 OSSemPend
0080089c g     O .rwdata	00000004 _global_impure_ptr
008049a8 g     O .bss	00002000 OverloadDetection_Stack
0100803c g     F .text	0000002c buttons_pressed
00800828 g     O .rwdata	00000002 OSLowestPrio
008119a8 g       *ABS*	00000000 __bss_end
0100e604 g     F .text	0000006c alt_iic_isr_register
0100ea68 g     F .text	00000004 OSTCBInitHook
0080086e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0100ac78 g     F .text	000000ac alt_tick
0100cb20 g     F .text	00000084 OSMboxPost
00800810 g     O .rwdata	00000002 OSEventEn
0080086a g     O .rwdata	00000002 OSTmrCfgNameSize
0100e568 g     F .text	00000018 alt_ic_irq_enabled
00800948 g     O .bss	00000002 OSTmrFree
0100bd7c g     F .text	00000070 OS_FlagInit
0100ac44 g     F .text	00000034 alt_alarm_stop
0100ded4 g     F .text	000000e8 OSTmrDel
0080084c g     O .rwdata	00000002 OSTaskIdleStkSize
00800984 g     O .bss	00000004 alt_irq_active
008008a4 g     O .bss	00000002 led_green
0080094c g     O .bss	00000004 OSIdleCtrMax
008000ec g     F .exceptions	00000058 alt_irq_handler
00800564 g     O .rwdata	00000028 alt_dev_null
00800860 g     O .rwdata	00000002 OSTicksPerSec
0100a414 g     F .text	000000c8 __unpack_f
0100e964 g       .text	00000000 OSIntCtxSw
0100e468 g     F .text	00000004 alt_dcache_flush_all
01009fa0 g     F .text	000000d8 __fixdfsi
008007fc g     O .rwdata	00000004 cruise_control
00800950 g     O .bss	00000004 OSTCBFreeList
008008a0 g       *ABS*	00000000 __ram_rwdata_end
0100ce1c g     F .text	000000d8 OSSemPendAbort
01008000 g       *ABS*	00000000 __alt_mem_onchip_memory
008069a8 g     O .bss	00002000 VehicleTask_Stack
00800884 g     O .rwdata	00000008 alt_dev_list
0100f3d8 g     F .text	000000b4 write
0100ed54 g     F .text	00000074 _putc_r
00800864 g     O .rwdata	00000002 OSVersionNbr
008089a8 g     O .bss	00002000 ButtonsIO_Stack
0080050c g       *ABS*	00000000 __ram_rodata_end
0100ddcc g     F .text	00000108 OSTmrRemainGet
0080080c g     O .rwdata	00000004 OSEndiannessTest
0100a1f4 g     F .text	00000008 __umodsi3
008008d4 g     O .bss	00000004 p_sem_data_control
0080081e g     O .rwdata	00000002 OSFlagGrpSize
0100dd34 g     F .text	00000098 OSTmrStateGet
008119a8 g       *ABS*	00000000 end
0100a2b4 g     F .text	00000160 __pack_f
008008a0 g     O .bss	00000004 TimerExtraload
0100b89c g     F .text	00000080 OS_TaskStat
0100f48c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0100e320 g     F .text	00000050 alt_avalon_timer_sc_init
0100a234 g     F .text	00000080 __clzsi2
0100e2ec g     F .text	00000034 altera_avalon_jtag_uart_write
0100d8a0 g     F .text	00000160 OSTmr_Init
0100b01c g     F .text	0000001c OS_MemClr
0100ea24 g     F .text	00000024 OSTaskStkInit
0100aaec g     F .text	00000144 alt_printf
0100af0c g     F .text	000000f4 OS_EventTaskRdy
0100ef58 g     F .text	000001bc __call_exitprocs
0100838c g     F .text	0000008c show_target_velocity
00800954 g     O .bss	00000001 OSCPUUsage
01008000 g     F .text	0000003c _start
00800914 g     O .bss	00000004 _alt_tick_rate
0100d69c g     F .text	00000098 OSTimeDly
01008298 g     F .text	000000f4 show_velocity_on_sevenseg
008008d8 g     O .bss	00000004 p_sem_data_switches
00800918 g     O .bss	00000004 _alt_nticks
0100e1fc g     F .text	00000050 alt_sys_init
008008dc g     O .bss	00000004 p_sem_data_overload
01009660 g     F .text	00000098 __floatsisf
0100ede8 g     F .text	0000016c __register_exitproc
00800955 g     O .bss	00000001 OSTaskCtr
0100a1fc g     F .text	00000038 __mulsi3
0080050c g       *ABS*	00000000 __ram_rwdata_start
00800144 g       *ABS*	00000000 __ram_rodata_start
00800812 g     O .rwdata	00000002 OSEventMax
0100cba4 g     F .text	00000094 OSSemPost
0100e27c g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0100ebd0 g     F .text	000000a4 alt_get_fd
0100b730 g     F .text	00000064 OSStatInit
0100bdec g     F .text	00000044 OSFlagQuery
0100f2d0 g     F .text	000000c8 __fpcmp_parts_d
00800848 g     O .rwdata	00000002 OSTaskCreateExtEn
0100eca8 g     F .text	0000003c memcmp
0100ad3c g     F .text	00000004 OS_Dummy
008119a8 g       *ABS*	00000000 __alt_stack_base
008008e0 g     O .bss	00000004 TimerOverload
008008e4 g     O .bss	00000004 SemVehicle
008008e8 g     O .bss	00000004 SemOverload
01009c50 g     F .text	00000258 __divdf3
008007f0 g     O .rwdata	00000004 brake_pedal
00800958 g     O .bss	00000004 OSTCBHighRdy
0100eb34 g     F .text	0000009c alt_find_file
010080c0 g     F .text	00000034 CallbackVehicle
0100e474 g     F .text	00000070 alt_dev_llist_insert
0100ad2c g     F .text	00000004 __malloc_lock
0100bb54 g     F .text	000000a0 OSEventNameSet
0100825c g     F .text	0000003c int2seven
008008ec g     O .bss	00000004 SemButtons
0080095c g     O .bss	00000001 OSRdyGrp
0100f114 g     F .text	000000bc __sfvwrite_small_dev
0100dc44 g     F .text	000000f0 OSTmrStart
008008a0 g       *ABS*	00000000 __bss_start
010095e4 g     F .text	0000007c main
00800910 g     O .bss	00000004 alt_envp
0100e26c g     F .text	00000010 altera_avalon_jtag_uart_write_fd
008003c6 g     O .rodata	00000100 OSUnMapTbl
00800842 g     O .rwdata	00000002 OSSemEn
0100c5ac g     F .text	000001d8 OSFlagPost
0100ad40 g     F .text	00000084 OS_EventTaskWait
01008068 g     F .text	00000028 switches_pressed
0081191c g     O .bss	0000008c _atexit0
0100d348 g     F .text	000000a8 OSTaskDelReq
00800890 g     O .rwdata	00000004 alt_errno
0100b154 g     F .text	0000006c OSStart
0100ad28 g     F .text	00000004 __env_unlock
0080a9a8 g     O .bss	00002000 StartTask_Stack
0100d5a8 g     F .text	000000f4 OSTaskResume
00800854 g     O .rwdata	00000002 OSTaskStatEn
0080082e g     O .rwdata	00000002 OSMemMax
0100ece4 g     F .text	00000070 putc
0100a12c g     F .text	00000060 __divsi3
0080095d g     O .bss	00000003 OSRdyTbl
00800808 g     O .rwdata	00000002 OSDebugEn
00800280 g     O .rodata	00000014 __thenan_df
008008f0 g     O .bss	00000004 TimerExtraloadTask
0100f490 g       *ABS*	00000000 __CTOR_END__
00800820 g     O .rwdata	00000002 OSFlagNodeSize
00800868 g     O .rwdata	00000002 OSTmrCfgMax
0100d3f0 g     F .text	000000cc OSTaskNameGet
00800144 g       *ABS*	00000000 __flash_rodata_start
0100b794 g     F .text	000000d8 OSTimeTick
00800850 g     O .rwdata	00000002 OSTaskMax
0100f490 g       *ABS*	00000000 __DTOR_LIST__
0100cc38 g     F .text	0000008c OSSemCreate
00800874 g     O .rwdata	00000002 OSTmrWheelSize
01008418 g     F .text	00000088 show_position
008008f4 g     O .bss	00000004 delay
008007f4 g     O .rwdata	00000004 top_gear
0080084a g     O .rwdata	00000002 OSTaskDelEn
0100e24c g     F .text	00000020 alt_irq_init
0100e900 g     F .text	0000005c alt_release_fd
00800294 g     O .rodata	00000100 __clz_tab
0100dafc g     F .text	00000148 OSTmrStop
0100ec74 g     F .text	00000014 atexit
0100f1d0 g     F .text	00000078 _write_r
008008f8 g     O .bss	00000004 p_sem_data_buttons
0080f868 g     O .bss	00000800 OSTmrTaskStk
0100bf84 g     F .text	00000080 OSFlagCreate
00800898 g     O .rwdata	00000004 _impure_ptr
008008fc g     O .bss	00000004 TimerButtons
00800908 g     O .bss	00000004 alt_argc
0100e524 g     F .text	00000040 _do_dtors
0080081a g     O .rwdata	00000002 OSEventMultiEn
0100e0ac g     F .text	00000150 OSTmrCreate
0100c004 g     F .text	0000014c OSFlagDel
00800960 g     O .bss	00000004 OSEventFreeList
00800020 g       .exceptions	00000000 alt_irq_entry
0100ca50 g     F .text	000000d0 OSMboxPendAbort
01008e60 g     F .text	000000e8 ButtonsIO
0100c29c g     F .text	000002e4 OSFlagPend
00800866 g     O .rwdata	00000002 OSTmrEn
0080087c g     O .rwdata	00000008 alt_fs_list
0100dfe4 g     F .text	000000c8 OSTmrNameGet
0100b05c g     F .text	0000002c OS_StrCopy
00800900 g     O .bss	00000004 TimerControl
00800830 g     O .rwdata	00000002 OSMemNameSize
0100ea60 g     F .text	00000004 OSInitHookEnd
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080085c g     O .rwdata	00000002 OSTCBPrioTblMax
00800858 g     O .rwdata	00000002 OSTaskStatStkChkEn
01008090 g     F .text	00000030 alarm_handler
0100c850 g     F .text	0000008c OSMboxCreate
0100e600 g     F .text	00000004 alt_ic_isr_register
0080082c g     O .rwdata	00000002 OSMemEn
00800836 g     O .rwdata	00000002 OSMutexEn
008008a0 g       *ABS*	00000000 _edata
008119a8 g       *ABS*	00000000 _end
010089a8 g     F .text	000003f4 ControlTask
00800964 g     O .bss	00000001 OSIntNesting
00800144 g       *ABS*	00000000 __ram_exceptions_end
0100c1e4 g     F .text	000000b8 OSFlagNameSet
0100c8dc g     F .text	00000174 OSMboxPend
00800904 g     O .bss	00000004 TimerSwitches
01008f48 g     F .text	00000034 OverloadDetection
0100e5c0 g     F .text	00000040 alt_ic_irq_disable
00800832 g     O .rwdata	00000002 OSMemSize
0100e95c g     F .text	00000008 altera_nios2_qsys_irq_init
00800968 g     O .bss	00000004 OSTCBCur
0100ec88 g     F .text	00000020 exit
00800834 g     O .rwdata	00000002 OSMemTblSize
0100a18c g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0100b1c0 g     F .text	000001d4 OSInit
0080096c g     O .bss	00000004 OSTmrTime
00800000 g       *ABS*	00000000 __alt_mem_sdram
0100b088 g     F .text	00000020 OS_StrLen
0080084e g     O .rwdata	00000002 OSTaskProfileEn
00800970 g     O .bss	00000004 OSTmrSem
00810068 g     O .bss	00000800 OSTaskIdleStk
0100f398 g     F .text	00000020 _exit
0100c784 g     F .text	000000cc OSMboxPostOpt
0100c150 g     F .text	00000094 OSFlagNameGet
0100a928 g     F .text	00000090 alt_alarm_start
0080c9a8 g     O .bss	00002000 Extraload_Stack
0100edc8 g     F .text	00000020 strlen
0100ea50 g     F .text	00000004 OSTaskSwHook
0100e784 g     F .text	0000017c open
00810868 g     O .bss	00000b40 OSEventTbl
0100f248 g     F .text	00000088 __gedf2
0100ac30 g     F .text	00000014 alt_putchar
008113a8 g     O .bss	00000420 OSTCBTbl
010090e4 g     F .text	00000500 StartTask
0100e564 g     F .text	00000004 alt_icache_flush_all
00800894 g     O .rwdata	00000004 alt_priority_mask
00800974 g     O .bss	00000004 OSFlagFreeList
0100e580 g     F .text	00000040 alt_ic_irq_enable
00800814 g     O .rwdata	00000002 OSEventNameSize
00800978 g     O .bss	00000001 OSStatRdy
008117c8 g     O .bss	00000054 OSTCBPrioTbl
0100ad24 g     F .text	00000004 __env_lock
0080085a g     O .rwdata	00000002 OSTaskSwHookEn
01009b5c g     F .text	00000080 __subdf3
00800800 g     O .rwdata	00000008 alt_alarm_list
00800822 g     O .rwdata	00000002 OSFlagWidth
0100e4e4 g     F .text	00000040 _do_ctors
0100e3cc g     F .text	0000009c close
0080091c g     O .bss	00000004 alt_envsem
0080097c g     O .bss	00000004 OSIdleCtrRun
0100ad34 g     F .text	00000008 OSVersion
0080086c g     O .rwdata	00000002 OSTmrCfgWheelSize
0100a9d8 g     F .text	0000006c alt_load
0100a4dc g     F .text	00000314 __pack_d
00800846 g     O .rwdata	00000002 OSTaskCreateEn
008008b0 g     O .bss	00000001 CRUISE_CONTROL
0100b000 g     F .text	0000001c OS_EventWaitListInit
0100ea64 g     F .text	00000004 OSTaskIdleHook
00000000  w      *UND*	00000000 free
0100cef4 g     F .text	00000108 OSTaskSuspend
0100b86c g     F .text	00000030 OS_TaskIdle
008008b1 g     O .bss	00000001 FLAG
00800872 g     O .rwdata	00000002 OSTmrTblSize



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
  800004:	08600014 	ori	at,at,32768
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	deffff04 	addi	sp,sp,-4
  8000f0:	dfc00015 	stw	ra,0(sp)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000f4:	100b6f40 	call	100b6f4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	0009313a 	rdctl	r4,ipending
  8000fc:	00c00044 	movi	r3,1
  800100:	01402074 	movhi	r5,129
  800104:	29460704 	addi	r5,r5,6172
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800108:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  80010c:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800110:	10000726 	beq	r2,zero,800130 <alt_irq_handler+0x44>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800114:	29000117 	ldw	r4,4(r5)
  800118:	28800017 	ldw	r2,0(r5)
  80011c:	103ee83a 	callr	r2
  800120:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800124:	10000426 	beq	r2,zero,800138 <alt_irq_handler+0x4c>
  800128:	1009883a 	mov	r4,r2
  80012c:	003ff306 	br	8000fc <alt_irq_handler+0x10>
  800130:	29400204 	addi	r5,r5,8
  800134:	003ff406 	br	800108 <alt_irq_handler+0x1c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800138:	dfc00017 	ldw	ra,0(sp)
  80013c:	dec00104 	addi	sp,sp,4

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  800140:	100ba8c1 	jmpi	100ba8c <OSIntExit>

Disassembly of section .text:

01008000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1008000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
 1008004:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 1008008:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
 100800c:	d6a1fb14 	ori	gp,gp,34796
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1008010:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
 1008014:	10822814 	ori	r2,r2,2208

    movhi r3, %hi(__bss_end)
 1008018:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
 100801c:	18c66a14 	ori	r3,r3,6568

    beq r2, r3, 1f
 1008020:	10c00326 	beq	r2,r3,1008030 <_start+0x30>

0:
    stw zero, (r2)
 1008024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1008028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 100802c:	10fffd36 	bltu	r2,r3,1008024 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1008030:	100a9d80 	call	100a9d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1008034:	100aa440 	call	100aa44 <alt_main>

01008038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1008038:	003fff06 	br	1008038 <alt_after_alt_main>

0100803c <buttons_pressed>:
INT8U GAS_PEDAL = 0;
INT8U BRAKE_PEDAL = 0;
INT8U CRUISE_CONTROL = 0;
INT8U FLAG = 0;

int buttons_pressed(void) {
 100803c:	deffff04 	addi	sp,sp,-4
 1008040:	df000015 	stw	fp,0(sp)
 1008044:	d839883a 	mov	fp,sp
	return ~IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_KEYS4_BASE);
 1008048:	00804074 	movhi	r2,257
 100804c:	10844004 	addi	r2,r2,4352
 1008050:	10800037 	ldwio	r2,0(r2)
 1008054:	0084303a 	nor	r2,zero,r2
}
 1008058:	e037883a 	mov	sp,fp
 100805c:	df000017 	ldw	fp,0(sp)
 1008060:	dec00104 	addi	sp,sp,4
 1008064:	f800283a 	ret

01008068 <switches_pressed>:

int switches_pressed(void) {
 1008068:	deffff04 	addi	sp,sp,-4
 100806c:	df000015 	stw	fp,0(sp)
 1008070:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_TOGGLES18_BASE);
 1008074:	00804074 	movhi	r2,257
 1008078:	10844404 	addi	r2,r2,4368
 100807c:	10800037 	ldwio	r2,0(r2)
}
 1008080:	e037883a 	mov	sp,fp
 1008084:	df000017 	ldw	fp,0(sp)
 1008088:	dec00104 	addi	sp,sp,4
 100808c:	f800283a 	ret

01008090 <alarm_handler>:

/*
 * ISR for HW Timer
 */
alt_u32 alarm_handler(void* context) {
 1008090:	defffd04 	addi	sp,sp,-12
 1008094:	dfc00215 	stw	ra,8(sp)
 1008098:	df000115 	stw	fp,4(sp)
 100809c:	df000104 	addi	fp,sp,4
 10080a0:	e13fff15 	stw	r4,-4(fp)
	OSTmrSignal(); /* Signals a 'tick' to the SW timers */
 10080a4:	100dfbc0 	call	100dfbc <OSTmrSignal>

	return delay;
 10080a8:	d0a04217 	ldw	r2,-32504(gp)
}
 10080ac:	e037883a 	mov	sp,fp
 10080b0:	dfc00117 	ldw	ra,4(sp)
 10080b4:	df000017 	ldw	fp,0(sp)
 10080b8:	dec00204 	addi	sp,sp,8
 10080bc:	f800283a 	ret

010080c0 <CallbackVehicle>:

/*
 * Callbacks resumes the suspended task
 */
void CallbackVehicle(void *ptmr,void *callback_arg) {
 10080c0:	defffc04 	addi	sp,sp,-16
 10080c4:	dfc00315 	stw	ra,12(sp)
 10080c8:	df000215 	stw	fp,8(sp)
 10080cc:	df000204 	addi	fp,sp,8
 10080d0:	e13ffe15 	stw	r4,-8(fp)
 10080d4:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemVehicle);
 10080d8:	d1203e17 	ldw	r4,-32520(gp)
 10080dc:	100cba40 	call	100cba4 <OSSemPost>
}
 10080e0:	e037883a 	mov	sp,fp
 10080e4:	dfc00117 	ldw	ra,4(sp)
 10080e8:	df000017 	ldw	fp,0(sp)
 10080ec:	dec00204 	addi	sp,sp,8
 10080f0:	f800283a 	ret

010080f4 <CallbackControl>:
void CallbackControl(void *ptmr,void *callback_arg) {
 10080f4:	defffc04 	addi	sp,sp,-16
 10080f8:	dfc00315 	stw	ra,12(sp)
 10080fc:	df000215 	stw	fp,8(sp)
 1008100:	df000204 	addi	fp,sp,8
 1008104:	e13ffe15 	stw	r4,-8(fp)
 1008108:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemControl);
 100810c:	d1203817 	ldw	r4,-32544(gp)
 1008110:	100cba40 	call	100cba4 <OSSemPost>
}
 1008114:	e037883a 	mov	sp,fp
 1008118:	dfc00117 	ldw	ra,4(sp)
 100811c:	df000017 	ldw	fp,0(sp)
 1008120:	dec00204 	addi	sp,sp,8
 1008124:	f800283a 	ret

01008128 <CallbackButtons>:
void CallbackButtons(void *ptmr,void *callback_arg) {
 1008128:	defffc04 	addi	sp,sp,-16
 100812c:	dfc00315 	stw	ra,12(sp)
 1008130:	df000215 	stw	fp,8(sp)
 1008134:	df000204 	addi	fp,sp,8
 1008138:	e13ffe15 	stw	r4,-8(fp)
 100813c:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemButtons);
 1008140:	d1204017 	ldw	r4,-32512(gp)
 1008144:	100cba40 	call	100cba4 <OSSemPost>
}
 1008148:	e037883a 	mov	sp,fp
 100814c:	dfc00117 	ldw	ra,4(sp)
 1008150:	df000017 	ldw	fp,0(sp)
 1008154:	dec00204 	addi	sp,sp,8
 1008158:	f800283a 	ret

0100815c <CallbackSwitches>:
void CallbackSwitches(void *ptmr,void *callback_arg) {
 100815c:	defffc04 	addi	sp,sp,-16
 1008160:	dfc00315 	stw	ra,12(sp)
 1008164:	df000215 	stw	fp,8(sp)
 1008168:	df000204 	addi	fp,sp,8
 100816c:	e13ffe15 	stw	r4,-8(fp)
 1008170:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemSwitches);
 1008174:	d1203217 	ldw	r4,-32568(gp)
 1008178:	100cba40 	call	100cba4 <OSSemPost>
}
 100817c:	e037883a 	mov	sp,fp
 1008180:	dfc00117 	ldw	ra,4(sp)
 1008184:	df000017 	ldw	fp,0(sp)
 1008188:	dec00204 	addi	sp,sp,8
 100818c:	f800283a 	ret

01008190 <CallbackOverload>:
void CallbackOverload(void *ptmr,void *callback_arg) {
 1008190:	defffc04 	addi	sp,sp,-16
 1008194:	dfc00315 	stw	ra,12(sp)
 1008198:	df000215 	stw	fp,8(sp)
 100819c:	df000204 	addi	fp,sp,8
 10081a0:	e13ffe15 	stw	r4,-8(fp)
 10081a4:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemOverload);
 10081a8:	d1203f17 	ldw	r4,-32516(gp)
 10081ac:	100cba40 	call	100cba4 <OSSemPost>
}
 10081b0:	e037883a 	mov	sp,fp
 10081b4:	dfc00117 	ldw	ra,4(sp)
 10081b8:	df000017 	ldw	fp,0(sp)
 10081bc:	dec00204 	addi	sp,sp,8
 10081c0:	f800283a 	ret

010081c4 <CallbackExtraloadTask>:

void CallbackExtraloadTask(void *ptmr, void *callback_arg) {
 10081c4:	defffc04 	addi	sp,sp,-16
 10081c8:	dfc00315 	stw	ra,12(sp)
 10081cc:	df000215 	stw	fp,8(sp)
 10081d0:	df000204 	addi	fp,sp,8
 10081d4:	e13ffe15 	stw	r4,-8(fp)
 10081d8:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemExtraload);
 10081dc:	d1203517 	ldw	r4,-32556(gp)
 10081e0:	100cba40 	call	100cba4 <OSSemPost>
}
 10081e4:	e037883a 	mov	sp,fp
 10081e8:	dfc00117 	ldw	ra,4(sp)
 10081ec:	df000017 	ldw	fp,0(sp)
 10081f0:	dec00204 	addi	sp,sp,8
 10081f4:	f800283a 	ret

010081f8 <CallbackExtraload>:

void CallbackExtraload(void *ptmr, void *callback_arg) {
 10081f8:	defffd04 	addi	sp,sp,-12
 10081fc:	df000215 	stw	fp,8(sp)
 1008200:	df000204 	addi	fp,sp,8
 1008204:	e13ffe15 	stw	r4,-8(fp)
 1008208:	e17fff15 	stw	r5,-4(fp)
	FLAG = 1;
 100820c:	00800044 	movi	r2,1
 1008210:	d0a03145 	stb	r2,-32571(gp)
}
 1008214:	e037883a 	mov	sp,fp
 1008218:	df000017 	ldw	fp,0(sp)
 100821c:	dec00104 	addi	sp,sp,4
 1008220:	f800283a 	ret

01008224 <CallbackWatchdog>:

void CallbackWatchdog(void *ptmr, void *callback_arg) {
 1008224:	defffc04 	addi	sp,sp,-16
 1008228:	dfc00315 	stw	ra,12(sp)
 100822c:	df000215 	stw	fp,8(sp)
 1008230:	df000204 	addi	fp,sp,8
 1008234:	e13ffe15 	stw	r4,-8(fp)
 1008238:	e17fff15 	stw	r5,-4(fp)
	alt_printf("CPU is at 100 percent usage!\n");
 100823c:	01002034 	movhi	r4,128
 1008240:	21005104 	addi	r4,r4,324
 1008244:	100aaec0 	call	100aaec <alt_printf>
}
 1008248:	e037883a 	mov	sp,fp
 100824c:	dfc00117 	ldw	ra,4(sp)
 1008250:	df000017 	ldw	fp,0(sp)
 1008254:	dec00204 	addi	sp,sp,8
 1008258:	f800283a 	ret

0100825c <int2seven>:
		};

/*
 * convert int to seven segment display format
 */
int int2seven(int inval) {
 100825c:	defffe04 	addi	sp,sp,-8
 1008260:	df000115 	stw	fp,4(sp)
 1008264:	df000104 	addi	fp,sp,4
 1008268:	e13fff15 	stw	r4,-4(fp)
	return b2sLUT[inval];
 100826c:	e0bfff17 	ldw	r2,-4(fp)
 1008270:	00c02034 	movhi	r3,128
 1008274:	18c14304 	addi	r3,r3,1292
 1008278:	1085883a 	add	r2,r2,r2
 100827c:	1085883a 	add	r2,r2,r2
 1008280:	10c5883a 	add	r2,r2,r3
 1008284:	10800017 	ldw	r2,0(r2)
}
 1008288:	e037883a 	mov	sp,fp
 100828c:	df000017 	ldw	fp,0(sp)
 1008290:	dec00104 	addi	sp,sp,4
 1008294:	f800283a 	ret

01008298 <show_velocity_on_sevenseg>:

/*
 * output current velocity on the seven segement display
 */
void show_velocity_on_sevenseg(INT8S velocity) {
 1008298:	defffa04 	addi	sp,sp,-24
 100829c:	dfc00515 	stw	ra,20(sp)
 10082a0:	df000415 	stw	fp,16(sp)
 10082a4:	df000404 	addi	fp,sp,16
 10082a8:	e13fff05 	stb	r4,-4(fp)
	int tmp = velocity;
 10082ac:	e0bfff07 	ldb	r2,-4(fp)
 10082b0:	e0bffe15 	stw	r2,-8(fp)
	int out;
	INT8U out_high = 0;
 10082b4:	e03ffc85 	stb	zero,-14(fp)
	INT8U out_low = 0;
 10082b8:	e03ffc45 	stb	zero,-15(fp)
	INT8U out_sign = 0;
 10082bc:	e03ffc05 	stb	zero,-16(fp)

	if (velocity < 0) {
 10082c0:	e0bfff07 	ldb	r2,-4(fp)
 10082c4:	1004403a 	cmpge	r2,r2,zero
 10082c8:	1000071e 	bne	r2,zero,10082e8 <show_velocity_on_sevenseg+0x50>
		out_sign = int2seven(10);
 10082cc:	01000284 	movi	r4,10
 10082d0:	100825c0 	call	100825c <int2seven>
 10082d4:	e0bffc05 	stb	r2,-16(fp)
		tmp *= -1;
 10082d8:	e0bffe17 	ldw	r2,-8(fp)
 10082dc:	0085c83a 	sub	r2,zero,r2
 10082e0:	e0bffe15 	stw	r2,-8(fp)
 10082e4:	00000306 	br	10082f4 <show_velocity_on_sevenseg+0x5c>
	} else {
		out_sign = int2seven(0);
 10082e8:	0009883a 	mov	r4,zero
 10082ec:	100825c0 	call	100825c <int2seven>
 10082f0:	e0bffc05 	stb	r2,-16(fp)
	}

	out_high = int2seven(tmp / 10);
 10082f4:	e13ffe17 	ldw	r4,-8(fp)
 10082f8:	01400284 	movi	r5,10
 10082fc:	100a12c0 	call	100a12c <__divsi3>
 1008300:	1009883a 	mov	r4,r2
 1008304:	100825c0 	call	100825c <int2seven>
 1008308:	e0bffc85 	stb	r2,-14(fp)
	out_low = int2seven(tmp - (tmp / 10) * 10);
 100830c:	e13ffe17 	ldw	r4,-8(fp)
 1008310:	01400284 	movi	r5,10
 1008314:	100a12c0 	call	100a12c <__divsi3>
 1008318:	1009883a 	mov	r4,r2
 100831c:	01400284 	movi	r5,10
 1008320:	100a1fc0 	call	100a1fc <__mulsi3>
 1008324:	1007883a 	mov	r3,r2
 1008328:	e0bffe17 	ldw	r2,-8(fp)
 100832c:	10c9c83a 	sub	r4,r2,r3
 1008330:	100825c0 	call	100825c <int2seven>
 1008334:	e0bffc45 	stb	r2,-15(fp)

	out = int2seven(0) << 21 | out_sign << 14 | out_high << 7 | out_low;
 1008338:	0009883a 	mov	r4,zero
 100833c:	100825c0 	call	100825c <int2seven>
 1008340:	1006957a 	slli	r3,r2,21
 1008344:	e0bffc03 	ldbu	r2,-16(fp)
 1008348:	100493ba 	slli	r2,r2,14
 100834c:	1886b03a 	or	r3,r3,r2
 1008350:	e0bffc83 	ldbu	r2,-14(fp)
 1008354:	100491fa 	slli	r2,r2,7
 1008358:	1886b03a 	or	r3,r3,r2
 100835c:	e0bffc43 	ldbu	r2,-15(fp)
 1008360:	1884b03a 	or	r2,r3,r2
 1008364:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_LOW28_BASE, out);
 1008368:	00c04074 	movhi	r3,257
 100836c:	18c43004 	addi	r3,r3,4288
 1008370:	e0bffd17 	ldw	r2,-12(fp)
 1008374:	18800035 	stwio	r2,0(r3)
}
 1008378:	e037883a 	mov	sp,fp
 100837c:	dfc00117 	ldw	ra,4(sp)
 1008380:	df000017 	ldw	fp,0(sp)
 1008384:	dec00204 	addi	sp,sp,8
 1008388:	f800283a 	ret

0100838c <show_target_velocity>:

/*
 * shows the target velocity on the seven segment display (HEX5, HEX4)
 * when the cruise control is activated (0 otherwise)
 */
void show_target_velocity(INT8U target_vel) {
 100838c:	defffb04 	addi	sp,sp,-20
 1008390:	dfc00415 	stw	ra,16(sp)
 1008394:	df000315 	stw	fp,12(sp)
 1008398:	dc000215 	stw	r16,8(sp)
 100839c:	df000204 	addi	fp,sp,8
 10083a0:	e13fff05 	stb	r4,-4(fp)
	INT16U targetVelocityHex;
	INT8U targetDecimalHigh, targetDecimalLow;

	targetDecimalHigh = target_vel / 10;
 10083a4:	e13fff03 	ldbu	r4,-4(fp)
 10083a8:	01400284 	movi	r5,10
 10083ac:	100a1ec0 	call	100a1ec <__udivsi3>
 10083b0:	e0bffe45 	stb	r2,-7(fp)
	targetDecimalLow = target_vel - 10 * targetDecimalHigh;
 10083b4:	e13ffe43 	ldbu	r4,-7(fp)
 10083b8:	01400284 	movi	r5,10
 10083bc:	100a1fc0 	call	100a1fc <__mulsi3>
 10083c0:	1007883a 	mov	r3,r2
 10083c4:	e0bfff03 	ldbu	r2,-4(fp)
 10083c8:	10c5c83a 	sub	r2,r2,r3
 10083cc:	e0bffe05 	stb	r2,-8(fp)
	targetVelocityHex = (int2seven(targetDecimalHigh) << 7)
 10083d0:	e13ffe43 	ldbu	r4,-7(fp)
 10083d4:	100825c0 	call	100825c <int2seven>
 10083d8:	100491fa 	slli	r2,r2,7
 10083dc:	1021883a 	mov	r16,r2
 10083e0:	e13ffe03 	ldbu	r4,-8(fp)
 10083e4:	100825c0 	call	100825c <int2seven>
 10083e8:	8085883a 	add	r2,r16,r2
 10083ec:	e0bffe8d 	sth	r2,-6(fp)
			+ (int2seven(targetDecimalLow));

	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_HIGH28_BASE, targetVelocityHex);
 10083f0:	e0fffe8b 	ldhu	r3,-6(fp)
 10083f4:	00804074 	movhi	r2,257
 10083f8:	10843404 	addi	r2,r2,4304
 10083fc:	10c00035 	stwio	r3,0(r2)
}
 1008400:	e037883a 	mov	sp,fp
 1008404:	dfc00217 	ldw	ra,8(sp)
 1008408:	df000117 	ldw	fp,4(sp)
 100840c:	dc000017 	ldw	r16,0(sp)
 1008410:	dec00304 	addi	sp,sp,12
 1008414:	f800283a 	ret

01008418 <show_position>:
 * LEDR15: [800m, 1200m)
 * LEDR14: [1200m, 1600m)
 * LEDR13: [1600m, 2000m)
 * LEDR12: [2000m, 2400m]
 */
void show_position(INT16U position) {
 1008418:	defffb04 	addi	sp,sp,-20
 100841c:	dfc00415 	stw	ra,16(sp)
 1008420:	df000315 	stw	fp,12(sp)
 1008424:	df000304 	addi	fp,sp,12
 1008428:	e13fff0d 	sth	r4,-4(fp)
	int positionLEDs = 1 << (17 - (position / 4000));
 100842c:	e13fff0b 	ldhu	r4,-4(fp)
 1008430:	0143e804 	movi	r5,4000
 1008434:	100a1ec0 	call	100a1ec <__udivsi3>
 1008438:	10ffffcc 	andi	r3,r2,65535
 100843c:	00800444 	movi	r2,17
 1008440:	10c7c83a 	sub	r3,r2,r3
 1008444:	00800044 	movi	r2,1
 1008448:	10c4983a 	sll	r2,r2,r3
 100844c:	e0bffe15 	stw	r2,-8(fp)
	int currentLEDs = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
 1008450:	00804074 	movhi	r2,257
 1008454:	10843c04 	addi	r2,r2,4336
 1008458:	10800037 	ldwio	r2,0(r2)
 100845c:	e0bffd15 	stw	r2,-12(fp)
	currentLEDs = currentLEDs & ~(0x3F << 12); 					//do not overwrite the other switches' LEDs
 1008460:	e0fffd17 	ldw	r3,-12(fp)
 1008464:	00bfff34 	movhi	r2,65532
 1008468:	1083ffc4 	addi	r2,r2,4095
 100846c:	1884703a 	and	r2,r3,r2
 1008470:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA( DE2_PIO_REDLED18_BASE,
 1008474:	e0fffd17 	ldw	r3,-12(fp)
 1008478:	e0bffe17 	ldw	r2,-8(fp)
 100847c:	1886b03a 	or	r3,r3,r2
 1008480:	00804074 	movhi	r2,257
 1008484:	10843c04 	addi	r2,r2,4336
 1008488:	10c00035 	stwio	r3,0(r2)
			currentLEDs | positionLEDs);
}
 100848c:	e037883a 	mov	sp,fp
 1008490:	dfc00117 	ldw	ra,4(sp)
 1008494:	df000017 	ldw	fp,0(sp)
 1008498:	dec00204 	addi	sp,sp,8
 100849c:	f800283a 	ret

010084a0 <adjust_position>:
/*
 * The function 'adjust_position()' adjusts the position depending on the
 * acceleration and velocity.
 */
INT16U adjust_position(INT16U position, INT16S velocity, INT8S acceleration,
		INT16U time_interval) {
 10084a0:	defff704 	addi	sp,sp,-36
 10084a4:	dfc00815 	stw	ra,32(sp)
 10084a8:	df000715 	stw	fp,28(sp)
 10084ac:	dc400615 	stw	r17,24(sp)
 10084b0:	dc000515 	stw	r16,20(sp)
 10084b4:	df000504 	addi	fp,sp,20
 10084b8:	e13ffc0d 	sth	r4,-16(fp)
 10084bc:	e17ffd0d 	sth	r5,-12(fp)
 10084c0:	e1bffe05 	stb	r6,-8(fp)
 10084c4:	e1ffff0d 	sth	r7,-4(fp)
	INT16S new_position = position + velocity * time_interval / 1000
			+ acceleration / 2 * (time_interval / 1000)
					* (time_interval / 1000);
 10084c8:	e13ffd0f 	ldh	r4,-12(fp)
 10084cc:	e17fff0b 	ldhu	r5,-4(fp)
 10084d0:	100a1fc0 	call	100a1fc <__mulsi3>
 10084d4:	1009883a 	mov	r4,r2
 10084d8:	0140fa04 	movi	r5,1000
 10084dc:	100a12c0 	call	100a12c <__divsi3>
 10084e0:	1007883a 	mov	r3,r2
 10084e4:	e0bffc0b 	ldhu	r2,-16(fp)
 10084e8:	1885883a 	add	r2,r3,r2
 10084ec:	1023883a 	mov	r17,r2
 10084f0:	e0fffe07 	ldb	r3,-8(fp)
 10084f4:	1804d7fa 	srli	r2,r3,31
 10084f8:	10c5883a 	add	r2,r2,r3
 10084fc:	1005d07a 	srai	r2,r2,1
 1008500:	14003fcc 	andi	r16,r2,255
 1008504:	8400201c 	xori	r16,r16,128
 1008508:	843fe004 	addi	r16,r16,-128
 100850c:	e13fff0b 	ldhu	r4,-4(fp)
 1008510:	0140fa04 	movi	r5,1000
 1008514:	100a1ec0 	call	100a1ec <__udivsi3>
 1008518:	117fffcc 	andi	r5,r2,65535
 100851c:	8009883a 	mov	r4,r16
 1008520:	100a1fc0 	call	100a1fc <__mulsi3>
 1008524:	1021883a 	mov	r16,r2
 1008528:	e13fff0b 	ldhu	r4,-4(fp)
 100852c:	0140fa04 	movi	r5,1000
 1008530:	100a1ec0 	call	100a1ec <__udivsi3>
 1008534:	117fffcc 	andi	r5,r2,65535
 1008538:	8009883a 	mov	r4,r16
 100853c:	100a1fc0 	call	100a1fc <__mulsi3>
 1008540:	8885883a 	add	r2,r17,r2
 1008544:	e0bffb0d 	sth	r2,-20(fp)

	if (new_position > 24000) {
 1008548:	e0bffb0f 	ldh	r2,-20(fp)
 100854c:	10977050 	cmplti	r2,r2,24001
 1008550:	1000041e 	bne	r2,zero,1008564 <adjust_position+0xc4>
		new_position -= 24000;
 1008554:	e0bffb0b 	ldhu	r2,-20(fp)
 1008558:	10a89004 	addi	r2,r2,-24000
 100855c:	e0bffb0d 	sth	r2,-20(fp)
 1008560:	00000606 	br	100857c <adjust_position+0xdc>
	} else if (new_position < 0) {
 1008564:	e0bffb0f 	ldh	r2,-20(fp)
 1008568:	1004403a 	cmpge	r2,r2,zero
 100856c:	1000031e 	bne	r2,zero,100857c <adjust_position+0xdc>
		new_position += 24000;
 1008570:	e0bffb0b 	ldhu	r2,-20(fp)
 1008574:	10977004 	addi	r2,r2,24000
 1008578:	e0bffb0d 	sth	r2,-20(fp)
	}

	show_position(new_position);
 100857c:	e0bffb0b 	ldhu	r2,-20(fp)
 1008580:	113fffcc 	andi	r4,r2,65535
 1008584:	10084180 	call	1008418 <show_position>
	return new_position;
 1008588:	e0bffb0b 	ldhu	r2,-20(fp)
 100858c:	10bfffcc 	andi	r2,r2,65535
}
 1008590:	e037883a 	mov	sp,fp
 1008594:	dfc00317 	ldw	ra,12(sp)
 1008598:	df000217 	ldw	fp,8(sp)
 100859c:	dc400117 	ldw	r17,4(sp)
 10085a0:	dc000017 	ldw	r16,0(sp)
 10085a4:	dec00404 	addi	sp,sp,16
 10085a8:	f800283a 	ret

010085ac <adjust_velocity>:
/*
 * The function 'adjust_velocity()' adjusts the velocity depending on the
 * acceleration.
 */
INT16S adjust_velocity(INT16S velocity, INT8S acceleration,
		enum active brake_pedal, INT16U time_interval) {
 10085ac:	defff704 	addi	sp,sp,-36
 10085b0:	dfc00815 	stw	ra,32(sp)
 10085b4:	df000715 	stw	fp,28(sp)
 10085b8:	dc400615 	stw	r17,24(sp)
 10085bc:	dc000515 	stw	r16,20(sp)
 10085c0:	df000504 	addi	fp,sp,20
 10085c4:	e1bffe15 	stw	r6,-8(fp)
 10085c8:	e13ffc0d 	sth	r4,-16(fp)
 10085cc:	e17ffd05 	stb	r5,-12(fp)
 10085d0:	e1ffff0d 	sth	r7,-4(fp)
	INT16S new_velocity;
	INT8U brake_retardation = 200;
 10085d4:	00bff204 	movi	r2,-56
 10085d8:	e0bffb05 	stb	r2,-20(fp)

	if (brake_pedal == off)
 10085dc:	e0bffe17 	ldw	r2,-8(fp)
 10085e0:	10800058 	cmpnei	r2,r2,1
 10085e4:	1000251e 	bne	r2,zero,100867c <adjust_velocity+0xd0>
		new_velocity = velocity
 10085e8:	e13ffc0f 	ldh	r4,-16(fp)
 10085ec:	1009ea80 	call	1009ea8 <__floatsidf>
 10085f0:	1021883a 	mov	r16,r2
 10085f4:	1823883a 	mov	r17,r3
 10085f8:	e13ffd07 	ldb	r4,-12(fp)
 10085fc:	e17fff0b 	ldhu	r5,-4(fp)
 1008600:	100a1fc0 	call	100a1fc <__mulsi3>
 1008604:	1009883a 	mov	r4,r2
 1008608:	10096600 	call	1009660 <__floatsisf>
 100860c:	1009883a 	mov	r4,r2
 1008610:	10096f80 	call	10096f8 <__extendsfdf2>
 1008614:	100b883a 	mov	r5,r2
 1008618:	180d883a 	mov	r6,r3
 100861c:	2809883a 	mov	r4,r5
 1008620:	300b883a 	mov	r5,r6
 1008624:	000d883a 	mov	r6,zero
 1008628:	01d023f4 	movhi	r7,16527
 100862c:	39d00004 	addi	r7,r7,16384
 1008630:	1009c500 	call	1009c50 <__divdf3>
 1008634:	1009883a 	mov	r4,r2
 1008638:	180b883a 	mov	r5,r3
 100863c:	2005883a 	mov	r2,r4
 1008640:	2807883a 	mov	r3,r5
 1008644:	8009883a 	mov	r4,r16
 1008648:	880b883a 	mov	r5,r17
 100864c:	100d883a 	mov	r6,r2
 1008650:	180f883a 	mov	r7,r3
 1008654:	1009bdc0 	call	1009bdc <__adddf3>
 1008658:	1009883a 	mov	r4,r2
 100865c:	180b883a 	mov	r5,r3
 1008660:	2005883a 	mov	r2,r4
 1008664:	2807883a 	mov	r3,r5
 1008668:	1009883a 	mov	r4,r2
 100866c:	180b883a 	mov	r5,r3
 1008670:	1009fa00 	call	1009fa0 <__fixdfsi>
 1008674:	e0bffb8d 	sth	r2,-18(fp)
 1008678:	00001406 	br	10086cc <adjust_velocity+0x120>
				+ (float) (acceleration * time_interval) / 1000.0;
	else {
		if (brake_retardation * time_interval / 1000 > velocity)
 100867c:	e13ffb03 	ldbu	r4,-20(fp)
 1008680:	e17fff0b 	ldhu	r5,-4(fp)
 1008684:	100a1fc0 	call	100a1fc <__mulsi3>
 1008688:	1009883a 	mov	r4,r2
 100868c:	0140fa04 	movi	r5,1000
 1008690:	100a12c0 	call	100a12c <__divsi3>
 1008694:	1007883a 	mov	r3,r2
 1008698:	e0bffc0f 	ldh	r2,-16(fp)
 100869c:	10c0020e 	bge	r2,r3,10086a8 <adjust_velocity+0xfc>
			new_velocity = 0;
 10086a0:	e03ffb8d 	sth	zero,-18(fp)
 10086a4:	00000906 	br	10086cc <adjust_velocity+0x120>
		else
			new_velocity = velocity - brake_retardation * time_interval / 1000;
 10086a8:	e43ffc0b 	ldhu	r16,-16(fp)
 10086ac:	e13ffb03 	ldbu	r4,-20(fp)
 10086b0:	e17fff0b 	ldhu	r5,-4(fp)
 10086b4:	100a1fc0 	call	100a1fc <__mulsi3>
 10086b8:	1009883a 	mov	r4,r2
 10086bc:	0140fa04 	movi	r5,1000
 10086c0:	100a12c0 	call	100a12c <__divsi3>
 10086c4:	8085c83a 	sub	r2,r16,r2
 10086c8:	e0bffb8d 	sth	r2,-18(fp)
	}

	return new_velocity;
 10086cc:	e0bffb8f 	ldh	r2,-18(fp)
}
 10086d0:	e037883a 	mov	sp,fp
 10086d4:	dfc00317 	ldw	ra,12(sp)
 10086d8:	df000217 	ldw	fp,8(sp)
 10086dc:	dc400117 	ldw	r17,4(sp)
 10086e0:	dc000017 	ldw	r16,0(sp)
 10086e4:	dec00404 	addi	sp,sp,16
 10086e8:	f800283a 	ret

010086ec <VehicleTask>:

/*
 * The task 'VehicleTask' updates the current velocity of the vehicle
 */
void VehicleTask(void* pdata) {
 10086ec:	defff804 	addi	sp,sp,-32
 10086f0:	dfc00715 	stw	ra,28(sp)
 10086f4:	df000615 	stw	fp,24(sp)
 10086f8:	df000604 	addi	fp,sp,24
 10086fc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	void* msg;
	INT8U* throttle;
	INT8S acceleration; /* Value between 40 and -20 (4.0 m/s^2 and -2.0 m/s^2) */
	INT8S retardation; /* Value between 20 and -10 (2.0 m/s^2 and -1.0 m/s^2) */
	INT16U position = 0; /* Value between 0 and 20000 (0.0 m and 2000.0 m)  */
 1008700:	e03ffa8d 	sth	zero,-22(fp)
	INT16S velocity = 0; /* Value between -200 and 700 (-20.0 m/s amd 70.0 m/s) */
 1008704:	e03ffe8d 	sth	zero,-6(fp)
	INT16S wind_factor; /* Value between -10 and 20 (2.0 m/s^2 and -1.0 m/s^2) */

	alt_printf("Vehicle task created!\n");
 1008708:	01002034 	movhi	r4,128
 100870c:	21005904 	addi	r4,r4,356
 1008710:	100aaec0 	call	100aaec <alt_printf>

	while (1) {
		err = OSMboxPost(Mbox_Velocity, (void *) &velocity);
 1008714:	d1203617 	ldw	r4,-32552(gp)
 1008718:	e17ffe84 	addi	r5,fp,-6
 100871c:	100cb200 	call	100cb20 <OSMboxPost>
 1008720:	e0bffe05 	stb	r2,-8(fp)

		OSSemPend(SemVehicle,0,&err);
 1008724:	d1203e17 	ldw	r4,-32520(gp)
 1008728:	e1bffe04 	addi	r6,fp,-8
 100872c:	000b883a 	mov	r5,zero
 1008730:	100ccc40 	call	100ccc4 <OSSemPend>

		/* Non-blocking read of mailbox:
		 - message in mailbox: update throttle
		 - no message:         use old throttle
		 */
		msg = OSMboxPend(Mbox_Throttle, 1, &err);
 1008734:	d1203417 	ldw	r4,-32560(gp)
 1008738:	e1bffe04 	addi	r6,fp,-8
 100873c:	01400044 	movi	r5,1
 1008740:	100c8dc0 	call	100c8dc <OSMboxPend>
 1008744:	e0bffd15 	stw	r2,-12(fp)
		if (err == OS_NO_ERR)
 1008748:	e0bffe03 	ldbu	r2,-8(fp)
 100874c:	10803fcc 	andi	r2,r2,255
 1008750:	1004c03a 	cmpne	r2,r2,zero
 1008754:	1000021e 	bne	r2,zero,1008760 <VehicleTask+0x74>
			throttle = (INT8U*) msg;
 1008758:	e0bffd17 	ldw	r2,-12(fp)
 100875c:	e0bffc15 	stw	r2,-16(fp)

		/* Retardation : Factor of Terrain and Wind Resistance */
		if (velocity > 0)
 1008760:	e0bffe8b 	ldhu	r2,-6(fp)
 1008764:	10bfffcc 	andi	r2,r2,65535
 1008768:	10a0001c 	xori	r2,r2,32768
 100876c:	10a00004 	addi	r2,r2,-32768
 1008770:	10800050 	cmplti	r2,r2,1
 1008774:	10000f1e 	bne	r2,zero,10087b4 <VehicleTask+0xc8>
			wind_factor = velocity * velocity / 10000 + 1;
 1008778:	e0bffe8b 	ldhu	r2,-6(fp)
 100877c:	113fffcc 	andi	r4,r2,65535
 1008780:	2120001c 	xori	r4,r4,32768
 1008784:	21200004 	addi	r4,r4,-32768
 1008788:	e0bffe8b 	ldhu	r2,-6(fp)
 100878c:	117fffcc 	andi	r5,r2,65535
 1008790:	2960001c 	xori	r5,r5,32768
 1008794:	29600004 	addi	r5,r5,-32768
 1008798:	100a1fc0 	call	100a1fc <__mulsi3>
 100879c:	1009883a 	mov	r4,r2
 10087a0:	0149c404 	movi	r5,10000
 10087a4:	100a12c0 	call	100a12c <__divsi3>
 10087a8:	10800044 	addi	r2,r2,1
 10087ac:	e0bffa0d 	sth	r2,-24(fp)
 10087b0:	00000f06 	br	10087f0 <VehicleTask+0x104>
		else
			wind_factor = (-1) * velocity * velocity / 10000 + 1;
 10087b4:	e0bffe8b 	ldhu	r2,-6(fp)
 10087b8:	10bfffcc 	andi	r2,r2,65535
 10087bc:	10a0001c 	xori	r2,r2,32768
 10087c0:	10a00004 	addi	r2,r2,-32768
 10087c4:	0089c83a 	sub	r4,zero,r2
 10087c8:	e0bffe8b 	ldhu	r2,-6(fp)
 10087cc:	117fffcc 	andi	r5,r2,65535
 10087d0:	2960001c 	xori	r5,r5,32768
 10087d4:	29600004 	addi	r5,r5,-32768
 10087d8:	100a1fc0 	call	100a1fc <__mulsi3>
 10087dc:	1009883a 	mov	r4,r2
 10087e0:	0149c404 	movi	r5,10000
 10087e4:	100a12c0 	call	100a12c <__divsi3>
 10087e8:	10800044 	addi	r2,r2,1
 10087ec:	e0bffa0d 	sth	r2,-24(fp)

		if (position < 4000)
 10087f0:	e0bffa8b 	ldhu	r2,-22(fp)
 10087f4:	1083e828 	cmpgeui	r2,r2,4000
 10087f8:	1000031e 	bne	r2,zero,1008808 <VehicleTask+0x11c>
			retardation = wind_factor; // even ground
 10087fc:	e0bffa0b 	ldhu	r2,-24(fp)
 1008800:	e0bffb05 	stb	r2,-20(fp)
 1008804:	00001e06 	br	1008880 <VehicleTask+0x194>
		else if (position < 8000)
 1008808:	e0bffa8b 	ldhu	r2,-22(fp)
 100880c:	1087d028 	cmpgeui	r2,r2,8000
 1008810:	1000041e 	bne	r2,zero,1008824 <VehicleTask+0x138>
			retardation = wind_factor + 15; // traveling uphill
 1008814:	e0bffa0b 	ldhu	r2,-24(fp)
 1008818:	108003c4 	addi	r2,r2,15
 100881c:	e0bffb05 	stb	r2,-20(fp)
 1008820:	00001706 	br	1008880 <VehicleTask+0x194>
		else if (position < 12000)
 1008824:	e0bffa8b 	ldhu	r2,-22(fp)
 1008828:	108bb828 	cmpgeui	r2,r2,12000
 100882c:	1000041e 	bne	r2,zero,1008840 <VehicleTask+0x154>
			retardation = wind_factor + 25; // traveling steep uphill
 1008830:	e0bffa0b 	ldhu	r2,-24(fp)
 1008834:	10800644 	addi	r2,r2,25
 1008838:	e0bffb05 	stb	r2,-20(fp)
 100883c:	00001006 	br	1008880 <VehicleTask+0x194>
		else if (position < 16000)
 1008840:	e0bffa8b 	ldhu	r2,-22(fp)
 1008844:	108fa028 	cmpgeui	r2,r2,16000
 1008848:	1000031e 	bne	r2,zero,1008858 <VehicleTask+0x16c>
			retardation = wind_factor; // even ground
 100884c:	e0bffa0b 	ldhu	r2,-24(fp)
 1008850:	e0bffb05 	stb	r2,-20(fp)
 1008854:	00000a06 	br	1008880 <VehicleTask+0x194>
		else if (position < 20000)
 1008858:	e0bffa8b 	ldhu	r2,-22(fp)
 100885c:	10938828 	cmpgeui	r2,r2,20000
 1008860:	1000041e 	bne	r2,zero,1008874 <VehicleTask+0x188>
			retardation = wind_factor - 10; //traveling steep downhill
 1008864:	e0bffa0b 	ldhu	r2,-24(fp)
 1008868:	10bffd84 	addi	r2,r2,-10
 100886c:	e0bffb05 	stb	r2,-20(fp)
 1008870:	00000306 	br	1008880 <VehicleTask+0x194>
		else
			retardation = wind_factor - 5; // traveling downhill
 1008874:	e0bffa0b 	ldhu	r2,-24(fp)
 1008878:	10bffec4 	addi	r2,r2,-5
 100887c:	e0bffb05 	stb	r2,-20(fp)

		acceleration = *throttle / 2 - retardation;
 1008880:	e0bffc17 	ldw	r2,-16(fp)
 1008884:	10800003 	ldbu	r2,0(r2)
 1008888:	10803fcc 	andi	r2,r2,255
 100888c:	1004d07a 	srli	r2,r2,1
 1008890:	1007883a 	mov	r3,r2
 1008894:	e0bffb03 	ldbu	r2,-20(fp)
 1008898:	1885c83a 	sub	r2,r3,r2
 100889c:	e0bffb45 	stb	r2,-19(fp)
		position = adjust_position(position, velocity, acceleration, 300);
 10088a0:	e13ffa8b 	ldhu	r4,-22(fp)
 10088a4:	e0bffe8b 	ldhu	r2,-6(fp)
 10088a8:	117fffcc 	andi	r5,r2,65535
 10088ac:	2960001c 	xori	r5,r5,32768
 10088b0:	29600004 	addi	r5,r5,-32768
 10088b4:	e1bffb47 	ldb	r6,-19(fp)
 10088b8:	01c04b04 	movi	r7,300
 10088bc:	10084a00 	call	10084a0 <adjust_position>
 10088c0:	e0bffa8d 	sth	r2,-22(fp)
		velocity = adjust_velocity(velocity, acceleration, brake_pedal, 300);
 10088c4:	e0bffe8b 	ldhu	r2,-6(fp)
 10088c8:	113fffcc 	andi	r4,r2,65535
 10088cc:	2120001c 	xori	r4,r4,32768
 10088d0:	21200004 	addi	r4,r4,-32768
 10088d4:	e17ffb47 	ldb	r5,-19(fp)
 10088d8:	d1a00117 	ldw	r6,-32764(gp)
 10088dc:	01c04b04 	movi	r7,300
 10088e0:	10085ac0 	call	10085ac <adjust_velocity>
 10088e4:	e0bffe8d 	sth	r2,-6(fp)
		alt_printf("Position: %x m\n", position / 10);
 10088e8:	e13ffa8b 	ldhu	r4,-22(fp)
 10088ec:	01400284 	movi	r5,10
 10088f0:	100a1ec0 	call	100a1ec <__udivsi3>
 10088f4:	117fffcc 	andi	r5,r2,65535
 10088f8:	01002034 	movhi	r4,128
 10088fc:	21005f04 	addi	r4,r4,380
 1008900:	100aaec0 	call	100aaec <alt_printf>
		alt_printf("Velocity: %x m/s\n", velocity / 10.0);
 1008904:	e0bffe8b 	ldhu	r2,-6(fp)
 1008908:	113fffcc 	andi	r4,r2,65535
 100890c:	2120001c 	xori	r4,r4,32768
 1008910:	21200004 	addi	r4,r4,-32768
 1008914:	1009ea80 	call	1009ea8 <__floatsidf>
 1008918:	100b883a 	mov	r5,r2
 100891c:	180d883a 	mov	r6,r3
 1008920:	2809883a 	mov	r4,r5
 1008924:	300b883a 	mov	r5,r6
 1008928:	000d883a 	mov	r6,zero
 100892c:	01d00934 	movhi	r7,16420
 1008930:	1009c500 	call	1009c50 <__divdf3>
 1008934:	1009883a 	mov	r4,r2
 1008938:	180b883a 	mov	r5,r3
 100893c:	2005883a 	mov	r2,r4
 1008940:	2807883a 	mov	r3,r5
 1008944:	01002034 	movhi	r4,128
 1008948:	21006304 	addi	r4,r4,396
 100894c:	100b883a 	mov	r5,r2
 1008950:	180d883a 	mov	r6,r3
 1008954:	100aaec0 	call	100aaec <alt_printf>
		alt_printf("Throttle: %x V\n", *throttle / 10);
 1008958:	e0bffc17 	ldw	r2,-16(fp)
 100895c:	10800003 	ldbu	r2,0(r2)
 1008960:	11003fcc 	andi	r4,r2,255
 1008964:	01400284 	movi	r5,10
 1008968:	100a1ec0 	call	100a1ec <__udivsi3>
 100896c:	11403fcc 	andi	r5,r2,255
 1008970:	01002034 	movhi	r4,128
 1008974:	21006804 	addi	r4,r4,416
 1008978:	100aaec0 	call	100aaec <alt_printf>
		show_velocity_on_sevenseg((INT8S) (velocity / 10));
 100897c:	e0bffe8b 	ldhu	r2,-6(fp)
 1008980:	113fffcc 	andi	r4,r2,65535
 1008984:	2120001c 	xori	r4,r4,32768
 1008988:	21200004 	addi	r4,r4,-32768
 100898c:	01400284 	movi	r5,10
 1008990:	100a12c0 	call	100a12c <__divsi3>
 1008994:	11003fcc 	andi	r4,r2,255
 1008998:	2100201c 	xori	r4,r4,128
 100899c:	213fe004 	addi	r4,r4,-128
 10089a0:	10082980 	call	1008298 <show_velocity_on_sevenseg>
	}
 10089a4:	003f5b06 	br	1008714 <VehicleTask+0x28>

010089a8 <ControlTask>:
/*
 * The task 'ControlTask' is the main task of the application. It reacts
 * on sensors and generates responses.
 */

void ControlTask(void* pdata) {
 10089a8:	defff704 	addi	sp,sp,-36
 10089ac:	dfc00815 	stw	ra,32(sp)
 10089b0:	df000715 	stw	fp,28(sp)
 10089b4:	dc000615 	stw	r16,24(sp)
 10089b8:	df000604 	addi	fp,sp,24
 10089bc:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U throttle = 0; /* Value between 0 and 80, which is interpreted as between 0.0V and 8.0V */
 10089c0:	e03ffe45 	stb	zero,-7(fp)
	void* msg;
	INT16S* current_velocity;
	INT8U target_velocity;
	INT16U tempo;

	alt_printf("Control Task created!\n");
 10089c4:	01002034 	movhi	r4,128
 10089c8:	21006c04 	addi	r4,r4,432
 10089cc:	100aaec0 	call	100aaec <alt_printf>

	while (1) {
		msg = OSMboxPend(Mbox_Velocity, 0, &err);
 10089d0:	d1203617 	ldw	r4,-32552(gp)
 10089d4:	e1bffe04 	addi	r6,fp,-8
 10089d8:	000b883a 	mov	r5,zero
 10089dc:	100c8dc0 	call	100c8dc <OSMboxPend>
 10089e0:	e0bffd15 	stw	r2,-12(fp)
		current_velocity = (INT16S*) msg;
 10089e4:	e0bffd17 	ldw	r2,-12(fp)
 10089e8:	e0bffc15 	stw	r2,-16(fp)

		if(!ENGINE && !(*current_velocity)) engine = off;
 10089ec:	d0a03003 	ldbu	r2,-32576(gp)
 10089f0:	10803fcc 	andi	r2,r2,255
 10089f4:	1004c03a 	cmpne	r2,r2,zero
 10089f8:	10000a1e 	bne	r2,zero,1008a24 <ControlTask+0x7c>
 10089fc:	e0bffc17 	ldw	r2,-16(fp)
 1008a00:	1080000b 	ldhu	r2,0(r2)
 1008a04:	10bfffcc 	andi	r2,r2,65535
 1008a08:	10a0001c 	xori	r2,r2,32768
 1008a0c:	10a00004 	addi	r2,r2,-32768
 1008a10:	1004c03a 	cmpne	r2,r2,zero
 1008a14:	1000031e 	bne	r2,zero,1008a24 <ControlTask+0x7c>
 1008a18:	00800044 	movi	r2,1
 1008a1c:	d0a00315 	stw	r2,-32756(gp)
 1008a20:	00000106 	br	1008a28 <ControlTask+0x80>
		else engine = on;
 1008a24:	d0200315 	stw	zero,-32756(gp)
		if(engine == on) {
 1008a28:	d0a00317 	ldw	r2,-32756(gp)
 1008a2c:	1004c03a 	cmpne	r2,r2,zero
 1008a30:	1000d11e 	bne	r2,zero,1008d78 <ControlTask+0x3d0>
			if(TOP_GEAR) top_gear = on;
 1008a34:	d0a03043 	ldbu	r2,-32575(gp)
 1008a38:	10803fcc 	andi	r2,r2,255
 1008a3c:	1005003a 	cmpeq	r2,r2,zero
 1008a40:	1000021e 	bne	r2,zero,1008a4c <ControlTask+0xa4>
 1008a44:	d0200215 	stw	zero,-32760(gp)
 1008a48:	00000206 	br	1008a54 <ControlTask+0xac>
			else top_gear = off;
 1008a4c:	00800044 	movi	r2,1
 1008a50:	d0a00215 	stw	r2,-32760(gp)

			if(BRAKE_PEDAL) brake_pedal = on;
 1008a54:	d0a030c3 	ldbu	r2,-32573(gp)
 1008a58:	10803fcc 	andi	r2,r2,255
 1008a5c:	1005003a 	cmpeq	r2,r2,zero
 1008a60:	1000021e 	bne	r2,zero,1008a6c <ControlTask+0xc4>
 1008a64:	d0200115 	stw	zero,-32764(gp)
 1008a68:	00000206 	br	1008a74 <ControlTask+0xcc>
			else brake_pedal = off;
 1008a6c:	00800044 	movi	r2,1
 1008a70:	d0a00115 	stw	r2,-32764(gp)

			if(GAS_PEDAL) gas_pedal = on;
 1008a74:	d0a03083 	ldbu	r2,-32574(gp)
 1008a78:	10803fcc 	andi	r2,r2,255
 1008a7c:	1005003a 	cmpeq	r2,r2,zero
 1008a80:	1000021e 	bne	r2,zero,1008a8c <ControlTask+0xe4>
 1008a84:	d0200015 	stw	zero,-32768(gp)
 1008a88:	00000206 	br	1008a94 <ControlTask+0xec>
			else gas_pedal = off;
 1008a8c:	00800044 	movi	r2,1
 1008a90:	d0a00015 	stw	r2,-32768(gp)

			if(gas_pedal == on) {
 1008a94:	d0a00017 	ldw	r2,-32768(gp)
 1008a98:	1004c03a 	cmpne	r2,r2,zero
 1008a9c:	10000a1e 	bne	r2,zero,1008ac8 <ControlTask+0x120>
				if(throttle >= 75) throttle = 80;
 1008aa0:	e0bffe43 	ldbu	r2,-7(fp)
 1008aa4:	10803fcc 	andi	r2,r2,255
 1008aa8:	108012f0 	cmpltui	r2,r2,75
 1008aac:	1000031e 	bne	r2,zero,1008abc <ControlTask+0x114>
 1008ab0:	00801404 	movi	r2,80
 1008ab4:	e0bffe45 	stb	r2,-7(fp)
 1008ab8:	00000306 	br	1008ac8 <ControlTask+0x120>
				else throttle += 5;
 1008abc:	e0bffe43 	ldbu	r2,-7(fp)
 1008ac0:	10800144 	addi	r2,r2,5
 1008ac4:	e0bffe45 	stb	r2,-7(fp)
			}
			if(brake_pedal == on) {
 1008ac8:	d0a00117 	ldw	r2,-32764(gp)
 1008acc:	1004c03a 	cmpne	r2,r2,zero
 1008ad0:	10000e1e 	bne	r2,zero,1008b0c <ControlTask+0x164>
				if(throttle <= 5 || ((INT8U) *current_velocity) == 0) throttle = 0;
 1008ad4:	e0bffe43 	ldbu	r2,-7(fp)
 1008ad8:	10803fcc 	andi	r2,r2,255
 1008adc:	108001b0 	cmpltui	r2,r2,6
 1008ae0:	1000051e 	bne	r2,zero,1008af8 <ControlTask+0x150>
 1008ae4:	e0bffc17 	ldw	r2,-16(fp)
 1008ae8:	1080000b 	ldhu	r2,0(r2)
 1008aec:	10803fcc 	andi	r2,r2,255
 1008af0:	1004c03a 	cmpne	r2,r2,zero
 1008af4:	1000021e 	bne	r2,zero,1008b00 <ControlTask+0x158>
 1008af8:	e03ffe45 	stb	zero,-7(fp)
 1008afc:	00000306 	br	1008b0c <ControlTask+0x164>
				else throttle -= 5;
 1008b00:	e0bffe43 	ldbu	r2,-7(fp)
 1008b04:	10bffec4 	addi	r2,r2,-5
 1008b08:	e0bffe45 	stb	r2,-7(fp)
			}

			if((*current_velocity) >= 200 && CRUISE_CONTROL) {
 1008b0c:	e0bffc17 	ldw	r2,-16(fp)
 1008b10:	1080000b 	ldhu	r2,0(r2)
 1008b14:	10bfffcc 	andi	r2,r2,65535
 1008b18:	10a0001c 	xori	r2,r2,32768
 1008b1c:	10a00004 	addi	r2,r2,-32768
 1008b20:	10803210 	cmplti	r2,r2,200
 1008b24:	1000121e 	bne	r2,zero,1008b70 <ControlTask+0x1c8>
 1008b28:	d0a03103 	ldbu	r2,-32572(gp)
 1008b2c:	10803fcc 	andi	r2,r2,255
 1008b30:	1005003a 	cmpeq	r2,r2,zero
 1008b34:	10000e1e 	bne	r2,zero,1008b70 <ControlTask+0x1c8>
				if(cruise_control == off) target_velocity = (INT8U) (*current_velocity / 10);
 1008b38:	d0a00417 	ldw	r2,-32752(gp)
 1008b3c:	10800058 	cmpnei	r2,r2,1
 1008b40:	1000081e 	bne	r2,zero,1008b64 <ControlTask+0x1bc>
 1008b44:	e0bffc17 	ldw	r2,-16(fp)
 1008b48:	1080000b 	ldhu	r2,0(r2)
 1008b4c:	113fffcc 	andi	r4,r2,65535
 1008b50:	2120001c 	xori	r4,r4,32768
 1008b54:	21200004 	addi	r4,r4,-32768
 1008b58:	01400284 	movi	r5,10
 1008b5c:	100a12c0 	call	100a12c <__divsi3>
 1008b60:	e0bffb85 	stb	r2,-18(fp)
				cruise_control = on;
 1008b64:	d0200415 	stw	zero,-32752(gp)
				show_target_velocity(target_velocity);
 1008b68:	e13ffb83 	ldbu	r4,-18(fp)
 1008b6c:	100838c0 	call	100838c <show_target_velocity>
			}

			if(gas_pedal == on || brake_pedal == on || top_gear == off) {
 1008b70:	d0a00017 	ldw	r2,-32768(gp)
 1008b74:	1005003a 	cmpeq	r2,r2,zero
 1008b78:	1000061e 	bne	r2,zero,1008b94 <ControlTask+0x1ec>
 1008b7c:	d0a00117 	ldw	r2,-32764(gp)
 1008b80:	1005003a 	cmpeq	r2,r2,zero
 1008b84:	1000031e 	bne	r2,zero,1008b94 <ControlTask+0x1ec>
 1008b88:	d0a00217 	ldw	r2,-32760(gp)
 1008b8c:	10800058 	cmpnei	r2,r2,1
 1008b90:	10000f1e 	bne	r2,zero,1008bd0 <ControlTask+0x228>
				cruise_control = off;
 1008b94:	00800044 	movi	r2,1
 1008b98:	d0a00415 	stw	r2,-32752(gp)
				tempo = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
 1008b9c:	00804074 	movhi	r2,257
 1008ba0:	10843804 	addi	r2,r2,4320
 1008ba4:	10800037 	ldwio	r2,0(r2)
 1008ba8:	e0bffb0d 	sth	r2,-20(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,tempo & ~1);
 1008bac:	e0fffb0b 	ldhu	r3,-20(fp)
 1008bb0:	00bfff84 	movi	r2,-2
 1008bb4:	1886703a 	and	r3,r3,r2
 1008bb8:	00804074 	movhi	r2,257
 1008bbc:	10843804 	addi	r2,r2,4320
 1008bc0:	10c00035 	stwio	r3,0(r2)
				target_velocity = 0;
 1008bc4:	e03ffb85 	stb	zero,-18(fp)
				show_target_velocity(target_velocity);
 1008bc8:	e13ffb83 	ldbu	r4,-18(fp)
 1008bcc:	100838c0 	call	100838c <show_target_velocity>
			}

			if(cruise_control == on) {
 1008bd0:	d0a00417 	ldw	r2,-32752(gp)
 1008bd4:	1004c03a 	cmpne	r2,r2,zero
 1008bd8:	1000671e 	bne	r2,zero,1008d78 <ControlTask+0x3d0>

				alt_printf("Target Velocity: %x\n",(int) (target_velocity));
 1008bdc:	e17ffb83 	ldbu	r5,-18(fp)
 1008be0:	01002034 	movhi	r4,128
 1008be4:	21007204 	addi	r4,r4,456
 1008be8:	100aaec0 	call	100aaec <alt_printf>
				tempo = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
 1008bec:	00804074 	movhi	r2,257
 1008bf0:	10843804 	addi	r2,r2,4320
 1008bf4:	10800037 	ldwio	r2,0(r2)
 1008bf8:	e0bffb0d 	sth	r2,-20(fp)
				tempo = tempo & ~1;
 1008bfc:	e0fffb0b 	ldhu	r3,-20(fp)
 1008c00:	00bfff84 	movi	r2,-2
 1008c04:	1884703a 	and	r2,r3,r2
 1008c08:	e0bffb0d 	sth	r2,-20(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,tempo | 1);	// writes 1 to the "cruise control" led w/o overwriting the others
 1008c0c:	e0bffb0b 	ldhu	r2,-20(fp)
 1008c10:	10800054 	ori	r2,r2,1
 1008c14:	10ffffcc 	andi	r3,r2,65535
 1008c18:	00804074 	movhi	r2,257
 1008c1c:	10843804 	addi	r2,r2,4320
 1008c20:	10c00035 	stwio	r3,0(r2)

				int delta = (*current_velocity)-10* ((int)target_velocity);
 1008c24:	e0bffc17 	ldw	r2,-16(fp)
 1008c28:	1080000b 	ldhu	r2,0(r2)
 1008c2c:	143fffcc 	andi	r16,r2,65535
 1008c30:	8420001c 	xori	r16,r16,32768
 1008c34:	84200004 	addi	r16,r16,-32768
 1008c38:	e13ffb83 	ldbu	r4,-18(fp)
 1008c3c:	01400284 	movi	r5,10
 1008c40:	100a1fc0 	call	100a1fc <__mulsi3>
 1008c44:	8085c83a 	sub	r2,r16,r2
 1008c48:	e0bffa15 	stw	r2,-24(fp)
				if(delta >= 20){
 1008c4c:	e0bffa17 	ldw	r2,-24(fp)
 1008c50:	10800510 	cmplti	r2,r2,20
 1008c54:	10000a1e 	bne	r2,zero,1008c80 <ControlTask+0x2d8>
					if(throttle <= 10) throttle = 0;
 1008c58:	e0bffe43 	ldbu	r2,-7(fp)
 1008c5c:	10803fcc 	andi	r2,r2,255
 1008c60:	108002e8 	cmpgeui	r2,r2,11
 1008c64:	1000021e 	bne	r2,zero,1008c70 <ControlTask+0x2c8>
 1008c68:	e03ffe45 	stb	zero,-7(fp)
 1008c6c:	00004206 	br	1008d78 <ControlTask+0x3d0>
					else throttle -= 10;
 1008c70:	e0bffe43 	ldbu	r2,-7(fp)
 1008c74:	10bffd84 	addi	r2,r2,-10
 1008c78:	e0bffe45 	stb	r2,-7(fp)
 1008c7c:	00003e06 	br	1008d78 <ControlTask+0x3d0>
				}
				else if(delta >= 10){
 1008c80:	e0bffa17 	ldw	r2,-24(fp)
 1008c84:	10800290 	cmplti	r2,r2,10
 1008c88:	10000a1e 	bne	r2,zero,1008cb4 <ControlTask+0x30c>
					if(throttle <= 5) throttle = 0;
 1008c8c:	e0bffe43 	ldbu	r2,-7(fp)
 1008c90:	10803fcc 	andi	r2,r2,255
 1008c94:	108001a8 	cmpgeui	r2,r2,6
 1008c98:	1000021e 	bne	r2,zero,1008ca4 <ControlTask+0x2fc>
 1008c9c:	e03ffe45 	stb	zero,-7(fp)
 1008ca0:	00003506 	br	1008d78 <ControlTask+0x3d0>
					else throttle -= 5;
 1008ca4:	e0bffe43 	ldbu	r2,-7(fp)
 1008ca8:	10bffec4 	addi	r2,r2,-5
 1008cac:	e0bffe45 	stb	r2,-7(fp)
 1008cb0:	00003106 	br	1008d78 <ControlTask+0x3d0>
				}
				else if(delta >= 4){
 1008cb4:	e0bffa17 	ldw	r2,-24(fp)
 1008cb8:	10800110 	cmplti	r2,r2,4
 1008cbc:	1000081e 	bne	r2,zero,1008ce0 <ControlTask+0x338>
					if(throttle != 0) throttle--;
 1008cc0:	e0bffe43 	ldbu	r2,-7(fp)
 1008cc4:	10803fcc 	andi	r2,r2,255
 1008cc8:	1005003a 	cmpeq	r2,r2,zero
 1008ccc:	10002a1e 	bne	r2,zero,1008d78 <ControlTask+0x3d0>
 1008cd0:	e0bffe43 	ldbu	r2,-7(fp)
 1008cd4:	10bfffc4 	addi	r2,r2,-1
 1008cd8:	e0bffe45 	stb	r2,-7(fp)
 1008cdc:	00002606 	br	1008d78 <ControlTask+0x3d0>
				}
				else if(delta <= -20){
 1008ce0:	e0bffa17 	ldw	r2,-24(fp)
 1008ce4:	10bffb48 	cmpgei	r2,r2,-19
 1008ce8:	10000b1e 	bne	r2,zero,1008d18 <ControlTask+0x370>
					if(throttle >= 70) throttle = 80;
 1008cec:	e0bffe43 	ldbu	r2,-7(fp)
 1008cf0:	10803fcc 	andi	r2,r2,255
 1008cf4:	108011b0 	cmpltui	r2,r2,70
 1008cf8:	1000031e 	bne	r2,zero,1008d08 <ControlTask+0x360>
 1008cfc:	00801404 	movi	r2,80
 1008d00:	e0bffe45 	stb	r2,-7(fp)
 1008d04:	00001c06 	br	1008d78 <ControlTask+0x3d0>
					else throttle += 10;
 1008d08:	e0bffe43 	ldbu	r2,-7(fp)
 1008d0c:	10800284 	addi	r2,r2,10
 1008d10:	e0bffe45 	stb	r2,-7(fp)
 1008d14:	00001806 	br	1008d78 <ControlTask+0x3d0>
				}
				else if(delta <= -10){
 1008d18:	e0bffa17 	ldw	r2,-24(fp)
 1008d1c:	10bffdc8 	cmpgei	r2,r2,-9
 1008d20:	10000b1e 	bne	r2,zero,1008d50 <ControlTask+0x3a8>
					if(throttle >= 75) throttle = 80;
 1008d24:	e0bffe43 	ldbu	r2,-7(fp)
 1008d28:	10803fcc 	andi	r2,r2,255
 1008d2c:	108012f0 	cmpltui	r2,r2,75
 1008d30:	1000031e 	bne	r2,zero,1008d40 <ControlTask+0x398>
 1008d34:	00801404 	movi	r2,80
 1008d38:	e0bffe45 	stb	r2,-7(fp)
 1008d3c:	00000e06 	br	1008d78 <ControlTask+0x3d0>
					else throttle += 5;
 1008d40:	e0bffe43 	ldbu	r2,-7(fp)
 1008d44:	10800144 	addi	r2,r2,5
 1008d48:	e0bffe45 	stb	r2,-7(fp)
 1008d4c:	00000a06 	br	1008d78 <ControlTask+0x3d0>
				}
				else if(delta <= -4){
 1008d50:	e0bffa17 	ldw	r2,-24(fp)
 1008d54:	10bfff48 	cmpgei	r2,r2,-3
 1008d58:	1000071e 	bne	r2,zero,1008d78 <ControlTask+0x3d0>
					if(throttle != 80) throttle ++;
 1008d5c:	e0bffe43 	ldbu	r2,-7(fp)
 1008d60:	10803fcc 	andi	r2,r2,255
 1008d64:	10801420 	cmpeqi	r2,r2,80
 1008d68:	1000031e 	bne	r2,zero,1008d78 <ControlTask+0x3d0>
 1008d6c:	e0bffe43 	ldbu	r2,-7(fp)
 1008d70:	10800044 	addi	r2,r2,1
 1008d74:	e0bffe45 	stb	r2,-7(fp)
				}
			}
		}

		err = OSMboxPost(Mbox_Throttle, (void *) &throttle);
 1008d78:	d1203417 	ldw	r4,-32560(gp)
 1008d7c:	e17ffe44 	addi	r5,fp,-7
 1008d80:	100cb200 	call	100cb20 <OSMboxPost>
 1008d84:	e0bffe05 	stb	r2,-8(fp)

		OSSemPend(SemControl,0,&err);
 1008d88:	d1203817 	ldw	r4,-32544(gp)
 1008d8c:	e1bffe04 	addi	r6,fp,-8
 1008d90:	000b883a 	mov	r5,zero
 1008d94:	100ccc40 	call	100ccc4 <OSSemPend>
	}
 1008d98:	003f0d06 	br	10089d0 <ControlTask+0x28>

01008d9c <SwitchIO>:

/*
 * The task 'SwitchIO' read the switches periodically and lights up the red leds
 */

void SwitchIO(void* pdata) {
 1008d9c:	defffb04 	addi	sp,sp,-20
 1008da0:	dfc00415 	stw	ra,16(sp)
 1008da4:	df000315 	stw	fp,12(sp)
 1008da8:	df000304 	addi	fp,sp,12
 1008dac:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT32U current_led;
	while(1) {
		led_red = 0;
 1008db0:	d0202f15 	stw	zero,-32580(gp)
		if(switches_pressed() & TOP_GEAR_FLAG) {
 1008db4:	10080680 	call	1008068 <switches_pressed>
 1008db8:	1080008c 	andi	r2,r2,2
 1008dbc:	1005003a 	cmpeq	r2,r2,zero
 1008dc0:	1000061e 	bne	r2,zero,1008ddc <SwitchIO+0x40>
			TOP_GEAR = 1;
 1008dc4:	00800044 	movi	r2,1
 1008dc8:	d0a03045 	stb	r2,-32575(gp)
			led_red += LED_RED_1;
 1008dcc:	d0a02f17 	ldw	r2,-32580(gp)
 1008dd0:	10800084 	addi	r2,r2,2
 1008dd4:	d0a02f15 	stw	r2,-32580(gp)
 1008dd8:	00000106 	br	1008de0 <SwitchIO+0x44>
		}
		else {
			TOP_GEAR = 0;
 1008ddc:	d0203045 	stb	zero,-32575(gp)
		}
		if(switches_pressed() & ENGINE_FLAG) {
 1008de0:	10080680 	call	1008068 <switches_pressed>
 1008de4:	1080004c 	andi	r2,r2,1
 1008de8:	10803fcc 	andi	r2,r2,255
 1008dec:	1005003a 	cmpeq	r2,r2,zero
 1008df0:	1000061e 	bne	r2,zero,1008e0c <SwitchIO+0x70>
			ENGINE = 1;
 1008df4:	00800044 	movi	r2,1
 1008df8:	d0a03005 	stb	r2,-32576(gp)
			led_red += LED_RED_0;
 1008dfc:	d0a02f17 	ldw	r2,-32580(gp)
 1008e00:	10800044 	addi	r2,r2,1
 1008e04:	d0a02f15 	stw	r2,-32580(gp)
 1008e08:	00000106 	br	1008e10 <SwitchIO+0x74>
		}
		else {
			ENGINE = 0;
 1008e0c:	d0203005 	stb	zero,-32576(gp)
		}
		current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
 1008e10:	00804074 	movhi	r2,257
 1008e14:	10843c04 	addi	r2,r2,4336
 1008e18:	10800037 	ldwio	r2,0(r2)
 1008e1c:	e0bffd15 	stw	r2,-12(fp)
		current_led = current_led & ~(0xfff);
 1008e20:	e0fffd17 	ldw	r3,-12(fp)
 1008e24:	00bc0004 	movi	r2,-4096
 1008e28:	1884703a 	and	r2,r3,r2
 1008e2c:	e0bffd15 	stw	r2,-12(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,led_red | current_led);
 1008e30:	d0e02f17 	ldw	r3,-32580(gp)
 1008e34:	e0bffd17 	ldw	r2,-12(fp)
 1008e38:	1884b03a 	or	r2,r3,r2
 1008e3c:	1007883a 	mov	r3,r2
 1008e40:	00804074 	movhi	r2,257
 1008e44:	10843c04 	addi	r2,r2,4336
 1008e48:	10c00035 	stwio	r3,0(r2)

		OSSemPend(SemSwitches,0,&err);
 1008e4c:	d1203217 	ldw	r4,-32568(gp)
 1008e50:	e1bffe04 	addi	r6,fp,-8
 1008e54:	000b883a 	mov	r5,zero
 1008e58:	100ccc40 	call	100ccc4 <OSSemPend>
	}
 1008e5c:	003fd406 	br	1008db0 <SwitchIO+0x14>

01008e60 <ButtonsIO>:

/*
 * The task 'ButtonsIO' read the buttons periodically and lights up the green leds
 */

void ButtonsIO(void* pdata) {
 1008e60:	defffc04 	addi	sp,sp,-16
 1008e64:	dfc00315 	stw	ra,12(sp)
 1008e68:	df000215 	stw	fp,8(sp)
 1008e6c:	df000204 	addi	fp,sp,8
 1008e70:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT16U current_led;
	while(1) {
		led_green = 0;
 1008e74:	d0202e0d 	sth	zero,-32584(gp)
		if(buttons_pressed() & GAS_PEDAL_FLAG) {
 1008e78:	100803c0 	call	100803c <buttons_pressed>
 1008e7c:	1080020c 	andi	r2,r2,8
 1008e80:	1005003a 	cmpeq	r2,r2,zero
 1008e84:	1000061e 	bne	r2,zero,1008ea0 <ButtonsIO+0x40>
			GAS_PEDAL = 1;
 1008e88:	00800044 	movi	r2,1
 1008e8c:	d0a03085 	stb	r2,-32574(gp)
			led_green += LED_GREEN_6;
 1008e90:	d0a02e0b 	ldhu	r2,-32584(gp)
 1008e94:	10801004 	addi	r2,r2,64
 1008e98:	d0a02e0d 	sth	r2,-32584(gp)
 1008e9c:	00000106 	br	1008ea4 <ButtonsIO+0x44>
		}
		else {
			GAS_PEDAL = 0;
 1008ea0:	d0203085 	stb	zero,-32574(gp)
		}
		if(buttons_pressed() & BRAKE_PEDAL_FLAG) {
 1008ea4:	100803c0 	call	100803c <buttons_pressed>
 1008ea8:	1080010c 	andi	r2,r2,4
 1008eac:	1005003a 	cmpeq	r2,r2,zero
 1008eb0:	1000061e 	bne	r2,zero,1008ecc <ButtonsIO+0x6c>
			BRAKE_PEDAL = 1;
 1008eb4:	00800044 	movi	r2,1
 1008eb8:	d0a030c5 	stb	r2,-32573(gp)
			led_green += LED_GREEN_4;
 1008ebc:	d0a02e0b 	ldhu	r2,-32584(gp)
 1008ec0:	10800404 	addi	r2,r2,16
 1008ec4:	d0a02e0d 	sth	r2,-32584(gp)
 1008ec8:	00000106 	br	1008ed0 <ButtonsIO+0x70>
		}
		else {
			BRAKE_PEDAL = 0;
 1008ecc:	d02030c5 	stb	zero,-32573(gp)
		}
		if(buttons_pressed() & CRUISE_CONTROL_FLAG) {
 1008ed0:	100803c0 	call	100803c <buttons_pressed>
 1008ed4:	1080008c 	andi	r2,r2,2
 1008ed8:	1005003a 	cmpeq	r2,r2,zero
 1008edc:	1000061e 	bne	r2,zero,1008ef8 <ButtonsIO+0x98>
			CRUISE_CONTROL = 1;
 1008ee0:	00800044 	movi	r2,1
 1008ee4:	d0a03105 	stb	r2,-32572(gp)
			led_green += LED_GREEN_2;
 1008ee8:	d0a02e0b 	ldhu	r2,-32584(gp)
 1008eec:	10800104 	addi	r2,r2,4
 1008ef0:	d0a02e0d 	sth	r2,-32584(gp)
 1008ef4:	00000106 	br	1008efc <ButtonsIO+0x9c>
		}
		else {
			CRUISE_CONTROL = 0;
 1008ef8:	d0203105 	stb	zero,-32572(gp)
		}
		current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
 1008efc:	00804074 	movhi	r2,257
 1008f00:	10843804 	addi	r2,r2,4320
 1008f04:	10800037 	ldwio	r2,0(r2)
 1008f08:	e0bffe0d 	sth	r2,-8(fp)
		current_led = current_led & 0x01;
 1008f0c:	e0bffe0b 	ldhu	r2,-8(fp)
 1008f10:	1080004c 	andi	r2,r2,1
 1008f14:	e0bffe0d 	sth	r2,-8(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,led_green | current_led);
 1008f18:	d0e02e0b 	ldhu	r3,-32584(gp)
 1008f1c:	e0bffe0b 	ldhu	r2,-8(fp)
 1008f20:	1884b03a 	or	r2,r3,r2
 1008f24:	10ffffcc 	andi	r3,r2,65535
 1008f28:	00804074 	movhi	r2,257
 1008f2c:	10843804 	addi	r2,r2,4320
 1008f30:	10c00035 	stwio	r3,0(r2)

		OSSemPend(SemButtons,0,&err);
 1008f34:	d1204017 	ldw	r4,-32512(gp)
 1008f38:	e1bffe84 	addi	r6,fp,-6
 1008f3c:	000b883a 	mov	r5,zero
 1008f40:	100ccc40 	call	100ccc4 <OSSemPend>
	}
 1008f44:	003fcb06 	br	1008e74 <ButtonsIO+0x14>

01008f48 <OverloadDetection>:
}

void OverloadDetection(void* pdata) {
 1008f48:	defffc04 	addi	sp,sp,-16
 1008f4c:	dfc00315 	stw	ra,12(sp)
 1008f50:	df000215 	stw	fp,8(sp)
 1008f54:	df000204 	addi	fp,sp,8
 1008f58:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	while(1) {
		OSSemPend(SemOverload,0,&err);
 1008f5c:	d1203f17 	ldw	r4,-32516(gp)
 1008f60:	000b883a 	mov	r5,zero
 1008f64:	e1bffe04 	addi	r6,fp,-8
 1008f68:	100ccc40 	call	100ccc4 <OSSemPend>
		OSTmrStart(TimerWatchdog,&err);
 1008f6c:	d1203917 	ldw	r4,-32540(gp)
 1008f70:	e17ffe04 	addi	r5,fp,-8
 1008f74:	100dc440 	call	100dc44 <OSTmrStart>
	}
 1008f78:	003ff806 	br	1008f5c <OverloadDetection+0x14>

01008f7c <Extraload>:
}

void Extraload(void* pdata) {
 1008f7c:	defff704 	addi	sp,sp,-36
 1008f80:	dfc00815 	stw	ra,32(sp)
 1008f84:	df000715 	stw	fp,28(sp)
 1008f88:	df000704 	addi	fp,sp,28
 1008f8c:	e13fff15 	stw	r4,-4(fp)
	INT32U current_led;
	INT8U err;
	INT8U next_load = 0;
 1008f90:	e03ffc85 	stb	zero,-14(fp)
	INT8U load = 0;
 1008f94:	e03ffc45 	stb	zero,-15(fp)
	INT8U t = 0;
 1008f98:	e03ffc05 	stb	zero,-16(fp)
	while(1) {
		next_load = ((switches_pressed()>>4) & 0x3f);
 1008f9c:	10080680 	call	1008068 <switches_pressed>
 1008fa0:	1005d13a 	srai	r2,r2,4
 1008fa4:	10800fcc 	andi	r2,r2,63
 1008fa8:	e0bffc85 	stb	r2,-14(fp)
		if (next_load > 50) next_load = 50;
 1008fac:	e0bffc83 	ldbu	r2,-14(fp)
 1008fb0:	10800cf0 	cmpltui	r2,r2,51
 1008fb4:	1000021e 	bne	r2,zero,1008fc0 <Extraload+0x44>
 1008fb8:	00800c84 	movi	r2,50
 1008fbc:	e0bffc85 	stb	r2,-14(fp)
		if(load != next_load){
 1008fc0:	e0fffc43 	ldbu	r3,-15(fp)
 1008fc4:	e0bffc83 	ldbu	r2,-14(fp)
 1008fc8:	18803326 	beq	r3,r2,1009098 <Extraload+0x11c>
			load = next_load;
 1008fcc:	e0bffc83 	ldbu	r2,-14(fp)
 1008fd0:	e0bffc45 	stb	r2,-15(fp)
			current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
 1008fd4:	00804074 	movhi	r2,257
 1008fd8:	10843c04 	addi	r2,r2,4336
 1008fdc:	10800037 	ldwio	r2,0(r2)
 1008fe0:	e0bffd15 	stw	r2,-12(fp)
			current_led = current_led & 0x3fc0f;
 1008fe4:	e0fffd17 	ldw	r3,-12(fp)
 1008fe8:	00800134 	movhi	r2,4
 1008fec:	10bf03c4 	addi	r2,r2,-1009
 1008ff0:	1884703a 	and	r2,r3,r2
 1008ff4:	e0bffd15 	stw	r2,-12(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE, (load<<4) | current_led);
 1008ff8:	e0bffc43 	ldbu	r2,-15(fp)
 1008ffc:	1004913a 	slli	r2,r2,4
 1009000:	1007883a 	mov	r3,r2
 1009004:	e0bffd17 	ldw	r2,-12(fp)
 1009008:	1884b03a 	or	r2,r3,r2
 100900c:	1007883a 	mov	r3,r2
 1009010:	00804074 	movhi	r2,257
 1009014:	10843c04 	addi	r2,r2,4336
 1009018:	10c00035 	stwio	r3,0(r2)
			if(t){
 100901c:	e0bffc03 	ldbu	r2,-16(fp)
 1009020:	1005003a 	cmpeq	r2,r2,zero
 1009024:	1000041e 	bne	r2,zero,1009038 <Extraload+0xbc>
				OSTmrDel(TimerExtraload,&err);
 1009028:	d1202d17 	ldw	r4,-32588(gp)
 100902c:	e17ffe04 	addi	r5,fp,-8
 1009030:	100ded40 	call	100ded4 <OSTmrDel>
				t = 0;
 1009034:	e03ffc05 	stb	zero,-16(fp)
			}
			if(load){
 1009038:	e0bffc43 	ldbu	r2,-15(fp)
 100903c:	1005003a 	cmpeq	r2,r2,zero
 1009040:	1000151e 	bne	r2,zero,1009098 <Extraload+0x11c>
				TimerExtraload = OSTmrCreate((2*load*HYPER_PERIOD) / (100*HW_TIMER_PERIOD), 0,
 1009044:	e0fffc43 	ldbu	r3,-15(fp)
 1009048:	1805883a 	mov	r2,r3
 100904c:	1085883a 	add	r2,r2,r2
 1009050:	10c5883a 	add	r2,r2,r3
 1009054:	1009883a 	mov	r4,r2
 1009058:	d8000015 	stw	zero,0(sp)
 100905c:	d8000115 	stw	zero,4(sp)
 1009060:	e0bffe04 	addi	r2,fp,-8
 1009064:	d8800215 	stw	r2,8(sp)
 1009068:	000b883a 	mov	r5,zero
 100906c:	01800044 	movi	r6,1
 1009070:	01c04074 	movhi	r7,257
 1009074:	39e07e04 	addi	r7,r7,-32264
 1009078:	100e0ac0 	call	100e0ac <OSTmrCreate>
 100907c:	d0a02d15 	stw	r2,-32588(gp)
						OS_TMR_OPT_ONE_SHOT, CallbackExtraload, NULL, NULL, &err);
				if(!err) t = 1;
 1009080:	e0bffe03 	ldbu	r2,-8(fp)
 1009084:	10803fcc 	andi	r2,r2,255
 1009088:	1004c03a 	cmpne	r2,r2,zero
 100908c:	1000021e 	bne	r2,zero,1009098 <Extraload+0x11c>
 1009090:	00800044 	movi	r2,1
 1009094:	e0bffc05 	stb	r2,-16(fp)
			}
		}

		if(load && t) {
 1009098:	e0bffc43 	ldbu	r2,-15(fp)
 100909c:	1005003a 	cmpeq	r2,r2,zero
 10090a0:	10000b1e 	bne	r2,zero,10090d0 <Extraload+0x154>
 10090a4:	e0bffc03 	ldbu	r2,-16(fp)
 10090a8:	1005003a 	cmpeq	r2,r2,zero
 10090ac:	1000081e 	bne	r2,zero,10090d0 <Extraload+0x154>
			OSTmrStart(TimerExtraload, &err);
 10090b0:	d1202d17 	ldw	r4,-32588(gp)
 10090b4:	e17ffe04 	addi	r5,fp,-8
 10090b8:	100dc440 	call	100dc44 <OSTmrStart>
			FLAG = 0;
 10090bc:	d0203145 	stb	zero,-32571(gp)
			while(FLAG == 0) {
 10090c0:	d0a03143 	ldbu	r2,-32571(gp)
 10090c4:	10803fcc 	andi	r2,r2,255
 10090c8:	1005003a 	cmpeq	r2,r2,zero
 10090cc:	103ffc1e 	bne	r2,zero,10090c0 <Extraload+0x144>
				;
			}
		}

		OSSemPend(SemExtraload,0,&err);
 10090d0:	d1203517 	ldw	r4,-32556(gp)
 10090d4:	e1bffe04 	addi	r6,fp,-8
 10090d8:	000b883a 	mov	r5,zero
 10090dc:	100ccc40 	call	100ccc4 <OSSemPend>
	}
 10090e0:	003fae06 	br	1008f9c <Extraload+0x20>

010090e4 <StartTask>:

/*
 * The task 'StartTask' creates all other tasks kernel objects and
 * deletes itself afterwards.
 */
void StartTask(void* pdata) {
 10090e4:	defff604 	addi	sp,sp,-40
 10090e8:	dfc00915 	stw	ra,36(sp)
 10090ec:	df000815 	stw	fp,32(sp)
 10090f0:	df000804 	addi	fp,sp,32
 10090f4:	e13fff15 	stw	r4,-4(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10090f8:	00802034 	movhi	r2,128
 10090fc:	10824504 	addi	r2,r2,2324
 1009100:	10800017 	ldw	r2,0(r2)
	void* context;

	static alt_alarm alarm; /* Is needed for timer ISR function */

	/* Base resolution for SW timer : HW_TIMER_PERIOD ms */
	delay = alt_ticks_per_second() * HW_TIMER_PERIOD / 1000;
 1009104:	1085883a 	add	r2,r2,r2
 1009108:	1009883a 	mov	r4,r2
 100910c:	0140fa04 	movi	r5,1000
 1009110:	100a1ec0 	call	100a1ec <__udivsi3>
 1009114:	d0a04215 	stw	r2,-32504(gp)
	alt_printf("delay in ticks %x\n", delay);
 1009118:	d1604217 	ldw	r5,-32504(gp)
 100911c:	01002034 	movhi	r4,128
 1009120:	21007804 	addi	r4,r4,480
 1009124:	100aaec0 	call	100aaec <alt_printf>

	/*
	 * Create Hardware Timer with a period of 'delay'
	 */
	if (alt_alarm_start(&alarm, delay, alarm_handler, context) < 0) {
 1009128:	d0a04217 	ldw	r2,-32504(gp)
 100912c:	100b883a 	mov	r5,r2
 1009130:	01002034 	movhi	r4,128
 1009134:	21026404 	addi	r4,r4,2448
 1009138:	01804074 	movhi	r6,257
 100913c:	31a02404 	addi	r6,r6,-32624
 1009140:	e1fffd17 	ldw	r7,-12(fp)
 1009144:	100a9280 	call	100a928 <alt_alarm_start>
 1009148:	1004403a 	cmpge	r2,r2,zero
 100914c:	1000031e 	bne	r2,zero,100915c <StartTask+0x78>
		alt_printf("No system clock available!n");
 1009150:	01002034 	movhi	r4,128
 1009154:	21007d04 	addi	r4,r4,500
 1009158:	100aaec0 	call	100aaec <alt_printf>
	}

	/*
	 * Create and start Software Timer
	 */
	TimerVehicle = OSTmrCreate(0, VEHICLE_PERIOD / HW_TIMER_PERIOD,
 100915c:	d8000015 	stw	zero,0(sp)
 1009160:	d8000115 	stw	zero,4(sp)
 1009164:	e0bffe04 	addi	r2,fp,-8
 1009168:	d8800215 	stw	r2,8(sp)
 100916c:	0009883a 	mov	r4,zero
 1009170:	01402584 	movi	r5,150
 1009174:	01800084 	movi	r6,2
 1009178:	01c04074 	movhi	r7,257
 100917c:	39e03004 	addi	r7,r7,-32576
 1009180:	100e0ac0 	call	100e0ac <OSTmrCreate>
 1009184:	d0a03715 	stw	r2,-32548(gp)
			OS_TMR_OPT_PERIODIC, CallbackVehicle, NULL, NULL, &err);
	if (err) {
 1009188:	e0bffe03 	ldbu	r2,-8(fp)
 100918c:	10803fcc 	andi	r2,r2,255
 1009190:	1005003a 	cmpeq	r2,r2,zero
 1009194:	1000031e 	bne	r2,zero,10091a4 <StartTask+0xc0>
		alt_printf("Error occurred while creating soft timer!\n");
 1009198:	01002034 	movhi	r4,128
 100919c:	21008404 	addi	r4,r4,528
 10091a0:	100aaec0 	call	100aaec <alt_printf>
	}
	OSTmrStart(TimerVehicle, &err);
 10091a4:	d1203717 	ldw	r4,-32548(gp)
 10091a8:	e17ffe04 	addi	r5,fp,-8
 10091ac:	100dc440 	call	100dc44 <OSTmrStart>

	TimerControl = OSTmrCreate(0, CONTROL_PERIOD / HW_TIMER_PERIOD,
 10091b0:	d8000015 	stw	zero,0(sp)
 10091b4:	d8000115 	stw	zero,4(sp)
 10091b8:	e0bffe04 	addi	r2,fp,-8
 10091bc:	d8800215 	stw	r2,8(sp)
 10091c0:	0009883a 	mov	r4,zero
 10091c4:	01402584 	movi	r5,150
 10091c8:	01800084 	movi	r6,2
 10091cc:	01c04074 	movhi	r7,257
 10091d0:	39e03d04 	addi	r7,r7,-32524
 10091d4:	100e0ac0 	call	100e0ac <OSTmrCreate>
 10091d8:	d0a04515 	stw	r2,-32492(gp)
			OS_TMR_OPT_PERIODIC, CallbackControl, NULL, NULL, &err);
	if (err) {
 10091dc:	e0bffe03 	ldbu	r2,-8(fp)
 10091e0:	10803fcc 	andi	r2,r2,255
 10091e4:	1005003a 	cmpeq	r2,r2,zero
 10091e8:	1000031e 	bne	r2,zero,10091f8 <StartTask+0x114>
		alt_printf("Error occurred while creating soft timer!\n");
 10091ec:	01002034 	movhi	r4,128
 10091f0:	21008404 	addi	r4,r4,528
 10091f4:	100aaec0 	call	100aaec <alt_printf>
	}
	OSTmrStart(TimerControl, &err);
 10091f8:	d1204517 	ldw	r4,-32492(gp)
 10091fc:	e17ffe04 	addi	r5,fp,-8
 1009200:	100dc440 	call	100dc44 <OSTmrStart>

	TimerButtons = OSTmrCreate(0, BS_PERIOD / HW_TIMER_PERIOD,
 1009204:	d8000015 	stw	zero,0(sp)
 1009208:	d8000115 	stw	zero,4(sp)
 100920c:	e0bffe04 	addi	r2,fp,-8
 1009210:	d8800215 	stw	r2,8(sp)
 1009214:	0009883a 	mov	r4,zero
 1009218:	01400c84 	movi	r5,50
 100921c:	01800084 	movi	r6,2
 1009220:	01c04074 	movhi	r7,257
 1009224:	39e04a04 	addi	r7,r7,-32472
 1009228:	100e0ac0 	call	100e0ac <OSTmrCreate>
 100922c:	d0a04415 	stw	r2,-32496(gp)
			OS_TMR_OPT_PERIODIC, CallbackButtons, NULL, NULL, &err);
	if (err) {
 1009230:	e0bffe03 	ldbu	r2,-8(fp)
 1009234:	10803fcc 	andi	r2,r2,255
 1009238:	1005003a 	cmpeq	r2,r2,zero
 100923c:	1000031e 	bne	r2,zero,100924c <StartTask+0x168>
		alt_printf("Error occurred while creating soft timer!\n");
 1009240:	01002034 	movhi	r4,128
 1009244:	21008404 	addi	r4,r4,528
 1009248:	100aaec0 	call	100aaec <alt_printf>
	}
	OSTmrStart(TimerButtons, &err);
 100924c:	d1204417 	ldw	r4,-32496(gp)
 1009250:	e17ffe04 	addi	r5,fp,-8
 1009254:	100dc440 	call	100dc44 <OSTmrStart>

	TimerSwitches = OSTmrCreate(0, BS_PERIOD / HW_TIMER_PERIOD,
 1009258:	d8000015 	stw	zero,0(sp)
 100925c:	d8000115 	stw	zero,4(sp)
 1009260:	e0bffe04 	addi	r2,fp,-8
 1009264:	d8800215 	stw	r2,8(sp)
 1009268:	0009883a 	mov	r4,zero
 100926c:	01400c84 	movi	r5,50
 1009270:	01800084 	movi	r6,2
 1009274:	01c04074 	movhi	r7,257
 1009278:	39e05704 	addi	r7,r7,-32420
 100927c:	100e0ac0 	call	100e0ac <OSTmrCreate>
 1009280:	d0a04615 	stw	r2,-32488(gp)
			OS_TMR_OPT_PERIODIC, CallbackSwitches, NULL, NULL, &err);
	if (err) {
 1009284:	e0bffe03 	ldbu	r2,-8(fp)
 1009288:	10803fcc 	andi	r2,r2,255
 100928c:	1005003a 	cmpeq	r2,r2,zero
 1009290:	1000031e 	bne	r2,zero,10092a0 <StartTask+0x1bc>
		alt_printf("Error occurred while creating soft timer!\n");
 1009294:	01002034 	movhi	r4,128
 1009298:	21008404 	addi	r4,r4,528
 100929c:	100aaec0 	call	100aaec <alt_printf>
	}
	OSTmrStart(TimerSwitches, &err);
 10092a0:	d1204617 	ldw	r4,-32488(gp)
 10092a4:	e17ffe04 	addi	r5,fp,-8
 10092a8:	100dc440 	call	100dc44 <OSTmrStart>

	TimerExtraloadTask = OSTmrCreate(0, HYPER_PERIOD / HW_TIMER_PERIOD,
 10092ac:	d8000015 	stw	zero,0(sp)
 10092b0:	d8000115 	stw	zero,4(sp)
 10092b4:	e0bffe04 	addi	r2,fp,-8
 10092b8:	d8800215 	stw	r2,8(sp)
 10092bc:	0009883a 	mov	r4,zero
 10092c0:	01402584 	movi	r5,150
 10092c4:	01800084 	movi	r6,2
 10092c8:	01c04074 	movhi	r7,257
 10092cc:	39e07104 	addi	r7,r7,-32316
 10092d0:	100e0ac0 	call	100e0ac <OSTmrCreate>
 10092d4:	d0a04115 	stw	r2,-32508(gp)
			OS_TMR_OPT_PERIODIC, CallbackExtraloadTask, NULL, NULL, &err);
	if (err) {
 10092d8:	e0bffe03 	ldbu	r2,-8(fp)
 10092dc:	10803fcc 	andi	r2,r2,255
 10092e0:	1005003a 	cmpeq	r2,r2,zero
 10092e4:	1000031e 	bne	r2,zero,10092f4 <StartTask+0x210>
		alt_printf("Error occurred while creating soft timer!\n");
 10092e8:	01002034 	movhi	r4,128
 10092ec:	21008404 	addi	r4,r4,528
 10092f0:	100aaec0 	call	100aaec <alt_printf>
	}
	OSTmrStart(TimerExtraloadTask, &err);
 10092f4:	d1204117 	ldw	r4,-32508(gp)
 10092f8:	e17ffe04 	addi	r5,fp,-8
 10092fc:	100dc440 	call	100dc44 <OSTmrStart>

	TimerOverload = OSTmrCreate(0, OVERLOAD_PERIOD / HW_TIMER_PERIOD,
 1009300:	d8000015 	stw	zero,0(sp)
 1009304:	d8000115 	stw	zero,4(sp)
 1009308:	e0bffe04 	addi	r2,fp,-8
 100930c:	d8800215 	stw	r2,8(sp)
 1009310:	0009883a 	mov	r4,zero
 1009314:	01400c84 	movi	r5,50
 1009318:	01800084 	movi	r6,2
 100931c:	01c04074 	movhi	r7,257
 1009320:	39e06404 	addi	r7,r7,-32368
 1009324:	100e0ac0 	call	100e0ac <OSTmrCreate>
 1009328:	d0a03d15 	stw	r2,-32524(gp)
			OS_TMR_OPT_PERIODIC, CallbackOverload, NULL, NULL, &err);
	if (err) {
 100932c:	e0bffe03 	ldbu	r2,-8(fp)
 1009330:	10803fcc 	andi	r2,r2,255
 1009334:	1005003a 	cmpeq	r2,r2,zero
 1009338:	1000031e 	bne	r2,zero,1009348 <StartTask+0x264>
		alt_printf("Error occurred while creating soft timer!\n");
 100933c:	01002034 	movhi	r4,128
 1009340:	21008404 	addi	r4,r4,528
 1009344:	100aaec0 	call	100aaec <alt_printf>
	}
	OSTmrStart(TimerOverload, &err);
 1009348:	d1203d17 	ldw	r4,-32524(gp)
 100934c:	e17ffe04 	addi	r5,fp,-8
 1009350:	100dc440 	call	100dc44 <OSTmrStart>

	TimerWatchdog = OSTmrCreate(0, HYPER_PERIOD / HW_TIMER_PERIOD,
 1009354:	d8000015 	stw	zero,0(sp)
 1009358:	d8000115 	stw	zero,4(sp)
 100935c:	e0bffe04 	addi	r2,fp,-8
 1009360:	d8800215 	stw	r2,8(sp)
 1009364:	0009883a 	mov	r4,zero
 1009368:	01402584 	movi	r5,150
 100936c:	01800084 	movi	r6,2
 1009370:	01c04074 	movhi	r7,257
 1009374:	39e08904 	addi	r7,r7,-32220
 1009378:	100e0ac0 	call	100e0ac <OSTmrCreate>
 100937c:	d0a03915 	stw	r2,-32540(gp)
			OS_TMR_OPT_PERIODIC, CallbackWatchdog, NULL, NULL, &err);
	if (err) {
 1009380:	e0bffe03 	ldbu	r2,-8(fp)
 1009384:	10803fcc 	andi	r2,r2,255
 1009388:	1005003a 	cmpeq	r2,r2,zero
 100938c:	1000031e 	bne	r2,zero,100939c <StartTask+0x2b8>
		alt_printf("Error occurred while creating soft timer!\n");
 1009390:	01002034 	movhi	r4,128
 1009394:	21008404 	addi	r4,r4,528
 1009398:	100aaec0 	call	100aaec <alt_printf>
	}
	OSTmrStart(TimerWatchdog, &err);
 100939c:	d1203917 	ldw	r4,-32540(gp)
 10093a0:	e17ffe04 	addi	r5,fp,-8
 10093a4:	100dc440 	call	100dc44 <OSTmrStart>
	/*
	 * Creation of Kernel Objects
	 */

	// Mailboxes
	Mbox_Throttle = OSMboxCreate((void*) 0); /* Empty Mailbox - Throttle */
 10093a8:	0009883a 	mov	r4,zero
 10093ac:	100c8500 	call	100c850 <OSMboxCreate>
 10093b0:	d0a03415 	stw	r2,-32560(gp)
	Mbox_Velocity = OSMboxCreate((void*) 0); /* Empty Mailbox - Velocity */
 10093b4:	0009883a 	mov	r4,zero
 10093b8:	100c8500 	call	100c850 <OSMboxCreate>
 10093bc:	d0a03615 	stw	r2,-32552(gp)

	// Semaphores
	SemVehicle = OSSemCreate(0);
 10093c0:	0009883a 	mov	r4,zero
 10093c4:	100cc380 	call	100cc38 <OSSemCreate>
 10093c8:	d0a03e15 	stw	r2,-32520(gp)
	SemControl = OSSemCreate(0);
 10093cc:	0009883a 	mov	r4,zero
 10093d0:	100cc380 	call	100cc38 <OSSemCreate>
 10093d4:	d0a03815 	stw	r2,-32544(gp)
	SemButtons = OSSemCreate(0);
 10093d8:	0009883a 	mov	r4,zero
 10093dc:	100cc380 	call	100cc38 <OSSemCreate>
 10093e0:	d0a04015 	stw	r2,-32512(gp)
	SemSwitches = OSSemCreate(0);
 10093e4:	0009883a 	mov	r4,zero
 10093e8:	100cc380 	call	100cc38 <OSSemCreate>
 10093ec:	d0a03215 	stw	r2,-32568(gp)
	SemOverload = OSSemCreate(0);
 10093f0:	0009883a 	mov	r4,zero
 10093f4:	100cc380 	call	100cc38 <OSSemCreate>
 10093f8:	d0a03f15 	stw	r2,-32516(gp)
	SemExtraload = OSSemCreate(1);
 10093fc:	01000044 	movi	r4,1
 1009400:	100cc380 	call	100cc38 <OSSemCreate>
 1009404:	d0a03515 	stw	r2,-32556(gp)

	/*
	 * Create statistics task
	 */

	OSStatInit();
 1009408:	100b7300 	call	100b730 <OSStatInit>

	/*
	 * Creating Tasks in the system
	 */

	err = OSTaskCreateExt(
 100940c:	01802034 	movhi	r6,128
 1009410:	31926904 	addi	r6,r6,18852
 1009414:	00800284 	movi	r2,10
 1009418:	d8800015 	stw	r2,0(sp)
 100941c:	00802034 	movhi	r2,128
 1009420:	108a6a04 	addi	r2,r2,10664
 1009424:	d8800115 	stw	r2,4(sp)
 1009428:	00820004 	movi	r2,2048
 100942c:	d8800215 	stw	r2,8(sp)
 1009430:	d8000315 	stw	zero,12(sp)
 1009434:	00800044 	movi	r2,1
 1009438:	d8800415 	stw	r2,16(sp)
 100943c:	01004074 	movhi	r4,257
 1009440:	21226a04 	addi	r4,r4,-30296
 1009444:	000b883a 	mov	r5,zero
 1009448:	01c00284 	movi	r7,10
 100944c:	100cffc0 	call	100cffc <OSTaskCreateExt>
 1009450:	e0bffe05 	stb	r2,-8(fp)
			// of task stack
			CONTROLTASK_PRIO, CONTROLTASK_PRIO, (void *) &ControlTask_Stack[0],
			TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : Control\n");

	err = OSTaskCreateExt(
 1009454:	01802074 	movhi	r6,129
 1009458:	31a26904 	addi	r6,r6,-30300
 100945c:	00800204 	movi	r2,8
 1009460:	d8800015 	stw	r2,0(sp)
 1009464:	00802034 	movhi	r2,128
 1009468:	109a6a04 	addi	r2,r2,27048
 100946c:	d8800115 	stw	r2,4(sp)
 1009470:	00820004 	movi	r2,2048
 1009474:	d8800215 	stw	r2,8(sp)
 1009478:	d8000315 	stw	zero,12(sp)
 100947c:	00800044 	movi	r2,1
 1009480:	d8800415 	stw	r2,16(sp)
 1009484:	01004074 	movhi	r4,257
 1009488:	2121bb04 	addi	r4,r4,-30996
 100948c:	000b883a 	mov	r5,zero
 1009490:	01c00204 	movi	r7,8
 1009494:	100cffc0 	call	100cffc <OSTaskCreateExt>
 1009498:	e0bffe05 	stb	r2,-8(fp)
			// of task stack
			VEHICLETASK_PRIO, VEHICLETASK_PRIO, (void *) &VehicleTask_Stack[0],
			TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : Vehicle\n");

	err = OSTaskCreateExt(
 100949c:	01802074 	movhi	r6,129
 10094a0:	31aa6904 	addi	r6,r6,-22108
 10094a4:	00800304 	movi	r2,12
 10094a8:	d8800015 	stw	r2,0(sp)
 10094ac:	00802074 	movhi	r2,129
 10094b0:	10a26a04 	addi	r2,r2,-30296
 10094b4:	d8800115 	stw	r2,4(sp)
 10094b8:	00820004 	movi	r2,2048
 10094bc:	d8800215 	stw	r2,8(sp)
 10094c0:	d8000315 	stw	zero,12(sp)
 10094c4:	00800044 	movi	r2,1
 10094c8:	d8800415 	stw	r2,16(sp)
 10094cc:	01004074 	movhi	r4,257
 10094d0:	21239804 	addi	r4,r4,-29088
 10094d4:	000b883a 	mov	r5,zero
 10094d8:	01c00304 	movi	r7,12
 10094dc:	100cffc0 	call	100cffc <OSTaskCreateExt>
 10094e0:	e0bffe05 	stb	r2,-8(fp)
				// of task stack
				BUTTONSIO_PRIO, BUTTONSIO_PRIO, (void *) &ButtonsIO_Stack[0],
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : ButtonsIO\n");

	err = OSTaskCreateExt(
 10094e4:	01802034 	movhi	r6,128
 10094e8:	318a6904 	addi	r6,r6,10660
 10094ec:	00800384 	movi	r2,14
 10094f0:	d8800015 	stw	r2,0(sp)
 10094f4:	00802034 	movhi	r2,128
 10094f8:	10826a04 	addi	r2,r2,2472
 10094fc:	d8800115 	stw	r2,4(sp)
 1009500:	00820004 	movi	r2,2048
 1009504:	d8800215 	stw	r2,8(sp)
 1009508:	d8000315 	stw	zero,12(sp)
 100950c:	00800044 	movi	r2,1
 1009510:	d8800415 	stw	r2,16(sp)
 1009514:	01004074 	movhi	r4,257
 1009518:	21236704 	addi	r4,r4,-29284
 100951c:	000b883a 	mov	r5,zero
 1009520:	01c00384 	movi	r7,14
 1009524:	100cffc0 	call	100cffc <OSTaskCreateExt>
 1009528:	e0bffe05 	stb	r2,-8(fp)
				SWITCHIO_PRIO, SWITCHIO_PRIO, (void *) &SwitchIO_Stack[0],
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : SwitchIO\n");


	err = OSTaskCreateExt(
 100952c:	01802074 	movhi	r6,129
 1009530:	31ba6904 	addi	r6,r6,-5724
 1009534:	00800404 	movi	r2,16
 1009538:	d8800015 	stw	r2,0(sp)
 100953c:	00802074 	movhi	r2,129
 1009540:	10b26a04 	addi	r2,r2,-13912
 1009544:	d8800115 	stw	r2,4(sp)
 1009548:	00820004 	movi	r2,2048
 100954c:	d8800215 	stw	r2,8(sp)
 1009550:	d8000315 	stw	zero,12(sp)
 1009554:	00800044 	movi	r2,1
 1009558:	d8800415 	stw	r2,16(sp)
 100955c:	01004074 	movhi	r4,257
 1009560:	2123df04 	addi	r4,r4,-28804
 1009564:	000b883a 	mov	r5,zero
 1009568:	01c00404 	movi	r7,16
 100956c:	100cffc0 	call	100cffc <OSTaskCreateExt>
 1009570:	e0bffe05 	stb	r2,-8(fp)
				// of task stack
				EXTRALOAD_PRIO, EXTRALOAD_PRIO, (void *) &Extraload_Stack[0],
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : Extraload\n");

	err = OSTaskCreateExt(
 1009574:	01802034 	movhi	r6,128
 1009578:	319a6904 	addi	r6,r6,27044
 100957c:	00800484 	movi	r2,18
 1009580:	d8800015 	stw	r2,0(sp)
 1009584:	00802034 	movhi	r2,128
 1009588:	10926a04 	addi	r2,r2,18856
 100958c:	d8800115 	stw	r2,4(sp)
 1009590:	00820004 	movi	r2,2048
 1009594:	d8800215 	stw	r2,8(sp)
 1009598:	d8000315 	stw	zero,12(sp)
 100959c:	00800044 	movi	r2,1
 10095a0:	d8800415 	stw	r2,16(sp)
 10095a4:	01004074 	movhi	r4,257
 10095a8:	2123d204 	addi	r4,r4,-28856
 10095ac:	000b883a 	mov	r5,zero
 10095b0:	01c00484 	movi	r7,18
 10095b4:	100cffc0 	call	100cffc <OSTaskCreateExt>
 10095b8:	e0bffe05 	stb	r2,-8(fp)
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : Overload\n");



	alt_printf("All Tasks and Kernel Objects generated!\n");
 10095bc:	01002034 	movhi	r4,128
 10095c0:	21008f04 	addi	r4,r4,572
 10095c4:	100aaec0 	call	100aaec <alt_printf>

	/* Task deletes itself */

	OSTaskDel(OS_PRIO_SELF);
 10095c8:	01003fc4 	movi	r4,255
 10095cc:	100d11c0 	call	100d11c <OSTaskDel>
}
 10095d0:	e037883a 	mov	sp,fp
 10095d4:	dfc00117 	ldw	ra,4(sp)
 10095d8:	df000017 	ldw	fp,0(sp)
 10095dc:	dec00204 	addi	sp,sp,8
 10095e0:	f800283a 	ret

010095e4 <main>:
 * The function 'main' creates only a single task 'StartTask' and starts
 * the OS. All other tasks are started from the task 'StartTask'.
 *
 */

int main(void) {
 10095e4:	defff904 	addi	sp,sp,-28
 10095e8:	dfc00615 	stw	ra,24(sp)
 10095ec:	df000515 	stw	fp,20(sp)
 10095f0:	df000504 	addi	fp,sp,20

	alt_printf("Lab2: Cruise Control\n");
 10095f4:	01002034 	movhi	r4,128
 10095f8:	21009a04 	addi	r4,r4,616
 10095fc:	100aaec0 	call	100aaec <alt_printf>

	OSTaskCreateExt(
 1009600:	01802074 	movhi	r6,129
 1009604:	31b26904 	addi	r6,r6,-13916
 1009608:	00800144 	movi	r2,5
 100960c:	d8800015 	stw	r2,0(sp)
 1009610:	00802074 	movhi	r2,129
 1009614:	10aa6a04 	addi	r2,r2,-22104
 1009618:	d8800115 	stw	r2,4(sp)
 100961c:	00820004 	movi	r2,2048
 1009620:	d8800215 	stw	r2,8(sp)
 1009624:	d8000315 	stw	zero,12(sp)
 1009628:	008000c4 	movi	r2,3
 100962c:	d8800415 	stw	r2,16(sp)
 1009630:	01004074 	movhi	r4,257
 1009634:	21243904 	addi	r4,r4,-28444
 1009638:	000b883a 	mov	r5,zero
 100963c:	01c00144 	movi	r7,5
 1009640:	100cffc0 	call	100cffc <OSTaskCreateExt>
			// of task stack
			STARTTASK_PRIO, STARTTASK_PRIO, (void *) &StartTask_Stack[0],
			TASK_STACKSIZE, (void *) 0,
			OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

	OSStart();
 1009644:	100b1540 	call	100b154 <OSStart>

	return 0;
 1009648:	0005883a 	mov	r2,zero
}
 100964c:	e037883a 	mov	sp,fp
 1009650:	dfc00117 	ldw	ra,4(sp)
 1009654:	df000017 	ldw	fp,0(sp)
 1009658:	dec00204 	addi	sp,sp,8
 100965c:	f800283a 	ret

01009660 <__floatsisf>:
 1009660:	2006d7fa 	srli	r3,r4,31
 1009664:	defffa04 	addi	sp,sp,-24
 1009668:	008000c4 	movi	r2,3
 100966c:	dfc00515 	stw	ra,20(sp)
 1009670:	dc000415 	stw	r16,16(sp)
 1009674:	d8800015 	stw	r2,0(sp)
 1009678:	d8c00115 	stw	r3,4(sp)
 100967c:	2000081e 	bne	r4,zero,10096a0 <__floatsisf+0x40>
 1009680:	00800084 	movi	r2,2
 1009684:	d8800015 	stw	r2,0(sp)
 1009688:	d809883a 	mov	r4,sp
 100968c:	100a2b40 	call	100a2b4 <__pack_f>
 1009690:	dfc00517 	ldw	ra,20(sp)
 1009694:	dc000417 	ldw	r16,16(sp)
 1009698:	dec00604 	addi	sp,sp,24
 100969c:	f800283a 	ret
 10096a0:	00800784 	movi	r2,30
 10096a4:	1807003a 	cmpeq	r3,r3,zero
 10096a8:	d8800215 	stw	r2,8(sp)
 10096ac:	18000e1e 	bne	r3,zero,10096e8 <__floatsisf+0x88>
 10096b0:	00a00034 	movhi	r2,32768
 10096b4:	20800e26 	beq	r4,r2,10096f0 <__floatsisf+0x90>
 10096b8:	0121c83a 	sub	r16,zero,r4
 10096bc:	8009883a 	mov	r4,r16
 10096c0:	dc000315 	stw	r16,12(sp)
 10096c4:	100a2340 	call	100a234 <__clzsi2>
 10096c8:	117fffc4 	addi	r5,r2,-1
 10096cc:	017fee0e 	bge	zero,r5,1009688 <__floatsisf+0x28>
 10096d0:	d8800217 	ldw	r2,8(sp)
 10096d4:	8146983a 	sll	r3,r16,r5
 10096d8:	1145c83a 	sub	r2,r2,r5
 10096dc:	d8c00315 	stw	r3,12(sp)
 10096e0:	d8800215 	stw	r2,8(sp)
 10096e4:	003fe806 	br	1009688 <__floatsisf+0x28>
 10096e8:	2021883a 	mov	r16,r4
 10096ec:	003ff306 	br	10096bc <__floatsisf+0x5c>
 10096f0:	00b3c034 	movhi	r2,52992
 10096f4:	003fe606 	br	1009690 <__floatsisf+0x30>

010096f8 <__extendsfdf2>:
 10096f8:	defff904 	addi	sp,sp,-28
 10096fc:	d9000115 	stw	r4,4(sp)
 1009700:	d9400204 	addi	r5,sp,8
 1009704:	d9000104 	addi	r4,sp,4
 1009708:	dfc00615 	stw	ra,24(sp)
 100970c:	100a4140 	call	100a414 <__unpack_f>
 1009710:	d9c00517 	ldw	r7,20(sp)
 1009714:	0011883a 	mov	r8,zero
 1009718:	400697ba 	slli	r3,r8,30
 100971c:	3812d0ba 	srli	r9,r7,2
 1009720:	380497ba 	slli	r2,r7,30
 1009724:	d9000217 	ldw	r4,8(sp)
 1009728:	d9400317 	ldw	r5,12(sp)
 100972c:	d9800417 	ldw	r6,16(sp)
 1009730:	48c6b03a 	or	r3,r9,r3
 1009734:	100f883a 	mov	r7,r2
 1009738:	d8c00015 	stw	r3,0(sp)
 100973c:	100a0780 	call	100a078 <__make_dp>
 1009740:	dfc00617 	ldw	ra,24(sp)
 1009744:	dec00704 	addi	sp,sp,28
 1009748:	f800283a 	ret

0100974c <_fpadd_parts>:
 100974c:	defff804 	addi	sp,sp,-32
 1009750:	dcc00315 	stw	r19,12(sp)
 1009754:	2027883a 	mov	r19,r4
 1009758:	21000017 	ldw	r4,0(r4)
 100975c:	00c00044 	movi	r3,1
 1009760:	dd400515 	stw	r21,20(sp)
 1009764:	dd000415 	stw	r20,16(sp)
 1009768:	ddc00715 	stw	r23,28(sp)
 100976c:	dd800615 	stw	r22,24(sp)
 1009770:	dc800215 	stw	r18,8(sp)
 1009774:	dc400115 	stw	r17,4(sp)
 1009778:	dc000015 	stw	r16,0(sp)
 100977c:	282b883a 	mov	r21,r5
 1009780:	3029883a 	mov	r20,r6
 1009784:	1900632e 	bgeu	r3,r4,1009914 <_fpadd_parts+0x1c8>
 1009788:	28800017 	ldw	r2,0(r5)
 100978c:	1880812e 	bgeu	r3,r2,1009994 <_fpadd_parts+0x248>
 1009790:	00c00104 	movi	r3,4
 1009794:	20c0dc26 	beq	r4,r3,1009b08 <_fpadd_parts+0x3bc>
 1009798:	10c07e26 	beq	r2,r3,1009994 <_fpadd_parts+0x248>
 100979c:	00c00084 	movi	r3,2
 10097a0:	10c06726 	beq	r2,r3,1009940 <_fpadd_parts+0x1f4>
 10097a4:	20c07b26 	beq	r4,r3,1009994 <_fpadd_parts+0x248>
 10097a8:	9dc00217 	ldw	r23,8(r19)
 10097ac:	28c00217 	ldw	r3,8(r5)
 10097b0:	9c400317 	ldw	r17,12(r19)
 10097b4:	2bc00317 	ldw	r15,12(r5)
 10097b8:	b8cdc83a 	sub	r6,r23,r3
 10097bc:	9c800417 	ldw	r18,16(r19)
 10097c0:	2c000417 	ldw	r16,16(r5)
 10097c4:	3009883a 	mov	r4,r6
 10097c8:	30009716 	blt	r6,zero,1009a28 <_fpadd_parts+0x2dc>
 10097cc:	00800fc4 	movi	r2,63
 10097d0:	11806b16 	blt	r2,r6,1009980 <_fpadd_parts+0x234>
 10097d4:	0100a40e 	bge	zero,r4,1009a68 <_fpadd_parts+0x31c>
 10097d8:	35bff804 	addi	r22,r6,-32
 10097dc:	b000bc16 	blt	r22,zero,1009ad0 <_fpadd_parts+0x384>
 10097e0:	8596d83a 	srl	r11,r16,r22
 10097e4:	0019883a 	mov	r12,zero
 10097e8:	0013883a 	mov	r9,zero
 10097ec:	01000044 	movi	r4,1
 10097f0:	0015883a 	mov	r10,zero
 10097f4:	b000be16 	blt	r22,zero,1009af0 <_fpadd_parts+0x3a4>
 10097f8:	2590983a 	sll	r8,r4,r22
 10097fc:	000f883a 	mov	r7,zero
 1009800:	00bfffc4 	movi	r2,-1
 1009804:	3889883a 	add	r4,r7,r2
 1009808:	408b883a 	add	r5,r8,r2
 100980c:	21cd803a 	cmpltu	r6,r4,r7
 1009810:	314b883a 	add	r5,r6,r5
 1009814:	7904703a 	and	r2,r15,r4
 1009818:	8146703a 	and	r3,r16,r5
 100981c:	10c4b03a 	or	r2,r2,r3
 1009820:	10000226 	beq	r2,zero,100982c <_fpadd_parts+0xe0>
 1009824:	02400044 	movi	r9,1
 1009828:	0015883a 	mov	r10,zero
 100982c:	5a5eb03a 	or	r15,r11,r9
 1009830:	62a0b03a 	or	r16,r12,r10
 1009834:	99400117 	ldw	r5,4(r19)
 1009838:	a8800117 	ldw	r2,4(r21)
 100983c:	28806e26 	beq	r5,r2,10099f8 <_fpadd_parts+0x2ac>
 1009840:	28006626 	beq	r5,zero,10099dc <_fpadd_parts+0x290>
 1009844:	7c45c83a 	sub	r2,r15,r17
 1009848:	7889803a 	cmpltu	r4,r15,r2
 100984c:	8487c83a 	sub	r3,r16,r18
 1009850:	1909c83a 	sub	r4,r3,r4
 1009854:	100d883a 	mov	r6,r2
 1009858:	200f883a 	mov	r7,r4
 100985c:	38007716 	blt	r7,zero,1009a3c <_fpadd_parts+0x2f0>
 1009860:	a5c00215 	stw	r23,8(r20)
 1009864:	a1c00415 	stw	r7,16(r20)
 1009868:	a0000115 	stw	zero,4(r20)
 100986c:	a1800315 	stw	r6,12(r20)
 1009870:	a2000317 	ldw	r8,12(r20)
 1009874:	a2400417 	ldw	r9,16(r20)
 1009878:	00bfffc4 	movi	r2,-1
 100987c:	408b883a 	add	r5,r8,r2
 1009880:	2a09803a 	cmpltu	r4,r5,r8
 1009884:	488d883a 	add	r6,r9,r2
 1009888:	01c40034 	movhi	r7,4096
 100988c:	39ffffc4 	addi	r7,r7,-1
 1009890:	218d883a 	add	r6,r4,r6
 1009894:	39801736 	bltu	r7,r6,10098f4 <_fpadd_parts+0x1a8>
 1009898:	31c06526 	beq	r6,r7,1009a30 <_fpadd_parts+0x2e4>
 100989c:	a3000217 	ldw	r12,8(r20)
 10098a0:	4209883a 	add	r4,r8,r8
 10098a4:	00bfffc4 	movi	r2,-1
 10098a8:	220f803a 	cmpltu	r7,r4,r8
 10098ac:	4a4b883a 	add	r5,r9,r9
 10098b0:	394f883a 	add	r7,r7,r5
 10098b4:	2095883a 	add	r10,r4,r2
 10098b8:	3897883a 	add	r11,r7,r2
 10098bc:	510d803a 	cmpltu	r6,r10,r4
 10098c0:	6099883a 	add	r12,r12,r2
 10098c4:	32d7883a 	add	r11,r6,r11
 10098c8:	00840034 	movhi	r2,4096
 10098cc:	10bfffc4 	addi	r2,r2,-1
 10098d0:	2011883a 	mov	r8,r4
 10098d4:	3813883a 	mov	r9,r7
 10098d8:	a1000315 	stw	r4,12(r20)
 10098dc:	a1c00415 	stw	r7,16(r20)
 10098e0:	a3000215 	stw	r12,8(r20)
 10098e4:	12c00336 	bltu	r2,r11,10098f4 <_fpadd_parts+0x1a8>
 10098e8:	58bfed1e 	bne	r11,r2,10098a0 <_fpadd_parts+0x154>
 10098ec:	00bfff84 	movi	r2,-2
 10098f0:	12bfeb2e 	bgeu	r2,r10,10098a0 <_fpadd_parts+0x154>
 10098f4:	a2800417 	ldw	r10,16(r20)
 10098f8:	008000c4 	movi	r2,3
 10098fc:	00c80034 	movhi	r3,8192
 1009900:	18ffffc4 	addi	r3,r3,-1
 1009904:	a2400317 	ldw	r9,12(r20)
 1009908:	a0800015 	stw	r2,0(r20)
 100990c:	1a802336 	bltu	r3,r10,100999c <_fpadd_parts+0x250>
 1009910:	a027883a 	mov	r19,r20
 1009914:	9805883a 	mov	r2,r19
 1009918:	ddc00717 	ldw	r23,28(sp)
 100991c:	dd800617 	ldw	r22,24(sp)
 1009920:	dd400517 	ldw	r21,20(sp)
 1009924:	dd000417 	ldw	r20,16(sp)
 1009928:	dcc00317 	ldw	r19,12(sp)
 100992c:	dc800217 	ldw	r18,8(sp)
 1009930:	dc400117 	ldw	r17,4(sp)
 1009934:	dc000017 	ldw	r16,0(sp)
 1009938:	dec00804 	addi	sp,sp,32
 100993c:	f800283a 	ret
 1009940:	20fff41e 	bne	r4,r3,1009914 <_fpadd_parts+0x1c8>
 1009944:	31000015 	stw	r4,0(r6)
 1009948:	98800117 	ldw	r2,4(r19)
 100994c:	30800115 	stw	r2,4(r6)
 1009950:	98c00217 	ldw	r3,8(r19)
 1009954:	30c00215 	stw	r3,8(r6)
 1009958:	98800317 	ldw	r2,12(r19)
 100995c:	30800315 	stw	r2,12(r6)
 1009960:	98c00417 	ldw	r3,16(r19)
 1009964:	30c00415 	stw	r3,16(r6)
 1009968:	98800117 	ldw	r2,4(r19)
 100996c:	28c00117 	ldw	r3,4(r5)
 1009970:	3027883a 	mov	r19,r6
 1009974:	10c4703a 	and	r2,r2,r3
 1009978:	30800115 	stw	r2,4(r6)
 100997c:	003fe506 	br	1009914 <_fpadd_parts+0x1c8>
 1009980:	1dc02616 	blt	r3,r23,1009a1c <_fpadd_parts+0x2d0>
 1009984:	0023883a 	mov	r17,zero
 1009988:	182f883a 	mov	r23,r3
 100998c:	0025883a 	mov	r18,zero
 1009990:	003fa806 	br	1009834 <_fpadd_parts+0xe8>
 1009994:	a827883a 	mov	r19,r21
 1009998:	003fde06 	br	1009914 <_fpadd_parts+0x1c8>
 100999c:	01800044 	movi	r6,1
 10099a0:	500497fa 	slli	r2,r10,31
 10099a4:	4808d07a 	srli	r4,r9,1
 10099a8:	518ad83a 	srl	r5,r10,r6
 10099ac:	a2000217 	ldw	r8,8(r20)
 10099b0:	1108b03a 	or	r4,r2,r4
 10099b4:	0007883a 	mov	r3,zero
 10099b8:	4984703a 	and	r2,r9,r6
 10099bc:	208cb03a 	or	r6,r4,r2
 10099c0:	28ceb03a 	or	r7,r5,r3
 10099c4:	42000044 	addi	r8,r8,1
 10099c8:	a027883a 	mov	r19,r20
 10099cc:	a1c00415 	stw	r7,16(r20)
 10099d0:	a2000215 	stw	r8,8(r20)
 10099d4:	a1800315 	stw	r6,12(r20)
 10099d8:	003fce06 	br	1009914 <_fpadd_parts+0x1c8>
 10099dc:	8bc5c83a 	sub	r2,r17,r15
 10099e0:	8889803a 	cmpltu	r4,r17,r2
 10099e4:	9407c83a 	sub	r3,r18,r16
 10099e8:	1909c83a 	sub	r4,r3,r4
 10099ec:	100d883a 	mov	r6,r2
 10099f0:	200f883a 	mov	r7,r4
 10099f4:	003f9906 	br	100985c <_fpadd_parts+0x110>
 10099f8:	7c45883a 	add	r2,r15,r17
 10099fc:	13c9803a 	cmpltu	r4,r2,r15
 1009a00:	8487883a 	add	r3,r16,r18
 1009a04:	20c9883a 	add	r4,r4,r3
 1009a08:	a1400115 	stw	r5,4(r20)
 1009a0c:	a5c00215 	stw	r23,8(r20)
 1009a10:	a0800315 	stw	r2,12(r20)
 1009a14:	a1000415 	stw	r4,16(r20)
 1009a18:	003fb606 	br	10098f4 <_fpadd_parts+0x1a8>
 1009a1c:	001f883a 	mov	r15,zero
 1009a20:	0021883a 	mov	r16,zero
 1009a24:	003f8306 	br	1009834 <_fpadd_parts+0xe8>
 1009a28:	018dc83a 	sub	r6,zero,r6
 1009a2c:	003f6706 	br	10097cc <_fpadd_parts+0x80>
 1009a30:	00bfff84 	movi	r2,-2
 1009a34:	117faf36 	bltu	r2,r5,10098f4 <_fpadd_parts+0x1a8>
 1009a38:	003f9806 	br	100989c <_fpadd_parts+0x150>
 1009a3c:	0005883a 	mov	r2,zero
 1009a40:	1189c83a 	sub	r4,r2,r6
 1009a44:	1105803a 	cmpltu	r2,r2,r4
 1009a48:	01cbc83a 	sub	r5,zero,r7
 1009a4c:	2885c83a 	sub	r2,r5,r2
 1009a50:	01800044 	movi	r6,1
 1009a54:	a1800115 	stw	r6,4(r20)
 1009a58:	a5c00215 	stw	r23,8(r20)
 1009a5c:	a1000315 	stw	r4,12(r20)
 1009a60:	a0800415 	stw	r2,16(r20)
 1009a64:	003f8206 	br	1009870 <_fpadd_parts+0x124>
 1009a68:	203f7226 	beq	r4,zero,1009834 <_fpadd_parts+0xe8>
 1009a6c:	35bff804 	addi	r22,r6,-32
 1009a70:	b9af883a 	add	r23,r23,r6
 1009a74:	b0003116 	blt	r22,zero,1009b3c <_fpadd_parts+0x3f0>
 1009a78:	959ad83a 	srl	r13,r18,r22
 1009a7c:	001d883a 	mov	r14,zero
 1009a80:	000f883a 	mov	r7,zero
 1009a84:	01000044 	movi	r4,1
 1009a88:	0011883a 	mov	r8,zero
 1009a8c:	b0002516 	blt	r22,zero,1009b24 <_fpadd_parts+0x3d8>
 1009a90:	2594983a 	sll	r10,r4,r22
 1009a94:	0013883a 	mov	r9,zero
 1009a98:	00bfffc4 	movi	r2,-1
 1009a9c:	4889883a 	add	r4,r9,r2
 1009aa0:	508b883a 	add	r5,r10,r2
 1009aa4:	224d803a 	cmpltu	r6,r4,r9
 1009aa8:	314b883a 	add	r5,r6,r5
 1009aac:	8904703a 	and	r2,r17,r4
 1009ab0:	9146703a 	and	r3,r18,r5
 1009ab4:	10c4b03a 	or	r2,r2,r3
 1009ab8:	10000226 	beq	r2,zero,1009ac4 <_fpadd_parts+0x378>
 1009abc:	01c00044 	movi	r7,1
 1009ac0:	0011883a 	mov	r8,zero
 1009ac4:	69e2b03a 	or	r17,r13,r7
 1009ac8:	7224b03a 	or	r18,r14,r8
 1009acc:	003f5906 	br	1009834 <_fpadd_parts+0xe8>
 1009ad0:	8407883a 	add	r3,r16,r16
 1009ad4:	008007c4 	movi	r2,31
 1009ad8:	1185c83a 	sub	r2,r2,r6
 1009adc:	1886983a 	sll	r3,r3,r2
 1009ae0:	7996d83a 	srl	r11,r15,r6
 1009ae4:	8198d83a 	srl	r12,r16,r6
 1009ae8:	1ad6b03a 	or	r11,r3,r11
 1009aec:	003f3e06 	br	10097e8 <_fpadd_parts+0x9c>
 1009af0:	2006d07a 	srli	r3,r4,1
 1009af4:	008007c4 	movi	r2,31
 1009af8:	1185c83a 	sub	r2,r2,r6
 1009afc:	1890d83a 	srl	r8,r3,r2
 1009b00:	218e983a 	sll	r7,r4,r6
 1009b04:	003f3e06 	br	1009800 <_fpadd_parts+0xb4>
 1009b08:	113f821e 	bne	r2,r4,1009914 <_fpadd_parts+0x1c8>
 1009b0c:	28c00117 	ldw	r3,4(r5)
 1009b10:	98800117 	ldw	r2,4(r19)
 1009b14:	10ff7f26 	beq	r2,r3,1009914 <_fpadd_parts+0x1c8>
 1009b18:	04c02034 	movhi	r19,128
 1009b1c:	9cc0a004 	addi	r19,r19,640
 1009b20:	003f7c06 	br	1009914 <_fpadd_parts+0x1c8>
 1009b24:	2006d07a 	srli	r3,r4,1
 1009b28:	008007c4 	movi	r2,31
 1009b2c:	1185c83a 	sub	r2,r2,r6
 1009b30:	1894d83a 	srl	r10,r3,r2
 1009b34:	2192983a 	sll	r9,r4,r6
 1009b38:	003fd706 	br	1009a98 <_fpadd_parts+0x34c>
 1009b3c:	9487883a 	add	r3,r18,r18
 1009b40:	008007c4 	movi	r2,31
 1009b44:	1185c83a 	sub	r2,r2,r6
 1009b48:	1886983a 	sll	r3,r3,r2
 1009b4c:	899ad83a 	srl	r13,r17,r6
 1009b50:	919cd83a 	srl	r14,r18,r6
 1009b54:	1b5ab03a 	or	r13,r3,r13
 1009b58:	003fc906 	br	1009a80 <_fpadd_parts+0x334>

01009b5c <__subdf3>:
 1009b5c:	deffea04 	addi	sp,sp,-88
 1009b60:	dcc01415 	stw	r19,80(sp)
 1009b64:	dcc00404 	addi	r19,sp,16
 1009b68:	2011883a 	mov	r8,r4
 1009b6c:	2813883a 	mov	r9,r5
 1009b70:	dc401315 	stw	r17,76(sp)
 1009b74:	d809883a 	mov	r4,sp
 1009b78:	980b883a 	mov	r5,r19
 1009b7c:	dc400904 	addi	r17,sp,36
 1009b80:	dfc01515 	stw	ra,84(sp)
 1009b84:	da400115 	stw	r9,4(sp)
 1009b88:	d9c00315 	stw	r7,12(sp)
 1009b8c:	da000015 	stw	r8,0(sp)
 1009b90:	d9800215 	stw	r6,8(sp)
 1009b94:	100a7f00 	call	100a7f0 <__unpack_d>
 1009b98:	d9000204 	addi	r4,sp,8
 1009b9c:	880b883a 	mov	r5,r17
 1009ba0:	100a7f00 	call	100a7f0 <__unpack_d>
 1009ba4:	d8800a17 	ldw	r2,40(sp)
 1009ba8:	880b883a 	mov	r5,r17
 1009bac:	9809883a 	mov	r4,r19
 1009bb0:	d9800e04 	addi	r6,sp,56
 1009bb4:	1080005c 	xori	r2,r2,1
 1009bb8:	d8800a15 	stw	r2,40(sp)
 1009bbc:	100974c0 	call	100974c <_fpadd_parts>
 1009bc0:	1009883a 	mov	r4,r2
 1009bc4:	100a4dc0 	call	100a4dc <__pack_d>
 1009bc8:	dfc01517 	ldw	ra,84(sp)
 1009bcc:	dcc01417 	ldw	r19,80(sp)
 1009bd0:	dc401317 	ldw	r17,76(sp)
 1009bd4:	dec01604 	addi	sp,sp,88
 1009bd8:	f800283a 	ret

01009bdc <__adddf3>:
 1009bdc:	deffea04 	addi	sp,sp,-88
 1009be0:	dcc01415 	stw	r19,80(sp)
 1009be4:	dcc00404 	addi	r19,sp,16
 1009be8:	2011883a 	mov	r8,r4
 1009bec:	2813883a 	mov	r9,r5
 1009bf0:	dc401315 	stw	r17,76(sp)
 1009bf4:	d809883a 	mov	r4,sp
 1009bf8:	980b883a 	mov	r5,r19
 1009bfc:	dc400904 	addi	r17,sp,36
 1009c00:	dfc01515 	stw	ra,84(sp)
 1009c04:	da400115 	stw	r9,4(sp)
 1009c08:	d9c00315 	stw	r7,12(sp)
 1009c0c:	da000015 	stw	r8,0(sp)
 1009c10:	d9800215 	stw	r6,8(sp)
 1009c14:	100a7f00 	call	100a7f0 <__unpack_d>
 1009c18:	d9000204 	addi	r4,sp,8
 1009c1c:	880b883a 	mov	r5,r17
 1009c20:	100a7f00 	call	100a7f0 <__unpack_d>
 1009c24:	d9800e04 	addi	r6,sp,56
 1009c28:	9809883a 	mov	r4,r19
 1009c2c:	880b883a 	mov	r5,r17
 1009c30:	100974c0 	call	100974c <_fpadd_parts>
 1009c34:	1009883a 	mov	r4,r2
 1009c38:	100a4dc0 	call	100a4dc <__pack_d>
 1009c3c:	dfc01517 	ldw	ra,84(sp)
 1009c40:	dcc01417 	ldw	r19,80(sp)
 1009c44:	dc401317 	ldw	r17,76(sp)
 1009c48:	dec01604 	addi	sp,sp,88
 1009c4c:	f800283a 	ret

01009c50 <__divdf3>:
 1009c50:	deffed04 	addi	sp,sp,-76
 1009c54:	dcc01115 	stw	r19,68(sp)
 1009c58:	dcc00404 	addi	r19,sp,16
 1009c5c:	2011883a 	mov	r8,r4
 1009c60:	2813883a 	mov	r9,r5
 1009c64:	dc000e15 	stw	r16,56(sp)
 1009c68:	d809883a 	mov	r4,sp
 1009c6c:	980b883a 	mov	r5,r19
 1009c70:	dc000904 	addi	r16,sp,36
 1009c74:	dfc01215 	stw	ra,72(sp)
 1009c78:	da400115 	stw	r9,4(sp)
 1009c7c:	d9c00315 	stw	r7,12(sp)
 1009c80:	da000015 	stw	r8,0(sp)
 1009c84:	d9800215 	stw	r6,8(sp)
 1009c88:	dc801015 	stw	r18,64(sp)
 1009c8c:	dc400f15 	stw	r17,60(sp)
 1009c90:	100a7f00 	call	100a7f0 <__unpack_d>
 1009c94:	d9000204 	addi	r4,sp,8
 1009c98:	800b883a 	mov	r5,r16
 1009c9c:	100a7f00 	call	100a7f0 <__unpack_d>
 1009ca0:	d9000417 	ldw	r4,16(sp)
 1009ca4:	00800044 	movi	r2,1
 1009ca8:	11000b2e 	bgeu	r2,r4,1009cd8 <__divdf3+0x88>
 1009cac:	d9400917 	ldw	r5,36(sp)
 1009cb0:	1140762e 	bgeu	r2,r5,1009e8c <__divdf3+0x23c>
 1009cb4:	d8800517 	ldw	r2,20(sp)
 1009cb8:	d8c00a17 	ldw	r3,40(sp)
 1009cbc:	01800104 	movi	r6,4
 1009cc0:	10c4f03a 	xor	r2,r2,r3
 1009cc4:	d8800515 	stw	r2,20(sp)
 1009cc8:	21800226 	beq	r4,r6,1009cd4 <__divdf3+0x84>
 1009ccc:	00800084 	movi	r2,2
 1009cd0:	2080141e 	bne	r4,r2,1009d24 <__divdf3+0xd4>
 1009cd4:	29000926 	beq	r5,r4,1009cfc <__divdf3+0xac>
 1009cd8:	9809883a 	mov	r4,r19
 1009cdc:	100a4dc0 	call	100a4dc <__pack_d>
 1009ce0:	dfc01217 	ldw	ra,72(sp)
 1009ce4:	dcc01117 	ldw	r19,68(sp)
 1009ce8:	dc801017 	ldw	r18,64(sp)
 1009cec:	dc400f17 	ldw	r17,60(sp)
 1009cf0:	dc000e17 	ldw	r16,56(sp)
 1009cf4:	dec01304 	addi	sp,sp,76
 1009cf8:	f800283a 	ret
 1009cfc:	01002034 	movhi	r4,128
 1009d00:	2100a004 	addi	r4,r4,640
 1009d04:	100a4dc0 	call	100a4dc <__pack_d>
 1009d08:	dfc01217 	ldw	ra,72(sp)
 1009d0c:	dcc01117 	ldw	r19,68(sp)
 1009d10:	dc801017 	ldw	r18,64(sp)
 1009d14:	dc400f17 	ldw	r17,60(sp)
 1009d18:	dc000e17 	ldw	r16,56(sp)
 1009d1c:	dec01304 	addi	sp,sp,76
 1009d20:	f800283a 	ret
 1009d24:	29805b26 	beq	r5,r6,1009e94 <__divdf3+0x244>
 1009d28:	28802d26 	beq	r5,r2,1009de0 <__divdf3+0x190>
 1009d2c:	d8c00617 	ldw	r3,24(sp)
 1009d30:	d8800b17 	ldw	r2,44(sp)
 1009d34:	d9c00817 	ldw	r7,32(sp)
 1009d38:	dc400d17 	ldw	r17,52(sp)
 1009d3c:	188bc83a 	sub	r5,r3,r2
 1009d40:	d9800717 	ldw	r6,28(sp)
 1009d44:	dc000c17 	ldw	r16,48(sp)
 1009d48:	d9400615 	stw	r5,24(sp)
 1009d4c:	3c403836 	bltu	r7,r17,1009e30 <__divdf3+0x1e0>
 1009d50:	89c03626 	beq	r17,r7,1009e2c <__divdf3+0x1dc>
 1009d54:	0015883a 	mov	r10,zero
 1009d58:	001d883a 	mov	r14,zero
 1009d5c:	02c40034 	movhi	r11,4096
 1009d60:	001f883a 	mov	r15,zero
 1009d64:	003f883a 	mov	ra,zero
 1009d68:	04800f44 	movi	r18,61
 1009d6c:	00000f06 	br	1009dac <__divdf3+0x15c>
 1009d70:	601d883a 	mov	r14,r12
 1009d74:	681f883a 	mov	r15,r13
 1009d78:	400d883a 	mov	r6,r8
 1009d7c:	100f883a 	mov	r7,r2
 1009d80:	3191883a 	add	r8,r6,r6
 1009d84:	5808d07a 	srli	r4,r11,1
 1009d88:	4185803a 	cmpltu	r2,r8,r6
 1009d8c:	39d3883a 	add	r9,r7,r7
 1009d90:	28c6b03a 	or	r3,r5,r3
 1009d94:	1245883a 	add	r2,r2,r9
 1009d98:	1815883a 	mov	r10,r3
 1009d9c:	2017883a 	mov	r11,r4
 1009da0:	400d883a 	mov	r6,r8
 1009da4:	100f883a 	mov	r7,r2
 1009da8:	fc801726 	beq	ra,r18,1009e08 <__divdf3+0x1b8>
 1009dac:	580a97fa 	slli	r5,r11,31
 1009db0:	5006d07a 	srli	r3,r10,1
 1009db4:	ffc00044 	addi	ra,ra,1
 1009db8:	3c7ff136 	bltu	r7,r17,1009d80 <__divdf3+0x130>
 1009dbc:	3411c83a 	sub	r8,r6,r16
 1009dc0:	3205803a 	cmpltu	r2,r6,r8
 1009dc4:	3c53c83a 	sub	r9,r7,r17
 1009dc8:	7298b03a 	or	r12,r14,r10
 1009dcc:	7adab03a 	or	r13,r15,r11
 1009dd0:	4885c83a 	sub	r2,r9,r2
 1009dd4:	89ffe61e 	bne	r17,r7,1009d70 <__divdf3+0x120>
 1009dd8:	343fe936 	bltu	r6,r16,1009d80 <__divdf3+0x130>
 1009ddc:	003fe406 	br	1009d70 <__divdf3+0x120>
 1009de0:	9809883a 	mov	r4,r19
 1009de4:	d9800415 	stw	r6,16(sp)
 1009de8:	100a4dc0 	call	100a4dc <__pack_d>
 1009dec:	dfc01217 	ldw	ra,72(sp)
 1009df0:	dcc01117 	ldw	r19,68(sp)
 1009df4:	dc801017 	ldw	r18,64(sp)
 1009df8:	dc400f17 	ldw	r17,60(sp)
 1009dfc:	dc000e17 	ldw	r16,56(sp)
 1009e00:	dec01304 	addi	sp,sp,76
 1009e04:	f800283a 	ret
 1009e08:	00803fc4 	movi	r2,255
 1009e0c:	7090703a 	and	r8,r14,r2
 1009e10:	00802004 	movi	r2,128
 1009e14:	0007883a 	mov	r3,zero
 1009e18:	0013883a 	mov	r9,zero
 1009e1c:	40800d26 	beq	r8,r2,1009e54 <__divdf3+0x204>
 1009e20:	dbc00815 	stw	r15,32(sp)
 1009e24:	db800715 	stw	r14,28(sp)
 1009e28:	003fab06 	br	1009cd8 <__divdf3+0x88>
 1009e2c:	343fc92e 	bgeu	r6,r16,1009d54 <__divdf3+0x104>
 1009e30:	3185883a 	add	r2,r6,r6
 1009e34:	1189803a 	cmpltu	r4,r2,r6
 1009e38:	39c7883a 	add	r3,r7,r7
 1009e3c:	20c9883a 	add	r4,r4,r3
 1009e40:	297fffc4 	addi	r5,r5,-1
 1009e44:	100d883a 	mov	r6,r2
 1009e48:	200f883a 	mov	r7,r4
 1009e4c:	d9400615 	stw	r5,24(sp)
 1009e50:	003fc006 	br	1009d54 <__divdf3+0x104>
 1009e54:	483ff21e 	bne	r9,zero,1009e20 <__divdf3+0x1d0>
 1009e58:	01004004 	movi	r4,256
 1009e5c:	7104703a 	and	r2,r14,r4
 1009e60:	10c4b03a 	or	r2,r2,r3
 1009e64:	103fee1e 	bne	r2,zero,1009e20 <__divdf3+0x1d0>
 1009e68:	31c4b03a 	or	r2,r6,r7
 1009e6c:	103fec26 	beq	r2,zero,1009e20 <__divdf3+0x1d0>
 1009e70:	7205883a 	add	r2,r14,r8
 1009e74:	1391803a 	cmpltu	r8,r2,r14
 1009e78:	43d1883a 	add	r8,r8,r15
 1009e7c:	013fc004 	movi	r4,-256
 1009e80:	111c703a 	and	r14,r2,r4
 1009e84:	401f883a 	mov	r15,r8
 1009e88:	003fe506 	br	1009e20 <__divdf3+0x1d0>
 1009e8c:	8009883a 	mov	r4,r16
 1009e90:	003f9206 	br	1009cdc <__divdf3+0x8c>
 1009e94:	9809883a 	mov	r4,r19
 1009e98:	d8000715 	stw	zero,28(sp)
 1009e9c:	d8000815 	stw	zero,32(sp)
 1009ea0:	d8000615 	stw	zero,24(sp)
 1009ea4:	003f8d06 	br	1009cdc <__divdf3+0x8c>

01009ea8 <__floatsidf>:
 1009ea8:	2006d7fa 	srli	r3,r4,31
 1009eac:	defff604 	addi	sp,sp,-40
 1009eb0:	008000c4 	movi	r2,3
 1009eb4:	dfc00915 	stw	ra,36(sp)
 1009eb8:	dcc00815 	stw	r19,32(sp)
 1009ebc:	dc800715 	stw	r18,28(sp)
 1009ec0:	dc400615 	stw	r17,24(sp)
 1009ec4:	dc000515 	stw	r16,20(sp)
 1009ec8:	d8800015 	stw	r2,0(sp)
 1009ecc:	d8c00115 	stw	r3,4(sp)
 1009ed0:	20000f1e 	bne	r4,zero,1009f10 <__floatsidf+0x68>
 1009ed4:	00800084 	movi	r2,2
 1009ed8:	d8800015 	stw	r2,0(sp)
 1009edc:	d809883a 	mov	r4,sp
 1009ee0:	100a4dc0 	call	100a4dc <__pack_d>
 1009ee4:	1009883a 	mov	r4,r2
 1009ee8:	180b883a 	mov	r5,r3
 1009eec:	2005883a 	mov	r2,r4
 1009ef0:	2807883a 	mov	r3,r5
 1009ef4:	dfc00917 	ldw	ra,36(sp)
 1009ef8:	dcc00817 	ldw	r19,32(sp)
 1009efc:	dc800717 	ldw	r18,28(sp)
 1009f00:	dc400617 	ldw	r17,24(sp)
 1009f04:	dc000517 	ldw	r16,20(sp)
 1009f08:	dec00a04 	addi	sp,sp,40
 1009f0c:	f800283a 	ret
 1009f10:	00800f04 	movi	r2,60
 1009f14:	1807003a 	cmpeq	r3,r3,zero
 1009f18:	d8800215 	stw	r2,8(sp)
 1009f1c:	18001126 	beq	r3,zero,1009f64 <__floatsidf+0xbc>
 1009f20:	0027883a 	mov	r19,zero
 1009f24:	2025883a 	mov	r18,r4
 1009f28:	d9000315 	stw	r4,12(sp)
 1009f2c:	dcc00415 	stw	r19,16(sp)
 1009f30:	100a2340 	call	100a234 <__clzsi2>
 1009f34:	11000744 	addi	r4,r2,29
 1009f38:	013fe80e 	bge	zero,r4,1009edc <__floatsidf+0x34>
 1009f3c:	10bfff44 	addi	r2,r2,-3
 1009f40:	10000c16 	blt	r2,zero,1009f74 <__floatsidf+0xcc>
 1009f44:	90a2983a 	sll	r17,r18,r2
 1009f48:	0021883a 	mov	r16,zero
 1009f4c:	d8800217 	ldw	r2,8(sp)
 1009f50:	dc400415 	stw	r17,16(sp)
 1009f54:	dc000315 	stw	r16,12(sp)
 1009f58:	1105c83a 	sub	r2,r2,r4
 1009f5c:	d8800215 	stw	r2,8(sp)
 1009f60:	003fde06 	br	1009edc <__floatsidf+0x34>
 1009f64:	00a00034 	movhi	r2,32768
 1009f68:	20800a26 	beq	r4,r2,1009f94 <__floatsidf+0xec>
 1009f6c:	0109c83a 	sub	r4,zero,r4
 1009f70:	003feb06 	br	1009f20 <__floatsidf+0x78>
 1009f74:	9006d07a 	srli	r3,r18,1
 1009f78:	008007c4 	movi	r2,31
 1009f7c:	1105c83a 	sub	r2,r2,r4
 1009f80:	1886d83a 	srl	r3,r3,r2
 1009f84:	9922983a 	sll	r17,r19,r4
 1009f88:	9120983a 	sll	r16,r18,r4
 1009f8c:	1c62b03a 	or	r17,r3,r17
 1009f90:	003fee06 	br	1009f4c <__floatsidf+0xa4>
 1009f94:	0009883a 	mov	r4,zero
 1009f98:	01707834 	movhi	r5,49632
 1009f9c:	003fd306 	br	1009eec <__floatsidf+0x44>

01009fa0 <__fixdfsi>:
 1009fa0:	defff804 	addi	sp,sp,-32
 1009fa4:	2005883a 	mov	r2,r4
 1009fa8:	2807883a 	mov	r3,r5
 1009fac:	d809883a 	mov	r4,sp
 1009fb0:	d9400204 	addi	r5,sp,8
 1009fb4:	d8c00115 	stw	r3,4(sp)
 1009fb8:	d8800015 	stw	r2,0(sp)
 1009fbc:	dfc00715 	stw	ra,28(sp)
 1009fc0:	100a7f00 	call	100a7f0 <__unpack_d>
 1009fc4:	d8c00217 	ldw	r3,8(sp)
 1009fc8:	00800084 	movi	r2,2
 1009fcc:	1880051e 	bne	r3,r2,1009fe4 <__fixdfsi+0x44>
 1009fd0:	0007883a 	mov	r3,zero
 1009fd4:	1805883a 	mov	r2,r3
 1009fd8:	dfc00717 	ldw	ra,28(sp)
 1009fdc:	dec00804 	addi	sp,sp,32
 1009fe0:	f800283a 	ret
 1009fe4:	00800044 	movi	r2,1
 1009fe8:	10fff92e 	bgeu	r2,r3,1009fd0 <__fixdfsi+0x30>
 1009fec:	00800104 	movi	r2,4
 1009ff0:	18800426 	beq	r3,r2,100a004 <__fixdfsi+0x64>
 1009ff4:	d8c00417 	ldw	r3,16(sp)
 1009ff8:	183ff516 	blt	r3,zero,1009fd0 <__fixdfsi+0x30>
 1009ffc:	00800784 	movi	r2,30
 100a000:	10c0080e 	bge	r2,r3,100a024 <__fixdfsi+0x84>
 100a004:	d8800317 	ldw	r2,12(sp)
 100a008:	1000121e 	bne	r2,zero,100a054 <__fixdfsi+0xb4>
 100a00c:	00e00034 	movhi	r3,32768
 100a010:	18ffffc4 	addi	r3,r3,-1
 100a014:	1805883a 	mov	r2,r3
 100a018:	dfc00717 	ldw	ra,28(sp)
 100a01c:	dec00804 	addi	sp,sp,32
 100a020:	f800283a 	ret
 100a024:	00800f04 	movi	r2,60
 100a028:	10d1c83a 	sub	r8,r2,r3
 100a02c:	40bff804 	addi	r2,r8,-32
 100a030:	d9800517 	ldw	r6,20(sp)
 100a034:	d9c00617 	ldw	r7,24(sp)
 100a038:	10000816 	blt	r2,zero,100a05c <__fixdfsi+0xbc>
 100a03c:	3888d83a 	srl	r4,r7,r2
 100a040:	d8800317 	ldw	r2,12(sp)
 100a044:	2007883a 	mov	r3,r4
 100a048:	103fe226 	beq	r2,zero,1009fd4 <__fixdfsi+0x34>
 100a04c:	0107c83a 	sub	r3,zero,r4
 100a050:	003fe006 	br	1009fd4 <__fixdfsi+0x34>
 100a054:	00e00034 	movhi	r3,32768
 100a058:	003fde06 	br	1009fd4 <__fixdfsi+0x34>
 100a05c:	39c7883a 	add	r3,r7,r7
 100a060:	008007c4 	movi	r2,31
 100a064:	1205c83a 	sub	r2,r2,r8
 100a068:	1886983a 	sll	r3,r3,r2
 100a06c:	3208d83a 	srl	r4,r6,r8
 100a070:	1908b03a 	or	r4,r3,r4
 100a074:	003ff206 	br	100a040 <__fixdfsi+0xa0>

0100a078 <__make_dp>:
 100a078:	defff904 	addi	sp,sp,-28
 100a07c:	d8c00717 	ldw	r3,28(sp)
 100a080:	d9000015 	stw	r4,0(sp)
 100a084:	d809883a 	mov	r4,sp
 100a088:	dfc00515 	stw	ra,20(sp)
 100a08c:	d9c00615 	stw	r7,24(sp)
 100a090:	d9400115 	stw	r5,4(sp)
 100a094:	d9800215 	stw	r6,8(sp)
 100a098:	d8c00415 	stw	r3,16(sp)
 100a09c:	d9c00315 	stw	r7,12(sp)
 100a0a0:	100a4dc0 	call	100a4dc <__pack_d>
 100a0a4:	dfc00517 	ldw	ra,20(sp)
 100a0a8:	dec00704 	addi	sp,sp,28
 100a0ac:	f800283a 	ret

0100a0b0 <udivmodsi4>:
 100a0b0:	29001b2e 	bgeu	r5,r4,100a120 <udivmodsi4+0x70>
 100a0b4:	28001a16 	blt	r5,zero,100a120 <udivmodsi4+0x70>
 100a0b8:	00800044 	movi	r2,1
 100a0bc:	0007883a 	mov	r3,zero
 100a0c0:	01c007c4 	movi	r7,31
 100a0c4:	00000306 	br	100a0d4 <udivmodsi4+0x24>
 100a0c8:	19c01326 	beq	r3,r7,100a118 <udivmodsi4+0x68>
 100a0cc:	18c00044 	addi	r3,r3,1
 100a0d0:	28000416 	blt	r5,zero,100a0e4 <udivmodsi4+0x34>
 100a0d4:	294b883a 	add	r5,r5,r5
 100a0d8:	1085883a 	add	r2,r2,r2
 100a0dc:	293ffa36 	bltu	r5,r4,100a0c8 <udivmodsi4+0x18>
 100a0e0:	10000d26 	beq	r2,zero,100a118 <udivmodsi4+0x68>
 100a0e4:	0007883a 	mov	r3,zero
 100a0e8:	21400236 	bltu	r4,r5,100a0f4 <udivmodsi4+0x44>
 100a0ec:	2149c83a 	sub	r4,r4,r5
 100a0f0:	1886b03a 	or	r3,r3,r2
 100a0f4:	1004d07a 	srli	r2,r2,1
 100a0f8:	280ad07a 	srli	r5,r5,1
 100a0fc:	103ffa1e 	bne	r2,zero,100a0e8 <udivmodsi4+0x38>
 100a100:	30000226 	beq	r6,zero,100a10c <udivmodsi4+0x5c>
 100a104:	2005883a 	mov	r2,r4
 100a108:	f800283a 	ret
 100a10c:	1809883a 	mov	r4,r3
 100a110:	2005883a 	mov	r2,r4
 100a114:	f800283a 	ret
 100a118:	0007883a 	mov	r3,zero
 100a11c:	003ff806 	br	100a100 <udivmodsi4+0x50>
 100a120:	00800044 	movi	r2,1
 100a124:	0007883a 	mov	r3,zero
 100a128:	003fef06 	br	100a0e8 <udivmodsi4+0x38>

0100a12c <__divsi3>:
 100a12c:	defffe04 	addi	sp,sp,-8
 100a130:	dc000015 	stw	r16,0(sp)
 100a134:	dfc00115 	stw	ra,4(sp)
 100a138:	0021883a 	mov	r16,zero
 100a13c:	20000c16 	blt	r4,zero,100a170 <__divsi3+0x44>
 100a140:	000d883a 	mov	r6,zero
 100a144:	28000e16 	blt	r5,zero,100a180 <__divsi3+0x54>
 100a148:	100a0b00 	call	100a0b0 <udivmodsi4>
 100a14c:	1007883a 	mov	r3,r2
 100a150:	8005003a 	cmpeq	r2,r16,zero
 100a154:	1000011e 	bne	r2,zero,100a15c <__divsi3+0x30>
 100a158:	00c7c83a 	sub	r3,zero,r3
 100a15c:	1805883a 	mov	r2,r3
 100a160:	dfc00117 	ldw	ra,4(sp)
 100a164:	dc000017 	ldw	r16,0(sp)
 100a168:	dec00204 	addi	sp,sp,8
 100a16c:	f800283a 	ret
 100a170:	0109c83a 	sub	r4,zero,r4
 100a174:	04000044 	movi	r16,1
 100a178:	000d883a 	mov	r6,zero
 100a17c:	283ff20e 	bge	r5,zero,100a148 <__divsi3+0x1c>
 100a180:	014bc83a 	sub	r5,zero,r5
 100a184:	8021003a 	cmpeq	r16,r16,zero
 100a188:	003fef06 	br	100a148 <__divsi3+0x1c>

0100a18c <__modsi3>:
 100a18c:	deffff04 	addi	sp,sp,-4
 100a190:	dfc00015 	stw	ra,0(sp)
 100a194:	01800044 	movi	r6,1
 100a198:	2807883a 	mov	r3,r5
 100a19c:	20000416 	blt	r4,zero,100a1b0 <__modsi3+0x24>
 100a1a0:	28000c16 	blt	r5,zero,100a1d4 <__modsi3+0x48>
 100a1a4:	dfc00017 	ldw	ra,0(sp)
 100a1a8:	dec00104 	addi	sp,sp,4
 100a1ac:	100a0b01 	jmpi	100a0b0 <udivmodsi4>
 100a1b0:	0109c83a 	sub	r4,zero,r4
 100a1b4:	28000b16 	blt	r5,zero,100a1e4 <__modsi3+0x58>
 100a1b8:	180b883a 	mov	r5,r3
 100a1bc:	01800044 	movi	r6,1
 100a1c0:	100a0b00 	call	100a0b0 <udivmodsi4>
 100a1c4:	0085c83a 	sub	r2,zero,r2
 100a1c8:	dfc00017 	ldw	ra,0(sp)
 100a1cc:	dec00104 	addi	sp,sp,4
 100a1d0:	f800283a 	ret
 100a1d4:	014bc83a 	sub	r5,zero,r5
 100a1d8:	dfc00017 	ldw	ra,0(sp)
 100a1dc:	dec00104 	addi	sp,sp,4
 100a1e0:	100a0b01 	jmpi	100a0b0 <udivmodsi4>
 100a1e4:	0147c83a 	sub	r3,zero,r5
 100a1e8:	003ff306 	br	100a1b8 <__modsi3+0x2c>

0100a1ec <__udivsi3>:
 100a1ec:	000d883a 	mov	r6,zero
 100a1f0:	100a0b01 	jmpi	100a0b0 <udivmodsi4>

0100a1f4 <__umodsi3>:
 100a1f4:	01800044 	movi	r6,1
 100a1f8:	100a0b01 	jmpi	100a0b0 <udivmodsi4>

0100a1fc <__mulsi3>:
 100a1fc:	20000a26 	beq	r4,zero,100a228 <__mulsi3+0x2c>
 100a200:	0007883a 	mov	r3,zero
 100a204:	2080004c 	andi	r2,r4,1
 100a208:	1005003a 	cmpeq	r2,r2,zero
 100a20c:	2008d07a 	srli	r4,r4,1
 100a210:	1000011e 	bne	r2,zero,100a218 <__mulsi3+0x1c>
 100a214:	1947883a 	add	r3,r3,r5
 100a218:	294b883a 	add	r5,r5,r5
 100a21c:	203ff91e 	bne	r4,zero,100a204 <__mulsi3+0x8>
 100a220:	1805883a 	mov	r2,r3
 100a224:	f800283a 	ret
 100a228:	0007883a 	mov	r3,zero
 100a22c:	1805883a 	mov	r2,r3
 100a230:	f800283a 	ret

0100a234 <__clzsi2>:
 100a234:	00bfffd4 	movui	r2,65535
 100a238:	11000e36 	bltu	r2,r4,100a274 <__clzsi2+0x40>
 100a23c:	00803fc4 	movi	r2,255
 100a240:	01400204 	movi	r5,8
 100a244:	0007883a 	mov	r3,zero
 100a248:	11001036 	bltu	r2,r4,100a28c <__clzsi2+0x58>
 100a24c:	000b883a 	mov	r5,zero
 100a250:	20c6d83a 	srl	r3,r4,r3
 100a254:	00802034 	movhi	r2,128
 100a258:	1080a504 	addi	r2,r2,660
 100a25c:	1887883a 	add	r3,r3,r2
 100a260:	18800003 	ldbu	r2,0(r3)
 100a264:	00c00804 	movi	r3,32
 100a268:	2885883a 	add	r2,r5,r2
 100a26c:	1885c83a 	sub	r2,r3,r2
 100a270:	f800283a 	ret
 100a274:	01400404 	movi	r5,16
 100a278:	00804034 	movhi	r2,256
 100a27c:	10bfffc4 	addi	r2,r2,-1
 100a280:	2807883a 	mov	r3,r5
 100a284:	113ff22e 	bgeu	r2,r4,100a250 <__clzsi2+0x1c>
 100a288:	01400604 	movi	r5,24
 100a28c:	2807883a 	mov	r3,r5
 100a290:	20c6d83a 	srl	r3,r4,r3
 100a294:	00802034 	movhi	r2,128
 100a298:	1080a504 	addi	r2,r2,660
 100a29c:	1887883a 	add	r3,r3,r2
 100a2a0:	18800003 	ldbu	r2,0(r3)
 100a2a4:	00c00804 	movi	r3,32
 100a2a8:	2885883a 	add	r2,r5,r2
 100a2ac:	1885c83a 	sub	r2,r3,r2
 100a2b0:	f800283a 	ret

0100a2b4 <__pack_f>:
 100a2b4:	20c00017 	ldw	r3,0(r4)
 100a2b8:	01c00044 	movi	r7,1
 100a2bc:	21800317 	ldw	r6,12(r4)
 100a2c0:	21400117 	ldw	r5,4(r4)
 100a2c4:	38c02d2e 	bgeu	r7,r3,100a37c <__pack_f+0xc8>
 100a2c8:	00800104 	movi	r2,4
 100a2cc:	18802826 	beq	r3,r2,100a370 <__pack_f+0xbc>
 100a2d0:	00800084 	movi	r2,2
 100a2d4:	18800126 	beq	r3,r2,100a2dc <__pack_f+0x28>
 100a2d8:	3000101e 	bne	r6,zero,100a31c <__pack_f+0x68>
 100a2dc:	000d883a 	mov	r6,zero
 100a2e0:	0007883a 	mov	r3,zero
 100a2e4:	19003fcc 	andi	r4,r3,255
 100a2e8:	200895fa 	slli	r4,r4,23
 100a2ec:	00c02034 	movhi	r3,128
 100a2f0:	18ffffc4 	addi	r3,r3,-1
 100a2f4:	30c6703a 	and	r3,r6,r3
 100a2f8:	10a0002c 	andhi	r2,r2,32768
 100a2fc:	10c4b03a 	or	r2,r2,r3
 100a300:	280a97fa 	slli	r5,r5,31
 100a304:	1104b03a 	or	r2,r2,r4
 100a308:	00e00034 	movhi	r3,32768
 100a30c:	18ffffc4 	addi	r3,r3,-1
 100a310:	10c4703a 	and	r2,r2,r3
 100a314:	1144b03a 	or	r2,r2,r5
 100a318:	f800283a 	ret
 100a31c:	21000217 	ldw	r4,8(r4)
 100a320:	00bfe084 	movi	r2,-126
 100a324:	20801b16 	blt	r4,r2,100a394 <__pack_f+0xe0>
 100a328:	00801fc4 	movi	r2,127
 100a32c:	11001016 	blt	r2,r4,100a370 <__pack_f+0xbc>
 100a330:	308e703a 	and	r7,r6,r2
 100a334:	2087883a 	add	r3,r4,r2
 100a338:	00801004 	movi	r2,64
 100a33c:	38800526 	beq	r7,r2,100a354 <__pack_f+0xa0>
 100a340:	31800fc4 	addi	r6,r6,63
 100a344:	30000716 	blt	r6,zero,100a364 <__pack_f+0xb0>
 100a348:	300490ba 	slli	r2,r6,2
 100a34c:	100cd27a 	srli	r6,r2,9
 100a350:	003fe406 	br	100a2e4 <__pack_f+0x30>
 100a354:	3080200c 	andi	r2,r6,128
 100a358:	103ffa26 	beq	r2,zero,100a344 <__pack_f+0x90>
 100a35c:	31cd883a 	add	r6,r6,r7
 100a360:	003ff806 	br	100a344 <__pack_f+0x90>
 100a364:	300cd07a 	srli	r6,r6,1
 100a368:	18c00044 	addi	r3,r3,1
 100a36c:	003ff606 	br	100a348 <__pack_f+0x94>
 100a370:	000d883a 	mov	r6,zero
 100a374:	00ffffc4 	movi	r3,-1
 100a378:	003fda06 	br	100a2e4 <__pack_f+0x30>
 100a37c:	31800434 	orhi	r6,r6,16
 100a380:	00802034 	movhi	r2,128
 100a384:	10bfffc4 	addi	r2,r2,-1
 100a388:	308c703a 	and	r6,r6,r2
 100a38c:	00ffffc4 	movi	r3,-1
 100a390:	003fd406 	br	100a2e4 <__pack_f+0x30>
 100a394:	1109c83a 	sub	r4,r2,r4
 100a398:	00800644 	movi	r2,25
 100a39c:	11001216 	blt	r2,r4,100a3e8 <__pack_f+0x134>
 100a3a0:	3904983a 	sll	r2,r7,r4
 100a3a4:	3106d83a 	srl	r3,r6,r4
 100a3a8:	10bfffc4 	addi	r2,r2,-1
 100a3ac:	3084703a 	and	r2,r6,r2
 100a3b0:	1004c03a 	cmpne	r2,r2,zero
 100a3b4:	1886b03a 	or	r3,r3,r2
 100a3b8:	19001fcc 	andi	r4,r3,127
 100a3bc:	00801004 	movi	r2,64
 100a3c0:	20800c26 	beq	r4,r2,100a3f4 <__pack_f+0x140>
 100a3c4:	18c00fc4 	addi	r3,r3,63
 100a3c8:	00900034 	movhi	r2,16384
 100a3cc:	10bfffc4 	addi	r2,r2,-1
 100a3d0:	180cd1fa 	srli	r6,r3,7
 100a3d4:	10c7803a 	cmpltu	r3,r2,r3
 100a3d8:	00802034 	movhi	r2,128
 100a3dc:	10bfffc4 	addi	r2,r2,-1
 100a3e0:	308c703a 	and	r6,r6,r2
 100a3e4:	003fbf06 	br	100a2e4 <__pack_f+0x30>
 100a3e8:	0007883a 	mov	r3,zero
 100a3ec:	000d883a 	mov	r6,zero
 100a3f0:	003ff906 	br	100a3d8 <__pack_f+0x124>
 100a3f4:	1880200c 	andi	r2,r3,128
 100a3f8:	10000126 	beq	r2,zero,100a400 <__pack_f+0x14c>
 100a3fc:	1907883a 	add	r3,r3,r4
 100a400:	180cd1fa 	srli	r6,r3,7
 100a404:	00900034 	movhi	r2,16384
 100a408:	10bfffc4 	addi	r2,r2,-1
 100a40c:	10c7803a 	cmpltu	r3,r2,r3
 100a410:	003ff106 	br	100a3d8 <__pack_f+0x124>

0100a414 <__unpack_f>:
 100a414:	21800017 	ldw	r6,0(r4)
 100a418:	00c02034 	movhi	r3,128
 100a41c:	18ffffc4 	addi	r3,r3,-1
 100a420:	3004d5fa 	srli	r2,r6,23
 100a424:	3008d7fa 	srli	r4,r6,31
 100a428:	30ce703a 	and	r7,r6,r3
 100a42c:	10c03fcc 	andi	r3,r2,255
 100a430:	29000115 	stw	r4,4(r5)
 100a434:	1800131e 	bne	r3,zero,100a484 <__unpack_f+0x70>
 100a438:	38000f26 	beq	r7,zero,100a478 <__unpack_f+0x64>
 100a43c:	380691fa 	slli	r3,r7,7
 100a440:	01bfe084 	movi	r6,-126
 100a444:	008000c4 	movi	r2,3
 100a448:	01100034 	movhi	r4,16384
 100a44c:	213fffc4 	addi	r4,r4,-1
 100a450:	28800015 	stw	r2,0(r5)
 100a454:	29800215 	stw	r6,8(r5)
 100a458:	20c00536 	bltu	r4,r3,100a470 <__unpack_f+0x5c>
 100a45c:	3005883a 	mov	r2,r6
 100a460:	18c7883a 	add	r3,r3,r3
 100a464:	10bfffc4 	addi	r2,r2,-1
 100a468:	20fffd2e 	bgeu	r4,r3,100a460 <__unpack_f+0x4c>
 100a46c:	28800215 	stw	r2,8(r5)
 100a470:	28c00315 	stw	r3,12(r5)
 100a474:	f800283a 	ret
 100a478:	00800084 	movi	r2,2
 100a47c:	28800015 	stw	r2,0(r5)
 100a480:	f800283a 	ret
 100a484:	00803fc4 	movi	r2,255
 100a488:	18800826 	beq	r3,r2,100a4ac <__unpack_f+0x98>
 100a48c:	380491fa 	slli	r2,r7,7
 100a490:	18ffe044 	addi	r3,r3,-127
 100a494:	28c00215 	stw	r3,8(r5)
 100a498:	10900034 	orhi	r2,r2,16384
 100a49c:	28800315 	stw	r2,12(r5)
 100a4a0:	008000c4 	movi	r2,3
 100a4a4:	28800015 	stw	r2,0(r5)
 100a4a8:	f800283a 	ret
 100a4ac:	3800031e 	bne	r7,zero,100a4bc <__unpack_f+0xa8>
 100a4b0:	00800104 	movi	r2,4
 100a4b4:	28800015 	stw	r2,0(r5)
 100a4b8:	f800283a 	ret
 100a4bc:	3080042c 	andhi	r2,r6,16
 100a4c0:	10000426 	beq	r2,zero,100a4d4 <__unpack_f+0xc0>
 100a4c4:	00800044 	movi	r2,1
 100a4c8:	28800015 	stw	r2,0(r5)
 100a4cc:	29c00315 	stw	r7,12(r5)
 100a4d0:	f800283a 	ret
 100a4d4:	28000015 	stw	zero,0(r5)
 100a4d8:	003ffc06 	br	100a4cc <__unpack_f+0xb8>

0100a4dc <__pack_d>:
 100a4dc:	20c00017 	ldw	r3,0(r4)
 100a4e0:	defffd04 	addi	sp,sp,-12
 100a4e4:	dc000015 	stw	r16,0(sp)
 100a4e8:	dc800215 	stw	r18,8(sp)
 100a4ec:	dc400115 	stw	r17,4(sp)
 100a4f0:	00800044 	movi	r2,1
 100a4f4:	22000317 	ldw	r8,12(r4)
 100a4f8:	001f883a 	mov	r15,zero
 100a4fc:	22400417 	ldw	r9,16(r4)
 100a500:	24000117 	ldw	r16,4(r4)
 100a504:	10c0552e 	bgeu	r2,r3,100a65c <__pack_d+0x180>
 100a508:	00800104 	movi	r2,4
 100a50c:	18804f26 	beq	r3,r2,100a64c <__pack_d+0x170>
 100a510:	00800084 	movi	r2,2
 100a514:	18800226 	beq	r3,r2,100a520 <__pack_d+0x44>
 100a518:	4244b03a 	or	r2,r8,r9
 100a51c:	10001a1e 	bne	r2,zero,100a588 <__pack_d+0xac>
 100a520:	000d883a 	mov	r6,zero
 100a524:	000f883a 	mov	r7,zero
 100a528:	0011883a 	mov	r8,zero
 100a52c:	00800434 	movhi	r2,16
 100a530:	10bfffc4 	addi	r2,r2,-1
 100a534:	301d883a 	mov	r14,r6
 100a538:	3884703a 	and	r2,r7,r2
 100a53c:	400a953a 	slli	r5,r8,20
 100a540:	79bffc2c 	andhi	r6,r15,65520
 100a544:	308cb03a 	or	r6,r6,r2
 100a548:	00e00434 	movhi	r3,32784
 100a54c:	18ffffc4 	addi	r3,r3,-1
 100a550:	800497fa 	slli	r2,r16,31
 100a554:	30c6703a 	and	r3,r6,r3
 100a558:	1946b03a 	or	r3,r3,r5
 100a55c:	01600034 	movhi	r5,32768
 100a560:	297fffc4 	addi	r5,r5,-1
 100a564:	194a703a 	and	r5,r3,r5
 100a568:	288ab03a 	or	r5,r5,r2
 100a56c:	2807883a 	mov	r3,r5
 100a570:	7005883a 	mov	r2,r14
 100a574:	dc800217 	ldw	r18,8(sp)
 100a578:	dc400117 	ldw	r17,4(sp)
 100a57c:	dc000017 	ldw	r16,0(sp)
 100a580:	dec00304 	addi	sp,sp,12
 100a584:	f800283a 	ret
 100a588:	21000217 	ldw	r4,8(r4)
 100a58c:	00bf0084 	movi	r2,-1022
 100a590:	20803f16 	blt	r4,r2,100a690 <__pack_d+0x1b4>
 100a594:	0080ffc4 	movi	r2,1023
 100a598:	11002c16 	blt	r2,r4,100a64c <__pack_d+0x170>
 100a59c:	00803fc4 	movi	r2,255
 100a5a0:	408c703a 	and	r6,r8,r2
 100a5a4:	00802004 	movi	r2,128
 100a5a8:	0007883a 	mov	r3,zero
 100a5ac:	000f883a 	mov	r7,zero
 100a5b0:	2280ffc4 	addi	r10,r4,1023
 100a5b4:	30801e26 	beq	r6,r2,100a630 <__pack_d+0x154>
 100a5b8:	00801fc4 	movi	r2,127
 100a5bc:	4089883a 	add	r4,r8,r2
 100a5c0:	220d803a 	cmpltu	r6,r4,r8
 100a5c4:	324d883a 	add	r6,r6,r9
 100a5c8:	2011883a 	mov	r8,r4
 100a5cc:	3013883a 	mov	r9,r6
 100a5d0:	00880034 	movhi	r2,8192
 100a5d4:	10bfffc4 	addi	r2,r2,-1
 100a5d8:	12400d36 	bltu	r2,r9,100a610 <__pack_d+0x134>
 100a5dc:	4804963a 	slli	r2,r9,24
 100a5e0:	400cd23a 	srli	r6,r8,8
 100a5e4:	480ed23a 	srli	r7,r9,8
 100a5e8:	013fffc4 	movi	r4,-1
 100a5ec:	118cb03a 	or	r6,r2,r6
 100a5f0:	01400434 	movhi	r5,16
 100a5f4:	297fffc4 	addi	r5,r5,-1
 100a5f8:	3104703a 	and	r2,r6,r4
 100a5fc:	3946703a 	and	r3,r7,r5
 100a600:	5201ffcc 	andi	r8,r10,2047
 100a604:	100d883a 	mov	r6,r2
 100a608:	180f883a 	mov	r7,r3
 100a60c:	003fc706 	br	100a52c <__pack_d+0x50>
 100a610:	480897fa 	slli	r4,r9,31
 100a614:	4004d07a 	srli	r2,r8,1
 100a618:	4806d07a 	srli	r3,r9,1
 100a61c:	52800044 	addi	r10,r10,1
 100a620:	2084b03a 	or	r2,r4,r2
 100a624:	1011883a 	mov	r8,r2
 100a628:	1813883a 	mov	r9,r3
 100a62c:	003feb06 	br	100a5dc <__pack_d+0x100>
 100a630:	383fe11e 	bne	r7,zero,100a5b8 <__pack_d+0xdc>
 100a634:	01004004 	movi	r4,256
 100a638:	4104703a 	and	r2,r8,r4
 100a63c:	10c4b03a 	or	r2,r2,r3
 100a640:	103fe326 	beq	r2,zero,100a5d0 <__pack_d+0xf4>
 100a644:	3005883a 	mov	r2,r6
 100a648:	003fdc06 	br	100a5bc <__pack_d+0xe0>
 100a64c:	000d883a 	mov	r6,zero
 100a650:	000f883a 	mov	r7,zero
 100a654:	0201ffc4 	movi	r8,2047
 100a658:	003fb406 	br	100a52c <__pack_d+0x50>
 100a65c:	0005883a 	mov	r2,zero
 100a660:	00c00234 	movhi	r3,8
 100a664:	408cb03a 	or	r6,r8,r2
 100a668:	48ceb03a 	or	r7,r9,r3
 100a66c:	013fffc4 	movi	r4,-1
 100a670:	01400434 	movhi	r5,16
 100a674:	297fffc4 	addi	r5,r5,-1
 100a678:	3104703a 	and	r2,r6,r4
 100a67c:	3946703a 	and	r3,r7,r5
 100a680:	100d883a 	mov	r6,r2
 100a684:	180f883a 	mov	r7,r3
 100a688:	0201ffc4 	movi	r8,2047
 100a68c:	003fa706 	br	100a52c <__pack_d+0x50>
 100a690:	1109c83a 	sub	r4,r2,r4
 100a694:	00800e04 	movi	r2,56
 100a698:	11004316 	blt	r2,r4,100a7a8 <__pack_d+0x2cc>
 100a69c:	21fff804 	addi	r7,r4,-32
 100a6a0:	38004516 	blt	r7,zero,100a7b8 <__pack_d+0x2dc>
 100a6a4:	49d8d83a 	srl	r12,r9,r7
 100a6a8:	001b883a 	mov	r13,zero
 100a6ac:	0023883a 	mov	r17,zero
 100a6b0:	01400044 	movi	r5,1
 100a6b4:	0025883a 	mov	r18,zero
 100a6b8:	38004716 	blt	r7,zero,100a7d8 <__pack_d+0x2fc>
 100a6bc:	29d6983a 	sll	r11,r5,r7
 100a6c0:	0015883a 	mov	r10,zero
 100a6c4:	00bfffc4 	movi	r2,-1
 100a6c8:	5089883a 	add	r4,r10,r2
 100a6cc:	588b883a 	add	r5,r11,r2
 100a6d0:	228d803a 	cmpltu	r6,r4,r10
 100a6d4:	314b883a 	add	r5,r6,r5
 100a6d8:	4104703a 	and	r2,r8,r4
 100a6dc:	4946703a 	and	r3,r9,r5
 100a6e0:	10c4b03a 	or	r2,r2,r3
 100a6e4:	10000226 	beq	r2,zero,100a6f0 <__pack_d+0x214>
 100a6e8:	04400044 	movi	r17,1
 100a6ec:	0025883a 	mov	r18,zero
 100a6f0:	00803fc4 	movi	r2,255
 100a6f4:	644eb03a 	or	r7,r12,r17
 100a6f8:	3892703a 	and	r9,r7,r2
 100a6fc:	00802004 	movi	r2,128
 100a700:	6c90b03a 	or	r8,r13,r18
 100a704:	0015883a 	mov	r10,zero
 100a708:	48801626 	beq	r9,r2,100a764 <__pack_d+0x288>
 100a70c:	01001fc4 	movi	r4,127
 100a710:	3905883a 	add	r2,r7,r4
 100a714:	11cd803a 	cmpltu	r6,r2,r7
 100a718:	320d883a 	add	r6,r6,r8
 100a71c:	100f883a 	mov	r7,r2
 100a720:	00840034 	movhi	r2,4096
 100a724:	10bfffc4 	addi	r2,r2,-1
 100a728:	3011883a 	mov	r8,r6
 100a72c:	0007883a 	mov	r3,zero
 100a730:	11801b36 	bltu	r2,r6,100a7a0 <__pack_d+0x2c4>
 100a734:	4004963a 	slli	r2,r8,24
 100a738:	3808d23a 	srli	r4,r7,8
 100a73c:	400ad23a 	srli	r5,r8,8
 100a740:	1813883a 	mov	r9,r3
 100a744:	1108b03a 	or	r4,r2,r4
 100a748:	00bfffc4 	movi	r2,-1
 100a74c:	00c00434 	movhi	r3,16
 100a750:	18ffffc4 	addi	r3,r3,-1
 100a754:	208c703a 	and	r6,r4,r2
 100a758:	28ce703a 	and	r7,r5,r3
 100a75c:	4a01ffcc 	andi	r8,r9,2047
 100a760:	003f7206 	br	100a52c <__pack_d+0x50>
 100a764:	503fe91e 	bne	r10,zero,100a70c <__pack_d+0x230>
 100a768:	01004004 	movi	r4,256
 100a76c:	3904703a 	and	r2,r7,r4
 100a770:	0007883a 	mov	r3,zero
 100a774:	10c4b03a 	or	r2,r2,r3
 100a778:	10000626 	beq	r2,zero,100a794 <__pack_d+0x2b8>
 100a77c:	3a45883a 	add	r2,r7,r9
 100a780:	11cd803a 	cmpltu	r6,r2,r7
 100a784:	320d883a 	add	r6,r6,r8
 100a788:	100f883a 	mov	r7,r2
 100a78c:	3011883a 	mov	r8,r6
 100a790:	0007883a 	mov	r3,zero
 100a794:	00840034 	movhi	r2,4096
 100a798:	10bfffc4 	addi	r2,r2,-1
 100a79c:	123fe52e 	bgeu	r2,r8,100a734 <__pack_d+0x258>
 100a7a0:	00c00044 	movi	r3,1
 100a7a4:	003fe306 	br	100a734 <__pack_d+0x258>
 100a7a8:	0009883a 	mov	r4,zero
 100a7ac:	0013883a 	mov	r9,zero
 100a7b0:	000b883a 	mov	r5,zero
 100a7b4:	003fe406 	br	100a748 <__pack_d+0x26c>
 100a7b8:	4a47883a 	add	r3,r9,r9
 100a7bc:	008007c4 	movi	r2,31
 100a7c0:	1105c83a 	sub	r2,r2,r4
 100a7c4:	1886983a 	sll	r3,r3,r2
 100a7c8:	4118d83a 	srl	r12,r8,r4
 100a7cc:	491ad83a 	srl	r13,r9,r4
 100a7d0:	1b18b03a 	or	r12,r3,r12
 100a7d4:	003fb506 	br	100a6ac <__pack_d+0x1d0>
 100a7d8:	2806d07a 	srli	r3,r5,1
 100a7dc:	008007c4 	movi	r2,31
 100a7e0:	1105c83a 	sub	r2,r2,r4
 100a7e4:	1896d83a 	srl	r11,r3,r2
 100a7e8:	2914983a 	sll	r10,r5,r4
 100a7ec:	003fb506 	br	100a6c4 <__pack_d+0x1e8>

0100a7f0 <__unpack_d>:
 100a7f0:	20c00117 	ldw	r3,4(r4)
 100a7f4:	22400017 	ldw	r9,0(r4)
 100a7f8:	00800434 	movhi	r2,16
 100a7fc:	10bfffc4 	addi	r2,r2,-1
 100a800:	1808d53a 	srli	r4,r3,20
 100a804:	180cd7fa 	srli	r6,r3,31
 100a808:	1894703a 	and	r10,r3,r2
 100a80c:	2201ffcc 	andi	r8,r4,2047
 100a810:	281b883a 	mov	r13,r5
 100a814:	4817883a 	mov	r11,r9
 100a818:	29800115 	stw	r6,4(r5)
 100a81c:	5019883a 	mov	r12,r10
 100a820:	40001e1e 	bne	r8,zero,100a89c <__unpack_d+0xac>
 100a824:	4a84b03a 	or	r2,r9,r10
 100a828:	10001926 	beq	r2,zero,100a890 <__unpack_d+0xa0>
 100a82c:	4804d63a 	srli	r2,r9,24
 100a830:	500c923a 	slli	r6,r10,8
 100a834:	013f0084 	movi	r4,-1022
 100a838:	00c40034 	movhi	r3,4096
 100a83c:	18ffffc4 	addi	r3,r3,-1
 100a840:	118cb03a 	or	r6,r2,r6
 100a844:	008000c4 	movi	r2,3
 100a848:	480a923a 	slli	r5,r9,8
 100a84c:	68800015 	stw	r2,0(r13)
 100a850:	69000215 	stw	r4,8(r13)
 100a854:	19800b36 	bltu	r3,r6,100a884 <__unpack_d+0x94>
 100a858:	200f883a 	mov	r7,r4
 100a85c:	1811883a 	mov	r8,r3
 100a860:	2945883a 	add	r2,r5,r5
 100a864:	1149803a 	cmpltu	r4,r2,r5
 100a868:	3187883a 	add	r3,r6,r6
 100a86c:	20c9883a 	add	r4,r4,r3
 100a870:	100b883a 	mov	r5,r2
 100a874:	200d883a 	mov	r6,r4
 100a878:	39ffffc4 	addi	r7,r7,-1
 100a87c:	413ff82e 	bgeu	r8,r4,100a860 <__unpack_d+0x70>
 100a880:	69c00215 	stw	r7,8(r13)
 100a884:	69800415 	stw	r6,16(r13)
 100a888:	69400315 	stw	r5,12(r13)
 100a88c:	f800283a 	ret
 100a890:	00800084 	movi	r2,2
 100a894:	28800015 	stw	r2,0(r5)
 100a898:	f800283a 	ret
 100a89c:	0081ffc4 	movi	r2,2047
 100a8a0:	40800f26 	beq	r8,r2,100a8e0 <__unpack_d+0xf0>
 100a8a4:	480cd63a 	srli	r6,r9,24
 100a8a8:	5006923a 	slli	r3,r10,8
 100a8ac:	4804923a 	slli	r2,r9,8
 100a8b0:	0009883a 	mov	r4,zero
 100a8b4:	30c6b03a 	or	r3,r6,r3
 100a8b8:	01440034 	movhi	r5,4096
 100a8bc:	110cb03a 	or	r6,r2,r4
 100a8c0:	423f0044 	addi	r8,r8,-1023
 100a8c4:	194eb03a 	or	r7,r3,r5
 100a8c8:	008000c4 	movi	r2,3
 100a8cc:	69c00415 	stw	r7,16(r13)
 100a8d0:	6a000215 	stw	r8,8(r13)
 100a8d4:	68800015 	stw	r2,0(r13)
 100a8d8:	69800315 	stw	r6,12(r13)
 100a8dc:	f800283a 	ret
 100a8e0:	4a84b03a 	or	r2,r9,r10
 100a8e4:	1000031e 	bne	r2,zero,100a8f4 <__unpack_d+0x104>
 100a8e8:	00800104 	movi	r2,4
 100a8ec:	28800015 	stw	r2,0(r5)
 100a8f0:	f800283a 	ret
 100a8f4:	0009883a 	mov	r4,zero
 100a8f8:	01400234 	movhi	r5,8
 100a8fc:	4904703a 	and	r2,r9,r4
 100a900:	5146703a 	and	r3,r10,r5
 100a904:	10c4b03a 	or	r2,r2,r3
 100a908:	10000526 	beq	r2,zero,100a920 <__unpack_d+0x130>
 100a90c:	00800044 	movi	r2,1
 100a910:	68800015 	stw	r2,0(r13)
 100a914:	6b000415 	stw	r12,16(r13)
 100a918:	6ac00315 	stw	r11,12(r13)
 100a91c:	f800283a 	ret
 100a920:	68000015 	stw	zero,0(r13)
 100a924:	003ffb06 	br	100a914 <__unpack_d+0x124>

0100a928 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 100a928:	00802034 	movhi	r2,128
 100a92c:	10824504 	addi	r2,r2,2324
 100a930:	10800017 	ldw	r2,0(r2)
 100a934:	00ffde84 	movi	r3,-134
 100a938:	10001d26 	beq	r2,zero,100a9b0 <alt_alarm_start+0x88>
  {
    if (alarm)
 100a93c:	00fffa84 	movi	r3,-22
 100a940:	20001b26 	beq	r4,zero,100a9b0 <alt_alarm_start+0x88>
    {
      alarm->callback = callback;
 100a944:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 100a948:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a94c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a950:	00bfff84 	movi	r2,-2
 100a954:	3084703a 	and	r2,r6,r2
 100a958:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100a95c:	00802034 	movhi	r2,128
 100a960:	10824604 	addi	r2,r2,2328
 100a964:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 100a968:	18800044 	addi	r2,r3,1
 100a96c:	2885883a 	add	r2,r5,r2
 100a970:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100a974:	10c0032e 	bgeu	r2,r3,100a984 <alt_alarm_start+0x5c>
      {
        alarm->rollover = 1;
 100a978:	00800044 	movi	r2,1
 100a97c:	20800405 	stb	r2,16(r4)
 100a980:	00000106 	br	100a988 <alt_alarm_start+0x60>
      }
      else
      {
        alarm->rollover = 0;
 100a984:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100a988:	00802034 	movhi	r2,128
 100a98c:	10820004 	addi	r2,r2,2048
  entry->next     = list->next;
 100a990:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100a994:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 100a998:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 100a99c:	10c00017 	ldw	r3,0(r2)
  list->next           = entry;
 100a9a0:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 100a9a4:	19000115 	stw	r4,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a9a8:	3001703a 	wrctl	status,r6
 100a9ac:	0007883a 	mov	r3,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
 100a9b0:	1805883a 	mov	r2,r3
 100a9b4:	f800283a 	ret

0100a9b8 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 100a9b8:	2900051e 	bne	r5,r4,100a9d0 <alt_load_section+0x18>
 100a9bc:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
 100a9c0:	20800017 	ldw	r2,0(r4)
 100a9c4:	21000104 	addi	r4,r4,4
 100a9c8:	28800015 	stw	r2,0(r5)
 100a9cc:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a9d0:	29bffb1e 	bne	r5,r6,100a9c0 <alt_load_section+0x8>
 100a9d4:	f800283a 	ret

0100a9d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a9d8:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a9dc:	01004074 	movhi	r4,257
 100a9e0:	213d2404 	addi	r4,r4,-2928
 100a9e4:	01402034 	movhi	r5,128
 100a9e8:	29414304 	addi	r5,r5,1292
 100a9ec:	01802034 	movhi	r6,128
 100a9f0:	31822804 	addi	r6,r6,2208
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a9f4:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a9f8:	100a9b80 	call	100a9b8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a9fc:	01002034 	movhi	r4,128
 100aa00:	21000804 	addi	r4,r4,32
 100aa04:	01402034 	movhi	r5,128
 100aa08:	29400804 	addi	r5,r5,32
 100aa0c:	01802034 	movhi	r6,128
 100aa10:	31805104 	addi	r6,r6,324
 100aa14:	100a9b80 	call	100a9b8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100aa18:	01002034 	movhi	r4,128
 100aa1c:	21005104 	addi	r4,r4,324
 100aa20:	01402034 	movhi	r5,128
 100aa24:	29405104 	addi	r5,r5,324
 100aa28:	01802034 	movhi	r6,128
 100aa2c:	31814304 	addi	r6,r6,1292
 100aa30:	100a9b80 	call	100a9b8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100aa34:	100e4680 	call	100e468 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 100aa38:	dfc00017 	ldw	ra,0(sp)
 100aa3c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 100aa40:	100e5641 	jmpi	100e564 <alt_icache_flush_all>

0100aa44 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100aa44:	defffd04 	addi	sp,sp,-12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100aa48:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100aa4c:	dfc00215 	stw	ra,8(sp)
 100aa50:	dc400115 	stw	r17,4(sp)
 100aa54:	dc000015 	stw	r16,0(sp)
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100aa58:	04400044 	movi	r17,1
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100aa5c:	100e24c0 	call	100e24c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100aa60:	100b1c00 	call	100b1c0 <OSInit>
 100aa64:	8809883a 	mov	r4,r17
 100aa68:	100cc380 	call	100cc38 <OSSemCreate>
 100aa6c:	00c02034 	movhi	r3,128
 100aa70:	18c24704 	addi	r3,r3,2332
 100aa74:	8809883a 	mov	r4,r17
 100aa78:	18800015 	stw	r2,0(r3)
 100aa7c:	100cc380 	call	100cc38 <OSSemCreate>
 100aa80:	00c02034 	movhi	r3,128
 100aa84:	18c24804 	addi	r3,r3,2336
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 100aa88:	8809883a 	mov	r4,r17
 100aa8c:	18800015 	stw	r2,0(r3)
 100aa90:	100cc380 	call	100cc38 <OSSemCreate>
 100aa94:	00c02034 	movhi	r3,128
 100aa98:	18c26004 	addi	r3,r3,2432
 100aa9c:	18800015 	stw	r2,0(r3)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100aaa0:	100e1fc0 	call	100e1fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100aaa4:	01002034 	movhi	r4,128
 100aaa8:	2100e504 	addi	r4,r4,916
 100aaac:	200b883a 	mov	r5,r4
 100aab0:	200d883a 	mov	r6,r4
 100aab4:	100e6f80 	call	100e6f8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100aab8:	100e4e40 	call	100e4e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100aabc:	01004074 	movhi	r4,257
 100aac0:	21394904 	addi	r4,r4,-6876
 100aac4:	100ec740 	call	100ec74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100aac8:	d1604817 	ldw	r5,-32480(gp)
 100aacc:	d1a04917 	ldw	r6,-32476(gp)
 100aad0:	d1204717 	ldw	r4,-32484(gp)
 100aad4:	10095e40 	call	10095e4 <main>
 100aad8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 100aadc:	8809883a 	mov	r4,r17
 100aae0:	100e3cc0 	call	100e3cc <close>
  exit (result);
 100aae4:	8009883a 	mov	r4,r16
 100aae8:	100ec880 	call	100ec88 <exit>

0100aaec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 100aaec:	defff804 	addi	sp,sp,-32
 100aaf0:	dfc00415 	stw	ra,16(sp)
 100aaf4:	dc800315 	stw	r18,12(sp)
 100aaf8:	dc400215 	stw	r17,8(sp)
 100aafc:	dc000115 	stw	r16,4(sp)
 100ab00:	d9400515 	stw	r5,20(sp)
 100ab04:	d9800615 	stw	r6,24(sp)
 100ab08:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
 100ab0c:	d8800504 	addi	r2,sp,20
 100ab10:	2025883a 	mov	r18,r4
 100ab14:	d8800015 	stw	r2,0(sp)
 100ab18:	00003d06 	br	100ac10 <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 100ab1c:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 100ab20:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 100ab24:	18800226 	beq	r3,r2,100ab30 <alt_printf+0x44>
        {
            alt_putchar(c);
 100ab28:	1809883a 	mov	r4,r3
 100ab2c:	00000a06 	br	100ab58 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 100ab30:	91000007 	ldb	r4,0(r18)
 100ab34:	94800044 	addi	r18,r18,1
 100ab38:	20003726 	beq	r4,zero,100ac18 <alt_printf+0x12c>
            {
                if (c == '%')
 100ab3c:	20c00626 	beq	r4,r3,100ab58 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 100ab40:	008018c4 	movi	r2,99
 100ab44:	2080061e 	bne	r4,r2,100ab60 <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
 100ab48:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
 100ab4c:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 100ab50:	10800104 	addi	r2,r2,4
 100ab54:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
 100ab58:	100ac300 	call	100ac30 <alt_putchar>
 100ab5c:	00002c06 	br	100ac10 <alt_printf+0x124>
                }
                else if (c == 'x')
 100ab60:	00801e04 	movi	r2,120
 100ab64:	20801e1e 	bne	r4,r2,100abe0 <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 100ab68:	d8800017 	ldw	r2,0(sp)
 100ab6c:	14400017 	ldw	r17,0(r2)
 100ab70:	10800104 	addi	r2,r2,4
 100ab74:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 100ab78:	88000226 	beq	r17,zero,100ab84 <alt_printf+0x98>
 100ab7c:	04000704 	movi	r16,28
 100ab80:	00000306 	br	100ab90 <alt_printf+0xa4>
                    {
                        alt_putchar('0');
 100ab84:	01000c04 	movi	r4,48
 100ab88:	003ff306 	br	100ab58 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
 100ab8c:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 100ab90:	008003c4 	movi	r2,15
 100ab94:	1404983a 	sll	r2,r2,r16
 100ab98:	8884703a 	and	r2,r17,r2
 100ab9c:	103ffb26 	beq	r2,zero,100ab8c <alt_printf+0xa0>
 100aba0:	00000b06 	br	100abd0 <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 100aba4:	8884703a 	and	r2,r17,r2
 100aba8:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
 100abac:	00800244 	movi	r2,9
                            c = '0' + digit;
 100abb0:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
 100abb4:	10c0012e 	bgeu	r2,r3,100abbc <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
 100abb8:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
 100abbc:	21003fcc 	andi	r4,r4,255
 100abc0:	2100201c 	xori	r4,r4,128
 100abc4:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 100abc8:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
 100abcc:	100ac300 	call	100ac30 <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 100abd0:	008003c4 	movi	r2,15
 100abd4:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 100abd8:	803ff20e 	bge	r16,zero,100aba4 <alt_printf+0xb8>
 100abdc:	00000c06 	br	100ac10 <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 100abe0:	00801cc4 	movi	r2,115
 100abe4:	20800a1e 	bne	r4,r2,100ac10 <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 100abe8:	d8800017 	ldw	r2,0(sp)
 100abec:	14000017 	ldw	r16,0(r2)
 100abf0:	10800104 	addi	r2,r2,4
 100abf4:	d8800015 	stw	r2,0(sp)
 100abf8:	00000106 	br	100ac00 <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
 100abfc:	100ac300 	call	100ac30 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 100ac00:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
 100ac04:	84000044 	addi	r16,r16,1
 100ac08:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 100ac0c:	103ffb1e 	bne	r2,zero,100abfc <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 100ac10:	90c00007 	ldb	r3,0(r18)
 100ac14:	183fc11e 	bne	r3,zero,100ab1c <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
 100ac18:	dfc00417 	ldw	ra,16(sp)
 100ac1c:	dc800317 	ldw	r18,12(sp)
 100ac20:	dc400217 	ldw	r17,8(sp)
 100ac24:	dc000117 	ldw	r16,4(sp)
 100ac28:	dec00804 	addi	sp,sp,32
 100ac2c:	f800283a 	ret

0100ac30 <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 100ac30:	00802034 	movhi	r2,128
 100ac34:	10822604 	addi	r2,r2,2200
 100ac38:	10800017 	ldw	r2,0(r2)
 100ac3c:	11400217 	ldw	r5,8(r2)
 100ac40:	100ece41 	jmpi	100ece4 <putc>

0100ac44 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ac44:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ac48:	00bfff84 	movi	r2,-2
 100ac4c:	2884703a 	and	r2,r5,r2
 100ac50:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100ac54:	20c00017 	ldw	r3,0(r4)
 100ac58:	20800117 	ldw	r2,4(r4)
 100ac5c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100ac60:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100ac64:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
 100ac68:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
 100ac6c:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ac70:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 100ac74:	f800283a 	ret

0100ac78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100ac78:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100ac7c:	d0a04b17 	ldw	r2,-32468(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100ac80:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100ac84:	d4200517 	ldw	r16,-32748(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100ac88:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100ac8c:	dfc00215 	stw	ra,8(sp)
 100ac90:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100ac94:	d0a04b15 	stw	r2,-32468(gp)
 100ac98:	00001b06 	br	100ad08 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100ac9c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 100aca0:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100aca4:	10000326 	beq	r2,zero,100acb4 <alt_tick+0x3c>
 100aca8:	d0a04b17 	ldw	r2,-32468(gp)
 100acac:	1000011e 	bne	r2,zero,100acb4 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
 100acb0:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100acb4:	d0e04b17 	ldw	r3,-32468(gp)
 100acb8:	80800217 	ldw	r2,8(r16)
 100acbc:	18801136 	bltu	r3,r2,100ad04 <alt_tick+0x8c>
 100acc0:	80800403 	ldbu	r2,16(r16)
 100acc4:	10000f1e 	bne	r2,zero,100ad04 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
 100acc8:	81000517 	ldw	r4,20(r16)
 100accc:	80800317 	ldw	r2,12(r16)
 100acd0:	103ee83a 	callr	r2
 100acd4:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100acd8:	1000031e 	bne	r2,zero,100ace8 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
 100acdc:	8009883a 	mov	r4,r16
 100ace0:	100ac440 	call	100ac44 <alt_alarm_stop>
 100ace4:	00000706 	br	100ad04 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
 100ace8:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100acec:	d0e04b17 	ldw	r3,-32468(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 100acf0:	1105883a 	add	r2,r2,r4
 100acf4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100acf8:	10c0022e 	bgeu	r2,r3,100ad04 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
 100acfc:	00800044 	movi	r2,1
 100ad00:	80800405 	stb	r2,16(r16)
 100ad04:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100ad08:	d0a00504 	addi	r2,gp,-32748
 100ad0c:	80bfe31e 	bne	r16,r2,100ac9c <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100ad10:	dfc00217 	ldw	ra,8(sp)
 100ad14:	dc400117 	ldw	r17,4(sp)
 100ad18:	dc000017 	ldw	r16,0(sp)
 100ad1c:	dec00304 	addi	sp,sp,12

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100ad20:	100b7941 	jmpi	100b794 <OSTimeTick>

0100ad24 <__env_lock>:
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100ad24:	f800283a 	ret

0100ad28 <__env_unlock>:
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100ad28:	f800283a 	ret

0100ad2c <__malloc_lock>:
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 100ad2c:	f800283a 	ret

0100ad30 <__malloc_unlock>:
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 100ad30:	f800283a 	ret

0100ad34 <OSVersion>:
*/

INT16U  OSVersion (void)
{
    return (OS_VERSION);
}
 100ad34:	00804784 	movi	r2,286
 100ad38:	f800283a 	ret

0100ad3c <OS_Dummy>:
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
}
 100ad3c:	f800283a 	ret

0100ad40 <OS_EventTaskWait>:
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 100ad40:	d0a05f17 	ldw	r2,-32388(gp)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 100ad44:	10c00d03 	ldbu	r3,52(r2)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 100ad48:	11000715 	stw	r4,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 100ad4c:	11800d43 	ldbu	r6,53(r2)
 100ad50:	1907883a 	add	r3,r3,r4
 100ad54:	18c00204 	addi	r3,r3,8
 100ad58:	188000c3 	ldbu	r2,3(r3)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100ad5c:	21400283 	ldbu	r5,10(r4)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 100ad60:	1184b03a 	or	r2,r2,r6
 100ad64:	188000c5 	stb	r2,3(r3)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100ad68:	d0a05f17 	ldw	r2,-32388(gp)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100ad6c:	d0e05c44 	addi	r3,gp,-32399


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100ad70:	10800d83 	ldbu	r2,54(r2)
 100ad74:	288ab03a 	or	r5,r5,r2
 100ad78:	21400285 	stb	r5,10(r4)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 100ad7c:	d1605f17 	ldw	r5,-32388(gp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100ad80:	29000d03 	ldbu	r4,52(r5)
 100ad84:	28800d43 	ldbu	r2,53(r5)
 100ad88:	20c9883a 	add	r4,r4,r3
 100ad8c:	20c00003 	ldbu	r3,0(r4)
 100ad90:	0084303a 	nor	r2,zero,r2
 100ad94:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0) {
 100ad98:	10c03fcc 	andi	r3,r2,255
 100ad9c:	18c0201c 	xori	r3,r3,128
 100ada0:	18ffe004 	addi	r3,r3,-128

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100ada4:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
 100ada8:	1800051e 	bne	r3,zero,100adc0 <OS_EventTaskWait+0x80>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100adac:	28800d83 	ldbu	r2,54(r5)
 100adb0:	d0e05c03 	ldbu	r3,-32400(gp)
 100adb4:	0084303a 	nor	r2,zero,r2
 100adb8:	10c4703a 	and	r2,r2,r3
 100adbc:	d0a05c05 	stb	r2,-32400(gp)
 100adc0:	f800283a 	ret

0100adc4 <OS_EventTaskWaitMulti>:
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 100adc4:	d0a05f17 	ldw	r2,-32388(gp)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
 100adc8:	200f883a 	mov	r7,r4
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 100adcc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
 100add0:	21800017 	ldw	r6,0(r4)
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 100add4:	11000815 	stw	r4,32(r2)
 100add8:	00000d06 	br	100ae10 <OS_EventTaskWaitMulti+0x4c>

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 100addc:	28c00d03 	ldbu	r3,52(r5)
 100ade0:	29400d43 	ldbu	r5,53(r5)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100ade4:	31000283 	ldbu	r4,10(r6)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 100ade8:	1987883a 	add	r3,r3,r6
 100adec:	18c00204 	addi	r3,r3,8
 100adf0:	188000c3 	ldbu	r2,3(r3)
 100adf4:	1144b03a 	or	r2,r2,r5
 100adf8:	188000c5 	stb	r2,3(r3)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 100adfc:	d0a05f17 	ldw	r2,-32388(gp)
 100ae00:	10800d83 	ldbu	r2,54(r2)
 100ae04:	2088b03a 	or	r4,r4,r2
 100ae08:	31000285 	stb	r4,10(r6)
        pevents++;
        pevent = *pevents;
 100ae0c:	39800017 	ldw	r6,0(r7)
    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
 100ae10:	39c00104 	addi	r7,r7,4
 100ae14:	d1605f17 	ldw	r5,-32388(gp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 100ae18:	303ff01e 	bne	r6,zero,100addc <OS_EventTaskWaitMulti+0x18>
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100ae1c:	29000d03 	ldbu	r4,52(r5)
 100ae20:	d0e05c44 	addi	r3,gp,-32399
 100ae24:	28800d43 	ldbu	r2,53(r5)
 100ae28:	20c9883a 	add	r4,r4,r3
 100ae2c:	20c00003 	ldbu	r3,0(r4)
 100ae30:	0084303a 	nor	r2,zero,r2
 100ae34:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0) {
 100ae38:	10c03fcc 	andi	r3,r2,255
 100ae3c:	18c0201c 	xori	r3,r3,128
 100ae40:	18ffe004 	addi	r3,r3,-128
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 100ae44:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
 100ae48:	1800051e 	bne	r3,zero,100ae60 <OS_EventTaskWaitMulti+0x9c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 100ae4c:	28800d83 	ldbu	r2,54(r5)
 100ae50:	d0e05c03 	ldbu	r3,-32400(gp)
 100ae54:	0084303a 	nor	r2,zero,r2
 100ae58:	10c4703a 	and	r2,r2,r3
 100ae5c:	d0a05c05 	stb	r2,-32400(gp)
 100ae60:	f800283a 	ret

0100ae64 <OS_EventTaskRemove>:
{
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 100ae64:	20c00d03 	ldbu	r3,52(r4)
 100ae68:	20800d43 	ldbu	r2,53(r4)
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 100ae6c:	200d883a 	mov	r6,r4
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 100ae70:	1947883a 	add	r3,r3,r5
 100ae74:	18c00204 	addi	r3,r3,8
 100ae78:	190000c3 	ldbu	r4,3(r3)
 100ae7c:	0084303a 	nor	r2,zero,r2
 100ae80:	1104703a 	and	r2,r2,r4
    if (pevent->OSEventTbl[y] == 0) {
 100ae84:	11003fcc 	andi	r4,r2,255
 100ae88:	2100201c 	xori	r4,r4,128
 100ae8c:	213fe004 	addi	r4,r4,-128
{
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 100ae90:	188000c5 	stb	r2,3(r3)
    if (pevent->OSEventTbl[y] == 0) {
 100ae94:	2000051e 	bne	r4,zero,100aeac <OS_EventTaskRemove+0x48>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 100ae98:	30800d83 	ldbu	r2,54(r6)
 100ae9c:	28c00283 	ldbu	r3,10(r5)
 100aea0:	0084303a 	nor	r2,zero,r2
 100aea4:	10c4703a 	and	r2,r2,r3
 100aea8:	28800285 	stb	r2,10(r5)
 100aeac:	f800283a 	ret

0100aeb0 <OS_EventTaskRemoveMulti>:
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
 100aeb0:	20c00d83 	ldbu	r3,54(r4)
    bitx    =  ptcb->OSTCBBitX;
 100aeb4:	20800d43 	ldbu	r2,53(r4)
 100aeb8:	22400d03 	ldbu	r9,52(r4)
    pevents =  pevents_multi;
    pevent  = *pevents;
 100aebc:	29000017 	ldw	r4,0(r5)
 100aec0:	0090303a 	nor	r8,zero,r2
 100aec4:	00ce303a 	nor	r7,zero,r3
 100aec8:	00000b06 	br	100aef8 <OS_EventTaskRemoveMulti+0x48>
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
 100aecc:	308000c3 	ldbu	r2,3(r6)
 100aed0:	4084703a 	and	r2,r8,r2
        if (pevent->OSEventTbl[y] == 0) {
 100aed4:	10c03fcc 	andi	r3,r2,255
 100aed8:	18c0201c 	xori	r3,r3,128
 100aedc:	18ffe004 	addi	r3,r3,-128
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
 100aee0:	308000c5 	stb	r2,3(r6)
        if (pevent->OSEventTbl[y] == 0) {
 100aee4:	1800031e 	bne	r3,zero,100aef4 <OS_EventTaskRemoveMulti+0x44>
            pevent->OSEventGrp &= ~bity;
 100aee8:	20800283 	ldbu	r2,10(r4)
 100aeec:	3884703a 	and	r2,r7,r2
 100aef0:	20800285 	stb	r2,10(r4)
        }
        pevents++;
        pevent = *pevents;
 100aef4:	29000017 	ldw	r4,0(r5)
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
 100aef8:	4905883a 	add	r2,r9,r4
 100aefc:	11800204 	addi	r6,r2,8
        if (pevent->OSEventTbl[y] == 0) {
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
 100af00:	29400104 	addi	r5,r5,4
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 100af04:	203ff11e 	bne	r4,zero,100aecc <OS_EventTaskRemoveMulti+0x1c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 100af08:	f800283a 	ret

0100af0c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 100af0c:	defffc04 	addi	sp,sp,-16
 100af10:	dc800215 	stw	r18,8(sp)
 100af14:	dc400115 	stw	r17,4(sp)
 100af18:	dc000015 	stw	r16,0(sp)
 100af1c:	dfc00315 	stw	ra,12(sp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 100af20:	20800283 	ldbu	r2,10(r4)
 100af24:	02402034 	movhi	r9,128
 100af28:	4a40f184 	addi	r9,r9,966
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 100af2c:	2025883a 	mov	r18,r4
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 100af30:	1245883a 	add	r2,r2,r9
 100af34:	11000003 	ldbu	r4,0(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100af38:	018c303a 	nor	r6,zero,r6
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 100af3c:	22003fcc 	andi	r8,r4,255
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 100af40:	4485883a 	add	r2,r8,r18
 100af44:	10c002c3 	ldbu	r3,11(r2)
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100af48:	d0a05c44 	addi	r2,gp,-32399
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 100af4c:	200890fa 	slli	r4,r4,3
 100af50:	1a47883a 	add	r3,r3,r9
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100af54:	4091883a 	add	r8,r8,r2
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 100af58:	18800003 	ldbu	r2,0(r3)
 100af5c:	00c02074 	movhi	r3,129
 100af60:	18c5f204 	addi	r3,r3,6088
 100af64:	2089883a 	add	r4,r4,r2
 100af68:	24403fcc 	andi	r17,r4,255
 100af6c:	8c45883a 	add	r2,r17,r17
 100af70:	1085883a 	add	r2,r2,r2
 100af74:	10c5883a 	add	r2,r2,r3
 100af78:	14000017 	ldw	r16,0(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100af7c:	80800c03 	ldbu	r2,48(r16)
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 100af80:	81400915 	stw	r5,36(r16)
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 100af84:	8009883a 	mov	r4,r16
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100af88:	308c703a 	and	r6,r6,r2
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 100af8c:	30803fcc 	andi	r2,r6,255
 100af90:	1080020c 	andi	r2,r2,8
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 100af94:	81c00c45 	stb	r7,49(r16)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 100af98:	81800c05 	stb	r6,48(r16)
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 100af9c:	900b883a 	mov	r5,r18
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 100afa0:	80000b8d 	sth	zero,46(r16)
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 100afa4:	1000081e 	bne	r2,zero,100afc8 <OS_EventTaskRdy+0xbc>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 100afa8:	81800d83 	ldbu	r6,54(r16)
 100afac:	d0a05c03 	ldbu	r2,-32400(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100afb0:	40c00003 	ldbu	r3,0(r8)
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 100afb4:	1184b03a 	or	r2,r2,r6
 100afb8:	d0a05c05 	stb	r2,-32400(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 100afbc:	80800d43 	ldbu	r2,53(r16)
 100afc0:	1886b03a 	or	r3,r3,r2
 100afc4:	40c00005 	stb	r3,0(r8)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 100afc8:	100ae640 	call	100ae64 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 100afcc:	80800817 	ldw	r2,32(r16)
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100afd0:	8009883a 	mov	r4,r16
 100afd4:	100b883a 	mov	r5,r2
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 100afd8:	10000226 	beq	r2,zero,100afe4 <OS_EventTaskRdy+0xd8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100afdc:	100aeb00 	call	100aeb0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 100afe0:	84800715 	stw	r18,28(r16)
    }
#endif

    return (prio);
}
 100afe4:	8805883a 	mov	r2,r17
 100afe8:	dfc00317 	ldw	ra,12(sp)
 100afec:	dc800217 	ldw	r18,8(sp)
 100aff0:	dc400117 	ldw	r17,4(sp)
 100aff4:	dc000017 	ldw	r16,0(sp)
 100aff8:	dec00404 	addi	sp,sp,16
 100affc:	f800283a 	ret

0100b000 <OS_EventWaitListInit>:
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 100b000:	20000285 	stb	zero,10(r4)
    ptbl               = &pevent->OSEventTbl[0];
 100b004:	210002c4 	addi	r4,r4,11

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *ptbl++ = 0;
 100b008:	20000005 	stb	zero,0(r4)
 100b00c:	21000044 	addi	r4,r4,1
 100b010:	20000045 	stb	zero,1(r4)
 100b014:	20000005 	stb	zero,0(r4)
    }
}
 100b018:	f800283a 	ret

0100b01c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 100b01c:	00000206 	br	100b028 <OS_MemClr+0xc>
    while (size > 0) {
        *pdest++ = (INT8U)0;
 100b020:	20000005 	stb	zero,0(r4)
 100b024:	21000044 	addi	r4,r4,1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 100b028:	28bfffcc 	andi	r2,r5,65535
        *pdest++ = (INT8U)0;
        size--;
 100b02c:	297fffc4 	addi	r5,r5,-1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 100b030:	103ffb1e 	bne	r2,zero,100b020 <OS_MemClr+0x4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 100b034:	f800283a 	ret

0100b038 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 100b038:	00000406 	br	100b04c <OS_MemCopy+0x14>
    while (size > 0) {
        *pdest++ = *psrc++;
 100b03c:	28800003 	ldbu	r2,0(r5)
 100b040:	29400044 	addi	r5,r5,1
 100b044:	20800005 	stb	r2,0(r4)
 100b048:	21000044 	addi	r4,r4,1
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 100b04c:	30bfffcc 	andi	r2,r6,65535
        *pdest++ = *psrc++;
        size--;
 100b050:	31bfffc4 	addi	r6,r6,-1
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 100b054:	103ff91e 	bne	r2,zero,100b03c <OS_MemCopy+0x4>
        *pdest++ = *psrc++;
        size--;
    }
}
 100b058:	f800283a 	ret

0100b05c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 100b05c:	2007883a 	mov	r3,r4
 100b060:	00000206 	br	100b06c <OS_StrCopy+0x10>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
 100b064:	18800005 	stb	r2,0(r3)
 100b068:	18c00044 	addi	r3,r3,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100b06c:	28800003 	ldbu	r2,0(r5)
        *pdest++ = *psrc++;
 100b070:	29400044 	addi	r5,r5,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100b074:	103ffb1e 	bne	r2,zero,100b064 <OS_StrCopy+0x8>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 100b078:	1905c83a 	sub	r2,r3,r4
    return (len);
}
 100b07c:	10803fcc 	andi	r2,r2,255
    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 100b080:	18000005 	stb	zero,0(r3)
    return (len);
}
 100b084:	f800283a 	ret

0100b088 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 100b088:	2007883a 	mov	r3,r4
 100b08c:	00000106 	br	100b094 <OS_StrLen+0xc>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
 100b090:	18c00044 	addi	r3,r3,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100b094:	18800003 	ldbu	r2,0(r3)
 100b098:	103ffd1e 	bne	r2,zero,100b090 <OS_StrLen+0x8>
 100b09c:	1905c83a 	sub	r2,r3,r4
        psrc++;
        len++;
    }
    return (len);
}
 100b0a0:	10803fcc 	andi	r2,r2,255
 100b0a4:	f800283a 	ret

0100b0a8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 100b0a8:	defffe04 	addi	sp,sp,-8
 100b0ac:	dfc00115 	stw	ra,4(sp)
 100b0b0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b0b4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b0b8:	00bfff84 	movi	r2,-2
 100b0bc:	8084703a 	and	r2,r16,r2
 100b0c0:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 100b0c4:	d0a05e03 	ldbu	r2,-32392(gp)
 100b0c8:	10001d1e 	bne	r2,zero,100b140 <OS_Sched+0x98>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 100b0cc:	d0a04f03 	ldbu	r2,-32452(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100b0d0:	01402034 	movhi	r5,128
 100b0d4:	2940f184 	addi	r5,r5,966



    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 100b0d8:	1000191e 	bne	r2,zero,100b140 <OS_Sched+0x98>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100b0dc:	d0a05c03 	ldbu	r2,-32400(gp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b0e0:	d0e05c44 	addi	r3,gp,-32399

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 100b0e4:	d1a053c3 	ldbu	r6,-32433(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100b0e8:	1145883a 	add	r2,r2,r5
 100b0ec:	11000003 	ldbu	r4,0(r2)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b0f0:	20c5883a 	add	r2,r4,r3
 100b0f4:	10800003 	ldbu	r2,0(r2)
 100b0f8:	200890fa 	slli	r4,r4,3
    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100b0fc:	00c02074 	movhi	r3,129
 100b100:	18c5f204 	addi	r3,r3,6088
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b104:	1145883a 	add	r2,r2,r5
 100b108:	10800003 	ldbu	r2,0(r2)
 100b10c:	2089883a 	add	r4,r4,r2

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 100b110:	21403fcc 	andi	r5,r4,255
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100b114:	2945883a 	add	r2,r5,r5
 100b118:	1085883a 	add	r2,r2,r2
 100b11c:	10c5883a 	add	r2,r2,r3
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b120:	d1205385 	stb	r4,-32434(gp)

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 100b124:	29800626 	beq	r5,r6,100b140 <OS_Sched+0x98>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100b128:	10c00017 	ldw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 100b12c:	d0a05617 	ldw	r2,-32424(gp)
    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 100b130:	d0e05b15 	stw	r3,-32404(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 100b134:	10800044 	addi	r2,r2,1
 100b138:	d0a05615 	stw	r2,-32424(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 100b13c:	100e9640 	call	100e964 <OSCtxSw>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b140:	8001703a 	wrctl	status,r16
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 100b144:	dfc00117 	ldw	ra,4(sp)
 100b148:	dc000017 	ldw	r16,0(sp)
 100b14c:	dec00204 	addi	sp,sp,8
 100b150:	f800283a 	ret

0100b154 <OSStart>:
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
 100b154:	d0a05103 	ldbu	r2,-32444(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100b158:	01402034 	movhi	r5,128
 100b15c:	2940f184 	addi	r5,r5,966
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
 100b160:	1000161e 	bne	r2,zero,100b1bc <OSStart+0x68>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100b164:	d0a05c03 	ldbu	r2,-32400(gp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b168:	d0e05c44 	addi	r3,gp,-32399
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100b16c:	1145883a 	add	r2,r2,r5
 100b170:	11000003 	ldbu	r4,0(r2)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b174:	20c5883a 	add	r2,r4,r3
 100b178:	10800003 	ldbu	r2,0(r2)
 100b17c:	200890fa 	slli	r4,r4,3
void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100b180:	00c02074 	movhi	r3,129
 100b184:	18c5f204 	addi	r3,r3,6088
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b188:	1145883a 	add	r2,r2,r5
 100b18c:	10800003 	ldbu	r2,0(r2)
 100b190:	2089883a 	add	r4,r4,r2
void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100b194:	20803fcc 	andi	r2,r4,255
 100b198:	1085883a 	add	r2,r2,r2
 100b19c:	1085883a 	add	r2,r2,r2
 100b1a0:	10c5883a 	add	r2,r2,r3
 100b1a4:	10800017 	ldw	r2,0(r2)
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100b1a8:	d1205385 	stb	r4,-32434(gp)

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
 100b1ac:	d12053c5 	stb	r4,-32433(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
        OSTCBCur      = OSTCBHighRdy;
 100b1b0:	d0a05f15 	stw	r2,-32388(gp)
void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 100b1b4:	d0a05b15 	stw	r2,-32404(gp)
        OSTCBCur      = OSTCBHighRdy;
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 100b1b8:	100e9e01 	jmpi	100e9e0 <OSStartHighRdy>
 100b1bc:	f800283a 	ret

0100b1c0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 100b1c0:	defff704 	addi	sp,sp,-36
 100b1c4:	dfc00815 	stw	ra,32(sp)
 100b1c8:	dc000615 	stw	r16,24(sp)
 100b1cc:	dc400715 	stw	r17,28(sp)
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 100b1d0:	100ea580 	call	100ea58 <OSInitHookBegin>


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0;
 100b1d4:	d0a05c44 	addi	r2,gp,-32399
 100b1d8:	10000085 	stb	zero,2(r2)
 100b1dc:	10000045 	stb	zero,1(r2)
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 100b1e0:	01002074 	movhi	r4,129
 100b1e4:	2104ea04 	addi	r4,r4,5032
 100b1e8:	01410804 	movi	r5,1056
{
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 100b1ec:	d0205e05 	stb	zero,-32392(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 100b1f0:	d0204f05 	stb	zero,-32452(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 100b1f4:	d0205a45 	stb	zero,-32407(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 100b1f8:	d0205105 	stb	zero,-32444(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 100b1fc:	d0205615 	stw	zero,-32424(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 100b200:	d0205215 	stw	zero,-32440(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 100b204:	d0206415 	stw	zero,-32368(gp)
    OSIdleCtrMax  = 0L;
 100b208:	d0205815 	stw	zero,-32416(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 100b20c:	d0206305 	stb	zero,-32372(gp)
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 100b210:	d0205c05 	stb	zero,-32400(gp)
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0;
 100b214:	d0205c45 	stb	zero,-32399(gp)
    }

    OSPrioCur     = 0;
 100b218:	d02053c5 	stb	zero,-32433(gp)
    OSPrioHighRdy = 0;
 100b21c:	d0205385 	stb	zero,-32434(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 100b220:	d0205b15 	stw	zero,-32404(gp)
    OSTCBCur      = (OS_TCB *)0;
 100b224:	d0205f15 	stw	zero,-32388(gp)
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 100b228:	100b01c0 	call	100b01c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 100b22c:	01002074 	movhi	r4,129
 100b230:	2105f204 	addi	r4,r4,6088
 100b234:	01401504 	movi	r5,84
 100b238:	100b01c0 	call	100b01c <OS_MemClr>
 100b23c:	00802074 	movhi	r2,129
 100b240:	10850004 	addi	r2,r2,5120
 100b244:	04000fc4 	movi	r16,63
 100b248:	10c0f204 	addi	r3,r2,968
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        ptcb1->OSTCBNext = ptcb2;
 100b24c:	10bfef15 	stw	r2,-68(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 100b250:	143ff805 	stb	r16,-32(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100b254:	103ff845 	stb	zero,-31(r2)
#endif
        ptcb1++;
        ptcb2++;
 100b258:	10801604 	addi	r2,r2,88

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100b25c:	10fffb1e 	bne	r2,r3,100b24c <OSInit+0x8c>
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    OSTCBFreeList           = &OSTCBTbl[0];
 100b260:	10fef804 	addi	r3,r2,-1056

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 100b264:	10bfea04 	addi	r2,r2,-88
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 100b268:	10000e45 	stb	zero,57(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    OSTCBFreeList           = &OSTCBTbl[0];
 100b26c:	d0e05915 	stw	r3,-32412(gp)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 100b270:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 100b274:	14000e05 	stb	r16,56(r2)
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 100b278:	01002074 	movhi	r4,129
 100b27c:	21021a04 	addi	r4,r4,2152
 100b280:	0142d004 	movi	r5,2880
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 100b284:	d0205415 	stw	zero,-32432(gp)
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 100b288:	100b01c0 	call	100b01c <OS_MemClr>
 100b28c:	01002074 	movhi	r4,129
 100b290:	21022604 	addi	r4,r4,2200
 100b294:	800b883a 	mov	r5,r16
 100b298:	2082c404 	addi	r2,r4,2832
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 100b29c:	203ff405 	stb	zero,-48(r4)
        pevent1->OSEventPtr     = pevent2;
 100b2a0:	213ff515 	stw	r4,-44(r4)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 100b2a4:	217ff785 	stb	r5,-34(r4)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 100b2a8:	203ff7c5 	stb	zero,-33(r4)
#endif
        pevent1++;
        pevent2++;
 100b2ac:	21000c04 	addi	r4,r4,48


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 100b2b0:	20bffa1e 	bne	r4,r2,100b29c <OSInit+0xdc>
 100b2b4:	20bff404 	addi	r2,r4,-48
    pevent1->OSEventPtr             = (OS_EVENT *)0;
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 100b2b8:	20fd3004 	addi	r3,r4,-2880
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    pevent1->OSEventPtr             = (OS_EVENT *)0;
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 100b2bc:	11400385 	stb	r5,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 100b2c0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 100b2c4:	d0e05d15 	stw	r3,-32396(gp)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 100b2c8:	203ff405 	stb	zero,-48(r4)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 100b2cc:	10000115 	stw	zero,4(r2)
    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 100b2d0:	100bd7c0 	call	100bd7c <OS_FlagInit>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 100b2d4:	00c02074 	movhi	r3,129
 100b2d8:	18c01a04 	addi	r3,r3,104
 100b2dc:	1981ff04 	addi	r6,r3,2044
 100b2e0:	01c00504 	movi	r7,20
 100b2e4:	04008004 	movi	r16,512
 100b2e8:	044000c4 	movi	r17,3
 100b2ec:	01004074 	movhi	r4,257
 100b2f0:	212e1b04 	addi	r4,r4,-18324
 100b2f4:	000b883a 	mov	r5,zero
 100b2f8:	00bfffd4 	movui	r2,65535
 100b2fc:	d8c00115 	stw	r3,4(sp)
 100b300:	d8800015 	stw	r2,0(sp)
 100b304:	dc000215 	stw	r16,8(sp)
 100b308:	d8000315 	stw	zero,12(sp)
 100b30c:	dc400415 	stw	r17,16(sp)
 100b310:	100cffc0 	call	100cffc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 100b314:	01000504 	movi	r4,20
 100b318:	d90d883a 	add	r6,sp,r4
 100b31c:	01402034 	movhi	r5,128
 100b320:	2940ea04 	addi	r5,r5,936
 100b324:	100d4bc0 	call	100d4bc <OSTaskNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 100b328:	00c02074 	movhi	r3,129
 100b32c:	18fc1a04 	addi	r3,r3,-3992
 100b330:	1981ff04 	addi	r6,r3,2044
 100b334:	01c004c4 	movi	r7,19
 100b338:	01004074 	movhi	r4,257
 100b33c:	212e2704 	addi	r4,r4,-18276
 100b340:	000b883a 	mov	r5,zero
 100b344:	00bfff94 	movui	r2,65534
 100b348:	d8c00115 	stw	r3,4(sp)
 100b34c:	d8800015 	stw	r2,0(sp)
 100b350:	dc000215 	stw	r16,8(sp)
 100b354:	dc400415 	stw	r17,16(sp)
 100b358:	d8000315 	stw	zero,12(sp)
 100b35c:	100cffc0 	call	100cffc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 100b360:	010004c4 	movi	r4,19
 100b364:	01402034 	movhi	r5,128
 100b368:	2940ee04 	addi	r5,r5,952
 100b36c:	d9800504 	addi	r6,sp,20
 100b370:	100d4bc0 	call	100d4bc <OSTaskNameSet>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 100b374:	100d8a00 	call	100d8a0 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 100b378:	100ea600 	call	100ea60 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 100b37c:	100bbf40 	call	100bbf4 <OSDebugInit>
#endif
}
 100b380:	dfc00817 	ldw	ra,32(sp)
 100b384:	dc400717 	ldw	r17,28(sp)
 100b388:	dc000617 	ldw	r16,24(sp)
 100b38c:	dec00904 	addi	sp,sp,36
 100b390:	f800283a 	ret

0100b394 <OSEventNameGet>:
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100b394:	d0a05e03 	ldbu	r2,-32392(gp)
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100b398:	defffd04 	addi	sp,sp,-12
 100b39c:	dc400115 	stw	r17,4(sp)
 100b3a0:	dfc00215 	stw	ra,8(sp)
 100b3a4:	3023883a 	mov	r17,r6
 100b3a8:	dc000015 	stw	r16,0(sp)
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr  = OS_ERR_NAME_GET_ISR;
 100b3ac:	000f883a 	mov	r7,zero
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100b3b0:	200d883a 	mov	r6,r4
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100b3b4:	10000226 	beq	r2,zero,100b3c0 <OSEventNameGet+0x2c>
        *perr  = OS_ERR_NAME_GET_ISR;
 100b3b8:	00800444 	movi	r2,17
 100b3bc:	00000606 	br	100b3d8 <OSEventNameGet+0x44>
        return (0);
    }
    switch (pevent->OSEventType) {
 100b3c0:	20800003 	ldbu	r2,0(r4)
 100b3c4:	00c000c4 	movi	r3,3
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100b3c8:	000f883a 	mov	r7,zero
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr  = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    switch (pevent->OSEventType) {
 100b3cc:	10bfffc4 	addi	r2,r2,-1
 100b3d0:	1880032e 	bgeu	r3,r2,100b3e0 <OSEventNameGet+0x4c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100b3d4:	00800044 	movi	r2,1
 100b3d8:	88800005 	stb	r2,0(r17)
 100b3dc:	00000a06 	br	100b408 <OSEventNameGet+0x74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b3e0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b3e4:	00bfff84 	movi	r2,-2
 100b3e8:	8084703a 	and	r2,r16,r2
 100b3ec:	1001703a 	wrctl	status,r2
             return (0);
    }
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 100b3f0:	2809883a 	mov	r4,r5
 100b3f4:	31400384 	addi	r5,r6,14
 100b3f8:	100b05c0 	call	100b05c <OS_StrCopy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b3fc:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100b400:	88000005 	stb	zero,0(r17)
    return (len);
 100b404:	11c03fcc 	andi	r7,r2,255
}
 100b408:	3805883a 	mov	r2,r7
 100b40c:	dfc00217 	ldw	ra,8(sp)
 100b410:	dc400117 	ldw	r17,4(sp)
 100b414:	dc000017 	ldw	r16,0(sp)
 100b418:	dec00304 	addi	sp,sp,12
 100b41c:	f800283a 	ret

0100b420 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100b420:	defff704 	addi	sp,sp,-36
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 100b424:	28000015 	stw	zero,0(r5)
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100b428:	dd400515 	stw	r21,20(sp)
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
 100b42c:	20800017 	ldw	r2,0(r4)
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100b430:	dd400917 	ldw	r21,36(sp)
 100b434:	dcc00315 	stw	r19,12(sp)
 100b438:	dc800215 	stw	r18,8(sp)
 100b43c:	dc400115 	stw	r17,4(sp)
 100b440:	2027883a 	mov	r19,r4
 100b444:	2823883a 	mov	r17,r5
 100b448:	3025883a 	mov	r18,r6
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
 100b44c:	2007883a 	mov	r3,r4
 100b450:	014000c4 	movi	r5,3
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 100b454:	dfc00815 	stw	ra,32(sp)
 100b458:	ddc00715 	stw	r23,28(sp)
 100b45c:	dd800615 	stw	r22,24(sp)
 100b460:	dd000415 	stw	r20,16(sp)
 100b464:	dc000015 	stw	r16,0(sp)
 100b468:	00000406 	br	100b47c <OSEventPendMulti+0x5c>
   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 100b46c:	10800003 	ldbu	r2,0(r2)
 100b470:	11000126 	beq	r2,r4,100b478 <OSEventPendMulti+0x58>
 100b474:	1140831e 	bne	r2,r5,100b684 <OSEventPendMulti+0x264>
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
        pevent = *pevents;
 100b478:	18800017 	ldw	r2,0(r3)
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 100b47c:	18c00104 	addi	r3,r3,4
   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 100b480:	01000044 	movi	r4,1

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 100b484:	103ff91e 	bne	r2,zero,100b46c <OSEventPendMulti+0x4c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 100b488:	d0a05e03 	ldbu	r2,-32392(gp)
 100b48c:	10000326 	beq	r2,zero,100b49c <OSEventPendMulti+0x7c>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 100b490:	0007883a 	mov	r3,zero
 100b494:	00800084 	movi	r2,2
 100b498:	00000406 	br	100b4ac <OSEventPendMulti+0x8c>
        return (0);
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 100b49c:	d0a04f03 	ldbu	r2,-32452(gp)
 100b4a0:	10000426 	beq	r2,zero,100b4b4 <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 100b4a4:	0007883a 	mov	r3,zero
 100b4a8:	00800344 	movi	r2,13
 100b4ac:	a8800005 	stb	r2,0(r21)
 100b4b0:	00008406 	br	100b6c4 <OSEventPendMulti+0x2a4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b4b4:	002d303a 	rdctl	r22,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b4b8:	00bfff84 	movi	r2,-2
 100b4bc:	b084703a 	and	r2,r22,r2
 100b4c0:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
 100b4c4:	9c000017 	ldw	r16,0(r19)
 100b4c8:	980b883a 	mov	r5,r19
 100b4cc:	0011883a 	mov	r8,zero
 100b4d0:	0029883a 	mov	r20,zero
 100b4d4:	000d883a 	mov	r6,zero
 100b4d8:	024000c4 	movi	r9,3
 100b4dc:	00002206 	br	100b568 <OSEventPendMulti+0x148>
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
 100b4e0:	80c00003 	ldbu	r3,0(r16)
 100b4e4:	19000e26 	beq	r3,r4,100b520 <OSEventPendMulti+0x100>
 100b4e8:	1a40191e 	bne	r3,r9,100b550 <OSEventPendMulti+0x130>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 100b4ec:	8080020b 	ldhu	r2,8(r16)
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 100b4f0:	10ffffc4 	addi	r3,r2,-1
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 100b4f4:	10000826 	beq	r2,zero,100b518 <OSEventPendMulti+0xf8>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 100b4f8:	8c000015 	stw	r16,0(r17)
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 100b4fc:	90000015 	stw	zero,0(r18)
                      events_rdy_nbr++;
 100b500:	2011883a 	mov	r8,r4
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 100b504:	8c400104 	addi	r17,r17,4
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 100b508:	94800104 	addi	r18,r18,4
                      events_rdy_nbr++;
 100b50c:	a5000044 	addi	r20,r20,1
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 100b510:	80c0020d 	sth	r3,8(r16)
 100b514:	00001206 	br	100b560 <OSEventPendMulti+0x140>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 100b518:	31800054 	ori	r6,r6,1
 100b51c:	00001006 	br	100b560 <OSEventPendMulti+0x140>
                 break;
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 100b520:	80800117 	ldw	r2,4(r16)
 100b524:	10000826 	beq	r2,zero,100b548 <OSEventPendMulti+0x128>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 100b528:	90800015 	stw	r2,0(r18)
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 100b52c:	8c000015 	stw	r16,0(r17)
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;
 100b530:	1811883a 	mov	r8,r3
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 100b534:	8c400104 	addi	r17,r17,4

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 100b538:	94800104 	addi	r18,r18,4
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;
 100b53c:	1d29883a 	add	r20,r3,r20
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
                     pevent->OSEventPtr  = (void *)0;
 100b540:	80000115 	stw	zero,4(r16)
 100b544:	00000606 	br	100b560 <OSEventPendMulti+0x140>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 100b548:	31800094 	ori	r6,r6,2
 100b54c:	00000406 	br	100b560 <OSEventPendMulti+0x140>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b550:	b001703a 	wrctl	status,r22
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
                *perr        =  OS_ERR_EVENT_TYPE;
                 return (events_rdy_nbr);
 100b554:	a0ffffcc 	andi	r3,r20,65535

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 100b558:	88000015 	stw	zero,0(r17)
 100b55c:	00004a06 	br	100b688 <OSEventPendMulti+0x268>
                *perr        =  OS_ERR_EVENT_TYPE;
                 return (events_rdy_nbr);
        }
        pevents++;
 100b560:	29400104 	addi	r5,r5,4
        pevent = *pevents;
 100b564:	2c000017 	ldw	r16,0(r5)
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
 100b568:	01000044 	movi	r4,1
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 100b56c:	803fdc1e 	bne	r16,zero,100b4e0 <OSEventPendMulti+0xc0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 100b570:	40803fcc 	andi	r2,r8,255
 100b574:	202f883a 	mov	r23,r4
 100b578:	1100051e 	bne	r2,r4,100b590 <OSEventPendMulti+0x170>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 100b57c:	88000015 	stw	zero,0(r17)
 100b580:	b001703a 	wrctl	status,r22
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
 100b584:	a0ffffcc 	andi	r3,r20,65535
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 100b588:	a8000005 	stb	zero,0(r21)
 100b58c:	00004d06 	br	100b6c4 <OSEventPendMulti+0x2a4>
        return (events_rdy_nbr);
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 100b590:	d1605f17 	ldw	r5,-32388(gp)
 100b594:	00ffe004 	movi	r3,-128
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 100b598:	9809883a 	mov	r4,r19
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 100b59c:	28800c03 	ldbu	r2,48(r5)
 100b5a0:	10c4b03a 	or	r2,r2,r3
 100b5a4:	1184b03a 	or	r2,r2,r6
 100b5a8:	28800c05 	stb	r2,48(r5)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100b5ac:	d0a05f17 	ldw	r2,-32388(gp)
 100b5b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 100b5b4:	d0a05f17 	ldw	r2,-32388(gp)
 100b5b8:	11c00b8d 	sth	r7,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 100b5bc:	100adc40 	call	100adc4 <OS_EventTaskWaitMulti>
 100b5c0:	b001703a 	wrctl	status,r22

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 100b5c4:	100b0a80 	call	100b0a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b5c8:	002d303a 	rdctl	r22,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b5cc:	00bfff84 	movi	r2,-2
 100b5d0:	b084703a 	and	r2,r22,r2
 100b5d4:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 100b5d8:	d1205f17 	ldw	r4,-32388(gp)
 100b5dc:	20c00c43 	ldbu	r3,49(r4)
 100b5e0:	18000226 	beq	r3,zero,100b5ec <OSEventPendMulti+0x1cc>
 100b5e4:	00800084 	movi	r2,2
 100b5e8:	1880091e 	bne	r3,r2,100b610 <OSEventPendMulti+0x1f0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 100b5ec:	24000717 	ldw	r16,28(r4)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 100b5f0:	80000526 	beq	r16,zero,100b608 <OSEventPendMulti+0x1e8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 100b5f4:	8c000015 	stw	r16,0(r17)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;
 100b5f8:	a5000044 	addi	r20,r20,1
    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 100b5fc:	8c400104 	addi	r17,r17,4
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 100b600:	88000015 	stw	zero,0(r17)
 100b604:	00000406 	br	100b618 <OSEventPendMulti+0x1f8>
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 100b608:	25c00c45 	stb	r23,49(r4)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100b60c:	d1205f17 	ldw	r4,-32388(gp)
             }
			 break;

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 100b610:	980b883a 	mov	r5,r19
 100b614:	100aeb00 	call	100aeb0 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 100b618:	d1205f17 	ldw	r4,-32388(gp)
 100b61c:	20c00c43 	ldbu	r3,49(r4)
 100b620:	18000326 	beq	r3,zero,100b630 <OSEventPendMulti+0x210>
 100b624:	00800084 	movi	r2,2
 100b628:	1880191e 	bne	r3,r2,100b690 <OSEventPendMulti+0x270>
 100b62c:	00001206 	br	100b678 <OSEventPendMulti+0x258>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 100b630:	80c00003 	ldbu	r3,0(r16)
 100b634:	18000926 	beq	r3,zero,100b65c <OSEventPendMulti+0x23c>
 100b638:	00800084 	movi	r2,2
 100b63c:	10c0042e 	bgeu	r2,r3,100b650 <OSEventPendMulti+0x230>
 100b640:	008000c4 	movi	r2,3
 100b644:	1880051e 	bne	r3,r2,100b65c <OSEventPendMulti+0x23c>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 100b648:	90000015 	stw	zero,0(r18)
 100b64c:	00000806 	br	100b670 <OSEventPendMulti+0x250>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 100b650:	20800917 	ldw	r2,36(r4)
 100b654:	90800015 	stw	r2,0(r18)
 100b658:	00000506 	br	100b670 <OSEventPendMulti+0x250>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b65c:	b001703a 	wrctl	status,r22
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
                      return (events_rdy_nbr);
 100b660:	a0ffffcc 	andi	r3,r20,65535
                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
 100b664:	00800044 	movi	r2,1

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 100b668:	88000015 	stw	zero,0(r17)
 100b66c:	003f8f06 	br	100b4ac <OSEventPendMulti+0x8c>
                     *perr        =  OS_ERR_EVENT_TYPE;
                      return (events_rdy_nbr);
             }
            *perr = OS_ERR_NONE;
 100b670:	a8000005 	stb	zero,0(r21)
 100b674:	00000906 	br	100b69c <OSEventPendMulti+0x27c>
             break;

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 100b678:	00800384 	movi	r2,14
             }
            *perr = OS_ERR_NONE;
             break;

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 100b67c:	90000015 	stw	zero,0(r18)
 100b680:	00000506 	br	100b698 <OSEventPendMulti+0x278>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 100b684:	0007883a 	mov	r3,zero
 100b688:	a9000005 	stb	r4,0(r21)
 100b68c:	00000d06 	br	100b6c4 <OSEventPendMulti+0x2a4>
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
             break;
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 100b690:	90000015 	stw	zero,0(r18)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 100b694:	00800284 	movi	r2,10
 100b698:	a8800005 	stb	r2,0(r21)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 100b69c:	d0a05f17 	ldw	r2,-32388(gp)
 100b6a0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 100b6a4:	d0a05f17 	ldw	r2,-32388(gp)
 100b6a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 100b6ac:	d0a05f17 	ldw	r2,-32388(gp)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 100b6b0:	10000915 	stw	zero,36(r2)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 100b6b4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100b6b8:	10000815 	stw	zero,32(r2)
 100b6bc:	b001703a 	wrctl	status,r22
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 100b6c0:	a0ffffcc 	andi	r3,r20,65535
}
 100b6c4:	1805883a 	mov	r2,r3
 100b6c8:	dfc00817 	ldw	ra,32(sp)
 100b6cc:	ddc00717 	ldw	r23,28(sp)
 100b6d0:	dd800617 	ldw	r22,24(sp)
 100b6d4:	dd400517 	ldw	r21,20(sp)
 100b6d8:	dd000417 	ldw	r20,16(sp)
 100b6dc:	dcc00317 	ldw	r19,12(sp)
 100b6e0:	dc800217 	ldw	r18,8(sp)
 100b6e4:	dc400117 	ldw	r17,4(sp)
 100b6e8:	dc000017 	ldw	r16,0(sp)
 100b6ec:	dec00904 	addi	sp,sp,36
 100b6f0:	f800283a 	ret

0100b6f4 <OSIntEnter>:
{
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
#endif

    if (OSRunning == OS_TRUE) {
 100b6f4:	d0e05103 	ldbu	r3,-32444(gp)
 100b6f8:	00800044 	movi	r2,1
 100b6fc:	18800b1e 	bne	r3,r2,100b72c <OSIntEnter+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b700:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b704:	00bfff84 	movi	r2,-2
 100b708:	2884703a 	and	r2,r5,r2
 100b70c:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        if (OSIntNesting < 255u) {
 100b710:	d0a05e03 	ldbu	r2,-32392(gp)
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 100b714:	10c9883a 	add	r4,r2,r3
    OS_CPU_SR  cpu_sr = 0;
#endif

    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting < 255u) {
 100b718:	10803fcc 	andi	r2,r2,255
 100b71c:	00c03fc4 	movi	r3,255
 100b720:	10c00126 	beq	r2,r3,100b728 <OSIntEnter+0x34>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 100b724:	d1205e05 	stb	r4,-32392(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b728:	2801703a 	wrctl	status,r5
 100b72c:	f800283a 	ret

0100b730 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 100b730:	defffe04 	addi	sp,sp,-8
    OS_CPU_SR  cpu_sr = 0;
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 100b734:	01000084 	movi	r4,2
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 100b738:	dfc00115 	stw	ra,4(sp)
 100b73c:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 100b740:	100d69c0 	call	100d69c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b744:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b748:	043fff84 	movi	r16,-2
 100b74c:	1c04703a 	and	r2,r3,r16
 100b750:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 100b754:	d0205215 	stw	zero,-32440(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b758:	1801703a 	wrctl	status,r3
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 100b75c:	01001904 	movi	r4,100
 100b760:	100d69c0 	call	100d69c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b764:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b768:	2420703a 	and	r16,r4,r16
 100b76c:	8001703a 	wrctl	status,r16
    OS_ENTER_CRITICAL();
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 100b770:	d0e05217 	ldw	r3,-32440(gp)
    OSStatRdy    = OS_TRUE;
 100b774:	00800044 	movi	r2,1
 100b778:	d0a06305 	stb	r2,-32372(gp)
    OS_ENTER_CRITICAL();
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    OS_ENTER_CRITICAL();
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 100b77c:	d0e05815 	stw	r3,-32416(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b780:	2001703a 	wrctl	status,r4
    OSStatRdy    = OS_TRUE;
    OS_EXIT_CRITICAL();
}
 100b784:	dfc00117 	ldw	ra,4(sp)
 100b788:	dc000017 	ldw	r16,0(sp)
 100b78c:	dec00204 	addi	sp,sp,8
 100b790:	f800283a 	ret

0100b794 <OSTimeTick>:
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    OSTime++;
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 100b794:	d1205103 	ldbu	r4,-32444(gp)
 100b798:	00800044 	movi	r2,1
 100b79c:	2080321e 	bne	r4,r2,100b868 <OSTimeTick+0xd4>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 100b7a0:	d0e05503 	ldbu	r3,-32428(gp)
 100b7a4:	19003026 	beq	r3,r4,100b868 <OSTimeTick+0xd4>
 100b7a8:	19002d36 	bltu	r3,r4,100b860 <OSTimeTick+0xcc>
 100b7ac:	00800084 	movi	r2,2
 100b7b0:	1880021e 	bne	r3,r2,100b7bc <OSTimeTick+0x28>
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
                 break;

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
                 OSTickStepState = OS_TICK_STEP_WAIT;
 100b7b4:	d1205505 	stb	r4,-32428(gp)
 100b7b8:	00002906 	br	100b860 <OSTimeTick+0xcc>
                 break;

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
 100b7bc:	d0205505 	stb	zero,-32428(gp)
 100b7c0:	00002706 	br	100b860 <OSTimeTick+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b7c4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b7c8:	00bfff84 	movi	r2,-2
 100b7cc:	3084703a 	and	r2,r6,r2
 100b7d0:	1001703a 	wrctl	status,r2
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 100b7d4:	28800b8b 	ldhu	r2,46(r5)
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 100b7d8:	10ffffc4 	addi	r3,r2,-1
 100b7dc:	193fffcc 	andi	r4,r3,65535
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 100b7e0:	10001926 	beq	r2,zero,100b848 <OSTimeTick+0xb4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 100b7e4:	28c00b8d 	sth	r3,46(r5)
 100b7e8:	2000171e 	bne	r4,zero,100b848 <OSTimeTick+0xb4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 100b7ec:	28800c03 	ldbu	r2,48(r5)
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 100b7f0:	10c0320c 	andi	r3,r2,200
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 100b7f4:	10800dcc 	andi	r2,r2,55
 100b7f8:	10000426 	beq	r2,zero,100b80c <OSTimeTick+0x78>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 100b7fc:	00800044 	movi	r2,1
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 100b800:	28c00c05 	stb	r3,48(r5)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 100b804:	28800c45 	stb	r2,49(r5)
 100b808:	00000106 	br	100b810 <OSTimeTick+0x7c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100b80c:	28000c45 	stb	zero,49(r5)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 100b810:	28800c03 	ldbu	r2,48(r5)
 100b814:	1080020c 	andi	r2,r2,8
 100b818:	10000b1e 	bne	r2,zero,100b848 <OSTimeTick+0xb4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 100b81c:	28c00d83 	ldbu	r3,54(r5)
 100b820:	d0a05c03 	ldbu	r2,-32400(gp)
 100b824:	10c4b03a 	or	r2,r2,r3
 100b828:	d0a05c05 	stb	r2,-32400(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100b82c:	28c00d03 	ldbu	r3,52(r5)
 100b830:	d0a05c44 	addi	r2,gp,-32399
 100b834:	29000d43 	ldbu	r4,53(r5)
 100b838:	1887883a 	add	r3,r3,r2
 100b83c:	18800003 	ldbu	r2,0(r3)
 100b840:	1104b03a 	or	r2,r2,r4
 100b844:	18800005 	stb	r2,0(r3)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 100b848:	29400517 	ldw	r5,20(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b84c:	3001703a 	wrctl	status,r6
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 100b850:	28c00c83 	ldbu	r3,50(r5)
 100b854:	00800504 	movi	r2,20
 100b858:	18bfda1e 	bne	r3,r2,100b7c4 <OSTimeTick+0x30>
 100b85c:	f800283a 	ret
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 100b860:	d1605417 	ldw	r5,-32432(gp)
 100b864:	003ffa06 	br	100b850 <OSTimeTick+0xbc>
 100b868:	f800283a 	ret

0100b86c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 100b86c:	deffff04 	addi	sp,sp,-4
 100b870:	dfc00015 	stw	ra,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b874:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b878:	00ffff84 	movi	r3,-2
 100b87c:	10c6703a 	and	r3,r2,r3
 100b880:	1801703a 	wrctl	status,r3


    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtr++;
 100b884:	d0e05217 	ldw	r3,-32440(gp)
 100b888:	18c00044 	addi	r3,r3,1
 100b88c:	d0e05215 	stw	r3,-32440(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 100b894:	100ea640 	call	100ea64 <OSTaskIdleHook>
 100b898:	003ff606 	br	100b874 <OS_TaskIdle+0x8>

0100b89c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 100b89c:	deffff04 	addi	sp,sp,-4
 100b8a0:	dfc00015 	stw	ra,0(sp)
 100b8a4:	00000106 	br	100b8ac <OS_TaskStat+0x10>



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 100b8a8:	100d69c0 	call	100d69c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100b8ac:	d0a06303 	ldbu	r2,-32372(gp)
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 100b8b0:	01003204 	movi	r4,200
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 100b8b4:	103ffc26 	beq	r2,zero,100b8a8 <OS_TaskStat+0xc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 100b8b8:	d1205817 	ldw	r4,-32416(gp)
 100b8bc:	01401904 	movi	r5,100
 100b8c0:	100a1ec0 	call	100a1ec <__udivsi3>
 100b8c4:	d0a05815 	stw	r2,-32416(gp)
    if (OSIdleCtrMax == 0L) {
 100b8c8:	1000031e 	bne	r2,zero,100b8d8 <OS_TaskStat+0x3c>
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
 100b8cc:	01003fc4 	movi	r4,255
    while (OSStatRdy == OS_FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    if (OSIdleCtrMax == 0L) {
        OSCPUUsage = 0;
 100b8d0:	d0205a05 	stb	zero,-32408(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 100b8d4:	100cef40 	call	100cef4 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b8d8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b8dc:	00bfff84 	movi	r2,-2
 100b8e0:	1884703a 	and	r2,r3,r2
 100b8e4:	1001703a 	wrctl	status,r2
    }
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 100b8e8:	d1205217 	ldw	r4,-32440(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 100b8ec:	d0205215 	stw	zero,-32440(gp)
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
    }
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 100b8f0:	d1206415 	stw	r4,-32368(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b8f4:	1801703a 	wrctl	status,r3
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 100b8f8:	d1605817 	ldw	r5,-32416(gp)
 100b8fc:	100a1ec0 	call	100a1ec <__udivsi3>
 100b900:	00c01904 	movi	r3,100
 100b904:	1887c83a 	sub	r3,r3,r2
 100b908:	d0e05a05 	stb	r3,-32408(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 100b90c:	100ea540 	call	100ea54 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 100b910:	01001904 	movi	r4,100
 100b914:	100d69c0 	call	100d69c <OSTimeDly>
 100b918:	003fef06 	br	100b8d8 <OS_TaskStat+0x3c>

0100b91c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 100b91c:	defffc04 	addi	sp,sp,-16
 100b920:	da400617 	ldw	r9,24(sp)
 100b924:	2011883a 	mov	r8,r4
 100b928:	dfc00315 	stw	ra,12(sp)
 100b92c:	dc800215 	stw	r18,8(sp)
 100b930:	dc400115 	stw	r17,4(sp)
 100b934:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b938:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b93c:	04bfff84 	movi	r18,-2
 100b940:	1c84703a 	and	r2,r3,r18
 100b944:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 100b948:	d4605917 	ldw	r17,-32412(gp)
    if (ptcb != (OS_TCB *)0) {
 100b94c:	88004726 	beq	r17,zero,100ba6c <OS_TCBInit+0x150>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 100b950:	88800517 	ldw	r2,20(r17)
 100b954:	d0a05915 	stw	r2,-32412(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b958:	1801703a 	wrctl	status,r3
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 100b95c:	24003fcc 	andi	r16,r4,255
 100b960:	8006d0fa 	srli	r3,r16,3
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 100b964:	208001cc 	andi	r2,r4,7
 100b968:	88800cc5 	stb	r2,51(r17)
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 100b96c:	88c00d05 	stb	r3,52(r17)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 100b970:	19003fcc 	andi	r4,r3,255
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 100b974:	10803fcc 	andi	r2,r2,255
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 100b978:	00c00044 	movi	r3,1
 100b97c:	1908983a 	sll	r4,r3,r4
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 100b980:	1886983a 	sll	r3,r3,r2
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 100b984:	d8800517 	ldw	r2,20(sp)
    OS_ENTER_CRITICAL();
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 100b988:	89400015 	stw	r5,0(r17)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 100b98c:	89800215 	stw	r6,8(r17)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 100b990:	88800115 	stw	r2,4(r17)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 100b994:	d8800417 	ldw	r2,16(sp)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 100b998:	8a40040d 	sth	r9,16(r17)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 100b99c:	89c0048d 	sth	r7,18(r17)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 100b9a0:	88800315 	stw	r2,12(r17)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 100b9a4:	00800fc4 	movi	r2,63
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 100b9a8:	89000d85 	stb	r4,54(r17)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 100b9ac:	88c00d45 	stb	r3,53(r17)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 100b9b0:	88800e05 	stb	r2,56(r17)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 100b9b4:	8a000c85 	stb	r8,50(r17)
#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif

        OSTCBInitHook(ptcb);
 100b9b8:	8809883a 	mov	r4,r17
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 100b9bc:	88000c05 	stb	zero,48(r17)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 100b9c0:	88000c45 	stb	zero,49(r17)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 100b9c4:	88000b8d 	sth	zero,46(r17)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 100b9c8:	88000dc5 	stb	zero,55(r17)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 100b9cc:	88000715 	stw	zero,28(r17)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 100b9d0:	88000815 	stw	zero,32(r17)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 100b9d4:	88000a15 	stw	zero,40(r17)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 100b9d8:	88000915 	stw	zero,36(r17)
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 100b9dc:	88000e45 	stb	zero,57(r17)
#endif

        OSTCBInitHook(ptcb);
 100b9e0:	100ea680 	call	100ea68 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 100b9e4:	8809883a 	mov	r4,r17
 100b9e8:	100ea480 	call	100ea48 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b9ec:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b9f0:	3484703a 	and	r2,r6,r18
 100b9f4:	1001703a 	wrctl	status,r2
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 100b9f8:	d0a05a43 	ldbu	r2,-32407(gp)
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
 100b9fc:	8421883a 	add	r16,r16,r16
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 100ba00:	d0e05417 	ldw	r3,-32432(gp)
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
 100ba04:	8421883a 	add	r16,r16,r16
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 100ba08:	11400044 	addi	r5,r2,1
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
 100ba0c:	00802074 	movhi	r2,129
 100ba10:	1085f204 	addi	r2,r2,6088
 100ba14:	80a1883a 	add	r16,r16,r2
 100ba18:	84400015 	stw	r17,0(r16)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 100ba1c:	d1205c03 	ldbu	r4,-32400(gp)
        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 100ba20:	88000615 	stw	zero,24(r17)

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 100ba24:	88c00515 	stw	r3,20(r17)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
 100ba28:	18000126 	beq	r3,zero,100ba30 <OS_TCBInit+0x114>
            OSTCBList->OSTCBPrev = ptcb;
 100ba2c:	1c400615 	stw	r17,24(r3)
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 100ba30:	88800d83 	ldbu	r2,54(r17)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
 100ba34:	d4605415 	stw	r17,-32432(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 100ba38:	2084b03a 	or	r2,r4,r2
 100ba3c:	d0a05c05 	stb	r2,-32400(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100ba40:	88c00d03 	ldbu	r3,52(r17)
 100ba44:	d0a05c44 	addi	r2,gp,-32399
 100ba48:	89000d43 	ldbu	r4,53(r17)
 100ba4c:	1887883a 	add	r3,r3,r2
 100ba50:	18800003 	ldbu	r2,0(r3)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 100ba54:	d1605a45 	stb	r5,-32407(gp)
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100ba58:	1104b03a 	or	r2,r2,r4
 100ba5c:	18800005 	stb	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ba60:	3001703a 	wrctl	status,r6
 100ba64:	0005883a 	mov	r2,zero
 100ba68:	00000206 	br	100ba74 <OS_TCBInit+0x158>
 100ba6c:	1801703a 	wrctl	status,r3
 100ba70:	00801084 	movi	r2,66
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
}
 100ba74:	dfc00317 	ldw	ra,12(sp)
 100ba78:	dc800217 	ldw	r18,8(sp)
 100ba7c:	dc400117 	ldw	r17,4(sp)
 100ba80:	dc000017 	ldw	r16,0(sp)
 100ba84:	dec00404 	addi	sp,sp,16
 100ba88:	f800283a 	ret

0100ba8c <OSIntExit>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
 100ba8c:	d1e05103 	ldbu	r7,-32444(gp)
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 100ba90:	defffe04 	addi	sp,sp,-8
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
 100ba94:	00800044 	movi	r2,1
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 100ba98:	dfc00115 	stw	ra,4(sp)
 100ba9c:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
 100baa0:	3880281e 	bne	r7,r2,100bb44 <OSIntExit+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100baa4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100baa8:	00bfff84 	movi	r2,-2
 100baac:	8084703a 	and	r2,r16,r2
 100bab0:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 100bab4:	d0a05e03 	ldbu	r2,-32392(gp)
            OSIntNesting--;
 100bab8:	10ffffc4 	addi	r3,r2,-1
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 100babc:	19003fcc 	andi	r4,r3,255



    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 100bac0:	10000226 	beq	r2,zero,100bacc <OSIntExit+0x40>
            OSIntNesting--;
 100bac4:	d0e05e05 	stb	r3,-32392(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 100bac8:	20001d1e 	bne	r4,zero,100bb40 <OSIntExit+0xb4>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 100bacc:	d0a04f03 	ldbu	r2,-32452(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100bad0:	01402034 	movhi	r5,128
 100bad4:	2940f184 	addi	r5,r5,966
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 100bad8:	1000191e 	bne	r2,zero,100bb40 <OSIntExit+0xb4>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100badc:	d0a05c03 	ldbu	r2,-32400(gp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100bae0:	d0e05c44 	addi	r3,gp,-32399
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 100bae4:	d1a053c3 	ldbu	r6,-32433(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 100bae8:	1145883a 	add	r2,r2,r5
 100baec:	11000003 	ldbu	r4,0(r2)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100baf0:	20c5883a 	add	r2,r4,r3
 100baf4:	10800003 	ldbu	r2,0(r2)
 100baf8:	200890fa 	slli	r4,r4,3
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100bafc:	00c02074 	movhi	r3,129
 100bb00:	18c5f204 	addi	r3,r3,6088
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100bb04:	1145883a 	add	r2,r2,r5
 100bb08:	10800003 	ldbu	r2,0(r2)
 100bb0c:	2089883a 	add	r4,r4,r2
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 100bb10:	21403fcc 	andi	r5,r4,255
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100bb14:	2945883a 	add	r2,r5,r5
 100bb18:	1085883a 	add	r2,r2,r2
 100bb1c:	10c5883a 	add	r2,r2,r3
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 100bb20:	d1205385 	stb	r4,-32434(gp)
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 100bb24:	29800626 	beq	r5,r6,100bb40 <OSIntExit+0xb4>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100bb28:	10c00017 	ldw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 100bb2c:	d0a05617 	ldw	r2,-32424(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 100bb30:	d0e05b15 	stw	r3,-32404(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 100bb34:	11c5883a 	add	r2,r2,r7
 100bb38:	d0a05615 	stw	r2,-32424(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 100bb3c:	100e9640 	call	100e964 <OSCtxSw>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bb40:	8001703a 	wrctl	status,r16
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 100bb44:	dfc00117 	ldw	ra,4(sp)
 100bb48:	dc000017 	ldw	r16,0(sp)
 100bb4c:	dec00204 	addi	sp,sp,8
 100bb50:	f800283a 	ret

0100bb54 <OSEventNameSet>:
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100bb54:	d0a05e03 	ldbu	r2,-32392(gp)
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 100bb58:	defffd04 	addi	sp,sp,-12
 100bb5c:	dfc00215 	stw	ra,8(sp)
 100bb60:	dc000115 	stw	r16,4(sp)
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100bb64:	10000226 	beq	r2,zero,100bb70 <OSEventNameSet+0x1c>
        *perr = OS_ERR_NAME_SET_ISR;
 100bb68:	00800484 	movi	r2,18
 100bb6c:	00000506 	br	100bb84 <OSEventNameSet+0x30>
        return;
    }
    switch (pevent->OSEventType) {
 100bb70:	20800003 	ldbu	r2,0(r4)
 100bb74:	00c000c4 	movi	r3,3
 100bb78:	10bfffc4 	addi	r2,r2,-1
 100bb7c:	1880032e 	bgeu	r3,r2,100bb8c <OSEventNameSet+0x38>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 100bb80:	00800044 	movi	r2,1
 100bb84:	30800005 	stb	r2,0(r6)
 100bb88:	00001606 	br	100bbe4 <OSEventNameSet+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bb8c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bb90:	00bfff84 	movi	r2,-2
 100bb94:	8084703a 	and	r2,r16,r2
 100bb98:	1001703a 	wrctl	status,r2
 100bb9c:	2807883a 	mov	r3,r5
 100bba0:	00000106 	br	100bba8 <OSEventNameSet+0x54>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
 100bba4:	18c00044 	addi	r3,r3,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 100bba8:	18800003 	ldbu	r2,0(r3)
 100bbac:	103ffd1e 	bne	r2,zero,100bba4 <OSEventNameSet+0x50>
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 100bbb0:	1945c83a 	sub	r2,r3,r5
 100bbb4:	10803fcc 	andi	r2,r2,255
 100bbb8:	00c007c4 	movi	r3,31
 100bbbc:	1880032e 	bgeu	r3,r2,100bbcc <OSEventNameSet+0x78>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bbc0:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 100bbc4:	008002c4 	movi	r2,11
 100bbc8:	003fee06 	br	100bb84 <OSEventNameSet+0x30>
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 100bbcc:	21000384 	addi	r4,r4,14
 100bbd0:	d9800015 	stw	r6,0(sp)
 100bbd4:	100b05c0 	call	100b05c <OS_StrCopy>
 100bbd8:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100bbdc:	d9800017 	ldw	r6,0(sp)
 100bbe0:	30000005 	stb	zero,0(r6)
}
 100bbe4:	dfc00217 	ldw	ra,8(sp)
 100bbe8:	dc000117 	ldw	r16,4(sp)
 100bbec:	dec00304 	addi	sp,sp,12
 100bbf0:	f800283a 	ret

0100bbf4 <OSDebugInit>:
    ptemp = (void *)&OSVersionNbr;

    ptemp = (void *)&OSDataSize;

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 100bbf4:	f800283a 	ret

0100bbf8 <OS_FlagBlock>:
{
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 100bbf8:	02402034 	movhi	r9,128
 100bbfc:	4a425a04 	addi	r9,r9,2408
 100bc00:	48c00017 	ldw	r3,0(r9)
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 100bc04:	da000017 	ldw	r8,0(sp)
    pgrp->OSFlagWaitList = (void *)pnode;

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    if (OSRdyTbl[y] == 0x00) {
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 100bc08:	02802034 	movhi	r10,128
 100bc0c:	52825704 	addi	r10,r10,2396
{
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 100bc10:	18800c03 	ldbu	r2,48(r3)
 100bc14:	10800814 	ori	r2,r2,32
 100bc18:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 100bc1c:	48800017 	ldw	r2,0(r9)
 100bc20:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 100bc24:	48800017 	ldw	r2,0(r9)
 100bc28:	12000b8d 	sth	r8,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 100bc2c:	11400a15 	stw	r5,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 100bc30:	29c00485 	stb	r7,18(r5)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 100bc34:	48800017 	ldw	r2,0(r9)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 100bc38:	2980040d 	sth	r6,16(r5)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 100bc3c:	28800215 	stw	r2,8(r5)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 100bc40:	20800117 	ldw	r2,4(r4)
    pnode->OSFlagNodePrev     = (void *)0;
 100bc44:	28000115 	stw	zero,4(r5)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 100bc48:	29000315 	stw	r4,12(r5)
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 100bc4c:	28800015 	stw	r2,0(r5)
    pnode->OSFlagNodePrev     = (void *)0;
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100bc50:	20800117 	ldw	r2,4(r4)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 100bc54:	10000126 	beq	r2,zero,100bc5c <OS_FlagBlock+0x64>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 100bc58:	11400115 	stw	r5,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 100bc5c:	21400115 	stw	r5,4(r4)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 100bc60:	49400017 	ldw	r5,0(r9)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100bc64:	00c02034 	movhi	r3,128
 100bc68:	18c25744 	addi	r3,r3,2397
 100bc6c:	29000d03 	ldbu	r4,52(r5)
 100bc70:	28800d43 	ldbu	r2,53(r5)
 100bc74:	20c9883a 	add	r4,r4,r3
 100bc78:	20c00003 	ldbu	r3,0(r4)
 100bc7c:	0084303a 	nor	r2,zero,r2
 100bc80:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0x00) {
 100bc84:	10c03fcc 	andi	r3,r2,255
 100bc88:	18c0201c 	xori	r3,r3,128
 100bc8c:	18ffe004 	addi	r3,r3,-128
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    }
    pgrp->OSFlagWaitList = (void *)pnode;

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100bc90:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0x00) {
 100bc94:	1800051e 	bne	r3,zero,100bcac <OS_FlagBlock+0xb4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 100bc98:	28800d83 	ldbu	r2,54(r5)
 100bc9c:	50c00003 	ldbu	r3,0(r10)
 100bca0:	0084303a 	nor	r2,zero,r2
 100bca4:	10c4703a 	and	r2,r2,r3
 100bca8:	50800005 	stb	r2,0(r10)
 100bcac:	f800283a 	ret

0100bcb0 <OS_FlagUnlink>:
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100bcb0:	20c00017 	ldw	r3,0(r4)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 100bcb4:	20800117 	ldw	r2,4(r4)
 100bcb8:	180b003a 	cmpeq	r5,r3,zero
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 100bcbc:	1000051e 	bne	r2,zero,100bcd4 <OS_FlagUnlink+0x24>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 100bcc0:	20800317 	ldw	r2,12(r4)
 100bcc4:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 100bcc8:	2800051e 	bne	r5,zero,100bce0 <OS_FlagUnlink+0x30>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 100bccc:	18000115 	stw	zero,4(r3)
 100bcd0:	00000306 	br	100bce0 <OS_FlagUnlink+0x30>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 100bcd4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 100bcd8:	2800011e 	bne	r5,zero,100bce0 <OS_FlagUnlink+0x30>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 100bcdc:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 100bce0:	20800217 	ldw	r2,8(r4)
 100bce4:	10000a15 	stw	zero,40(r2)
#endif
}
 100bce8:	f800283a 	ret

0100bcec <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 100bcec:	200d883a 	mov	r6,r4
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 100bcf0:	21000217 	ldw	r4,8(r4)
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 100bcf4:	defffe04 	addi	sp,sp,-8
 100bcf8:	dc000015 	stw	r16,0(sp)
 100bcfc:	dfc00115 	stw	ra,4(sp)


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 100bd00:	20800c03 	ldbu	r2,48(r4)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 100bd04:	01c02034 	movhi	r7,128
 100bd08:	39c25704 	addi	r7,r7,2396
    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 100bd0c:	0021883a 	mov	r16,zero


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 100bd10:	108037cc 	andi	r2,r2,223
 100bd14:	20800c05 	stb	r2,48(r4)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 100bd18:	10803fcc 	andi	r2,r2,255
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 100bd1c:	21400b0d 	sth	r5,44(r4)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 100bd20:	20000c45 	stb	zero,49(r4)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
 100bd24:	20000b8d 	sth	zero,46(r4)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 100bd28:	10000d1e 	bne	r2,zero,100bd60 <OS_FlagTaskRdy+0x74>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 100bd2c:	20c00d83 	ldbu	r3,54(r4)
 100bd30:	38800003 	ldbu	r2,0(r7)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100bd34:	04000044 	movi	r16,1
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 100bd38:	10c4b03a 	or	r2,r2,r3
 100bd3c:	38800005 	stb	r2,0(r7)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100bd40:	20c00d03 	ldbu	r3,52(r4)
 100bd44:	00802034 	movhi	r2,128
 100bd48:	10825744 	addi	r2,r2,2397
 100bd4c:	21000d43 	ldbu	r4,53(r4)
 100bd50:	1887883a 	add	r3,r3,r2
 100bd54:	18800003 	ldbu	r2,0(r3)
 100bd58:	1104b03a 	or	r2,r2,r4
 100bd5c:	18800005 	stb	r2,0(r3)
        sched                   = OS_TRUE;
    } else {
        sched                   = OS_FALSE;
    }
    OS_FlagUnlink(pnode);
 100bd60:	3009883a 	mov	r4,r6
 100bd64:	100bcb00 	call	100bcb0 <OS_FlagUnlink>
 100bd68:	80803fcc 	andi	r2,r16,255
    return (sched);
}
 100bd6c:	dfc00117 	ldw	ra,4(sp)
 100bd70:	dc000017 	ldw	r16,0(sp)
 100bd74:	dec00204 	addi	sp,sp,8
 100bd78:	f800283a 	ret

0100bd7c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 100bd7c:	deffff04 	addi	sp,sp,-4
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 100bd80:	0140dc04 	movi	r5,880
 100bd84:	01002074 	movhi	r4,129
 100bd88:	213a6e04 	addi	r4,r4,-5704
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 100bd8c:	dfc00015 	stw	ra,0(sp)
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 100bd90:	100b01c0 	call	100b01c <OS_MemClr>
 100bd94:	01402074 	movhi	r5,129
 100bd98:	297a7904 	addi	r5,r5,-5660
 100bd9c:	01800fc4 	movi	r6,63
 100bda0:	2880d104 	addi	r2,r5,836
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100bda4:	283ff505 	stb	zero,-44(r5)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 100bda8:	297ff615 	stw	r5,-40(r5)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 100bdac:	29bff785 	stb	r6,-34(r5)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 100bdb0:	283ff7c5 	stb	zero,-33(r5)
#endif
        pgrp1++;
        pgrp2++;
 100bdb4:	29400b04 	addi	r5,r5,44


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 100bdb8:	28bffa1e 	bne	r5,r2,100bda4 <OS_FlagInit+0x28>
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 100bdbc:	293f2404 	addi	r4,r5,-880
 100bdc0:	00802034 	movhi	r2,128
 100bdc4:	10825d04 	addi	r2,r2,2420


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 100bdc8:	28fff504 	addi	r3,r5,-44
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 100bdcc:	11000015 	stw	r4,0(r2)
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 100bdd0:	19800285 	stb	r6,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 100bdd4:	180002c5 	stb	zero,11(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100bdd8:	283ff505 	stb	zero,-44(r5)
    pgrp1->OSFlagWaitList = (void *)0;
 100bddc:	18000115 	stw	zero,4(r3)
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
#endif
}
 100bde0:	dfc00017 	ldw	ra,0(sp)
 100bde4:	dec00104 	addi	sp,sp,4
 100bde8:	f800283a 	ret

0100bdec <OSFlagQuery>:
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 100bdec:	20c00003 	ldbu	r3,0(r4)
 100bdf0:	00800144 	movi	r2,5
        *perr = OS_ERR_EVENT_TYPE;
 100bdf4:	000d883a 	mov	r6,zero
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 100bdf8:	18800326 	beq	r3,r2,100be08 <OSFlagQuery+0x1c>
        *perr = OS_ERR_EVENT_TYPE;
 100bdfc:	00800044 	movi	r2,1
 100be00:	28800005 	stb	r2,0(r5)
 100be04:	00000806 	br	100be28 <OSFlagQuery+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100be08:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100be0c:	00ffff84 	movi	r3,-2
 100be10:	10c6703a 	and	r3,r2,r3
 100be14:	1801703a 	wrctl	status,r3
        return ((OS_FLAGS)0);
    }
    OS_ENTER_CRITICAL();
    flags = pgrp->OSFlagFlags;
 100be18:	20c0020b 	ldhu	r3,8(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100be1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100be20:	28000005 	stb	zero,0(r5)
    return (flags);                               /* Return the current value of the event flags       */
 100be24:	180d883a 	mov	r6,r3
}
 100be28:	3005883a 	mov	r2,r6
 100be2c:	f800283a 	ret

0100be30 <OSFlagAccept>:
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100be30:	20c00003 	ldbu	r3,0(r4)
 100be34:	00800144 	movi	r2,5
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 100be38:	3011883a 	mov	r8,r6
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100be3c:	18800426 	beq	r3,r2,100be50 <OSFlagAccept+0x20>
        *perr = OS_ERR_EVENT_TYPE;
 100be40:	00800044 	movi	r2,1
 100be44:	0007883a 	mov	r3,zero
 100be48:	38800005 	stb	r2,0(r7)
 100be4c:	00004b06 	br	100bf7c <OSFlagAccept+0x14c>
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 100be50:	00bfe004 	movi	r2,-128
 100be54:	3084703a 	and	r2,r6,r2
 100be58:	10803fcc 	andi	r2,r2,255
 100be5c:	1000021e 	bne	r2,zero,100be68 <OSFlagAccept+0x38>
 100be60:	0015883a 	mov	r10,zero
 100be64:	00000206 	br	100be70 <OSFlagAccept+0x40>
        wait_type &= ~OS_FLAG_CONSUME;
 100be68:	32001fcc 	andi	r8,r6,127
 100be6c:	02800044 	movi	r10,1
        consume    = OS_TRUE;
    } else {
        consume    = OS_FALSE;
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 100be70:	38000005 	stb	zero,0(r7)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100be74:	0017303a 	rdctl	r11,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100be78:	00bfff84 	movi	r2,-2
 100be7c:	5884703a 	and	r2,r11,r2
 100be80:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (wait_type) {
 100be84:	41803fcc 	andi	r6,r8,255
 100be88:	02400044 	movi	r9,1
 100be8c:	32402526 	beq	r6,r9,100bf24 <OSFlagAccept+0xf4>
 100be90:	32401936 	bltu	r6,r9,100bef8 <OSFlagAccept+0xc8>
 100be94:	00800084 	movi	r2,2
 100be98:	30800326 	beq	r6,r2,100bea8 <OSFlagAccept+0x78>
 100be9c:	008000c4 	movi	r2,3
 100bea0:	3080311e 	bne	r6,r2,100bf68 <OSFlagAccept+0x138>
 100bea4:	00000a06 	br	100bed0 <OSFlagAccept+0xa0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100bea8:	2180020b 	ldhu	r6,8(r4)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100beac:	28ffffcc 	andi	r3,r5,65535
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100beb0:	314a703a 	and	r5,r6,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100beb4:	28bfffcc 	andi	r2,r5,65535
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100beb8:	2811883a 	mov	r8,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100bebc:	10c0261e 	bne	r2,r3,100bf58 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100bec0:	50803fcc 	andi	r2,r10,255
 100bec4:	1240261e 	bne	r2,r9,100bf60 <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100bec8:	0144303a 	nor	r2,zero,r5
 100becc:	00000806 	br	100bef0 <OSFlagAccept+0xc0>
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100bed0:	2180020b 	ldhu	r6,8(r4)
 100bed4:	3146703a 	and	r3,r6,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100bed8:	18bfffcc 	andi	r2,r3,65535
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 100bedc:	1811883a 	mov	r8,r3
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100bee0:	10001d26 	beq	r2,zero,100bf58 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100bee4:	50803fcc 	andi	r2,r10,255
 100bee8:	12401d1e 	bne	r2,r9,100bf60 <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100beec:	00c4303a 	nor	r2,zero,r3
 100bef0:	1184703a 	and	r2,r2,r6
 100bef4:	00001606 	br	100bf50 <OSFlagAccept+0x120>
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100bef8:	2180020b 	ldhu	r6,8(r4)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100befc:	28bfffcc 	andi	r2,r5,65535
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100bf00:	0186303a 	nor	r3,zero,r6
 100bf04:	194a703a 	and	r5,r3,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100bf08:	28ffffcc 	andi	r3,r5,65535
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100bf0c:	2811883a 	mov	r8,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100bf10:	1880111e 	bne	r3,r2,100bf58 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100bf14:	50803fcc 	andi	r2,r10,255
 100bf18:	1240111e 	bne	r2,r9,100bf60 <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100bf1c:	2984b03a 	or	r2,r5,r6
 100bf20:	00000b06 	br	100bf50 <OSFlagAccept+0x120>
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100bf24:	2240020b 	ldhu	r9,8(r4)
 100bf28:	0244303a 	nor	r2,zero,r9
 100bf2c:	1146703a 	and	r3,r2,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100bf30:	18bfffcc 	andi	r2,r3,65535
 100bf34:	10a0001c 	xori	r2,r2,32768
 100bf38:	10a00004 	addi	r2,r2,-32768
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100bf3c:	1811883a 	mov	r8,r3
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100bf40:	10000526 	beq	r2,zero,100bf58 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100bf44:	50803fcc 	andi	r2,r10,255
 100bf48:	1180051e 	bne	r2,r6,100bf60 <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100bf4c:	1a44b03a 	or	r2,r3,r9
 100bf50:	2080020d 	sth	r2,8(r4)
 100bf54:	00000206 	br	100bf60 <OSFlagAccept+0x130>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 100bf58:	00801c04 	movi	r2,112
 100bf5c:	38800005 	stb	r2,0(r7)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bf60:	5801703a 	wrctl	status,r11
 100bf64:	00000406 	br	100bf78 <OSFlagAccept+0x148>
 100bf68:	5801703a 	wrctl	status,r11
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 100bf6c:	00801bc4 	movi	r2,111
 100bf70:	38800005 	stb	r2,0(r7)
 100bf74:	0011883a 	mov	r8,zero
             break;
    }
    return (flags_rdy);
 100bf78:	40ffffcc 	andi	r3,r8,65535
}
 100bf7c:	1805883a 	mov	r2,r3
 100bf80:	f800283a 	ret

0100bf84 <OSFlagCreate>:
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 100bf84:	00802034 	movhi	r2,128
 100bf88:	10825904 	addi	r2,r2,2404
 100bf8c:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 100bf90:	0007883a 	mov	r3,zero
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 100bf94:	10000226 	beq	r2,zero,100bfa0 <OSFlagCreate+0x1c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 100bf98:	00800404 	movi	r2,16
 100bf9c:	00001606 	br	100bff8 <OSFlagCreate+0x74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bfa0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bfa4:	00bfff84 	movi	r2,-2
 100bfa8:	3084703a 	and	r2,r6,r2
 100bfac:	1001703a 	wrctl	status,r2
        return ((OS_FLAG_GRP *)0);
    }
    OS_ENTER_CRITICAL();
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 100bfb0:	01c02034 	movhi	r7,128
 100bfb4:	39c25d04 	addi	r7,r7,2420
 100bfb8:	38c00017 	ldw	r3,0(r7)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 100bfbc:	18000c26 	beq	r3,zero,100bff0 <OSFlagCreate+0x6c>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 100bfc0:	18800117 	ldw	r2,4(r3)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 100bfc4:	1900020d 	sth	r4,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 100bfc8:	18000115 	stw	zero,4(r3)
    }
    OS_ENTER_CRITICAL();
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 100bfcc:	38800015 	stw	r2,0(r7)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 100bfd0:	00800144 	movi	r2,5
 100bfd4:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 100bfd8:	00800fc4 	movi	r2,63
 100bfdc:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100bfe0:	180002c5 	stb	zero,11(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bfe4:	3001703a 	wrctl	status,r6
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 100bfe8:	28000005 	stb	zero,0(r5)
 100bfec:	00000306 	br	100bffc <OSFlagCreate+0x78>
 100bff0:	3001703a 	wrctl	status,r6
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 100bff4:	00801c84 	movi	r2,114
 100bff8:	28800005 	stb	r2,0(r5)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
}
 100bffc:	1805883a 	mov	r2,r3
 100c000:	f800283a 	ret

0100c004 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 100c004:	defffa04 	addi	sp,sp,-24
 100c008:	dc800215 	stw	r18,8(sp)
 100c00c:	dc400115 	stw	r17,4(sp)
 100c010:	dfc00515 	stw	ra,20(sp)
 100c014:	dd000415 	stw	r20,16(sp)
 100c018:	dcc00315 	stw	r19,12(sp)
 100c01c:	dc000015 	stw	r16,0(sp)
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (pgrp);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100c020:	00802034 	movhi	r2,128
 100c024:	10825904 	addi	r2,r2,2404
 100c028:	10800003 	ldbu	r2,0(r2)
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 100c02c:	2023883a 	mov	r17,r4
 100c030:	3025883a 	mov	r18,r6
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (pgrp);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100c034:	10000226 	beq	r2,zero,100c040 <OSFlagDel+0x3c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 100c038:	008003c4 	movi	r2,15
 100c03c:	00003a06 	br	100c128 <OSFlagDel+0x124>
        return (pgrp);
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 100c040:	20c00003 	ldbu	r3,0(r4)
 100c044:	00800144 	movi	r2,5
 100c048:	18800226 	beq	r3,r2,100c054 <OSFlagDel+0x50>
        *perr = OS_ERR_EVENT_TYPE;
 100c04c:	00800044 	movi	r2,1
 100c050:	00003506 	br	100c128 <OSFlagDel+0x124>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c054:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c058:	00bfff84 	movi	r2,-2
 100c05c:	9884703a 	and	r2,r19,r2
 100c060:	1001703a 	wrctl	status,r2
        return (pgrp);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 100c064:	21000117 	ldw	r4,4(r4)
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 100c068:	29403fcc 	andi	r5,r5,255
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
        *perr = OS_ERR_EVENT_TYPE;
        return (pgrp);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 100c06c:	2004c03a 	cmpne	r2,r4,zero
 100c070:	1029883a 	mov	r20,r2
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
 100c074:	28000326 	beq	r5,zero,100c084 <OSFlagDel+0x80>
 100c078:	00800044 	movi	r2,1
 100c07c:	2880281e 	bne	r5,r2,100c120 <OSFlagDel+0x11c>
 100c080:	00001006 	br	100c0c4 <OSFlagDel+0xc0>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 100c084:	10000c1e 	bne	r2,zero,100c0b8 <OSFlagDel+0xb4>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 100c088:	00800fc4 	movi	r2,63
 100c08c:	88800285 	stb	r2,10(r17)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100c090:	880002c5 	stb	zero,11(r17)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100c094:	88000005 	stb	zero,0(r17)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 100c098:	00802034 	movhi	r2,128
 100c09c:	10825d04 	addi	r2,r2,2420
 100c0a0:	10c00017 	ldw	r3,0(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100c0a4:	8800020d 	sth	zero,8(r17)
                 OSFlagFreeList       = pgrp;
 100c0a8:	14400015 	stw	r17,0(r2)
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 100c0ac:	88c00115 	stw	r3,4(r17)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c0b0:	9801703a 	wrctl	status,r19
 100c0b4:	00001706 	br	100c114 <OSFlagDel+0x110>
 100c0b8:	9801703a 	wrctl	status,r19
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 100c0bc:	00801244 	movi	r2,73
 100c0c0:	00001906 	br	100c128 <OSFlagDel+0x124>
                 pgrp_return          = pgrp;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100c0c4:	2021883a 	mov	r16,r4
 100c0c8:	00000206 	br	100c0d4 <OSFlagDel+0xd0>
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 100c0cc:	100bcec0 	call	100bcec <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 100c0d0:	84000017 	ldw	r16,0(r16)
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 100c0d4:	8009883a 	mov	r4,r16
 100c0d8:	000b883a 	mov	r5,zero
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 100c0dc:	803ffb1e 	bne	r16,zero,100c0cc <OSFlagDel+0xc8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 100c0e0:	00800fc4 	movi	r2,63
 100c0e4:	88800285 	stb	r2,10(r17)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 100c0e8:	880002c5 	stb	zero,11(r17)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 100c0ec:	88000005 	stb	zero,0(r17)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 100c0f0:	00802034 	movhi	r2,128
 100c0f4:	10825d04 	addi	r2,r2,2420
 100c0f8:	10c00017 	ldw	r3,0(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 100c0fc:	8800020d 	sth	zero,8(r17)
             OSFlagFreeList       = pgrp;
 100c100:	14400015 	stw	r17,0(r2)
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 100c104:	88c00115 	stw	r3,4(r17)
 100c108:	9801703a 	wrctl	status,r19
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
             OSFlagFreeList       = pgrp;
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 100c10c:	a0000126 	beq	r20,zero,100c114 <OSFlagDel+0x110>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 100c110:	100b0a80 	call	100b0a8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 100c114:	0023883a 	mov	r17,zero
 100c118:	90000005 	stb	zero,0(r18)
 100c11c:	00000306 	br	100c12c <OSFlagDel+0x128>
 100c120:	9801703a 	wrctl	status,r19
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
             break;

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 100c124:	008001c4 	movi	r2,7
 100c128:	90800005 	stb	r2,0(r18)
             pgrp_return          = pgrp;
             break;
    }
    return (pgrp_return);
}
 100c12c:	8805883a 	mov	r2,r17
 100c130:	dfc00517 	ldw	ra,20(sp)
 100c134:	dd000417 	ldw	r20,16(sp)
 100c138:	dcc00317 	ldw	r19,12(sp)
 100c13c:	dc800217 	ldw	r18,8(sp)
 100c140:	dc400117 	ldw	r17,4(sp)
 100c144:	dc000017 	ldw	r16,0(sp)
 100c148:	dec00604 	addi	sp,sp,24
 100c14c:	f800283a 	ret

0100c150 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100c150:	defffd04 	addi	sp,sp,-12
 100c154:	dc000015 	stw	r16,0(sp)
 100c158:	dfc00215 	stw	ra,8(sp)
 100c15c:	dc400115 	stw	r17,4(sp)
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100c160:	00802034 	movhi	r2,128
 100c164:	10825904 	addi	r2,r2,2404
 100c168:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_NAME_GET_ISR;
 100c16c:	000f883a 	mov	r7,zero
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100c170:	3021883a 	mov	r16,r6
 100c174:	2007883a 	mov	r3,r4
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100c178:	10000226 	beq	r2,zero,100c184 <OSFlagNameGet+0x34>
        *perr = OS_ERR_NAME_GET_ISR;
 100c17c:	00800444 	movi	r2,17
 100c180:	00000c06 	br	100c1b4 <OSFlagNameGet+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c184:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c188:	00bfff84 	movi	r2,-2
 100c18c:	8884703a 	and	r2,r17,r2
 100c190:	1001703a 	wrctl	status,r2
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return (0);
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 100c194:	2809883a 	mov	r4,r5
 100c198:	19400284 	addi	r5,r3,10
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100c19c:	18c00003 	ldbu	r3,0(r3)
 100c1a0:	00800144 	movi	r2,5
 100c1a4:	18800526 	beq	r3,r2,100c1bc <OSFlagNameGet+0x6c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c1a8:	8801703a 	wrctl	status,r17
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100c1ac:	000f883a 	mov	r7,zero
 100c1b0:	00800044 	movi	r2,1
 100c1b4:	80800005 	stb	r2,0(r16)
 100c1b8:	00000406 	br	100c1cc <OSFlagNameGet+0x7c>
        return (0);
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 100c1bc:	100b05c0 	call	100b05c <OS_StrCopy>
 100c1c0:	8801703a 	wrctl	status,r17
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100c1c4:	80000005 	stb	zero,0(r16)
    return (len);
 100c1c8:	11c03fcc 	andi	r7,r2,255
}
 100c1cc:	3805883a 	mov	r2,r7
 100c1d0:	dfc00217 	ldw	ra,8(sp)
 100c1d4:	dc400117 	ldw	r17,4(sp)
 100c1d8:	dc000017 	ldw	r16,0(sp)
 100c1dc:	dec00304 	addi	sp,sp,12
 100c1e0:	f800283a 	ret

0100c1e4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100c1e4:	defffb04 	addi	sp,sp,-20
 100c1e8:	dcc00315 	stw	r19,12(sp)
 100c1ec:	dc800215 	stw	r18,8(sp)
 100c1f0:	dc000015 	stw	r16,0(sp)
 100c1f4:	dfc00415 	stw	ra,16(sp)
 100c1f8:	dc400115 	stw	r17,4(sp)
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100c1fc:	00802034 	movhi	r2,128
 100c200:	10825904 	addi	r2,r2,2404
 100c204:	10800003 	ldbu	r2,0(r2)
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 100c208:	3021883a 	mov	r16,r6
 100c20c:	2027883a 	mov	r19,r4
 100c210:	2825883a 	mov	r18,r5
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100c214:	10000226 	beq	r2,zero,100c220 <OSFlagNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 100c218:	00800484 	movi	r2,18
 100c21c:	00000a06 	br	100c248 <OSFlagNameSet+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c220:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c224:	00bfff84 	movi	r2,-2
 100c228:	8884703a 	and	r2,r17,r2
 100c22c:	1001703a 	wrctl	status,r2
        return;
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100c230:	20c00003 	ldbu	r3,0(r4)
 100c234:	00800144 	movi	r2,5
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 100c238:	2809883a 	mov	r4,r5
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_SET_ISR;
        return;
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 100c23c:	18800426 	beq	r3,r2,100c250 <OSFlagNameSet+0x6c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c240:	8801703a 	wrctl	status,r17
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 100c244:	00800044 	movi	r2,1
 100c248:	80800005 	stb	r2,0(r16)
 100c24c:	00000c06 	br	100c280 <OSFlagNameSet+0x9c>
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 100c250:	100b0880 	call	100b088 <OS_StrLen>
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 100c254:	10803fcc 	andi	r2,r2,255
 100c258:	00c007c4 	movi	r3,31
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
        return;
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 100c25c:	900b883a 	mov	r5,r18
 100c260:	99000284 	addi	r4,r19,10
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 100c264:	1880032e 	bgeu	r3,r2,100c274 <OSFlagNameSet+0x90>
 100c268:	8801703a 	wrctl	status,r17
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 100c26c:	00801cc4 	movi	r2,115
 100c270:	003ff506 	br	100c248 <OSFlagNameSet+0x64>
        return;
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 100c274:	100b05c0 	call	100b05c <OS_StrCopy>
 100c278:	8801703a 	wrctl	status,r17
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100c27c:	80000005 	stb	zero,0(r16)
    return;
}
 100c280:	dfc00417 	ldw	ra,16(sp)
 100c284:	dcc00317 	ldw	r19,12(sp)
 100c288:	dc800217 	ldw	r18,8(sp)
 100c28c:	dc400117 	ldw	r17,4(sp)
 100c290:	dc000017 	ldw	r16,0(sp)
 100c294:	dec00504 	addi	sp,sp,20
 100c298:	f800283a 	ret

0100c29c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 100c29c:	defff204 	addi	sp,sp,-56
 100c2a0:	dd800c15 	stw	r22,48(sp)
 100c2a4:	dd000a15 	stw	r20,40(sp)
 100c2a8:	dc000615 	stw	r16,24(sp)
 100c2ac:	dfc00d15 	stw	ra,52(sp)
 100c2b0:	dd400b15 	stw	r21,44(sp)
 100c2b4:	dcc00915 	stw	r19,36(sp)
 100c2b8:	dc800815 	stw	r18,32(sp)
 100c2bc:	dc400715 	stw	r17,28(sp)
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100c2c0:	00802034 	movhi	r2,128
 100c2c4:	10825904 	addi	r2,r2,2404
 100c2c8:	10800003 	ldbu	r2,0(r2)
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 100c2cc:	2021883a 	mov	r16,r4
 100c2d0:	3813883a 	mov	r9,r7
 100c2d4:	dd000e17 	ldw	r20,56(sp)
 100c2d8:	302d883a 	mov	r22,r6
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100c2dc:	10000326 	beq	r2,zero,100c2ec <OSFlagPend+0x50>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 100c2e0:	000d883a 	mov	r6,zero
 100c2e4:	00800084 	movi	r2,2
 100c2e8:	00000606 	br	100c304 <OSFlagPend+0x68>
        return ((OS_FLAGS)0);
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 100c2ec:	00802034 	movhi	r2,128
 100c2f0:	10824a04 	addi	r2,r2,2344
 100c2f4:	10800003 	ldbu	r2,0(r2)
 100c2f8:	10000426 	beq	r2,zero,100c30c <OSFlagPend+0x70>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 100c2fc:	000d883a 	mov	r6,zero
 100c300:	00800344 	movi	r2,13
 100c304:	a0800005 	stb	r2,0(r20)
 100c308:	00009206 	br	100c554 <OSFlagPend+0x2b8>
        return ((OS_FLAGS)0);
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 100c30c:	20c00003 	ldbu	r3,0(r4)
 100c310:	00800144 	movi	r2,5
 100c314:	18800326 	beq	r3,r2,100c324 <OSFlagPend+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 100c318:	000d883a 	mov	r6,zero
 100c31c:	00800044 	movi	r2,1
 100c320:	003ff806 	br	100c304 <OSFlagPend+0x68>
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 100c324:	00bfe004 	movi	r2,-128
 100c328:	3084703a 	and	r2,r6,r2
 100c32c:	10803fcc 	andi	r2,r2,255
 100c330:	1000021e 	bne	r2,zero,100c33c <OSFlagPend+0xa0>
 100c334:	002b883a 	mov	r21,zero
 100c338:	00000206 	br	100c344 <OSFlagPend+0xa8>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 100c33c:	35801fcc 	andi	r22,r6,127
 100c340:	05400044 	movi	r21,1
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c344:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c348:	00bfff84 	movi	r2,-2
 100c34c:	8884703a 	and	r2,r17,r2
 100c350:	1001703a 	wrctl	status,r2
    } else {
        consume    = OS_FALSE;
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (wait_type) {
 100c354:	b1c03fcc 	andi	r7,r22,255
 100c358:	02000044 	movi	r8,1
 100c35c:	3a003026 	beq	r7,r8,100c420 <OSFlagPend+0x184>
 100c360:	3a001d36 	bltu	r7,r8,100c3d8 <OSFlagPend+0x13c>
 100c364:	00800084 	movi	r2,2
 100c368:	38800326 	beq	r7,r2,100c378 <OSFlagPend+0xdc>
 100c36c:	008000c4 	movi	r2,3
 100c370:	3880421e 	bne	r7,r2,100c47c <OSFlagPend+0x1e0>
 100c374:	00000a06 	br	100c3a0 <OSFlagPend+0x104>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 100c378:	80c0020b 	ldhu	r3,8(r16)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100c37c:	29bfffcc 	andi	r6,r5,65535
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 100c380:	194a703a 	and	r5,r3,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100c384:	28bfffcc 	andi	r2,r5,65535
 100c388:	1180231e 	bne	r2,r6,100c418 <OSFlagPend+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100c38c:	a8803fcc 	andi	r2,r21,255
 100c390:	12001b1e 	bne	r2,r8,100c400 <OSFlagPend+0x164>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 100c394:	0144303a 	nor	r2,zero,r5
 100c398:	10c4703a 	and	r2,r2,r3
 100c39c:	00001706 	br	100c3fc <OSFlagPend+0x160>
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 100c3a0:	8100020b 	ldhu	r4,8(r16)
 100c3a4:	2146703a 	and	r3,r4,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 100c3a8:	19bfffcc 	andi	r6,r3,65535
 100c3ac:	30003026 	beq	r6,zero,100c470 <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100c3b0:	a8803fcc 	andi	r2,r21,255
 100c3b4:	1200031e 	bne	r2,r8,100c3c4 <OSFlagPend+0x128>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 100c3b8:	00c4303a 	nor	r2,zero,r3
 100c3bc:	1104703a 	and	r2,r2,r4
 100c3c0:	8080020d 	sth	r2,8(r16)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100c3c4:	00802034 	movhi	r2,128
 100c3c8:	10825a04 	addi	r2,r2,2408
 100c3cc:	10800017 	ldw	r2,0(r2)
 100c3d0:	10c00b0d 	sth	r3,44(r2)
 100c3d4:	00000e06 	br	100c410 <OSFlagPend+0x174>
             }
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100c3d8:	80c0020b 	ldhu	r3,8(r16)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100c3dc:	29bfffcc 	andi	r6,r5,65535
             }
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 100c3e0:	00c4303a 	nor	r2,zero,r3
 100c3e4:	114a703a 	and	r5,r2,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 100c3e8:	28bfffcc 	andi	r2,r5,65535
 100c3ec:	11800a1e 	bne	r2,r6,100c418 <OSFlagPend+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100c3f0:	a8803fcc 	andi	r2,r21,255
 100c3f4:	1200021e 	bne	r2,r8,100c400 <OSFlagPend+0x164>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 100c3f8:	28c4b03a 	or	r2,r5,r3
 100c3fc:	8080020d 	sth	r2,8(r16)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100c400:	00802034 	movhi	r2,128
 100c404:	10825a04 	addi	r2,r2,2408
 100c408:	10800017 	ldw	r2,0(r2)
 100c40c:	11400b0d 	sth	r5,44(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c410:	8801703a 	wrctl	status,r17
 100c414:	00001406 	br	100c468 <OSFlagPend+0x1cc>
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100c418:	48bfffcc 	andi	r2,r9,65535
 100c41c:	00001906 	br	100c484 <OSFlagPend+0x1e8>
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100c420:	8100020b 	ldhu	r4,8(r16)
 100c424:	0104303a 	nor	r2,zero,r4
 100c428:	1146703a 	and	r3,r2,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100c42c:	18bfffcc 	andi	r2,r3,65535
 100c430:	10a0001c 	xori	r2,r2,32768
 100c434:	10a00004 	addi	r2,r2,-32768
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 100c438:	180d883a 	mov	r6,r3
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 100c43c:	10000c26 	beq	r2,zero,100c470 <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 100c440:	a8803fcc 	andi	r2,r21,255
 100c444:	11c0021e 	bne	r2,r7,100c450 <OSFlagPend+0x1b4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 100c448:	1904b03a 	or	r2,r3,r4
 100c44c:	8080020d 	sth	r2,8(r16)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 100c450:	00802034 	movhi	r2,128
 100c454:	10825a04 	addi	r2,r2,2408
 100c458:	10800017 	ldw	r2,0(r2)
 100c45c:	10c00b0d 	sth	r3,44(r2)
 100c460:	8801703a 	wrctl	status,r17
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
 100c464:	31bfffcc 	andi	r6,r6,65535
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 100c468:	a0000005 	stb	zero,0(r20)
 100c46c:	00003906 	br	100c554 <OSFlagPend+0x2b8>
                 return (flags_rdy);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 100c470:	48bfffcc 	andi	r2,r9,65535
 100c474:	29bfffcc 	andi	r6,r5,65535
 100c478:	00000206 	br	100c484 <OSFlagPend+0x1e8>
 100c47c:	8801703a 	wrctl	status,r17
 100c480:	00002e06 	br	100c53c <OSFlagPend+0x2a0>
 100c484:	8009883a 	mov	r4,r16
 100c488:	d9400104 	addi	r5,sp,4
 100c48c:	d8800015 	stw	r2,0(sp)
 100c490:	100bbf80 	call	100bbf8 <OS_FlagBlock>
 100c494:	8801703a 	wrctl	status,r17
             flags_rdy = (OS_FLAGS)0;
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
             return (flags_rdy);
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 100c498:	100b0a80 	call	100b0a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c49c:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c4a0:	00bfff84 	movi	r2,-2
 100c4a4:	9884703a 	and	r2,r19,r2
 100c4a8:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 100c4ac:	04802034 	movhi	r18,128
 100c4b0:	94825a04 	addi	r18,r18,2408
 100c4b4:	90800017 	ldw	r2,0(r18)
 100c4b8:	14400c43 	ldbu	r17,49(r2)
 100c4bc:	88000e26 	beq	r17,zero,100c4f8 <OSFlagPend+0x25c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100c4c0:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 100c4c4:	d9000104 	addi	r4,sp,4
 100c4c8:	100bcb00 	call	100bcb0 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 100c4cc:	90800017 	ldw	r2,0(r18)
 100c4d0:	10000c05 	stb	zero,48(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c4d4:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
        switch (pend_stat) {
 100c4d8:	00800084 	movi	r2,2
 100c4dc:	8880031e 	bne	r17,r2,100c4ec <OSFlagPend+0x250>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 100c4e0:	000d883a 	mov	r6,zero
 100c4e4:	00800384 	movi	r2,14
 100c4e8:	003f8606 	br	100c304 <OSFlagPend+0x68>
                 break;

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 100c4ec:	000d883a 	mov	r6,zero
 100c4f0:	00800284 	movi	r2,10
 100c4f4:	003f8306 	br	100c304 <OSFlagPend+0x68>
                 break;
        }
        return (flags_rdy);
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 100c4f8:	11800b0b 	ldhu	r6,44(r2)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 100c4fc:	a9003fcc 	andi	r4,r21,255
 100c500:	00800044 	movi	r2,1
 100c504:	2080101e 	bne	r4,r2,100c548 <OSFlagPend+0x2ac>
        switch (wait_type) {
 100c508:	b0c03fcc 	andi	r3,r22,255
 100c50c:	20c0062e 	bgeu	r4,r3,100c528 <OSFlagPend+0x28c>
 100c510:	008000c4 	movi	r2,3
 100c514:	10c00836 	bltu	r2,r3,100c538 <OSFlagPend+0x29c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 100c518:	80c0020b 	ldhu	r3,8(r16)
 100c51c:	0184303a 	nor	r2,zero,r6
 100c520:	10c4703a 	and	r2,r2,r3
 100c524:	00000206 	br	100c530 <OSFlagPend+0x294>
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 100c528:	8080020b 	ldhu	r2,8(r16)
 100c52c:	1184b03a 	or	r2,r2,r6
 100c530:	8080020d 	sth	r2,8(r16)
 100c534:	00000406 	br	100c548 <OSFlagPend+0x2ac>
 100c538:	9801703a 	wrctl	status,r19
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 100c53c:	000d883a 	mov	r6,zero
 100c540:	00801bc4 	movi	r2,111
 100c544:	003f6f06 	br	100c304 <OSFlagPend+0x68>
 100c548:	9801703a 	wrctl	status,r19
                 return ((OS_FLAGS)0);
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 100c54c:	a0000005 	stb	zero,0(r20)
    return (flags_rdy);
 100c550:	31bfffcc 	andi	r6,r6,65535
}
 100c554:	3005883a 	mov	r2,r6
 100c558:	dfc00d17 	ldw	ra,52(sp)
 100c55c:	dd800c17 	ldw	r22,48(sp)
 100c560:	dd400b17 	ldw	r21,44(sp)
 100c564:	dd000a17 	ldw	r20,40(sp)
 100c568:	dcc00917 	ldw	r19,36(sp)
 100c56c:	dc800817 	ldw	r18,32(sp)
 100c570:	dc400717 	ldw	r17,28(sp)
 100c574:	dc000617 	ldw	r16,24(sp)
 100c578:	dec00e04 	addi	sp,sp,56
 100c57c:	f800283a 	ret

0100c580 <OSFlagPendGetFlagsRdy>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c580:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c584:	00bfff84 	movi	r2,-2
 100c588:	1884703a 	and	r2,r3,r2
 100c58c:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    flags = OSTCBCur->OSTCBFlagsRdy;
 100c590:	00802034 	movhi	r2,128
 100c594:	10825a04 	addi	r2,r2,2408
 100c598:	10800017 	ldw	r2,0(r2)
 100c59c:	10800b0b 	ldhu	r2,44(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c5a0:	1801703a 	wrctl	status,r3
    OS_EXIT_CRITICAL();
    return (flags);
}
 100c5a4:	10bfffcc 	andi	r2,r2,65535
 100c5a8:	f800283a 	ret

0100c5ac <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 100c5ac:	defff804 	addi	sp,sp,-32
 100c5b0:	dd000415 	stw	r20,16(sp)
 100c5b4:	dc800215 	stw	r18,8(sp)
 100c5b8:	dfc00715 	stw	ra,28(sp)
 100c5bc:	dd800615 	stw	r22,24(sp)
 100c5c0:	dd400515 	stw	r21,20(sp)
 100c5c4:	dcc00315 	stw	r19,12(sp)
 100c5c8:	dc400115 	stw	r17,4(sp)
 100c5cc:	dc000015 	stw	r16,0(sp)
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 100c5d0:	20c00003 	ldbu	r3,0(r4)
 100c5d4:	00800144 	movi	r2,5
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 100c5d8:	2025883a 	mov	r18,r4
 100c5dc:	3829883a 	mov	r20,r7
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 100c5e0:	18800326 	beq	r3,r2,100c5f0 <OSFlagPost+0x44>
        *perr = OS_ERR_EVENT_TYPE;
 100c5e4:	0007883a 	mov	r3,zero
 100c5e8:	00800044 	movi	r2,1
 100c5ec:	00001606 	br	100c648 <OSFlagPost+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c5f0:	002b303a 	rdctl	r21,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c5f4:	00bfff84 	movi	r2,-2
 100c5f8:	a884703a 	and	r2,r21,r2
 100c5fc:	1001703a 	wrctl	status,r2
        return ((OS_FLAGS)0);
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (opt) {
 100c600:	31803fcc 	andi	r6,r6,255
 100c604:	30000326 	beq	r6,zero,100c614 <OSFlagPost+0x68>
 100c608:	00800044 	movi	r2,1
 100c60c:	30800b1e 	bne	r6,r2,100c63c <OSFlagPost+0x90>
 100c610:	00000406 	br	100c624 <OSFlagPost+0x78>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 100c614:	20c0020b 	ldhu	r3,8(r4)
 100c618:	0144303a 	nor	r2,zero,r5
 100c61c:	10c4703a 	and	r2,r2,r3
 100c620:	00000206 	br	100c62c <OSFlagPost+0x80>
             break;

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 100c624:	2080020b 	ldhu	r2,8(r4)
 100c628:	2884b03a 	or	r2,r5,r2
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 100c62c:	94400117 	ldw	r17,4(r18)
 100c630:	002d883a 	mov	r22,zero
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
             break;

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 100c634:	9080020d 	sth	r2,8(r18)
 100c638:	00003a06 	br	100c724 <OSFlagPost+0x178>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c63c:	a801703a 	wrctl	status,r21
             break;

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 100c640:	0007883a 	mov	r3,zero
 100c644:	00801c44 	movi	r2,113
 100c648:	a0800005 	stb	r2,0(r20)
 100c64c:	00004206 	br	100c758 <OSFlagPost+0x1ac>
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
        switch (pnode->OSFlagNodeWaitType) {
 100c650:	8c000483 	ldbu	r16,18(r17)
 100c654:	04c00044 	movi	r19,1
 100c658:	84c01e26 	beq	r16,r19,100c6d4 <OSFlagPost+0x128>
 100c65c:	84c01236 	bltu	r16,r19,100c6a8 <OSFlagPost+0xfc>
 100c660:	00800084 	movi	r2,2
 100c664:	80800326 	beq	r16,r2,100c674 <OSFlagPost+0xc8>
 100c668:	008000c4 	movi	r2,3
 100c66c:	8080271e 	bne	r16,r2,100c70c <OSFlagPost+0x160>
 100c670:	00000706 	br	100c690 <OSFlagPost+0xe4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100c674:	8880040b 	ldhu	r2,16(r17)
 100c678:	90c0020b 	ldhu	r3,8(r18)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 100c67c:	1009883a 	mov	r4,r2
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
        switch (pnode->OSFlagNodeWaitType) {
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100c680:	10c4703a 	and	r2,r2,r3
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 100c684:	117fffcc 	andi	r5,r2,65535
 100c688:	2900251e 	bne	r5,r4,100c720 <OSFlagPost+0x174>
 100c68c:	00000c06 	br	100c6c0 <OSFlagPost+0x114>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100c690:	9080020b 	ldhu	r2,8(r18)
 100c694:	88c0040b 	ldhu	r3,16(r17)
 100c698:	10c4703a 	and	r2,r2,r3
                 if (flags_rdy != (OS_FLAGS)0) {
 100c69c:	117fffcc 	andi	r5,r2,65535
 100c6a0:	28001f26 	beq	r5,zero,100c720 <OSFlagPost+0x174>
 100c6a4:	00000606 	br	100c6c0 <OSFlagPost+0x114>
                 }
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100c6a8:	9080020b 	ldhu	r2,8(r18)
 100c6ac:	88c0040b 	ldhu	r3,16(r17)
 100c6b0:	0084303a 	nor	r2,zero,r2
 100c6b4:	10c4703a 	and	r2,r2,r3
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 100c6b8:	117fffcc 	andi	r5,r2,65535
 100c6bc:	28c0181e 	bne	r5,r3,100c720 <OSFlagPost+0x174>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100c6c0:	8809883a 	mov	r4,r17
 100c6c4:	100bcec0 	call	100bcec <OS_FlagTaskRdy>
                     if (rdy == OS_TRUE) {
 100c6c8:	10803fcc 	andi	r2,r2,255
 100c6cc:	14c0141e 	bne	r2,r19,100c720 <OSFlagPost+0x174>
 100c6d0:	00001206 	br	100c71c <OSFlagPost+0x170>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 100c6d4:	9080020b 	ldhu	r2,8(r18)
 100c6d8:	88c0040b 	ldhu	r3,16(r17)
 100c6dc:	0084303a 	nor	r2,zero,r2
 100c6e0:	10ca703a 	and	r5,r2,r3
                 if (flags_rdy != (OS_FLAGS)0) {
 100c6e4:	28bfffcc 	andi	r2,r5,65535
 100c6e8:	10a0001c 	xori	r2,r2,32768
 100c6ec:	10a00004 	addi	r2,r2,-32768
 100c6f0:	10000b26 	beq	r2,zero,100c720 <OSFlagPost+0x174>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 100c6f4:	297fffcc 	andi	r5,r5,65535
 100c6f8:	8809883a 	mov	r4,r17
 100c6fc:	100bcec0 	call	100bcec <OS_FlagTaskRdy>
                     if (rdy == OS_TRUE) {
 100c700:	10803fcc 	andi	r2,r2,255
 100c704:	1400061e 	bne	r2,r16,100c720 <OSFlagPost+0x174>
 100c708:	00000406 	br	100c71c <OSFlagPost+0x170>
 100c70c:	a801703a 	wrctl	status,r21
                 }
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 100c710:	0007883a 	mov	r3,zero
 100c714:	00801bc4 	movi	r2,111
 100c718:	003fcb06 	br	100c648 <OSFlagPost+0x9c>
                 return ((OS_FLAGS)0);
 100c71c:	05800044 	movi	r22,1
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 100c720:	8c400017 	ldw	r17,0(r17)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 100c724:	883fca1e 	bne	r17,zero,100c650 <OSFlagPost+0xa4>
 100c728:	a801703a 	wrctl	status,r21
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 100c72c:	b0c03fcc 	andi	r3,r22,255
 100c730:	00800044 	movi	r2,1
 100c734:	1880011e 	bne	r3,r2,100c73c <OSFlagPost+0x190>
        OS_Sched();
 100c738:	100b0a80 	call	100b0a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c73c:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c740:	00ffff84 	movi	r3,-2
 100c744:	10c6703a 	and	r3,r2,r3
 100c748:	1801703a 	wrctl	status,r3
    }
    OS_ENTER_CRITICAL();
    flags_cur = pgrp->OSFlagFlags;
 100c74c:	90c0020b 	ldhu	r3,8(r18)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c750:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 100c754:	a0000005 	stb	zero,0(r20)
    return (flags_cur);
}
 100c758:	1805883a 	mov	r2,r3
 100c75c:	dfc00717 	ldw	ra,28(sp)
 100c760:	dd800617 	ldw	r22,24(sp)
 100c764:	dd400517 	ldw	r21,20(sp)
 100c768:	dd000417 	ldw	r20,16(sp)
 100c76c:	dcc00317 	ldw	r19,12(sp)
 100c770:	dc800217 	ldw	r18,8(sp)
 100c774:	dc400117 	ldw	r17,4(sp)
 100c778:	dc000017 	ldw	r16,0(sp)
 100c77c:	dec00804 	addi	sp,sp,32
 100c780:	f800283a 	ret

0100c784 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 100c784:	defffb04 	addi	sp,sp,-20
 100c788:	dcc00315 	stw	r19,12(sp)
 100c78c:	dc800215 	stw	r18,8(sp)
 100c790:	dc000015 	stw	r16,0(sp)
 100c794:	dfc00415 	stw	ra,16(sp)
 100c798:	dc400115 	stw	r17,4(sp)
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 100c79c:	20c00003 	ldbu	r3,0(r4)
 100c7a0:	00800044 	movi	r2,1
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 100c7a4:	2021883a 	mov	r16,r4
 100c7a8:	3027883a 	mov	r19,r6
 100c7ac:	2825883a 	mov	r18,r5
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 100c7b0:	1880201e 	bne	r3,r2,100c834 <OSMboxPostOpt+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c7b4:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c7b8:	00bfff84 	movi	r2,-2
 100c7bc:	8884703a 	and	r2,r17,r2
 100c7c0:	1001703a 	wrctl	status,r2
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 100c7c4:	20800283 	ldbu	r2,10(r4)
 100c7c8:	10001226 	beq	r2,zero,100c814 <OSMboxPostOpt+0x90>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 100c7cc:	1cc4703a 	and	r2,r3,r19
 100c7d0:	10000826 	beq	r2,zero,100c7f4 <OSMboxPostOpt+0x70>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 100c7d4:	8009883a 	mov	r4,r16
 100c7d8:	900b883a 	mov	r5,r18
 100c7dc:	01800084 	movi	r6,2
 100c7e0:	000f883a 	mov	r7,zero
 100c7e4:	100af0c0 	call	100af0c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 100c7e8:	80800283 	ldbu	r2,10(r16)
 100c7ec:	10000426 	beq	r2,zero,100c800 <OSMboxPostOpt+0x7c>
 100c7f0:	003ff806 	br	100c7d4 <OSMboxPostOpt+0x50>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 100c7f4:	01800084 	movi	r6,2
 100c7f8:	000f883a 	mov	r7,zero
 100c7fc:	100af0c0 	call	100af0c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c800:	8801703a 	wrctl	status,r17
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 100c804:	9880010c 	andi	r2,r19,4
 100c808:	1000091e 	bne	r2,zero,100c830 <OSMboxPostOpt+0xac>
            OS_Sched();                               /* Find HPT ready to run                         */
 100c80c:	100b0a80 	call	100b0a8 <OS_Sched>
 100c810:	00000706 	br	100c830 <OSMboxPostOpt+0xac>
        }
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 100c814:	20800117 	ldw	r2,4(r4)
 100c818:	10000326 	beq	r2,zero,100c828 <OSMboxPostOpt+0xa4>
 100c81c:	8801703a 	wrctl	status,r17
 100c820:	00800504 	movi	r2,20
 100c824:	00000306 	br	100c834 <OSMboxPostOpt+0xb0>
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 100c828:	81400115 	stw	r5,4(r16)
 100c82c:	8801703a 	wrctl	status,r17
 100c830:	0005883a 	mov	r2,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 100c834:	dfc00417 	ldw	ra,16(sp)
 100c838:	dcc00317 	ldw	r19,12(sp)
 100c83c:	dc800217 	ldw	r18,8(sp)
 100c840:	dc400117 	ldw	r17,4(sp)
 100c844:	dc000017 	ldw	r16,0(sp)
 100c848:	dec00504 	addi	sp,sp,20
 100c84c:	f800283a 	ret

0100c850 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 100c850:	defffe04 	addi	sp,sp,-8
 100c854:	dc000015 	stw	r16,0(sp)
 100c858:	dfc00115 	stw	ra,4(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 100c85c:	00802034 	movhi	r2,128
 100c860:	10825904 	addi	r2,r2,2404
 100c864:	10800003 	ldbu	r2,0(r2)
 100c868:	0021883a 	mov	r16,zero
 100c86c:	1000161e 	bne	r2,zero,100c8c8 <OSMboxCreate+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c870:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c874:	00bfff84 	movi	r2,-2
 100c878:	1884703a 	and	r2,r3,r2
 100c87c:	1001703a 	wrctl	status,r2
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    }
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 100c880:	01402034 	movhi	r5,128
 100c884:	29425804 	addi	r5,r5,2400
 100c888:	2c000017 	ldw	r16,0(r5)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 100c88c:	80000d26 	beq	r16,zero,100c8c4 <OSMboxCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 100c890:	80800117 	ldw	r2,4(r16)
 100c894:	28800015 	stw	r2,0(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c898:	1801703a 	wrctl	status,r3
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 100c89c:	00800044 	movi	r2,1
 100c8a0:	80800005 	stb	r2,0(r16)
        pevent->OSEventCnt     = 0;
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 100c8a4:	00800fc4 	movi	r2,63
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
        pevent->OSEventCnt     = 0;
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 100c8a8:	81000115 	stw	r4,4(r16)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 100c8ac:	80800385 	stb	r2,14(r16)
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
        pevent->OSEventCnt     = 0;
 100c8b0:	8000020d 	sth	zero,8(r16)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
        pevent->OSEventName[1] = OS_ASCII_NUL;
 100c8b4:	800003c5 	stb	zero,15(r16)
#endif
        OS_EventWaitListInit(pevent);
 100c8b8:	8009883a 	mov	r4,r16
 100c8bc:	100b0000 	call	100b000 <OS_EventWaitListInit>
 100c8c0:	00000106 	br	100c8c8 <OSMboxCreate+0x78>
 100c8c4:	1801703a 	wrctl	status,r3
    }
    return (pevent);                             /* Return pointer to event control block              */
}
 100c8c8:	8005883a 	mov	r2,r16
 100c8cc:	dfc00117 	ldw	ra,4(sp)
 100c8d0:	dc000017 	ldw	r16,0(sp)
 100c8d4:	dec00204 	addi	sp,sp,8
 100c8d8:	f800283a 	ret

0100c8dc <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 100c8dc:	defff904 	addi	sp,sp,-28
 100c8e0:	dc800215 	stw	r18,8(sp)
 100c8e4:	dc400115 	stw	r17,4(sp)
 100c8e8:	dfc00615 	stw	ra,24(sp)
 100c8ec:	dd400515 	stw	r21,20(sp)
 100c8f0:	dd000415 	stw	r20,16(sp)
 100c8f4:	dcc00315 	stw	r19,12(sp)
 100c8f8:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 100c8fc:	20800003 	ldbu	r2,0(r4)
 100c900:	00c00044 	movi	r3,1
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 100c904:	2025883a 	mov	r18,r4
 100c908:	3023883a 	mov	r17,r6
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 100c90c:	10c00326 	beq	r2,r3,100c91c <OSMboxPend+0x40>
        *perr = OS_ERR_EVENT_TYPE;
 100c910:	002b883a 	mov	r21,zero
 100c914:	30c00005 	stb	r3,0(r6)
 100c918:	00004306 	br	100ca28 <OSMboxPend+0x14c>
        return ((void *)0);
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 100c91c:	00802034 	movhi	r2,128
 100c920:	10825904 	addi	r2,r2,2404
 100c924:	10800003 	ldbu	r2,0(r2)
 100c928:	10000326 	beq	r2,zero,100c938 <OSMboxPend+0x5c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 100c92c:	002b883a 	mov	r21,zero
 100c930:	00800084 	movi	r2,2
 100c934:	00000606 	br	100c950 <OSMboxPend+0x74>
        return ((void *)0);
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 100c938:	00802034 	movhi	r2,128
 100c93c:	10824a04 	addi	r2,r2,2344
 100c940:	10800003 	ldbu	r2,0(r2)
 100c944:	10000426 	beq	r2,zero,100c958 <OSMboxPend+0x7c>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 100c948:	002b883a 	mov	r21,zero
 100c94c:	00800344 	movi	r2,13
 100c950:	88800005 	stb	r2,0(r17)
 100c954:	00003406 	br	100ca28 <OSMboxPend+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c958:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c95c:	053fff84 	movi	r20,-2
 100c960:	9d04703a 	and	r2,r19,r20
 100c964:	1001703a 	wrctl	status,r2
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pmsg = pevent->OSEventPtr;
 100c968:	25400117 	ldw	r21,4(r4)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 100c96c:	a8000426 	beq	r21,zero,100c980 <OSMboxPend+0xa4>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 100c970:	20000115 	stw	zero,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c974:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 100c978:	30000005 	stb	zero,0(r6)
 100c97c:	00002a06 	br	100ca28 <OSMboxPend+0x14c>
        return (pmsg);                                /* Return the message received (or NULL)         */
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 100c980:	04002034 	movhi	r16,128
 100c984:	84025a04 	addi	r16,r16,2408
 100c988:	80c00017 	ldw	r3,0(r16)
 100c98c:	18800c03 	ldbu	r2,48(r3)
 100c990:	10800094 	ori	r2,r2,2
 100c994:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100c998:	80800017 	ldw	r2,0(r16)
 100c99c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 100c9a0:	80800017 	ldw	r2,0(r16)
 100c9a4:	11400b8d 	sth	r5,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 100c9a8:	100ad400 	call	100ad40 <OS_EventTaskWait>
 100c9ac:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 100c9b0:	100b0a80 	call	100b0a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c9b4:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c9b8:	9d04703a 	and	r2,r19,r20
 100c9bc:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 100c9c0:	81000017 	ldw	r4,0(r16)
 100c9c4:	20c00c43 	ldbu	r3,49(r4)
 100c9c8:	18000326 	beq	r3,zero,100c9d8 <OSMboxPend+0xfc>
 100c9cc:	00800084 	movi	r2,2
 100c9d0:	1880061e 	bne	r3,r2,100c9ec <OSMboxPend+0x110>
 100c9d4:	00000306 	br	100c9e4 <OSMboxPend+0x108>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 100c9d8:	25400917 	ldw	r21,36(r4)
            *perr =  OS_ERR_NONE;
 100c9dc:	88000005 	stb	zero,0(r17)
 100c9e0:	00000606 	br	100c9fc <OSMboxPend+0x120>
             break;

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 100c9e4:	00800384 	movi	r2,14
 100c9e8:	00000306 	br	100c9f8 <OSMboxPend+0x11c>
             break;

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 100c9ec:	900b883a 	mov	r5,r18
 100c9f0:	100ae640 	call	100ae64 <OS_EventTaskRemove>
             pmsg = (void *)0;
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 100c9f4:	00800284 	movi	r2,10
 100c9f8:	88800005 	stb	r2,0(r17)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 100c9fc:	00c02034 	movhi	r3,128
 100ca00:	18c25a04 	addi	r3,r3,2408
 100ca04:	18800017 	ldw	r2,0(r3)
 100ca08:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 100ca0c:	18800017 	ldw	r2,0(r3)
 100ca10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 100ca14:	18800017 	ldw	r2,0(r3)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 100ca18:	10000915 	stw	zero,36(r2)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 100ca1c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100ca20:	10000815 	stw	zero,32(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ca24:	9801703a 	wrctl	status,r19
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
}
 100ca28:	a805883a 	mov	r2,r21
 100ca2c:	dfc00617 	ldw	ra,24(sp)
 100ca30:	dd400517 	ldw	r21,20(sp)
 100ca34:	dd000417 	ldw	r20,16(sp)
 100ca38:	dcc00317 	ldw	r19,12(sp)
 100ca3c:	dc800217 	ldw	r18,8(sp)
 100ca40:	dc400117 	ldw	r17,4(sp)
 100ca44:	dc000017 	ldw	r16,0(sp)
 100ca48:	dec00704 	addi	sp,sp,28
 100ca4c:	f800283a 	ret

0100ca50 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 100ca50:	defffb04 	addi	sp,sp,-20
 100ca54:	dc800215 	stw	r18,8(sp)
 100ca58:	dc400115 	stw	r17,4(sp)
 100ca5c:	dfc00415 	stw	ra,16(sp)
 100ca60:	dcc00315 	stw	r19,12(sp)
 100ca64:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 100ca68:	24000003 	ldbu	r16,0(r4)
 100ca6c:	00800044 	movi	r2,1
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 100ca70:	2023883a 	mov	r17,r4
 100ca74:	3025883a 	mov	r18,r6
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 100ca78:	80800226 	beq	r16,r2,100ca84 <OSMboxPendAbort+0x34>
        *perr = OS_ERR_EVENT_TYPE;
 100ca7c:	0007883a 	mov	r3,zero
 100ca80:	00001a06 	br	100caec <OSMboxPendAbort+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ca84:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ca88:	00bfff84 	movi	r2,-2
 100ca8c:	9884703a 	and	r2,r19,r2
 100ca90:	1001703a 	wrctl	status,r2
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 100ca94:	20800283 	ldbu	r2,10(r4)
 100ca98:	10001626 	beq	r2,zero,100caf4 <OSMboxPendAbort+0xa4>
        nbr_tasks = 0;
        switch (opt) {
 100ca9c:	28803fcc 	andi	r2,r5,255
 100caa0:	14000a1e 	bne	r2,r16,100cacc <OSMboxPendAbort+0x7c>
 100caa4:	0021883a 	mov	r16,zero
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 100caa8:	01800084 	movi	r6,2
 100caac:	8809883a 	mov	r4,r17
 100cab0:	000b883a 	mov	r5,zero
 100cab4:	300f883a 	mov	r7,r6
 100cab8:	100af0c0 	call	100af0c <OS_EventTaskRdy>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 100cabc:	88800283 	ldbu	r2,10(r17)
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
 100cac0:	84000044 	addi	r16,r16,1
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 100cac4:	10000526 	beq	r2,zero,100cadc <OSMboxPendAbort+0x8c>
 100cac8:	003ff706 	br	100caa8 <OSMboxPendAbort+0x58>
                 }
                 break;
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 100cacc:	01800084 	movi	r6,2
 100cad0:	000b883a 	mov	r5,zero
 100cad4:	300f883a 	mov	r7,r6
 100cad8:	100af0c0 	call	100af0c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cadc:	9801703a 	wrctl	status,r19
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 100cae0:	100b0a80 	call	100b0a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
        return (nbr_tasks);
 100cae4:	80c03fcc 	andi	r3,r16,255
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
        *perr = OS_ERR_PEND_ABORT;
 100cae8:	00800384 	movi	r2,14
 100caec:	90800005 	stb	r2,0(r18)
 100caf0:	00000306 	br	100cb00 <OSMboxPendAbort+0xb0>
 100caf4:	9801703a 	wrctl	status,r19
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100caf8:	30000005 	stb	zero,0(r6)
 100cafc:	0007883a 	mov	r3,zero
    return (0);                                            /* No tasks waiting on mailbox              */
}
 100cb00:	1805883a 	mov	r2,r3
 100cb04:	dfc00417 	ldw	ra,16(sp)
 100cb08:	dcc00317 	ldw	r19,12(sp)
 100cb0c:	dc800217 	ldw	r18,8(sp)
 100cb10:	dc400117 	ldw	r17,4(sp)
 100cb14:	dc000017 	ldw	r16,0(sp)
 100cb18:	dec00504 	addi	sp,sp,20
 100cb1c:	f800283a 	ret

0100cb20 <OSMboxPost>:
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 100cb20:	20c00003 	ldbu	r3,0(r4)
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 100cb24:	defffe04 	addi	sp,sp,-8
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 100cb28:	00800044 	movi	r2,1
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 100cb2c:	dfc00115 	stw	ra,4(sp)
 100cb30:	dc000015 	stw	r16,0(sp)
 100cb34:	2011883a 	mov	r8,r4
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 100cb38:	100d883a 	mov	r6,r2
 100cb3c:	1880141e 	bne	r3,r2,100cb90 <OSMboxPost+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cb40:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cb44:	00bfff84 	movi	r2,-2
 100cb48:	8084703a 	and	r2,r16,r2
 100cb4c:	1001703a 	wrctl	status,r2
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 100cb50:	20800283 	ldbu	r2,10(r4)
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 100cb54:	01800084 	movi	r6,2
 100cb58:	000f883a 	mov	r7,zero
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 100cb5c:	10000426 	beq	r2,zero,100cb70 <OSMboxPost+0x50>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 100cb60:	100af0c0 	call	100af0c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cb64:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 100cb68:	100b0a80 	call	100b0a8 <OS_Sched>
 100cb6c:	00000706 	br	100cb8c <OSMboxPost+0x6c>
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 100cb70:	20800117 	ldw	r2,4(r4)
 100cb74:	10000326 	beq	r2,zero,100cb84 <OSMboxPost+0x64>
 100cb78:	8001703a 	wrctl	status,r16
 100cb7c:	01800504 	movi	r6,20
 100cb80:	00000306 	br	100cb90 <OSMboxPost+0x70>
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 100cb84:	41400115 	stw	r5,4(r8)
 100cb88:	8001703a 	wrctl	status,r16
 100cb8c:	000d883a 	mov	r6,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 100cb90:	3005883a 	mov	r2,r6
 100cb94:	dfc00117 	ldw	ra,4(sp)
 100cb98:	dc000017 	ldw	r16,0(sp)
 100cb9c:	dec00204 	addi	sp,sp,8
 100cba0:	f800283a 	ret

0100cba4 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 100cba4:	defffe04 	addi	sp,sp,-8
 100cba8:	dfc00115 	stw	ra,4(sp)
 100cbac:	dc000015 	stw	r16,0(sp)
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 100cbb0:	20c00003 	ldbu	r3,0(r4)
 100cbb4:	008000c4 	movi	r2,3
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 100cbb8:	2011883a 	mov	r8,r4
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 100cbbc:	01400044 	movi	r5,1
 100cbc0:	1880181e 	bne	r3,r2,100cc24 <OSSemPost+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cbc4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cbc8:	00bfff84 	movi	r2,-2
 100cbcc:	8084703a 	and	r2,r16,r2
 100cbd0:	1001703a 	wrctl	status,r2
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 100cbd4:	20800283 	ldbu	r2,10(r4)
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 100cbd8:	000b883a 	mov	r5,zero
 100cbdc:	01800044 	movi	r6,1
 100cbe0:	000f883a 	mov	r7,zero
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 100cbe4:	10000426 	beq	r2,zero,100cbf8 <OSSemPost+0x54>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 100cbe8:	100af0c0 	call	100af0c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cbec:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 100cbf0:	100b0a80 	call	100b0a8 <OS_Sched>
 100cbf4:	00000706 	br	100cc14 <OSSemPost+0x70>
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 100cbf8:	2080020b 	ldhu	r2,8(r4)
 100cbfc:	00ffffd4 	movui	r3,65535
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 100cc00:	11000044 	addi	r4,r2,1
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 100cc04:	10bfffcc 	andi	r2,r2,65535
 100cc08:	10c00426 	beq	r2,r3,100cc1c <OSSemPost+0x78>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 100cc0c:	4100020d 	sth	r4,8(r8)
 100cc10:	8001703a 	wrctl	status,r16
 100cc14:	000b883a 	mov	r5,zero
 100cc18:	00000206 	br	100cc24 <OSSemPost+0x80>
 100cc1c:	8001703a 	wrctl	status,r16
 100cc20:	01400c84 	movi	r5,50
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
 100cc24:	2805883a 	mov	r2,r5
 100cc28:	dfc00117 	ldw	ra,4(sp)
 100cc2c:	dc000017 	ldw	r16,0(sp)
 100cc30:	dec00204 	addi	sp,sp,8
 100cc34:	f800283a 	ret

0100cc38 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 100cc38:	defffe04 	addi	sp,sp,-8
 100cc3c:	dc000015 	stw	r16,0(sp)
 100cc40:	dfc00115 	stw	ra,4(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 100cc44:	00802034 	movhi	r2,128
 100cc48:	10825904 	addi	r2,r2,2404
 100cc4c:	10800003 	ldbu	r2,0(r2)
 100cc50:	0021883a 	mov	r16,zero
 100cc54:	1000161e 	bne	r2,zero,100ccb0 <OSSemCreate+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cc58:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cc5c:	00bfff84 	movi	r2,-2
 100cc60:	1884703a 	and	r2,r3,r2
 100cc64:	1001703a 	wrctl	status,r2
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 100cc68:	01402034 	movhi	r5,128
 100cc6c:	29425804 	addi	r5,r5,2400
 100cc70:	2c000017 	ldw	r16,0(r5)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 100cc74:	80000d26 	beq	r16,zero,100ccac <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 100cc78:	80800117 	ldw	r2,4(r16)
 100cc7c:	28800015 	stw	r2,0(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cc80:	1801703a 	wrctl	status,r3
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 100cc84:	008000c4 	movi	r2,3
 100cc88:	80800005 	stb	r2,0(r16)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 100cc8c:	00800fc4 	movi	r2,63
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 100cc90:	8100020d 	sth	r4,8(r16)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 100cc94:	80800385 	stb	r2,14(r16)
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 100cc98:	80000115 	stw	zero,4(r16)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
        pevent->OSEventName[1] = OS_ASCII_NUL;
 100cc9c:	800003c5 	stb	zero,15(r16)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 100cca0:	8009883a 	mov	r4,r16
 100cca4:	100b0000 	call	100b000 <OS_EventWaitListInit>
 100cca8:	00000106 	br	100ccb0 <OSSemCreate+0x78>
 100ccac:	1801703a 	wrctl	status,r3
    }
    return (pevent);
}
 100ccb0:	8005883a 	mov	r2,r16
 100ccb4:	dfc00117 	ldw	ra,4(sp)
 100ccb8:	dc000017 	ldw	r16,0(sp)
 100ccbc:	dec00204 	addi	sp,sp,8
 100ccc0:	f800283a 	ret

0100ccc4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 100ccc4:	defffa04 	addi	sp,sp,-24
 100ccc8:	dc800215 	stw	r18,8(sp)
 100cccc:	dc400115 	stw	r17,4(sp)
 100ccd0:	dfc00515 	stw	ra,20(sp)
 100ccd4:	dd000415 	stw	r20,16(sp)
 100ccd8:	dcc00315 	stw	r19,12(sp)
 100ccdc:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 100cce0:	20c00003 	ldbu	r3,0(r4)
 100cce4:	008000c4 	movi	r2,3
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 100cce8:	2025883a 	mov	r18,r4
 100ccec:	3023883a 	mov	r17,r6
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 100ccf0:	18800226 	beq	r3,r2,100ccfc <OSSemPend+0x38>
        *perr = OS_ERR_EVENT_TYPE;
 100ccf4:	00800044 	movi	r2,1
 100ccf8:	00000506 	br	100cd10 <OSSemPend+0x4c>
        return;
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 100ccfc:	00802034 	movhi	r2,128
 100cd00:	10825904 	addi	r2,r2,2404
 100cd04:	10800003 	ldbu	r2,0(r2)
 100cd08:	10000326 	beq	r2,zero,100cd18 <OSSemPend+0x54>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 100cd0c:	00800084 	movi	r2,2
 100cd10:	88800005 	stb	r2,0(r17)
 100cd14:	00003906 	br	100cdfc <OSSemPend+0x138>
        return;
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 100cd18:	00802034 	movhi	r2,128
 100cd1c:	10824a04 	addi	r2,r2,2344
 100cd20:	10800003 	ldbu	r2,0(r2)
 100cd24:	10000226 	beq	r2,zero,100cd30 <OSSemPend+0x6c>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 100cd28:	00800344 	movi	r2,13
 100cd2c:	003ff806 	br	100cd10 <OSSemPend+0x4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cd30:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cd34:	053fff84 	movi	r20,-2
 100cd38:	9d04703a 	and	r2,r19,r20
 100cd3c:	1001703a 	wrctl	status,r2
        return;
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 100cd40:	2080020b 	ldhu	r2,8(r4)
 100cd44:	10000526 	beq	r2,zero,100cd5c <OSSemPend+0x98>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 100cd48:	10bfffc4 	addi	r2,r2,-1
 100cd4c:	2080020d 	sth	r2,8(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cd50:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 100cd54:	30000005 	stb	zero,0(r6)
 100cd58:	00002806 	br	100cdfc <OSSemPend+0x138>
        return;
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 100cd5c:	04002034 	movhi	r16,128
 100cd60:	84025a04 	addi	r16,r16,2408
 100cd64:	80c00017 	ldw	r3,0(r16)
 100cd68:	18800c03 	ldbu	r2,48(r3)
 100cd6c:	10800054 	ori	r2,r2,1
 100cd70:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 100cd74:	80800017 	ldw	r2,0(r16)
 100cd78:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 100cd7c:	80800017 	ldw	r2,0(r16)
 100cd80:	11400b8d 	sth	r5,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 100cd84:	100ad400 	call	100ad40 <OS_EventTaskWait>
 100cd88:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 100cd8c:	100b0a80 	call	100b0a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cd90:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cd94:	9d04703a 	and	r2,r19,r20
 100cd98:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 100cd9c:	81000017 	ldw	r4,0(r16)
 100cda0:	20c00c43 	ldbu	r3,49(r4)
 100cda4:	18000326 	beq	r3,zero,100cdb4 <OSSemPend+0xf0>
 100cda8:	00800084 	movi	r2,2
 100cdac:	1880051e 	bne	r3,r2,100cdc4 <OSSemPend+0x100>
 100cdb0:	00000206 	br	100cdbc <OSSemPend+0xf8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 100cdb4:	88000005 	stb	zero,0(r17)
 100cdb8:	00000606 	br	100cdd4 <OSSemPend+0x110>
             break;

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 100cdbc:	00800384 	movi	r2,14
 100cdc0:	00000306 	br	100cdd0 <OSSemPend+0x10c>
             break;

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 100cdc4:	900b883a 	mov	r5,r18
 100cdc8:	100ae640 	call	100ae64 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 100cdcc:	00800284 	movi	r2,10
 100cdd0:	88800005 	stb	r2,0(r17)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 100cdd4:	00c02034 	movhi	r3,128
 100cdd8:	18c25a04 	addi	r3,r3,2408
 100cddc:	18800017 	ldw	r2,0(r3)
 100cde0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 100cde4:	18800017 	ldw	r2,0(r3)
 100cde8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 100cdec:	18800017 	ldw	r2,0(r3)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 100cdf0:	10000815 	stw	zero,32(r2)
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 100cdf4:	10000715 	stw	zero,28(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cdf8:	9801703a 	wrctl	status,r19
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 100cdfc:	dfc00517 	ldw	ra,20(sp)
 100ce00:	dd000417 	ldw	r20,16(sp)
 100ce04:	dcc00317 	ldw	r19,12(sp)
 100ce08:	dc800217 	ldw	r18,8(sp)
 100ce0c:	dc400117 	ldw	r17,4(sp)
 100ce10:	dc000017 	ldw	r16,0(sp)
 100ce14:	dec00604 	addi	sp,sp,24
 100ce18:	f800283a 	ret

0100ce1c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 100ce1c:	defffb04 	addi	sp,sp,-20
 100ce20:	dc800215 	stw	r18,8(sp)
 100ce24:	dc400115 	stw	r17,4(sp)
 100ce28:	dfc00415 	stw	ra,16(sp)
 100ce2c:	dcc00315 	stw	r19,12(sp)
 100ce30:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 100ce34:	20c00003 	ldbu	r3,0(r4)
 100ce38:	008000c4 	movi	r2,3
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 100ce3c:	2023883a 	mov	r17,r4
 100ce40:	3025883a 	mov	r18,r6
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 100ce44:	18800326 	beq	r3,r2,100ce54 <OSSemPendAbort+0x38>
        *perr = OS_ERR_EVENT_TYPE;
 100ce48:	0007883a 	mov	r3,zero
 100ce4c:	00800044 	movi	r2,1
 100ce50:	00001b06 	br	100cec0 <OSSemPendAbort+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100ce54:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100ce58:	00bfff84 	movi	r2,-2
 100ce5c:	9884703a 	and	r2,r19,r2
 100ce60:	1001703a 	wrctl	status,r2
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 100ce64:	20800283 	ldbu	r2,10(r4)
 100ce68:	10001726 	beq	r2,zero,100cec8 <OSSemPendAbort+0xac>
        nbr_tasks = 0;
        switch (opt) {
 100ce6c:	28803fcc 	andi	r2,r5,255
 100ce70:	04000044 	movi	r16,1
 100ce74:	14000a1e 	bne	r2,r16,100cea0 <OSSemPendAbort+0x84>
 100ce78:	0021883a 	mov	r16,zero
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 100ce7c:	8809883a 	mov	r4,r17
 100ce80:	000b883a 	mov	r5,zero
 100ce84:	01800044 	movi	r6,1
 100ce88:	01c00084 	movi	r7,2
 100ce8c:	100af0c0 	call	100af0c <OS_EventTaskRdy>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 100ce90:	88800283 	ldbu	r2,10(r17)
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
 100ce94:	84000044 	addi	r16,r16,1
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 100ce98:	10000526 	beq	r2,zero,100ceb0 <OSSemPendAbort+0x94>
 100ce9c:	003ff706 	br	100ce7c <OSSemPendAbort+0x60>
                 }
                 break;
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 100cea0:	000b883a 	mov	r5,zero
 100cea4:	800d883a 	mov	r6,r16
 100cea8:	01c00084 	movi	r7,2
 100ceac:	100af0c0 	call	100af0c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ceb0:	9801703a 	wrctl	status,r19
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 100ceb4:	100b0a80 	call	100b0a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
        return (nbr_tasks);
 100ceb8:	80c03fcc 	andi	r3,r16,255
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
        *perr = OS_ERR_PEND_ABORT;
 100cebc:	00800384 	movi	r2,14
 100cec0:	90800005 	stb	r2,0(r18)
 100cec4:	00000306 	br	100ced4 <OSSemPendAbort+0xb8>
 100cec8:	9801703a 	wrctl	status,r19
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100cecc:	30000005 	stb	zero,0(r6)
 100ced0:	0007883a 	mov	r3,zero
    return (0);                                       /* No tasks waiting on semaphore                 */
}
 100ced4:	1805883a 	mov	r2,r3
 100ced8:	dfc00417 	ldw	ra,16(sp)
 100cedc:	dcc00317 	ldw	r19,12(sp)
 100cee0:	dc800217 	ldw	r18,8(sp)
 100cee4:	dc400117 	ldw	r17,4(sp)
 100cee8:	dc000017 	ldw	r16,0(sp)
 100ceec:	dec00504 	addi	sp,sp,20
 100cef0:	f800283a 	ret

0100cef4 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 100cef4:	deffff04 	addi	sp,sp,-4
 100cef8:	dfc00015 	stw	ra,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100cefc:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100cf00:	00bfff84 	movi	r2,-2
 100cf04:	3084703a 	and	r2,r6,r2
 100cf08:	1001703a 	wrctl	status,r2
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 100cf0c:	20c03fcc 	andi	r3,r4,255
 100cf10:	00803fc4 	movi	r2,255
 100cf14:	01402034 	movhi	r5,128
 100cf18:	29425a04 	addi	r5,r5,2408
 100cf1c:	1880041e 	bne	r3,r2,100cf30 <OSTaskSuspend+0x3c>
        prio = OSTCBCur->OSTCBPrio;
 100cf20:	28800017 	ldw	r2,0(r5)
 100cf24:	02000044 	movi	r8,1
 100cf28:	11000c83 	ldbu	r4,50(r2)
 100cf2c:	00000406 	br	100cf40 <OSTaskSuspend+0x4c>
        self = OS_TRUE;
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 100cf30:	28800017 	ldw	r2,0(r5)
 100cf34:	10800c83 	ldbu	r2,50(r2)
 100cf38:	1885003a 	cmpeq	r2,r3,r2
 100cf3c:	1011883a 	mov	r8,r2
        self = OS_TRUE;
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    }
    ptcb = OSTCBPrioTbl[prio];
 100cf40:	20803fcc 	andi	r2,r4,255
 100cf44:	1085883a 	add	r2,r2,r2
 100cf48:	1085883a 	add	r2,r2,r2
 100cf4c:	00c02074 	movhi	r3,129
 100cf50:	18c5f204 	addi	r3,r3,6088
 100cf54:	10c5883a 	add	r2,r2,r3
 100cf58:	11400017 	ldw	r5,0(r2)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 100cf5c:	2800031e 	bne	r5,zero,100cf6c <OSTaskSuspend+0x78>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100cf60:	3001703a 	wrctl	status,r6
 100cf64:	00801204 	movi	r2,72
 100cf68:	00002106 	br	100cff0 <OSTaskSuspend+0xfc>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 100cf6c:	01c00044 	movi	r7,1
 100cf70:	29c0031e 	bne	r5,r7,100cf80 <OSTaskSuspend+0x8c>
 100cf74:	3001703a 	wrctl	status,r6
 100cf78:	008010c4 	movi	r2,67
 100cf7c:	00001c06 	br	100cff0 <OSTaskSuspend+0xfc>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 100cf80:	29000d03 	ldbu	r4,52(r5)
 100cf84:	00c02034 	movhi	r3,128
 100cf88:	18c25744 	addi	r3,r3,2397
 100cf8c:	28800d43 	ldbu	r2,53(r5)
 100cf90:	20c9883a 	add	r4,r4,r3
 100cf94:	20c00003 	ldbu	r3,0(r4)
 100cf98:	0084303a 	nor	r2,zero,r2
 100cf9c:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0) {
 100cfa0:	10c03fcc 	andi	r3,r2,255
 100cfa4:	18c0201c 	xori	r3,r3,128
 100cfa8:	18ffe004 	addi	r3,r3,-128
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 100cfac:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
 100cfb0:	1800071e 	bne	r3,zero,100cfd0 <OSTaskSuspend+0xdc>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 100cfb4:	00802034 	movhi	r2,128
 100cfb8:	10825704 	addi	r2,r2,2396
 100cfbc:	28c00d83 	ldbu	r3,54(r5)
 100cfc0:	11000003 	ldbu	r4,0(r2)
 100cfc4:	00c6303a 	nor	r3,zero,r3
 100cfc8:	1906703a 	and	r3,r3,r4
 100cfcc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 100cfd0:	28800c03 	ldbu	r2,48(r5)
 100cfd4:	10800214 	ori	r2,r2,8
 100cfd8:	28800c05 	stb	r2,48(r5)
 100cfdc:	3001703a 	wrctl	status,r6
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 100cfe0:	40803fcc 	andi	r2,r8,255
 100cfe4:	11c0011e 	bne	r2,r7,100cfec <OSTaskSuspend+0xf8>
        OS_Sched();                                             /* Find new highest priority task      */
 100cfe8:	100b0a80 	call	100b0a8 <OS_Sched>
 100cfec:	0005883a 	mov	r2,zero
    }
    return (OS_ERR_NONE);
}
 100cff0:	dfc00017 	ldw	ra,0(sp)
 100cff4:	dec00104 	addi	sp,sp,4
 100cff8:	f800283a 	ret

0100cffc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 100cffc:	defff604 	addi	sp,sp,-40
 100d000:	dcc00615 	stw	r19,24(sp)
 100d004:	dc000315 	stw	r16,12(sp)
 100d008:	dcc00a0b 	ldhu	r19,40(sp)
 100d00c:	dc000e0b 	ldhu	r16,56(sp)
 100d010:	dfc00915 	stw	ra,36(sp)
 100d014:	dd400815 	stw	r21,32(sp)
 100d018:	dd000715 	stw	r20,28(sp)
 100d01c:	dc800515 	stw	r18,20(sp)
 100d020:	dc400415 	stw	r17,16(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d024:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d028:	057fff84 	movi	r21,-2
 100d02c:	4544703a 	and	r2,r8,r21
 100d030:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 100d034:	3c403fcc 	andi	r17,r7,255
 100d038:	8c45883a 	add	r2,r17,r17
 100d03c:	1085883a 	add	r2,r2,r2
 100d040:	00c02074 	movhi	r3,129
 100d044:	18c5f204 	addi	r3,r3,6088
 100d048:	10e5883a 	add	r18,r2,r3
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 100d04c:	00802034 	movhi	r2,128
 100d050:	10825904 	addi	r2,r2,2404
 100d054:	10800003 	ldbu	r2,0(r2)
 100d058:	10000326 	beq	r2,zero,100d068 <OSTaskCreateExt+0x6c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d05c:	4001703a 	wrctl	status,r8
 100d060:	00800f04 	movi	r2,60
 100d064:	00002406 	br	100d0f8 <OSTaskCreateExt+0xfc>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 100d068:	90800017 	ldw	r2,0(r18)
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 100d06c:	05000044 	movi	r20,1
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 100d070:	10001f1e 	bne	r2,zero,100d0f0 <OSTaskCreateExt+0xf4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 100d074:	95000015 	stw	r20,0(r18)
 100d078:	4001703a 	wrctl	status,r8

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 100d07c:	843fffcc 	andi	r16,r16,65535
 100d080:	800f883a 	mov	r7,r16
 100d084:	100ea240 	call	100ea24 <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 100d088:	100b883a 	mov	r5,r2
 100d08c:	d8800c17 	ldw	r2,48(sp)
 100d090:	d9800b17 	ldw	r6,44(sp)
 100d094:	8809883a 	mov	r4,r17
 100d098:	d8800015 	stw	r2,0(sp)
 100d09c:	d8800d17 	ldw	r2,52(sp)
 100d0a0:	99ffffcc 	andi	r7,r19,65535
 100d0a4:	dc000215 	stw	r16,8(sp)
 100d0a8:	d8800115 	stw	r2,4(sp)
 100d0ac:	100b91c0 	call	100b91c <OS_TCBInit>
 100d0b0:	1021883a 	mov	r16,r2
        if (err == OS_ERR_NONE) {
 100d0b4:	10803fcc 	andi	r2,r2,255
 100d0b8:	1000061e 	bne	r2,zero,100d0d4 <OSTaskCreateExt+0xd8>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 100d0bc:	00802034 	movhi	r2,128
 100d0c0:	10824c04 	addi	r2,r2,2352
 100d0c4:	10800003 	ldbu	r2,0(r2)
 100d0c8:	1500071e 	bne	r2,r20,100d0e8 <OSTaskCreateExt+0xec>
                OS_Sched();
 100d0cc:	100b0a80 	call	100b0a8 <OS_Sched>
 100d0d0:	00000506 	br	100d0e8 <OSTaskCreateExt+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d0d4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d0d8:	1d44703a 	and	r2,r3,r21
 100d0dc:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 100d0e0:	90000015 	stw	zero,0(r18)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d0e4:	1801703a 	wrctl	status,r3
            OS_EXIT_CRITICAL();
        }
        return (err);
 100d0e8:	80803fcc 	andi	r2,r16,255
 100d0ec:	00000206 	br	100d0f8 <OSTaskCreateExt+0xfc>
 100d0f0:	4001703a 	wrctl	status,r8
 100d0f4:	00800a04 	movi	r2,40
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
}
 100d0f8:	dfc00917 	ldw	ra,36(sp)
 100d0fc:	dd400817 	ldw	r21,32(sp)
 100d100:	dd000717 	ldw	r20,28(sp)
 100d104:	dcc00617 	ldw	r19,24(sp)
 100d108:	dc800517 	ldw	r18,20(sp)
 100d10c:	dc400417 	ldw	r17,16(sp)
 100d110:	dc000317 	ldw	r16,12(sp)
 100d114:	dec00a04 	addi	sp,sp,40
 100d118:	f800283a 	ret

0100d11c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 100d11c:	defff904 	addi	sp,sp,-28
 100d120:	dfc00615 	stw	ra,24(sp)
 100d124:	dd400515 	stw	r21,20(sp)
 100d128:	dd000415 	stw	r20,16(sp)
 100d12c:	dcc00315 	stw	r19,12(sp)
 100d130:	dc800215 	stw	r18,8(sp)
 100d134:	dc400115 	stw	r17,4(sp)
 100d138:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR     cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 100d13c:	00802034 	movhi	r2,128
 100d140:	10825904 	addi	r2,r2,2404
 100d144:	10800003 	ldbu	r2,0(r2)
 100d148:	10000226 	beq	r2,zero,100d154 <OSTaskDel+0x38>
 100d14c:	00801004 	movi	r2,64
 100d150:	00007406 	br	100d324 <OSTaskDel+0x208>
        return (OS_ERR_TASK_DEL_ISR);
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 100d154:	20c03fcc 	andi	r3,r4,255
 100d158:	00800504 	movi	r2,20
 100d15c:	1880021e 	bne	r3,r2,100d168 <OSTaskDel+0x4c>
 100d160:	00800f84 	movi	r2,62
 100d164:	00006f06 	br	100d324 <OSTaskDel+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d168:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d16c:	057fff84 	movi	r21,-2
 100d170:	9544703a 	and	r2,r18,r21
 100d174:	1001703a 	wrctl	status,r2
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 100d178:	05003fc4 	movi	r20,255
 100d17c:	1d00041e 	bne	r3,r20,100d190 <OSTaskDel+0x74>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 100d180:	00802034 	movhi	r2,128
 100d184:	10825a04 	addi	r2,r2,2408
 100d188:	10800017 	ldw	r2,0(r2)
 100d18c:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
 100d190:	20803fcc 	andi	r2,r4,255
 100d194:	1085883a 	add	r2,r2,r2
 100d198:	1085883a 	add	r2,r2,r2
 100d19c:	00c02074 	movhi	r3,129
 100d1a0:	18c5f204 	addi	r3,r3,6088
 100d1a4:	10e7883a 	add	r19,r2,r3
 100d1a8:	9c000017 	ldw	r16,0(r19)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 100d1ac:	8000031e 	bne	r16,zero,100d1bc <OSTaskDel+0xa0>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d1b0:	9001703a 	wrctl	status,r18
 100d1b4:	008010c4 	movi	r2,67
 100d1b8:	00005a06 	br	100d324 <OSTaskDel+0x208>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 100d1bc:	00800044 	movi	r2,1
 100d1c0:	8080031e 	bne	r16,r2,100d1d0 <OSTaskDel+0xb4>
 100d1c4:	9001703a 	wrctl	status,r18
 100d1c8:	00800f44 	movi	r2,61
 100d1cc:	00005506 	br	100d324 <OSTaskDel+0x208>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 100d1d0:	80c00d03 	ldbu	r3,52(r16)
 100d1d4:	01402034 	movhi	r5,128
 100d1d8:	29425744 	addi	r5,r5,2397
 100d1dc:	80800d43 	ldbu	r2,53(r16)
 100d1e0:	1947883a 	add	r3,r3,r5
 100d1e4:	19000003 	ldbu	r4,0(r3)
 100d1e8:	0084303a 	nor	r2,zero,r2
 100d1ec:	1104703a 	and	r2,r2,r4
 100d1f0:	18800005 	stb	r2,0(r3)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 100d1f4:	80800d03 	ldbu	r2,52(r16)
 100d1f8:	1145883a 	add	r2,r2,r5
 100d1fc:	10800003 	ldbu	r2,0(r2)
 100d200:	1000071e 	bne	r2,zero,100d220 <OSTaskDel+0x104>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 100d204:	00802034 	movhi	r2,128
 100d208:	10825704 	addi	r2,r2,2396
 100d20c:	80c00d83 	ldbu	r3,54(r16)
 100d210:	11000003 	ldbu	r4,0(r2)
 100d214:	00c6303a 	nor	r3,zero,r3
 100d218:	1906703a 	and	r3,r3,r4
 100d21c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 100d220:	81400717 	ldw	r5,28(r16)
 100d224:	28000226 	beq	r5,zero,100d230 <OSTaskDel+0x114>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 100d228:	8009883a 	mov	r4,r16
 100d22c:	100ae640 	call	100ae64 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 100d230:	81400817 	ldw	r5,32(r16)
 100d234:	28000226 	beq	r5,zero,100d240 <OSTaskDel+0x124>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 100d238:	8009883a 	mov	r4,r16
 100d23c:	100aeb00 	call	100aeb0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 100d240:	81000a17 	ldw	r4,40(r16)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 100d244:	20000126 	beq	r4,zero,100d24c <OSTaskDel+0x130>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 100d248:	100bcb00 	call	100bcb0 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 100d24c:	80000c05 	stb	zero,48(r16)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 100d250:	80000c45 	stb	zero,49(r16)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 100d254:	04402034 	movhi	r17,128
 100d258:	8c424a04 	addi	r17,r17,2344
 100d25c:	88c00003 	ldbu	r3,0(r17)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 100d260:	80000b8d 	sth	zero,46(r16)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 100d264:	18803fcc 	andi	r2,r3,255
 100d268:	15000226 	beq	r2,r20,100d274 <OSTaskDel+0x158>
        OSLockNesting++;
 100d26c:	18800044 	addi	r2,r3,1
 100d270:	88800005 	stb	r2,0(r17)
 100d274:	9001703a 	wrctl	status,r18
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 100d278:	100ad3c0 	call	100ad3c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d27c:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d280:	9544703a 	and	r2,r18,r21
 100d284:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 100d288:	88800003 	ldbu	r2,0(r17)
 100d28c:	10000226 	beq	r2,zero,100d298 <OSTaskDel+0x17c>
        OSLockNesting--;
 100d290:	10bfffc4 	addi	r2,r2,-1
 100d294:	88800005 	stb	r2,0(r17)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 100d298:	8009883a 	mov	r4,r16
 100d29c:	100ea4c0 	call	100ea4c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 100d2a0:	00c02034 	movhi	r3,128
 100d2a4:	18c25544 	addi	r3,r3,2389
 100d2a8:	18800003 	ldbu	r2,0(r3)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 100d2ac:	98000015 	stw	zero,0(r19)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
        OSLockNesting--;
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    OSTaskCtr--;                                        /* One less task being managed                 */
 100d2b0:	10bfffc4 	addi	r2,r2,-1
 100d2b4:	18800005 	stb	r2,0(r3)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 100d2b8:	80c00617 	ldw	r3,24(r16)
 100d2bc:	81000517 	ldw	r4,20(r16)
 100d2c0:	1800051e 	bne	r3,zero,100d2d8 <OSTaskDel+0x1bc>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 100d2c4:	20000615 	stw	zero,24(r4)
        OSTCBList                  = ptcb->OSTCBNext;
 100d2c8:	00802034 	movhi	r2,128
 100d2cc:	10824f04 	addi	r2,r2,2364
 100d2d0:	11000015 	stw	r4,0(r2)
 100d2d4:	00000306 	br	100d2e4 <OSTaskDel+0x1c8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 100d2d8:	19000515 	stw	r4,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 100d2dc:	80800517 	ldw	r2,20(r16)
 100d2e0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 100d2e4:	00c02034 	movhi	r3,128
 100d2e8:	18c25404 	addi	r3,r3,2384
 100d2ec:	18800017 	ldw	r2,0(r3)
 100d2f0:	80800515 	stw	r2,20(r16)
    OSTCBFreeList     = ptcb;
 100d2f4:	1c000015 	stw	r16,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 100d2f8:	00800fc4 	movi	r2,63
 100d2fc:	80800e05 	stb	r2,56(r16)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 100d300:	80000e45 	stb	zero,57(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d304:	9001703a 	wrctl	status,r18
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 100d308:	00802034 	movhi	r2,128
 100d30c:	10824c04 	addi	r2,r2,2352
 100d310:	10c00003 	ldbu	r3,0(r2)
 100d314:	00800044 	movi	r2,1
 100d318:	1880011e 	bne	r3,r2,100d320 <OSTaskDel+0x204>
        OS_Sched();                                     /* Find new highest priority task              */
 100d31c:	100b0a80 	call	100b0a8 <OS_Sched>
 100d320:	0005883a 	mov	r2,zero
    }
    return (OS_ERR_NONE);
}
 100d324:	dfc00617 	ldw	ra,24(sp)
 100d328:	dd400517 	ldw	r21,20(sp)
 100d32c:	dd000417 	ldw	r20,16(sp)
 100d330:	dcc00317 	ldw	r19,12(sp)
 100d334:	dc800217 	ldw	r18,8(sp)
 100d338:	dc400117 	ldw	r17,4(sp)
 100d33c:	dc000017 	ldw	r16,0(sp)
 100d340:	dec00704 	addi	sp,sp,28
 100d344:	f800283a 	ret

0100d348 <OSTaskDelReq>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 100d348:	21003fcc 	andi	r4,r4,255
 100d34c:	00800504 	movi	r2,20
 100d350:	00c00f84 	movi	r3,62
 100d354:	20802426 	beq	r4,r2,100d3e8 <OSTaskDelReq+0xa0>
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 100d358:	00803fc4 	movi	r2,255
 100d35c:	20800b1e 	bne	r4,r2,100d38c <OSTaskDelReq+0x44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d360:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d364:	00bfff84 	movi	r2,-2
 100d368:	1884703a 	and	r2,r3,r2
 100d36c:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 100d370:	00802034 	movhi	r2,128
 100d374:	10825a04 	addi	r2,r2,2408
 100d378:	10800017 	ldw	r2,0(r2)
 100d37c:	10800dc3 	ldbu	r2,55(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d380:	1801703a 	wrctl	status,r3
        OS_EXIT_CRITICAL();
        return (stat);
 100d384:	1007883a 	mov	r3,r2
 100d388:	00001706 	br	100d3e8 <OSTaskDelReq+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d38c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d390:	00bfff84 	movi	r2,-2
 100d394:	2884703a 	and	r2,r5,r2
 100d398:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    ptcb = OSTCBPrioTbl[prio];
 100d39c:	2105883a 	add	r2,r4,r4
 100d3a0:	1085883a 	add	r2,r2,r2
 100d3a4:	00c02074 	movhi	r3,129
 100d3a8:	18c5f204 	addi	r3,r3,6088
 100d3ac:	10c5883a 	add	r2,r2,r3
 100d3b0:	11000017 	ldw	r4,0(r2)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 100d3b4:	2000031e 	bne	r4,zero,100d3c4 <OSTaskDelReq+0x7c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d3b8:	2801703a 	wrctl	status,r5
 100d3bc:	00c010c4 	movi	r3,67
 100d3c0:	00000906 	br	100d3e8 <OSTaskDelReq+0xa0>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 100d3c4:	00800044 	movi	r2,1
 100d3c8:	2080031e 	bne	r4,r2,100d3d8 <OSTaskDelReq+0x90>
 100d3cc:	2801703a 	wrctl	status,r5
 100d3d0:	00c00f44 	movi	r3,61
 100d3d4:	00000406 	br	100d3e8 <OSTaskDelReq+0xa0>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 100d3d8:	00800fc4 	movi	r2,63
 100d3dc:	20800dc5 	stb	r2,55(r4)
 100d3e0:	2801703a 	wrctl	status,r5
 100d3e4:	0007883a 	mov	r3,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
 100d3e8:	1805883a 	mov	r2,r3
 100d3ec:	f800283a 	ret

0100d3f0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 100d3f0:	defffd04 	addi	sp,sp,-12
 100d3f4:	dfc00215 	stw	ra,8(sp)
 100d3f8:	dc000115 	stw	r16,4(sp)
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 100d3fc:	00802034 	movhi	r2,128
 100d400:	10825904 	addi	r2,r2,2404
 100d404:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_NAME_GET_ISR;
 100d408:	0007883a 	mov	r3,zero
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 100d40c:	10000226 	beq	r2,zero,100d418 <OSTaskNameGet+0x28>
        *perr = OS_ERR_NAME_GET_ISR;
 100d410:	00800444 	movi	r2,17
 100d414:	00001506 	br	100d46c <OSTaskNameGet+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d418:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d41c:	00bfff84 	movi	r2,-2
 100d420:	8084703a 	and	r2,r16,r2
 100d424:	1001703a 	wrctl	status,r2
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 100d428:	20c03fcc 	andi	r3,r4,255
 100d42c:	00803fc4 	movi	r2,255
 100d430:	1880041e 	bne	r3,r2,100d444 <OSTaskNameGet+0x54>
        prio = OSTCBCur->OSTCBPrio;
 100d434:	00802034 	movhi	r2,128
 100d438:	10825a04 	addi	r2,r2,2408
 100d43c:	10800017 	ldw	r2,0(r2)
 100d440:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
 100d444:	20803fcc 	andi	r2,r4,255
 100d448:	1085883a 	add	r2,r2,r2
 100d44c:	00c02074 	movhi	r3,129
 100d450:	18c5f204 	addi	r3,r3,6088
 100d454:	1085883a 	add	r2,r2,r2
 100d458:	10c5883a 	add	r2,r2,r3
 100d45c:	10c00017 	ldw	r3,0(r2)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 100d460:	1800041e 	bne	r3,zero,100d474 <OSTaskNameGet+0x84>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d464:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 100d468:	008010c4 	movi	r2,67
 100d46c:	30800005 	stb	r2,0(r6)
 100d470:	00000d06 	br	100d4a8 <OSTaskNameGet+0xb8>
        return (0);
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 100d474:	00800044 	movi	r2,1
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 100d478:	2809883a 	mov	r4,r5
 100d47c:	19400e04 	addi	r5,r3,56
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 100d480:	1880031e 	bne	r3,r2,100d490 <OSTaskNameGet+0xa0>
 100d484:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 100d488:	0007883a 	mov	r3,zero
 100d48c:	003ff606 	br	100d468 <OSTaskNameGet+0x78>
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 100d490:	d9800015 	stw	r6,0(sp)
 100d494:	100b05c0 	call	100b05c <OS_StrCopy>
 100d498:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100d49c:	d9800017 	ldw	r6,0(sp)
    return (len);
 100d4a0:	10c03fcc 	andi	r3,r2,255
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100d4a4:	30000005 	stb	zero,0(r6)
    return (len);
}
 100d4a8:	1805883a 	mov	r2,r3
 100d4ac:	dfc00217 	ldw	ra,8(sp)
 100d4b0:	dc000117 	ldw	r16,4(sp)
 100d4b4:	dec00304 	addi	sp,sp,12
 100d4b8:	f800283a 	ret

0100d4bc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 100d4bc:	defffb04 	addi	sp,sp,-20
 100d4c0:	dcc00315 	stw	r19,12(sp)
 100d4c4:	dc400115 	stw	r17,4(sp)
 100d4c8:	dfc00415 	stw	ra,16(sp)
 100d4cc:	dc800215 	stw	r18,8(sp)
 100d4d0:	dc000015 	stw	r16,0(sp)
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 100d4d4:	00802034 	movhi	r2,128
 100d4d8:	10825904 	addi	r2,r2,2404
 100d4dc:	10800003 	ldbu	r2,0(r2)
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 100d4e0:	2827883a 	mov	r19,r5
 100d4e4:	3023883a 	mov	r17,r6
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 100d4e8:	10000226 	beq	r2,zero,100d4f4 <OSTaskNameSet+0x38>
        *perr = OS_ERR_NAME_SET_ISR;
 100d4ec:	00800484 	movi	r2,18
 100d4f0:	00001506 	br	100d548 <OSTaskNameSet+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d4f4:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d4f8:	00bfff84 	movi	r2,-2
 100d4fc:	9084703a 	and	r2,r18,r2
 100d500:	1001703a 	wrctl	status,r2
        return;
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 100d504:	20c03fcc 	andi	r3,r4,255
 100d508:	00803fc4 	movi	r2,255
 100d50c:	1880041e 	bne	r3,r2,100d520 <OSTaskNameSet+0x64>
        prio = OSTCBCur->OSTCBPrio;
 100d510:	00802034 	movhi	r2,128
 100d514:	10825a04 	addi	r2,r2,2408
 100d518:	10800017 	ldw	r2,0(r2)
 100d51c:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
 100d520:	20803fcc 	andi	r2,r4,255
 100d524:	1085883a 	add	r2,r2,r2
 100d528:	1085883a 	add	r2,r2,r2
 100d52c:	00c02074 	movhi	r3,129
 100d530:	18c5f204 	addi	r3,r3,6088
 100d534:	10c5883a 	add	r2,r2,r3
 100d538:	14000017 	ldw	r16,0(r2)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 100d53c:	8000041e 	bne	r16,zero,100d550 <OSTaskNameSet+0x94>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d540:	9001703a 	wrctl	status,r18
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 100d544:	008010c4 	movi	r2,67
 100d548:	88800005 	stb	r2,0(r17)
 100d54c:	00000f06 	br	100d58c <OSTaskNameSet+0xd0>
        return;
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 100d550:	00800044 	movi	r2,1
 100d554:	80bffa26 	beq	r16,r2,100d540 <OSTaskNameSet+0x84>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return;
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 100d558:	9809883a 	mov	r4,r19
 100d55c:	100b0880 	call	100b088 <OS_StrLen>
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 100d560:	10803fcc 	andi	r2,r2,255
 100d564:	00c007c4 	movi	r3,31
 100d568:	1880032e 	bgeu	r3,r2,100d578 <OSTaskNameSet+0xbc>
 100d56c:	9001703a 	wrctl	status,r18
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 100d570:	00801044 	movi	r2,65
 100d574:	003ff406 	br	100d548 <OSTaskNameSet+0x8c>
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 100d578:	81000e04 	addi	r4,r16,56
 100d57c:	980b883a 	mov	r5,r19
 100d580:	100b05c0 	call	100b05c <OS_StrCopy>
 100d584:	9001703a 	wrctl	status,r18
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 100d588:	88000005 	stb	zero,0(r17)
}
 100d58c:	dfc00417 	ldw	ra,16(sp)
 100d590:	dcc00317 	ldw	r19,12(sp)
 100d594:	dc800217 	ldw	r18,8(sp)
 100d598:	dc400117 	ldw	r17,4(sp)
 100d59c:	dc000017 	ldw	r16,0(sp)
 100d5a0:	dec00504 	addi	sp,sp,20
 100d5a4:	f800283a 	ret

0100d5a8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 100d5a8:	deffff04 	addi	sp,sp,-4
 100d5ac:	dfc00015 	stw	ra,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d5b0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d5b4:	00bfff84 	movi	r2,-2
 100d5b8:	3084703a 	and	r2,r6,r2
 100d5bc:	1001703a 	wrctl	status,r2
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    ptcb = OSTCBPrioTbl[prio];
 100d5c0:	21003fcc 	andi	r4,r4,255
 100d5c4:	2109883a 	add	r4,r4,r4
 100d5c8:	2109883a 	add	r4,r4,r4
 100d5cc:	00802074 	movhi	r2,129
 100d5d0:	1085f204 	addi	r2,r2,6088
 100d5d4:	2089883a 	add	r4,r4,r2
 100d5d8:	21400017 	ldw	r5,0(r4)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 100d5dc:	2800031e 	bne	r5,zero,100d5ec <OSTaskResume+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d5e0:	3001703a 	wrctl	status,r6
 100d5e4:	00801184 	movi	r2,70
 100d5e8:	00002906 	br	100d690 <OSTaskResume+0xe8>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 100d5ec:	01c00044 	movi	r7,1
 100d5f0:	29c0031e 	bne	r5,r7,100d600 <OSTaskResume+0x58>
 100d5f4:	3001703a 	wrctl	status,r6
 100d5f8:	008010c4 	movi	r2,67
 100d5fc:	00002406 	br	100d690 <OSTaskResume+0xe8>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 100d600:	29000c03 	ldbu	r4,48(r5)
 100d604:	2080020c 	andi	r2,r4,8
 100d608:	10001f26 	beq	r2,zero,100d688 <OSTaskResume+0xe0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 100d60c:	00fffdc4 	movi	r3,-9
 100d610:	20c6703a 	and	r3,r4,r3
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 100d614:	18803fcc 	andi	r2,r3,255
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 100d618:	28c00c05 	stb	r3,48(r5)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 100d61c:	1000181e 	bne	r2,zero,100d680 <OSTaskResume+0xd8>
            if (ptcb->OSTCBDly == 0) {
 100d620:	28800b8b 	ldhu	r2,46(r5)
 100d624:	1000161e 	bne	r2,zero,100d680 <OSTaskResume+0xd8>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 100d628:	01002034 	movhi	r4,128
 100d62c:	21025704 	addi	r4,r4,2396
 100d630:	28c00d83 	ldbu	r3,54(r5)
 100d634:	20800003 	ldbu	r2,0(r4)
 100d638:	10c4b03a 	or	r2,r2,r3
 100d63c:	20800005 	stb	r2,0(r4)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 100d640:	28c00d03 	ldbu	r3,52(r5)
 100d644:	00802034 	movhi	r2,128
 100d648:	10825744 	addi	r2,r2,2397
 100d64c:	29000d43 	ldbu	r4,53(r5)
 100d650:	1887883a 	add	r3,r3,r2
 100d654:	18800003 	ldbu	r2,0(r3)
 100d658:	1104b03a 	or	r2,r2,r4
 100d65c:	18800005 	stb	r2,0(r3)
 100d660:	3001703a 	wrctl	status,r6
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 100d664:	00802034 	movhi	r2,128
 100d668:	10824c04 	addi	r2,r2,2352
 100d66c:	10800003 	ldbu	r2,0(r2)
 100d670:	11c0011e 	bne	r2,r7,100d678 <OSTaskResume+0xd0>
                    OS_Sched();                               /* Find new highest priority task        */
 100d674:	100b0a80 	call	100b0a8 <OS_Sched>
 100d678:	0005883a 	mov	r2,zero
 100d67c:	00000406 	br	100d690 <OSTaskResume+0xe8>
 100d680:	3001703a 	wrctl	status,r6
 100d684:	003ffc06 	br	100d678 <OSTaskResume+0xd0>
 100d688:	3001703a 	wrctl	status,r6
 100d68c:	00801104 	movi	r2,68
        }
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
}
 100d690:	dfc00017 	ldw	ra,0(sp)
 100d694:	dec00104 	addi	sp,sp,4
 100d698:	f800283a 	ret

0100d69c <OSTimeDly>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100d69c:	00802034 	movhi	r2,128
 100d6a0:	10825904 	addi	r2,r2,2404
 100d6a4:	10c00003 	ldbu	r3,0(r2)
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 100d6a8:	200d883a 	mov	r6,r4


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 100d6ac:	20bfffcc 	andi	r2,r4,65535
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 100d6b0:	18001f1e 	bne	r3,zero,100d730 <OSTimeDly+0x94>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 100d6b4:	10001e26 	beq	r2,zero,100d730 <OSTimeDly+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100d6b8:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100d6bc:	00bfff84 	movi	r2,-2
 100d6c0:	4084703a 	and	r2,r8,r2
 100d6c4:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 100d6c8:	00802034 	movhi	r2,128
 100d6cc:	10825a04 	addi	r2,r2,2408
 100d6d0:	11400017 	ldw	r5,0(r2)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100d6d4:	00c02034 	movhi	r3,128
 100d6d8:	18c25744 	addi	r3,r3,2397
        if (OSRdyTbl[y] == 0) {
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 100d6dc:	01c02034 	movhi	r7,128
 100d6e0:	39c25704 	addi	r7,r7,2396
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100d6e4:	29000d03 	ldbu	r4,52(r5)
 100d6e8:	28800d43 	ldbu	r2,53(r5)
 100d6ec:	20c9883a 	add	r4,r4,r3
 100d6f0:	20c00003 	ldbu	r3,0(r4)
 100d6f4:	0084303a 	nor	r2,zero,r2
 100d6f8:	10c4703a 	and	r2,r2,r3
        if (OSRdyTbl[y] == 0) {
 100d6fc:	10c03fcc 	andi	r3,r2,255
 100d700:	18c0201c 	xori	r3,r3,128
 100d704:	18ffe004 	addi	r3,r3,-128
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 100d708:	20800005 	stb	r2,0(r4)
        if (OSRdyTbl[y] == 0) {
 100d70c:	1800051e 	bne	r3,zero,100d724 <OSTimeDly+0x88>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 100d710:	28800d83 	ldbu	r2,54(r5)
 100d714:	38c00003 	ldbu	r3,0(r7)
 100d718:	0084303a 	nor	r2,zero,r2
 100d71c:	10c4703a 	and	r2,r2,r3
 100d720:	38800005 	stb	r2,0(r7)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 100d724:	29800b8d 	sth	r6,46(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100d728:	4001703a 	wrctl	status,r8
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 100d72c:	100b0a81 	jmpi	100b0a8 <OS_Sched>
 100d730:	f800283a 	ret

0100d734 <OSTmr_Free>:
    ptmr->OSTmrPeriod      = 0;
    ptmr->OSTmrMatch       = 0;
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    ptmr->OSTmrCallbackArg = (void *)0;
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
 100d734:	00800fc4 	movi	r2,63
 100d738:	20800805 	stb	r2,32(r4)
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
 100d73c:	20000c45 	stb	zero,49(r4)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
 100d740:	20000c05 	stb	zero,48(r4)
    ptmr->OSTmrMatch       = 0;
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    ptmr->OSTmrCallbackArg = (void *)0;
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
 100d744:	20000845 	stb	zero,33(r4)

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
 100d748:	01802034 	movhi	r6,128
 100d74c:	31824e04 	addi	r6,r6,2360
    OSTmrFree++;
 100d750:	01c02034 	movhi	r7,128
 100d754:	39c25204 	addi	r7,r7,2376
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
 100d758:	01402034 	movhi	r5,128
 100d75c:	29424904 	addi	r5,r5,2340
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
 100d760:	3080000b 	ldhu	r2,0(r6)
    OSTmrFree++;
 100d764:	38c0000b 	ldhu	r3,0(r7)
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
 100d768:	2a000017 	ldw	r8,0(r5)
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
 100d76c:	10bfffc4 	addi	r2,r2,-1
    OSTmrFree++;
 100d770:	18c00044 	addi	r3,r3,1
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
    OSTmrFreeList          = ptmr;
 100d774:	29000015 	stw	r4,0(r5)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
 100d778:	3080000d 	sth	r2,0(r6)
    OSTmrFree++;
 100d77c:	38c0000d 	sth	r3,0(r7)
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
 100d780:	22000315 	stw	r8,12(r4)
#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
    ptmr->OSTmrPeriod      = 0;
 100d784:	20000715 	stw	zero,28(r4)
    ptmr->OSTmrMatch       = 0;
 100d788:	20000515 	stw	zero,20(r4)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
 100d78c:	20000115 	stw	zero,4(r4)
    ptmr->OSTmrCallbackArg = (void *)0;
 100d790:	20000215 	stw	zero,8(r4)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
 100d794:	20000415 	stw	zero,16(r4)
    ptmr->OSTmrNext        = OSTmrFreeList;
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
    OSTmrFree++;
}
 100d798:	f800283a 	ret

0100d79c <OSTmr_Link>:
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 100d79c:	008000c4 	movi	r2,3
 100d7a0:	20800c45 	stb	r2,49(r4)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 100d7a4:	29403fcc 	andi	r5,r5,255
 100d7a8:	00800044 	movi	r2,1
 100d7ac:	2880031e 	bne	r5,r2,100d7bc <OSTmr_Link+0x20>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 100d7b0:	00802034 	movhi	r2,128
 100d7b4:	10825b04 	addi	r2,r2,2412
 100d7b8:	00000406 	br	100d7cc <OSTmr_Link+0x30>
    } else {
        if (ptmr->OSTmrDly == 0) {
 100d7bc:	21400617 	ldw	r5,24(r4)
 100d7c0:	00802034 	movhi	r2,128
 100d7c4:	10825b04 	addi	r2,r2,2412
 100d7c8:	2800041e 	bne	r5,zero,100d7dc <OSTmr_Link+0x40>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 100d7cc:	10c00017 	ldw	r3,0(r2)
 100d7d0:	20800717 	ldw	r2,28(r4)
 100d7d4:	10c5883a 	add	r2,r2,r3
 100d7d8:	00000206 	br	100d7e4 <OSTmr_Link+0x48>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 100d7dc:	10800017 	ldw	r2,0(r2)
 100d7e0:	2885883a 	add	r2,r5,r2
 100d7e4:	20800515 	stw	r2,20(r4)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];
 100d7e8:	20800517 	ldw	r2,20(r4)
 100d7ec:	00c02074 	movhi	r3,129
 100d7f0:	18fa6a04 	addi	r3,r3,-5720
 100d7f4:	1080004c 	andi	r2,r2,1
 100d7f8:	100490fa 	slli	r2,r2,3
 100d7fc:	10c7883a 	add	r3,r2,r3

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 100d800:	19400017 	ldw	r5,0(r3)
 100d804:	2800051e 	bne	r5,zero,100d81c <OSTmr_Link+0x80>
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (OS_TMR *)0;
        pspoke->OSTmrEntries = 1;
 100d808:	00800044 	movi	r2,1
 100d80c:	1880010d 	sth	r2,4(r3)
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
        pspoke->OSTmrFirst   = ptmr;
 100d810:	19000015 	stw	r4,0(r3)
        ptmr->OSTmrNext      = (OS_TMR *)0;
 100d814:	20000315 	stw	zero,12(r4)
 100d818:	00000606 	br	100d834 <OSTmr_Link+0x98>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (void *)ptmr1;
        ptmr1->OSTmrPrev     = (void *)ptmr;
        pspoke->OSTmrEntries++;
 100d81c:	1880010b 	ldhu	r2,4(r3)
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (OS_TMR *)0;
        pspoke->OSTmrEntries = 1;
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
        pspoke->OSTmrFirst   = ptmr;
 100d820:	19000015 	stw	r4,0(r3)
        ptmr->OSTmrNext      = (void *)ptmr1;
 100d824:	21400315 	stw	r5,12(r4)
        ptmr1->OSTmrPrev     = (void *)ptmr;
        pspoke->OSTmrEntries++;
 100d828:	10800044 	addi	r2,r2,1
 100d82c:	1880010d 	sth	r2,4(r3)
        pspoke->OSTmrEntries = 1;
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (void *)ptmr1;
        ptmr1->OSTmrPrev     = (void *)ptmr;
 100d830:	29000415 	stw	r4,16(r5)
        pspoke->OSTmrEntries++;
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 100d834:	20000415 	stw	zero,16(r4)
}
 100d838:	f800283a 	ret

0100d83c <OSTmr_Unlink>:
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];
 100d83c:	20800517 	ldw	r2,20(r4)
 100d840:	00c02074 	movhi	r3,129
 100d844:	18fa6a04 	addi	r3,r3,-5720
 100d848:	21400317 	ldw	r5,12(r4)
 100d84c:	1080004c 	andi	r2,r2,1
 100d850:	100490fa 	slli	r2,r2,3
 100d854:	10c7883a 	add	r3,r2,r3

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 100d858:	18800017 	ldw	r2,0(r3)
 100d85c:	1100041e 	bne	r2,r4,100d870 <OSTmr_Unlink+0x34>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 100d860:	19400015 	stw	r5,0(r3)
        if (ptmr1 != (OS_TMR *)0) {
 100d864:	28000626 	beq	r5,zero,100d880 <OSTmr_Unlink+0x44>
            ptmr1->OSTmrPrev = (void *)0;
 100d868:	28000415 	stw	zero,16(r5)
 100d86c:	00000406 	br	100d880 <OSTmr_Unlink+0x44>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 100d870:	20800417 	ldw	r2,16(r4)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
        ptmr1->OSTmrNext = ptmr2;
 100d874:	11400315 	stw	r5,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
 100d878:	28000126 	beq	r5,zero,100d880 <OSTmr_Unlink+0x44>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 100d87c:	28800415 	stw	r2,16(r5)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 100d880:	00800044 	movi	r2,1
 100d884:	20800c45 	stb	r2,49(r4)
    ptmr->OSTmrNext  = (void *)0;
    ptmr->OSTmrPrev  = (void *)0;
    pspoke->OSTmrEntries--;
 100d888:	1880010b 	ldhu	r2,4(r3)
            ptmr2->OSTmrPrev = (void *)ptmr1;
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    ptmr->OSTmrNext  = (void *)0;
    ptmr->OSTmrPrev  = (void *)0;
 100d88c:	20000415 	stw	zero,16(r4)
        if (ptmr2 != (OS_TMR *)0) {
            ptmr2->OSTmrPrev = (void *)ptmr1;
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    ptmr->OSTmrNext  = (void *)0;
 100d890:	20000315 	stw	zero,12(r4)
    ptmr->OSTmrPrev  = (void *)0;
    pspoke->OSTmrEntries--;
 100d894:	10bfffc4 	addi	r2,r2,-1
 100d898:	1880010d 	sth	r2,4(r3)
}
 100d89c:	f800283a 	ret

0100d8a0 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
 100d8a0:	defff804 	addi	sp,sp,-32
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 100d8a4:	01002074 	movhi	r4,129
 100d8a8:	213b4a04 	addi	r4,r4,-4824
 100d8ac:	0140d004 	movi	r5,832
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
 100d8b0:	dfc00715 	stw	ra,28(sp)
 100d8b4:	dc000615 	stw	r16,24(sp)
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 100d8b8:	100b01c0 	call	100b01c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 100d8bc:	01002074 	movhi	r4,129
 100d8c0:	213a6a04 	addi	r4,r4,-5720
 100d8c4:	01400404 	movi	r5,16
 100d8c8:	100b01c0 	call	100b01c <OS_MemClr>
 100d8cc:	01c02074 	movhi	r7,129
 100d8d0:	39fb5704 	addi	r7,r7,-4772
 100d8d4:	02001904 	movi	r8,100
 100d8d8:	02400fc4 	movi	r9,63
 100d8dc:	3880c304 	addi	r2,r7,780

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 100d8e0:	3a3ff305 	stb	r8,-52(r7)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 100d8e4:	383fff45 	stb	zero,-3(r7)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 100d8e8:	39fff615 	stw	r7,-40(r7)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
 100d8ec:	3a7ffb05 	stb	r9,-20(r7)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 100d8f0:	383ffb45 	stb	zero,-19(r7)
#endif
        ptmr1++;
        ptmr2++;
 100d8f4:	39c00d04 	addi	r7,r7,52
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 100d8f8:	38bff91e 	bne	r7,r2,100d8e0 <OSTmr_Init+0x40>
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
 100d8fc:	00c00404 	movi	r3,16
 100d900:	00802034 	movhi	r2,128
 100d904:	10825204 	addi	r2,r2,2376
 100d908:	10c0000d 	sth	r3,0(r2)
    OSTmrFreeList       = &OSTmrTbl[0];
 100d90c:	39bf3004 	addi	r6,r7,-832
 100d910:	00802034 	movhi	r2,128
 100d914:	10824904 	addi	r2,r2,2340
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
 100d918:	397ff304 	addi	r5,r7,-52
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
 100d91c:	11800015 	stw	r6,0(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 100d920:	3a3ff305 	stb	r8,-52(r7)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
 100d924:	2a400805 	stb	r9,32(r5)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
 100d928:	28000845 	stb	zero,33(r5)
#endif
    OSTmrTime           = 0;
 100d92c:	00802034 	movhi	r2,128
 100d930:	10825b04 	addi	r2,r2,2412
 100d934:	10000015 	stw	zero,0(r2)
    OSTmrUsed           = 0;
 100d938:	00802034 	movhi	r2,128
 100d93c:	10824e04 	addi	r2,r2,2360
 100d940:	1000000d 	sth	zero,0(r2)
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 100d944:	28000c45 	stb	zero,49(r5)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 100d948:	28000315 	stw	zero,12(r5)
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
    OSTmrSem            = OSSemCreate(1);
 100d94c:	01000044 	movi	r4,1
 100d950:	100cc380 	call	100cc38 <OSSemCreate>
 100d954:	04002034 	movhi	r16,128
 100d958:	84025c04 	addi	r16,r16,2416
    OSTmrSemSignal      = OSSemCreate(0);
 100d95c:	0009883a 	mov	r4,zero
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
    OSTmrSem            = OSSemCreate(1);
 100d960:	80800015 	stw	r2,0(r16)
    OSTmrSemSignal      = OSSemCreate(0);
 100d964:	100cc380 	call	100cc38 <OSSemCreate>

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
 100d968:	81000017 	ldw	r4,0(r16)
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
    OSTmrSem            = OSSemCreate(1);
    OSTmrSemSignal      = OSSemCreate(0);
 100d96c:	04002034 	movhi	r16,128
 100d970:	84024b04 	addi	r16,r16,2348
 100d974:	80800015 	stw	r2,0(r16)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
 100d978:	d9800504 	addi	r6,sp,20
 100d97c:	01402034 	movhi	r5,128
 100d980:	29413204 	addi	r5,r5,1224
 100d984:	100bb540 	call	100bb54 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
 100d988:	81000017 	ldw	r4,0(r16)
 100d98c:	d9800504 	addi	r6,sp,20
 100d990:	01402034 	movhi	r5,128
 100d994:	29413704 	addi	r5,r5,1244
 100d998:	100bb540 	call	100bb54 <OSEventNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
 100d99c:	00bfff54 	movui	r2,65533
 100d9a0:	00c02074 	movhi	r3,129
 100d9a4:	18fe1a04 	addi	r3,r3,-1944
 100d9a8:	d8800015 	stw	r2,0(sp)
 100d9ac:	00808004 	movi	r2,512
 100d9b0:	1981ff04 	addi	r6,r3,2044
 100d9b4:	000f883a 	mov	r7,zero
 100d9b8:	d8800215 	stw	r2,8(sp)
 100d9bc:	01004074 	movhi	r4,257
 100d9c0:	21368f04 	addi	r4,r4,-9668
 100d9c4:	000b883a 	mov	r5,zero
 100d9c8:	008000c4 	movi	r2,3
 100d9cc:	d8c00115 	stw	r3,4(sp)
 100d9d0:	d8800415 	stw	r2,16(sp)
 100d9d4:	d8000315 	stw	zero,12(sp)
 100d9d8:	100cffc0 	call	100cffc <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
 100d9dc:	0009883a 	mov	r4,zero
 100d9e0:	01402034 	movhi	r5,128
 100d9e4:	29413c04 	addi	r5,r5,1264
 100d9e8:	d9800544 	addi	r6,sp,21
 100d9ec:	100d4bc0 	call	100d4bc <OSTaskNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
}
 100d9f0:	dfc00717 	ldw	ra,28(sp)
 100d9f4:	dc000617 	ldw	r16,24(sp)
 100d9f8:	dec00804 	addi	sp,sp,32
 100d9fc:	f800283a 	ret

0100da00 <OSTmr_Lock>:
static  void  OSTmr_Lock (void)
{
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
 100da00:	00802034 	movhi	r2,128
 100da04:	10825c04 	addi	r2,r2,2416
 100da08:	11000017 	ldw	r4,0(r2)
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
 100da0c:	defffe04 	addi	sp,sp,-8
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
 100da10:	000b883a 	mov	r5,zero
 100da14:	d80d883a 	mov	r6,sp
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
 100da18:	dfc00115 	stw	ra,4(sp)
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
 100da1c:	100ccc40 	call	100ccc4 <OSSemPend>
    (void)err;
}
 100da20:	dfc00117 	ldw	ra,4(sp)
 100da24:	dec00204 	addi	sp,sp,8
 100da28:	f800283a 	ret

0100da2c <OSTmr_Unlock>:


#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
    (void)OSSemPost(OSTmrSem);
 100da2c:	00802034 	movhi	r2,128
 100da30:	10825c04 	addi	r2,r2,2416
 100da34:	11000017 	ldw	r4,0(r2)
 100da38:	100cba41 	jmpi	100cba4 <OSSemPost>

0100da3c <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
 100da3c:	defffc04 	addi	sp,sp,-16
 100da40:	dfc00315 	stw	ra,12(sp)
 100da44:	dc400215 	stw	r17,8(sp)
 100da48:	dc000115 	stw	r16,4(sp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
 100da4c:	00802034 	movhi	r2,128
 100da50:	10824b04 	addi	r2,r2,2348
 100da54:	11000017 	ldw	r4,0(r2)
 100da58:	000b883a 	mov	r5,zero
 100da5c:	d80d883a 	mov	r6,sp
 100da60:	100ccc40 	call	100ccc4 <OSSemPend>
        OSTmr_Lock();
 100da64:	100da000 	call	100da00 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
 100da68:	01002034 	movhi	r4,128
 100da6c:	21025b04 	addi	r4,r4,2412
 100da70:	20800017 	ldw	r2,0(r4)
 100da74:	10800044 	addi	r2,r2,1
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
 100da78:	10c0004c 	andi	r3,r2,1
 100da7c:	180690fa 	slli	r3,r3,3

    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
 100da80:	20800015 	stw	r2,0(r4)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
 100da84:	00802074 	movhi	r2,129
 100da88:	10ba6a04 	addi	r2,r2,-5720
 100da8c:	1887883a 	add	r3,r3,r2
 100da90:	1c000017 	ldw	r16,0(r3)
 100da94:	00001606 	br	100daf0 <OSTmr_Task+0xb4>
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 100da98:	00802034 	movhi	r2,128
 100da9c:	10825b04 	addi	r2,r2,2412
 100daa0:	10c00017 	ldw	r3,0(r2)
 100daa4:	80800517 	ldw	r2,20(r16)
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 100daa8:	84400317 	ldw	r17,12(r16)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 100daac:	18800f1e 	bne	r3,r2,100daec <OSTmr_Task+0xb0>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 100dab0:	80800117 	ldw	r2,4(r16)
                if (pfnct != (OS_TMR_CALLBACK)0) {
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 100dab4:	8009883a 	mov	r4,r16
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
                if (pfnct != (OS_TMR_CALLBACK)0) {
 100dab8:	10000226 	beq	r2,zero,100dac4 <OSTmr_Task+0x88>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 100dabc:	81400217 	ldw	r5,8(r16)
 100dac0:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 100dac4:	8009883a 	mov	r4,r16
 100dac8:	100d83c0 	call	100d83c <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 100dacc:	80800c03 	ldbu	r2,48(r16)
 100dad0:	00c00084 	movi	r3,2
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 100dad4:	01400044 	movi	r5,1
 100dad8:	8009883a 	mov	r4,r16
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
                if (pfnct != (OS_TMR_CALLBACK)0) {
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 100dadc:	10c0021e 	bne	r2,r3,100dae8 <OSTmr_Task+0xac>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 100dae0:	100d79c0 	call	100d79c <OSTmr_Link>
 100dae4:	00000106 	br	100daec <OSTmr_Task+0xb0>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 100dae8:	80c00c45 	stb	r3,49(r16)
 100daec:	8821883a 	mov	r16,r17
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
 100daf0:	803fe91e 	bne	r16,zero,100da98 <OSTmr_Task+0x5c>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
 100daf4:	100da2c0 	call	100da2c <OSTmr_Unlock>
 100daf8:	003fd406 	br	100da4c <OSTmr_Task+0x10>

0100dafc <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
 100dafc:	defffa04 	addi	sp,sp,-24
 100db00:	dd000415 	stw	r20,16(sp)
 100db04:	dcc00315 	stw	r19,12(sp)
 100db08:	dc800215 	stw	r18,8(sp)
 100db0c:	dc400115 	stw	r17,4(sp)
 100db10:	dfc00515 	stw	ra,20(sp)
 100db14:	dc000015 	stw	r16,0(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
 100db18:	20c00003 	ldbu	r3,0(r4)
 100db1c:	00801904 	movi	r2,100
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
 100db20:	2023883a 	mov	r17,r4
 100db24:	3029883a 	mov	r20,r6
 100db28:	3825883a 	mov	r18,r7
 100db2c:	2827883a 	mov	r19,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
 100db30:	18800326 	beq	r3,r2,100db40 <OSTmrStop+0x44>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100db34:	0007883a 	mov	r3,zero
 100db38:	00bfe244 	movi	r2,-119
 100db3c:	00000606 	br	100db58 <OSTmrStop+0x5c>
        return (OS_FALSE);
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
 100db40:	00802034 	movhi	r2,128
 100db44:	10825904 	addi	r2,r2,2404
 100db48:	10800003 	ldbu	r2,0(r2)
 100db4c:	10000426 	beq	r2,zero,100db60 <OSTmrStop+0x64>
        *perr  = OS_ERR_TMR_ISR;
 100db50:	0007883a 	mov	r3,zero
 100db54:	00bfe2c4 	movi	r2,-117
 100db58:	90800005 	stb	r2,0(r18)
 100db5c:	00003006 	br	100dc20 <OSTmrStop+0x124>
        return (OS_FALSE);
    }
    OSTmr_Lock();
 100db60:	100da000 	call	100da00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 100db64:	8c000c43 	ldbu	r16,49(r17)
 100db68:	00800084 	movi	r2,2
 100db6c:	14000336 	bltu	r2,r16,100db7c <OSTmrStop+0x80>
 100db70:	04400044 	movi	r17,1
 100db74:	84401e2e 	bgeu	r16,r17,100dbf0 <OSTmrStop+0xf4>
 100db78:	00002106 	br	100dc00 <OSTmrStop+0x104>
 100db7c:	008000c4 	movi	r2,3
 100db80:	8080231e 	bne	r16,r2,100dc10 <OSTmrStop+0x114>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
 100db84:	8809883a 	mov	r4,r17
 100db88:	100d83c0 	call	100d83c <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
             switch (opt) {
 100db8c:	99403fcc 	andi	r5,r19,255
    }
    OSTmr_Lock();
    switch (ptmr->OSTmrState) {
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
             *perr = OS_ERR_NONE;
 100db90:	90000005 	stb	zero,0(r18)
             switch (opt) {
 100db94:	2c000426 	beq	r5,r16,100dba8 <OSTmrStop+0xac>
 100db98:	00800104 	movi	r2,4
 100db9c:	28800726 	beq	r5,r2,100dbbc <OSTmrStop+0xc0>
 100dba0:	28001026 	beq	r5,zero,100dbe4 <OSTmrStop+0xe8>
 100dba4:	00000d06 	br	100dbdc <OSTmrStop+0xe0>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 100dba8:	88800117 	ldw	r2,4(r17)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 100dbac:	10000926 	beq	r2,zero,100dbd4 <OSTmrStop+0xd8>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
 100dbb0:	89400217 	ldw	r5,8(r17)
 100dbb4:	8809883a 	mov	r4,r17
 100dbb8:	00000406 	br	100dbcc <OSTmrStop+0xd0>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
 100dbbc:	88800117 	ldw	r2,4(r17)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
 100dbc0:	10000426 	beq	r2,zero,100dbd4 <OSTmrStop+0xd8>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
 100dbc4:	8809883a 	mov	r4,r17
 100dbc8:	a00b883a 	mov	r5,r20
 100dbcc:	103ee83a 	callr	r2
 100dbd0:	00000406 	br	100dbe4 <OSTmrStop+0xe8>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
 100dbd4:	00bfe3c4 	movi	r2,-113
 100dbd8:	00000106 	br	100dbe0 <OSTmrStop+0xe4>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
 100dbdc:	00bfe104 	movi	r2,-124
 100dbe0:	90800005 	stb	r2,0(r18)
                     break;
             }
             OSTmr_Unlock();
 100dbe4:	100da2c0 	call	100da2c <OSTmr_Unlock>
 100dbe8:	00c00044 	movi	r3,1
 100dbec:	00000c06 	br	100dc20 <OSTmrStop+0x124>
             return (OS_TRUE);

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
 100dbf0:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
 100dbf4:	8807883a 	mov	r3,r17
 100dbf8:	00bfe384 	movi	r2,-114
 100dbfc:	003fd606 	br	100db58 <OSTmrStop+0x5c>
             return (OS_TRUE);

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
 100dc00:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 100dc04:	0007883a 	mov	r3,zero
 100dc08:	00bfe1c4 	movi	r2,-121
 100dc0c:	003fd206 	br	100db58 <OSTmrStop+0x5c>
             return (OS_FALSE);

        default:
             OSTmr_Unlock();
 100dc10:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 100dc14:	00bfe344 	movi	r2,-115
 100dc18:	90800005 	stb	r2,0(r18)
 100dc1c:	0007883a 	mov	r3,zero
             return (OS_FALSE);
    }
}
 100dc20:	1805883a 	mov	r2,r3
 100dc24:	dfc00517 	ldw	ra,20(sp)
 100dc28:	dd000417 	ldw	r20,16(sp)
 100dc2c:	dcc00317 	ldw	r19,12(sp)
 100dc30:	dc800217 	ldw	r18,8(sp)
 100dc34:	dc400117 	ldw	r17,4(sp)
 100dc38:	dc000017 	ldw	r16,0(sp)
 100dc3c:	dec00604 	addi	sp,sp,24
 100dc40:	f800283a 	ret

0100dc44 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
 100dc44:	defffc04 	addi	sp,sp,-16
 100dc48:	dc400115 	stw	r17,4(sp)
 100dc4c:	dc000015 	stw	r16,0(sp)
 100dc50:	dfc00315 	stw	ra,12(sp)
 100dc54:	dc800215 	stw	r18,8(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 100dc58:	20c00003 	ldbu	r3,0(r4)
 100dc5c:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
 100dc60:	2021883a 	mov	r16,r4
 100dc64:	2823883a 	mov	r17,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 100dc68:	18800326 	beq	r3,r2,100dc78 <OSTmrStart+0x34>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100dc6c:	0007883a 	mov	r3,zero
 100dc70:	00bfe244 	movi	r2,-119
 100dc74:	00000606 	br	100dc90 <OSTmrStart+0x4c>
        return (OS_FALSE);
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 100dc78:	00802034 	movhi	r2,128
 100dc7c:	10825904 	addi	r2,r2,2404
 100dc80:	10800003 	ldbu	r2,0(r2)
 100dc84:	10000426 	beq	r2,zero,100dc98 <OSTmrStart+0x54>
        *perr  = OS_ERR_TMR_ISR;
 100dc88:	0007883a 	mov	r3,zero
 100dc8c:	00bfe2c4 	movi	r2,-117
 100dc90:	88800005 	stb	r2,0(r17)
 100dc94:	00002006 	br	100dd18 <OSTmrStart+0xd4>
        return (OS_FALSE);
    }
    OSTmr_Lock();
 100dc98:	100da000 	call	100da00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 100dc9c:	80c00c43 	ldbu	r3,49(r16)
 100dca0:	00800084 	movi	r2,2
 100dca4:	10c00336 	bltu	r2,r3,100dcb4 <OSTmrStart+0x70>
 100dca8:	04800044 	movi	r18,1
 100dcac:	1c800b2e 	bgeu	r3,r18,100dcdc <OSTmrStart+0x98>
 100dcb0:	00001106 	br	100dcf8 <OSTmrStart+0xb4>
 100dcb4:	008000c4 	movi	r2,3
 100dcb8:	1880131e 	bne	r3,r2,100dd08 <OSTmrStart+0xc4>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
 100dcbc:	8009883a 	mov	r4,r16
 100dcc0:	100d83c0 	call	100d83c <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 100dcc4:	000b883a 	mov	r5,zero
 100dcc8:	8009883a 	mov	r4,r16
 100dccc:	100d79c0 	call	100d79c <OSTmr_Link>
             OSTmr_Unlock();
 100dcd0:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 100dcd4:	00c00044 	movi	r3,1
 100dcd8:	00000506 	br	100dcf0 <OSTmrStart+0xac>
             return (OS_TRUE);

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
 100dcdc:	8009883a 	mov	r4,r16
 100dce0:	000b883a 	mov	r5,zero
 100dce4:	100d79c0 	call	100d79c <OSTmr_Link>
             OSTmr_Unlock();
 100dce8:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 100dcec:	9007883a 	mov	r3,r18
 100dcf0:	88000005 	stb	zero,0(r17)
 100dcf4:	00000806 	br	100dd18 <OSTmrStart+0xd4>
             return (OS_TRUE);

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
 100dcf8:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 100dcfc:	0007883a 	mov	r3,zero
 100dd00:	00bfe1c4 	movi	r2,-121
 100dd04:	003fe206 	br	100dc90 <OSTmrStart+0x4c>
             return (OS_FALSE);

        default:
             OSTmr_Unlock();
 100dd08:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 100dd0c:	00bfe344 	movi	r2,-115
 100dd10:	88800005 	stb	r2,0(r17)
 100dd14:	0007883a 	mov	r3,zero
             return (OS_FALSE);
    }
}
 100dd18:	1805883a 	mov	r2,r3
 100dd1c:	dfc00317 	ldw	ra,12(sp)
 100dd20:	dc800217 	ldw	r18,8(sp)
 100dd24:	dc400117 	ldw	r17,4(sp)
 100dd28:	dc000017 	ldw	r16,0(sp)
 100dd2c:	dec00404 	addi	sp,sp,16
 100dd30:	f800283a 	ret

0100dd34 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
 100dd34:	defffc04 	addi	sp,sp,-16
 100dd38:	dc400215 	stw	r17,8(sp)
 100dd3c:	dc000115 	stw	r16,4(sp)
 100dd40:	dfc00315 	stw	ra,12(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 100dd44:	20c00003 	ldbu	r3,0(r4)
 100dd48:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
 100dd4c:	2021883a 	mov	r16,r4
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100dd50:	0023883a 	mov	r17,zero
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 100dd54:	18800226 	beq	r3,r2,100dd60 <OSTmrStateGet+0x2c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100dd58:	00bfe244 	movi	r2,-119
 100dd5c:	00000606 	br	100dd78 <OSTmrStateGet+0x44>
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 100dd60:	00802034 	movhi	r2,128
 100dd64:	10825904 	addi	r2,r2,2404
 100dd68:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_TMR_ISR;
 100dd6c:	0023883a 	mov	r17,zero
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 100dd70:	10000326 	beq	r2,zero,100dd80 <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_ISR;
 100dd74:	00bfe2c4 	movi	r2,-117
 100dd78:	28800005 	stb	r2,0(r5)
 100dd7c:	00000d06 	br	100ddb4 <OSTmrStateGet+0x80>
        return (0);
    }
    OSTmr_Lock();
 100dd80:	d9400015 	stw	r5,0(sp)
 100dd84:	100da000 	call	100da00 <OSTmr_Lock>
    state = ptmr->OSTmrState;
 100dd88:	81000c43 	ldbu	r4,49(r16)
    switch (state) {
 100dd8c:	008000c4 	movi	r2,3
 100dd90:	d9400017 	ldw	r5,0(sp)
 100dd94:	20c03fcc 	andi	r3,r4,255
 100dd98:	10c00236 	bltu	r2,r3,100dda4 <OSTmrStateGet+0x70>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
 100dd9c:	28000005 	stb	zero,0(r5)
 100dda0:	00000206 	br	100ddac <OSTmrStateGet+0x78>
             break;
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
 100dda4:	00bfe344 	movi	r2,-115
 100dda8:	28800005 	stb	r2,0(r5)
        *perr = OS_ERR_TMR_ISR;
        return (0);
    }
    OSTmr_Lock();
    state = ptmr->OSTmrState;
    switch (state) {
 100ddac:	24403fcc 	andi	r17,r4,255
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
             break;
    }
    OSTmr_Unlock();
 100ddb0:	100da2c0 	call	100da2c <OSTmr_Unlock>
    return (state);
}
 100ddb4:	8805883a 	mov	r2,r17
 100ddb8:	dfc00317 	ldw	ra,12(sp)
 100ddbc:	dc400217 	ldw	r17,8(sp)
 100ddc0:	dc000117 	ldw	r16,4(sp)
 100ddc4:	dec00404 	addi	sp,sp,16
 100ddc8:	f800283a 	ret

0100ddcc <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
 100ddcc:	defffc04 	addi	sp,sp,-16
 100ddd0:	dc400115 	stw	r17,4(sp)
 100ddd4:	dc000015 	stw	r16,0(sp)
 100ddd8:	dfc00315 	stw	ra,12(sp)
 100dddc:	dc800215 	stw	r18,8(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 100dde0:	20c00003 	ldbu	r3,0(r4)
 100dde4:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
 100dde8:	2023883a 	mov	r17,r4
 100ddec:	2821883a 	mov	r16,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 100ddf0:	18800326 	beq	r3,r2,100de00 <OSTmrRemainGet+0x34>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100ddf4:	0025883a 	mov	r18,zero
 100ddf8:	00bfe244 	movi	r2,-119
 100ddfc:	00000606 	br	100de18 <OSTmrRemainGet+0x4c>
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 100de00:	00802034 	movhi	r2,128
 100de04:	10825904 	addi	r2,r2,2404
 100de08:	10800003 	ldbu	r2,0(r2)
 100de0c:	10000426 	beq	r2,zero,100de20 <OSTmrRemainGet+0x54>
        *perr = OS_ERR_TMR_ISR;
 100de10:	0025883a 	mov	r18,zero
 100de14:	00bfe2c4 	movi	r2,-117
 100de18:	80800005 	stb	r2,0(r16)
 100de1c:	00002606 	br	100deb8 <OSTmrRemainGet+0xec>
        return (0);
    }
    OSTmr_Lock();
 100de20:	100da000 	call	100da00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 100de24:	88c00c43 	ldbu	r3,49(r17)
 100de28:	00800044 	movi	r2,1
 100de2c:	18800b26 	beq	r3,r2,100de5c <OSTmrRemainGet+0x90>
 100de30:	18801936 	bltu	r3,r2,100de98 <OSTmrRemainGet+0xcc>
 100de34:	00800084 	movi	r2,2
 100de38:	18801326 	beq	r3,r2,100de88 <OSTmrRemainGet+0xbc>
 100de3c:	008000c4 	movi	r2,3
 100de40:	1880191e 	bne	r3,r2,100dea8 <OSTmrRemainGet+0xdc>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
 100de44:	00c02034 	movhi	r3,128
 100de48:	18c25b04 	addi	r3,r3,2412
 100de4c:	88800517 	ldw	r2,20(r17)
 100de50:	18c00017 	ldw	r3,0(r3)
 100de54:	10e5c83a 	sub	r18,r2,r3
 100de58:	00000906 	br	100de80 <OSTmrRemainGet+0xb4>
             OSTmr_Unlock();
             *perr  = OS_ERR_NONE;
             return (remain);

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
 100de5c:	88c00c03 	ldbu	r3,48(r17)
 100de60:	00800084 	movi	r2,2
 100de64:	89000617 	ldw	r4,24(r17)
 100de68:	1880041e 	bne	r3,r2,100de7c <OSTmrRemainGet+0xb0>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
 100de6c:	2025883a 	mov	r18,r4
 100de70:	2000031e 	bne	r4,zero,100de80 <OSTmrRemainGet+0xb4>
                          remain = ptmr->OSTmrPeriod;
 100de74:	8c800717 	ldw	r18,28(r17)
 100de78:	00000106 	br	100de80 <OSTmrRemainGet+0xb4>
                      *perr  = OS_ERR_NONE;
                      break;

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
 100de7c:	2025883a 	mov	r18,r4
                      OSTmr_Unlock();
 100de80:	100da2c0 	call	100da2c <OSTmr_Unlock>
 100de84:	00000206 	br	100de90 <OSTmrRemainGet+0xc4>
                      break;
             }
             return (remain);

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
 100de88:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 100de8c:	0025883a 	mov	r18,zero
 100de90:	80000005 	stb	zero,0(r16)
 100de94:	00000806 	br	100deb8 <OSTmrRemainGet+0xec>
             return (0);

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
 100de98:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 100de9c:	0025883a 	mov	r18,zero
 100dea0:	00bfe1c4 	movi	r2,-121
 100dea4:	003fdc06 	br	100de18 <OSTmrRemainGet+0x4c>
             return (0);

        default:
             OSTmr_Unlock();
 100dea8:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 100deac:	00bfe344 	movi	r2,-115
 100deb0:	80800005 	stb	r2,0(r16)
 100deb4:	0025883a 	mov	r18,zero
             return (0);
    }
}
 100deb8:	9005883a 	mov	r2,r18
 100debc:	dfc00317 	ldw	ra,12(sp)
 100dec0:	dc800217 	ldw	r18,8(sp)
 100dec4:	dc400117 	ldw	r17,4(sp)
 100dec8:	dc000017 	ldw	r16,0(sp)
 100decc:	dec00404 	addi	sp,sp,16
 100ded0:	f800283a 	ret

0100ded4 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
 100ded4:	defffc04 	addi	sp,sp,-16
 100ded8:	dc400115 	stw	r17,4(sp)
 100dedc:	dc000015 	stw	r16,0(sp)
 100dee0:	dfc00315 	stw	ra,12(sp)
 100dee4:	dc800215 	stw	r18,8(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 100dee8:	20c00003 	ldbu	r3,0(r4)
 100deec:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
 100def0:	2021883a 	mov	r16,r4
 100def4:	2823883a 	mov	r17,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
 100def8:	18800326 	beq	r3,r2,100df08 <OSTmrDel+0x34>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100defc:	0007883a 	mov	r3,zero
 100df00:	00bfe244 	movi	r2,-119
 100df04:	00000606 	br	100df20 <OSTmrDel+0x4c>
        return (OS_FALSE);
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 100df08:	00802034 	movhi	r2,128
 100df0c:	10825904 	addi	r2,r2,2404
 100df10:	10800003 	ldbu	r2,0(r2)
 100df14:	10000426 	beq	r2,zero,100df28 <OSTmrDel+0x54>
        *perr  = OS_ERR_TMR_ISR;
 100df18:	0007883a 	mov	r3,zero
 100df1c:	00bfe2c4 	movi	r2,-117
 100df20:	88800005 	stb	r2,0(r17)
 100df24:	00001e06 	br	100dfa0 <OSTmrDel+0xcc>
        return (OS_FALSE);
    }
    OSTmr_Lock();
 100df28:	100da000 	call	100da00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 100df2c:	80c00c43 	ldbu	r3,49(r16)
 100df30:	00800084 	movi	r2,2
 100df34:	10c00336 	bltu	r2,r3,100df44 <OSTmrDel+0x70>
 100df38:	04800044 	movi	r18,1
 100df3c:	1c800a2e 	bgeu	r3,r18,100df68 <OSTmrDel+0x94>
 100df40:	00000f06 	br	100df80 <OSTmrDel+0xac>
 100df44:	008000c4 	movi	r2,3
 100df48:	1880111e 	bne	r3,r2,100df90 <OSTmrDel+0xbc>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
 100df4c:	8009883a 	mov	r4,r16
 100df50:	100d83c0 	call	100d83c <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 100df54:	8009883a 	mov	r4,r16
 100df58:	100d7340 	call	100d734 <OSTmr_Free>
             OSTmr_Unlock();
 100df5c:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 100df60:	00c00044 	movi	r3,1
 100df64:	00000406 	br	100df78 <OSTmrDel+0xa4>
             return (OS_TRUE);

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
 100df68:	8009883a 	mov	r4,r16
 100df6c:	100d7340 	call	100d734 <OSTmr_Free>
             OSTmr_Unlock();
 100df70:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
 100df74:	9007883a 	mov	r3,r18
 100df78:	88000005 	stb	zero,0(r17)
 100df7c:	00000806 	br	100dfa0 <OSTmrDel+0xcc>
             return (OS_TRUE);

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
 100df80:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 100df84:	0007883a 	mov	r3,zero
 100df88:	00bfe1c4 	movi	r2,-121
 100df8c:	003fe406 	br	100df20 <OSTmrDel+0x4c>
             return (OS_FALSE);

        default:
             OSTmr_Unlock();
 100df90:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 100df94:	00bfe344 	movi	r2,-115
 100df98:	88800005 	stb	r2,0(r17)
 100df9c:	0007883a 	mov	r3,zero
             return (OS_FALSE);
    }
}
 100dfa0:	1805883a 	mov	r2,r3
 100dfa4:	dfc00317 	ldw	ra,12(sp)
 100dfa8:	dc800217 	ldw	r18,8(sp)
 100dfac:	dc400117 	ldw	r17,4(sp)
 100dfb0:	dc000017 	ldw	r16,0(sp)
 100dfb4:	dec00404 	addi	sp,sp,16
 100dfb8:	f800283a 	ret

0100dfbc <OSTmrSignal>:
INT8U  OSTmrSignal (void)
{
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 100dfbc:	00802034 	movhi	r2,128
 100dfc0:	10824b04 	addi	r2,r2,2348
 100dfc4:	11000017 	ldw	r4,0(r2)
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
 100dfc8:	deffff04 	addi	sp,sp,-4
 100dfcc:	dfc00015 	stw	ra,0(sp)
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 100dfd0:	100cba40 	call	100cba4 <OSSemPost>
    return (err);
}
 100dfd4:	10803fcc 	andi	r2,r2,255
 100dfd8:	dfc00017 	ldw	ra,0(sp)
 100dfdc:	dec00104 	addi	sp,sp,4
 100dfe0:	f800283a 	ret

0100dfe4 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
 100dfe4:	defffc04 	addi	sp,sp,-16
 100dfe8:	dc800215 	stw	r18,8(sp)
 100dfec:	dc400115 	stw	r17,4(sp)
 100dff0:	dc000015 	stw	r16,0(sp)
 100dff4:	dfc00315 	stw	ra,12(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 100dff8:	20c00003 	ldbu	r3,0(r4)
 100dffc:	00801904 	movi	r2,100

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
 100e000:	2021883a 	mov	r16,r4
 100e004:	3023883a 	mov	r17,r6
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100e008:	0009883a 	mov	r4,zero

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
 100e00c:	2825883a 	mov	r18,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
 100e010:	18800226 	beq	r3,r2,100e01c <OSTmrNameGet+0x38>
        *perr = OS_ERR_TMR_INVALID_TYPE;
 100e014:	00bfe244 	movi	r2,-119
 100e018:	00000606 	br	100e034 <OSTmrNameGet+0x50>
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 100e01c:	00802034 	movhi	r2,128
 100e020:	10825904 	addi	r2,r2,2404
 100e024:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_NAME_GET_ISR;
 100e028:	0009883a 	mov	r4,zero
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
 100e02c:	10000326 	beq	r2,zero,100e03c <OSTmrNameGet+0x58>
        *perr = OS_ERR_NAME_GET_ISR;
 100e030:	00800444 	movi	r2,17
 100e034:	88800005 	stb	r2,0(r17)
 100e038:	00001506 	br	100e090 <OSTmrNameGet+0xac>
        return (0);
    }
    OSTmr_Lock();
 100e03c:	100da000 	call	100da00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
 100e040:	80c00c43 	ldbu	r3,49(r16)
 100e044:	18000a26 	beq	r3,zero,100e070 <OSTmrNameGet+0x8c>
 100e048:	008000c4 	movi	r2,3
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
 100e04c:	9009883a 	mov	r4,r18
 100e050:	81400804 	addi	r5,r16,32
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OSTmr_Lock();
    switch (ptmr->OSTmrState) {
 100e054:	10c00a36 	bltu	r2,r3,100e080 <OSTmrNameGet+0x9c>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
 100e058:	100b05c0 	call	100b05c <OS_StrCopy>
 100e05c:	1021883a 	mov	r16,r2
             OSTmr_Unlock();
 100e060:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
             return (len);
 100e064:	81003fcc 	andi	r4,r16,255
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
             OSTmr_Unlock();
             *perr = OS_ERR_NONE;
 100e068:	88000005 	stb	zero,0(r17)
 100e06c:	00000806 	br	100e090 <OSTmrNameGet+0xac>
             return (len);

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
 100e070:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
 100e074:	0009883a 	mov	r4,zero
 100e078:	00bfe1c4 	movi	r2,-121
 100e07c:	003fed06 	br	100e034 <OSTmrNameGet+0x50>
             return (0);

        default:
             OSTmr_Unlock();
 100e080:	100da2c0 	call	100da2c <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
 100e084:	00bfe344 	movi	r2,-115
 100e088:	88800005 	stb	r2,0(r17)
 100e08c:	0009883a 	mov	r4,zero
             return (0);
    }
}
 100e090:	2005883a 	mov	r2,r4
 100e094:	dfc00317 	ldw	ra,12(sp)
 100e098:	dc800217 	ldw	r18,8(sp)
 100e09c:	dc400117 	ldw	r17,4(sp)
 100e0a0:	dc000017 	ldw	r16,0(sp)
 100e0a4:	dec00404 	addi	sp,sp,16
 100e0a8:	f800283a 	ret

0100e0ac <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
 100e0ac:	defff804 	addi	sp,sp,-32
 100e0b0:	dd800615 	stw	r22,24(sp)
 100e0b4:	dd400515 	stw	r21,20(sp)
 100e0b8:	dd000415 	stw	r20,16(sp)
 100e0bc:	dcc00315 	stw	r19,12(sp)
 100e0c0:	dc800215 	stw	r18,8(sp)
 100e0c4:	dc400115 	stw	r17,4(sp)
 100e0c8:	dfc00715 	stw	ra,28(sp)
 100e0cc:	dc000015 	stw	r16,0(sp)
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 100e0d0:	00802034 	movhi	r2,128
 100e0d4:	10825904 	addi	r2,r2,2404
 100e0d8:	10800003 	ldbu	r2,0(r2)
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
 100e0dc:	2027883a 	mov	r19,r4
 100e0e0:	2829883a 	mov	r20,r5
 100e0e4:	302b883a 	mov	r21,r6
 100e0e8:	382d883a 	mov	r22,r7
 100e0ec:	dc400917 	ldw	r17,36(sp)
 100e0f0:	dc800a17 	ldw	r18,40(sp)
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
 100e0f4:	10000326 	beq	r2,zero,100e104 <OSTmrCreate+0x58>
        *perr  = OS_ERR_TMR_ISR;
 100e0f8:	0021883a 	mov	r16,zero
 100e0fc:	00bfe2c4 	movi	r2,-117
 100e100:	00001f06 	br	100e180 <OSTmrCreate+0xd4>
        return ((OS_TMR *)0);
    }
    OSTmr_Lock();
 100e104:	100da000 	call	100da00 <OSTmr_Lock>
static  OS_TMR  *OSTmr_Alloc (void)
{
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
 100e108:	01c02034 	movhi	r7,128
 100e10c:	39c24904 	addi	r7,r7,2340
 100e110:	3c000017 	ldw	r16,0(r7)
 100e114:	80001826 	beq	r16,zero,100e178 <OSTmrCreate+0xcc>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
 100e118:	01402034 	movhi	r5,128
 100e11c:	29424e04 	addi	r5,r5,2360
    OSTmrFree--;
 100e120:	01802034 	movhi	r6,128
 100e124:	31825204 	addi	r6,r6,2376
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
 100e128:	2880000b 	ldhu	r2,0(r5)
    OSTmrFree--;
 100e12c:	30c0000b 	ldhu	r3,0(r6)

    if (OSTmrFreeList == (OS_TMR *)0) {
        return ((OS_TMR *)0);
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
 100e130:	81000317 	ldw	r4,12(r16)
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
 100e134:	10800044 	addi	r2,r2,1
    OSTmrFree--;
 100e138:	18ffffc4 	addi	r3,r3,-1
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
 100e13c:	2880000d 	sth	r2,0(r5)

    if (OSTmrFreeList == (OS_TMR *)0) {
        return ((OS_TMR *)0);
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
 100e140:	39000015 	stw	r4,0(r7)
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
    OSTmrFree--;
 100e144:	30c0000d 	sth	r3,0(r6)
    if (ptmr == (OS_TMR *)0) {
        OSTmr_Unlock();
        *perr = OS_ERR_TMR_NON_AVAIL;
        return ((OS_TMR *)0);
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
 100e148:	00800044 	movi	r2,1
 100e14c:	80800c45 	stb	r2,49(r16)
    ptmr->OSTmrDly         = dly;
    ptmr->OSTmrPeriod      = period;
    ptmr->OSTmrOpt         = opt;
 100e150:	85400c05 	stb	r21,48(r16)
    ptmr->OSTmrCallback    = callback;
    ptmr->OSTmrCallbackArg = callback_arg;
 100e154:	d8800817 	ldw	r2,32(sp)
        OSTmr_Unlock();
        *perr = OS_ERR_TMR_NON_AVAIL;
        return ((OS_TMR *)0);
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
    ptmr->OSTmrDly         = dly;
 100e158:	84c00615 	stw	r19,24(r16)
    ptmr->OSTmrPeriod      = period;
 100e15c:	85000715 	stw	r20,28(r16)
    ptmr->OSTmrOpt         = opt;
    ptmr->OSTmrCallback    = callback;
 100e160:	85800115 	stw	r22,4(r16)
    ptmr->OSTmrCallbackArg = callback_arg;
 100e164:	80800215 	stw	r2,8(r16)
    if (OSTmrFreeList == (OS_TMR *)0) {
        return ((OS_TMR *)0);
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
 100e168:	80000315 	stw	zero,12(r16)
    ptmr->OSTmrPrev = (OS_TCB *)0;
 100e16c:	80000415 	stw	zero,16(r16)
    ptmr->OSTmrPeriod      = period;
    ptmr->OSTmrOpt         = opt;
    ptmr->OSTmrCallback    = callback;
    ptmr->OSTmrCallbackArg = callback_arg;
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
 100e170:	8800051e 	bne	r17,zero,100e188 <OSTmrCreate+0xdc>
 100e174:	00001406 	br	100e1c8 <OSTmrCreate+0x11c>
        return ((OS_TMR *)0);
    }
    OSTmr_Lock();
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
    if (ptmr == (OS_TMR *)0) {
        OSTmr_Unlock();
 100e178:	100da2c0 	call	100da2c <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
 100e17c:	00bfe184 	movi	r2,-122
 100e180:	90800005 	stb	r2,0(r18)
 100e184:	00001206 	br	100e1d0 <OSTmrCreate+0x124>
    ptmr->OSTmrOpt         = opt;
    ptmr->OSTmrCallback    = callback;
    ptmr->OSTmrCallbackArg = callback_arg;
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
 100e188:	8809883a 	mov	r4,r17
 100e18c:	100b0880 	call	100b088 <OS_StrLen>
        if (len < OS_TMR_CFG_NAME_SIZE) {
 100e190:	10803fcc 	andi	r2,r2,255
 100e194:	00c003c4 	movi	r3,15
 100e198:	18800436 	bltu	r3,r2,100e1ac <OSTmrCreate+0x100>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
 100e19c:	880b883a 	mov	r5,r17
 100e1a0:	81000804 	addi	r4,r16,32
 100e1a4:	100b05c0 	call	100b05c <OS_StrCopy>
 100e1a8:	00000706 	br	100e1c8 <OSTmrCreate+0x11c>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
 100e1ac:	008008c4 	movi	r2,35
 100e1b0:	80800805 	stb	r2,32(r16)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
 100e1b4:	80000845 	stb	zero,33(r16)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
 100e1b8:	00bfe304 	movi	r2,-116
 100e1bc:	90800005 	stb	r2,0(r18)
            OSTmr_Unlock();
 100e1c0:	100da2c0 	call	100da2c <OSTmr_Unlock>
 100e1c4:	00000206 	br	100e1d0 <OSTmrCreate+0x124>
            return (ptmr);
        }
    }
#endif
    OSTmr_Unlock();
 100e1c8:	100da2c0 	call	100da2c <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
 100e1cc:	90000005 	stb	zero,0(r18)
    return (ptmr);
}
 100e1d0:	8005883a 	mov	r2,r16
 100e1d4:	dfc00717 	ldw	ra,28(sp)
 100e1d8:	dd800617 	ldw	r22,24(sp)
 100e1dc:	dd400517 	ldw	r21,20(sp)
 100e1e0:	dd000417 	ldw	r20,16(sp)
 100e1e4:	dcc00317 	ldw	r19,12(sp)
 100e1e8:	dc800217 	ldw	r18,8(sp)
 100e1ec:	dc400117 	ldw	r17,4(sp)
 100e1f0:	dc000017 	ldw	r16,0(sp)
 100e1f4:	dec00804 	addi	sp,sp,32
 100e1f8:	f800283a 	ret

0100e1fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100e1fc:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100e200:	018001c4 	movi	r6,7
 100e204:	01c0fa04 	movi	r7,1000
 100e208:	01004074 	movhi	r4,257
 100e20c:	21042804 	addi	r4,r4,4256
 100e210:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100e214:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100e218:	100e3200 	call	100e320 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100e21c:	01002034 	movhi	r4,128
 100e220:	21014e04 	addi	r4,r4,1336
 100e224:	01402034 	movhi	r5,128
 100e228:	29422104 	addi	r5,r5,2180
 100e22c:	100e4740 	call	100e474 <alt_dev_llist_insert>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
 100e230:	00c00044 	movi	r3,1
 100e234:	00804074 	movhi	r2,257
 100e238:	10840004 	addi	r2,r2,4096
 100e23c:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
 100e240:	dfc00017 	ldw	ra,0(sp)
 100e244:	dec00104 	addi	sp,sp,4
 100e248:	f800283a 	ret

0100e24c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100e24c:	deffff04 	addi	sp,sp,-4
 100e250:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
 100e254:	100e95c0 	call	100e95c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100e258:	00800044 	movi	r2,1
 100e25c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100e260:	dfc00017 	ldw	ra,0(sp)
 100e264:	dec00104 	addi	sp,sp,4
 100e268:	f800283a 	ret

0100e26c <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100e26c:	20800017 	ldw	r2,0(r4)
 100e270:	21c00217 	ldw	r7,8(r4)
 100e274:	11000a04 	addi	r4,r2,40
 100e278:	100e2ec1 	jmpi	100e2ec <altera_avalon_jtag_uart_write>

0100e27c <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100e27c:	20800017 	ldw	r2,0(r4)
 100e280:	21c00217 	ldw	r7,8(r4)
 100e284:	11000a04 	addi	r4,r2,40
 100e288:	100e28c1 	jmpi	100e28c <altera_avalon_jtag_uart_read>

0100e28c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 100e28c:	21000017 	ldw	r4,0(r4)
 100e290:	3890000c 	andi	r2,r7,16384

  char * ptr = buffer;
  char * end = buffer + space;
 100e294:	2993883a 	add	r9,r5,r6
 100e298:	1010c03a 	cmpne	r8,r2,zero
 100e29c:	2807883a 	mov	r3,r5
 100e2a0:	00000806 	br	100e2c4 <altera_avalon_jtag_uart_read+0x38>

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100e2a4:	21800037 	ldwio	r6,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 100e2a8:	30a0000c 	andi	r2,r6,32768
 100e2ac:	10000326 	beq	r2,zero,100e2bc <altera_avalon_jtag_uart_read+0x30>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100e2b0:	19800005 	stb	r6,0(r3)
 100e2b4:	18c00044 	addi	r3,r3,1
 100e2b8:	00000206 	br	100e2c4 <altera_avalon_jtag_uart_read+0x38>
    else if (ptr != buffer)
 100e2bc:	1940031e 	bne	r3,r5,100e2cc <altera_avalon_jtag_uart_read+0x40>
      break;
    else if(flags & O_NONBLOCK)
 100e2c0:	4000081e 	bne	r8,zero,100e2e4 <altera_avalon_jtag_uart_read+0x58>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 100e2c4:	1a7ff736 	bltu	r3,r9,100e2a4 <altera_avalon_jtag_uart_read+0x18>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 100e2c8:	19400226 	beq	r3,r5,100e2d4 <altera_avalon_jtag_uart_read+0x48>
    return ptr - buffer;
 100e2cc:	1945c83a 	sub	r2,r3,r5
 100e2d0:	f800283a 	ret
  else if (flags & O_NONBLOCK)
 100e2d4:	3890000c 	andi	r2,r7,16384
 100e2d8:	1000021e 	bne	r2,zero,100e2e4 <altera_avalon_jtag_uart_read+0x58>
 100e2dc:	00bffec4 	movi	r2,-5
 100e2e0:	f800283a 	ret
 100e2e4:	00bffd44 	movi	r2,-11
    return -EWOULDBLOCK;
  else
    return -EIO;
}
 100e2e8:	f800283a 	ret

0100e2ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 100e2ec:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
 100e2f0:	298f883a 	add	r7,r5,r6
 100e2f4:	20c00104 	addi	r3,r4,4
 100e2f8:	00000606 	br	100e314 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 100e2fc:	18800037 	ldwio	r2,0(r3)
 100e300:	10bfffec 	andhi	r2,r2,65535
 100e304:	10000326 	beq	r2,zero,100e314 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 100e308:	28800007 	ldb	r2,0(r5)
 100e30c:	29400044 	addi	r5,r5,1
 100e310:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 100e314:	29fff936 	bltu	r5,r7,100e2fc <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
 100e318:	3005883a 	mov	r2,r6
 100e31c:	f800283a 	ret

0100e320 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100e320:	02002034 	movhi	r8,128
 100e324:	42024504 	addi	r8,r8,2324
 100e328:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100e32c:	defffe04 	addi	sp,sp,-8
 100e330:	3807883a 	mov	r3,r7
 100e334:	dfc00115 	stw	ra,4(sp)
 100e338:	200f883a 	mov	r7,r4
 100e33c:	1000011e 	bne	r2,zero,100e344 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
 100e340:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100e344:	008001c4 	movi	r2,7
 100e348:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 100e34c:	2809883a 	mov	r4,r5
 100e350:	300b883a 	mov	r5,r6
 100e354:	01804074 	movhi	r6,257
 100e358:	31b8dc04 	addi	r6,r6,-7312
 100e35c:	d8000015 	stw	zero,0(sp)
 100e360:	100e6000 	call	100e600 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 100e364:	dfc00117 	ldw	ra,4(sp)
 100e368:	dec00204 	addi	sp,sp,8
 100e36c:	f800283a 	ret

0100e370 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100e370:	defffe04 	addi	sp,sp,-8
 100e374:	dfc00115 	stw	ra,4(sp)
 100e378:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100e37c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100e380:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e384:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e388:	00bfff84 	movi	r2,-2
 100e38c:	8084703a 	and	r2,r16,r2
 100e390:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 100e394:	100ac780 	call	100ac78 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e398:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 100e39c:	dfc00117 	ldw	ra,4(sp)
 100e3a0:	dc000017 	ldw	r16,0(sp)
 100e3a4:	dec00204 	addi	sp,sp,8
 100e3a8:	f800283a 	ret

0100e3ac <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 100e3ac:	00802034 	movhi	r2,128
 100e3b0:	10822404 	addi	r2,r2,2192
 100e3b4:	10c00017 	ldw	r3,0(r2)
}
 100e3b8:	00802034 	movhi	r2,128
 100e3bc:	10826304 	addi	r2,r2,2444

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 100e3c0:	18000126 	beq	r3,zero,100e3c8 <alt_get_errno+0x1c>
 100e3c4:	1800683a 	jmp	r3
}
 100e3c8:	f800283a 	ret

0100e3cc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100e3cc:	defffd04 	addi	sp,sp,-12
 100e3d0:	dc000015 	stw	r16,0(sp)
 100e3d4:	dfc00215 	stw	ra,8(sp)
 100e3d8:	dc400115 	stw	r17,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100e3dc:	01400304 	movi	r5,12
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100e3e0:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100e3e4:	20001216 	blt	r4,zero,100e430 <close+0x64>
 100e3e8:	100a1fc0 	call	100a1fc <__mulsi3>
 100e3ec:	00c02034 	movhi	r3,128
 100e3f0:	18c16304 	addi	r3,r3,1420
 100e3f4:	10c9883a 	add	r4,r2,r3

  if (fd)
 100e3f8:	20000d26 	beq	r4,zero,100e430 <close+0x64>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100e3fc:	20800017 	ldw	r2,0(r4)
 100e400:	10800417 	ldw	r2,16(r2)
 100e404:	10000f26 	beq	r2,zero,100e444 <close+0x78>
 100e408:	103ee83a 	callr	r2
 100e40c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100e410:	8009883a 	mov	r4,r16
 100e414:	100e9000 	call	100e900 <alt_release_fd>
    if (rval < 0)
 100e418:	0009883a 	mov	r4,zero
 100e41c:	88000c0e 	bge	r17,zero,100e450 <close+0x84>
    {
      ALT_ERRNO = -rval;
 100e420:	100e3ac0 	call	100e3ac <alt_get_errno>
 100e424:	0447c83a 	sub	r3,zero,r17
 100e428:	013fffc4 	movi	r4,-1
 100e42c:	00000306 	br	100e43c <close+0x70>
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100e430:	100e3ac0 	call	100e3ac <alt_get_errno>
 100e434:	013fffc4 	movi	r4,-1
 100e438:	00c01444 	movi	r3,81
 100e43c:	10c00015 	stw	r3,0(r2)
 100e440:	00000306 	br	100e450 <close+0x84>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100e444:	8009883a 	mov	r4,r16
 100e448:	100e9000 	call	100e900 <alt_release_fd>
 100e44c:	0009883a 	mov	r4,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 100e450:	2005883a 	mov	r2,r4
 100e454:	dfc00217 	ldw	ra,8(sp)
 100e458:	dc400117 	ldw	r17,4(sp)
 100e45c:	dc000017 	ldw	r16,0(sp)
 100e460:	dec00304 	addi	sp,sp,12
 100e464:	f800283a 	ret

0100e468 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100e468:	f800283a 	ret

0100e46c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 100e46c:	3005883a 	mov	r2,r6
 100e470:	f800283a 	ret

0100e474 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100e474:	deffff04 	addi	sp,sp,-4
 100e478:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100e47c:	20000326 	beq	r4,zero,100e48c <alt_dev_llist_insert+0x18>
 100e480:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
 100e484:	000d883a 	mov	r6,zero
 100e488:	10000c1e 	bne	r2,zero,100e4bc <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 100e48c:	00802034 	movhi	r2,128
 100e490:	10822404 	addi	r2,r2,2192
 100e494:	10800017 	ldw	r2,0(r2)
 100e498:	00c02034 	movhi	r3,128
 100e49c:	18c26304 	addi	r3,r3,2444
 100e4a0:	10000226 	beq	r2,zero,100e4ac <alt_dev_llist_insert+0x38>
 100e4a4:	103ee83a 	callr	r2
 100e4a8:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
 100e4ac:	00800584 	movi	r2,22
 100e4b0:	01bffa84 	movi	r6,-22
 100e4b4:	18800015 	stw	r2,0(r3)
 100e4b8:	00000606 	br	100e4d4 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 100e4bc:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100e4c0:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 100e4c4:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 100e4c8:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
 100e4cc:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 100e4d0:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 100e4d4:	3005883a 	mov	r2,r6
 100e4d8:	dfc00017 	ldw	ra,0(sp)
 100e4dc:	dec00104 	addi	sp,sp,4
 100e4e0:	f800283a 	ret

0100e4e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100e4e4:	defffe04 	addi	sp,sp,-8
 100e4e8:	dc000015 	stw	r16,0(sp)
 100e4ec:	04004074 	movhi	r16,257
 100e4f0:	843d2304 	addi	r16,r16,-2932
 100e4f4:	dfc00115 	stw	ra,4(sp)
 100e4f8:	00000306 	br	100e508 <_do_ctors+0x24>
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
        (*ctor) (); 
 100e4fc:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100e500:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
 100e504:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100e508:	00804074 	movhi	r2,257
 100e50c:	10bd2304 	addi	r2,r2,-2932
 100e510:	80bffa2e 	bgeu	r16,r2,100e4fc <_do_ctors+0x18>
        (*ctor) (); 
}
 100e514:	dfc00117 	ldw	ra,4(sp)
 100e518:	dc000017 	ldw	r16,0(sp)
 100e51c:	dec00204 	addi	sp,sp,8
 100e520:	f800283a 	ret

0100e524 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100e524:	defffe04 	addi	sp,sp,-8
 100e528:	dc000015 	stw	r16,0(sp)
 100e52c:	04004074 	movhi	r16,257
 100e530:	843d2304 	addi	r16,r16,-2932
 100e534:	dfc00115 	stw	ra,4(sp)
 100e538:	00000306 	br	100e548 <_do_dtors+0x24>
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
        (*dtor) (); 
 100e53c:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100e540:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
 100e544:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100e548:	00804074 	movhi	r2,257
 100e54c:	10bd2404 	addi	r2,r2,-2928
 100e550:	80bffa2e 	bgeu	r16,r2,100e53c <_do_dtors+0x18>
        (*dtor) (); 
}
 100e554:	dfc00117 	ldw	ra,4(sp)
 100e558:	dc000017 	ldw	r16,0(sp)
 100e55c:	dec00204 	addi	sp,sp,8
 100e560:	f800283a 	ret

0100e564 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 100e564:	f800283a 	ret

0100e568 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100e568:	000530fa 	rdctl	r2,ienable
 100e56c:	00c00044 	movi	r3,1
 100e570:	1946983a 	sll	r3,r3,r5
 100e574:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
 100e578:	1004c03a 	cmpne	r2,r2,zero
 100e57c:	f800283a 	ret

0100e580 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e580:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e584:	00bfff84 	movi	r2,-2
 100e588:	3084703a 	and	r2,r6,r2
 100e58c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 100e590:	01002034 	movhi	r4,128
 100e594:	21026104 	addi	r4,r4,2436
 100e598:	00c00044 	movi	r3,1
 100e59c:	20800017 	ldw	r2,0(r4)
 100e5a0:	1946983a 	sll	r3,r3,r5
 100e5a4:	10c4b03a 	or	r2,r2,r3
 100e5a8:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100e5ac:	20800017 	ldw	r2,0(r4)
 100e5b0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e5b4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
 100e5b8:	0005883a 	mov	r2,zero
 100e5bc:	f800283a 	ret

0100e5c0 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e5c0:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e5c4:	00bfff84 	movi	r2,-2
 100e5c8:	3084703a 	and	r2,r6,r2
 100e5cc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 100e5d0:	01002034 	movhi	r4,128
 100e5d4:	21026104 	addi	r4,r4,2436
 100e5d8:	00ffff84 	movi	r3,-2
 100e5dc:	20800017 	ldw	r2,0(r4)
 100e5e0:	1946183a 	rol	r3,r3,r5
 100e5e4:	10c4703a 	and	r2,r2,r3
 100e5e8:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100e5ec:	20800017 	ldw	r2,0(r4)
 100e5f0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e5f4:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
 100e5f8:	0005883a 	mov	r2,zero
 100e5fc:	f800283a 	ret

0100e600 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100e600:	100e6041 	jmpi	100e604 <alt_iic_isr_register>

0100e604 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100e604:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100e608:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100e60c:	dfc00115 	stw	ra,4(sp)
 100e610:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100e614:	00fffa84 	movi	r3,-22
 100e618:	11401016 	blt	r2,r5,100e65c <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100e61c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e620:	00bfff84 	movi	r2,-2
 100e624:	8084703a 	and	r2,r16,r2
 100e628:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 100e62c:	280490fa 	slli	r2,r5,3
 100e630:	00c02074 	movhi	r3,129
 100e634:	18c60704 	addi	r3,r3,6172
 100e638:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
 100e63c:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 100e640:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100e644:	30000226 	beq	r6,zero,100e650 <alt_iic_isr_register+0x4c>
 100e648:	100e5800 	call	100e580 <alt_ic_irq_enable>
 100e64c:	00000106 	br	100e654 <alt_iic_isr_register+0x50>
 100e650:	100e5c00 	call	100e5c0 <alt_ic_irq_disable>
 100e654:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100e658:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 100e65c:	1805883a 	mov	r2,r3
 100e660:	dfc00117 	ldw	ra,4(sp)
 100e664:	dc000017 	ldw	r16,0(sp)
 100e668:	dec00204 	addi	sp,sp,8
 100e66c:	f800283a 	ret

0100e670 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100e670:	defffd04 	addi	sp,sp,-12
 100e674:	dc400115 	stw	r17,4(sp)
 100e678:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
 100e67c:	2809883a 	mov	r4,r5
 100e680:	300b883a 	mov	r5,r6
 100e684:	380d883a 	mov	r6,r7
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100e688:	dc000015 	stw	r16,0(sp)
 100e68c:	dfc00215 	stw	ra,8(sp)
  int old;

  old = open (name, flags, mode);
 100e690:	100e7840 	call	100e784 <open>
 100e694:	1021883a 	mov	r16,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 100e698:	1009883a 	mov	r4,r2
 100e69c:	01400304 	movi	r5,12
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
 100e6a0:	10001016 	blt	r2,zero,100e6e4 <alt_open_fd+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
 100e6a4:	100a1fc0 	call	100a1fc <__mulsi3>
 100e6a8:	00c02034 	movhi	r3,128
 100e6ac:	18c16304 	addi	r3,r3,1420
 100e6b0:	10c5883a 	add	r2,r2,r3
 100e6b4:	11000017 	ldw	r4,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100e6b8:	10c00217 	ldw	r3,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 100e6bc:	10800117 	ldw	r2,4(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 100e6c0:	89000015 	stw	r4,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 100e6c4:	8009883a 	mov	r4,r16

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100e6c8:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 100e6cc:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
 100e6d0:	dfc00217 	ldw	ra,8(sp)
 100e6d4:	dc400117 	ldw	r17,4(sp)
 100e6d8:	dc000017 	ldw	r16,0(sp)
 100e6dc:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 100e6e0:	100e9001 	jmpi	100e900 <alt_release_fd>
  }
} 
 100e6e4:	dfc00217 	ldw	ra,8(sp)
 100e6e8:	dc400117 	ldw	r17,4(sp)
 100e6ec:	dc000017 	ldw	r16,0(sp)
 100e6f0:	dec00304 	addi	sp,sp,12
 100e6f4:	f800283a 	ret

0100e6f8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100e6f8:	defffa04 	addi	sp,sp,-24
 100e6fc:	dcc00315 	stw	r19,12(sp)
 100e700:	dc400115 	stw	r17,4(sp)
 100e704:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100e708:	04407fc4 	movi	r17,511
 100e70c:	04002034 	movhi	r16,128
 100e710:	84016604 	addi	r16,r16,1432
 100e714:	04c00044 	movi	r19,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100e718:	dd000415 	stw	r20,16(sp)
 100e71c:	dc800215 	stw	r18,8(sp)
 100e720:	3029883a 	mov	r20,r6
 100e724:	2825883a 	mov	r18,r5
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100e728:	980d883a 	mov	r6,r19
 100e72c:	200b883a 	mov	r5,r4
 100e730:	880f883a 	mov	r7,r17
 100e734:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100e738:	dfc00515 	stw	ra,20(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100e73c:	100e6700 	call	100e670 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100e740:	900b883a 	mov	r5,r18
 100e744:	813ffd04 	addi	r4,r16,-12
 100e748:	880f883a 	mov	r7,r17
 100e74c:	000d883a 	mov	r6,zero
 100e750:	100e6700 	call	100e670 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100e754:	81000304 	addi	r4,r16,12
 100e758:	a00b883a 	mov	r5,r20
 100e75c:	980d883a 	mov	r6,r19
 100e760:	880f883a 	mov	r7,r17
}  
 100e764:	dfc00517 	ldw	ra,20(sp)
 100e768:	dd000417 	ldw	r20,16(sp)
 100e76c:	dcc00317 	ldw	r19,12(sp)
 100e770:	dc800217 	ldw	r18,8(sp)
 100e774:	dc400117 	ldw	r17,4(sp)
 100e778:	dc000017 	ldw	r16,0(sp)
 100e77c:	dec00604 	addi	sp,sp,24
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100e780:	100e6701 	jmpi	100e670 <alt_open_fd>

0100e784 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100e784:	defff904 	addi	sp,sp,-28
 100e788:	dd000415 	stw	r20,16(sp)
 100e78c:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100e790:	01402034 	movhi	r5,128
 100e794:	29422104 	addi	r5,r5,2180
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100e798:	dd400515 	stw	r21,20(sp)
 100e79c:	dcc00315 	stw	r19,12(sp)
 100e7a0:	dc000015 	stw	r16,0(sp)
 100e7a4:	dfc00615 	stw	ra,24(sp)
 100e7a8:	dc800215 	stw	r18,8(sp)
 100e7ac:	dc400115 	stw	r17,4(sp)
 100e7b0:	302b883a 	mov	r21,r6
 100e7b4:	2027883a 	mov	r19,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100e7b8:	100eac40 	call	100eac4 <alt_find_dev>
 100e7bc:	1021883a 	mov	r16,r2
 100e7c0:	10000226 	beq	r2,zero,100e7cc <open+0x48>
 100e7c4:	0025883a 	mov	r18,zero
 100e7c8:	00000a06 	br	100e7f4 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100e7cc:	9809883a 	mov	r4,r19
 100e7d0:	100eb340 	call	100eb34 <alt_find_file>
 100e7d4:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100e7d8:	1000051e 	bne	r2,zero,100e7f0 <open+0x6c>
 100e7dc:	047fffc4 	movi	r17,-1
 100e7e0:	043ffb44 	movi	r16,-19
 100e7e4:	00002b06 	br	100e894 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100e7e8:	043ffcc4 	movi	r16,-13
 100e7ec:	00002906 	br	100e894 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100e7f0:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
 100e7f4:	8009883a 	mov	r4,r16
 100e7f8:	100ebd00 	call	100ebd0 <alt_get_fd>
 100e7fc:	1023883a 	mov	r17,r2
 100e800:	10003316 	blt	r2,zero,100e8d0 <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 100e804:	1009883a 	mov	r4,r2
 100e808:	01400304 	movi	r5,12
 100e80c:	100a1fc0 	call	100a1fc <__mulsi3>
 100e810:	01402034 	movhi	r5,128
 100e814:	29416304 	addi	r5,r5,1420
 100e818:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100e81c:	00900034 	movhi	r2,16384
 100e820:	10bfffc4 	addi	r2,r2,-1
 100e824:	a086703a 	and	r3,r20,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100e828:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100e82c:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100e830:	1000101e 	bne	r2,zero,100e874 <open+0xf0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100e834:	00802034 	movhi	r2,128
 100e838:	10822304 	addi	r2,r2,2188
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100e83c:	21800017 	ldw	r6,0(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100e840:	11c00017 	ldw	r7,0(r2)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100e844:	18900034 	orhi	r2,r3,16384
 100e848:	20800215 	stw	r2,8(r4)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100e84c:	2807883a 	mov	r3,r5
 100e850:	000b883a 	mov	r5,zero
 100e854:	18800017 	ldw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100e858:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100e85c:	1180031e 	bne	r2,r6,100e86c <open+0xe8>
 100e860:	18800217 	ldw	r2,8(r3)
 100e864:	1000010e 	bge	r2,zero,100e86c <open+0xe8>
 100e868:	193fdf1e 	bne	r3,r4,100e7e8 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100e86c:	18c00304 	addi	r3,r3,12
 100e870:	397ff82e 	bgeu	r7,r5,100e854 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100e874:	80800317 	ldw	r2,12(r16)
 100e878:	10001726 	beq	r2,zero,100e8d8 <open+0x154>
 100e87c:	980b883a 	mov	r5,r19
 100e880:	a00d883a 	mov	r6,r20
 100e884:	a80f883a 	mov	r7,r21
 100e888:	103ee83a 	callr	r2
 100e88c:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100e890:	1000110e 	bge	r2,zero,100e8d8 <open+0x154>
  {
    alt_release_fd (index);  
 100e894:	8809883a 	mov	r4,r17
 100e898:	100e9000 	call	100e900 <alt_release_fd>
 100e89c:	00802034 	movhi	r2,128
 100e8a0:	10822404 	addi	r2,r2,2192
 100e8a4:	10800017 	ldw	r2,0(r2)
 100e8a8:	1000031e 	bne	r2,zero,100e8b8 <open+0x134>
 100e8ac:	00c02034 	movhi	r3,128
 100e8b0:	18c26304 	addi	r3,r3,2444
 100e8b4:	00000206 	br	100e8c0 <open+0x13c>
 100e8b8:	103ee83a 	callr	r2
 100e8bc:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
 100e8c0:	0405c83a 	sub	r2,zero,r16
 100e8c4:	047fffc4 	movi	r17,-1
 100e8c8:	18800015 	stw	r2,0(r3)
 100e8cc:	00000206 	br	100e8d8 <open+0x154>
 100e8d0:	1021883a 	mov	r16,r2
 100e8d4:	003fef06 	br	100e894 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
 100e8d8:	8805883a 	mov	r2,r17
 100e8dc:	dfc00617 	ldw	ra,24(sp)
 100e8e0:	dd400517 	ldw	r21,20(sp)
 100e8e4:	dd000417 	ldw	r20,16(sp)
 100e8e8:	dcc00317 	ldw	r19,12(sp)
 100e8ec:	dc800217 	ldw	r18,8(sp)
 100e8f0:	dc400117 	ldw	r17,4(sp)
 100e8f4:	dc000017 	ldw	r16,0(sp)
 100e8f8:	dec00704 	addi	sp,sp,28
 100e8fc:	f800283a 	ret

0100e900 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100e900:	defffd04 	addi	sp,sp,-12
  if (fd > 2)
 100e904:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100e908:	dc400115 	stw	r17,4(sp)
 100e90c:	dc000015 	stw	r16,0(sp)
 100e910:	dfc00215 	stw	ra,8(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
 100e914:	01400304 	movi	r5,12
 100e918:	04402034 	movhi	r17,128
 100e91c:	8c416304 	addi	r17,r17,1420
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100e920:	2021883a 	mov	r16,r4
  if (fd > 2)
 100e924:	1100080e 	bge	r2,r4,100e948 <alt_release_fd+0x48>
  {
    alt_fd_list[fd].fd_flags = 0;
 100e928:	100a1fc0 	call	100a1fc <__mulsi3>
 100e92c:	1445883a 	add	r2,r2,r17
    alt_fd_list[fd].dev      = 0;
 100e930:	8009883a 	mov	r4,r16
 100e934:	01400304 	movi	r5,12

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
 100e938:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
 100e93c:	100a1fc0 	call	100a1fc <__mulsi3>
 100e940:	1445883a 	add	r2,r2,r17
 100e944:	10000015 	stw	zero,0(r2)
  }
}
 100e948:	dfc00217 	ldw	ra,8(sp)
 100e94c:	dc400117 	ldw	r17,4(sp)
 100e950:	dc000017 	ldw	r16,0(sp)
 100e954:	dec00304 	addi	sp,sp,12
 100e958:	f800283a 	ret

0100e95c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 100e95c:	000170fa 	wrctl	ienable,zero
}
 100e960:	f800283a 	ret

0100e964 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 100e964:	defff504 	addi	sp,sp,-44

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 100e968:	d1205f17 	ldw	r4,-32388(gp)

      stw ra,  0(sp)
 100e96c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 100e970:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 100e974:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 100e978:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 100e97c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 100e980:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 100e984:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 100e988:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 100e98c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 100e990:	dc000915 	stw	r16,36(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 100e994:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 100e998:	100ea500 	call	100ea50 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 100e99c:	d1205b17 	ldw	r4,-32404(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 100e9a0:	d1605387 	ldb	r5,-32434(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 100e9a4:	d1205f15 	stw	r4,-32388(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 100e9a8:	d16053c5 	stb	r5,-32433(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 100e9ac:	26c00017 	ldw	sp,0(r4)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 100e9b0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 100e9b4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 100e9b8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 100e9bc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 100e9c0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 100e9c4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 100e9c8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 100e9cc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 100e9d0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 100e9d4:	dc000917 	ldw	r16,36(sp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 100e9d8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 100e9dc:	f800283a 	ret

0100e9e0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 100e9e0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 100e9e4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 100e9e8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 100e9ec:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 100e9f0:	100ea500 	call	100ea50 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 100e9f4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 100e9f8:	d4a05105 	stb	r18,-32444(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 100e9fc:	003fe706 	br	100e99c <OSCtxSw+0x38>

0100ea00 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 100ea00:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 100ea04:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 100ea08:	10800054 	ori	r2,r2,1
      wrctl status, r2
 100ea0c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 100ea10:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 100ea14:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 100ea18:	dec00204 	addi	sp,sp,8

      callr r2
 100ea1c:	103ee83a 	callr	r2

      nop
 100ea20:	0001883a 	nop

0100ea24 <OSTaskStkInit>:

   frame_pointer = (INT32U*) local_impure_ptr;
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 100ea24:	00bfff04 	movi	r2,-4
 100ea28:	3084703a 	and	r2,r6,r2
 100ea2c:	10bff304 	addi	r2,r2,-52
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 100ea30:	00c04074 	movhi	r3,257
 100ea34:	18fa8104 	addi	r3,r3,-5628
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 100ea38:	11000c15 	stw	r4,48(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 100ea3c:	11400b15 	stw	r5,44(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 100ea40:	10c00015 	stw	r3,0(r2)
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
}
 100ea44:	f800283a 	ret

0100ea48 <OSTaskCreateHook>:
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 100ea48:	f800283a 	ret

0100ea4c <OSTaskDelHook>:
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 100ea4c:	f800283a 	ret

0100ea50 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
}
 100ea50:	f800283a 	ret

0100ea54 <OSTaskStatHook>:
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
}
 100ea54:	f800283a 	ret

0100ea58 <OSInitHookBegin>:
}

void OSInitHookBegin(void)
{
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
 100ea58:	d020670d 	sth	zero,-32356(gp)
#endif
}
 100ea5c:	f800283a 	ret

0100ea60 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
}
 100ea60:	f800283a 	ret

0100ea64 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
}
 100ea64:	f800283a 	ret

0100ea68 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
}
 100ea68:	f800283a 	ret

0100ea6c <OSTimeTickHook>:
#endif

void OSTimeTickHook (void)
{
#if OS_TMR_EN > 0
    OSTmrCtr++;
 100ea6c:	d0a0670b 	ldhu	r2,-32356(gp)
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 100ea70:	deffff04 	addi	sp,sp,-4
 100ea74:	dfc00015 	stw	ra,0(sp)
#if OS_TMR_EN > 0
    OSTmrCtr++;
 100ea78:	10800044 	addi	r2,r2,1
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 100ea7c:	113fffcc 	andi	r4,r2,65535
#endif

void OSTimeTickHook (void)
{
#if OS_TMR_EN > 0
    OSTmrCtr++;
 100ea80:	d0a0670d 	sth	r2,-32356(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 100ea84:	1009ea80 	call	1009ea8 <__floatsidf>
 100ea88:	0011883a 	mov	r8,zero
 100ea8c:	02501674 	movhi	r9,16473
 100ea90:	180b883a 	mov	r5,r3
 100ea94:	480f883a 	mov	r7,r9
 100ea98:	1009883a 	mov	r4,r2
 100ea9c:	400d883a 	mov	r6,r8
 100eaa0:	100f2480 	call	100f248 <__gedf2>
 100eaa4:	10000416 	blt	r2,zero,100eab8 <OSTimeTickHook+0x4c>
        OSTmrCtr = 0;
 100eaa8:	d020670d 	sth	zero,-32356(gp)
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 100eaac:	dfc00017 	ldw	ra,0(sp)
 100eab0:	dec00104 	addi	sp,sp,4
{
#if OS_TMR_EN > 0
    OSTmrCtr++;
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
        OSTmrCtr = 0;
        OSTmrSignal();
 100eab4:	100dfbc1 	jmpi	100dfbc <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 100eab8:	dfc00017 	ldw	ra,0(sp)
 100eabc:	dec00104 	addi	sp,sp,4
 100eac0:	f800283a 	ret

0100eac4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100eac4:	defffb04 	addi	sp,sp,-20
 100eac8:	dcc00315 	stw	r19,12(sp)
 100eacc:	dc800215 	stw	r18,8(sp)
 100ead0:	dc400115 	stw	r17,4(sp)
 100ead4:	dc000015 	stw	r16,0(sp)
 100ead8:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
 100eadc:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100eae0:	2823883a 	mov	r17,r5
 100eae4:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
 100eae8:	100edc80 	call	100edc8 <strlen>
 100eaec:	14800044 	addi	r18,r2,1
 100eaf0:	00000406 	br	100eb04 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100eaf4:	81000217 	ldw	r4,8(r16)
 100eaf8:	100eca80 	call	100eca8 <memcmp>
 100eafc:	10000526 	beq	r2,zero,100eb14 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 100eb00:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100eb04:	980b883a 	mov	r5,r19
 100eb08:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100eb0c:	847ff91e 	bne	r16,r17,100eaf4 <alt_find_dev+0x30>
 100eb10:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
 100eb14:	8005883a 	mov	r2,r16
 100eb18:	dfc00417 	ldw	ra,16(sp)
 100eb1c:	dcc00317 	ldw	r19,12(sp)
 100eb20:	dc800217 	ldw	r18,8(sp)
 100eb24:	dc400117 	ldw	r17,4(sp)
 100eb28:	dc000017 	ldw	r16,0(sp)
 100eb2c:	dec00504 	addi	sp,sp,20
 100eb30:	f800283a 	ret

0100eb34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100eb34:	defffc04 	addi	sp,sp,-16
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100eb38:	00802034 	movhi	r2,128
 100eb3c:	10821f04 	addi	r2,r2,2172
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100eb40:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100eb44:	14400017 	ldw	r17,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100eb48:	dc800215 	stw	r18,8(sp)
 100eb4c:	2025883a 	mov	r18,r4
 100eb50:	dfc00315 	stw	ra,12(sp)
 100eb54:	dc000015 	stw	r16,0(sp)
 100eb58:	00001206 	br	100eba4 <alt_find_file+0x70>
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
 100eb5c:	8c000217 	ldw	r16,8(r17)
 100eb60:	8009883a 	mov	r4,r16
 100eb64:	100edc80 	call	100edc8 <strlen>
 100eb68:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
 100eb6c:	8085883a 	add	r2,r16,r2
 100eb70:	10bfffc7 	ldb	r2,-1(r2)
 100eb74:	00c00bc4 	movi	r3,47
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100eb78:	8009883a 	mov	r4,r16
 100eb7c:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 100eb80:	10c0011e 	bne	r2,r3,100eb88 <alt_find_file+0x54>
    {
      len -= 1;
 100eb84:	31bfffc4 	addi	r6,r6,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100eb88:	9185883a 	add	r2,r18,r6
 100eb8c:	10800007 	ldb	r2,0(r2)
 100eb90:	10c00126 	beq	r2,r3,100eb98 <alt_find_file+0x64>
 100eb94:	1000021e 	bne	r2,zero,100eba0 <alt_find_file+0x6c>
 100eb98:	100eca80 	call	100eca8 <memcmp>
 100eb9c:	10000526 	beq	r2,zero,100ebb4 <alt_find_file+0x80>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 100eba0:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100eba4:	00802034 	movhi	r2,128
 100eba8:	10821f04 	addi	r2,r2,2172
 100ebac:	88bfeb1e 	bne	r17,r2,100eb5c <alt_find_file+0x28>
 100ebb0:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
 100ebb4:	8805883a 	mov	r2,r17
 100ebb8:	dfc00317 	ldw	ra,12(sp)
 100ebbc:	dc800217 	ldw	r18,8(sp)
 100ebc0:	dc400117 	ldw	r17,4(sp)
 100ebc4:	dc000017 	ldw	r16,0(sp)
 100ebc8:	dec00404 	addi	sp,sp,16
 100ebcc:	f800283a 	ret

0100ebd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100ebd0:	defffd04 	addi	sp,sp,-12

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 100ebd4:	00802034 	movhi	r2,128
 100ebd8:	10826004 	addi	r2,r2,2432
 100ebdc:	dc000115 	stw	r16,4(sp)
 100ebe0:	2021883a 	mov	r16,r4
 100ebe4:	11000017 	ldw	r4,0(r2)
 100ebe8:	000b883a 	mov	r5,zero
 100ebec:	d80d883a 	mov	r6,sp
 100ebf0:	dfc00215 	stw	ra,8(sp)
 100ebf4:	100ccc40 	call	100ccc4 <OSSemPend>
 100ebf8:	01002034 	movhi	r4,128
 100ebfc:	21016304 	addi	r4,r4,1420
 100ec00:	0007883a 	mov	r3,zero
 100ec04:	200b883a 	mov	r5,r4
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
 100ec08:	20800017 	ldw	r2,0(r4)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100ec0c:	21000304 	addi	r4,r4,12
  {
    if (!alt_fd_list[i].dev)
 100ec10:	10000a1e 	bne	r2,zero,100ec3c <alt_get_fd+0x6c>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
 100ec14:	01002034 	movhi	r4,128
 100ec18:	21022304 	addi	r4,r4,2188
 100ec1c:	20800017 	ldw	r2,0(r4)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
 100ec20:	2c000015 	stw	r16,0(r5)
      if (i > alt_max_fd)
 100ec24:	10c00216 	blt	r2,r3,100ec30 <alt_get_fd+0x60>
 100ec28:	1821883a 	mov	r16,r3
 100ec2c:	00000806 	br	100ec50 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 100ec30:	1821883a 	mov	r16,r3
 100ec34:	20c00015 	stw	r3,0(r4)
 100ec38:	00000506 	br	100ec50 <alt_get_fd+0x80>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100ec3c:	18c00044 	addi	r3,r3,1
 100ec40:	00800804 	movi	r2,32
 100ec44:	29400304 	addi	r5,r5,12
 100ec48:	18bfef1e 	bne	r3,r2,100ec08 <alt_get_fd+0x38>
 100ec4c:	043ffa04 	movi	r16,-24
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 100ec50:	00802034 	movhi	r2,128
 100ec54:	10826004 	addi	r2,r2,2432
 100ec58:	11000017 	ldw	r4,0(r2)
 100ec5c:	100cba40 	call	100cba4 <OSSemPost>

  return rc;
}
 100ec60:	8005883a 	mov	r2,r16
 100ec64:	dfc00217 	ldw	ra,8(sp)
 100ec68:	dc000117 	ldw	r16,4(sp)
 100ec6c:	dec00304 	addi	sp,sp,12
 100ec70:	f800283a 	ret

0100ec74 <atexit>:
 100ec74:	200b883a 	mov	r5,r4
 100ec78:	000d883a 	mov	r6,zero
 100ec7c:	0009883a 	mov	r4,zero
 100ec80:	000f883a 	mov	r7,zero
 100ec84:	100ede81 	jmpi	100ede8 <__register_exitproc>

0100ec88 <exit>:
 100ec88:	defffe04 	addi	sp,sp,-8
 100ec8c:	dc400015 	stw	r17,0(sp)
 100ec90:	000b883a 	mov	r5,zero
 100ec94:	2023883a 	mov	r17,r4
 100ec98:	dfc00115 	stw	ra,4(sp)
 100ec9c:	100ef580 	call	100ef58 <__call_exitprocs>
 100eca0:	8809883a 	mov	r4,r17
 100eca4:	100f3980 	call	100f398 <_exit>

0100eca8 <memcmp>:
 100eca8:	31ffffc4 	addi	r7,r6,-1
 100ecac:	3000061e 	bne	r6,zero,100ecc8 <memcmp+0x20>
 100ecb0:	00000a06 	br	100ecdc <memcmp+0x34>
 100ecb4:	39ffffc4 	addi	r7,r7,-1
 100ecb8:	00bfffc4 	movi	r2,-1
 100ecbc:	21000044 	addi	r4,r4,1
 100ecc0:	29400044 	addi	r5,r5,1
 100ecc4:	38800526 	beq	r7,r2,100ecdc <memcmp+0x34>
 100ecc8:	20c00003 	ldbu	r3,0(r4)
 100eccc:	28800003 	ldbu	r2,0(r5)
 100ecd0:	18bff826 	beq	r3,r2,100ecb4 <memcmp+0xc>
 100ecd4:	1885c83a 	sub	r2,r3,r2
 100ecd8:	f800283a 	ret
 100ecdc:	0005883a 	mov	r2,zero
 100ece0:	f800283a 	ret

0100ece4 <putc>:
 100ece4:	defffd04 	addi	sp,sp,-12
 100ece8:	00802034 	movhi	r2,128
 100ecec:	10822604 	addi	r2,r2,2200
 100ecf0:	dc000115 	stw	r16,4(sp)
 100ecf4:	2021883a 	mov	r16,r4
 100ecf8:	11000017 	ldw	r4,0(r2)
 100ecfc:	dc000005 	stb	r16,0(sp)
 100ed00:	00804074 	movhi	r2,257
 100ed04:	10bc4504 	addi	r2,r2,-3820
 100ed08:	dfc00215 	stw	ra,8(sp)
 100ed0c:	28800115 	stw	r2,4(r5)
 100ed10:	d80d883a 	mov	r6,sp
 100ed14:	01c00044 	movi	r7,1
 100ed18:	103ee83a 	callr	r2
 100ed1c:	1007883a 	mov	r3,r2
 100ed20:	00bfffc4 	movi	r2,-1
 100ed24:	18800526 	beq	r3,r2,100ed3c <putc+0x58>
 100ed28:	8005883a 	mov	r2,r16
 100ed2c:	dfc00217 	ldw	ra,8(sp)
 100ed30:	dc000117 	ldw	r16,4(sp)
 100ed34:	dec00304 	addi	sp,sp,12
 100ed38:	f800283a 	ret
 100ed3c:	1821883a 	mov	r16,r3
 100ed40:	8005883a 	mov	r2,r16
 100ed44:	dfc00217 	ldw	ra,8(sp)
 100ed48:	dc000117 	ldw	r16,4(sp)
 100ed4c:	dec00304 	addi	sp,sp,12
 100ed50:	f800283a 	ret

0100ed54 <_putc_r>:
 100ed54:	00802034 	movhi	r2,128
 100ed58:	10822604 	addi	r2,r2,2200
 100ed5c:	defffd04 	addi	sp,sp,-12
 100ed60:	11000017 	ldw	r4,0(r2)
 100ed64:	00804074 	movhi	r2,257
 100ed68:	10bc4504 	addi	r2,r2,-3820
 100ed6c:	30800115 	stw	r2,4(r6)
 100ed70:	dc000115 	stw	r16,4(sp)
 100ed74:	2821883a 	mov	r16,r5
 100ed78:	dfc00215 	stw	ra,8(sp)
 100ed7c:	300b883a 	mov	r5,r6
 100ed80:	01c00044 	movi	r7,1
 100ed84:	d80d883a 	mov	r6,sp
 100ed88:	dc000005 	stb	r16,0(sp)
 100ed8c:	103ee83a 	callr	r2
 100ed90:	1007883a 	mov	r3,r2
 100ed94:	00bfffc4 	movi	r2,-1
 100ed98:	18800526 	beq	r3,r2,100edb0 <_putc_r+0x5c>
 100ed9c:	8005883a 	mov	r2,r16
 100eda0:	dfc00217 	ldw	ra,8(sp)
 100eda4:	dc000117 	ldw	r16,4(sp)
 100eda8:	dec00304 	addi	sp,sp,12
 100edac:	f800283a 	ret
 100edb0:	1821883a 	mov	r16,r3
 100edb4:	8005883a 	mov	r2,r16
 100edb8:	dfc00217 	ldw	ra,8(sp)
 100edbc:	dc000117 	ldw	r16,4(sp)
 100edc0:	dec00304 	addi	sp,sp,12
 100edc4:	f800283a 	ret

0100edc8 <strlen>:
 100edc8:	20800007 	ldb	r2,0(r4)
 100edcc:	10000526 	beq	r2,zero,100ede4 <strlen+0x1c>
 100edd0:	2007883a 	mov	r3,r4
 100edd4:	18c00044 	addi	r3,r3,1
 100edd8:	18800007 	ldb	r2,0(r3)
 100eddc:	103ffd1e 	bne	r2,zero,100edd4 <strlen+0xc>
 100ede0:	1905c83a 	sub	r2,r3,r4
 100ede4:	f800283a 	ret

0100ede8 <__register_exitproc>:
 100ede8:	defff904 	addi	sp,sp,-28
 100edec:	00802034 	movhi	r2,128
 100edf0:	10822704 	addi	r2,r2,2204
 100edf4:	dc400115 	stw	r17,4(sp)
 100edf8:	14400017 	ldw	r17,0(r2)
 100edfc:	dc000015 	stw	r16,0(sp)
 100ee00:	dd400515 	stw	r21,20(sp)
 100ee04:	8c000c17 	ldw	r16,48(r17)
 100ee08:	dd000415 	stw	r20,16(sp)
 100ee0c:	dcc00315 	stw	r19,12(sp)
 100ee10:	dc800215 	stw	r18,8(sp)
 100ee14:	dfc00615 	stw	ra,24(sp)
 100ee18:	2025883a 	mov	r18,r4
 100ee1c:	282b883a 	mov	r21,r5
 100ee20:	3029883a 	mov	r20,r6
 100ee24:	3827883a 	mov	r19,r7
 100ee28:	80002626 	beq	r16,zero,100eec4 <__register_exitproc+0xdc>
 100ee2c:	81400117 	ldw	r5,4(r16)
 100ee30:	008007c4 	movi	r2,31
 100ee34:	11403716 	blt	r2,r5,100ef14 <__register_exitproc+0x12c>
 100ee38:	90002026 	beq	r18,zero,100eebc <__register_exitproc+0xd4>
 100ee3c:	81802217 	ldw	r6,136(r16)
 100ee40:	30002926 	beq	r6,zero,100eee8 <__register_exitproc+0x100>
 100ee44:	81400117 	ldw	r5,4(r16)
 100ee48:	00c00044 	movi	r3,1
 100ee4c:	31004017 	ldw	r4,256(r6)
 100ee50:	1946983a 	sll	r3,r3,r5
 100ee54:	2945883a 	add	r2,r5,r5
 100ee58:	1085883a 	add	r2,r2,r2
 100ee5c:	1185883a 	add	r2,r2,r6
 100ee60:	20c8b03a 	or	r4,r4,r3
 100ee64:	14c02015 	stw	r19,128(r2)
 100ee68:	15000015 	stw	r20,0(r2)
 100ee6c:	00800084 	movi	r2,2
 100ee70:	31004015 	stw	r4,256(r6)
 100ee74:	90801826 	beq	r18,r2,100eed8 <__register_exitproc+0xf0>
 100ee78:	2945883a 	add	r2,r5,r5
 100ee7c:	1085883a 	add	r2,r2,r2
 100ee80:	1405883a 	add	r2,r2,r16
 100ee84:	28c00044 	addi	r3,r5,1
 100ee88:	0009883a 	mov	r4,zero
 100ee8c:	15400215 	stw	r21,8(r2)
 100ee90:	80c00115 	stw	r3,4(r16)
 100ee94:	2005883a 	mov	r2,r4
 100ee98:	dfc00617 	ldw	ra,24(sp)
 100ee9c:	dd400517 	ldw	r21,20(sp)
 100eea0:	dd000417 	ldw	r20,16(sp)
 100eea4:	dcc00317 	ldw	r19,12(sp)
 100eea8:	dc800217 	ldw	r18,8(sp)
 100eeac:	dc400117 	ldw	r17,4(sp)
 100eeb0:	dc000017 	ldw	r16,0(sp)
 100eeb4:	dec00704 	addi	sp,sp,28
 100eeb8:	f800283a 	ret
 100eebc:	81400117 	ldw	r5,4(r16)
 100eec0:	003fed06 	br	100ee78 <__register_exitproc+0x90>
 100eec4:	00802074 	movhi	r2,129
 100eec8:	10864704 	addi	r2,r2,6428
 100eecc:	1021883a 	mov	r16,r2
 100eed0:	88800c15 	stw	r2,48(r17)
 100eed4:	003fd506 	br	100ee2c <__register_exitproc+0x44>
 100eed8:	30804117 	ldw	r2,260(r6)
 100eedc:	10c4b03a 	or	r2,r2,r3
 100eee0:	30804115 	stw	r2,260(r6)
 100eee4:	003fe406 	br	100ee78 <__register_exitproc+0x90>
 100eee8:	00800034 	movhi	r2,0
 100eeec:	10800004 	addi	r2,r2,0
 100eef0:	10000b26 	beq	r2,zero,100ef20 <__register_exitproc+0x138>
 100eef4:	01004204 	movi	r4,264
 100eef8:	103ee83a 	callr	r2
 100eefc:	10000826 	beq	r2,zero,100ef20 <__register_exitproc+0x138>
 100ef00:	100d883a 	mov	r6,r2
 100ef04:	10004015 	stw	zero,256(r2)
 100ef08:	10004115 	stw	zero,260(r2)
 100ef0c:	80802215 	stw	r2,136(r16)
 100ef10:	003fcc06 	br	100ee44 <__register_exitproc+0x5c>
 100ef14:	00800034 	movhi	r2,0
 100ef18:	10800004 	addi	r2,r2,0
 100ef1c:	1000021e 	bne	r2,zero,100ef28 <__register_exitproc+0x140>
 100ef20:	013fffc4 	movi	r4,-1
 100ef24:	003fdb06 	br	100ee94 <__register_exitproc+0xac>
 100ef28:	01002304 	movi	r4,140
 100ef2c:	103ee83a 	callr	r2
 100ef30:	1007883a 	mov	r3,r2
 100ef34:	103ffa26 	beq	r2,zero,100ef20 <__register_exitproc+0x138>
 100ef38:	88800c17 	ldw	r2,48(r17)
 100ef3c:	1821883a 	mov	r16,r3
 100ef40:	18000115 	stw	zero,4(r3)
 100ef44:	18800015 	stw	r2,0(r3)
 100ef48:	88c00c15 	stw	r3,48(r17)
 100ef4c:	903fdb26 	beq	r18,zero,100eebc <__register_exitproc+0xd4>
 100ef50:	003fba06 	br	100ee3c <__register_exitproc+0x54>

0100ef54 <register_fini>:
 100ef54:	f800283a 	ret

0100ef58 <__call_exitprocs>:
 100ef58:	defff304 	addi	sp,sp,-52
 100ef5c:	00802034 	movhi	r2,128
 100ef60:	10822704 	addi	r2,r2,2204
 100ef64:	df000b15 	stw	fp,44(sp)
 100ef68:	17000017 	ldw	fp,0(r2)
 100ef6c:	00800034 	movhi	r2,0
 100ef70:	10800004 	addi	r2,r2,0
 100ef74:	1005003a 	cmpeq	r2,r2,zero
 100ef78:	d8800215 	stw	r2,8(sp)
 100ef7c:	e0800c04 	addi	r2,fp,48
 100ef80:	dd800915 	stw	r22,36(sp)
 100ef84:	dd400815 	stw	r21,32(sp)
 100ef88:	dfc00c15 	stw	ra,48(sp)
 100ef8c:	ddc00a15 	stw	r23,40(sp)
 100ef90:	dd000715 	stw	r20,28(sp)
 100ef94:	dcc00615 	stw	r19,24(sp)
 100ef98:	dc800515 	stw	r18,20(sp)
 100ef9c:	dc400415 	stw	r17,16(sp)
 100efa0:	dc000315 	stw	r16,12(sp)
 100efa4:	282d883a 	mov	r22,r5
 100efa8:	d9000115 	stw	r4,4(sp)
 100efac:	d8800015 	stw	r2,0(sp)
 100efb0:	282b003a 	cmpeq	r21,r5,zero
 100efb4:	e4400c17 	ldw	r17,48(fp)
 100efb8:	88001226 	beq	r17,zero,100f004 <__call_exitprocs+0xac>
 100efbc:	ddc00017 	ldw	r23,0(sp)
 100efc0:	88800117 	ldw	r2,4(r17)
 100efc4:	8c802217 	ldw	r18,136(r17)
 100efc8:	143fffc4 	addi	r16,r2,-1
 100efcc:	80000b16 	blt	r16,zero,100effc <__call_exitprocs+0xa4>
 100efd0:	9027003a 	cmpeq	r19,r18,zero
 100efd4:	a800171e 	bne	r21,zero,100f034 <__call_exitprocs+0xdc>
 100efd8:	9800051e 	bne	r19,zero,100eff0 <__call_exitprocs+0x98>
 100efdc:	8409883a 	add	r4,r16,r16
 100efe0:	2105883a 	add	r2,r4,r4
 100efe4:	1485883a 	add	r2,r2,r18
 100efe8:	10c02017 	ldw	r3,128(r2)
 100efec:	b0c01226 	beq	r22,r3,100f038 <__call_exitprocs+0xe0>
 100eff0:	843fffc4 	addi	r16,r16,-1
 100eff4:	00bfffc4 	movi	r2,-1
 100eff8:	80bff61e 	bne	r16,r2,100efd4 <__call_exitprocs+0x7c>
 100effc:	d8800217 	ldw	r2,8(sp)
 100f000:	10003226 	beq	r2,zero,100f0cc <__call_exitprocs+0x174>
 100f004:	dfc00c17 	ldw	ra,48(sp)
 100f008:	df000b17 	ldw	fp,44(sp)
 100f00c:	ddc00a17 	ldw	r23,40(sp)
 100f010:	dd800917 	ldw	r22,36(sp)
 100f014:	dd400817 	ldw	r21,32(sp)
 100f018:	dd000717 	ldw	r20,28(sp)
 100f01c:	dcc00617 	ldw	r19,24(sp)
 100f020:	dc800517 	ldw	r18,20(sp)
 100f024:	dc400417 	ldw	r17,16(sp)
 100f028:	dc000317 	ldw	r16,12(sp)
 100f02c:	dec00d04 	addi	sp,sp,52
 100f030:	f800283a 	ret
 100f034:	8409883a 	add	r4,r16,r16
 100f038:	88c00117 	ldw	r3,4(r17)
 100f03c:	2105883a 	add	r2,r4,r4
 100f040:	1445883a 	add	r2,r2,r17
 100f044:	18ffffc4 	addi	r3,r3,-1
 100f048:	11800217 	ldw	r6,8(r2)
 100f04c:	1c001826 	beq	r3,r16,100f0b0 <__call_exitprocs+0x158>
 100f050:	10000215 	stw	zero,8(r2)
 100f054:	303fe626 	beq	r6,zero,100eff0 <__call_exitprocs+0x98>
 100f058:	8d000117 	ldw	r20,4(r17)
 100f05c:	9800121e 	bne	r19,zero,100f0a8 <__call_exitprocs+0x150>
 100f060:	00c00044 	movi	r3,1
 100f064:	1c06983a 	sll	r3,r3,r16
 100f068:	90804017 	ldw	r2,256(r18)
 100f06c:	1884703a 	and	r2,r3,r2
 100f070:	10000d26 	beq	r2,zero,100f0a8 <__call_exitprocs+0x150>
 100f074:	90804117 	ldw	r2,260(r18)
 100f078:	1884703a 	and	r2,r3,r2
 100f07c:	10000e1e 	bne	r2,zero,100f0b8 <__call_exitprocs+0x160>
 100f080:	2105883a 	add	r2,r4,r4
 100f084:	1485883a 	add	r2,r2,r18
 100f088:	11400017 	ldw	r5,0(r2)
 100f08c:	d9000117 	ldw	r4,4(sp)
 100f090:	303ee83a 	callr	r6
 100f094:	88800117 	ldw	r2,4(r17)
 100f098:	a0bfc61e 	bne	r20,r2,100efb4 <__call_exitprocs+0x5c>
 100f09c:	b8800017 	ldw	r2,0(r23)
 100f0a0:	147fd326 	beq	r2,r17,100eff0 <__call_exitprocs+0x98>
 100f0a4:	003fc306 	br	100efb4 <__call_exitprocs+0x5c>
 100f0a8:	303ee83a 	callr	r6
 100f0ac:	003ff906 	br	100f094 <__call_exitprocs+0x13c>
 100f0b0:	8c000115 	stw	r16,4(r17)
 100f0b4:	003fe706 	br	100f054 <__call_exitprocs+0xfc>
 100f0b8:	2105883a 	add	r2,r4,r4
 100f0bc:	1485883a 	add	r2,r2,r18
 100f0c0:	11000017 	ldw	r4,0(r2)
 100f0c4:	303ee83a 	callr	r6
 100f0c8:	003ff206 	br	100f094 <__call_exitprocs+0x13c>
 100f0cc:	88800117 	ldw	r2,4(r17)
 100f0d0:	10000b1e 	bne	r2,zero,100f100 <__call_exitprocs+0x1a8>
 100f0d4:	89000017 	ldw	r4,0(r17)
 100f0d8:	20000a26 	beq	r4,zero,100f104 <__call_exitprocs+0x1ac>
 100f0dc:	b9000015 	stw	r4,0(r23)
 100f0e0:	90000226 	beq	r18,zero,100f0ec <__call_exitprocs+0x194>
 100f0e4:	9009883a 	mov	r4,r18
 100f0e8:	00000000 	call	0 <__alt_mem_sram>
 100f0ec:	8809883a 	mov	r4,r17
 100f0f0:	00000000 	call	0 <__alt_mem_sram>
 100f0f4:	bc400017 	ldw	r17,0(r23)
 100f0f8:	883fb11e 	bne	r17,zero,100efc0 <__call_exitprocs+0x68>
 100f0fc:	003fc106 	br	100f004 <__call_exitprocs+0xac>
 100f100:	89000017 	ldw	r4,0(r17)
 100f104:	882f883a 	mov	r23,r17
 100f108:	2023883a 	mov	r17,r4
 100f10c:	883fac1e 	bne	r17,zero,100efc0 <__call_exitprocs+0x68>
 100f110:	003fbc06 	br	100f004 <__call_exitprocs+0xac>

0100f114 <__sfvwrite_small_dev>:
 100f114:	2880000b 	ldhu	r2,0(r5)
 100f118:	defffa04 	addi	sp,sp,-24
 100f11c:	dcc00315 	stw	r19,12(sp)
 100f120:	1080020c 	andi	r2,r2,8
 100f124:	dc800215 	stw	r18,8(sp)
 100f128:	dc400115 	stw	r17,4(sp)
 100f12c:	dfc00515 	stw	ra,20(sp)
 100f130:	dd000415 	stw	r20,16(sp)
 100f134:	dc000015 	stw	r16,0(sp)
 100f138:	2825883a 	mov	r18,r5
 100f13c:	2027883a 	mov	r19,r4
 100f140:	3023883a 	mov	r17,r6
 100f144:	10002026 	beq	r2,zero,100f1c8 <__sfvwrite_small_dev+0xb4>
 100f148:	2940008f 	ldh	r5,2(r5)
 100f14c:	28000f16 	blt	r5,zero,100f18c <__sfvwrite_small_dev+0x78>
 100f150:	01c01b0e 	bge	zero,r7,100f1c0 <__sfvwrite_small_dev+0xac>
 100f154:	3821883a 	mov	r16,r7
 100f158:	05010004 	movi	r20,1024
 100f15c:	00000206 	br	100f168 <__sfvwrite_small_dev+0x54>
 100f160:	0400170e 	bge	zero,r16,100f1c0 <__sfvwrite_small_dev+0xac>
 100f164:	9140008f 	ldh	r5,2(r18)
 100f168:	880d883a 	mov	r6,r17
 100f16c:	9809883a 	mov	r4,r19
 100f170:	800f883a 	mov	r7,r16
 100f174:	a400010e 	bge	r20,r16,100f17c <__sfvwrite_small_dev+0x68>
 100f178:	01c10004 	movi	r7,1024
 100f17c:	100f1d00 	call	100f1d0 <_write_r>
 100f180:	88a3883a 	add	r17,r17,r2
 100f184:	80a1c83a 	sub	r16,r16,r2
 100f188:	00bff516 	blt	zero,r2,100f160 <__sfvwrite_small_dev+0x4c>
 100f18c:	9080000b 	ldhu	r2,0(r18)
 100f190:	00ffffc4 	movi	r3,-1
 100f194:	10801014 	ori	r2,r2,64
 100f198:	9080000d 	sth	r2,0(r18)
 100f19c:	1805883a 	mov	r2,r3
 100f1a0:	dfc00517 	ldw	ra,20(sp)
 100f1a4:	dd000417 	ldw	r20,16(sp)
 100f1a8:	dcc00317 	ldw	r19,12(sp)
 100f1ac:	dc800217 	ldw	r18,8(sp)
 100f1b0:	dc400117 	ldw	r17,4(sp)
 100f1b4:	dc000017 	ldw	r16,0(sp)
 100f1b8:	dec00604 	addi	sp,sp,24
 100f1bc:	f800283a 	ret
 100f1c0:	0007883a 	mov	r3,zero
 100f1c4:	003ff506 	br	100f19c <__sfvwrite_small_dev+0x88>
 100f1c8:	00ffffc4 	movi	r3,-1
 100f1cc:	003ff306 	br	100f19c <__sfvwrite_small_dev+0x88>

0100f1d0 <_write_r>:
 100f1d0:	defffd04 	addi	sp,sp,-12
 100f1d4:	dc000015 	stw	r16,0(sp)
 100f1d8:	04002034 	movhi	r16,128
 100f1dc:	84026304 	addi	r16,r16,2444
 100f1e0:	dc400115 	stw	r17,4(sp)
 100f1e4:	80000015 	stw	zero,0(r16)
 100f1e8:	2023883a 	mov	r17,r4
 100f1ec:	2809883a 	mov	r4,r5
 100f1f0:	300b883a 	mov	r5,r6
 100f1f4:	380d883a 	mov	r6,r7
 100f1f8:	dfc00215 	stw	ra,8(sp)
 100f1fc:	100f3d80 	call	100f3d8 <write>
 100f200:	1007883a 	mov	r3,r2
 100f204:	00bfffc4 	movi	r2,-1
 100f208:	18800626 	beq	r3,r2,100f224 <_write_r+0x54>
 100f20c:	1805883a 	mov	r2,r3
 100f210:	dfc00217 	ldw	ra,8(sp)
 100f214:	dc400117 	ldw	r17,4(sp)
 100f218:	dc000017 	ldw	r16,0(sp)
 100f21c:	dec00304 	addi	sp,sp,12
 100f220:	f800283a 	ret
 100f224:	80800017 	ldw	r2,0(r16)
 100f228:	103ff826 	beq	r2,zero,100f20c <_write_r+0x3c>
 100f22c:	88800015 	stw	r2,0(r17)
 100f230:	1805883a 	mov	r2,r3
 100f234:	dfc00217 	ldw	ra,8(sp)
 100f238:	dc400117 	ldw	r17,4(sp)
 100f23c:	dc000017 	ldw	r16,0(sp)
 100f240:	dec00304 	addi	sp,sp,12
 100f244:	f800283a 	ret

0100f248 <__gedf2>:
 100f248:	deffef04 	addi	sp,sp,-68
 100f24c:	dc400f15 	stw	r17,60(sp)
 100f250:	dc400404 	addi	r17,sp,16
 100f254:	2005883a 	mov	r2,r4
 100f258:	2807883a 	mov	r3,r5
 100f25c:	dc000e15 	stw	r16,56(sp)
 100f260:	d809883a 	mov	r4,sp
 100f264:	880b883a 	mov	r5,r17
 100f268:	dc000904 	addi	r16,sp,36
 100f26c:	d8c00115 	stw	r3,4(sp)
 100f270:	d8800015 	stw	r2,0(sp)
 100f274:	d9800215 	stw	r6,8(sp)
 100f278:	dfc01015 	stw	ra,64(sp)
 100f27c:	d9c00315 	stw	r7,12(sp)
 100f280:	100a7f00 	call	100a7f0 <__unpack_d>
 100f284:	d9000204 	addi	r4,sp,8
 100f288:	800b883a 	mov	r5,r16
 100f28c:	100a7f00 	call	100a7f0 <__unpack_d>
 100f290:	d8800417 	ldw	r2,16(sp)
 100f294:	00c00044 	movi	r3,1
 100f298:	01bfffc4 	movi	r6,-1
 100f29c:	1880062e 	bgeu	r3,r2,100f2b8 <__gedf2+0x70>
 100f2a0:	d8800917 	ldw	r2,36(sp)
 100f2a4:	8809883a 	mov	r4,r17
 100f2a8:	800b883a 	mov	r5,r16
 100f2ac:	1880022e 	bgeu	r3,r2,100f2b8 <__gedf2+0x70>
 100f2b0:	100f2d00 	call	100f2d0 <__fpcmp_parts_d>
 100f2b4:	100d883a 	mov	r6,r2
 100f2b8:	3005883a 	mov	r2,r6
 100f2bc:	dfc01017 	ldw	ra,64(sp)
 100f2c0:	dc400f17 	ldw	r17,60(sp)
 100f2c4:	dc000e17 	ldw	r16,56(sp)
 100f2c8:	dec01104 	addi	sp,sp,68
 100f2cc:	f800283a 	ret

0100f2d0 <__fpcmp_parts_d>:
 100f2d0:	21800017 	ldw	r6,0(r4)
 100f2d4:	00c00044 	movi	r3,1
 100f2d8:	19800a2e 	bgeu	r3,r6,100f304 <__fpcmp_parts_d+0x34>
 100f2dc:	28800017 	ldw	r2,0(r5)
 100f2e0:	1880082e 	bgeu	r3,r2,100f304 <__fpcmp_parts_d+0x34>
 100f2e4:	00c00104 	movi	r3,4
 100f2e8:	30c02626 	beq	r6,r3,100f384 <__fpcmp_parts_d+0xb4>
 100f2ec:	10c02226 	beq	r2,r3,100f378 <__fpcmp_parts_d+0xa8>
 100f2f0:	00c00084 	movi	r3,2
 100f2f4:	30c00526 	beq	r6,r3,100f30c <__fpcmp_parts_d+0x3c>
 100f2f8:	10c0071e 	bne	r2,r3,100f318 <__fpcmp_parts_d+0x48>
 100f2fc:	20800117 	ldw	r2,4(r4)
 100f300:	1000091e 	bne	r2,zero,100f328 <__fpcmp_parts_d+0x58>
 100f304:	00800044 	movi	r2,1
 100f308:	f800283a 	ret
 100f30c:	10c01a1e 	bne	r2,r3,100f378 <__fpcmp_parts_d+0xa8>
 100f310:	0005883a 	mov	r2,zero
 100f314:	f800283a 	ret
 100f318:	22000117 	ldw	r8,4(r4)
 100f31c:	28800117 	ldw	r2,4(r5)
 100f320:	40800326 	beq	r8,r2,100f330 <__fpcmp_parts_d+0x60>
 100f324:	403ff726 	beq	r8,zero,100f304 <__fpcmp_parts_d+0x34>
 100f328:	00bfffc4 	movi	r2,-1
 100f32c:	f800283a 	ret
 100f330:	20c00217 	ldw	r3,8(r4)
 100f334:	28800217 	ldw	r2,8(r5)
 100f338:	10fffa16 	blt	r2,r3,100f324 <__fpcmp_parts_d+0x54>
 100f33c:	18800916 	blt	r3,r2,100f364 <__fpcmp_parts_d+0x94>
 100f340:	21c00417 	ldw	r7,16(r4)
 100f344:	28c00417 	ldw	r3,16(r5)
 100f348:	21800317 	ldw	r6,12(r4)
 100f34c:	28800317 	ldw	r2,12(r5)
 100f350:	19fff436 	bltu	r3,r7,100f324 <__fpcmp_parts_d+0x54>
 100f354:	38c00526 	beq	r7,r3,100f36c <__fpcmp_parts_d+0x9c>
 100f358:	38c00236 	bltu	r7,r3,100f364 <__fpcmp_parts_d+0x94>
 100f35c:	19ffec1e 	bne	r3,r7,100f310 <__fpcmp_parts_d+0x40>
 100f360:	30bfeb2e 	bgeu	r6,r2,100f310 <__fpcmp_parts_d+0x40>
 100f364:	403fe71e 	bne	r8,zero,100f304 <__fpcmp_parts_d+0x34>
 100f368:	003fef06 	br	100f328 <__fpcmp_parts_d+0x58>
 100f36c:	11bffa2e 	bgeu	r2,r6,100f358 <__fpcmp_parts_d+0x88>
 100f370:	403fe426 	beq	r8,zero,100f304 <__fpcmp_parts_d+0x34>
 100f374:	003fec06 	br	100f328 <__fpcmp_parts_d+0x58>
 100f378:	28800117 	ldw	r2,4(r5)
 100f37c:	103fe11e 	bne	r2,zero,100f304 <__fpcmp_parts_d+0x34>
 100f380:	003fe906 	br	100f328 <__fpcmp_parts_d+0x58>
 100f384:	11bfdd1e 	bne	r2,r6,100f2fc <__fpcmp_parts_d+0x2c>
 100f388:	28c00117 	ldw	r3,4(r5)
 100f38c:	20800117 	ldw	r2,4(r4)
 100f390:	1885c83a 	sub	r2,r3,r2
 100f394:	f800283a 	ret

0100f398 <_exit>:
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100f398:	00802034 	movhi	r2,128
 100f39c:	10824c04 	addi	r2,r2,2352
 100f3a0:	10000005 	stb	zero,0(r2)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100f3a4:	20000226 	beq	r4,zero,100f3b0 <_exit+0x18>
    ALT_SIM_FAIL();
 100f3a8:	002af070 	cmpltui	zero,zero,43969
 100f3ac:	00000106 	br	100f3b4 <_exit+0x1c>
  } else {
    ALT_SIM_PASS();
 100f3b0:	002af0b0 	cmpltui	zero,zero,43970
 100f3b4:	003fff06 	br	100f3b4 <_exit+0x1c>

0100f3b8 <alt_get_errno>:
 100f3b8:	00802034 	movhi	r2,128
 100f3bc:	10822404 	addi	r2,r2,2192
 100f3c0:	10c00017 	ldw	r3,0(r2)
}
 100f3c4:	00802034 	movhi	r2,128
 100f3c8:	10826304 	addi	r2,r2,2444

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 100f3cc:	18000126 	beq	r3,zero,100f3d4 <alt_get_errno+0x1c>
 100f3d0:	1800683a 	jmp	r3
}
 100f3d4:	f800283a 	ret

0100f3d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100f3d8:	defffc04 	addi	sp,sp,-16
 100f3dc:	dc800215 	stw	r18,8(sp)
 100f3e0:	dc400115 	stw	r17,4(sp)
 100f3e4:	dfc00315 	stw	ra,12(sp)
 100f3e8:	2823883a 	mov	r17,r5
 100f3ec:	dc000015 	stw	r16,0(sp)
 100f3f0:	3025883a 	mov	r18,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f3f4:	01400304 	movi	r5,12
 100f3f8:	20001916 	blt	r4,zero,100f460 <write+0x88>
 100f3fc:	100a1fc0 	call	100a1fc <__mulsi3>
 100f400:	00c02034 	movhi	r3,128
 100f404:	18c16304 	addi	r3,r3,1420
 100f408:	10c9883a 	add	r4,r2,r3
  
  if (fd)
 100f40c:	20001426 	beq	r4,zero,100f460 <write+0x88>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100f410:	20800217 	ldw	r2,8(r4)
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 100f414:	043fffc4 	movi	r16,-1
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100f418:	108000cc 	andi	r2,r2,3
 100f41c:	10000c26 	beq	r2,zero,100f450 <write+0x78>
 100f420:	20800017 	ldw	r2,0(r4)
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100f424:	880b883a 	mov	r5,r17
 100f428:	900d883a 	mov	r6,r18
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100f42c:	10800617 	ldw	r2,24(r2)
 100f430:	10000726 	beq	r2,zero,100f450 <write+0x78>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100f434:	103ee83a 	callr	r2
 100f438:	1021883a 	mov	r16,r2
 100f43c:	10000c0e 	bge	r2,zero,100f470 <write+0x98>
      {
        ALT_ERRNO = -rval;
 100f440:	100f3b80 	call	100f3b8 <alt_get_errno>
 100f444:	0407c83a 	sub	r3,zero,r16
 100f448:	043fffc4 	movi	r16,-1
 100f44c:	00000206 	br	100f458 <write+0x80>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 100f450:	100f3b80 	call	100f3b8 <alt_get_errno>
 100f454:	00c00344 	movi	r3,13
 100f458:	10c00015 	stw	r3,0(r2)
 100f45c:	00000406 	br	100f470 <write+0x98>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100f460:	100f3b80 	call	100f3b8 <alt_get_errno>
 100f464:	00c01444 	movi	r3,81
 100f468:	10c00015 	stw	r3,0(r2)
 100f46c:	043fffc4 	movi	r16,-1
  }
  return -1;
}
 100f470:	8005883a 	mov	r2,r16
 100f474:	dfc00317 	ldw	ra,12(sp)
 100f478:	dc800217 	ldw	r18,8(sp)
 100f47c:	dc400117 	ldw	r17,4(sp)
 100f480:	dc000017 	ldw	r16,0(sp)
 100f484:	dec00404 	addi	sp,sp,16
 100f488:	f800283a 	ret
 100f48c:	0100ef54 	movui	r4,957
