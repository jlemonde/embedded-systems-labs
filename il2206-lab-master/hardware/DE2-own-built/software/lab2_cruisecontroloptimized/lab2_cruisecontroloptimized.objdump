
lab2_cruisecontroloptimized.elf:     file format elf32-littlenios2
lab2_cruisecontroloptimized.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800144

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000088e8 memsz 0x000088e8 flags r-x
    LOAD off    0x00009908 vaddr 0x00808908 paddr 0x00808c9c align 2**12
         filesz 0x00000394 memsz 0x00000394 flags rw-
    LOAD off    0x0000a030 vaddr 0x00809030 paddr 0x00809030 align 2**12
         filesz 0x00000000 memsz 0x000050fc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000124  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008330  00800144  00800144  00001144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000494  00808474  00808474  00009474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000394  00808908  00808c9c  00009908  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000050fc  00809030  00809030  0000a030  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00009c9c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000958  00000000  00000000  00009cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001b82  00000000  00000000  0000a620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000144a3  00000000  00000000  0000c1a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005b24  00000000  00000000  00020645  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000f3d7  00000000  00000000  00026169  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000165c  00000000  00000000  00035540  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002bcb  00000000  00000000  00036b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005b13  00000000  00000000  00039767  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003f27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000598  00000000  00000000  0003f290  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00043570  2**0
                  CONTENTS, READONLY
 18 .cpu          00000019  00000000  00000000  00043576  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004358f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00043590  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00043591  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00043595  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00043599  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0004359d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000435a8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000435b3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000019  00000000  00000000  000435be  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000051  00000000  00000000  000435d7  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000712d3  00000000  00000000  00043628  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800144 l    d  .text	00000000 .text
00808474 l    d  .rodata	00000000 .rodata
00808908 l    d  .rwdata	00000000 .rwdata
00809030 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0080017c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 cruise_opti.c
00808908 l     O .rwdata	0000002c b2sLUT
00809114 l     O .bss	00000018 alarm.3338
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00801ddc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00802740 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00803050 l     F .text	00000080 print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00808934 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_load.c
00803974 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00803ce0 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 os_core.c
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00804cc4 l     F .text	000000b8 OS_FlagBlock
00804db8 l     F .text	00000090 OS_FlagTaskRdy
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
00806940 l     F .text	00000068 OSTmr_Free
008069a8 l     F .text	000000a0 OSTmr_Link
00806a48 l     F .text	00000064 OSTmr_Unlink
00806c48 l     F .text	000000c0 OSTmr_Task
00806c0c l     F .text	0000002c OSTmr_Lock
00806c38 l     F .text	00000010 OSTmr_Unlock
00000000 l    df *ABS*	00000000 alt_sys_init.c
00808a14 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080757c l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
008075b8 l     F .text	00000020 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00807678 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080787c l     F .text	00000088 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000038 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00809110 l     O .bss	00000002 OSTmrCtr
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00808140 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00809044 g     O .bss	00000004 SemSwitches
00808c56 g     O .rwdata	00000002 OSTaskNameSize
00803a00 g     F .text	000000a8 alt_main
008090ac g     O .bss	00000004 OSTmrFreeList
0080dfa0 g     O .bss	00000100 alt_irq
0080912c g     O .bss	00000400 SwitchIO_Stack
00808c9c g       *ABS*	00000000 __flash_rwdata_start
0080b12c g     O .bss	00000010 OSTmrWheelTbl
00808bf4 g     O .rwdata	00000004 engine
00809048 g     O .bss	00000004 Mbox_Throttle
008044e8 g     F .text	000002d4 OSEventPendMulti
00807c54 g     F .text	00000004 OSTaskCreateHook
00802fb8 g     F .text	00000054 printf
00808c2e g     O .rwdata	00000002 OSMboxEn
008047bc g     F .text	0000003c OSIntEnter
00000000 g       *ABS*	00000000 __alt_mem_sram
00808c3e g     O .rwdata	00000002 OSQEn
00800410 g     F .text	00000034 CallbackOverload
00803dc0 g     F .text	00000004 __malloc_unlock
00807c60 g     F .text	00000004 OSTaskStatHook
0080903d g     O .bss	00000001 TOP_GEAR
008090b0 g     O .bss	00000001 OSLockNesting
008090b4 g     O .bss	00000004 OSTmrSemSignal
00808c7c g     O .rwdata	00000002 OSDataSize
008090b8 g     O .bss	00000001 OSRunning
0080904c g     O .bss	00000004 SemExtraload
00807c64 g     F .text	00000008 OSInitHookBegin
00808c74 g     O .rwdata	00000002 OSTmrSize
00800478 g     F .text	0000002c CallbackExtraload
008090bc g     O .bss	00000004 OSIdleCtr
00807c0c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
008049e8 g     F .text	00000170 OS_TCBInit
008004a4 g     F .text	00000038 CallbackWatchdog
00800000 g     F .entry	0000000c __reset
008090c0 g     O .bss	00000002 OSTmrUsed
0080096c g     F .text	000005f0 VehicleTask
00808c7a g     O .rwdata	00000002 OSTmrWheelTblSize
00800020 g       *ABS*	00000000 __flash_exceptions_start
00808c1a g     O .rwdata	00000002 OSEventSize
008090c2 g     O .bss	00000001 OSPrioHighRdy
00807c58 g     F .text	00000004 OSTaskDelHook
00800720 g     F .text	0000010c adjust_position
0080908c g     O .bss	00000004 errno
00802708 g     F .text	00000038 __make_dp
00807bec g       .text	00000000 OSStartHighRdy
008060f8 g     F .text	00000168 OSTaskCreateExt
008001d4 g     F .text	00000034 CallbackStat
0080564c g     F .text	0000002c OSFlagPendGetFlagsRdy
00808c5a g     O .rwdata	00000002 OSTaskStatStkSize
00804efc g     F .text	00000154 OSFlagAccept
00809094 g     O .bss	00000004 alt_argv
00810be8 g       *ABS*	00000000 _gp
00801388 g     F .text	000000c4 SwitchIO
008090a8 g     O .bss	00000004 alt_heapsem
00804cc0 g     F .text	00000004 OSDebugInit
00806260 g     F .text	0000022c OSTaskDel
00808a68 g     O .rwdata	00000180 alt_fd_list
0080b13c g     O .bss	00000370 OSFlagTbl
0080903e g     O .bss	00000001 GAS_PEDAL
00803ef4 g     F .text	0000004c OS_EventTaskRemove
00807cd0 g     F .text	00000070 alt_find_dev
00809050 g     O .bss	00000004 Mbox_Velocity
00808c44 g     O .rwdata	00000002 OSRdyTblSize
0080b4ac g     O .bss	00000340 OSTmrTbl
00802538 g     F .text	000000f8 __floatsidf
00807904 g     F .text	0000008c alt_io_redirect
00808474 g       *ABS*	00000000 __DTOR_END__
0080903f g     O .bss	00000001 BRAKE_PEDAL
0080952c g     O .bss	00000400 ControlTask_Stack
0080445c g     F .text	0000008c OSEventNameGet
00808c28 g     O .rwdata	00000002 OSFlagMax
00804b58 g     F .text	000000c8 OSIntExit
00809054 g     O .bss	00000004 TimerVehicle
00809058 g     O .bss	00000004 SemControl
00808c62 g     O .rwdata	00000002 OSTCBSize
008090c3 g     O .bss	00000001 OSPrioCur
00807498 g     F .text	00000060 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0080300c g     F .text	00000044 _printf_r
0080287c g     F .text	00000008 __udivsi3
00808c48 g     O .rwdata	00000002 OSStkWidth
00808c3c g     O .rwdata	00000002 OSPtrSize
0080905c g     O .bss	00000004 TimerWatchdog
008003dc g     F .text	00000034 CallbackSwitches
00808c1c g     O .rwdata	00000002 OSEventTblSize
00808be8 g     O .rwdata	00000004 gas_pedal
00807b70 g       .text	00000000 OSCtxSw
00809060 g     O .bss	00000004 TimerStat
008090c4 g     O .bss	00000004 OSTCBList
00801568 g     F .text	00000168 Extraload
008071c8 g     F .text	00000028 OSTmrSignal
00809108 g     O .bss	00000004 alt_fd_list_lock
00800374 g     F .text	00000034 CallbackControl
008090c8 g     O .bss	00000001 OSTickStepState
00808c40 g     O .rwdata	00000002 OSQMax
0080b7ec g     O .bss	00000800 OSTaskStatStk
0080082c g     F .text	00000140 adjust_velocity
00808c20 g     O .rwdata	00000002 OSFlagEn
00808c66 g     O .rwdata	00000002 OSTimeTickHookEn
00804d7c g     F .text	0000003c OS_FlagUnlink
00800444 g     F .text	00000034 CallbackExtraloadTask
008003a8 g     F .text	00000034 CallbackButtons
00808c90 g     O .rwdata	00000004 alt_max_fd
008040c8 g     F .text	00000024 OS_MemCopy
00804170 g     F .text	000000ac OS_Sched
00802e80 g     F .text	00000138 __unpack_d
00806600 g     F .text	000000ec OSTaskNameSet
008090cc g     O .bss	00000004 OSCtxSwCtr
00807c78 g     F .text	00000058 OSTimeTickHook
00809038 g     O .bss	00000004 led_red
0080903c g     O .bss	00000001 ENGINE
00808c2a g     O .rwdata	00000002 OSFlagNameSize
00801d88 g     F .text	00000054 __extendsfdf2
00803f40 g     F .text	0000005c OS_EventTaskRemoveMulti
0080226c g     F .text	00000074 __adddf3
00803e54 g     F .text	000000a0 OS_EventTaskWaitMulti
00808c42 g     O .rwdata	00000002 OSQSize
00805d90 g     F .text	00000158 OSSemPend
00808c00 g     O .rwdata	00000004 _global_impure_ptr
0080992c g     O .bss	00000400 OverloadDetection_Stack
00800180 g     F .text	0000002c buttons_pressed
00808c2c g     O .rwdata	00000002 OSLowestPrio
0080e12c g       *ABS*	00000000 __bss_end
00807810 g     F .text	0000006c alt_iic_isr_register
00807c74 g     F .text	00000004 OSTCBInitHook
00808c72 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00803c34 g     F .text	000000ac alt_tick
00805bec g     F .text	00000084 OSMboxPost
00808c14 g     O .rwdata	00000002 OSEventEn
00808c6e g     O .rwdata	00000002 OSTmrCfgNameSize
00807774 g     F .text	00000018 alt_ic_irq_enabled
008090d0 g     O .bss	00000002 OSTmrFree
00804e48 g     F .text	00000070 OS_FlagInit
00803c00 g     F .text	00000034 alt_alarm_stop
008070e0 g     F .text	000000e8 OSTmrDel
00808c50 g     O .rwdata	00000002 OSTaskIdleStkSize
00800284 g     F .text	0000008c statisticTask
0080910c g     O .bss	00000004 alt_irq_active
00809034 g     O .bss	00000002 led_green
008090d4 g     O .bss	00000004 OSIdleCtrMax
008000ec g     F .exceptions	00000058 alt_irq_handler
00808a40 g     O .rwdata	00000028 alt_dev_null
00808c64 g     O .rwdata	00000002 OSTicksPerSec
00802aa4 g     F .text	000000c8 __unpack_f
00807b70 g       .text	00000000 OSIntCtxSw
00807674 g     F .text	00000004 alt_dcache_flush_all
00802630 g     F .text	000000d8 __fixdfsi
00808bf8 g     O .rwdata	00000004 cruise_control
008090d8 g     O .bss	00000004 OSTCBFreeList
00808c9c g       *ABS*	00000000 __ram_rwdata_end
00805ee8 g     F .text	000000d8 OSSemPendAbort
01008000 g       *ABS*	00000000 __alt_mem_onchip_memory
00809d2c g     O .bss	00000400 VehicleTask_Stack
00808c88 g     O .rwdata	00000008 alt_dev_list
00803d00 g     F .text	000000b4 write
00807f60 g     F .text	00000074 _putc_r
00808c68 g     O .rwdata	00000002 OSVersionNbr
0080a12c g     O .bss	00000400 ButtonsIO_Stack
00808908 g       *ABS*	00000000 __ram_rodata_end
00806fd8 g     F .text	00000108 OSTmrRemainGet
00808c10 g     O .rwdata	00000004 OSEndiannessTest
00802884 g     F .text	00000008 __umodsi3
00808c22 g     O .rwdata	00000002 OSFlagGrpSize
00806f40 g     F .text	00000098 OSTmrStateGet
0080e12c g       *ABS*	00000000 end
00802944 g     F .text	00000160 __pack_f
00809030 g     O .bss	00000004 TimerExtraload
00804964 g     F .text	00000084 OS_TaskStat
00808470 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080752c g     F .text	00000050 alt_avalon_timer_sc_init
008028c4 g     F .text	00000080 __clzsi2
008074f8 g     F .text	00000034 altera_avalon_jtag_uart_write
00806aac g     F .text	00000160 OSTmr_Init
008040ac g     F .text	0000001c OS_MemClr
008030d0 g     F .text	0000069c ___vfprintf_internal_r
00807c30 g     F .text	00000024 OSTaskStkInit
00803aa8 g     F .text	00000144 alt_printf
00803f9c g     F .text	000000f4 OS_EventTaskRdy
00808144 g     F .text	000001bc __call_exitprocs
0080060c g     F .text	0000008c show_target_velocity
008090dc g     O .bss	00000001 OSCPUUsage
00800144 g     F .text	0000003c _start
0080909c g     O .bss	00000004 _alt_tick_rate
008068a8 g     F .text	00000098 OSTimeDly
00800518 g     F .text	000000f4 show_velocity_on_sevenseg
008090a0 g     O .bss	00000004 _alt_nticks
00807408 g     F .text	00000050 alt_sys_init
00801cf0 g     F .text	00000098 __floatsisf
00807fd4 g     F .text	0000016c __register_exitproc
008090dd g     O .bss	00000001 OSTaskCtr
0080288c g     F .text	00000038 __mulsi3
00808908 g       *ABS*	00000000 __ram_rwdata_start
00808474 g       *ABS*	00000000 __ram_rodata_start
00808c16 g     O .rwdata	00000002 OSEventMax
00805c70 g     F .text	00000094 OSSemPost
00807488 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00807ddc g     F .text	000000a4 alt_get_fd
008047f8 g     F .text	00000064 OSStatInit
00804eb8 g     F .text	00000044 OSFlagQuery
00808388 g     F .text	000000c8 __fpcmp_parts_d
00808c4c g     O .rwdata	00000002 OSTaskCreateExtEn
00807eb4 g     F .text	0000003c memcmp
00803dcc g     F .text	00000004 OS_Dummy
0080e12c g       *ABS*	00000000 __alt_stack_base
00809064 g     O .bss	00000004 TimerOverload
00809068 g     O .bss	00000004 SemVehicle
0080906c g     O .bss	00000004 SemOverload
008022e0 g     F .text	00000258 __divdf3
00808bec g     O .rwdata	00000004 brake_pedal
008090e0 g     O .bss	00000004 OSTCBHighRdy
00807d40 g     F .text	0000009c alt_find_file
00800340 g     F .text	00000034 CallbackVehicle
00807680 g     F .text	00000070 alt_dev_llist_insert
00803dbc g     F .text	00000004 __malloc_lock
00804c20 g     F .text	000000a0 OSEventNameSet
008004dc g     F .text	0000003c int2seven
00809070 g     O .bss	00000004 SemButtons
008090e4 g     O .bss	00000001 OSRdyGrp
00809074 g     O .bss	00000004 SemStat
00803790 g     F .text	000000bc __sfvwrite_small_dev
00806e50 g     F .text	000000f0 OSTmrStart
00809030 g       *ABS*	00000000 __bss_start
00801c74 g     F .text	0000007c main
00809098 g     O .bss	00000004 alt_envp
00807478 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
008087c2 g     O .rodata	00000100 OSUnMapTbl
00808c46 g     O .rwdata	00000002 OSSemEn
00805678 g     F .text	000001d8 OSFlagPost
00803dd0 g     F .text	00000084 OS_EventTaskWait
00804138 g     F .text	00000038 OS_TaskStatStkChk
008001ac g     F .text	00000028 switches_pressed
0080e0a0 g     O .bss	0000008c _atexit0
0080648c g     F .text	000000a8 OSTaskDelReq
00808c94 g     O .rwdata	00000004 alt_errno
0080421c g     F .text	0000006c OSStart
00803db8 g     F .text	00000004 __env_unlock
0080a52c g     O .bss	00000400 StartTask_Stack
008066ec g     F .text	000000f4 OSTaskResume
00808c58 g     O .rwdata	00000002 OSTaskStatEn
00808c32 g     O .rwdata	00000002 OSMemMax
00807ef0 g     F .text	00000070 putc
008027bc g     F .text	00000060 __divsi3
008090e5 g     O .bss	00000003 OSRdyTbl
00808c0c g     O .rwdata	00000002 OSDebugEn
0080867c g     O .rodata	00000014 __thenan_df
00809078 g     O .bss	00000004 TimerExtraloadTask
00808474 g       *ABS*	00000000 __CTOR_END__
00808c24 g     O .rwdata	00000002 OSFlagNodeSize
00808c6c g     O .rwdata	00000002 OSTmrCfgMax
00806534 g     F .text	000000cc OSTaskNameGet
00808474 g       *ABS*	00000000 __flash_rodata_start
0080485c g     F .text	000000d8 OSTimeTick
00808c54 g     O .rwdata	00000002 OSTaskMax
00808474 g       *ABS*	00000000 __DTOR_LIST__
00805d04 g     F .text	0000008c OSSemCreate
00808c78 g     O .rwdata	00000002 OSTmrWheelSize
00800698 g     F .text	00000088 show_position
0080907c g     O .bss	00000004 delay
00808bf0 g     O .rwdata	00000004 top_gear
00808c4e g     O .rwdata	00000002 OSTaskDelEn
00807458 g     F .text	00000020 alt_irq_init
00807b0c g     F .text	0000005c alt_release_fd
00808690 g     O .rodata	00000100 __clz_tab
00806d08 g     F .text	00000148 OSTmrStop
00807e80 g     F .text	00000014 atexit
0080a92c g     O .bss	00000400 statisticTask_Stack
0080386c g     F .text	00000078 _write_r
0080bfec g     O .bss	00000800 OSTmrTaskStk
00805050 g     F .text	00000080 OSFlagCreate
00808bfc g     O .rwdata	00000004 _impure_ptr
00809080 g     O .bss	00000004 TimerButtons
00809090 g     O .bss	00000004 alt_argc
00807730 g     F .text	00000040 _do_dtors
00808c1e g     O .rwdata	00000002 OSEventMultiEn
008072b8 g     F .text	00000150 OSTmrCreate
008050d0 g     F .text	0000014c OSFlagDel
008090e8 g     O .bss	00000004 OSEventFreeList
00800020 g       .exceptions	00000000 alt_irq_entry
00805b1c g     F .text	000000d0 OSMboxPendAbort
0080144c g     F .text	000000e8 ButtonsIO
00805368 g     F .text	000002e4 OSFlagPend
00808c6a g     O .rwdata	00000002 OSTmrEn
00808c80 g     O .rwdata	00000008 alt_fs_list
008071f0 g     F .text	000000c8 OSTmrNameGet
008040ec g     F .text	0000002c OS_StrCopy
00809084 g     O .bss	00000004 TimerControl
00800208 g     F .text	0000007c printStackSize
00808c34 g     O .rwdata	00000002 OSMemNameSize
00807c6c g     F .text	00000004 OSInitHookEnd
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808c60 g     O .rwdata	00000002 OSTCBPrioTblMax
00808c5c g     O .rwdata	00000002 OSTaskStatStkChkEn
00800310 g     F .text	00000030 alarm_handler
0080591c g     F .text	0000008c OSMboxCreate
0080780c g     F .text	00000004 alt_ic_isr_register
00808c30 g     O .rwdata	00000002 OSMemEn
00808c3a g     O .rwdata	00000002 OSMutexEn
00808c9c g       *ABS*	00000000 _edata
0080e12c g       *ABS*	00000000 _end
00800f5c g     F .text	0000042c ControlTask
008090ec g     O .bss	00000001 OSIntNesting
00800144 g       *ABS*	00000000 __ram_exceptions_end
008052b0 g     F .text	000000b8 OSFlagNameSet
008059a8 g     F .text	00000174 OSMboxPend
00809088 g     O .bss	00000004 TimerSwitches
00801534 g     F .text	00000034 OverloadDetection
008067e0 g     F .text	000000c8 OSTaskStkChk
008077cc g     F .text	00000040 alt_ic_irq_disable
00808c36 g     O .rwdata	00000002 OSMemSize
00807b68 g     F .text	00000008 altera_nios2_qsys_irq_init
008090f0 g     O .bss	00000004 OSTCBCur
00807e94 g     F .text	00000020 exit
00808c38 g     O .rwdata	00000002 OSMemTblSize
0080281c g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00804288 g     F .text	000001d4 OSInit
008090f4 g     O .bss	00000004 OSTmrTime
00800000 g       *ABS*	00000000 __alt_mem_sdram
00804118 g     F .text	00000020 OS_StrLen
00808c52 g     O .rwdata	00000002 OSTaskProfileEn
008090f8 g     O .bss	00000004 OSTmrSem
0080c7ec g     O .bss	00000800 OSTaskIdleStk
00808450 g     F .text	00000020 _exit
00805850 g     F .text	000000cc OSMboxPostOpt
0080521c g     F .text	00000094 OSFlagNameGet
008038e4 g     F .text	00000090 alt_alarm_start
0080ad2c g     O .bss	00000400 Extraload_Stack
0080384c g     F .text	00000020 strlen
00807c5c g     F .text	00000004 OSTaskSwHook
00807990 g     F .text	0000017c open
0080cfec g     O .bss	00000b40 OSEventTbl
00808300 g     F .text	00000088 __gedf2
00803bec g     F .text	00000014 alt_putchar
0080db2c g     O .bss	00000420 OSTCBTbl
008016d0 g     F .text	000005a4 StartTask
00807770 g     F .text	00000004 alt_icache_flush_all
00808c98 g     O .rwdata	00000004 alt_priority_mask
008090fc g     O .bss	00000004 OSFlagFreeList
0080778c g     F .text	00000040 alt_ic_irq_enable
00808c18 g     O .rwdata	00000002 OSEventNameSize
0080376c g     F .text	00000024 __vfprintf_internal
00809100 g     O .bss	00000001 OSStatRdy
0080df4c g     O .bss	00000054 OSTCBPrioTbl
00803db4 g     F .text	00000004 __env_lock
00808c5e g     O .rwdata	00000002 OSTaskSwHookEn
008021ec g     F .text	00000080 __subdf3
00808c04 g     O .rwdata	00000008 alt_alarm_list
00808c26 g     O .rwdata	00000002 OSFlagWidth
008076f0 g     F .text	00000040 _do_ctors
008075d8 g     F .text	0000009c close
008090a4 g     O .bss	00000004 alt_envsem
00809104 g     O .bss	00000004 OSIdleCtrRun
00803dc4 g     F .text	00000008 OSVersion
00808c70 g     O .rwdata	00000002 OSTmrCfgWheelSize
00803994 g     F .text	0000006c alt_load
00805fc0 g     F .text	00000030 OS_TaskStkClr
00802b6c g     F .text	00000314 __pack_d
00808c4a g     O .rwdata	00000002 OSTaskCreateEn
00809040 g     O .bss	00000001 CRUISE_CONTROL
00804090 g     F .text	0000001c OS_EventWaitListInit
00807c70 g     F .text	00000004 OSTaskIdleHook
00000000  w      *UND*	00000000 free
00805ff0 g     F .text	00000108 OSTaskSuspend
00804934 g     F .text	00000030 OS_TaskIdle
00809041 g     O .bss	00000001 FLAG
00808c76 g     O .rwdata	00000002 OSTmrTblSize



Disassembly of section .entry:

00800000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800004:	08405114 	ori	at,at,324
    jmp r1
  800008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00800020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  800044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000ec0 	call	8000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000306 	br	800098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  800094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  800098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  80009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  8000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  8000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000e8:	ef80083a 	eret

008000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000ec:	deffff04 	addi	sp,sp,-4
  8000f0:	dfc00015 	stw	ra,0(sp)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  8000f4:	08047bc0 	call	8047bc <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  8000f8:	0009313a 	rdctl	r4,ipending
  8000fc:	00c00044 	movi	r3,1
  800100:	01402074 	movhi	r5,129
  800104:	2977e804 	addi	r5,r5,-8288
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800108:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  80010c:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  800110:	10000726 	beq	r2,zero,800130 <alt_irq_handler+0x44>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  800114:	29000117 	ldw	r4,4(r5)
  800118:	28800017 	ldw	r2,0(r5)
  80011c:	103ee83a 	callr	r2
  800120:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  800124:	10000426 	beq	r2,zero,800138 <alt_irq_handler+0x4c>
  800128:	1009883a 	mov	r4,r2
  80012c:	003ff306 	br	8000fc <alt_irq_handler+0x10>
  800130:	29400204 	addi	r5,r5,8
  800134:	003ff406 	br	800108 <alt_irq_handler+0x1c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  800138:	dfc00017 	ldw	ra,0(sp)
  80013c:	dec00104 	addi	sp,sp,4

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  800140:	0804b581 	jmpi	804b58 <OSIntExit>

Disassembly of section .text:

00800144 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800144:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800148:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  80014c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800150:	d682fa14 	ori	gp,gp,3048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800154:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800158:	10a40c14 	ori	r2,r2,36912

    movhi r3, %hi(__bss_end)
  80015c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800160:	18f84b14 	ori	r3,r3,57644

    beq r2, r3, 1f
  800164:	10c00326 	beq	r2,r3,800174 <_start+0x30>

0:
    stw zero, (r2)
  800168:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80016c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800170:	10fffd36 	bltu	r2,r3,800168 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800174:	08039940 	call	803994 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800178:	0803a000 	call	803a00 <alt_main>

0080017c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80017c:	003fff06 	br	80017c <alt_after_alt_main>

00800180 <buttons_pressed>:
INT8U GAS_PEDAL = 0;
INT8U BRAKE_PEDAL = 0;
INT8U CRUISE_CONTROL = 0;
INT8U FLAG = 0;

int buttons_pressed(void) {
  800180:	deffff04 	addi	sp,sp,-4
  800184:	df000015 	stw	fp,0(sp)
  800188:	d839883a 	mov	fp,sp
	return ~IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_KEYS4_BASE);
  80018c:	00804074 	movhi	r2,257
  800190:	10844004 	addi	r2,r2,4352
  800194:	10800037 	ldwio	r2,0(r2)
  800198:	0084303a 	nor	r2,zero,r2
}
  80019c:	e037883a 	mov	sp,fp
  8001a0:	df000017 	ldw	fp,0(sp)
  8001a4:	dec00104 	addi	sp,sp,4
  8001a8:	f800283a 	ret

008001ac <switches_pressed>:

int switches_pressed(void) {
  8001ac:	deffff04 	addi	sp,sp,-4
  8001b0:	df000015 	stw	fp,0(sp)
  8001b4:	d839883a 	mov	fp,sp
	return IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_TOGGLES18_BASE);
  8001b8:	00804074 	movhi	r2,257
  8001bc:	10844404 	addi	r2,r2,4368
  8001c0:	10800037 	ldwio	r2,0(r2)
}
  8001c4:	e037883a 	mov	sp,fp
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00104 	addi	sp,sp,4
  8001d0:	f800283a 	ret

008001d4 <CallbackStat>:
#ifdef DEBUG

OS_EVENT *SemStat;
OS_TMR *TimerStat;

void CallbackStat(void *ptmr, void *callback_arg) {
  8001d4:	defffc04 	addi	sp,sp,-16
  8001d8:	dfc00315 	stw	ra,12(sp)
  8001dc:	df000215 	stw	fp,8(sp)
  8001e0:	df000204 	addi	fp,sp,8
  8001e4:	e13ffe15 	stw	r4,-8(fp)
  8001e8:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemStat);
  8001ec:	d1212317 	ldw	r4,-31604(gp)
  8001f0:	0805c700 	call	805c70 <OSSemPost>
}
  8001f4:	e037883a 	mov	sp,fp
  8001f8:	dfc00117 	ldw	ra,4(sp)
  8001fc:	df000017 	ldw	fp,0(sp)
  800200:	dec00204 	addi	sp,sp,8
  800204:	f800283a 	ret

00800208 <printStackSize>:

/* Called by StatisticTask */
void printStackSize(char* name, INT8U prio)
{
  800208:	defff804 	addi	sp,sp,-32
  80020c:	dfc00715 	stw	ra,28(sp)
  800210:	df000615 	stw	fp,24(sp)
  800214:	df000604 	addi	fp,sp,24
  800218:	e13ffe15 	stw	r4,-8(fp)
  80021c:	e17fff05 	stb	r5,-4(fp)
  INT8U err;
  OS_STK_DATA stk_data;

  err = OSTaskStkChk(prio, &stk_data);
  800220:	e13fff03 	ldbu	r4,-4(fp)
  800224:	e17ffc04 	addi	r5,fp,-16
  800228:	08067e00 	call	8067e0 <OSTaskStkChk>
  80022c:	e0bffb05 	stb	r2,-20(fp)
  if (err == OS_NO_ERR) {
  800230:	e0bffb03 	ldbu	r2,-20(fp)
  800234:	1004c03a 	cmpne	r2,r2,zero
  800238:	10000a1e 	bne	r2,zero,800264 <printStackSize+0x5c>
    if (DEBUG == 1)
      printf("%s (priority %d) - Used: %d; Free: %d\n",
  80023c:	e1bfff03 	ldbu	r6,-4(fp)
  800240:	e0bffd17 	ldw	r2,-12(fp)
  800244:	100f883a 	mov	r7,r2
  800248:	e0bffc17 	ldw	r2,-16(fp)
  80024c:	d8800015 	stw	r2,0(sp)
  800250:	01002074 	movhi	r4,129
  800254:	21211d04 	addi	r4,r4,-31628
  800258:	e17ffe17 	ldw	r5,-8(fp)
  80025c:	0802fb80 	call	802fb8 <printf>
  800260:	00000306 	br	800270 <printStackSize+0x68>
	     name, prio, (int) stk_data.OSUsed, (int) stk_data.OSFree);
  }
  else
    {
      if (DEBUG == 1)
	alt_printf("Stack Check Error!\n");
  800264:	01002074 	movhi	r4,129
  800268:	21212704 	addi	r4,r4,-31588
  80026c:	0803aa80 	call	803aa8 <alt_printf>
    }
}
  800270:	e037883a 	mov	sp,fp
  800274:	dfc00117 	ldw	ra,4(sp)
  800278:	df000017 	ldw	fp,0(sp)
  80027c:	dec00204 	addi	sp,sp,8
  800280:	f800283a 	ret

00800284 <statisticTask>:

/* Printing Statistics */
void statisticTask(void* pdata) {
  800284:	defffc04 	addi	sp,sp,-16
  800288:	dfc00315 	stw	ra,12(sp)
  80028c:	df000215 	stw	fp,8(sp)
  800290:	df000204 	addi	fp,sp,8
  800294:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	INT16U timeout = 0;
  800298:	e03ffe0d 	sth	zero,-8(fp)

	while (1) {
		printStackSize("VehicleTask", VEHICLETASK_PRIO);
  80029c:	01002074 	movhi	r4,129
  8002a0:	21212c04 	addi	r4,r4,-31568
  8002a4:	01400204 	movi	r5,8
  8002a8:	08002080 	call	800208 <printStackSize>
		printStackSize("ControlTask", CONTROLTASK_PRIO);
  8002ac:	01002074 	movhi	r4,129
  8002b0:	21212f04 	addi	r4,r4,-31556
  8002b4:	01400284 	movi	r5,10
  8002b8:	08002080 	call	800208 <printStackSize>
		printStackSize("ButtonsIOTask", BUTTONSIO_PRIO);
  8002bc:	01002074 	movhi	r4,129
  8002c0:	21213204 	addi	r4,r4,-31544
  8002c4:	01400304 	movi	r5,12
  8002c8:	08002080 	call	800208 <printStackSize>
		printStackSize("SwitchesIOTask", SWITCHIO_PRIO);
  8002cc:	01002074 	movhi	r4,129
  8002d0:	21213604 	addi	r4,r4,-31528
  8002d4:	01400384 	movi	r5,14
  8002d8:	08002080 	call	800208 <printStackSize>
		printStackSize("OverloadDetectionTask", OVERLOADDETECTION_PRIO);
  8002dc:	01002074 	movhi	r4,129
  8002e0:	21213a04 	addi	r4,r4,-31512
  8002e4:	01400484 	movi	r5,18
  8002e8:	08002080 	call	800208 <printStackSize>
		printStackSize("ExtraloadTask", EXTRALOAD_PRIO);
  8002ec:	01002074 	movhi	r4,129
  8002f0:	21214004 	addi	r4,r4,-31488
  8002f4:	01400404 	movi	r5,16
  8002f8:	08002080 	call	800208 <printStackSize>

		OSSemPend(SemStat,timeout,&err);
  8002fc:	d1212317 	ldw	r4,-31604(gp)
  800300:	e17ffe0b 	ldhu	r5,-8(fp)
  800304:	e1bffe84 	addi	r6,fp,-6
  800308:	0805d900 	call	805d90 <OSSemPend>
	}
  80030c:	003fe306 	br	80029c <statisticTask+0x18>

00800310 <alarm_handler>:
#endif

/*
 * ISR for HW Timer
 */
alt_u32 alarm_handler(void* context) {
  800310:	defffd04 	addi	sp,sp,-12
  800314:	dfc00215 	stw	ra,8(sp)
  800318:	df000115 	stw	fp,4(sp)
  80031c:	df000104 	addi	fp,sp,4
  800320:	e13fff15 	stw	r4,-4(fp)
	OSTmrSignal(); /* Signals a 'tick' to the SW timers */
  800324:	08071c80 	call	8071c8 <OSTmrSignal>

	return delay;
  800328:	d0a12517 	ldw	r2,-31596(gp)
}
  80032c:	e037883a 	mov	sp,fp
  800330:	dfc00117 	ldw	ra,4(sp)
  800334:	df000017 	ldw	fp,0(sp)
  800338:	dec00204 	addi	sp,sp,8
  80033c:	f800283a 	ret

00800340 <CallbackVehicle>:

/*
 * Callbacks resumes the suspended task
 */
void CallbackVehicle(void *ptmr,void *callback_arg) {
  800340:	defffc04 	addi	sp,sp,-16
  800344:	dfc00315 	stw	ra,12(sp)
  800348:	df000215 	stw	fp,8(sp)
  80034c:	df000204 	addi	fp,sp,8
  800350:	e13ffe15 	stw	r4,-8(fp)
  800354:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemVehicle);
  800358:	d1212017 	ldw	r4,-31616(gp)
  80035c:	0805c700 	call	805c70 <OSSemPost>
}
  800360:	e037883a 	mov	sp,fp
  800364:	dfc00117 	ldw	ra,4(sp)
  800368:	df000017 	ldw	fp,0(sp)
  80036c:	dec00204 	addi	sp,sp,8
  800370:	f800283a 	ret

00800374 <CallbackControl>:
void CallbackControl(void *ptmr,void *callback_arg) {
  800374:	defffc04 	addi	sp,sp,-16
  800378:	dfc00315 	stw	ra,12(sp)
  80037c:	df000215 	stw	fp,8(sp)
  800380:	df000204 	addi	fp,sp,8
  800384:	e13ffe15 	stw	r4,-8(fp)
  800388:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemControl);
  80038c:	d1211c17 	ldw	r4,-31632(gp)
  800390:	0805c700 	call	805c70 <OSSemPost>
}
  800394:	e037883a 	mov	sp,fp
  800398:	dfc00117 	ldw	ra,4(sp)
  80039c:	df000017 	ldw	fp,0(sp)
  8003a0:	dec00204 	addi	sp,sp,8
  8003a4:	f800283a 	ret

008003a8 <CallbackButtons>:
void CallbackButtons(void *ptmr,void *callback_arg) {
  8003a8:	defffc04 	addi	sp,sp,-16
  8003ac:	dfc00315 	stw	ra,12(sp)
  8003b0:	df000215 	stw	fp,8(sp)
  8003b4:	df000204 	addi	fp,sp,8
  8003b8:	e13ffe15 	stw	r4,-8(fp)
  8003bc:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemButtons);
  8003c0:	d1212217 	ldw	r4,-31608(gp)
  8003c4:	0805c700 	call	805c70 <OSSemPost>
}
  8003c8:	e037883a 	mov	sp,fp
  8003cc:	dfc00117 	ldw	ra,4(sp)
  8003d0:	df000017 	ldw	fp,0(sp)
  8003d4:	dec00204 	addi	sp,sp,8
  8003d8:	f800283a 	ret

008003dc <CallbackSwitches>:
void CallbackSwitches(void *ptmr,void *callback_arg) {
  8003dc:	defffc04 	addi	sp,sp,-16
  8003e0:	dfc00315 	stw	ra,12(sp)
  8003e4:	df000215 	stw	fp,8(sp)
  8003e8:	df000204 	addi	fp,sp,8
  8003ec:	e13ffe15 	stw	r4,-8(fp)
  8003f0:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemSwitches);
  8003f4:	d1211717 	ldw	r4,-31652(gp)
  8003f8:	0805c700 	call	805c70 <OSSemPost>
}
  8003fc:	e037883a 	mov	sp,fp
  800400:	dfc00117 	ldw	ra,4(sp)
  800404:	df000017 	ldw	fp,0(sp)
  800408:	dec00204 	addi	sp,sp,8
  80040c:	f800283a 	ret

00800410 <CallbackOverload>:
void CallbackOverload(void *ptmr,void *callback_arg) {
  800410:	defffc04 	addi	sp,sp,-16
  800414:	dfc00315 	stw	ra,12(sp)
  800418:	df000215 	stw	fp,8(sp)
  80041c:	df000204 	addi	fp,sp,8
  800420:	e13ffe15 	stw	r4,-8(fp)
  800424:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemOverload);
  800428:	d1212117 	ldw	r4,-31612(gp)
  80042c:	0805c700 	call	805c70 <OSSemPost>
}
  800430:	e037883a 	mov	sp,fp
  800434:	dfc00117 	ldw	ra,4(sp)
  800438:	df000017 	ldw	fp,0(sp)
  80043c:	dec00204 	addi	sp,sp,8
  800440:	f800283a 	ret

00800444 <CallbackExtraloadTask>:

void CallbackExtraloadTask(void *ptmr, void *callback_arg) {
  800444:	defffc04 	addi	sp,sp,-16
  800448:	dfc00315 	stw	ra,12(sp)
  80044c:	df000215 	stw	fp,8(sp)
  800450:	df000204 	addi	fp,sp,8
  800454:	e13ffe15 	stw	r4,-8(fp)
  800458:	e17fff15 	stw	r5,-4(fp)
	OSSemPost(SemExtraload);
  80045c:	d1211917 	ldw	r4,-31644(gp)
  800460:	0805c700 	call	805c70 <OSSemPost>
}
  800464:	e037883a 	mov	sp,fp
  800468:	dfc00117 	ldw	ra,4(sp)
  80046c:	df000017 	ldw	fp,0(sp)
  800470:	dec00204 	addi	sp,sp,8
  800474:	f800283a 	ret

00800478 <CallbackExtraload>:

void CallbackExtraload(void *ptmr, void *callback_arg) {
  800478:	defffd04 	addi	sp,sp,-12
  80047c:	df000215 	stw	fp,8(sp)
  800480:	df000204 	addi	fp,sp,8
  800484:	e13ffe15 	stw	r4,-8(fp)
  800488:	e17fff15 	stw	r5,-4(fp)
	FLAG = 1;
  80048c:	00800044 	movi	r2,1
  800490:	d0a11645 	stb	r2,-31655(gp)
}
  800494:	e037883a 	mov	sp,fp
  800498:	df000017 	ldw	fp,0(sp)
  80049c:	dec00104 	addi	sp,sp,4
  8004a0:	f800283a 	ret

008004a4 <CallbackWatchdog>:

void CallbackWatchdog(void *ptmr, void *callback_arg) {
  8004a4:	defffc04 	addi	sp,sp,-16
  8004a8:	dfc00315 	stw	ra,12(sp)
  8004ac:	df000215 	stw	fp,8(sp)
  8004b0:	df000204 	addi	fp,sp,8
  8004b4:	e13ffe15 	stw	r4,-8(fp)
  8004b8:	e17fff15 	stw	r5,-4(fp)
	alt_printf("CPU is at 100 percent usage!\n");
  8004bc:	01002074 	movhi	r4,129
  8004c0:	21214404 	addi	r4,r4,-31472
  8004c4:	0803aa80 	call	803aa8 <alt_printf>
}
  8004c8:	e037883a 	mov	sp,fp
  8004cc:	dfc00117 	ldw	ra,4(sp)
  8004d0:	df000017 	ldw	fp,0(sp)
  8004d4:	dec00204 	addi	sp,sp,8
  8004d8:	f800283a 	ret

008004dc <int2seven>:
		};

/*
 * convert int to seven segment display format
 */
int int2seven(int inval) {
  8004dc:	defffe04 	addi	sp,sp,-8
  8004e0:	df000115 	stw	fp,4(sp)
  8004e4:	df000104 	addi	fp,sp,4
  8004e8:	e13fff15 	stw	r4,-4(fp)
	return b2sLUT[inval];
  8004ec:	e0bfff17 	ldw	r2,-4(fp)
  8004f0:	00c02074 	movhi	r3,129
  8004f4:	18e24204 	addi	r3,r3,-30456
  8004f8:	1085883a 	add	r2,r2,r2
  8004fc:	1085883a 	add	r2,r2,r2
  800500:	10c5883a 	add	r2,r2,r3
  800504:	10800017 	ldw	r2,0(r2)
}
  800508:	e037883a 	mov	sp,fp
  80050c:	df000017 	ldw	fp,0(sp)
  800510:	dec00104 	addi	sp,sp,4
  800514:	f800283a 	ret

00800518 <show_velocity_on_sevenseg>:

/*
 * output current velocity on the seven segement display
 */
void show_velocity_on_sevenseg(INT8S velocity) {
  800518:	defffa04 	addi	sp,sp,-24
  80051c:	dfc00515 	stw	ra,20(sp)
  800520:	df000415 	stw	fp,16(sp)
  800524:	df000404 	addi	fp,sp,16
  800528:	e13fff05 	stb	r4,-4(fp)
	int tmp = velocity;
  80052c:	e0bfff07 	ldb	r2,-4(fp)
  800530:	e0bffe15 	stw	r2,-8(fp)
	int out;
	INT8U out_high = 0;
  800534:	e03ffc85 	stb	zero,-14(fp)
	INT8U out_low = 0;
  800538:	e03ffc45 	stb	zero,-15(fp)
	INT8U out_sign = 0;
  80053c:	e03ffc05 	stb	zero,-16(fp)

	if (velocity < 0) {
  800540:	e0bfff07 	ldb	r2,-4(fp)
  800544:	1004403a 	cmpge	r2,r2,zero
  800548:	1000071e 	bne	r2,zero,800568 <show_velocity_on_sevenseg+0x50>
		out_sign = int2seven(10);
  80054c:	01000284 	movi	r4,10
  800550:	08004dc0 	call	8004dc <int2seven>
  800554:	e0bffc05 	stb	r2,-16(fp)
		tmp *= -1;
  800558:	e0bffe17 	ldw	r2,-8(fp)
  80055c:	0085c83a 	sub	r2,zero,r2
  800560:	e0bffe15 	stw	r2,-8(fp)
  800564:	00000306 	br	800574 <show_velocity_on_sevenseg+0x5c>
	} else {
		out_sign = int2seven(0);
  800568:	0009883a 	mov	r4,zero
  80056c:	08004dc0 	call	8004dc <int2seven>
  800570:	e0bffc05 	stb	r2,-16(fp)
	}

	out_high = int2seven(tmp / 10);
  800574:	e13ffe17 	ldw	r4,-8(fp)
  800578:	01400284 	movi	r5,10
  80057c:	08027bc0 	call	8027bc <__divsi3>
  800580:	1009883a 	mov	r4,r2
  800584:	08004dc0 	call	8004dc <int2seven>
  800588:	e0bffc85 	stb	r2,-14(fp)
	out_low = int2seven(tmp - (tmp / 10) * 10);
  80058c:	e13ffe17 	ldw	r4,-8(fp)
  800590:	01400284 	movi	r5,10
  800594:	08027bc0 	call	8027bc <__divsi3>
  800598:	1009883a 	mov	r4,r2
  80059c:	01400284 	movi	r5,10
  8005a0:	080288c0 	call	80288c <__mulsi3>
  8005a4:	1007883a 	mov	r3,r2
  8005a8:	e0bffe17 	ldw	r2,-8(fp)
  8005ac:	10c9c83a 	sub	r4,r2,r3
  8005b0:	08004dc0 	call	8004dc <int2seven>
  8005b4:	e0bffc45 	stb	r2,-15(fp)

	out = int2seven(0) << 21 | out_sign << 14 | out_high << 7 | out_low;
  8005b8:	0009883a 	mov	r4,zero
  8005bc:	08004dc0 	call	8004dc <int2seven>
  8005c0:	1006957a 	slli	r3,r2,21
  8005c4:	e0bffc03 	ldbu	r2,-16(fp)
  8005c8:	100493ba 	slli	r2,r2,14
  8005cc:	1886b03a 	or	r3,r3,r2
  8005d0:	e0bffc83 	ldbu	r2,-14(fp)
  8005d4:	100491fa 	slli	r2,r2,7
  8005d8:	1886b03a 	or	r3,r3,r2
  8005dc:	e0bffc43 	ldbu	r2,-15(fp)
  8005e0:	1884b03a 	or	r2,r3,r2
  8005e4:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_LOW28_BASE, out);
  8005e8:	00c04074 	movhi	r3,257
  8005ec:	18c43004 	addi	r3,r3,4288
  8005f0:	e0bffd17 	ldw	r2,-12(fp)
  8005f4:	18800035 	stwio	r2,0(r3)
}
  8005f8:	e037883a 	mov	sp,fp
  8005fc:	dfc00117 	ldw	ra,4(sp)
  800600:	df000017 	ldw	fp,0(sp)
  800604:	dec00204 	addi	sp,sp,8
  800608:	f800283a 	ret

0080060c <show_target_velocity>:

/*
 * shows the target velocity on the seven segment display (HEX5, HEX4)
 * when the cruise control is activated (0 otherwise)
 */
void show_target_velocity(INT8U target_vel) {
  80060c:	defffb04 	addi	sp,sp,-20
  800610:	dfc00415 	stw	ra,16(sp)
  800614:	df000315 	stw	fp,12(sp)
  800618:	dc000215 	stw	r16,8(sp)
  80061c:	df000204 	addi	fp,sp,8
  800620:	e13fff05 	stb	r4,-4(fp)
	INT16U targetVelocityHex;
	INT8U targetDecimalHigh, targetDecimalLow;

	targetDecimalHigh = target_vel / 10;
  800624:	e13fff03 	ldbu	r4,-4(fp)
  800628:	01400284 	movi	r5,10
  80062c:	080287c0 	call	80287c <__udivsi3>
  800630:	e0bffe45 	stb	r2,-7(fp)
	targetDecimalLow = target_vel - 10 * targetDecimalHigh;
  800634:	e13ffe43 	ldbu	r4,-7(fp)
  800638:	01400284 	movi	r5,10
  80063c:	080288c0 	call	80288c <__mulsi3>
  800640:	1007883a 	mov	r3,r2
  800644:	e0bfff03 	ldbu	r2,-4(fp)
  800648:	10c5c83a 	sub	r2,r2,r3
  80064c:	e0bffe05 	stb	r2,-8(fp)
	targetVelocityHex = (int2seven(targetDecimalHigh) << 7)
  800650:	e13ffe43 	ldbu	r4,-7(fp)
  800654:	08004dc0 	call	8004dc <int2seven>
  800658:	100491fa 	slli	r2,r2,7
  80065c:	1021883a 	mov	r16,r2
  800660:	e13ffe03 	ldbu	r4,-8(fp)
  800664:	08004dc0 	call	8004dc <int2seven>
  800668:	8085883a 	add	r2,r16,r2
  80066c:	e0bffe8d 	sth	r2,-6(fp)
			+ (int2seven(targetDecimalLow));

	IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_HEX_HIGH28_BASE, targetVelocityHex);
  800670:	e0fffe8b 	ldhu	r3,-6(fp)
  800674:	00804074 	movhi	r2,257
  800678:	10843404 	addi	r2,r2,4304
  80067c:	10c00035 	stwio	r3,0(r2)
}
  800680:	e037883a 	mov	sp,fp
  800684:	dfc00217 	ldw	ra,8(sp)
  800688:	df000117 	ldw	fp,4(sp)
  80068c:	dc000017 	ldw	r16,0(sp)
  800690:	dec00304 	addi	sp,sp,12
  800694:	f800283a 	ret

00800698 <show_position>:
 * LEDR15: [800m, 1200m)
 * LEDR14: [1200m, 1600m)
 * LEDR13: [1600m, 2000m)
 * LEDR12: [2000m, 2400m]
 */
void show_position(INT16U position) {
  800698:	defffb04 	addi	sp,sp,-20
  80069c:	dfc00415 	stw	ra,16(sp)
  8006a0:	df000315 	stw	fp,12(sp)
  8006a4:	df000304 	addi	fp,sp,12
  8006a8:	e13fff0d 	sth	r4,-4(fp)
	int positionLEDs = 1 << (17 - (position / 4000));
  8006ac:	e13fff0b 	ldhu	r4,-4(fp)
  8006b0:	0143e804 	movi	r5,4000
  8006b4:	080287c0 	call	80287c <__udivsi3>
  8006b8:	10ffffcc 	andi	r3,r2,65535
  8006bc:	00800444 	movi	r2,17
  8006c0:	10c7c83a 	sub	r3,r2,r3
  8006c4:	00800044 	movi	r2,1
  8006c8:	10c4983a 	sll	r2,r2,r3
  8006cc:	e0bffe15 	stw	r2,-8(fp)
	int currentLEDs = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
  8006d0:	00804074 	movhi	r2,257
  8006d4:	10843c04 	addi	r2,r2,4336
  8006d8:	10800037 	ldwio	r2,0(r2)
  8006dc:	e0bffd15 	stw	r2,-12(fp)
	currentLEDs = currentLEDs & ~(0x3f << 12); 					//do not overwrite the other switches' LEDs
  8006e0:	e0fffd17 	ldw	r3,-12(fp)
  8006e4:	00bfff34 	movhi	r2,65532
  8006e8:	1083ffc4 	addi	r2,r2,4095
  8006ec:	1884703a 	and	r2,r3,r2
  8006f0:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA( DE2_PIO_REDLED18_BASE,
  8006f4:	e0fffd17 	ldw	r3,-12(fp)
  8006f8:	e0bffe17 	ldw	r2,-8(fp)
  8006fc:	1886b03a 	or	r3,r3,r2
  800700:	00804074 	movhi	r2,257
  800704:	10843c04 	addi	r2,r2,4336
  800708:	10c00035 	stwio	r3,0(r2)
			currentLEDs | positionLEDs);
}
  80070c:	e037883a 	mov	sp,fp
  800710:	dfc00117 	ldw	ra,4(sp)
  800714:	df000017 	ldw	fp,0(sp)
  800718:	dec00204 	addi	sp,sp,8
  80071c:	f800283a 	ret

00800720 <adjust_position>:
/*
 * The function 'adjust_position()' adjusts the position depending on the
 * acceleration and velocity.
 */
INT16U adjust_position(INT16U position, INT16S velocity, INT8S acceleration,
		INT16U time_interval) {
  800720:	defff704 	addi	sp,sp,-36
  800724:	dfc00815 	stw	ra,32(sp)
  800728:	df000715 	stw	fp,28(sp)
  80072c:	dc400615 	stw	r17,24(sp)
  800730:	dc000515 	stw	r16,20(sp)
  800734:	df000504 	addi	fp,sp,20
  800738:	e13ffc0d 	sth	r4,-16(fp)
  80073c:	e17ffd0d 	sth	r5,-12(fp)
  800740:	e1bffe05 	stb	r6,-8(fp)
  800744:	e1ffff0d 	sth	r7,-4(fp)
	INT16S new_position = position + velocity * time_interval / 1000
			+ acceleration / 2 * (time_interval / 1000)
					* (time_interval / 1000);
  800748:	e13ffd0f 	ldh	r4,-12(fp)
  80074c:	e17fff0b 	ldhu	r5,-4(fp)
  800750:	080288c0 	call	80288c <__mulsi3>
  800754:	1009883a 	mov	r4,r2
  800758:	0140fa04 	movi	r5,1000
  80075c:	08027bc0 	call	8027bc <__divsi3>
  800760:	1007883a 	mov	r3,r2
  800764:	e0bffc0b 	ldhu	r2,-16(fp)
  800768:	1885883a 	add	r2,r3,r2
  80076c:	1023883a 	mov	r17,r2
  800770:	e0fffe07 	ldb	r3,-8(fp)
  800774:	1804d7fa 	srli	r2,r3,31
  800778:	10c5883a 	add	r2,r2,r3
  80077c:	1005d07a 	srai	r2,r2,1
  800780:	14003fcc 	andi	r16,r2,255
  800784:	8400201c 	xori	r16,r16,128
  800788:	843fe004 	addi	r16,r16,-128
  80078c:	e13fff0b 	ldhu	r4,-4(fp)
  800790:	0140fa04 	movi	r5,1000
  800794:	080287c0 	call	80287c <__udivsi3>
  800798:	117fffcc 	andi	r5,r2,65535
  80079c:	8009883a 	mov	r4,r16
  8007a0:	080288c0 	call	80288c <__mulsi3>
  8007a4:	1021883a 	mov	r16,r2
  8007a8:	e13fff0b 	ldhu	r4,-4(fp)
  8007ac:	0140fa04 	movi	r5,1000
  8007b0:	080287c0 	call	80287c <__udivsi3>
  8007b4:	117fffcc 	andi	r5,r2,65535
  8007b8:	8009883a 	mov	r4,r16
  8007bc:	080288c0 	call	80288c <__mulsi3>
  8007c0:	8885883a 	add	r2,r17,r2
  8007c4:	e0bffb0d 	sth	r2,-20(fp)

	if (new_position > 24000) {
  8007c8:	e0bffb0f 	ldh	r2,-20(fp)
  8007cc:	10977050 	cmplti	r2,r2,24001
  8007d0:	1000041e 	bne	r2,zero,8007e4 <adjust_position+0xc4>
		new_position -= 24000;
  8007d4:	e0bffb0b 	ldhu	r2,-20(fp)
  8007d8:	10a89004 	addi	r2,r2,-24000
  8007dc:	e0bffb0d 	sth	r2,-20(fp)
  8007e0:	00000606 	br	8007fc <adjust_position+0xdc>
	} else if (new_position < 0) {
  8007e4:	e0bffb0f 	ldh	r2,-20(fp)
  8007e8:	1004403a 	cmpge	r2,r2,zero
  8007ec:	1000031e 	bne	r2,zero,8007fc <adjust_position+0xdc>
		new_position += 24000;
  8007f0:	e0bffb0b 	ldhu	r2,-20(fp)
  8007f4:	10977004 	addi	r2,r2,24000
  8007f8:	e0bffb0d 	sth	r2,-20(fp)
	}

	show_position(new_position);
  8007fc:	e0bffb0b 	ldhu	r2,-20(fp)
  800800:	113fffcc 	andi	r4,r2,65535
  800804:	08006980 	call	800698 <show_position>
	return new_position;
  800808:	e0bffb0b 	ldhu	r2,-20(fp)
  80080c:	10bfffcc 	andi	r2,r2,65535
}
  800810:	e037883a 	mov	sp,fp
  800814:	dfc00317 	ldw	ra,12(sp)
  800818:	df000217 	ldw	fp,8(sp)
  80081c:	dc400117 	ldw	r17,4(sp)
  800820:	dc000017 	ldw	r16,0(sp)
  800824:	dec00404 	addi	sp,sp,16
  800828:	f800283a 	ret

0080082c <adjust_velocity>:
/*
 * The function 'adjust_velocity()' adjusts the velocity depending on the
 * acceleration.
 */
INT16S adjust_velocity(INT16S velocity, INT8S acceleration,
		enum active brake_pedal, INT16U time_interval) {
  80082c:	defff704 	addi	sp,sp,-36
  800830:	dfc00815 	stw	ra,32(sp)
  800834:	df000715 	stw	fp,28(sp)
  800838:	dc400615 	stw	r17,24(sp)
  80083c:	dc000515 	stw	r16,20(sp)
  800840:	df000504 	addi	fp,sp,20
  800844:	e1bffe15 	stw	r6,-8(fp)
  800848:	e13ffc0d 	sth	r4,-16(fp)
  80084c:	e17ffd05 	stb	r5,-12(fp)
  800850:	e1ffff0d 	sth	r7,-4(fp)
	INT16S new_velocity;
	INT8U brake_retardation = 200;
  800854:	00bff204 	movi	r2,-56
  800858:	e0bffb05 	stb	r2,-20(fp)

	if (brake_pedal == off)
  80085c:	e0bffe17 	ldw	r2,-8(fp)
  800860:	10800058 	cmpnei	r2,r2,1
  800864:	1000251e 	bne	r2,zero,8008fc <adjust_velocity+0xd0>
		new_velocity = velocity
  800868:	e13ffc0f 	ldh	r4,-16(fp)
  80086c:	08025380 	call	802538 <__floatsidf>
  800870:	1021883a 	mov	r16,r2
  800874:	1823883a 	mov	r17,r3
  800878:	e13ffd07 	ldb	r4,-12(fp)
  80087c:	e17fff0b 	ldhu	r5,-4(fp)
  800880:	080288c0 	call	80288c <__mulsi3>
  800884:	1009883a 	mov	r4,r2
  800888:	0801cf00 	call	801cf0 <__floatsisf>
  80088c:	1009883a 	mov	r4,r2
  800890:	0801d880 	call	801d88 <__extendsfdf2>
  800894:	100b883a 	mov	r5,r2
  800898:	180d883a 	mov	r6,r3
  80089c:	2809883a 	mov	r4,r5
  8008a0:	300b883a 	mov	r5,r6
  8008a4:	000d883a 	mov	r6,zero
  8008a8:	01d023f4 	movhi	r7,16527
  8008ac:	39d00004 	addi	r7,r7,16384
  8008b0:	08022e00 	call	8022e0 <__divdf3>
  8008b4:	1009883a 	mov	r4,r2
  8008b8:	180b883a 	mov	r5,r3
  8008bc:	2005883a 	mov	r2,r4
  8008c0:	2807883a 	mov	r3,r5
  8008c4:	8009883a 	mov	r4,r16
  8008c8:	880b883a 	mov	r5,r17
  8008cc:	100d883a 	mov	r6,r2
  8008d0:	180f883a 	mov	r7,r3
  8008d4:	080226c0 	call	80226c <__adddf3>
  8008d8:	1009883a 	mov	r4,r2
  8008dc:	180b883a 	mov	r5,r3
  8008e0:	2005883a 	mov	r2,r4
  8008e4:	2807883a 	mov	r3,r5
  8008e8:	1009883a 	mov	r4,r2
  8008ec:	180b883a 	mov	r5,r3
  8008f0:	08026300 	call	802630 <__fixdfsi>
  8008f4:	e0bffb8d 	sth	r2,-18(fp)
  8008f8:	00001406 	br	80094c <adjust_velocity+0x120>
				+ (float) (acceleration * time_interval) / 1000.0;
	else {
		if (brake_retardation * time_interval / 1000 > velocity)
  8008fc:	e13ffb03 	ldbu	r4,-20(fp)
  800900:	e17fff0b 	ldhu	r5,-4(fp)
  800904:	080288c0 	call	80288c <__mulsi3>
  800908:	1009883a 	mov	r4,r2
  80090c:	0140fa04 	movi	r5,1000
  800910:	08027bc0 	call	8027bc <__divsi3>
  800914:	1007883a 	mov	r3,r2
  800918:	e0bffc0f 	ldh	r2,-16(fp)
  80091c:	10c0020e 	bge	r2,r3,800928 <adjust_velocity+0xfc>
			new_velocity = 0;
  800920:	e03ffb8d 	sth	zero,-18(fp)
  800924:	00000906 	br	80094c <adjust_velocity+0x120>
		else
			new_velocity = velocity - brake_retardation * time_interval / 1000;
  800928:	e43ffc0b 	ldhu	r16,-16(fp)
  80092c:	e13ffb03 	ldbu	r4,-20(fp)
  800930:	e17fff0b 	ldhu	r5,-4(fp)
  800934:	080288c0 	call	80288c <__mulsi3>
  800938:	1009883a 	mov	r4,r2
  80093c:	0140fa04 	movi	r5,1000
  800940:	08027bc0 	call	8027bc <__divsi3>
  800944:	8085c83a 	sub	r2,r16,r2
  800948:	e0bffb8d 	sth	r2,-18(fp)
	}

	return new_velocity;
  80094c:	e0bffb8f 	ldh	r2,-18(fp)
}
  800950:	e037883a 	mov	sp,fp
  800954:	dfc00317 	ldw	ra,12(sp)
  800958:	df000217 	ldw	fp,8(sp)
  80095c:	dc400117 	ldw	r17,4(sp)
  800960:	dc000017 	ldw	r16,0(sp)
  800964:	dec00404 	addi	sp,sp,16
  800968:	f800283a 	ret

0080096c <VehicleTask>:

/*
 * The task 'VehicleTask' updates the current velocity of the vehicle
 */
void VehicleTask(void* pdata) {
  80096c:	defff104 	addi	sp,sp,-60
  800970:	dfc00e15 	stw	ra,56(sp)
  800974:	df000d15 	stw	fp,52(sp)
  800978:	df000d04 	addi	fp,sp,52
  80097c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	void* msg;
	INT8U* throttle;
	INT8S acceleration; /* Value between 40 and -20 (4.0 m/s^2 and -2.0 m/s^2) */
	INT8S retardation; /* Value between 20 and -10 (2.0 m/s^2 and -1.0 m/s^2) */
	INT16U position = 0; /* Value between 0 and 20000 (0.0 m and 2000.0 m)  */
  800980:	e03ffa8d 	sth	zero,-22(fp)
	INT16S velocity = 0; /* Value between -200 and 700 (-20.0 m/s amd 70.0 m/s) */
  800984:	e03ffe8d 	sth	zero,-6(fp)
	INT16S wind_factor; /* Value between -10 and 20 (2.0 m/s^2 and -1.0 m/s^2) */

	alt_printf("Vehicle task created!\n");
  800988:	01002074 	movhi	r4,129
  80098c:	21214c04 	addi	r4,r4,-31440
  800990:	0803aa80 	call	803aa8 <alt_printf>

	while (1) {
		err = OSMboxPost(Mbox_Velocity, (void *) &velocity);
  800994:	d1211a17 	ldw	r4,-31640(gp)
  800998:	e17ffe84 	addi	r5,fp,-6
  80099c:	0805bec0 	call	805bec <OSMboxPost>
  8009a0:	e0bffe05 	stb	r2,-8(fp)

		OSSemPend(SemVehicle,0,&err);
  8009a4:	d1212017 	ldw	r4,-31616(gp)
  8009a8:	e1bffe04 	addi	r6,fp,-8
  8009ac:	000b883a 	mov	r5,zero
  8009b0:	0805d900 	call	805d90 <OSSemPend>

		/* Non-blocking read of mailbox:
		 - message in mailbox: update throttle
		 - no message:         use old throttle
		 */
		msg = OSMboxPend(Mbox_Throttle, 1, &err);
  8009b4:	d1211817 	ldw	r4,-31648(gp)
  8009b8:	e1bffe04 	addi	r6,fp,-8
  8009bc:	01400044 	movi	r5,1
  8009c0:	08059a80 	call	8059a8 <OSMboxPend>
  8009c4:	e0bffd15 	stw	r2,-12(fp)
		if (err == OS_NO_ERR)
  8009c8:	e0bffe03 	ldbu	r2,-8(fp)
  8009cc:	10803fcc 	andi	r2,r2,255
  8009d0:	1004c03a 	cmpne	r2,r2,zero
  8009d4:	1000021e 	bne	r2,zero,8009e0 <VehicleTask+0x74>
			throttle = (INT8U*) msg;
  8009d8:	e0bffd17 	ldw	r2,-12(fp)
  8009dc:	e0bffc15 	stw	r2,-16(fp)

		/* Retardation : Factor of Terrain and Wind Resistance */
		if (velocity > 0)
  8009e0:	e0bffe8b 	ldhu	r2,-6(fp)
  8009e4:	10bfffcc 	andi	r2,r2,65535
  8009e8:	10a0001c 	xori	r2,r2,32768
  8009ec:	10a00004 	addi	r2,r2,-32768
  8009f0:	10800050 	cmplti	r2,r2,1
  8009f4:	10000f1e 	bne	r2,zero,800a34 <VehicleTask+0xc8>
			wind_factor = velocity * velocity / 10000 + 1;
  8009f8:	e0bffe8b 	ldhu	r2,-6(fp)
  8009fc:	113fffcc 	andi	r4,r2,65535
  800a00:	2120001c 	xori	r4,r4,32768
  800a04:	21200004 	addi	r4,r4,-32768
  800a08:	e0bffe8b 	ldhu	r2,-6(fp)
  800a0c:	117fffcc 	andi	r5,r2,65535
  800a10:	2960001c 	xori	r5,r5,32768
  800a14:	29600004 	addi	r5,r5,-32768
  800a18:	080288c0 	call	80288c <__mulsi3>
  800a1c:	1009883a 	mov	r4,r2
  800a20:	0149c404 	movi	r5,10000
  800a24:	08027bc0 	call	8027bc <__divsi3>
  800a28:	10800044 	addi	r2,r2,1
  800a2c:	e0bffa0d 	sth	r2,-24(fp)
  800a30:	00000f06 	br	800a70 <VehicleTask+0x104>
		else
			wind_factor = (-1) * velocity * velocity / 10000 + 1;
  800a34:	e0bffe8b 	ldhu	r2,-6(fp)
  800a38:	10bfffcc 	andi	r2,r2,65535
  800a3c:	10a0001c 	xori	r2,r2,32768
  800a40:	10a00004 	addi	r2,r2,-32768
  800a44:	0089c83a 	sub	r4,zero,r2
  800a48:	e0bffe8b 	ldhu	r2,-6(fp)
  800a4c:	117fffcc 	andi	r5,r2,65535
  800a50:	2960001c 	xori	r5,r5,32768
  800a54:	29600004 	addi	r5,r5,-32768
  800a58:	080288c0 	call	80288c <__mulsi3>
  800a5c:	1009883a 	mov	r4,r2
  800a60:	0149c404 	movi	r5,10000
  800a64:	08027bc0 	call	8027bc <__divsi3>
  800a68:	10800044 	addi	r2,r2,1
  800a6c:	e0bffa0d 	sth	r2,-24(fp)

		if (position < 4000)
  800a70:	e0bffa8b 	ldhu	r2,-22(fp)
  800a74:	1083e828 	cmpgeui	r2,r2,4000
  800a78:	1000031e 	bne	r2,zero,800a88 <VehicleTask+0x11c>
			retardation = wind_factor; // even ground
  800a7c:	e0bffa0b 	ldhu	r2,-24(fp)
  800a80:	e0bffb05 	stb	r2,-20(fp)
  800a84:	00001e06 	br	800b00 <VehicleTask+0x194>
		else if (position < 8000)
  800a88:	e0bffa8b 	ldhu	r2,-22(fp)
  800a8c:	1087d028 	cmpgeui	r2,r2,8000
  800a90:	1000041e 	bne	r2,zero,800aa4 <VehicleTask+0x138>
			retardation = wind_factor + 15; // traveling uphill
  800a94:	e0bffa0b 	ldhu	r2,-24(fp)
  800a98:	108003c4 	addi	r2,r2,15
  800a9c:	e0bffb05 	stb	r2,-20(fp)
  800aa0:	00001706 	br	800b00 <VehicleTask+0x194>
		else if (position < 12000)
  800aa4:	e0bffa8b 	ldhu	r2,-22(fp)
  800aa8:	108bb828 	cmpgeui	r2,r2,12000
  800aac:	1000041e 	bne	r2,zero,800ac0 <VehicleTask+0x154>
			retardation = wind_factor + 25; // traveling steep uphill
  800ab0:	e0bffa0b 	ldhu	r2,-24(fp)
  800ab4:	10800644 	addi	r2,r2,25
  800ab8:	e0bffb05 	stb	r2,-20(fp)
  800abc:	00001006 	br	800b00 <VehicleTask+0x194>
		else if (position < 16000)
  800ac0:	e0bffa8b 	ldhu	r2,-22(fp)
  800ac4:	108fa028 	cmpgeui	r2,r2,16000
  800ac8:	1000031e 	bne	r2,zero,800ad8 <VehicleTask+0x16c>
			retardation = wind_factor; // even ground
  800acc:	e0bffa0b 	ldhu	r2,-24(fp)
  800ad0:	e0bffb05 	stb	r2,-20(fp)
  800ad4:	00000a06 	br	800b00 <VehicleTask+0x194>
		else if (position < 20000)
  800ad8:	e0bffa8b 	ldhu	r2,-22(fp)
  800adc:	10938828 	cmpgeui	r2,r2,20000
  800ae0:	1000041e 	bne	r2,zero,800af4 <VehicleTask+0x188>
			retardation = wind_factor - 10; //traveling steep downhill
  800ae4:	e0bffa0b 	ldhu	r2,-24(fp)
  800ae8:	10bffd84 	addi	r2,r2,-10
  800aec:	e0bffb05 	stb	r2,-20(fp)
  800af0:	00000306 	br	800b00 <VehicleTask+0x194>
		else
			retardation = wind_factor - 5; // traveling downhill
  800af4:	e0bffa0b 	ldhu	r2,-24(fp)
  800af8:	10bffec4 	addi	r2,r2,-5
  800afc:	e0bffb05 	stb	r2,-20(fp)

		acceleration = *throttle / 2 - retardation;
  800b00:	e0bffc17 	ldw	r2,-16(fp)
  800b04:	10800003 	ldbu	r2,0(r2)
  800b08:	10803fcc 	andi	r2,r2,255
  800b0c:	1004d07a 	srli	r2,r2,1
  800b10:	1007883a 	mov	r3,r2
  800b14:	e0bffb03 	ldbu	r2,-20(fp)
  800b18:	1885c83a 	sub	r2,r3,r2
  800b1c:	e0bffb45 	stb	r2,-19(fp)
		position = adjust_position(position, velocity, acceleration, 300);
  800b20:	e13ffa8b 	ldhu	r4,-22(fp)
  800b24:	e0bffe8b 	ldhu	r2,-6(fp)
  800b28:	117fffcc 	andi	r5,r2,65535
  800b2c:	2960001c 	xori	r5,r5,32768
  800b30:	29600004 	addi	r5,r5,-32768
  800b34:	e1bffb47 	ldb	r6,-19(fp)
  800b38:	01c04b04 	movi	r7,300
  800b3c:	08007200 	call	800720 <adjust_position>
  800b40:	e0bffa8d 	sth	r2,-22(fp)
		velocity = adjust_velocity(velocity, acceleration, brake_pedal, 300);
  800b44:	e0bffe8b 	ldhu	r2,-6(fp)
  800b48:	113fffcc 	andi	r4,r2,65535
  800b4c:	2120001c 	xori	r4,r4,32768
  800b50:	21200004 	addi	r4,r4,-32768
  800b54:	e17ffb47 	ldb	r5,-19(fp)
  800b58:	d1a00117 	ldw	r6,-32764(gp)
  800b5c:	01c04b04 	movi	r7,300
  800b60:	080082c0 	call	80082c <adjust_velocity>
  800b64:	e0bffe8d 	sth	r2,-6(fp)

		/*decades, units and tenth parts of the hexadecimal number (we want to convert to decimal)*/
		int m, c, d, u, t;

		t =  position         % 10,
  800b68:	e13ffa8b 	ldhu	r4,-22(fp)
  800b6c:	01400284 	movi	r5,10
  800b70:	08028840 	call	802884 <__umodsi3>
  800b74:	10bfffcc 	andi	r2,r2,65535
  800b78:	e0bff515 	stw	r2,-44(fp)
  800b7c:	e13ffa8b 	ldhu	r4,-22(fp)
  800b80:	01400284 	movi	r5,10
  800b84:	080287c0 	call	80287c <__udivsi3>
  800b88:	113fffcc 	andi	r4,r2,65535
  800b8c:	01400284 	movi	r5,10
  800b90:	08028840 	call	802884 <__umodsi3>
  800b94:	10bfffcc 	andi	r2,r2,65535
  800b98:	e0bff615 	stw	r2,-40(fp)
  800b9c:	e13ffa8b 	ldhu	r4,-22(fp)
  800ba0:	01401904 	movi	r5,100
  800ba4:	080287c0 	call	80287c <__udivsi3>
  800ba8:	113fffcc 	andi	r4,r2,65535
  800bac:	01400284 	movi	r5,10
  800bb0:	08028840 	call	802884 <__umodsi3>
  800bb4:	10bfffcc 	andi	r2,r2,65535
  800bb8:	e0bff715 	stw	r2,-36(fp)
  800bbc:	e13ffa8b 	ldhu	r4,-22(fp)
  800bc0:	0140fa04 	movi	r5,1000
  800bc4:	080287c0 	call	80287c <__udivsi3>
  800bc8:	113fffcc 	andi	r4,r2,65535
  800bcc:	01400284 	movi	r5,10
  800bd0:	08028840 	call	802884 <__umodsi3>
  800bd4:	10bfffcc 	andi	r2,r2,65535
  800bd8:	e0bff815 	stw	r2,-32(fp)
  800bdc:	e13ffa8b 	ldhu	r4,-22(fp)
  800be0:	0149c404 	movi	r5,10000
  800be4:	080287c0 	call	80287c <__udivsi3>
  800be8:	113fffcc 	andi	r4,r2,65535
  800bec:	01400284 	movi	r5,10
  800bf0:	08028840 	call	802884 <__umodsi3>
  800bf4:	10bfffcc 	andi	r2,r2,65535
  800bf8:	e0bff915 	stw	r2,-28(fp)
		u = (position / 10)   % 10,
		d = (position / 100)  % 10,
		c = (position / 1000) % 10,
		m = (position / 10000)% 10;
		alt_printf("Position: %x%x%x%x.%x m\n", m, c, d, u, t);
  800bfc:	e0bff617 	ldw	r2,-40(fp)
  800c00:	d8800015 	stw	r2,0(sp)
  800c04:	e0bff517 	ldw	r2,-44(fp)
  800c08:	d8800115 	stw	r2,4(sp)
  800c0c:	01002074 	movhi	r4,129
  800c10:	21215204 	addi	r4,r4,-31416
  800c14:	e17ff917 	ldw	r5,-28(fp)
  800c18:	e1bff817 	ldw	r6,-32(fp)
  800c1c:	e1fff717 	ldw	r7,-36(fp)
  800c20:	0803aa80 	call	803aa8 <alt_printf>

		if(velocity < 0) {
  800c24:	e0bffe8b 	ldhu	r2,-6(fp)
  800c28:	10bfffcc 	andi	r2,r2,65535
  800c2c:	10a0001c 	xori	r2,r2,32768
  800c30:	10a00004 	addi	r2,r2,-32768
  800c34:	1004403a 	cmpge	r2,r2,zero
  800c38:	10005c1e 	bne	r2,zero,800dac <VehicleTask+0x440>
			velocity *= -1;
  800c3c:	e0bffe8b 	ldhu	r2,-6(fp)
  800c40:	0085c83a 	sub	r2,zero,r2
  800c44:	e0bffe8d 	sth	r2,-6(fp)
			t = (int) velocity           %10,
  800c48:	e0bffe8b 	ldhu	r2,-6(fp)
  800c4c:	113fffcc 	andi	r4,r2,65535
  800c50:	2120001c 	xori	r4,r4,32768
  800c54:	21200004 	addi	r4,r4,-32768
  800c58:	01400284 	movi	r5,10
  800c5c:	080281c0 	call	80281c <__modsi3>
  800c60:	10bfffcc 	andi	r2,r2,65535
  800c64:	10a0001c 	xori	r2,r2,32768
  800c68:	10a00004 	addi	r2,r2,-32768
  800c6c:	e0bff515 	stw	r2,-44(fp)
  800c70:	e0bffe8b 	ldhu	r2,-6(fp)
  800c74:	113fffcc 	andi	r4,r2,65535
  800c78:	2120001c 	xori	r4,r4,32768
  800c7c:	21200004 	addi	r4,r4,-32768
  800c80:	08025380 	call	802538 <__floatsidf>
  800c84:	100b883a 	mov	r5,r2
  800c88:	180d883a 	mov	r6,r3
  800c8c:	2809883a 	mov	r4,r5
  800c90:	300b883a 	mov	r5,r6
  800c94:	000d883a 	mov	r6,zero
  800c98:	01d00934 	movhi	r7,16420
  800c9c:	08022e00 	call	8022e0 <__divdf3>
  800ca0:	1009883a 	mov	r4,r2
  800ca4:	180b883a 	mov	r5,r3
  800ca8:	2005883a 	mov	r2,r4
  800cac:	2807883a 	mov	r3,r5
  800cb0:	1009883a 	mov	r4,r2
  800cb4:	180b883a 	mov	r5,r3
  800cb8:	08026300 	call	802630 <__fixdfsi>
  800cbc:	1009883a 	mov	r4,r2
  800cc0:	01400284 	movi	r5,10
  800cc4:	080281c0 	call	80281c <__modsi3>
  800cc8:	e0bff615 	stw	r2,-40(fp)
  800ccc:	e0bffe8b 	ldhu	r2,-6(fp)
  800cd0:	113fffcc 	andi	r4,r2,65535
  800cd4:	2120001c 	xori	r4,r4,32768
  800cd8:	21200004 	addi	r4,r4,-32768
  800cdc:	08025380 	call	802538 <__floatsidf>
  800ce0:	100b883a 	mov	r5,r2
  800ce4:	180d883a 	mov	r6,r3
  800ce8:	2809883a 	mov	r4,r5
  800cec:	300b883a 	mov	r5,r6
  800cf0:	000d883a 	mov	r6,zero
  800cf4:	01d01674 	movhi	r7,16473
  800cf8:	08022e00 	call	8022e0 <__divdf3>
  800cfc:	1009883a 	mov	r4,r2
  800d00:	180b883a 	mov	r5,r3
  800d04:	2005883a 	mov	r2,r4
  800d08:	2807883a 	mov	r3,r5
  800d0c:	1009883a 	mov	r4,r2
  800d10:	180b883a 	mov	r5,r3
  800d14:	08026300 	call	802630 <__fixdfsi>
  800d18:	1009883a 	mov	r4,r2
  800d1c:	01400284 	movi	r5,10
  800d20:	080281c0 	call	80281c <__modsi3>
  800d24:	e0bff715 	stw	r2,-36(fp)
  800d28:	e0bffe8b 	ldhu	r2,-6(fp)
  800d2c:	113fffcc 	andi	r4,r2,65535
  800d30:	2120001c 	xori	r4,r4,32768
  800d34:	21200004 	addi	r4,r4,-32768
  800d38:	08025380 	call	802538 <__floatsidf>
  800d3c:	100b883a 	mov	r5,r2
  800d40:	180d883a 	mov	r6,r3
  800d44:	2809883a 	mov	r4,r5
  800d48:	300b883a 	mov	r5,r6
  800d4c:	000d883a 	mov	r6,zero
  800d50:	01d023f4 	movhi	r7,16527
  800d54:	39d00004 	addi	r7,r7,16384
  800d58:	08022e00 	call	8022e0 <__divdf3>
  800d5c:	1009883a 	mov	r4,r2
  800d60:	180b883a 	mov	r5,r3
  800d64:	2005883a 	mov	r2,r4
  800d68:	2807883a 	mov	r3,r5
  800d6c:	1009883a 	mov	r4,r2
  800d70:	180b883a 	mov	r5,r3
  800d74:	08026300 	call	802630 <__fixdfsi>
  800d78:	1009883a 	mov	r4,r2
  800d7c:	01400284 	movi	r5,10
  800d80:	080281c0 	call	80281c <__modsi3>
  800d84:	e0bff815 	stw	r2,-32(fp)
			u = (int)(velocity / 10.0)   %10,
			d = (int)(velocity / 100.0)  %10,
			c = (int)(velocity / 1000.0) %10;
			alt_printf("Velocity: -%x%x%x.%x m/s\n", c, d, u, t);
  800d88:	e0bff517 	ldw	r2,-44(fp)
  800d8c:	d8800015 	stw	r2,0(sp)
  800d90:	01002074 	movhi	r4,129
  800d94:	21215904 	addi	r4,r4,-31388
  800d98:	e17ff817 	ldw	r5,-32(fp)
  800d9c:	e1bff717 	ldw	r6,-36(fp)
  800da0:	e1fff617 	ldw	r7,-40(fp)
  800da4:	0803aa80 	call	803aa8 <alt_printf>
  800da8:	00005806 	br	800f0c <VehicleTask+0x5a0>
		}
		else {
			t = (int) velocity           %10,
  800dac:	e0bffe8b 	ldhu	r2,-6(fp)
  800db0:	113fffcc 	andi	r4,r2,65535
  800db4:	2120001c 	xori	r4,r4,32768
  800db8:	21200004 	addi	r4,r4,-32768
  800dbc:	01400284 	movi	r5,10
  800dc0:	080281c0 	call	80281c <__modsi3>
  800dc4:	10bfffcc 	andi	r2,r2,65535
  800dc8:	10a0001c 	xori	r2,r2,32768
  800dcc:	10a00004 	addi	r2,r2,-32768
  800dd0:	e0bff515 	stw	r2,-44(fp)
  800dd4:	e0bffe8b 	ldhu	r2,-6(fp)
  800dd8:	113fffcc 	andi	r4,r2,65535
  800ddc:	2120001c 	xori	r4,r4,32768
  800de0:	21200004 	addi	r4,r4,-32768
  800de4:	08025380 	call	802538 <__floatsidf>
  800de8:	100b883a 	mov	r5,r2
  800dec:	180d883a 	mov	r6,r3
  800df0:	2809883a 	mov	r4,r5
  800df4:	300b883a 	mov	r5,r6
  800df8:	000d883a 	mov	r6,zero
  800dfc:	01d00934 	movhi	r7,16420
  800e00:	08022e00 	call	8022e0 <__divdf3>
  800e04:	1009883a 	mov	r4,r2
  800e08:	180b883a 	mov	r5,r3
  800e0c:	2005883a 	mov	r2,r4
  800e10:	2807883a 	mov	r3,r5
  800e14:	1009883a 	mov	r4,r2
  800e18:	180b883a 	mov	r5,r3
  800e1c:	08026300 	call	802630 <__fixdfsi>
  800e20:	1009883a 	mov	r4,r2
  800e24:	01400284 	movi	r5,10
  800e28:	080281c0 	call	80281c <__modsi3>
  800e2c:	e0bff615 	stw	r2,-40(fp)
  800e30:	e0bffe8b 	ldhu	r2,-6(fp)
  800e34:	113fffcc 	andi	r4,r2,65535
  800e38:	2120001c 	xori	r4,r4,32768
  800e3c:	21200004 	addi	r4,r4,-32768
  800e40:	08025380 	call	802538 <__floatsidf>
  800e44:	100b883a 	mov	r5,r2
  800e48:	180d883a 	mov	r6,r3
  800e4c:	2809883a 	mov	r4,r5
  800e50:	300b883a 	mov	r5,r6
  800e54:	000d883a 	mov	r6,zero
  800e58:	01d01674 	movhi	r7,16473
  800e5c:	08022e00 	call	8022e0 <__divdf3>
  800e60:	1009883a 	mov	r4,r2
  800e64:	180b883a 	mov	r5,r3
  800e68:	2005883a 	mov	r2,r4
  800e6c:	2807883a 	mov	r3,r5
  800e70:	1009883a 	mov	r4,r2
  800e74:	180b883a 	mov	r5,r3
  800e78:	08026300 	call	802630 <__fixdfsi>
  800e7c:	1009883a 	mov	r4,r2
  800e80:	01400284 	movi	r5,10
  800e84:	080281c0 	call	80281c <__modsi3>
  800e88:	e0bff715 	stw	r2,-36(fp)
  800e8c:	e0bffe8b 	ldhu	r2,-6(fp)
  800e90:	113fffcc 	andi	r4,r2,65535
  800e94:	2120001c 	xori	r4,r4,32768
  800e98:	21200004 	addi	r4,r4,-32768
  800e9c:	08025380 	call	802538 <__floatsidf>
  800ea0:	100b883a 	mov	r5,r2
  800ea4:	180d883a 	mov	r6,r3
  800ea8:	2809883a 	mov	r4,r5
  800eac:	300b883a 	mov	r5,r6
  800eb0:	000d883a 	mov	r6,zero
  800eb4:	01d023f4 	movhi	r7,16527
  800eb8:	39d00004 	addi	r7,r7,16384
  800ebc:	08022e00 	call	8022e0 <__divdf3>
  800ec0:	1009883a 	mov	r4,r2
  800ec4:	180b883a 	mov	r5,r3
  800ec8:	2005883a 	mov	r2,r4
  800ecc:	2807883a 	mov	r3,r5
  800ed0:	1009883a 	mov	r4,r2
  800ed4:	180b883a 	mov	r5,r3
  800ed8:	08026300 	call	802630 <__fixdfsi>
  800edc:	1009883a 	mov	r4,r2
  800ee0:	01400284 	movi	r5,10
  800ee4:	080281c0 	call	80281c <__modsi3>
  800ee8:	e0bff815 	stw	r2,-32(fp)
			u = (int)(velocity / 10.0)   %10,
			d = (int)(velocity / 100.0)  %10,
			c = (int)(velocity / 1000.0) %10;
			alt_printf("Velocity: %x%x%x.%x m/s\n", c, d, u, t);
  800eec:	e0bff517 	ldw	r2,-44(fp)
  800ef0:	d8800015 	stw	r2,0(sp)
  800ef4:	01002074 	movhi	r4,129
  800ef8:	21216004 	addi	r4,r4,-31360
  800efc:	e17ff817 	ldw	r5,-32(fp)
  800f00:	e1bff717 	ldw	r6,-36(fp)
  800f04:	e1fff617 	ldw	r7,-40(fp)
  800f08:	0803aa80 	call	803aa8 <alt_printf>
		}

		alt_printf("Throttle: %x V\n", *throttle / 10);
  800f0c:	e0bffc17 	ldw	r2,-16(fp)
  800f10:	10800003 	ldbu	r2,0(r2)
  800f14:	11003fcc 	andi	r4,r2,255
  800f18:	01400284 	movi	r5,10
  800f1c:	080287c0 	call	80287c <__udivsi3>
  800f20:	11403fcc 	andi	r5,r2,255
  800f24:	01002074 	movhi	r4,129
  800f28:	21216704 	addi	r4,r4,-31332
  800f2c:	0803aa80 	call	803aa8 <alt_printf>
		show_velocity_on_sevenseg((INT8S) (velocity / 10));
  800f30:	e0bffe8b 	ldhu	r2,-6(fp)
  800f34:	113fffcc 	andi	r4,r2,65535
  800f38:	2120001c 	xori	r4,r4,32768
  800f3c:	21200004 	addi	r4,r4,-32768
  800f40:	01400284 	movi	r5,10
  800f44:	08027bc0 	call	8027bc <__divsi3>
  800f48:	11003fcc 	andi	r4,r2,255
  800f4c:	2100201c 	xori	r4,r4,128
  800f50:	213fe004 	addi	r4,r4,-128
  800f54:	08005180 	call	800518 <show_velocity_on_sevenseg>
	}
  800f58:	003e8e06 	br	800994 <VehicleTask+0x28>

00800f5c <ControlTask>:
/*
 * The task 'ControlTask' is the main task of the application. It reacts
 * on sensors and generates responses.
 */

void ControlTask(void* pdata) {
  800f5c:	defff504 	addi	sp,sp,-44
  800f60:	dfc00a15 	stw	ra,40(sp)
  800f64:	df000915 	stw	fp,36(sp)
  800f68:	dc000815 	stw	r16,32(sp)
  800f6c:	df000804 	addi	fp,sp,32
  800f70:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT8U throttle = 0; /* Value between 0 and 80, which is interpreted as between 0.0V and 8.0V */
  800f74:	e03ffe45 	stb	zero,-7(fp)
	void* msg;
	INT16S* current_velocity;
	INT8U target_velocity;
	INT16U tempo;

	alt_printf("Control Task created!\n");
  800f78:	01002074 	movhi	r4,129
  800f7c:	21216b04 	addi	r4,r4,-31316
  800f80:	0803aa80 	call	803aa8 <alt_printf>

	while (1) {
		msg = OSMboxPend(Mbox_Velocity, 0, &err);
  800f84:	d1211a17 	ldw	r4,-31640(gp)
  800f88:	e1bffe04 	addi	r6,fp,-8
  800f8c:	000b883a 	mov	r5,zero
  800f90:	08059a80 	call	8059a8 <OSMboxPend>
  800f94:	e0bffd15 	stw	r2,-12(fp)
		current_velocity = (INT16S*) msg;
  800f98:	e0bffd17 	ldw	r2,-12(fp)
  800f9c:	e0bffc15 	stw	r2,-16(fp)

		if(!ENGINE && !(*current_velocity)) engine = off;
  800fa0:	d0a11503 	ldbu	r2,-31660(gp)
  800fa4:	10803fcc 	andi	r2,r2,255
  800fa8:	1004c03a 	cmpne	r2,r2,zero
  800fac:	10000a1e 	bne	r2,zero,800fd8 <ControlTask+0x7c>
  800fb0:	e0bffc17 	ldw	r2,-16(fp)
  800fb4:	1080000b 	ldhu	r2,0(r2)
  800fb8:	10bfffcc 	andi	r2,r2,65535
  800fbc:	10a0001c 	xori	r2,r2,32768
  800fc0:	10a00004 	addi	r2,r2,-32768
  800fc4:	1004c03a 	cmpne	r2,r2,zero
  800fc8:	1000031e 	bne	r2,zero,800fd8 <ControlTask+0x7c>
  800fcc:	00800044 	movi	r2,1
  800fd0:	d0a00315 	stw	r2,-32756(gp)
  800fd4:	00000106 	br	800fdc <ControlTask+0x80>
		else engine = on;
  800fd8:	d0200315 	stw	zero,-32756(gp)
		if(engine == on) {
  800fdc:	d0a00317 	ldw	r2,-32756(gp)
  800fe0:	1004c03a 	cmpne	r2,r2,zero
  800fe4:	1000df1e 	bne	r2,zero,801364 <ControlTask+0x408>
			if(TOP_GEAR) top_gear = on;
  800fe8:	d0a11543 	ldbu	r2,-31659(gp)
  800fec:	10803fcc 	andi	r2,r2,255
  800ff0:	1005003a 	cmpeq	r2,r2,zero
  800ff4:	1000021e 	bne	r2,zero,801000 <ControlTask+0xa4>
  800ff8:	d0200215 	stw	zero,-32760(gp)
  800ffc:	00000206 	br	801008 <ControlTask+0xac>
			else top_gear = off;
  801000:	00800044 	movi	r2,1
  801004:	d0a00215 	stw	r2,-32760(gp)

			if(BRAKE_PEDAL) brake_pedal = on;
  801008:	d0a115c3 	ldbu	r2,-31657(gp)
  80100c:	10803fcc 	andi	r2,r2,255
  801010:	1005003a 	cmpeq	r2,r2,zero
  801014:	1000021e 	bne	r2,zero,801020 <ControlTask+0xc4>
  801018:	d0200115 	stw	zero,-32764(gp)
  80101c:	00000206 	br	801028 <ControlTask+0xcc>
			else brake_pedal = off;
  801020:	00800044 	movi	r2,1
  801024:	d0a00115 	stw	r2,-32764(gp)

			if(GAS_PEDAL) gas_pedal = on;
  801028:	d0a11583 	ldbu	r2,-31658(gp)
  80102c:	10803fcc 	andi	r2,r2,255
  801030:	1005003a 	cmpeq	r2,r2,zero
  801034:	1000021e 	bne	r2,zero,801040 <ControlTask+0xe4>
  801038:	d0200015 	stw	zero,-32768(gp)
  80103c:	00000206 	br	801048 <ControlTask+0xec>
			else gas_pedal = off;
  801040:	00800044 	movi	r2,1
  801044:	d0a00015 	stw	r2,-32768(gp)

			if(gas_pedal == on) {
  801048:	d0a00017 	ldw	r2,-32768(gp)
  80104c:	1004c03a 	cmpne	r2,r2,zero
  801050:	10000a1e 	bne	r2,zero,80107c <ControlTask+0x120>
				if(throttle >= 75) throttle = 80;
  801054:	e0bffe43 	ldbu	r2,-7(fp)
  801058:	10803fcc 	andi	r2,r2,255
  80105c:	108012f0 	cmpltui	r2,r2,75
  801060:	1000031e 	bne	r2,zero,801070 <ControlTask+0x114>
  801064:	00801404 	movi	r2,80
  801068:	e0bffe45 	stb	r2,-7(fp)
  80106c:	00000306 	br	80107c <ControlTask+0x120>
				else throttle += 5;
  801070:	e0bffe43 	ldbu	r2,-7(fp)
  801074:	10800144 	addi	r2,r2,5
  801078:	e0bffe45 	stb	r2,-7(fp)
			}
			if(brake_pedal == on) {
  80107c:	d0a00117 	ldw	r2,-32764(gp)
  801080:	1004c03a 	cmpne	r2,r2,zero
  801084:	10000e1e 	bne	r2,zero,8010c0 <ControlTask+0x164>
				if(throttle <= 5 || ((INT8U) *current_velocity) == 0) throttle = 0;
  801088:	e0bffe43 	ldbu	r2,-7(fp)
  80108c:	10803fcc 	andi	r2,r2,255
  801090:	108001b0 	cmpltui	r2,r2,6
  801094:	1000051e 	bne	r2,zero,8010ac <ControlTask+0x150>
  801098:	e0bffc17 	ldw	r2,-16(fp)
  80109c:	1080000b 	ldhu	r2,0(r2)
  8010a0:	10803fcc 	andi	r2,r2,255
  8010a4:	1004c03a 	cmpne	r2,r2,zero
  8010a8:	1000021e 	bne	r2,zero,8010b4 <ControlTask+0x158>
  8010ac:	e03ffe45 	stb	zero,-7(fp)
  8010b0:	00000306 	br	8010c0 <ControlTask+0x164>
				else throttle -= 5;
  8010b4:	e0bffe43 	ldbu	r2,-7(fp)
  8010b8:	10bffec4 	addi	r2,r2,-5
  8010bc:	e0bffe45 	stb	r2,-7(fp)
			}

			if((*current_velocity) >= 200 && CRUISE_CONTROL) {
  8010c0:	e0bffc17 	ldw	r2,-16(fp)
  8010c4:	1080000b 	ldhu	r2,0(r2)
  8010c8:	10bfffcc 	andi	r2,r2,65535
  8010cc:	10a0001c 	xori	r2,r2,32768
  8010d0:	10a00004 	addi	r2,r2,-32768
  8010d4:	10803210 	cmplti	r2,r2,200
  8010d8:	1000121e 	bne	r2,zero,801124 <ControlTask+0x1c8>
  8010dc:	d0a11603 	ldbu	r2,-31656(gp)
  8010e0:	10803fcc 	andi	r2,r2,255
  8010e4:	1005003a 	cmpeq	r2,r2,zero
  8010e8:	10000e1e 	bne	r2,zero,801124 <ControlTask+0x1c8>
				if(cruise_control == off) target_velocity = (INT8U) (*current_velocity / 10);
  8010ec:	d0a00417 	ldw	r2,-32752(gp)
  8010f0:	10800058 	cmpnei	r2,r2,1
  8010f4:	1000081e 	bne	r2,zero,801118 <ControlTask+0x1bc>
  8010f8:	e0bffc17 	ldw	r2,-16(fp)
  8010fc:	1080000b 	ldhu	r2,0(r2)
  801100:	113fffcc 	andi	r4,r2,65535
  801104:	2120001c 	xori	r4,r4,32768
  801108:	21200004 	addi	r4,r4,-32768
  80110c:	01400284 	movi	r5,10
  801110:	08027bc0 	call	8027bc <__divsi3>
  801114:	e0bffb85 	stb	r2,-18(fp)
				cruise_control = on;
  801118:	d0200415 	stw	zero,-32752(gp)
				show_target_velocity(target_velocity);
  80111c:	e13ffb83 	ldbu	r4,-18(fp)
  801120:	080060c0 	call	80060c <show_target_velocity>
			}

			if(gas_pedal == on || brake_pedal == on || top_gear == off) {
  801124:	d0a00017 	ldw	r2,-32768(gp)
  801128:	1005003a 	cmpeq	r2,r2,zero
  80112c:	1000061e 	bne	r2,zero,801148 <ControlTask+0x1ec>
  801130:	d0a00117 	ldw	r2,-32764(gp)
  801134:	1005003a 	cmpeq	r2,r2,zero
  801138:	1000031e 	bne	r2,zero,801148 <ControlTask+0x1ec>
  80113c:	d0a00217 	ldw	r2,-32760(gp)
  801140:	10800058 	cmpnei	r2,r2,1
  801144:	10000f1e 	bne	r2,zero,801184 <ControlTask+0x228>
				cruise_control = off;
  801148:	00800044 	movi	r2,1
  80114c:	d0a00415 	stw	r2,-32752(gp)
				tempo = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
  801150:	00804074 	movhi	r2,257
  801154:	10843804 	addi	r2,r2,4320
  801158:	10800037 	ldwio	r2,0(r2)
  80115c:	e0bffb0d 	sth	r2,-20(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,tempo & ~1);
  801160:	e0fffb0b 	ldhu	r3,-20(fp)
  801164:	00bfff84 	movi	r2,-2
  801168:	1886703a 	and	r3,r3,r2
  80116c:	00804074 	movhi	r2,257
  801170:	10843804 	addi	r2,r2,4320
  801174:	10c00035 	stwio	r3,0(r2)
				target_velocity = 0;
  801178:	e03ffb85 	stb	zero,-18(fp)
				show_target_velocity(target_velocity);
  80117c:	e13ffb83 	ldbu	r4,-18(fp)
  801180:	080060c0 	call	80060c <show_target_velocity>
			}

			if(cruise_control == on) {
  801184:	d0a00417 	ldw	r2,-32752(gp)
  801188:	1004c03a 	cmpne	r2,r2,zero
  80118c:	1000751e 	bne	r2,zero,801364 <ControlTask+0x408>
				/*decades, units of the hexadecimal number (we want to convert to decimal)*/
				int d, u;

				u = (int) target_velocity % 10;
  801190:	e13ffb83 	ldbu	r4,-18(fp)
  801194:	01400284 	movi	r5,10
  801198:	08028840 	call	802884 <__umodsi3>
  80119c:	10803fcc 	andi	r2,r2,255
  8011a0:	e0bff915 	stw	r2,-28(fp)
				d = (int) (target_velocity / 10) % 10;
  8011a4:	e13ffb83 	ldbu	r4,-18(fp)
  8011a8:	01400284 	movi	r5,10
  8011ac:	080287c0 	call	80287c <__udivsi3>
  8011b0:	11003fcc 	andi	r4,r2,255
  8011b4:	01400284 	movi	r5,10
  8011b8:	08028840 	call	802884 <__umodsi3>
  8011bc:	10803fcc 	andi	r2,r2,255
  8011c0:	e0bffa15 	stw	r2,-24(fp)

				alt_printf("Target Velocity: %x%x\n",d,u);
  8011c4:	01002074 	movhi	r4,129
  8011c8:	21217104 	addi	r4,r4,-31292
  8011cc:	e17ffa17 	ldw	r5,-24(fp)
  8011d0:	e1bff917 	ldw	r6,-28(fp)
  8011d4:	0803aa80 	call	803aa8 <alt_printf>
				tempo = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
  8011d8:	00804074 	movhi	r2,257
  8011dc:	10843804 	addi	r2,r2,4320
  8011e0:	10800037 	ldwio	r2,0(r2)
  8011e4:	e0bffb0d 	sth	r2,-20(fp)
				tempo = tempo & ~1;
  8011e8:	e0fffb0b 	ldhu	r3,-20(fp)
  8011ec:	00bfff84 	movi	r2,-2
  8011f0:	1884703a 	and	r2,r3,r2
  8011f4:	e0bffb0d 	sth	r2,-20(fp)
				IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,tempo | 1);	// writes 1 to the "cruise control" led w/o overwriting the others
  8011f8:	e0bffb0b 	ldhu	r2,-20(fp)
  8011fc:	10800054 	ori	r2,r2,1
  801200:	10ffffcc 	andi	r3,r2,65535
  801204:	00804074 	movhi	r2,257
  801208:	10843804 	addi	r2,r2,4320
  80120c:	10c00035 	stwio	r3,0(r2)

				int delta = (*current_velocity)-10* ((int)target_velocity);
  801210:	e0bffc17 	ldw	r2,-16(fp)
  801214:	1080000b 	ldhu	r2,0(r2)
  801218:	143fffcc 	andi	r16,r2,65535
  80121c:	8420001c 	xori	r16,r16,32768
  801220:	84200004 	addi	r16,r16,-32768
  801224:	e13ffb83 	ldbu	r4,-18(fp)
  801228:	01400284 	movi	r5,10
  80122c:	080288c0 	call	80288c <__mulsi3>
  801230:	8085c83a 	sub	r2,r16,r2
  801234:	e0bff815 	stw	r2,-32(fp)
				if(delta >= 20){
  801238:	e0bff817 	ldw	r2,-32(fp)
  80123c:	10800510 	cmplti	r2,r2,20
  801240:	10000a1e 	bne	r2,zero,80126c <ControlTask+0x310>
					if(throttle <= 10) throttle = 0;
  801244:	e0bffe43 	ldbu	r2,-7(fp)
  801248:	10803fcc 	andi	r2,r2,255
  80124c:	108002e8 	cmpgeui	r2,r2,11
  801250:	1000021e 	bne	r2,zero,80125c <ControlTask+0x300>
  801254:	e03ffe45 	stb	zero,-7(fp)
  801258:	00004206 	br	801364 <ControlTask+0x408>
					else throttle -= 10;
  80125c:	e0bffe43 	ldbu	r2,-7(fp)
  801260:	10bffd84 	addi	r2,r2,-10
  801264:	e0bffe45 	stb	r2,-7(fp)
  801268:	00003e06 	br	801364 <ControlTask+0x408>
				}
				else if(delta >= 10){
  80126c:	e0bff817 	ldw	r2,-32(fp)
  801270:	10800290 	cmplti	r2,r2,10
  801274:	10000a1e 	bne	r2,zero,8012a0 <ControlTask+0x344>
					if(throttle <= 5) throttle = 0;
  801278:	e0bffe43 	ldbu	r2,-7(fp)
  80127c:	10803fcc 	andi	r2,r2,255
  801280:	108001a8 	cmpgeui	r2,r2,6
  801284:	1000021e 	bne	r2,zero,801290 <ControlTask+0x334>
  801288:	e03ffe45 	stb	zero,-7(fp)
  80128c:	00003506 	br	801364 <ControlTask+0x408>
					else throttle -= 5;
  801290:	e0bffe43 	ldbu	r2,-7(fp)
  801294:	10bffec4 	addi	r2,r2,-5
  801298:	e0bffe45 	stb	r2,-7(fp)
  80129c:	00003106 	br	801364 <ControlTask+0x408>
				}
				else if(delta >= 4){
  8012a0:	e0bff817 	ldw	r2,-32(fp)
  8012a4:	10800110 	cmplti	r2,r2,4
  8012a8:	1000081e 	bne	r2,zero,8012cc <ControlTask+0x370>
					if(throttle != 0) throttle--;
  8012ac:	e0bffe43 	ldbu	r2,-7(fp)
  8012b0:	10803fcc 	andi	r2,r2,255
  8012b4:	1005003a 	cmpeq	r2,r2,zero
  8012b8:	10002a1e 	bne	r2,zero,801364 <ControlTask+0x408>
  8012bc:	e0bffe43 	ldbu	r2,-7(fp)
  8012c0:	10bfffc4 	addi	r2,r2,-1
  8012c4:	e0bffe45 	stb	r2,-7(fp)
  8012c8:	00002606 	br	801364 <ControlTask+0x408>
				}
				else if(delta <= -20){
  8012cc:	e0bff817 	ldw	r2,-32(fp)
  8012d0:	10bffb48 	cmpgei	r2,r2,-19
  8012d4:	10000b1e 	bne	r2,zero,801304 <ControlTask+0x3a8>
					if(throttle >= 70) throttle = 80;
  8012d8:	e0bffe43 	ldbu	r2,-7(fp)
  8012dc:	10803fcc 	andi	r2,r2,255
  8012e0:	108011b0 	cmpltui	r2,r2,70
  8012e4:	1000031e 	bne	r2,zero,8012f4 <ControlTask+0x398>
  8012e8:	00801404 	movi	r2,80
  8012ec:	e0bffe45 	stb	r2,-7(fp)
  8012f0:	00001c06 	br	801364 <ControlTask+0x408>
					else throttle += 10;
  8012f4:	e0bffe43 	ldbu	r2,-7(fp)
  8012f8:	10800284 	addi	r2,r2,10
  8012fc:	e0bffe45 	stb	r2,-7(fp)
  801300:	00001806 	br	801364 <ControlTask+0x408>
				}
				else if(delta <= -10){
  801304:	e0bff817 	ldw	r2,-32(fp)
  801308:	10bffdc8 	cmpgei	r2,r2,-9
  80130c:	10000b1e 	bne	r2,zero,80133c <ControlTask+0x3e0>
					if(throttle >= 75) throttle = 80;
  801310:	e0bffe43 	ldbu	r2,-7(fp)
  801314:	10803fcc 	andi	r2,r2,255
  801318:	108012f0 	cmpltui	r2,r2,75
  80131c:	1000031e 	bne	r2,zero,80132c <ControlTask+0x3d0>
  801320:	00801404 	movi	r2,80
  801324:	e0bffe45 	stb	r2,-7(fp)
  801328:	00000e06 	br	801364 <ControlTask+0x408>
					else throttle += 5;
  80132c:	e0bffe43 	ldbu	r2,-7(fp)
  801330:	10800144 	addi	r2,r2,5
  801334:	e0bffe45 	stb	r2,-7(fp)
  801338:	00000a06 	br	801364 <ControlTask+0x408>
				}
				else if(delta <= -4){
  80133c:	e0bff817 	ldw	r2,-32(fp)
  801340:	10bfff48 	cmpgei	r2,r2,-3
  801344:	1000071e 	bne	r2,zero,801364 <ControlTask+0x408>
					if(throttle != 80) throttle ++;
  801348:	e0bffe43 	ldbu	r2,-7(fp)
  80134c:	10803fcc 	andi	r2,r2,255
  801350:	10801420 	cmpeqi	r2,r2,80
  801354:	1000031e 	bne	r2,zero,801364 <ControlTask+0x408>
  801358:	e0bffe43 	ldbu	r2,-7(fp)
  80135c:	10800044 	addi	r2,r2,1
  801360:	e0bffe45 	stb	r2,-7(fp)
				}
			}
		}

		err = OSMboxPost(Mbox_Throttle, (void *) &throttle);
  801364:	d1211817 	ldw	r4,-31648(gp)
  801368:	e17ffe44 	addi	r5,fp,-7
  80136c:	0805bec0 	call	805bec <OSMboxPost>
  801370:	e0bffe05 	stb	r2,-8(fp)

		OSSemPend(SemControl,0,&err);
  801374:	d1211c17 	ldw	r4,-31632(gp)
  801378:	e1bffe04 	addi	r6,fp,-8
  80137c:	000b883a 	mov	r5,zero
  801380:	0805d900 	call	805d90 <OSSemPend>
	}
  801384:	003eff06 	br	800f84 <ControlTask+0x28>

00801388 <SwitchIO>:

/*
 * The task 'SwitchIO' read the switches periodically and lights up the red leds
 */

void SwitchIO(void* pdata) {
  801388:	defffb04 	addi	sp,sp,-20
  80138c:	dfc00415 	stw	ra,16(sp)
  801390:	df000315 	stw	fp,12(sp)
  801394:	df000304 	addi	fp,sp,12
  801398:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT32U current_led;
	while(1) {
		led_red = 0;
  80139c:	d0211415 	stw	zero,-31664(gp)
		if(switches_pressed() & TOP_GEAR_FLAG) {
  8013a0:	08001ac0 	call	8001ac <switches_pressed>
  8013a4:	1080008c 	andi	r2,r2,2
  8013a8:	1005003a 	cmpeq	r2,r2,zero
  8013ac:	1000061e 	bne	r2,zero,8013c8 <SwitchIO+0x40>
			TOP_GEAR = 1;
  8013b0:	00800044 	movi	r2,1
  8013b4:	d0a11545 	stb	r2,-31659(gp)
			led_red += LED_RED_1;
  8013b8:	d0a11417 	ldw	r2,-31664(gp)
  8013bc:	10800084 	addi	r2,r2,2
  8013c0:	d0a11415 	stw	r2,-31664(gp)
  8013c4:	00000106 	br	8013cc <SwitchIO+0x44>
		}
		else {
			TOP_GEAR = 0;
  8013c8:	d0211545 	stb	zero,-31659(gp)
		}
		if(switches_pressed() & ENGINE_FLAG) {
  8013cc:	08001ac0 	call	8001ac <switches_pressed>
  8013d0:	1080004c 	andi	r2,r2,1
  8013d4:	10803fcc 	andi	r2,r2,255
  8013d8:	1005003a 	cmpeq	r2,r2,zero
  8013dc:	1000061e 	bne	r2,zero,8013f8 <SwitchIO+0x70>
			ENGINE = 1;
  8013e0:	00800044 	movi	r2,1
  8013e4:	d0a11505 	stb	r2,-31660(gp)
			led_red += LED_RED_0;
  8013e8:	d0a11417 	ldw	r2,-31664(gp)
  8013ec:	10800044 	addi	r2,r2,1
  8013f0:	d0a11415 	stw	r2,-31664(gp)
  8013f4:	00000106 	br	8013fc <SwitchIO+0x74>
		}
		else {
			ENGINE = 0;
  8013f8:	d0211505 	stb	zero,-31660(gp)
		}
		current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
  8013fc:	00804074 	movhi	r2,257
  801400:	10843c04 	addi	r2,r2,4336
  801404:	10800037 	ldwio	r2,0(r2)
  801408:	e0bffd15 	stw	r2,-12(fp)
		current_led = current_led & ~(0x3);
  80140c:	e0fffd17 	ldw	r3,-12(fp)
  801410:	00bfff04 	movi	r2,-4
  801414:	1884703a 	and	r2,r3,r2
  801418:	e0bffd15 	stw	r2,-12(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE,led_red | current_led);
  80141c:	d0e11417 	ldw	r3,-31664(gp)
  801420:	e0bffd17 	ldw	r2,-12(fp)
  801424:	1884b03a 	or	r2,r3,r2
  801428:	1007883a 	mov	r3,r2
  80142c:	00804074 	movhi	r2,257
  801430:	10843c04 	addi	r2,r2,4336
  801434:	10c00035 	stwio	r3,0(r2)

		OSSemPend(SemSwitches,0,&err);
  801438:	d1211717 	ldw	r4,-31652(gp)
  80143c:	e1bffe04 	addi	r6,fp,-8
  801440:	000b883a 	mov	r5,zero
  801444:	0805d900 	call	805d90 <OSSemPend>
	}
  801448:	003fd406 	br	80139c <SwitchIO+0x14>

0080144c <ButtonsIO>:

/*
 * The task 'ButtonsIO' read the buttons periodically and lights up the green leds
 */

void ButtonsIO(void* pdata) {
  80144c:	defffc04 	addi	sp,sp,-16
  801450:	dfc00315 	stw	ra,12(sp)
  801454:	df000215 	stw	fp,8(sp)
  801458:	df000204 	addi	fp,sp,8
  80145c:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	INT16U current_led;
	while(1) {
		led_green = 0;
  801460:	d021130d 	sth	zero,-31668(gp)
		if(buttons_pressed() & GAS_PEDAL_FLAG) {
  801464:	08001800 	call	800180 <buttons_pressed>
  801468:	1080020c 	andi	r2,r2,8
  80146c:	1005003a 	cmpeq	r2,r2,zero
  801470:	1000061e 	bne	r2,zero,80148c <ButtonsIO+0x40>
			GAS_PEDAL = 1;
  801474:	00800044 	movi	r2,1
  801478:	d0a11585 	stb	r2,-31658(gp)
			led_green += LED_GREEN_6;
  80147c:	d0a1130b 	ldhu	r2,-31668(gp)
  801480:	10801004 	addi	r2,r2,64
  801484:	d0a1130d 	sth	r2,-31668(gp)
  801488:	00000106 	br	801490 <ButtonsIO+0x44>
		}
		else {
			GAS_PEDAL = 0;
  80148c:	d0211585 	stb	zero,-31658(gp)
		}
		if(buttons_pressed() & BRAKE_PEDAL_FLAG) {
  801490:	08001800 	call	800180 <buttons_pressed>
  801494:	1080010c 	andi	r2,r2,4
  801498:	1005003a 	cmpeq	r2,r2,zero
  80149c:	1000061e 	bne	r2,zero,8014b8 <ButtonsIO+0x6c>
			BRAKE_PEDAL = 1;
  8014a0:	00800044 	movi	r2,1
  8014a4:	d0a115c5 	stb	r2,-31657(gp)
			led_green += LED_GREEN_4;
  8014a8:	d0a1130b 	ldhu	r2,-31668(gp)
  8014ac:	10800404 	addi	r2,r2,16
  8014b0:	d0a1130d 	sth	r2,-31668(gp)
  8014b4:	00000106 	br	8014bc <ButtonsIO+0x70>
		}
		else {
			BRAKE_PEDAL = 0;
  8014b8:	d02115c5 	stb	zero,-31657(gp)
		}
		if(buttons_pressed() & CRUISE_CONTROL_FLAG) {
  8014bc:	08001800 	call	800180 <buttons_pressed>
  8014c0:	1080008c 	andi	r2,r2,2
  8014c4:	1005003a 	cmpeq	r2,r2,zero
  8014c8:	1000061e 	bne	r2,zero,8014e4 <ButtonsIO+0x98>
			CRUISE_CONTROL = 1;
  8014cc:	00800044 	movi	r2,1
  8014d0:	d0a11605 	stb	r2,-31656(gp)
			led_green += LED_GREEN_2;
  8014d4:	d0a1130b 	ldhu	r2,-31668(gp)
  8014d8:	10800104 	addi	r2,r2,4
  8014dc:	d0a1130d 	sth	r2,-31668(gp)
  8014e0:	00000106 	br	8014e8 <ButtonsIO+0x9c>
		}
		else {
			CRUISE_CONTROL = 0;
  8014e4:	d0211605 	stb	zero,-31656(gp)
		}
		current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE);
  8014e8:	00804074 	movhi	r2,257
  8014ec:	10843804 	addi	r2,r2,4320
  8014f0:	10800037 	ldwio	r2,0(r2)
  8014f4:	e0bffe0d 	sth	r2,-8(fp)
		current_led = current_led & 0x01;
  8014f8:	e0bffe0b 	ldhu	r2,-8(fp)
  8014fc:	1080004c 	andi	r2,r2,1
  801500:	e0bffe0d 	sth	r2,-8(fp)
		IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_GREENLED9_BASE,led_green | current_led);
  801504:	d0e1130b 	ldhu	r3,-31668(gp)
  801508:	e0bffe0b 	ldhu	r2,-8(fp)
  80150c:	1884b03a 	or	r2,r3,r2
  801510:	10ffffcc 	andi	r3,r2,65535
  801514:	00804074 	movhi	r2,257
  801518:	10843804 	addi	r2,r2,4320
  80151c:	10c00035 	stwio	r3,0(r2)

		OSSemPend(SemButtons,0,&err);
  801520:	d1212217 	ldw	r4,-31608(gp)
  801524:	e1bffe84 	addi	r6,fp,-6
  801528:	000b883a 	mov	r5,zero
  80152c:	0805d900 	call	805d90 <OSSemPend>
	}
  801530:	003fcb06 	br	801460 <ButtonsIO+0x14>

00801534 <OverloadDetection>:
}

void OverloadDetection(void* pdata) {
  801534:	defffc04 	addi	sp,sp,-16
  801538:	dfc00315 	stw	ra,12(sp)
  80153c:	df000215 	stw	fp,8(sp)
  801540:	df000204 	addi	fp,sp,8
  801544:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	while(1) {
		OSSemPend(SemOverload,0,&err);
  801548:	d1212117 	ldw	r4,-31612(gp)
  80154c:	000b883a 	mov	r5,zero
  801550:	e1bffe04 	addi	r6,fp,-8
  801554:	0805d900 	call	805d90 <OSSemPend>
		OSTmrStart(TimerWatchdog,&err);
  801558:	d1211d17 	ldw	r4,-31628(gp)
  80155c:	e17ffe04 	addi	r5,fp,-8
  801560:	0806e500 	call	806e50 <OSTmrStart>
	}
  801564:	003ff806 	br	801548 <OverloadDetection+0x14>

00801568 <Extraload>:
}

void Extraload(void* pdata) {
  801568:	defff704 	addi	sp,sp,-36
  80156c:	dfc00815 	stw	ra,32(sp)
  801570:	df000715 	stw	fp,28(sp)
  801574:	df000704 	addi	fp,sp,28
  801578:	e13fff15 	stw	r4,-4(fp)
	INT32U current_led;
	INT8U err;
	INT8U next_load = 0;
  80157c:	e03ffc85 	stb	zero,-14(fp)
	INT8U load = 0;
  801580:	e03ffc45 	stb	zero,-15(fp)
	INT8U t = 0;
  801584:	e03ffc05 	stb	zero,-16(fp)
	while(1) {
		next_load = ((switches_pressed()>>4) & 0x3f);
  801588:	08001ac0 	call	8001ac <switches_pressed>
  80158c:	1005d13a 	srai	r2,r2,4
  801590:	10800fcc 	andi	r2,r2,63
  801594:	e0bffc85 	stb	r2,-14(fp)
		if (next_load > 50) next_load = 50;
  801598:	e0bffc83 	ldbu	r2,-14(fp)
  80159c:	10800cf0 	cmpltui	r2,r2,51
  8015a0:	1000021e 	bne	r2,zero,8015ac <Extraload+0x44>
  8015a4:	00800c84 	movi	r2,50
  8015a8:	e0bffc85 	stb	r2,-14(fp)
		if(load != next_load){
  8015ac:	e0fffc43 	ldbu	r3,-15(fp)
  8015b0:	e0bffc83 	ldbu	r2,-14(fp)
  8015b4:	18803326 	beq	r3,r2,801684 <Extraload+0x11c>
			load = next_load;
  8015b8:	e0bffc83 	ldbu	r2,-14(fp)
  8015bc:	e0bffc45 	stb	r2,-15(fp)
			current_led = IORD_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE);
  8015c0:	00804074 	movhi	r2,257
  8015c4:	10843c04 	addi	r2,r2,4336
  8015c8:	10800037 	ldwio	r2,0(r2)
  8015cc:	e0bffd15 	stw	r2,-12(fp)
			current_led = current_led & 0x3fc0f;
  8015d0:	e0fffd17 	ldw	r3,-12(fp)
  8015d4:	00800134 	movhi	r2,4
  8015d8:	10bf03c4 	addi	r2,r2,-1009
  8015dc:	1884703a 	and	r2,r3,r2
  8015e0:	e0bffd15 	stw	r2,-12(fp)
			IOWR_ALTERA_AVALON_PIO_DATA(DE2_PIO_REDLED18_BASE, (load<<4) | current_led);
  8015e4:	e0bffc43 	ldbu	r2,-15(fp)
  8015e8:	1004913a 	slli	r2,r2,4
  8015ec:	1007883a 	mov	r3,r2
  8015f0:	e0bffd17 	ldw	r2,-12(fp)
  8015f4:	1884b03a 	or	r2,r3,r2
  8015f8:	1007883a 	mov	r3,r2
  8015fc:	00804074 	movhi	r2,257
  801600:	10843c04 	addi	r2,r2,4336
  801604:	10c00035 	stwio	r3,0(r2)
			if(t){
  801608:	e0bffc03 	ldbu	r2,-16(fp)
  80160c:	1005003a 	cmpeq	r2,r2,zero
  801610:	1000041e 	bne	r2,zero,801624 <Extraload+0xbc>
				OSTmrDel(TimerExtraload,&err);
  801614:	d1211217 	ldw	r4,-31672(gp)
  801618:	e17ffe04 	addi	r5,fp,-8
  80161c:	08070e00 	call	8070e0 <OSTmrDel>
				t = 0;
  801620:	e03ffc05 	stb	zero,-16(fp)
			}
			if(load){
  801624:	e0bffc43 	ldbu	r2,-15(fp)
  801628:	1005003a 	cmpeq	r2,r2,zero
  80162c:	1000151e 	bne	r2,zero,801684 <Extraload+0x11c>
				TimerExtraload = OSTmrCreate((2*load*HYPER_PERIOD) / (100*HW_TIMER_PERIOD), 0,
  801630:	e0fffc43 	ldbu	r3,-15(fp)
  801634:	1805883a 	mov	r2,r3
  801638:	1085883a 	add	r2,r2,r2
  80163c:	10c5883a 	add	r2,r2,r3
  801640:	1009883a 	mov	r4,r2
  801644:	d8000015 	stw	zero,0(sp)
  801648:	d8000115 	stw	zero,4(sp)
  80164c:	e0bffe04 	addi	r2,fp,-8
  801650:	d8800215 	stw	r2,8(sp)
  801654:	000b883a 	mov	r5,zero
  801658:	01800044 	movi	r6,1
  80165c:	01c02034 	movhi	r7,128
  801660:	39c11e04 	addi	r7,r7,1144
  801664:	08072b80 	call	8072b8 <OSTmrCreate>
  801668:	d0a11215 	stw	r2,-31672(gp)
						OS_TMR_OPT_ONE_SHOT, CallbackExtraload, NULL, NULL, &err);
				if(!err) t = 1;
  80166c:	e0bffe03 	ldbu	r2,-8(fp)
  801670:	10803fcc 	andi	r2,r2,255
  801674:	1004c03a 	cmpne	r2,r2,zero
  801678:	1000021e 	bne	r2,zero,801684 <Extraload+0x11c>
  80167c:	00800044 	movi	r2,1
  801680:	e0bffc05 	stb	r2,-16(fp)
			}
		}

		if(load && t) {
  801684:	e0bffc43 	ldbu	r2,-15(fp)
  801688:	1005003a 	cmpeq	r2,r2,zero
  80168c:	10000b1e 	bne	r2,zero,8016bc <Extraload+0x154>
  801690:	e0bffc03 	ldbu	r2,-16(fp)
  801694:	1005003a 	cmpeq	r2,r2,zero
  801698:	1000081e 	bne	r2,zero,8016bc <Extraload+0x154>
			OSTmrStart(TimerExtraload, &err);
  80169c:	d1211217 	ldw	r4,-31672(gp)
  8016a0:	e17ffe04 	addi	r5,fp,-8
  8016a4:	0806e500 	call	806e50 <OSTmrStart>
			FLAG = 0;
  8016a8:	d0211645 	stb	zero,-31655(gp)
			while(FLAG == 0) {
  8016ac:	d0a11643 	ldbu	r2,-31655(gp)
  8016b0:	10803fcc 	andi	r2,r2,255
  8016b4:	1005003a 	cmpeq	r2,r2,zero
  8016b8:	103ffc1e 	bne	r2,zero,8016ac <Extraload+0x144>
				;
			}
		}

		OSSemPend(SemExtraload,0,&err);
  8016bc:	d1211917 	ldw	r4,-31644(gp)
  8016c0:	e1bffe04 	addi	r6,fp,-8
  8016c4:	000b883a 	mov	r5,zero
  8016c8:	0805d900 	call	805d90 <OSSemPend>
	}
  8016cc:	003fae06 	br	801588 <Extraload+0x20>

008016d0 <StartTask>:

/*
 * The task 'StartTask' creates all other tasks kernel objects and
 * deletes itself afterwards.
 */
void StartTask(void* pdata) {
  8016d0:	defff604 	addi	sp,sp,-40
  8016d4:	dfc00915 	stw	ra,36(sp)
  8016d8:	df000815 	stw	fp,32(sp)
  8016dc:	df000804 	addi	fp,sp,32
  8016e0:	e13fff15 	stw	r4,-4(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8016e4:	00802074 	movhi	r2,129
  8016e8:	10a42704 	addi	r2,r2,-28516
  8016ec:	10800017 	ldw	r2,0(r2)
	void* context;

	static alt_alarm alarm; /* Is needed for timer ISR function */

	/* Base resolution for SW timer : HW_TIMER_PERIOD ms */
	delay = alt_ticks_per_second() * HW_TIMER_PERIOD / 1000;
  8016f0:	1085883a 	add	r2,r2,r2
  8016f4:	1009883a 	mov	r4,r2
  8016f8:	0140fa04 	movi	r5,1000
  8016fc:	080287c0 	call	80287c <__udivsi3>
  801700:	d0a12515 	stw	r2,-31596(gp)
	alt_printf("delay in ticks %x\n", delay);
  801704:	d1612517 	ldw	r5,-31596(gp)
  801708:	01002074 	movhi	r4,129
  80170c:	21217704 	addi	r4,r4,-31268
  801710:	0803aa80 	call	803aa8 <alt_printf>

	/*
	 * Create Hardware Timer with a period of 'delay'
	 */
	if (alt_alarm_start(&alarm, delay, alarm_handler, context) < 0) {
  801714:	d0a12517 	ldw	r2,-31596(gp)
  801718:	100b883a 	mov	r5,r2
  80171c:	01002074 	movhi	r4,129
  801720:	21244504 	addi	r4,r4,-28396
  801724:	01802034 	movhi	r6,128
  801728:	3180c404 	addi	r6,r6,784
  80172c:	e1fffd17 	ldw	r7,-12(fp)
  801730:	08038e40 	call	8038e4 <alt_alarm_start>
  801734:	1004403a 	cmpge	r2,r2,zero
  801738:	1000031e 	bne	r2,zero,801748 <StartTask+0x78>
		alt_printf("No system clock available!n");
  80173c:	01002074 	movhi	r4,129
  801740:	21217c04 	addi	r4,r4,-31248
  801744:	0803aa80 	call	803aa8 <alt_printf>
	}

	/*
	 * Create and start Software Timer
	 */
	TimerVehicle = OSTmrCreate(0, VEHICLE_PERIOD / HW_TIMER_PERIOD,
  801748:	d8000015 	stw	zero,0(sp)
  80174c:	d8000115 	stw	zero,4(sp)
  801750:	e0bffe04 	addi	r2,fp,-8
  801754:	d8800215 	stw	r2,8(sp)
  801758:	0009883a 	mov	r4,zero
  80175c:	01402584 	movi	r5,150
  801760:	01800084 	movi	r6,2
  801764:	01c02034 	movhi	r7,128
  801768:	39c0d004 	addi	r7,r7,832
  80176c:	08072b80 	call	8072b8 <OSTmrCreate>
  801770:	d0a11b15 	stw	r2,-31636(gp)
			OS_TMR_OPT_PERIODIC, CallbackVehicle, NULL, NULL, &err);
	if (err) {
  801774:	e0bffe03 	ldbu	r2,-8(fp)
  801778:	10803fcc 	andi	r2,r2,255
  80177c:	1005003a 	cmpeq	r2,r2,zero
  801780:	1000031e 	bne	r2,zero,801790 <StartTask+0xc0>
		alt_printf("Error occurred while creating soft timer!\n");
  801784:	01002074 	movhi	r4,129
  801788:	21218304 	addi	r4,r4,-31220
  80178c:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerVehicle, &err);
  801790:	d1211b17 	ldw	r4,-31636(gp)
  801794:	e17ffe04 	addi	r5,fp,-8
  801798:	0806e500 	call	806e50 <OSTmrStart>

	TimerControl = OSTmrCreate(0, CONTROL_PERIOD / HW_TIMER_PERIOD,
  80179c:	d8000015 	stw	zero,0(sp)
  8017a0:	d8000115 	stw	zero,4(sp)
  8017a4:	e0bffe04 	addi	r2,fp,-8
  8017a8:	d8800215 	stw	r2,8(sp)
  8017ac:	0009883a 	mov	r4,zero
  8017b0:	01402584 	movi	r5,150
  8017b4:	01800084 	movi	r6,2
  8017b8:	01c02034 	movhi	r7,128
  8017bc:	39c0dd04 	addi	r7,r7,884
  8017c0:	08072b80 	call	8072b8 <OSTmrCreate>
  8017c4:	d0a12715 	stw	r2,-31588(gp)
			OS_TMR_OPT_PERIODIC, CallbackControl, NULL, NULL, &err);
	if (err) {
  8017c8:	e0bffe03 	ldbu	r2,-8(fp)
  8017cc:	10803fcc 	andi	r2,r2,255
  8017d0:	1005003a 	cmpeq	r2,r2,zero
  8017d4:	1000031e 	bne	r2,zero,8017e4 <StartTask+0x114>
		alt_printf("Error occurred while creating soft timer!\n");
  8017d8:	01002074 	movhi	r4,129
  8017dc:	21218304 	addi	r4,r4,-31220
  8017e0:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerControl, &err);
  8017e4:	d1212717 	ldw	r4,-31588(gp)
  8017e8:	e17ffe04 	addi	r5,fp,-8
  8017ec:	0806e500 	call	806e50 <OSTmrStart>

	TimerButtons = OSTmrCreate(0, BS_PERIOD / HW_TIMER_PERIOD,
  8017f0:	d8000015 	stw	zero,0(sp)
  8017f4:	d8000115 	stw	zero,4(sp)
  8017f8:	e0bffe04 	addi	r2,fp,-8
  8017fc:	d8800215 	stw	r2,8(sp)
  801800:	0009883a 	mov	r4,zero
  801804:	01400c84 	movi	r5,50
  801808:	01800084 	movi	r6,2
  80180c:	01c02034 	movhi	r7,128
  801810:	39c0ea04 	addi	r7,r7,936
  801814:	08072b80 	call	8072b8 <OSTmrCreate>
  801818:	d0a12615 	stw	r2,-31592(gp)
			OS_TMR_OPT_PERIODIC, CallbackButtons, NULL, NULL, &err);
	if (err) {
  80181c:	e0bffe03 	ldbu	r2,-8(fp)
  801820:	10803fcc 	andi	r2,r2,255
  801824:	1005003a 	cmpeq	r2,r2,zero
  801828:	1000031e 	bne	r2,zero,801838 <StartTask+0x168>
		alt_printf("Error occurred while creating soft timer!\n");
  80182c:	01002074 	movhi	r4,129
  801830:	21218304 	addi	r4,r4,-31220
  801834:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerButtons, &err);
  801838:	d1212617 	ldw	r4,-31592(gp)
  80183c:	e17ffe04 	addi	r5,fp,-8
  801840:	0806e500 	call	806e50 <OSTmrStart>

	TimerSwitches = OSTmrCreate(0, BS_PERIOD / HW_TIMER_PERIOD,
  801844:	d8000015 	stw	zero,0(sp)
  801848:	d8000115 	stw	zero,4(sp)
  80184c:	e0bffe04 	addi	r2,fp,-8
  801850:	d8800215 	stw	r2,8(sp)
  801854:	0009883a 	mov	r4,zero
  801858:	01400c84 	movi	r5,50
  80185c:	01800084 	movi	r6,2
  801860:	01c02034 	movhi	r7,128
  801864:	39c0f704 	addi	r7,r7,988
  801868:	08072b80 	call	8072b8 <OSTmrCreate>
  80186c:	d0a12815 	stw	r2,-31584(gp)
			OS_TMR_OPT_PERIODIC, CallbackSwitches, NULL, NULL, &err);
	if (err) {
  801870:	e0bffe03 	ldbu	r2,-8(fp)
  801874:	10803fcc 	andi	r2,r2,255
  801878:	1005003a 	cmpeq	r2,r2,zero
  80187c:	1000031e 	bne	r2,zero,80188c <StartTask+0x1bc>
		alt_printf("Error occurred while creating soft timer!\n");
  801880:	01002074 	movhi	r4,129
  801884:	21218304 	addi	r4,r4,-31220
  801888:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerSwitches, &err);
  80188c:	d1212817 	ldw	r4,-31584(gp)
  801890:	e17ffe04 	addi	r5,fp,-8
  801894:	0806e500 	call	806e50 <OSTmrStart>

	TimerExtraloadTask = OSTmrCreate(0, HYPER_PERIOD / HW_TIMER_PERIOD,
  801898:	d8000015 	stw	zero,0(sp)
  80189c:	d8000115 	stw	zero,4(sp)
  8018a0:	e0bffe04 	addi	r2,fp,-8
  8018a4:	d8800215 	stw	r2,8(sp)
  8018a8:	0009883a 	mov	r4,zero
  8018ac:	01402584 	movi	r5,150
  8018b0:	01800084 	movi	r6,2
  8018b4:	01c02034 	movhi	r7,128
  8018b8:	39c11104 	addi	r7,r7,1092
  8018bc:	08072b80 	call	8072b8 <OSTmrCreate>
  8018c0:	d0a12415 	stw	r2,-31600(gp)
			OS_TMR_OPT_PERIODIC, CallbackExtraloadTask, NULL, NULL, &err);
	if (err) {
  8018c4:	e0bffe03 	ldbu	r2,-8(fp)
  8018c8:	10803fcc 	andi	r2,r2,255
  8018cc:	1005003a 	cmpeq	r2,r2,zero
  8018d0:	1000031e 	bne	r2,zero,8018e0 <StartTask+0x210>
		alt_printf("Error occurred while creating soft timer!\n");
  8018d4:	01002074 	movhi	r4,129
  8018d8:	21218304 	addi	r4,r4,-31220
  8018dc:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerExtraloadTask, &err);
  8018e0:	d1212417 	ldw	r4,-31600(gp)
  8018e4:	e17ffe04 	addi	r5,fp,-8
  8018e8:	0806e500 	call	806e50 <OSTmrStart>

	TimerOverload = OSTmrCreate(0, OVERLOAD_PERIOD / HW_TIMER_PERIOD,
  8018ec:	d8000015 	stw	zero,0(sp)
  8018f0:	d8000115 	stw	zero,4(sp)
  8018f4:	e0bffe04 	addi	r2,fp,-8
  8018f8:	d8800215 	stw	r2,8(sp)
  8018fc:	0009883a 	mov	r4,zero
  801900:	01400c84 	movi	r5,50
  801904:	01800084 	movi	r6,2
  801908:	01c02034 	movhi	r7,128
  80190c:	39c10404 	addi	r7,r7,1040
  801910:	08072b80 	call	8072b8 <OSTmrCreate>
  801914:	d0a11f15 	stw	r2,-31620(gp)
			OS_TMR_OPT_PERIODIC, CallbackOverload, NULL, NULL, &err);
	if (err) {
  801918:	e0bffe03 	ldbu	r2,-8(fp)
  80191c:	10803fcc 	andi	r2,r2,255
  801920:	1005003a 	cmpeq	r2,r2,zero
  801924:	1000031e 	bne	r2,zero,801934 <StartTask+0x264>
		alt_printf("Error occurred while creating soft timer!\n");
  801928:	01002074 	movhi	r4,129
  80192c:	21218304 	addi	r4,r4,-31220
  801930:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerOverload, &err);
  801934:	d1211f17 	ldw	r4,-31620(gp)
  801938:	e17ffe04 	addi	r5,fp,-8
  80193c:	0806e500 	call	806e50 <OSTmrStart>

	TimerWatchdog = OSTmrCreate(0, HYPER_PERIOD / HW_TIMER_PERIOD,
  801940:	d8000015 	stw	zero,0(sp)
  801944:	d8000115 	stw	zero,4(sp)
  801948:	e0bffe04 	addi	r2,fp,-8
  80194c:	d8800215 	stw	r2,8(sp)
  801950:	0009883a 	mov	r4,zero
  801954:	01402584 	movi	r5,150
  801958:	01800084 	movi	r6,2
  80195c:	01c02034 	movhi	r7,128
  801960:	39c12904 	addi	r7,r7,1188
  801964:	08072b80 	call	8072b8 <OSTmrCreate>
  801968:	d0a11d15 	stw	r2,-31628(gp)
			OS_TMR_OPT_PERIODIC, CallbackWatchdog, NULL, NULL, &err);
	if (err) {
  80196c:	e0bffe03 	ldbu	r2,-8(fp)
  801970:	10803fcc 	andi	r2,r2,255
  801974:	1005003a 	cmpeq	r2,r2,zero
  801978:	1000031e 	bne	r2,zero,801988 <StartTask+0x2b8>
		alt_printf("Error occurred while creating soft timer!\n");
  80197c:	01002074 	movhi	r4,129
  801980:	21218304 	addi	r4,r4,-31220
  801984:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerWatchdog, &err);
  801988:	d1211d17 	ldw	r4,-31628(gp)
  80198c:	e17ffe04 	addi	r5,fp,-8
  801990:	0806e500 	call	806e50 <OSTmrStart>

	#ifdef DEBUG

	TimerStat = OSTmrCreate(0, HYPER_PERIOD / HW_TIMER_PERIOD,
  801994:	d8000015 	stw	zero,0(sp)
  801998:	d8000115 	stw	zero,4(sp)
  80199c:	e0bffe04 	addi	r2,fp,-8
  8019a0:	d8800215 	stw	r2,8(sp)
  8019a4:	0009883a 	mov	r4,zero
  8019a8:	01402584 	movi	r5,150
  8019ac:	01800084 	movi	r6,2
  8019b0:	01c02034 	movhi	r7,128
  8019b4:	39c07504 	addi	r7,r7,468
  8019b8:	08072b80 	call	8072b8 <OSTmrCreate>
  8019bc:	d0a11e15 	stw	r2,-31624(gp)
			OS_TMR_OPT_PERIODIC, CallbackStat, NULL, NULL, &err);
	if (err) {
  8019c0:	e0bffe03 	ldbu	r2,-8(fp)
  8019c4:	10803fcc 	andi	r2,r2,255
  8019c8:	1005003a 	cmpeq	r2,r2,zero
  8019cc:	1000031e 	bne	r2,zero,8019dc <StartTask+0x30c>
		alt_printf("Error occurred while creating soft timer!\n");
  8019d0:	01002074 	movhi	r4,129
  8019d4:	21218304 	addi	r4,r4,-31220
  8019d8:	0803aa80 	call	803aa8 <alt_printf>
	}
	OSTmrStart(TimerStat, &err);
  8019dc:	d1211e17 	ldw	r4,-31624(gp)
  8019e0:	e17ffe04 	addi	r5,fp,-8
  8019e4:	0806e500 	call	806e50 <OSTmrStart>
	/*
	 * Creation of Kernel Objects
	 */

	// Mailboxes
	Mbox_Throttle = OSMboxCreate((void*) 0); /* Empty Mailbox - Throttle */
  8019e8:	0009883a 	mov	r4,zero
  8019ec:	080591c0 	call	80591c <OSMboxCreate>
  8019f0:	d0a11815 	stw	r2,-31648(gp)
	Mbox_Velocity = OSMboxCreate((void*) 0); /* Empty Mailbox - Velocity */
  8019f4:	0009883a 	mov	r4,zero
  8019f8:	080591c0 	call	80591c <OSMboxCreate>
  8019fc:	d0a11a15 	stw	r2,-31640(gp)

	// Semaphores
	SemVehicle = OSSemCreate(0);
  801a00:	0009883a 	mov	r4,zero
  801a04:	0805d040 	call	805d04 <OSSemCreate>
  801a08:	d0a12015 	stw	r2,-31616(gp)
	SemControl = OSSemCreate(0);
  801a0c:	0009883a 	mov	r4,zero
  801a10:	0805d040 	call	805d04 <OSSemCreate>
  801a14:	d0a11c15 	stw	r2,-31632(gp)
	SemButtons = OSSemCreate(0);
  801a18:	0009883a 	mov	r4,zero
  801a1c:	0805d040 	call	805d04 <OSSemCreate>
  801a20:	d0a12215 	stw	r2,-31608(gp)
	SemSwitches = OSSemCreate(0);
  801a24:	0009883a 	mov	r4,zero
  801a28:	0805d040 	call	805d04 <OSSemCreate>
  801a2c:	d0a11715 	stw	r2,-31652(gp)
	SemOverload = OSSemCreate(0);
  801a30:	0009883a 	mov	r4,zero
  801a34:	0805d040 	call	805d04 <OSSemCreate>
  801a38:	d0a12115 	stw	r2,-31612(gp)
	SemExtraload = OSSemCreate(1);
  801a3c:	01000044 	movi	r4,1
  801a40:	0805d040 	call	805d04 <OSSemCreate>
  801a44:	d0a11915 	stw	r2,-31644(gp)

	#ifdef DEBUG

	SemStat = OSSemCreate(1);
  801a48:	01000044 	movi	r4,1
  801a4c:	0805d040 	call	805d04 <OSSemCreate>
  801a50:	d0a12315 	stw	r2,-31604(gp)

	/*
	 * Create statistics task
	 */

	OSStatInit();
  801a54:	08047f80 	call	8047f8 <OSStatInit>

	/*
	 * Creating Tasks in the system
	 */

	err = OSTaskCreateExt(
  801a58:	01802074 	movhi	r6,129
  801a5c:	31a64a04 	addi	r6,r6,-26328
  801a60:	00800284 	movi	r2,10
  801a64:	d8800015 	stw	r2,0(sp)
  801a68:	00802074 	movhi	r2,129
  801a6c:	10a54b04 	addi	r2,r2,-27348
  801a70:	d8800115 	stw	r2,4(sp)
  801a74:	00804004 	movi	r2,256
  801a78:	d8800215 	stw	r2,8(sp)
  801a7c:	d8000315 	stw	zero,12(sp)
  801a80:	00800044 	movi	r2,1
  801a84:	d8800415 	stw	r2,16(sp)
  801a88:	01002034 	movhi	r4,128
  801a8c:	2103d704 	addi	r4,r4,3932
  801a90:	000b883a 	mov	r5,zero
  801a94:	01c00284 	movi	r7,10
  801a98:	08060f80 	call	8060f8 <OSTaskCreateExt>
  801a9c:	e0bffe05 	stb	r2,-8(fp)
			// of task stack
			CONTROLTASK_PRIO, CONTROLTASK_PRIO, (void *) &ControlTask_Stack[0],
			TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : Control\n");

	err = OSTaskCreateExt(
  801aa0:	01802074 	movhi	r6,129
  801aa4:	31a84a04 	addi	r6,r6,-24280
  801aa8:	00800204 	movi	r2,8
  801aac:	d8800015 	stw	r2,0(sp)
  801ab0:	00802074 	movhi	r2,129
  801ab4:	10a74b04 	addi	r2,r2,-25300
  801ab8:	d8800115 	stw	r2,4(sp)
  801abc:	00804004 	movi	r2,256
  801ac0:	d8800215 	stw	r2,8(sp)
  801ac4:	d8000315 	stw	zero,12(sp)
  801ac8:	00800044 	movi	r2,1
  801acc:	d8800415 	stw	r2,16(sp)
  801ad0:	01002034 	movhi	r4,128
  801ad4:	21025b04 	addi	r4,r4,2412
  801ad8:	000b883a 	mov	r5,zero
  801adc:	01c00204 	movi	r7,8
  801ae0:	08060f80 	call	8060f8 <OSTaskCreateExt>
  801ae4:	e0bffe05 	stb	r2,-8(fp)
			// of task stack
			VEHICLETASK_PRIO, VEHICLETASK_PRIO, (void *) &VehicleTask_Stack[0],
			TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : Vehicle\n");

	err = OSTaskCreateExt(
  801ae8:	01802074 	movhi	r6,129
  801aec:	31a94a04 	addi	r6,r6,-23256
  801af0:	00800304 	movi	r2,12
  801af4:	d8800015 	stw	r2,0(sp)
  801af8:	00802074 	movhi	r2,129
  801afc:	10a84b04 	addi	r2,r2,-24276
  801b00:	d8800115 	stw	r2,4(sp)
  801b04:	00804004 	movi	r2,256
  801b08:	d8800215 	stw	r2,8(sp)
  801b0c:	d8000315 	stw	zero,12(sp)
  801b10:	00800044 	movi	r2,1
  801b14:	d8800415 	stw	r2,16(sp)
  801b18:	01002034 	movhi	r4,128
  801b1c:	21051304 	addi	r4,r4,5196
  801b20:	000b883a 	mov	r5,zero
  801b24:	01c00304 	movi	r7,12
  801b28:	08060f80 	call	8060f8 <OSTaskCreateExt>
  801b2c:	e0bffe05 	stb	r2,-8(fp)
				// of task stack
				BUTTONSIO_PRIO, BUTTONSIO_PRIO, (void *) &ButtonsIO_Stack[0],
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : ButtonsIO\n");

	err = OSTaskCreateExt(
  801b30:	01802074 	movhi	r6,129
  801b34:	31a54a04 	addi	r6,r6,-27352
  801b38:	00800384 	movi	r2,14
  801b3c:	d8800015 	stw	r2,0(sp)
  801b40:	00802074 	movhi	r2,129
  801b44:	10a44b04 	addi	r2,r2,-28372
  801b48:	d8800115 	stw	r2,4(sp)
  801b4c:	00804004 	movi	r2,256
  801b50:	d8800215 	stw	r2,8(sp)
  801b54:	d8000315 	stw	zero,12(sp)
  801b58:	00800044 	movi	r2,1
  801b5c:	d8800415 	stw	r2,16(sp)
  801b60:	01002034 	movhi	r4,128
  801b64:	2104e204 	addi	r4,r4,5000
  801b68:	000b883a 	mov	r5,zero
  801b6c:	01c00384 	movi	r7,14
  801b70:	08060f80 	call	8060f8 <OSTaskCreateExt>
  801b74:	e0bffe05 	stb	r2,-8(fp)
				SWITCHIO_PRIO, SWITCHIO_PRIO, (void *) &SwitchIO_Stack[0],
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : SwitchIO\n");


	err = OSTaskCreateExt(
  801b78:	01802074 	movhi	r6,129
  801b7c:	31ac4a04 	addi	r6,r6,-20184
  801b80:	00800404 	movi	r2,16
  801b84:	d8800015 	stw	r2,0(sp)
  801b88:	00802074 	movhi	r2,129
  801b8c:	10ab4b04 	addi	r2,r2,-21204
  801b90:	d8800115 	stw	r2,4(sp)
  801b94:	00804004 	movi	r2,256
  801b98:	d8800215 	stw	r2,8(sp)
  801b9c:	d8000315 	stw	zero,12(sp)
  801ba0:	00800044 	movi	r2,1
  801ba4:	d8800415 	stw	r2,16(sp)
  801ba8:	01002034 	movhi	r4,128
  801bac:	21055a04 	addi	r4,r4,5480
  801bb0:	000b883a 	mov	r5,zero
  801bb4:	01c00404 	movi	r7,16
  801bb8:	08060f80 	call	8060f8 <OSTaskCreateExt>
  801bbc:	e0bffe05 	stb	r2,-8(fp)
				// of task stack
				EXTRALOAD_PRIO, EXTRALOAD_PRIO, (void *) &Extraload_Stack[0],
				TASK_STACKSIZE, (void *) 0, OS_TASK_OPT_STK_CHK);
//	if(err != 0) alt_printf("Problem creating task : Extraload\n");

	err = OSTaskCreateExt(
  801bc0:	01802074 	movhi	r6,129
  801bc4:	31a74a04 	addi	r6,r6,-25304
  801bc8:	00800484 	movi	r2,18
  801bcc:	d8800015 	stw	r2,0(sp)
  801bd0:	00802074 	movhi	r2,129
  801bd4:	10a64b04 	addi	r2,r2,-26324
  801bd8:	d8800115 	stw	r2,4(sp)
  801bdc:	00804004 	movi	r2,256
  801be0:	d8800215 	stw	r2,8(sp)
  801be4:	d8000315 	stw	zero,12(sp)
  801be8:	00800044 	movi	r2,1
  801bec:	d8800415 	stw	r2,16(sp)
  801bf0:	01002034 	movhi	r4,128
  801bf4:	21054d04 	addi	r4,r4,5428
  801bf8:	000b883a 	mov	r5,zero
  801bfc:	01c00484 	movi	r7,18
  801c00:	08060f80 	call	8060f8 <OSTaskCreateExt>
  801c04:	e0bffe05 	stb	r2,-8(fp)
//	if(err != 0) alt_printf("Problem creating task : Overload\n");

#ifdef DEBUG

	if (DEBUG == 1) {
		OSTaskCreateExt(statisticTask, 				// Pointer to task code
  801c08:	01802074 	movhi	r6,129
  801c0c:	31ab4a04 	addi	r6,r6,-21208
  801c10:	00800084 	movi	r2,2
  801c14:	d8800015 	stw	r2,0(sp)
  801c18:	00802074 	movhi	r2,129
  801c1c:	10aa4b04 	addi	r2,r2,-22228
  801c20:	d8800115 	stw	r2,4(sp)
  801c24:	00804004 	movi	r2,256
  801c28:	d8800215 	stw	r2,8(sp)
  801c2c:	d8000315 	stw	zero,12(sp)
  801c30:	008000c4 	movi	r2,3
  801c34:	d8800415 	stw	r2,16(sp)
  801c38:	01002034 	movhi	r4,128
  801c3c:	2100a104 	addi	r4,r4,644
  801c40:	000b883a 	mov	r5,zero
  801c44:	01c00084 	movi	r7,2
  801c48:	08060f80 	call	8060f8 <OSTaskCreateExt>

#endif



	alt_printf("All Tasks and Kernel Objects generated!\n");
  801c4c:	01002074 	movhi	r4,129
  801c50:	21218e04 	addi	r4,r4,-31176
  801c54:	0803aa80 	call	803aa8 <alt_printf>

	/* Task deletes itself */

	OSTaskDel(OS_PRIO_SELF);
  801c58:	01003fc4 	movi	r4,255
  801c5c:	08062600 	call	806260 <OSTaskDel>
}
  801c60:	e037883a 	mov	sp,fp
  801c64:	dfc00117 	ldw	ra,4(sp)
  801c68:	df000017 	ldw	fp,0(sp)
  801c6c:	dec00204 	addi	sp,sp,8
  801c70:	f800283a 	ret

00801c74 <main>:
 * The function 'main' creates only a single task 'StartTask' and starts
 * the OS. All other tasks are started from the task 'StartTask'.
 *
 */

int main(void) {
  801c74:	defff904 	addi	sp,sp,-28
  801c78:	dfc00615 	stw	ra,24(sp)
  801c7c:	df000515 	stw	fp,20(sp)
  801c80:	df000504 	addi	fp,sp,20

	alt_printf("Lab2: Cruise Control\n");
  801c84:	01002074 	movhi	r4,129
  801c88:	21219904 	addi	r4,r4,-31132
  801c8c:	0803aa80 	call	803aa8 <alt_printf>

	OSTaskCreateExt(
  801c90:	01802074 	movhi	r6,129
  801c94:	31aa4a04 	addi	r6,r6,-22232
  801c98:	00800144 	movi	r2,5
  801c9c:	d8800015 	stw	r2,0(sp)
  801ca0:	00802074 	movhi	r2,129
  801ca4:	10a94b04 	addi	r2,r2,-23252
  801ca8:	d8800115 	stw	r2,4(sp)
  801cac:	00804004 	movi	r2,256
  801cb0:	d8800215 	stw	r2,8(sp)
  801cb4:	d8000315 	stw	zero,12(sp)
  801cb8:	008000c4 	movi	r2,3
  801cbc:	d8800415 	stw	r2,16(sp)
  801cc0:	01002034 	movhi	r4,128
  801cc4:	2105b404 	addi	r4,r4,5840
  801cc8:	000b883a 	mov	r5,zero
  801ccc:	01c00144 	movi	r7,5
  801cd0:	08060f80 	call	8060f8 <OSTaskCreateExt>
			// of task stack
			STARTTASK_PRIO, STARTTASK_PRIO, (void *) &StartTask_Stack[0],
			TASK_STACKSIZE, (void *) 0,
			OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

	OSStart();
  801cd4:	080421c0 	call	80421c <OSStart>

	return 0;
  801cd8:	0005883a 	mov	r2,zero
}
  801cdc:	e037883a 	mov	sp,fp
  801ce0:	dfc00117 	ldw	ra,4(sp)
  801ce4:	df000017 	ldw	fp,0(sp)
  801ce8:	dec00204 	addi	sp,sp,8
  801cec:	f800283a 	ret

00801cf0 <__floatsisf>:
  801cf0:	2006d7fa 	srli	r3,r4,31
  801cf4:	defffa04 	addi	sp,sp,-24
  801cf8:	008000c4 	movi	r2,3
  801cfc:	dfc00515 	stw	ra,20(sp)
  801d00:	dc000415 	stw	r16,16(sp)
  801d04:	d8800015 	stw	r2,0(sp)
  801d08:	d8c00115 	stw	r3,4(sp)
  801d0c:	2000081e 	bne	r4,zero,801d30 <__floatsisf+0x40>
  801d10:	00800084 	movi	r2,2
  801d14:	d8800015 	stw	r2,0(sp)
  801d18:	d809883a 	mov	r4,sp
  801d1c:	08029440 	call	802944 <__pack_f>
  801d20:	dfc00517 	ldw	ra,20(sp)
  801d24:	dc000417 	ldw	r16,16(sp)
  801d28:	dec00604 	addi	sp,sp,24
  801d2c:	f800283a 	ret
  801d30:	00800784 	movi	r2,30
  801d34:	1807003a 	cmpeq	r3,r3,zero
  801d38:	d8800215 	stw	r2,8(sp)
  801d3c:	18000e1e 	bne	r3,zero,801d78 <__floatsisf+0x88>
  801d40:	00a00034 	movhi	r2,32768
  801d44:	20800e26 	beq	r4,r2,801d80 <__floatsisf+0x90>
  801d48:	0121c83a 	sub	r16,zero,r4
  801d4c:	8009883a 	mov	r4,r16
  801d50:	dc000315 	stw	r16,12(sp)
  801d54:	08028c40 	call	8028c4 <__clzsi2>
  801d58:	117fffc4 	addi	r5,r2,-1
  801d5c:	017fee0e 	bge	zero,r5,801d18 <__floatsisf+0x28>
  801d60:	d8800217 	ldw	r2,8(sp)
  801d64:	8146983a 	sll	r3,r16,r5
  801d68:	1145c83a 	sub	r2,r2,r5
  801d6c:	d8c00315 	stw	r3,12(sp)
  801d70:	d8800215 	stw	r2,8(sp)
  801d74:	003fe806 	br	801d18 <__floatsisf+0x28>
  801d78:	2021883a 	mov	r16,r4
  801d7c:	003ff306 	br	801d4c <__floatsisf+0x5c>
  801d80:	00b3c034 	movhi	r2,52992
  801d84:	003fe606 	br	801d20 <__floatsisf+0x30>

00801d88 <__extendsfdf2>:
  801d88:	defff904 	addi	sp,sp,-28
  801d8c:	d9000115 	stw	r4,4(sp)
  801d90:	d9400204 	addi	r5,sp,8
  801d94:	d9000104 	addi	r4,sp,4
  801d98:	dfc00615 	stw	ra,24(sp)
  801d9c:	0802aa40 	call	802aa4 <__unpack_f>
  801da0:	d9c00517 	ldw	r7,20(sp)
  801da4:	0011883a 	mov	r8,zero
  801da8:	400697ba 	slli	r3,r8,30
  801dac:	3812d0ba 	srli	r9,r7,2
  801db0:	380497ba 	slli	r2,r7,30
  801db4:	d9000217 	ldw	r4,8(sp)
  801db8:	d9400317 	ldw	r5,12(sp)
  801dbc:	d9800417 	ldw	r6,16(sp)
  801dc0:	48c6b03a 	or	r3,r9,r3
  801dc4:	100f883a 	mov	r7,r2
  801dc8:	d8c00015 	stw	r3,0(sp)
  801dcc:	08027080 	call	802708 <__make_dp>
  801dd0:	dfc00617 	ldw	ra,24(sp)
  801dd4:	dec00704 	addi	sp,sp,28
  801dd8:	f800283a 	ret

00801ddc <_fpadd_parts>:
  801ddc:	defff804 	addi	sp,sp,-32
  801de0:	dcc00315 	stw	r19,12(sp)
  801de4:	2027883a 	mov	r19,r4
  801de8:	21000017 	ldw	r4,0(r4)
  801dec:	00c00044 	movi	r3,1
  801df0:	dd400515 	stw	r21,20(sp)
  801df4:	dd000415 	stw	r20,16(sp)
  801df8:	ddc00715 	stw	r23,28(sp)
  801dfc:	dd800615 	stw	r22,24(sp)
  801e00:	dc800215 	stw	r18,8(sp)
  801e04:	dc400115 	stw	r17,4(sp)
  801e08:	dc000015 	stw	r16,0(sp)
  801e0c:	282b883a 	mov	r21,r5
  801e10:	3029883a 	mov	r20,r6
  801e14:	1900632e 	bgeu	r3,r4,801fa4 <_fpadd_parts+0x1c8>
  801e18:	28800017 	ldw	r2,0(r5)
  801e1c:	1880812e 	bgeu	r3,r2,802024 <_fpadd_parts+0x248>
  801e20:	00c00104 	movi	r3,4
  801e24:	20c0dc26 	beq	r4,r3,802198 <_fpadd_parts+0x3bc>
  801e28:	10c07e26 	beq	r2,r3,802024 <_fpadd_parts+0x248>
  801e2c:	00c00084 	movi	r3,2
  801e30:	10c06726 	beq	r2,r3,801fd0 <_fpadd_parts+0x1f4>
  801e34:	20c07b26 	beq	r4,r3,802024 <_fpadd_parts+0x248>
  801e38:	9dc00217 	ldw	r23,8(r19)
  801e3c:	28c00217 	ldw	r3,8(r5)
  801e40:	9c400317 	ldw	r17,12(r19)
  801e44:	2bc00317 	ldw	r15,12(r5)
  801e48:	b8cdc83a 	sub	r6,r23,r3
  801e4c:	9c800417 	ldw	r18,16(r19)
  801e50:	2c000417 	ldw	r16,16(r5)
  801e54:	3009883a 	mov	r4,r6
  801e58:	30009716 	blt	r6,zero,8020b8 <_fpadd_parts+0x2dc>
  801e5c:	00800fc4 	movi	r2,63
  801e60:	11806b16 	blt	r2,r6,802010 <_fpadd_parts+0x234>
  801e64:	0100a40e 	bge	zero,r4,8020f8 <_fpadd_parts+0x31c>
  801e68:	35bff804 	addi	r22,r6,-32
  801e6c:	b000bc16 	blt	r22,zero,802160 <_fpadd_parts+0x384>
  801e70:	8596d83a 	srl	r11,r16,r22
  801e74:	0019883a 	mov	r12,zero
  801e78:	0013883a 	mov	r9,zero
  801e7c:	01000044 	movi	r4,1
  801e80:	0015883a 	mov	r10,zero
  801e84:	b000be16 	blt	r22,zero,802180 <_fpadd_parts+0x3a4>
  801e88:	2590983a 	sll	r8,r4,r22
  801e8c:	000f883a 	mov	r7,zero
  801e90:	00bfffc4 	movi	r2,-1
  801e94:	3889883a 	add	r4,r7,r2
  801e98:	408b883a 	add	r5,r8,r2
  801e9c:	21cd803a 	cmpltu	r6,r4,r7
  801ea0:	314b883a 	add	r5,r6,r5
  801ea4:	7904703a 	and	r2,r15,r4
  801ea8:	8146703a 	and	r3,r16,r5
  801eac:	10c4b03a 	or	r2,r2,r3
  801eb0:	10000226 	beq	r2,zero,801ebc <_fpadd_parts+0xe0>
  801eb4:	02400044 	movi	r9,1
  801eb8:	0015883a 	mov	r10,zero
  801ebc:	5a5eb03a 	or	r15,r11,r9
  801ec0:	62a0b03a 	or	r16,r12,r10
  801ec4:	99400117 	ldw	r5,4(r19)
  801ec8:	a8800117 	ldw	r2,4(r21)
  801ecc:	28806e26 	beq	r5,r2,802088 <_fpadd_parts+0x2ac>
  801ed0:	28006626 	beq	r5,zero,80206c <_fpadd_parts+0x290>
  801ed4:	7c45c83a 	sub	r2,r15,r17
  801ed8:	7889803a 	cmpltu	r4,r15,r2
  801edc:	8487c83a 	sub	r3,r16,r18
  801ee0:	1909c83a 	sub	r4,r3,r4
  801ee4:	100d883a 	mov	r6,r2
  801ee8:	200f883a 	mov	r7,r4
  801eec:	38007716 	blt	r7,zero,8020cc <_fpadd_parts+0x2f0>
  801ef0:	a5c00215 	stw	r23,8(r20)
  801ef4:	a1c00415 	stw	r7,16(r20)
  801ef8:	a0000115 	stw	zero,4(r20)
  801efc:	a1800315 	stw	r6,12(r20)
  801f00:	a2000317 	ldw	r8,12(r20)
  801f04:	a2400417 	ldw	r9,16(r20)
  801f08:	00bfffc4 	movi	r2,-1
  801f0c:	408b883a 	add	r5,r8,r2
  801f10:	2a09803a 	cmpltu	r4,r5,r8
  801f14:	488d883a 	add	r6,r9,r2
  801f18:	01c40034 	movhi	r7,4096
  801f1c:	39ffffc4 	addi	r7,r7,-1
  801f20:	218d883a 	add	r6,r4,r6
  801f24:	39801736 	bltu	r7,r6,801f84 <_fpadd_parts+0x1a8>
  801f28:	31c06526 	beq	r6,r7,8020c0 <_fpadd_parts+0x2e4>
  801f2c:	a3000217 	ldw	r12,8(r20)
  801f30:	4209883a 	add	r4,r8,r8
  801f34:	00bfffc4 	movi	r2,-1
  801f38:	220f803a 	cmpltu	r7,r4,r8
  801f3c:	4a4b883a 	add	r5,r9,r9
  801f40:	394f883a 	add	r7,r7,r5
  801f44:	2095883a 	add	r10,r4,r2
  801f48:	3897883a 	add	r11,r7,r2
  801f4c:	510d803a 	cmpltu	r6,r10,r4
  801f50:	6099883a 	add	r12,r12,r2
  801f54:	32d7883a 	add	r11,r6,r11
  801f58:	00840034 	movhi	r2,4096
  801f5c:	10bfffc4 	addi	r2,r2,-1
  801f60:	2011883a 	mov	r8,r4
  801f64:	3813883a 	mov	r9,r7
  801f68:	a1000315 	stw	r4,12(r20)
  801f6c:	a1c00415 	stw	r7,16(r20)
  801f70:	a3000215 	stw	r12,8(r20)
  801f74:	12c00336 	bltu	r2,r11,801f84 <_fpadd_parts+0x1a8>
  801f78:	58bfed1e 	bne	r11,r2,801f30 <_fpadd_parts+0x154>
  801f7c:	00bfff84 	movi	r2,-2
  801f80:	12bfeb2e 	bgeu	r2,r10,801f30 <_fpadd_parts+0x154>
  801f84:	a2800417 	ldw	r10,16(r20)
  801f88:	008000c4 	movi	r2,3
  801f8c:	00c80034 	movhi	r3,8192
  801f90:	18ffffc4 	addi	r3,r3,-1
  801f94:	a2400317 	ldw	r9,12(r20)
  801f98:	a0800015 	stw	r2,0(r20)
  801f9c:	1a802336 	bltu	r3,r10,80202c <_fpadd_parts+0x250>
  801fa0:	a027883a 	mov	r19,r20
  801fa4:	9805883a 	mov	r2,r19
  801fa8:	ddc00717 	ldw	r23,28(sp)
  801fac:	dd800617 	ldw	r22,24(sp)
  801fb0:	dd400517 	ldw	r21,20(sp)
  801fb4:	dd000417 	ldw	r20,16(sp)
  801fb8:	dcc00317 	ldw	r19,12(sp)
  801fbc:	dc800217 	ldw	r18,8(sp)
  801fc0:	dc400117 	ldw	r17,4(sp)
  801fc4:	dc000017 	ldw	r16,0(sp)
  801fc8:	dec00804 	addi	sp,sp,32
  801fcc:	f800283a 	ret
  801fd0:	20fff41e 	bne	r4,r3,801fa4 <_fpadd_parts+0x1c8>
  801fd4:	31000015 	stw	r4,0(r6)
  801fd8:	98800117 	ldw	r2,4(r19)
  801fdc:	30800115 	stw	r2,4(r6)
  801fe0:	98c00217 	ldw	r3,8(r19)
  801fe4:	30c00215 	stw	r3,8(r6)
  801fe8:	98800317 	ldw	r2,12(r19)
  801fec:	30800315 	stw	r2,12(r6)
  801ff0:	98c00417 	ldw	r3,16(r19)
  801ff4:	30c00415 	stw	r3,16(r6)
  801ff8:	98800117 	ldw	r2,4(r19)
  801ffc:	28c00117 	ldw	r3,4(r5)
  802000:	3027883a 	mov	r19,r6
  802004:	10c4703a 	and	r2,r2,r3
  802008:	30800115 	stw	r2,4(r6)
  80200c:	003fe506 	br	801fa4 <_fpadd_parts+0x1c8>
  802010:	1dc02616 	blt	r3,r23,8020ac <_fpadd_parts+0x2d0>
  802014:	0023883a 	mov	r17,zero
  802018:	182f883a 	mov	r23,r3
  80201c:	0025883a 	mov	r18,zero
  802020:	003fa806 	br	801ec4 <_fpadd_parts+0xe8>
  802024:	a827883a 	mov	r19,r21
  802028:	003fde06 	br	801fa4 <_fpadd_parts+0x1c8>
  80202c:	01800044 	movi	r6,1
  802030:	500497fa 	slli	r2,r10,31
  802034:	4808d07a 	srli	r4,r9,1
  802038:	518ad83a 	srl	r5,r10,r6
  80203c:	a2000217 	ldw	r8,8(r20)
  802040:	1108b03a 	or	r4,r2,r4
  802044:	0007883a 	mov	r3,zero
  802048:	4984703a 	and	r2,r9,r6
  80204c:	208cb03a 	or	r6,r4,r2
  802050:	28ceb03a 	or	r7,r5,r3
  802054:	42000044 	addi	r8,r8,1
  802058:	a027883a 	mov	r19,r20
  80205c:	a1c00415 	stw	r7,16(r20)
  802060:	a2000215 	stw	r8,8(r20)
  802064:	a1800315 	stw	r6,12(r20)
  802068:	003fce06 	br	801fa4 <_fpadd_parts+0x1c8>
  80206c:	8bc5c83a 	sub	r2,r17,r15
  802070:	8889803a 	cmpltu	r4,r17,r2
  802074:	9407c83a 	sub	r3,r18,r16
  802078:	1909c83a 	sub	r4,r3,r4
  80207c:	100d883a 	mov	r6,r2
  802080:	200f883a 	mov	r7,r4
  802084:	003f9906 	br	801eec <_fpadd_parts+0x110>
  802088:	7c45883a 	add	r2,r15,r17
  80208c:	13c9803a 	cmpltu	r4,r2,r15
  802090:	8487883a 	add	r3,r16,r18
  802094:	20c9883a 	add	r4,r4,r3
  802098:	a1400115 	stw	r5,4(r20)
  80209c:	a5c00215 	stw	r23,8(r20)
  8020a0:	a0800315 	stw	r2,12(r20)
  8020a4:	a1000415 	stw	r4,16(r20)
  8020a8:	003fb606 	br	801f84 <_fpadd_parts+0x1a8>
  8020ac:	001f883a 	mov	r15,zero
  8020b0:	0021883a 	mov	r16,zero
  8020b4:	003f8306 	br	801ec4 <_fpadd_parts+0xe8>
  8020b8:	018dc83a 	sub	r6,zero,r6
  8020bc:	003f6706 	br	801e5c <_fpadd_parts+0x80>
  8020c0:	00bfff84 	movi	r2,-2
  8020c4:	117faf36 	bltu	r2,r5,801f84 <_fpadd_parts+0x1a8>
  8020c8:	003f9806 	br	801f2c <_fpadd_parts+0x150>
  8020cc:	0005883a 	mov	r2,zero
  8020d0:	1189c83a 	sub	r4,r2,r6
  8020d4:	1105803a 	cmpltu	r2,r2,r4
  8020d8:	01cbc83a 	sub	r5,zero,r7
  8020dc:	2885c83a 	sub	r2,r5,r2
  8020e0:	01800044 	movi	r6,1
  8020e4:	a1800115 	stw	r6,4(r20)
  8020e8:	a5c00215 	stw	r23,8(r20)
  8020ec:	a1000315 	stw	r4,12(r20)
  8020f0:	a0800415 	stw	r2,16(r20)
  8020f4:	003f8206 	br	801f00 <_fpadd_parts+0x124>
  8020f8:	203f7226 	beq	r4,zero,801ec4 <_fpadd_parts+0xe8>
  8020fc:	35bff804 	addi	r22,r6,-32
  802100:	b9af883a 	add	r23,r23,r6
  802104:	b0003116 	blt	r22,zero,8021cc <_fpadd_parts+0x3f0>
  802108:	959ad83a 	srl	r13,r18,r22
  80210c:	001d883a 	mov	r14,zero
  802110:	000f883a 	mov	r7,zero
  802114:	01000044 	movi	r4,1
  802118:	0011883a 	mov	r8,zero
  80211c:	b0002516 	blt	r22,zero,8021b4 <_fpadd_parts+0x3d8>
  802120:	2594983a 	sll	r10,r4,r22
  802124:	0013883a 	mov	r9,zero
  802128:	00bfffc4 	movi	r2,-1
  80212c:	4889883a 	add	r4,r9,r2
  802130:	508b883a 	add	r5,r10,r2
  802134:	224d803a 	cmpltu	r6,r4,r9
  802138:	314b883a 	add	r5,r6,r5
  80213c:	8904703a 	and	r2,r17,r4
  802140:	9146703a 	and	r3,r18,r5
  802144:	10c4b03a 	or	r2,r2,r3
  802148:	10000226 	beq	r2,zero,802154 <_fpadd_parts+0x378>
  80214c:	01c00044 	movi	r7,1
  802150:	0011883a 	mov	r8,zero
  802154:	69e2b03a 	or	r17,r13,r7
  802158:	7224b03a 	or	r18,r14,r8
  80215c:	003f5906 	br	801ec4 <_fpadd_parts+0xe8>
  802160:	8407883a 	add	r3,r16,r16
  802164:	008007c4 	movi	r2,31
  802168:	1185c83a 	sub	r2,r2,r6
  80216c:	1886983a 	sll	r3,r3,r2
  802170:	7996d83a 	srl	r11,r15,r6
  802174:	8198d83a 	srl	r12,r16,r6
  802178:	1ad6b03a 	or	r11,r3,r11
  80217c:	003f3e06 	br	801e78 <_fpadd_parts+0x9c>
  802180:	2006d07a 	srli	r3,r4,1
  802184:	008007c4 	movi	r2,31
  802188:	1185c83a 	sub	r2,r2,r6
  80218c:	1890d83a 	srl	r8,r3,r2
  802190:	218e983a 	sll	r7,r4,r6
  802194:	003f3e06 	br	801e90 <_fpadd_parts+0xb4>
  802198:	113f821e 	bne	r2,r4,801fa4 <_fpadd_parts+0x1c8>
  80219c:	28c00117 	ldw	r3,4(r5)
  8021a0:	98800117 	ldw	r2,4(r19)
  8021a4:	10ff7f26 	beq	r2,r3,801fa4 <_fpadd_parts+0x1c8>
  8021a8:	04c02074 	movhi	r19,129
  8021ac:	9ce19f04 	addi	r19,r19,-31108
  8021b0:	003f7c06 	br	801fa4 <_fpadd_parts+0x1c8>
  8021b4:	2006d07a 	srli	r3,r4,1
  8021b8:	008007c4 	movi	r2,31
  8021bc:	1185c83a 	sub	r2,r2,r6
  8021c0:	1894d83a 	srl	r10,r3,r2
  8021c4:	2192983a 	sll	r9,r4,r6
  8021c8:	003fd706 	br	802128 <_fpadd_parts+0x34c>
  8021cc:	9487883a 	add	r3,r18,r18
  8021d0:	008007c4 	movi	r2,31
  8021d4:	1185c83a 	sub	r2,r2,r6
  8021d8:	1886983a 	sll	r3,r3,r2
  8021dc:	899ad83a 	srl	r13,r17,r6
  8021e0:	919cd83a 	srl	r14,r18,r6
  8021e4:	1b5ab03a 	or	r13,r3,r13
  8021e8:	003fc906 	br	802110 <_fpadd_parts+0x334>

008021ec <__subdf3>:
  8021ec:	deffea04 	addi	sp,sp,-88
  8021f0:	dcc01415 	stw	r19,80(sp)
  8021f4:	dcc00404 	addi	r19,sp,16
  8021f8:	2011883a 	mov	r8,r4
  8021fc:	2813883a 	mov	r9,r5
  802200:	dc401315 	stw	r17,76(sp)
  802204:	d809883a 	mov	r4,sp
  802208:	980b883a 	mov	r5,r19
  80220c:	dc400904 	addi	r17,sp,36
  802210:	dfc01515 	stw	ra,84(sp)
  802214:	da400115 	stw	r9,4(sp)
  802218:	d9c00315 	stw	r7,12(sp)
  80221c:	da000015 	stw	r8,0(sp)
  802220:	d9800215 	stw	r6,8(sp)
  802224:	0802e800 	call	802e80 <__unpack_d>
  802228:	d9000204 	addi	r4,sp,8
  80222c:	880b883a 	mov	r5,r17
  802230:	0802e800 	call	802e80 <__unpack_d>
  802234:	d8800a17 	ldw	r2,40(sp)
  802238:	880b883a 	mov	r5,r17
  80223c:	9809883a 	mov	r4,r19
  802240:	d9800e04 	addi	r6,sp,56
  802244:	1080005c 	xori	r2,r2,1
  802248:	d8800a15 	stw	r2,40(sp)
  80224c:	0801ddc0 	call	801ddc <_fpadd_parts>
  802250:	1009883a 	mov	r4,r2
  802254:	0802b6c0 	call	802b6c <__pack_d>
  802258:	dfc01517 	ldw	ra,84(sp)
  80225c:	dcc01417 	ldw	r19,80(sp)
  802260:	dc401317 	ldw	r17,76(sp)
  802264:	dec01604 	addi	sp,sp,88
  802268:	f800283a 	ret

0080226c <__adddf3>:
  80226c:	deffea04 	addi	sp,sp,-88
  802270:	dcc01415 	stw	r19,80(sp)
  802274:	dcc00404 	addi	r19,sp,16
  802278:	2011883a 	mov	r8,r4
  80227c:	2813883a 	mov	r9,r5
  802280:	dc401315 	stw	r17,76(sp)
  802284:	d809883a 	mov	r4,sp
  802288:	980b883a 	mov	r5,r19
  80228c:	dc400904 	addi	r17,sp,36
  802290:	dfc01515 	stw	ra,84(sp)
  802294:	da400115 	stw	r9,4(sp)
  802298:	d9c00315 	stw	r7,12(sp)
  80229c:	da000015 	stw	r8,0(sp)
  8022a0:	d9800215 	stw	r6,8(sp)
  8022a4:	0802e800 	call	802e80 <__unpack_d>
  8022a8:	d9000204 	addi	r4,sp,8
  8022ac:	880b883a 	mov	r5,r17
  8022b0:	0802e800 	call	802e80 <__unpack_d>
  8022b4:	d9800e04 	addi	r6,sp,56
  8022b8:	9809883a 	mov	r4,r19
  8022bc:	880b883a 	mov	r5,r17
  8022c0:	0801ddc0 	call	801ddc <_fpadd_parts>
  8022c4:	1009883a 	mov	r4,r2
  8022c8:	0802b6c0 	call	802b6c <__pack_d>
  8022cc:	dfc01517 	ldw	ra,84(sp)
  8022d0:	dcc01417 	ldw	r19,80(sp)
  8022d4:	dc401317 	ldw	r17,76(sp)
  8022d8:	dec01604 	addi	sp,sp,88
  8022dc:	f800283a 	ret

008022e0 <__divdf3>:
  8022e0:	deffed04 	addi	sp,sp,-76
  8022e4:	dcc01115 	stw	r19,68(sp)
  8022e8:	dcc00404 	addi	r19,sp,16
  8022ec:	2011883a 	mov	r8,r4
  8022f0:	2813883a 	mov	r9,r5
  8022f4:	dc000e15 	stw	r16,56(sp)
  8022f8:	d809883a 	mov	r4,sp
  8022fc:	980b883a 	mov	r5,r19
  802300:	dc000904 	addi	r16,sp,36
  802304:	dfc01215 	stw	ra,72(sp)
  802308:	da400115 	stw	r9,4(sp)
  80230c:	d9c00315 	stw	r7,12(sp)
  802310:	da000015 	stw	r8,0(sp)
  802314:	d9800215 	stw	r6,8(sp)
  802318:	dc801015 	stw	r18,64(sp)
  80231c:	dc400f15 	stw	r17,60(sp)
  802320:	0802e800 	call	802e80 <__unpack_d>
  802324:	d9000204 	addi	r4,sp,8
  802328:	800b883a 	mov	r5,r16
  80232c:	0802e800 	call	802e80 <__unpack_d>
  802330:	d9000417 	ldw	r4,16(sp)
  802334:	00800044 	movi	r2,1
  802338:	11000b2e 	bgeu	r2,r4,802368 <__divdf3+0x88>
  80233c:	d9400917 	ldw	r5,36(sp)
  802340:	1140762e 	bgeu	r2,r5,80251c <__divdf3+0x23c>
  802344:	d8800517 	ldw	r2,20(sp)
  802348:	d8c00a17 	ldw	r3,40(sp)
  80234c:	01800104 	movi	r6,4
  802350:	10c4f03a 	xor	r2,r2,r3
  802354:	d8800515 	stw	r2,20(sp)
  802358:	21800226 	beq	r4,r6,802364 <__divdf3+0x84>
  80235c:	00800084 	movi	r2,2
  802360:	2080141e 	bne	r4,r2,8023b4 <__divdf3+0xd4>
  802364:	29000926 	beq	r5,r4,80238c <__divdf3+0xac>
  802368:	9809883a 	mov	r4,r19
  80236c:	0802b6c0 	call	802b6c <__pack_d>
  802370:	dfc01217 	ldw	ra,72(sp)
  802374:	dcc01117 	ldw	r19,68(sp)
  802378:	dc801017 	ldw	r18,64(sp)
  80237c:	dc400f17 	ldw	r17,60(sp)
  802380:	dc000e17 	ldw	r16,56(sp)
  802384:	dec01304 	addi	sp,sp,76
  802388:	f800283a 	ret
  80238c:	01002074 	movhi	r4,129
  802390:	21219f04 	addi	r4,r4,-31108
  802394:	0802b6c0 	call	802b6c <__pack_d>
  802398:	dfc01217 	ldw	ra,72(sp)
  80239c:	dcc01117 	ldw	r19,68(sp)
  8023a0:	dc801017 	ldw	r18,64(sp)
  8023a4:	dc400f17 	ldw	r17,60(sp)
  8023a8:	dc000e17 	ldw	r16,56(sp)
  8023ac:	dec01304 	addi	sp,sp,76
  8023b0:	f800283a 	ret
  8023b4:	29805b26 	beq	r5,r6,802524 <__divdf3+0x244>
  8023b8:	28802d26 	beq	r5,r2,802470 <__divdf3+0x190>
  8023bc:	d8c00617 	ldw	r3,24(sp)
  8023c0:	d8800b17 	ldw	r2,44(sp)
  8023c4:	d9c00817 	ldw	r7,32(sp)
  8023c8:	dc400d17 	ldw	r17,52(sp)
  8023cc:	188bc83a 	sub	r5,r3,r2
  8023d0:	d9800717 	ldw	r6,28(sp)
  8023d4:	dc000c17 	ldw	r16,48(sp)
  8023d8:	d9400615 	stw	r5,24(sp)
  8023dc:	3c403836 	bltu	r7,r17,8024c0 <__divdf3+0x1e0>
  8023e0:	89c03626 	beq	r17,r7,8024bc <__divdf3+0x1dc>
  8023e4:	0015883a 	mov	r10,zero
  8023e8:	001d883a 	mov	r14,zero
  8023ec:	02c40034 	movhi	r11,4096
  8023f0:	001f883a 	mov	r15,zero
  8023f4:	003f883a 	mov	ra,zero
  8023f8:	04800f44 	movi	r18,61
  8023fc:	00000f06 	br	80243c <__divdf3+0x15c>
  802400:	601d883a 	mov	r14,r12
  802404:	681f883a 	mov	r15,r13
  802408:	400d883a 	mov	r6,r8
  80240c:	100f883a 	mov	r7,r2
  802410:	3191883a 	add	r8,r6,r6
  802414:	5808d07a 	srli	r4,r11,1
  802418:	4185803a 	cmpltu	r2,r8,r6
  80241c:	39d3883a 	add	r9,r7,r7
  802420:	28c6b03a 	or	r3,r5,r3
  802424:	1245883a 	add	r2,r2,r9
  802428:	1815883a 	mov	r10,r3
  80242c:	2017883a 	mov	r11,r4
  802430:	400d883a 	mov	r6,r8
  802434:	100f883a 	mov	r7,r2
  802438:	fc801726 	beq	ra,r18,802498 <__divdf3+0x1b8>
  80243c:	580a97fa 	slli	r5,r11,31
  802440:	5006d07a 	srli	r3,r10,1
  802444:	ffc00044 	addi	ra,ra,1
  802448:	3c7ff136 	bltu	r7,r17,802410 <__divdf3+0x130>
  80244c:	3411c83a 	sub	r8,r6,r16
  802450:	3205803a 	cmpltu	r2,r6,r8
  802454:	3c53c83a 	sub	r9,r7,r17
  802458:	7298b03a 	or	r12,r14,r10
  80245c:	7adab03a 	or	r13,r15,r11
  802460:	4885c83a 	sub	r2,r9,r2
  802464:	89ffe61e 	bne	r17,r7,802400 <__divdf3+0x120>
  802468:	343fe936 	bltu	r6,r16,802410 <__divdf3+0x130>
  80246c:	003fe406 	br	802400 <__divdf3+0x120>
  802470:	9809883a 	mov	r4,r19
  802474:	d9800415 	stw	r6,16(sp)
  802478:	0802b6c0 	call	802b6c <__pack_d>
  80247c:	dfc01217 	ldw	ra,72(sp)
  802480:	dcc01117 	ldw	r19,68(sp)
  802484:	dc801017 	ldw	r18,64(sp)
  802488:	dc400f17 	ldw	r17,60(sp)
  80248c:	dc000e17 	ldw	r16,56(sp)
  802490:	dec01304 	addi	sp,sp,76
  802494:	f800283a 	ret
  802498:	00803fc4 	movi	r2,255
  80249c:	7090703a 	and	r8,r14,r2
  8024a0:	00802004 	movi	r2,128
  8024a4:	0007883a 	mov	r3,zero
  8024a8:	0013883a 	mov	r9,zero
  8024ac:	40800d26 	beq	r8,r2,8024e4 <__divdf3+0x204>
  8024b0:	dbc00815 	stw	r15,32(sp)
  8024b4:	db800715 	stw	r14,28(sp)
  8024b8:	003fab06 	br	802368 <__divdf3+0x88>
  8024bc:	343fc92e 	bgeu	r6,r16,8023e4 <__divdf3+0x104>
  8024c0:	3185883a 	add	r2,r6,r6
  8024c4:	1189803a 	cmpltu	r4,r2,r6
  8024c8:	39c7883a 	add	r3,r7,r7
  8024cc:	20c9883a 	add	r4,r4,r3
  8024d0:	297fffc4 	addi	r5,r5,-1
  8024d4:	100d883a 	mov	r6,r2
  8024d8:	200f883a 	mov	r7,r4
  8024dc:	d9400615 	stw	r5,24(sp)
  8024e0:	003fc006 	br	8023e4 <__divdf3+0x104>
  8024e4:	483ff21e 	bne	r9,zero,8024b0 <__divdf3+0x1d0>
  8024e8:	01004004 	movi	r4,256
  8024ec:	7104703a 	and	r2,r14,r4
  8024f0:	10c4b03a 	or	r2,r2,r3
  8024f4:	103fee1e 	bne	r2,zero,8024b0 <__divdf3+0x1d0>
  8024f8:	31c4b03a 	or	r2,r6,r7
  8024fc:	103fec26 	beq	r2,zero,8024b0 <__divdf3+0x1d0>
  802500:	7205883a 	add	r2,r14,r8
  802504:	1391803a 	cmpltu	r8,r2,r14
  802508:	43d1883a 	add	r8,r8,r15
  80250c:	013fc004 	movi	r4,-256
  802510:	111c703a 	and	r14,r2,r4
  802514:	401f883a 	mov	r15,r8
  802518:	003fe506 	br	8024b0 <__divdf3+0x1d0>
  80251c:	8009883a 	mov	r4,r16
  802520:	003f9206 	br	80236c <__divdf3+0x8c>
  802524:	9809883a 	mov	r4,r19
  802528:	d8000715 	stw	zero,28(sp)
  80252c:	d8000815 	stw	zero,32(sp)
  802530:	d8000615 	stw	zero,24(sp)
  802534:	003f8d06 	br	80236c <__divdf3+0x8c>

00802538 <__floatsidf>:
  802538:	2006d7fa 	srli	r3,r4,31
  80253c:	defff604 	addi	sp,sp,-40
  802540:	008000c4 	movi	r2,3
  802544:	dfc00915 	stw	ra,36(sp)
  802548:	dcc00815 	stw	r19,32(sp)
  80254c:	dc800715 	stw	r18,28(sp)
  802550:	dc400615 	stw	r17,24(sp)
  802554:	dc000515 	stw	r16,20(sp)
  802558:	d8800015 	stw	r2,0(sp)
  80255c:	d8c00115 	stw	r3,4(sp)
  802560:	20000f1e 	bne	r4,zero,8025a0 <__floatsidf+0x68>
  802564:	00800084 	movi	r2,2
  802568:	d8800015 	stw	r2,0(sp)
  80256c:	d809883a 	mov	r4,sp
  802570:	0802b6c0 	call	802b6c <__pack_d>
  802574:	1009883a 	mov	r4,r2
  802578:	180b883a 	mov	r5,r3
  80257c:	2005883a 	mov	r2,r4
  802580:	2807883a 	mov	r3,r5
  802584:	dfc00917 	ldw	ra,36(sp)
  802588:	dcc00817 	ldw	r19,32(sp)
  80258c:	dc800717 	ldw	r18,28(sp)
  802590:	dc400617 	ldw	r17,24(sp)
  802594:	dc000517 	ldw	r16,20(sp)
  802598:	dec00a04 	addi	sp,sp,40
  80259c:	f800283a 	ret
  8025a0:	00800f04 	movi	r2,60
  8025a4:	1807003a 	cmpeq	r3,r3,zero
  8025a8:	d8800215 	stw	r2,8(sp)
  8025ac:	18001126 	beq	r3,zero,8025f4 <__floatsidf+0xbc>
  8025b0:	0027883a 	mov	r19,zero
  8025b4:	2025883a 	mov	r18,r4
  8025b8:	d9000315 	stw	r4,12(sp)
  8025bc:	dcc00415 	stw	r19,16(sp)
  8025c0:	08028c40 	call	8028c4 <__clzsi2>
  8025c4:	11000744 	addi	r4,r2,29
  8025c8:	013fe80e 	bge	zero,r4,80256c <__floatsidf+0x34>
  8025cc:	10bfff44 	addi	r2,r2,-3
  8025d0:	10000c16 	blt	r2,zero,802604 <__floatsidf+0xcc>
  8025d4:	90a2983a 	sll	r17,r18,r2
  8025d8:	0021883a 	mov	r16,zero
  8025dc:	d8800217 	ldw	r2,8(sp)
  8025e0:	dc400415 	stw	r17,16(sp)
  8025e4:	dc000315 	stw	r16,12(sp)
  8025e8:	1105c83a 	sub	r2,r2,r4
  8025ec:	d8800215 	stw	r2,8(sp)
  8025f0:	003fde06 	br	80256c <__floatsidf+0x34>
  8025f4:	00a00034 	movhi	r2,32768
  8025f8:	20800a26 	beq	r4,r2,802624 <__floatsidf+0xec>
  8025fc:	0109c83a 	sub	r4,zero,r4
  802600:	003feb06 	br	8025b0 <__floatsidf+0x78>
  802604:	9006d07a 	srli	r3,r18,1
  802608:	008007c4 	movi	r2,31
  80260c:	1105c83a 	sub	r2,r2,r4
  802610:	1886d83a 	srl	r3,r3,r2
  802614:	9922983a 	sll	r17,r19,r4
  802618:	9120983a 	sll	r16,r18,r4
  80261c:	1c62b03a 	or	r17,r3,r17
  802620:	003fee06 	br	8025dc <__floatsidf+0xa4>
  802624:	0009883a 	mov	r4,zero
  802628:	01707834 	movhi	r5,49632
  80262c:	003fd306 	br	80257c <__floatsidf+0x44>

00802630 <__fixdfsi>:
  802630:	defff804 	addi	sp,sp,-32
  802634:	2005883a 	mov	r2,r4
  802638:	2807883a 	mov	r3,r5
  80263c:	d809883a 	mov	r4,sp
  802640:	d9400204 	addi	r5,sp,8
  802644:	d8c00115 	stw	r3,4(sp)
  802648:	d8800015 	stw	r2,0(sp)
  80264c:	dfc00715 	stw	ra,28(sp)
  802650:	0802e800 	call	802e80 <__unpack_d>
  802654:	d8c00217 	ldw	r3,8(sp)
  802658:	00800084 	movi	r2,2
  80265c:	1880051e 	bne	r3,r2,802674 <__fixdfsi+0x44>
  802660:	0007883a 	mov	r3,zero
  802664:	1805883a 	mov	r2,r3
  802668:	dfc00717 	ldw	ra,28(sp)
  80266c:	dec00804 	addi	sp,sp,32
  802670:	f800283a 	ret
  802674:	00800044 	movi	r2,1
  802678:	10fff92e 	bgeu	r2,r3,802660 <__fixdfsi+0x30>
  80267c:	00800104 	movi	r2,4
  802680:	18800426 	beq	r3,r2,802694 <__fixdfsi+0x64>
  802684:	d8c00417 	ldw	r3,16(sp)
  802688:	183ff516 	blt	r3,zero,802660 <__fixdfsi+0x30>
  80268c:	00800784 	movi	r2,30
  802690:	10c0080e 	bge	r2,r3,8026b4 <__fixdfsi+0x84>
  802694:	d8800317 	ldw	r2,12(sp)
  802698:	1000121e 	bne	r2,zero,8026e4 <__fixdfsi+0xb4>
  80269c:	00e00034 	movhi	r3,32768
  8026a0:	18ffffc4 	addi	r3,r3,-1
  8026a4:	1805883a 	mov	r2,r3
  8026a8:	dfc00717 	ldw	ra,28(sp)
  8026ac:	dec00804 	addi	sp,sp,32
  8026b0:	f800283a 	ret
  8026b4:	00800f04 	movi	r2,60
  8026b8:	10d1c83a 	sub	r8,r2,r3
  8026bc:	40bff804 	addi	r2,r8,-32
  8026c0:	d9800517 	ldw	r6,20(sp)
  8026c4:	d9c00617 	ldw	r7,24(sp)
  8026c8:	10000816 	blt	r2,zero,8026ec <__fixdfsi+0xbc>
  8026cc:	3888d83a 	srl	r4,r7,r2
  8026d0:	d8800317 	ldw	r2,12(sp)
  8026d4:	2007883a 	mov	r3,r4
  8026d8:	103fe226 	beq	r2,zero,802664 <__fixdfsi+0x34>
  8026dc:	0107c83a 	sub	r3,zero,r4
  8026e0:	003fe006 	br	802664 <__fixdfsi+0x34>
  8026e4:	00e00034 	movhi	r3,32768
  8026e8:	003fde06 	br	802664 <__fixdfsi+0x34>
  8026ec:	39c7883a 	add	r3,r7,r7
  8026f0:	008007c4 	movi	r2,31
  8026f4:	1205c83a 	sub	r2,r2,r8
  8026f8:	1886983a 	sll	r3,r3,r2
  8026fc:	3208d83a 	srl	r4,r6,r8
  802700:	1908b03a 	or	r4,r3,r4
  802704:	003ff206 	br	8026d0 <__fixdfsi+0xa0>

00802708 <__make_dp>:
  802708:	defff904 	addi	sp,sp,-28
  80270c:	d8c00717 	ldw	r3,28(sp)
  802710:	d9000015 	stw	r4,0(sp)
  802714:	d809883a 	mov	r4,sp
  802718:	dfc00515 	stw	ra,20(sp)
  80271c:	d9c00615 	stw	r7,24(sp)
  802720:	d9400115 	stw	r5,4(sp)
  802724:	d9800215 	stw	r6,8(sp)
  802728:	d8c00415 	stw	r3,16(sp)
  80272c:	d9c00315 	stw	r7,12(sp)
  802730:	0802b6c0 	call	802b6c <__pack_d>
  802734:	dfc00517 	ldw	ra,20(sp)
  802738:	dec00704 	addi	sp,sp,28
  80273c:	f800283a 	ret

00802740 <udivmodsi4>:
  802740:	29001b2e 	bgeu	r5,r4,8027b0 <udivmodsi4+0x70>
  802744:	28001a16 	blt	r5,zero,8027b0 <udivmodsi4+0x70>
  802748:	00800044 	movi	r2,1
  80274c:	0007883a 	mov	r3,zero
  802750:	01c007c4 	movi	r7,31
  802754:	00000306 	br	802764 <udivmodsi4+0x24>
  802758:	19c01326 	beq	r3,r7,8027a8 <udivmodsi4+0x68>
  80275c:	18c00044 	addi	r3,r3,1
  802760:	28000416 	blt	r5,zero,802774 <udivmodsi4+0x34>
  802764:	294b883a 	add	r5,r5,r5
  802768:	1085883a 	add	r2,r2,r2
  80276c:	293ffa36 	bltu	r5,r4,802758 <udivmodsi4+0x18>
  802770:	10000d26 	beq	r2,zero,8027a8 <udivmodsi4+0x68>
  802774:	0007883a 	mov	r3,zero
  802778:	21400236 	bltu	r4,r5,802784 <udivmodsi4+0x44>
  80277c:	2149c83a 	sub	r4,r4,r5
  802780:	1886b03a 	or	r3,r3,r2
  802784:	1004d07a 	srli	r2,r2,1
  802788:	280ad07a 	srli	r5,r5,1
  80278c:	103ffa1e 	bne	r2,zero,802778 <udivmodsi4+0x38>
  802790:	30000226 	beq	r6,zero,80279c <udivmodsi4+0x5c>
  802794:	2005883a 	mov	r2,r4
  802798:	f800283a 	ret
  80279c:	1809883a 	mov	r4,r3
  8027a0:	2005883a 	mov	r2,r4
  8027a4:	f800283a 	ret
  8027a8:	0007883a 	mov	r3,zero
  8027ac:	003ff806 	br	802790 <udivmodsi4+0x50>
  8027b0:	00800044 	movi	r2,1
  8027b4:	0007883a 	mov	r3,zero
  8027b8:	003fef06 	br	802778 <udivmodsi4+0x38>

008027bc <__divsi3>:
  8027bc:	defffe04 	addi	sp,sp,-8
  8027c0:	dc000015 	stw	r16,0(sp)
  8027c4:	dfc00115 	stw	ra,4(sp)
  8027c8:	0021883a 	mov	r16,zero
  8027cc:	20000c16 	blt	r4,zero,802800 <__divsi3+0x44>
  8027d0:	000d883a 	mov	r6,zero
  8027d4:	28000e16 	blt	r5,zero,802810 <__divsi3+0x54>
  8027d8:	08027400 	call	802740 <udivmodsi4>
  8027dc:	1007883a 	mov	r3,r2
  8027e0:	8005003a 	cmpeq	r2,r16,zero
  8027e4:	1000011e 	bne	r2,zero,8027ec <__divsi3+0x30>
  8027e8:	00c7c83a 	sub	r3,zero,r3
  8027ec:	1805883a 	mov	r2,r3
  8027f0:	dfc00117 	ldw	ra,4(sp)
  8027f4:	dc000017 	ldw	r16,0(sp)
  8027f8:	dec00204 	addi	sp,sp,8
  8027fc:	f800283a 	ret
  802800:	0109c83a 	sub	r4,zero,r4
  802804:	04000044 	movi	r16,1
  802808:	000d883a 	mov	r6,zero
  80280c:	283ff20e 	bge	r5,zero,8027d8 <__divsi3+0x1c>
  802810:	014bc83a 	sub	r5,zero,r5
  802814:	8021003a 	cmpeq	r16,r16,zero
  802818:	003fef06 	br	8027d8 <__divsi3+0x1c>

0080281c <__modsi3>:
  80281c:	deffff04 	addi	sp,sp,-4
  802820:	dfc00015 	stw	ra,0(sp)
  802824:	01800044 	movi	r6,1
  802828:	2807883a 	mov	r3,r5
  80282c:	20000416 	blt	r4,zero,802840 <__modsi3+0x24>
  802830:	28000c16 	blt	r5,zero,802864 <__modsi3+0x48>
  802834:	dfc00017 	ldw	ra,0(sp)
  802838:	dec00104 	addi	sp,sp,4
  80283c:	08027401 	jmpi	802740 <udivmodsi4>
  802840:	0109c83a 	sub	r4,zero,r4
  802844:	28000b16 	blt	r5,zero,802874 <__modsi3+0x58>
  802848:	180b883a 	mov	r5,r3
  80284c:	01800044 	movi	r6,1
  802850:	08027400 	call	802740 <udivmodsi4>
  802854:	0085c83a 	sub	r2,zero,r2
  802858:	dfc00017 	ldw	ra,0(sp)
  80285c:	dec00104 	addi	sp,sp,4
  802860:	f800283a 	ret
  802864:	014bc83a 	sub	r5,zero,r5
  802868:	dfc00017 	ldw	ra,0(sp)
  80286c:	dec00104 	addi	sp,sp,4
  802870:	08027401 	jmpi	802740 <udivmodsi4>
  802874:	0147c83a 	sub	r3,zero,r5
  802878:	003ff306 	br	802848 <__modsi3+0x2c>

0080287c <__udivsi3>:
  80287c:	000d883a 	mov	r6,zero
  802880:	08027401 	jmpi	802740 <udivmodsi4>

00802884 <__umodsi3>:
  802884:	01800044 	movi	r6,1
  802888:	08027401 	jmpi	802740 <udivmodsi4>

0080288c <__mulsi3>:
  80288c:	20000a26 	beq	r4,zero,8028b8 <__mulsi3+0x2c>
  802890:	0007883a 	mov	r3,zero
  802894:	2080004c 	andi	r2,r4,1
  802898:	1005003a 	cmpeq	r2,r2,zero
  80289c:	2008d07a 	srli	r4,r4,1
  8028a0:	1000011e 	bne	r2,zero,8028a8 <__mulsi3+0x1c>
  8028a4:	1947883a 	add	r3,r3,r5
  8028a8:	294b883a 	add	r5,r5,r5
  8028ac:	203ff91e 	bne	r4,zero,802894 <__mulsi3+0x8>
  8028b0:	1805883a 	mov	r2,r3
  8028b4:	f800283a 	ret
  8028b8:	0007883a 	mov	r3,zero
  8028bc:	1805883a 	mov	r2,r3
  8028c0:	f800283a 	ret

008028c4 <__clzsi2>:
  8028c4:	00bfffd4 	movui	r2,65535
  8028c8:	11000e36 	bltu	r2,r4,802904 <__clzsi2+0x40>
  8028cc:	00803fc4 	movi	r2,255
  8028d0:	01400204 	movi	r5,8
  8028d4:	0007883a 	mov	r3,zero
  8028d8:	11001036 	bltu	r2,r4,80291c <__clzsi2+0x58>
  8028dc:	000b883a 	mov	r5,zero
  8028e0:	20c6d83a 	srl	r3,r4,r3
  8028e4:	00802074 	movhi	r2,129
  8028e8:	10a1a404 	addi	r2,r2,-31088
  8028ec:	1887883a 	add	r3,r3,r2
  8028f0:	18800003 	ldbu	r2,0(r3)
  8028f4:	00c00804 	movi	r3,32
  8028f8:	2885883a 	add	r2,r5,r2
  8028fc:	1885c83a 	sub	r2,r3,r2
  802900:	f800283a 	ret
  802904:	01400404 	movi	r5,16
  802908:	00804034 	movhi	r2,256
  80290c:	10bfffc4 	addi	r2,r2,-1
  802910:	2807883a 	mov	r3,r5
  802914:	113ff22e 	bgeu	r2,r4,8028e0 <__clzsi2+0x1c>
  802918:	01400604 	movi	r5,24
  80291c:	2807883a 	mov	r3,r5
  802920:	20c6d83a 	srl	r3,r4,r3
  802924:	00802074 	movhi	r2,129
  802928:	10a1a404 	addi	r2,r2,-31088
  80292c:	1887883a 	add	r3,r3,r2
  802930:	18800003 	ldbu	r2,0(r3)
  802934:	00c00804 	movi	r3,32
  802938:	2885883a 	add	r2,r5,r2
  80293c:	1885c83a 	sub	r2,r3,r2
  802940:	f800283a 	ret

00802944 <__pack_f>:
  802944:	20c00017 	ldw	r3,0(r4)
  802948:	01c00044 	movi	r7,1
  80294c:	21800317 	ldw	r6,12(r4)
  802950:	21400117 	ldw	r5,4(r4)
  802954:	38c02d2e 	bgeu	r7,r3,802a0c <__pack_f+0xc8>
  802958:	00800104 	movi	r2,4
  80295c:	18802826 	beq	r3,r2,802a00 <__pack_f+0xbc>
  802960:	00800084 	movi	r2,2
  802964:	18800126 	beq	r3,r2,80296c <__pack_f+0x28>
  802968:	3000101e 	bne	r6,zero,8029ac <__pack_f+0x68>
  80296c:	000d883a 	mov	r6,zero
  802970:	0007883a 	mov	r3,zero
  802974:	19003fcc 	andi	r4,r3,255
  802978:	200895fa 	slli	r4,r4,23
  80297c:	00c02034 	movhi	r3,128
  802980:	18ffffc4 	addi	r3,r3,-1
  802984:	30c6703a 	and	r3,r6,r3
  802988:	10a0002c 	andhi	r2,r2,32768
  80298c:	10c4b03a 	or	r2,r2,r3
  802990:	280a97fa 	slli	r5,r5,31
  802994:	1104b03a 	or	r2,r2,r4
  802998:	00e00034 	movhi	r3,32768
  80299c:	18ffffc4 	addi	r3,r3,-1
  8029a0:	10c4703a 	and	r2,r2,r3
  8029a4:	1144b03a 	or	r2,r2,r5
  8029a8:	f800283a 	ret
  8029ac:	21000217 	ldw	r4,8(r4)
  8029b0:	00bfe084 	movi	r2,-126
  8029b4:	20801b16 	blt	r4,r2,802a24 <__pack_f+0xe0>
  8029b8:	00801fc4 	movi	r2,127
  8029bc:	11001016 	blt	r2,r4,802a00 <__pack_f+0xbc>
  8029c0:	308e703a 	and	r7,r6,r2
  8029c4:	2087883a 	add	r3,r4,r2
  8029c8:	00801004 	movi	r2,64
  8029cc:	38800526 	beq	r7,r2,8029e4 <__pack_f+0xa0>
  8029d0:	31800fc4 	addi	r6,r6,63
  8029d4:	30000716 	blt	r6,zero,8029f4 <__pack_f+0xb0>
  8029d8:	300490ba 	slli	r2,r6,2
  8029dc:	100cd27a 	srli	r6,r2,9
  8029e0:	003fe406 	br	802974 <__pack_f+0x30>
  8029e4:	3080200c 	andi	r2,r6,128
  8029e8:	103ffa26 	beq	r2,zero,8029d4 <__pack_f+0x90>
  8029ec:	31cd883a 	add	r6,r6,r7
  8029f0:	003ff806 	br	8029d4 <__pack_f+0x90>
  8029f4:	300cd07a 	srli	r6,r6,1
  8029f8:	18c00044 	addi	r3,r3,1
  8029fc:	003ff606 	br	8029d8 <__pack_f+0x94>
  802a00:	000d883a 	mov	r6,zero
  802a04:	00ffffc4 	movi	r3,-1
  802a08:	003fda06 	br	802974 <__pack_f+0x30>
  802a0c:	31800434 	orhi	r6,r6,16
  802a10:	00802034 	movhi	r2,128
  802a14:	10bfffc4 	addi	r2,r2,-1
  802a18:	308c703a 	and	r6,r6,r2
  802a1c:	00ffffc4 	movi	r3,-1
  802a20:	003fd406 	br	802974 <__pack_f+0x30>
  802a24:	1109c83a 	sub	r4,r2,r4
  802a28:	00800644 	movi	r2,25
  802a2c:	11001216 	blt	r2,r4,802a78 <__pack_f+0x134>
  802a30:	3904983a 	sll	r2,r7,r4
  802a34:	3106d83a 	srl	r3,r6,r4
  802a38:	10bfffc4 	addi	r2,r2,-1
  802a3c:	3084703a 	and	r2,r6,r2
  802a40:	1004c03a 	cmpne	r2,r2,zero
  802a44:	1886b03a 	or	r3,r3,r2
  802a48:	19001fcc 	andi	r4,r3,127
  802a4c:	00801004 	movi	r2,64
  802a50:	20800c26 	beq	r4,r2,802a84 <__pack_f+0x140>
  802a54:	18c00fc4 	addi	r3,r3,63
  802a58:	00900034 	movhi	r2,16384
  802a5c:	10bfffc4 	addi	r2,r2,-1
  802a60:	180cd1fa 	srli	r6,r3,7
  802a64:	10c7803a 	cmpltu	r3,r2,r3
  802a68:	00802034 	movhi	r2,128
  802a6c:	10bfffc4 	addi	r2,r2,-1
  802a70:	308c703a 	and	r6,r6,r2
  802a74:	003fbf06 	br	802974 <__pack_f+0x30>
  802a78:	0007883a 	mov	r3,zero
  802a7c:	000d883a 	mov	r6,zero
  802a80:	003ff906 	br	802a68 <__pack_f+0x124>
  802a84:	1880200c 	andi	r2,r3,128
  802a88:	10000126 	beq	r2,zero,802a90 <__pack_f+0x14c>
  802a8c:	1907883a 	add	r3,r3,r4
  802a90:	180cd1fa 	srli	r6,r3,7
  802a94:	00900034 	movhi	r2,16384
  802a98:	10bfffc4 	addi	r2,r2,-1
  802a9c:	10c7803a 	cmpltu	r3,r2,r3
  802aa0:	003ff106 	br	802a68 <__pack_f+0x124>

00802aa4 <__unpack_f>:
  802aa4:	21800017 	ldw	r6,0(r4)
  802aa8:	00c02034 	movhi	r3,128
  802aac:	18ffffc4 	addi	r3,r3,-1
  802ab0:	3004d5fa 	srli	r2,r6,23
  802ab4:	3008d7fa 	srli	r4,r6,31
  802ab8:	30ce703a 	and	r7,r6,r3
  802abc:	10c03fcc 	andi	r3,r2,255
  802ac0:	29000115 	stw	r4,4(r5)
  802ac4:	1800131e 	bne	r3,zero,802b14 <__unpack_f+0x70>
  802ac8:	38000f26 	beq	r7,zero,802b08 <__unpack_f+0x64>
  802acc:	380691fa 	slli	r3,r7,7
  802ad0:	01bfe084 	movi	r6,-126
  802ad4:	008000c4 	movi	r2,3
  802ad8:	01100034 	movhi	r4,16384
  802adc:	213fffc4 	addi	r4,r4,-1
  802ae0:	28800015 	stw	r2,0(r5)
  802ae4:	29800215 	stw	r6,8(r5)
  802ae8:	20c00536 	bltu	r4,r3,802b00 <__unpack_f+0x5c>
  802aec:	3005883a 	mov	r2,r6
  802af0:	18c7883a 	add	r3,r3,r3
  802af4:	10bfffc4 	addi	r2,r2,-1
  802af8:	20fffd2e 	bgeu	r4,r3,802af0 <__unpack_f+0x4c>
  802afc:	28800215 	stw	r2,8(r5)
  802b00:	28c00315 	stw	r3,12(r5)
  802b04:	f800283a 	ret
  802b08:	00800084 	movi	r2,2
  802b0c:	28800015 	stw	r2,0(r5)
  802b10:	f800283a 	ret
  802b14:	00803fc4 	movi	r2,255
  802b18:	18800826 	beq	r3,r2,802b3c <__unpack_f+0x98>
  802b1c:	380491fa 	slli	r2,r7,7
  802b20:	18ffe044 	addi	r3,r3,-127
  802b24:	28c00215 	stw	r3,8(r5)
  802b28:	10900034 	orhi	r2,r2,16384
  802b2c:	28800315 	stw	r2,12(r5)
  802b30:	008000c4 	movi	r2,3
  802b34:	28800015 	stw	r2,0(r5)
  802b38:	f800283a 	ret
  802b3c:	3800031e 	bne	r7,zero,802b4c <__unpack_f+0xa8>
  802b40:	00800104 	movi	r2,4
  802b44:	28800015 	stw	r2,0(r5)
  802b48:	f800283a 	ret
  802b4c:	3080042c 	andhi	r2,r6,16
  802b50:	10000426 	beq	r2,zero,802b64 <__unpack_f+0xc0>
  802b54:	00800044 	movi	r2,1
  802b58:	28800015 	stw	r2,0(r5)
  802b5c:	29c00315 	stw	r7,12(r5)
  802b60:	f800283a 	ret
  802b64:	28000015 	stw	zero,0(r5)
  802b68:	003ffc06 	br	802b5c <__unpack_f+0xb8>

00802b6c <__pack_d>:
  802b6c:	20c00017 	ldw	r3,0(r4)
  802b70:	defffd04 	addi	sp,sp,-12
  802b74:	dc000015 	stw	r16,0(sp)
  802b78:	dc800215 	stw	r18,8(sp)
  802b7c:	dc400115 	stw	r17,4(sp)
  802b80:	00800044 	movi	r2,1
  802b84:	22000317 	ldw	r8,12(r4)
  802b88:	001f883a 	mov	r15,zero
  802b8c:	22400417 	ldw	r9,16(r4)
  802b90:	24000117 	ldw	r16,4(r4)
  802b94:	10c0552e 	bgeu	r2,r3,802cec <__pack_d+0x180>
  802b98:	00800104 	movi	r2,4
  802b9c:	18804f26 	beq	r3,r2,802cdc <__pack_d+0x170>
  802ba0:	00800084 	movi	r2,2
  802ba4:	18800226 	beq	r3,r2,802bb0 <__pack_d+0x44>
  802ba8:	4244b03a 	or	r2,r8,r9
  802bac:	10001a1e 	bne	r2,zero,802c18 <__pack_d+0xac>
  802bb0:	000d883a 	mov	r6,zero
  802bb4:	000f883a 	mov	r7,zero
  802bb8:	0011883a 	mov	r8,zero
  802bbc:	00800434 	movhi	r2,16
  802bc0:	10bfffc4 	addi	r2,r2,-1
  802bc4:	301d883a 	mov	r14,r6
  802bc8:	3884703a 	and	r2,r7,r2
  802bcc:	400a953a 	slli	r5,r8,20
  802bd0:	79bffc2c 	andhi	r6,r15,65520
  802bd4:	308cb03a 	or	r6,r6,r2
  802bd8:	00e00434 	movhi	r3,32784
  802bdc:	18ffffc4 	addi	r3,r3,-1
  802be0:	800497fa 	slli	r2,r16,31
  802be4:	30c6703a 	and	r3,r6,r3
  802be8:	1946b03a 	or	r3,r3,r5
  802bec:	01600034 	movhi	r5,32768
  802bf0:	297fffc4 	addi	r5,r5,-1
  802bf4:	194a703a 	and	r5,r3,r5
  802bf8:	288ab03a 	or	r5,r5,r2
  802bfc:	2807883a 	mov	r3,r5
  802c00:	7005883a 	mov	r2,r14
  802c04:	dc800217 	ldw	r18,8(sp)
  802c08:	dc400117 	ldw	r17,4(sp)
  802c0c:	dc000017 	ldw	r16,0(sp)
  802c10:	dec00304 	addi	sp,sp,12
  802c14:	f800283a 	ret
  802c18:	21000217 	ldw	r4,8(r4)
  802c1c:	00bf0084 	movi	r2,-1022
  802c20:	20803f16 	blt	r4,r2,802d20 <__pack_d+0x1b4>
  802c24:	0080ffc4 	movi	r2,1023
  802c28:	11002c16 	blt	r2,r4,802cdc <__pack_d+0x170>
  802c2c:	00803fc4 	movi	r2,255
  802c30:	408c703a 	and	r6,r8,r2
  802c34:	00802004 	movi	r2,128
  802c38:	0007883a 	mov	r3,zero
  802c3c:	000f883a 	mov	r7,zero
  802c40:	2280ffc4 	addi	r10,r4,1023
  802c44:	30801e26 	beq	r6,r2,802cc0 <__pack_d+0x154>
  802c48:	00801fc4 	movi	r2,127
  802c4c:	4089883a 	add	r4,r8,r2
  802c50:	220d803a 	cmpltu	r6,r4,r8
  802c54:	324d883a 	add	r6,r6,r9
  802c58:	2011883a 	mov	r8,r4
  802c5c:	3013883a 	mov	r9,r6
  802c60:	00880034 	movhi	r2,8192
  802c64:	10bfffc4 	addi	r2,r2,-1
  802c68:	12400d36 	bltu	r2,r9,802ca0 <__pack_d+0x134>
  802c6c:	4804963a 	slli	r2,r9,24
  802c70:	400cd23a 	srli	r6,r8,8
  802c74:	480ed23a 	srli	r7,r9,8
  802c78:	013fffc4 	movi	r4,-1
  802c7c:	118cb03a 	or	r6,r2,r6
  802c80:	01400434 	movhi	r5,16
  802c84:	297fffc4 	addi	r5,r5,-1
  802c88:	3104703a 	and	r2,r6,r4
  802c8c:	3946703a 	and	r3,r7,r5
  802c90:	5201ffcc 	andi	r8,r10,2047
  802c94:	100d883a 	mov	r6,r2
  802c98:	180f883a 	mov	r7,r3
  802c9c:	003fc706 	br	802bbc <__pack_d+0x50>
  802ca0:	480897fa 	slli	r4,r9,31
  802ca4:	4004d07a 	srli	r2,r8,1
  802ca8:	4806d07a 	srli	r3,r9,1
  802cac:	52800044 	addi	r10,r10,1
  802cb0:	2084b03a 	or	r2,r4,r2
  802cb4:	1011883a 	mov	r8,r2
  802cb8:	1813883a 	mov	r9,r3
  802cbc:	003feb06 	br	802c6c <__pack_d+0x100>
  802cc0:	383fe11e 	bne	r7,zero,802c48 <__pack_d+0xdc>
  802cc4:	01004004 	movi	r4,256
  802cc8:	4104703a 	and	r2,r8,r4
  802ccc:	10c4b03a 	or	r2,r2,r3
  802cd0:	103fe326 	beq	r2,zero,802c60 <__pack_d+0xf4>
  802cd4:	3005883a 	mov	r2,r6
  802cd8:	003fdc06 	br	802c4c <__pack_d+0xe0>
  802cdc:	000d883a 	mov	r6,zero
  802ce0:	000f883a 	mov	r7,zero
  802ce4:	0201ffc4 	movi	r8,2047
  802ce8:	003fb406 	br	802bbc <__pack_d+0x50>
  802cec:	0005883a 	mov	r2,zero
  802cf0:	00c00234 	movhi	r3,8
  802cf4:	408cb03a 	or	r6,r8,r2
  802cf8:	48ceb03a 	or	r7,r9,r3
  802cfc:	013fffc4 	movi	r4,-1
  802d00:	01400434 	movhi	r5,16
  802d04:	297fffc4 	addi	r5,r5,-1
  802d08:	3104703a 	and	r2,r6,r4
  802d0c:	3946703a 	and	r3,r7,r5
  802d10:	100d883a 	mov	r6,r2
  802d14:	180f883a 	mov	r7,r3
  802d18:	0201ffc4 	movi	r8,2047
  802d1c:	003fa706 	br	802bbc <__pack_d+0x50>
  802d20:	1109c83a 	sub	r4,r2,r4
  802d24:	00800e04 	movi	r2,56
  802d28:	11004316 	blt	r2,r4,802e38 <__pack_d+0x2cc>
  802d2c:	21fff804 	addi	r7,r4,-32
  802d30:	38004516 	blt	r7,zero,802e48 <__pack_d+0x2dc>
  802d34:	49d8d83a 	srl	r12,r9,r7
  802d38:	001b883a 	mov	r13,zero
  802d3c:	0023883a 	mov	r17,zero
  802d40:	01400044 	movi	r5,1
  802d44:	0025883a 	mov	r18,zero
  802d48:	38004716 	blt	r7,zero,802e68 <__pack_d+0x2fc>
  802d4c:	29d6983a 	sll	r11,r5,r7
  802d50:	0015883a 	mov	r10,zero
  802d54:	00bfffc4 	movi	r2,-1
  802d58:	5089883a 	add	r4,r10,r2
  802d5c:	588b883a 	add	r5,r11,r2
  802d60:	228d803a 	cmpltu	r6,r4,r10
  802d64:	314b883a 	add	r5,r6,r5
  802d68:	4104703a 	and	r2,r8,r4
  802d6c:	4946703a 	and	r3,r9,r5
  802d70:	10c4b03a 	or	r2,r2,r3
  802d74:	10000226 	beq	r2,zero,802d80 <__pack_d+0x214>
  802d78:	04400044 	movi	r17,1
  802d7c:	0025883a 	mov	r18,zero
  802d80:	00803fc4 	movi	r2,255
  802d84:	644eb03a 	or	r7,r12,r17
  802d88:	3892703a 	and	r9,r7,r2
  802d8c:	00802004 	movi	r2,128
  802d90:	6c90b03a 	or	r8,r13,r18
  802d94:	0015883a 	mov	r10,zero
  802d98:	48801626 	beq	r9,r2,802df4 <__pack_d+0x288>
  802d9c:	01001fc4 	movi	r4,127
  802da0:	3905883a 	add	r2,r7,r4
  802da4:	11cd803a 	cmpltu	r6,r2,r7
  802da8:	320d883a 	add	r6,r6,r8
  802dac:	100f883a 	mov	r7,r2
  802db0:	00840034 	movhi	r2,4096
  802db4:	10bfffc4 	addi	r2,r2,-1
  802db8:	3011883a 	mov	r8,r6
  802dbc:	0007883a 	mov	r3,zero
  802dc0:	11801b36 	bltu	r2,r6,802e30 <__pack_d+0x2c4>
  802dc4:	4004963a 	slli	r2,r8,24
  802dc8:	3808d23a 	srli	r4,r7,8
  802dcc:	400ad23a 	srli	r5,r8,8
  802dd0:	1813883a 	mov	r9,r3
  802dd4:	1108b03a 	or	r4,r2,r4
  802dd8:	00bfffc4 	movi	r2,-1
  802ddc:	00c00434 	movhi	r3,16
  802de0:	18ffffc4 	addi	r3,r3,-1
  802de4:	208c703a 	and	r6,r4,r2
  802de8:	28ce703a 	and	r7,r5,r3
  802dec:	4a01ffcc 	andi	r8,r9,2047
  802df0:	003f7206 	br	802bbc <__pack_d+0x50>
  802df4:	503fe91e 	bne	r10,zero,802d9c <__pack_d+0x230>
  802df8:	01004004 	movi	r4,256
  802dfc:	3904703a 	and	r2,r7,r4
  802e00:	0007883a 	mov	r3,zero
  802e04:	10c4b03a 	or	r2,r2,r3
  802e08:	10000626 	beq	r2,zero,802e24 <__pack_d+0x2b8>
  802e0c:	3a45883a 	add	r2,r7,r9
  802e10:	11cd803a 	cmpltu	r6,r2,r7
  802e14:	320d883a 	add	r6,r6,r8
  802e18:	100f883a 	mov	r7,r2
  802e1c:	3011883a 	mov	r8,r6
  802e20:	0007883a 	mov	r3,zero
  802e24:	00840034 	movhi	r2,4096
  802e28:	10bfffc4 	addi	r2,r2,-1
  802e2c:	123fe52e 	bgeu	r2,r8,802dc4 <__pack_d+0x258>
  802e30:	00c00044 	movi	r3,1
  802e34:	003fe306 	br	802dc4 <__pack_d+0x258>
  802e38:	0009883a 	mov	r4,zero
  802e3c:	0013883a 	mov	r9,zero
  802e40:	000b883a 	mov	r5,zero
  802e44:	003fe406 	br	802dd8 <__pack_d+0x26c>
  802e48:	4a47883a 	add	r3,r9,r9
  802e4c:	008007c4 	movi	r2,31
  802e50:	1105c83a 	sub	r2,r2,r4
  802e54:	1886983a 	sll	r3,r3,r2
  802e58:	4118d83a 	srl	r12,r8,r4
  802e5c:	491ad83a 	srl	r13,r9,r4
  802e60:	1b18b03a 	or	r12,r3,r12
  802e64:	003fb506 	br	802d3c <__pack_d+0x1d0>
  802e68:	2806d07a 	srli	r3,r5,1
  802e6c:	008007c4 	movi	r2,31
  802e70:	1105c83a 	sub	r2,r2,r4
  802e74:	1896d83a 	srl	r11,r3,r2
  802e78:	2914983a 	sll	r10,r5,r4
  802e7c:	003fb506 	br	802d54 <__pack_d+0x1e8>

00802e80 <__unpack_d>:
  802e80:	20c00117 	ldw	r3,4(r4)
  802e84:	22400017 	ldw	r9,0(r4)
  802e88:	00800434 	movhi	r2,16
  802e8c:	10bfffc4 	addi	r2,r2,-1
  802e90:	1808d53a 	srli	r4,r3,20
  802e94:	180cd7fa 	srli	r6,r3,31
  802e98:	1894703a 	and	r10,r3,r2
  802e9c:	2201ffcc 	andi	r8,r4,2047
  802ea0:	281b883a 	mov	r13,r5
  802ea4:	4817883a 	mov	r11,r9
  802ea8:	29800115 	stw	r6,4(r5)
  802eac:	5019883a 	mov	r12,r10
  802eb0:	40001e1e 	bne	r8,zero,802f2c <__unpack_d+0xac>
  802eb4:	4a84b03a 	or	r2,r9,r10
  802eb8:	10001926 	beq	r2,zero,802f20 <__unpack_d+0xa0>
  802ebc:	4804d63a 	srli	r2,r9,24
  802ec0:	500c923a 	slli	r6,r10,8
  802ec4:	013f0084 	movi	r4,-1022
  802ec8:	00c40034 	movhi	r3,4096
  802ecc:	18ffffc4 	addi	r3,r3,-1
  802ed0:	118cb03a 	or	r6,r2,r6
  802ed4:	008000c4 	movi	r2,3
  802ed8:	480a923a 	slli	r5,r9,8
  802edc:	68800015 	stw	r2,0(r13)
  802ee0:	69000215 	stw	r4,8(r13)
  802ee4:	19800b36 	bltu	r3,r6,802f14 <__unpack_d+0x94>
  802ee8:	200f883a 	mov	r7,r4
  802eec:	1811883a 	mov	r8,r3
  802ef0:	2945883a 	add	r2,r5,r5
  802ef4:	1149803a 	cmpltu	r4,r2,r5
  802ef8:	3187883a 	add	r3,r6,r6
  802efc:	20c9883a 	add	r4,r4,r3
  802f00:	100b883a 	mov	r5,r2
  802f04:	200d883a 	mov	r6,r4
  802f08:	39ffffc4 	addi	r7,r7,-1
  802f0c:	413ff82e 	bgeu	r8,r4,802ef0 <__unpack_d+0x70>
  802f10:	69c00215 	stw	r7,8(r13)
  802f14:	69800415 	stw	r6,16(r13)
  802f18:	69400315 	stw	r5,12(r13)
  802f1c:	f800283a 	ret
  802f20:	00800084 	movi	r2,2
  802f24:	28800015 	stw	r2,0(r5)
  802f28:	f800283a 	ret
  802f2c:	0081ffc4 	movi	r2,2047
  802f30:	40800f26 	beq	r8,r2,802f70 <__unpack_d+0xf0>
  802f34:	480cd63a 	srli	r6,r9,24
  802f38:	5006923a 	slli	r3,r10,8
  802f3c:	4804923a 	slli	r2,r9,8
  802f40:	0009883a 	mov	r4,zero
  802f44:	30c6b03a 	or	r3,r6,r3
  802f48:	01440034 	movhi	r5,4096
  802f4c:	110cb03a 	or	r6,r2,r4
  802f50:	423f0044 	addi	r8,r8,-1023
  802f54:	194eb03a 	or	r7,r3,r5
  802f58:	008000c4 	movi	r2,3
  802f5c:	69c00415 	stw	r7,16(r13)
  802f60:	6a000215 	stw	r8,8(r13)
  802f64:	68800015 	stw	r2,0(r13)
  802f68:	69800315 	stw	r6,12(r13)
  802f6c:	f800283a 	ret
  802f70:	4a84b03a 	or	r2,r9,r10
  802f74:	1000031e 	bne	r2,zero,802f84 <__unpack_d+0x104>
  802f78:	00800104 	movi	r2,4
  802f7c:	28800015 	stw	r2,0(r5)
  802f80:	f800283a 	ret
  802f84:	0009883a 	mov	r4,zero
  802f88:	01400234 	movhi	r5,8
  802f8c:	4904703a 	and	r2,r9,r4
  802f90:	5146703a 	and	r3,r10,r5
  802f94:	10c4b03a 	or	r2,r2,r3
  802f98:	10000526 	beq	r2,zero,802fb0 <__unpack_d+0x130>
  802f9c:	00800044 	movi	r2,1
  802fa0:	68800015 	stw	r2,0(r13)
  802fa4:	6b000415 	stw	r12,16(r13)
  802fa8:	6ac00315 	stw	r11,12(r13)
  802fac:	f800283a 	ret
  802fb0:	68000015 	stw	zero,0(r13)
  802fb4:	003ffb06 	br	802fa4 <__unpack_d+0x124>

00802fb8 <printf>:
  802fb8:	defffb04 	addi	sp,sp,-20
  802fbc:	dfc00115 	stw	ra,4(sp)
  802fc0:	d9400215 	stw	r5,8(sp)
  802fc4:	d9800315 	stw	r6,12(sp)
  802fc8:	d9c00415 	stw	r7,16(sp)
  802fcc:	00802074 	movhi	r2,129
  802fd0:	10a2ff04 	addi	r2,r2,-29700
  802fd4:	11400017 	ldw	r5,0(r2)
  802fd8:	d8800204 	addi	r2,sp,8
  802fdc:	d8800015 	stw	r2,0(sp)
  802fe0:	29c00217 	ldw	r7,8(r5)
  802fe4:	100d883a 	mov	r6,r2
  802fe8:	00802034 	movhi	r2,128
  802fec:	108de404 	addi	r2,r2,14224
  802ff0:	200b883a 	mov	r5,r4
  802ff4:	38800115 	stw	r2,4(r7)
  802ff8:	3809883a 	mov	r4,r7
  802ffc:	080376c0 	call	80376c <__vfprintf_internal>
  803000:	dfc00117 	ldw	ra,4(sp)
  803004:	dec00504 	addi	sp,sp,20
  803008:	f800283a 	ret

0080300c <_printf_r>:
  80300c:	defffc04 	addi	sp,sp,-16
  803010:	dfc00115 	stw	ra,4(sp)
  803014:	d9800215 	stw	r6,8(sp)
  803018:	d9c00315 	stw	r7,12(sp)
  80301c:	22000217 	ldw	r8,8(r4)
  803020:	d8800204 	addi	r2,sp,8
  803024:	d8800015 	stw	r2,0(sp)
  803028:	100f883a 	mov	r7,r2
  80302c:	00802034 	movhi	r2,128
  803030:	108de404 	addi	r2,r2,14224
  803034:	280d883a 	mov	r6,r5
  803038:	40800115 	stw	r2,4(r8)
  80303c:	400b883a 	mov	r5,r8
  803040:	08030d00 	call	8030d0 <___vfprintf_internal_r>
  803044:	dfc00117 	ldw	ra,4(sp)
  803048:	dec00404 	addi	sp,sp,16
  80304c:	f800283a 	ret

00803050 <print_repeat>:
  803050:	defffb04 	addi	sp,sp,-20
  803054:	dc800315 	stw	r18,12(sp)
  803058:	dc400215 	stw	r17,8(sp)
  80305c:	dc000115 	stw	r16,4(sp)
  803060:	dfc00415 	stw	ra,16(sp)
  803064:	2025883a 	mov	r18,r4
  803068:	2823883a 	mov	r17,r5
  80306c:	3821883a 	mov	r16,r7
  803070:	d9800005 	stb	r6,0(sp)
  803074:	9009883a 	mov	r4,r18
  803078:	880b883a 	mov	r5,r17
  80307c:	d80d883a 	mov	r6,sp
  803080:	01c00044 	movi	r7,1
  803084:	04000b0e 	bge	zero,r16,8030b4 <print_repeat+0x64>
  803088:	88c00117 	ldw	r3,4(r17)
  80308c:	843fffc4 	addi	r16,r16,-1
  803090:	183ee83a 	callr	r3
  803094:	103ff726 	beq	r2,zero,803074 <print_repeat+0x24>
  803098:	00bfffc4 	movi	r2,-1
  80309c:	dfc00417 	ldw	ra,16(sp)
  8030a0:	dc800317 	ldw	r18,12(sp)
  8030a4:	dc400217 	ldw	r17,8(sp)
  8030a8:	dc000117 	ldw	r16,4(sp)
  8030ac:	dec00504 	addi	sp,sp,20
  8030b0:	f800283a 	ret
  8030b4:	0005883a 	mov	r2,zero
  8030b8:	dfc00417 	ldw	ra,16(sp)
  8030bc:	dc800317 	ldw	r18,12(sp)
  8030c0:	dc400217 	ldw	r17,8(sp)
  8030c4:	dc000117 	ldw	r16,4(sp)
  8030c8:	dec00504 	addi	sp,sp,20
  8030cc:	f800283a 	ret

008030d0 <___vfprintf_internal_r>:
  8030d0:	deffe304 	addi	sp,sp,-116
  8030d4:	df001b15 	stw	fp,108(sp)
  8030d8:	ddc01a15 	stw	r23,104(sp)
  8030dc:	dd001715 	stw	r20,92(sp)
  8030e0:	dc801515 	stw	r18,84(sp)
  8030e4:	dc001315 	stw	r16,76(sp)
  8030e8:	dfc01c15 	stw	ra,112(sp)
  8030ec:	dd801915 	stw	r22,100(sp)
  8030f0:	dd401815 	stw	r21,96(sp)
  8030f4:	dcc01615 	stw	r19,88(sp)
  8030f8:	dc401415 	stw	r17,80(sp)
  8030fc:	d9001015 	stw	r4,64(sp)
  803100:	2829883a 	mov	r20,r5
  803104:	d9c01115 	stw	r7,68(sp)
  803108:	3025883a 	mov	r18,r6
  80310c:	0021883a 	mov	r16,zero
  803110:	d8000f15 	stw	zero,60(sp)
  803114:	d8000e15 	stw	zero,56(sp)
  803118:	0039883a 	mov	fp,zero
  80311c:	d8000915 	stw	zero,36(sp)
  803120:	d8000d15 	stw	zero,52(sp)
  803124:	d8000c15 	stw	zero,48(sp)
  803128:	d8000b15 	stw	zero,44(sp)
  80312c:	002f883a 	mov	r23,zero
  803130:	91400003 	ldbu	r5,0(r18)
  803134:	01c00044 	movi	r7,1
  803138:	94800044 	addi	r18,r18,1
  80313c:	29003fcc 	andi	r4,r5,255
  803140:	2100201c 	xori	r4,r4,128
  803144:	213fe004 	addi	r4,r4,-128
  803148:	20001526 	beq	r4,zero,8031a0 <___vfprintf_internal_r+0xd0>
  80314c:	81c03526 	beq	r16,r7,803224 <___vfprintf_internal_r+0x154>
  803150:	3c002016 	blt	r7,r16,8031d4 <___vfprintf_internal_r+0x104>
  803154:	803ff61e 	bne	r16,zero,803130 <___vfprintf_internal_r+0x60>
  803158:	00800944 	movi	r2,37
  80315c:	2081501e 	bne	r4,r2,8036a0 <___vfprintf_internal_r+0x5d0>
  803160:	073fffc4 	movi	fp,-1
  803164:	00800284 	movi	r2,10
  803168:	d9c00c15 	stw	r7,48(sp)
  80316c:	d8000f15 	stw	zero,60(sp)
  803170:	d8000e15 	stw	zero,56(sp)
  803174:	df000915 	stw	fp,36(sp)
  803178:	d8800d15 	stw	r2,52(sp)
  80317c:	d8000b15 	stw	zero,44(sp)
  803180:	91400003 	ldbu	r5,0(r18)
  803184:	3821883a 	mov	r16,r7
  803188:	94800044 	addi	r18,r18,1
  80318c:	29003fcc 	andi	r4,r5,255
  803190:	2100201c 	xori	r4,r4,128
  803194:	213fe004 	addi	r4,r4,-128
  803198:	01c00044 	movi	r7,1
  80319c:	203feb1e 	bne	r4,zero,80314c <___vfprintf_internal_r+0x7c>
  8031a0:	b805883a 	mov	r2,r23
  8031a4:	dfc01c17 	ldw	ra,112(sp)
  8031a8:	df001b17 	ldw	fp,108(sp)
  8031ac:	ddc01a17 	ldw	r23,104(sp)
  8031b0:	dd801917 	ldw	r22,100(sp)
  8031b4:	dd401817 	ldw	r21,96(sp)
  8031b8:	dd001717 	ldw	r20,92(sp)
  8031bc:	dcc01617 	ldw	r19,88(sp)
  8031c0:	dc801517 	ldw	r18,84(sp)
  8031c4:	dc401417 	ldw	r17,80(sp)
  8031c8:	dc001317 	ldw	r16,76(sp)
  8031cc:	dec01d04 	addi	sp,sp,116
  8031d0:	f800283a 	ret
  8031d4:	00800084 	movi	r2,2
  8031d8:	80801726 	beq	r16,r2,803238 <___vfprintf_internal_r+0x168>
  8031dc:	008000c4 	movi	r2,3
  8031e0:	80bfd31e 	bne	r16,r2,803130 <___vfprintf_internal_r+0x60>
  8031e4:	2c7ff404 	addi	r17,r5,-48
  8031e8:	88c03fcc 	andi	r3,r17,255
  8031ec:	00800244 	movi	r2,9
  8031f0:	10c02136 	bltu	r2,r3,803278 <___vfprintf_internal_r+0x1a8>
  8031f4:	d8c00917 	ldw	r3,36(sp)
  8031f8:	18012716 	blt	r3,zero,803698 <___vfprintf_internal_r+0x5c8>
  8031fc:	d9000917 	ldw	r4,36(sp)
  803200:	01400284 	movi	r5,10
  803204:	080288c0 	call	80288c <__mulsi3>
  803208:	1007883a 	mov	r3,r2
  80320c:	88803fcc 	andi	r2,r17,255
  803210:	1080201c 	xori	r2,r2,128
  803214:	10bfe004 	addi	r2,r2,-128
  803218:	1887883a 	add	r3,r3,r2
  80321c:	d8c00915 	stw	r3,36(sp)
  803220:	003fc306 	br	803130 <___vfprintf_internal_r+0x60>
  803224:	00800c04 	movi	r2,48
  803228:	2080b326 	beq	r4,r2,8034f8 <___vfprintf_internal_r+0x428>
  80322c:	00800944 	movi	r2,37
  803230:	20812726 	beq	r4,r2,8036d0 <___vfprintf_internal_r+0x600>
  803234:	04000084 	movi	r16,2
  803238:	2c7ff404 	addi	r17,r5,-48
  80323c:	88c03fcc 	andi	r3,r17,255
  803240:	00800244 	movi	r2,9
  803244:	10c00a36 	bltu	r2,r3,803270 <___vfprintf_internal_r+0x1a0>
  803248:	e000b416 	blt	fp,zero,80351c <___vfprintf_internal_r+0x44c>
  80324c:	e009883a 	mov	r4,fp
  803250:	01400284 	movi	r5,10
  803254:	080288c0 	call	80288c <__mulsi3>
  803258:	1007883a 	mov	r3,r2
  80325c:	88803fcc 	andi	r2,r17,255
  803260:	1080201c 	xori	r2,r2,128
  803264:	10bfe004 	addi	r2,r2,-128
  803268:	18b9883a 	add	fp,r3,r2
  80326c:	003fb006 	br	803130 <___vfprintf_internal_r+0x60>
  803270:	00800b84 	movi	r2,46
  803274:	2080a326 	beq	r4,r2,803504 <___vfprintf_internal_r+0x434>
  803278:	00801b04 	movi	r2,108
  80327c:	2080a326 	beq	r4,r2,80350c <___vfprintf_internal_r+0x43c>
  803280:	d8c00917 	ldw	r3,36(sp)
  803284:	1800a716 	blt	r3,zero,803524 <___vfprintf_internal_r+0x454>
  803288:	d8000f15 	stw	zero,60(sp)
  80328c:	28bfea04 	addi	r2,r5,-88
  803290:	10803fcc 	andi	r2,r2,255
  803294:	00c00804 	movi	r3,32
  803298:	18802836 	bltu	r3,r2,80333c <___vfprintf_internal_r+0x26c>
  80329c:	1085883a 	add	r2,r2,r2
  8032a0:	1085883a 	add	r2,r2,r2
  8032a4:	00c02034 	movhi	r3,128
  8032a8:	18ccae04 	addi	r3,r3,12984
  8032ac:	10c5883a 	add	r2,r2,r3
  8032b0:	11000017 	ldw	r4,0(r2)
  8032b4:	2000683a 	jmp	r4
  8032b8:	00803344 	movi	r2,205
  8032bc:	0080333c 	xorhi	r2,zero,204
  8032c0:	0080333c 	xorhi	r2,zero,204
  8032c4:	0080333c 	xorhi	r2,zero,204
  8032c8:	0080333c 	xorhi	r2,zero,204
  8032cc:	0080333c 	xorhi	r2,zero,204
  8032d0:	0080333c 	xorhi	r2,zero,204
  8032d4:	0080333c 	xorhi	r2,zero,204
  8032d8:	0080333c 	xorhi	r2,zero,204
  8032dc:	0080333c 	xorhi	r2,zero,204
  8032e0:	0080333c 	xorhi	r2,zero,204
  8032e4:	00803570 	cmpltui	r2,zero,213
  8032e8:	00803358 	cmpnei	r2,zero,205
  8032ec:	0080333c 	xorhi	r2,zero,204
  8032f0:	0080333c 	xorhi	r2,zero,204
  8032f4:	0080333c 	xorhi	r2,zero,204
  8032f8:	0080333c 	xorhi	r2,zero,204
  8032fc:	00803358 	cmpnei	r2,zero,205
  803300:	0080333c 	xorhi	r2,zero,204
  803304:	0080333c 	xorhi	r2,zero,204
  803308:	0080333c 	xorhi	r2,zero,204
  80330c:	0080333c 	xorhi	r2,zero,204
  803310:	0080333c 	xorhi	r2,zero,204
  803314:	008035d8 	cmpnei	r2,zero,215
  803318:	0080333c 	xorhi	r2,zero,204
  80331c:	0080333c 	xorhi	r2,zero,204
  803320:	0080333c 	xorhi	r2,zero,204
  803324:	008035e8 	cmpgeui	r2,zero,215
  803328:	0080333c 	xorhi	r2,zero,204
  80332c:	008034bc 	xorhi	r2,zero,210
  803330:	0080333c 	xorhi	r2,zero,204
  803334:	0080333c 	xorhi	r2,zero,204
  803338:	008034b4 	movhi	r2,210
  80333c:	0021883a 	mov	r16,zero
  803340:	003f7b06 	br	803130 <___vfprintf_internal_r+0x60>
  803344:	00c00404 	movi	r3,16
  803348:	00800044 	movi	r2,1
  80334c:	d8c00d15 	stw	r3,52(sp)
  803350:	d8000c15 	stw	zero,48(sp)
  803354:	d8800b15 	stw	r2,44(sp)
  803358:	d8c00e17 	ldw	r3,56(sp)
  80335c:	1805003a 	cmpeq	r2,r3,zero
  803360:	10005a1e 	bne	r2,zero,8034cc <___vfprintf_internal_r+0x3fc>
  803364:	d8800c17 	ldw	r2,48(sp)
  803368:	1000781e 	bne	r2,zero,80354c <___vfprintf_internal_r+0x47c>
  80336c:	d8801117 	ldw	r2,68(sp)
  803370:	d8000a15 	stw	zero,40(sp)
  803374:	14400017 	ldw	r17,0(r2)
  803378:	11c00104 	addi	r7,r2,4
  80337c:	d9c01115 	stw	r7,68(sp)
  803380:	88005a26 	beq	r17,zero,8034ec <___vfprintf_internal_r+0x41c>
  803384:	d8c00b17 	ldw	r3,44(sp)
  803388:	dcc00044 	addi	r19,sp,1
  80338c:	05800244 	movi	r22,9
  803390:	182b003a 	cmpeq	r21,r3,zero
  803394:	dcc01215 	stw	r19,72(sp)
  803398:	00000506 	br	8033b0 <___vfprintf_internal_r+0x2e0>
  80339c:	21000c04 	addi	r4,r4,48
  8033a0:	99000005 	stb	r4,0(r19)
  8033a4:	9cc00044 	addi	r19,r19,1
  8033a8:	80000f26 	beq	r16,zero,8033e8 <___vfprintf_internal_r+0x318>
  8033ac:	8023883a 	mov	r17,r16
  8033b0:	d9400d17 	ldw	r5,52(sp)
  8033b4:	8809883a 	mov	r4,r17
  8033b8:	080287c0 	call	80287c <__udivsi3>
  8033bc:	d9000d17 	ldw	r4,52(sp)
  8033c0:	100b883a 	mov	r5,r2
  8033c4:	1021883a 	mov	r16,r2
  8033c8:	080288c0 	call	80288c <__mulsi3>
  8033cc:	8889c83a 	sub	r4,r17,r2
  8033d0:	b13ff20e 	bge	r22,r4,80339c <___vfprintf_internal_r+0x2cc>
  8033d4:	a8009f1e 	bne	r21,zero,803654 <___vfprintf_internal_r+0x584>
  8033d8:	21000dc4 	addi	r4,r4,55
  8033dc:	99000005 	stb	r4,0(r19)
  8033e0:	9cc00044 	addi	r19,r19,1
  8033e4:	803ff11e 	bne	r16,zero,8033ac <___vfprintf_internal_r+0x2dc>
  8033e8:	d8801217 	ldw	r2,72(sp)
  8033ec:	98a3c83a 	sub	r17,r19,r2
  8033f0:	d8c00917 	ldw	r3,36(sp)
  8033f4:	1c4bc83a 	sub	r5,r3,r17
  8033f8:	0140130e 	bge	zero,r5,803448 <___vfprintf_internal_r+0x378>
  8033fc:	d8c00044 	addi	r3,sp,1
  803400:	18800804 	addi	r2,r3,32
  803404:	9880102e 	bgeu	r19,r2,803448 <___vfprintf_internal_r+0x378>
  803408:	00800c04 	movi	r2,48
  80340c:	28ffffc4 	addi	r3,r5,-1
  803410:	98800005 	stb	r2,0(r19)
  803414:	99000044 	addi	r4,r19,1
  803418:	00c0080e 	bge	zero,r3,80343c <___vfprintf_internal_r+0x36c>
  80341c:	d8c00044 	addi	r3,sp,1
  803420:	18800804 	addi	r2,r3,32
  803424:	2080052e 	bgeu	r4,r2,80343c <___vfprintf_internal_r+0x36c>
  803428:	00800c04 	movi	r2,48
  80342c:	20800005 	stb	r2,0(r4)
  803430:	21000044 	addi	r4,r4,1
  803434:	9945883a 	add	r2,r19,r5
  803438:	20bff81e 	bne	r4,r2,80341c <___vfprintf_internal_r+0x34c>
  80343c:	d8801217 	ldw	r2,72(sp)
  803440:	2027883a 	mov	r19,r4
  803444:	20a3c83a 	sub	r17,r4,r2
  803448:	d8c00a17 	ldw	r3,40(sp)
  80344c:	1c45883a 	add	r2,r3,r17
  803450:	e0a1c83a 	sub	r16,fp,r2
  803454:	d8800f17 	ldw	r2,60(sp)
  803458:	10008026 	beq	r2,zero,80365c <___vfprintf_internal_r+0x58c>
  80345c:	1805003a 	cmpeq	r2,r3,zero
  803460:	1000ae26 	beq	r2,zero,80371c <___vfprintf_internal_r+0x64c>
  803464:	0400a516 	blt	zero,r16,8036fc <___vfprintf_internal_r+0x62c>
  803468:	b805883a 	mov	r2,r23
  80346c:	0440950e 	bge	zero,r17,8036c4 <___vfprintf_internal_r+0x5f4>
  803470:	102f883a 	mov	r23,r2
  803474:	1461883a 	add	r16,r2,r17
  803478:	00000206 	br	803484 <___vfprintf_internal_r+0x3b4>
  80347c:	bdc00044 	addi	r23,r23,1
  803480:	85ffae26 	beq	r16,r23,80333c <___vfprintf_internal_r+0x26c>
  803484:	9cffffc4 	addi	r19,r19,-1
  803488:	98800003 	ldbu	r2,0(r19)
  80348c:	a0c00117 	ldw	r3,4(r20)
  803490:	d9001017 	ldw	r4,64(sp)
  803494:	d8800005 	stb	r2,0(sp)
  803498:	a00b883a 	mov	r5,r20
  80349c:	d80d883a 	mov	r6,sp
  8034a0:	01c00044 	movi	r7,1
  8034a4:	183ee83a 	callr	r3
  8034a8:	103ff426 	beq	r2,zero,80347c <___vfprintf_internal_r+0x3ac>
  8034ac:	05ffffc4 	movi	r23,-1
  8034b0:	003f3b06 	br	8031a0 <___vfprintf_internal_r+0xd0>
  8034b4:	00c00404 	movi	r3,16
  8034b8:	d8c00d15 	stw	r3,52(sp)
  8034bc:	d8000c15 	stw	zero,48(sp)
  8034c0:	d8c00e17 	ldw	r3,56(sp)
  8034c4:	1805003a 	cmpeq	r2,r3,zero
  8034c8:	103fa626 	beq	r2,zero,803364 <___vfprintf_internal_r+0x294>
  8034cc:	d8c00c17 	ldw	r3,48(sp)
  8034d0:	1800171e 	bne	r3,zero,803530 <___vfprintf_internal_r+0x460>
  8034d4:	d8c01117 	ldw	r3,68(sp)
  8034d8:	d8000a15 	stw	zero,40(sp)
  8034dc:	1c400017 	ldw	r17,0(r3)
  8034e0:	19c00104 	addi	r7,r3,4
  8034e4:	d9c01115 	stw	r7,68(sp)
  8034e8:	883fa61e 	bne	r17,zero,803384 <___vfprintf_internal_r+0x2b4>
  8034ec:	dcc00044 	addi	r19,sp,1
  8034f0:	dcc01215 	stw	r19,72(sp)
  8034f4:	003fbe06 	br	8033f0 <___vfprintf_internal_r+0x320>
  8034f8:	04000084 	movi	r16,2
  8034fc:	d9c00f15 	stw	r7,60(sp)
  803500:	003f0b06 	br	803130 <___vfprintf_internal_r+0x60>
  803504:	040000c4 	movi	r16,3
  803508:	003f0906 	br	803130 <___vfprintf_internal_r+0x60>
  80350c:	00800044 	movi	r2,1
  803510:	040000c4 	movi	r16,3
  803514:	d8800e15 	stw	r2,56(sp)
  803518:	003f0506 	br	803130 <___vfprintf_internal_r+0x60>
  80351c:	0007883a 	mov	r3,zero
  803520:	003f4e06 	br	80325c <___vfprintf_internal_r+0x18c>
  803524:	00800044 	movi	r2,1
  803528:	d8800915 	stw	r2,36(sp)
  80352c:	003f5706 	br	80328c <___vfprintf_internal_r+0x1bc>
  803530:	d8801117 	ldw	r2,68(sp)
  803534:	14400017 	ldw	r17,0(r2)
  803538:	10800104 	addi	r2,r2,4
  80353c:	d8801115 	stw	r2,68(sp)
  803540:	88000716 	blt	r17,zero,803560 <___vfprintf_internal_r+0x490>
  803544:	d8000a15 	stw	zero,40(sp)
  803548:	003f8d06 	br	803380 <___vfprintf_internal_r+0x2b0>
  80354c:	d8c01117 	ldw	r3,68(sp)
  803550:	1c400017 	ldw	r17,0(r3)
  803554:	18c00104 	addi	r3,r3,4
  803558:	d8c01115 	stw	r3,68(sp)
  80355c:	883ff90e 	bge	r17,zero,803544 <___vfprintf_internal_r+0x474>
  803560:	00800044 	movi	r2,1
  803564:	0463c83a 	sub	r17,zero,r17
  803568:	d8800a15 	stw	r2,40(sp)
  80356c:	003f8406 	br	803380 <___vfprintf_internal_r+0x2b0>
  803570:	04000044 	movi	r16,1
  803574:	8700080e 	bge	r16,fp,803598 <___vfprintf_internal_r+0x4c8>
  803578:	d9001017 	ldw	r4,64(sp)
  80357c:	a00b883a 	mov	r5,r20
  803580:	01800804 	movi	r6,32
  803584:	e1ffffc4 	addi	r7,fp,-1
  803588:	08030500 	call	803050 <print_repeat>
  80358c:	103fc71e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  803590:	e5c5883a 	add	r2,fp,r23
  803594:	15ffffc4 	addi	r23,r2,-1
  803598:	d8c01117 	ldw	r3,68(sp)
  80359c:	d9001017 	ldw	r4,64(sp)
  8035a0:	800f883a 	mov	r7,r16
  8035a4:	18800017 	ldw	r2,0(r3)
  8035a8:	a0c00117 	ldw	r3,4(r20)
  8035ac:	a00b883a 	mov	r5,r20
  8035b0:	d8800005 	stb	r2,0(sp)
  8035b4:	d80d883a 	mov	r6,sp
  8035b8:	183ee83a 	callr	r3
  8035bc:	103fbb1e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  8035c0:	d8801117 	ldw	r2,68(sp)
  8035c4:	bdc00044 	addi	r23,r23,1
  8035c8:	0021883a 	mov	r16,zero
  8035cc:	10800104 	addi	r2,r2,4
  8035d0:	d8801115 	stw	r2,68(sp)
  8035d4:	003ed606 	br	803130 <___vfprintf_internal_r+0x60>
  8035d8:	00800204 	movi	r2,8
  8035dc:	d8800d15 	stw	r2,52(sp)
  8035e0:	d8000c15 	stw	zero,48(sp)
  8035e4:	003fb606 	br	8034c0 <___vfprintf_internal_r+0x3f0>
  8035e8:	d8c01117 	ldw	r3,68(sp)
  8035ec:	1cc00017 	ldw	r19,0(r3)
  8035f0:	9809883a 	mov	r4,r19
  8035f4:	080384c0 	call	80384c <strlen>
  8035f8:	e0a1c83a 	sub	r16,fp,r2
  8035fc:	1023883a 	mov	r17,r2
  803600:	0400070e 	bge	zero,r16,803620 <___vfprintf_internal_r+0x550>
  803604:	d9001017 	ldw	r4,64(sp)
  803608:	a00b883a 	mov	r5,r20
  80360c:	01800804 	movi	r6,32
  803610:	800f883a 	mov	r7,r16
  803614:	08030500 	call	803050 <print_repeat>
  803618:	103fa41e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  80361c:	bc2f883a 	add	r23,r23,r16
  803620:	a0c00117 	ldw	r3,4(r20)
  803624:	d9001017 	ldw	r4,64(sp)
  803628:	980d883a 	mov	r6,r19
  80362c:	a00b883a 	mov	r5,r20
  803630:	880f883a 	mov	r7,r17
  803634:	183ee83a 	callr	r3
  803638:	103f9c1e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  80363c:	d8801117 	ldw	r2,68(sp)
  803640:	bc6f883a 	add	r23,r23,r17
  803644:	0021883a 	mov	r16,zero
  803648:	10800104 	addi	r2,r2,4
  80364c:	d8801115 	stw	r2,68(sp)
  803650:	003eb706 	br	803130 <___vfprintf_internal_r+0x60>
  803654:	210015c4 	addi	r4,r4,87
  803658:	003f5106 	br	8033a0 <___vfprintf_internal_r+0x2d0>
  80365c:	04003b16 	blt	zero,r16,80374c <___vfprintf_internal_r+0x67c>
  803660:	d8c00a17 	ldw	r3,40(sp)
  803664:	1805003a 	cmpeq	r2,r3,zero
  803668:	103f7f1e 	bne	r2,zero,803468 <___vfprintf_internal_r+0x398>
  80366c:	a0c00117 	ldw	r3,4(r20)
  803670:	d9001017 	ldw	r4,64(sp)
  803674:	00800b44 	movi	r2,45
  803678:	d8800005 	stb	r2,0(sp)
  80367c:	a00b883a 	mov	r5,r20
  803680:	d80d883a 	mov	r6,sp
  803684:	01c00044 	movi	r7,1
  803688:	183ee83a 	callr	r3
  80368c:	103f871e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  803690:	b8800044 	addi	r2,r23,1
  803694:	003f7506 	br	80346c <___vfprintf_internal_r+0x39c>
  803698:	0007883a 	mov	r3,zero
  80369c:	003edb06 	br	80320c <___vfprintf_internal_r+0x13c>
  8036a0:	a0c00117 	ldw	r3,4(r20)
  8036a4:	d9001017 	ldw	r4,64(sp)
  8036a8:	d9400005 	stb	r5,0(sp)
  8036ac:	d80d883a 	mov	r6,sp
  8036b0:	a00b883a 	mov	r5,r20
  8036b4:	183ee83a 	callr	r3
  8036b8:	103f7c1e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  8036bc:	bdc00044 	addi	r23,r23,1
  8036c0:	003e9b06 	br	803130 <___vfprintf_internal_r+0x60>
  8036c4:	102f883a 	mov	r23,r2
  8036c8:	0021883a 	mov	r16,zero
  8036cc:	003e9806 	br	803130 <___vfprintf_internal_r+0x60>
  8036d0:	a0c00117 	ldw	r3,4(r20)
  8036d4:	d9000005 	stb	r4,0(sp)
  8036d8:	d9001017 	ldw	r4,64(sp)
  8036dc:	a00b883a 	mov	r5,r20
  8036e0:	d80d883a 	mov	r6,sp
  8036e4:	800f883a 	mov	r7,r16
  8036e8:	183ee83a 	callr	r3
  8036ec:	103f6f1e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  8036f0:	bc2f883a 	add	r23,r23,r16
  8036f4:	0021883a 	mov	r16,zero
  8036f8:	003e8d06 	br	803130 <___vfprintf_internal_r+0x60>
  8036fc:	d9001017 	ldw	r4,64(sp)
  803700:	a00b883a 	mov	r5,r20
  803704:	01800c04 	movi	r6,48
  803708:	800f883a 	mov	r7,r16
  80370c:	08030500 	call	803050 <print_repeat>
  803710:	103f661e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  803714:	bc05883a 	add	r2,r23,r16
  803718:	003f5406 	br	80346c <___vfprintf_internal_r+0x39c>
  80371c:	a0c00117 	ldw	r3,4(r20)
  803720:	d9001017 	ldw	r4,64(sp)
  803724:	00800b44 	movi	r2,45
  803728:	d8800005 	stb	r2,0(sp)
  80372c:	a00b883a 	mov	r5,r20
  803730:	d80d883a 	mov	r6,sp
  803734:	01c00044 	movi	r7,1
  803738:	183ee83a 	callr	r3
  80373c:	103f5b1e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  803740:	bdc00044 	addi	r23,r23,1
  803744:	043f480e 	bge	zero,r16,803468 <___vfprintf_internal_r+0x398>
  803748:	003fec06 	br	8036fc <___vfprintf_internal_r+0x62c>
  80374c:	d9001017 	ldw	r4,64(sp)
  803750:	a00b883a 	mov	r5,r20
  803754:	01800804 	movi	r6,32
  803758:	800f883a 	mov	r7,r16
  80375c:	08030500 	call	803050 <print_repeat>
  803760:	103f521e 	bne	r2,zero,8034ac <___vfprintf_internal_r+0x3dc>
  803764:	bc2f883a 	add	r23,r23,r16
  803768:	003fbd06 	br	803660 <___vfprintf_internal_r+0x590>

0080376c <__vfprintf_internal>:
  80376c:	00802074 	movhi	r2,129
  803770:	10a2ff04 	addi	r2,r2,-29700
  803774:	2013883a 	mov	r9,r4
  803778:	11000017 	ldw	r4,0(r2)
  80377c:	2805883a 	mov	r2,r5
  803780:	300f883a 	mov	r7,r6
  803784:	480b883a 	mov	r5,r9
  803788:	100d883a 	mov	r6,r2
  80378c:	08030d01 	jmpi	8030d0 <___vfprintf_internal_r>

00803790 <__sfvwrite_small_dev>:
  803790:	2880000b 	ldhu	r2,0(r5)
  803794:	defffa04 	addi	sp,sp,-24
  803798:	dcc00315 	stw	r19,12(sp)
  80379c:	1080020c 	andi	r2,r2,8
  8037a0:	dc800215 	stw	r18,8(sp)
  8037a4:	dc400115 	stw	r17,4(sp)
  8037a8:	dfc00515 	stw	ra,20(sp)
  8037ac:	dd000415 	stw	r20,16(sp)
  8037b0:	dc000015 	stw	r16,0(sp)
  8037b4:	2825883a 	mov	r18,r5
  8037b8:	2027883a 	mov	r19,r4
  8037bc:	3023883a 	mov	r17,r6
  8037c0:	10002026 	beq	r2,zero,803844 <__sfvwrite_small_dev+0xb4>
  8037c4:	2940008f 	ldh	r5,2(r5)
  8037c8:	28000f16 	blt	r5,zero,803808 <__sfvwrite_small_dev+0x78>
  8037cc:	01c01b0e 	bge	zero,r7,80383c <__sfvwrite_small_dev+0xac>
  8037d0:	3821883a 	mov	r16,r7
  8037d4:	05010004 	movi	r20,1024
  8037d8:	00000206 	br	8037e4 <__sfvwrite_small_dev+0x54>
  8037dc:	0400170e 	bge	zero,r16,80383c <__sfvwrite_small_dev+0xac>
  8037e0:	9140008f 	ldh	r5,2(r18)
  8037e4:	880d883a 	mov	r6,r17
  8037e8:	9809883a 	mov	r4,r19
  8037ec:	800f883a 	mov	r7,r16
  8037f0:	a400010e 	bge	r20,r16,8037f8 <__sfvwrite_small_dev+0x68>
  8037f4:	01c10004 	movi	r7,1024
  8037f8:	080386c0 	call	80386c <_write_r>
  8037fc:	88a3883a 	add	r17,r17,r2
  803800:	80a1c83a 	sub	r16,r16,r2
  803804:	00bff516 	blt	zero,r2,8037dc <__sfvwrite_small_dev+0x4c>
  803808:	9080000b 	ldhu	r2,0(r18)
  80380c:	00ffffc4 	movi	r3,-1
  803810:	10801014 	ori	r2,r2,64
  803814:	9080000d 	sth	r2,0(r18)
  803818:	1805883a 	mov	r2,r3
  80381c:	dfc00517 	ldw	ra,20(sp)
  803820:	dd000417 	ldw	r20,16(sp)
  803824:	dcc00317 	ldw	r19,12(sp)
  803828:	dc800217 	ldw	r18,8(sp)
  80382c:	dc400117 	ldw	r17,4(sp)
  803830:	dc000017 	ldw	r16,0(sp)
  803834:	dec00604 	addi	sp,sp,24
  803838:	f800283a 	ret
  80383c:	0007883a 	mov	r3,zero
  803840:	003ff506 	br	803818 <__sfvwrite_small_dev+0x88>
  803844:	00ffffc4 	movi	r3,-1
  803848:	003ff306 	br	803818 <__sfvwrite_small_dev+0x88>

0080384c <strlen>:
  80384c:	20800007 	ldb	r2,0(r4)
  803850:	10000526 	beq	r2,zero,803868 <strlen+0x1c>
  803854:	2007883a 	mov	r3,r4
  803858:	18c00044 	addi	r3,r3,1
  80385c:	18800007 	ldb	r2,0(r3)
  803860:	103ffd1e 	bne	r2,zero,803858 <strlen+0xc>
  803864:	1905c83a 	sub	r2,r3,r4
  803868:	f800283a 	ret

0080386c <_write_r>:
  80386c:	defffd04 	addi	sp,sp,-12
  803870:	dc000015 	stw	r16,0(sp)
  803874:	04002074 	movhi	r16,129
  803878:	84242304 	addi	r16,r16,-28532
  80387c:	dc400115 	stw	r17,4(sp)
  803880:	80000015 	stw	zero,0(r16)
  803884:	2023883a 	mov	r17,r4
  803888:	2809883a 	mov	r4,r5
  80388c:	300b883a 	mov	r5,r6
  803890:	380d883a 	mov	r6,r7
  803894:	dfc00215 	stw	ra,8(sp)
  803898:	0803d000 	call	803d00 <write>
  80389c:	1007883a 	mov	r3,r2
  8038a0:	00bfffc4 	movi	r2,-1
  8038a4:	18800626 	beq	r3,r2,8038c0 <_write_r+0x54>
  8038a8:	1805883a 	mov	r2,r3
  8038ac:	dfc00217 	ldw	ra,8(sp)
  8038b0:	dc400117 	ldw	r17,4(sp)
  8038b4:	dc000017 	ldw	r16,0(sp)
  8038b8:	dec00304 	addi	sp,sp,12
  8038bc:	f800283a 	ret
  8038c0:	80800017 	ldw	r2,0(r16)
  8038c4:	103ff826 	beq	r2,zero,8038a8 <_write_r+0x3c>
  8038c8:	88800015 	stw	r2,0(r17)
  8038cc:	1805883a 	mov	r2,r3
  8038d0:	dfc00217 	ldw	ra,8(sp)
  8038d4:	dc400117 	ldw	r17,4(sp)
  8038d8:	dc000017 	ldw	r16,0(sp)
  8038dc:	dec00304 	addi	sp,sp,12
  8038e0:	f800283a 	ret

008038e4 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  8038e4:	00802074 	movhi	r2,129
  8038e8:	10a42704 	addi	r2,r2,-28516
  8038ec:	10800017 	ldw	r2,0(r2)
  8038f0:	00ffde84 	movi	r3,-134
  8038f4:	10001d26 	beq	r2,zero,80396c <alt_alarm_start+0x88>
  {
    if (alarm)
  8038f8:	00fffa84 	movi	r3,-22
  8038fc:	20001b26 	beq	r4,zero,80396c <alt_alarm_start+0x88>
    {
      alarm->callback = callback;
  803900:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  803904:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803908:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80390c:	00bfff84 	movi	r2,-2
  803910:	3084703a 	and	r2,r6,r2
  803914:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  803918:	00802074 	movhi	r2,129
  80391c:	10a42804 	addi	r2,r2,-28512
  803920:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  803924:	18800044 	addi	r2,r3,1
  803928:	2885883a 	add	r2,r5,r2
  80392c:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  803930:	10c0032e 	bgeu	r2,r3,803940 <alt_alarm_start+0x5c>
      {
        alarm->rollover = 1;
  803934:	00800044 	movi	r2,1
  803938:	20800405 	stb	r2,16(r4)
  80393c:	00000106 	br	803944 <alt_alarm_start+0x60>
      }
      else
      {
        alarm->rollover = 0;
  803940:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803944:	00802074 	movhi	r2,129
  803948:	10a30104 	addi	r2,r2,-29692
  entry->next     = list->next;
  80394c:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  803950:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
  803954:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  803958:	10c00017 	ldw	r3,0(r2)
  list->next           = entry;
  80395c:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  803960:	19000115 	stw	r4,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803964:	3001703a 	wrctl	status,r6
  803968:	0007883a 	mov	r3,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  80396c:	1805883a 	mov	r2,r3
  803970:	f800283a 	ret

00803974 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  803974:	2900051e 	bne	r5,r4,80398c <alt_load_section+0x18>
  803978:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
  80397c:	20800017 	ldw	r2,0(r4)
  803980:	21000104 	addi	r4,r4,4
  803984:	28800015 	stw	r2,0(r5)
  803988:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80398c:	29bffb1e 	bne	r5,r6,80397c <alt_load_section+0x8>
  803990:	f800283a 	ret

00803994 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  803994:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  803998:	01002074 	movhi	r4,129
  80399c:	21232704 	addi	r4,r4,-29540
  8039a0:	01402074 	movhi	r5,129
  8039a4:	29624204 	addi	r5,r5,-30456
  8039a8:	01802074 	movhi	r6,129
  8039ac:	31a32704 	addi	r6,r6,-29540
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  8039b0:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  8039b4:	08039740 	call	803974 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  8039b8:	01002034 	movhi	r4,128
  8039bc:	21000804 	addi	r4,r4,32
  8039c0:	01402034 	movhi	r5,128
  8039c4:	29400804 	addi	r5,r5,32
  8039c8:	01802034 	movhi	r6,128
  8039cc:	31805104 	addi	r6,r6,324
  8039d0:	08039740 	call	803974 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  8039d4:	01002074 	movhi	r4,129
  8039d8:	21211d04 	addi	r4,r4,-31628
  8039dc:	01402074 	movhi	r5,129
  8039e0:	29611d04 	addi	r5,r5,-31628
  8039e4:	01802074 	movhi	r6,129
  8039e8:	31a24204 	addi	r6,r6,-30456
  8039ec:	08039740 	call	803974 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  8039f0:	08076740 	call	807674 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  8039f4:	dfc00017 	ldw	ra,0(sp)
  8039f8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  8039fc:	08077701 	jmpi	807770 <alt_icache_flush_all>

00803a00 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803a00:	defffd04 	addi	sp,sp,-12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803a04:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  803a08:	dfc00215 	stw	ra,8(sp)
  803a0c:	dc400115 	stw	r17,4(sp)
  803a10:	dc000015 	stw	r16,0(sp)
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803a14:	04400044 	movi	r17,1
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  803a18:	08074580 	call	807458 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  803a1c:	08042880 	call	804288 <OSInit>
  803a20:	8809883a 	mov	r4,r17
  803a24:	0805d040 	call	805d04 <OSSemCreate>
  803a28:	00c02074 	movhi	r3,129
  803a2c:	18e42904 	addi	r3,r3,-28508
  803a30:	8809883a 	mov	r4,r17
  803a34:	18800015 	stw	r2,0(r3)
  803a38:	0805d040 	call	805d04 <OSSemCreate>
  803a3c:	00c02074 	movhi	r3,129
  803a40:	18e42a04 	addi	r3,r3,-28504
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  803a44:	8809883a 	mov	r4,r17
  803a48:	18800015 	stw	r2,0(r3)
  803a4c:	0805d040 	call	805d04 <OSSemCreate>
  803a50:	00c02074 	movhi	r3,129
  803a54:	18e44204 	addi	r3,r3,-28408
  803a58:	18800015 	stw	r2,0(r3)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  803a5c:	08074080 	call	807408 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  803a60:	01002074 	movhi	r4,129
  803a64:	2121e404 	addi	r4,r4,-30832
  803a68:	200b883a 	mov	r5,r4
  803a6c:	200d883a 	mov	r6,r4
  803a70:	08079040 	call	807904 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  803a74:	08076f00 	call	8076f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  803a78:	01002034 	movhi	r4,128
  803a7c:	211dcc04 	addi	r4,r4,30512
  803a80:	0807e800 	call	807e80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  803a84:	d1612b17 	ldw	r5,-31572(gp)
  803a88:	d1a12c17 	ldw	r6,-31568(gp)
  803a8c:	d1212a17 	ldw	r4,-31576(gp)
  803a90:	0801c740 	call	801c74 <main>
  803a94:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
  803a98:	8809883a 	mov	r4,r17
  803a9c:	08075d80 	call	8075d8 <close>
  exit (result);
  803aa0:	8009883a 	mov	r4,r16
  803aa4:	0807e940 	call	807e94 <exit>

00803aa8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  803aa8:	defff804 	addi	sp,sp,-32
  803aac:	dfc00415 	stw	ra,16(sp)
  803ab0:	dc800315 	stw	r18,12(sp)
  803ab4:	dc400215 	stw	r17,8(sp)
  803ab8:	dc000115 	stw	r16,4(sp)
  803abc:	d9400515 	stw	r5,20(sp)
  803ac0:	d9800615 	stw	r6,24(sp)
  803ac4:	d9c00715 	stw	r7,28(sp)
	va_list args;
	va_start(args, fmt);
  803ac8:	d8800504 	addi	r2,sp,20
  803acc:	2025883a 	mov	r18,r4
  803ad0:	d8800015 	stw	r2,0(sp)
  803ad4:	00003d06 	br	803bcc <alt_printf+0x124>
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  803ad8:	00800944 	movi	r2,37
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  803adc:	94800044 	addi	r18,r18,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  803ae0:	18800226 	beq	r3,r2,803aec <alt_printf+0x44>
        {
            alt_putchar(c);
  803ae4:	1809883a 	mov	r4,r3
  803ae8:	00000a06 	br	803b14 <alt_printf+0x6c>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  803aec:	91000007 	ldb	r4,0(r18)
  803af0:	94800044 	addi	r18,r18,1
  803af4:	20003726 	beq	r4,zero,803bd4 <alt_printf+0x12c>
            {
                if (c == '%')
  803af8:	20c00626 	beq	r4,r3,803b14 <alt_printf+0x6c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
  803afc:	008018c4 	movi	r2,99
  803b00:	2080061e 	bne	r4,r2,803b1c <alt_printf+0x74>
                {
                    int v = va_arg(args, int);
  803b04:	d8800017 	ldw	r2,0(sp)
                    alt_putchar(v);
  803b08:	11000017 	ldw	r4,0(r2)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
  803b0c:	10800104 	addi	r2,r2,4
  803b10:	d8800015 	stw	r2,0(sp)
                    alt_putchar(v);
  803b14:	0803bec0 	call	803bec <alt_putchar>
  803b18:	00002c06 	br	803bcc <alt_printf+0x124>
                }
                else if (c == 'x')
  803b1c:	00801e04 	movi	r2,120
  803b20:	20801e1e 	bne	r4,r2,803b9c <alt_printf+0xf4>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  803b24:	d8800017 	ldw	r2,0(sp)
  803b28:	14400017 	ldw	r17,0(r2)
  803b2c:	10800104 	addi	r2,r2,4
  803b30:	d8800015 	stw	r2,0(sp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  803b34:	88000226 	beq	r17,zero,803b40 <alt_printf+0x98>
  803b38:	04000704 	movi	r16,28
  803b3c:	00000306 	br	803b4c <alt_printf+0xa4>
                    {
                        alt_putchar('0');
  803b40:	01000c04 	movi	r4,48
  803b44:	003ff306 	br	803b14 <alt_printf+0x6c>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;
  803b48:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  803b4c:	008003c4 	movi	r2,15
  803b50:	1404983a 	sll	r2,r2,r16
  803b54:	8884703a 	and	r2,r17,r2
  803b58:	103ffb26 	beq	r2,zero,803b48 <alt_printf+0xa0>
  803b5c:	00000b06 	br	803b8c <alt_printf+0xe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  803b60:	8884703a 	and	r2,r17,r2
  803b64:	1406d83a 	srl	r3,r2,r16
                        if (digit <= 9)
  803b68:	00800244 	movi	r2,9
                            c = '0' + digit;
  803b6c:	19000c04 	addi	r4,r3,48

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
  803b70:	10c0012e 	bgeu	r2,r3,803b78 <alt_printf+0xd0>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
  803b74:	190015c4 	addi	r4,r3,87
                        alt_putchar(c);
  803b78:	21003fcc 	andi	r4,r4,255
  803b7c:	2100201c 	xori	r4,r4,128
  803b80:	213fe004 	addi	r4,r4,-128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  803b84:	843fff04 	addi	r16,r16,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
  803b88:	0803bec0 	call	803bec <alt_putchar>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  803b8c:	008003c4 	movi	r2,15
  803b90:	1404983a 	sll	r2,r2,r16
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  803b94:	803ff20e 	bge	r16,zero,803b60 <alt_printf+0xb8>
  803b98:	00000c06 	br	803bcc <alt_printf+0x124>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  803b9c:	00801cc4 	movi	r2,115
  803ba0:	20800a1e 	bne	r4,r2,803bcc <alt_printf+0x124>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  803ba4:	d8800017 	ldw	r2,0(sp)
  803ba8:	14000017 	ldw	r16,0(r2)
  803bac:	10800104 	addi	r2,r2,4
  803bb0:	d8800015 	stw	r2,0(sp)
  803bb4:	00000106 	br	803bbc <alt_printf+0x114>

                    while(*s)
                      alt_putchar(*s++);
  803bb8:	0803bec0 	call	803bec <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  803bbc:	80800007 	ldb	r2,0(r16)
                      alt_putchar(*s++);
  803bc0:	84000044 	addi	r16,r16,1
  803bc4:	1009883a 	mov	r4,r2
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  803bc8:	103ffb1e 	bne	r2,zero,803bb8 <alt_printf+0x110>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  803bcc:	90c00007 	ldb	r3,0(r18)
  803bd0:	183fc11e 	bne	r3,zero,803ad8 <alt_printf+0x30>
            {
                break;
            }
        }
    }
}
  803bd4:	dfc00417 	ldw	ra,16(sp)
  803bd8:	dc800317 	ldw	r18,12(sp)
  803bdc:	dc400217 	ldw	r17,8(sp)
  803be0:	dc000117 	ldw	r16,4(sp)
  803be4:	dec00804 	addi	sp,sp,32
  803be8:	f800283a 	ret

00803bec <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  803bec:	00802074 	movhi	r2,129
  803bf0:	10a2ff04 	addi	r2,r2,-29700
  803bf4:	10800017 	ldw	r2,0(r2)
  803bf8:	11400217 	ldw	r5,8(r2)
  803bfc:	0807ef01 	jmpi	807ef0 <putc>

00803c00 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  803c00:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  803c04:	00bfff84 	movi	r2,-2
  803c08:	2884703a 	and	r2,r5,r2
  803c0c:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  803c10:	20c00017 	ldw	r3,0(r4)
  803c14:	20800117 	ldw	r2,4(r4)
  803c18:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  803c1c:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  803c20:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  803c24:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  803c28:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803c2c:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  803c30:	f800283a 	ret

00803c34 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803c34:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803c38:	d0a12e17 	ldw	r2,-31560(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803c3c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803c40:	d4200717 	ldw	r16,-32740(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803c44:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803c48:	dfc00215 	stw	ra,8(sp)
  803c4c:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803c50:	d0a12e15 	stw	r2,-31560(gp)
  803c54:	00001b06 	br	803cc4 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803c58:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  803c5c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803c60:	10000326 	beq	r2,zero,803c70 <alt_tick+0x3c>
  803c64:	d0a12e17 	ldw	r2,-31560(gp)
  803c68:	1000011e 	bne	r2,zero,803c70 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
  803c6c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  803c70:	d0e12e17 	ldw	r3,-31560(gp)
  803c74:	80800217 	ldw	r2,8(r16)
  803c78:	18801136 	bltu	r3,r2,803cc0 <alt_tick+0x8c>
  803c7c:	80800403 	ldbu	r2,16(r16)
  803c80:	10000f1e 	bne	r2,zero,803cc0 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
  803c84:	81000517 	ldw	r4,20(r16)
  803c88:	80800317 	ldw	r2,12(r16)
  803c8c:	103ee83a 	callr	r2
  803c90:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  803c94:	1000031e 	bne	r2,zero,803ca4 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
  803c98:	8009883a 	mov	r4,r16
  803c9c:	0803c000 	call	803c00 <alt_alarm_stop>
  803ca0:	00000706 	br	803cc0 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
  803ca4:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803ca8:	d0e12e17 	ldw	r3,-31560(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  803cac:	1105883a 	add	r2,r2,r4
  803cb0:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  803cb4:	10c0022e 	bgeu	r2,r3,803cc0 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
  803cb8:	00800044 	movi	r2,1
  803cbc:	80800405 	stb	r2,16(r16)
  803cc0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803cc4:	d0a00704 	addi	r2,gp,-32740
  803cc8:	80bfe31e 	bne	r16,r2,803c58 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  803ccc:	dfc00217 	ldw	ra,8(sp)
  803cd0:	dc400117 	ldw	r17,4(sp)
  803cd4:	dc000017 	ldw	r16,0(sp)
  803cd8:	dec00304 	addi	sp,sp,12

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  803cdc:	080485c1 	jmpi	80485c <OSTimeTick>

00803ce0 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  803ce0:	00802074 	movhi	r2,129
  803ce4:	10a32504 	addi	r2,r2,-29548
  803ce8:	10c00017 	ldw	r3,0(r2)
}
  803cec:	00802074 	movhi	r2,129
  803cf0:	10a42304 	addi	r2,r2,-28532

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  803cf4:	18000126 	beq	r3,zero,803cfc <alt_get_errno+0x1c>
  803cf8:	1800683a 	jmp	r3
}
  803cfc:	f800283a 	ret

00803d00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  803d00:	defffc04 	addi	sp,sp,-16
  803d04:	dc800215 	stw	r18,8(sp)
  803d08:	dc400115 	stw	r17,4(sp)
  803d0c:	dfc00315 	stw	ra,12(sp)
  803d10:	2823883a 	mov	r17,r5
  803d14:	dc000015 	stw	r16,0(sp)
  803d18:	3025883a 	mov	r18,r6
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  803d1c:	01400304 	movi	r5,12
  803d20:	20001916 	blt	r4,zero,803d88 <write+0x88>
  803d24:	080288c0 	call	80288c <__mulsi3>
  803d28:	00c02074 	movhi	r3,129
  803d2c:	18e29a04 	addi	r3,r3,-30104
  803d30:	10c9883a 	add	r4,r2,r3
  
  if (fd)
  803d34:	20001426 	beq	r4,zero,803d88 <write+0x88>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803d38:	20800217 	ldw	r2,8(r4)
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  803d3c:	043fffc4 	movi	r16,-1
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803d40:	108000cc 	andi	r2,r2,3
  803d44:	10000c26 	beq	r2,zero,803d78 <write+0x78>
  803d48:	20800017 	ldw	r2,0(r4)
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803d4c:	880b883a 	mov	r5,r17
  803d50:	900d883a 	mov	r6,r18
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  803d54:	10800617 	ldw	r2,24(r2)
  803d58:	10000726 	beq	r2,zero,803d78 <write+0x78>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  803d5c:	103ee83a 	callr	r2
  803d60:	1021883a 	mov	r16,r2
  803d64:	10000c0e 	bge	r2,zero,803d98 <write+0x98>
      {
        ALT_ERRNO = -rval;
  803d68:	0803ce00 	call	803ce0 <alt_get_errno>
  803d6c:	0407c83a 	sub	r3,zero,r16
  803d70:	043fffc4 	movi	r16,-1
  803d74:	00000206 	br	803d80 <write+0x80>
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  803d78:	0803ce00 	call	803ce0 <alt_get_errno>
  803d7c:	00c00344 	movi	r3,13
  803d80:	10c00015 	stw	r3,0(r2)
  803d84:	00000406 	br	803d98 <write+0x98>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  803d88:	0803ce00 	call	803ce0 <alt_get_errno>
  803d8c:	00c01444 	movi	r3,81
  803d90:	10c00015 	stw	r3,0(r2)
  803d94:	043fffc4 	movi	r16,-1
  }
  return -1;
}
  803d98:	8005883a 	mov	r2,r16
  803d9c:	dfc00317 	ldw	ra,12(sp)
  803da0:	dc800217 	ldw	r18,8(sp)
  803da4:	dc400117 	ldw	r17,4(sp)
  803da8:	dc000017 	ldw	r16,0(sp)
  803dac:	dec00404 	addi	sp,sp,16
  803db0:	f800283a 	ret

00803db4 <__env_lock>:
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  803db4:	f800283a 	ret

00803db8 <__env_unlock>:
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  803db8:	f800283a 	ret

00803dbc <__malloc_lock>:
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  803dbc:	f800283a 	ret

00803dc0 <__malloc_unlock>:
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  803dc0:	f800283a 	ret

00803dc4 <OSVersion>:
*/

INT16U  OSVersion (void)
{
    return (OS_VERSION);
}
  803dc4:	00804784 	movi	r2,286
  803dc8:	f800283a 	ret

00803dcc <OS_Dummy>:
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
}
  803dcc:	f800283a 	ret

00803dd0 <OS_EventTaskWait>:
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  803dd0:	d0a14217 	ldw	r2,-31480(gp)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  803dd4:	10c00d03 	ldbu	r3,52(r2)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  803dd8:	11000715 	stw	r4,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  803ddc:	11800d43 	ldbu	r6,53(r2)
  803de0:	1907883a 	add	r3,r3,r4
  803de4:	18c00204 	addi	r3,r3,8
  803de8:	188000c3 	ldbu	r2,3(r3)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  803dec:	21400283 	ldbu	r5,10(r4)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  803df0:	1184b03a 	or	r2,r2,r6
  803df4:	188000c5 	stb	r2,3(r3)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  803df8:	d0a14217 	ldw	r2,-31480(gp)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  803dfc:	d0e13f44 	addi	r3,gp,-31491


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  803e00:	10800d83 	ldbu	r2,54(r2)
  803e04:	288ab03a 	or	r5,r5,r2
  803e08:	21400285 	stb	r5,10(r4)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  803e0c:	d1614217 	ldw	r5,-31480(gp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  803e10:	29000d03 	ldbu	r4,52(r5)
  803e14:	28800d43 	ldbu	r2,53(r5)
  803e18:	20c9883a 	add	r4,r4,r3
  803e1c:	20c00003 	ldbu	r3,0(r4)
  803e20:	0084303a 	nor	r2,zero,r2
  803e24:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0) {
  803e28:	10c03fcc 	andi	r3,r2,255
  803e2c:	18c0201c 	xori	r3,r3,128
  803e30:	18ffe004 	addi	r3,r3,-128

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  803e34:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
  803e38:	1800051e 	bne	r3,zero,803e50 <OS_EventTaskWait+0x80>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  803e3c:	28800d83 	ldbu	r2,54(r5)
  803e40:	d0e13f03 	ldbu	r3,-31492(gp)
  803e44:	0084303a 	nor	r2,zero,r2
  803e48:	10c4703a 	and	r2,r2,r3
  803e4c:	d0a13f05 	stb	r2,-31492(gp)
  803e50:	f800283a 	ret

00803e54 <OS_EventTaskWaitMulti>:
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  803e54:	d0a14217 	ldw	r2,-31480(gp)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
  803e58:	200f883a 	mov	r7,r4
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  803e5c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
  803e60:	21800017 	ldw	r6,0(r4)
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  803e64:	11000815 	stw	r4,32(r2)
  803e68:	00000d06 	br	803ea0 <OS_EventTaskWaitMulti+0x4c>

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  803e6c:	28c00d03 	ldbu	r3,52(r5)
  803e70:	29400d43 	ldbu	r5,53(r5)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  803e74:	31000283 	ldbu	r4,10(r6)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  803e78:	1987883a 	add	r3,r3,r6
  803e7c:	18c00204 	addi	r3,r3,8
  803e80:	188000c3 	ldbu	r2,3(r3)
  803e84:	1144b03a 	or	r2,r2,r5
  803e88:	188000c5 	stb	r2,3(r3)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  803e8c:	d0a14217 	ldw	r2,-31480(gp)
  803e90:	10800d83 	ldbu	r2,54(r2)
  803e94:	2088b03a 	or	r4,r4,r2
  803e98:	31000285 	stb	r4,10(r6)
        pevents++;
        pevent = *pevents;
  803e9c:	39800017 	ldw	r6,0(r7)
    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
  803ea0:	39c00104 	addi	r7,r7,4
  803ea4:	d1614217 	ldw	r5,-31480(gp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  803ea8:	303ff01e 	bne	r6,zero,803e6c <OS_EventTaskWaitMulti+0x18>
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  803eac:	29000d03 	ldbu	r4,52(r5)
  803eb0:	d0e13f44 	addi	r3,gp,-31491
  803eb4:	28800d43 	ldbu	r2,53(r5)
  803eb8:	20c9883a 	add	r4,r4,r3
  803ebc:	20c00003 	ldbu	r3,0(r4)
  803ec0:	0084303a 	nor	r2,zero,r2
  803ec4:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0) {
  803ec8:	10c03fcc 	andi	r3,r2,255
  803ecc:	18c0201c 	xori	r3,r3,128
  803ed0:	18ffe004 	addi	r3,r3,-128
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  803ed4:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
  803ed8:	1800051e 	bne	r3,zero,803ef0 <OS_EventTaskWaitMulti+0x9c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  803edc:	28800d83 	ldbu	r2,54(r5)
  803ee0:	d0e13f03 	ldbu	r3,-31492(gp)
  803ee4:	0084303a 	nor	r2,zero,r2
  803ee8:	10c4703a 	and	r2,r2,r3
  803eec:	d0a13f05 	stb	r2,-31492(gp)
  803ef0:	f800283a 	ret

00803ef4 <OS_EventTaskRemove>:
{
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  803ef4:	20c00d03 	ldbu	r3,52(r4)
  803ef8:	20800d43 	ldbu	r2,53(r4)
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  803efc:	200d883a 	mov	r6,r4
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  803f00:	1947883a 	add	r3,r3,r5
  803f04:	18c00204 	addi	r3,r3,8
  803f08:	190000c3 	ldbu	r4,3(r3)
  803f0c:	0084303a 	nor	r2,zero,r2
  803f10:	1104703a 	and	r2,r2,r4
    if (pevent->OSEventTbl[y] == 0) {
  803f14:	11003fcc 	andi	r4,r2,255
  803f18:	2100201c 	xori	r4,r4,128
  803f1c:	213fe004 	addi	r4,r4,-128
{
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  803f20:	188000c5 	stb	r2,3(r3)
    if (pevent->OSEventTbl[y] == 0) {
  803f24:	2000051e 	bne	r4,zero,803f3c <OS_EventTaskRemove+0x48>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  803f28:	30800d83 	ldbu	r2,54(r6)
  803f2c:	28c00283 	ldbu	r3,10(r5)
  803f30:	0084303a 	nor	r2,zero,r2
  803f34:	10c4703a 	and	r2,r2,r3
  803f38:	28800285 	stb	r2,10(r5)
  803f3c:	f800283a 	ret

00803f40 <OS_EventTaskRemoveMulti>:
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
  803f40:	20c00d83 	ldbu	r3,54(r4)
    bitx    =  ptcb->OSTCBBitX;
  803f44:	20800d43 	ldbu	r2,53(r4)
  803f48:	22400d03 	ldbu	r9,52(r4)
    pevents =  pevents_multi;
    pevent  = *pevents;
  803f4c:	29000017 	ldw	r4,0(r5)
  803f50:	0090303a 	nor	r8,zero,r2
  803f54:	00ce303a 	nor	r7,zero,r3
  803f58:	00000b06 	br	803f88 <OS_EventTaskRemoveMulti+0x48>
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
  803f5c:	308000c3 	ldbu	r2,3(r6)
  803f60:	4084703a 	and	r2,r8,r2
        if (pevent->OSEventTbl[y] == 0) {
  803f64:	10c03fcc 	andi	r3,r2,255
  803f68:	18c0201c 	xori	r3,r3,128
  803f6c:	18ffe004 	addi	r3,r3,-128
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
  803f70:	308000c5 	stb	r2,3(r6)
        if (pevent->OSEventTbl[y] == 0) {
  803f74:	1800031e 	bne	r3,zero,803f84 <OS_EventTaskRemoveMulti+0x44>
            pevent->OSEventGrp &= ~bity;
  803f78:	20800283 	ldbu	r2,10(r4)
  803f7c:	3884703a 	and	r2,r7,r2
  803f80:	20800285 	stb	r2,10(r4)
        }
        pevents++;
        pevent = *pevents;
  803f84:	29000017 	ldw	r4,0(r5)
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
        pevent->OSEventTbl[y]  &= ~bitx;
  803f88:	4905883a 	add	r2,r9,r4
  803f8c:	11800204 	addi	r6,r2,8
        if (pevent->OSEventTbl[y] == 0) {
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
  803f90:	29400104 	addi	r5,r5,4
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  803f94:	203ff11e 	bne	r4,zero,803f5c <OS_EventTaskRemoveMulti+0x1c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  803f98:	f800283a 	ret

00803f9c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  803f9c:	defffc04 	addi	sp,sp,-16
  803fa0:	dc800215 	stw	r18,8(sp)
  803fa4:	dc400115 	stw	r17,4(sp)
  803fa8:	dc000015 	stw	r16,0(sp)
  803fac:	dfc00315 	stw	ra,12(sp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  803fb0:	20800283 	ldbu	r2,10(r4)
  803fb4:	02402074 	movhi	r9,129
  803fb8:	4a61f084 	addi	r9,r9,-30782
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  803fbc:	2025883a 	mov	r18,r4
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  803fc0:	1245883a 	add	r2,r2,r9
  803fc4:	11000003 	ldbu	r4,0(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  803fc8:	018c303a 	nor	r6,zero,r6
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  803fcc:	22003fcc 	andi	r8,r4,255
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  803fd0:	4485883a 	add	r2,r8,r18
  803fd4:	10c002c3 	ldbu	r3,11(r2)
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  803fd8:	d0a13f44 	addi	r2,gp,-31491
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  803fdc:	200890fa 	slli	r4,r4,3
  803fe0:	1a47883a 	add	r3,r3,r9
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  803fe4:	4091883a 	add	r8,r8,r2
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  803fe8:	18800003 	ldbu	r2,0(r3)
  803fec:	00c02074 	movhi	r3,129
  803ff0:	18f7d304 	addi	r3,r3,-8372
  803ff4:	2089883a 	add	r4,r4,r2
  803ff8:	24403fcc 	andi	r17,r4,255
  803ffc:	8c45883a 	add	r2,r17,r17
  804000:	1085883a 	add	r2,r2,r2
  804004:	10c5883a 	add	r2,r2,r3
  804008:	14000017 	ldw	r16,0(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80400c:	80800c03 	ldbu	r2,48(r16)
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  804010:	81400915 	stw	r5,36(r16)
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  804014:	8009883a 	mov	r4,r16
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  804018:	308c703a 	and	r6,r6,r2
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80401c:	30803fcc 	andi	r2,r6,255
  804020:	1080020c 	andi	r2,r2,8
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  804024:	81c00c45 	stb	r7,49(r16)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  804028:	81800c05 	stb	r6,48(r16)
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80402c:	900b883a 	mov	r5,r18
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  804030:	80000b8d 	sth	zero,46(r16)
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  804034:	1000081e 	bne	r2,zero,804058 <OS_EventTaskRdy+0xbc>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  804038:	81800d83 	ldbu	r6,54(r16)
  80403c:	d0a13f03 	ldbu	r2,-31492(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  804040:	40c00003 	ldbu	r3,0(r8)
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  804044:	1184b03a 	or	r2,r2,r6
  804048:	d0a13f05 	stb	r2,-31492(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80404c:	80800d43 	ldbu	r2,53(r16)
  804050:	1886b03a 	or	r3,r3,r2
  804054:	40c00005 	stb	r3,0(r8)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  804058:	0803ef40 	call	803ef4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80405c:	80800817 	ldw	r2,32(r16)
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  804060:	8009883a 	mov	r4,r16
  804064:	100b883a 	mov	r5,r2
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  804068:	10000226 	beq	r2,zero,804074 <OS_EventTaskRdy+0xd8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80406c:	0803f400 	call	803f40 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  804070:	84800715 	stw	r18,28(r16)
    }
#endif

    return (prio);
}
  804074:	8805883a 	mov	r2,r17
  804078:	dfc00317 	ldw	ra,12(sp)
  80407c:	dc800217 	ldw	r18,8(sp)
  804080:	dc400117 	ldw	r17,4(sp)
  804084:	dc000017 	ldw	r16,0(sp)
  804088:	dec00404 	addi	sp,sp,16
  80408c:	f800283a 	ret

00804090 <OS_EventWaitListInit>:
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  804090:	20000285 	stb	zero,10(r4)
    ptbl               = &pevent->OSEventTbl[0];
  804094:	210002c4 	addi	r4,r4,11

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
        *ptbl++ = 0;
  804098:	20000005 	stb	zero,0(r4)
  80409c:	21000044 	addi	r4,r4,1
  8040a0:	20000045 	stb	zero,1(r4)
  8040a4:	20000005 	stb	zero,0(r4)
    }
}
  8040a8:	f800283a 	ret

008040ac <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  8040ac:	00000206 	br	8040b8 <OS_MemClr+0xc>
    while (size > 0) {
        *pdest++ = (INT8U)0;
  8040b0:	20000005 	stb	zero,0(r4)
  8040b4:	21000044 	addi	r4,r4,1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  8040b8:	28bfffcc 	andi	r2,r5,65535
        *pdest++ = (INT8U)0;
        size--;
  8040bc:	297fffc4 	addi	r5,r5,-1
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  8040c0:	103ffb1e 	bne	r2,zero,8040b0 <OS_MemClr+0x4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  8040c4:	f800283a 	ret

008040c8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  8040c8:	00000406 	br	8040dc <OS_MemCopy+0x14>
    while (size > 0) {
        *pdest++ = *psrc++;
  8040cc:	28800003 	ldbu	r2,0(r5)
  8040d0:	29400044 	addi	r5,r5,1
  8040d4:	20800005 	stb	r2,0(r4)
  8040d8:	21000044 	addi	r4,r4,1
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8040dc:	30bfffcc 	andi	r2,r6,65535
        *pdest++ = *psrc++;
        size--;
  8040e0:	31bfffc4 	addi	r6,r6,-1
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  8040e4:	103ff91e 	bne	r2,zero,8040cc <OS_MemCopy+0x4>
        *pdest++ = *psrc++;
        size--;
    }
}
  8040e8:	f800283a 	ret

008040ec <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  8040ec:	2007883a 	mov	r3,r4
  8040f0:	00000206 	br	8040fc <OS_StrCopy+0x10>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
  8040f4:	18800005 	stb	r2,0(r3)
  8040f8:	18c00044 	addi	r3,r3,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  8040fc:	28800003 	ldbu	r2,0(r5)
        *pdest++ = *psrc++;
  804100:	29400044 	addi	r5,r5,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  804104:	103ffb1e 	bne	r2,zero,8040f4 <OS_StrCopy+0x8>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  804108:	1905c83a 	sub	r2,r3,r4
    return (len);
}
  80410c:	10803fcc 	andi	r2,r2,255
    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  804110:	18000005 	stb	zero,0(r3)
    return (len);
}
  804114:	f800283a 	ret

00804118 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  804118:	2007883a 	mov	r3,r4
  80411c:	00000106 	br	804124 <OS_StrLen+0xc>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
  804120:	18c00044 	addi	r3,r3,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  804124:	18800003 	ldbu	r2,0(r3)
  804128:	103ffd1e 	bne	r2,zero,804120 <OS_StrLen+0x8>
  80412c:	1905c83a 	sub	r2,r3,r4
        psrc++;
        len++;
    }
    return (len);
}
  804130:	10803fcc 	andi	r2,r2,255
  804134:	f800283a 	ret

00804138 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  804138:	defffc04 	addi	sp,sp,-16
  80413c:	dc000215 	stw	r16,8(sp)
  804140:	dfc00315 	stw	ra,12(sp)
  804144:	0021883a 	mov	r16,zero
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
        err = OSTaskStkChk(prio, &stk_data);
  804148:	8009883a 	mov	r4,r16
  80414c:	d80b883a 	mov	r5,sp
  804150:	08067e00 	call	8067e0 <OSTaskStkChk>
  804154:	84000044 	addi	r16,r16,1
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  804158:	00800544 	movi	r2,21
  80415c:	80bffa1e 	bne	r16,r2,804148 <OS_TaskStatStkChk+0x10>
#endif
                }
            }
        }
    }
}
  804160:	dfc00317 	ldw	ra,12(sp)
  804164:	dc000217 	ldw	r16,8(sp)
  804168:	dec00404 	addi	sp,sp,16
  80416c:	f800283a 	ret

00804170 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  804170:	defffe04 	addi	sp,sp,-8
  804174:	dfc00115 	stw	ra,4(sp)
  804178:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80417c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804180:	00bfff84 	movi	r2,-2
  804184:	8084703a 	and	r2,r16,r2
  804188:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80418c:	d0a14103 	ldbu	r2,-31484(gp)
  804190:	10001d1e 	bne	r2,zero,804208 <OS_Sched+0x98>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  804194:	d0a13203 	ldbu	r2,-31544(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  804198:	01402074 	movhi	r5,129
  80419c:	2961f084 	addi	r5,r5,-30782



    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  8041a0:	1000191e 	bne	r2,zero,804208 <OS_Sched+0x98>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  8041a4:	d0a13f03 	ldbu	r2,-31492(gp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  8041a8:	d0e13f44 	addi	r3,gp,-31491

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  8041ac:	d1a136c3 	ldbu	r6,-31525(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  8041b0:	1145883a 	add	r2,r2,r5
  8041b4:	11000003 	ldbu	r4,0(r2)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  8041b8:	20c5883a 	add	r2,r4,r3
  8041bc:	10800003 	ldbu	r2,0(r2)
  8041c0:	200890fa 	slli	r4,r4,3
    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8041c4:	00c02074 	movhi	r3,129
  8041c8:	18f7d304 	addi	r3,r3,-8372
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  8041cc:	1145883a 	add	r2,r2,r5
  8041d0:	10800003 	ldbu	r2,0(r2)
  8041d4:	2089883a 	add	r4,r4,r2

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  8041d8:	21403fcc 	andi	r5,r4,255
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8041dc:	2945883a 	add	r2,r5,r5
  8041e0:	1085883a 	add	r2,r2,r2
  8041e4:	10c5883a 	add	r2,r2,r3
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  8041e8:	d1213685 	stb	r4,-31526(gp)

    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  8041ec:	29800626 	beq	r5,r6,804208 <OS_Sched+0x98>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8041f0:	10c00017 	ldw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  8041f4:	d0a13917 	ldw	r2,-31516(gp)
    OS_ENTER_CRITICAL();
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
            OS_SchedNew();
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  8041f8:	d0e13e15 	stw	r3,-31496(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  8041fc:	10800044 	addi	r2,r2,1
  804200:	d0a13915 	stw	r2,-31516(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  804204:	0807b700 	call	807b70 <OSCtxSw>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804208:	8001703a 	wrctl	status,r16
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80420c:	dfc00117 	ldw	ra,4(sp)
  804210:	dc000017 	ldw	r16,0(sp)
  804214:	dec00204 	addi	sp,sp,8
  804218:	f800283a 	ret

0080421c <OSStart>:
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
  80421c:	d0a13403 	ldbu	r2,-31536(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  804220:	01402074 	movhi	r5,129
  804224:	2961f084 	addi	r5,r5,-30782
*********************************************************************************************************
*/

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
  804228:	1000161e 	bne	r2,zero,804284 <OSStart+0x68>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80422c:	d0a13f03 	ldbu	r2,-31492(gp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  804230:	d0e13f44 	addi	r3,gp,-31491
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  804234:	1145883a 	add	r2,r2,r5
  804238:	11000003 	ldbu	r4,0(r2)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80423c:	20c5883a 	add	r2,r4,r3
  804240:	10800003 	ldbu	r2,0(r2)
  804244:	200890fa 	slli	r4,r4,3
void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  804248:	00c02074 	movhi	r3,129
  80424c:	18f7d304 	addi	r3,r3,-8372
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  804250:	1145883a 	add	r2,r2,r5
  804254:	10800003 	ldbu	r2,0(r2)
  804258:	2089883a 	add	r4,r4,r2
void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80425c:	20803fcc 	andi	r2,r4,255
  804260:	1085883a 	add	r2,r2,r2
  804264:	1085883a 	add	r2,r2,r2
  804268:	10c5883a 	add	r2,r2,r3
  80426c:	10800017 	ldw	r2,0(r2)
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  804270:	d1213685 	stb	r4,-31526(gp)

void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
  804274:	d12136c5 	stb	r4,-31525(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
        OSTCBCur      = OSTCBHighRdy;
  804278:	d0a14215 	stw	r2,-31480(gp)
void  OSStart (void)
{
    if (OSRunning == OS_FALSE) {
        OS_SchedNew();                               /* Find highest priority's task priority number   */
        OSPrioCur     = OSPrioHighRdy;
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80427c:	d0a13e15 	stw	r2,-31496(gp)
        OSTCBCur      = OSTCBHighRdy;
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  804280:	0807bec1 	jmpi	807bec <OSStartHighRdy>
  804284:	f800283a 	ret

00804288 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  804288:	defff704 	addi	sp,sp,-36
  80428c:	dfc00815 	stw	ra,32(sp)
  804290:	dc000615 	stw	r16,24(sp)
  804294:	dc400715 	stw	r17,28(sp)
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  804298:	0807c640 	call	807c64 <OSInitHookBegin>


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0;
  80429c:	d0a13f44 	addi	r2,gp,-31491
  8042a0:	10000085 	stb	zero,2(r2)
  8042a4:	10000045 	stb	zero,1(r2)
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  8042a8:	01002074 	movhi	r4,129
  8042ac:	2136cb04 	addi	r4,r4,-9428
  8042b0:	01410804 	movi	r5,1056
{
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  8042b4:	d0214105 	stb	zero,-31484(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  8042b8:	d0213205 	stb	zero,-31544(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  8042bc:	d0213d45 	stb	zero,-31499(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  8042c0:	d0213405 	stb	zero,-31536(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  8042c4:	d0213915 	stw	zero,-31516(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  8042c8:	d0213515 	stw	zero,-31532(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  8042cc:	d0214715 	stw	zero,-31460(gp)
    OSIdleCtrMax  = 0L;
  8042d0:	d0213b15 	stw	zero,-31508(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  8042d4:	d0214605 	stb	zero,-31464(gp)
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  8042d8:	d0213f05 	stb	zero,-31492(gp)
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
        *prdytbl++ = 0;
  8042dc:	d0213f45 	stb	zero,-31491(gp)
    }

    OSPrioCur     = 0;
  8042e0:	d02136c5 	stb	zero,-31525(gp)
    OSPrioHighRdy = 0;
  8042e4:	d0213685 	stb	zero,-31526(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  8042e8:	d0213e15 	stw	zero,-31496(gp)
    OSTCBCur      = (OS_TCB *)0;
  8042ec:	d0214215 	stw	zero,-31480(gp)
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  8042f0:	08040ac0 	call	8040ac <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  8042f4:	01002074 	movhi	r4,129
  8042f8:	2137d304 	addi	r4,r4,-8372
  8042fc:	01401504 	movi	r5,84
  804300:	08040ac0 	call	8040ac <OS_MemClr>
  804304:	00802074 	movhi	r2,129
  804308:	10b6e104 	addi	r2,r2,-9340
  80430c:	04000fc4 	movi	r16,63
  804310:	10c0f204 	addi	r3,r2,968
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
        ptcb1->OSTCBNext = ptcb2;
  804314:	10bfef15 	stw	r2,-68(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  804318:	143ff805 	stb	r16,-32(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80431c:	103ff845 	stb	zero,-31(r2)
#endif
        ptcb1++;
        ptcb2++;
  804320:	10801604 	addi	r2,r2,88

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  804324:	10fffb1e 	bne	r2,r3,804314 <OSInit+0x8c>
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    OSTCBFreeList           = &OSTCBTbl[0];
  804328:	10fef804 	addi	r3,r2,-1056

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80432c:	10bfea04 	addi	r2,r2,-88
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  804330:	10000e45 	stb	zero,57(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    OSTCBFreeList           = &OSTCBTbl[0];
  804334:	d0e13c15 	stw	r3,-31504(gp)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  804338:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80433c:	14000e05 	stb	r16,56(r2)
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  804340:	01002074 	movhi	r4,129
  804344:	2133fb04 	addi	r4,r4,-12308
  804348:	0142d004 	movi	r5,2880
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80434c:	d0213715 	stw	zero,-31524(gp)
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  804350:	08040ac0 	call	8040ac <OS_MemClr>
  804354:	01002074 	movhi	r4,129
  804358:	21340704 	addi	r4,r4,-12260
  80435c:	800b883a 	mov	r5,r16
  804360:	2082c404 	addi	r2,r4,2832
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  804364:	203ff405 	stb	zero,-48(r4)
        pevent1->OSEventPtr     = pevent2;
  804368:	213ff515 	stw	r4,-44(r4)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80436c:	217ff785 	stb	r5,-34(r4)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  804370:	203ff7c5 	stb	zero,-33(r4)
#endif
        pevent1++;
        pevent2++;
  804374:	21000c04 	addi	r4,r4,48


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  804378:	20bffa1e 	bne	r4,r2,804364 <OSInit+0xdc>
  80437c:	20bff404 	addi	r2,r4,-48
    pevent1->OSEventPtr             = (OS_EVENT *)0;
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  804380:	20fd3004 	addi	r3,r4,-2880
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    pevent1->OSEventPtr             = (OS_EVENT *)0;
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  804384:	11400385 	stb	r5,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  804388:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80438c:	d0e14015 	stw	r3,-31488(gp)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  804390:	203ff405 	stb	zero,-48(r4)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  804394:	10000115 	stw	zero,4(r2)
    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  804398:	0804e480 	call	804e48 <OS_FlagInit>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80439c:	00c02074 	movhi	r3,129
  8043a0:	18f1fb04 	addi	r3,r3,-14356
  8043a4:	1981ff04 	addi	r6,r3,2044
  8043a8:	01c00504 	movi	r7,20
  8043ac:	04008004 	movi	r16,512
  8043b0:	044000c4 	movi	r17,3
  8043b4:	01002034 	movhi	r4,128
  8043b8:	21124d04 	addi	r4,r4,18740
  8043bc:	000b883a 	mov	r5,zero
  8043c0:	00bfffd4 	movui	r2,65535
  8043c4:	d8c00115 	stw	r3,4(sp)
  8043c8:	d8800015 	stw	r2,0(sp)
  8043cc:	dc000215 	stw	r16,8(sp)
  8043d0:	d8000315 	stw	zero,12(sp)
  8043d4:	dc400415 	stw	r17,16(sp)
  8043d8:	08060f80 	call	8060f8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  8043dc:	01000504 	movi	r4,20
  8043e0:	d90d883a 	add	r6,sp,r4
  8043e4:	01402074 	movhi	r5,129
  8043e8:	2961e904 	addi	r5,r5,-30812
  8043ec:	08066000 	call	806600 <OSTaskNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  8043f0:	00c02074 	movhi	r3,129
  8043f4:	18edfb04 	addi	r3,r3,-18452
  8043f8:	1981ff04 	addi	r6,r3,2044
  8043fc:	01c004c4 	movi	r7,19
  804400:	01002034 	movhi	r4,128
  804404:	21125904 	addi	r4,r4,18788
  804408:	000b883a 	mov	r5,zero
  80440c:	00bfff94 	movui	r2,65534
  804410:	d8c00115 	stw	r3,4(sp)
  804414:	d8800015 	stw	r2,0(sp)
  804418:	dc000215 	stw	r16,8(sp)
  80441c:	dc400415 	stw	r17,16(sp)
  804420:	d8000315 	stw	zero,12(sp)
  804424:	08060f80 	call	8060f8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  804428:	010004c4 	movi	r4,19
  80442c:	01402074 	movhi	r5,129
  804430:	2961ed04 	addi	r5,r5,-30796
  804434:	d9800504 	addi	r6,sp,20
  804438:	08066000 	call	806600 <OSTaskNameSet>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
  80443c:	0806aac0 	call	806aac <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  804440:	0807c6c0 	call	807c6c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  804444:	0804cc00 	call	804cc0 <OSDebugInit>
#endif
}
  804448:	dfc00817 	ldw	ra,32(sp)
  80444c:	dc400717 	ldw	r17,28(sp)
  804450:	dc000617 	ldw	r16,24(sp)
  804454:	dec00904 	addi	sp,sp,36
  804458:	f800283a 	ret

0080445c <OSEventNameGet>:
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80445c:	d0a14103 	ldbu	r2,-31484(gp)
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  804460:	defffd04 	addi	sp,sp,-12
  804464:	dc400115 	stw	r17,4(sp)
  804468:	dfc00215 	stw	ra,8(sp)
  80446c:	3023883a 	mov	r17,r6
  804470:	dc000015 	stw	r16,0(sp)
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr  = OS_ERR_NAME_GET_ISR;
  804474:	000f883a 	mov	r7,zero
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  804478:	200d883a 	mov	r6,r4
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80447c:	10000226 	beq	r2,zero,804488 <OSEventNameGet+0x2c>
        *perr  = OS_ERR_NAME_GET_ISR;
  804480:	00800444 	movi	r2,17
  804484:	00000606 	br	8044a0 <OSEventNameGet+0x44>
        return (0);
    }
    switch (pevent->OSEventType) {
  804488:	20800003 	ldbu	r2,0(r4)
  80448c:	00c000c4 	movi	r3,3
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  804490:	000f883a 	mov	r7,zero
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr  = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    switch (pevent->OSEventType) {
  804494:	10bfffc4 	addi	r2,r2,-1
  804498:	1880032e 	bgeu	r3,r2,8044a8 <OSEventNameGet+0x4c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80449c:	00800044 	movi	r2,1
  8044a0:	88800005 	stb	r2,0(r17)
  8044a4:	00000a06 	br	8044d0 <OSEventNameGet+0x74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8044a8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8044ac:	00bfff84 	movi	r2,-2
  8044b0:	8084703a 	and	r2,r16,r2
  8044b4:	1001703a 	wrctl	status,r2
             return (0);
    }
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  8044b8:	2809883a 	mov	r4,r5
  8044bc:	31400384 	addi	r5,r6,14
  8044c0:	08040ec0 	call	8040ec <OS_StrCopy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8044c4:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8044c8:	88000005 	stb	zero,0(r17)
    return (len);
  8044cc:	11c03fcc 	andi	r7,r2,255
}
  8044d0:	3805883a 	mov	r2,r7
  8044d4:	dfc00217 	ldw	ra,8(sp)
  8044d8:	dc400117 	ldw	r17,4(sp)
  8044dc:	dc000017 	ldw	r16,0(sp)
  8044e0:	dec00304 	addi	sp,sp,12
  8044e4:	f800283a 	ret

008044e8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  8044e8:	defff704 	addi	sp,sp,-36
       *perr =  OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  8044ec:	28000015 	stw	zero,0(r5)
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  8044f0:	dd400515 	stw	r21,20(sp)
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
  8044f4:	20800017 	ldw	r2,0(r4)
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  8044f8:	dd400917 	ldw	r21,36(sp)
  8044fc:	dcc00315 	stw	r19,12(sp)
  804500:	dc800215 	stw	r18,8(sp)
  804504:	dc400115 	stw	r17,4(sp)
  804508:	2027883a 	mov	r19,r4
  80450c:	2823883a 	mov	r17,r5
  804510:	3025883a 	mov	r18,r6
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
  804514:	2007883a 	mov	r3,r4
  804518:	014000c4 	movi	r5,3
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80451c:	dfc00815 	stw	ra,32(sp)
  804520:	ddc00715 	stw	r23,28(sp)
  804524:	dd800615 	stw	r22,24(sp)
  804528:	dd000415 	stw	r20,16(sp)
  80452c:	dc000015 	stw	r16,0(sp)
  804530:	00000406 	br	804544 <OSEventPendMulti+0x5c>
   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  804534:	10800003 	ldbu	r2,0(r2)
  804538:	11000126 	beq	r2,r4,804540 <OSEventPendMulti+0x58>
  80453c:	1140831e 	bne	r2,r5,80474c <OSEventPendMulti+0x264>
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
        pevent = *pevents;
  804540:	18800017 	ldw	r2,0(r3)
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  804544:	18c00104 	addi	r3,r3,4
   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  804548:	01000044 	movi	r4,1

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80454c:	103ff91e 	bne	r2,zero,804534 <OSEventPendMulti+0x4c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  804550:	d0a14103 	ldbu	r2,-31484(gp)
  804554:	10000326 	beq	r2,zero,804564 <OSEventPendMulti+0x7c>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  804558:	0007883a 	mov	r3,zero
  80455c:	00800084 	movi	r2,2
  804560:	00000406 	br	804574 <OSEventPendMulti+0x8c>
        return (0);
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  804564:	d0a13203 	ldbu	r2,-31544(gp)
  804568:	10000426 	beq	r2,zero,80457c <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80456c:	0007883a 	mov	r3,zero
  804570:	00800344 	movi	r2,13
  804574:	a8800005 	stb	r2,0(r21)
  804578:	00008406 	br	80478c <OSEventPendMulti+0x2a4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80457c:	002d303a 	rdctl	r22,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804580:	00bfff84 	movi	r2,-2
  804584:	b084703a 	and	r2,r22,r2
  804588:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
  80458c:	9c000017 	ldw	r16,0(r19)
  804590:	980b883a 	mov	r5,r19
  804594:	0011883a 	mov	r8,zero
  804598:	0029883a 	mov	r20,zero
  80459c:	000d883a 	mov	r6,zero
  8045a0:	024000c4 	movi	r9,3
  8045a4:	00002206 	br	804630 <OSEventPendMulti+0x148>
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
  8045a8:	80c00003 	ldbu	r3,0(r16)
  8045ac:	19000e26 	beq	r3,r4,8045e8 <OSEventPendMulti+0x100>
  8045b0:	1a40191e 	bne	r3,r9,804618 <OSEventPendMulti+0x130>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8045b4:	8080020b 	ldhu	r2,8(r16)
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  8045b8:	10ffffc4 	addi	r3,r2,-1
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  8045bc:	10000826 	beq	r2,zero,8045e0 <OSEventPendMulti+0xf8>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  8045c0:	8c000015 	stw	r16,0(r17)
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  8045c4:	90000015 	stw	zero,0(r18)
                      events_rdy_nbr++;
  8045c8:	2011883a 	mov	r8,r4
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  8045cc:	8c400104 	addi	r17,r17,4
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  8045d0:	94800104 	addi	r18,r18,4
                      events_rdy_nbr++;
  8045d4:	a5000044 	addi	r20,r20,1
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  8045d8:	80c0020d 	sth	r3,8(r16)
  8045dc:	00001206 	br	804628 <OSEventPendMulti+0x140>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  8045e0:	31800054 	ori	r6,r6,1
  8045e4:	00001006 	br	804628 <OSEventPendMulti+0x140>
                 break;
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  8045e8:	80800117 	ldw	r2,4(r16)
  8045ec:	10000826 	beq	r2,zero,804610 <OSEventPendMulti+0x128>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  8045f0:	90800015 	stw	r2,0(r18)
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  8045f4:	8c000015 	stw	r16,0(r17)
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;
  8045f8:	1811883a 	mov	r8,r3
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  8045fc:	8c400104 	addi	r17,r17,4

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  804600:	94800104 	addi	r18,r18,4
                     pevent->OSEventPtr  = (void *)0;
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;
  804604:	1d29883a 	add	r20,r3,r20
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
                     pevent->OSEventPtr  = (void *)0;
  804608:	80000115 	stw	zero,4(r16)
  80460c:	00000606 	br	804628 <OSEventPendMulti+0x140>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  804610:	31800094 	ori	r6,r6,2
  804614:	00000406 	br	804628 <OSEventPendMulti+0x140>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804618:	b001703a 	wrctl	status,r22
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
                *perr        =  OS_ERR_EVENT_TYPE;
                 return (events_rdy_nbr);
  80461c:	a0ffffcc 	andi	r3,r20,65535

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  804620:	88000015 	stw	zero,0(r17)
  804624:	00004a06 	br	804750 <OSEventPendMulti+0x268>
                *perr        =  OS_ERR_EVENT_TYPE;
                 return (events_rdy_nbr);
        }
        pevents++;
  804628:	29400104 	addi	r5,r5,4
        pevent = *pevents;
  80462c:	2c000017 	ldw	r16,0(r5)
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
        switch (pevent->OSEventType) {
  804630:	01000044 	movi	r4,1
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  804634:	803fdc1e 	bne	r16,zero,8045a8 <OSEventPendMulti+0xc0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  804638:	40803fcc 	andi	r2,r8,255
  80463c:	202f883a 	mov	r23,r4
  804640:	1100051e 	bne	r2,r4,804658 <OSEventPendMulti+0x170>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  804644:	88000015 	stw	zero,0(r17)
  804648:	b001703a 	wrctl	status,r22
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
  80464c:	a0ffffcc 	andi	r3,r20,65535
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  804650:	a8000005 	stb	zero,0(r21)
  804654:	00004d06 	br	80478c <OSEventPendMulti+0x2a4>
        return (events_rdy_nbr);
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  804658:	d1614217 	ldw	r5,-31480(gp)
  80465c:	00ffe004 	movi	r3,-128
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  804660:	9809883a 	mov	r4,r19
       *perr        =  OS_ERR_NONE;
        return (events_rdy_nbr);
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  804664:	28800c03 	ldbu	r2,48(r5)
  804668:	10c4b03a 	or	r2,r2,r3
  80466c:	1184b03a 	or	r2,r2,r6
  804670:	28800c05 	stb	r2,48(r5)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  804674:	d0a14217 	ldw	r2,-31480(gp)
  804678:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80467c:	d0a14217 	ldw	r2,-31480(gp)
  804680:	11c00b8d 	sth	r7,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  804684:	0803e540 	call	803e54 <OS_EventTaskWaitMulti>
  804688:	b001703a 	wrctl	status,r22

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80468c:	08041700 	call	804170 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804690:	002d303a 	rdctl	r22,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804694:	00bfff84 	movi	r2,-2
  804698:	b084703a 	and	r2,r22,r2
  80469c:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  8046a0:	d1214217 	ldw	r4,-31480(gp)
  8046a4:	20c00c43 	ldbu	r3,49(r4)
  8046a8:	18000226 	beq	r3,zero,8046b4 <OSEventPendMulti+0x1cc>
  8046ac:	00800084 	movi	r2,2
  8046b0:	1880091e 	bne	r3,r2,8046d8 <OSEventPendMulti+0x1f0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  8046b4:	24000717 	ldw	r16,28(r4)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  8046b8:	80000526 	beq	r16,zero,8046d0 <OSEventPendMulti+0x1e8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8046bc:	8c000015 	stw	r16,0(r17)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;
  8046c0:	a5000044 	addi	r20,r20,1
    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  8046c4:	8c400104 	addi	r17,r17,4
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  8046c8:	88000015 	stw	zero,0(r17)
  8046cc:	00000406 	br	8046e0 <OSEventPendMulti+0x1f8>
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  8046d0:	25c00c45 	stb	r23,49(r4)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8046d4:	d1214217 	ldw	r4,-31480(gp)
             }
			 break;

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  8046d8:	980b883a 	mov	r5,r19
  8046dc:	0803f400 	call	803f40 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  8046e0:	d1214217 	ldw	r4,-31480(gp)
  8046e4:	20c00c43 	ldbu	r3,49(r4)
  8046e8:	18000326 	beq	r3,zero,8046f8 <OSEventPendMulti+0x210>
  8046ec:	00800084 	movi	r2,2
  8046f0:	1880191e 	bne	r3,r2,804758 <OSEventPendMulti+0x270>
  8046f4:	00001206 	br	804740 <OSEventPendMulti+0x258>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  8046f8:	80c00003 	ldbu	r3,0(r16)
  8046fc:	18000926 	beq	r3,zero,804724 <OSEventPendMulti+0x23c>
  804700:	00800084 	movi	r2,2
  804704:	10c0042e 	bgeu	r2,r3,804718 <OSEventPendMulti+0x230>
  804708:	008000c4 	movi	r2,3
  80470c:	1880051e 	bne	r3,r2,804724 <OSEventPendMulti+0x23c>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  804710:	90000015 	stw	zero,0(r18)
  804714:	00000806 	br	804738 <OSEventPendMulti+0x250>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  804718:	20800917 	ldw	r2,36(r4)
  80471c:	90800015 	stw	r2,0(r18)
  804720:	00000506 	br	804738 <OSEventPendMulti+0x250>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804724:	b001703a 	wrctl	status,r22
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
                      return (events_rdy_nbr);
  804728:	a0ffffcc 	andi	r3,r20,65535
                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
                     *perr        =  OS_ERR_EVENT_TYPE;
  80472c:	00800044 	movi	r2,1

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  804730:	88000015 	stw	zero,0(r17)
  804734:	003f8f06 	br	804574 <OSEventPendMulti+0x8c>
                     *perr        =  OS_ERR_EVENT_TYPE;
                      return (events_rdy_nbr);
             }
            *perr = OS_ERR_NONE;
  804738:	a8000005 	stb	zero,0(r21)
  80473c:	00000906 	br	804764 <OSEventPendMulti+0x27c>
             break;

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  804740:	00800384 	movi	r2,14
             }
            *perr = OS_ERR_NONE;
             break;

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  804744:	90000015 	stw	zero,0(r18)
  804748:	00000506 	br	804760 <OSEventPendMulti+0x278>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80474c:	0007883a 	mov	r3,zero
  804750:	a9000005 	stb	r4,0(r21)
  804754:	00000d06 	br	80478c <OSEventPendMulti+0x2a4>
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
             break;
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  804758:	90000015 	stw	zero,0(r18)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80475c:	00800284 	movi	r2,10
  804760:	a8800005 	stb	r2,0(r21)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  804764:	d0a14217 	ldw	r2,-31480(gp)
  804768:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80476c:	d0a14217 	ldw	r2,-31480(gp)
  804770:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  804774:	d0a14217 	ldw	r2,-31480(gp)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  804778:	10000915 	stw	zero,36(r2)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80477c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  804780:	10000815 	stw	zero,32(r2)
  804784:	b001703a 	wrctl	status,r22
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  804788:	a0ffffcc 	andi	r3,r20,65535
}
  80478c:	1805883a 	mov	r2,r3
  804790:	dfc00817 	ldw	ra,32(sp)
  804794:	ddc00717 	ldw	r23,28(sp)
  804798:	dd800617 	ldw	r22,24(sp)
  80479c:	dd400517 	ldw	r21,20(sp)
  8047a0:	dd000417 	ldw	r20,16(sp)
  8047a4:	dcc00317 	ldw	r19,12(sp)
  8047a8:	dc800217 	ldw	r18,8(sp)
  8047ac:	dc400117 	ldw	r17,4(sp)
  8047b0:	dc000017 	ldw	r16,0(sp)
  8047b4:	dec00904 	addi	sp,sp,36
  8047b8:	f800283a 	ret

008047bc <OSIntEnter>:
{
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
#endif

    if (OSRunning == OS_TRUE) {
  8047bc:	d0e13403 	ldbu	r3,-31536(gp)
  8047c0:	00800044 	movi	r2,1
  8047c4:	18800b1e 	bne	r3,r2,8047f4 <OSIntEnter+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8047c8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8047cc:	00bfff84 	movi	r2,-2
  8047d0:	2884703a 	and	r2,r5,r2
  8047d4:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        if (OSIntNesting < 255u) {
  8047d8:	d0a14103 	ldbu	r2,-31484(gp)
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  8047dc:	10c9883a 	add	r4,r2,r3
    OS_CPU_SR  cpu_sr = 0;
#endif

    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting < 255u) {
  8047e0:	10803fcc 	andi	r2,r2,255
  8047e4:	00c03fc4 	movi	r3,255
  8047e8:	10c00126 	beq	r2,r3,8047f0 <OSIntEnter+0x34>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  8047ec:	d1214105 	stb	r4,-31484(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8047f0:	2801703a 	wrctl	status,r5
  8047f4:	f800283a 	ret

008047f8 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  8047f8:	defffe04 	addi	sp,sp,-8
    OS_CPU_SR  cpu_sr = 0;
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  8047fc:	01000084 	movi	r4,2
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  804800:	dfc00115 	stw	ra,4(sp)
  804804:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  804808:	08068a80 	call	8068a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80480c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804810:	043fff84 	movi	r16,-2
  804814:	1c04703a 	and	r2,r3,r16
  804818:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80481c:	d0213515 	stw	zero,-31532(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804820:	1801703a 	wrctl	status,r3
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  804824:	01001904 	movi	r4,100
  804828:	08068a80 	call	8068a8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80482c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804830:	2420703a 	and	r16,r4,r16
  804834:	8001703a 	wrctl	status,r16
    OS_ENTER_CRITICAL();
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  804838:	d0e13517 	ldw	r3,-31532(gp)
    OSStatRdy    = OS_TRUE;
  80483c:	00800044 	movi	r2,1
  804840:	d0a14605 	stb	r2,-31464(gp)
    OS_ENTER_CRITICAL();
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    OS_ENTER_CRITICAL();
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  804844:	d0e13b15 	stw	r3,-31508(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804848:	2001703a 	wrctl	status,r4
    OSStatRdy    = OS_TRUE;
    OS_EXIT_CRITICAL();
}
  80484c:	dfc00117 	ldw	ra,4(sp)
  804850:	dc000017 	ldw	r16,0(sp)
  804854:	dec00204 	addi	sp,sp,8
  804858:	f800283a 	ret

0080485c <OSTimeTick>:
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    OSTime++;
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80485c:	d1213403 	ldbu	r4,-31536(gp)
  804860:	00800044 	movi	r2,1
  804864:	2080321e 	bne	r4,r2,804930 <OSTimeTick+0xd4>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  804868:	d0e13803 	ldbu	r3,-31520(gp)
  80486c:	19003026 	beq	r3,r4,804930 <OSTimeTick+0xd4>
  804870:	19002d36 	bltu	r3,r4,804928 <OSTimeTick+0xcc>
  804874:	00800084 	movi	r2,2
  804878:	1880021e 	bne	r3,r2,804884 <OSTimeTick+0x28>
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
                 break;

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80487c:	d1213805 	stb	r4,-31520(gp)
  804880:	00002906 	br	804928 <OSTimeTick+0xcc>
                 break;

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
  804884:	d0213805 	stb	zero,-31520(gp)
  804888:	00002706 	br	804928 <OSTimeTick+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80488c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804890:	00bfff84 	movi	r2,-2
  804894:	3084703a 	and	r2,r6,r2
  804898:	1001703a 	wrctl	status,r2
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80489c:	28800b8b 	ldhu	r2,46(r5)
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  8048a0:	10ffffc4 	addi	r3,r2,-1
  8048a4:	193fffcc 	andi	r4,r3,65535
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  8048a8:	10001926 	beq	r2,zero,804910 <OSTimeTick+0xb4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  8048ac:	28c00b8d 	sth	r3,46(r5)
  8048b0:	2000171e 	bne	r4,zero,804910 <OSTimeTick+0xb4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8048b4:	28800c03 	ldbu	r2,48(r5)
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8048b8:	10c0320c 	andi	r3,r2,200
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8048bc:	10800dcc 	andi	r2,r2,55
  8048c0:	10000426 	beq	r2,zero,8048d4 <OSTimeTick+0x78>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8048c4:	00800044 	movi	r2,1
            OS_ENTER_CRITICAL();
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  8048c8:	28c00c05 	stb	r3,48(r5)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  8048cc:	28800c45 	stb	r2,49(r5)
  8048d0:	00000106 	br	8048d8 <OSTimeTick+0x7c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  8048d4:	28000c45 	stb	zero,49(r5)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  8048d8:	28800c03 	ldbu	r2,48(r5)
  8048dc:	1080020c 	andi	r2,r2,8
  8048e0:	10000b1e 	bne	r2,zero,804910 <OSTimeTick+0xb4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  8048e4:	28c00d83 	ldbu	r3,54(r5)
  8048e8:	d0a13f03 	ldbu	r2,-31492(gp)
  8048ec:	10c4b03a 	or	r2,r2,r3
  8048f0:	d0a13f05 	stb	r2,-31492(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  8048f4:	28c00d03 	ldbu	r3,52(r5)
  8048f8:	d0a13f44 	addi	r2,gp,-31491
  8048fc:	29000d43 	ldbu	r4,53(r5)
  804900:	1887883a 	add	r3,r3,r2
  804904:	18800003 	ldbu	r2,0(r3)
  804908:	1104b03a 	or	r2,r2,r4
  80490c:	18800005 	stb	r2,0(r3)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  804910:	29400517 	ldw	r5,20(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804914:	3001703a 	wrctl	status,r6
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  804918:	28c00c83 	ldbu	r3,50(r5)
  80491c:	00800504 	movi	r2,20
  804920:	18bfda1e 	bne	r3,r2,80488c <OSTimeTick+0x30>
  804924:	f800283a 	ret
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  804928:	d1613717 	ldw	r5,-31524(gp)
  80492c:	003ffa06 	br	804918 <OSTimeTick+0xbc>
  804930:	f800283a 	ret

00804934 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  804934:	deffff04 	addi	sp,sp,-4
  804938:	dfc00015 	stw	ra,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80493c:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804940:	00ffff84 	movi	r3,-2
  804944:	10c6703a 	and	r3,r2,r3
  804948:	1801703a 	wrctl	status,r3


    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtr++;
  80494c:	d0e13517 	ldw	r3,-31532(gp)
  804950:	18c00044 	addi	r3,r3,1
  804954:	d0e13515 	stw	r3,-31532(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80495c:	0807c700 	call	807c70 <OSTaskIdleHook>
  804960:	003ff606 	br	80493c <OS_TaskIdle+0x8>

00804964 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  804964:	deffff04 	addi	sp,sp,-4
  804968:	dfc00015 	stw	ra,0(sp)
  80496c:	00000106 	br	804974 <OS_TaskStat+0x10>



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  804970:	08068a80 	call	8068a8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  804974:	d0a14603 	ldbu	r2,-31464(gp)
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  804978:	01003204 	movi	r4,200
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80497c:	103ffc26 	beq	r2,zero,804970 <OS_TaskStat+0xc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  804980:	d1213b17 	ldw	r4,-31508(gp)
  804984:	01401904 	movi	r5,100
  804988:	080287c0 	call	80287c <__udivsi3>
  80498c:	d0a13b15 	stw	r2,-31508(gp)
    if (OSIdleCtrMax == 0L) {
  804990:	1000031e 	bne	r2,zero,8049a0 <OS_TaskStat+0x3c>
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
  804994:	01003fc4 	movi	r4,255
    while (OSStatRdy == OS_FALSE) {
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    if (OSIdleCtrMax == 0L) {
        OSCPUUsage = 0;
  804998:	d0213d05 	stb	zero,-31500(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80499c:	0805ff00 	call	805ff0 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8049a0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8049a4:	00bfff84 	movi	r2,-2
  8049a8:	1884703a 	and	r2,r3,r2
  8049ac:	1001703a 	wrctl	status,r2
    }
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  8049b0:	d1213517 	ldw	r4,-31532(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  8049b4:	d0213515 	stw	zero,-31532(gp)
        OSCPUUsage = 0;
        (void)OSTaskSuspend(OS_PRIO_SELF);
    }
    for (;;) {
        OS_ENTER_CRITICAL();
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  8049b8:	d1214715 	stw	r4,-31460(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8049bc:	1801703a 	wrctl	status,r3
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  8049c0:	d1613b17 	ldw	r5,-31508(gp)
  8049c4:	080287c0 	call	80287c <__udivsi3>
  8049c8:	00c01904 	movi	r3,100
  8049cc:	1887c83a 	sub	r3,r3,r2
  8049d0:	d0e13d05 	stb	r3,-31500(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  8049d4:	0807c600 	call	807c60 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  8049d8:	08041380 	call	804138 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  8049dc:	01001904 	movi	r4,100
  8049e0:	08068a80 	call	8068a8 <OSTimeDly>
  8049e4:	003fee06 	br	8049a0 <OS_TaskStat+0x3c>

008049e8 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  8049e8:	defffc04 	addi	sp,sp,-16
  8049ec:	da400617 	ldw	r9,24(sp)
  8049f0:	2011883a 	mov	r8,r4
  8049f4:	dfc00315 	stw	ra,12(sp)
  8049f8:	dc800215 	stw	r18,8(sp)
  8049fc:	dc400115 	stw	r17,4(sp)
  804a00:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804a04:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804a08:	04bfff84 	movi	r18,-2
  804a0c:	1c84703a 	and	r2,r3,r18
  804a10:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  804a14:	d4613c17 	ldw	r17,-31504(gp)
    if (ptcb != (OS_TCB *)0) {
  804a18:	88004726 	beq	r17,zero,804b38 <OS_TCBInit+0x150>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  804a1c:	88800517 	ldw	r2,20(r17)
  804a20:	d0a13c15 	stw	r2,-31504(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804a24:	1801703a 	wrctl	status,r3
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  804a28:	24003fcc 	andi	r16,r4,255
  804a2c:	8006d0fa 	srli	r3,r16,3
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  804a30:	208001cc 	andi	r2,r4,7
  804a34:	88800cc5 	stb	r2,51(r17)
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  804a38:	88c00d05 	stb	r3,52(r17)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  804a3c:	19003fcc 	andi	r4,r3,255
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  804a40:	10803fcc 	andi	r2,r2,255
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  804a44:	00c00044 	movi	r3,1
  804a48:	1908983a 	sll	r4,r3,r4
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  804a4c:	1886983a 	sll	r3,r3,r2
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  804a50:	d8800517 	ldw	r2,20(sp)
    OS_ENTER_CRITICAL();
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  804a54:	89400015 	stw	r5,0(r17)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  804a58:	89800215 	stw	r6,8(r17)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  804a5c:	88800115 	stw	r2,4(r17)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  804a60:	d8800417 	ldw	r2,16(sp)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  804a64:	8a40040d 	sth	r9,16(r17)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  804a68:	89c0048d 	sth	r7,18(r17)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  804a6c:	88800315 	stw	r2,12(r17)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  804a70:	00800fc4 	movi	r2,63
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  804a74:	89000d85 	stb	r4,54(r17)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  804a78:	88c00d45 	stb	r3,53(r17)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  804a7c:	88800e05 	stb	r2,56(r17)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  804a80:	8a000c85 	stb	r8,50(r17)
#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif

        OSTCBInitHook(ptcb);
  804a84:	8809883a 	mov	r4,r17
    if (ptcb != (OS_TCB *)0) {
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  804a88:	88000c05 	stb	zero,48(r17)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  804a8c:	88000c45 	stb	zero,49(r17)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  804a90:	88000b8d 	sth	zero,46(r17)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  804a94:	88000dc5 	stb	zero,55(r17)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  804a98:	88000715 	stw	zero,28(r17)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  804a9c:	88000815 	stw	zero,32(r17)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  804aa0:	88000a15 	stw	zero,40(r17)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  804aa4:	88000915 	stw	zero,36(r17)
        ptcb->OSTCBStkUsed     = 0L;
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  804aa8:	88000e45 	stb	zero,57(r17)
#endif

        OSTCBInitHook(ptcb);
  804aac:	0807c740 	call	807c74 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  804ab0:	8809883a 	mov	r4,r17
  804ab4:	0807c540 	call	807c54 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ab8:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804abc:	3484703a 	and	r2,r6,r18
  804ac0:	1001703a 	wrctl	status,r2
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  804ac4:	d0a13d43 	ldbu	r2,-31499(gp)
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
  804ac8:	8421883a 	add	r16,r16,r16
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  804acc:	d0e13717 	ldw	r3,-31524(gp)
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
  804ad0:	8421883a 	add	r16,r16,r16
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  804ad4:	11400044 	addi	r5,r2,1
        OSTCBInitHook(ptcb);

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
  804ad8:	00802074 	movhi	r2,129
  804adc:	10b7d304 	addi	r2,r2,-8372
  804ae0:	80a1883a 	add	r16,r16,r2
  804ae4:	84400015 	stw	r17,0(r16)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  804ae8:	d1213f03 	ldbu	r4,-31492(gp)
        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  804aec:	88000615 	stw	zero,24(r17)

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */

        OS_ENTER_CRITICAL();
        OSTCBPrioTbl[prio] = ptcb;
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  804af0:	88c00515 	stw	r3,20(r17)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
  804af4:	18000126 	beq	r3,zero,804afc <OS_TCBInit+0x114>
            OSTCBList->OSTCBPrev = ptcb;
  804af8:	1c400615 	stw	r17,24(r3)
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  804afc:	88800d83 	ldbu	r2,54(r17)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
        ptcb->OSTCBPrev    = (OS_TCB *)0;
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
  804b00:	d4613715 	stw	r17,-31524(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  804b04:	2084b03a 	or	r2,r4,r2
  804b08:	d0a13f05 	stb	r2,-31492(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  804b0c:	88c00d03 	ldbu	r3,52(r17)
  804b10:	d0a13f44 	addi	r2,gp,-31491
  804b14:	89000d43 	ldbu	r4,53(r17)
  804b18:	1887883a 	add	r3,r3,r2
  804b1c:	18800003 	ldbu	r2,0(r3)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  804b20:	d1613d45 	stb	r5,-31499(gp)
        if (OSTCBList != (OS_TCB *)0) {
            OSTCBList->OSTCBPrev = ptcb;
        }
        OSTCBList               = ptcb;
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  804b24:	1104b03a 	or	r2,r2,r4
  804b28:	18800005 	stb	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804b2c:	3001703a 	wrctl	status,r6
  804b30:	0005883a 	mov	r2,zero
  804b34:	00000206 	br	804b40 <OS_TCBInit+0x158>
  804b38:	1801703a 	wrctl	status,r3
  804b3c:	00801084 	movi	r2,66
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
}
  804b40:	dfc00317 	ldw	ra,12(sp)
  804b44:	dc800217 	ldw	r18,8(sp)
  804b48:	dc400117 	ldw	r17,4(sp)
  804b4c:	dc000017 	ldw	r16,0(sp)
  804b50:	dec00404 	addi	sp,sp,16
  804b54:	f800283a 	ret

00804b58 <OSIntExit>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
  804b58:	d1e13403 	ldbu	r7,-31536(gp)
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  804b5c:	defffe04 	addi	sp,sp,-8
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
  804b60:	00800044 	movi	r2,1
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  804b64:	dfc00115 	stw	ra,4(sp)
  804b68:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSRunning == OS_TRUE) {
  804b6c:	3880281e 	bne	r7,r2,804c10 <OSIntExit+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804b70:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804b74:	00bfff84 	movi	r2,-2
  804b78:	8084703a 	and	r2,r16,r2
  804b7c:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  804b80:	d0a14103 	ldbu	r2,-31484(gp)
            OSIntNesting--;
  804b84:	10ffffc4 	addi	r3,r2,-1
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  804b88:	19003fcc 	andi	r4,r3,255



    if (OSRunning == OS_TRUE) {
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  804b8c:	10000226 	beq	r2,zero,804b98 <OSIntExit+0x40>
            OSIntNesting--;
  804b90:	d0e14105 	stb	r3,-31484(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  804b94:	20001d1e 	bne	r4,zero,804c0c <OSIntExit+0xb4>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  804b98:	d0a13203 	ldbu	r2,-31544(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  804b9c:	01402074 	movhi	r5,129
  804ba0:	2961f084 	addi	r5,r5,-30782
        OS_ENTER_CRITICAL();
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  804ba4:	1000191e 	bne	r2,zero,804c0c <OSIntExit+0xb4>
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  804ba8:	d0a13f03 	ldbu	r2,-31492(gp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  804bac:	d0e13f44 	addi	r3,gp,-31491
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  804bb0:	d1a136c3 	ldbu	r6,-31525(gp)
{
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  804bb4:	1145883a 	add	r2,r2,r5
  804bb8:	11000003 	ldbu	r4,0(r2)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  804bbc:	20c5883a 	add	r2,r4,r3
  804bc0:	10800003 	ldbu	r2,0(r2)
  804bc4:	200890fa 	slli	r4,r4,3
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  804bc8:	00c02074 	movhi	r3,129
  804bcc:	18f7d304 	addi	r3,r3,-8372
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  804bd0:	1145883a 	add	r2,r2,r5
  804bd4:	10800003 	ldbu	r2,0(r2)
  804bd8:	2089883a 	add	r4,r4,r2
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  804bdc:	21403fcc 	andi	r5,r4,255
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  804be0:	2945883a 	add	r2,r5,r5
  804be4:	1085883a 	add	r2,r2,r2
  804be8:	10c5883a 	add	r2,r2,r3
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  804bec:	d1213685 	stb	r4,-31526(gp)
            OSIntNesting--;
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  804bf0:	29800626 	beq	r5,r6,804c0c <OSIntExit+0xb4>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  804bf4:	10c00017 	ldw	r3,0(r2)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  804bf8:	d0a13917 	ldw	r2,-31516(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
                OS_SchedNew();
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  804bfc:	d0e13e15 	stw	r3,-31496(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  804c00:	11c5883a 	add	r2,r2,r7
  804c04:	d0a13915 	stw	r2,-31516(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  804c08:	0807b700 	call	807b70 <OSCtxSw>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c0c:	8001703a 	wrctl	status,r16
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  804c10:	dfc00117 	ldw	ra,4(sp)
  804c14:	dc000017 	ldw	r16,0(sp)
  804c18:	dec00204 	addi	sp,sp,8
  804c1c:	f800283a 	ret

00804c20 <OSEventNameSet>:
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  804c20:	d0a14103 	ldbu	r2,-31484(gp)
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  804c24:	defffd04 	addi	sp,sp,-12
  804c28:	dfc00215 	stw	ra,8(sp)
  804c2c:	dc000115 	stw	r16,4(sp)
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  804c30:	10000226 	beq	r2,zero,804c3c <OSEventNameSet+0x1c>
        *perr = OS_ERR_NAME_SET_ISR;
  804c34:	00800484 	movi	r2,18
  804c38:	00000506 	br	804c50 <OSEventNameSet+0x30>
        return;
    }
    switch (pevent->OSEventType) {
  804c3c:	20800003 	ldbu	r2,0(r4)
  804c40:	00c000c4 	movi	r3,3
  804c44:	10bfffc4 	addi	r2,r2,-1
  804c48:	1880032e 	bgeu	r3,r2,804c58 <OSEventNameSet+0x38>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  804c4c:	00800044 	movi	r2,1
  804c50:	30800005 	stb	r2,0(r6)
  804c54:	00001606 	br	804cb0 <OSEventNameSet+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804c58:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804c5c:	00bfff84 	movi	r2,-2
  804c60:	8084703a 	and	r2,r16,r2
  804c64:	1001703a 	wrctl	status,r2
  804c68:	2807883a 	mov	r3,r5
  804c6c:	00000106 	br	804c74 <OSEventNameSet+0x54>
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
  804c70:	18c00044 	addi	r3,r3,1
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  804c74:	18800003 	ldbu	r2,0(r3)
  804c78:	103ffd1e 	bne	r2,zero,804c70 <OSEventNameSet+0x50>
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  804c7c:	1945c83a 	sub	r2,r3,r5
  804c80:	10803fcc 	andi	r2,r2,255
  804c84:	00c007c4 	movi	r3,31
  804c88:	1880032e 	bgeu	r3,r2,804c98 <OSEventNameSet+0x78>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804c8c:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  804c90:	008002c4 	movi	r2,11
  804c94:	003fee06 	br	804c50 <OSEventNameSet+0x30>
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  804c98:	21000384 	addi	r4,r4,14
  804c9c:	d9800015 	stw	r6,0(sp)
  804ca0:	08040ec0 	call	8040ec <OS_StrCopy>
  804ca4:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804ca8:	d9800017 	ldw	r6,0(sp)
  804cac:	30000005 	stb	zero,0(r6)
}
  804cb0:	dfc00217 	ldw	ra,8(sp)
  804cb4:	dc000117 	ldw	r16,4(sp)
  804cb8:	dec00304 	addi	sp,sp,12
  804cbc:	f800283a 	ret

00804cc0 <OSDebugInit>:
    ptemp = (void *)&OSVersionNbr;

    ptemp = (void *)&OSDataSize;

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  804cc0:	f800283a 	ret

00804cc4 <OS_FlagBlock>:
{
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  804cc4:	02402074 	movhi	r9,129
  804cc8:	4a643c04 	addi	r9,r9,-28432
  804ccc:	48c00017 	ldw	r3,0(r9)
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  804cd0:	da000017 	ldw	r8,0(sp)
    pgrp->OSFlagWaitList = (void *)pnode;

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    if (OSRdyTbl[y] == 0x00) {
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  804cd4:	02802074 	movhi	r10,129
  804cd8:	52a43904 	addi	r10,r10,-28444
{
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  804cdc:	18800c03 	ldbu	r2,48(r3)
  804ce0:	10800814 	ori	r2,r2,32
  804ce4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  804ce8:	48800017 	ldw	r2,0(r9)
  804cec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  804cf0:	48800017 	ldw	r2,0(r9)
  804cf4:	12000b8d 	sth	r8,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  804cf8:	11400a15 	stw	r5,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  804cfc:	29c00485 	stb	r7,18(r5)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  804d00:	48800017 	ldw	r2,0(r9)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  804d04:	2980040d 	sth	r6,16(r5)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  804d08:	28800215 	stw	r2,8(r5)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  804d0c:	20800117 	ldw	r2,4(r4)
    pnode->OSFlagNodePrev     = (void *)0;
  804d10:	28000115 	stw	zero,4(r5)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  804d14:	29000315 	stw	r4,12(r5)
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  804d18:	28800015 	stw	r2,0(r5)
    pnode->OSFlagNodePrev     = (void *)0;
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  804d1c:	20800117 	ldw	r2,4(r4)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  804d20:	10000126 	beq	r2,zero,804d28 <OS_FlagBlock+0x64>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  804d24:	11400115 	stw	r5,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  804d28:	21400115 	stw	r5,4(r4)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  804d2c:	49400017 	ldw	r5,0(r9)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  804d30:	00c02074 	movhi	r3,129
  804d34:	18e43944 	addi	r3,r3,-28443
  804d38:	29000d03 	ldbu	r4,52(r5)
  804d3c:	28800d43 	ldbu	r2,53(r5)
  804d40:	20c9883a 	add	r4,r4,r3
  804d44:	20c00003 	ldbu	r3,0(r4)
  804d48:	0084303a 	nor	r2,zero,r2
  804d4c:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0x00) {
  804d50:	10c03fcc 	andi	r3,r2,255
  804d54:	18c0201c 	xori	r3,r3,128
  804d58:	18ffe004 	addi	r3,r3,-128
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    }
    pgrp->OSFlagWaitList = (void *)pnode;

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  804d5c:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0x00) {
  804d60:	1800051e 	bne	r3,zero,804d78 <OS_FlagBlock+0xb4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  804d64:	28800d83 	ldbu	r2,54(r5)
  804d68:	50c00003 	ldbu	r3,0(r10)
  804d6c:	0084303a 	nor	r2,zero,r2
  804d70:	10c4703a 	and	r2,r2,r3
  804d74:	50800005 	stb	r2,0(r10)
  804d78:	f800283a 	ret

00804d7c <OS_FlagUnlink>:
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  804d7c:	20c00017 	ldw	r3,0(r4)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  804d80:	20800117 	ldw	r2,4(r4)
  804d84:	180b003a 	cmpeq	r5,r3,zero
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  804d88:	1000051e 	bne	r2,zero,804da0 <OS_FlagUnlink+0x24>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  804d8c:	20800317 	ldw	r2,12(r4)
  804d90:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  804d94:	2800051e 	bne	r5,zero,804dac <OS_FlagUnlink+0x30>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  804d98:	18000115 	stw	zero,4(r3)
  804d9c:	00000306 	br	804dac <OS_FlagUnlink+0x30>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  804da0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  804da4:	2800011e 	bne	r5,zero,804dac <OS_FlagUnlink+0x30>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  804da8:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  804dac:	20800217 	ldw	r2,8(r4)
  804db0:	10000a15 	stw	zero,40(r2)
#endif
}
  804db4:	f800283a 	ret

00804db8 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  804db8:	200d883a 	mov	r6,r4
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  804dbc:	21000217 	ldw	r4,8(r4)
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  804dc0:	defffe04 	addi	sp,sp,-8
  804dc4:	dc000015 	stw	r16,0(sp)
  804dc8:	dfc00115 	stw	ra,4(sp)


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  804dcc:	20800c03 	ldbu	r2,48(r4)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  804dd0:	01c02074 	movhi	r7,129
  804dd4:	39e43904 	addi	r7,r7,-28444
    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  804dd8:	0021883a 	mov	r16,zero


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  804ddc:	108037cc 	andi	r2,r2,223
  804de0:	20800c05 	stb	r2,48(r4)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  804de4:	10803fcc 	andi	r2,r2,255
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  804de8:	21400b0d 	sth	r5,44(r4)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  804dec:	20000c45 	stb	zero,49(r4)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    ptcb->OSTCBDly       = 0;
  804df0:	20000b8d 	sth	zero,46(r4)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  804df4:	10000d1e 	bne	r2,zero,804e2c <OS_FlagTaskRdy+0x74>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  804df8:	20c00d83 	ldbu	r3,54(r4)
  804dfc:	38800003 	ldbu	r2,0(r7)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  804e00:	04000044 	movi	r16,1
    ptcb->OSTCBDly       = 0;
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  804e04:	10c4b03a 	or	r2,r2,r3
  804e08:	38800005 	stb	r2,0(r7)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  804e0c:	20c00d03 	ldbu	r3,52(r4)
  804e10:	00802074 	movhi	r2,129
  804e14:	10a43944 	addi	r2,r2,-28443
  804e18:	21000d43 	ldbu	r4,53(r4)
  804e1c:	1887883a 	add	r3,r3,r2
  804e20:	18800003 	ldbu	r2,0(r3)
  804e24:	1104b03a 	or	r2,r2,r4
  804e28:	18800005 	stb	r2,0(r3)
        sched                   = OS_TRUE;
    } else {
        sched                   = OS_FALSE;
    }
    OS_FlagUnlink(pnode);
  804e2c:	3009883a 	mov	r4,r6
  804e30:	0804d7c0 	call	804d7c <OS_FlagUnlink>
  804e34:	80803fcc 	andi	r2,r16,255
    return (sched);
}
  804e38:	dfc00117 	ldw	ra,4(sp)
  804e3c:	dc000017 	ldw	r16,0(sp)
  804e40:	dec00204 	addi	sp,sp,8
  804e44:	f800283a 	ret

00804e48 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  804e48:	deffff04 	addi	sp,sp,-4
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  804e4c:	0140dc04 	movi	r5,880
  804e50:	01002074 	movhi	r4,129
  804e54:	212c4f04 	addi	r4,r4,-20164
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  804e58:	dfc00015 	stw	ra,0(sp)
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  804e5c:	08040ac0 	call	8040ac <OS_MemClr>
  804e60:	01402074 	movhi	r5,129
  804e64:	296c5a04 	addi	r5,r5,-20120
  804e68:	01800fc4 	movi	r6,63
  804e6c:	2880d104 	addi	r2,r5,836
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  804e70:	283ff505 	stb	zero,-44(r5)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  804e74:	297ff615 	stw	r5,-40(r5)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  804e78:	29bff785 	stb	r6,-34(r5)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  804e7c:	283ff7c5 	stb	zero,-33(r5)
#endif
        pgrp1++;
        pgrp2++;
  804e80:	29400b04 	addi	r5,r5,44


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  804e84:	28bffa1e 	bne	r5,r2,804e70 <OS_FlagInit+0x28>
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  804e88:	293f2404 	addi	r4,r5,-880
  804e8c:	00802074 	movhi	r2,129
  804e90:	10a43f04 	addi	r2,r2,-28420


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  804e94:	28fff504 	addi	r3,r5,-44
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  804e98:	11000015 	stw	r4,0(r2)
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    pgrp1->OSFlagWaitList = (void *)0;
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  804e9c:	19800285 	stb	r6,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  804ea0:	180002c5 	stb	zero,11(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  804ea4:	283ff505 	stb	zero,-44(r5)
    pgrp1->OSFlagWaitList = (void *)0;
  804ea8:	18000115 	stw	zero,4(r3)
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
#endif
}
  804eac:	dfc00017 	ldw	ra,0(sp)
  804eb0:	dec00104 	addi	sp,sp,4
  804eb4:	f800283a 	ret

00804eb8 <OSFlagQuery>:
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  804eb8:	20c00003 	ldbu	r3,0(r4)
  804ebc:	00800144 	movi	r2,5
        *perr = OS_ERR_EVENT_TYPE;
  804ec0:	000d883a 	mov	r6,zero
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  804ec4:	18800326 	beq	r3,r2,804ed4 <OSFlagQuery+0x1c>
        *perr = OS_ERR_EVENT_TYPE;
  804ec8:	00800044 	movi	r2,1
  804ecc:	28800005 	stb	r2,0(r5)
  804ed0:	00000806 	br	804ef4 <OSFlagQuery+0x3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804ed4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804ed8:	00ffff84 	movi	r3,-2
  804edc:	10c6703a 	and	r3,r2,r3
  804ee0:	1801703a 	wrctl	status,r3
        return ((OS_FLAGS)0);
    }
    OS_ENTER_CRITICAL();
    flags = pgrp->OSFlagFlags;
  804ee4:	20c0020b 	ldhu	r3,8(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  804ee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  804eec:	28000005 	stb	zero,0(r5)
    return (flags);                               /* Return the current value of the event flags       */
  804ef0:	180d883a 	mov	r6,r3
}
  804ef4:	3005883a 	mov	r2,r6
  804ef8:	f800283a 	ret

00804efc <OSFlagAccept>:
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  804efc:	20c00003 	ldbu	r3,0(r4)
  804f00:	00800144 	movi	r2,5
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  804f04:	3011883a 	mov	r8,r6
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  804f08:	18800426 	beq	r3,r2,804f1c <OSFlagAccept+0x20>
        *perr = OS_ERR_EVENT_TYPE;
  804f0c:	00800044 	movi	r2,1
  804f10:	0007883a 	mov	r3,zero
  804f14:	38800005 	stb	r2,0(r7)
  804f18:	00004b06 	br	805048 <OSFlagAccept+0x14c>
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  804f1c:	00bfe004 	movi	r2,-128
  804f20:	3084703a 	and	r2,r6,r2
  804f24:	10803fcc 	andi	r2,r2,255
  804f28:	1000021e 	bne	r2,zero,804f34 <OSFlagAccept+0x38>
  804f2c:	0015883a 	mov	r10,zero
  804f30:	00000206 	br	804f3c <OSFlagAccept+0x40>
        wait_type &= ~OS_FLAG_CONSUME;
  804f34:	32001fcc 	andi	r8,r6,127
  804f38:	02800044 	movi	r10,1
        consume    = OS_TRUE;
    } else {
        consume    = OS_FALSE;
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  804f3c:	38000005 	stb	zero,0(r7)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  804f40:	0017303a 	rdctl	r11,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  804f44:	00bfff84 	movi	r2,-2
  804f48:	5884703a 	and	r2,r11,r2
  804f4c:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (wait_type) {
  804f50:	41803fcc 	andi	r6,r8,255
  804f54:	02400044 	movi	r9,1
  804f58:	32402526 	beq	r6,r9,804ff0 <OSFlagAccept+0xf4>
  804f5c:	32401936 	bltu	r6,r9,804fc4 <OSFlagAccept+0xc8>
  804f60:	00800084 	movi	r2,2
  804f64:	30800326 	beq	r6,r2,804f74 <OSFlagAccept+0x78>
  804f68:	008000c4 	movi	r2,3
  804f6c:	3080311e 	bne	r6,r2,805034 <OSFlagAccept+0x138>
  804f70:	00000a06 	br	804f9c <OSFlagAccept+0xa0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  804f74:	2180020b 	ldhu	r6,8(r4)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  804f78:	28ffffcc 	andi	r3,r5,65535
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  804f7c:	314a703a 	and	r5,r6,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  804f80:	28bfffcc 	andi	r2,r5,65535
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  804f84:	2811883a 	mov	r8,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  804f88:	10c0261e 	bne	r2,r3,805024 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  804f8c:	50803fcc 	andi	r2,r10,255
  804f90:	1240261e 	bne	r2,r9,80502c <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  804f94:	0144303a 	nor	r2,zero,r5
  804f98:	00000806 	br	804fbc <OSFlagAccept+0xc0>
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  804f9c:	2180020b 	ldhu	r6,8(r4)
  804fa0:	3146703a 	and	r3,r6,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  804fa4:	18bfffcc 	andi	r2,r3,65535
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  804fa8:	1811883a 	mov	r8,r3
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  804fac:	10001d26 	beq	r2,zero,805024 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  804fb0:	50803fcc 	andi	r2,r10,255
  804fb4:	12401d1e 	bne	r2,r9,80502c <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  804fb8:	00c4303a 	nor	r2,zero,r3
  804fbc:	1184703a 	and	r2,r2,r6
  804fc0:	00001606 	br	80501c <OSFlagAccept+0x120>
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  804fc4:	2180020b 	ldhu	r6,8(r4)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  804fc8:	28bfffcc 	andi	r2,r5,65535
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  804fcc:	0186303a 	nor	r3,zero,r6
  804fd0:	194a703a 	and	r5,r3,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  804fd4:	28ffffcc 	andi	r3,r5,65535
             OS_EXIT_CRITICAL();
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  804fd8:	2811883a 	mov	r8,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  804fdc:	1880111e 	bne	r3,r2,805024 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  804fe0:	50803fcc 	andi	r2,r10,255
  804fe4:	1240111e 	bne	r2,r9,80502c <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  804fe8:	2984b03a 	or	r2,r5,r6
  804fec:	00000b06 	br	80501c <OSFlagAccept+0x120>
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  804ff0:	2240020b 	ldhu	r9,8(r4)
  804ff4:	0244303a 	nor	r2,zero,r9
  804ff8:	1146703a 	and	r3,r2,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  804ffc:	18bfffcc 	andi	r2,r3,65535
  805000:	10a0001c 	xori	r2,r2,32768
  805004:	10a00004 	addi	r2,r2,-32768
             }
             OS_EXIT_CRITICAL();
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  805008:	1811883a 	mov	r8,r3
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80500c:	10000526 	beq	r2,zero,805024 <OSFlagAccept+0x128>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805010:	50803fcc 	andi	r2,r10,255
  805014:	1180051e 	bne	r2,r6,80502c <OSFlagAccept+0x130>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  805018:	1a44b03a 	or	r2,r3,r9
  80501c:	2080020d 	sth	r2,8(r4)
  805020:	00000206 	br	80502c <OSFlagAccept+0x130>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  805024:	00801c04 	movi	r2,112
  805028:	38800005 	stb	r2,0(r7)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80502c:	5801703a 	wrctl	status,r11
  805030:	00000406 	br	805044 <OSFlagAccept+0x148>
  805034:	5801703a 	wrctl	status,r11
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  805038:	00801bc4 	movi	r2,111
  80503c:	38800005 	stb	r2,0(r7)
  805040:	0011883a 	mov	r8,zero
             break;
    }
    return (flags_rdy);
  805044:	40ffffcc 	andi	r3,r8,65535
}
  805048:	1805883a 	mov	r2,r3
  80504c:	f800283a 	ret

00805050 <OSFlagCreate>:
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  805050:	00802074 	movhi	r2,129
  805054:	10a43b04 	addi	r2,r2,-28436
  805058:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80505c:	0007883a 	mov	r3,zero
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
        return ((OS_FLAG_GRP *)0);
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  805060:	10000226 	beq	r2,zero,80506c <OSFlagCreate+0x1c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  805064:	00800404 	movi	r2,16
  805068:	00001606 	br	8050c4 <OSFlagCreate+0x74>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80506c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805070:	00bfff84 	movi	r2,-2
  805074:	3084703a 	and	r2,r6,r2
  805078:	1001703a 	wrctl	status,r2
        return ((OS_FLAG_GRP *)0);
    }
    OS_ENTER_CRITICAL();
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80507c:	01c02074 	movhi	r7,129
  805080:	39e43f04 	addi	r7,r7,-28420
  805084:	38c00017 	ldw	r3,0(r7)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  805088:	18000c26 	beq	r3,zero,8050bc <OSFlagCreate+0x6c>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80508c:	18800117 	ldw	r2,4(r3)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  805090:	1900020d 	sth	r4,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  805094:	18000115 	stw	zero,4(r3)
    }
    OS_ENTER_CRITICAL();
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  805098:	38800015 	stw	r2,0(r7)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80509c:	00800144 	movi	r2,5
  8050a0:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  8050a4:	00800fc4 	movi	r2,63
  8050a8:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8050ac:	180002c5 	stb	zero,11(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8050b0:	3001703a 	wrctl	status,r6
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  8050b4:	28000005 	stb	zero,0(r5)
  8050b8:	00000306 	br	8050c8 <OSFlagCreate+0x78>
  8050bc:	3001703a 	wrctl	status,r6
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  8050c0:	00801c84 	movi	r2,114
  8050c4:	28800005 	stb	r2,0(r5)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
}
  8050c8:	1805883a 	mov	r2,r3
  8050cc:	f800283a 	ret

008050d0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8050d0:	defffa04 	addi	sp,sp,-24
  8050d4:	dc800215 	stw	r18,8(sp)
  8050d8:	dc400115 	stw	r17,4(sp)
  8050dc:	dfc00515 	stw	ra,20(sp)
  8050e0:	dd000415 	stw	r20,16(sp)
  8050e4:	dcc00315 	stw	r19,12(sp)
  8050e8:	dc000015 	stw	r16,0(sp)
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (pgrp);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8050ec:	00802074 	movhi	r2,129
  8050f0:	10a43b04 	addi	r2,r2,-28436
  8050f4:	10800003 	ldbu	r2,0(r2)
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  8050f8:	2023883a 	mov	r17,r4
  8050fc:	3025883a 	mov	r18,r6
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return (pgrp);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  805100:	10000226 	beq	r2,zero,80510c <OSFlagDel+0x3c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  805104:	008003c4 	movi	r2,15
  805108:	00003a06 	br	8051f4 <OSFlagDel+0x124>
        return (pgrp);
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80510c:	20c00003 	ldbu	r3,0(r4)
  805110:	00800144 	movi	r2,5
  805114:	18800226 	beq	r3,r2,805120 <OSFlagDel+0x50>
        *perr = OS_ERR_EVENT_TYPE;
  805118:	00800044 	movi	r2,1
  80511c:	00003506 	br	8051f4 <OSFlagDel+0x124>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805120:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805124:	00bfff84 	movi	r2,-2
  805128:	9884703a 	and	r2,r19,r2
  80512c:	1001703a 	wrctl	status,r2
        return (pgrp);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  805130:	21000117 	ldw	r4,4(r4)
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
  805134:	29403fcc 	andi	r5,r5,255
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
        *perr = OS_ERR_EVENT_TYPE;
        return (pgrp);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  805138:	2004c03a 	cmpne	r2,r4,zero
  80513c:	1029883a 	mov	r20,r2
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    }
    switch (opt) {
  805140:	28000326 	beq	r5,zero,805150 <OSFlagDel+0x80>
  805144:	00800044 	movi	r2,1
  805148:	2880281e 	bne	r5,r2,8051ec <OSFlagDel+0x11c>
  80514c:	00001006 	br	805190 <OSFlagDel+0xc0>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  805150:	10000c1e 	bne	r2,zero,805184 <OSFlagDel+0xb4>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  805154:	00800fc4 	movi	r2,63
  805158:	88800285 	stb	r2,10(r17)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80515c:	880002c5 	stb	zero,11(r17)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  805160:	88000005 	stb	zero,0(r17)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  805164:	00802074 	movhi	r2,129
  805168:	10a43f04 	addi	r2,r2,-28420
  80516c:	10c00017 	ldw	r3,0(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  805170:	8800020d 	sth	zero,8(r17)
                 OSFlagFreeList       = pgrp;
  805174:	14400015 	stw	r17,0(r2)
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  805178:	88c00115 	stw	r3,4(r17)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80517c:	9801703a 	wrctl	status,r19
  805180:	00001706 	br	8051e0 <OSFlagDel+0x110>
  805184:	9801703a 	wrctl	status,r19
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  805188:	00801244 	movi	r2,73
  80518c:	00001906 	br	8051f4 <OSFlagDel+0x124>
                 pgrp_return          = pgrp;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  805190:	2021883a 	mov	r16,r4
  805194:	00000206 	br	8051a0 <OSFlagDel+0xd0>
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  805198:	0804db80 	call	804db8 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80519c:	84000017 	ldw	r16,0(r16)
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  8051a0:	8009883a 	mov	r4,r16
  8051a4:	000b883a 	mov	r5,zero
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  8051a8:	803ffb1e 	bne	r16,zero,805198 <OSFlagDel+0xc8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  8051ac:	00800fc4 	movi	r2,63
  8051b0:	88800285 	stb	r2,10(r17)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  8051b4:	880002c5 	stb	zero,11(r17)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  8051b8:	88000005 	stb	zero,0(r17)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  8051bc:	00802074 	movhi	r2,129
  8051c0:	10a43f04 	addi	r2,r2,-28420
  8051c4:	10c00017 	ldw	r3,0(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  8051c8:	8800020d 	sth	zero,8(r17)
             OSFlagFreeList       = pgrp;
  8051cc:	14400015 	stw	r17,0(r2)
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  8051d0:	88c00115 	stw	r3,4(r17)
  8051d4:	9801703a 	wrctl	status,r19
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
             OSFlagFreeList       = pgrp;
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  8051d8:	a0000126 	beq	r20,zero,8051e0 <OSFlagDel+0x110>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  8051dc:	08041700 	call	804170 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  8051e0:	0023883a 	mov	r17,zero
  8051e4:	90000005 	stb	zero,0(r18)
  8051e8:	00000306 	br	8051f8 <OSFlagDel+0x128>
  8051ec:	9801703a 	wrctl	status,r19
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
             break;

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  8051f0:	008001c4 	movi	r2,7
  8051f4:	90800005 	stb	r2,0(r18)
             pgrp_return          = pgrp;
             break;
    }
    return (pgrp_return);
}
  8051f8:	8805883a 	mov	r2,r17
  8051fc:	dfc00517 	ldw	ra,20(sp)
  805200:	dd000417 	ldw	r20,16(sp)
  805204:	dcc00317 	ldw	r19,12(sp)
  805208:	dc800217 	ldw	r18,8(sp)
  80520c:	dc400117 	ldw	r17,4(sp)
  805210:	dc000017 	ldw	r16,0(sp)
  805214:	dec00604 	addi	sp,sp,24
  805218:	f800283a 	ret

0080521c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80521c:	defffd04 	addi	sp,sp,-12
  805220:	dc000015 	stw	r16,0(sp)
  805224:	dfc00215 	stw	ra,8(sp)
  805228:	dc400115 	stw	r17,4(sp)
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80522c:	00802074 	movhi	r2,129
  805230:	10a43b04 	addi	r2,r2,-28436
  805234:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_NAME_GET_ISR;
  805238:	000f883a 	mov	r7,zero
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80523c:	3021883a 	mov	r16,r6
  805240:	2007883a 	mov	r3,r4
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  805244:	10000226 	beq	r2,zero,805250 <OSFlagNameGet+0x34>
        *perr = OS_ERR_NAME_GET_ISR;
  805248:	00800444 	movi	r2,17
  80524c:	00000c06 	br	805280 <OSFlagNameGet+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805250:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805254:	00bfff84 	movi	r2,-2
  805258:	8884703a 	and	r2,r17,r2
  80525c:	1001703a 	wrctl	status,r2
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return (0);
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  805260:	2809883a 	mov	r4,r5
  805264:	19400284 	addi	r5,r3,10
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  805268:	18c00003 	ldbu	r3,0(r3)
  80526c:	00800144 	movi	r2,5
  805270:	18800526 	beq	r3,r2,805288 <OSFlagNameGet+0x6c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805274:	8801703a 	wrctl	status,r17
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  805278:	000f883a 	mov	r7,zero
  80527c:	00800044 	movi	r2,1
  805280:	80800005 	stb	r2,0(r16)
  805284:	00000406 	br	805298 <OSFlagNameGet+0x7c>
        return (0);
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  805288:	08040ec0 	call	8040ec <OS_StrCopy>
  80528c:	8801703a 	wrctl	status,r17
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  805290:	80000005 	stb	zero,0(r16)
    return (len);
  805294:	11c03fcc 	andi	r7,r2,255
}
  805298:	3805883a 	mov	r2,r7
  80529c:	dfc00217 	ldw	ra,8(sp)
  8052a0:	dc400117 	ldw	r17,4(sp)
  8052a4:	dc000017 	ldw	r16,0(sp)
  8052a8:	dec00304 	addi	sp,sp,12
  8052ac:	f800283a 	ret

008052b0 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8052b0:	defffb04 	addi	sp,sp,-20
  8052b4:	dcc00315 	stw	r19,12(sp)
  8052b8:	dc800215 	stw	r18,8(sp)
  8052bc:	dc000015 	stw	r16,0(sp)
  8052c0:	dfc00415 	stw	ra,16(sp)
  8052c4:	dc400115 	stw	r17,4(sp)
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8052c8:	00802074 	movhi	r2,129
  8052cc:	10a43b04 	addi	r2,r2,-28436
  8052d0:	10800003 	ldbu	r2,0(r2)
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  8052d4:	3021883a 	mov	r16,r6
  8052d8:	2027883a 	mov	r19,r4
  8052dc:	2825883a 	mov	r18,r5
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8052e0:	10000226 	beq	r2,zero,8052ec <OSFlagNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
  8052e4:	00800484 	movi	r2,18
  8052e8:	00000a06 	br	805314 <OSFlagNameSet+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8052ec:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8052f0:	00bfff84 	movi	r2,-2
  8052f4:	8884703a 	and	r2,r17,r2
  8052f8:	1001703a 	wrctl	status,r2
        return;
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  8052fc:	20c00003 	ldbu	r3,0(r4)
  805300:	00800144 	movi	r2,5
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  805304:	2809883a 	mov	r4,r5
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        *perr = OS_ERR_NAME_SET_ISR;
        return;
    }
    OS_ENTER_CRITICAL();
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  805308:	18800426 	beq	r3,r2,80531c <OSFlagNameSet+0x6c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80530c:	8801703a 	wrctl	status,r17
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  805310:	00800044 	movi	r2,1
  805314:	80800005 	stb	r2,0(r16)
  805318:	00000c06 	br	80534c <OSFlagNameSet+0x9c>
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80531c:	08041180 	call	804118 <OS_StrLen>
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  805320:	10803fcc 	andi	r2,r2,255
  805324:	00c007c4 	movi	r3,31
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
        return;
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  805328:	900b883a 	mov	r5,r18
  80532c:	99000284 	addi	r4,r19,10
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
        return;
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  805330:	1880032e 	bgeu	r3,r2,805340 <OSFlagNameSet+0x90>
  805334:	8801703a 	wrctl	status,r17
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  805338:	00801cc4 	movi	r2,115
  80533c:	003ff506 	br	805314 <OSFlagNameSet+0x64>
        return;
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  805340:	08040ec0 	call	8040ec <OS_StrCopy>
  805344:	8801703a 	wrctl	status,r17
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  805348:	80000005 	stb	zero,0(r16)
    return;
}
  80534c:	dfc00417 	ldw	ra,16(sp)
  805350:	dcc00317 	ldw	r19,12(sp)
  805354:	dc800217 	ldw	r18,8(sp)
  805358:	dc400117 	ldw	r17,4(sp)
  80535c:	dc000017 	ldw	r16,0(sp)
  805360:	dec00504 	addi	sp,sp,20
  805364:	f800283a 	ret

00805368 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  805368:	defff204 	addi	sp,sp,-56
  80536c:	dd800c15 	stw	r22,48(sp)
  805370:	dd000a15 	stw	r20,40(sp)
  805374:	dc000615 	stw	r16,24(sp)
  805378:	dfc00d15 	stw	ra,52(sp)
  80537c:	dd400b15 	stw	r21,44(sp)
  805380:	dcc00915 	stw	r19,36(sp)
  805384:	dc800815 	stw	r18,32(sp)
  805388:	dc400715 	stw	r17,28(sp)
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80538c:	00802074 	movhi	r2,129
  805390:	10a43b04 	addi	r2,r2,-28436
  805394:	10800003 	ldbu	r2,0(r2)
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  805398:	2021883a 	mov	r16,r4
  80539c:	3813883a 	mov	r9,r7
  8053a0:	dd000e17 	ldw	r20,56(sp)
  8053a4:	302d883a 	mov	r22,r6
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8053a8:	10000326 	beq	r2,zero,8053b8 <OSFlagPend+0x50>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8053ac:	000d883a 	mov	r6,zero
  8053b0:	00800084 	movi	r2,2
  8053b4:	00000606 	br	8053d0 <OSFlagPend+0x68>
        return ((OS_FLAGS)0);
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8053b8:	00802074 	movhi	r2,129
  8053bc:	10a42c04 	addi	r2,r2,-28496
  8053c0:	10800003 	ldbu	r2,0(r2)
  8053c4:	10000426 	beq	r2,zero,8053d8 <OSFlagPend+0x70>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8053c8:	000d883a 	mov	r6,zero
  8053cc:	00800344 	movi	r2,13
  8053d0:	a0800005 	stb	r2,0(r20)
  8053d4:	00009206 	br	805620 <OSFlagPend+0x2b8>
        return ((OS_FLAGS)0);
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8053d8:	20c00003 	ldbu	r3,0(r4)
  8053dc:	00800144 	movi	r2,5
  8053e0:	18800326 	beq	r3,r2,8053f0 <OSFlagPend+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  8053e4:	000d883a 	mov	r6,zero
  8053e8:	00800044 	movi	r2,1
  8053ec:	003ff806 	br	8053d0 <OSFlagPend+0x68>
        return ((OS_FLAGS)0);
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  8053f0:	00bfe004 	movi	r2,-128
  8053f4:	3084703a 	and	r2,r6,r2
  8053f8:	10803fcc 	andi	r2,r2,255
  8053fc:	1000021e 	bne	r2,zero,805408 <OSFlagPend+0xa0>
  805400:	002b883a 	mov	r21,zero
  805404:	00000206 	br	805410 <OSFlagPend+0xa8>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  805408:	35801fcc 	andi	r22,r6,127
  80540c:	05400044 	movi	r21,1
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805410:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805414:	00bfff84 	movi	r2,-2
  805418:	8884703a 	and	r2,r17,r2
  80541c:	1001703a 	wrctl	status,r2
    } else {
        consume    = OS_FALSE;
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (wait_type) {
  805420:	b1c03fcc 	andi	r7,r22,255
  805424:	02000044 	movi	r8,1
  805428:	3a003026 	beq	r7,r8,8054ec <OSFlagPend+0x184>
  80542c:	3a001d36 	bltu	r7,r8,8054a4 <OSFlagPend+0x13c>
  805430:	00800084 	movi	r2,2
  805434:	38800326 	beq	r7,r2,805444 <OSFlagPend+0xdc>
  805438:	008000c4 	movi	r2,3
  80543c:	3880421e 	bne	r7,r2,805548 <OSFlagPend+0x1e0>
  805440:	00000a06 	br	80546c <OSFlagPend+0x104>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  805444:	80c0020b 	ldhu	r3,8(r16)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  805448:	29bfffcc 	andi	r6,r5,65535
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (wait_type) {
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80544c:	194a703a 	and	r5,r3,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  805450:	28bfffcc 	andi	r2,r5,65535
  805454:	1180231e 	bne	r2,r6,8054e4 <OSFlagPend+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  805458:	a8803fcc 	andi	r2,r21,255
  80545c:	12001b1e 	bne	r2,r8,8054cc <OSFlagPend+0x164>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  805460:	0144303a 	nor	r2,zero,r5
  805464:	10c4703a 	and	r2,r2,r3
  805468:	00001706 	br	8054c8 <OSFlagPend+0x160>
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80546c:	8100020b 	ldhu	r4,8(r16)
  805470:	2146703a 	and	r3,r4,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  805474:	19bfffcc 	andi	r6,r3,65535
  805478:	30003026 	beq	r6,zero,80553c <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80547c:	a8803fcc 	andi	r2,r21,255
  805480:	1200031e 	bne	r2,r8,805490 <OSFlagPend+0x128>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  805484:	00c4303a 	nor	r2,zero,r3
  805488:	1104703a 	and	r2,r2,r4
  80548c:	8080020d 	sth	r2,8(r16)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  805490:	00802074 	movhi	r2,129
  805494:	10a43c04 	addi	r2,r2,-28432
  805498:	10800017 	ldw	r2,0(r2)
  80549c:	10c00b0d 	sth	r3,44(r2)
  8054a0:	00000e06 	br	8054dc <OSFlagPend+0x174>
             }
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8054a4:	80c0020b 	ldhu	r3,8(r16)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8054a8:	29bfffcc 	andi	r6,r5,65535
             }
             break;

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  8054ac:	00c4303a 	nor	r2,zero,r3
  8054b0:	114a703a 	and	r5,r2,r5
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8054b4:	28bfffcc 	andi	r2,r5,65535
  8054b8:	11800a1e 	bne	r2,r6,8054e4 <OSFlagPend+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8054bc:	a8803fcc 	andi	r2,r21,255
  8054c0:	1200021e 	bne	r2,r8,8054cc <OSFlagPend+0x164>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  8054c4:	28c4b03a 	or	r2,r5,r3
  8054c8:	8080020d 	sth	r2,8(r16)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8054cc:	00802074 	movhi	r2,129
  8054d0:	10a43c04 	addi	r2,r2,-28432
  8054d4:	10800017 	ldw	r2,0(r2)
  8054d8:	11400b0d 	sth	r5,44(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8054dc:	8801703a 	wrctl	status,r17
  8054e0:	00001406 	br	805534 <OSFlagPend+0x1cc>
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8054e4:	48bfffcc 	andi	r2,r9,65535
  8054e8:	00001906 	br	805550 <OSFlagPend+0x1e8>
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8054ec:	8100020b 	ldhu	r4,8(r16)
  8054f0:	0104303a 	nor	r2,zero,r4
  8054f4:	1146703a 	and	r3,r2,r5
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8054f8:	18bfffcc 	andi	r2,r3,65535
  8054fc:	10a0001c 	xori	r2,r2,32768
  805500:	10a00004 	addi	r2,r2,-32768
                 OS_EXIT_CRITICAL();
             }
             break;

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  805504:	180d883a 	mov	r6,r3
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  805508:	10000c26 	beq	r2,zero,80553c <OSFlagPend+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80550c:	a8803fcc 	andi	r2,r21,255
  805510:	11c0021e 	bne	r2,r7,80551c <OSFlagPend+0x1b4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  805514:	1904b03a 	or	r2,r3,r4
  805518:	8080020d 	sth	r2,8(r16)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80551c:	00802074 	movhi	r2,129
  805520:	10a43c04 	addi	r2,r2,-28432
  805524:	10800017 	ldw	r2,0(r2)
  805528:	10c00b0d 	sth	r3,44(r2)
  80552c:	8801703a 	wrctl	status,r17
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
                 return (flags_rdy);
  805530:	31bfffcc 	andi	r6,r6,65535
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  805534:	a0000005 	stb	zero,0(r20)
  805538:	00003906 	br	805620 <OSFlagPend+0x2b8>
                 return (flags_rdy);
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80553c:	48bfffcc 	andi	r2,r9,65535
  805540:	29bfffcc 	andi	r6,r5,65535
  805544:	00000206 	br	805550 <OSFlagPend+0x1e8>
  805548:	8801703a 	wrctl	status,r17
  80554c:	00002e06 	br	805608 <OSFlagPend+0x2a0>
  805550:	8009883a 	mov	r4,r16
  805554:	d9400104 	addi	r5,sp,4
  805558:	d8800015 	stw	r2,0(sp)
  80555c:	0804cc40 	call	804cc4 <OS_FlagBlock>
  805560:	8801703a 	wrctl	status,r17
             flags_rdy = (OS_FLAGS)0;
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
             return (flags_rdy);
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  805564:	08041700 	call	804170 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805568:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80556c:	00bfff84 	movi	r2,-2
  805570:	9884703a 	and	r2,r19,r2
  805574:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  805578:	04802074 	movhi	r18,129
  80557c:	94a43c04 	addi	r18,r18,-28432
  805580:	90800017 	ldw	r2,0(r18)
  805584:	14400c43 	ldbu	r17,49(r2)
  805588:	88000e26 	beq	r17,zero,8055c4 <OSFlagPend+0x25c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80558c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  805590:	d9000104 	addi	r4,sp,4
  805594:	0804d7c0 	call	804d7c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  805598:	90800017 	ldw	r2,0(r18)
  80559c:	10000c05 	stb	zero,48(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8055a0:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
        switch (pend_stat) {
  8055a4:	00800084 	movi	r2,2
  8055a8:	8880031e 	bne	r17,r2,8055b8 <OSFlagPend+0x250>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  8055ac:	000d883a 	mov	r6,zero
  8055b0:	00800384 	movi	r2,14
  8055b4:	003f8606 	br	8053d0 <OSFlagPend+0x68>
                 break;

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  8055b8:	000d883a 	mov	r6,zero
  8055bc:	00800284 	movi	r2,10
  8055c0:	003f8306 	br	8053d0 <OSFlagPend+0x68>
                 break;
        }
        return (flags_rdy);
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  8055c4:	11800b0b 	ldhu	r6,44(r2)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  8055c8:	a9003fcc 	andi	r4,r21,255
  8055cc:	00800044 	movi	r2,1
  8055d0:	2080101e 	bne	r4,r2,805614 <OSFlagPend+0x2ac>
        switch (wait_type) {
  8055d4:	b0c03fcc 	andi	r3,r22,255
  8055d8:	20c0062e 	bgeu	r4,r3,8055f4 <OSFlagPend+0x28c>
  8055dc:	008000c4 	movi	r2,3
  8055e0:	10c00836 	bltu	r2,r3,805604 <OSFlagPend+0x29c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  8055e4:	80c0020b 	ldhu	r3,8(r16)
  8055e8:	0184303a 	nor	r2,zero,r6
  8055ec:	10c4703a 	and	r2,r2,r3
  8055f0:	00000206 	br	8055fc <OSFlagPend+0x294>
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  8055f4:	8080020b 	ldhu	r2,8(r16)
  8055f8:	1184b03a 	or	r2,r2,r6
  8055fc:	8080020d 	sth	r2,8(r16)
  805600:	00000406 	br	805614 <OSFlagPend+0x2ac>
  805604:	9801703a 	wrctl	status,r19
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  805608:	000d883a 	mov	r6,zero
  80560c:	00801bc4 	movi	r2,111
  805610:	003f6f06 	br	8053d0 <OSFlagPend+0x68>
  805614:	9801703a 	wrctl	status,r19
                 return ((OS_FLAGS)0);
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  805618:	a0000005 	stb	zero,0(r20)
    return (flags_rdy);
  80561c:	31bfffcc 	andi	r6,r6,65535
}
  805620:	3005883a 	mov	r2,r6
  805624:	dfc00d17 	ldw	ra,52(sp)
  805628:	dd800c17 	ldw	r22,48(sp)
  80562c:	dd400b17 	ldw	r21,44(sp)
  805630:	dd000a17 	ldw	r20,40(sp)
  805634:	dcc00917 	ldw	r19,36(sp)
  805638:	dc800817 	ldw	r18,32(sp)
  80563c:	dc400717 	ldw	r17,28(sp)
  805640:	dc000617 	ldw	r16,24(sp)
  805644:	dec00e04 	addi	sp,sp,56
  805648:	f800283a 	ret

0080564c <OSFlagPendGetFlagsRdy>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80564c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805650:	00bfff84 	movi	r2,-2
  805654:	1884703a 	and	r2,r3,r2
  805658:	1001703a 	wrctl	status,r2
#endif



    OS_ENTER_CRITICAL();
    flags = OSTCBCur->OSTCBFlagsRdy;
  80565c:	00802074 	movhi	r2,129
  805660:	10a43c04 	addi	r2,r2,-28432
  805664:	10800017 	ldw	r2,0(r2)
  805668:	10800b0b 	ldhu	r2,44(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80566c:	1801703a 	wrctl	status,r3
    OS_EXIT_CRITICAL();
    return (flags);
}
  805670:	10bfffcc 	andi	r2,r2,65535
  805674:	f800283a 	ret

00805678 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  805678:	defff804 	addi	sp,sp,-32
  80567c:	dd000415 	stw	r20,16(sp)
  805680:	dc800215 	stw	r18,8(sp)
  805684:	dfc00715 	stw	ra,28(sp)
  805688:	dd800615 	stw	r22,24(sp)
  80568c:	dd400515 	stw	r21,20(sp)
  805690:	dcc00315 	stw	r19,12(sp)
  805694:	dc400115 	stw	r17,4(sp)
  805698:	dc000015 	stw	r16,0(sp)
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80569c:	20c00003 	ldbu	r3,0(r4)
  8056a0:	00800144 	movi	r2,5
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  8056a4:	2025883a 	mov	r18,r4
  8056a8:	3829883a 	mov	r20,r7
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
        *perr = OS_ERR_FLAG_INVALID_PGRP;
        return ((OS_FLAGS)0);
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  8056ac:	18800326 	beq	r3,r2,8056bc <OSFlagPost+0x44>
        *perr = OS_ERR_EVENT_TYPE;
  8056b0:	0007883a 	mov	r3,zero
  8056b4:	00800044 	movi	r2,1
  8056b8:	00001606 	br	805714 <OSFlagPost+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8056bc:	002b303a 	rdctl	r21,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8056c0:	00bfff84 	movi	r2,-2
  8056c4:	a884703a 	and	r2,r21,r2
  8056c8:	1001703a 	wrctl	status,r2
        return ((OS_FLAGS)0);
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    switch (opt) {
  8056cc:	31803fcc 	andi	r6,r6,255
  8056d0:	30000326 	beq	r6,zero,8056e0 <OSFlagPost+0x68>
  8056d4:	00800044 	movi	r2,1
  8056d8:	30800b1e 	bne	r6,r2,805708 <OSFlagPost+0x90>
  8056dc:	00000406 	br	8056f0 <OSFlagPost+0x78>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8056e0:	20c0020b 	ldhu	r3,8(r4)
  8056e4:	0144303a 	nor	r2,zero,r5
  8056e8:	10c4703a 	and	r2,r2,r3
  8056ec:	00000206 	br	8056f8 <OSFlagPost+0x80>
             break;

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  8056f0:	2080020b 	ldhu	r2,8(r4)
  8056f4:	2884b03a 	or	r2,r5,r2
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  8056f8:	94400117 	ldw	r17,4(r18)
  8056fc:	002d883a 	mov	r22,zero
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
             break;

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  805700:	9080020d 	sth	r2,8(r18)
  805704:	00003a06 	br	8057f0 <OSFlagPost+0x178>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805708:	a801703a 	wrctl	status,r21
             break;

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80570c:	0007883a 	mov	r3,zero
  805710:	00801c44 	movi	r2,113
  805714:	a0800005 	stb	r2,0(r20)
  805718:	00004206 	br	805824 <OSFlagPost+0x1ac>
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
        switch (pnode->OSFlagNodeWaitType) {
  80571c:	8c000483 	ldbu	r16,18(r17)
  805720:	04c00044 	movi	r19,1
  805724:	84c01e26 	beq	r16,r19,8057a0 <OSFlagPost+0x128>
  805728:	84c01236 	bltu	r16,r19,805774 <OSFlagPost+0xfc>
  80572c:	00800084 	movi	r2,2
  805730:	80800326 	beq	r16,r2,805740 <OSFlagPost+0xc8>
  805734:	008000c4 	movi	r2,3
  805738:	8080271e 	bne	r16,r2,8057d8 <OSFlagPost+0x160>
  80573c:	00000706 	br	80575c <OSFlagPost+0xe4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  805740:	8880040b 	ldhu	r2,16(r17)
  805744:	90c0020b 	ldhu	r3,8(r18)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  805748:	1009883a 	mov	r4,r2
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
        switch (pnode->OSFlagNodeWaitType) {
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80574c:	10c4703a 	and	r2,r2,r3
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  805750:	117fffcc 	andi	r5,r2,65535
  805754:	2900251e 	bne	r5,r4,8057ec <OSFlagPost+0x174>
  805758:	00000c06 	br	80578c <OSFlagPost+0x114>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80575c:	9080020b 	ldhu	r2,8(r18)
  805760:	88c0040b 	ldhu	r3,16(r17)
  805764:	10c4703a 	and	r2,r2,r3
                 if (flags_rdy != (OS_FLAGS)0) {
  805768:	117fffcc 	andi	r5,r2,65535
  80576c:	28001f26 	beq	r5,zero,8057ec <OSFlagPost+0x174>
  805770:	00000606 	br	80578c <OSFlagPost+0x114>
                 }
                 break;

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  805774:	9080020b 	ldhu	r2,8(r18)
  805778:	88c0040b 	ldhu	r3,16(r17)
  80577c:	0084303a 	nor	r2,zero,r2
  805780:	10c4703a 	and	r2,r2,r3
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  805784:	117fffcc 	andi	r5,r2,65535
  805788:	28c0181e 	bne	r5,r3,8057ec <OSFlagPost+0x174>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80578c:	8809883a 	mov	r4,r17
  805790:	0804db80 	call	804db8 <OS_FlagTaskRdy>
                     if (rdy == OS_TRUE) {
  805794:	10803fcc 	andi	r2,r2,255
  805798:	14c0141e 	bne	r2,r19,8057ec <OSFlagPost+0x174>
  80579c:	00001206 	br	8057e8 <OSFlagPost+0x170>
                     }
                 }
                 break;

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8057a0:	9080020b 	ldhu	r2,8(r18)
  8057a4:	88c0040b 	ldhu	r3,16(r17)
  8057a8:	0084303a 	nor	r2,zero,r2
  8057ac:	10ca703a 	and	r5,r2,r3
                 if (flags_rdy != (OS_FLAGS)0) {
  8057b0:	28bfffcc 	andi	r2,r5,65535
  8057b4:	10a0001c 	xori	r2,r2,32768
  8057b8:	10a00004 	addi	r2,r2,-32768
  8057bc:	10000b26 	beq	r2,zero,8057ec <OSFlagPost+0x174>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8057c0:	297fffcc 	andi	r5,r5,65535
  8057c4:	8809883a 	mov	r4,r17
  8057c8:	0804db80 	call	804db8 <OS_FlagTaskRdy>
                     if (rdy == OS_TRUE) {
  8057cc:	10803fcc 	andi	r2,r2,255
  8057d0:	1400061e 	bne	r2,r16,8057ec <OSFlagPost+0x174>
  8057d4:	00000406 	br	8057e8 <OSFlagPost+0x170>
  8057d8:	a801703a 	wrctl	status,r21
                 }
                 break;
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8057dc:	0007883a 	mov	r3,zero
  8057e0:	00801bc4 	movi	r2,111
  8057e4:	003fcb06 	br	805714 <OSFlagPost+0x9c>
                 return ((OS_FLAGS)0);
  8057e8:	05800044 	movi	r22,1
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  8057ec:	8c400017 	ldw	r17,0(r17)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8057f0:	883fca1e 	bne	r17,zero,80571c <OSFlagPost+0xa4>
  8057f4:	a801703a 	wrctl	status,r21
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  8057f8:	b0c03fcc 	andi	r3,r22,255
  8057fc:	00800044 	movi	r2,1
  805800:	1880011e 	bne	r3,r2,805808 <OSFlagPost+0x190>
        OS_Sched();
  805804:	08041700 	call	804170 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805808:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80580c:	00ffff84 	movi	r3,-2
  805810:	10c6703a 	and	r3,r2,r3
  805814:	1801703a 	wrctl	status,r3
    }
    OS_ENTER_CRITICAL();
    flags_cur = pgrp->OSFlagFlags;
  805818:	90c0020b 	ldhu	r3,8(r18)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80581c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  805820:	a0000005 	stb	zero,0(r20)
    return (flags_cur);
}
  805824:	1805883a 	mov	r2,r3
  805828:	dfc00717 	ldw	ra,28(sp)
  80582c:	dd800617 	ldw	r22,24(sp)
  805830:	dd400517 	ldw	r21,20(sp)
  805834:	dd000417 	ldw	r20,16(sp)
  805838:	dcc00317 	ldw	r19,12(sp)
  80583c:	dc800217 	ldw	r18,8(sp)
  805840:	dc400117 	ldw	r17,4(sp)
  805844:	dc000017 	ldw	r16,0(sp)
  805848:	dec00804 	addi	sp,sp,32
  80584c:	f800283a 	ret

00805850 <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  805850:	defffb04 	addi	sp,sp,-20
  805854:	dcc00315 	stw	r19,12(sp)
  805858:	dc800215 	stw	r18,8(sp)
  80585c:	dc000015 	stw	r16,0(sp)
  805860:	dfc00415 	stw	ra,16(sp)
  805864:	dc400115 	stw	r17,4(sp)
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  805868:	20c00003 	ldbu	r3,0(r4)
  80586c:	00800044 	movi	r2,1
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  805870:	2021883a 	mov	r16,r4
  805874:	3027883a 	mov	r19,r6
  805878:	2825883a 	mov	r18,r5
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  80587c:	1880201e 	bne	r3,r2,805900 <OSMboxPostOpt+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805880:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805884:	00bfff84 	movi	r2,-2
  805888:	8884703a 	and	r2,r17,r2
  80588c:	1001703a 	wrctl	status,r2
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
  805890:	20800283 	ldbu	r2,10(r4)
  805894:	10001226 	beq	r2,zero,8058e0 <OSMboxPostOpt+0x90>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  805898:	1cc4703a 	and	r2,r3,r19
  80589c:	10000826 	beq	r2,zero,8058c0 <OSMboxPostOpt+0x70>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
  8058a0:	8009883a 	mov	r4,r16
  8058a4:	900b883a 	mov	r5,r18
  8058a8:	01800084 	movi	r6,2
  8058ac:	000f883a 	mov	r7,zero
  8058b0:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
  8058b4:	80800283 	ldbu	r2,10(r16)
  8058b8:	10000426 	beq	r2,zero,8058cc <OSMboxPostOpt+0x7c>
  8058bc:	003ff806 	br	8058a0 <OSMboxPostOpt+0x50>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
  8058c0:	01800084 	movi	r6,2
  8058c4:	000f883a 	mov	r7,zero
  8058c8:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8058cc:	8801703a 	wrctl	status,r17
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  8058d0:	9880010c 	andi	r2,r19,4
  8058d4:	1000091e 	bne	r2,zero,8058fc <OSMboxPostOpt+0xac>
            OS_Sched();                               /* Find HPT ready to run                         */
  8058d8:	08041700 	call	804170 <OS_Sched>
  8058dc:	00000706 	br	8058fc <OSMboxPostOpt+0xac>
        }
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
  8058e0:	20800117 	ldw	r2,4(r4)
  8058e4:	10000326 	beq	r2,zero,8058f4 <OSMboxPostOpt+0xa4>
  8058e8:	8801703a 	wrctl	status,r17
  8058ec:	00800504 	movi	r2,20
  8058f0:	00000306 	br	805900 <OSMboxPostOpt+0xb0>
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
  8058f4:	81400115 	stw	r5,4(r16)
  8058f8:	8801703a 	wrctl	status,r17
  8058fc:	0005883a 	mov	r2,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
  805900:	dfc00417 	ldw	ra,16(sp)
  805904:	dcc00317 	ldw	r19,12(sp)
  805908:	dc800217 	ldw	r18,8(sp)
  80590c:	dc400117 	ldw	r17,4(sp)
  805910:	dc000017 	ldw	r16,0(sp)
  805914:	dec00504 	addi	sp,sp,20
  805918:	f800283a 	ret

0080591c <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
  80591c:	defffe04 	addi	sp,sp,-8
  805920:	dc000015 	stw	r16,0(sp)
  805924:	dfc00115 	stw	ra,4(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  805928:	00802074 	movhi	r2,129
  80592c:	10a43b04 	addi	r2,r2,-28436
  805930:	10800003 	ldbu	r2,0(r2)
  805934:	0021883a 	mov	r16,zero
  805938:	1000161e 	bne	r2,zero,805994 <OSMboxCreate+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80593c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805940:	00bfff84 	movi	r2,-2
  805944:	1884703a 	and	r2,r3,r2
  805948:	1001703a 	wrctl	status,r2
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    }
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80594c:	01402074 	movhi	r5,129
  805950:	29643a04 	addi	r5,r5,-28440
  805954:	2c000017 	ldw	r16,0(r5)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  805958:	80000d26 	beq	r16,zero,805990 <OSMboxCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80595c:	80800117 	ldw	r2,4(r16)
  805960:	28800015 	stw	r2,0(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805964:	1801703a 	wrctl	status,r3
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
  805968:	00800044 	movi	r2,1
  80596c:	80800005 	stb	r2,0(r16)
        pevent->OSEventCnt     = 0;
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
  805970:	00800fc4 	movi	r2,63
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
        pevent->OSEventCnt     = 0;
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
  805974:	81000115 	stw	r4,4(r16)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
  805978:	80800385 	stb	r2,14(r16)
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
        pevent->OSEventCnt     = 0;
  80597c:	8000020d 	sth	zero,8(r16)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
        pevent->OSEventName[1] = OS_ASCII_NUL;
  805980:	800003c5 	stb	zero,15(r16)
#endif
        OS_EventWaitListInit(pevent);
  805984:	8009883a 	mov	r4,r16
  805988:	08040900 	call	804090 <OS_EventWaitListInit>
  80598c:	00000106 	br	805994 <OSMboxCreate+0x78>
  805990:	1801703a 	wrctl	status,r3
    }
    return (pevent);                             /* Return pointer to event control block              */
}
  805994:	8005883a 	mov	r2,r16
  805998:	dfc00117 	ldw	ra,4(sp)
  80599c:	dc000017 	ldw	r16,0(sp)
  8059a0:	dec00204 	addi	sp,sp,8
  8059a4:	f800283a 	ret

008059a8 <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8059a8:	defff904 	addi	sp,sp,-28
  8059ac:	dc800215 	stw	r18,8(sp)
  8059b0:	dc400115 	stw	r17,4(sp)
  8059b4:	dfc00615 	stw	ra,24(sp)
  8059b8:	dd400515 	stw	r21,20(sp)
  8059bc:	dd000415 	stw	r20,16(sp)
  8059c0:	dcc00315 	stw	r19,12(sp)
  8059c4:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  8059c8:	20800003 	ldbu	r2,0(r4)
  8059cc:	00c00044 	movi	r3,1
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  8059d0:	2025883a 	mov	r18,r4
  8059d4:	3023883a 	mov	r17,r6
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return ((void *)0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  8059d8:	10c00326 	beq	r2,r3,8059e8 <OSMboxPend+0x40>
        *perr = OS_ERR_EVENT_TYPE;
  8059dc:	002b883a 	mov	r21,zero
  8059e0:	30c00005 	stb	r3,0(r6)
  8059e4:	00004306 	br	805af4 <OSMboxPend+0x14c>
        return ((void *)0);
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  8059e8:	00802074 	movhi	r2,129
  8059ec:	10a43b04 	addi	r2,r2,-28436
  8059f0:	10800003 	ldbu	r2,0(r2)
  8059f4:	10000326 	beq	r2,zero,805a04 <OSMboxPend+0x5c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  8059f8:	002b883a 	mov	r21,zero
  8059fc:	00800084 	movi	r2,2
  805a00:	00000606 	br	805a1c <OSMboxPend+0x74>
        return ((void *)0);
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  805a04:	00802074 	movhi	r2,129
  805a08:	10a42c04 	addi	r2,r2,-28496
  805a0c:	10800003 	ldbu	r2,0(r2)
  805a10:	10000426 	beq	r2,zero,805a24 <OSMboxPend+0x7c>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  805a14:	002b883a 	mov	r21,zero
  805a18:	00800344 	movi	r2,13
  805a1c:	88800005 	stb	r2,0(r17)
  805a20:	00003406 	br	805af4 <OSMboxPend+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805a24:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805a28:	053fff84 	movi	r20,-2
  805a2c:	9d04703a 	and	r2,r19,r20
  805a30:	1001703a 	wrctl	status,r2
        return ((void *)0);
    }
    OS_ENTER_CRITICAL();
    pmsg = pevent->OSEventPtr;
  805a34:	25400117 	ldw	r21,4(r4)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
  805a38:	a8000426 	beq	r21,zero,805a4c <OSMboxPend+0xa4>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
  805a3c:	20000115 	stw	zero,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805a40:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  805a44:	30000005 	stb	zero,0(r6)
  805a48:	00002a06 	br	805af4 <OSMboxPend+0x14c>
        return (pmsg);                                /* Return the message received (or NULL)         */
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
  805a4c:	04002074 	movhi	r16,129
  805a50:	84243c04 	addi	r16,r16,-28432
  805a54:	80c00017 	ldw	r3,0(r16)
  805a58:	18800c03 	ldbu	r2,48(r3)
  805a5c:	10800094 	ori	r2,r2,2
  805a60:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  805a64:	80800017 	ldw	r2,0(r16)
  805a68:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
  805a6c:	80800017 	ldw	r2,0(r16)
  805a70:	11400b8d 	sth	r5,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  805a74:	0803dd00 	call	803dd0 <OS_EventTaskWait>
  805a78:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
  805a7c:	08041700 	call	804170 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805a80:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805a84:	9d04703a 	and	r2,r19,r20
  805a88:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  805a8c:	81000017 	ldw	r4,0(r16)
  805a90:	20c00c43 	ldbu	r3,49(r4)
  805a94:	18000326 	beq	r3,zero,805aa4 <OSMboxPend+0xfc>
  805a98:	00800084 	movi	r2,2
  805a9c:	1880061e 	bne	r3,r2,805ab8 <OSMboxPend+0x110>
  805aa0:	00000306 	br	805ab0 <OSMboxPend+0x108>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
  805aa4:	25400917 	ldw	r21,36(r4)
            *perr =  OS_ERR_NONE;
  805aa8:	88000005 	stb	zero,0(r17)
  805aac:	00000606 	br	805ac8 <OSMboxPend+0x120>
             break;

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  805ab0:	00800384 	movi	r2,14
  805ab4:	00000306 	br	805ac4 <OSMboxPend+0x11c>
             break;

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  805ab8:	900b883a 	mov	r5,r18
  805abc:	0803ef40 	call	803ef4 <OS_EventTaskRemove>
             pmsg = (void *)0;
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  805ac0:	00800284 	movi	r2,10
  805ac4:	88800005 	stb	r2,0(r17)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  805ac8:	00c02074 	movhi	r3,129
  805acc:	18e43c04 	addi	r3,r3,-28432
  805ad0:	18800017 	ldw	r2,0(r3)
  805ad4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  805ad8:	18800017 	ldw	r2,0(r3)
  805adc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  805ae0:	18800017 	ldw	r2,0(r3)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  805ae4:	10000915 	stw	zero,36(r2)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  805ae8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  805aec:	10000815 	stw	zero,32(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805af0:	9801703a 	wrctl	status,r19
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
}
  805af4:	a805883a 	mov	r2,r21
  805af8:	dfc00617 	ldw	ra,24(sp)
  805afc:	dd400517 	ldw	r21,20(sp)
  805b00:	dd000417 	ldw	r20,16(sp)
  805b04:	dcc00317 	ldw	r19,12(sp)
  805b08:	dc800217 	ldw	r18,8(sp)
  805b0c:	dc400117 	ldw	r17,4(sp)
  805b10:	dc000017 	ldw	r16,0(sp)
  805b14:	dec00704 	addi	sp,sp,28
  805b18:	f800283a 	ret

00805b1c <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805b1c:	defffb04 	addi	sp,sp,-20
  805b20:	dc800215 	stw	r18,8(sp)
  805b24:	dc400115 	stw	r17,4(sp)
  805b28:	dfc00415 	stw	ra,16(sp)
  805b2c:	dcc00315 	stw	r19,12(sp)
  805b30:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
  805b34:	24000003 	ldbu	r16,0(r4)
  805b38:	00800044 	movi	r2,1
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805b3c:	2023883a 	mov	r17,r4
  805b40:	3025883a 	mov	r18,r6
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
  805b44:	80800226 	beq	r16,r2,805b50 <OSMboxPendAbort+0x34>
        *perr = OS_ERR_EVENT_TYPE;
  805b48:	0007883a 	mov	r3,zero
  805b4c:	00001a06 	br	805bb8 <OSMboxPendAbort+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805b50:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805b54:	00bfff84 	movi	r2,-2
  805b58:	9884703a 	and	r2,r19,r2
  805b5c:	1001703a 	wrctl	status,r2
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
  805b60:	20800283 	ldbu	r2,10(r4)
  805b64:	10001626 	beq	r2,zero,805bc0 <OSMboxPendAbort+0xa4>
        nbr_tasks = 0;
        switch (opt) {
  805b68:	28803fcc 	andi	r2,r5,255
  805b6c:	14000a1e 	bne	r2,r16,805b98 <OSMboxPendAbort+0x7c>
  805b70:	0021883a 	mov	r16,zero
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
  805b74:	01800084 	movi	r6,2
  805b78:	8809883a 	mov	r4,r17
  805b7c:	000b883a 	mov	r5,zero
  805b80:	300f883a 	mov	r7,r6
  805b84:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
  805b88:	88800283 	ldbu	r2,10(r17)
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
  805b8c:	84000044 	addi	r16,r16,1
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
  805b90:	10000526 	beq	r2,zero,805ba8 <OSMboxPendAbort+0x8c>
  805b94:	003ff706 	br	805b74 <OSMboxPendAbort+0x58>
                 }
                 break;
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
  805b98:	01800084 	movi	r6,2
  805b9c:	000b883a 	mov	r5,zero
  805ba0:	300f883a 	mov	r7,r6
  805ba4:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805ba8:	9801703a 	wrctl	status,r19
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  805bac:	08041700 	call	804170 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
        return (nbr_tasks);
  805bb0:	80c03fcc 	andi	r3,r16,255
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
        *perr = OS_ERR_PEND_ABORT;
  805bb4:	00800384 	movi	r2,14
  805bb8:	90800005 	stb	r2,0(r18)
  805bbc:	00000306 	br	805bcc <OSMboxPendAbort+0xb0>
  805bc0:	9801703a 	wrctl	status,r19
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  805bc4:	30000005 	stb	zero,0(r6)
  805bc8:	0007883a 	mov	r3,zero
    return (0);                                            /* No tasks waiting on mailbox              */
}
  805bcc:	1805883a 	mov	r2,r3
  805bd0:	dfc00417 	ldw	ra,16(sp)
  805bd4:	dcc00317 	ldw	r19,12(sp)
  805bd8:	dc800217 	ldw	r18,8(sp)
  805bdc:	dc400117 	ldw	r17,4(sp)
  805be0:	dc000017 	ldw	r16,0(sp)
  805be4:	dec00504 	addi	sp,sp,20
  805be8:	f800283a 	ret

00805bec <OSMboxPost>:
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  805bec:	20c00003 	ldbu	r3,0(r4)
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
  805bf0:	defffe04 	addi	sp,sp,-8
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  805bf4:	00800044 	movi	r2,1
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
  805bf8:	dfc00115 	stw	ra,4(sp)
  805bfc:	dc000015 	stw	r16,0(sp)
  805c00:	2011883a 	mov	r8,r4
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
        return (OS_ERR_POST_NULL_PTR);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
  805c04:	100d883a 	mov	r6,r2
  805c08:	1880141e 	bne	r3,r2,805c5c <OSMboxPost+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805c0c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805c10:	00bfff84 	movi	r2,-2
  805c14:	8084703a 	and	r2,r16,r2
  805c18:	1001703a 	wrctl	status,r2
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
  805c1c:	20800283 	ldbu	r2,10(r4)
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
  805c20:	01800084 	movi	r6,2
  805c24:	000f883a 	mov	r7,zero
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
  805c28:	10000426 	beq	r2,zero,805c3c <OSMboxPost+0x50>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
  805c2c:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805c30:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  805c34:	08041700 	call	804170 <OS_Sched>
  805c38:	00000706 	br	805c58 <OSMboxPost+0x6c>
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
  805c3c:	20800117 	ldw	r2,4(r4)
  805c40:	10000326 	beq	r2,zero,805c50 <OSMboxPost+0x64>
  805c44:	8001703a 	wrctl	status,r16
  805c48:	01800504 	movi	r6,20
  805c4c:	00000306 	br	805c5c <OSMboxPost+0x70>
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
  805c50:	41400115 	stw	r5,4(r8)
  805c54:	8001703a 	wrctl	status,r16
  805c58:	000d883a 	mov	r6,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
  805c5c:	3005883a 	mov	r2,r6
  805c60:	dfc00117 	ldw	ra,4(sp)
  805c64:	dc000017 	ldw	r16,0(sp)
  805c68:	dec00204 	addi	sp,sp,8
  805c6c:	f800283a 	ret

00805c70 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  805c70:	defffe04 	addi	sp,sp,-8
  805c74:	dfc00115 	stw	ra,4(sp)
  805c78:	dc000015 	stw	r16,0(sp)
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805c7c:	20c00003 	ldbu	r3,0(r4)
  805c80:	008000c4 	movi	r2,3
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  805c84:	2011883a 	mov	r8,r4
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805c88:	01400044 	movi	r5,1
  805c8c:	1880181e 	bne	r3,r2,805cf0 <OSSemPost+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805c90:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805c94:	00bfff84 	movi	r2,-2
  805c98:	8084703a 	and	r2,r16,r2
  805c9c:	1001703a 	wrctl	status,r2
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  805ca0:	20800283 	ldbu	r2,10(r4)
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  805ca4:	000b883a 	mov	r5,zero
  805ca8:	01800044 	movi	r6,1
  805cac:	000f883a 	mov	r7,zero
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  805cb0:	10000426 	beq	r2,zero,805cc4 <OSSemPost+0x54>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  805cb4:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805cb8:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  805cbc:	08041700 	call	804170 <OS_Sched>
  805cc0:	00000706 	br	805ce0 <OSSemPost+0x70>
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  805cc4:	2080020b 	ldhu	r2,8(r4)
  805cc8:	00ffffd4 	movui	r3,65535
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  805ccc:	11000044 	addi	r4,r2,1
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
        return (OS_ERR_NONE);
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  805cd0:	10bfffcc 	andi	r2,r2,65535
  805cd4:	10c00426 	beq	r2,r3,805ce8 <OSSemPost+0x78>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  805cd8:	4100020d 	sth	r4,8(r8)
  805cdc:	8001703a 	wrctl	status,r16
  805ce0:	000b883a 	mov	r5,zero
  805ce4:	00000206 	br	805cf0 <OSSemPost+0x80>
  805ce8:	8001703a 	wrctl	status,r16
  805cec:	01400c84 	movi	r5,50
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
}
  805cf0:	2805883a 	mov	r2,r5
  805cf4:	dfc00117 	ldw	ra,4(sp)
  805cf8:	dc000017 	ldw	r16,0(sp)
  805cfc:	dec00204 	addi	sp,sp,8
  805d00:	f800283a 	ret

00805d04 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  805d04:	defffe04 	addi	sp,sp,-8
  805d08:	dc000015 	stw	r16,0(sp)
  805d0c:	dfc00115 	stw	ra,4(sp)
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  805d10:	00802074 	movhi	r2,129
  805d14:	10a43b04 	addi	r2,r2,-28436
  805d18:	10800003 	ldbu	r2,0(r2)
  805d1c:	0021883a 	mov	r16,zero
  805d20:	1000161e 	bne	r2,zero,805d7c <OSSemCreate+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805d24:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805d28:	00bfff84 	movi	r2,-2
  805d2c:	1884703a 	and	r2,r3,r2
  805d30:	1001703a 	wrctl	status,r2
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    }
    OS_ENTER_CRITICAL();
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  805d34:	01402074 	movhi	r5,129
  805d38:	29643a04 	addi	r5,r5,-28440
  805d3c:	2c000017 	ldw	r16,0(r5)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  805d40:	80000d26 	beq	r16,zero,805d78 <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  805d44:	80800117 	ldw	r2,4(r16)
  805d48:	28800015 	stw	r2,0(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805d4c:	1801703a 	wrctl	status,r3
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  805d50:	008000c4 	movi	r2,3
  805d54:	80800005 	stb	r2,0(r16)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  805d58:	00800fc4 	movi	r2,63
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  805d5c:	8100020d 	sth	r4,8(r16)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  805d60:	80800385 	stb	r2,14(r16)
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  805d64:	80000115 	stw	zero,4(r16)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
        pevent->OSEventName[1] = OS_ASCII_NUL;
  805d68:	800003c5 	stb	zero,15(r16)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  805d6c:	8009883a 	mov	r4,r16
  805d70:	08040900 	call	804090 <OS_EventWaitListInit>
  805d74:	00000106 	br	805d7c <OSSemCreate+0x78>
  805d78:	1801703a 	wrctl	status,r3
    }
    return (pevent);
}
  805d7c:	8005883a 	mov	r2,r16
  805d80:	dfc00117 	ldw	ra,4(sp)
  805d84:	dc000017 	ldw	r16,0(sp)
  805d88:	dec00204 	addi	sp,sp,8
  805d8c:	f800283a 	ret

00805d90 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  805d90:	defffa04 	addi	sp,sp,-24
  805d94:	dc800215 	stw	r18,8(sp)
  805d98:	dc400115 	stw	r17,4(sp)
  805d9c:	dfc00515 	stw	ra,20(sp)
  805da0:	dd000415 	stw	r20,16(sp)
  805da4:	dcc00315 	stw	r19,12(sp)
  805da8:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805dac:	20c00003 	ldbu	r3,0(r4)
  805db0:	008000c4 	movi	r2,3
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  805db4:	2025883a 	mov	r18,r4
  805db8:	3023883a 	mov	r17,r6
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805dbc:	18800226 	beq	r3,r2,805dc8 <OSSemPend+0x38>
        *perr = OS_ERR_EVENT_TYPE;
  805dc0:	00800044 	movi	r2,1
  805dc4:	00000506 	br	805ddc <OSSemPend+0x4c>
        return;
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  805dc8:	00802074 	movhi	r2,129
  805dcc:	10a43b04 	addi	r2,r2,-28436
  805dd0:	10800003 	ldbu	r2,0(r2)
  805dd4:	10000326 	beq	r2,zero,805de4 <OSSemPend+0x54>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  805dd8:	00800084 	movi	r2,2
  805ddc:	88800005 	stb	r2,0(r17)
  805de0:	00003906 	br	805ec8 <OSSemPend+0x138>
        return;
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  805de4:	00802074 	movhi	r2,129
  805de8:	10a42c04 	addi	r2,r2,-28496
  805dec:	10800003 	ldbu	r2,0(r2)
  805df0:	10000226 	beq	r2,zero,805dfc <OSSemPend+0x6c>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  805df4:	00800344 	movi	r2,13
  805df8:	003ff806 	br	805ddc <OSSemPend+0x4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805dfc:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805e00:	053fff84 	movi	r20,-2
  805e04:	9d04703a 	and	r2,r19,r20
  805e08:	1001703a 	wrctl	status,r2
        return;
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  805e0c:	2080020b 	ldhu	r2,8(r4)
  805e10:	10000526 	beq	r2,zero,805e28 <OSSemPend+0x98>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  805e14:	10bfffc4 	addi	r2,r2,-1
  805e18:	2080020d 	sth	r2,8(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805e1c:	9801703a 	wrctl	status,r19
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  805e20:	30000005 	stb	zero,0(r6)
  805e24:	00002806 	br	805ec8 <OSSemPend+0x138>
        return;
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  805e28:	04002074 	movhi	r16,129
  805e2c:	84243c04 	addi	r16,r16,-28432
  805e30:	80c00017 	ldw	r3,0(r16)
  805e34:	18800c03 	ldbu	r2,48(r3)
  805e38:	10800054 	ori	r2,r2,1
  805e3c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  805e40:	80800017 	ldw	r2,0(r16)
  805e44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  805e48:	80800017 	ldw	r2,0(r16)
  805e4c:	11400b8d 	sth	r5,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  805e50:	0803dd00 	call	803dd0 <OS_EventTaskWait>
  805e54:	9801703a 	wrctl	status,r19
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  805e58:	08041700 	call	804170 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805e5c:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805e60:	9d04703a 	and	r2,r19,r20
  805e64:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  805e68:	81000017 	ldw	r4,0(r16)
  805e6c:	20c00c43 	ldbu	r3,49(r4)
  805e70:	18000326 	beq	r3,zero,805e80 <OSSemPend+0xf0>
  805e74:	00800084 	movi	r2,2
  805e78:	1880051e 	bne	r3,r2,805e90 <OSSemPend+0x100>
  805e7c:	00000206 	br	805e88 <OSSemPend+0xf8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  805e80:	88000005 	stb	zero,0(r17)
  805e84:	00000606 	br	805ea0 <OSSemPend+0x110>
             break;

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  805e88:	00800384 	movi	r2,14
  805e8c:	00000306 	br	805e9c <OSSemPend+0x10c>
             break;

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  805e90:	900b883a 	mov	r5,r18
  805e94:	0803ef40 	call	803ef4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  805e98:	00800284 	movi	r2,10
  805e9c:	88800005 	stb	r2,0(r17)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  805ea0:	00c02074 	movhi	r3,129
  805ea4:	18e43c04 	addi	r3,r3,-28432
  805ea8:	18800017 	ldw	r2,0(r3)
  805eac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  805eb0:	18800017 	ldw	r2,0(r3)
  805eb4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  805eb8:	18800017 	ldw	r2,0(r3)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  805ebc:	10000815 	stw	zero,32(r2)
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  805ec0:	10000715 	stw	zero,28(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805ec4:	9801703a 	wrctl	status,r19
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  805ec8:	dfc00517 	ldw	ra,20(sp)
  805ecc:	dd000417 	ldw	r20,16(sp)
  805ed0:	dcc00317 	ldw	r19,12(sp)
  805ed4:	dc800217 	ldw	r18,8(sp)
  805ed8:	dc400117 	ldw	r17,4(sp)
  805edc:	dc000017 	ldw	r16,0(sp)
  805ee0:	dec00604 	addi	sp,sp,24
  805ee4:	f800283a 	ret

00805ee8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805ee8:	defffb04 	addi	sp,sp,-20
  805eec:	dc800215 	stw	r18,8(sp)
  805ef0:	dc400115 	stw	r17,4(sp)
  805ef4:	dfc00415 	stw	ra,16(sp)
  805ef8:	dcc00315 	stw	r19,12(sp)
  805efc:	dc000015 	stw	r16,0(sp)
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805f00:	20c00003 	ldbu	r3,0(r4)
  805f04:	008000c4 	movi	r2,3
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  805f08:	2023883a 	mov	r17,r4
  805f0c:	3025883a 	mov	r18,r6
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  805f10:	18800326 	beq	r3,r2,805f20 <OSSemPendAbort+0x38>
        *perr = OS_ERR_EVENT_TYPE;
  805f14:	0007883a 	mov	r3,zero
  805f18:	00800044 	movi	r2,1
  805f1c:	00001b06 	br	805f8c <OSSemPendAbort+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805f20:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805f24:	00bfff84 	movi	r2,-2
  805f28:	9884703a 	and	r2,r19,r2
  805f2c:	1001703a 	wrctl	status,r2
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  805f30:	20800283 	ldbu	r2,10(r4)
  805f34:	10001726 	beq	r2,zero,805f94 <OSSemPendAbort+0xac>
        nbr_tasks = 0;
        switch (opt) {
  805f38:	28803fcc 	andi	r2,r5,255
  805f3c:	04000044 	movi	r16,1
  805f40:	14000a1e 	bne	r2,r16,805f6c <OSSemPendAbort+0x84>
  805f44:	0021883a 	mov	r16,zero
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  805f48:	8809883a 	mov	r4,r17
  805f4c:	000b883a 	mov	r5,zero
  805f50:	01800044 	movi	r6,1
  805f54:	01c00084 	movi	r7,2
  805f58:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  805f5c:	88800283 	ldbu	r2,10(r17)
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
  805f60:	84000044 	addi	r16,r16,1
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  805f64:	10000526 	beq	r2,zero,805f7c <OSSemPendAbort+0x94>
  805f68:	003ff706 	br	805f48 <OSSemPendAbort+0x60>
                 }
                 break;
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  805f6c:	000b883a 	mov	r5,zero
  805f70:	800d883a 	mov	r6,r16
  805f74:	01c00084 	movi	r7,2
  805f78:	0803f9c0 	call	803f9c <OS_EventTaskRdy>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  805f7c:	9801703a 	wrctl	status,r19
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  805f80:	08041700 	call	804170 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
        return (nbr_tasks);
  805f84:	80c03fcc 	andi	r3,r16,255
                 nbr_tasks++;
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
        *perr = OS_ERR_PEND_ABORT;
  805f88:	00800384 	movi	r2,14
  805f8c:	90800005 	stb	r2,0(r18)
  805f90:	00000306 	br	805fa0 <OSSemPendAbort+0xb8>
  805f94:	9801703a 	wrctl	status,r19
        return (nbr_tasks);
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  805f98:	30000005 	stb	zero,0(r6)
  805f9c:	0007883a 	mov	r3,zero
    return (0);                                       /* No tasks waiting on semaphore                 */
}
  805fa0:	1805883a 	mov	r2,r3
  805fa4:	dfc00417 	ldw	ra,16(sp)
  805fa8:	dcc00317 	ldw	r19,12(sp)
  805fac:	dc800217 	ldw	r18,8(sp)
  805fb0:	dc400117 	ldw	r17,4(sp)
  805fb4:	dc000017 	ldw	r16,0(sp)
  805fb8:	dec00504 	addi	sp,sp,20
  805fbc:	f800283a 	ret

00805fc0 <OS_TaskStkClr>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  805fc0:	31bfffcc 	andi	r6,r6,65535
  805fc4:	3080004c 	andi	r2,r6,1
  805fc8:	1005003a 	cmpeq	r2,r2,zero
  805fcc:	1000071e 	bne	r2,zero,805fec <OS_TaskStkClr+0x2c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  805fd0:	3080008c 	andi	r2,r6,2
  805fd4:	1000041e 	bne	r2,zero,805fe8 <OS_TaskStkClr+0x28>
  805fd8:	f800283a 	ret
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
                size--;
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  805fdc:	20000015 	stw	zero,0(r4)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
                size--;
  805fe0:	297fffc4 	addi	r5,r5,-1
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  805fe4:	21000104 	addi	r4,r4,4
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  805fe8:	283ffc1e 	bne	r5,zero,805fdc <OS_TaskStkClr+0x1c>
  805fec:	f800283a 	ret

00805ff0 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  805ff0:	deffff04 	addi	sp,sp,-4
  805ff4:	dfc00015 	stw	ra,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  805ff8:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  805ffc:	00bfff84 	movi	r2,-2
  806000:	3084703a 	and	r2,r6,r2
  806004:	1001703a 	wrctl	status,r2
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  806008:	20c03fcc 	andi	r3,r4,255
  80600c:	00803fc4 	movi	r2,255
  806010:	01402074 	movhi	r5,129
  806014:	29643c04 	addi	r5,r5,-28432
  806018:	1880041e 	bne	r3,r2,80602c <OSTaskSuspend+0x3c>
        prio = OSTCBCur->OSTCBPrio;
  80601c:	28800017 	ldw	r2,0(r5)
  806020:	02000044 	movi	r8,1
  806024:	11000c83 	ldbu	r4,50(r2)
  806028:	00000406 	br	80603c <OSTaskSuspend+0x4c>
        self = OS_TRUE;
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  80602c:	28800017 	ldw	r2,0(r5)
  806030:	10800c83 	ldbu	r2,50(r2)
  806034:	1885003a 	cmpeq	r2,r3,r2
  806038:	1011883a 	mov	r8,r2
        self = OS_TRUE;
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    }
    ptcb = OSTCBPrioTbl[prio];
  80603c:	20803fcc 	andi	r2,r4,255
  806040:	1085883a 	add	r2,r2,r2
  806044:	1085883a 	add	r2,r2,r2
  806048:	00c02074 	movhi	r3,129
  80604c:	18f7d304 	addi	r3,r3,-8372
  806050:	10c5883a 	add	r2,r2,r3
  806054:	11400017 	ldw	r5,0(r2)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  806058:	2800031e 	bne	r5,zero,806068 <OSTaskSuspend+0x78>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80605c:	3001703a 	wrctl	status,r6
  806060:	00801204 	movi	r2,72
  806064:	00002106 	br	8060ec <OSTaskSuspend+0xfc>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  806068:	01c00044 	movi	r7,1
  80606c:	29c0031e 	bne	r5,r7,80607c <OSTaskSuspend+0x8c>
  806070:	3001703a 	wrctl	status,r6
  806074:	008010c4 	movi	r2,67
  806078:	00001c06 	br	8060ec <OSTaskSuspend+0xfc>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  80607c:	29000d03 	ldbu	r4,52(r5)
  806080:	00c02074 	movhi	r3,129
  806084:	18e43944 	addi	r3,r3,-28443
  806088:	28800d43 	ldbu	r2,53(r5)
  80608c:	20c9883a 	add	r4,r4,r3
  806090:	20c00003 	ldbu	r3,0(r4)
  806094:	0084303a 	nor	r2,zero,r2
  806098:	10c4703a 	and	r2,r2,r3
    if (OSRdyTbl[y] == 0) {
  80609c:	10c03fcc 	andi	r3,r2,255
  8060a0:	18c0201c 	xori	r3,r3,128
  8060a4:	18ffe004 	addi	r3,r3,-128
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    y            = ptcb->OSTCBY;
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  8060a8:	20800005 	stb	r2,0(r4)
    if (OSRdyTbl[y] == 0) {
  8060ac:	1800071e 	bne	r3,zero,8060cc <OSTaskSuspend+0xdc>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  8060b0:	00802074 	movhi	r2,129
  8060b4:	10a43904 	addi	r2,r2,-28444
  8060b8:	28c00d83 	ldbu	r3,54(r5)
  8060bc:	11000003 	ldbu	r4,0(r2)
  8060c0:	00c6303a 	nor	r3,zero,r3
  8060c4:	1906703a 	and	r3,r3,r4
  8060c8:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  8060cc:	28800c03 	ldbu	r2,48(r5)
  8060d0:	10800214 	ori	r2,r2,8
  8060d4:	28800c05 	stb	r2,48(r5)
  8060d8:	3001703a 	wrctl	status,r6
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  8060dc:	40803fcc 	andi	r2,r8,255
  8060e0:	11c0011e 	bne	r2,r7,8060e8 <OSTaskSuspend+0xf8>
        OS_Sched();                                             /* Find new highest priority task      */
  8060e4:	08041700 	call	804170 <OS_Sched>
  8060e8:	0005883a 	mov	r2,zero
    }
    return (OS_ERR_NONE);
}
  8060ec:	dfc00017 	ldw	ra,0(sp)
  8060f0:	dec00104 	addi	sp,sp,4
  8060f4:	f800283a 	ret

008060f8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  8060f8:	defff304 	addi	sp,sp,-52
  8060fc:	df000b15 	stw	fp,44(sp)
  806100:	dd800915 	stw	r22,36(sp)
  806104:	dc000315 	stw	r16,12(sp)
  806108:	df000e17 	ldw	fp,56(sp)
  80610c:	dd800d0b 	ldhu	r22,52(sp)
  806110:	dc00110b 	ldhu	r16,68(sp)
  806114:	dd400815 	stw	r21,32(sp)
  806118:	dd000715 	stw	r20,28(sp)
  80611c:	dcc00615 	stw	r19,24(sp)
  806120:	2829883a 	mov	r20,r5
  806124:	2027883a 	mov	r19,r4
  806128:	302b883a 	mov	r21,r6
  80612c:	dfc00c15 	stw	ra,48(sp)
  806130:	ddc00a15 	stw	r23,40(sp)
  806134:	dc800515 	stw	r18,20(sp)
  806138:	dc400415 	stw	r17,16(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80613c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806140:	00ffff84 	movi	r3,-2
  806144:	20c4703a 	and	r2,r4,r3
  806148:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  80614c:	3c403fcc 	andi	r17,r7,255
  806150:	8c45883a 	add	r2,r17,r17
  806154:	1085883a 	add	r2,r2,r2
  806158:	00c02074 	movhi	r3,129
  80615c:	18f7d304 	addi	r3,r3,-8372
  806160:	10e5883a 	add	r18,r2,r3
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  806164:	00802074 	movhi	r2,129
  806168:	10a43b04 	addi	r2,r2,-28436
  80616c:	10800003 	ldbu	r2,0(r2)
  806170:	10000326 	beq	r2,zero,806180 <OSTaskCreateExt+0x88>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806174:	2001703a 	wrctl	status,r4
  806178:	00800f04 	movi	r2,60
  80617c:	00002c06 	br	806230 <OSTaskCreateExt+0x138>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  806180:	90800017 	ldw	r2,0(r18)
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  806184:	05c00044 	movi	r23,1
    OS_ENTER_CRITICAL();
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  806188:	1000271e 	bne	r2,zero,806228 <OSTaskCreateExt+0x130>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  80618c:	95c00015 	stw	r23,0(r18)
  806190:	2001703a 	wrctl	status,r4
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  806194:	d9400f17 	ldw	r5,60(sp)
  806198:	843fffcc 	andi	r16,r16,65535
  80619c:	800d883a 	mov	r6,r16
  8061a0:	e009883a 	mov	r4,fp
  8061a4:	0805fc00 	call	805fc0 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  8061a8:	800f883a 	mov	r7,r16
  8061ac:	9809883a 	mov	r4,r19
  8061b0:	a00b883a 	mov	r5,r20
  8061b4:	a80d883a 	mov	r6,r21
  8061b8:	0807c300 	call	807c30 <OSTaskStkInit>
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  8061bc:	100b883a 	mov	r5,r2
  8061c0:	d8800f17 	ldw	r2,60(sp)
  8061c4:	8809883a 	mov	r4,r17
  8061c8:	e00d883a 	mov	r6,fp
  8061cc:	d8800015 	stw	r2,0(sp)
  8061d0:	d8801017 	ldw	r2,64(sp)
  8061d4:	b1ffffcc 	andi	r7,r22,65535
  8061d8:	dc000215 	stw	r16,8(sp)
  8061dc:	d8800115 	stw	r2,4(sp)
  8061e0:	08049e80 	call	8049e8 <OS_TCBInit>
  8061e4:	1021883a 	mov	r16,r2
        if (err == OS_ERR_NONE) {
  8061e8:	10803fcc 	andi	r2,r2,255
  8061ec:	1000061e 	bne	r2,zero,806208 <OSTaskCreateExt+0x110>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  8061f0:	00802074 	movhi	r2,129
  8061f4:	10a42e04 	addi	r2,r2,-28488
  8061f8:	10800003 	ldbu	r2,0(r2)
  8061fc:	15c0081e 	bne	r2,r23,806220 <OSTaskCreateExt+0x128>
                OS_Sched();
  806200:	08041700 	call	804170 <OS_Sched>
  806204:	00000606 	br	806220 <OSTaskCreateExt+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806208:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80620c:	013fff84 	movi	r4,-2
  806210:	1904703a 	and	r2,r3,r4
  806214:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  806218:	90000015 	stw	zero,0(r18)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80621c:	1801703a 	wrctl	status,r3
            OS_EXIT_CRITICAL();
        }
        return (err);
  806220:	80803fcc 	andi	r2,r16,255
  806224:	00000206 	br	806230 <OSTaskCreateExt+0x138>
  806228:	2001703a 	wrctl	status,r4
  80622c:	00800a04 	movi	r2,40
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
}
  806230:	dfc00c17 	ldw	ra,48(sp)
  806234:	df000b17 	ldw	fp,44(sp)
  806238:	ddc00a17 	ldw	r23,40(sp)
  80623c:	dd800917 	ldw	r22,36(sp)
  806240:	dd400817 	ldw	r21,32(sp)
  806244:	dd000717 	ldw	r20,28(sp)
  806248:	dcc00617 	ldw	r19,24(sp)
  80624c:	dc800517 	ldw	r18,20(sp)
  806250:	dc400417 	ldw	r17,16(sp)
  806254:	dc000317 	ldw	r16,12(sp)
  806258:	dec00d04 	addi	sp,sp,52
  80625c:	f800283a 	ret

00806260 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  806260:	defff904 	addi	sp,sp,-28
  806264:	dfc00615 	stw	ra,24(sp)
  806268:	dd400515 	stw	r21,20(sp)
  80626c:	dd000415 	stw	r20,16(sp)
  806270:	dcc00315 	stw	r19,12(sp)
  806274:	dc800215 	stw	r18,8(sp)
  806278:	dc400115 	stw	r17,4(sp)
  80627c:	dc000015 	stw	r16,0(sp)
    OS_CPU_SR     cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  806280:	00802074 	movhi	r2,129
  806284:	10a43b04 	addi	r2,r2,-28436
  806288:	10800003 	ldbu	r2,0(r2)
  80628c:	10000226 	beq	r2,zero,806298 <OSTaskDel+0x38>
  806290:	00801004 	movi	r2,64
  806294:	00007406 	br	806468 <OSTaskDel+0x208>
        return (OS_ERR_TASK_DEL_ISR);
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  806298:	20c03fcc 	andi	r3,r4,255
  80629c:	00800504 	movi	r2,20
  8062a0:	1880021e 	bne	r3,r2,8062ac <OSTaskDel+0x4c>
  8062a4:	00800f84 	movi	r2,62
  8062a8:	00006f06 	br	806468 <OSTaskDel+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8062ac:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8062b0:	057fff84 	movi	r21,-2
  8062b4:	9544703a 	and	r2,r18,r21
  8062b8:	1001703a 	wrctl	status,r2
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  8062bc:	05003fc4 	movi	r20,255
  8062c0:	1d00041e 	bne	r3,r20,8062d4 <OSTaskDel+0x74>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  8062c4:	00802074 	movhi	r2,129
  8062c8:	10a43c04 	addi	r2,r2,-28432
  8062cc:	10800017 	ldw	r2,0(r2)
  8062d0:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
  8062d4:	20803fcc 	andi	r2,r4,255
  8062d8:	1085883a 	add	r2,r2,r2
  8062dc:	1085883a 	add	r2,r2,r2
  8062e0:	00c02074 	movhi	r3,129
  8062e4:	18f7d304 	addi	r3,r3,-8372
  8062e8:	10e7883a 	add	r19,r2,r3
  8062ec:	9c000017 	ldw	r16,0(r19)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  8062f0:	8000031e 	bne	r16,zero,806300 <OSTaskDel+0xa0>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8062f4:	9001703a 	wrctl	status,r18
  8062f8:	008010c4 	movi	r2,67
  8062fc:	00005a06 	br	806468 <OSTaskDel+0x208>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  806300:	00800044 	movi	r2,1
  806304:	8080031e 	bne	r16,r2,806314 <OSTaskDel+0xb4>
  806308:	9001703a 	wrctl	status,r18
  80630c:	00800f44 	movi	r2,61
  806310:	00005506 	br	806468 <OSTaskDel+0x208>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  806314:	80c00d03 	ldbu	r3,52(r16)
  806318:	01402074 	movhi	r5,129
  80631c:	29643944 	addi	r5,r5,-28443
  806320:	80800d43 	ldbu	r2,53(r16)
  806324:	1947883a 	add	r3,r3,r5
  806328:	19000003 	ldbu	r4,0(r3)
  80632c:	0084303a 	nor	r2,zero,r2
  806330:	1104703a 	and	r2,r2,r4
  806334:	18800005 	stb	r2,0(r3)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  806338:	80800d03 	ldbu	r2,52(r16)
  80633c:	1145883a 	add	r2,r2,r5
  806340:	10800003 	ldbu	r2,0(r2)
  806344:	1000071e 	bne	r2,zero,806364 <OSTaskDel+0x104>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  806348:	00802074 	movhi	r2,129
  80634c:	10a43904 	addi	r2,r2,-28444
  806350:	80c00d83 	ldbu	r3,54(r16)
  806354:	11000003 	ldbu	r4,0(r2)
  806358:	00c6303a 	nor	r3,zero,r3
  80635c:	1906703a 	and	r3,r3,r4
  806360:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  806364:	81400717 	ldw	r5,28(r16)
  806368:	28000226 	beq	r5,zero,806374 <OSTaskDel+0x114>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  80636c:	8009883a 	mov	r4,r16
  806370:	0803ef40 	call	803ef4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  806374:	81400817 	ldw	r5,32(r16)
  806378:	28000226 	beq	r5,zero,806384 <OSTaskDel+0x124>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80637c:	8009883a 	mov	r4,r16
  806380:	0803f400 	call	803f40 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  806384:	81000a17 	ldw	r4,40(r16)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  806388:	20000126 	beq	r4,zero,806390 <OSTaskDel+0x130>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  80638c:	0804d7c0 	call	804d7c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  806390:	80000c05 	stb	zero,48(r16)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  806394:	80000c45 	stb	zero,49(r16)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  806398:	04402074 	movhi	r17,129
  80639c:	8c642c04 	addi	r17,r17,-28496
  8063a0:	88c00003 	ldbu	r3,0(r17)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  8063a4:	80000b8d 	sth	zero,46(r16)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  8063a8:	18803fcc 	andi	r2,r3,255
  8063ac:	15000226 	beq	r2,r20,8063b8 <OSTaskDel+0x158>
        OSLockNesting++;
  8063b0:	18800044 	addi	r2,r3,1
  8063b4:	88800005 	stb	r2,0(r17)
  8063b8:	9001703a 	wrctl	status,r18
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  8063bc:	0803dcc0 	call	803dcc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8063c0:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8063c4:	9544703a 	and	r2,r18,r21
  8063c8:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  8063cc:	88800003 	ldbu	r2,0(r17)
  8063d0:	10000226 	beq	r2,zero,8063dc <OSTaskDel+0x17c>
        OSLockNesting--;
  8063d4:	10bfffc4 	addi	r2,r2,-1
  8063d8:	88800005 	stb	r2,0(r17)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  8063dc:	8009883a 	mov	r4,r16
  8063e0:	0807c580 	call	807c58 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  8063e4:	00c02074 	movhi	r3,129
  8063e8:	18e43744 	addi	r3,r3,-28451
  8063ec:	18800003 	ldbu	r2,0(r3)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  8063f0:	98000015 	stw	zero,0(r19)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
        OSLockNesting--;
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    OSTaskCtr--;                                        /* One less task being managed                 */
  8063f4:	10bfffc4 	addi	r2,r2,-1
  8063f8:	18800005 	stb	r2,0(r3)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  8063fc:	80c00617 	ldw	r3,24(r16)
  806400:	81000517 	ldw	r4,20(r16)
  806404:	1800051e 	bne	r3,zero,80641c <OSTaskDel+0x1bc>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  806408:	20000615 	stw	zero,24(r4)
        OSTCBList                  = ptcb->OSTCBNext;
  80640c:	00802074 	movhi	r2,129
  806410:	10a43104 	addi	r2,r2,-28476
  806414:	11000015 	stw	r4,0(r2)
  806418:	00000306 	br	806428 <OSTaskDel+0x1c8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  80641c:	19000515 	stw	r4,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  806420:	80800517 	ldw	r2,20(r16)
  806424:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  806428:	00c02074 	movhi	r3,129
  80642c:	18e43604 	addi	r3,r3,-28456
  806430:	18800017 	ldw	r2,0(r3)
  806434:	80800515 	stw	r2,20(r16)
    OSTCBFreeList     = ptcb;
  806438:	1c000015 	stw	r16,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  80643c:	00800fc4 	movi	r2,63
  806440:	80800e05 	stb	r2,56(r16)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  806444:	80000e45 	stb	zero,57(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806448:	9001703a 	wrctl	status,r18
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  80644c:	00802074 	movhi	r2,129
  806450:	10a42e04 	addi	r2,r2,-28488
  806454:	10c00003 	ldbu	r3,0(r2)
  806458:	00800044 	movi	r2,1
  80645c:	1880011e 	bne	r3,r2,806464 <OSTaskDel+0x204>
        OS_Sched();                                     /* Find new highest priority task              */
  806460:	08041700 	call	804170 <OS_Sched>
  806464:	0005883a 	mov	r2,zero
    }
    return (OS_ERR_NONE);
}
  806468:	dfc00617 	ldw	ra,24(sp)
  80646c:	dd400517 	ldw	r21,20(sp)
  806470:	dd000417 	ldw	r20,16(sp)
  806474:	dcc00317 	ldw	r19,12(sp)
  806478:	dc800217 	ldw	r18,8(sp)
  80647c:	dc400117 	ldw	r17,4(sp)
  806480:	dc000017 	ldw	r16,0(sp)
  806484:	dec00704 	addi	sp,sp,28
  806488:	f800283a 	ret

0080648c <OSTaskDelReq>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  80648c:	21003fcc 	andi	r4,r4,255
  806490:	00800504 	movi	r2,20
  806494:	00c00f84 	movi	r3,62
  806498:	20802426 	beq	r4,r2,80652c <OSTaskDelReq+0xa0>
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  80649c:	00803fc4 	movi	r2,255
  8064a0:	20800b1e 	bne	r4,r2,8064d0 <OSTaskDelReq+0x44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8064a4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8064a8:	00bfff84 	movi	r2,-2
  8064ac:	1884703a 	and	r2,r3,r2
  8064b0:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  8064b4:	00802074 	movhi	r2,129
  8064b8:	10a43c04 	addi	r2,r2,-28432
  8064bc:	10800017 	ldw	r2,0(r2)
  8064c0:	10800dc3 	ldbu	r2,55(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8064c4:	1801703a 	wrctl	status,r3
        OS_EXIT_CRITICAL();
        return (stat);
  8064c8:	1007883a 	mov	r3,r2
  8064cc:	00001706 	br	80652c <OSTaskDelReq+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8064d0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8064d4:	00bfff84 	movi	r2,-2
  8064d8:	2884703a 	and	r2,r5,r2
  8064dc:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    ptcb = OSTCBPrioTbl[prio];
  8064e0:	2105883a 	add	r2,r4,r4
  8064e4:	1085883a 	add	r2,r2,r2
  8064e8:	00c02074 	movhi	r3,129
  8064ec:	18f7d304 	addi	r3,r3,-8372
  8064f0:	10c5883a 	add	r2,r2,r3
  8064f4:	11000017 	ldw	r4,0(r2)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  8064f8:	2000031e 	bne	r4,zero,806508 <OSTaskDelReq+0x7c>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8064fc:	2801703a 	wrctl	status,r5
  806500:	00c010c4 	movi	r3,67
  806504:	00000906 	br	80652c <OSTaskDelReq+0xa0>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  806508:	00800044 	movi	r2,1
  80650c:	2080031e 	bne	r4,r2,80651c <OSTaskDelReq+0x90>
  806510:	2801703a 	wrctl	status,r5
  806514:	00c00f44 	movi	r3,61
  806518:	00000406 	br	80652c <OSTaskDelReq+0xa0>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  80651c:	00800fc4 	movi	r2,63
  806520:	20800dc5 	stb	r2,55(r4)
  806524:	2801703a 	wrctl	status,r5
  806528:	0007883a 	mov	r3,zero
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
}
  80652c:	1805883a 	mov	r2,r3
  806530:	f800283a 	ret

00806534 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  806534:	defffd04 	addi	sp,sp,-12
  806538:	dfc00215 	stw	ra,8(sp)
  80653c:	dc000115 	stw	r16,4(sp)
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  806540:	00802074 	movhi	r2,129
  806544:	10a43b04 	addi	r2,r2,-28436
  806548:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_NAME_GET_ISR;
  80654c:	0007883a 	mov	r3,zero
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  806550:	10000226 	beq	r2,zero,80655c <OSTaskNameGet+0x28>
        *perr = OS_ERR_NAME_GET_ISR;
  806554:	00800444 	movi	r2,17
  806558:	00001506 	br	8065b0 <OSTaskNameGet+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80655c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  806560:	00bfff84 	movi	r2,-2
  806564:	8084703a 	and	r2,r16,r2
  806568:	1001703a 	wrctl	status,r2
        return (0);
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  80656c:	20c03fcc 	andi	r3,r4,255
  806570:	00803fc4 	movi	r2,255
  806574:	1880041e 	bne	r3,r2,806588 <OSTaskNameGet+0x54>
        prio = OSTCBCur->OSTCBPrio;
  806578:	00802074 	movhi	r2,129
  80657c:	10a43c04 	addi	r2,r2,-28432
  806580:	10800017 	ldw	r2,0(r2)
  806584:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
  806588:	20803fcc 	andi	r2,r4,255
  80658c:	1085883a 	add	r2,r2,r2
  806590:	00c02074 	movhi	r3,129
  806594:	18f7d304 	addi	r3,r3,-8372
  806598:	1085883a 	add	r2,r2,r2
  80659c:	10c5883a 	add	r2,r2,r3
  8065a0:	10c00017 	ldw	r3,0(r2)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  8065a4:	1800041e 	bne	r3,zero,8065b8 <OSTaskNameGet+0x84>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8065a8:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8065ac:	008010c4 	movi	r2,67
  8065b0:	30800005 	stb	r2,0(r6)
  8065b4:	00000d06 	br	8065ec <OSTaskNameGet+0xb8>
        return (0);
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  8065b8:	00800044 	movi	r2,1
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  8065bc:	2809883a 	mov	r4,r5
  8065c0:	19400e04 	addi	r5,r3,56
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  8065c4:	1880031e 	bne	r3,r2,8065d4 <OSTaskNameGet+0xa0>
  8065c8:	8001703a 	wrctl	status,r16
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8065cc:	0007883a 	mov	r3,zero
  8065d0:	003ff606 	br	8065ac <OSTaskNameGet+0x78>
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  8065d4:	d9800015 	stw	r6,0(sp)
  8065d8:	08040ec0 	call	8040ec <OS_StrCopy>
  8065dc:	8001703a 	wrctl	status,r16
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8065e0:	d9800017 	ldw	r6,0(sp)
    return (len);
  8065e4:	10c03fcc 	andi	r3,r2,255
        *perr = OS_ERR_TASK_NOT_EXIST;
        return (0);
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8065e8:	30000005 	stb	zero,0(r6)
    return (len);
}
  8065ec:	1805883a 	mov	r2,r3
  8065f0:	dfc00217 	ldw	ra,8(sp)
  8065f4:	dc000117 	ldw	r16,4(sp)
  8065f8:	dec00304 	addi	sp,sp,12
  8065fc:	f800283a 	ret

00806600 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  806600:	defffb04 	addi	sp,sp,-20
  806604:	dcc00315 	stw	r19,12(sp)
  806608:	dc400115 	stw	r17,4(sp)
  80660c:	dfc00415 	stw	ra,16(sp)
  806610:	dc800215 	stw	r18,8(sp)
  806614:	dc000015 	stw	r16,0(sp)
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  806618:	00802074 	movhi	r2,129
  80661c:	10a43b04 	addi	r2,r2,-28436
  806620:	10800003 	ldbu	r2,0(r2)
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  806624:	2827883a 	mov	r19,r5
  806628:	3023883a 	mov	r17,r6
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  80662c:	10000226 	beq	r2,zero,806638 <OSTaskNameSet+0x38>
        *perr = OS_ERR_NAME_SET_ISR;
  806630:	00800484 	movi	r2,18
  806634:	00001506 	br	80668c <OSTaskNameSet+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  806638:	0025303a 	rdctl	r18,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80663c:	00bfff84 	movi	r2,-2
  806640:	9084703a 	and	r2,r18,r2
  806644:	1001703a 	wrctl	status,r2
        return;
    }
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  806648:	20c03fcc 	andi	r3,r4,255
  80664c:	00803fc4 	movi	r2,255
  806650:	1880041e 	bne	r3,r2,806664 <OSTaskNameSet+0x64>
        prio = OSTCBCur->OSTCBPrio;
  806654:	00802074 	movhi	r2,129
  806658:	10a43c04 	addi	r2,r2,-28432
  80665c:	10800017 	ldw	r2,0(r2)
  806660:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
  806664:	20803fcc 	andi	r2,r4,255
  806668:	1085883a 	add	r2,r2,r2
  80666c:	1085883a 	add	r2,r2,r2
  806670:	00c02074 	movhi	r3,129
  806674:	18f7d304 	addi	r3,r3,-8372
  806678:	10c5883a 	add	r2,r2,r3
  80667c:	14000017 	ldw	r16,0(r2)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  806680:	8000041e 	bne	r16,zero,806694 <OSTaskNameSet+0x94>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806684:	9001703a 	wrctl	status,r18
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  806688:	008010c4 	movi	r2,67
  80668c:	88800005 	stb	r2,0(r17)
  806690:	00000f06 	br	8066d0 <OSTaskNameSet+0xd0>
        return;
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  806694:	00800044 	movi	r2,1
  806698:	80bffa26 	beq	r16,r2,806684 <OSTaskNameSet+0x84>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
        return;
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  80669c:	9809883a 	mov	r4,r19
  8066a0:	08041180 	call	804118 <OS_StrLen>
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  8066a4:	10803fcc 	andi	r2,r2,255
  8066a8:	00c007c4 	movi	r3,31
  8066ac:	1880032e 	bgeu	r3,r2,8066bc <OSTaskNameSet+0xbc>
  8066b0:	9001703a 	wrctl	status,r18
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  8066b4:	00801044 	movi	r2,65
  8066b8:	003ff406 	br	80668c <OSTaskNameSet+0x8c>
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8066bc:	81000e04 	addi	r4,r16,56
  8066c0:	980b883a 	mov	r5,r19
  8066c4:	08040ec0 	call	8040ec <OS_StrCopy>
  8066c8:	9001703a 	wrctl	status,r18
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8066cc:	88000005 	stb	zero,0(r17)
}
  8066d0:	dfc00417 	ldw	ra,16(sp)
  8066d4:	dcc00317 	ldw	r19,12(sp)
  8066d8:	dc800217 	ldw	r18,8(sp)
  8066dc:	dc400117 	ldw	r17,4(sp)
  8066e0:	dc000017 	ldw	r16,0(sp)
  8066e4:	dec00504 	addi	sp,sp,20
  8066e8:	f800283a 	ret

008066ec <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  8066ec:	deffff04 	addi	sp,sp,-4
  8066f0:	dfc00015 	stw	ra,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8066f4:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8066f8:	00bfff84 	movi	r2,-2
  8066fc:	3084703a 	and	r2,r6,r2
  806700:	1001703a 	wrctl	status,r2
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    ptcb = OSTCBPrioTbl[prio];
  806704:	21003fcc 	andi	r4,r4,255
  806708:	2109883a 	add	r4,r4,r4
  80670c:	2109883a 	add	r4,r4,r4
  806710:	00802074 	movhi	r2,129
  806714:	10b7d304 	addi	r2,r2,-8372
  806718:	2089883a 	add	r4,r4,r2
  80671c:	21400017 	ldw	r5,0(r4)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  806720:	2800031e 	bne	r5,zero,806730 <OSTaskResume+0x44>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806724:	3001703a 	wrctl	status,r6
  806728:	00801184 	movi	r2,70
  80672c:	00002906 	br	8067d4 <OSTaskResume+0xe8>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  806730:	01c00044 	movi	r7,1
  806734:	29c0031e 	bne	r5,r7,806744 <OSTaskResume+0x58>
  806738:	3001703a 	wrctl	status,r6
  80673c:	008010c4 	movi	r2,67
  806740:	00002406 	br	8067d4 <OSTaskResume+0xe8>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  806744:	29000c03 	ldbu	r4,48(r5)
  806748:	2080020c 	andi	r2,r4,8
  80674c:	10001f26 	beq	r2,zero,8067cc <OSTaskResume+0xe0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  806750:	00fffdc4 	movi	r3,-9
  806754:	20c6703a 	and	r3,r4,r3
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  806758:	18803fcc 	andi	r2,r3,255
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  80675c:	28c00c05 	stb	r3,48(r5)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  806760:	1000181e 	bne	r2,zero,8067c4 <OSTaskResume+0xd8>
            if (ptcb->OSTCBDly == 0) {
  806764:	28800b8b 	ldhu	r2,46(r5)
  806768:	1000161e 	bne	r2,zero,8067c4 <OSTaskResume+0xd8>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  80676c:	01002074 	movhi	r4,129
  806770:	21243904 	addi	r4,r4,-28444
  806774:	28c00d83 	ldbu	r3,54(r5)
  806778:	20800003 	ldbu	r2,0(r4)
  80677c:	10c4b03a 	or	r2,r2,r3
  806780:	20800005 	stb	r2,0(r4)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  806784:	28c00d03 	ldbu	r3,52(r5)
  806788:	00802074 	movhi	r2,129
  80678c:	10a43944 	addi	r2,r2,-28443
  806790:	29000d43 	ldbu	r4,53(r5)
  806794:	1887883a 	add	r3,r3,r2
  806798:	18800003 	ldbu	r2,0(r3)
  80679c:	1104b03a 	or	r2,r2,r4
  8067a0:	18800005 	stb	r2,0(r3)
  8067a4:	3001703a 	wrctl	status,r6
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  8067a8:	00802074 	movhi	r2,129
  8067ac:	10a42e04 	addi	r2,r2,-28488
  8067b0:	10800003 	ldbu	r2,0(r2)
  8067b4:	11c0011e 	bne	r2,r7,8067bc <OSTaskResume+0xd0>
                    OS_Sched();                               /* Find new highest priority task        */
  8067b8:	08041700 	call	804170 <OS_Sched>
  8067bc:	0005883a 	mov	r2,zero
  8067c0:	00000406 	br	8067d4 <OSTaskResume+0xe8>
  8067c4:	3001703a 	wrctl	status,r6
  8067c8:	003ffc06 	br	8067bc <OSTaskResume+0xd0>
  8067cc:	3001703a 	wrctl	status,r6
  8067d0:	00801104 	movi	r2,68
        }
        return (OS_ERR_NONE);
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
}
  8067d4:	dfc00017 	ldw	ra,0(sp)
  8067d8:	dec00104 	addi	sp,sp,4
  8067dc:	f800283a 	ret

008067e0 <OSTaskStkChk>:
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  8067e0:	28000015 	stw	zero,0(r5)
    p_stk_data->OSUsed = 0;
  8067e4:	28000115 	stw	zero,4(r5)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8067e8:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8067ec:	00bfff84 	movi	r2,-2
  8067f0:	3884703a 	and	r2,r7,r2
  8067f4:	1001703a 	wrctl	status,r2
    OS_ENTER_CRITICAL();
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  8067f8:	20c03fcc 	andi	r3,r4,255
  8067fc:	00803fc4 	movi	r2,255
  806800:	1880041e 	bne	r3,r2,806814 <OSTaskStkChk+0x34>
        prio = OSTCBCur->OSTCBPrio;
  806804:	00802074 	movhi	r2,129
  806808:	10a43c04 	addi	r2,r2,-28432
  80680c:	10800017 	ldw	r2,0(r2)
  806810:	11000c83 	ldbu	r4,50(r2)
    }
    ptcb = OSTCBPrioTbl[prio];
  806814:	20803fcc 	andi	r2,r4,255
  806818:	1085883a 	add	r2,r2,r2
  80681c:	00c02074 	movhi	r3,129
  806820:	18f7d304 	addi	r3,r3,-8372
  806824:	1085883a 	add	r2,r2,r2
  806828:	10c5883a 	add	r2,r2,r3
  80682c:	10c00017 	ldw	r3,0(r2)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  806830:	18000226 	beq	r3,zero,80683c <OSTaskStkChk+0x5c>
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if (ptcb == OS_TCB_RESERVED) {
  806834:	00800044 	movi	r2,1
  806838:	1880031e 	bne	r3,r2,806848 <OSTaskStkChk+0x68>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80683c:	3801703a 	wrctl	status,r7
  806840:	008010c4 	movi	r2,67
  806844:	f800283a 	ret
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  806848:	1880040b 	ldhu	r2,16(r3)
  80684c:	1080004c 	andi	r2,r2,1
  806850:	1000031e 	bne	r2,zero,806860 <OSTaskStkChk+0x80>
  806854:	3801703a 	wrctl	status,r7
  806858:	00801144 	movi	r2,69
  80685c:	f800283a 	ret
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    }
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
  806860:	19800217 	ldw	r6,8(r3)
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    }
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
  806864:	19000317 	ldw	r4,12(r3)
  806868:	3801703a 	wrctl	status,r7
  80686c:	0007883a 	mov	r3,zero
  806870:	00000106 	br	806878 <OSTaskStkChk+0x98>
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
        nfree++;
  806874:	18c00044 	addi	r3,r3,1
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  806878:	30800017 	ldw	r2,0(r6)
  80687c:	31800104 	addi	r6,r6,4
  806880:	103ffc26 	beq	r2,zero,806874 <OSTaskStkChk+0x94>
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  806884:	20c5c83a 	sub	r2,r4,r3
  806888:	1085883a 	add	r2,r2,r2
  80688c:	1085883a 	add	r2,r2,r2
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  806890:	18c7883a 	add	r3,r3,r3
  806894:	18c7883a 	add	r3,r3,r3
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  806898:	28800115 	stw	r2,4(r5)
  80689c:	0005883a 	mov	r2,zero
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  8068a0:	28c00015 	stw	r3,0(r5)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    return (OS_ERR_NONE);
}
  8068a4:	f800283a 	ret

008068a8 <OSTimeDly>:
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8068a8:	00802074 	movhi	r2,129
  8068ac:	10a43b04 	addi	r2,r2,-28436
  8068b0:	10c00003 	ldbu	r3,0(r2)
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  8068b4:	200d883a 	mov	r6,r4


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  8068b8:	20bfffcc 	andi	r2,r4,65535
    OS_CPU_SR  cpu_sr = 0;
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  8068bc:	18001f1e 	bne	r3,zero,80693c <OSTimeDly+0x94>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  8068c0:	10001e26 	beq	r2,zero,80693c <OSTimeDly+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8068c4:	0011303a 	rdctl	r8,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8068c8:	00bfff84 	movi	r2,-2
  8068cc:	4084703a 	and	r2,r8,r2
  8068d0:	1001703a 	wrctl	status,r2
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  8068d4:	00802074 	movhi	r2,129
  8068d8:	10a43c04 	addi	r2,r2,-28432
  8068dc:	11400017 	ldw	r5,0(r2)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8068e0:	00c02074 	movhi	r3,129
  8068e4:	18e43944 	addi	r3,r3,-28443
        if (OSRdyTbl[y] == 0) {
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8068e8:	01c02074 	movhi	r7,129
  8068ec:	39e43904 	addi	r7,r7,-28444
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  8068f0:	29000d03 	ldbu	r4,52(r5)
  8068f4:	28800d43 	ldbu	r2,53(r5)
  8068f8:	20c9883a 	add	r4,r4,r3
  8068fc:	20c00003 	ldbu	r3,0(r4)
  806900:	0084303a 	nor	r2,zero,r2
  806904:	10c4703a 	and	r2,r2,r3
        if (OSRdyTbl[y] == 0) {
  806908:	10c03fcc 	andi	r3,r2,255
  80690c:	18c0201c 	xori	r3,r3,128
  806910:	18ffe004 	addi	r3,r3,-128
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
        OS_ENTER_CRITICAL();
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  806914:	20800005 	stb	r2,0(r4)
        if (OSRdyTbl[y] == 0) {
  806918:	1800051e 	bne	r3,zero,806930 <OSTimeDly+0x88>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80691c:	28800d83 	ldbu	r2,54(r5)
  806920:	38c00003 	ldbu	r3,0(r7)
  806924:	0084303a 	nor	r2,zero,r2
  806928:	10c4703a 	and	r2,r2,r3
  80692c:	38800005 	stb	r2,0(r7)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  806930:	29800b8d 	sth	r6,46(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  806934:	4001703a 	wrctl	status,r8
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  806938:	08041701 	jmpi	804170 <OS_Sched>
  80693c:	f800283a 	ret

00806940 <OSTmr_Free>:
    ptmr->OSTmrPeriod      = 0;
    ptmr->OSTmrMatch       = 0;
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    ptmr->OSTmrCallbackArg = (void *)0;
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
  806940:	00800fc4 	movi	r2,63
  806944:	20800805 	stb	r2,32(r4)
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
  806948:	20000c45 	stb	zero,49(r4)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
  80694c:	20000c05 	stb	zero,48(r4)
    ptmr->OSTmrMatch       = 0;
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    ptmr->OSTmrCallbackArg = (void *)0;
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
  806950:	20000845 	stb	zero,33(r4)

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
  806954:	01802074 	movhi	r6,129
  806958:	31a43004 	addi	r6,r6,-28480
    OSTmrFree++;
  80695c:	01c02074 	movhi	r7,129
  806960:	39e43404 	addi	r7,r7,-28464
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
  806964:	01402074 	movhi	r5,129
  806968:	29642b04 	addi	r5,r5,-28500
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
  80696c:	3080000b 	ldhu	r2,0(r6)
    OSTmrFree++;
  806970:	38c0000b 	ldhu	r3,0(r7)
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
  806974:	2a000017 	ldw	r8,0(r5)
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
  806978:	10bfffc4 	addi	r2,r2,-1
    OSTmrFree++;
  80697c:	18c00044 	addi	r3,r3,1
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
    OSTmrFreeList          = ptmr;
  806980:	29000015 	stw	r4,0(r5)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
  806984:	3080000d 	sth	r2,0(r6)
    OSTmrFree++;
  806988:	38c0000d 	sth	r3,0(r7)
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    ptmr->OSTmrNext        = OSTmrFreeList;
  80698c:	22000315 	stw	r8,12(r4)
#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
    ptmr->OSTmrPeriod      = 0;
  806990:	20000715 	stw	zero,28(r4)
    ptmr->OSTmrMatch       = 0;
  806994:	20000515 	stw	zero,20(r4)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
  806998:	20000115 	stw	zero,4(r4)
    ptmr->OSTmrCallbackArg = (void *)0;
  80699c:	20000215 	stw	zero,8(r4)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
  8069a0:	20000415 	stw	zero,16(r4)
    ptmr->OSTmrNext        = OSTmrFreeList;
    OSTmrFreeList          = ptmr;

    OSTmrUsed--;                                       /* Update timer object statistics                              */
    OSTmrFree++;
}
  8069a4:	f800283a 	ret

008069a8 <OSTmr_Link>:
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
  8069a8:	008000c4 	movi	r2,3
  8069ac:	20800c45 	stb	r2,49(r4)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
  8069b0:	29403fcc 	andi	r5,r5,255
  8069b4:	00800044 	movi	r2,1
  8069b8:	2880031e 	bne	r5,r2,8069c8 <OSTmr_Link+0x20>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
  8069bc:	00802074 	movhi	r2,129
  8069c0:	10a43d04 	addi	r2,r2,-28428
  8069c4:	00000406 	br	8069d8 <OSTmr_Link+0x30>
    } else {
        if (ptmr->OSTmrDly == 0) {
  8069c8:	21400617 	ldw	r5,24(r4)
  8069cc:	00802074 	movhi	r2,129
  8069d0:	10a43d04 	addi	r2,r2,-28428
  8069d4:	2800041e 	bne	r5,zero,8069e8 <OSTmr_Link+0x40>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
  8069d8:	10c00017 	ldw	r3,0(r2)
  8069dc:	20800717 	ldw	r2,28(r4)
  8069e0:	10c5883a 	add	r2,r2,r3
  8069e4:	00000206 	br	8069f0 <OSTmr_Link+0x48>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
  8069e8:	10800017 	ldw	r2,0(r2)
  8069ec:	2885883a 	add	r2,r5,r2
  8069f0:	20800515 	stw	r2,20(r4)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];
  8069f4:	20800517 	ldw	r2,20(r4)
  8069f8:	00c02074 	movhi	r3,129
  8069fc:	18ec4b04 	addi	r3,r3,-20180
  806a00:	1080004c 	andi	r2,r2,1
  806a04:	100490fa 	slli	r2,r2,3
  806a08:	10c7883a 	add	r3,r2,r3

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
  806a0c:	19400017 	ldw	r5,0(r3)
  806a10:	2800051e 	bne	r5,zero,806a28 <OSTmr_Link+0x80>
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (OS_TMR *)0;
        pspoke->OSTmrEntries = 1;
  806a14:	00800044 	movi	r2,1
  806a18:	1880010d 	sth	r2,4(r3)
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
        pspoke->OSTmrFirst   = ptmr;
  806a1c:	19000015 	stw	r4,0(r3)
        ptmr->OSTmrNext      = (OS_TMR *)0;
  806a20:	20000315 	stw	zero,12(r4)
  806a24:	00000606 	br	806a40 <OSTmr_Link+0x98>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (void *)ptmr1;
        ptmr1->OSTmrPrev     = (void *)ptmr;
        pspoke->OSTmrEntries++;
  806a28:	1880010b 	ldhu	r2,4(r3)
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (OS_TMR *)0;
        pspoke->OSTmrEntries = 1;
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
        pspoke->OSTmrFirst   = ptmr;
  806a2c:	19000015 	stw	r4,0(r3)
        ptmr->OSTmrNext      = (void *)ptmr1;
  806a30:	21400315 	stw	r5,12(r4)
        ptmr1->OSTmrPrev     = (void *)ptmr;
        pspoke->OSTmrEntries++;
  806a34:	10800044 	addi	r2,r2,1
  806a38:	1880010d 	sth	r2,4(r3)
        pspoke->OSTmrEntries = 1;
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
        pspoke->OSTmrFirst   = ptmr;
        ptmr->OSTmrNext      = (void *)ptmr1;
        ptmr1->OSTmrPrev     = (void *)ptmr;
  806a3c:	29000415 	stw	r4,16(r5)
        pspoke->OSTmrEntries++;
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
  806a40:	20000415 	stw	zero,16(r4)
}
  806a44:	f800283a 	ret

00806a48 <OSTmr_Unlink>:
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    pspoke = &OSTmrWheelTbl[spoke];
  806a48:	20800517 	ldw	r2,20(r4)
  806a4c:	00c02074 	movhi	r3,129
  806a50:	18ec4b04 	addi	r3,r3,-20180
  806a54:	21400317 	ldw	r5,12(r4)
  806a58:	1080004c 	andi	r2,r2,1
  806a5c:	100490fa 	slli	r2,r2,3
  806a60:	10c7883a 	add	r3,r2,r3

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
  806a64:	18800017 	ldw	r2,0(r3)
  806a68:	1100041e 	bne	r2,r4,806a7c <OSTmr_Unlink+0x34>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
  806a6c:	19400015 	stw	r5,0(r3)
        if (ptmr1 != (OS_TMR *)0) {
  806a70:	28000626 	beq	r5,zero,806a8c <OSTmr_Unlink+0x44>
            ptmr1->OSTmrPrev = (void *)0;
  806a74:	28000415 	stw	zero,16(r5)
  806a78:	00000406 	br	806a8c <OSTmr_Unlink+0x44>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
  806a7c:	20800417 	ldw	r2,16(r4)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
        ptmr1->OSTmrNext = ptmr2;
  806a80:	11400315 	stw	r5,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
  806a84:	28000126 	beq	r5,zero,806a8c <OSTmr_Unlink+0x44>
            ptmr2->OSTmrPrev = (void *)ptmr1;
  806a88:	28800415 	stw	r2,16(r5)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
  806a8c:	00800044 	movi	r2,1
  806a90:	20800c45 	stb	r2,49(r4)
    ptmr->OSTmrNext  = (void *)0;
    ptmr->OSTmrPrev  = (void *)0;
    pspoke->OSTmrEntries--;
  806a94:	1880010b 	ldhu	r2,4(r3)
            ptmr2->OSTmrPrev = (void *)ptmr1;
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    ptmr->OSTmrNext  = (void *)0;
    ptmr->OSTmrPrev  = (void *)0;
  806a98:	20000415 	stw	zero,16(r4)
        if (ptmr2 != (OS_TMR *)0) {
            ptmr2->OSTmrPrev = (void *)ptmr1;
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    ptmr->OSTmrNext  = (void *)0;
  806a9c:	20000315 	stw	zero,12(r4)
    ptmr->OSTmrPrev  = (void *)0;
    pspoke->OSTmrEntries--;
  806aa0:	10bfffc4 	addi	r2,r2,-1
  806aa4:	1880010d 	sth	r2,4(r3)
}
  806aa8:	f800283a 	ret

00806aac <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
  806aac:	defff804 	addi	sp,sp,-32
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
  806ab0:	01002074 	movhi	r4,129
  806ab4:	212d2b04 	addi	r4,r4,-19284
  806ab8:	0140d004 	movi	r5,832
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
  806abc:	dfc00715 	stw	ra,28(sp)
  806ac0:	dc000615 	stw	r16,24(sp)
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
  806ac4:	08040ac0 	call	8040ac <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
  806ac8:	01002074 	movhi	r4,129
  806acc:	212c4b04 	addi	r4,r4,-20180
  806ad0:	01400404 	movi	r5,16
  806ad4:	08040ac0 	call	8040ac <OS_MemClr>
  806ad8:	01c02074 	movhi	r7,129
  806adc:	39ed3804 	addi	r7,r7,-19232
  806ae0:	02001904 	movi	r8,100
  806ae4:	02400fc4 	movi	r9,63
  806ae8:	3880c304 	addi	r2,r7,780

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
        ptmr1->OSTmrType    = OS_TMR_TYPE;
  806aec:	3a3ff305 	stb	r8,-52(r7)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
  806af0:	383fff45 	stb	zero,-3(r7)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
  806af4:	39fff615 	stw	r7,-40(r7)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
  806af8:	3a7ffb05 	stb	r9,-20(r7)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
  806afc:	383ffb45 	stb	zero,-19(r7)
#endif
        ptmr1++;
        ptmr2++;
  806b00:	39c00d04 	addi	r7,r7,52
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
  806b04:	38bff91e 	bne	r7,r2,806aec <OSTmr_Init+0x40>
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
  806b08:	00c00404 	movi	r3,16
  806b0c:	00802074 	movhi	r2,129
  806b10:	10a43404 	addi	r2,r2,-28464
  806b14:	10c0000d 	sth	r3,0(r2)
    OSTmrFreeList       = &OSTmrTbl[0];
  806b18:	39bf3004 	addi	r6,r7,-832
  806b1c:	00802074 	movhi	r2,129
  806b20:	10a42b04 	addi	r2,r2,-28500
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
  806b24:	397ff304 	addi	r5,r7,-52
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
  806b28:	11800015 	stw	r6,0(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
  806b2c:	3a3ff305 	stb	r8,-52(r7)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
  806b30:	2a400805 	stb	r9,32(r5)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
  806b34:	28000845 	stb	zero,33(r5)
#endif
    OSTmrTime           = 0;
  806b38:	00802074 	movhi	r2,129
  806b3c:	10a43d04 	addi	r2,r2,-28428
  806b40:	10000015 	stw	zero,0(r2)
    OSTmrUsed           = 0;
  806b44:	00802074 	movhi	r2,129
  806b48:	10a43004 	addi	r2,r2,-28480
  806b4c:	1000000d 	sth	zero,0(r2)
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
  806b50:	28000c45 	stb	zero,49(r5)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
  806b54:	28000315 	stw	zero,12(r5)
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
    OSTmrSem            = OSSemCreate(1);
  806b58:	01000044 	movi	r4,1
  806b5c:	0805d040 	call	805d04 <OSSemCreate>
  806b60:	04002074 	movhi	r16,129
  806b64:	84243e04 	addi	r16,r16,-28424
    OSTmrSemSignal      = OSSemCreate(0);
  806b68:	0009883a 	mov	r4,zero
#endif
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
    OSTmrSem            = OSSemCreate(1);
  806b6c:	80800015 	stw	r2,0(r16)
    OSTmrSemSignal      = OSSemCreate(0);
  806b70:	0805d040 	call	805d04 <OSSemCreate>

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
  806b74:	81000017 	ldw	r4,0(r16)
    OSTmrTime           = 0;
    OSTmrUsed           = 0;
    OSTmrFree           = OS_TMR_CFG_MAX;
    OSTmrFreeList       = &OSTmrTbl[0];
    OSTmrSem            = OSSemCreate(1);
    OSTmrSemSignal      = OSSemCreate(0);
  806b78:	04002074 	movhi	r16,129
  806b7c:	84242d04 	addi	r16,r16,-28492
  806b80:	80800015 	stw	r2,0(r16)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
  806b84:	d9800504 	addi	r6,sp,20
  806b88:	01402074 	movhi	r5,129
  806b8c:	29623104 	addi	r5,r5,-30524
  806b90:	0804c200 	call	804c20 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
  806b94:	81000017 	ldw	r4,0(r16)
  806b98:	d9800504 	addi	r6,sp,20
  806b9c:	01402074 	movhi	r5,129
  806ba0:	29623604 	addi	r5,r5,-30504
  806ba4:	0804c200 	call	804c20 <OSEventNameSet>
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
  806ba8:	00bfff54 	movui	r2,65533
  806bac:	00c02074 	movhi	r3,129
  806bb0:	18effb04 	addi	r3,r3,-16404
  806bb4:	d8800015 	stw	r2,0(sp)
  806bb8:	00808004 	movi	r2,512
  806bbc:	1981ff04 	addi	r6,r3,2044
  806bc0:	000f883a 	mov	r7,zero
  806bc4:	d8800215 	stw	r2,8(sp)
  806bc8:	01002034 	movhi	r4,128
  806bcc:	211b1204 	addi	r4,r4,27720
  806bd0:	000b883a 	mov	r5,zero
  806bd4:	008000c4 	movi	r2,3
  806bd8:	d8c00115 	stw	r3,4(sp)
  806bdc:	d8800415 	stw	r2,16(sp)
  806be0:	d8000315 	stw	zero,12(sp)
  806be4:	08060f80 	call	8060f8 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
  806be8:	0009883a 	mov	r4,zero
  806bec:	01402074 	movhi	r5,129
  806bf0:	29623b04 	addi	r5,r5,-30484
  806bf4:	d9800544 	addi	r6,sp,21
  806bf8:	08066000 	call	806600 <OSTaskNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
}
  806bfc:	dfc00717 	ldw	ra,28(sp)
  806c00:	dc000617 	ldw	r16,24(sp)
  806c04:	dec00804 	addi	sp,sp,32
  806c08:	f800283a 	ret

00806c0c <OSTmr_Lock>:
static  void  OSTmr_Lock (void)
{
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
  806c0c:	00802074 	movhi	r2,129
  806c10:	10a43e04 	addi	r2,r2,-28424
  806c14:	11000017 	ldw	r4,0(r2)
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
  806c18:	defffe04 	addi	sp,sp,-8
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
  806c1c:	000b883a 	mov	r5,zero
  806c20:	d80d883a 	mov	r6,sp
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
  806c24:	dfc00115 	stw	ra,4(sp)
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
  806c28:	0805d900 	call	805d90 <OSSemPend>
    (void)err;
}
  806c2c:	dfc00117 	ldw	ra,4(sp)
  806c30:	dec00204 	addi	sp,sp,8
  806c34:	f800283a 	ret

00806c38 <OSTmr_Unlock>:


#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
    (void)OSSemPost(OSTmrSem);
  806c38:	00802074 	movhi	r2,129
  806c3c:	10a43e04 	addi	r2,r2,-28424
  806c40:	11000017 	ldw	r4,0(r2)
  806c44:	0805c701 	jmpi	805c70 <OSSemPost>

00806c48 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
  806c48:	defffc04 	addi	sp,sp,-16
  806c4c:	dfc00315 	stw	ra,12(sp)
  806c50:	dc400215 	stw	r17,8(sp)
  806c54:	dc000115 	stw	r16,4(sp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
  806c58:	00802074 	movhi	r2,129
  806c5c:	10a42d04 	addi	r2,r2,-28492
  806c60:	11000017 	ldw	r4,0(r2)
  806c64:	000b883a 	mov	r5,zero
  806c68:	d80d883a 	mov	r6,sp
  806c6c:	0805d900 	call	805d90 <OSSemPend>
        OSTmr_Lock();
  806c70:	0806c0c0 	call	806c0c <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
  806c74:	01002074 	movhi	r4,129
  806c78:	21243d04 	addi	r4,r4,-28428
  806c7c:	20800017 	ldw	r2,0(r4)
  806c80:	10800044 	addi	r2,r2,1
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
  806c84:	10c0004c 	andi	r3,r2,1
  806c88:	180690fa 	slli	r3,r3,3

    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
  806c8c:	20800015 	stw	r2,0(r4)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
  806c90:	00802074 	movhi	r2,129
  806c94:	10ac4b04 	addi	r2,r2,-20180
  806c98:	1887883a 	add	r3,r3,r2
  806c9c:	1c000017 	ldw	r16,0(r3)
  806ca0:	00001606 	br	806cfc <OSTmr_Task+0xb4>
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
  806ca4:	00802074 	movhi	r2,129
  806ca8:	10a43d04 	addi	r2,r2,-28428
  806cac:	10c00017 	ldw	r3,0(r2)
  806cb0:	80800517 	ldw	r2,20(r16)
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
  806cb4:	84400317 	ldw	r17,12(r16)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
  806cb8:	18800f1e 	bne	r3,r2,806cf8 <OSTmr_Task+0xb0>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
  806cbc:	80800117 	ldw	r2,4(r16)
                if (pfnct != (OS_TMR_CALLBACK)0) {
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
  806cc0:	8009883a 	mov	r4,r16
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
                if (pfnct != (OS_TMR_CALLBACK)0) {
  806cc4:	10000226 	beq	r2,zero,806cd0 <OSTmr_Task+0x88>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
  806cc8:	81400217 	ldw	r5,8(r16)
  806ccc:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
  806cd0:	8009883a 	mov	r4,r16
  806cd4:	0806a480 	call	806a48 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
  806cd8:	80800c03 	ldbu	r2,48(r16)
  806cdc:	00c00084 	movi	r3,2
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
  806ce0:	01400044 	movi	r5,1
  806ce4:	8009883a 	mov	r4,r16
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
                if (pfnct != (OS_TMR_CALLBACK)0) {
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
  806ce8:	10c0021e 	bne	r2,r3,806cf4 <OSTmr_Task+0xac>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
  806cec:	08069a80 	call	8069a8 <OSTmr_Link>
  806cf0:	00000106 	br	806cf8 <OSTmr_Task+0xb0>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
  806cf4:	80c00c45 	stb	r3,49(r16)
  806cf8:	8821883a 	mov	r16,r17
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
  806cfc:	803fe91e 	bne	r16,zero,806ca4 <OSTmr_Task+0x5c>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
  806d00:	0806c380 	call	806c38 <OSTmr_Unlock>
  806d04:	003fd406 	br	806c58 <OSTmr_Task+0x10>

00806d08 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
  806d08:	defffa04 	addi	sp,sp,-24
  806d0c:	dd000415 	stw	r20,16(sp)
  806d10:	dcc00315 	stw	r19,12(sp)
  806d14:	dc800215 	stw	r18,8(sp)
  806d18:	dc400115 	stw	r17,4(sp)
  806d1c:	dfc00515 	stw	ra,20(sp)
  806d20:	dc000015 	stw	r16,0(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
  806d24:	20c00003 	ldbu	r3,0(r4)
  806d28:	00801904 	movi	r2,100
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
  806d2c:	2023883a 	mov	r17,r4
  806d30:	3029883a 	mov	r20,r6
  806d34:	3825883a 	mov	r18,r7
  806d38:	2827883a 	mov	r19,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
  806d3c:	18800326 	beq	r3,r2,806d4c <OSTmrStop+0x44>
        *perr = OS_ERR_TMR_INVALID_TYPE;
  806d40:	0007883a 	mov	r3,zero
  806d44:	00bfe244 	movi	r2,-119
  806d48:	00000606 	br	806d64 <OSTmrStop+0x5c>
        return (OS_FALSE);
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
  806d4c:	00802074 	movhi	r2,129
  806d50:	10a43b04 	addi	r2,r2,-28436
  806d54:	10800003 	ldbu	r2,0(r2)
  806d58:	10000426 	beq	r2,zero,806d6c <OSTmrStop+0x64>
        *perr  = OS_ERR_TMR_ISR;
  806d5c:	0007883a 	mov	r3,zero
  806d60:	00bfe2c4 	movi	r2,-117
  806d64:	90800005 	stb	r2,0(r18)
  806d68:	00003006 	br	806e2c <OSTmrStop+0x124>
        return (OS_FALSE);
    }
    OSTmr_Lock();
  806d6c:	0806c0c0 	call	806c0c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
  806d70:	8c000c43 	ldbu	r16,49(r17)
  806d74:	00800084 	movi	r2,2
  806d78:	14000336 	bltu	r2,r16,806d88 <OSTmrStop+0x80>
  806d7c:	04400044 	movi	r17,1
  806d80:	84401e2e 	bgeu	r16,r17,806dfc <OSTmrStop+0xf4>
  806d84:	00002106 	br	806e0c <OSTmrStop+0x104>
  806d88:	008000c4 	movi	r2,3
  806d8c:	8080231e 	bne	r16,r2,806e1c <OSTmrStop+0x114>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
  806d90:	8809883a 	mov	r4,r17
  806d94:	0806a480 	call	806a48 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
             switch (opt) {
  806d98:	99403fcc 	andi	r5,r19,255
    }
    OSTmr_Lock();
    switch (ptmr->OSTmrState) {
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
             *perr = OS_ERR_NONE;
  806d9c:	90000005 	stb	zero,0(r18)
             switch (opt) {
  806da0:	2c000426 	beq	r5,r16,806db4 <OSTmrStop+0xac>
  806da4:	00800104 	movi	r2,4
  806da8:	28800726 	beq	r5,r2,806dc8 <OSTmrStop+0xc0>
  806dac:	28001026 	beq	r5,zero,806df0 <OSTmrStop+0xe8>
  806db0:	00000d06 	br	806de8 <OSTmrStop+0xe0>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
  806db4:	88800117 	ldw	r2,4(r17)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
  806db8:	10000926 	beq	r2,zero,806de0 <OSTmrStop+0xd8>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
  806dbc:	89400217 	ldw	r5,8(r17)
  806dc0:	8809883a 	mov	r4,r17
  806dc4:	00000406 	br	806dd8 <OSTmrStop+0xd0>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
  806dc8:	88800117 	ldw	r2,4(r17)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
  806dcc:	10000426 	beq	r2,zero,806de0 <OSTmrStop+0xd8>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
  806dd0:	8809883a 	mov	r4,r17
  806dd4:	a00b883a 	mov	r5,r20
  806dd8:	103ee83a 	callr	r2
  806ddc:	00000406 	br	806df0 <OSTmrStop+0xe8>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
  806de0:	00bfe3c4 	movi	r2,-113
  806de4:	00000106 	br	806dec <OSTmrStop+0xe4>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
  806de8:	00bfe104 	movi	r2,-124
  806dec:	90800005 	stb	r2,0(r18)
                     break;
             }
             OSTmr_Unlock();
  806df0:	0806c380 	call	806c38 <OSTmr_Unlock>
  806df4:	00c00044 	movi	r3,1
  806df8:	00000c06 	br	806e2c <OSTmrStop+0x124>
             return (OS_TRUE);

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
  806dfc:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
  806e00:	8807883a 	mov	r3,r17
  806e04:	00bfe384 	movi	r2,-114
  806e08:	003fd606 	br	806d64 <OSTmrStop+0x5c>
             return (OS_TRUE);

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
  806e0c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
  806e10:	0007883a 	mov	r3,zero
  806e14:	00bfe1c4 	movi	r2,-121
  806e18:	003fd206 	br	806d64 <OSTmrStop+0x5c>
             return (OS_FALSE);

        default:
             OSTmr_Unlock();
  806e1c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
  806e20:	00bfe344 	movi	r2,-115
  806e24:	90800005 	stb	r2,0(r18)
  806e28:	0007883a 	mov	r3,zero
             return (OS_FALSE);
    }
}
  806e2c:	1805883a 	mov	r2,r3
  806e30:	dfc00517 	ldw	ra,20(sp)
  806e34:	dd000417 	ldw	r20,16(sp)
  806e38:	dcc00317 	ldw	r19,12(sp)
  806e3c:	dc800217 	ldw	r18,8(sp)
  806e40:	dc400117 	ldw	r17,4(sp)
  806e44:	dc000017 	ldw	r16,0(sp)
  806e48:	dec00604 	addi	sp,sp,24
  806e4c:	f800283a 	ret

00806e50 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
  806e50:	defffc04 	addi	sp,sp,-16
  806e54:	dc400115 	stw	r17,4(sp)
  806e58:	dc000015 	stw	r16,0(sp)
  806e5c:	dfc00315 	stw	ra,12(sp)
  806e60:	dc800215 	stw	r18,8(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
  806e64:	20c00003 	ldbu	r3,0(r4)
  806e68:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
  806e6c:	2021883a 	mov	r16,r4
  806e70:	2823883a 	mov	r17,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
  806e74:	18800326 	beq	r3,r2,806e84 <OSTmrStart+0x34>
        *perr = OS_ERR_TMR_INVALID_TYPE;
  806e78:	0007883a 	mov	r3,zero
  806e7c:	00bfe244 	movi	r2,-119
  806e80:	00000606 	br	806e9c <OSTmrStart+0x4c>
        return (OS_FALSE);
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
  806e84:	00802074 	movhi	r2,129
  806e88:	10a43b04 	addi	r2,r2,-28436
  806e8c:	10800003 	ldbu	r2,0(r2)
  806e90:	10000426 	beq	r2,zero,806ea4 <OSTmrStart+0x54>
        *perr  = OS_ERR_TMR_ISR;
  806e94:	0007883a 	mov	r3,zero
  806e98:	00bfe2c4 	movi	r2,-117
  806e9c:	88800005 	stb	r2,0(r17)
  806ea0:	00002006 	br	806f24 <OSTmrStart+0xd4>
        return (OS_FALSE);
    }
    OSTmr_Lock();
  806ea4:	0806c0c0 	call	806c0c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
  806ea8:	80c00c43 	ldbu	r3,49(r16)
  806eac:	00800084 	movi	r2,2
  806eb0:	10c00336 	bltu	r2,r3,806ec0 <OSTmrStart+0x70>
  806eb4:	04800044 	movi	r18,1
  806eb8:	1c800b2e 	bgeu	r3,r18,806ee8 <OSTmrStart+0x98>
  806ebc:	00001106 	br	806f04 <OSTmrStart+0xb4>
  806ec0:	008000c4 	movi	r2,3
  806ec4:	1880131e 	bne	r3,r2,806f14 <OSTmrStart+0xc4>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
  806ec8:	8009883a 	mov	r4,r16
  806ecc:	0806a480 	call	806a48 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
  806ed0:	000b883a 	mov	r5,zero
  806ed4:	8009883a 	mov	r4,r16
  806ed8:	08069a80 	call	8069a8 <OSTmr_Link>
             OSTmr_Unlock();
  806edc:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
  806ee0:	00c00044 	movi	r3,1
  806ee4:	00000506 	br	806efc <OSTmrStart+0xac>
             return (OS_TRUE);

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
  806ee8:	8009883a 	mov	r4,r16
  806eec:	000b883a 	mov	r5,zero
  806ef0:	08069a80 	call	8069a8 <OSTmr_Link>
             OSTmr_Unlock();
  806ef4:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
  806ef8:	9007883a 	mov	r3,r18
  806efc:	88000005 	stb	zero,0(r17)
  806f00:	00000806 	br	806f24 <OSTmrStart+0xd4>
             return (OS_TRUE);

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
  806f04:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
  806f08:	0007883a 	mov	r3,zero
  806f0c:	00bfe1c4 	movi	r2,-121
  806f10:	003fe206 	br	806e9c <OSTmrStart+0x4c>
             return (OS_FALSE);

        default:
             OSTmr_Unlock();
  806f14:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
  806f18:	00bfe344 	movi	r2,-115
  806f1c:	88800005 	stb	r2,0(r17)
  806f20:	0007883a 	mov	r3,zero
             return (OS_FALSE);
    }
}
  806f24:	1805883a 	mov	r2,r3
  806f28:	dfc00317 	ldw	ra,12(sp)
  806f2c:	dc800217 	ldw	r18,8(sp)
  806f30:	dc400117 	ldw	r17,4(sp)
  806f34:	dc000017 	ldw	r16,0(sp)
  806f38:	dec00404 	addi	sp,sp,16
  806f3c:	f800283a 	ret

00806f40 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
  806f40:	defffc04 	addi	sp,sp,-16
  806f44:	dc400215 	stw	r17,8(sp)
  806f48:	dc000115 	stw	r16,4(sp)
  806f4c:	dfc00315 	stw	ra,12(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
  806f50:	20c00003 	ldbu	r3,0(r4)
  806f54:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
  806f58:	2021883a 	mov	r16,r4
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
  806f5c:	0023883a 	mov	r17,zero
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
  806f60:	18800226 	beq	r3,r2,806f6c <OSTmrStateGet+0x2c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
  806f64:	00bfe244 	movi	r2,-119
  806f68:	00000606 	br	806f84 <OSTmrStateGet+0x44>
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
  806f6c:	00802074 	movhi	r2,129
  806f70:	10a43b04 	addi	r2,r2,-28436
  806f74:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_TMR_ISR;
  806f78:	0023883a 	mov	r17,zero
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
  806f7c:	10000326 	beq	r2,zero,806f8c <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_ISR;
  806f80:	00bfe2c4 	movi	r2,-117
  806f84:	28800005 	stb	r2,0(r5)
  806f88:	00000d06 	br	806fc0 <OSTmrStateGet+0x80>
        return (0);
    }
    OSTmr_Lock();
  806f8c:	d9400015 	stw	r5,0(sp)
  806f90:	0806c0c0 	call	806c0c <OSTmr_Lock>
    state = ptmr->OSTmrState;
  806f94:	81000c43 	ldbu	r4,49(r16)
    switch (state) {
  806f98:	008000c4 	movi	r2,3
  806f9c:	d9400017 	ldw	r5,0(sp)
  806fa0:	20c03fcc 	andi	r3,r4,255
  806fa4:	10c00236 	bltu	r2,r3,806fb0 <OSTmrStateGet+0x70>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
  806fa8:	28000005 	stb	zero,0(r5)
  806fac:	00000206 	br	806fb8 <OSTmrStateGet+0x78>
             break;
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
  806fb0:	00bfe344 	movi	r2,-115
  806fb4:	28800005 	stb	r2,0(r5)
        *perr = OS_ERR_TMR_ISR;
        return (0);
    }
    OSTmr_Lock();
    state = ptmr->OSTmrState;
    switch (state) {
  806fb8:	24403fcc 	andi	r17,r4,255
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
             break;
    }
    OSTmr_Unlock();
  806fbc:	0806c380 	call	806c38 <OSTmr_Unlock>
    return (state);
}
  806fc0:	8805883a 	mov	r2,r17
  806fc4:	dfc00317 	ldw	ra,12(sp)
  806fc8:	dc400217 	ldw	r17,8(sp)
  806fcc:	dc000117 	ldw	r16,4(sp)
  806fd0:	dec00404 	addi	sp,sp,16
  806fd4:	f800283a 	ret

00806fd8 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
  806fd8:	defffc04 	addi	sp,sp,-16
  806fdc:	dc400115 	stw	r17,4(sp)
  806fe0:	dc000015 	stw	r16,0(sp)
  806fe4:	dfc00315 	stw	ra,12(sp)
  806fe8:	dc800215 	stw	r18,8(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
  806fec:	20c00003 	ldbu	r3,0(r4)
  806ff0:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
  806ff4:	2023883a 	mov	r17,r4
  806ff8:	2821883a 	mov	r16,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
  806ffc:	18800326 	beq	r3,r2,80700c <OSTmrRemainGet+0x34>
        *perr = OS_ERR_TMR_INVALID_TYPE;
  807000:	0025883a 	mov	r18,zero
  807004:	00bfe244 	movi	r2,-119
  807008:	00000606 	br	807024 <OSTmrRemainGet+0x4c>
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
  80700c:	00802074 	movhi	r2,129
  807010:	10a43b04 	addi	r2,r2,-28436
  807014:	10800003 	ldbu	r2,0(r2)
  807018:	10000426 	beq	r2,zero,80702c <OSTmrRemainGet+0x54>
        *perr = OS_ERR_TMR_ISR;
  80701c:	0025883a 	mov	r18,zero
  807020:	00bfe2c4 	movi	r2,-117
  807024:	80800005 	stb	r2,0(r16)
  807028:	00002606 	br	8070c4 <OSTmrRemainGet+0xec>
        return (0);
    }
    OSTmr_Lock();
  80702c:	0806c0c0 	call	806c0c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
  807030:	88c00c43 	ldbu	r3,49(r17)
  807034:	00800044 	movi	r2,1
  807038:	18800b26 	beq	r3,r2,807068 <OSTmrRemainGet+0x90>
  80703c:	18801936 	bltu	r3,r2,8070a4 <OSTmrRemainGet+0xcc>
  807040:	00800084 	movi	r2,2
  807044:	18801326 	beq	r3,r2,807094 <OSTmrRemainGet+0xbc>
  807048:	008000c4 	movi	r2,3
  80704c:	1880191e 	bne	r3,r2,8070b4 <OSTmrRemainGet+0xdc>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
  807050:	00c02074 	movhi	r3,129
  807054:	18e43d04 	addi	r3,r3,-28428
  807058:	88800517 	ldw	r2,20(r17)
  80705c:	18c00017 	ldw	r3,0(r3)
  807060:	10e5c83a 	sub	r18,r2,r3
  807064:	00000906 	br	80708c <OSTmrRemainGet+0xb4>
             OSTmr_Unlock();
             *perr  = OS_ERR_NONE;
             return (remain);

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
  807068:	88c00c03 	ldbu	r3,48(r17)
  80706c:	00800084 	movi	r2,2
  807070:	89000617 	ldw	r4,24(r17)
  807074:	1880041e 	bne	r3,r2,807088 <OSTmrRemainGet+0xb0>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
  807078:	2025883a 	mov	r18,r4
  80707c:	2000031e 	bne	r4,zero,80708c <OSTmrRemainGet+0xb4>
                          remain = ptmr->OSTmrPeriod;
  807080:	8c800717 	ldw	r18,28(r17)
  807084:	00000106 	br	80708c <OSTmrRemainGet+0xb4>
                      *perr  = OS_ERR_NONE;
                      break;

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
  807088:	2025883a 	mov	r18,r4
                      OSTmr_Unlock();
  80708c:	0806c380 	call	806c38 <OSTmr_Unlock>
  807090:	00000206 	br	80709c <OSTmrRemainGet+0xc4>
                      break;
             }
             return (remain);

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
  807094:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
  807098:	0025883a 	mov	r18,zero
  80709c:	80000005 	stb	zero,0(r16)
  8070a0:	00000806 	br	8070c4 <OSTmrRemainGet+0xec>
             return (0);

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
  8070a4:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
  8070a8:	0025883a 	mov	r18,zero
  8070ac:	00bfe1c4 	movi	r2,-121
  8070b0:	003fdc06 	br	807024 <OSTmrRemainGet+0x4c>
             return (0);

        default:
             OSTmr_Unlock();
  8070b4:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
  8070b8:	00bfe344 	movi	r2,-115
  8070bc:	80800005 	stb	r2,0(r16)
  8070c0:	0025883a 	mov	r18,zero
             return (0);
    }
}
  8070c4:	9005883a 	mov	r2,r18
  8070c8:	dfc00317 	ldw	ra,12(sp)
  8070cc:	dc800217 	ldw	r18,8(sp)
  8070d0:	dc400117 	ldw	r17,4(sp)
  8070d4:	dc000017 	ldw	r16,0(sp)
  8070d8:	dec00404 	addi	sp,sp,16
  8070dc:	f800283a 	ret

008070e0 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
  8070e0:	defffc04 	addi	sp,sp,-16
  8070e4:	dc400115 	stw	r17,4(sp)
  8070e8:	dc000015 	stw	r16,0(sp)
  8070ec:	dfc00315 	stw	ra,12(sp)
  8070f0:	dc800215 	stw	r18,8(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
  8070f4:	20c00003 	ldbu	r3,0(r4)
  8070f8:	00801904 	movi	r2,100
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
  8070fc:	2021883a 	mov	r16,r4
  807100:	2823883a 	mov	r17,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
  807104:	18800326 	beq	r3,r2,807114 <OSTmrDel+0x34>
        *perr = OS_ERR_TMR_INVALID_TYPE;
  807108:	0007883a 	mov	r3,zero
  80710c:	00bfe244 	movi	r2,-119
  807110:	00000606 	br	80712c <OSTmrDel+0x4c>
        return (OS_FALSE);
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
  807114:	00802074 	movhi	r2,129
  807118:	10a43b04 	addi	r2,r2,-28436
  80711c:	10800003 	ldbu	r2,0(r2)
  807120:	10000426 	beq	r2,zero,807134 <OSTmrDel+0x54>
        *perr  = OS_ERR_TMR_ISR;
  807124:	0007883a 	mov	r3,zero
  807128:	00bfe2c4 	movi	r2,-117
  80712c:	88800005 	stb	r2,0(r17)
  807130:	00001e06 	br	8071ac <OSTmrDel+0xcc>
        return (OS_FALSE);
    }
    OSTmr_Lock();
  807134:	0806c0c0 	call	806c0c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
  807138:	80c00c43 	ldbu	r3,49(r16)
  80713c:	00800084 	movi	r2,2
  807140:	10c00336 	bltu	r2,r3,807150 <OSTmrDel+0x70>
  807144:	04800044 	movi	r18,1
  807148:	1c800a2e 	bgeu	r3,r18,807174 <OSTmrDel+0x94>
  80714c:	00000f06 	br	80718c <OSTmrDel+0xac>
  807150:	008000c4 	movi	r2,3
  807154:	1880111e 	bne	r3,r2,80719c <OSTmrDel+0xbc>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
  807158:	8009883a 	mov	r4,r16
  80715c:	0806a480 	call	806a48 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
  807160:	8009883a 	mov	r4,r16
  807164:	08069400 	call	806940 <OSTmr_Free>
             OSTmr_Unlock();
  807168:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
  80716c:	00c00044 	movi	r3,1
  807170:	00000406 	br	807184 <OSTmrDel+0xa4>
             return (OS_TRUE);

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
  807174:	8009883a 	mov	r4,r16
  807178:	08069400 	call	806940 <OSTmr_Free>
             OSTmr_Unlock();
  80717c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
  807180:	9007883a 	mov	r3,r18
  807184:	88000005 	stb	zero,0(r17)
  807188:	00000806 	br	8071ac <OSTmrDel+0xcc>
             return (OS_TRUE);

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
  80718c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
  807190:	0007883a 	mov	r3,zero
  807194:	00bfe1c4 	movi	r2,-121
  807198:	003fe406 	br	80712c <OSTmrDel+0x4c>
             return (OS_FALSE);

        default:
             OSTmr_Unlock();
  80719c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
  8071a0:	00bfe344 	movi	r2,-115
  8071a4:	88800005 	stb	r2,0(r17)
  8071a8:	0007883a 	mov	r3,zero
             return (OS_FALSE);
    }
}
  8071ac:	1805883a 	mov	r2,r3
  8071b0:	dfc00317 	ldw	ra,12(sp)
  8071b4:	dc800217 	ldw	r18,8(sp)
  8071b8:	dc400117 	ldw	r17,4(sp)
  8071bc:	dc000017 	ldw	r16,0(sp)
  8071c0:	dec00404 	addi	sp,sp,16
  8071c4:	f800283a 	ret

008071c8 <OSTmrSignal>:
INT8U  OSTmrSignal (void)
{
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
  8071c8:	00802074 	movhi	r2,129
  8071cc:	10a42d04 	addi	r2,r2,-28492
  8071d0:	11000017 	ldw	r4,0(r2)
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
  8071d4:	deffff04 	addi	sp,sp,-4
  8071d8:	dfc00015 	stw	ra,0(sp)
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
  8071dc:	0805c700 	call	805c70 <OSSemPost>
    return (err);
}
  8071e0:	10803fcc 	andi	r2,r2,255
  8071e4:	dfc00017 	ldw	ra,0(sp)
  8071e8:	dec00104 	addi	sp,sp,4
  8071ec:	f800283a 	ret

008071f0 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
  8071f0:	defffc04 	addi	sp,sp,-16
  8071f4:	dc800215 	stw	r18,8(sp)
  8071f8:	dc400115 	stw	r17,4(sp)
  8071fc:	dc000015 	stw	r16,0(sp)
  807200:	dfc00315 	stw	ra,12(sp)
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
  807204:	20c00003 	ldbu	r3,0(r4)
  807208:	00801904 	movi	r2,100

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
  80720c:	2021883a 	mov	r16,r4
  807210:	3023883a 	mov	r17,r6
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
  807214:	0009883a 	mov	r4,zero

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
  807218:	2825883a 	mov	r18,r5
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
  80721c:	18800226 	beq	r3,r2,807228 <OSTmrNameGet+0x38>
        *perr = OS_ERR_TMR_INVALID_TYPE;
  807220:	00bfe244 	movi	r2,-119
  807224:	00000606 	br	807240 <OSTmrNameGet+0x50>
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
  807228:	00802074 	movhi	r2,129
  80722c:	10a43b04 	addi	r2,r2,-28436
  807230:	10800003 	ldbu	r2,0(r2)
        *perr = OS_ERR_NAME_GET_ISR;
  807234:	0009883a 	mov	r4,zero
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
        *perr = OS_ERR_TMR_INVALID_TYPE;
        return (0);
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
  807238:	10000326 	beq	r2,zero,807248 <OSTmrNameGet+0x58>
        *perr = OS_ERR_NAME_GET_ISR;
  80723c:	00800444 	movi	r2,17
  807240:	88800005 	stb	r2,0(r17)
  807244:	00001506 	br	80729c <OSTmrNameGet+0xac>
        return (0);
    }
    OSTmr_Lock();
  807248:	0806c0c0 	call	806c0c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
  80724c:	80c00c43 	ldbu	r3,49(r16)
  807250:	18000a26 	beq	r3,zero,80727c <OSTmrNameGet+0x8c>
  807254:	008000c4 	movi	r2,3
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
  807258:	9009883a 	mov	r4,r18
  80725c:	81400804 	addi	r5,r16,32
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
        *perr = OS_ERR_NAME_GET_ISR;
        return (0);
    }
    OSTmr_Lock();
    switch (ptmr->OSTmrState) {
  807260:	10c00a36 	bltu	r2,r3,80728c <OSTmrNameGet+0x9c>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
  807264:	08040ec0 	call	8040ec <OS_StrCopy>
  807268:	1021883a 	mov	r16,r2
             OSTmr_Unlock();
  80726c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
             return (len);
  807270:	81003fcc 	andi	r4,r16,255
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
             OSTmr_Unlock();
             *perr = OS_ERR_NONE;
  807274:	88000005 	stb	zero,0(r17)
  807278:	00000806 	br	80729c <OSTmrNameGet+0xac>
             return (len);

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
  80727c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
  807280:	0009883a 	mov	r4,zero
  807284:	00bfe1c4 	movi	r2,-121
  807288:	003fed06 	br	807240 <OSTmrNameGet+0x50>
             return (0);

        default:
             OSTmr_Unlock();
  80728c:	0806c380 	call	806c38 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
  807290:	00bfe344 	movi	r2,-115
  807294:	88800005 	stb	r2,0(r17)
  807298:	0009883a 	mov	r4,zero
             return (0);
    }
}
  80729c:	2005883a 	mov	r2,r4
  8072a0:	dfc00317 	ldw	ra,12(sp)
  8072a4:	dc800217 	ldw	r18,8(sp)
  8072a8:	dc400117 	ldw	r17,4(sp)
  8072ac:	dc000017 	ldw	r16,0(sp)
  8072b0:	dec00404 	addi	sp,sp,16
  8072b4:	f800283a 	ret

008072b8 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
  8072b8:	defff804 	addi	sp,sp,-32
  8072bc:	dd800615 	stw	r22,24(sp)
  8072c0:	dd400515 	stw	r21,20(sp)
  8072c4:	dd000415 	stw	r20,16(sp)
  8072c8:	dcc00315 	stw	r19,12(sp)
  8072cc:	dc800215 	stw	r18,8(sp)
  8072d0:	dc400115 	stw	r17,4(sp)
  8072d4:	dfc00715 	stw	ra,28(sp)
  8072d8:	dc000015 	stw	r16,0(sp)
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
  8072dc:	00802074 	movhi	r2,129
  8072e0:	10a43b04 	addi	r2,r2,-28436
  8072e4:	10800003 	ldbu	r2,0(r2)
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
  8072e8:	2027883a 	mov	r19,r4
  8072ec:	2829883a 	mov	r20,r5
  8072f0:	302b883a 	mov	r21,r6
  8072f4:	382d883a 	mov	r22,r7
  8072f8:	dc400917 	ldw	r17,36(sp)
  8072fc:	dc800a17 	ldw	r18,40(sp)
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
  807300:	10000326 	beq	r2,zero,807310 <OSTmrCreate+0x58>
        *perr  = OS_ERR_TMR_ISR;
  807304:	0021883a 	mov	r16,zero
  807308:	00bfe2c4 	movi	r2,-117
  80730c:	00001f06 	br	80738c <OSTmrCreate+0xd4>
        return ((OS_TMR *)0);
    }
    OSTmr_Lock();
  807310:	0806c0c0 	call	806c0c <OSTmr_Lock>
static  OS_TMR  *OSTmr_Alloc (void)
{
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
  807314:	01c02074 	movhi	r7,129
  807318:	39e42b04 	addi	r7,r7,-28500
  80731c:	3c000017 	ldw	r16,0(r7)
  807320:	80001826 	beq	r16,zero,807384 <OSTmrCreate+0xcc>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
  807324:	01402074 	movhi	r5,129
  807328:	29643004 	addi	r5,r5,-28480
    OSTmrFree--;
  80732c:	01802074 	movhi	r6,129
  807330:	31a43404 	addi	r6,r6,-28464
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
  807334:	2880000b 	ldhu	r2,0(r5)
    OSTmrFree--;
  807338:	30c0000b 	ldhu	r3,0(r6)

    if (OSTmrFreeList == (OS_TMR *)0) {
        return ((OS_TMR *)0);
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
  80733c:	81000317 	ldw	r4,12(r16)
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
  807340:	10800044 	addi	r2,r2,1
    OSTmrFree--;
  807344:	18ffffc4 	addi	r3,r3,-1
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
  807348:	2880000d 	sth	r2,0(r5)

    if (OSTmrFreeList == (OS_TMR *)0) {
        return ((OS_TMR *)0);
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
  80734c:	39000015 	stw	r4,0(r7)
    ptmr->OSTmrNext = (OS_TCB *)0;
    ptmr->OSTmrPrev = (OS_TCB *)0;
    OSTmrUsed++;
    OSTmrFree--;
  807350:	30c0000d 	sth	r3,0(r6)
    if (ptmr == (OS_TMR *)0) {
        OSTmr_Unlock();
        *perr = OS_ERR_TMR_NON_AVAIL;
        return ((OS_TMR *)0);
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
  807354:	00800044 	movi	r2,1
  807358:	80800c45 	stb	r2,49(r16)
    ptmr->OSTmrDly         = dly;
    ptmr->OSTmrPeriod      = period;
    ptmr->OSTmrOpt         = opt;
  80735c:	85400c05 	stb	r21,48(r16)
    ptmr->OSTmrCallback    = callback;
    ptmr->OSTmrCallbackArg = callback_arg;
  807360:	d8800817 	ldw	r2,32(sp)
        OSTmr_Unlock();
        *perr = OS_ERR_TMR_NON_AVAIL;
        return ((OS_TMR *)0);
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
    ptmr->OSTmrDly         = dly;
  807364:	84c00615 	stw	r19,24(r16)
    ptmr->OSTmrPeriod      = period;
  807368:	85000715 	stw	r20,28(r16)
    ptmr->OSTmrOpt         = opt;
    ptmr->OSTmrCallback    = callback;
  80736c:	85800115 	stw	r22,4(r16)
    ptmr->OSTmrCallbackArg = callback_arg;
  807370:	80800215 	stw	r2,8(r16)
    if (OSTmrFreeList == (OS_TMR *)0) {
        return ((OS_TMR *)0);
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    ptmr->OSTmrNext = (OS_TCB *)0;
  807374:	80000315 	stw	zero,12(r16)
    ptmr->OSTmrPrev = (OS_TCB *)0;
  807378:	80000415 	stw	zero,16(r16)
    ptmr->OSTmrPeriod      = period;
    ptmr->OSTmrOpt         = opt;
    ptmr->OSTmrCallback    = callback;
    ptmr->OSTmrCallbackArg = callback_arg;
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
  80737c:	8800051e 	bne	r17,zero,807394 <OSTmrCreate+0xdc>
  807380:	00001406 	br	8073d4 <OSTmrCreate+0x11c>
        return ((OS_TMR *)0);
    }
    OSTmr_Lock();
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
    if (ptmr == (OS_TMR *)0) {
        OSTmr_Unlock();
  807384:	0806c380 	call	806c38 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
  807388:	00bfe184 	movi	r2,-122
  80738c:	90800005 	stb	r2,0(r18)
  807390:	00001206 	br	8073dc <OSTmrCreate+0x124>
    ptmr->OSTmrOpt         = opt;
    ptmr->OSTmrCallback    = callback;
    ptmr->OSTmrCallbackArg = callback_arg;
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
  807394:	8809883a 	mov	r4,r17
  807398:	08041180 	call	804118 <OS_StrLen>
        if (len < OS_TMR_CFG_NAME_SIZE) {
  80739c:	10803fcc 	andi	r2,r2,255
  8073a0:	00c003c4 	movi	r3,15
  8073a4:	18800436 	bltu	r3,r2,8073b8 <OSTmrCreate+0x100>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
  8073a8:	880b883a 	mov	r5,r17
  8073ac:	81000804 	addi	r4,r16,32
  8073b0:	08040ec0 	call	8040ec <OS_StrCopy>
  8073b4:	00000706 	br	8073d4 <OSTmrCreate+0x11c>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
  8073b8:	008008c4 	movi	r2,35
  8073bc:	80800805 	stb	r2,32(r16)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
  8073c0:	80000845 	stb	zero,33(r16)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
  8073c4:	00bfe304 	movi	r2,-116
  8073c8:	90800005 	stb	r2,0(r18)
            OSTmr_Unlock();
  8073cc:	0806c380 	call	806c38 <OSTmr_Unlock>
  8073d0:	00000206 	br	8073dc <OSTmrCreate+0x124>
            return (ptmr);
        }
    }
#endif
    OSTmr_Unlock();
  8073d4:	0806c380 	call	806c38 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
  8073d8:	90000005 	stb	zero,0(r18)
    return (ptmr);
}
  8073dc:	8005883a 	mov	r2,r16
  8073e0:	dfc00717 	ldw	ra,28(sp)
  8073e4:	dd800617 	ldw	r22,24(sp)
  8073e8:	dd400517 	ldw	r21,20(sp)
  8073ec:	dd000417 	ldw	r20,16(sp)
  8073f0:	dcc00317 	ldw	r19,12(sp)
  8073f4:	dc800217 	ldw	r18,8(sp)
  8073f8:	dc400117 	ldw	r17,4(sp)
  8073fc:	dc000017 	ldw	r16,0(sp)
  807400:	dec00804 	addi	sp,sp,32
  807404:	f800283a 	ret

00807408 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807408:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80740c:	018001c4 	movi	r6,7
  807410:	01c0fa04 	movi	r7,1000
  807414:	01004074 	movhi	r4,257
  807418:	21042804 	addi	r4,r4,4256
  80741c:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  807420:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  807424:	080752c0 	call	80752c <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  807428:	01002074 	movhi	r4,129
  80742c:	21228504 	addi	r4,r4,-30188
  807430:	01402074 	movhi	r5,129
  807434:	29632204 	addi	r5,r5,-29560
  807438:	08076800 	call	807680 <alt_dev_llist_insert>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( P_COUNTER, p_counter);
  80743c:	00c00044 	movi	r3,1
  807440:	00804074 	movhi	r2,257
  807444:	10840004 	addi	r2,r2,4096
  807448:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( HT18_LEMONDE_STREIT, ht18_lemonde_streit);
}
  80744c:	dfc00017 	ldw	ra,0(sp)
  807450:	dec00104 	addi	sp,sp,4
  807454:	f800283a 	ret

00807458 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  807458:	deffff04 	addi	sp,sp,-4
  80745c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_HT18_LEMONDE_STREIT, nios2_ht18_lemonde_streit);
  807460:	0807b680 	call	807b68 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  807464:	00800044 	movi	r2,1
  807468:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80746c:	dfc00017 	ldw	ra,0(sp)
  807470:	dec00104 	addi	sp,sp,4
  807474:	f800283a 	ret

00807478 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  807478:	20800017 	ldw	r2,0(r4)
  80747c:	21c00217 	ldw	r7,8(r4)
  807480:	11000a04 	addi	r4,r2,40
  807484:	08074f81 	jmpi	8074f8 <altera_avalon_jtag_uart_write>

00807488 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  807488:	20800017 	ldw	r2,0(r4)
  80748c:	21c00217 	ldw	r7,8(r4)
  807490:	11000a04 	addi	r4,r2,40
  807494:	08074981 	jmpi	807498 <altera_avalon_jtag_uart_read>

00807498 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
  807498:	21000017 	ldw	r4,0(r4)
  80749c:	3890000c 	andi	r2,r7,16384

  char * ptr = buffer;
  char * end = buffer + space;
  8074a0:	2993883a 	add	r9,r5,r6
  8074a4:	1010c03a 	cmpne	r8,r2,zero
  8074a8:	2807883a 	mov	r3,r5
  8074ac:	00000806 	br	8074d0 <altera_avalon_jtag_uart_read+0x38>

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8074b0:	21800037 	ldwio	r6,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  8074b4:	30a0000c 	andi	r2,r6,32768
  8074b8:	10000326 	beq	r2,zero,8074c8 <altera_avalon_jtag_uart_read+0x30>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8074bc:	19800005 	stb	r6,0(r3)
  8074c0:	18c00044 	addi	r3,r3,1
  8074c4:	00000206 	br	8074d0 <altera_avalon_jtag_uart_read+0x38>
    else if (ptr != buffer)
  8074c8:	1940031e 	bne	r3,r5,8074d8 <altera_avalon_jtag_uart_read+0x40>
      break;
    else if(flags & O_NONBLOCK)
  8074cc:	4000081e 	bne	r8,zero,8074f0 <altera_avalon_jtag_uart_read+0x58>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  8074d0:	1a7ff736 	bltu	r3,r9,8074b0 <altera_avalon_jtag_uart_read+0x18>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
  8074d4:	19400226 	beq	r3,r5,8074e0 <altera_avalon_jtag_uart_read+0x48>
    return ptr - buffer;
  8074d8:	1945c83a 	sub	r2,r3,r5
  8074dc:	f800283a 	ret
  else if (flags & O_NONBLOCK)
  8074e0:	3890000c 	andi	r2,r7,16384
  8074e4:	1000021e 	bne	r2,zero,8074f0 <altera_avalon_jtag_uart_read+0x58>
  8074e8:	00bffec4 	movi	r2,-5
  8074ec:	f800283a 	ret
  8074f0:	00bffd44 	movi	r2,-11
    return -EWOULDBLOCK;
  else
    return -EIO;
}
  8074f4:	f800283a 	ret

008074f8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
  8074f8:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
  8074fc:	298f883a 	add	r7,r5,r6
  807500:	20c00104 	addi	r3,r4,4
  807504:	00000606 	br	807520 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  807508:	18800037 	ldwio	r2,0(r3)
  80750c:	10bfffec 	andhi	r2,r2,65535
  807510:	10000326 	beq	r2,zero,807520 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  807514:	28800007 	ldb	r2,0(r5)
  807518:	29400044 	addi	r5,r5,1
  80751c:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  807520:	29fff936 	bltu	r5,r7,807508 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
  807524:	3005883a 	mov	r2,r6
  807528:	f800283a 	ret

0080752c <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80752c:	02002074 	movhi	r8,129
  807530:	42242704 	addi	r8,r8,-28516
  807534:	40800017 	ldw	r2,0(r8)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  807538:	defffe04 	addi	sp,sp,-8
  80753c:	3807883a 	mov	r3,r7
  807540:	dfc00115 	stw	ra,4(sp)
  807544:	200f883a 	mov	r7,r4
  807548:	1000011e 	bne	r2,zero,807550 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  80754c:	40c00015 	stw	r3,0(r8)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  807550:	008001c4 	movi	r2,7
  807554:	38800135 	stwio	r2,4(r7)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  807558:	2809883a 	mov	r4,r5
  80755c:	300b883a 	mov	r5,r6
  807560:	01802034 	movhi	r6,128
  807564:	319d5f04 	addi	r6,r6,30076
  807568:	d8000015 	stw	zero,0(sp)
  80756c:	080780c0 	call	80780c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  807570:	dfc00117 	ldw	ra,4(sp)
  807574:	dec00204 	addi	sp,sp,8
  807578:	f800283a 	ret

0080757c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80757c:	defffe04 	addi	sp,sp,-8
  807580:	dfc00115 	stw	ra,4(sp)
  807584:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  807588:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80758c:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807590:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807594:	00bfff84 	movi	r2,-2
  807598:	8084703a 	and	r2,r16,r2
  80759c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  8075a0:	0803c340 	call	803c34 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8075a4:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  8075a8:	dfc00117 	ldw	ra,4(sp)
  8075ac:	dc000017 	ldw	r16,0(sp)
  8075b0:	dec00204 	addi	sp,sp,8
  8075b4:	f800283a 	ret

008075b8 <alt_get_errno>:

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8075b8:	00802074 	movhi	r2,129
  8075bc:	10a32504 	addi	r2,r2,-29548
  8075c0:	10c00017 	ldw	r3,0(r2)
}
  8075c4:	00802074 	movhi	r2,129
  8075c8:	10a42304 	addi	r2,r2,-28532

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  8075cc:	18000126 	beq	r3,zero,8075d4 <alt_get_errno+0x1c>
  8075d0:	1800683a 	jmp	r3
}
  8075d4:	f800283a 	ret

008075d8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8075d8:	defffd04 	addi	sp,sp,-12
  8075dc:	dc000015 	stw	r16,0(sp)
  8075e0:	dfc00215 	stw	ra,8(sp)
  8075e4:	dc400115 	stw	r17,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8075e8:	01400304 	movi	r5,12
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8075ec:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8075f0:	20001216 	blt	r4,zero,80763c <close+0x64>
  8075f4:	080288c0 	call	80288c <__mulsi3>
  8075f8:	00c02074 	movhi	r3,129
  8075fc:	18e29a04 	addi	r3,r3,-30104
  807600:	10c9883a 	add	r4,r2,r3

  if (fd)
  807604:	20000d26 	beq	r4,zero,80763c <close+0x64>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  807608:	20800017 	ldw	r2,0(r4)
  80760c:	10800417 	ldw	r2,16(r2)
  807610:	10000f26 	beq	r2,zero,807650 <close+0x78>
  807614:	103ee83a 	callr	r2
  807618:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80761c:	8009883a 	mov	r4,r16
  807620:	0807b0c0 	call	807b0c <alt_release_fd>
    if (rval < 0)
  807624:	0009883a 	mov	r4,zero
  807628:	88000c0e 	bge	r17,zero,80765c <close+0x84>
    {
      ALT_ERRNO = -rval;
  80762c:	08075b80 	call	8075b8 <alt_get_errno>
  807630:	0447c83a 	sub	r3,zero,r17
  807634:	013fffc4 	movi	r4,-1
  807638:	00000306 	br	807648 <close+0x70>
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80763c:	08075b80 	call	8075b8 <alt_get_errno>
  807640:	013fffc4 	movi	r4,-1
  807644:	00c01444 	movi	r3,81
  807648:	10c00015 	stw	r3,0(r2)
  80764c:	00000306 	br	80765c <close+0x84>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  807650:	8009883a 	mov	r4,r16
  807654:	0807b0c0 	call	807b0c <alt_release_fd>
  807658:	0009883a 	mov	r4,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  80765c:	2005883a 	mov	r2,r4
  807660:	dfc00217 	ldw	ra,8(sp)
  807664:	dc400117 	ldw	r17,4(sp)
  807668:	dc000017 	ldw	r16,0(sp)
  80766c:	dec00304 	addi	sp,sp,12
  807670:	f800283a 	ret

00807674 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  807674:	f800283a 	ret

00807678 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  807678:	3005883a 	mov	r2,r6
  80767c:	f800283a 	ret

00807680 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  807680:	deffff04 	addi	sp,sp,-4
  807684:	dfc00015 	stw	ra,0(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  807688:	20000326 	beq	r4,zero,807698 <alt_dev_llist_insert+0x18>
  80768c:	20800217 	ldw	r2,8(r4)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  list->next           = entry;
  807690:	000d883a 	mov	r6,zero
  807694:	10000c1e 	bne	r2,zero,8076c8 <alt_dev_llist_insert+0x48>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  807698:	00802074 	movhi	r2,129
  80769c:	10a32504 	addi	r2,r2,-29548
  8076a0:	10800017 	ldw	r2,0(r2)
  8076a4:	00c02074 	movhi	r3,129
  8076a8:	18e42304 	addi	r3,r3,-28532
  8076ac:	10000226 	beq	r2,zero,8076b8 <alt_dev_llist_insert+0x38>
  8076b0:	103ee83a 	callr	r2
  8076b4:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EINVAL;
  8076b8:	00800584 	movi	r2,22
  8076bc:	01bffa84 	movi	r6,-22
  8076c0:	18800015 	stw	r2,0(r3)
  8076c4:	00000606 	br	8076e0 <alt_dev_llist_insert+0x60>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  8076c8:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8076cc:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
  8076d0:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
  8076d4:	28800017 	ldw	r2,0(r5)
  list->next           = entry;
  8076d8:	29000015 	stw	r4,0(r5)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  8076dc:	11000115 	stw	r4,4(r2)
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  8076e0:	3005883a 	mov	r2,r6
  8076e4:	dfc00017 	ldw	ra,0(sp)
  8076e8:	dec00104 	addi	sp,sp,4
  8076ec:	f800283a 	ret

008076f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8076f0:	defffe04 	addi	sp,sp,-8
  8076f4:	dc000015 	stw	r16,0(sp)
  8076f8:	04002074 	movhi	r16,129
  8076fc:	84211c04 	addi	r16,r16,-31632
  807700:	dfc00115 	stw	ra,4(sp)
  807704:	00000306 	br	807714 <_do_ctors+0x24>
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
        (*ctor) (); 
  807708:	80800017 	ldw	r2,0(r16)

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80770c:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
  807710:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  807714:	00802074 	movhi	r2,129
  807718:	10a11c04 	addi	r2,r2,-31632
  80771c:	80bffa2e 	bgeu	r16,r2,807708 <_do_ctors+0x18>
        (*ctor) (); 
}
  807720:	dfc00117 	ldw	ra,4(sp)
  807724:	dc000017 	ldw	r16,0(sp)
  807728:	dec00204 	addi	sp,sp,8
  80772c:	f800283a 	ret

00807730 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  807730:	defffe04 	addi	sp,sp,-8
  807734:	dc000015 	stw	r16,0(sp)
  807738:	04002074 	movhi	r16,129
  80773c:	84211c04 	addi	r16,r16,-31632
  807740:	dfc00115 	stw	ra,4(sp)
  807744:	00000306 	br	807754 <_do_dtors+0x24>
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
        (*dtor) (); 
  807748:	80800017 	ldw	r2,0(r16)

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80774c:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
  807750:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  807754:	00802074 	movhi	r2,129
  807758:	10a11d04 	addi	r2,r2,-31628
  80775c:	80bffa2e 	bgeu	r16,r2,807748 <_do_dtors+0x18>
        (*dtor) (); 
}
  807760:	dfc00117 	ldw	ra,4(sp)
  807764:	dc000017 	ldw	r16,0(sp)
  807768:	dec00204 	addi	sp,sp,8
  80776c:	f800283a 	ret

00807770 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
  807770:	f800283a 	ret

00807774 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  807774:	000530fa 	rdctl	r2,ienable
  807778:	00c00044 	movi	r3,1
  80777c:	1946983a 	sll	r3,r3,r5
  807780:	10c4703a 	and	r2,r2,r3

    return (irq_enabled & (1 << irq)) ? 1: 0;
}
  807784:	1004c03a 	cmpne	r2,r2,zero
  807788:	f800283a 	ret

0080778c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80778c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  807790:	00bfff84 	movi	r2,-2
  807794:	3084703a 	and	r2,r6,r2
  807798:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  80779c:	01002074 	movhi	r4,129
  8077a0:	21244304 	addi	r4,r4,-28404
  8077a4:	00c00044 	movi	r3,1
  8077a8:	20800017 	ldw	r2,0(r4)
  8077ac:	1946983a 	sll	r3,r3,r5
  8077b0:	10c4b03a 	or	r2,r2,r3
  8077b4:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8077b8:	20800017 	ldw	r2,0(r4)
  8077bc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8077c0:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  8077c4:	0005883a 	mov	r2,zero
  8077c8:	f800283a 	ret

008077cc <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8077cc:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8077d0:	00bfff84 	movi	r2,-2
  8077d4:	3084703a 	and	r2,r6,r2
  8077d8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  8077dc:	01002074 	movhi	r4,129
  8077e0:	21244304 	addi	r4,r4,-28404
  8077e4:	00ffff84 	movi	r3,-2
  8077e8:	20800017 	ldw	r2,0(r4)
  8077ec:	1946183a 	rol	r3,r3,r5
  8077f0:	10c4703a 	and	r2,r2,r3
  8077f4:	20800015 	stw	r2,0(r4)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8077f8:	20800017 	ldw	r2,0(r4)
  8077fc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807800:	3001703a 	wrctl	status,r6
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  807804:	0005883a 	mov	r2,zero
  807808:	f800283a 	ret

0080780c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80780c:	08078101 	jmpi	807810 <alt_iic_isr_register>

00807810 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807810:	defffe04 	addi	sp,sp,-8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807814:	008007c4 	movi	r2,31
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  807818:	dfc00115 	stw	ra,4(sp)
  80781c:	dc000015 	stw	r16,0(sp)
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  807820:	00fffa84 	movi	r3,-22
  807824:	11401016 	blt	r2,r5,807868 <alt_iic_isr_register+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  807828:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80782c:	00bfff84 	movi	r2,-2
  807830:	8084703a 	and	r2,r16,r2
  807834:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  807838:	280490fa 	slli	r2,r5,3
  80783c:	00c02074 	movhi	r3,129
  807840:	18f7e804 	addi	r3,r3,-8288
  807844:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = isr_context;
  807848:	11c00115 	stw	r7,4(r2)
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  80784c:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  807850:	30000226 	beq	r6,zero,80785c <alt_iic_isr_register+0x4c>
  807854:	080778c0 	call	80778c <alt_ic_irq_enable>
  807858:	00000106 	br	807860 <alt_iic_isr_register+0x50>
  80785c:	08077cc0 	call	8077cc <alt_ic_irq_disable>
  807860:	1007883a 	mov	r3,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  807864:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  807868:	1805883a 	mov	r2,r3
  80786c:	dfc00117 	ldw	ra,4(sp)
  807870:	dc000017 	ldw	r16,0(sp)
  807874:	dec00204 	addi	sp,sp,8
  807878:	f800283a 	ret

0080787c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80787c:	defffd04 	addi	sp,sp,-12
  807880:	dc400115 	stw	r17,4(sp)
  807884:	2023883a 	mov	r17,r4
  int old;

  old = open (name, flags, mode);
  807888:	2809883a 	mov	r4,r5
  80788c:	300b883a 	mov	r5,r6
  807890:	380d883a 	mov	r6,r7
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  807894:	dc000015 	stw	r16,0(sp)
  807898:	dfc00215 	stw	ra,8(sp)
  int old;

  old = open (name, flags, mode);
  80789c:	08079900 	call	807990 <open>
  8078a0:	1021883a 	mov	r16,r2

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8078a4:	1009883a 	mov	r4,r2
  8078a8:	01400304 	movi	r5,12
{
  int old;

  old = open (name, flags, mode);

  if (old >= 0)
  8078ac:	10001016 	blt	r2,zero,8078f0 <alt_open_fd+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
  8078b0:	080288c0 	call	80288c <__mulsi3>
  8078b4:	00c02074 	movhi	r3,129
  8078b8:	18e29a04 	addi	r3,r3,-30104
  8078bc:	10c5883a 	add	r2,r2,r3
  8078c0:	11000017 	ldw	r4,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8078c4:	10c00217 	ldw	r3,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
  8078c8:	10800117 	ldw	r2,4(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  8078cc:	89000015 	stw	r4,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8078d0:	8009883a 	mov	r4,r16

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8078d4:	88c00215 	stw	r3,8(r17)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
  8078d8:	88800115 	stw	r2,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  }
} 
  8078dc:	dfc00217 	ldw	ra,8(sp)
  8078e0:	dc400117 	ldw	r17,4(sp)
  8078e4:	dc000017 	ldw	r16,0(sp)
  8078e8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  8078ec:	0807b0c1 	jmpi	807b0c <alt_release_fd>
  }
} 
  8078f0:	dfc00217 	ldw	ra,8(sp)
  8078f4:	dc400117 	ldw	r17,4(sp)
  8078f8:	dc000017 	ldw	r16,0(sp)
  8078fc:	dec00304 	addi	sp,sp,12
  807900:	f800283a 	ret

00807904 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  807904:	defffa04 	addi	sp,sp,-24
  807908:	dcc00315 	stw	r19,12(sp)
  80790c:	dc400115 	stw	r17,4(sp)
  807910:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  807914:	04407fc4 	movi	r17,511
  807918:	04002074 	movhi	r16,129
  80791c:	84229d04 	addi	r16,r16,-30092
  807920:	04c00044 	movi	r19,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  807924:	dd000415 	stw	r20,16(sp)
  807928:	dc800215 	stw	r18,8(sp)
  80792c:	3029883a 	mov	r20,r6
  807930:	2825883a 	mov	r18,r5
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  807934:	980d883a 	mov	r6,r19
  807938:	200b883a 	mov	r5,r4
  80793c:	880f883a 	mov	r7,r17
  807940:	8009883a 	mov	r4,r16
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  807944:	dfc00515 	stw	ra,20(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  807948:	080787c0 	call	80787c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80794c:	900b883a 	mov	r5,r18
  807950:	813ffd04 	addi	r4,r16,-12
  807954:	880f883a 	mov	r7,r17
  807958:	000d883a 	mov	r6,zero
  80795c:	080787c0 	call	80787c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  807960:	81000304 	addi	r4,r16,12
  807964:	a00b883a 	mov	r5,r20
  807968:	980d883a 	mov	r6,r19
  80796c:	880f883a 	mov	r7,r17
}  
  807970:	dfc00517 	ldw	ra,20(sp)
  807974:	dd000417 	ldw	r20,16(sp)
  807978:	dcc00317 	ldw	r19,12(sp)
  80797c:	dc800217 	ldw	r18,8(sp)
  807980:	dc400117 	ldw	r17,4(sp)
  807984:	dc000017 	ldw	r16,0(sp)
  807988:	dec00604 	addi	sp,sp,24
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80798c:	080787c1 	jmpi	80787c <alt_open_fd>

00807990 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  807990:	defff904 	addi	sp,sp,-28
  807994:	dd000415 	stw	r20,16(sp)
  807998:	2829883a 	mov	r20,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80799c:	01402074 	movhi	r5,129
  8079a0:	29632204 	addi	r5,r5,-29560
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8079a4:	dd400515 	stw	r21,20(sp)
  8079a8:	dcc00315 	stw	r19,12(sp)
  8079ac:	dc000015 	stw	r16,0(sp)
  8079b0:	dfc00615 	stw	ra,24(sp)
  8079b4:	dc800215 	stw	r18,8(sp)
  8079b8:	dc400115 	stw	r17,4(sp)
  8079bc:	302b883a 	mov	r21,r6
  8079c0:	2027883a 	mov	r19,r4
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8079c4:	0807cd00 	call	807cd0 <alt_find_dev>
  8079c8:	1021883a 	mov	r16,r2
  8079cc:	10000226 	beq	r2,zero,8079d8 <open+0x48>
  8079d0:	0025883a 	mov	r18,zero
  8079d4:	00000a06 	br	807a00 <open+0x70>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8079d8:	9809883a 	mov	r4,r19
  8079dc:	0807d400 	call	807d40 <alt_find_file>
  8079e0:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8079e4:	1000051e 	bne	r2,zero,8079fc <open+0x6c>
  8079e8:	047fffc4 	movi	r17,-1
  8079ec:	043ffb44 	movi	r16,-19
  8079f0:	00002b06 	br	807aa0 <open+0x110>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8079f4:	043ffcc4 	movi	r16,-13
  8079f8:	00002906 	br	807aa0 <open+0x110>

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8079fc:	04800044 	movi	r18,1
  {
    if ((index = alt_get_fd (dev)) < 0)
  807a00:	8009883a 	mov	r4,r16
  807a04:	0807ddc0 	call	807ddc <alt_get_fd>
  807a08:	1023883a 	mov	r17,r2
  807a0c:	10003316 	blt	r2,zero,807adc <open+0x14c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  807a10:	1009883a 	mov	r4,r2
  807a14:	01400304 	movi	r5,12
  807a18:	080288c0 	call	80288c <__mulsi3>
  807a1c:	01402074 	movhi	r5,129
  807a20:	29629a04 	addi	r5,r5,-30104
  807a24:	1149883a 	add	r4,r2,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  807a28:	00900034 	movhi	r2,16384
  807a2c:	10bfffc4 	addi	r2,r2,-1
  807a30:	a086703a 	and	r3,r20,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  807a34:	9004c03a 	cmpne	r2,r18,zero
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  807a38:	20c00215 	stw	r3,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  807a3c:	1000101e 	bne	r2,zero,807a80 <open+0xf0>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807a40:	00802074 	movhi	r2,129
  807a44:	10a32404 	addi	r2,r2,-29552
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  807a48:	21800017 	ldw	r6,0(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807a4c:	11c00017 	ldw	r7,0(r2)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  807a50:	18900034 	orhi	r2,r3,16384
  807a54:	20800215 	stw	r2,8(r4)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  807a58:	2807883a 	mov	r3,r5
  807a5c:	000b883a 	mov	r5,zero
  807a60:	18800017 	ldw	r2,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807a64:	29400044 	addi	r5,r5,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  807a68:	1180031e 	bne	r2,r6,807a78 <open+0xe8>
  807a6c:	18800217 	ldw	r2,8(r3)
  807a70:	1000010e 	bge	r2,zero,807a78 <open+0xe8>
  807a74:	193fdf1e 	bne	r3,r4,8079f4 <open+0x64>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  807a78:	18c00304 	addi	r3,r3,12
  807a7c:	397ff82e 	bgeu	r7,r5,807a60 <open+0xd0>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  807a80:	80800317 	ldw	r2,12(r16)
  807a84:	10001726 	beq	r2,zero,807ae4 <open+0x154>
  807a88:	980b883a 	mov	r5,r19
  807a8c:	a00d883a 	mov	r6,r20
  807a90:	a80f883a 	mov	r7,r21
  807a94:	103ee83a 	callr	r2
  807a98:	1021883a 	mov	r16,r2
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  807a9c:	1000110e 	bge	r2,zero,807ae4 <open+0x154>
  {
    alt_release_fd (index);  
  807aa0:	8809883a 	mov	r4,r17
  807aa4:	0807b0c0 	call	807b0c <alt_release_fd>
  807aa8:	00802074 	movhi	r2,129
  807aac:	10a32504 	addi	r2,r2,-29548
  807ab0:	10800017 	ldw	r2,0(r2)
  807ab4:	1000031e 	bne	r2,zero,807ac4 <open+0x134>
  807ab8:	00c02074 	movhi	r3,129
  807abc:	18e42304 	addi	r3,r3,-28532
  807ac0:	00000206 	br	807acc <open+0x13c>
  807ac4:	103ee83a 	callr	r2
  807ac8:	1007883a 	mov	r3,r2
    ALT_ERRNO = -status;
  807acc:	0405c83a 	sub	r2,zero,r16
  807ad0:	047fffc4 	movi	r17,-1
  807ad4:	18800015 	stw	r2,0(r3)
  807ad8:	00000206 	br	807ae4 <open+0x154>
  807adc:	1021883a 	mov	r16,r2
  807ae0:	003fef06 	br	807aa0 <open+0x110>
  }
  
  /* return the reference upon success */

  return index;
}
  807ae4:	8805883a 	mov	r2,r17
  807ae8:	dfc00617 	ldw	ra,24(sp)
  807aec:	dd400517 	ldw	r21,20(sp)
  807af0:	dd000417 	ldw	r20,16(sp)
  807af4:	dcc00317 	ldw	r19,12(sp)
  807af8:	dc800217 	ldw	r18,8(sp)
  807afc:	dc400117 	ldw	r17,4(sp)
  807b00:	dc000017 	ldw	r16,0(sp)
  807b04:	dec00704 	addi	sp,sp,28
  807b08:	f800283a 	ret

00807b0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  807b0c:	defffd04 	addi	sp,sp,-12
  if (fd > 2)
  807b10:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  807b14:	dc400115 	stw	r17,4(sp)
  807b18:	dc000015 	stw	r16,0(sp)
  807b1c:	dfc00215 	stw	ra,8(sp)
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  807b20:	01400304 	movi	r5,12
  807b24:	04402074 	movhi	r17,129
  807b28:	8c629a04 	addi	r17,r17,-30104
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  807b2c:	2021883a 	mov	r16,r4
  if (fd > 2)
  807b30:	1100080e 	bge	r2,r4,807b54 <alt_release_fd+0x48>
  {
    alt_fd_list[fd].fd_flags = 0;
  807b34:	080288c0 	call	80288c <__mulsi3>
  807b38:	1445883a 	add	r2,r2,r17
    alt_fd_list[fd].dev      = 0;
  807b3c:	8009883a 	mov	r4,r16
  807b40:	01400304 	movi	r5,12

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  807b44:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
  807b48:	080288c0 	call	80288c <__mulsi3>
  807b4c:	1445883a 	add	r2,r2,r17
  807b50:	10000015 	stw	zero,0(r2)
  }
}
  807b54:	dfc00217 	ldw	ra,8(sp)
  807b58:	dc400117 	ldw	r17,4(sp)
  807b5c:	dc000017 	ldw	r16,0(sp)
  807b60:	dec00304 	addi	sp,sp,12
  807b64:	f800283a 	ret

00807b68 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  807b68:	000170fa 	wrctl	ienable,zero
}
  807b6c:	f800283a 	ret

00807b70 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  807b70:	defff504 	addi	sp,sp,-44

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  807b74:	d1214217 	ldw	r4,-31480(gp)

      stw ra,  0(sp)
  807b78:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  807b7c:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  807b80:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  807b84:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  807b88:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  807b8c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  807b90:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  807b94:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  807b98:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  807b9c:	dc000915 	stw	r16,36(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  807ba0:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  807ba4:	0807c5c0 	call	807c5c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  807ba8:	d1213e17 	ldw	r4,-31496(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  807bac:	d1613687 	ldb	r5,-31526(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  807bb0:	d1214215 	stw	r4,-31480(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  807bb4:	d16136c5 	stb	r5,-31525(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  807bb8:	26c00017 	ldw	sp,0(r4)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  807bbc:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  807bc0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  807bc4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  807bc8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  807bcc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  807bd0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  807bd4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  807bd8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  807bdc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  807be0:	dc000917 	ldw	r16,36(sp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  807be4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  807be8:	f800283a 	ret

00807bec <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  807bec:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  807bf0:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  807bf4:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  807bf8:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  807bfc:	0807c5c0 	call	807c5c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  807c00:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  807c04:	d4a13405 	stb	r18,-31536(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  807c08:	003fe706 	br	807ba8 <OSCtxSw+0x38>

00807c0c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  807c0c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  807c10:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  807c14:	10800054 	ori	r2,r2,1
      wrctl status, r2
  807c18:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  807c1c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  807c20:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  807c24:	dec00204 	addi	sp,sp,8

      callr r2
  807c28:	103ee83a 	callr	r2

      nop
  807c2c:	0001883a 	nop

00807c30 <OSTaskStkInit>:

   frame_pointer = (INT32U*) local_impure_ptr;
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  807c30:	00bfff04 	movi	r2,-4
  807c34:	3084703a 	and	r2,r6,r2
  807c38:	10bff304 	addi	r2,r2,-52
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  807c3c:	00c02034 	movhi	r3,128
  807c40:	18df0404 	addi	r3,r3,31760
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  807c44:	11000c15 	stw	r4,48(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  807c48:	11400b15 	stw	r5,44(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  807c4c:	10c00015 	stw	r3,0(r2)
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
}
  807c50:	f800283a 	ret

00807c54 <OSTaskCreateHook>:
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  807c54:	f800283a 	ret

00807c58 <OSTaskDelHook>:
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  807c58:	f800283a 	ret

00807c5c <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
}
  807c5c:	f800283a 	ret

00807c60 <OSTaskStatHook>:
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
}
  807c60:	f800283a 	ret

00807c64 <OSInitHookBegin>:
}

void OSInitHookBegin(void)
{
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
  807c64:	d0214a0d 	sth	zero,-31448(gp)
#endif
}
  807c68:	f800283a 	ret

00807c6c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
}
  807c6c:	f800283a 	ret

00807c70 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
}
  807c70:	f800283a 	ret

00807c74 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
}
  807c74:	f800283a 	ret

00807c78 <OSTimeTickHook>:
#endif

void OSTimeTickHook (void)
{
#if OS_TMR_EN > 0
    OSTmrCtr++;
  807c78:	d0a14a0b 	ldhu	r2,-31448(gp)
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  807c7c:	deffff04 	addi	sp,sp,-4
  807c80:	dfc00015 	stw	ra,0(sp)
#if OS_TMR_EN > 0
    OSTmrCtr++;
  807c84:	10800044 	addi	r2,r2,1
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
  807c88:	113fffcc 	andi	r4,r2,65535
#endif

void OSTimeTickHook (void)
{
#if OS_TMR_EN > 0
    OSTmrCtr++;
  807c8c:	d0a14a0d 	sth	r2,-31448(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
  807c90:	08025380 	call	802538 <__floatsidf>
  807c94:	0011883a 	mov	r8,zero
  807c98:	02501674 	movhi	r9,16473
  807c9c:	180b883a 	mov	r5,r3
  807ca0:	480f883a 	mov	r7,r9
  807ca4:	1009883a 	mov	r4,r2
  807ca8:	400d883a 	mov	r6,r8
  807cac:	08083000 	call	808300 <__gedf2>
  807cb0:	10000416 	blt	r2,zero,807cc4 <OSTimeTickHook+0x4c>
        OSTmrCtr = 0;
  807cb4:	d0214a0d 	sth	zero,-31448(gp)
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  807cb8:	dfc00017 	ldw	ra,0(sp)
  807cbc:	dec00104 	addi	sp,sp,4
{
#if OS_TMR_EN > 0
    OSTmrCtr++;
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
        OSTmrCtr = 0;
        OSTmrSignal();
  807cc0:	08071c81 	jmpi	8071c8 <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  807cc4:	dfc00017 	ldw	ra,0(sp)
  807cc8:	dec00104 	addi	sp,sp,4
  807ccc:	f800283a 	ret

00807cd0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  807cd0:	defffb04 	addi	sp,sp,-20
  807cd4:	dcc00315 	stw	r19,12(sp)
  807cd8:	dc800215 	stw	r18,8(sp)
  807cdc:	dc400115 	stw	r17,4(sp)
  807ce0:	dc000015 	stw	r16,0(sp)
  807ce4:	dfc00415 	stw	ra,16(sp)
  alt_dev* next = (alt_dev*) llist->next;
  807ce8:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  807cec:	2823883a 	mov	r17,r5
  807cf0:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  807cf4:	080384c0 	call	80384c <strlen>
  807cf8:	14800044 	addi	r18,r2,1
  807cfc:	00000406 	br	807d10 <alt_find_dev+0x40>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  807d00:	81000217 	ldw	r4,8(r16)
  807d04:	0807eb40 	call	807eb4 <memcmp>
  807d08:	10000526 	beq	r2,zero,807d20 <alt_find_dev+0x50>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  807d0c:	84000017 	ldw	r16,0(r16)
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  807d10:	980b883a 	mov	r5,r19
  807d14:	900d883a 	mov	r6,r18
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  807d18:	847ff91e 	bne	r16,r17,807d00 <alt_find_dev+0x30>
  807d1c:	0021883a 	mov	r16,zero
  }
  
  /* No match found */
  
  return NULL;
}
  807d20:	8005883a 	mov	r2,r16
  807d24:	dfc00417 	ldw	ra,16(sp)
  807d28:	dcc00317 	ldw	r19,12(sp)
  807d2c:	dc800217 	ldw	r18,8(sp)
  807d30:	dc400117 	ldw	r17,4(sp)
  807d34:	dc000017 	ldw	r16,0(sp)
  807d38:	dec00504 	addi	sp,sp,20
  807d3c:	f800283a 	ret

00807d40 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  807d40:	defffc04 	addi	sp,sp,-16
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  807d44:	00802074 	movhi	r2,129
  807d48:	10a32004 	addi	r2,r2,-29568
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  807d4c:	dc400115 	stw	r17,4(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  807d50:	14400017 	ldw	r17,0(r2)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  807d54:	dc800215 	stw	r18,8(sp)
  807d58:	2025883a 	mov	r18,r4
  807d5c:	dfc00315 	stw	ra,12(sp)
  807d60:	dc000015 	stw	r16,0(sp)
  807d64:	00001206 	br	807db0 <alt_find_file+0x70>
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
  807d68:	8c000217 	ldw	r16,8(r17)
  807d6c:	8009883a 	mov	r4,r16
  807d70:	080384c0 	call	80384c <strlen>
  807d74:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  807d78:	8085883a 	add	r2,r16,r2
  807d7c:	10bfffc7 	ldb	r2,-1(r2)
  807d80:	00c00bc4 	movi	r3,47
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807d84:	8009883a 	mov	r4,r16
  807d88:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  807d8c:	10c0011e 	bne	r2,r3,807d94 <alt_find_file+0x54>
    {
      len -= 1;
  807d90:	31bfffc4 	addi	r6,r6,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  807d94:	9185883a 	add	r2,r18,r6
  807d98:	10800007 	ldb	r2,0(r2)
  807d9c:	10c00126 	beq	r2,r3,807da4 <alt_find_file+0x64>
  807da0:	1000021e 	bne	r2,zero,807dac <alt_find_file+0x6c>
  807da4:	0807eb40 	call	807eb4 <memcmp>
  807da8:	10000526 	beq	r2,zero,807dc0 <alt_find_file+0x80>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  807dac:	8c400017 	ldw	r17,0(r17)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  807db0:	00802074 	movhi	r2,129
  807db4:	10a32004 	addi	r2,r2,-29568
  807db8:	88bfeb1e 	bne	r17,r2,807d68 <alt_find_file+0x28>
  807dbc:	0023883a 	mov	r17,zero
  }
  
  /* No match found */
  
  return NULL;     
}
  807dc0:	8805883a 	mov	r2,r17
  807dc4:	dfc00317 	ldw	ra,12(sp)
  807dc8:	dc800217 	ldw	r18,8(sp)
  807dcc:	dc400117 	ldw	r17,4(sp)
  807dd0:	dc000017 	ldw	r16,0(sp)
  807dd4:	dec00404 	addi	sp,sp,16
  807dd8:	f800283a 	ret

00807ddc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  807ddc:	defffd04 	addi	sp,sp,-12

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  807de0:	00802074 	movhi	r2,129
  807de4:	10a44204 	addi	r2,r2,-28408
  807de8:	dc000115 	stw	r16,4(sp)
  807dec:	2021883a 	mov	r16,r4
  807df0:	11000017 	ldw	r4,0(r2)
  807df4:	000b883a 	mov	r5,zero
  807df8:	d80d883a 	mov	r6,sp
  807dfc:	dfc00215 	stw	ra,8(sp)
  807e00:	0805d900 	call	805d90 <OSSemPend>
  807e04:	01002074 	movhi	r4,129
  807e08:	21229a04 	addi	r4,r4,-30104
  807e0c:	0007883a 	mov	r3,zero
  807e10:	200b883a 	mov	r5,r4
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
  807e14:	20800017 	ldw	r2,0(r4)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807e18:	21000304 	addi	r4,r4,12
  {
    if (!alt_fd_list[i].dev)
  807e1c:	10000a1e 	bne	r2,zero,807e48 <alt_get_fd+0x6c>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  807e20:	01002074 	movhi	r4,129
  807e24:	21232404 	addi	r4,r4,-29552
  807e28:	20800017 	ldw	r2,0(r4)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  807e2c:	2c000015 	stw	r16,0(r5)
      if (i > alt_max_fd)
  807e30:	10c00216 	blt	r2,r3,807e3c <alt_get_fd+0x60>
  807e34:	1821883a 	mov	r16,r3
  807e38:	00000806 	br	807e5c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
  807e3c:	1821883a 	mov	r16,r3
  807e40:	20c00015 	stw	r3,0(r4)
  807e44:	00000506 	br	807e5c <alt_get_fd+0x80>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  807e48:	18c00044 	addi	r3,r3,1
  807e4c:	00800804 	movi	r2,32
  807e50:	29400304 	addi	r5,r5,12
  807e54:	18bfef1e 	bne	r3,r2,807e14 <alt_get_fd+0x38>
  807e58:	043ffa04 	movi	r16,-24
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  807e5c:	00802074 	movhi	r2,129
  807e60:	10a44204 	addi	r2,r2,-28408
  807e64:	11000017 	ldw	r4,0(r2)
  807e68:	0805c700 	call	805c70 <OSSemPost>

  return rc;
}
  807e6c:	8005883a 	mov	r2,r16
  807e70:	dfc00217 	ldw	ra,8(sp)
  807e74:	dc000117 	ldw	r16,4(sp)
  807e78:	dec00304 	addi	sp,sp,12
  807e7c:	f800283a 	ret

00807e80 <atexit>:
  807e80:	200b883a 	mov	r5,r4
  807e84:	000d883a 	mov	r6,zero
  807e88:	0009883a 	mov	r4,zero
  807e8c:	000f883a 	mov	r7,zero
  807e90:	0807fd41 	jmpi	807fd4 <__register_exitproc>

00807e94 <exit>:
  807e94:	defffe04 	addi	sp,sp,-8
  807e98:	dc400015 	stw	r17,0(sp)
  807e9c:	000b883a 	mov	r5,zero
  807ea0:	2023883a 	mov	r17,r4
  807ea4:	dfc00115 	stw	ra,4(sp)
  807ea8:	08081440 	call	808144 <__call_exitprocs>
  807eac:	8809883a 	mov	r4,r17
  807eb0:	08084500 	call	808450 <_exit>

00807eb4 <memcmp>:
  807eb4:	31ffffc4 	addi	r7,r6,-1
  807eb8:	3000061e 	bne	r6,zero,807ed4 <memcmp+0x20>
  807ebc:	00000a06 	br	807ee8 <memcmp+0x34>
  807ec0:	39ffffc4 	addi	r7,r7,-1
  807ec4:	00bfffc4 	movi	r2,-1
  807ec8:	21000044 	addi	r4,r4,1
  807ecc:	29400044 	addi	r5,r5,1
  807ed0:	38800526 	beq	r7,r2,807ee8 <memcmp+0x34>
  807ed4:	20c00003 	ldbu	r3,0(r4)
  807ed8:	28800003 	ldbu	r2,0(r5)
  807edc:	18bff826 	beq	r3,r2,807ec0 <memcmp+0xc>
  807ee0:	1885c83a 	sub	r2,r3,r2
  807ee4:	f800283a 	ret
  807ee8:	0005883a 	mov	r2,zero
  807eec:	f800283a 	ret

00807ef0 <putc>:
  807ef0:	defffd04 	addi	sp,sp,-12
  807ef4:	00802074 	movhi	r2,129
  807ef8:	10a2ff04 	addi	r2,r2,-29700
  807efc:	dc000115 	stw	r16,4(sp)
  807f00:	2021883a 	mov	r16,r4
  807f04:	11000017 	ldw	r4,0(r2)
  807f08:	dc000005 	stb	r16,0(sp)
  807f0c:	00802034 	movhi	r2,128
  807f10:	108de404 	addi	r2,r2,14224
  807f14:	dfc00215 	stw	ra,8(sp)
  807f18:	28800115 	stw	r2,4(r5)
  807f1c:	d80d883a 	mov	r6,sp
  807f20:	01c00044 	movi	r7,1
  807f24:	103ee83a 	callr	r2
  807f28:	1007883a 	mov	r3,r2
  807f2c:	00bfffc4 	movi	r2,-1
  807f30:	18800526 	beq	r3,r2,807f48 <putc+0x58>
  807f34:	8005883a 	mov	r2,r16
  807f38:	dfc00217 	ldw	ra,8(sp)
  807f3c:	dc000117 	ldw	r16,4(sp)
  807f40:	dec00304 	addi	sp,sp,12
  807f44:	f800283a 	ret
  807f48:	1821883a 	mov	r16,r3
  807f4c:	8005883a 	mov	r2,r16
  807f50:	dfc00217 	ldw	ra,8(sp)
  807f54:	dc000117 	ldw	r16,4(sp)
  807f58:	dec00304 	addi	sp,sp,12
  807f5c:	f800283a 	ret

00807f60 <_putc_r>:
  807f60:	00802074 	movhi	r2,129
  807f64:	10a2ff04 	addi	r2,r2,-29700
  807f68:	defffd04 	addi	sp,sp,-12
  807f6c:	11000017 	ldw	r4,0(r2)
  807f70:	00802034 	movhi	r2,128
  807f74:	108de404 	addi	r2,r2,14224
  807f78:	30800115 	stw	r2,4(r6)
  807f7c:	dc000115 	stw	r16,4(sp)
  807f80:	2821883a 	mov	r16,r5
  807f84:	dfc00215 	stw	ra,8(sp)
  807f88:	300b883a 	mov	r5,r6
  807f8c:	01c00044 	movi	r7,1
  807f90:	d80d883a 	mov	r6,sp
  807f94:	dc000005 	stb	r16,0(sp)
  807f98:	103ee83a 	callr	r2
  807f9c:	1007883a 	mov	r3,r2
  807fa0:	00bfffc4 	movi	r2,-1
  807fa4:	18800526 	beq	r3,r2,807fbc <_putc_r+0x5c>
  807fa8:	8005883a 	mov	r2,r16
  807fac:	dfc00217 	ldw	ra,8(sp)
  807fb0:	dc000117 	ldw	r16,4(sp)
  807fb4:	dec00304 	addi	sp,sp,12
  807fb8:	f800283a 	ret
  807fbc:	1821883a 	mov	r16,r3
  807fc0:	8005883a 	mov	r2,r16
  807fc4:	dfc00217 	ldw	ra,8(sp)
  807fc8:	dc000117 	ldw	r16,4(sp)
  807fcc:	dec00304 	addi	sp,sp,12
  807fd0:	f800283a 	ret

00807fd4 <__register_exitproc>:
  807fd4:	defff904 	addi	sp,sp,-28
  807fd8:	00802074 	movhi	r2,129
  807fdc:	10a30004 	addi	r2,r2,-29696
  807fe0:	dc400115 	stw	r17,4(sp)
  807fe4:	14400017 	ldw	r17,0(r2)
  807fe8:	dc000015 	stw	r16,0(sp)
  807fec:	dd400515 	stw	r21,20(sp)
  807ff0:	8c000c17 	ldw	r16,48(r17)
  807ff4:	dd000415 	stw	r20,16(sp)
  807ff8:	dcc00315 	stw	r19,12(sp)
  807ffc:	dc800215 	stw	r18,8(sp)
  808000:	dfc00615 	stw	ra,24(sp)
  808004:	2025883a 	mov	r18,r4
  808008:	282b883a 	mov	r21,r5
  80800c:	3029883a 	mov	r20,r6
  808010:	3827883a 	mov	r19,r7
  808014:	80002626 	beq	r16,zero,8080b0 <__register_exitproc+0xdc>
  808018:	81400117 	ldw	r5,4(r16)
  80801c:	008007c4 	movi	r2,31
  808020:	11403716 	blt	r2,r5,808100 <__register_exitproc+0x12c>
  808024:	90002026 	beq	r18,zero,8080a8 <__register_exitproc+0xd4>
  808028:	81802217 	ldw	r6,136(r16)
  80802c:	30002926 	beq	r6,zero,8080d4 <__register_exitproc+0x100>
  808030:	81400117 	ldw	r5,4(r16)
  808034:	00c00044 	movi	r3,1
  808038:	31004017 	ldw	r4,256(r6)
  80803c:	1946983a 	sll	r3,r3,r5
  808040:	2945883a 	add	r2,r5,r5
  808044:	1085883a 	add	r2,r2,r2
  808048:	1185883a 	add	r2,r2,r6
  80804c:	20c8b03a 	or	r4,r4,r3
  808050:	14c02015 	stw	r19,128(r2)
  808054:	15000015 	stw	r20,0(r2)
  808058:	00800084 	movi	r2,2
  80805c:	31004015 	stw	r4,256(r6)
  808060:	90801826 	beq	r18,r2,8080c4 <__register_exitproc+0xf0>
  808064:	2945883a 	add	r2,r5,r5
  808068:	1085883a 	add	r2,r2,r2
  80806c:	1405883a 	add	r2,r2,r16
  808070:	28c00044 	addi	r3,r5,1
  808074:	0009883a 	mov	r4,zero
  808078:	15400215 	stw	r21,8(r2)
  80807c:	80c00115 	stw	r3,4(r16)
  808080:	2005883a 	mov	r2,r4
  808084:	dfc00617 	ldw	ra,24(sp)
  808088:	dd400517 	ldw	r21,20(sp)
  80808c:	dd000417 	ldw	r20,16(sp)
  808090:	dcc00317 	ldw	r19,12(sp)
  808094:	dc800217 	ldw	r18,8(sp)
  808098:	dc400117 	ldw	r17,4(sp)
  80809c:	dc000017 	ldw	r16,0(sp)
  8080a0:	dec00704 	addi	sp,sp,28
  8080a4:	f800283a 	ret
  8080a8:	81400117 	ldw	r5,4(r16)
  8080ac:	003fed06 	br	808064 <__register_exitproc+0x90>
  8080b0:	00802074 	movhi	r2,129
  8080b4:	10b82804 	addi	r2,r2,-8032
  8080b8:	1021883a 	mov	r16,r2
  8080bc:	88800c15 	stw	r2,48(r17)
  8080c0:	003fd506 	br	808018 <__register_exitproc+0x44>
  8080c4:	30804117 	ldw	r2,260(r6)
  8080c8:	10c4b03a 	or	r2,r2,r3
  8080cc:	30804115 	stw	r2,260(r6)
  8080d0:	003fe406 	br	808064 <__register_exitproc+0x90>
  8080d4:	00800034 	movhi	r2,0
  8080d8:	10800004 	addi	r2,r2,0
  8080dc:	10000b26 	beq	r2,zero,80810c <__register_exitproc+0x138>
  8080e0:	01004204 	movi	r4,264
  8080e4:	103ee83a 	callr	r2
  8080e8:	10000826 	beq	r2,zero,80810c <__register_exitproc+0x138>
  8080ec:	100d883a 	mov	r6,r2
  8080f0:	10004015 	stw	zero,256(r2)
  8080f4:	10004115 	stw	zero,260(r2)
  8080f8:	80802215 	stw	r2,136(r16)
  8080fc:	003fcc06 	br	808030 <__register_exitproc+0x5c>
  808100:	00800034 	movhi	r2,0
  808104:	10800004 	addi	r2,r2,0
  808108:	1000021e 	bne	r2,zero,808114 <__register_exitproc+0x140>
  80810c:	013fffc4 	movi	r4,-1
  808110:	003fdb06 	br	808080 <__register_exitproc+0xac>
  808114:	01002304 	movi	r4,140
  808118:	103ee83a 	callr	r2
  80811c:	1007883a 	mov	r3,r2
  808120:	103ffa26 	beq	r2,zero,80810c <__register_exitproc+0x138>
  808124:	88800c17 	ldw	r2,48(r17)
  808128:	1821883a 	mov	r16,r3
  80812c:	18000115 	stw	zero,4(r3)
  808130:	18800015 	stw	r2,0(r3)
  808134:	88c00c15 	stw	r3,48(r17)
  808138:	903fdb26 	beq	r18,zero,8080a8 <__register_exitproc+0xd4>
  80813c:	003fba06 	br	808028 <__register_exitproc+0x54>

00808140 <register_fini>:
  808140:	f800283a 	ret

00808144 <__call_exitprocs>:
  808144:	defff304 	addi	sp,sp,-52
  808148:	00802074 	movhi	r2,129
  80814c:	10a30004 	addi	r2,r2,-29696
  808150:	df000b15 	stw	fp,44(sp)
  808154:	17000017 	ldw	fp,0(r2)
  808158:	00800034 	movhi	r2,0
  80815c:	10800004 	addi	r2,r2,0
  808160:	1005003a 	cmpeq	r2,r2,zero
  808164:	d8800215 	stw	r2,8(sp)
  808168:	e0800c04 	addi	r2,fp,48
  80816c:	dd800915 	stw	r22,36(sp)
  808170:	dd400815 	stw	r21,32(sp)
  808174:	dfc00c15 	stw	ra,48(sp)
  808178:	ddc00a15 	stw	r23,40(sp)
  80817c:	dd000715 	stw	r20,28(sp)
  808180:	dcc00615 	stw	r19,24(sp)
  808184:	dc800515 	stw	r18,20(sp)
  808188:	dc400415 	stw	r17,16(sp)
  80818c:	dc000315 	stw	r16,12(sp)
  808190:	282d883a 	mov	r22,r5
  808194:	d9000115 	stw	r4,4(sp)
  808198:	d8800015 	stw	r2,0(sp)
  80819c:	282b003a 	cmpeq	r21,r5,zero
  8081a0:	e4400c17 	ldw	r17,48(fp)
  8081a4:	88001226 	beq	r17,zero,8081f0 <__call_exitprocs+0xac>
  8081a8:	ddc00017 	ldw	r23,0(sp)
  8081ac:	88800117 	ldw	r2,4(r17)
  8081b0:	8c802217 	ldw	r18,136(r17)
  8081b4:	143fffc4 	addi	r16,r2,-1
  8081b8:	80000b16 	blt	r16,zero,8081e8 <__call_exitprocs+0xa4>
  8081bc:	9027003a 	cmpeq	r19,r18,zero
  8081c0:	a800171e 	bne	r21,zero,808220 <__call_exitprocs+0xdc>
  8081c4:	9800051e 	bne	r19,zero,8081dc <__call_exitprocs+0x98>
  8081c8:	8409883a 	add	r4,r16,r16
  8081cc:	2105883a 	add	r2,r4,r4
  8081d0:	1485883a 	add	r2,r2,r18
  8081d4:	10c02017 	ldw	r3,128(r2)
  8081d8:	b0c01226 	beq	r22,r3,808224 <__call_exitprocs+0xe0>
  8081dc:	843fffc4 	addi	r16,r16,-1
  8081e0:	00bfffc4 	movi	r2,-1
  8081e4:	80bff61e 	bne	r16,r2,8081c0 <__call_exitprocs+0x7c>
  8081e8:	d8800217 	ldw	r2,8(sp)
  8081ec:	10003226 	beq	r2,zero,8082b8 <__call_exitprocs+0x174>
  8081f0:	dfc00c17 	ldw	ra,48(sp)
  8081f4:	df000b17 	ldw	fp,44(sp)
  8081f8:	ddc00a17 	ldw	r23,40(sp)
  8081fc:	dd800917 	ldw	r22,36(sp)
  808200:	dd400817 	ldw	r21,32(sp)
  808204:	dd000717 	ldw	r20,28(sp)
  808208:	dcc00617 	ldw	r19,24(sp)
  80820c:	dc800517 	ldw	r18,20(sp)
  808210:	dc400417 	ldw	r17,16(sp)
  808214:	dc000317 	ldw	r16,12(sp)
  808218:	dec00d04 	addi	sp,sp,52
  80821c:	f800283a 	ret
  808220:	8409883a 	add	r4,r16,r16
  808224:	88c00117 	ldw	r3,4(r17)
  808228:	2105883a 	add	r2,r4,r4
  80822c:	1445883a 	add	r2,r2,r17
  808230:	18ffffc4 	addi	r3,r3,-1
  808234:	11800217 	ldw	r6,8(r2)
  808238:	1c001826 	beq	r3,r16,80829c <__call_exitprocs+0x158>
  80823c:	10000215 	stw	zero,8(r2)
  808240:	303fe626 	beq	r6,zero,8081dc <__call_exitprocs+0x98>
  808244:	8d000117 	ldw	r20,4(r17)
  808248:	9800121e 	bne	r19,zero,808294 <__call_exitprocs+0x150>
  80824c:	00c00044 	movi	r3,1
  808250:	1c06983a 	sll	r3,r3,r16
  808254:	90804017 	ldw	r2,256(r18)
  808258:	1884703a 	and	r2,r3,r2
  80825c:	10000d26 	beq	r2,zero,808294 <__call_exitprocs+0x150>
  808260:	90804117 	ldw	r2,260(r18)
  808264:	1884703a 	and	r2,r3,r2
  808268:	10000e1e 	bne	r2,zero,8082a4 <__call_exitprocs+0x160>
  80826c:	2105883a 	add	r2,r4,r4
  808270:	1485883a 	add	r2,r2,r18
  808274:	11400017 	ldw	r5,0(r2)
  808278:	d9000117 	ldw	r4,4(sp)
  80827c:	303ee83a 	callr	r6
  808280:	88800117 	ldw	r2,4(r17)
  808284:	a0bfc61e 	bne	r20,r2,8081a0 <__call_exitprocs+0x5c>
  808288:	b8800017 	ldw	r2,0(r23)
  80828c:	147fd326 	beq	r2,r17,8081dc <__call_exitprocs+0x98>
  808290:	003fc306 	br	8081a0 <__call_exitprocs+0x5c>
  808294:	303ee83a 	callr	r6
  808298:	003ff906 	br	808280 <__call_exitprocs+0x13c>
  80829c:	8c000115 	stw	r16,4(r17)
  8082a0:	003fe706 	br	808240 <__call_exitprocs+0xfc>
  8082a4:	2105883a 	add	r2,r4,r4
  8082a8:	1485883a 	add	r2,r2,r18
  8082ac:	11000017 	ldw	r4,0(r2)
  8082b0:	303ee83a 	callr	r6
  8082b4:	003ff206 	br	808280 <__call_exitprocs+0x13c>
  8082b8:	88800117 	ldw	r2,4(r17)
  8082bc:	10000b1e 	bne	r2,zero,8082ec <__call_exitprocs+0x1a8>
  8082c0:	89000017 	ldw	r4,0(r17)
  8082c4:	20000a26 	beq	r4,zero,8082f0 <__call_exitprocs+0x1ac>
  8082c8:	b9000015 	stw	r4,0(r23)
  8082cc:	90000226 	beq	r18,zero,8082d8 <__call_exitprocs+0x194>
  8082d0:	9009883a 	mov	r4,r18
  8082d4:	00000000 	call	0 <__alt_mem_sram>
  8082d8:	8809883a 	mov	r4,r17
  8082dc:	00000000 	call	0 <__alt_mem_sram>
  8082e0:	bc400017 	ldw	r17,0(r23)
  8082e4:	883fb11e 	bne	r17,zero,8081ac <__call_exitprocs+0x68>
  8082e8:	003fc106 	br	8081f0 <__call_exitprocs+0xac>
  8082ec:	89000017 	ldw	r4,0(r17)
  8082f0:	882f883a 	mov	r23,r17
  8082f4:	2023883a 	mov	r17,r4
  8082f8:	883fac1e 	bne	r17,zero,8081ac <__call_exitprocs+0x68>
  8082fc:	003fbc06 	br	8081f0 <__call_exitprocs+0xac>

00808300 <__gedf2>:
  808300:	deffef04 	addi	sp,sp,-68
  808304:	dc400f15 	stw	r17,60(sp)
  808308:	dc400404 	addi	r17,sp,16
  80830c:	2005883a 	mov	r2,r4
  808310:	2807883a 	mov	r3,r5
  808314:	dc000e15 	stw	r16,56(sp)
  808318:	d809883a 	mov	r4,sp
  80831c:	880b883a 	mov	r5,r17
  808320:	dc000904 	addi	r16,sp,36
  808324:	d8c00115 	stw	r3,4(sp)
  808328:	d8800015 	stw	r2,0(sp)
  80832c:	d9800215 	stw	r6,8(sp)
  808330:	dfc01015 	stw	ra,64(sp)
  808334:	d9c00315 	stw	r7,12(sp)
  808338:	0802e800 	call	802e80 <__unpack_d>
  80833c:	d9000204 	addi	r4,sp,8
  808340:	800b883a 	mov	r5,r16
  808344:	0802e800 	call	802e80 <__unpack_d>
  808348:	d8800417 	ldw	r2,16(sp)
  80834c:	00c00044 	movi	r3,1
  808350:	01bfffc4 	movi	r6,-1
  808354:	1880062e 	bgeu	r3,r2,808370 <__gedf2+0x70>
  808358:	d8800917 	ldw	r2,36(sp)
  80835c:	8809883a 	mov	r4,r17
  808360:	800b883a 	mov	r5,r16
  808364:	1880022e 	bgeu	r3,r2,808370 <__gedf2+0x70>
  808368:	08083880 	call	808388 <__fpcmp_parts_d>
  80836c:	100d883a 	mov	r6,r2
  808370:	3005883a 	mov	r2,r6
  808374:	dfc01017 	ldw	ra,64(sp)
  808378:	dc400f17 	ldw	r17,60(sp)
  80837c:	dc000e17 	ldw	r16,56(sp)
  808380:	dec01104 	addi	sp,sp,68
  808384:	f800283a 	ret

00808388 <__fpcmp_parts_d>:
  808388:	21800017 	ldw	r6,0(r4)
  80838c:	00c00044 	movi	r3,1
  808390:	19800a2e 	bgeu	r3,r6,8083bc <__fpcmp_parts_d+0x34>
  808394:	28800017 	ldw	r2,0(r5)
  808398:	1880082e 	bgeu	r3,r2,8083bc <__fpcmp_parts_d+0x34>
  80839c:	00c00104 	movi	r3,4
  8083a0:	30c02626 	beq	r6,r3,80843c <__fpcmp_parts_d+0xb4>
  8083a4:	10c02226 	beq	r2,r3,808430 <__fpcmp_parts_d+0xa8>
  8083a8:	00c00084 	movi	r3,2
  8083ac:	30c00526 	beq	r6,r3,8083c4 <__fpcmp_parts_d+0x3c>
  8083b0:	10c0071e 	bne	r2,r3,8083d0 <__fpcmp_parts_d+0x48>
  8083b4:	20800117 	ldw	r2,4(r4)
  8083b8:	1000091e 	bne	r2,zero,8083e0 <__fpcmp_parts_d+0x58>
  8083bc:	00800044 	movi	r2,1
  8083c0:	f800283a 	ret
  8083c4:	10c01a1e 	bne	r2,r3,808430 <__fpcmp_parts_d+0xa8>
  8083c8:	0005883a 	mov	r2,zero
  8083cc:	f800283a 	ret
  8083d0:	22000117 	ldw	r8,4(r4)
  8083d4:	28800117 	ldw	r2,4(r5)
  8083d8:	40800326 	beq	r8,r2,8083e8 <__fpcmp_parts_d+0x60>
  8083dc:	403ff726 	beq	r8,zero,8083bc <__fpcmp_parts_d+0x34>
  8083e0:	00bfffc4 	movi	r2,-1
  8083e4:	f800283a 	ret
  8083e8:	20c00217 	ldw	r3,8(r4)
  8083ec:	28800217 	ldw	r2,8(r5)
  8083f0:	10fffa16 	blt	r2,r3,8083dc <__fpcmp_parts_d+0x54>
  8083f4:	18800916 	blt	r3,r2,80841c <__fpcmp_parts_d+0x94>
  8083f8:	21c00417 	ldw	r7,16(r4)
  8083fc:	28c00417 	ldw	r3,16(r5)
  808400:	21800317 	ldw	r6,12(r4)
  808404:	28800317 	ldw	r2,12(r5)
  808408:	19fff436 	bltu	r3,r7,8083dc <__fpcmp_parts_d+0x54>
  80840c:	38c00526 	beq	r7,r3,808424 <__fpcmp_parts_d+0x9c>
  808410:	38c00236 	bltu	r7,r3,80841c <__fpcmp_parts_d+0x94>
  808414:	19ffec1e 	bne	r3,r7,8083c8 <__fpcmp_parts_d+0x40>
  808418:	30bfeb2e 	bgeu	r6,r2,8083c8 <__fpcmp_parts_d+0x40>
  80841c:	403fe71e 	bne	r8,zero,8083bc <__fpcmp_parts_d+0x34>
  808420:	003fef06 	br	8083e0 <__fpcmp_parts_d+0x58>
  808424:	11bffa2e 	bgeu	r2,r6,808410 <__fpcmp_parts_d+0x88>
  808428:	403fe426 	beq	r8,zero,8083bc <__fpcmp_parts_d+0x34>
  80842c:	003fec06 	br	8083e0 <__fpcmp_parts_d+0x58>
  808430:	28800117 	ldw	r2,4(r5)
  808434:	103fe11e 	bne	r2,zero,8083bc <__fpcmp_parts_d+0x34>
  808438:	003fe906 	br	8083e0 <__fpcmp_parts_d+0x58>
  80843c:	11bfdd1e 	bne	r2,r6,8083b4 <__fpcmp_parts_d+0x2c>
  808440:	28c00117 	ldw	r3,4(r5)
  808444:	20800117 	ldw	r2,4(r4)
  808448:	1885c83a 	sub	r2,r3,r2
  80844c:	f800283a 	ret

00808450 <_exit>:
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  808450:	00802074 	movhi	r2,129
  808454:	10a42e04 	addi	r2,r2,-28488
  808458:	10000005 	stb	zero,0(r2)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80845c:	20000226 	beq	r4,zero,808468 <_exit+0x18>
    ALT_SIM_FAIL();
  808460:	002af070 	cmpltui	zero,zero,43969
  808464:	00000106 	br	80846c <_exit+0x1c>
  } else {
    ALT_SIM_PASS();
  808468:	002af0b0 	cmpltui	zero,zero,43970
  80846c:	003fff06 	br	80846c <_exit+0x1c>
  808470:	00808140 	call	80814 <OSCtxSw_SWITCH_PC+0x807dc>
